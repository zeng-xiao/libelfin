
find-pc:     file format elf64-littleriscv


Disassembly of section .plt:

0000000000016570 <_PROCEDURE_LINKAGE_TABLE_>:
   16570:	97 43 02 00 33 03 c3 41 03 be 03 aa 13 03 43 fd     .C..3..A......C.
   16580:	93 82 03 aa 13 53 13 00 83 b2 82 00 67 00 0e 00     .....S......g...

0000000000016590 <operator new[](unsigned long)@plt>:
   16590:	00024e17          	auipc	t3,0x24
   16594:	a90e3e03          	ld	t3,-1392(t3) # 3a020 <operator new[](unsigned long)@GLIBCXX_3.4>
   16598:	000e0367          	jalr	t1,0(t3)
   1659c:	00000013          	addi	zero,zero,0

00000000000165a0 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt>:
   165a0:	00024e17          	auipc	t3,0x24
   165a4:	a88e3e03          	ld	t3,-1400(t3) # 3a028 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@GLIBCXX_3.4>
   165a8:	000e0367          	jalr	t1,0(t3)
   165ac:	00000013          	addi	zero,zero,0

00000000000165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>:
   165b0:	00024e17          	auipc	t3,0x24
   165b4:	a80e3e03          	ld	t3,-1408(t3) # 3a030 <__gnu_cxx::__atomic_add(int volatile*, int)@GLIBCXX_3.4>
   165b8:	000e0367          	jalr	t1,0(t3)
   165bc:	00000013          	addi	zero,zero,0

00000000000165c0 <exit@plt>:
   165c0:	00024e17          	auipc	t3,0x24
   165c4:	a78e3e03          	ld	t3,-1416(t3) # 3a038 <exit@GLIBC_2.27>
   165c8:	000e0367          	jalr	t1,0(t3)
   165cc:	00000013          	addi	zero,zero,0

00000000000165d0 <strcmp@plt>:
   165d0:	00024e17          	auipc	t3,0x24
   165d4:	a70e3e03          	ld	t3,-1424(t3) # 3a040 <strcmp@GLIBC_2.27>
   165d8:	000e0367          	jalr	t1,0(t3)
   165dc:	00000013          	addi	zero,zero,0

00000000000165e0 <__bswapsi2@plt>:
   165e0:	00024e17          	auipc	t3,0x24
   165e4:	a68e3e03          	ld	t3,-1432(t3) # 3a048 <__bswapsi2@GCC_4.3.0>
   165e8:	000e0367          	jalr	t1,0(t3)
   165ec:	00000013          	addi	zero,zero,0

00000000000165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>:
   165f0:	00024e17          	auipc	t3,0x24
   165f4:	a60e3e03          	ld	t3,-1440(t3) # 3a050 <__gnu_cxx::__exchange_and_add(int volatile*, int)@GLIBCXX_3.4>
   165f8:	000e0367          	jalr	t1,0(t3)
   165fc:	00000013          	addi	zero,zero,0

0000000000016600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>:
   16600:	00024e17          	auipc	t3,0x24
   16604:	a58e3e03          	ld	t3,-1448(t3) # 3a058 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@GLIBCXX_3.4.21>
   16608:	000e0367          	jalr	t1,0(t3)
   1660c:	00000013          	addi	zero,zero,0

0000000000016610 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>:
   16610:	00024e17          	auipc	t3,0x24
   16614:	a50e3e03          	ld	t3,-1456(t3) # 3a060 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@GLIBCXX_3.4.21>
   16618:	000e0367          	jalr	t1,0(t3)
   1661c:	00000013          	addi	zero,zero,0

0000000000016620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@plt>:
   16620:	00024e17          	auipc	t3,0x24
   16624:	a48e3e03          	ld	t3,-1464(t3) # 3a068 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@GLIBCXX_3.4.21>
   16628:	000e0367          	jalr	t1,0(t3)
   1662c:	00000013          	addi	zero,zero,0

0000000000016630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>:
   16630:	00024e17          	auipc	t3,0x24
   16634:	a40e3e03          	ld	t3,-1472(t3) # 3a070 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@GLIBCXX_3.4.21>
   16638:	000e0367          	jalr	t1,0(t3)
   1663c:	00000013          	addi	zero,zero,0

0000000000016640 <__libc_start_main@plt>:
   16640:	00024e17          	auipc	t3,0x24
   16644:	a38e3e03          	ld	t3,-1480(t3) # 3a078 <__libc_start_main@GLIBC_2.27>
   16648:	000e0367          	jalr	t1,0(t3)
   1664c:	00000013          	addi	zero,zero,0

0000000000016650 <std::__throw_bad_alloc()@plt>:
   16650:	00024e17          	auipc	t3,0x24
   16654:	a30e3e03          	ld	t3,-1488(t3) # 3a080 <std::__throw_bad_alloc()@GLIBCXX_3.4>
   16658:	000e0367          	jalr	t1,0(t3)
   1665c:	00000013          	addi	zero,zero,0

0000000000016660 <std::runtime_error::runtime_error(char const*)@plt>:
   16660:	00024e17          	auipc	t3,0x24
   16664:	a28e3e03          	ld	t3,-1496(t3) # 3a088 <std::runtime_error::runtime_error(char const*)@GLIBCXX_3.4.21>
   16668:	000e0367          	jalr	t1,0(t3)
   1666c:	00000013          	addi	zero,zero,0

0000000000016670 <__cxa_begin_catch@plt>:
   16670:	00024e17          	auipc	t3,0x24
   16674:	a20e3e03          	ld	t3,-1504(t3) # 3a090 <__cxa_begin_catch@CXXABI_1.3>
   16678:	000e0367          	jalr	t1,0(t3)
   1667c:	00000013          	addi	zero,zero,0

0000000000016680 <strlen@plt>:
   16680:	00024e17          	auipc	t3,0x24
   16684:	a18e3e03          	ld	t3,-1512(t3) # 3a098 <strlen@GLIBC_2.27>
   16688:	000e0367          	jalr	t1,0(t3)
   1668c:	00000013          	addi	zero,zero,0

0000000000016690 <__cxa_allocate_exception@plt>:
   16690:	00024e17          	auipc	t3,0x24
   16694:	a10e3e03          	ld	t3,-1520(t3) # 3a0a0 <__cxa_allocate_exception@CXXABI_1.3>
   16698:	000e0367          	jalr	t1,0(t3)
   1669c:	00000013          	addi	zero,zero,0

00000000000166a0 <std::__throw_length_error(char const*)@plt>:
   166a0:	00024e17          	auipc	t3,0x24
   166a4:	a08e3e03          	ld	t3,-1528(t3) # 3a0a8 <std::__throw_length_error(char const*)@GLIBCXX_3.4>
   166a8:	000e0367          	jalr	t1,0(t3)
   166ac:	00000013          	addi	zero,zero,0

00000000000166b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   166b0:	00024e17          	auipc	t3,0x24
   166b4:	a00e3e03          	ld	t3,-1536(t3) # 3a0b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   166b8:	000e0367          	jalr	t1,0(t3)
   166bc:	00000013          	addi	zero,zero,0

00000000000166c0 <std::_V2::system_category()@plt>:
   166c0:	00024e17          	auipc	t3,0x24
   166c4:	9f8e3e03          	ld	t3,-1544(t3) # 3a0b8 <std::_V2::system_category()@GLIBCXX_3.4.21>
   166c8:	000e0367          	jalr	t1,0(t3)
   166cc:	00000013          	addi	zero,zero,0

00000000000166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>:
   166d0:	00024e17          	auipc	t3,0x24
   166d4:	9f0e3e03          	ld	t3,-1552(t3) # 3a0c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@GLIBCXX_3.4.21>
   166d8:	000e0367          	jalr	t1,0(t3)
   166dc:	00000013          	addi	zero,zero,0

00000000000166e0 <open@plt>:
   166e0:	00024e17          	auipc	t3,0x24
   166e4:	9e8e3e03          	ld	t3,-1560(t3) # 3a0c8 <open@GLIBC_2.27>
   166e8:	000e0367          	jalr	t1,0(t3)
   166ec:	00000013          	addi	zero,zero,0

00000000000166f0 <std::__throw_invalid_argument(char const*)@plt>:
   166f0:	00024e17          	auipc	t3,0x24
   166f4:	9e0e3e03          	ld	t3,-1568(t3) # 3a0d0 <std::__throw_invalid_argument(char const*)@GLIBCXX_3.4>
   166f8:	000e0367          	jalr	t1,0(t3)
   166fc:	00000013          	addi	zero,zero,0

0000000000016700 <__cxa_guard_release@plt>:
   16700:	00024e17          	auipc	t3,0x24
   16704:	9d8e3e03          	ld	t3,-1576(t3) # 3a0d8 <__cxa_guard_release@CXXABI_1.3>
   16708:	000e0367          	jalr	t1,0(t3)
   1670c:	00000013          	addi	zero,zero,0

0000000000016710 <strtoll@plt>:
   16710:	00024e17          	auipc	t3,0x24
   16714:	9d0e3e03          	ld	t3,-1584(t3) # 3a0e0 <strtoll@GLIBC_2.27>
   16718:	000e0367          	jalr	t1,0(t3)
   1671c:	00000013          	addi	zero,zero,0

0000000000016720 <mmap@plt>:
   16720:	00024e17          	auipc	t3,0x24
   16724:	9c8e3e03          	ld	t3,-1592(t3) # 3a0e8 <mmap@GLIBC_2.27>
   16728:	000e0367          	jalr	t1,0(t3)
   1672c:	00000013          	addi	zero,zero,0

0000000000016730 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@plt>:
   16730:	00024e17          	auipc	t3,0x24
   16734:	9c0e3e03          	ld	t3,-1600(t3) # 3a0f0 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@GLIBCXX_3.4>
   16738:	000e0367          	jalr	t1,0(t3)
   1673c:	00000013          	addi	zero,zero,0

0000000000016740 <std::__throw_logic_error(char const*)@plt>:
   16740:	00024e17          	auipc	t3,0x24
   16744:	9b8e3e03          	ld	t3,-1608(t3) # 3a0f8 <std::__throw_logic_error(char const*)@GLIBCXX_3.4>
   16748:	000e0367          	jalr	t1,0(t3)
   1674c:	00000013          	addi	zero,zero,0

0000000000016750 <__cxa_free_exception@plt>:
   16750:	00024e17          	auipc	t3,0x24
   16754:	9b0e3e03          	ld	t3,-1616(t3) # 3a100 <__cxa_free_exception@CXXABI_1.3>
   16758:	000e0367          	jalr	t1,0(t3)
   1675c:	00000013          	addi	zero,zero,0

0000000000016760 <puts@plt>:
   16760:	00024e17          	auipc	t3,0x24
   16764:	9a8e3e03          	ld	t3,-1624(t3) # 3a108 <puts@GLIBC_2.27>
   16768:	000e0367          	jalr	t1,0(t3)
   1676c:	00000013          	addi	zero,zero,0

0000000000016770 <munmap@plt>:
   16770:	00024e17          	auipc	t3,0x24
   16774:	9a0e3e03          	ld	t3,-1632(t3) # 3a110 <munmap@GLIBC_2.27>
   16778:	000e0367          	jalr	t1,0(t3)
   1677c:	00000013          	addi	zero,zero,0

0000000000016780 <std::__throw_bad_array_new_length()@plt>:
   16780:	00024e17          	auipc	t3,0x24
   16784:	998e3e03          	ld	t3,-1640(t3) # 3a118 <std::__throw_bad_array_new_length()@GLIBCXX_3.4.29>
   16788:	000e0367          	jalr	t1,0(t3)
   1678c:	00000013          	addi	zero,zero,0

0000000000016790 <__assert_fail@plt>:
   16790:	00024e17          	auipc	t3,0x24
   16794:	990e3e03          	ld	t3,-1648(t3) # 3a120 <__assert_fail@GLIBC_2.27>
   16798:	000e0367          	jalr	t1,0(t3)
   1679c:	00000013          	addi	zero,zero,0

00000000000167a0 <operator delete(void*)@plt>:
   167a0:	00024e17          	auipc	t3,0x24
   167a4:	988e3e03          	ld	t3,-1656(t3) # 3a128 <operator delete(void*)@GLIBCXX_3.4>
   167a8:	000e0367          	jalr	t1,0(t3)
   167ac:	00000013          	addi	zero,zero,0

00000000000167b0 <operator new(unsigned long)@plt>:
   167b0:	00024e17          	auipc	t3,0x24
   167b4:	980e3e03          	ld	t3,-1664(t3) # 3a130 <operator new(unsigned long)@GLIBCXX_3.4>
   167b8:	000e0367          	jalr	t1,0(t3)
   167bc:	00000013          	addi	zero,zero,0

00000000000167c0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>:
   167c0:	00024e17          	auipc	t3,0x24
   167c4:	978e3e03          	ld	t3,-1672(t3) # 3a138 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@GLIBCXX_3.4>
   167c8:	000e0367          	jalr	t1,0(t3)
   167cc:	00000013          	addi	zero,zero,0

00000000000167d0 <std::runtime_error::~runtime_error()@plt>:
   167d0:	00024e17          	auipc	t3,0x24
   167d4:	970e3e03          	ld	t3,-1680(t3) # 3a140 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   167d8:	000e0367          	jalr	t1,0(t3)
   167dc:	00000013          	addi	zero,zero,0

00000000000167e0 <__bswapdi2@plt>:
   167e0:	00024e17          	auipc	t3,0x24
   167e4:	968e3e03          	ld	t3,-1688(t3) # 3a148 <__bswapdi2@GCC_4.3.0>
   167e8:	000e0367          	jalr	t1,0(t3)
   167ec:	00000013          	addi	zero,zero,0

00000000000167f0 <__dynamic_cast@plt>:
   167f0:	00024e17          	auipc	t3,0x24
   167f4:	960e3e03          	ld	t3,-1696(t3) # 3a150 <__dynamic_cast@CXXABI_1.3>
   167f8:	000e0367          	jalr	t1,0(t3)
   167fc:	00000013          	addi	zero,zero,0

0000000000016800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>:
   16800:	00024e17          	auipc	t3,0x24
   16804:	958e3e03          	ld	t3,-1704(t3) # 3a158 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@GLIBCXX_3.4.21>
   16808:	000e0367          	jalr	t1,0(t3)
   1680c:	00000013          	addi	zero,zero,0

0000000000016810 <std::logic_error::logic_error(char const*)@plt>:
   16810:	00024e17          	auipc	t3,0x24
   16814:	950e3e03          	ld	t3,-1712(t3) # 3a160 <std::logic_error::logic_error(char const*)@GLIBCXX_3.4.21>
   16818:	000e0367          	jalr	t1,0(t3)
   1681c:	00000013          	addi	zero,zero,0

0000000000016820 <strerror@plt>:
   16820:	00024e17          	auipc	t3,0x24
   16824:	948e3e03          	ld	t3,-1720(t3) # 3a168 <strerror@GLIBC_2.27>
   16828:	000e0367          	jalr	t1,0(t3)
   1682c:	00000013          	addi	zero,zero,0

0000000000016830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16830:	00024e17          	auipc	t3,0x24
   16834:	940e3e03          	ld	t3,-1728(t3) # 3a170 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16838:	000e0367          	jalr	t1,0(t3)
   1683c:	00000013          	addi	zero,zero,0

0000000000016840 <memcpy@plt>:
   16840:	00024e17          	auipc	t3,0x24
   16844:	938e3e03          	ld	t3,-1736(t3) # 3a178 <memcpy@GLIBC_2.27>
   16848:	000e0367          	jalr	t1,0(t3)
   1684c:	00000013          	addi	zero,zero,0

0000000000016850 <operator delete[](void*)@plt>:
   16850:	00024e17          	auipc	t3,0x24
   16854:	930e3e03          	ld	t3,-1744(t3) # 3a180 <operator delete[](void*)@GLIBCXX_3.4>
   16858:	000e0367          	jalr	t1,0(t3)
   1685c:	00000013          	addi	zero,zero,0

0000000000016860 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>:
   16860:	00024e17          	auipc	t3,0x24
   16864:	928e3e03          	ld	t3,-1752(t3) # 3a188 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@GLIBCXX_3.4.18>
   16868:	000e0367          	jalr	t1,0(t3)
   1686c:	00000013          	addi	zero,zero,0

0000000000016870 <memset@plt>:
   16870:	00024e17          	auipc	t3,0x24
   16874:	920e3e03          	ld	t3,-1760(t3) # 3a190 <memset@GLIBC_2.27>
   16878:	000e0367          	jalr	t1,0(t3)
   1687c:	00000013          	addi	zero,zero,0

0000000000016880 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>:
   16880:	00024e17          	auipc	t3,0x24
   16884:	918e3e03          	ld	t3,-1768(t3) # 3a198 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@GLIBCXX_3.4.21>
   16888:	000e0367          	jalr	t1,0(t3)
   1688c:	00000013          	addi	zero,zero,0

0000000000016890 <std::runtime_error::what() const@plt>:
   16890:	00024e17          	auipc	t3,0x24
   16894:	910e3e03          	ld	t3,-1776(t3) # 3a1a0 <std::runtime_error::what() const@GLIBCXX_3.4>
   16898:	000e0367          	jalr	t1,0(t3)
   1689c:	00000013          	addi	zero,zero,0

00000000000168a0 <std::logic_error::logic_error(char const*)@plt>:
   168a0:	00024e17          	auipc	t3,0x24
   168a4:	908e3e03          	ld	t3,-1784(t3) # 3a1a8 <std::logic_error::logic_error(char const*)@GLIBCXX_3.4.21>
   168a8:	000e0367          	jalr	t1,0(t3)
   168ac:	00000013          	addi	zero,zero,0

00000000000168b0 <std::__throw_out_of_range(char const*)@plt>:
   168b0:	00024e17          	auipc	t3,0x24
   168b4:	900e3e03          	ld	t3,-1792(t3) # 3a1b0 <std::__throw_out_of_range(char const*)@GLIBCXX_3.4>
   168b8:	000e0367          	jalr	t1,0(t3)
   168bc:	00000013          	addi	zero,zero,0

00000000000168c0 <__cxa_rethrow@plt>:
   168c0:	00024e17          	auipc	t3,0x24
   168c4:	8f8e3e03          	ld	t3,-1800(t3) # 3a1b8 <__cxa_rethrow@CXXABI_1.3>
   168c8:	000e0367          	jalr	t1,0(t3)
   168cc:	00000013          	addi	zero,zero,0

00000000000168d0 <std::logic_error::what() const@plt>:
   168d0:	00024e17          	auipc	t3,0x24
   168d4:	8f0e3e03          	ld	t3,-1808(t3) # 3a1c0 <std::logic_error::what() const@GLIBCXX_3.4>
   168d8:	000e0367          	jalr	t1,0(t3)
   168dc:	00000013          	addi	zero,zero,0

00000000000168e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>:
   168e0:	00024e17          	auipc	t3,0x24
   168e4:	8e8e3e03          	ld	t3,-1816(t3) # 3a1c8 <std::__throw_out_of_range_fmt(char const*, ...)@GLIBCXX_3.4.20>
   168e8:	000e0367          	jalr	t1,0(t3)
   168ec:	00000013          	addi	zero,zero,0

00000000000168f0 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   168f0:	00024e17          	auipc	t3,0x24
   168f4:	8e0e3e03          	ld	t3,-1824(t3) # 3a1d0 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   168f8:	000e0367          	jalr	t1,0(t3)
   168fc:	00000013          	addi	zero,zero,0

0000000000016900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>:
   16900:	00024e17          	auipc	t3,0x24
   16904:	8d8e3e03          	ld	t3,-1832(t3) # 3a1d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@GLIBCXX_3.4.21>
   16908:	000e0367          	jalr	t1,0(t3)
   1690c:	00000013          	addi	zero,zero,0

0000000000016910 <lseek@plt>:
   16910:	00024e17          	auipc	t3,0x24
   16914:	8d0e3e03          	ld	t3,-1840(t3) # 3a1e0 <lseek@GLIBC_2.27>
   16918:	000e0367          	jalr	t1,0(t3)
   1691c:	00000013          	addi	zero,zero,0

0000000000016920 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16920:	00024e17          	auipc	t3,0x24
   16924:	8c8e3e03          	ld	t3,-1848(t3) # 3a1e8 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16928:	000e0367          	jalr	t1,0(t3)
   1692c:	00000013          	addi	zero,zero,0

0000000000016930 <__cxa_end_catch@plt>:
   16930:	00024e17          	auipc	t3,0x24
   16934:	8c0e3e03          	ld	t3,-1856(t3) # 3a1f0 <__cxa_end_catch@CXXABI_1.3>
   16938:	000e0367          	jalr	t1,0(t3)
   1693c:	00000013          	addi	zero,zero,0

0000000000016940 <__gxx_personality_v0@plt>:
   16940:	00024e17          	auipc	t3,0x24
   16944:	8b8e3e03          	ld	t3,-1864(t3) # 3a1f8 <__gxx_personality_v0@CXXABI_1.3>
   16948:	000e0367          	jalr	t1,0(t3)
   1694c:	00000013          	addi	zero,zero,0

0000000000016950 <strncmp@plt>:
   16950:	00024e17          	auipc	t3,0x24
   16954:	8b0e3e03          	ld	t3,-1872(t3) # 3a200 <strncmp@GLIBC_2.27>
   16958:	000e0367          	jalr	t1,0(t3)
   1695c:	00000013          	addi	zero,zero,0

0000000000016960 <__cxa_throw@plt>:
   16960:	00024e17          	auipc	t3,0x24
   16964:	8a8e3e03          	ld	t3,-1880(t3) # 3a208 <__cxa_throw@CXXABI_1.3>
   16968:	000e0367          	jalr	t1,0(t3)
   1696c:	00000013          	addi	zero,zero,0

0000000000016970 <std::range_error::range_error(char const*)@plt>:
   16970:	00024e17          	auipc	t3,0x24
   16974:	8a0e3e03          	ld	t3,-1888(t3) # 3a210 <std::range_error::range_error(char const*)@GLIBCXX_3.4.21>
   16978:	000e0367          	jalr	t1,0(t3)
   1697c:	00000013          	addi	zero,zero,0

0000000000016980 <fprintf@plt>:
   16980:	00024e17          	auipc	t3,0x24
   16984:	898e3e03          	ld	t3,-1896(t3) # 3a218 <fprintf@GLIBC_2.27>
   16988:	000e0367          	jalr	t1,0(t3)
   1698c:	00000013          	addi	zero,zero,0

0000000000016990 <_Unwind_Resume@plt>:
   16990:	00024e17          	auipc	t3,0x24
   16994:	890e3e03          	ld	t3,-1904(t3) # 3a220 <_Unwind_Resume@GCC_3.0>
   16998:	000e0367          	jalr	t1,0(t3)
   1699c:	00000013          	addi	zero,zero,0

00000000000169a0 <std::logic_error::~logic_error()@plt>:
   169a0:	00024e17          	auipc	t3,0x24
   169a4:	888e3e03          	ld	t3,-1912(t3) # 3a228 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   169a8:	000e0367          	jalr	t1,0(t3)
   169ac:	00000013          	addi	zero,zero,0

00000000000169b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>:
   169b0:	00024e17          	auipc	t3,0x24
   169b4:	880e3e03          	ld	t3,-1920(t3) # 3a230 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@GLIBCXX_3.4.21>
   169b8:	000e0367          	jalr	t1,0(t3)
   169bc:	00000013          	addi	zero,zero,0

00000000000169c0 <__cxa_atexit@plt>:
   169c0:	00024e17          	auipc	t3,0x24
   169c4:	878e3e03          	ld	t3,-1928(t3) # 3a238 <__cxa_atexit@GLIBC_2.27>
   169c8:	000e0367          	jalr	t1,0(t3)
   169cc:	00000013          	addi	zero,zero,0

00000000000169d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@plt>:
   169d0:	00024e17          	auipc	t3,0x24
   169d4:	870e3e03          	ld	t3,-1936(t3) # 3a240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@GLIBCXX_3.4.21>
   169d8:	000e0367          	jalr	t1,0(t3)
   169dc:	00000013          	addi	zero,zero,0

00000000000169e0 <__cxa_guard_acquire@plt>:
   169e0:	00024e17          	auipc	t3,0x24
   169e4:	868e3e03          	ld	t3,-1944(t3) # 3a248 <__cxa_guard_acquire@CXXABI_1.3>
   169e8:	000e0367          	jalr	t1,0(t3)
   169ec:	00000013          	addi	zero,zero,0

00000000000169f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)@plt>:
   169f0:	00024e17          	auipc	t3,0x24
   169f4:	860e3e03          	ld	t3,-1952(t3) # 3a250 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)@GLIBCXX_3.4.21>
   169f8:	000e0367          	jalr	t1,0(t3)
   169fc:	00000013          	addi	zero,zero,0

0000000000016a00 <printf@plt>:
   16a00:	00024e17          	auipc	t3,0x24
   16a04:	858e3e03          	ld	t3,-1960(t3) # 3a258 <printf@GLIBC_2.27>
   16a08:	000e0367          	jalr	t1,0(t3)
   16a0c:	00000013          	addi	zero,zero,0

0000000000016a10 <std::runtime_error::runtime_error(char const*)@plt>:
   16a10:	00024e17          	auipc	t3,0x24
   16a14:	850e3e03          	ld	t3,-1968(t3) # 3a260 <std::runtime_error::runtime_error(char const*)@GLIBCXX_3.4.21>
   16a18:	000e0367          	jalr	t1,0(t3)
   16a1c:	00000013          	addi	zero,zero,0

0000000000016a20 <memmove@plt>:
   16a20:	00024e17          	auipc	t3,0x24
   16a24:	848e3e03          	ld	t3,-1976(t3) # 3a268 <memmove@GLIBC_2.27>
   16a28:	000e0367          	jalr	t1,0(t3)
   16a2c:	00000013          	addi	zero,zero,0

0000000000016a30 <__cxa_pure_virtual@plt>:
   16a30:	00024e17          	auipc	t3,0x24
   16a34:	840e3e03          	ld	t3,-1984(t3) # 3a270 <__cxa_pure_virtual@CXXABI_1.3>
   16a38:	000e0367          	jalr	t1,0(t3)
   16a3c:	00000013          	addi	zero,zero,0

0000000000016a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>:
   16a40:	00024e17          	auipc	t3,0x24
   16a44:	838e3e03          	ld	t3,-1992(t3) # 3a278 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@GLIBCXX_3.4.21>
   16a48:	000e0367          	jalr	t1,0(t3)
   16a4c:	00000013          	addi	zero,zero,0

0000000000016a50 <std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16a50:	00024e17          	auipc	t3,0x24
   16a54:	830e3e03          	ld	t3,-2000(t3) # 3a280 <std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16a58:	000e0367          	jalr	t1,0(t3)
   16a5c:	00000013          	addi	zero,zero,0

0000000000016a60 <__errno_location@plt>:
   16a60:	00024e17          	auipc	t3,0x24
   16a64:	828e3e03          	ld	t3,-2008(t3) # 3a288 <__errno_location@GLIBC_2.27>
   16a68:	000e0367          	jalr	t1,0(t3)
   16a6c:	00000013          	addi	zero,zero,0

0000000000016a70 <close@plt>:
   16a70:	00024e17          	auipc	t3,0x24
   16a74:	820e3e03          	ld	t3,-2016(t3) # 3a290 <close@GLIBC_2.27>
   16a78:	000e0367          	jalr	t1,0(t3)
   16a7c:	00000013          	addi	zero,zero,0

0000000000016a80 <std::underflow_error::underflow_error(char const*)@plt>:
   16a80:	00024e17          	auipc	t3,0x24
   16a84:	818e3e03          	ld	t3,-2024(t3) # 3a298 <std::underflow_error::underflow_error(char const*)@GLIBCXX_3.4.21>
   16a88:	000e0367          	jalr	t1,0(t3)
   16a8c:	00000013          	addi	zero,zero,0

0000000000016a90 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16a90:	00024e17          	auipc	t3,0x24
   16a94:	810e3e03          	ld	t3,-2032(t3) # 3a2a0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16a98:	000e0367          	jalr	t1,0(t3)
   16a9c:	00000013          	addi	zero,zero,0

Disassembly of section .text:

0000000000016aa0 <_start>:
ENTRY (ENTRY_POINT)
	/* Terminate call stack by noting ra is undefined.  Use a dummy
	   .cfi_label to force starting the FDE.  */
	.cfi_label .Ldummy
	cfi_undefined (ra)
	call  load_gp
   16aa0:	02e000ef          	jal	ra,16ace <load_gp>
	mv    a5, a0  /* rtld_fini.  */
   16aa4:	87aa                	c.mv	a5,a0
	/* main may be in a shared library.  */
	la   a0, main
   16aa6:	00000517          	auipc	a0,0x0
   16aaa:	43850513          	addi	a0,a0,1080 # 16ede <main>
	REG_L a1, 0(sp)      /* argc.  */
   16aae:	6582                	c.ldsp	a1,0(sp)
	addi  a2, sp, SZREG  /* argv.  */
   16ab0:	0030                	c.addi4spn	a2,sp,8
	andi  sp, sp, ALMASK /* Align stack. */
   16ab2:	ff017113          	andi	sp,sp,-16
	lla   a3, __libc_csu_init
   16ab6:	00017697          	auipc	a3,0x17
   16aba:	ea468693          	addi	a3,a3,-348 # 2d95a <__libc_csu_init>
	lla   a4, __libc_csu_fini
   16abe:	00017717          	auipc	a4,0x17
   16ac2:	ef470713          	addi	a4,a4,-268 # 2d9b2 <__libc_csu_fini>
	mv    a6, sp  /* stack_end.  */
   16ac6:	880a                	c.mv	a6,sp

	call  __libc_start_main@plt
   16ac8:	b79ff0ef          	jal	ra,16640 <__libc_start_main@plt>
	ebreak
   16acc:	9002                	c.ebreak

0000000000016ace <load_gp>:
   So we redundantly initialize it at the beginning of _start.  */

load_gp:
.option push
.option norelax
	lla   gp, __global_pointer$
   16ace:	00024197          	auipc	gp,0x24
   16ad2:	d3218193          	addi	gp,gp,-718 # 3a800 <__global_pointer$>
.option pop
	ret
   16ad6:	8082                	c.jr	ra
	...

0000000000016ada <deregister_tm_clones>:
   16ada:	81018793          	addi	a5,gp,-2032 # 3a010 <__TMC_END__>
   16ade:	81018713          	addi	a4,gp,-2032 # 3a010 <__TMC_END__>
   16ae2:	00f70863          	beq	a4,a5,16af2 <deregister_tm_clones+0x18>
   16ae6:	00000793          	addi	a5,zero,0
   16aea:	c781                	c.beqz	a5,16af2 <deregister_tm_clones+0x18>
   16aec:	81018513          	addi	a0,gp,-2032 # 3a010 <__TMC_END__>
   16af0:	8782                	c.jr	a5
   16af2:	8082                	c.jr	ra

0000000000016af4 <register_tm_clones>:
   16af4:	81018793          	addi	a5,gp,-2032 # 3a010 <__TMC_END__>
   16af8:	81018593          	addi	a1,gp,-2032 # 3a010 <__TMC_END__>
   16afc:	8d9d                	c.sub	a1,a5
   16afe:	4035d793          	srai	a5,a1,0x3
   16b02:	91fd                	c.srli	a1,0x3f
   16b04:	95be                	c.add	a1,a5
   16b06:	8585                	c.srai	a1,0x1
   16b08:	c599                	c.beqz	a1,16b16 <register_tm_clones+0x22>
   16b0a:	00000793          	addi	a5,zero,0
   16b0e:	c781                	c.beqz	a5,16b16 <register_tm_clones+0x22>
   16b10:	81018513          	addi	a0,gp,-2032 # 3a010 <__TMC_END__>
   16b14:	8782                	c.jr	a5
   16b16:	8082                	c.jr	ra

0000000000016b18 <__do_global_dtors_aux>:
   16b18:	1141                	c.addi	sp,-16
   16b1a:	e022                	c.sdsp	s0,0(sp)
   16b1c:	e611c783          	lbu	a5,-415(gp) # 3a661 <completed.0>
   16b20:	e406                	c.sdsp	ra,8(sp)
   16b22:	e791                	c.bnez	a5,16b2e <__do_global_dtors_aux+0x16>
   16b24:	fb7ff0ef          	jal	ra,16ada <deregister_tm_clones>
   16b28:	4785                	c.li	a5,1
   16b2a:	e6f180a3          	sb	a5,-415(gp) # 3a661 <completed.0>
   16b2e:	60a2                	c.ldsp	ra,8(sp)
   16b30:	6402                	c.ldsp	s0,0(sp)
   16b32:	0141                	c.addi	sp,16
   16b34:	8082                	c.jr	ra

0000000000016b36 <frame_dummy>:
   16b36:	bf7d                	c.j	16af4 <register_tm_clones>

0000000000016b38 <usage(char const*)>:
#include <inttypes.h>
#include <string>

using namespace std;

void usage(const char *cmd) {
   16b38:	1141                	c.addi	sp,-16
   16b3a:	e406                	c.sdsp	ra,8(sp)
   16b3c:	862a                	c.mv	a2,a0
  fprintf(stderr, "usage: %s elf-file pc\n", cmd);
   16b3e:	0002e5b7          	lui	a1,0x2e
   16b42:	9f058593          	addi	a1,a1,-1552 # 2d9f0 <__libc_csu_fini+0x3e>
   16b46:	e581b503          	ld	a0,-424(gp) # 3a658 <stderr@GLIBC_2.27>
   16b4a:	e37ff0ef          	jal	ra,16980 <fprintf@plt>
  exit(2);
   16b4e:	4509                	c.li	a0,2
   16b50:	a71ff0ef          	jal	ra,165c0 <exit@plt>

0000000000016b54 <dump_die(dwarf::die const&)>:
    break;
  }
  return found;
}

void dump_die(const dwarf::die &node) {
   16b54:	7135                	c.addi16sp	sp,-160
   16b56:	ed06                	c.sdsp	ra,152(sp)
   16b58:	e922                	c.sdsp	s0,144(sp)
   16b5a:	e526                	c.sdsp	s1,136(sp)
   16b5c:	e14a                	c.sdsp	s2,128(sp)
   16b5e:	fcce                	c.sdsp	s3,120(sp)
   16b60:	f8d2                	c.sdsp	s4,112(sp)
   16b62:	f4d6                	c.sdsp	s5,104(sp)
   16b64:	842a                	c.mv	s0,a0
  printf("<%" PRIx64 "> %s\n", node.get_section_offset(),
   16b66:	1bc050ef          	jal	ra,1bd22 <dwarf::die::get_section_offset() const>
   16b6a:	84aa                	c.mv	s1,a0
         to_string(node.tag).c_str());
   16b6c:	400c                	c.lw	a1,0(s0)
   16b6e:	1028                	c.addi4spn	a0,sp,40
   16b70:	1ae120ef          	jal	ra,28d1e <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)>
  printf("<%" PRIx64 "> %s\n", node.get_section_offset(),
   16b74:	7622                	c.ldsp	a2,40(sp)
   16b76:	85a6                	c.mv	a1,s1
   16b78:	0002e537          	lui	a0,0x2e
   16b7c:	a0850513          	addi	a0,a0,-1528 # 2da08 <__libc_csu_fini+0x56>
   16b80:	e81ff0ef          	jal	ra,16a00 <printf@plt>
      { _M_string_length = __length; }

      _GLIBCXX20_CONSTEXPR
      pointer
      _M_data() const
      { return _M_dataplus._M_p; }
   16b84:	7522                	c.ldsp	a0,40(sp)

      _GLIBCXX20_CONSTEXPR
      void
      _M_dispose()
      {
	if (!_M_is_local())
   16b86:	183c                	c.addi4spn	a5,sp,56
   16b88:	00f50463          	beq	a0,a5,16b90 <dump_die(dwarf::die const&)+0x3c>
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   16b8c:	c15ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
  for (auto &attr : node.attributes())
   16b90:	85a2                	c.mv	a1,s0
   16b92:	00a8                	c.addi4spn	a0,sp,72
   16b94:	28d050ef          	jal	ra,1c620 <dwarf::die::attributes() const>
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   16b98:	6426                	c.ldsp	s0,72(sp)
   16b9a:	6946                	c.ldsp	s2,80(sp)
   16b9c:	05240863          	beq	s0,s2,16bec <dump_die(dwarf::die const&)+0x98>
    printf("      %s %s\n", to_string(attr.first).c_str(),
   16ba0:	0002eab7          	lui	s5,0x2e
   16ba4:	03810a13          	addi	s4,sp,56
   16ba8:	01810993          	addi	s3,sp,24
   16bac:	a81d                	c.j	16be2 <dump_die(dwarf::die const&)+0x8e>
      { return _M_dataplus._M_p; }
   16bae:	64a2                	c.ldsp	s1,8(sp)
           to_string(attr.second).c_str());
   16bb0:	00840593          	addi	a1,s0,8
   16bb4:	1028                	c.addi4spn	a0,sp,40
   16bb6:	3dc080ef          	jal	ra,1ef92 <dwarf::to_string[abi:cxx11](dwarf::value const&)>
    printf("      %s %s\n", to_string(attr.first).c_str(),
   16bba:	7622                	c.ldsp	a2,40(sp)
   16bbc:	85a6                	c.mv	a1,s1
   16bbe:	a18a8513          	addi	a0,s5,-1512 # 2da18 <__libc_csu_fini+0x66>
   16bc2:	e3fff0ef          	jal	ra,16a00 <printf@plt>
   16bc6:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   16bc8:	01450463          	beq	a0,s4,16bd0 <dump_die(dwarf::die const&)+0x7c>
   16bcc:	bd5ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   16bd0:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   16bd2:	01350463          	beq	a0,s3,16bda <dump_die(dwarf::die const&)+0x86>
   16bd6:	bcbff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
  for (auto &attr : node.attributes())
   16bda:	02040413          	addi	s0,s0,32
   16bde:	00890763          	beq	s2,s0,16bec <dump_die(dwarf::die const&)+0x98>
    printf("      %s %s\n", to_string(attr.first).c_str(),
   16be2:	400c                	c.lw	a1,0(s0)
   16be4:	0028                	c.addi4spn	a0,sp,8
   16be6:	424130ef          	jal	ra,2a00a <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
   16bea:	b7d1                	c.j	16bae <dump_die(dwarf::die const&)+0x5a>
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   16bec:	6526                	c.ldsp	a0,72(sp)
	if (__p)
   16bee:	c119                	c.beqz	a0,16bf4 <dump_die(dwarf::die const&)+0xa0>
   16bf0:	bb1ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
}
   16bf4:	60ea                	c.ldsp	ra,152(sp)
   16bf6:	644a                	c.ldsp	s0,144(sp)
   16bf8:	64aa                	c.ldsp	s1,136(sp)
   16bfa:	690a                	c.ldsp	s2,128(sp)
   16bfc:	79e6                	c.ldsp	s3,120(sp)
   16bfe:	7a46                	c.ldsp	s4,112(sp)
   16c00:	7aa6                	c.ldsp	s5,104(sp)
   16c02:	610d                	c.addi16sp	sp,160
   16c04:	8082                	c.jr	ra
      { return _M_dataplus._M_p; }
   16c06:	842a                	c.mv	s0,a0
   16c08:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   16c0a:	183c                	c.addi4spn	a5,sp,56
   16c0c:	00f50463          	beq	a0,a5,16c14 <dump_die(dwarf::die const&)+0xc0>
   16c10:	b91ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   16c14:	8522                	c.mv	a0,s0
   16c16:	d7bff0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   16c1a:	842a                	c.mv	s0,a0
   16c1c:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   16c1e:	183c                	c.addi4spn	a5,sp,56
   16c20:	00f50463          	beq	a0,a5,16c28 <dump_die(dwarf::die const&)+0xd4>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   16c24:	b7dff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   16c28:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   16c2a:	083c                	c.addi4spn	a5,sp,24
   16c2c:	00f50463          	beq	a0,a5,16c34 <dump_die(dwarf::die const&)+0xe0>
   16c30:	b71ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   16c34:	6526                	c.ldsp	a0,72(sp)
	if (__p)
   16c36:	c119                	c.beqz	a0,16c3c <dump_die(dwarf::die const&)+0xe8>
   16c38:	b69ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   16c3c:	8522                	c.mv	a0,s0
   16c3e:	d53ff0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   16c42:	842a                	c.mv	s0,a0
   16c44:	b7d5                	c.j	16c28 <dump_die(dwarf::die const&)+0xd4>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   16c46:	842a                	c.mv	s0,a0
   16c48:	b7f5                	c.j	16c34 <dump_die(dwarf::die const&)+0xe0>

0000000000016c4a <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)>:
bool find_pc(const dwarf::die &d, dwarf::taddr pc, vector<dwarf::die> *stack) {
   16c4a:	7169                	c.addi16sp	sp,-304
   16c4c:	f606                	c.sdsp	ra,296(sp)
   16c4e:	f222                	c.sdsp	s0,288(sp)
   16c50:	ee26                	c.sdsp	s1,280(sp)
   16c52:	ea4a                	c.sdsp	s2,272(sp)
   16c54:	e64e                	c.sdsp	s3,264(sp)
   16c56:	e252                	c.sdsp	s4,256(sp)
   16c58:	fdd6                	c.sdsp	s5,248(sp)
   16c5a:	f9da                	c.sdsp	s6,240(sp)
   16c5c:	f5de                	c.sdsp	s7,232(sp)
   16c5e:	f1e2                	c.sdsp	s8,224(sp)
   16c60:	842a                	c.mv	s0,a0
   16c62:	89ae                	c.mv	s3,a1
   16c64:	8932                	c.mv	s2,a2
  for (auto &child : d) {
   16c66:	85aa                	c.mv	a1,a0
   16c68:	850a                	c.mv	a0,sp
   16c6a:	5d2050ef          	jal	ra,1c23c <dwarf::die::begin() const>
  iterator(const unit *cu, section_offset off);

  die d;
};

inline die::iterator die::end() const { return iterator(); }
   16c6e:	f882                	c.sdsp	zero,112(sp)
   16c70:	fc82                	c.sdsp	zero,120(sp)
   16c72:	e102                	c.sdsp	zero,128(sp)
   16c74:	e502                	c.sdsp	zero,136(sp)
   16c76:	e902                	c.sdsp	zero,144(sp)
   16c78:	ed02                	c.sdsp	zero,152(sp)
   16c7a:	f102                	c.sdsp	zero,160(sp)
   16c7c:	f502                	c.sdsp	zero,168(sp)
   16c7e:	f902                	c.sdsp	zero,176(sp)
   16c80:	fd02                	c.sdsp	zero,184(sp)
   16c82:	ed82                	c.sdsp	zero,216(sp)
  typedef T value_type;
  typedef value_type &reference;
  typedef const value_type &const_reference;
  typedef size_t size_type;

  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   16c84:	091c                	c.addi4spn	a5,sp,144
   16c86:	e1be                	c.sdsp	a5,192(sp)
   16c88:	e5be                	c.sdsp	a5,200(sp)
   16c8a:	019c                	c.addi4spn	a5,sp,192
   16c8c:	e9be                	c.sdsp	a5,208(sp)
    if (d.abbrev != o.d.abbrev)
   16c8e:	67c2                	c.ldsp	a5,16(sp)
   16c90:	670a                	c.ldsp	a4,128(sp)
   16c92:	00e78d63          	beq	a5,a4,16cac <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x62>
    if ((found = find_pc(child, pc, stack)))
   16c96:	864a                	c.mv	a2,s2
   16c98:	85ce                	c.mv	a1,s3
   16c9a:	850a                	c.mv	a0,sp
   16c9c:	fafff0ef          	jal	ra,16c4a <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)>
   16ca0:	84aa                	c.mv	s1,a0
   16ca2:	e10d                	c.bnez	a0,16cc4 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x7a>
  for (auto &child : d) {
   16ca4:	850a                	c.mv	a0,sp
   16ca6:	7e2050ef          	jal	ra,1c488 <dwarf::die::iterator::operator++()>
   16caa:	b7d5                	c.j	16c8e <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x44>
    if (d.abbrev == nullptr)
   16cac:	cb99                	c.beqz	a5,16cc2 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x78>
    return d.next != o.d.next || d.cu != o.d.cu;
   16cae:	7726                	c.ldsp	a4,104(sp)
   16cb0:	67ee                	c.ldsp	a5,216(sp)
   16cb2:	fef712e3          	bne	a4,a5,16c96 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x4c>
   16cb6:	6722                	c.ldsp	a4,8(sp)
   16cb8:	77e6                	c.ldsp	a5,120(sp)
   16cba:	fcf71ee3          	bne	a4,a5,16c96 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x4c>
   16cbe:	4481                	c.li	s1,0
   16cc0:	a011                	c.j	16cc4 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x7a>
   16cc2:	4481                	c.li	s1,0
    end--;
    end->~T();
  }

  void clear() {
    for (T *p = base; p < end; ++p)
   16cc4:	650e                	c.ldsp	a0,192(sp)
   16cc6:	67ae                	c.ldsp	a5,200(sp)
   16cc8:	00f57763          	bgeu	a0,a5,16cd6 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x8c>
   16ccc:	87aa                	c.mv	a5,a0
   16cce:	07a1                	c.addi	a5,8
   16cd0:	672e                	c.ldsp	a4,200(sp)
   16cd2:	fee7eee3          	bltu	a5,a4,16cce <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x84>
      p->~T();
    end = base;
   16cd6:	e5aa                	c.sdsp	a0,200(sp)
    if ((char *)base != buf)
   16cd8:	091c                	c.addi4spn	a5,sp,144
   16cda:	00f50563          	beq	a0,a5,16ce4 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x9a>
      delete[] (char *)base;
   16cde:	c119                	c.beqz	a0,16ce4 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x9a>
   16ce0:	b71ff0ef          	jal	ra,16850 <operator delete[](void*)@plt>
    for (T *p = base; p < end; ++p)
   16ce4:	6546                	c.ldsp	a0,80(sp)
   16ce6:	67e6                	c.ldsp	a5,88(sp)
   16ce8:	00f57763          	bgeu	a0,a5,16cf6 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0xac>
   16cec:	87aa                	c.mv	a5,a0
   16cee:	07a1                	c.addi	a5,8
   16cf0:	6766                	c.ldsp	a4,88(sp)
   16cf2:	fee7eee3          	bltu	a5,a4,16cee <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0xa4>
    end = base;
   16cf6:	ecaa                	c.sdsp	a0,88(sp)
    if ((char *)base != buf)
   16cf8:	101c                	c.addi4spn	a5,sp,32
   16cfa:	00f50563          	beq	a0,a5,16d04 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0xba>
      delete[] (char *)base;
   16cfe:	c119                	c.beqz	a0,16d04 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0xba>
   16d00:	b51ff0ef          	jal	ra,16850 <operator delete[](void*)@plt>
  switch (d.tag) {
   16d04:	401c                	c.lw	a5,0(s0)
   16d06:	4775                	c.li	a4,29
   16d08:	02e78363          	beq	a5,a4,16d2e <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0xe4>
   16d0c:	02e00713          	addi	a4,zero,46
   16d10:	00e78f63          	beq	a5,a4,16d2e <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0xe4>
}
   16d14:	8526                	c.mv	a0,s1
   16d16:	70b2                	c.ldsp	ra,296(sp)
   16d18:	7412                	c.ldsp	s0,288(sp)
   16d1a:	64f2                	c.ldsp	s1,280(sp)
   16d1c:	6952                	c.ldsp	s2,272(sp)
   16d1e:	69b2                	c.ldsp	s3,264(sp)
   16d20:	6a12                	c.ldsp	s4,256(sp)
   16d22:	7aee                	c.ldsp	s5,248(sp)
   16d24:	7b4e                	c.ldsp	s6,240(sp)
   16d26:	7bae                	c.ldsp	s7,232(sp)
   16d28:	7c0e                	c.ldsp	s8,224(sp)
   16d2a:	6155                	c.addi16sp	sp,304
   16d2c:	8082                	c.jr	ra
      if (found || die_pc_range(d).contains(pc)) {
   16d2e:	c0ad                	c.beqz	s1,16d90 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x146>
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   16d30:	00893483          	ld	s1,8(s2)
   16d34:	01093783          	ld	a5,16(s2)
   16d38:	14f48a63          	beq	s1,a5,16e8c <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x242>
  die(const die &o) = default;
   16d3c:	401c                	c.lw	a5,0(s0)
   16d3e:	c09c                	c.sw	a5,0(s1)
   16d40:	641c                	c.ld	a5,8(s0)
   16d42:	e49c                	c.sd	a5,8(s1)
   16d44:	681c                	c.ld	a5,16(s0)
   16d46:	e89c                	c.sd	a5,16(s1)
   16d48:	6c1c                	c.ld	a5,24(s0)
   16d4a:	ec9c                	c.sd	a5,24(s1)
   16d4c:	02048b93          	addi	s7,s1,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   16d50:	0574b823          	sd	s7,80(s1)
   16d54:	0574bc23          	sd	s7,88(s1)
   16d58:	05048793          	addi	a5,s1,80
   16d5c:	f0bc                	c.sd	a5,96(s1)
  size_type size() const { return end - base; }
   16d5e:	05843a03          	ld	s4,88(s0)
   16d62:	6838                	c.ld	a4,80(s0)
   16d64:	40ea0a33          	sub	s4,s4,a4
   16d68:	403a5993          	srai	s3,s4,0x3
    if (n <= (size_type)(cap - base))
   16d6c:	417787b3          	sub	a5,a5,s7
   16d70:	0d47f763          	bgeu	a5,s4,16e3e <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x1f4>
   16d74:	878d                	c.srai	a5,0x3
   16d76:	e391                	c.bnez	a5,16d7a <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x130>
   16d78:	4785                	c.li	a5,1
    while (target < n)
   16d7a:	0137f563          	bgeu	a5,s3,16d84 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x13a>
      target <<= 1;
   16d7e:	0786                	c.slli	a5,0x1
    while (target < n)
   16d80:	ff37efe3          	bltu	a5,s3,16d7e <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x134>
    char *newbuf = new char[sizeof(T[target])];
   16d84:	00379a93          	slli	s5,a5,0x3
   16d88:	8556                	c.mv	a0,s5
   16d8a:	807ff0ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   16d8e:	a041                	c.j	16e0e <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x1c4>
   16d90:	85a2                	c.mv	a1,s0
   16d92:	1888                	c.addi4spn	a0,sp,112
   16d94:	5790f0ef          	jal	ra,26b0c <dwarf::die_pc_range(dwarf::die const&)>
   16d98:	85ce                	c.mv	a1,s3
   16d9a:	1888                	c.addi4spn	a0,sp,112
   16d9c:	1a30b0ef          	jal	ra,2273e <dwarf::rangelist::contains(unsigned long) const>
   16da0:	89aa                	c.mv	s3,a0
      explicit
      __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t) noexcept;

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   16da2:	64ca                	c.ldsp	s1,144(sp)
   16da4:	c899                	c.beqz	s1,16dba <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x170>

  inline _Atomic_word
  __attribute__ ((__always_inline__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {
    if (__is_single_threaded())
   16da6:	e601c783          	lbu	a5,-416(gp) # 3a660 <__libc_single_threaded@GLIBC_2.32>
   16daa:	c385                	c.beqz	a5,16dca <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x180>
    _Atomic_word __result = *__mem;
   16dac:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   16dae:	fff5079b          	addiw	a5,a0,-1
   16db2:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   16db4:	4785                	c.li	a5,1
   16db6:	02f50063          	beq	a0,a5,16dd6 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x18c>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   16dba:	7546                	c.ldsp	a0,112(sp)
	if (__p)
   16dbc:	c119                	c.beqz	a0,16dc2 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x178>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   16dbe:	9e3ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   16dc2:	84ce                	c.mv	s1,s3
   16dc4:	f40988e3          	beq	s3,zero,16d14 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0xca>
   16dc8:	b7a5                	c.j	16d30 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0xe6>
      return __exchange_and_add_single(__mem, __val);
    else
      return __exchange_and_add(__mem, __val);
   16dca:	55fd                	c.li	a1,-1
   16dcc:	03048513          	addi	a0,s1,48
   16dd0:	821ff0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16dd4:	b7c5                	c.j	16db4 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x16a>
	_M_dispose();
   16dd6:	609c                	c.ld	a5,0(s1)
   16dd8:	6b9c                	c.ld	a5,16(a5)
   16dda:	8526                	c.mv	a0,s1
   16ddc:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   16dde:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   16de2:	e601c783          	lbu	a5,-416(gp) # 3a660 <__libc_single_threaded@GLIBC_2.32>
   16de6:	cf89                	c.beqz	a5,16e00 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x1b6>
    _Atomic_word __result = *__mem;
   16de8:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   16dea:	fff7871b          	addiw	a4,a5,-1
   16dee:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   16df0:	4705                	c.li	a4,1
   16df2:	fce794e3          	bne	a5,a4,16dba <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x170>
	    _M_destroy();
   16df6:	609c                	c.ld	a5,0(s1)
   16df8:	6f9c                	c.ld	a5,24(a5)
   16dfa:	8526                	c.mv	a0,s1
   16dfc:	9782                	c.jalr	a5
   16dfe:	bf75                	c.j	16dba <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x170>
      return __exchange_and_add(__mem, __val);
   16e00:	55fd                	c.li	a1,-1
   16e02:	03448513          	addi	a0,s1,52
   16e06:	feaff0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16e0a:	87aa                	c.mv	a5,a0
   16e0c:	b7d5                	c.j	16df0 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x1a6>
   16e0e:	8c2a                	c.mv	s8,a0
    T *src = base, *dest = (T *)newbuf;
   16e10:	68a8                	c.ld	a0,80(s1)
    for (; src < end; src++, dest++) {
   16e12:	6cbc                	c.ld	a5,88(s1)
   16e14:	06f57a63          	bgeu	a0,a5,16e88 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x23e>
    T *src = base, *dest = (T *)newbuf;
   16e18:	87aa                	c.mv	a5,a0
   16e1a:	8b62                	c.mv	s6,s8
    for (; src < end; src++, dest++) {
   16e1c:	07a1                	c.addi	a5,8
   16e1e:	0b21                	c.addi	s6,8
   16e20:	6cb8                	c.ld	a4,88(s1)
   16e22:	fee7ede3          	bltu	a5,a4,16e1c <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x1d2>
    if ((char *)base != buf)
   16e26:	00ab8563          	beq	s7,a0,16e30 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x1e6>
      delete[] (char *)base;
   16e2a:	c119                	c.beqz	a0,16e30 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x1e6>
   16e2c:	a25ff0ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   16e30:	0584b823          	sd	s8,80(s1)
    end = dest;
   16e34:	0564bc23          	sd	s6,88(s1)
    cap = base + target;
   16e38:	015c0533          	add	a0,s8,s5
   16e3c:	f0a8                	c.sd	a0,96(s1)
    for (size_type i = 0; i < osize; i++)
   16e3e:	4781                	c.li	a5,0
   16e40:	00098d63          	beq	s3,zero,16e5a <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x210>
   16e44:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   16e48:	6838                	c.ld	a4,80(s0)
   16e4a:	9736                	c.add	a4,a3
   16e4c:	6310                	c.ld	a2,0(a4)
   16e4e:	68b8                	c.ld	a4,80(s1)
   16e50:	9736                	c.add	a4,a3
   16e52:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   16e54:	0785                	c.addi	a5,1
   16e56:	fef997e3          	bne	s3,a5,16e44 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x1fa>
    end = base + osize;
   16e5a:	68bc                	c.ld	a5,80(s1)
   16e5c:	97d2                	c.add	a5,s4
   16e5e:	ecbc                	c.sd	a5,88(s1)
   16e60:	743c                	c.ld	a5,104(s0)
   16e62:	f4bc                	c.sd	a5,104(s1)
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     __x);
	    ++this->_M_impl._M_finish;
   16e64:	00893783          	ld	a5,8(s2)
   16e68:	07078793          	addi	a5,a5,112
   16e6c:	00f93423          	sd	a5,8(s2)
        found = true;
   16e70:	4485                	c.li	s1,1
   16e72:	b54d                	c.j	16d14 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0xca>
      if (found || die_pc_range(d).contains(pc)) {
   16e74:	87ae                	c.mv	a5,a1
   16e76:	4485                	c.li	s1,1
    } catch (out_of_range &e) {
   16e78:	4705                	c.li	a4,1
   16e7a:	04e78863          	beq	a5,a4,16eca <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x280>
   16e7e:	4709                	c.li	a4,2
   16e80:	04e78a63          	beq	a5,a4,16ed4 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x28a>
   16e84:	b0dff0ef          	jal	ra,16990 <_Unwind_Resume@plt>
    T *src = base, *dest = (T *)newbuf;
   16e88:	8b62                	c.mv	s6,s8
   16e8a:	bf71                	c.j	16e26 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x1dc>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
   16e8c:	8622                	c.mv	a2,s0
   16e8e:	85a6                	c.mv	a1,s1
   16e90:	854a                	c.mv	a0,s2
   16e92:	115000ef          	jal	ra,177a6 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)>
   16e96:	a021                	c.j	16e9e <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x254>
      if (found || die_pc_range(d).contains(pc)) {
   16e98:	87ae                	c.mv	a5,a1
   16e9a:	4485                	c.li	s1,1
   16e9c:	bff1                	c.j	16e78 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x22e>
        found = true;
   16e9e:	4485                	c.li	s1,1
   16ea0:	bd95                	c.j	16d14 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0xca>
class die {
   16ea2:	842a                	c.mv	s0,a0
   16ea4:	0908                	c.addi4spn	a0,sp,144
   16ea6:	746000ef          	jal	ra,175ec <dwarf::small_vector<unsigned long, 6u>::~small_vector()>
   16eaa:	1008                	c.addi4spn	a0,sp,32
   16eac:	740000ef          	jal	ra,175ec <dwarf::small_vector<unsigned long, 6u>::~small_vector()>
   16eb0:	8522                	c.mv	a0,s0
   16eb2:	adfff0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      if (found || die_pc_range(d).contains(pc)) {
   16eb6:	892a                	c.mv	s2,a0
   16eb8:	842e                	c.mv	s0,a1
   16eba:	1888                	c.addi4spn	a0,sp,112
   16ebc:	6ba000ef          	jal	ra,17576 <dwarf::rangelist::~rangelist()>
   16ec0:	854a                	c.mv	a0,s2
   16ec2:	87a2                	c.mv	a5,s0
   16ec4:	bf55                	c.j	16e78 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x22e>
    } catch (out_of_range &e) {
   16ec6:	87ae                	c.mv	a5,a1
   16ec8:	bf45                	c.j	16e78 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x22e>
   16eca:	fa6ff0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
    } catch (value_type_mismatch &e) {
   16ece:	a63ff0ef          	jal	ra,16930 <__cxa_end_catch@plt>
   16ed2:	b589                	c.j	16d14 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0xca>
   16ed4:	f9cff0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
    }
   16ed8:	a59ff0ef          	jal	ra,16930 <__cxa_end_catch@plt>
  return found;
   16edc:	bd25                	c.j	16d14 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0xca>

0000000000016ede <main>:

int main(int argc, char **argv) {
   16ede:	7125                	c.addi16sp	sp,-416
   16ee0:	ef06                	c.sdsp	ra,408(sp)
   16ee2:	eb22                	c.sdsp	s0,400(sp)
   16ee4:	e726                	c.sdsp	s1,392(sp)
   16ee6:	e34a                	c.sdsp	s2,384(sp)
   16ee8:	fece                	c.sdsp	s3,376(sp)
   16eea:	fad2                	c.sdsp	s4,368(sp)
   16eec:	f6d6                	c.sdsp	s5,360(sp)
   16eee:	f2da                	c.sdsp	s6,352(sp)
   16ef0:	eede                	c.sdsp	s7,344(sp)
   16ef2:	84ae                	c.mv	s1,a1
  if (argc != 3)
   16ef4:	478d                	c.li	a5,3
   16ef6:	00f51863          	bne	a0,a5,16f06 <main+0x28>
    usage(argv[0]);

  dwarf::taddr pc;
  try {
    pc = stoll(argv[2], nullptr, 0);
   16efa:	1230                	c.addi4spn	a2,sp,296
   16efc:	698c                	c.ld	a1,16(a1)
   16efe:	0128                	c.addi4spn	a0,sp,136
   16f00:	981ff0ef          	jal	ra,16880 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
   16f04:	a021                	c.j	16f0c <main+0x2e>
    usage(argv[0]);
   16f06:	6188                	c.ld	a0,0(a1)
   16f08:	c31ff0ef          	jal	ra,16b38 <usage(char const*)>
   16f0c:	692a                	c.ldsp	s2,136(sp)
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
   16f0e:	b53ff0ef          	jal	ra,16a60 <__errno_location@plt>
   16f12:	842a                	c.mv	s0,a0
   16f14:	00052a03          	lw	s4,0(a0)
   16f18:	00052023          	sw	zero,0(a0)
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   16f1c:	4601                	c.li	a2,0
   16f1e:	002c                	c.addi4spn	a1,sp,8
   16f20:	854a                	c.mv	a0,s2
   16f22:	feeff0ef          	jal	ra,16710 <strtoll@plt>
   16f26:	89aa                	c.mv	s3,a0

      if (__endptr == __str)
   16f28:	67a2                	c.ldsp	a5,8(sp)
   16f2a:	02f90f63          	beq	s2,a5,16f68 <main+0x8a>
	std::__throw_invalid_argument(__name);
      else if (errno == ERANGE
   16f2e:	401c                	c.lw	a5,0(s0)
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
   16f30:	02200713          	addi	a4,zero,34
   16f34:	06e78663          	beq	a5,a4,16fa0 <main+0xc2>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   16f38:	e399                	c.bnez	a5,16f3e <main+0x60>
   16f3a:	01442023          	sw	s4,0(s0)
   16f3e:	652a                	c.ldsp	a0,136(sp)
	if (!_M_is_local())
   16f40:	093c                	c.addi4spn	a5,sp,152
   16f42:	00f50463          	beq	a0,a5,16f4a <main+0x6c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   16f46:	85bff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
    usage(argv[0]);
  } catch (out_of_range &e) {
    usage(argv[0]);
  }

  int fd = open(argv[1], O_RDONLY);
   16f4a:	4581                	c.li	a1,0
   16f4c:	6488                	c.ld	a0,8(s1)
   16f4e:	f92ff0ef          	jal	ra,166e0 <open@plt>
   16f52:	85aa                	c.mv	a1,a0
  if (fd < 0) {
   16f54:	04054c63          	blt	a0,zero,16fac <main+0xce>
    fprintf(stderr, "%s: %s\n", argv[1], strerror(errno));
    return 1;
  }

  elf::elf ef(elf::create_mmap_loader(fd));
   16f58:	1a08                	c.addi4spn	a0,sp,304
   16f5a:	654160ef          	jal	ra,2d5ae <elf::create_mmap_loader(int)>
   16f5e:	1a0c                	c.addi4spn	a1,sp,304
   16f60:	0a28                	c.addi4spn	a0,sp,280
   16f62:	7c7140ef          	jal	ra,2bf28 <elf::elf::elf(std::shared_ptr<elf::loader> const&)>
   16f66:	a0a5                	c.j	16fce <main+0xf0>
	std::__throw_invalid_argument(__name);
   16f68:	0002e537          	lui	a0,0x2e
   16f6c:	a2850513          	addi	a0,a0,-1496 # 2da28 <__libc_csu_fini+0x76>
   16f70:	f80ff0ef          	jal	ra,166f0 <std::__throw_invalid_argument(char const*)@plt>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   16f74:	89aa                	c.mv	s3,a0
   16f76:	892e                	c.mv	s2,a1
   16f78:	401c                	c.lw	a5,0(s0)
   16f7a:	e399                	c.bnez	a5,16f80 <main+0xa2>
   16f7c:	01442023          	sw	s4,0(s0)
      { return _M_dataplus._M_p; }
   16f80:	652a                	c.ldsp	a0,136(sp)
	if (!_M_is_local())
   16f82:	093c                	c.addi4spn	a5,sp,152
   16f84:	00f50463          	beq	a0,a5,16f8c <main+0xae>
   16f88:	819ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   16f8c:	854e                	c.mv	a0,s3
   16f8e:	87ca                	c.mv	a5,s2
  } catch (invalid_argument &e) {
   16f90:	4705                	c.li	a4,1
   16f92:	22e78863          	beq	a5,a4,171c2 <main+0x2e4>
   16f96:	4709                	c.li	a4,2
   16f98:	24e78063          	beq	a5,a4,171d8 <main+0x2fa>
   16f9c:	9f5ff0ef          	jal	ra,16990 <_Unwind_Resume@plt>
	std::__throw_out_of_range(__name);
   16fa0:	0002e537          	lui	a0,0x2e
   16fa4:	a2850513          	addi	a0,a0,-1496 # 2da28 <__libc_csu_fini+0x76>
   16fa8:	909ff0ef          	jal	ra,168b0 <std::__throw_out_of_range(char const*)@plt>
    fprintf(stderr, "%s: %s\n", argv[1], strerror(errno));
   16fac:	e581b903          	ld	s2,-424(gp) # 3a658 <stderr@GLIBC_2.27>
   16fb0:	6484                	c.ld	s1,8(s1)
   16fb2:	4008                	c.lw	a0,0(s0)
   16fb4:	86dff0ef          	jal	ra,16820 <strerror@plt>
   16fb8:	86aa                	c.mv	a3,a0
   16fba:	8626                	c.mv	a2,s1
   16fbc:	0002e5b7          	lui	a1,0x2e
   16fc0:	a3058593          	addi	a1,a1,-1488 # 2da30 <__libc_csu_fini+0x7e>
   16fc4:	854a                	c.mv	a0,s2
   16fc6:	9bbff0ef          	jal	ra,16980 <fprintf@plt>
    return 1;
   16fca:	4505                	c.li	a0,1
   16fcc:	aaf1                	c.j	171a8 <main+0x2ca>
	if (_M_pi != nullptr)
   16fce:	7572                	c.ldsp	a0,312(sp)
   16fd0:	c119                	c.beqz	a0,16fd6 <main+0xf8>
	  _M_pi->_M_release();
   16fd2:	3ec000ef          	jal	ra,173be <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   16fd6:	05000513          	addi	a0,zero,80
   16fda:	fd6ff0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   16fde:	842a                	c.mv	s0,a0
    __mutex(const __mutex&);
    __mutex& operator=(const __mutex&);

  public:
    __mutex() 
    { 
   16fe0:	00052423          	sw	zero,8(a0)
   16fe4:	00052623          	sw	zero,12(a0)
   16fe8:	00052823          	sw	zero,16(a0)
   16fec:	00052a23          	sw	zero,20(a0)
   16ff0:	00052c23          	sw	zero,24(a0)
   16ff4:	00052e23          	sw	zero,28(a0)
   16ff8:	02053023          	sd	zero,32(a0)
   16ffc:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   17000:	4785                	c.li	a5,1
   17002:	d91c                	c.sw	a5,48(a0)
   17004:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   17006:	0002e7b7          	lui	a5,0x2e
   1700a:	ca878793          	addi	a5,a5,-856 # 2dca8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10>
   1700e:	e11c                	c.sd	a5,0(a0)
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   17010:	03850493          	addi	s1,a0,56

template <typename Elf> class elf_loader : public loader {
  Elf f;

public:
  elf_loader(const Elf &file) : f(file) {}
   17014:	0002e7b7          	lui	a5,0x2e
   17018:	c8078793          	addi	a5,a5,-896 # 2dc80 <vtable for dwarf::elf::elf_loader<elf::elf>+0x10>
   1701c:	fd1c                	c.sd	a5,56(a0)
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   1701e:	67f2                	c.ldsp	a5,280(sp)
   17020:	e13c                	c.sd	a5,64(a0)
      : _M_pi(__r._M_pi)
   17022:	7512                	c.ldsp	a0,288(sp)
   17024:	e428                	c.sd	a0,72(s0)
	if (_M_pi != nullptr)
   17026:	c519                	c.beqz	a0,17034 <main+0x156>

  inline void
  __attribute__ ((__always_inline__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {
    if (__is_single_threaded())
   17028:	e601c783          	lbu	a5,-416(gp) # 3a660 <__libc_single_threaded@GLIBC_2.32>
   1702c:	cb99                	c.beqz	a5,17042 <main+0x164>
  { *__mem += __val; }
   1702e:	591c                	c.lw	a5,48(a0)
   17030:	2785                	c.addiw	a5,1
   17032:	d91c                	c.sw	a5,48(a0)
	__r._M_ptr = nullptr;
      }

      template<typename _Yp, typename = _Compatible<_Yp>>
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount()
   17034:	e2a6                	c.sdsp	s1,320(sp)
	_M_pi = __tmp;
   17036:	e6a2                	c.sdsp	s0,328(sp)
  dwarf::dwarf dw(dwarf::elf::create_loader(ef));
   17038:	028c                	c.addi4spn	a1,sp,320
   1703a:	0228                	c.addi4spn	a0,sp,264
   1703c:	460010ef          	jal	ra,1849c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)>
   17040:	a039                	c.j	1704e <main+0x170>
      __atomic_add_single(__mem, __val);
    else
      __atomic_add(__mem, __val);
   17042:	4585                	c.li	a1,1
   17044:	03050513          	addi	a0,a0,48
   17048:	d68ff0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1704c:	b7e5                	c.j	17034 <main+0x156>
	if (_M_pi != nullptr)
   1704e:	6536                	c.ldsp	a0,328(sp)
   17050:	c119                	c.beqz	a0,17056 <main+0x178>
	  _M_pi->_M_release();
   17052:	36c000ef          	jal	ra,173be <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>

  // Find the CU containing pc
  // XXX Use .debug_aranges
  for (auto &cu : dw.compilation_units()) {
   17056:	0228                	c.addi4spn	a0,sp,264
   17058:	1e7000ef          	jal	ra,17a3e <dwarf::dwarf::compilation_units() const>
   1705c:	6100                	c.ld	s0,0(a0)
   1705e:	00853a03          	ld	s4,8(a0)
   17062:	13440b63          	beq	s0,s4,17198 <main+0x2ba>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17066:	4b85                	c.li	s7,1
   17068:	a081                	c.j	170a8 <main+0x1ca>
    if (die_pc_range(cu.root()).contains(pc)) {
   1706a:	85aa                	c.mv	a1,a0
   1706c:	0128                	c.addi4spn	a0,sp,136
   1706e:	29f0f0ef          	jal	ra,26b0c <dwarf::die_pc_range(dwarf::die const&)>
   17072:	85ce                	c.mv	a1,s3
   17074:	0128                	c.addi4spn	a0,sp,136
   17076:	6c80b0ef          	jal	ra,2273e <dwarf::rangelist::contains(unsigned long) const>
   1707a:	84aa                	c.mv	s1,a0
	if (_M_pi != nullptr)
   1707c:	792a                	c.ldsp	s2,168(sp)
   1707e:	00090d63          	beq	s2,zero,17098 <main+0x1ba>
    if (__is_single_threaded())
   17082:	e601c783          	lbu	a5,-416(gp) # 3a660 <__libc_single_threaded@GLIBC_2.32>
   17086:	c795                	c.beqz	a5,170b2 <main+0x1d4>
    _Atomic_word __result = *__mem;
   17088:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   1708c:	fff5079b          	addiw	a5,a0,-1
   17090:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17094:	03750563          	beq	a0,s7,170be <main+0x1e0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   17098:	652a                	c.ldsp	a0,136(sp)
	if (__p)
   1709a:	c119                	c.beqz	a0,170a0 <main+0x1c2>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1709c:	f04ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   170a0:	eca9                	c.bnez	s1,170fa <main+0x21c>
  for (auto &cu : dw.compilation_units()) {
   170a2:	0461                	c.addi	s0,24
   170a4:	0e8a0a63          	beq	s4,s0,17198 <main+0x2ba>
   170a8:	8aa2                	c.mv	s5,s0
    if (die_pc_range(cu.root()).contains(pc)) {
   170aa:	8522                	c.mv	a0,s0
   170ac:	159020ef          	jal	ra,19a04 <dwarf::unit::root() const>
   170b0:	bf6d                	c.j	1706a <main+0x18c>
      return __exchange_and_add(__mem, __val);
   170b2:	55fd                	c.li	a1,-1
   170b4:	03090513          	addi	a0,s2,48
   170b8:	d38ff0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   170bc:	bfe1                	c.j	17094 <main+0x1b6>
	_M_dispose();
   170be:	00093783          	ld	a5,0(s2)
   170c2:	6b9c                	c.ld	a5,16(a5)
   170c4:	854a                	c.mv	a0,s2
   170c6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   170c8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   170cc:	e601c783          	lbu	a5,-416(gp) # 3a660 <__libc_single_threaded@GLIBC_2.32>
   170d0:	cf99                	c.beqz	a5,170ee <main+0x210>
    _Atomic_word __result = *__mem;
   170d2:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   170d6:	fff5079b          	addiw	a5,a0,-1
   170da:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   170de:	fb751de3          	bne	a0,s7,17098 <main+0x1ba>
	    _M_destroy();
   170e2:	00093783          	ld	a5,0(s2)
   170e6:	6f9c                	c.ld	a5,24(a5)
   170e8:	854a                	c.mv	a0,s2
   170ea:	9782                	c.jalr	a5
   170ec:	b775                	c.j	17098 <main+0x1ba>
      return __exchange_and_add(__mem, __val);
   170ee:	55fd                	c.li	a1,-1
   170f0:	03490513          	addi	a0,s2,52
   170f4:	cfcff0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   170f8:	b7dd                	c.j	170de <main+0x200>
      // Map PC to a line
      auto &lt = cu.get_line_table();
   170fa:	8556                	c.mv	a0,s5
   170fc:	23d020ef          	jal	ra,19b38 <dwarf::compilation_unit::get_line_table() const>
   17100:	842a                	c.mv	s0,a0
      auto it = lt.find_address(pc);
   17102:	864e                	c.mv	a2,s3
   17104:	85aa                	c.mv	a1,a0
   17106:	0028                	c.addi4spn	a0,sp,8
   17108:	7480d0ef          	jal	ra,24850 <dwarf::line_table::find_address(unsigned long) const>
      if (it == lt.end())
   1710c:	85a2                	c.mv	a1,s0
   1710e:	0128                	c.addi4spn	a0,sp,136
   17110:	7140d0ef          	jal	ra,24824 <dwarf::line_table::end() const>
    return o.pos == pos && o.table == table;
   17114:	670a                	c.ldsp	a4,128(sp)
   17116:	6792                	c.ldsp	a5,256(sp)
   17118:	00f70763          	beq	a4,a5,17126 <main+0x248>
        printf("UNKNOWN\n");
      else
        printf("%s\n", it->get_description().c_str());
   1711c:	080c                	c.addi4spn	a1,sp,16
   1711e:	0128                	c.addi4spn	a0,sp,136
   17120:	4910b0ef          	jal	ra,22db0 <dwarf::line_table::entry::get_description[abi:cxx11]() const>
   17124:	a821                	c.j	1713c <main+0x25e>
   17126:	672a                	c.ldsp	a4,136(sp)
   17128:	67a2                	c.ldsp	a5,8(sp)
   1712a:	fef719e3          	bne	a4,a5,1711c <main+0x23e>
        printf("UNKNOWN\n");
   1712e:	0002e537          	lui	a0,0x2e
   17132:	a3850513          	addi	a0,a0,-1480 # 2da38 <__libc_csu_fini+0x86>
   17136:	e2aff0ef          	jal	ra,16760 <puts@plt>
   1713a:	a811                	c.j	1714e <main+0x270>
        printf("%s\n", it->get_description().c_str());
   1713c:	652a                	c.ldsp	a0,136(sp)
   1713e:	e22ff0ef          	jal	ra,16760 <puts@plt>
      { return _M_dataplus._M_p; }
   17142:	652a                	c.ldsp	a0,136(sp)
	if (!_M_is_local())
   17144:	093c                	c.addi4spn	a5,sp,152
   17146:	00f50463          	beq	a0,a5,1714e <main+0x270>
   1714a:	e56ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	: _M_start(), _M_finish(), _M_end_of_storage()
   1714e:	e502                	c.sdsp	zero,136(sp)
   17150:	e902                	c.sdsp	zero,144(sp)
   17152:	ed02                	c.sdsp	zero,152(sp)

      // Map PC to an object
      // XXX Index/helper/something for looking up PCs
      // XXX DW_AT_specification and DW_AT_abstract_origin
      vector<dwarf::die> stack;
      if (find_pc(cu.root(), pc, &stack)) {
   17154:	8556                	c.mv	a0,s5
   17156:	0af020ef          	jal	ra,19a04 <dwarf::unit::root() const>
   1715a:	0130                	c.addi4spn	a2,sp,136
   1715c:	85ce                	c.mv	a1,s3
   1715e:	aedff0ef          	jal	ra,16c4a <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)>
   17162:	c905                	c.beqz	a0,17192 <main+0x2b4>
   17164:	642a                	c.ldsp	s0,136(sp)
   17166:	694a                	c.ldsp	s2,144(sp)
        bool first = true;
        for (auto &d : stack) {
   17168:	02890563          	beq	s2,s0,17192 <main+0x2b4>
          if (!first)
            printf("\nInlined in:\n");
   1716c:	0002ea37          	lui	s4,0x2e
          first = false;
   17170:	4981                	c.li	s3,0
   17172:	a809                	c.j	17184 <main+0x2a6>
          dump_die(d);
   17174:	8526                	c.mv	a0,s1
   17176:	9dfff0ef          	jal	ra,16b54 <dump_die(dwarf::die const&)>
        for (auto &d : stack) {
   1717a:	07040413          	addi	s0,s0,112
          first = false;
   1717e:	854e                	c.mv	a0,s3
        for (auto &d : stack) {
   17180:	00890963          	beq	s2,s0,17192 <main+0x2b4>
   17184:	84a2                	c.mv	s1,s0
          if (!first)
   17186:	f57d                	c.bnez	a0,17174 <main+0x296>
            printf("\nInlined in:\n");
   17188:	a40a0513          	addi	a0,s4,-1472 # 2da40 <__libc_csu_fini+0x8e>
   1718c:	dd4ff0ef          	jal	ra,16760 <puts@plt>
   17190:	b7d5                	c.j	17174 <main+0x296>
        }
      }
      break;
    }
   17192:	0128                	c.addi4spn	a0,sp,136
   17194:	484000ef          	jal	ra,17618 <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()>
  }

  return 0;
}
   17198:	0228                	c.addi4spn	a0,sp,264
   1719a:	02d000ef          	jal	ra,179c6 <dwarf::dwarf::~dwarf()>
	if (_M_pi != nullptr)
   1719e:	7512                	c.ldsp	a0,288(sp)
   171a0:	c119                	c.beqz	a0,171a6 <main+0x2c8>
	  _M_pi->_M_release();
   171a2:	21c000ef          	jal	ra,173be <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
  return 0;
   171a6:	4501                	c.li	a0,0
}
   171a8:	60fa                	c.ldsp	ra,408(sp)
   171aa:	645a                	c.ldsp	s0,400(sp)
   171ac:	64ba                	c.ldsp	s1,392(sp)
   171ae:	691a                	c.ldsp	s2,384(sp)
   171b0:	79f6                	c.ldsp	s3,376(sp)
   171b2:	7a56                	c.ldsp	s4,368(sp)
   171b4:	7ab6                	c.ldsp	s5,360(sp)
   171b6:	7b16                	c.ldsp	s6,352(sp)
   171b8:	6bf6                	c.ldsp	s7,344(sp)
   171ba:	611d                	c.addi16sp	sp,416
   171bc:	8082                	c.jr	ra
  } catch (invalid_argument &e) {
   171be:	87ae                	c.mv	a5,a1
   171c0:	bbc1                	c.j	16f90 <main+0xb2>
   171c2:	caeff0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
    usage(argv[0]);
   171c6:	6088                	c.ld	a0,0(s1)
   171c8:	971ff0ef          	jal	ra,16b38 <usage(char const*)>
  } catch (out_of_range &e) {
   171cc:	842a                	c.mv	s0,a0
   171ce:	f62ff0ef          	jal	ra,16930 <__cxa_end_catch@plt>
   171d2:	8522                	c.mv	a0,s0
   171d4:	fbcff0ef          	jal	ra,16990 <_Unwind_Resume@plt>
   171d8:	c98ff0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
    usage(argv[0]);
   171dc:	6088                	c.ld	a0,0(s1)
   171de:	95bff0ef          	jal	ra,16b38 <usage(char const*)>
  }
   171e2:	842a                	c.mv	s0,a0
   171e4:	f4cff0ef          	jal	ra,16930 <__cxa_end_catch@plt>
   171e8:	8522                	c.mv	a0,s0
   171ea:	fa6ff0ef          	jal	ra,16990 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   171ee:	842a                	c.mv	s0,a0
   171f0:	7572                	c.ldsp	a0,312(sp)
   171f2:	c119                	c.beqz	a0,171f8 <main+0x31a>
	  _M_pi->_M_release();
   171f4:	1ca000ef          	jal	ra,173be <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
   171f8:	8522                	c.mv	a0,s0
   171fa:	f96ff0ef          	jal	ra,16990 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   171fe:	842a                	c.mv	s0,a0
   17200:	6536                	c.ldsp	a0,328(sp)
   17202:	c119                	c.beqz	a0,17208 <main+0x32a>
	  _M_pi->_M_release();
   17204:	1ba000ef          	jal	ra,173be <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
	if (_M_pi != nullptr)
   17208:	7512                	c.ldsp	a0,288(sp)
   1720a:	c119                	c.beqz	a0,17210 <main+0x332>
	  _M_pi->_M_release();
   1720c:	1b2000ef          	jal	ra,173be <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
   17210:	8522                	c.mv	a0,s0
   17212:	f7eff0ef          	jal	ra,16990 <_Unwind_Resume@plt>
    if (die_pc_range(cu.root()).contains(pc)) {
   17216:	842a                	c.mv	s0,a0
   17218:	0128                	c.addi4spn	a0,sp,136
   1721a:	35c000ef          	jal	ra,17576 <dwarf::rangelist::~rangelist()>
}
   1721e:	0228                	c.addi4spn	a0,sp,264
   17220:	7a6000ef          	jal	ra,179c6 <dwarf::dwarf::~dwarf()>
   17224:	b7d5                	c.j	17208 <main+0x32a>
      { return _M_dataplus._M_p; }
   17226:	842a                	c.mv	s0,a0
   17228:	652a                	c.ldsp	a0,136(sp)
	if (!_M_is_local())
   1722a:	093c                	c.addi4spn	a5,sp,152
   1722c:	fef509e3          	beq	a0,a5,1721e <main+0x340>
   17230:	d70ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }

      _GLIBCXX20_CONSTEXPR
      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   17234:	b7ed                	c.j	1721e <main+0x340>
    }
   17236:	842a                	c.mv	s0,a0
   17238:	0128                	c.addi4spn	a0,sp,136
   1723a:	3de000ef          	jal	ra,17618 <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()>
   1723e:	b7c5                	c.j	1721e <main+0x340>
}
   17240:	842a                	c.mv	s0,a0
   17242:	bff1                	c.j	1721e <main+0x340>
	if (_M_pi != nullptr)
   17244:	842a                	c.mv	s0,a0
   17246:	b7c9                	c.j	17208 <main+0x32a>

0000000000017248 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   17248:	8082                	c.jr	ra

000000000001724a <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   1724a:	1141                	c.addi	sp,-16
   1724c:	e406                	c.sdsp	ra,8(sp)
    _Destroy(_Tp* __pointer)
    {
#if __cplusplus > 201703L
      std::destroy_at(__pointer);
#else
      __pointer->~_Tp();
   1724e:	7d1c                	c.ld	a5,56(a0)
   17250:	639c                	c.ld	a5,0(a5)
   17252:	03850513          	addi	a0,a0,56
   17256:	9782                	c.jalr	a5
      }
   17258:	60a2                	c.ldsp	ra,8(sp)
   1725a:	0141                	c.addi	sp,16
   1725c:	8082                	c.jr	ra

000000000001725e <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   1725e:	1141                	c.addi	sp,-16
   17260:	e406                	c.sdsp	ra,8(sp)
   17262:	d3eff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   17266:	60a2                	c.ldsp	ra,8(sp)
   17268:	0141                	c.addi	sp,16
   1726a:	8082                	c.jr	ra

000000000001726c <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   1726c:	1141                	c.addi	sp,-16
   1726e:	e406                	c.sdsp	ra,8(sp)
   17270:	d30ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   17274:	60a2                	c.ldsp	ra,8(sp)
   17276:	0141                	c.addi	sp,16
   17278:	8082                	c.jr	ra

000000000001727a <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   1727a:	1141                	c.addi	sp,-16
   1727c:	e406                	c.sdsp	ra,8(sp)
   1727e:	e022                	c.sdsp	s0,0(sp)
   17280:	03850413          	addi	s0,a0,56
	    ||
   17284:	0002e7b7          	lui	a5,0x2e
   17288:	cd078793          	addi	a5,a5,-816 # 2dcd0 <std::_Sp_make_shared_tag::_S_ti()::__tag>
   1728c:	02f58a63          	beq	a1,a5,172c0 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
  type_info::operator==(const type_info& __arg) const _GLIBCXX_NOEXCEPT
  {
    if (std::__is_constant_evaluated())
      return this == &__arg;

    if (__name == __arg.__name)
   17290:	6588                	c.ld	a0,8(a1)
   17292:	0002e7b7          	lui	a5,0x2e
   17296:	ae078793          	addi	a5,a5,-1312 # 2dae0 <typeinfo name for std::_Sp_make_shared_tag>
   1729a:	02f50363          	beq	a0,a5,172c0 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
#if !__GXX_TYPEINFO_EQUALITY_INLINE
    // ABI requires comparisons to be non-inline.
    return __equal(__arg);
#elif !__GXX_MERGED_TYPEINFO_NAMES
    // Need to do string comparison.
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   1729e:	00054703          	lbu	a4,0(a0)
   172a2:	02a00793          	addi	a5,zero,42
   172a6:	02f70263          	beq	a4,a5,172ca <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   172aa:	0002e5b7          	lui	a1,0x2e
   172ae:	ae058593          	addi	a1,a1,-1312 # 2dae0 <typeinfo name for std::_Sp_make_shared_tag>
   172b2:	b1eff0ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   172b6:	00153513          	sltiu	a0,a0,1
   172ba:	40a00533          	sub	a0,zero,a0
   172be:	8c69                	c.and	s0,a0
      }
   172c0:	8522                	c.mv	a0,s0
   172c2:	60a2                	c.ldsp	ra,8(sp)
   172c4:	6402                	c.ldsp	s0,0(sp)
   172c6:	0141                	c.addi	sp,16
   172c8:	8082                	c.jr	ra
	return nullptr;
   172ca:	4401                	c.li	s0,0
   172cc:	bfd5                	c.j	172c0 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

00000000000172ce <dwarf::elf::elf_loader<elf::elf>::~elf_loader()>:
template <typename Elf> class elf_loader : public loader {
   172ce:	1141                	c.addi	sp,-16
   172d0:	e406                	c.sdsp	ra,8(sp)
   172d2:	e022                	c.sdsp	s0,0(sp)
   172d4:	0002e7b7          	lui	a5,0x2e
   172d8:	c8078793          	addi	a5,a5,-896 # 2dc80 <vtable for dwarf::elf::elf_loader<elf::elf>+0x10>
   172dc:	e11c                	c.sd	a5,0(a0)
	if (_M_pi != nullptr)
   172de:	6900                	c.ld	s0,16(a0)
   172e0:	c819                	c.beqz	s0,172f6 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x28>
    if (__is_single_threaded())
   172e2:	e601c783          	lbu	a5,-416(gp) # 3a660 <__libc_single_threaded@GLIBC_2.32>
   172e6:	cf81                	c.beqz	a5,172fe <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x30>
    _Atomic_word __result = *__mem;
   172e8:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   172ea:	fff5079b          	addiw	a5,a0,-1
   172ee:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   172f0:	4785                	c.li	a5,1
   172f2:	00f50c63          	beq	a0,a5,1730a <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x3c>
   172f6:	60a2                	c.ldsp	ra,8(sp)
   172f8:	6402                	c.ldsp	s0,0(sp)
   172fa:	0141                	c.addi	sp,16
   172fc:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   172fe:	55fd                	c.li	a1,-1
   17300:	03040513          	addi	a0,s0,48
   17304:	aecff0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17308:	b7e5                	c.j	172f0 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x22>
	_M_dispose();
   1730a:	601c                	c.ld	a5,0(s0)
   1730c:	6b9c                	c.ld	a5,16(a5)
   1730e:	8522                	c.mv	a0,s0
   17310:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17312:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17316:	e601c783          	lbu	a5,-416(gp) # 3a660 <__libc_single_threaded@GLIBC_2.32>
   1731a:	cf89                	c.beqz	a5,17334 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x66>
    _Atomic_word __result = *__mem;
   1731c:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1731e:	fff5079b          	addiw	a5,a0,-1
   17322:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17324:	4785                	c.li	a5,1
   17326:	fcf518e3          	bne	a0,a5,172f6 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x28>
	    _M_destroy();
   1732a:	601c                	c.ld	a5,0(s0)
   1732c:	6f9c                	c.ld	a5,24(a5)
   1732e:	8522                	c.mv	a0,s0
   17330:	9782                	c.jalr	a5
   17332:	b7d1                	c.j	172f6 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x28>
      return __exchange_and_add(__mem, __val);
   17334:	55fd                	c.li	a1,-1
   17336:	03440513          	addi	a0,s0,52
   1733a:	ab6ff0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1733e:	b7dd                	c.j	17324 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x56>

0000000000017340 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()>:
   17340:	1101                	c.addi	sp,-32
   17342:	ec06                	c.sdsp	ra,24(sp)
   17344:	e822                	c.sdsp	s0,16(sp)
   17346:	e426                	c.sdsp	s1,8(sp)
   17348:	842a                	c.mv	s0,a0
   1734a:	0002e7b7          	lui	a5,0x2e
   1734e:	c8078793          	addi	a5,a5,-896 # 2dc80 <vtable for dwarf::elf::elf_loader<elf::elf>+0x10>
   17352:	e11c                	c.sd	a5,0(a0)
	if (_M_pi != nullptr)
   17354:	6904                	c.ld	s1,16(a0)
   17356:	c899                	c.beqz	s1,1736c <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x2c>
    if (__is_single_threaded())
   17358:	e601c783          	lbu	a5,-416(gp) # 3a660 <__libc_single_threaded@GLIBC_2.32>
   1735c:	c385                	c.beqz	a5,1737c <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x3c>
    _Atomic_word __result = *__mem;
   1735e:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   17360:	fff5079b          	addiw	a5,a0,-1
   17364:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17366:	4785                	c.li	a5,1
   17368:	02f50063          	beq	a0,a5,17388 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x48>
   1736c:	8522                	c.mv	a0,s0
   1736e:	c32ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   17372:	60e2                	c.ldsp	ra,24(sp)
   17374:	6442                	c.ldsp	s0,16(sp)
   17376:	64a2                	c.ldsp	s1,8(sp)
   17378:	6105                	c.addi16sp	sp,32
   1737a:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   1737c:	55fd                	c.li	a1,-1
   1737e:	03048513          	addi	a0,s1,48
   17382:	a6eff0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17386:	b7c5                	c.j	17366 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x26>
	_M_dispose();
   17388:	609c                	c.ld	a5,0(s1)
   1738a:	6b9c                	c.ld	a5,16(a5)
   1738c:	8526                	c.mv	a0,s1
   1738e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17390:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17394:	e601c783          	lbu	a5,-416(gp) # 3a660 <__libc_single_threaded@GLIBC_2.32>
   17398:	cf89                	c.beqz	a5,173b2 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x72>
    _Atomic_word __result = *__mem;
   1739a:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1739c:	fff5079b          	addiw	a5,a0,-1
   173a0:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   173a2:	4785                	c.li	a5,1
   173a4:	fcf514e3          	bne	a0,a5,1736c <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x2c>
	    _M_destroy();
   173a8:	609c                	c.ld	a5,0(s1)
   173aa:	6f9c                	c.ld	a5,24(a5)
   173ac:	8526                	c.mv	a0,s1
   173ae:	9782                	c.jalr	a5
   173b0:	bf75                	c.j	1736c <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x2c>
      return __exchange_and_add(__mem, __val);
   173b2:	55fd                	c.li	a1,-1
   173b4:	03448513          	addi	a0,s1,52
   173b8:	a38ff0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   173bc:	b7dd                	c.j	173a2 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x62>

00000000000173be <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>:
    {
   173be:	1141                	c.addi	sp,-16
   173c0:	e406                	c.sdsp	ra,8(sp)
   173c2:	e022                	c.sdsp	s0,0(sp)
   173c4:	842a                	c.mv	s0,a0
    if (__is_single_threaded())
   173c6:	e601c783          	lbu	a5,-416(gp) # 3a660 <__libc_single_threaded@GLIBC_2.32>
   173ca:	cf81                	c.beqz	a5,173e2 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x24>
    _Atomic_word __result = *__mem;
   173cc:	5908                	c.lw	a0,48(a0)
    *__mem += __val;
   173ce:	fff5079b          	addiw	a5,a0,-1
   173d2:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   173d4:	4785                	c.li	a5,1
   173d6:	00f50c63          	beq	a0,a5,173ee <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x30>
    }
   173da:	60a2                	c.ldsp	ra,8(sp)
   173dc:	6402                	c.ldsp	s0,0(sp)
   173de:	0141                	c.addi	sp,16
   173e0:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   173e2:	55fd                	c.li	a1,-1
   173e4:	03050513          	addi	a0,a0,48
   173e8:	a08ff0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   173ec:	b7e5                	c.j	173d4 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x16>
	_M_dispose();
   173ee:	601c                	c.ld	a5,0(s0)
   173f0:	6b9c                	c.ld	a5,16(a5)
   173f2:	8522                	c.mv	a0,s0
   173f4:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   173f6:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   173fa:	e601c783          	lbu	a5,-416(gp) # 3a660 <__libc_single_threaded@GLIBC_2.32>
   173fe:	cf89                	c.beqz	a5,17418 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x5a>
    _Atomic_word __result = *__mem;
   17400:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   17402:	fff5079b          	addiw	a5,a0,-1
   17406:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17408:	4785                	c.li	a5,1
   1740a:	fcf518e3          	bne	a0,a5,173da <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x1c>
	    _M_destroy();
   1740e:	601c                	c.ld	a5,0(s0)
   17410:	6f9c                	c.ld	a5,24(a5)
   17412:	8522                	c.mv	a0,s0
   17414:	9782                	c.jalr	a5
    }
   17416:	b7d1                	c.j	173da <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x1c>
      return __exchange_and_add(__mem, __val);
   17418:	55fd                	c.li	a1,-1
   1741a:	03440513          	addi	a0,s0,52
   1741e:	9d2ff0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17422:	b7dd                	c.j	17408 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x4a>

0000000000017424 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)>:

  const void *load(section_type section, size_t *size_out) {
   17424:	7159                	c.addi16sp	sp,-112
   17426:	f486                	c.sdsp	ra,104(sp)
   17428:	f0a2                	c.sdsp	s0,96(sp)
   1742a:	eca6                	c.sdsp	s1,88(sp)
   1742c:	e8ca                	c.sdsp	s2,80(sp)
   1742e:	e4ce                	c.sdsp	s3,72(sp)
   17430:	8932                	c.mv	s2,a2
    auto sec = f.get_section(section_type_to_name(section));
   17432:	00850993          	addi	s3,a0,8
   17436:	852e                	c.mv	a0,a1
   17438:	7840f0ef          	jal	ra,26bbc <dwarf::elf::section_type_to_name(dwarf::section_type)>
	: allocator_type(__a), _M_p(__dat) { }
   1743c:	101c                	c.addi4spn	a5,sp,32
   1743e:	e83e                	c.sdsp	a5,16(sp)
      _GLIBCXX20_CONSTEXPR
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {
	// NB: Not required, but considered best practice.
	if (__s == 0)
   17440:	c91d                	c.beqz	a0,17476 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x52>
   17442:	84aa                	c.mv	s1,a0
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   17444:	a3cff0ef          	jal	ra,16680 <strlen@plt>
   17448:	842a                	c.mv	s0,a0
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   1744a:	e42a                	c.sdsp	a0,8(sp)

	if (__dnew > size_type(_S_local_capacity))
   1744c:	47bd                	c.li	a5,15
   1744e:	02a7ea63          	bltu	a5,a0,17482 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x5e>
	if (__n == 1)
   17452:	4785                	c.li	a5,1
   17454:	04f51463          	bne	a0,a5,1749c <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x78>
	__c1 = __c2;
   17458:	0004c783          	lbu	a5,0(s1)
   1745c:	02f10023          	sb	a5,32(sp)

	this->_S_copy_chars(_M_data(), __beg, __end);

	__guard._M_guarded = 0;

	_M_set_length(__dnew);
   17460:	6722                	c.ldsp	a4,8(sp)
      { _M_string_length = __length; }
   17462:	ec3a                	c.sdsp	a4,24(sp)
   17464:	67c2                	c.ldsp	a5,16(sp)
   17466:	97ba                	c.add	a5,a4
   17468:	00078023          	sb	zero,0(a5)
   1746c:	080c                	c.addi4spn	a1,sp,16
   1746e:	854e                	c.mv	a0,s3
   17470:	170140ef          	jal	ra,2b5e0 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>
   17474:	a03d                	c.j	174a2 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x7e>
	  std::__throw_logic_error(__N("basic_string: "
   17476:	0002e537          	lui	a0,0x2e
   1747a:	9b850513          	addi	a0,a0,-1608 # 2d9b8 <__libc_csu_fini+0x6>
   1747e:	ac2ff0ef          	jal	ra,16740 <std::__throw_logic_error(char const*)@plt>
	    _M_data(_M_create(__dnew, size_type(0)));
   17482:	4601                	c.li	a2,0
   17484:	002c                	c.addi4spn	a1,sp,8
   17486:	0808                	c.addi4spn	a0,sp,16
   17488:	d28ff0ef          	jal	ra,169b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
   1748c:	e82a                	c.sdsp	a0,16(sp)
      { _M_allocated_capacity = __capacity; }
   1748e:	67a2                	c.ldsp	a5,8(sp)
   17490:	f03e                	c.sdsp	a5,32(sp)
	  return __s1;
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   17492:	8622                	c.mv	a2,s0
   17494:	85a6                	c.mv	a1,s1
   17496:	baaff0ef          	jal	ra,16840 <memcpy@plt>
   1749a:	b7d9                	c.j	17460 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x3c>
	if (__n == 0)
   1749c:	d171                	c.beqz	a0,17460 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x3c>
      { return _M_dataplus._M_p; }
   1749e:	1008                	c.addi4spn	a0,sp,32
   174a0:	bfcd                	c.j	17492 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x6e>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   174a2:	611c                	c.ld	a5,0(a0)
   174a4:	f83e                	c.sdsp	a5,48(sp)
      : _M_pi(__r._M_pi)
   174a6:	6508                	c.ld	a0,8(a0)
   174a8:	fc2a                	c.sdsp	a0,56(sp)
	if (_M_pi != nullptr)
   174aa:	c519                	c.beqz	a0,174b8 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x94>
    if (__is_single_threaded())
   174ac:	e601c783          	lbu	a5,-416(gp) # 3a660 <__libc_single_threaded@GLIBC_2.32>
   174b0:	c385                	c.beqz	a5,174d0 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xac>
  { *__mem += __val; }
   174b2:	591c                	c.lw	a5,48(a0)
   174b4:	2785                	c.addiw	a5,1
   174b6:	d91c                	c.sw	a5,48(a0)
   174b8:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   174ba:	101c                	c.addi4spn	a5,sp,32
   174bc:	00f50463          	beq	a0,a5,174c4 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xa0>
   174c0:	ae0ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const noexcept
      { return _M_ptr != nullptr; }
   174c4:	7442                	c.ldsp	s0,48(sp)
    if (!sec.valid())
   174c6:	c00d                	c.beqz	s0,174e8 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xc4>
      return nullptr;
    *size_out = sec.size();
   174c8:	1808                	c.addi4spn	a0,sp,48
   174ca:	449130ef          	jal	ra,2b112 <elf::section::size() const>
   174ce:	a039                	c.j	174dc <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xb8>
      __atomic_add(__mem, __val);
   174d0:	4585                	c.li	a1,1
   174d2:	03050513          	addi	a0,a0,48
   174d6:	8daff0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   174da:	bff9                	c.j	174b8 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x94>
   174dc:	00a93023          	sd	a0,0(s2)
    return sec.data();
   174e0:	1808                	c.addi4spn	a0,sp,48
   174e2:	371130ef          	jal	ra,2b052 <elf::section::data() const>
   174e6:	842a                	c.mv	s0,a0
	if (_M_pi != nullptr)
   174e8:	74e2                	c.ldsp	s1,56(sp)
   174ea:	c899                	c.beqz	s1,17500 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xdc>
    if (__is_single_threaded())
   174ec:	e601c783          	lbu	a5,-416(gp) # 3a660 <__libc_single_threaded@GLIBC_2.32>
   174f0:	c385                	c.beqz	a5,17510 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xec>
    _Atomic_word __result = *__mem;
   174f2:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   174f4:	fff5079b          	addiw	a5,a0,-1
   174f8:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   174fa:	4785                	c.li	a5,1
   174fc:	02f50063          	beq	a0,a5,1751c <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xf8>
  }
   17500:	8522                	c.mv	a0,s0
   17502:	70a6                	c.ldsp	ra,104(sp)
   17504:	7406                	c.ldsp	s0,96(sp)
   17506:	64e6                	c.ldsp	s1,88(sp)
   17508:	6946                	c.ldsp	s2,80(sp)
   1750a:	69a6                	c.ldsp	s3,72(sp)
   1750c:	6165                	c.addi16sp	sp,112
   1750e:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   17510:	55fd                	c.li	a1,-1
   17512:	03048513          	addi	a0,s1,48
   17516:	8daff0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1751a:	b7c5                	c.j	174fa <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xd6>
	_M_dispose();
   1751c:	609c                	c.ld	a5,0(s1)
   1751e:	6b9c                	c.ld	a5,16(a5)
   17520:	8526                	c.mv	a0,s1
   17522:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17524:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17528:	e601c783          	lbu	a5,-416(gp) # 3a660 <__libc_single_threaded@GLIBC_2.32>
   1752c:	cf89                	c.beqz	a5,17546 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x122>
    _Atomic_word __result = *__mem;
   1752e:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   17530:	fff5079b          	addiw	a5,a0,-1
   17534:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17536:	4785                	c.li	a5,1
   17538:	fcf514e3          	bne	a0,a5,17500 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xdc>
	    _M_destroy();
   1753c:	609c                	c.ld	a5,0(s1)
   1753e:	6f9c                	c.ld	a5,24(a5)
   17540:	8526                	c.mv	a0,s1
   17542:	9782                	c.jalr	a5
   17544:	bf75                	c.j	17500 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xdc>
      return __exchange_and_add(__mem, __val);
   17546:	55fd                	c.li	a1,-1
   17548:	03448513          	addi	a0,s1,52
   1754c:	8a4ff0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17550:	b7dd                	c.j	17536 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x112>
      { return _M_dataplus._M_p; }
   17552:	842a                	c.mv	s0,a0
   17554:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   17556:	101c                	c.addi4spn	a5,sp,32
   17558:	00f50463          	beq	a0,a5,17560 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x13c>
   1755c:	a44ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   17560:	8522                	c.mv	a0,s0
   17562:	c2eff0ef          	jal	ra,16990 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   17566:	842a                	c.mv	s0,a0
   17568:	7562                	c.ldsp	a0,56(sp)
   1756a:	c119                	c.beqz	a0,17570 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x14c>
	  _M_pi->_M_release();
   1756c:	e53ff0ef          	jal	ra,173be <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
   17570:	8522                	c.mv	a0,s0
   17572:	c1eff0ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000017576 <dwarf::rangelist::~rangelist()>:
class rangelist {
   17576:	1101                	c.addi	sp,-32
   17578:	ec06                	c.sdsp	ra,24(sp)
   1757a:	e822                	c.sdsp	s0,16(sp)
   1757c:	e426                	c.sdsp	s1,8(sp)
   1757e:	842a                	c.mv	s0,a0
	if (_M_pi != nullptr)
   17580:	7104                	c.ld	s1,32(a0)
   17582:	c899                	c.beqz	s1,17598 <dwarf::rangelist::~rangelist()+0x22>
    if (__is_single_threaded())
   17584:	e601c783          	lbu	a5,-416(gp) # 3a660 <__libc_single_threaded@GLIBC_2.32>
   17588:	c38d                	c.beqz	a5,175aa <dwarf::rangelist::~rangelist()+0x34>
    _Atomic_word __result = *__mem;
   1758a:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1758c:	fff5079b          	addiw	a5,a0,-1
   17590:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17592:	4785                	c.li	a5,1
   17594:	02f50163          	beq	a0,a5,175b6 <dwarf::rangelist::~rangelist()+0x40>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   17598:	6008                	c.ld	a0,0(s0)
	if (__p)
   1759a:	c119                	c.beqz	a0,175a0 <dwarf::rangelist::~rangelist()+0x2a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1759c:	a04ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   175a0:	60e2                	c.ldsp	ra,24(sp)
   175a2:	6442                	c.ldsp	s0,16(sp)
   175a4:	64a2                	c.ldsp	s1,8(sp)
   175a6:	6105                	c.addi16sp	sp,32
   175a8:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   175aa:	55fd                	c.li	a1,-1
   175ac:	03048513          	addi	a0,s1,48
   175b0:	840ff0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   175b4:	bff9                	c.j	17592 <dwarf::rangelist::~rangelist()+0x1c>
	_M_dispose();
   175b6:	609c                	c.ld	a5,0(s1)
   175b8:	6b9c                	c.ld	a5,16(a5)
   175ba:	8526                	c.mv	a0,s1
   175bc:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   175be:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   175c2:	e601c783          	lbu	a5,-416(gp) # 3a660 <__libc_single_threaded@GLIBC_2.32>
   175c6:	cf89                	c.beqz	a5,175e0 <dwarf::rangelist::~rangelist()+0x6a>
    _Atomic_word __result = *__mem;
   175c8:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   175ca:	fff5079b          	addiw	a5,a0,-1
   175ce:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   175d0:	4785                	c.li	a5,1
   175d2:	fcf513e3          	bne	a0,a5,17598 <dwarf::rangelist::~rangelist()+0x22>
	    _M_destroy();
   175d6:	609c                	c.ld	a5,0(s1)
   175d8:	6f9c                	c.ld	a5,24(a5)
   175da:	8526                	c.mv	a0,s1
   175dc:	9782                	c.jalr	a5
   175de:	bf6d                	c.j	17598 <dwarf::rangelist::~rangelist()+0x22>
      return __exchange_and_add(__mem, __val);
   175e0:	55fd                	c.li	a1,-1
   175e2:	03448513          	addi	a0,s1,52
   175e6:	80aff0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   175ea:	b7dd                	c.j	175d0 <dwarf::rangelist::~rangelist()+0x5a>

00000000000175ec <dwarf::small_vector<unsigned long, 6u>::~small_vector()>:
  ~small_vector() {
   175ec:	86aa                	c.mv	a3,a0
    for (T *p = base; p < end; ++p)
   175ee:	7908                	c.ld	a0,48(a0)
   175f0:	7e9c                	c.ld	a5,56(a3)
   175f2:	00f57763          	bgeu	a0,a5,17600 <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0x14>
   175f6:	87aa                	c.mv	a5,a0
   175f8:	07a1                	c.addi	a5,8
   175fa:	7e98                	c.ld	a4,56(a3)
   175fc:	fee7eee3          	bltu	a5,a4,175f8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0xc>
    end = base;
   17600:	fe88                	c.sd	a0,56(a3)
    if ((char *)base != buf)
   17602:	00a68a63          	beq	a3,a0,17616 <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0x2a>
      delete[] (char *)base;
   17606:	c901                	c.beqz	a0,17616 <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0x2a>
  ~small_vector() {
   17608:	1141                	c.addi	sp,-16
   1760a:	e406                	c.sdsp	ra,8(sp)
      delete[] (char *)base;
   1760c:	a44ff0ef          	jal	ra,16850 <operator delete[](void*)@plt>
  }
   17610:	60a2                	c.ldsp	ra,8(sp)
   17612:	0141                	c.addi	sp,16
   17614:	8082                	c.jr	ra
   17616:	8082                	c.jr	ra

0000000000017618 <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()>:
      ~vector() _GLIBCXX_NOEXCEPT
   17618:	1101                	c.addi	sp,-32
   1761a:	ec06                	c.sdsp	ra,24(sp)
   1761c:	e822                	c.sdsp	s0,16(sp)
   1761e:	e426                	c.sdsp	s1,8(sp)
   17620:	e04a                	c.sdsp	s2,0(sp)
   17622:	892a                	c.mv	s2,a0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   17624:	6100                	c.ld	s0,0(a0)
   17626:	6504                	c.ld	s1,8(a0)
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   17628:	02941363          	bne	s0,s1,1764e <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()+0x36>
	_M_deallocate(_M_impl._M_start,
   1762c:	00093503          	ld	a0,0(s2)
	if (__p)
   17630:	c119                	c.beqz	a0,17636 <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()+0x1e>
   17632:	96eff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   17636:	60e2                	c.ldsp	ra,24(sp)
   17638:	6442                	c.ldsp	s0,16(sp)
   1763a:	64a2                	c.ldsp	s1,8(sp)
   1763c:	6902                	c.ldsp	s2,0(sp)
   1763e:	6105                	c.addi16sp	sp,32
   17640:	8082                	c.jr	ra
      delete[] (char *)base;
   17642:	a0eff0ef          	jal	ra,16850 <operator delete[](void*)@plt>
   17646:	07040413          	addi	s0,s0,112
   1764a:	fe8481e3          	beq	s1,s0,1762c <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()+0x14>
    for (T *p = base; p < end; ++p)
   1764e:	6828                	c.ld	a0,80(s0)
   17650:	6c3c                	c.ld	a5,88(s0)
   17652:	00f57763          	bgeu	a0,a5,17660 <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()+0x48>
   17656:	87aa                	c.mv	a5,a0
   17658:	07a1                	c.addi	a5,8
   1765a:	6c38                	c.ld	a4,88(s0)
   1765c:	fee7eee3          	bltu	a5,a4,17658 <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()+0x40>
    end = base;
   17660:	ec28                	c.sd	a0,88(s0)
    if ((char *)base != buf)
   17662:	02040793          	addi	a5,s0,32
   17666:	fef500e3          	beq	a0,a5,17646 <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()+0x2e>
      delete[] (char *)base;
   1766a:	fd61                	c.bnez	a0,17642 <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()+0x2a>
   1766c:	bfe9                	c.j	17646 <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()+0x2e>

000000000001766e <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)>:
#endif

  template<typename _InputIterator, typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR
    _ForwardIterator
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
   1766e:	711d                	c.addi16sp	sp,-96
   17670:	ec86                	c.sdsp	ra,88(sp)
   17672:	e8a2                	c.sdsp	s0,80(sp)
   17674:	e4a6                	c.sdsp	s1,72(sp)
   17676:	e0ca                	c.sdsp	s2,64(sp)
   17678:	fc4e                	c.sdsp	s3,56(sp)
   1767a:	f852                	c.sdsp	s4,48(sp)
   1767c:	f456                	c.sdsp	s5,40(sp)
   1767e:	f05a                	c.sdsp	s6,32(sp)
   17680:	ec5e                	c.sdsp	s7,24(sp)
   17682:	e862                	c.sdsp	s8,16(sp)
   17684:	e466                	c.sdsp	s9,8(sp)
   17686:	e06a                	c.sdsp	s10,0(sp)
   17688:	8b32                	c.mv	s6,a2
		     _ForwardIterator __result)
    {
      _ForwardIterator __cur = __result;
      __try
	{
	  for (; __first != __last; ++__first, (void)++__cur)
   1768a:	0cb50b63          	beq	a0,a1,17760 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0xf2>
   1768e:	84aa                	c.mv	s1,a0
   17690:	8aae                	c.mv	s5,a1
   17692:	02060993          	addi	s3,a2,32
      _ForwardIterator __cur = __result;
   17696:	8432                	c.mv	s0,a2
   17698:	a88d                	c.j	1770a <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x9c>
    char *newbuf = new char[sizeof(T[target])];
   1769a:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   1769c:	6828                	c.ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   1769e:	6c38                	c.ld	a4,88(s0)
   176a0:	0ae57e63          	bgeu	a0,a4,1775c <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0xee>
    T *src = base, *dest = (T *)newbuf;
   176a4:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   176a6:	07a1                	c.addi	a5,8
   176a8:	fee7efe3          	bltu	a5,a4,176a6 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x38>
   176ac:	fff70d13          	addi	s10,a4,-1
   176b0:	40ad0d33          	sub	s10,s10,a0
   176b4:	ff8d7d13          	andi	s10,s10,-8
   176b8:	0d21                	c.addi	s10,8
   176ba:	9d66                	c.add	s10,s9
    if ((char *)base != buf)
   176bc:	00ac0563          	beq	s8,a0,176c6 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x58>
      delete[] (char *)base;
   176c0:	c119                	c.beqz	a0,176c6 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x58>
   176c2:	98eff0ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   176c6:	05943823          	sd	s9,80(s0)
    end = dest;
   176ca:	05a43c23          	sd	s10,88(s0)
    cap = base + target;
   176ce:	9cde                	c.add	s9,s7
   176d0:	07943023          	sd	s9,96(s0)
    for (size_type i = 0; i < osize; i++)
   176d4:	00090e63          	beq	s2,zero,176f0 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x82>
   176d8:	4781                	c.li	a5,0
   176da:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   176de:	68b8                	c.ld	a4,80(s1)
   176e0:	9736                	c.add	a4,a3
   176e2:	6310                	c.ld	a2,0(a4)
   176e4:	6838                	c.ld	a4,80(s0)
   176e6:	9736                	c.add	a4,a3
   176e8:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   176ea:	0785                	c.addi	a5,1
   176ec:	fef917e3          	bne	s2,a5,176da <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x6c>
    end = base + osize;
   176f0:	683c                	c.ld	a5,80(s0)
   176f2:	97d2                	c.add	a5,s4
   176f4:	ec3c                	c.sd	a5,88(s0)
  die(const die &o) = default;
   176f6:	74bc                	c.ld	a5,104(s1)
   176f8:	f43c                	c.sd	a5,104(s0)
	  for (; __first != __last; ++__first, (void)++__cur)
   176fa:	07048493          	addi	s1,s1,112
   176fe:	07040413          	addi	s0,s0,112
   17702:	07098993          	addi	s3,s3,112
   17706:	049a8e63          	beq	s5,s1,17762 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0xf4>
   1770a:	409c                	c.lw	a5,0(s1)
   1770c:	c01c                	c.sw	a5,0(s0)
   1770e:	649c                	c.ld	a5,8(s1)
   17710:	e41c                	c.sd	a5,8(s0)
   17712:	689c                	c.ld	a5,16(s1)
   17714:	e81c                	c.sd	a5,16(s0)
   17716:	6c9c                	c.ld	a5,24(s1)
   17718:	ec1c                	c.sd	a5,24(s0)
   1771a:	8c4e                	c.mv	s8,s3
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   1771c:	05343823          	sd	s3,80(s0)
   17720:	05343c23          	sd	s3,88(s0)
   17724:	05040513          	addi	a0,s0,80
   17728:	f028                	c.sd	a0,96(s0)
  size_type size() const { return end - base; }
   1772a:	0584ba03          	ld	s4,88(s1)
   1772e:	68bc                	c.ld	a5,80(s1)
   17730:	40fa0a33          	sub	s4,s4,a5
   17734:	403a5913          	srai	s2,s4,0x3
    if (n <= (size_type)(cap - base))
   17738:	41350533          	sub	a0,a0,s3
   1773c:	f9457ce3          	bgeu	a0,s4,176d4 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x66>
   17740:	850d                	c.srai	a0,0x3
   17742:	e111                	c.bnez	a0,17746 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0xd8>
   17744:	4505                	c.li	a0,1
    while (target < n)
   17746:	01257563          	bgeu	a0,s2,17750 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0xe2>
      target <<= 1;
   1774a:	0506                	c.slli	a0,0x1
    while (target < n)
   1774c:	ff256fe3          	bltu	a0,s2,1774a <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0xdc>
    char *newbuf = new char[sizeof(T[target])];
   17750:	00351b93          	slli	s7,a0,0x3
   17754:	855e                	c.mv	a0,s7
   17756:	e3bfe0ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   1775a:	b781                	c.j	1769a <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x2c>
    T *src = base, *dest = (T *)newbuf;
   1775c:	8d66                	c.mv	s10,s9
   1775e:	bfb9                	c.j	176bc <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x4e>
      _ForwardIterator __cur = __result;
   17760:	8432                	c.mv	s0,a2
      __catch(...)
	{
	  std::_Destroy(__result, __cur);
	  __throw_exception_again;
	}
    }
   17762:	8522                	c.mv	a0,s0
   17764:	60e6                	c.ldsp	ra,88(sp)
   17766:	6446                	c.ldsp	s0,80(sp)
   17768:	64a6                	c.ldsp	s1,72(sp)
   1776a:	6906                	c.ldsp	s2,64(sp)
   1776c:	79e2                	c.ldsp	s3,56(sp)
   1776e:	7a42                	c.ldsp	s4,48(sp)
   17770:	7aa2                	c.ldsp	s5,40(sp)
   17772:	7b02                	c.ldsp	s6,32(sp)
   17774:	6be2                	c.ldsp	s7,24(sp)
   17776:	6c42                	c.ldsp	s8,16(sp)
   17778:	6ca2                	c.ldsp	s9,8(sp)
   1777a:	6d02                	c.ldsp	s10,0(sp)
   1777c:	6125                	c.addi16sp	sp,96
   1777e:	8082                	c.jr	ra
      __catch(...)
   17780:	ef1fe0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
   17784:	008b1a63          	bne	s6,s0,17798 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x12a>
	  __throw_exception_again;
   17788:	938ff0ef          	jal	ra,168c0 <__cxa_rethrow@plt>
      __catch(...)
   1778c:	842a                	c.mv	s0,a0
   1778e:	9a2ff0ef          	jal	ra,16930 <__cxa_end_catch@plt>
   17792:	8522                	c.mv	a0,s0
   17794:	9fcff0ef          	jal	ra,16990 <_Unwind_Resume@plt>
class die {
   17798:	020b0513          	addi	a0,s6,32
   1779c:	e51ff0ef          	jal	ra,175ec <dwarf::small_vector<unsigned long, 6u>::~small_vector()>
   177a0:	070b0b13          	addi	s6,s6,112
   177a4:	b7c5                	c.j	17784 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x116>

00000000000177a6 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
   177a6:	7119                	c.addi16sp	sp,-128
   177a8:	fc86                	c.sdsp	ra,120(sp)
   177aa:	f8a2                	c.sdsp	s0,112(sp)
   177ac:	f4a6                	c.sdsp	s1,104(sp)
   177ae:	f0ca                	c.sdsp	s2,96(sp)
   177b0:	ecce                	c.sdsp	s3,88(sp)
   177b2:	e8d2                	c.sdsp	s4,80(sp)
   177b4:	e4d6                	c.sdsp	s5,72(sp)
   177b6:	e0da                	c.sdsp	s6,64(sp)
   177b8:	fc5e                	c.sdsp	s7,56(sp)
   177ba:	f862                	c.sdsp	s8,48(sp)
   177bc:	f466                	c.sdsp	s9,40(sp)
   177be:	f06a                	c.sdsp	s10,32(sp)
   177c0:	ec6e                	c.sdsp	s11,24(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   177c2:	00853a03          	ld	s4,8(a0)
   177c6:	00053a83          	ld	s5,0(a0)
   177ca:	415a07b3          	sub	a5,s4,s5
   177ce:	8791                	c.srai	a5,0x4
   177d0:	e201b703          	ld	a4,-480(gp) # 3a620 <__SDATA_BEGIN__+0x8>
   177d4:	02e787b3          	mul	a5,a5,a4
      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   177d8:	e181b703          	ld	a4,-488(gp) # 3a618 <__SDATA_BEGIN__>
   177dc:	02e78863          	beq	a5,a4,1780c <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x66>
   177e0:	8b2a                	c.mv	s6,a0
   177e2:	8c2e                	c.mv	s8,a1
   177e4:	84b2                	c.mv	s1,a2
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
      return __a;
   177e6:	873e                	c.mv	a4,a5
      if (__a < __b)
   177e8:	035a0863          	beq	s4,s5,17818 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x72>
	  __throw_length_error(__N(__s));

	const size_type __len = size() + (std::max)(size(), __n);
   177ec:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   177ee:	16f76563          	bltu	a4,a5,17958 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x1b2>
   177f2:	8dba                	c.mv	s11,a4
   177f4:	e181b783          	ld	a5,-488(gp) # 3a618 <__SDATA_BEGIN__>
   177f8:	00e7f463          	bgeu	a5,a4,17800 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x5a>
   177fc:	e181bd83          	ld	s11,-488(gp) # 3a618 <__SDATA_BEGIN__>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   17800:	415c0433          	sub	s0,s8,s5
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   17804:	4b81                	c.li	s7,0
   17806:	16070563          	beq	a4,zero,17970 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x1ca>
   1780a:	aa99                	c.j	17960 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x1ba>
	  __throw_length_error(__N(__s));
   1780c:	0002e537          	lui	a0,0x2e
   17810:	a5050513          	addi	a0,a0,-1456 # 2da50 <__libc_csu_fini+0x9e>
   17814:	e8dfe0ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   17818:	4705                	c.li	a4,1
   1781a:	bfc9                	c.j	177ec <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x46>
    char *newbuf = new char[sizeof(T[target])];
   1781c:	e02a                	c.sdsp	a0,0(sp)
    T *src = base, *dest = (T *)newbuf;
   1781e:	6828                	c.ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   17820:	6c38                	c.ld	a4,88(s0)
   17822:	06e57463          	bgeu	a0,a4,1788a <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0xe4>
    T *src = base, *dest = (T *)newbuf;
   17826:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   17828:	07a1                	c.addi	a5,8
   1782a:	fee7efe3          	bltu	a5,a4,17828 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x82>
   1782e:	fff70993          	addi	s3,a4,-1
   17832:	40a989b3          	sub	s3,s3,a0
   17836:	ff89f993          	andi	s3,s3,-8
   1783a:	09a1                	c.addi	s3,8
   1783c:	6782                	c.ldsp	a5,0(sp)
   1783e:	99be                	c.add	s3,a5
    if ((char *)base != buf)
   17840:	00ad0563          	beq	s10,a0,1784a <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0xa4>
      delete[] (char *)base;
   17844:	c119                	c.beqz	a0,1784a <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0xa4>
   17846:	80aff0ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1784a:	6782                	c.ldsp	a5,0(sp)
   1784c:	e83c                	c.sd	a5,80(s0)
    end = dest;
   1784e:	05343c23          	sd	s3,88(s0)
    cap = base + target;
   17852:	6722                	c.ldsp	a4,8(sp)
   17854:	97ba                	c.add	a5,a4
   17856:	f03c                	c.sd	a5,96(s0)
    for (size_type i = 0; i < osize; i++)
   17858:	00090e63          	beq	s2,zero,17874 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0xce>
   1785c:	4781                	c.li	a5,0
   1785e:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   17862:	68b8                	c.ld	a4,80(s1)
   17864:	9736                	c.add	a4,a3
   17866:	6310                	c.ld	a2,0(a4)
   17868:	6838                	c.ld	a4,80(s0)
   1786a:	9736                	c.add	a4,a3
   1786c:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1786e:	0785                	c.addi	a5,1
   17870:	fef917e3          	bne	s2,a5,1785e <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0xb8>
    end = base + osize;
   17874:	683c                	c.ld	a5,80(s0)
   17876:	97e6                	c.add	a5,s9
   17878:	ec3c                	c.sd	a5,88(s0)
  die(const die &o) = default;
   1787a:	74bc                	c.ld	a5,104(s1)
   1787c:	f43c                	c.sd	a5,104(s0)
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
	{ return std::__do_uninit_copy(__first, __last, __result); }
   1787e:	865e                	c.mv	a2,s7
   17880:	85e2                	c.mv	a1,s8
   17882:	8556                	c.mv	a0,s5
   17884:	debff0ef          	jal	ra,1766e <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)>
   17888:	a019                	c.j	1788e <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0xe8>
    T *src = base, *dest = (T *)newbuf;
   1788a:	6982                	c.ldsp	s3,0(sp)
   1788c:	bf55                	c.j	17840 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x9a>
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
		 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   1788e:	07050413          	addi	s0,a0,112
   17892:	8622                	c.mv	a2,s0
   17894:	85d2                	c.mv	a1,s4
   17896:	8562                	c.mv	a0,s8
   17898:	dd7ff0ef          	jal	ra,1766e <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)>
   1789c:	a039                	c.j	178aa <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x104>
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
		 __new_finish, _M_get_Tp_allocator());
	    }
	}
      __catch(...)
   1789e:	dd3fe0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
class die {
   178a2:	856a                	c.mv	a0,s10
   178a4:	d49ff0ef          	jal	ra,175ec <dwarf::small_vector<unsigned long, 6u>::~small_vector()>
#if __cplusplus <= 201703L
	  __a.destroy(__p);
#else
	  std::destroy_at(__p);
#endif
	}
   178a8:	a859                	c.j	1793e <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x198>
   178aa:	84aa                	c.mv	s1,a0
   178ac:	8456                	c.mv	s0,s5
   178ae:	075a1463          	bne	s4,s5,17916 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x170>
	if (__p)
   178b2:	000a8563          	beq	s5,zero,178bc <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x116>
   178b6:	8556                	c.mv	a0,s5
   178b8:	ee9fe0ef          	jal	ra,167a0 <operator delete(void*)@plt>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
   178bc:	017b3023          	sd	s7,0(s6)
      this->_M_impl._M_finish = __new_finish;
   178c0:	009b3423          	sd	s1,8(s6)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   178c4:	003d9793          	slli	a5,s11,0x3
   178c8:	41b787b3          	sub	a5,a5,s11
   178cc:	0792                	c.slli	a5,0x4
   178ce:	97de                	c.add	a5,s7
   178d0:	00fb3823          	sd	a5,16(s6)
    }
   178d4:	70e6                	c.ldsp	ra,120(sp)
   178d6:	7446                	c.ldsp	s0,112(sp)
   178d8:	74a6                	c.ldsp	s1,104(sp)
   178da:	7906                	c.ldsp	s2,96(sp)
   178dc:	69e6                	c.ldsp	s3,88(sp)
   178de:	6a46                	c.ldsp	s4,80(sp)
   178e0:	6aa6                	c.ldsp	s5,72(sp)
   178e2:	6b06                	c.ldsp	s6,64(sp)
   178e4:	7be2                	c.ldsp	s7,56(sp)
   178e6:	7c42                	c.ldsp	s8,48(sp)
   178e8:	7ca2                	c.ldsp	s9,40(sp)
   178ea:	7d02                	c.ldsp	s10,32(sp)
   178ec:	6de2                	c.ldsp	s11,24(sp)
   178ee:	6109                	c.addi16sp	sp,128
   178f0:	8082                	c.jr	ra
      __catch(...)
   178f2:	d7ffe0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
   178f6:	84de                	c.mv	s1,s7
   178f8:	04940363          	beq	s0,s1,1793e <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x198>
   178fc:	02048513          	addi	a0,s1,32
   17900:	cedff0ef          	jal	ra,175ec <dwarf::small_vector<unsigned long, 6u>::~small_vector()>
   17904:	07048493          	addi	s1,s1,112
   17908:	bfc5                	c.j	178f8 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x152>
      delete[] (char *)base;
   1790a:	f47fe0ef          	jal	ra,16850 <operator delete[](void*)@plt>
   1790e:	07040413          	addi	s0,s0,112
   17912:	fb4400e3          	beq	s0,s4,178b2 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x10c>
    for (T *p = base; p < end; ++p)
   17916:	6828                	c.ld	a0,80(s0)
   17918:	6c3c                	c.ld	a5,88(s0)
   1791a:	00f57763          	bgeu	a0,a5,17928 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x182>
   1791e:	87aa                	c.mv	a5,a0
   17920:	07a1                	c.addi	a5,8
   17922:	6c38                	c.ld	a4,88(s0)
   17924:	fee7eee3          	bltu	a5,a4,17920 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x17a>
    end = base;
   17928:	ec28                	c.sd	a0,88(s0)
    if ((char *)base != buf)
   1792a:	02040793          	addi	a5,s0,32
   1792e:	fef500e3          	beq	a0,a5,1790e <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x168>
      delete[] (char *)base;
   17932:	fd61                	c.bnez	a0,1790a <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x164>
   17934:	bfe9                	c.j	1790e <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x168>
   17936:	d3bfe0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   1793a:	f60b84e3          	beq	s7,zero,178a2 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0xfc>
   1793e:	000b8563          	beq	s7,zero,17948 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x1a2>
   17942:	855e                	c.mv	a0,s7
   17944:	e5dfe0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	  __throw_exception_again;
   17948:	f79fe0ef          	jal	ra,168c0 <__cxa_rethrow@plt>
      __catch(...)
   1794c:	842a                	c.mv	s0,a0
   1794e:	fe3fe0ef          	jal	ra,16930 <__cxa_end_catch@plt>
   17952:	8522                	c.mv	a0,s0
   17954:	83cff0ef          	jal	ra,16990 <_Unwind_Resume@plt>
   17958:	415c0433          	sub	s0,s8,s5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1795c:	e181bd83          	ld	s11,-488(gp) # 3a618 <__SDATA_BEGIN__>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   17960:	003d9513          	slli	a0,s11,0x3
   17964:	41b50533          	sub	a0,a0,s11
   17968:	0512                	c.slli	a0,0x4
   1796a:	e47fe0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1796e:	8baa                	c.mv	s7,a0
	  _Alloc_traits::construct(this->_M_impl,
   17970:	945e                	c.add	s0,s7
  die(const die &o) = default;
   17972:	409c                	c.lw	a5,0(s1)
   17974:	c01c                	c.sw	a5,0(s0)
   17976:	649c                	c.ld	a5,8(s1)
   17978:	e41c                	c.sd	a5,8(s0)
   1797a:	689c                	c.ld	a5,16(s1)
   1797c:	e81c                	c.sd	a5,16(s0)
   1797e:	6c9c                	c.ld	a5,24(s1)
   17980:	ec1c                	c.sd	a5,24(s0)
   17982:	02040d13          	addi	s10,s0,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   17986:	05a43823          	sd	s10,80(s0)
   1798a:	05040793          	addi	a5,s0,80
   1798e:	f03c                	c.sd	a5,96(s0)
  size_type size() const { return end - base; }
   17990:	0584bc83          	ld	s9,88(s1)
   17994:	68b8                	c.ld	a4,80(s1)
   17996:	40ec8cb3          	sub	s9,s9,a4
   1799a:	403cd913          	srai	s2,s9,0x3
    end = base;
   1799e:	05a43c23          	sd	s10,88(s0)
    if (n <= (size_type)(cap - base))
   179a2:	41a787b3          	sub	a5,a5,s10
   179a6:	eb97f9e3          	bgeu	a5,s9,17858 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0xb2>
   179aa:	878d                	c.srai	a5,0x3
   179ac:	e391                	c.bnez	a5,179b0 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x20a>
   179ae:	4785                	c.li	a5,1
    while (target < n)
   179b0:	0127f563          	bgeu	a5,s2,179ba <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x214>
      target <<= 1;
   179b4:	0786                	c.slli	a5,0x1
    while (target < n)
   179b6:	ff27efe3          	bltu	a5,s2,179b4 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x20e>
    char *newbuf = new char[sizeof(T[target])];
   179ba:	078e                	c.slli	a5,0x3
   179bc:	e43e                	c.sdsp	a5,8(sp)
   179be:	853e                	c.mv	a0,a5
   179c0:	bd1fe0ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   179c4:	bda1                	c.j	1781c <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x76>

00000000000179c6 <dwarf::dwarf::~dwarf()>:
    m->compilation_units.emplace_back(*this, infocur.get_section_offset());
    infocur.subsection();
  }
}

dwarf::~dwarf() {}
   179c6:	1141                	c.addi	sp,-16
   179c8:	e406                	c.sdsp	ra,8(sp)
   179ca:	e022                	c.sdsp	s0,0(sp)
	if (_M_pi != nullptr)
   179cc:	6500                	c.ld	s0,8(a0)
   179ce:	cc19                	c.beqz	s0,179ec <dwarf::dwarf::~dwarf()+0x26>
    if (__is_single_threaded())
   179d0:	00023797          	auipc	a5,0x23
   179d4:	ac87b783          	ld	a5,-1336(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   179d8:	0007c783          	lbu	a5,0(a5)
   179dc:	cf81                	c.beqz	a5,179f4 <dwarf::dwarf::~dwarf()+0x2e>
    _Atomic_word __result = *__mem;
   179de:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   179e0:	fff5079b          	addiw	a5,a0,-1
   179e4:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   179e6:	4785                	c.li	a5,1
   179e8:	00f50c63          	beq	a0,a5,17a00 <dwarf::dwarf::~dwarf()+0x3a>
   179ec:	60a2                	c.ldsp	ra,8(sp)
   179ee:	6402                	c.ldsp	s0,0(sp)
   179f0:	0141                	c.addi	sp,16
   179f2:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   179f4:	55fd                	c.li	a1,-1
   179f6:	03040513          	addi	a0,s0,48
   179fa:	bf7fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   179fe:	b7e5                	c.j	179e6 <dwarf::dwarf::~dwarf()+0x20>
	_M_dispose();
   17a00:	601c                	c.ld	a5,0(s0)
   17a02:	6b9c                	c.ld	a5,16(a5)
   17a04:	8522                	c.mv	a0,s0
   17a06:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17a08:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17a0c:	00023797          	auipc	a5,0x23
   17a10:	a8c7b783          	ld	a5,-1396(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   17a14:	0007c783          	lbu	a5,0(a5)
   17a18:	cf89                	c.beqz	a5,17a32 <dwarf::dwarf::~dwarf()+0x6c>
    _Atomic_word __result = *__mem;
   17a1a:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   17a1c:	fff5079b          	addiw	a5,a0,-1
   17a20:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17a22:	4785                	c.li	a5,1
   17a24:	fcf514e3          	bne	a0,a5,179ec <dwarf::dwarf::~dwarf()+0x26>
	    _M_destroy();
   17a28:	601c                	c.ld	a5,0(s0)
   17a2a:	6f9c                	c.ld	a5,24(a5)
   17a2c:	8522                	c.mv	a0,s0
   17a2e:	9782                	c.jalr	a5
   17a30:	bf75                	c.j	179ec <dwarf::dwarf::~dwarf()+0x26>
      return __exchange_and_add(__mem, __val);
   17a32:	55fd                	c.li	a1,-1
   17a34:	03440513          	addi	a0,s0,52
   17a38:	bb9fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17a3c:	b7dd                	c.j	17a22 <dwarf::dwarf::~dwarf()+0x5c>

0000000000017a3e <dwarf::dwarf::compilation_units() const>:

const std::vector<compilation_unit> &dwarf::compilation_units() const {
   17a3e:	1141                	c.addi	sp,-16
   17a40:	e406                	c.sdsp	ra,8(sp)
   17a42:	e022                	c.sdsp	s0,0(sp)
   17a44:	842a                	c.mv	s0,a0
  static std::vector<compilation_unit> empty;
   17a46:	e8018513          	addi	a0,gp,-384 # 3a680 <guard variable for dwarf::dwarf::compilation_units() const::empty>
   17a4a:	f97fe0ef          	jal	ra,169e0 <__cxa_guard_acquire@plt>
   17a4e:	e909                	c.bnez	a0,17a60 <dwarf::dwarf::compilation_units() const+0x22>
      { return _M_ptr != nullptr; }
   17a50:	6008                	c.ld	a0,0(s0)
  if (!m)
   17a52:	cd05                	c.beqz	a0,17a8a <dwarf::dwarf::compilation_units() const+0x4c>
    return empty;
  return m->compilation_units;
   17a54:	03050513          	addi	a0,a0,48
}
   17a58:	60a2                	c.ldsp	ra,8(sp)
   17a5a:	6402                	c.ldsp	s0,0(sp)
   17a5c:	0141                	c.addi	sp,16
   17a5e:	8082                	c.jr	ra
	: _M_start(), _M_finish(), _M_end_of_storage()
   17a60:	e6818593          	addi	a1,gp,-408 # 3a668 <dwarf::dwarf::compilation_units() const::empty>
   17a64:	0005b023          	sd	zero,0(a1)
   17a68:	0005b423          	sd	zero,8(a1)
   17a6c:	0005b823          	sd	zero,16(a1)
  static std::vector<compilation_unit> empty;
   17a70:	e3018613          	addi	a2,gp,-464 # 3a630 <__dso_handle>
   17a74:	00023517          	auipc	a0,0x23
   17a78:	91453503          	ld	a0,-1772(a0) # 3a388 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()@@Base+0x201cc>
   17a7c:	f45fe0ef          	jal	ra,169c0 <__cxa_atexit@plt>
   17a80:	e8018513          	addi	a0,gp,-384 # 3a680 <guard variable for dwarf::dwarf::compilation_units() const::empty>
   17a84:	c7dfe0ef          	jal	ra,16700 <__cxa_guard_release@plt>
   17a88:	b7e1                	c.j	17a50 <dwarf::dwarf::compilation_units() const+0x12>
    return empty;
   17a8a:	e6818513          	addi	a0,gp,-408 # 3a668 <dwarf::dwarf::compilation_units() const::empty>
   17a8e:	b7e9                	c.j	17a58 <dwarf::dwarf::compilation_units() const+0x1a>

0000000000017a90 <dwarf::unit::~unit()>:
        have_abbrevs(false) {}

  void force_abbrevs();
};

unit::~unit() {}
   17a90:	1141                	c.addi	sp,-16
   17a92:	e406                	c.sdsp	ra,8(sp)
   17a94:	e022                	c.sdsp	s0,0(sp)
   17a96:	00023797          	auipc	a5,0x23
   17a9a:	b327b783          	ld	a5,-1230(a5) # 3a5c8 <vtable for dwarf::unit@@Base+0xc98>
   17a9e:	07c1                	c.addi	a5,16
   17aa0:	e11c                	c.sd	a5,0(a0)
	if (_M_pi != nullptr)
   17aa2:	6900                	c.ld	s0,16(a0)
   17aa4:	cc19                	c.beqz	s0,17ac2 <dwarf::unit::~unit()+0x32>
    if (__is_single_threaded())
   17aa6:	00023797          	auipc	a5,0x23
   17aaa:	9f27b783          	ld	a5,-1550(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   17aae:	0007c783          	lbu	a5,0(a5)
   17ab2:	cf81                	c.beqz	a5,17aca <dwarf::unit::~unit()+0x3a>
    _Atomic_word __result = *__mem;
   17ab4:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   17ab6:	fff5079b          	addiw	a5,a0,-1
   17aba:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17abc:	4785                	c.li	a5,1
   17abe:	00f50c63          	beq	a0,a5,17ad6 <dwarf::unit::~unit()+0x46>
   17ac2:	60a2                	c.ldsp	ra,8(sp)
   17ac4:	6402                	c.ldsp	s0,0(sp)
   17ac6:	0141                	c.addi	sp,16
   17ac8:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   17aca:	55fd                	c.li	a1,-1
   17acc:	03040513          	addi	a0,s0,48
   17ad0:	b21fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17ad4:	b7e5                	c.j	17abc <dwarf::unit::~unit()+0x2c>
	_M_dispose();
   17ad6:	601c                	c.ld	a5,0(s0)
   17ad8:	6b9c                	c.ld	a5,16(a5)
   17ada:	8522                	c.mv	a0,s0
   17adc:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17ade:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17ae2:	00023797          	auipc	a5,0x23
   17ae6:	9b67b783          	ld	a5,-1610(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   17aea:	0007c783          	lbu	a5,0(a5)
   17aee:	cf89                	c.beqz	a5,17b08 <dwarf::unit::~unit()+0x78>
    _Atomic_word __result = *__mem;
   17af0:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   17af2:	fff5079b          	addiw	a5,a0,-1
   17af6:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17af8:	4785                	c.li	a5,1
   17afa:	fcf514e3          	bne	a0,a5,17ac2 <dwarf::unit::~unit()+0x32>
	    _M_destroy();
   17afe:	601c                	c.ld	a5,0(s0)
   17b00:	6f9c                	c.ld	a5,24(a5)
   17b02:	8522                	c.mv	a0,s0
   17b04:	9782                	c.jalr	a5
   17b06:	bf75                	c.j	17ac2 <dwarf::unit::~unit()+0x32>
      return __exchange_and_add(__mem, __val);
   17b08:	55fd                	c.li	a1,-1
   17b0a:	03440513          	addi	a0,s0,52
   17b0e:	ae3fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17b12:	b7dd                	c.j	17af8 <dwarf::unit::~unit()+0x68>

0000000000017b14 <dwarf::unit::~unit()>:
   17b14:	1141                	c.addi	sp,-16
   17b16:	e406                	c.sdsp	ra,8(sp)
   17b18:	e022                	c.sdsp	s0,0(sp)
   17b1a:	842a                	c.mv	s0,a0
   17b1c:	f75ff0ef          	jal	ra,17a90 <dwarf::unit::~unit()>
   17b20:	8522                	c.mv	a0,s0
   17b22:	c7ffe0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   17b26:	60a2                	c.ldsp	ra,8(sp)
   17b28:	6402                	c.ldsp	s0,0(sp)
   17b2a:	0141                	c.addi	sp,16
   17b2c:	8082                	c.jr	ra

0000000000017b2e <dwarf::unit::get_dwarf() const>:

const dwarf &unit::get_dwarf() const { return m->file; }
   17b2e:	6508                	c.ld	a0,8(a0)
   17b30:	8082                	c.jr	ra

0000000000017b32 <dwarf::unit::get_section_offset() const>:

section_offset unit::get_section_offset() const { return m->offset; }
   17b32:	651c                	c.ld	a5,8(a0)
   17b34:	6b88                	c.ld	a0,16(a5)
   17b36:	8082                	c.jr	ra

0000000000017b38 <dwarf::unit::data() const>:
    m->root.read(m->root_offset);
  }
  return m->root;
}

const std::shared_ptr<section> &unit::data() const { return m->subsec; }
   17b38:	6508                	c.ld	a0,8(a0)
   17b3a:	0561                	c.addi	a0,24
   17b3c:	8082                	c.jr	ra

0000000000017b3e <dwarf::type_unit::get_type_signature() const>:

  m = make_shared<impl>(file, offset, subsec, debug_abbrev_offset,
                        sub.get_section_offset(), type_signature, type_offset);
}

uint64_t type_unit::get_type_signature() const { return m->type_signature; }
   17b3e:	651c                	c.ld	a5,8(a0)
   17b40:	7f88                	c.ld	a0,56(a5)
   17b42:	8082                	c.jr	ra

0000000000017b44 <dwarf::dwarf::get_section(dwarf::section_type) const>:
std::shared_ptr<section> dwarf::get_section(section_type type) const {
   17b44:	7171                	c.addi16sp	sp,-176
   17b46:	f506                	c.sdsp	ra,168(sp)
   17b48:	f122                	c.sdsp	s0,160(sp)
   17b4a:	ed26                	c.sdsp	s1,152(sp)
   17b4c:	e94a                	c.sdsp	s2,144(sp)
   17b4e:	e54e                	c.sdsp	s3,136(sp)
   17b50:	e152                	c.sdsp	s4,128(sp)
   17b52:	842a                	c.mv	s0,a0
   17b54:	84ae                	c.mv	s1,a1
   17b56:	c632                	c.swsp	a2,12(sp)
  if (type == section_type::info)
   17b58:	470d                	c.li	a4,3
   17b5a:	02e60d63          	beq	a2,a4,17b94 <dwarf::dwarf::get_section(dwarf::section_type) const+0x50>
   17b5e:	87b2                	c.mv	a5,a2
  if (type == section_type::abbrev)
   17b60:	e63d                	c.bnez	a2,17bce <dwarf::dwarf::get_section(dwarf::section_type) const+0x8a>
      { return _M_ptr; }
   17b62:	619c                	c.ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17b64:	7398                	c.ld	a4,32(a5)
   17b66:	e118                	c.sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   17b68:	7788                	c.ld	a0,40(a5)
   17b6a:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   17b6c:	c919                	c.beqz	a0,17b82 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
    if (__is_single_threaded())
   17b6e:	00023797          	auipc	a5,0x23
   17b72:	92a7b783          	ld	a5,-1750(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   17b76:	0007c783          	lbu	a5,0(a5)
   17b7a:	c7a1                	c.beqz	a5,17bc2 <dwarf::dwarf::get_section(dwarf::section_type) const+0x7e>
  { *__mem += __val; }
   17b7c:	591c                	c.lw	a5,48(a0)
   17b7e:	2785                	c.addiw	a5,1
   17b80:	d91c                	c.sw	a5,48(a0)
}
   17b82:	8522                	c.mv	a0,s0
   17b84:	70aa                	c.ldsp	ra,168(sp)
   17b86:	740a                	c.ldsp	s0,160(sp)
   17b88:	64ea                	c.ldsp	s1,152(sp)
   17b8a:	694a                	c.ldsp	s2,144(sp)
   17b8c:	69aa                	c.ldsp	s3,136(sp)
   17b8e:	6a0a                	c.ldsp	s4,128(sp)
   17b90:	614d                	c.addi16sp	sp,176
   17b92:	8082                	c.jr	ra
      { return _M_ptr; }
   17b94:	619c                	c.ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17b96:	6b98                	c.ld	a4,16(a5)
   17b98:	e118                	c.sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   17b9a:	6f88                	c.ld	a0,24(a5)
   17b9c:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   17b9e:	d175                	c.beqz	a0,17b82 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
    if (__is_single_threaded())
   17ba0:	00023797          	auipc	a5,0x23
   17ba4:	8f87b783          	ld	a5,-1800(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   17ba8:	0007c783          	lbu	a5,0(a5)
   17bac:	c789                	c.beqz	a5,17bb6 <dwarf::dwarf::get_section(dwarf::section_type) const+0x72>
  { *__mem += __val; }
   17bae:	591c                	c.lw	a5,48(a0)
   17bb0:	2785                	c.addiw	a5,1
   17bb2:	d91c                	c.sw	a5,48(a0)
   17bb4:	b7f9                	c.j	17b82 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
      __atomic_add(__mem, __val);
   17bb6:	4585                	c.li	a1,1
   17bb8:	03050513          	addi	a0,a0,48
   17bbc:	9f5fe0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17bc0:	b7c9                	c.j	17b82 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
   17bc2:	4585                	c.li	a1,1
   17bc4:	03050513          	addi	a0,a0,48
   17bc8:	9e9fe0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17bcc:	bf5d                	c.j	17b82 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
      { return _M_ptr; }
   17bce:	618c                	c.ld	a1,0(a1)
      _M_rightmost() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_header._M_right; }

      _Link_type
      _M_mbegin() const _GLIBCXX_NOEXCEPT
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   17bd0:	6dd8                	c.ld	a4,152(a1)
	  (this->_M_impl._M_header._M_parent);
      }

      _Base_ptr
      _M_end() _GLIBCXX_NOEXCEPT
      { return &this->_M_impl._M_header; }
   17bd2:	09058513          	addi	a0,a1,144
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Base_ptr __y,
		   const _Key& __k)
    {
      while (__x != 0)
   17bd6:	28070c63          	beq	a4,zero,17e6e <dwarf::dwarf::get_section(dwarf::section_type) const+0x32a>
   17bda:	862a                	c.mv	a2,a0
   17bdc:	a019                	c.j	17be2 <dwarf::dwarf::get_section(dwarf::section_type) const+0x9e>
      { return static_cast<_Link_type>(__x->_M_right); }
   17bde:	6f18                	c.ld	a4,24(a4)
      while (__x != 0)
   17be0:	c719                	c.beqz	a4,17bee <dwarf::dwarf::get_section(dwarf::section_type) const+0xaa>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   17be2:	5314                	c.lw	a3,32(a4)
   17be4:	fef6cde3          	blt	a3,a5,17bde <dwarf::dwarf::get_section(dwarf::section_type) const+0x9a>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   17be8:	863a                	c.mv	a2,a4
	  __y = __x, __x = _S_left(__x);
   17bea:	6b18                	c.ld	a4,16(a4)
   17bec:	bfd5                	c.j	17be0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x9c>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   17bee:	28c50063          	beq	a0,a2,17e6e <dwarf::dwarf::get_section(dwarf::section_type) const+0x32a>
	      || _M_impl._M_key_compare(__k,
   17bf2:	5218                	c.lw	a4,32(a2)
   17bf4:	26e7cd63          	blt	a5,a4,17e6e <dwarf::dwarf::get_section(dwarf::section_type) const+0x32a>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17bf8:	761c                	c.ld	a5,40(a2)
   17bfa:	e01c                	c.sd	a5,0(s0)
      : _M_pi(__r._M_pi)
   17bfc:	7a08                	c.ld	a0,48(a2)
   17bfe:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   17c00:	d149                	c.beqz	a0,17b82 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
    if (__is_single_threaded())
   17c02:	00023797          	auipc	a5,0x23
   17c06:	8967b783          	ld	a5,-1898(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   17c0a:	0007c783          	lbu	a5,0(a5)
   17c0e:	c789                	c.beqz	a5,17c18 <dwarf::dwarf::get_section(dwarf::section_type) const+0xd4>
  { *__mem += __val; }
   17c10:	591c                	c.lw	a5,48(a0)
   17c12:	2785                	c.addiw	a5,1
   17c14:	d91c                	c.sw	a5,48(a0)
   17c16:	b7b5                	c.j	17b82 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
      __atomic_add(__mem, __val);
   17c18:	4585                	c.li	a1,1
   17c1a:	03050513          	addi	a0,a0,48
   17c1e:	993fe0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17c22:	b785                	c.j	17b82 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
                       " section missing");
   17c24:	4541                	c.li	a0,16
   17c26:	a6bfe0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   17c2a:	84aa                	c.mv	s1,a0
    throw format_error(std::string(elf::section_type_to_name(type)) +
   17c2c:	4532                	c.lwsp	a0,12(sp)
   17c2e:	78f0e0ef          	jal	ra,26bbc <dwarf::elf::section_type_to_name(dwarf::section_type)>
   17c32:	85aa                	c.mv	a1,a0
   17c34:	08b0                	c.addi4spn	a2,sp,88
   17c36:	0808                	c.addi4spn	a0,sp,16
   17c38:	c49fe0ef          	jal	ra,16880 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
	      const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }
   17c3c:	00016597          	auipc	a1,0x16
   17c40:	0c458593          	addi	a1,a1,196 # 2dd00 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x30>
   17c44:	0808                	c.addi4spn	a0,sp,16
   17c46:	dfbfe0ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   17c4a:	85aa                	c.mv	a1,a0
   17c4c:	1800                	c.addi4spn	s0,sp,48
   17c4e:	8522                	c.mv	a0,s0
   17c50:	a81fe0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   17c54:	85a2                	c.mv	a1,s0
   17c56:	8526                	c.mv	a0,s1
   17c58:	bd9fe0ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   17c5c:	00023797          	auipc	a5,0x23
   17c60:	9147b783          	ld	a5,-1772(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   17c64:	07c1                	c.addi	a5,16
   17c66:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   17c68:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   17c6a:	009c                	c.addi4spn	a5,sp,64
   17c6c:	00f50463          	beq	a0,a5,17c74 <dwarf::dwarf::get_section(dwarf::section_type) const+0x130>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   17c70:	b31fe0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   17c74:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   17c76:	101c                	c.addi4spn	a5,sp,32
   17c78:	00f50463          	beq	a0,a5,17c80 <dwarf::dwarf::get_section(dwarf::section_type) const+0x13c>
   17c7c:	b25fe0ef          	jal	ra,167a0 <operator delete(void*)@plt>
                       " section missing");
   17c80:	00022617          	auipc	a2,0x22
   17c84:	71863603          	ld	a2,1816(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   17c88:	00022597          	auipc	a1,0x22
   17c8c:	6405b583          	ld	a1,1600(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   17c90:	8526                	c.mv	a0,s1
   17c92:	ccffe0ef          	jal	ra,16960 <__cxa_throw@plt>
      { return static_cast<_Link_type>(__x->_M_right); }
   17c96:	6f9c                	c.ld	a5,24(a5)
      while (__x != 0)
   17c98:	c799                	c.beqz	a5,17ca6 <dwarf::dwarf::get_section(dwarf::section_type) const+0x162>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   17c9a:	5398                	c.lw	a4,32(a5)
   17c9c:	fed74de3          	blt	a4,a3,17c96 <dwarf::dwarf::get_section(dwarf::section_type) const+0x152>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   17ca0:	893e                	c.mv	s2,a5
	  __y = __x, __x = _S_left(__x);
   17ca2:	6b9c                	c.ld	a5,16(a5)
   17ca4:	bfd5                	c.j	17c98 <dwarf::dwarf::get_section(dwarf::section_type) const+0x154>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   17ca6:	0cc90963          	beq	s2,a2,17d78 <dwarf::dwarf::get_section(dwarf::section_type) const+0x234>
   17caa:	02092783          	lw	a5,32(s2)
   17cae:	02f6d363          	bge	a3,a5,17cd4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x190>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }
   17cb2:	007c                	c.addi4spn	a5,sp,12
   17cb4:	f4be                	c.sdsp	a5,104(sp)
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   17cb6:	1098                	c.addi4spn	a4,sp,96
   17cb8:	10b4                	c.addi4spn	a3,sp,104
   17cba:	00016617          	auipc	a2,0x16
   17cbe:	36660613          	addi	a2,a2,870 # 2e020 <std::piecewise_construct>
   17cc2:	85ca                	c.mv	a1,s2
   17cc4:	08850513          	addi	a0,a0,136
   17cc8:	00022317          	auipc	t1,0x22
   17ccc:	6f033303          	ld	t1,1776(t1) # 3a3b8 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)@@Base+0x1f558>
   17cd0:	9302                	c.jalr	t1
   17cd2:	892a                	c.mv	s2,a0
      { return _M_ptr; }
   17cd4:	609c                	c.ld	a5,0(s1)
   17cd6:	0107ba03          	ld	s4,16(a5)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   17cda:	06000513          	addi	a0,zero,96
   17cde:	ad3fe0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   17ce2:	00052423          	sw	zero,8(a0)
   17ce6:	00052623          	sw	zero,12(a0)
   17cea:	00052823          	sw	zero,16(a0)
   17cee:	00052a23          	sw	zero,20(a0)
   17cf2:	00052c23          	sw	zero,24(a0)
   17cf6:	00052e23          	sw	zero,28(a0)
   17cfa:	02053023          	sd	zero,32(a0)
   17cfe:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   17d02:	4785                	c.li	a5,1
   17d04:	d91c                	c.sw	a5,48(a0)
   17d06:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   17d08:	00023797          	auipc	a5,0x23
   17d0c:	8d07b783          	ld	a5,-1840(a5) # 3a5d8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   17d10:	07c1                	c.addi	a5,16
   17d12:	e11c                	c.sd	a5,0(a0)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   17d14:	01ca2703          	lw	a4,28(s4)
  const byte_order ord;
  unsigned addr_size;

  section(section_type type, const void *begin, section_length length,
          byte_order ord, format fmt = format::unknown, unsigned addr_size = 0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   17d18:	47a9                	c.li	a5,10
   17d1a:	dd1c                	c.sw	a5,56(a0)
   17d1c:	05353023          	sd	s3,64(a0)
   17d20:	67c6                	c.ldsp	a5,80(sp)
   17d22:	97ce                	c.add	a5,s3
   17d24:	e53c                	c.sd	a5,72(a0)
   17d26:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   17d2a:	c978                	c.sw	a4,84(a0)
   17d2c:	04052c23          	sw	zero,88(a0)
   17d30:	03850793          	addi	a5,a0,56
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   17d34:	02f93423          	sd	a5,40(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   17d38:	03093983          	ld	s3,48(s2)
	__r._M_pi = _M_pi;
   17d3c:	02a93823          	sd	a0,48(s2)
	if (_M_pi != nullptr)
   17d40:	02098263          	beq	s3,zero,17d64 <dwarf::dwarf::get_section(dwarf::section_type) const+0x220>
    if (__is_single_threaded())
   17d44:	00022797          	auipc	a5,0x22
   17d48:	7547b783          	ld	a5,1876(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   17d4c:	0007c783          	lbu	a5,0(a5)
   17d50:	c795                	c.beqz	a5,17d7c <dwarf::dwarf::get_section(dwarf::section_type) const+0x238>
    _Atomic_word __result = *__mem;
   17d52:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   17d56:	fff5079b          	addiw	a5,a0,-1
   17d5a:	02f9a823          	sw	a5,48(s3)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17d5e:	4785                	c.li	a5,1
   17d60:	02f50463          	beq	a0,a5,17d88 <dwarf::dwarf::get_section(dwarf::section_type) const+0x244>
      { return _M_ptr; }
   17d64:	6088                	c.ld	a0,0(s1)
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   17d66:	6d5c                	c.ld	a5,152(a0)
      { return &this->_M_impl._M_header; }
   17d68:	09050613          	addi	a2,a0,144
      while (__x != 0)
   17d6c:	c3e1                	c.beqz	a5,17e2c <dwarf::dwarf::get_section(dwarf::section_type) const+0x2e8>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
   17d6e:	46b2                	c.lwsp	a3,12(sp)
   17d70:	85b2                	c.mv	a1,a2
   17d72:	a08d                	c.j	17dd4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x290>
   17d74:	8932                	c.mv	s2,a2
   17d76:	bf35                	c.j	17cb2 <dwarf::dwarf::get_section(dwarf::section_type) const+0x16e>
   17d78:	8932                	c.mv	s2,a2
   17d7a:	bf25                	c.j	17cb2 <dwarf::dwarf::get_section(dwarf::section_type) const+0x16e>
      return __exchange_and_add(__mem, __val);
   17d7c:	55fd                	c.li	a1,-1
   17d7e:	03098513          	addi	a0,s3,48
   17d82:	86ffe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17d86:	bfe1                	c.j	17d5e <dwarf::dwarf::get_section(dwarf::section_type) const+0x21a>
	_M_dispose();
   17d88:	0009b783          	ld	a5,0(s3)
   17d8c:	6b9c                	c.ld	a5,16(a5)
   17d8e:	854e                	c.mv	a0,s3
   17d90:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17d92:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17d96:	00022797          	auipc	a5,0x22
   17d9a:	7027b783          	ld	a5,1794(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   17d9e:	0007c783          	lbu	a5,0(a5)
   17da2:	c385                	c.beqz	a5,17dc2 <dwarf::dwarf::get_section(dwarf::section_type) const+0x27e>
    _Atomic_word __result = *__mem;
   17da4:	0349a783          	lw	a5,52(s3)
    *__mem += __val;
   17da8:	fff7871b          	addiw	a4,a5,-1
   17dac:	02e9aa23          	sw	a4,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17db0:	4705                	c.li	a4,1
   17db2:	fae799e3          	bne	a5,a4,17d64 <dwarf::dwarf::get_section(dwarf::section_type) const+0x220>
	    _M_destroy();
   17db6:	0009b783          	ld	a5,0(s3)
   17dba:	6f9c                	c.ld	a5,24(a5)
   17dbc:	854e                	c.mv	a0,s3
   17dbe:	9782                	c.jalr	a5
   17dc0:	b755                	c.j	17d64 <dwarf::dwarf::get_section(dwarf::section_type) const+0x220>
      return __exchange_and_add(__mem, __val);
   17dc2:	55fd                	c.li	a1,-1
   17dc4:	03498513          	addi	a0,s3,52
   17dc8:	829fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17dcc:	87aa                	c.mv	a5,a0
   17dce:	b7cd                	c.j	17db0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x26c>
      { return static_cast<_Link_type>(__x->_M_right); }
   17dd0:	6f9c                	c.ld	a5,24(a5)
      while (__x != 0)
   17dd2:	c799                	c.beqz	a5,17de0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x29c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   17dd4:	5398                	c.lw	a4,32(a5)
   17dd6:	fed74de3          	blt	a4,a3,17dd0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x28c>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   17dda:	85be                	c.mv	a1,a5
	  __y = __x, __x = _S_left(__x);
   17ddc:	6b9c                	c.ld	a5,16(a5)
   17dde:	bfd5                	c.j	17dd2 <dwarf::dwarf::get_section(dwarf::section_type) const+0x28e>
	if (__i == end() || key_comp()(__k, (*__i).first))
   17de0:	04c58863          	beq	a1,a2,17e30 <dwarf::dwarf::get_section(dwarf::section_type) const+0x2ec>
   17de4:	519c                	c.lw	a5,32(a1)
   17de6:	02f6d263          	bge	a3,a5,17e0a <dwarf::dwarf::get_section(dwarf::section_type) const+0x2c6>
   17dea:	007c                	c.addi4spn	a5,sp,12
   17dec:	fcbe                	c.sdsp	a5,120(sp)
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   17dee:	1898                	c.addi4spn	a4,sp,112
   17df0:	18b4                	c.addi4spn	a3,sp,120
   17df2:	00016617          	auipc	a2,0x16
   17df6:	22e60613          	addi	a2,a2,558 # 2e020 <std::piecewise_construct>
   17dfa:	08850513          	addi	a0,a0,136
   17dfe:	00022317          	auipc	t1,0x22
   17e02:	5ba33303          	ld	t1,1466(t1) # 3a3b8 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)@@Base+0x1f558>
   17e06:	9302                	c.jalr	t1
   17e08:	85aa                	c.mv	a1,a0
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17e0a:	759c                	c.ld	a5,40(a1)
   17e0c:	e01c                	c.sd	a5,0(s0)
      : _M_pi(__r._M_pi)
   17e0e:	7988                	c.ld	a0,48(a1)
   17e10:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   17e12:	d60508e3          	beq	a0,zero,17b82 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
    if (__is_single_threaded())
   17e16:	00022797          	auipc	a5,0x22
   17e1a:	6827b783          	ld	a5,1666(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   17e1e:	0007c783          	lbu	a5,0(a5)
   17e22:	cb89                	c.beqz	a5,17e34 <dwarf::dwarf::get_section(dwarf::section_type) const+0x2f0>
  { *__mem += __val; }
   17e24:	591c                	c.lw	a5,48(a0)
   17e26:	2785                	c.addiw	a5,1
   17e28:	d91c                	c.sw	a5,48(a0)
   17e2a:	bba1                	c.j	17b82 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
      while (__x != 0)
   17e2c:	85b2                	c.mv	a1,a2
   17e2e:	bf75                	c.j	17dea <dwarf::dwarf::get_section(dwarf::section_type) const+0x2a6>
   17e30:	85b2                	c.mv	a1,a2
   17e32:	bf65                	c.j	17dea <dwarf::dwarf::get_section(dwarf::section_type) const+0x2a6>
      __atomic_add(__mem, __val);
   17e34:	4585                	c.li	a1,1
   17e36:	03050513          	addi	a0,a0,48
   17e3a:	f76fe0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17e3e:	b391                	c.j	17b82 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
      { return _M_dataplus._M_p; }
   17e40:	842a                	c.mv	s0,a0
   17e42:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   17e44:	009c                	c.addi4spn	a5,sp,64
   17e46:	00f50463          	beq	a0,a5,17e4e <dwarf::dwarf::get_section(dwarf::section_type) const+0x30a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   17e4a:	957fe0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   17e4e:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   17e50:	101c                	c.addi4spn	a5,sp,32
   17e52:	00f50463          	beq	a0,a5,17e5a <dwarf::dwarf::get_section(dwarf::section_type) const+0x316>
   17e56:	94bfe0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   17e5a:	8526                	c.mv	a0,s1
   17e5c:	8f5fe0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   17e60:	8522                	c.mv	a0,s0
   17e62:	b2ffe0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   17e66:	842a                	c.mv	s0,a0
   17e68:	b7dd                	c.j	17e4e <dwarf::dwarf::get_section(dwarf::section_type) const+0x30a>
   17e6a:	842a                	c.mv	s0,a0
   17e6c:	b7fd                	c.j	17e5a <dwarf::dwarf::get_section(dwarf::section_type) const+0x316>
      { return _M_ptr; }
   17e6e:	6188                	c.ld	a0,0(a1)
  const void *data = m->l->load(type, &size);
   17e70:	6118                	c.ld	a4,0(a0)
   17e72:	6b18                	c.ld	a4,16(a4)
   17e74:	0890                	c.addi4spn	a2,sp,80
   17e76:	85be                	c.mv	a1,a5
   17e78:	9702                	c.jalr	a4
   17e7a:	89aa                	c.mv	s3,a0
  if (!data)
   17e7c:	da0504e3          	beq	a0,zero,17c24 <dwarf::dwarf::get_section(dwarf::section_type) const+0xe0>
   17e80:	6088                	c.ld	a0,0(s1)
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   17e82:	6d5c                	c.ld	a5,152(a0)
      { return &this->_M_impl._M_header; }
   17e84:	09050613          	addi	a2,a0,144
      while (__x != 0)
   17e88:	ee0786e3          	beq	a5,zero,17d74 <dwarf::dwarf::get_section(dwarf::section_type) const+0x230>
   17e8c:	46b2                	c.lwsp	a3,12(sp)
   17e8e:	8932                	c.mv	s2,a2
   17e90:	b529                	c.j	17c9a <dwarf::dwarf::get_section(dwarf::section_type) const+0x156>

0000000000017e92 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)>:
compilation_unit::compilation_unit(const dwarf &file, section_offset offset) {
   17e92:	7155                	c.addi16sp	sp,-208
   17e94:	e586                	c.sdsp	ra,200(sp)
   17e96:	e1a2                	c.sdsp	s0,192(sp)
   17e98:	fd26                	c.sdsp	s1,184(sp)
   17e9a:	f94a                	c.sdsp	s2,176(sp)
   17e9c:	f54e                	c.sdsp	s3,168(sp)
   17e9e:	f152                	c.sdsp	s4,160(sp)
   17ea0:	ed56                	c.sdsp	s5,152(sp)
   17ea2:	e95a                	c.sdsp	s6,144(sp)
   17ea4:	84aa                	c.mv	s1,a0
   17ea6:	892e                	c.mv	s2,a1
   17ea8:	89b2                	c.mv	s3,a2
      : _M_ptr(0), _M_refcount()
   17eaa:	00053423          	sd	zero,8(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   17eae:	00053823          	sd	zero,16(a0)
   17eb2:	00022797          	auipc	a5,0x22
   17eb6:	41e7b783          	ld	a5,1054(a5) # 3a2d0 <vtable for dwarf::compilation_unit@@Base+0x980>
   17eba:	07c1                	c.addi	a5,16
   17ebc:	e11c                	c.sd	a5,0(a0)
  cursor cur(file.get_section(section_type::info), offset);
   17ebe:	460d                	c.li	a2,3
   17ec0:	0108                	c.addi4spn	a0,sp,128
   17ec2:	c83ff0ef          	jal	ra,17b44 <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17ec6:	678a                	c.ldsp	a5,128(sp)
   17ec8:	e83e                	c.sdsp	a5,16(sp)
      : _M_pi(__r._M_pi)
   17eca:	652a                	c.ldsp	a0,136(sp)
   17ecc:	ec2a                	c.sdsp	a0,24(sp)
	if (_M_pi != nullptr)
   17ece:	c919                	c.beqz	a0,17ee4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x52>
    if (__is_single_threaded())
   17ed0:	00022797          	auipc	a5,0x22
   17ed4:	5c87b783          	ld	a5,1480(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   17ed8:	0007c783          	lbu	a5,0(a5)
   17edc:	cf8d                	c.beqz	a5,17f16 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x84>
  { *__mem += __val; }
   17ede:	591c                	c.lw	a5,48(a0)
   17ee0:	2785                	c.addiw	a5,1
   17ee2:	d91c                	c.sw	a5,48(a0)
  std::shared_ptr<section> sec;
  const char *pos;

  cursor() : pos(nullptr) {}
  cursor(const std::shared_ptr<section> sec, section_offset offset = 0)
      : sec(sec), pos(sec->begin + offset) {}
   17ee4:	678a                	c.ldsp	a5,128(sp)
   17ee6:	679c                	c.ld	a5,8(a5)
   17ee8:	97ce                	c.add	a5,s3
   17eea:	f03e                	c.sdsp	a5,32(sp)
	if (_M_pi != nullptr)
   17eec:	642a                	c.ldsp	s0,136(sp)
   17eee:	cc19                	c.beqz	s0,17f0c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7a>
    if (__is_single_threaded())
   17ef0:	00022797          	auipc	a5,0x22
   17ef4:	5a87b783          	ld	a5,1448(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   17ef8:	0007c783          	lbu	a5,0(a5)
   17efc:	c39d                	c.beqz	a5,17f22 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x90>
    _Atomic_word __result = *__mem;
   17efe:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   17f00:	fff5079b          	addiw	a5,a0,-1
   17f04:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17f06:	4785                	c.li	a5,1
   17f08:	02f50363          	beq	a0,a5,17f2e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x9c>
  std::shared_ptr<section> subsec = cur.subsection();
   17f0c:	080c                	c.addi4spn	a1,sp,16
   17f0e:	850a                	c.mv	a0,sp
   17f10:	353030ef          	jal	ra,1ba62 <dwarf::cursor::subsection()>
   17f14:	a8a1                	c.j	17f6c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xda>
      __atomic_add(__mem, __val);
   17f16:	4585                	c.li	a1,1
   17f18:	03050513          	addi	a0,a0,48
   17f1c:	e94fe0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17f20:	b7d1                	c.j	17ee4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x52>
      return __exchange_and_add(__mem, __val);
   17f22:	55fd                	c.li	a1,-1
   17f24:	03040513          	addi	a0,s0,48
   17f28:	ec8fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17f2c:	bfe9                	c.j	17f06 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x74>
	_M_dispose();
   17f2e:	601c                	c.ld	a5,0(s0)
   17f30:	6b9c                	c.ld	a5,16(a5)
   17f32:	8522                	c.mv	a0,s0
   17f34:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17f36:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17f3a:	00022797          	auipc	a5,0x22
   17f3e:	55e7b783          	ld	a5,1374(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   17f42:	0007c783          	lbu	a5,0(a5)
   17f46:	cf89                	c.beqz	a5,17f60 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xce>
    _Atomic_word __result = *__mem;
   17f48:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   17f4a:	fff5079b          	addiw	a5,a0,-1
   17f4e:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17f50:	4785                	c.li	a5,1
   17f52:	faf51de3          	bne	a0,a5,17f0c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7a>
	    _M_destroy();
   17f56:	601c                	c.ld	a5,0(s0)
   17f58:	6f9c                	c.ld	a5,24(a5)
   17f5a:	8522                	c.mv	a0,s0
   17f5c:	9782                	c.jalr	a5
   17f5e:	b77d                	c.j	17f0c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7a>
      return __exchange_and_add(__mem, __val);
   17f60:	55fd                	c.li	a1,-1
   17f62:	03440513          	addi	a0,s0,52
   17f66:	e8afe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17f6a:	b7dd                	c.j	17f50 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xbe>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17f6c:	6a02                	c.ldsp	s4,0(sp)
      : _M_pi(__r._M_pi)
   17f6e:	6422                	c.ldsp	s0,8(sp)
	if (_M_pi != nullptr)
   17f70:	50040d63          	beq	s0,zero,1848a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5f8>
    if (__is_single_threaded())
   17f74:	00022797          	auipc	a5,0x22
   17f78:	5247b783          	ld	a5,1316(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   17f7c:	0007c783          	lbu	a5,0(a5)
   17f80:	cbb5                	c.beqz	a5,17ff4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x162>
  { *__mem += __val; }
   17f82:	581c                	c.lw	a5,48(s0)
   17f84:	2785                	c.addiw	a5,1
   17f86:	d81c                	c.sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17f88:	f452                	c.sdsp	s4,40(sp)
      : _M_pi(__r._M_pi)
   17f8a:	f822                	c.sdsp	s0,48(sp)
    if (__is_single_threaded())
   17f8c:	00022797          	auipc	a5,0x22
   17f90:	50c7b783          	ld	a5,1292(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   17f94:	0007c783          	lbu	a5,0(a5)
   17f98:	c7a5                	c.beqz	a5,18000 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x16e>
  { *__mem += __val; }
   17f9a:	581c                	c.lw	a5,48(s0)
   17f9c:	2785                	c.addiw	a5,1
   17f9e:	d81c                	c.sw	a5,48(s0)
   17fa0:	008a3783          	ld	a5,8(s4)
   17fa4:	fc3e                	c.sdsp	a5,56(sp)
    if (__is_single_threaded())
   17fa6:	00022797          	auipc	a5,0x22
   17faa:	4f27b783          	ld	a5,1266(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   17fae:	0007c783          	lbu	a5,0(a5)
   17fb2:	cfa9                	c.beqz	a5,1800c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x17a>
    _Atomic_word __result = *__mem;
   17fb4:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   17fb6:	fff5079b          	addiw	a5,a0,-1
   17fba:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17fbc:	4785                	c.li	a5,1
   17fbe:	4cf51b63          	bne	a0,a5,18494 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x602>
	_M_dispose();
   17fc2:	601c                	c.ld	a5,0(s0)
   17fc4:	6b9c                	c.ld	a5,16(a5)
   17fc6:	8522                	c.mv	a0,s0
   17fc8:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17fca:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17fce:	00022797          	auipc	a5,0x22
   17fd2:	4ca7b783          	ld	a5,1226(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   17fd6:	0007c783          	lbu	a5,0(a5)
   17fda:	cf9d                	c.beqz	a5,18018 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x186>
    _Atomic_word __result = *__mem;
   17fdc:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   17fde:	fff5079b          	addiw	a5,a0,-1
   17fe2:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17fe4:	4785                	c.li	a5,1
   17fe6:	4af51763          	bne	a0,a5,18494 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x602>
	    _M_destroy();
   17fea:	601c                	c.ld	a5,0(s0)
   17fec:	6f9c                	c.ld	a5,24(a5)
   17fee:	8522                	c.mv	a0,s0
   17ff0:	9782                	c.jalr	a5
   17ff2:	a14d                	c.j	18494 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x602>
      __atomic_add(__mem, __val);
   17ff4:	4585                	c.li	a1,1
   17ff6:	03040513          	addi	a0,s0,48
   17ffa:	db6fe0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17ffe:	b769                	c.j	17f88 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xf6>
   18000:	4585                	c.li	a1,1
   18002:	03040513          	addi	a0,s0,48
   18006:	daafe0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1800a:	bf59                	c.j	17fa0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x10e>
      return __exchange_and_add(__mem, __val);
   1800c:	55fd                	c.li	a1,-1
   1800e:	03040513          	addi	a0,s0,48
   18012:	ddefe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18016:	b75d                	c.j	17fbc <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x12a>
   18018:	55fd                	c.li	a1,-1
   1801a:	03440513          	addi	a0,s0,52
   1801e:	dd2fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18022:	b7c9                	c.j	17fe4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x152>
  section_offset offset();
  void string(std::string &out);
  const char *cstr(size_t *size_out = nullptr);

  void ensure(section_offset bytes) {
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   18024:	77a2                	c.ldsp	a5,40(sp)
   18026:	6b98                	c.ld	a4,16(a5)
   18028:	77e2                	c.ldsp	a5,56(sp)
   1802a:	40f70633          	sub	a2,a4,a5
   1802e:	4685                	c.li	a3,1
   18030:	00c6f463          	bgeu	a3,a2,18038 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x1a6>
   18034:	00e7e563          	bltu	a5,a4,1803e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x1ac>
      underflow();
   18038:	1028                	c.addi4spn	a0,sp,40
   1803a:	698030ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>

  template <typename T> T fixed() {
    ensure(sizeof(T));
    static_assert(sizeof(T) <= 8, "T too big");
    uint64_t val = 0;
    const unsigned char *p = (const unsigned char *)pos;
   1803e:	7762                	c.ldsp	a4,56(sp)
    if (sec->ord == byte_order::lsb) {
   18040:	77a2                	c.ldsp	a5,40(sp)
   18042:	4fdc                	c.lw	a5,28(a5)
   18044:	e795                	c.bnez	a5,18070 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x1de>
      for (unsigned i = 0; i < sizeof(T); i++)
        val |= ((uint64_t)p[i]) << (i * 8);
   18046:	00174783          	lbu	a5,1(a4)
   1804a:	07a2                	c.slli	a5,0x8
   1804c:	00074683          	lbu	a3,0(a4)
   18050:	8fd5                	c.or	a5,a3
    } else {
      for (unsigned i = 0; i < sizeof(T); i++)
        val = (val << 8) | (uint64_t)p[i];
    }
    pos += sizeof(T);
   18052:	0709                	c.addi	a4,2
   18054:	fc3a                	c.sdsp	a4,56(sp)
    return (T)val;
   18056:	03079413          	slli	s0,a5,0x30
   1805a:	9041                	c.srli	s0,0x30
  if (version < 2 || version > 4)
   1805c:	37f9                	c.addiw	a5,-2
   1805e:	17c2                	c.slli	a5,0x30
   18060:	93c1                	c.srli	a5,0x30
   18062:	4709                	c.li	a4,2
   18064:	00f76d63          	bltu	a4,a5,1807e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x1ec>
  section_offset debug_abbrev_offset = sub.offset();
   18068:	1028                	c.addi4spn	a0,sp,40
   1806a:	38f030ef          	jal	ra,1bbf8 <dwarf::cursor::offset()>
   1806e:	a069                	c.j	180f8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x266>
        val = (val << 8) | (uint64_t)p[i];
   18070:	00074783          	lbu	a5,0(a4)
   18074:	07a2                	c.slli	a5,0x8
   18076:	00174683          	lbu	a3,1(a4)
   1807a:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1807c:	bfd9                	c.j	18052 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x1c0>
                       std::to_string(version));
   1807e:	4541                	c.li	a0,16
   18080:	e10fe0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   18084:	892a                	c.mv	s2,a0
   18086:	85a2                	c.mv	a1,s0
   18088:	1080                	c.addi4spn	s0,sp,96
   1808a:	8522                	c.mv	a0,s0
   1808c:	00022317          	auipc	t1,0x22
   18090:	41c33303          	ld	t1,1052(t1) # 3a4a8 <std::__cxx11::to_string(int)@@Base+0x2018e>
   18094:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   18096:	00016617          	auipc	a2,0x16
   1809a:	c8260613          	addi	a2,a2,-894 # 2dd18 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x48>
   1809e:	4581                	c.li	a1,0
   180a0:	8522                	c.mv	a0,s0
   180a2:	d5efe0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   180a6:	85aa                	c.mv	a1,a0
   180a8:	0080                	c.addi4spn	s0,sp,64
   180aa:	8522                	c.mv	a0,s0
   180ac:	e24fe0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   180b0:	85a2                	c.mv	a1,s0
   180b2:	854a                	c.mv	a0,s2
   180b4:	f7cfe0ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   180b8:	00022797          	auipc	a5,0x22
   180bc:	4b87b783          	ld	a5,1208(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   180c0:	07c1                	c.addi	a5,16
   180c2:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   180c6:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   180c8:	089c                	c.addi4spn	a5,sp,80
   180ca:	00f50463          	beq	a0,a5,180d2 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x240>
   180ce:	ed2fe0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   180d2:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   180d4:	189c                	c.addi4spn	a5,sp,112
   180d6:	00f50463          	beq	a0,a5,180de <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x24c>
   180da:	ec6fe0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   180de:	00022617          	auipc	a2,0x22
   180e2:	2ba63603          	ld	a2,698(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   180e6:	00022597          	auipc	a1,0x22
   180ea:	1e25b583          	ld	a1,482(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   180ee:	854a                	c.mv	a0,s2
   180f0:	871fe0ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   180f4:	842a                	c.mv	s0,a0
   180f6:	ae1d                	c.j	1842c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x59a>
  section_offset debug_abbrev_offset = sub.offset();
   180f8:	8aaa                	c.mv	s5,a0
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   180fa:	77a2                	c.ldsp	a5,40(sp)
   180fc:	6b98                	c.ld	a4,16(a5)
   180fe:	77e2                	c.ldsp	a5,56(sp)
   18100:	00e7e563          	bltu	a5,a4,1810a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x278>
      underflow();
   18104:	1028                	c.addi4spn	a0,sp,40
   18106:	5cc030ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1810a:	77e2                	c.ldsp	a5,56(sp)
      { return _M_ptr; }
   1810c:	7722                	c.ldsp	a4,40(sp)
    if (sec->ord == byte_order::lsb) {
   1810e:	4f54                	c.lw	a3,28(a4)
   18110:	34068f63          	beq	a3,zero,1846e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5dc>
        val = (val << 8) | (uint64_t)p[i];
   18114:	0007c603          	lbu	a2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   18118:	aea9                	c.j	18472 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5e0>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1811a:	842a                	c.mv	s0,a0
   1811c:	00052423          	sw	zero,8(a0)
   18120:	00052623          	sw	zero,12(a0)
   18124:	00052823          	sw	zero,16(a0)
   18128:	00052a23          	sw	zero,20(a0)
   1812c:	00052c23          	sw	zero,24(a0)
   18130:	00052e23          	sw	zero,28(a0)
   18134:	02053023          	sd	zero,32(a0)
   18138:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   1813c:	4785                	c.li	a5,1
   1813e:	d91c                	c.sw	a5,48(a0)
   18140:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   18142:	00022797          	auipc	a5,0x22
   18146:	30e7b783          	ld	a5,782(a5) # 3a450 <vtable for std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xa50>
   1814a:	07c1                	c.addi	a5,16
   1814c:	e11c                	c.sd	a5,0(a0)
   1814e:	03850b13          	addi	s6,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18152:	00093783          	ld	a5,0(s2)
   18156:	fd1c                	c.sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   18158:	00893503          	ld	a0,8(s2)
   1815c:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   1815e:	cd01                	c.beqz	a0,18176 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x2e4>
    if (__is_single_threaded())
   18160:	00022797          	auipc	a5,0x22
   18164:	3387b783          	ld	a5,824(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18168:	0007c783          	lbu	a5,0(a5)
   1816c:	14078c63          	beq	a5,zero,182c4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x432>
  { *__mem += __val; }
   18170:	591c                	c.lw	a5,48(a0)
   18172:	2785                	c.addiw	a5,1
   18174:	d91c                	c.sw	a5,48(a0)
      : file(file), offset(offset), subsec(subsec),
   18176:	05343423          	sd	s3,72(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1817a:	6782                	c.ldsp	a5,0(sp)
   1817c:	e83c                	c.sd	a5,80(s0)
      : _M_pi(__r._M_pi)
   1817e:	6522                	c.ldsp	a0,8(sp)
   18180:	ec28                	c.sd	a0,88(s0)
	if (_M_pi != nullptr)
   18182:	cd01                	c.beqz	a0,1819a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x308>
    if (__is_single_threaded())
   18184:	00022797          	auipc	a5,0x22
   18188:	3147b783          	ld	a5,788(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1818c:	0007c783          	lbu	a5,0(a5)
   18190:	14078063          	beq	a5,zero,182d0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x43e>
  { *__mem += __val; }
   18194:	591c                	c.lw	a5,48(a0)
   18196:	2785                	c.addiw	a5,1
   18198:	d91c                	c.sw	a5,48(a0)
        debug_abbrev_offset(debug_abbrev_offset), root_offset(root_offset),
   1819a:	07543023          	sd	s5,96(s0)
   1819e:	07443423          	sd	s4,104(s0)
        type_signature(type_signature), type_offset(type_offset),
   181a2:	06043823          	sd	zero,112(s0)
   181a6:	06043c23          	sd	zero,120(s0)
  die() : cu(nullptr), abbrev(nullptr) {}
   181aa:	08043423          	sd	zero,136(s0)
   181ae:	08043823          	sd	zero,144(s0)
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   181b2:	0a040793          	addi	a5,s0,160
   181b6:	e87c                	c.sd	a5,208(s0)
   181b8:	ec7c                	c.sd	a5,216(s0)
   181ba:	0d040793          	addi	a5,s0,208
   181be:	f07c                	c.sd	a5,224(s0)
   181c0:	0e043c23          	sd	zero,248(s0)
   181c4:	10043023          	sd	zero,256(s0)
   181c8:	11040793          	addi	a5,s0,272
   181cc:	14f43023          	sd	a5,320(s0)
   181d0:	14f43423          	sd	a5,328(s0)
   181d4:	14040793          	addi	a5,s0,320
   181d8:	14f43823          	sd	a5,336(s0)
      : _M_ptr(0), _M_refcount()
   181dc:	16043023          	sd	zero,352(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   181e0:	16043423          	sd	zero,360(s0)
        have_abbrevs(false) {}
   181e4:	16040823          	sb	zero,368(s0)
   181e8:	16043c23          	sd	zero,376(s0)
   181ec:	18043023          	sd	zero,384(s0)
   181f0:	18043423          	sd	zero,392(s0)
		   const _Hash&, const _Equal&, const allocator_type&,
		   false_type __uks);

    public:
      // Constructor, destructor, assignment, swap
      _Hashtable() = default;
   181f4:	1c040793          	addi	a5,s0,448
   181f8:	18f43823          	sd	a5,400(s0)
   181fc:	4785                	c.li	a5,1
   181fe:	18f43c23          	sd	a5,408(s0)
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
   18202:	1a043023          	sd	zero,416(s0)
   18206:	1a043423          	sd	zero,424(s0)
  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
    : _M_max_load_factor(__z), _M_next_resize(0) { }
   1820a:	00016797          	auipc	a5,0x16
   1820e:	e0e7a787          	flw	fa5,-498(a5) # 2e018 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xf0>
   18212:	1af42827          	fsw	fa5,432(s0)
   18216:	1a043c23          	sd	zero,440(s0)
   1821a:	1c043023          	sd	zero,448(s0)
   1821e:	0164b423          	sd	s6,8(s1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   18222:	0104b903          	ld	s2,16(s1)
	__r._M_pi = _M_pi;
   18226:	e880                	c.sd	s0,16(s1)
	if (_M_pi != nullptr)
   18228:	02090263          	beq	s2,zero,1824c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3ba>
    if (__is_single_threaded())
   1822c:	00022797          	auipc	a5,0x22
   18230:	26c7b783          	ld	a5,620(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18234:	0007c783          	lbu	a5,0(a5)
   18238:	c3d5                	c.beqz	a5,182dc <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x44a>
    _Atomic_word __result = *__mem;
   1823a:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   1823e:	fff5079b          	addiw	a5,a0,-1
   18242:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18246:	4785                	c.li	a5,1
   18248:	0af50063          	beq	a0,a5,182e8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x456>
	if (_M_pi != nullptr)
   1824c:	7442                	c.ldsp	s0,48(sp)
   1824e:	cc19                	c.beqz	s0,1826c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3da>
    if (__is_single_threaded())
   18250:	00022797          	auipc	a5,0x22
   18254:	2487b783          	ld	a5,584(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18258:	0007c783          	lbu	a5,0(a5)
   1825c:	cbe9                	c.beqz	a5,1832e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x49c>
    _Atomic_word __result = *__mem;
   1825e:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   18260:	fff5079b          	addiw	a5,a0,-1
   18264:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18266:	4785                	c.li	a5,1
   18268:	0cf50963          	beq	a0,a5,1833a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x4a8>
	if (_M_pi != nullptr)
   1826c:	6422                	c.ldsp	s0,8(sp)
   1826e:	c005                	c.beqz	s0,1828e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3fc>
    if (__is_single_threaded())
   18270:	00022797          	auipc	a5,0x22
   18274:	2287b783          	ld	a5,552(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18278:	0007c783          	lbu	a5,0(a5)
   1827c:	0e078e63          	beq	a5,zero,18378 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x4e6>
    _Atomic_word __result = *__mem;
   18280:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   18282:	fff5079b          	addiw	a5,a0,-1
   18286:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18288:	4785                	c.li	a5,1
   1828a:	0ef50d63          	beq	a0,a5,18384 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x4f2>
	if (_M_pi != nullptr)
   1828e:	6462                	c.ldsp	s0,24(sp)
   18290:	c005                	c.beqz	s0,182b0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x41e>
    if (__is_single_threaded())
   18292:	00022797          	auipc	a5,0x22
   18296:	2067b783          	ld	a5,518(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1829a:	0007c783          	lbu	a5,0(a5)
   1829e:	12078263          	beq	a5,zero,183c2 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x530>
    _Atomic_word __result = *__mem;
   182a2:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   182a4:	fff5079b          	addiw	a5,a0,-1
   182a8:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   182aa:	4785                	c.li	a5,1
   182ac:	12f50163          	beq	a0,a5,183ce <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x53c>
}
   182b0:	60ae                	c.ldsp	ra,200(sp)
   182b2:	640e                	c.ldsp	s0,192(sp)
   182b4:	74ea                	c.ldsp	s1,184(sp)
   182b6:	794a                	c.ldsp	s2,176(sp)
   182b8:	79aa                	c.ldsp	s3,168(sp)
   182ba:	7a0a                	c.ldsp	s4,160(sp)
   182bc:	6aea                	c.ldsp	s5,152(sp)
   182be:	6b4a                	c.ldsp	s6,144(sp)
   182c0:	6169                	c.addi16sp	sp,208
   182c2:	8082                	c.jr	ra
      __atomic_add(__mem, __val);
   182c4:	4585                	c.li	a1,1
   182c6:	03050513          	addi	a0,a0,48
   182ca:	ae6fe0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   182ce:	b565                	c.j	18176 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x2e4>
   182d0:	4585                	c.li	a1,1
   182d2:	03050513          	addi	a0,a0,48
   182d6:	adafe0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   182da:	b5c1                	c.j	1819a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x308>
      return __exchange_and_add(__mem, __val);
   182dc:	55fd                	c.li	a1,-1
   182de:	03090513          	addi	a0,s2,48
   182e2:	b0efe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   182e6:	b785                	c.j	18246 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3b4>
	_M_dispose();
   182e8:	00093783          	ld	a5,0(s2)
   182ec:	6b9c                	c.ld	a5,16(a5)
   182ee:	854a                	c.mv	a0,s2
   182f0:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   182f2:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   182f6:	00022797          	auipc	a5,0x22
   182fa:	1a27b783          	ld	a5,418(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   182fe:	0007c783          	lbu	a5,0(a5)
   18302:	c385                	c.beqz	a5,18322 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x490>
    _Atomic_word __result = *__mem;
   18304:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   18308:	fff5079b          	addiw	a5,a0,-1
   1830c:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18310:	4785                	c.li	a5,1
   18312:	f2f51de3          	bne	a0,a5,1824c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3ba>
	    _M_destroy();
   18316:	00093783          	ld	a5,0(s2)
   1831a:	6f9c                	c.ld	a5,24(a5)
   1831c:	854a                	c.mv	a0,s2
   1831e:	9782                	c.jalr	a5
   18320:	b735                	c.j	1824c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3ba>
      return __exchange_and_add(__mem, __val);
   18322:	55fd                	c.li	a1,-1
   18324:	03490513          	addi	a0,s2,52
   18328:	ac8fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1832c:	b7d5                	c.j	18310 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x47e>
   1832e:	55fd                	c.li	a1,-1
   18330:	03040513          	addi	a0,s0,48
   18334:	abcfe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18338:	b73d                	c.j	18266 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3d4>
	_M_dispose();
   1833a:	601c                	c.ld	a5,0(s0)
   1833c:	6b9c                	c.ld	a5,16(a5)
   1833e:	8522                	c.mv	a0,s0
   18340:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18342:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18346:	00022797          	auipc	a5,0x22
   1834a:	1527b783          	ld	a5,338(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1834e:	0007c783          	lbu	a5,0(a5)
   18352:	cf89                	c.beqz	a5,1836c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x4da>
    _Atomic_word __result = *__mem;
   18354:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18356:	fff5079b          	addiw	a5,a0,-1
   1835a:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1835c:	4785                	c.li	a5,1
   1835e:	f0f517e3          	bne	a0,a5,1826c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3da>
	    _M_destroy();
   18362:	601c                	c.ld	a5,0(s0)
   18364:	6f9c                	c.ld	a5,24(a5)
   18366:	8522                	c.mv	a0,s0
   18368:	9782                	c.jalr	a5
   1836a:	b709                	c.j	1826c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3da>
      return __exchange_and_add(__mem, __val);
   1836c:	55fd                	c.li	a1,-1
   1836e:	03440513          	addi	a0,s0,52
   18372:	a7efe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18376:	b7dd                	c.j	1835c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x4ca>
   18378:	55fd                	c.li	a1,-1
   1837a:	03040513          	addi	a0,s0,48
   1837e:	a72fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18382:	b719                	c.j	18288 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3f6>
	_M_dispose();
   18384:	601c                	c.ld	a5,0(s0)
   18386:	6b9c                	c.ld	a5,16(a5)
   18388:	8522                	c.mv	a0,s0
   1838a:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1838c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18390:	00022797          	auipc	a5,0x22
   18394:	1087b783          	ld	a5,264(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18398:	0007c783          	lbu	a5,0(a5)
   1839c:	cf89                	c.beqz	a5,183b6 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x524>
    _Atomic_word __result = *__mem;
   1839e:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   183a0:	fff5079b          	addiw	a5,a0,-1
   183a4:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   183a6:	4785                	c.li	a5,1
   183a8:	eef513e3          	bne	a0,a5,1828e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3fc>
	    _M_destroy();
   183ac:	601c                	c.ld	a5,0(s0)
   183ae:	6f9c                	c.ld	a5,24(a5)
   183b0:	8522                	c.mv	a0,s0
   183b2:	9782                	c.jalr	a5
   183b4:	bde9                	c.j	1828e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3fc>
      return __exchange_and_add(__mem, __val);
   183b6:	55fd                	c.li	a1,-1
   183b8:	03440513          	addi	a0,s0,52
   183bc:	a34fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   183c0:	b7dd                	c.j	183a6 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x514>
   183c2:	55fd                	c.li	a1,-1
   183c4:	03040513          	addi	a0,s0,48
   183c8:	a28fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   183cc:	bdf9                	c.j	182aa <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x418>
	_M_dispose();
   183ce:	601c                	c.ld	a5,0(s0)
   183d0:	6b9c                	c.ld	a5,16(a5)
   183d2:	8522                	c.mv	a0,s0
   183d4:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   183d6:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   183da:	00022797          	auipc	a5,0x22
   183de:	0be7b783          	ld	a5,190(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   183e2:	0007c783          	lbu	a5,0(a5)
   183e6:	cf89                	c.beqz	a5,18400 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x56e>
    _Atomic_word __result = *__mem;
   183e8:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   183ea:	fff5079b          	addiw	a5,a0,-1
   183ee:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   183f0:	4785                	c.li	a5,1
   183f2:	eaf51fe3          	bne	a0,a5,182b0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x41e>
	    _M_destroy();
   183f6:	601c                	c.ld	a5,0(s0)
   183f8:	6f9c                	c.ld	a5,24(a5)
   183fa:	8522                	c.mv	a0,s0
   183fc:	9782                	c.jalr	a5
   183fe:	bd4d                	c.j	182b0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x41e>
      return __exchange_and_add(__mem, __val);
   18400:	55fd                	c.li	a1,-1
   18402:	03440513          	addi	a0,s0,52
   18406:	9eafe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1840a:	b7dd                	c.j	183f0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x55e>
      { return _M_dataplus._M_p; }
   1840c:	842a                	c.mv	s0,a0
   1840e:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   18410:	089c                	c.addi4spn	a5,sp,80
   18412:	00f50463          	beq	a0,a5,1841a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x588>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   18416:	b8afe0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1841a:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   1841c:	189c                	c.addi4spn	a5,sp,112
   1841e:	00f50463          	beq	a0,a5,18426 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x594>
   18422:	b7efe0ef          	jal	ra,167a0 <operator delete(void*)@plt>
                       std::to_string(version));
   18426:	854a                	c.mv	a0,s2
   18428:	b28fe0ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1842c:	7542                	c.ldsp	a0,48(sp)
   1842e:	c511                	c.beqz	a0,1843a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5a8>
	  _M_pi->_M_release();
   18430:	00022317          	auipc	t1,0x22
   18434:	fb033303          	ld	t1,-80(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   18438:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   1843a:	6522                	c.ldsp	a0,8(sp)
   1843c:	c511                	c.beqz	a0,18448 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5b6>
	  _M_pi->_M_release();
   1843e:	00022317          	auipc	t1,0x22
   18442:	fa233303          	ld	t1,-94(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   18446:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   18448:	6562                	c.ldsp	a0,24(sp)
   1844a:	c511                	c.beqz	a0,18456 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5c4>
	  _M_pi->_M_release();
   1844c:	00022317          	auipc	t1,0x22
   18450:	f9433303          	ld	t1,-108(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   18454:	9302                	c.jalr	t1
}
   18456:	8526                	c.mv	a0,s1
   18458:	e38ff0ef          	jal	ra,17a90 <dwarf::unit::~unit()>
   1845c:	8522                	c.mv	a0,s0
   1845e:	d32fe0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   18462:	842a                	c.mv	s0,a0
   18464:	bf5d                	c.j	1841a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x588>
	if (_M_pi != nullptr)
   18466:	842a                	c.mv	s0,a0
   18468:	b7c5                	c.j	18448 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5b6>
   1846a:	842a                	c.mv	s0,a0
   1846c:	b7ed                	c.j	18456 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5c4>
        val |= ((uint64_t)p[i]) << (i * 8);
   1846e:	0007c603          	lbu	a2,0(a5)
    pos += sizeof(T);
   18472:	0785                	c.addi	a5,1
   18474:	fc3e                	c.sdsp	a5,56(sp)
  subsec->addr_size = address_size;
   18476:	6682                	c.ldsp	a3,0(sp)
   18478:	d290                	c.sw	a2,32(a3)

  bool end() const { return pos >= sec->end; }

  bool valid() const { return !!pos; }

  section_offset get_section_offset() const { return pos - sec->begin; }
   1847a:	6718                	c.ld	a4,8(a4)
   1847c:	40e78a33          	sub	s4,a5,a4
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   18480:	1c800513          	addi	a0,zero,456
   18484:	b2cfe0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   18488:	b949                	c.j	1811a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x288>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1848a:	f452                	c.sdsp	s4,40(sp)
      : _M_pi(__r._M_pi)
   1848c:	f802                	c.sdsp	zero,48(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1848e:	008a3783          	ld	a5,8(s4)
   18492:	fc3e                	c.sdsp	a5,56(sp)
  sub.skip_initial_length();
   18494:	1028                	c.addi4spn	a0,sp,40
   18496:	128030ef          	jal	ra,1b5be <dwarf::cursor::skip_initial_length()>
   1849a:	b669                	c.j	18024 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x192>

000000000001849c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)>:
dwarf::dwarf(const std::shared_ptr<loader> &l) : m(make_shared<impl>(l)) {
   1849c:	7135                	c.addi16sp	sp,-160
   1849e:	ed06                	c.sdsp	ra,152(sp)
   184a0:	e922                	c.sdsp	s0,144(sp)
   184a2:	e526                	c.sdsp	s1,136(sp)
   184a4:	e14a                	c.sdsp	s2,128(sp)
   184a6:	fcce                	c.sdsp	s3,120(sp)
   184a8:	f8d2                	c.sdsp	s4,112(sp)
   184aa:	f4d6                	c.sdsp	s5,104(sp)
   184ac:	f0da                	c.sdsp	s6,96(sp)
   184ae:	ecde                	c.sdsp	s7,88(sp)
   184b0:	84aa                	c.mv	s1,a0
   184b2:	892e                	c.mv	s2,a1

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   184b4:	00053023          	sd	zero,0(a0)
   184b8:	0f000513          	addi	a0,zero,240
   184bc:	af4fe0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   184c0:	842a                	c.mv	s0,a0
   184c2:	00052423          	sw	zero,8(a0)
   184c6:	00052623          	sw	zero,12(a0)
   184ca:	00052823          	sw	zero,16(a0)
   184ce:	00052a23          	sw	zero,20(a0)
   184d2:	00052c23          	sw	zero,24(a0)
   184d6:	00052e23          	sw	zero,28(a0)
   184da:	02053023          	sd	zero,32(a0)
   184de:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   184e2:	4785                	c.li	a5,1
   184e4:	d91c                	c.sw	a5,48(a0)
   184e6:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   184e8:	00022797          	auipc	a5,0x22
   184ec:	0607b783          	ld	a5,96(a5) # 3a548 <vtable for std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xb80>
   184f0:	07c1                	c.addi	a5,16
   184f2:	e11c                	c.sd	a5,0(a0)
   184f4:	03850993          	addi	s3,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   184f8:	00093783          	ld	a5,0(s2)
   184fc:	fd1c                	c.sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   184fe:	00893503          	ld	a0,8(s2)
   18502:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   18504:	c919                	c.beqz	a0,1851a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7e>
    if (__is_single_threaded())
   18506:	00022797          	auipc	a5,0x22
   1850a:	f927b783          	ld	a5,-110(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1850e:	0007c783          	lbu	a5,0(a5)
   18512:	cfa5                	c.beqz	a5,1858a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xee>
  { *__mem += __val; }
   18514:	591c                	c.lw	a5,48(a0)
   18516:	2785                	c.addiw	a5,1
   18518:	d91c                	c.sw	a5,48(a0)
      : _M_ptr(0), _M_refcount()
   1851a:	04043423          	sd	zero,72(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1851e:	04043823          	sd	zero,80(s0)
      : _M_ptr(0), _M_refcount()
   18522:	04043c23          	sd	zero,88(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   18526:	06043023          	sd	zero,96(s0)
   1852a:	06043423          	sd	zero,104(s0)
   1852e:	06043823          	sd	zero,112(s0)
   18532:	06043c23          	sd	zero,120(s0)
   18536:	0b040793          	addi	a5,s0,176
   1853a:	e05c                	c.sd	a5,128(s0)
   1853c:	4785                	c.li	a5,1
   1853e:	e45c                	c.sd	a5,136(s0)
    _Hash_node_base() noexcept : _M_nxt() { }
   18540:	08043823          	sd	zero,144(s0)
   18544:	08043c23          	sd	zero,152(s0)
    : _M_max_load_factor(__z), _M_next_resize(0) { }
   18548:	00016797          	auipc	a5,0x16
   1854c:	ad07a787          	flw	fa5,-1328(a5) # 2e018 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xf0>
   18550:	0af42027          	fsw	fa5,160(s0)
   18554:	0a043423          	sd	zero,168(s0)
   18558:	0a043823          	sd	zero,176(s0)
  impl(const std::shared_ptr<loader> &l) : l(l), have_type_units(false) {}
   1855c:	0a040c23          	sb	zero,184(s0)
      _M_header._M_color = _S_red;
   18560:	0c042423          	sw	zero,200(s0)
      _M_header._M_parent = 0;
   18564:	0c043823          	sd	zero,208(s0)
      _M_header._M_left = &_M_header;
   18568:	0c840793          	addi	a5,s0,200
   1856c:	ec7c                	c.sd	a5,216(s0)
      _M_header._M_right = &_M_header;
   1856e:	f07c                	c.sd	a5,224(s0)
      _M_node_count = 0;
   18570:	0e043423          	sd	zero,232(s0)
	  _M_pi = __pi;
   18574:	e480                	c.sd	s0,8(s1)
	  __p = __pi->_M_ptr();
   18576:	0134b023          	sd	s3,0(s1)
      { return _M_ptr; }
   1857a:	00093503          	ld	a0,0(s2)
  data = l->load(section_type::info, &size);
   1857e:	611c                	c.ld	a5,0(a0)
   18580:	6b9c                	c.ld	a5,16(a5)
   18582:	860a                	c.mv	a2,sp
   18584:	458d                	c.li	a1,3
   18586:	9782                	c.jalr	a5
   18588:	a039                	c.j	18596 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xfa>
      __atomic_add(__mem, __val);
   1858a:	4585                	c.li	a1,1
   1858c:	03050513          	addi	a0,a0,48
   18590:	820fe0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18594:	b759                	c.j	1851a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7e>
   18596:	842a                	c.mv	s0,a0
  if (!data)
   18598:	c901                	c.beqz	a0,185a8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x10c>
   1859a:	0004ba03          	ld	s4,0(s1)
   1859e:	06000513          	addi	a0,zero,96
   185a2:	a0efe0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   185a6:	a83d                	c.j	185e4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x148>
    throw format_error("required .debug_info section missing");
   185a8:	4541                	c.li	a0,16
   185aa:	8e6fe0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   185ae:	892a                	c.mv	s2,a0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   185b0:	00015597          	auipc	a1,0x15
   185b4:	79058593          	addi	a1,a1,1936 # 2dd40 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x70>
   185b8:	c58fe0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   185bc:	00022797          	auipc	a5,0x22
   185c0:	fb47b783          	ld	a5,-76(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   185c4:	07c1                	c.addi	a5,16
   185c6:	00f93023          	sd	a5,0(s2)
   185ca:	00022617          	auipc	a2,0x22
   185ce:	dce63603          	ld	a2,-562(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   185d2:	00022597          	auipc	a1,0x22
   185d6:	cf65b583          	ld	a1,-778(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   185da:	854a                	c.mv	a0,s2
   185dc:	b84fe0ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   185e0:	842a                	c.mv	s0,a0
   185e2:	adc1                	c.j	18cb2 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x816>
   185e4:	00052423          	sw	zero,8(a0)
   185e8:	00052623          	sw	zero,12(a0)
   185ec:	00052823          	sw	zero,16(a0)
   185f0:	00052a23          	sw	zero,20(a0)
   185f4:	00052c23          	sw	zero,24(a0)
   185f8:	00052e23          	sw	zero,28(a0)
   185fc:	02053023          	sd	zero,32(a0)
   18600:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   18604:	4785                	c.li	a5,1
   18606:	d91c                	c.sw	a5,48(a0)
   18608:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   1860a:	00022797          	auipc	a5,0x22
   1860e:	fce7b783          	ld	a5,-50(a5) # 3a5d8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   18612:	07c1                	c.addi	a5,16
   18614:	e11c                	c.sd	a5,0(a0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   18616:	478d                	c.li	a5,3
   18618:	dd1c                	c.sw	a5,56(a0)
   1861a:	e120                	c.sd	s0,64(a0)
   1861c:	6782                	c.ldsp	a5,0(sp)
   1861e:	97a2                	c.add	a5,s0
   18620:	e53c                	c.sd	a5,72(a0)
   18622:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   18626:	04052a23          	sw	zero,84(a0)
   1862a:	04052c23          	sw	zero,88(a0)
   1862e:	03850793          	addi	a5,a0,56
   18632:	00fa3823          	sd	a5,16(s4)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   18636:	018a3983          	ld	s3,24(s4)
	__r._M_pi = _M_pi;
   1863a:	00aa3c23          	sd	a0,24(s4)
	if (_M_pi != nullptr)
   1863e:	02098263          	beq	s3,zero,18662 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x1c6>
    if (__is_single_threaded())
   18642:	00022797          	auipc	a5,0x22
   18646:	e567b783          	ld	a5,-426(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1864a:	0007c783          	lbu	a5,0(a5)
   1864e:	cbdd                	c.beqz	a5,18704 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x268>
    _Atomic_word __result = *__mem;
   18650:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   18654:	fff5079b          	addiw	a5,a0,-1
   18658:	02f9a823          	sw	a5,48(s3)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1865c:	4785                	c.li	a5,1
   1865e:	0af50963          	beq	a0,a5,18710 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x274>
      { return _M_ptr; }
   18662:	609c                	c.ld	a5,0(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18664:	0107ba03          	ld	s4,16(a5)
      : _M_pi(__r._M_pi)
   18668:	0187b983          	ld	s3,24(a5)
	if (_M_pi != nullptr)
   1866c:	68098d63          	beq	s3,zero,18d06 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x86a>
    if (__is_single_threaded())
   18670:	00022797          	auipc	a5,0x22
   18674:	e287b783          	ld	a5,-472(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18678:	0007c783          	lbu	a5,0(a5)
   1867c:	cfe9                	c.beqz	a5,18756 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2ba>
  { *__mem += __val; }
   1867e:	0309a783          	lw	a5,48(s3)
   18682:	2785                	c.addiw	a5,1
   18684:	02f9a823          	sw	a5,48(s3)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18688:	e452                	c.sdsp	s4,8(sp)
      : _M_pi(__r._M_pi)
   1868a:	e84e                	c.sdsp	s3,16(sp)
    if (__is_single_threaded())
   1868c:	00022797          	auipc	a5,0x22
   18690:	e0c7b783          	ld	a5,-500(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18694:	0007c783          	lbu	a5,0(a5)
   18698:	c7e9                	c.beqz	a5,18762 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2c6>
  { *__mem += __val; }
   1869a:	0309a783          	lw	a5,48(s3)
   1869e:	2785                	c.addiw	a5,1
   186a0:	02f9a823          	sw	a5,48(s3)
      : sec(sec), pos(sec->begin + offset) {}
   186a4:	008a3783          	ld	a5,8(s4)
   186a8:	ec3e                	c.sdsp	a5,24(sp)
    if (__is_single_threaded())
   186aa:	00022797          	auipc	a5,0x22
   186ae:	dee7b783          	ld	a5,-530(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   186b2:	0007c783          	lbu	a5,0(a5)
   186b6:	cfc5                	c.beqz	a5,1876e <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2d2>
    _Atomic_word __result = *__mem;
   186b8:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   186bc:	fff5079b          	addiw	a5,a0,-1
   186c0:	02f9a823          	sw	a5,48(s3)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   186c4:	4785                	c.li	a5,1
   186c6:	64f51563          	bne	a0,a5,18d10 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x874>
	_M_dispose();
   186ca:	0009b783          	ld	a5,0(s3)
   186ce:	6b9c                	c.ld	a5,16(a5)
   186d0:	854e                	c.mv	a0,s3
   186d2:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   186d4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   186d8:	00022797          	auipc	a5,0x22
   186dc:	dc07b783          	ld	a5,-576(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   186e0:	0007c783          	lbu	a5,0(a5)
   186e4:	cbd9                	c.beqz	a5,1877a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2de>
    _Atomic_word __result = *__mem;
   186e6:	0349a503          	lw	a0,52(s3)
    *__mem += __val;
   186ea:	fff5079b          	addiw	a5,a0,-1
   186ee:	02f9aa23          	sw	a5,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   186f2:	4785                	c.li	a5,1
   186f4:	60f51e63          	bne	a0,a5,18d10 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x874>
	    _M_destroy();
   186f8:	0009b783          	ld	a5,0(s3)
   186fc:	6f9c                	c.ld	a5,24(a5)
   186fe:	854e                	c.mv	a0,s3
   18700:	9782                	c.jalr	a5
   18702:	a539                	c.j	18d10 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x874>
      return __exchange_and_add(__mem, __val);
   18704:	55fd                	c.li	a1,-1
   18706:	03098513          	addi	a0,s3,48
   1870a:	ee7fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1870e:	b7b9                	c.j	1865c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x1c0>
	_M_dispose();
   18710:	0009b783          	ld	a5,0(s3)
   18714:	6b9c                	c.ld	a5,16(a5)
   18716:	854e                	c.mv	a0,s3
   18718:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1871a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1871e:	00022797          	auipc	a5,0x22
   18722:	d7a7b783          	ld	a5,-646(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18726:	0007c783          	lbu	a5,0(a5)
   1872a:	c385                	c.beqz	a5,1874a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2ae>
    _Atomic_word __result = *__mem;
   1872c:	0349a503          	lw	a0,52(s3)
    *__mem += __val;
   18730:	fff5079b          	addiw	a5,a0,-1
   18734:	02f9aa23          	sw	a5,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18738:	4785                	c.li	a5,1
   1873a:	f2f514e3          	bne	a0,a5,18662 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x1c6>
	    _M_destroy();
   1873e:	0009b783          	ld	a5,0(s3)
   18742:	6f9c                	c.ld	a5,24(a5)
   18744:	854e                	c.mv	a0,s3
   18746:	9782                	c.jalr	a5
   18748:	bf29                	c.j	18662 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x1c6>
      return __exchange_and_add(__mem, __val);
   1874a:	55fd                	c.li	a1,-1
   1874c:	03498513          	addi	a0,s3,52
   18750:	ea1fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18754:	b7d5                	c.j	18738 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x29c>
      __atomic_add(__mem, __val);
   18756:	4585                	c.li	a1,1
   18758:	03098513          	addi	a0,s3,48
   1875c:	e55fd0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18760:	b725                	c.j	18688 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x1ec>
   18762:	4585                	c.li	a1,1
   18764:	03098513          	addi	a0,s3,48
   18768:	e49fd0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1876c:	bf25                	c.j	186a4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x208>
      return __exchange_and_add(__mem, __val);
   1876e:	55fd                	c.li	a1,-1
   18770:	03098513          	addi	a0,s3,48
   18774:	e7dfd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18778:	b7b1                	c.j	186c4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x228>
   1877a:	55fd                	c.li	a1,-1
   1877c:	03498513          	addi	a0,s3,52
   18780:	e71fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18784:	b7bd                	c.j	186f2 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x256>
    const unsigned char *p = (const unsigned char *)pos;
   18786:	65e2                	c.ldsp	a1,24(sp)
      { return _M_ptr; }
   18788:	6822                	c.ldsp	a6,8(sp)
    if (sec->ord == byte_order::lsb) {
   1878a:	01c82783          	lw	a5,28(a6)
   1878e:	e3b1                	c.bnez	a5,187d2 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x336>
   18790:	862e                	c.mv	a2,a1
   18792:	4701                	c.li	a4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   18794:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   18798:	00064683          	lbu	a3,0(a2)
   1879c:	00e696b3          	sll	a3,a3,a4
   187a0:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   187a2:	0605                	c.addi	a2,1
   187a4:	2721                	c.addiw	a4,8
   187a6:	fea719e3          	bne	a4,a0,18798 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2fc>
    pos += sizeof(T);
   187aa:	0591                	c.addi	a1,4
   187ac:	ec2e                	c.sdsp	a1,24(sp)
  if (length == 0xffffffff)
   187ae:	2781                	c.addiw	a5,0
   187b0:	577d                	c.li	a4,-1
   187b2:	02e78c63          	beq	a5,a4,187ea <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x34e>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   187b6:	67a2                	c.ldsp	a5,8(sp)
   187b8:	6b98                	c.ld	a4,16(a5)
   187ba:	67e2                	c.ldsp	a5,24(sp)
   187bc:	40f70633          	sub	a2,a4,a5
   187c0:	4685                	c.li	a3,1
   187c2:	00c6f463          	bgeu	a3,a2,187ca <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x32e>
   187c6:	04e7e263          	bltu	a5,a4,1880a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x36e>
      underflow();
   187ca:	0028                	c.addi4spn	a0,sp,8
   187cc:	707020ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
   187d0:	a82d                	c.j	1880a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x36e>
   187d2:	872e                	c.mv	a4,a1
   187d4:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   187d8:	4781                	c.li	a5,0
        val = (val << 8) | (uint64_t)p[i];
   187da:	07a2                	c.slli	a5,0x8
   187dc:	00074683          	lbu	a3,0(a4)
   187e0:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   187e2:	0705                	c.addi	a4,1
   187e4:	fec71be3          	bne	a4,a2,187da <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x33e>
   187e8:	b7c9                	c.j	187aa <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x30e>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   187ea:	01083783          	ld	a5,16(a6)
   187ee:	40b786b3          	sub	a3,a5,a1
   187f2:	471d                	c.li	a4,7
   187f4:	00d77463          	bgeu	a4,a3,187fc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x360>
   187f8:	00f5e563          	bltu	a1,a5,18802 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x366>
      underflow();
   187fc:	0028                	c.addi4spn	a0,sp,8
   187fe:	6d5020ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    pos += sizeof(T);
   18802:	67e2                	c.ldsp	a5,24(sp)
   18804:	07a1                	c.addi	a5,8
   18806:	ec3e                	c.sdsp	a5,24(sp)
    return (T)val;
   18808:	b77d                	c.j	187b6 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x31a>
    const unsigned char *p = (const unsigned char *)pos;
   1880a:	6762                	c.ldsp	a4,24(sp)
    if (sec->ord == byte_order::lsb) {
   1880c:	67a2                	c.ldsp	a5,8(sp)
   1880e:	4fdc                	c.lw	a5,28(a5)
   18810:	ef85                	c.bnez	a5,18848 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3ac>
        val |= ((uint64_t)p[i]) << (i * 8);
   18812:	00174783          	lbu	a5,1(a4)
   18816:	07a2                	c.slli	a5,0x8
   18818:	00074683          	lbu	a3,0(a4)
   1881c:	8fd5                	c.or	a5,a3
    pos += sizeof(T);
   1881e:	0709                	c.addi	a4,2
   18820:	ec3a                	c.sdsp	a4,24(sp)
    return (T)val;
   18822:	17c2                	c.slli	a5,0x30
   18824:	93c1                	c.srli	a5,0x30
  uhalf versionbe = (version >> 8) | ((version & 0xFF) << 8);
   18826:	0087d71b          	srliw	a4,a5,0x8
   1882a:	0087969b          	slliw	a3,a5,0x8
   1882e:	8f55                	c.or	a4,a3
  if (versionbe < version) {
   18830:	1742                	c.slli	a4,0x30
   18832:	9341                	c.srli	a4,0x30
   18834:	02f76163          	bltu	a4,a5,18856 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3ba>
   18838:	00093503          	ld	a0,0(s2)
  data = l->load(section_type::abbrev, &size);
   1883c:	611c                	c.ld	a5,0(a0)
   1883e:	6b9c                	c.ld	a5,16(a5)
   18840:	860a                	c.mv	a2,sp
   18842:	4581                	c.li	a1,0
   18844:	9782                	c.jalr	a5
   18846:	a8f9                	c.j	18924 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x488>
        val = (val << 8) | (uint64_t)p[i];
   18848:	00074783          	lbu	a5,0(a4)
   1884c:	07a2                	c.slli	a5,0x8
   1884e:	00174683          	lbu	a3,1(a4)
   18852:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   18854:	b7e9                	c.j	1881e <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x382>
   18856:	0004b983          	ld	s3,0(s1)
   1885a:	06000513          	addi	a0,zero,96
   1885e:	f53fd0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   18862:	00052423          	sw	zero,8(a0)
   18866:	00052623          	sw	zero,12(a0)
   1886a:	00052823          	sw	zero,16(a0)
   1886e:	00052a23          	sw	zero,20(a0)
   18872:	00052c23          	sw	zero,24(a0)
   18876:	00052e23          	sw	zero,28(a0)
   1887a:	02053023          	sd	zero,32(a0)
   1887e:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   18882:	4785                	c.li	a5,1
   18884:	d91c                	c.sw	a5,48(a0)
   18886:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   18888:	00022717          	auipc	a4,0x22
   1888c:	d5073703          	ld	a4,-688(a4) # 3a5d8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   18890:	0741                	c.addi	a4,16
   18892:	e118                	c.sd	a4,0(a0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   18894:	470d                	c.li	a4,3
   18896:	dd18                	c.sw	a4,56(a0)
   18898:	e120                	c.sd	s0,64(a0)
   1889a:	6702                	c.ldsp	a4,0(sp)
   1889c:	9722                	c.add	a4,s0
   1889e:	e538                	c.sd	a4,72(a0)
   188a0:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   188a4:	c97c                	c.sw	a5,84(a0)
   188a6:	04052c23          	sw	zero,88(a0)
   188aa:	03850793          	addi	a5,a0,56
   188ae:	00f9b823          	sd	a5,16(s3)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   188b2:	0189b403          	ld	s0,24(s3)
	__r._M_pi = _M_pi;
   188b6:	00a9bc23          	sd	a0,24(s3)
	if (_M_pi != nullptr)
   188ba:	dc3d                	c.beqz	s0,18838 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x39c>
    if (__is_single_threaded())
   188bc:	00022797          	auipc	a5,0x22
   188c0:	bdc7b783          	ld	a5,-1060(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   188c4:	0007c783          	lbu	a5,0(a5)
   188c8:	c3a9                	c.beqz	a5,1890a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x46e>
    _Atomic_word __result = *__mem;
   188ca:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   188cc:	fff5079b          	addiw	a5,a0,-1
   188d0:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   188d2:	4785                	c.li	a5,1
   188d4:	f6f512e3          	bne	a0,a5,18838 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x39c>
	_M_dispose();
   188d8:	601c                	c.ld	a5,0(s0)
   188da:	6b9c                	c.ld	a5,16(a5)
   188dc:	8522                	c.mv	a0,s0
   188de:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   188e0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   188e4:	00022797          	auipc	a5,0x22
   188e8:	bb47b783          	ld	a5,-1100(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   188ec:	0007c783          	lbu	a5,0(a5)
   188f0:	c39d                	c.beqz	a5,18916 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x47a>
    _Atomic_word __result = *__mem;
   188f2:	585c                	c.lw	a5,52(s0)
    *__mem += __val;
   188f4:	fff7871b          	addiw	a4,a5,-1
   188f8:	d858                	c.sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   188fa:	4705                	c.li	a4,1
   188fc:	f2e79ee3          	bne	a5,a4,18838 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x39c>
	    _M_destroy();
   18900:	601c                	c.ld	a5,0(s0)
   18902:	6f9c                	c.ld	a5,24(a5)
   18904:	8522                	c.mv	a0,s0
   18906:	9782                	c.jalr	a5
   18908:	bf05                	c.j	18838 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x39c>
      return __exchange_and_add(__mem, __val);
   1890a:	55fd                	c.li	a1,-1
   1890c:	03040513          	addi	a0,s0,48
   18910:	ce1fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18914:	bf7d                	c.j	188d2 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x436>
   18916:	55fd                	c.li	a1,-1
   18918:	03440513          	addi	a0,s0,52
   1891c:	cd5fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18920:	87aa                	c.mv	a5,a0
   18922:	bfe1                	c.j	188fa <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x45e>
   18924:	842a                	c.mv	s0,a0
  if (!data)
   18926:	c911                	c.beqz	a0,1893a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x49e>
      { return _M_ptr; }
   18928:	0004b903          	ld	s2,0(s1)
   1892c:	01093983          	ld	s3,16(s2)
   18930:	06000513          	addi	a0,zero,96
   18934:	e7dfd0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   18938:	a83d                	c.j	18976 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x4da>
    throw format_error("required .debug_abbrev section missing");
   1893a:	4541                	c.li	a0,16
   1893c:	d55fd0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   18940:	892a                	c.mv	s2,a0
   18942:	00015597          	auipc	a1,0x15
   18946:	42658593          	addi	a1,a1,1062 # 2dd68 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x98>
   1894a:	8c6fe0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   1894e:	00022797          	auipc	a5,0x22
   18952:	c227b783          	ld	a5,-990(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   18956:	07c1                	c.addi	a5,16
   18958:	00f93023          	sd	a5,0(s2)
   1895c:	00022617          	auipc	a2,0x22
   18960:	a3c63603          	ld	a2,-1476(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   18964:	00022597          	auipc	a1,0x22
   18968:	9645b583          	ld	a1,-1692(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   1896c:	854a                	c.mv	a0,s2
   1896e:	ff3fd0ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   18972:	842a                	c.mv	s0,a0
   18974:	aea9                	c.j	18cce <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x832>
   18976:	00052423          	sw	zero,8(a0)
   1897a:	00052623          	sw	zero,12(a0)
   1897e:	00052823          	sw	zero,16(a0)
   18982:	00052a23          	sw	zero,20(a0)
   18986:	00052c23          	sw	zero,24(a0)
   1898a:	00052e23          	sw	zero,28(a0)
   1898e:	02053023          	sd	zero,32(a0)
   18992:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   18996:	4785                	c.li	a5,1
   18998:	d91c                	c.sw	a5,48(a0)
   1899a:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   1899c:	00022797          	auipc	a5,0x22
   189a0:	c3c7b783          	ld	a5,-964(a5) # 3a5d8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   189a4:	07c1                	c.addi	a5,16
   189a6:	e11c                	c.sd	a5,0(a0)
   189a8:	01c9a783          	lw	a5,28(s3)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   189ac:	02052c23          	sw	zero,56(a0)
   189b0:	e120                	c.sd	s0,64(a0)
   189b2:	6702                	c.ldsp	a4,0(sp)
   189b4:	943a                	c.add	s0,a4
   189b6:	e520                	c.sd	s0,72(a0)
   189b8:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   189bc:	c97c                	c.sw	a5,84(a0)
   189be:	04052c23          	sw	zero,88(a0)
   189c2:	03850793          	addi	a5,a0,56
   189c6:	02f93023          	sd	a5,32(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   189ca:	02893403          	ld	s0,40(s2)
	__r._M_pi = _M_pi;
   189ce:	02a93423          	sd	a0,40(s2)
	if (_M_pi != nullptr)
   189d2:	cc19                	c.beqz	s0,189f0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x554>
    if (__is_single_threaded())
   189d4:	00022797          	auipc	a5,0x22
   189d8:	ac47b783          	ld	a5,-1340(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   189dc:	0007c783          	lbu	a5,0(a5)
   189e0:	cbd1                	c.beqz	a5,18a74 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5d8>
    _Atomic_word __result = *__mem;
   189e2:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   189e4:	fff5079b          	addiw	a5,a0,-1
   189e8:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   189ea:	4785                	c.li	a5,1
   189ec:	08f50a63          	beq	a0,a5,18a80 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5e4>
      { return _M_ptr; }
   189f0:	609c                	c.ld	a5,0(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   189f2:	0107b903          	ld	s2,16(a5)
      : _M_pi(__r._M_pi)
   189f6:	6f80                	c.ld	s0,24(a5)
	if (_M_pi != nullptr)
   189f8:	2e040c63          	beq	s0,zero,18cf0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x854>
    if (__is_single_threaded())
   189fc:	00022797          	auipc	a5,0x22
   18a00:	a9c7b783          	ld	a5,-1380(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18a04:	0007c783          	lbu	a5,0(a5)
   18a08:	cbdd                	c.beqz	a5,18abe <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x622>
  { *__mem += __val; }
   18a0a:	581c                	c.lw	a5,48(s0)
   18a0c:	2785                	c.addiw	a5,1
   18a0e:	d81c                	c.sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18a10:	f04a                	c.sdsp	s2,32(sp)
      : _M_pi(__r._M_pi)
   18a12:	f422                	c.sdsp	s0,40(sp)
    if (__is_single_threaded())
   18a14:	00022797          	auipc	a5,0x22
   18a18:	a847b783          	ld	a5,-1404(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18a1c:	0007c783          	lbu	a5,0(a5)
   18a20:	c7cd                	c.beqz	a5,18aca <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x62e>
  { *__mem += __val; }
   18a22:	581c                	c.lw	a5,48(s0)
   18a24:	2785                	c.addiw	a5,1
   18a26:	d81c                	c.sw	a5,48(s0)
      : sec(sec), pos(sec->begin + offset) {}
   18a28:	00893783          	ld	a5,8(s2)
   18a2c:	f83e                	c.sdsp	a5,48(sp)
    if (__is_single_threaded())
   18a2e:	00022797          	auipc	a5,0x22
   18a32:	a6a7b783          	ld	a5,-1430(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18a36:	0007c783          	lbu	a5,0(a5)
   18a3a:	cfd1                	c.beqz	a5,18ad6 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x63a>
    _Atomic_word __result = *__mem;
   18a3c:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   18a3e:	fff5079b          	addiw	a5,a0,-1
   18a42:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18a44:	4785                	c.li	a5,1
   18a46:	08f50e63          	beq	a0,a5,18ae2 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x646>
  bool end() const { return pos >= sec->end; }
   18a4a:	7642                	c.ldsp	a2,48(sp)
      { return _M_ptr; }
   18a4c:	7782                	c.ldsp	a5,32(sp)
  while (!infocur.end()) {
   18a4e:	6b98                	c.ld	a4,16(a5)
   18a50:	16e67863          	bgeu	a2,a4,18bc0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x724>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   18a54:	03810b13          	addi	s6,sp,56
   18a58:	00022b97          	auipc	s7,0x22
   18a5c:	8a8bbb83          	ld	s7,-1880(s7) # 3a300 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)@@Base+0x1f414>
    infocur.subsection();
   18a60:	04010913          	addi	s2,sp,64
   18a64:	02010993          	addi	s3,sp,32
    return ::__libc_single_threaded;
   18a68:	00022a17          	auipc	s4,0x22
   18a6c:	a30a3a03          	ld	s4,-1488(s4) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18a70:	4a85                	c.li	s5,1
   18a72:	a0f5                	c.j	18b5e <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6c2>
      return __exchange_and_add(__mem, __val);
   18a74:	55fd                	c.li	a1,-1
   18a76:	03040513          	addi	a0,s0,48
   18a7a:	b77fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18a7e:	b7b5                	c.j	189ea <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x54e>
	_M_dispose();
   18a80:	601c                	c.ld	a5,0(s0)
   18a82:	6b9c                	c.ld	a5,16(a5)
   18a84:	8522                	c.mv	a0,s0
   18a86:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18a88:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18a8c:	00022797          	auipc	a5,0x22
   18a90:	a0c7b783          	ld	a5,-1524(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18a94:	0007c783          	lbu	a5,0(a5)
   18a98:	cf89                	c.beqz	a5,18ab2 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x616>
    _Atomic_word __result = *__mem;
   18a9a:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18a9c:	fff5079b          	addiw	a5,a0,-1
   18aa0:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18aa2:	4785                	c.li	a5,1
   18aa4:	f4f516e3          	bne	a0,a5,189f0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x554>
	    _M_destroy();
   18aa8:	601c                	c.ld	a5,0(s0)
   18aaa:	6f9c                	c.ld	a5,24(a5)
   18aac:	8522                	c.mv	a0,s0
   18aae:	9782                	c.jalr	a5
   18ab0:	b781                	c.j	189f0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x554>
      return __exchange_and_add(__mem, __val);
   18ab2:	55fd                	c.li	a1,-1
   18ab4:	03440513          	addi	a0,s0,52
   18ab8:	b39fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18abc:	b7dd                	c.j	18aa2 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x606>
      __atomic_add(__mem, __val);
   18abe:	4585                	c.li	a1,1
   18ac0:	03040513          	addi	a0,s0,48
   18ac4:	aedfd0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18ac8:	b7a1                	c.j	18a10 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x574>
   18aca:	4585                	c.li	a1,1
   18acc:	03040513          	addi	a0,s0,48
   18ad0:	ae1fd0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18ad4:	bf91                	c.j	18a28 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x58c>
      return __exchange_and_add(__mem, __val);
   18ad6:	55fd                	c.li	a1,-1
   18ad8:	03040513          	addi	a0,s0,48
   18adc:	b15fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18ae0:	b795                	c.j	18a44 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5a8>
	_M_dispose();
   18ae2:	601c                	c.ld	a5,0(s0)
   18ae4:	6b9c                	c.ld	a5,16(a5)
   18ae6:	8522                	c.mv	a0,s0
   18ae8:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18aea:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18aee:	00022797          	auipc	a5,0x22
   18af2:	9aa7b783          	ld	a5,-1622(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18af6:	0007c783          	lbu	a5,0(a5)
   18afa:	cf89                	c.beqz	a5,18b14 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x678>
    _Atomic_word __result = *__mem;
   18afc:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18afe:	fff5079b          	addiw	a5,a0,-1
   18b02:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18b04:	4785                	c.li	a5,1
   18b06:	f4f512e3          	bne	a0,a5,18a4a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5ae>
	    _M_destroy();
   18b0a:	601c                	c.ld	a5,0(s0)
   18b0c:	6f9c                	c.ld	a5,24(a5)
   18b0e:	8522                	c.mv	a0,s0
   18b10:	9782                	c.jalr	a5
   18b12:	bf25                	c.j	18a4a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5ae>
      return __exchange_and_add(__mem, __val);
   18b14:	55fd                	c.li	a1,-1
   18b16:	03440513          	addi	a0,s0,52
   18b1a:	ad7fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18b1e:	b7dd                	c.j	18b04 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x668>
	    ++this->_M_impl._M_finish;
   18b20:	7c1c                	c.ld	a5,56(s0)
   18b22:	07e1                	c.addi	a5,24
   18b24:	fc1c                	c.sd	a5,56(s0)
   18b26:	85ce                	c.mv	a1,s3
   18b28:	854a                	c.mv	a0,s2
   18b2a:	739020ef          	jal	ra,1ba62 <dwarf::cursor::subsection()>
   18b2e:	a801                	c.j	18b3e <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6a2>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   18b30:	86da                	c.mv	a3,s6
   18b32:	8626                	c.mv	a2,s1
   18b34:	85aa                	c.mv	a1,a0
   18b36:	03040513          	addi	a0,s0,48
   18b3a:	9b82                	c.jalr	s7
   18b3c:	b7ed                	c.j	18b26 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x68a>
	if (_M_pi != nullptr)
   18b3e:	6426                	c.ldsp	s0,72(sp)
   18b40:	c811                	c.beqz	s0,18b54 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6b8>
    if (__is_single_threaded())
   18b42:	000a4783          	lbu	a5,0(s4)
   18b46:	cb85                	c.beqz	a5,18b76 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6da>
    _Atomic_word __result = *__mem;
   18b48:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   18b4a:	fff5079b          	addiw	a5,a0,-1
   18b4e:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18b50:	03550963          	beq	a0,s5,18b82 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6e6>
   18b54:	7642                	c.ldsp	a2,48(sp)
      { return _M_ptr; }
   18b56:	7782                	c.ldsp	a5,32(sp)
  while (!infocur.end()) {
   18b58:	6b98                	c.ld	a4,16(a5)
   18b5a:	06e67363          	bgeu	a2,a4,18bc0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x724>
   18b5e:	6080                	c.ld	s0,0(s1)
  section_offset get_section_offset() const { return pos - sec->begin; }
   18b60:	679c                	c.ld	a5,8(a5)
   18b62:	8e1d                	c.sub	a2,a5
    m->compilation_units.emplace_back(*this, infocur.get_section_offset());
   18b64:	fc32                	c.sdsp	a2,56(sp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   18b66:	7c08                	c.ld	a0,56(s0)
   18b68:	603c                	c.ld	a5,64(s0)
   18b6a:	fcf503e3          	beq	a0,a5,18b30 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x694>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   18b6e:	85a6                	c.mv	a1,s1
   18b70:	b22ff0ef          	jal	ra,17e92 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)>
   18b74:	b775                	c.j	18b20 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x684>
      return __exchange_and_add(__mem, __val);
   18b76:	55fd                	c.li	a1,-1
   18b78:	03040513          	addi	a0,s0,48
   18b7c:	a75fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18b80:	bfc1                	c.j	18b50 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6b4>
	_M_dispose();
   18b82:	601c                	c.ld	a5,0(s0)
   18b84:	6b9c                	c.ld	a5,16(a5)
   18b86:	8522                	c.mv	a0,s0
   18b88:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18b8a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18b8e:	00022797          	auipc	a5,0x22
   18b92:	90a7b783          	ld	a5,-1782(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18b96:	0007c783          	lbu	a5,0(a5)
   18b9a:	cf89                	c.beqz	a5,18bb4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x718>
    _Atomic_word __result = *__mem;
   18b9c:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18b9e:	fff5079b          	addiw	a5,a0,-1
   18ba2:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18ba4:	4785                	c.li	a5,1
   18ba6:	faf517e3          	bne	a0,a5,18b54 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6b8>
	    _M_destroy();
   18baa:	601c                	c.ld	a5,0(s0)
   18bac:	6f9c                	c.ld	a5,24(a5)
   18bae:	8522                	c.mv	a0,s0
   18bb0:	9782                	c.jalr	a5
   18bb2:	b74d                	c.j	18b54 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6b8>
      return __exchange_and_add(__mem, __val);
   18bb4:	55fd                	c.li	a1,-1
   18bb6:	03440513          	addi	a0,s0,52
   18bba:	a37fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18bbe:	b7dd                	c.j	18ba4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x708>
	if (_M_pi != nullptr)
   18bc0:	7422                	c.ldsp	s0,40(sp)
   18bc2:	cc19                	c.beqz	s0,18be0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x744>
    if (__is_single_threaded())
   18bc4:	00022797          	auipc	a5,0x22
   18bc8:	8d47b783          	ld	a5,-1836(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18bcc:	0007c783          	lbu	a5,0(a5)
   18bd0:	c3b9                	c.beqz	a5,18c16 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x77a>
    _Atomic_word __result = *__mem;
   18bd2:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   18bd4:	fff5079b          	addiw	a5,a0,-1
   18bd8:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18bda:	4785                	c.li	a5,1
   18bdc:	04f50363          	beq	a0,a5,18c22 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x786>
	if (_M_pi != nullptr)
   18be0:	6442                	c.ldsp	s0,16(sp)
   18be2:	cc19                	c.beqz	s0,18c00 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x764>
    if (__is_single_threaded())
   18be4:	00022797          	auipc	a5,0x22
   18be8:	8b47b783          	ld	a5,-1868(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18bec:	0007c783          	lbu	a5,0(a5)
   18bf0:	cba5                	c.beqz	a5,18c60 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7c4>
    _Atomic_word __result = *__mem;
   18bf2:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   18bf4:	fff5079b          	addiw	a5,a0,-1
   18bf8:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18bfa:	4785                	c.li	a5,1
   18bfc:	06f50863          	beq	a0,a5,18c6c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7d0>
}
   18c00:	60ea                	c.ldsp	ra,152(sp)
   18c02:	644a                	c.ldsp	s0,144(sp)
   18c04:	64aa                	c.ldsp	s1,136(sp)
   18c06:	690a                	c.ldsp	s2,128(sp)
   18c08:	79e6                	c.ldsp	s3,120(sp)
   18c0a:	7a46                	c.ldsp	s4,112(sp)
   18c0c:	7aa6                	c.ldsp	s5,104(sp)
   18c0e:	7b06                	c.ldsp	s6,96(sp)
   18c10:	6be6                	c.ldsp	s7,88(sp)
   18c12:	610d                	c.addi16sp	sp,160
   18c14:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   18c16:	55fd                	c.li	a1,-1
   18c18:	03040513          	addi	a0,s0,48
   18c1c:	9d5fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18c20:	bf6d                	c.j	18bda <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x73e>
	_M_dispose();
   18c22:	601c                	c.ld	a5,0(s0)
   18c24:	6b9c                	c.ld	a5,16(a5)
   18c26:	8522                	c.mv	a0,s0
   18c28:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18c2a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18c2e:	00022797          	auipc	a5,0x22
   18c32:	86a7b783          	ld	a5,-1942(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18c36:	0007c783          	lbu	a5,0(a5)
   18c3a:	cf89                	c.beqz	a5,18c54 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7b8>
    _Atomic_word __result = *__mem;
   18c3c:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18c3e:	fff5079b          	addiw	a5,a0,-1
   18c42:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18c44:	4785                	c.li	a5,1
   18c46:	f8f51de3          	bne	a0,a5,18be0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x744>
	    _M_destroy();
   18c4a:	601c                	c.ld	a5,0(s0)
   18c4c:	6f9c                	c.ld	a5,24(a5)
   18c4e:	8522                	c.mv	a0,s0
   18c50:	9782                	c.jalr	a5
   18c52:	b779                	c.j	18be0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x744>
      return __exchange_and_add(__mem, __val);
   18c54:	55fd                	c.li	a1,-1
   18c56:	03440513          	addi	a0,s0,52
   18c5a:	997fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18c5e:	b7dd                	c.j	18c44 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7a8>
   18c60:	55fd                	c.li	a1,-1
   18c62:	03040513          	addi	a0,s0,48
   18c66:	98bfd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18c6a:	bf41                	c.j	18bfa <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x75e>
	_M_dispose();
   18c6c:	601c                	c.ld	a5,0(s0)
   18c6e:	6b9c                	c.ld	a5,16(a5)
   18c70:	8522                	c.mv	a0,s0
   18c72:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18c74:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18c78:	00022797          	auipc	a5,0x22
   18c7c:	8207b783          	ld	a5,-2016(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18c80:	0007c783          	lbu	a5,0(a5)
   18c84:	cf89                	c.beqz	a5,18c9e <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x802>
    _Atomic_word __result = *__mem;
   18c86:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18c88:	fff5079b          	addiw	a5,a0,-1
   18c8c:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18c8e:	4785                	c.li	a5,1
   18c90:	f6f518e3          	bne	a0,a5,18c00 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x764>
	    _M_destroy();
   18c94:	601c                	c.ld	a5,0(s0)
   18c96:	6f9c                	c.ld	a5,24(a5)
   18c98:	8522                	c.mv	a0,s0
   18c9a:	9782                	c.jalr	a5
   18c9c:	b795                	c.j	18c00 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x764>
      return __exchange_and_add(__mem, __val);
   18c9e:	55fd                	c.li	a1,-1
   18ca0:	03440513          	addi	a0,s0,52
   18ca4:	94dfd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18ca8:	b7dd                	c.j	18c8e <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7f2>
    throw format_error("required .debug_info section missing");
   18caa:	842a                	c.mv	s0,a0
   18cac:	854a                	c.mv	a0,s2
   18cae:	aa3fd0ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   18cb2:	6488                	c.ld	a0,8(s1)
   18cb4:	c511                	c.beqz	a0,18cc0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x824>
	  _M_pi->_M_release();
   18cb6:	00021317          	auipc	t1,0x21
   18cba:	72a33303          	ld	t1,1834(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   18cbe:	9302                	c.jalr	t1
   18cc0:	8522                	c.mv	a0,s0
   18cc2:	ccffd0ef          	jal	ra,16990 <_Unwind_Resume@plt>
    throw format_error("required .debug_abbrev section missing");
   18cc6:	842a                	c.mv	s0,a0
   18cc8:	854a                	c.mv	a0,s2
   18cca:	a87fd0ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   18cce:	6542                	c.ldsp	a0,16(sp)
   18cd0:	d16d                	c.beqz	a0,18cb2 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x816>
	  _M_pi->_M_release();
   18cd2:	00021317          	auipc	t1,0x21
   18cd6:	70e33303          	ld	t1,1806(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   18cda:	9302                	c.jalr	t1
   18cdc:	bfd9                	c.j	18cb2 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x816>
	if (_M_pi != nullptr)
   18cde:	842a                	c.mv	s0,a0
   18ce0:	7522                	c.ldsp	a0,40(sp)
   18ce2:	d575                	c.beqz	a0,18cce <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x832>
	  _M_pi->_M_release();
   18ce4:	00021317          	auipc	t1,0x21
   18ce8:	6fc33303          	ld	t1,1788(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   18cec:	9302                	c.jalr	t1
   18cee:	b7c5                	c.j	18cce <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x832>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18cf0:	f04a                	c.sdsp	s2,32(sp)
      : _M_pi(__r._M_pi)
   18cf2:	f402                	c.sdsp	zero,40(sp)
      : sec(sec), pos(sec->begin + offset) {}
   18cf4:	00893603          	ld	a2,8(s2)
   18cf8:	f832                	c.sdsp	a2,48(sp)
      { return _M_ptr; }
   18cfa:	87ca                	c.mv	a5,s2
  while (!infocur.end()) {
   18cfc:	01093703          	ld	a4,16(s2)
   18d00:	d4e66ae3          	bltu	a2,a4,18a54 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5b8>
   18d04:	bdf1                	c.j	18be0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x744>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18d06:	e452                	c.sdsp	s4,8(sp)
      : _M_pi(__r._M_pi)
   18d08:	e802                	c.sdsp	zero,16(sp)
   18d0a:	008a3783          	ld	a5,8(s4)
   18d0e:	ec3e                	c.sdsp	a5,24(sp)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   18d10:	67a2                	c.ldsp	a5,8(sp)
   18d12:	6b98                	c.ld	a4,16(a5)
   18d14:	67e2                	c.ldsp	a5,24(sp)
   18d16:	40f70633          	sub	a2,a4,a5
   18d1a:	468d                	c.li	a3,3
   18d1c:	00c6f463          	bgeu	a3,a2,18d24 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x888>
   18d20:	a6e7e3e3          	bltu	a5,a4,18786 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2ea>
      underflow();
   18d24:	0028                	c.addi4spn	a0,sp,8
   18d26:	1ad020ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
   18d2a:	bcb1                	c.j	18786 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2ea>

0000000000018d2c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)>:
type_unit::type_unit(const dwarf &file, section_offset offset) {
   18d2c:	7115                	c.addi16sp	sp,-224
   18d2e:	ed86                	c.sdsp	ra,216(sp)
   18d30:	e9a2                	c.sdsp	s0,208(sp)
   18d32:	e5a6                	c.sdsp	s1,200(sp)
   18d34:	e1ca                	c.sdsp	s2,192(sp)
   18d36:	fd4e                	c.sdsp	s3,184(sp)
   18d38:	f952                	c.sdsp	s4,176(sp)
   18d3a:	f556                	c.sdsp	s5,168(sp)
   18d3c:	f15a                	c.sdsp	s6,160(sp)
   18d3e:	ed5e                	c.sdsp	s7,152(sp)
   18d40:	e962                	c.sdsp	s8,144(sp)
   18d42:	892a                	c.mv	s2,a0
   18d44:	89ae                	c.mv	s3,a1
   18d46:	8a32                	c.mv	s4,a2
      : _M_ptr(0), _M_refcount()
   18d48:	00053423          	sd	zero,8(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   18d4c:	00053823          	sd	zero,16(a0)
   18d50:	00021797          	auipc	a5,0x21
   18d54:	6207b783          	ld	a5,1568(a5) # 3a370 <vtable for dwarf::type_unit@@Base+0xa00>
   18d58:	07c1                	c.addi	a5,16
   18d5a:	e11c                	c.sd	a5,0(a0)
  cursor cur(file.get_section(section_type::types), offset);
   18d5c:	462d                	c.li	a2,11
   18d5e:	0108                	c.addi4spn	a0,sp,128
   18d60:	de5fe0ef          	jal	ra,17b44 <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18d64:	678a                	c.ldsp	a5,128(sp)
   18d66:	e83e                	c.sdsp	a5,16(sp)
      : _M_pi(__r._M_pi)
   18d68:	652a                	c.ldsp	a0,136(sp)
   18d6a:	ec2a                	c.sdsp	a0,24(sp)
	if (_M_pi != nullptr)
   18d6c:	c919                	c.beqz	a0,18d82 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x56>
    if (__is_single_threaded())
   18d6e:	00021797          	auipc	a5,0x21
   18d72:	72a7b783          	ld	a5,1834(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18d76:	0007c783          	lbu	a5,0(a5)
   18d7a:	cf8d                	c.beqz	a5,18db4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x88>
  { *__mem += __val; }
   18d7c:	591c                	c.lw	a5,48(a0)
   18d7e:	2785                	c.addiw	a5,1
   18d80:	d91c                	c.sw	a5,48(a0)
      : sec(sec), pos(sec->begin + offset) {}
   18d82:	678a                	c.ldsp	a5,128(sp)
   18d84:	679c                	c.ld	a5,8(a5)
   18d86:	97d2                	c.add	a5,s4
   18d88:	f03e                	c.sdsp	a5,32(sp)
	if (_M_pi != nullptr)
   18d8a:	642a                	c.ldsp	s0,136(sp)
   18d8c:	cc19                	c.beqz	s0,18daa <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x7e>
    if (__is_single_threaded())
   18d8e:	00021797          	auipc	a5,0x21
   18d92:	70a7b783          	ld	a5,1802(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18d96:	0007c783          	lbu	a5,0(a5)
   18d9a:	c39d                	c.beqz	a5,18dc0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x94>
    _Atomic_word __result = *__mem;
   18d9c:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   18d9e:	fff5079b          	addiw	a5,a0,-1
   18da2:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18da4:	4785                	c.li	a5,1
   18da6:	02f50363          	beq	a0,a5,18dcc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xa0>
  std::shared_ptr<section> subsec = cur.subsection();
   18daa:	080c                	c.addi4spn	a1,sp,16
   18dac:	850a                	c.mv	a0,sp
   18dae:	4b5020ef          	jal	ra,1ba62 <dwarf::cursor::subsection()>
   18db2:	a8a1                	c.j	18e0a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xde>
      __atomic_add(__mem, __val);
   18db4:	4585                	c.li	a1,1
   18db6:	03050513          	addi	a0,a0,48
   18dba:	ff6fd0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18dbe:	b7d1                	c.j	18d82 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x56>
      return __exchange_and_add(__mem, __val);
   18dc0:	55fd                	c.li	a1,-1
   18dc2:	03040513          	addi	a0,s0,48
   18dc6:	82bfd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18dca:	bfe9                	c.j	18da4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x78>
	_M_dispose();
   18dcc:	601c                	c.ld	a5,0(s0)
   18dce:	6b9c                	c.ld	a5,16(a5)
   18dd0:	8522                	c.mv	a0,s0
   18dd2:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18dd4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18dd8:	00021797          	auipc	a5,0x21
   18ddc:	6c07b783          	ld	a5,1728(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18de0:	0007c783          	lbu	a5,0(a5)
   18de4:	cf89                	c.beqz	a5,18dfe <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xd2>
    _Atomic_word __result = *__mem;
   18de6:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18de8:	fff5079b          	addiw	a5,a0,-1
   18dec:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18dee:	4785                	c.li	a5,1
   18df0:	faf51de3          	bne	a0,a5,18daa <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x7e>
	    _M_destroy();
   18df4:	601c                	c.ld	a5,0(s0)
   18df6:	6f9c                	c.ld	a5,24(a5)
   18df8:	8522                	c.mv	a0,s0
   18dfa:	9782                	c.jalr	a5
   18dfc:	b77d                	c.j	18daa <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x7e>
      return __exchange_and_add(__mem, __val);
   18dfe:	55fd                	c.li	a1,-1
   18e00:	03440513          	addi	a0,s0,52
   18e04:	fecfd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18e08:	b7dd                	c.j	18dee <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xc2>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18e0a:	6482                	c.ldsp	s1,0(sp)
      : _M_pi(__r._M_pi)
   18e0c:	6422                	c.ldsp	s0,8(sp)
	if (_M_pi != nullptr)
   18e0e:	56040463          	beq	s0,zero,19376 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x64a>
    if (__is_single_threaded())
   18e12:	00021797          	auipc	a5,0x21
   18e16:	6867b783          	ld	a5,1670(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18e1a:	0007c783          	lbu	a5,0(a5)
   18e1e:	cbad                	c.beqz	a5,18e90 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x164>
  { *__mem += __val; }
   18e20:	581c                	c.lw	a5,48(s0)
   18e22:	2785                	c.addiw	a5,1
   18e24:	d81c                	c.sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18e26:	f426                	c.sdsp	s1,40(sp)
      : _M_pi(__r._M_pi)
   18e28:	f822                	c.sdsp	s0,48(sp)
    if (__is_single_threaded())
   18e2a:	00021797          	auipc	a5,0x21
   18e2e:	66e7b783          	ld	a5,1646(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18e32:	0007c783          	lbu	a5,0(a5)
   18e36:	c3bd                	c.beqz	a5,18e9c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x170>
  { *__mem += __val; }
   18e38:	581c                	c.lw	a5,48(s0)
   18e3a:	2785                	c.addiw	a5,1
   18e3c:	d81c                	c.sw	a5,48(s0)
   18e3e:	649c                	c.ld	a5,8(s1)
   18e40:	fc3e                	c.sdsp	a5,56(sp)
    if (__is_single_threaded())
   18e42:	00021797          	auipc	a5,0x21
   18e46:	6567b783          	ld	a5,1622(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18e4a:	0007c783          	lbu	a5,0(a5)
   18e4e:	cfa9                	c.beqz	a5,18ea8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x17c>
    _Atomic_word __result = *__mem;
   18e50:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   18e52:	fff5079b          	addiw	a5,a0,-1
   18e56:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18e58:	4785                	c.li	a5,1
   18e5a:	52f51263          	bne	a0,a5,1937e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x652>
	_M_dispose();
   18e5e:	601c                	c.ld	a5,0(s0)
   18e60:	6b9c                	c.ld	a5,16(a5)
   18e62:	8522                	c.mv	a0,s0
   18e64:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18e66:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18e6a:	00021797          	auipc	a5,0x21
   18e6e:	62e7b783          	ld	a5,1582(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18e72:	0007c783          	lbu	a5,0(a5)
   18e76:	cf9d                	c.beqz	a5,18eb4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x188>
    _Atomic_word __result = *__mem;
   18e78:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18e7a:	fff5079b          	addiw	a5,a0,-1
   18e7e:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18e80:	4785                	c.li	a5,1
   18e82:	4ef51e63          	bne	a0,a5,1937e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x652>
	    _M_destroy();
   18e86:	601c                	c.ld	a5,0(s0)
   18e88:	6f9c                	c.ld	a5,24(a5)
   18e8a:	8522                	c.mv	a0,s0
   18e8c:	9782                	c.jalr	a5
   18e8e:	a9c5                	c.j	1937e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x652>
      __atomic_add(__mem, __val);
   18e90:	4585                	c.li	a1,1
   18e92:	03040513          	addi	a0,s0,48
   18e96:	f1afd0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18e9a:	b771                	c.j	18e26 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xfa>
   18e9c:	4585                	c.li	a1,1
   18e9e:	03040513          	addi	a0,s0,48
   18ea2:	f0efd0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18ea6:	bf61                	c.j	18e3e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x112>
      return __exchange_and_add(__mem, __val);
   18ea8:	55fd                	c.li	a1,-1
   18eaa:	03040513          	addi	a0,s0,48
   18eae:	f42fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18eb2:	b75d                	c.j	18e58 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x12c>
   18eb4:	55fd                	c.li	a1,-1
   18eb6:	03440513          	addi	a0,s0,52
   18eba:	f36fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18ebe:	b7c9                	c.j	18e80 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x154>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   18ec0:	77a2                	c.ldsp	a5,40(sp)
   18ec2:	6b98                	c.ld	a4,16(a5)
   18ec4:	77e2                	c.ldsp	a5,56(sp)
   18ec6:	40f70633          	sub	a2,a4,a5
   18eca:	4685                	c.li	a3,1
   18ecc:	00c6f463          	bgeu	a3,a2,18ed4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1a8>
   18ed0:	00e7e563          	bltu	a5,a4,18eda <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1ae>
      underflow();
   18ed4:	1028                	c.addi4spn	a0,sp,40
   18ed6:	7fc020ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   18eda:	7762                	c.ldsp	a4,56(sp)
    if (sec->ord == byte_order::lsb) {
   18edc:	77a2                	c.ldsp	a5,40(sp)
   18ede:	4fdc                	c.lw	a5,28(a5)
   18ee0:	e39d                	c.bnez	a5,18f06 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1da>
        val |= ((uint64_t)p[i]) << (i * 8);
   18ee2:	00174783          	lbu	a5,1(a4)
   18ee6:	07a2                	c.slli	a5,0x8
   18ee8:	00074683          	lbu	a3,0(a4)
   18eec:	8fd5                	c.or	a5,a3
    pos += sizeof(T);
   18eee:	0709                	c.addi	a4,2
   18ef0:	fc3a                	c.sdsp	a4,56(sp)
    return (T)val;
   18ef2:	03079413          	slli	s0,a5,0x30
   18ef6:	9041                	c.srli	s0,0x30
  if (version != 4)
   18ef8:	4711                	c.li	a4,4
   18efa:	00e79d63          	bne	a5,a4,18f14 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1e8>
  section_offset debug_abbrev_offset = sub.offset();
   18efe:	1028                	c.addi4spn	a0,sp,40
   18f00:	4f9020ef          	jal	ra,1bbf8 <dwarf::cursor::offset()>
   18f04:	a061                	c.j	18f8c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x260>
        val = (val << 8) | (uint64_t)p[i];
   18f06:	00074783          	lbu	a5,0(a4)
   18f0a:	07a2                	c.slli	a5,0x8
   18f0c:	00174683          	lbu	a3,1(a4)
   18f10:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   18f12:	bff1                	c.j	18eee <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1c2>
    throw format_error("unknown type unit version " + std::to_string(version));
   18f14:	4541                	c.li	a0,16
   18f16:	f7afd0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   18f1a:	84aa                	c.mv	s1,a0
   18f1c:	85a2                	c.mv	a1,s0
   18f1e:	1080                	c.addi4spn	s0,sp,96
   18f20:	8522                	c.mv	a0,s0
   18f22:	00021317          	auipc	t1,0x21
   18f26:	58633303          	ld	t1,1414(t1) # 3a4a8 <std::__cxx11::to_string(int)@@Base+0x2018e>
   18f2a:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   18f2c:	00015617          	auipc	a2,0x15
   18f30:	e6460613          	addi	a2,a2,-412 # 2dd90 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xc0>
   18f34:	4581                	c.li	a1,0
   18f36:	8522                	c.mv	a0,s0
   18f38:	ec8fd0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   18f3c:	85aa                	c.mv	a1,a0
   18f3e:	0080                	c.addi4spn	s0,sp,64
   18f40:	8522                	c.mv	a0,s0
   18f42:	f8efd0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   18f46:	85a2                	c.mv	a1,s0
   18f48:	8526                	c.mv	a0,s1
   18f4a:	8e7fd0ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   18f4e:	00021797          	auipc	a5,0x21
   18f52:	6227b783          	ld	a5,1570(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   18f56:	07c1                	c.addi	a5,16
   18f58:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   18f5a:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   18f5c:	089c                	c.addi4spn	a5,sp,80
   18f5e:	00f50463          	beq	a0,a5,18f66 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x23a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   18f62:	83ffd0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   18f66:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   18f68:	189c                	c.addi4spn	a5,sp,112
   18f6a:	00f50463          	beq	a0,a5,18f72 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x246>
   18f6e:	833fd0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   18f72:	00021617          	auipc	a2,0x21
   18f76:	42663603          	ld	a2,1062(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   18f7a:	00021597          	auipc	a1,0x21
   18f7e:	34e5b583          	ld	a1,846(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   18f82:	8526                	c.mv	a0,s1
   18f84:	9ddfd0ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   18f88:	842a                	c.mv	s0,a0
   18f8a:	a659                	c.j	19310 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5e4>
  section_offset debug_abbrev_offset = sub.offset();
   18f8c:	8aaa                	c.mv	s5,a0
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   18f8e:	77a2                	c.ldsp	a5,40(sp)
   18f90:	6b98                	c.ld	a4,16(a5)
   18f92:	77e2                	c.ldsp	a5,56(sp)
   18f94:	00e7e563          	bltu	a5,a4,18f9e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x272>
      underflow();
   18f98:	1028                	c.addi4spn	a0,sp,40
   18f9a:	738020ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   18f9e:	77e2                	c.ldsp	a5,56(sp)
      { return _M_ptr; }
   18fa0:	7722                	c.ldsp	a4,40(sp)
    if (sec->ord == byte_order::lsb) {
   18fa2:	4f54                	c.lw	a3,28(a4)
   18fa4:	3a068763          	beq	a3,zero,19352 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x626>
        val = (val << 8) | (uint64_t)p[i];
   18fa8:	0007c603          	lbu	a2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   18fac:	a66d                	c.j	19356 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x62a>
    const unsigned char *p = (const unsigned char *)pos;
   18fae:	7662                	c.ldsp	a2,56(sp)
    if (sec->ord == byte_order::lsb) {
   18fb0:	77a2                	c.ldsp	a5,40(sp)
   18fb2:	4fdc                	c.lw	a5,28(a5)
   18fb4:	e785                	c.bnez	a5,18fdc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x2b0>
   18fb6:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   18fb8:	4481                	c.li	s1,0
      for (unsigned i = 0; i < sizeof(T); i++)
   18fba:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   18fbe:	0006c703          	lbu	a4,0(a3)
   18fc2:	00f71733          	sll	a4,a4,a5
   18fc6:	8cd9                	c.or	s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   18fc8:	0685                	c.addi	a3,1
   18fca:	27a1                	c.addiw	a5,8
   18fcc:	feb799e3          	bne	a5,a1,18fbe <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x292>
    pos += sizeof(T);
   18fd0:	0621                	c.addi	a2,8
   18fd2:	fc32                	c.sdsp	a2,56(sp)
  section_offset type_offset = sub.offset();
   18fd4:	1028                	c.addi4spn	a0,sp,40
   18fd6:	423020ef          	jal	ra,1bbf8 <dwarf::cursor::offset()>
   18fda:	a829                	c.j	18ff4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x2c8>
   18fdc:	87b2                	c.mv	a5,a2
   18fde:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   18fe2:	4481                	c.li	s1,0
        val = (val << 8) | (uint64_t)p[i];
   18fe4:	04a2                	c.slli	s1,0x8
   18fe6:	0007c703          	lbu	a4,0(a5)
   18fea:	8cd9                	c.or	s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   18fec:	0785                	c.addi	a5,1
   18fee:	fef69be3          	bne	a3,a5,18fe4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x2b8>
   18ff2:	bff9                	c.j	18fd0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x2a4>
   18ff4:	8b2a                	c.mv	s6,a0
  section_offset get_section_offset() const { return pos - sec->begin; }
   18ff6:	77a2                	c.ldsp	a5,40(sp)
   18ff8:	679c                	c.ld	a5,8(a5)
   18ffa:	7be2                	c.ldsp	s7,56(sp)
   18ffc:	40fb8bb3          	sub	s7,s7,a5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   19000:	1c800513          	addi	a0,zero,456
   19004:	facfd0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   19008:	842a                	c.mv	s0,a0
   1900a:	00052423          	sw	zero,8(a0)
   1900e:	00052623          	sw	zero,12(a0)
   19012:	00052823          	sw	zero,16(a0)
   19016:	00052a23          	sw	zero,20(a0)
   1901a:	00052c23          	sw	zero,24(a0)
   1901e:	00052e23          	sw	zero,28(a0)
   19022:	02053023          	sd	zero,32(a0)
   19026:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   1902a:	4785                	c.li	a5,1
   1902c:	d91c                	c.sw	a5,48(a0)
   1902e:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   19030:	00021797          	auipc	a5,0x21
   19034:	4207b783          	ld	a5,1056(a5) # 3a450 <vtable for std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xa50>
   19038:	07c1                	c.addi	a5,16
   1903a:	e11c                	c.sd	a5,0(a0)
   1903c:	03850c13          	addi	s8,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   19040:	0009b783          	ld	a5,0(s3)
   19044:	fd1c                	c.sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   19046:	0089b503          	ld	a0,8(s3)
   1904a:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   1904c:	cd01                	c.beqz	a0,19064 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x338>
    if (__is_single_threaded())
   1904e:	00021797          	auipc	a5,0x21
   19052:	44a7b783          	ld	a5,1098(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19056:	0007c783          	lbu	a5,0(a5)
   1905a:	14078b63          	beq	a5,zero,191b0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x484>
  { *__mem += __val; }
   1905e:	591c                	c.lw	a5,48(a0)
   19060:	2785                	c.addiw	a5,1
   19062:	d91c                	c.sw	a5,48(a0)
      : file(file), offset(offset), subsec(subsec),
   19064:	05443423          	sd	s4,72(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   19068:	6782                	c.ldsp	a5,0(sp)
   1906a:	e83c                	c.sd	a5,80(s0)
      : _M_pi(__r._M_pi)
   1906c:	6522                	c.ldsp	a0,8(sp)
   1906e:	ec28                	c.sd	a0,88(s0)
	if (_M_pi != nullptr)
   19070:	cd01                	c.beqz	a0,19088 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x35c>
    if (__is_single_threaded())
   19072:	00021797          	auipc	a5,0x21
   19076:	4267b783          	ld	a5,1062(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1907a:	0007c783          	lbu	a5,0(a5)
   1907e:	12078f63          	beq	a5,zero,191bc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x490>
  { *__mem += __val; }
   19082:	591c                	c.lw	a5,48(a0)
   19084:	2785                	c.addiw	a5,1
   19086:	d91c                	c.sw	a5,48(a0)
        debug_abbrev_offset(debug_abbrev_offset), root_offset(root_offset),
   19088:	07543023          	sd	s5,96(s0)
   1908c:	07743423          	sd	s7,104(s0)
        type_signature(type_signature), type_offset(type_offset),
   19090:	f824                	c.sd	s1,112(s0)
   19092:	07643c23          	sd	s6,120(s0)
  die() : cu(nullptr), abbrev(nullptr) {}
   19096:	08043423          	sd	zero,136(s0)
   1909a:	08043823          	sd	zero,144(s0)
   1909e:	0a040793          	addi	a5,s0,160
   190a2:	e87c                	c.sd	a5,208(s0)
   190a4:	ec7c                	c.sd	a5,216(s0)
   190a6:	0d040793          	addi	a5,s0,208
   190aa:	f07c                	c.sd	a5,224(s0)
   190ac:	0e043c23          	sd	zero,248(s0)
   190b0:	10043023          	sd	zero,256(s0)
   190b4:	11040793          	addi	a5,s0,272
   190b8:	14f43023          	sd	a5,320(s0)
   190bc:	14f43423          	sd	a5,328(s0)
   190c0:	14040793          	addi	a5,s0,320
   190c4:	14f43823          	sd	a5,336(s0)
      : _M_ptr(0), _M_refcount()
   190c8:	16043023          	sd	zero,352(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   190cc:	16043423          	sd	zero,360(s0)
        have_abbrevs(false) {}
   190d0:	16040823          	sb	zero,368(s0)
   190d4:	16043c23          	sd	zero,376(s0)
   190d8:	18043023          	sd	zero,384(s0)
   190dc:	18043423          	sd	zero,392(s0)
   190e0:	1c040793          	addi	a5,s0,448
   190e4:	18f43823          	sd	a5,400(s0)
   190e8:	4785                	c.li	a5,1
   190ea:	18f43c23          	sd	a5,408(s0)
    _Hash_node_base() noexcept : _M_nxt() { }
   190ee:	1a043023          	sd	zero,416(s0)
   190f2:	1a043423          	sd	zero,424(s0)
    : _M_max_load_factor(__z), _M_next_resize(0) { }
   190f6:	00015797          	auipc	a5,0x15
   190fa:	f227a787          	flw	fa5,-222(a5) # 2e018 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xf0>
   190fe:	1af42827          	fsw	fa5,432(s0)
   19102:	1a043c23          	sd	zero,440(s0)
   19106:	1c043023          	sd	zero,448(s0)
   1910a:	01893423          	sd	s8,8(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1910e:	01093483          	ld	s1,16(s2)
	__r._M_pi = _M_pi;
   19112:	00893823          	sd	s0,16(s2)
	if (_M_pi != nullptr)
   19116:	cc99                	c.beqz	s1,19134 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x408>
    if (__is_single_threaded())
   19118:	00021797          	auipc	a5,0x21
   1911c:	3807b783          	ld	a5,896(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19120:	0007c783          	lbu	a5,0(a5)
   19124:	c3d5                	c.beqz	a5,191c8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x49c>
    _Atomic_word __result = *__mem;
   19126:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   19128:	fff5079b          	addiw	a5,a0,-1
   1912c:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1912e:	4785                	c.li	a5,1
   19130:	0af50263          	beq	a0,a5,191d4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4a8>
	if (_M_pi != nullptr)
   19134:	7442                	c.ldsp	s0,48(sp)
   19136:	cc19                	c.beqz	s0,19154 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x428>
    if (__is_single_threaded())
   19138:	00021797          	auipc	a5,0x21
   1913c:	3607b783          	ld	a5,864(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19140:	0007c783          	lbu	a5,0(a5)
   19144:	c7f9                	c.beqz	a5,19212 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4e6>
    _Atomic_word __result = *__mem;
   19146:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   19148:	fff5079b          	addiw	a5,a0,-1
   1914c:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1914e:	4785                	c.li	a5,1
   19150:	0cf50763          	beq	a0,a5,1921e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4f2>
	if (_M_pi != nullptr)
   19154:	6422                	c.ldsp	s0,8(sp)
   19156:	c005                	c.beqz	s0,19176 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x44a>
    if (__is_single_threaded())
   19158:	00021797          	auipc	a5,0x21
   1915c:	3407b783          	ld	a5,832(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19160:	0007c783          	lbu	a5,0(a5)
   19164:	0e078c63          	beq	a5,zero,1925c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x530>
    _Atomic_word __result = *__mem;
   19168:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1916a:	fff5079b          	addiw	a5,a0,-1
   1916e:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19170:	4785                	c.li	a5,1
   19172:	0ef50b63          	beq	a0,a5,19268 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x53c>
	if (_M_pi != nullptr)
   19176:	6462                	c.ldsp	s0,24(sp)
   19178:	c005                	c.beqz	s0,19198 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x46c>
    if (__is_single_threaded())
   1917a:	00021797          	auipc	a5,0x21
   1917e:	31e7b783          	ld	a5,798(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19182:	0007c783          	lbu	a5,0(a5)
   19186:	12078063          	beq	a5,zero,192a6 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x57a>
    _Atomic_word __result = *__mem;
   1918a:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1918c:	fff5079b          	addiw	a5,a0,-1
   19190:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19192:	4785                	c.li	a5,1
   19194:	10f50f63          	beq	a0,a5,192b2 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x586>
}
   19198:	60ee                	c.ldsp	ra,216(sp)
   1919a:	644e                	c.ldsp	s0,208(sp)
   1919c:	64ae                	c.ldsp	s1,200(sp)
   1919e:	690e                	c.ldsp	s2,192(sp)
   191a0:	79ea                	c.ldsp	s3,184(sp)
   191a2:	7a4a                	c.ldsp	s4,176(sp)
   191a4:	7aaa                	c.ldsp	s5,168(sp)
   191a6:	7b0a                	c.ldsp	s6,160(sp)
   191a8:	6bea                	c.ldsp	s7,152(sp)
   191aa:	6c4a                	c.ldsp	s8,144(sp)
   191ac:	612d                	c.addi16sp	sp,224
   191ae:	8082                	c.jr	ra
      __atomic_add(__mem, __val);
   191b0:	4585                	c.li	a1,1
   191b2:	03050513          	addi	a0,a0,48
   191b6:	bfafd0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   191ba:	b56d                	c.j	19064 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x338>
   191bc:	4585                	c.li	a1,1
   191be:	03050513          	addi	a0,a0,48
   191c2:	beefd0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   191c6:	b5c9                	c.j	19088 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x35c>
      return __exchange_and_add(__mem, __val);
   191c8:	55fd                	c.li	a1,-1
   191ca:	03048513          	addi	a0,s1,48
   191ce:	c22fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   191d2:	bfb1                	c.j	1912e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x402>
	_M_dispose();
   191d4:	609c                	c.ld	a5,0(s1)
   191d6:	6b9c                	c.ld	a5,16(a5)
   191d8:	8526                	c.mv	a0,s1
   191da:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   191dc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   191e0:	00021797          	auipc	a5,0x21
   191e4:	2b87b783          	ld	a5,696(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   191e8:	0007c783          	lbu	a5,0(a5)
   191ec:	cf89                	c.beqz	a5,19206 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4da>
    _Atomic_word __result = *__mem;
   191ee:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   191f0:	fff5079b          	addiw	a5,a0,-1
   191f4:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   191f6:	4785                	c.li	a5,1
   191f8:	f2f51ee3          	bne	a0,a5,19134 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x408>
	    _M_destroy();
   191fc:	609c                	c.ld	a5,0(s1)
   191fe:	6f9c                	c.ld	a5,24(a5)
   19200:	8526                	c.mv	a0,s1
   19202:	9782                	c.jalr	a5
   19204:	bf05                	c.j	19134 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x408>
      return __exchange_and_add(__mem, __val);
   19206:	55fd                	c.li	a1,-1
   19208:	03448513          	addi	a0,s1,52
   1920c:	be4fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19210:	b7dd                	c.j	191f6 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4ca>
   19212:	55fd                	c.li	a1,-1
   19214:	03040513          	addi	a0,s0,48
   19218:	bd8fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1921c:	bf0d                	c.j	1914e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x422>
	_M_dispose();
   1921e:	601c                	c.ld	a5,0(s0)
   19220:	6b9c                	c.ld	a5,16(a5)
   19222:	8522                	c.mv	a0,s0
   19224:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19226:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1922a:	00021797          	auipc	a5,0x21
   1922e:	26e7b783          	ld	a5,622(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19232:	0007c783          	lbu	a5,0(a5)
   19236:	cf89                	c.beqz	a5,19250 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x524>
    _Atomic_word __result = *__mem;
   19238:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1923a:	fff5079b          	addiw	a5,a0,-1
   1923e:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19240:	4785                	c.li	a5,1
   19242:	f0f519e3          	bne	a0,a5,19154 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x428>
	    _M_destroy();
   19246:	601c                	c.ld	a5,0(s0)
   19248:	6f9c                	c.ld	a5,24(a5)
   1924a:	8522                	c.mv	a0,s0
   1924c:	9782                	c.jalr	a5
   1924e:	b719                	c.j	19154 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x428>
      return __exchange_and_add(__mem, __val);
   19250:	55fd                	c.li	a1,-1
   19252:	03440513          	addi	a0,s0,52
   19256:	b9afd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1925a:	b7dd                	c.j	19240 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x514>
   1925c:	55fd                	c.li	a1,-1
   1925e:	03040513          	addi	a0,s0,48
   19262:	b8efd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19266:	b729                	c.j	19170 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x444>
	_M_dispose();
   19268:	601c                	c.ld	a5,0(s0)
   1926a:	6b9c                	c.ld	a5,16(a5)
   1926c:	8522                	c.mv	a0,s0
   1926e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19270:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19274:	00021797          	auipc	a5,0x21
   19278:	2247b783          	ld	a5,548(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1927c:	0007c783          	lbu	a5,0(a5)
   19280:	cf89                	c.beqz	a5,1929a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x56e>
    _Atomic_word __result = *__mem;
   19282:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   19284:	fff5079b          	addiw	a5,a0,-1
   19288:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1928a:	4785                	c.li	a5,1
   1928c:	eef515e3          	bne	a0,a5,19176 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x44a>
	    _M_destroy();
   19290:	601c                	c.ld	a5,0(s0)
   19292:	6f9c                	c.ld	a5,24(a5)
   19294:	8522                	c.mv	a0,s0
   19296:	9782                	c.jalr	a5
   19298:	bdf9                	c.j	19176 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x44a>
      return __exchange_and_add(__mem, __val);
   1929a:	55fd                	c.li	a1,-1
   1929c:	03440513          	addi	a0,s0,52
   192a0:	b50fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   192a4:	b7dd                	c.j	1928a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x55e>
   192a6:	55fd                	c.li	a1,-1
   192a8:	03040513          	addi	a0,s0,48
   192ac:	b44fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   192b0:	b5cd                	c.j	19192 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x466>
	_M_dispose();
   192b2:	601c                	c.ld	a5,0(s0)
   192b4:	6b9c                	c.ld	a5,16(a5)
   192b6:	8522                	c.mv	a0,s0
   192b8:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   192ba:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   192be:	00021797          	auipc	a5,0x21
   192c2:	1da7b783          	ld	a5,474(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   192c6:	0007c783          	lbu	a5,0(a5)
   192ca:	cf89                	c.beqz	a5,192e4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5b8>
    _Atomic_word __result = *__mem;
   192cc:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   192ce:	fff5079b          	addiw	a5,a0,-1
   192d2:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   192d4:	4785                	c.li	a5,1
   192d6:	ecf511e3          	bne	a0,a5,19198 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x46c>
	    _M_destroy();
   192da:	601c                	c.ld	a5,0(s0)
   192dc:	6f9c                	c.ld	a5,24(a5)
   192de:	8522                	c.mv	a0,s0
   192e0:	9782                	c.jalr	a5
   192e2:	bd5d                	c.j	19198 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x46c>
      return __exchange_and_add(__mem, __val);
   192e4:	55fd                	c.li	a1,-1
   192e6:	03440513          	addi	a0,s0,52
   192ea:	b06fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   192ee:	b7dd                	c.j	192d4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5a8>
      { return _M_dataplus._M_p; }
   192f0:	842a                	c.mv	s0,a0
   192f2:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   192f4:	089c                	c.addi4spn	a5,sp,80
   192f6:	00f50463          	beq	a0,a5,192fe <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5d2>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   192fa:	ca6fd0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   192fe:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   19300:	189c                	c.addi4spn	a5,sp,112
   19302:	00f50463          	beq	a0,a5,1930a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5de>
   19306:	c9afd0ef          	jal	ra,167a0 <operator delete(void*)@plt>
    throw format_error("unknown type unit version " + std::to_string(version));
   1930a:	8526                	c.mv	a0,s1
   1930c:	c44fd0ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   19310:	7542                	c.ldsp	a0,48(sp)
   19312:	c511                	c.beqz	a0,1931e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5f2>
	  _M_pi->_M_release();
   19314:	00021317          	auipc	t1,0x21
   19318:	0cc33303          	ld	t1,204(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   1931c:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   1931e:	6522                	c.ldsp	a0,8(sp)
   19320:	c511                	c.beqz	a0,1932c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x600>
	  _M_pi->_M_release();
   19322:	00021317          	auipc	t1,0x21
   19326:	0be33303          	ld	t1,190(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   1932a:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   1932c:	6562                	c.ldsp	a0,24(sp)
   1932e:	c511                	c.beqz	a0,1933a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x60e>
	  _M_pi->_M_release();
   19330:	00021317          	auipc	t1,0x21
   19334:	0b033303          	ld	t1,176(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   19338:	9302                	c.jalr	t1
}
   1933a:	854a                	c.mv	a0,s2
   1933c:	f54fe0ef          	jal	ra,17a90 <dwarf::unit::~unit()>
   19340:	8522                	c.mv	a0,s0
   19342:	e4efd0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   19346:	842a                	c.mv	s0,a0
   19348:	bf5d                	c.j	192fe <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5d2>
	if (_M_pi != nullptr)
   1934a:	842a                	c.mv	s0,a0
   1934c:	b7c5                	c.j	1932c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x600>
   1934e:	842a                	c.mv	s0,a0
   19350:	b7ed                	c.j	1933a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x60e>
        val |= ((uint64_t)p[i]) << (i * 8);
   19352:	0007c603          	lbu	a2,0(a5)
    pos += sizeof(T);
   19356:	0785                	c.addi	a5,1
   19358:	fc3e                	c.sdsp	a5,56(sp)
  subsec->addr_size = address_size;
   1935a:	6682                	c.ldsp	a3,0(sp)
   1935c:	d290                	c.sw	a2,32(a3)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1935e:	6b18                	c.ld	a4,16(a4)
   19360:	40f70633          	sub	a2,a4,a5
   19364:	469d                	c.li	a3,7
   19366:	00c6f463          	bgeu	a3,a2,1936e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x642>
   1936a:	c4e7e2e3          	bltu	a5,a4,18fae <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x282>
      underflow();
   1936e:	1028                	c.addi4spn	a0,sp,40
   19370:	362020ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
   19374:	b92d                	c.j	18fae <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x282>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   19376:	f426                	c.sdsp	s1,40(sp)
      : _M_pi(__r._M_pi)
   19378:	f802                	c.sdsp	zero,48(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1937a:	649c                	c.ld	a5,8(s1)
   1937c:	fc3e                	c.sdsp	a5,56(sp)
  sub.skip_initial_length();
   1937e:	1028                	c.addi4spn	a0,sp,40
   19380:	23e020ef          	jal	ra,1b5be <dwarf::cursor::skip_initial_length()>
   19384:	be35                	c.j	18ec0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x194>

0000000000019386 <dwarf::dwarf::get_type_unit(unsigned long) const>:
const type_unit &dwarf::get_type_unit(uint64_t type_signature) const {
   19386:	7115                	c.addi16sp	sp,-224
   19388:	ed86                	c.sdsp	ra,216(sp)
   1938a:	e9a2                	c.sdsp	s0,208(sp)
   1938c:	e5a6                	c.sdsp	s1,200(sp)
   1938e:	e1ca                	c.sdsp	s2,192(sp)
   19390:	fd4e                	c.sdsp	s3,184(sp)
   19392:	f952                	c.sdsp	s4,176(sp)
   19394:	f556                	c.sdsp	s5,168(sp)
   19396:	f15a                	c.sdsp	s6,160(sp)
   19398:	ed5e                	c.sdsp	s7,152(sp)
   1939a:	e962                	c.sdsp	s8,144(sp)
   1939c:	e566                	c.sdsp	s9,136(sp)
   1939e:	e16a                	c.sdsp	s10,128(sp)
   193a0:	892a                	c.mv	s2,a0
   193a2:	e42e                	c.sdsp	a1,8(sp)
  if (!m->have_type_units) {
   193a4:	611c                	c.ld	a5,0(a0)
   193a6:	0807c783          	lbu	a5,128(a5)
   193aa:	24079663          	bne	a5,zero,195f6 <dwarf::dwarf::get_type_unit(unsigned long) const+0x270>
    cursor tucur(get_section(section_type::types));
   193ae:	462d                	c.li	a2,11
   193b0:	85aa                	c.mv	a1,a0
   193b2:	08a8                	c.addi4spn	a0,sp,88
   193b4:	f90fe0ef          	jal	ra,17b44 <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   193b8:	67e6                	c.ldsp	a5,88(sp)
   193ba:	ec3e                	c.sdsp	a5,24(sp)
      : _M_pi(__r._M_pi)
   193bc:	7506                	c.ldsp	a0,96(sp)
   193be:	f02a                	c.sdsp	a0,32(sp)
	if (_M_pi != nullptr)
   193c0:	c919                	c.beqz	a0,193d6 <dwarf::dwarf::get_type_unit(unsigned long) const+0x50>
    if (__is_single_threaded())
   193c2:	00021797          	auipc	a5,0x21
   193c6:	0d67b783          	ld	a5,214(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   193ca:	0007c783          	lbu	a5,0(a5)
   193ce:	c3b5                	c.beqz	a5,19432 <dwarf::dwarf::get_type_unit(unsigned long) const+0xac>
  { *__mem += __val; }
   193d0:	591c                	c.lw	a5,48(a0)
   193d2:	2785                	c.addiw	a5,1
   193d4:	d91c                	c.sw	a5,48(a0)
   193d6:	67e6                	c.ldsp	a5,88(sp)
   193d8:	679c                	c.ld	a5,8(a5)
   193da:	f43e                	c.sdsp	a5,40(sp)
	if (_M_pi != nullptr)
   193dc:	7406                	c.ldsp	s0,96(sp)
   193de:	cc19                	c.beqz	s0,193fc <dwarf::dwarf::get_type_unit(unsigned long) const+0x76>
    if (__is_single_threaded())
   193e0:	00021797          	auipc	a5,0x21
   193e4:	0b87b783          	ld	a5,184(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   193e8:	0007c783          	lbu	a5,0(a5)
   193ec:	cba9                	c.beqz	a5,1943e <dwarf::dwarf::get_type_unit(unsigned long) const+0xb8>
    _Atomic_word __result = *__mem;
   193ee:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   193f0:	fff5079b          	addiw	a5,a0,-1
   193f4:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   193f6:	4785                	c.li	a5,1
   193f8:	04f50963          	beq	a0,a5,1944a <dwarf::dwarf::get_type_unit(unsigned long) const+0xc4>
  bool end() const { return pos >= sec->end; }
   193fc:	77a2                	c.ldsp	a5,40(sp)
      { return _M_ptr; }
   193fe:	6762                	c.ldsp	a4,24(sp)
    while (!tucur.end()) {
   19400:	6b14                	c.ld	a3,16(a4)
   19402:	1cd7f563          	bgeu	a5,a3,195cc <dwarf::dwarf::get_type_unit(unsigned long) const+0x246>
      type_unit tu(*this, tucur.get_section_offset());
   19406:	03810993          	addi	s3,sp,56
      operator[](const key_type& __k)
      { return _M_h[__k]; }

      mapped_type&
      operator[](key_type&& __k)
      { return _M_h[std::move(__k)]; }
   1940a:	06810b13          	addi	s6,sp,104
   1940e:	00021b97          	auipc	s7,0x21
   19412:	092bbb83          	ld	s7,146(s7) # 3a4a0 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)@@Base+0x1f228>
    return ::__libc_single_threaded;
   19416:	00021a97          	auipc	s5,0x21
   1941a:	082aba83          	ld	s5,130(s5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
      tucur.subsection();
   1941e:	07010c13          	addi	s8,sp,112
   19422:	01810c93          	addi	s9,sp,24
class type_unit : public unit {
   19426:	00021a17          	auipc	s4,0x21
   1942a:	f4aa3a03          	ld	s4,-182(s4) # 3a370 <vtable for dwarf::type_unit@@Base+0xa00>
   1942e:	0a41                	c.addi	s4,16
   19430:	a289                	c.j	19572 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1ec>
      __atomic_add(__mem, __val);
   19432:	4585                	c.li	a1,1
   19434:	03050513          	addi	a0,a0,48
   19438:	978fd0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1943c:	bf69                	c.j	193d6 <dwarf::dwarf::get_type_unit(unsigned long) const+0x50>
      return __exchange_and_add(__mem, __val);
   1943e:	55fd                	c.li	a1,-1
   19440:	03040513          	addi	a0,s0,48
   19444:	9acfd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19448:	b77d                	c.j	193f6 <dwarf::dwarf::get_type_unit(unsigned long) const+0x70>
	_M_dispose();
   1944a:	601c                	c.ld	a5,0(s0)
   1944c:	6b9c                	c.ld	a5,16(a5)
   1944e:	8522                	c.mv	a0,s0
   19450:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19452:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19456:	00021797          	auipc	a5,0x21
   1945a:	0427b783          	ld	a5,66(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1945e:	0007c783          	lbu	a5,0(a5)
   19462:	cf89                	c.beqz	a5,1947c <dwarf::dwarf::get_type_unit(unsigned long) const+0xf6>
    _Atomic_word __result = *__mem;
   19464:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   19466:	fff5079b          	addiw	a5,a0,-1
   1946a:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1946c:	4785                	c.li	a5,1
   1946e:	f8f517e3          	bne	a0,a5,193fc <dwarf::dwarf::get_type_unit(unsigned long) const+0x76>
	    _M_destroy();
   19472:	601c                	c.ld	a5,0(s0)
   19474:	6f9c                	c.ld	a5,24(a5)
   19476:	8522                	c.mv	a0,s0
   19478:	9782                	c.jalr	a5
   1947a:	b749                	c.j	193fc <dwarf::dwarf::get_type_unit(unsigned long) const+0x76>
      return __exchange_and_add(__mem, __val);
   1947c:	55fd                	c.li	a1,-1
   1947e:	03440513          	addi	a0,s0,52
   19482:	96efd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19486:	b7dd                	c.j	1946c <dwarf::dwarf::get_type_unit(unsigned long) const+0xe6>
      { return _M_ptr; }
   19488:	00093403          	ld	s0,0(s2)
      m->type_units[tu.get_type_signature()] = tu;
   1948c:	854e                	c.mv	a0,s3
   1948e:	eb0fe0ef          	jal	ra,17b3e <dwarf::type_unit::get_type_signature() const>
   19492:	f4aa                	c.sdsp	a0,104(sp)
   19494:	85da                	c.mv	a1,s6
   19496:	04840513          	addi	a0,s0,72
   1949a:	9b82                	c.jalr	s7
   1949c:	842a                	c.mv	s0,a0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   1949e:	6786                	c.ldsp	a5,64(sp)
   194a0:	e51c                	c.sd	a5,8(a0)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   194a2:	64a6                	c.ldsp	s1,72(sp)
	if (__tmp != _M_pi)
   194a4:	691c                	c.ld	a5,16(a0)
   194a6:	02f48763          	beq	s1,a5,194d4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x14e>
	    if (__tmp != nullptr)
   194aa:	cc9d                	c.beqz	s1,194e8 <dwarf::dwarf::get_type_unit(unsigned long) const+0x162>
    if (__is_single_threaded())
   194ac:	000ac783          	lbu	a5,0(s5)
   194b0:	c79d                	c.beqz	a5,194de <dwarf::dwarf::get_type_unit(unsigned long) const+0x158>
  { *__mem += __val; }
   194b2:	589c                	c.lw	a5,48(s1)
   194b4:	2785                	c.addiw	a5,1
   194b6:	d89c                	c.sw	a5,48(s1)
	    if (_M_pi != nullptr)
   194b8:	01053d03          	ld	s10,16(a0)
   194bc:	000d0b63          	beq	s10,zero,194d2 <dwarf::dwarf::get_type_unit(unsigned long) const+0x14c>
    _Atomic_word __result = *__mem;
   194c0:	030d2503          	lw	a0,48(s10)
    *__mem += __val;
   194c4:	fff5079b          	addiw	a5,a0,-1
   194c8:	02fd2823          	sw	a5,48(s10)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   194cc:	4785                	c.li	a5,1
   194ce:	02f50a63          	beq	a0,a5,19502 <dwarf::dwarf::get_type_unit(unsigned long) const+0x17c>
	    _M_pi = __tmp;
   194d2:	e804                	c.sd	s1,16(s0)
      tucur.subsection();
   194d4:	85e6                	c.mv	a1,s9
   194d6:	8562                	c.mv	a0,s8
   194d8:	58a020ef          	jal	ra,1ba62 <dwarf::cursor::subsection()>
   194dc:	a0b5                	c.j	19548 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1c2>
      __atomic_add(__mem, __val);
   194de:	4585                	c.li	a1,1
   194e0:	03048513          	addi	a0,s1,48
   194e4:	8ccfd0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
	    if (_M_pi != nullptr)
   194e8:	01043d03          	ld	s10,16(s0)
   194ec:	fe0d03e3          	beq	s10,zero,194d2 <dwarf::dwarf::get_type_unit(unsigned long) const+0x14c>
    if (__is_single_threaded())
   194f0:	000ac783          	lbu	a5,0(s5)
   194f4:	f7f1                	c.bnez	a5,194c0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x13a>
      return __exchange_and_add(__mem, __val);
   194f6:	55fd                	c.li	a1,-1
   194f8:	030d0513          	addi	a0,s10,48
   194fc:	8f4fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19500:	b7f1                	c.j	194cc <dwarf::dwarf::get_type_unit(unsigned long) const+0x146>
	_M_dispose();
   19502:	000d3783          	ld	a5,0(s10)
   19506:	6b9c                	c.ld	a5,16(a5)
   19508:	856a                	c.mv	a0,s10
   1950a:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1950c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19510:	00021797          	auipc	a5,0x21
   19514:	f887b783          	ld	a5,-120(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19518:	0007c783          	lbu	a5,0(a5)
   1951c:	c385                	c.beqz	a5,1953c <dwarf::dwarf::get_type_unit(unsigned long) const+0x1b6>
    _Atomic_word __result = *__mem;
   1951e:	034d2503          	lw	a0,52(s10)
    *__mem += __val;
   19522:	fff5079b          	addiw	a5,a0,-1
   19526:	02fd2a23          	sw	a5,52(s10)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1952a:	4785                	c.li	a5,1
   1952c:	faf513e3          	bne	a0,a5,194d2 <dwarf::dwarf::get_type_unit(unsigned long) const+0x14c>
	    _M_destroy();
   19530:	000d3783          	ld	a5,0(s10)
   19534:	6f9c                	c.ld	a5,24(a5)
   19536:	856a                	c.mv	a0,s10
   19538:	9782                	c.jalr	a5
   1953a:	bf61                	c.j	194d2 <dwarf::dwarf::get_type_unit(unsigned long) const+0x14c>
      return __exchange_and_add(__mem, __val);
   1953c:	55fd                	c.li	a1,-1
   1953e:	034d0513          	addi	a0,s10,52
   19542:	8aefd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19546:	b7d5                	c.j	1952a <dwarf::dwarf::get_type_unit(unsigned long) const+0x1a4>
	if (_M_pi != nullptr)
   19548:	7466                	c.ldsp	s0,120(sp)
   1954a:	c819                	c.beqz	s0,19560 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1da>
    if (__is_single_threaded())
   1954c:	000ac783          	lbu	a5,0(s5)
   19550:	cb8d                	c.beqz	a5,19582 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1fc>
    _Atomic_word __result = *__mem;
   19552:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   19554:	fff5079b          	addiw	a5,a0,-1
   19558:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1955a:	4785                	c.li	a5,1
   1955c:	02f50963          	beq	a0,a5,1958e <dwarf::dwarf::get_type_unit(unsigned long) const+0x208>
   19560:	fc52                	c.sdsp	s4,56(sp)
   19562:	854e                	c.mv	a0,s3
   19564:	d2cfe0ef          	jal	ra,17a90 <dwarf::unit::~unit()>
   19568:	77a2                	c.ldsp	a5,40(sp)
      { return _M_ptr; }
   1956a:	6762                	c.ldsp	a4,24(sp)
    while (!tucur.end()) {
   1956c:	6b14                	c.ld	a3,16(a4)
   1956e:	04d7ff63          	bgeu	a5,a3,195cc <dwarf::dwarf::get_type_unit(unsigned long) const+0x246>
  section_offset get_section_offset() const { return pos - sec->begin; }
   19572:	6710                	c.ld	a2,8(a4)
      type_unit tu(*this, tucur.get_section_offset());
   19574:	40c78633          	sub	a2,a5,a2
   19578:	85ca                	c.mv	a1,s2
   1957a:	854e                	c.mv	a0,s3
   1957c:	fb0ff0ef          	jal	ra,18d2c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)>
   19580:	b721                	c.j	19488 <dwarf::dwarf::get_type_unit(unsigned long) const+0x102>
      return __exchange_and_add(__mem, __val);
   19582:	55fd                	c.li	a1,-1
   19584:	03040513          	addi	a0,s0,48
   19588:	868fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1958c:	b7f9                	c.j	1955a <dwarf::dwarf::get_type_unit(unsigned long) const+0x1d4>
	_M_dispose();
   1958e:	601c                	c.ld	a5,0(s0)
   19590:	6b9c                	c.ld	a5,16(a5)
   19592:	8522                	c.mv	a0,s0
   19594:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19596:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1959a:	00021797          	auipc	a5,0x21
   1959e:	efe7b783          	ld	a5,-258(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   195a2:	0007c783          	lbu	a5,0(a5)
   195a6:	cf89                	c.beqz	a5,195c0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x23a>
    _Atomic_word __result = *__mem;
   195a8:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   195aa:	fff5079b          	addiw	a5,a0,-1
   195ae:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   195b0:	4785                	c.li	a5,1
   195b2:	faf517e3          	bne	a0,a5,19560 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1da>
	    _M_destroy();
   195b6:	601c                	c.ld	a5,0(s0)
   195b8:	6f9c                	c.ld	a5,24(a5)
   195ba:	8522                	c.mv	a0,s0
   195bc:	9782                	c.jalr	a5
   195be:	b74d                	c.j	19560 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1da>
      return __exchange_and_add(__mem, __val);
   195c0:	55fd                	c.li	a1,-1
   195c2:	03440513          	addi	a0,s0,52
   195c6:	82afd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   195ca:	b7dd                	c.j	195b0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x22a>
      { return _M_ptr; }
   195cc:	00093783          	ld	a5,0(s2)
    m->have_type_units = true;
   195d0:	4705                	c.li	a4,1
   195d2:	08e78023          	sb	a4,128(a5)
	if (_M_pi != nullptr)
   195d6:	7402                	c.ldsp	s0,32(sp)
   195d8:	cc19                	c.beqz	s0,195f6 <dwarf::dwarf::get_type_unit(unsigned long) const+0x270>
    if (__is_single_threaded())
   195da:	00021797          	auipc	a5,0x21
   195de:	ebe7b783          	ld	a5,-322(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   195e2:	0007c783          	lbu	a5,0(a5)
   195e6:	c3b1                	c.beqz	a5,1962a <dwarf::dwarf::get_type_unit(unsigned long) const+0x2a4>
    _Atomic_word __result = *__mem;
   195e8:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   195ea:	fff5079b          	addiw	a5,a0,-1
   195ee:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   195f0:	4785                	c.li	a5,1
   195f2:	04f50263          	beq	a0,a5,19636 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2b0>
      { return _M_ptr; }
   195f6:	00093783          	ld	a5,0(s2)
      { return _M_h.count(__x); }
   195fa:	04878413          	addi	s0,a5,72
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    find(const key_type& __k) const
    -> const_iterator
    {
      if (size() <= __small_size_threshold())
   195fe:	73b8                	c.ld	a4,96(a5)
   19600:	eb35                	c.bnez	a4,19674 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2ee>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   19602:	6fbc                	c.ld	a5,88(a5)
	{
	  for (auto __it = begin(); __it != end(); ++__it)
   19604:	c799                	c.beqz	a5,19612 <dwarf::dwarf::get_type_unit(unsigned long) const+0x28c>
      { return __x == __y; }
   19606:	66a2                	c.ldsp	a3,8(sp)
	    if (this->_M_key_equals(__k, *__it._M_cur))
   19608:	6798                	c.ld	a4,8(a5)
   1960a:	08e68363          	beq	a3,a4,19690 <dwarf::dwarf::get_type_unit(unsigned long) const+0x30a>
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1960e:	639c                	c.ld	a5,0(a5)
	  for (auto __it = begin(); __it != end(); ++__it)
   19610:	ffe5                	c.bnez	a5,19608 <dwarf::dwarf::get_type_unit(unsigned long) const+0x282>
    throw out_of_range("type signature 0x" + to_hex(type_signature));
   19612:	4541                	c.li	a0,16
   19614:	87cfd0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   19618:	84aa                	c.mv	s1,a0
   1961a:	65a2                	c.ldsp	a1,8(sp)
   1961c:	0828                	c.addi4spn	a0,sp,24
   1961e:	00021317          	auipc	t1,0x21
   19622:	cf233303          	ld	t1,-782(t1) # 3a310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1fa10>
   19626:	9302                	c.jalr	t1
   19628:	a849                	c.j	196ba <dwarf::dwarf::get_type_unit(unsigned long) const+0x334>
      return __exchange_and_add(__mem, __val);
   1962a:	55fd                	c.li	a1,-1
   1962c:	03040513          	addi	a0,s0,48
   19630:	fc1fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19634:	bf75                	c.j	195f0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x26a>
	_M_dispose();
   19636:	601c                	c.ld	a5,0(s0)
   19638:	6b9c                	c.ld	a5,16(a5)
   1963a:	8522                	c.mv	a0,s0
   1963c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1963e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19642:	00021797          	auipc	a5,0x21
   19646:	e567b783          	ld	a5,-426(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1964a:	0007c783          	lbu	a5,0(a5)
   1964e:	cf89                	c.beqz	a5,19668 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2e2>
    _Atomic_word __result = *__mem;
   19650:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   19652:	fff5079b          	addiw	a5,a0,-1
   19656:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19658:	4785                	c.li	a5,1
   1965a:	f8f51ee3          	bne	a0,a5,195f6 <dwarf::dwarf::get_type_unit(unsigned long) const+0x270>
	    _M_destroy();
   1965e:	601c                	c.ld	a5,0(s0)
   19660:	6f9c                	c.ld	a5,24(a5)
   19662:	8522                	c.mv	a0,s0
   19664:	9782                	c.jalr	a5
   19666:	bf41                	c.j	195f6 <dwarf::dwarf::get_type_unit(unsigned long) const+0x270>
      return __exchange_and_add(__mem, __val);
   19668:	55fd                	c.li	a1,-1
   1966a:	03440513          	addi	a0,s0,52
   1966e:	f83fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19672:	b7dd                	c.j	19658 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2d2>
      __hash_code
      _M_hash_code(const _Key& __k) const
      {
	static_assert(__is_invocable<const _Hash&, const _Key&>{},
	    "hash function must be invocable with an argument of key type");
	return _M_hash()(__k);
   19674:	66a2                	c.ldsp	a3,8(sp)
    { return __num % __den; }
   19676:	6bac                	c.ld	a1,80(a5)
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   19678:	0030                	c.addi4spn	a2,sp,8
   1967a:	02b6f5b3          	remu	a1,a3,a1
   1967e:	8522                	c.mv	a0,s0
   19680:	00021317          	auipc	t1,0x21
   19684:	cb033303          	ld	t1,-848(t1) # 3a330 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x1f64a>
   19688:	9302                	c.jalr	t1
	if (__before_n)
   1968a:	d541                	c.beqz	a0,19612 <dwarf::dwarf::get_type_unit(unsigned long) const+0x28c>
  if (!m->type_units.count(type_signature))
   1968c:	611c                	c.ld	a5,0(a0)
   1968e:	d3d1                	c.beqz	a5,19612 <dwarf::dwarf::get_type_unit(unsigned long) const+0x28c>
      { return _M_h[__k]; }
   19690:	002c                	c.addi4spn	a1,sp,8
   19692:	8522                	c.mv	a0,s0
   19694:	00021317          	auipc	t1,0x21
   19698:	e9433303          	ld	t1,-364(t1) # 3a528 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)@@Base+0x1f21a>
   1969c:	9302                	c.jalr	t1
}
   1969e:	60ee                	c.ldsp	ra,216(sp)
   196a0:	644e                	c.ldsp	s0,208(sp)
   196a2:	64ae                	c.ldsp	s1,200(sp)
   196a4:	690e                	c.ldsp	s2,192(sp)
   196a6:	79ea                	c.ldsp	s3,184(sp)
   196a8:	7a4a                	c.ldsp	s4,176(sp)
   196aa:	7aaa                	c.ldsp	s5,168(sp)
   196ac:	7b0a                	c.ldsp	s6,160(sp)
   196ae:	6bea                	c.ldsp	s7,152(sp)
   196b0:	6c4a                	c.ldsp	s8,144(sp)
   196b2:	6caa                	c.ldsp	s9,136(sp)
   196b4:	6d0a                	c.ldsp	s10,128(sp)
   196b6:	612d                	c.addi16sp	sp,224
   196b8:	8082                	c.jr	ra
    { return std::move(__rhs.insert(0, __lhs)); }
   196ba:	00015617          	auipc	a2,0x15
   196be:	bd660613          	addi	a2,a2,-1066 # 2e290 <std::piecewise_construct+0x270>
   196c2:	4581                	c.li	a1,0
   196c4:	0828                	c.addi4spn	a0,sp,24
   196c6:	f3bfc0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   196ca:	85aa                	c.mv	a1,a0
   196cc:	1820                	c.addi4spn	s0,sp,56
   196ce:	8522                	c.mv	a0,s0
   196d0:	800fd0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    throw out_of_range("type signature 0x" + to_hex(type_signature));
   196d4:	85a2                	c.mv	a1,s0
   196d6:	8526                	c.mv	a0,s1
   196d8:	a18fd0ef          	jal	ra,168f0 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   196dc:	7562                	c.ldsp	a0,56(sp)
	if (!_M_is_local())
   196de:	00bc                	c.addi4spn	a5,sp,72
   196e0:	00f50463          	beq	a0,a5,196e8 <dwarf::dwarf::get_type_unit(unsigned long) const+0x362>
   196e4:	8bcfd0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   196e8:	6562                	c.ldsp	a0,24(sp)
	if (!_M_is_local())
   196ea:	103c                	c.addi4spn	a5,sp,40
   196ec:	00f50463          	beq	a0,a5,196f4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x36e>
   196f0:	8b0fd0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   196f4:	00021617          	auipc	a2,0x21
   196f8:	de463603          	ld	a2,-540(a2) # 3a4d8 <std::out_of_range::~out_of_range()@GLIBCXX_3.4>
   196fc:	00021597          	auipc	a1,0x21
   19700:	e8c5b583          	ld	a1,-372(a1) # 3a588 <typeinfo for std::out_of_range@GLIBCXX_3.4>
   19704:	8526                	c.mv	a0,s1
   19706:	a5afd0ef          	jal	ra,16960 <__cxa_throw@plt>
   1970a:	842a                	c.mv	s0,a0
   1970c:	00021797          	auipc	a5,0x21
   19710:	c647b783          	ld	a5,-924(a5) # 3a370 <vtable for dwarf::type_unit@@Base+0xa00>
   19714:	07c1                	c.addi	a5,16
   19716:	fc3e                	c.sdsp	a5,56(sp)
   19718:	1828                	c.addi4spn	a0,sp,56
   1971a:	b76fe0ef          	jal	ra,17a90 <dwarf::unit::~unit()>
	if (_M_pi != nullptr)
   1971e:	7502                	c.ldsp	a0,32(sp)
   19720:	c511                	c.beqz	a0,1972c <dwarf::dwarf::get_type_unit(unsigned long) const+0x3a6>
	  _M_pi->_M_release();
   19722:	00021317          	auipc	t1,0x21
   19726:	cbe33303          	ld	t1,-834(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   1972a:	9302                	c.jalr	t1
   1972c:	8522                	c.mv	a0,s0
   1972e:	a62fd0ef          	jal	ra,16990 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   19732:	842a                	c.mv	s0,a0
   19734:	b7ed                	c.j	1971e <dwarf::dwarf::get_type_unit(unsigned long) const+0x398>
      { return _M_dataplus._M_p; }
   19736:	842a                	c.mv	s0,a0
   19738:	7562                	c.ldsp	a0,56(sp)
	if (!_M_is_local())
   1973a:	00bc                	c.addi4spn	a5,sp,72
   1973c:	00f50463          	beq	a0,a5,19744 <dwarf::dwarf::get_type_unit(unsigned long) const+0x3be>
   19740:	860fd0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   19744:	6562                	c.ldsp	a0,24(sp)
	if (!_M_is_local())
   19746:	103c                	c.addi4spn	a5,sp,40
   19748:	00f50463          	beq	a0,a5,19750 <dwarf::dwarf::get_type_unit(unsigned long) const+0x3ca>
   1974c:	854fd0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   19750:	8526                	c.mv	a0,s1
   19752:	ffffc0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   19756:	8522                	c.mv	a0,s0
   19758:	a38fd0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1975c:	842a                	c.mv	s0,a0
   1975e:	b7dd                	c.j	19744 <dwarf::dwarf::get_type_unit(unsigned long) const+0x3be>
   19760:	842a                	c.mv	s0,a0
   19762:	b7fd                	c.j	19750 <dwarf::dwarf::get_type_unit(unsigned long) const+0x3ca>

0000000000019764 <dwarf::unit::impl::force_abbrevs()>:
  if (have_abbrevs)
   19764:	13854783          	lbu	a5,312(a0)
   19768:	c391                	c.beqz	a5,1976c <dwarf::unit::impl::force_abbrevs()+0x8>
   1976a:	8082                	c.jr	ra
void unit::impl::force_abbrevs() {
   1976c:	7135                	c.addi16sp	sp,-160
   1976e:	ed06                	c.sdsp	ra,152(sp)
   19770:	e922                	c.sdsp	s0,144(sp)
   19772:	e526                	c.sdsp	s1,136(sp)
   19774:	e14a                	c.sdsp	s2,128(sp)
   19776:	fcce                	c.sdsp	s3,120(sp)
   19778:	f8d2                	c.sdsp	s4,112(sp)
   1977a:	f4d6                	c.sdsp	s5,104(sp)
   1977c:	f0da                	c.sdsp	s6,96(sp)
   1977e:	ecde                	c.sdsp	s7,88(sp)
   19780:	84aa                	c.mv	s1,a0
  cursor c(file.get_section(section_type::abbrev), debug_abbrev_offset);
   19782:	4601                	c.li	a2,0
   19784:	85aa                	c.mv	a1,a0
   19786:	0088                	c.addi4spn	a0,sp,64
   19788:	bbcfe0ef          	jal	ra,17b44 <dwarf::dwarf::get_section(dwarf::section_type) const>
   1978c:	7480                	c.ld	s0,40(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1978e:	6786                	c.ldsp	a5,64(sp)
   19790:	f43e                	c.sdsp	a5,40(sp)
      : _M_pi(__r._M_pi)
   19792:	6526                	c.ldsp	a0,72(sp)
   19794:	f82a                	c.sdsp	a0,48(sp)
	if (_M_pi != nullptr)
   19796:	c919                	c.beqz	a0,197ac <dwarf::unit::impl::force_abbrevs()+0x48>
    if (__is_single_threaded())
   19798:	00021797          	auipc	a5,0x21
   1979c:	d007b783          	ld	a5,-768(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   197a0:	0007c783          	lbu	a5,0(a5)
   197a4:	cfa9                	c.beqz	a5,197fe <dwarf::unit::impl::force_abbrevs()+0x9a>
  { *__mem += __val; }
   197a6:	591c                	c.lw	a5,48(a0)
   197a8:	2785                	c.addiw	a5,1
   197aa:	d91c                	c.sw	a5,48(a0)
      : sec(sec), pos(sec->begin + offset) {}
   197ac:	6786                	c.ldsp	a5,64(sp)
   197ae:	679c                	c.ld	a5,8(a5)
   197b0:	97a2                	c.add	a5,s0
   197b2:	fc3e                	c.sdsp	a5,56(sp)
	if (_M_pi != nullptr)
   197b4:	6426                	c.ldsp	s0,72(sp)
   197b6:	cc19                	c.beqz	s0,197d4 <dwarf::unit::impl::force_abbrevs()+0x70>
    if (__is_single_threaded())
   197b8:	00021797          	auipc	a5,0x21
   197bc:	ce07b783          	ld	a5,-800(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   197c0:	0007c783          	lbu	a5,0(a5)
   197c4:	c3b9                	c.beqz	a5,1980a <dwarf::unit::impl::force_abbrevs()+0xa6>
    _Atomic_word __result = *__mem;
   197c6:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   197c8:	fff5079b          	addiw	a5,a0,-1
   197cc:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   197ce:	4785                	c.li	a5,1
   197d0:	04f50363          	beq	a0,a5,19816 <dwarf::unit::impl::force_abbrevs()+0xb2>
  abbrev_code code;
  DW_TAG tag;
  bool children;
  std::vector<attribute_spec> attributes;

  abbrev_entry() : code(0) {}
   197d4:	e002                	c.sdsp	zero,0(sp)
   197d6:	e802                	c.sdsp	zero,16(sp)
   197d8:	ec02                	c.sdsp	zero,24(sp)
   197da:	f002                	c.sdsp	zero,32(sp)
  abbrev_code highest = 0;
   197dc:	4901                	c.li	s2,0
  while (entry.read(&c)) {
   197de:	02810993          	addi	s3,sp,40
   197e2:	840a                	c.mv	s0,sp
   197e4:	15848a13          	addi	s4,s1,344
   197e8:	00021a97          	auipc	s5,0x21
   197ec:	d10aba83          	ld	s5,-752(s5) # 3a4f8 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)@@Base+0x1efd2>
struct abbrev_entry {
   197f0:	01010b13          	addi	s6,sp,16
   197f4:	00021b97          	auipc	s7,0x21
   197f8:	e0cbbb83          	ld	s7,-500(s7) # 3a600 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)@@Base+0x200e6>
   197fc:	a89d                	c.j	19872 <dwarf::unit::impl::force_abbrevs()+0x10e>
      __atomic_add(__mem, __val);
   197fe:	4585                	c.li	a1,1
   19800:	03050513          	addi	a0,a0,48
   19804:	dadfc0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   19808:	b755                	c.j	197ac <dwarf::unit::impl::force_abbrevs()+0x48>
      return __exchange_and_add(__mem, __val);
   1980a:	55fd                	c.li	a1,-1
   1980c:	03040513          	addi	a0,s0,48
   19810:	de1fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19814:	bf6d                	c.j	197ce <dwarf::unit::impl::force_abbrevs()+0x6a>
	_M_dispose();
   19816:	601c                	c.ld	a5,0(s0)
   19818:	6b9c                	c.ld	a5,16(a5)
   1981a:	8522                	c.mv	a0,s0
   1981c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1981e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19822:	00021797          	auipc	a5,0x21
   19826:	c767b783          	ld	a5,-906(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1982a:	0007c783          	lbu	a5,0(a5)
   1982e:	cf89                	c.beqz	a5,19848 <dwarf::unit::impl::force_abbrevs()+0xe4>
    _Atomic_word __result = *__mem;
   19830:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   19832:	fff5079b          	addiw	a5,a0,-1
   19836:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19838:	4785                	c.li	a5,1
   1983a:	f8f51de3          	bne	a0,a5,197d4 <dwarf::unit::impl::force_abbrevs()+0x70>
	    _M_destroy();
   1983e:	601c                	c.ld	a5,0(s0)
   19840:	6f9c                	c.ld	a5,24(a5)
   19842:	8522                	c.mv	a0,s0
   19844:	9782                	c.jalr	a5
   19846:	b779                	c.j	197d4 <dwarf::unit::impl::force_abbrevs()+0x70>
      return __exchange_and_add(__mem, __val);
   19848:	55fd                	c.li	a1,-1
   1984a:	03440513          	addi	a0,s0,52
   1984e:	da3fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19852:	b7dd                	c.j	19838 <dwarf::unit::impl::force_abbrevs()+0xd4>
   19854:	6782                	c.ldsp	a5,0(sp)
   19856:	e11c                	c.sd	a5,0(a0)
   19858:	47a2                	c.lwsp	a5,8(sp)
   1985a:	c51c                	c.sw	a5,8(a0)
   1985c:	00c14783          	lbu	a5,12(sp)
   19860:	00f50623          	sb	a5,12(a0)
   19864:	85da                	c.mv	a1,s6
   19866:	0541                	c.addi	a0,16
   19868:	9b82                	c.jalr	s7
    if (entry.code > highest)
   1986a:	6782                	c.ldsp	a5,0(sp)
   1986c:	00f97363          	bgeu	s2,a5,19872 <dwarf::unit::impl::force_abbrevs()+0x10e>
   19870:	893e                	c.mv	s2,a5
  while (entry.read(&c)) {
   19872:	85ce                	c.mv	a1,s3
   19874:	8522                	c.mv	a0,s0
   19876:	165060ef          	jal	ra,201da <dwarf::abbrev_entry::read(dwarf::cursor*)>
   1987a:	c509                	c.beqz	a0,19884 <dwarf::unit::impl::force_abbrevs()+0x120>
   1987c:	85a2                	c.mv	a1,s0
   1987e:	8552                	c.mv	a0,s4
   19880:	9a82                	c.jalr	s5
   19882:	bfc9                	c.j	19854 <dwarf::unit::impl::force_abbrevs()+0xf0>
  if (highest * 10 < abbrevs_map.size() * 15) {
   19884:	00291793          	slli	a5,s2,0x2
   19888:	97ca                	c.add	a5,s2
   1988a:	0786                	c.slli	a5,0x1
   1988c:	1704b683          	ld	a3,368(s1)
   19890:	00469713          	slli	a4,a3,0x4
   19894:	8f15                	c.sub	a4,a3
   19896:	04e7e463          	bltu	a5,a4,198de <dwarf::unit::impl::force_abbrevs()+0x17a>
  have_abbrevs = true;
   1989a:	4785                	c.li	a5,1
   1989c:	12f48c23          	sb	a5,312(s1)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   198a0:	6542                	c.ldsp	a0,16(sp)
	if (__p)
   198a2:	c119                	c.beqz	a0,198a8 <dwarf::unit::impl::force_abbrevs()+0x144>
   198a4:	efdfc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   198a8:	7442                	c.ldsp	s0,48(sp)
   198aa:	cc19                	c.beqz	s0,198c8 <dwarf::unit::impl::force_abbrevs()+0x164>
    if (__is_single_threaded())
   198ac:	00021797          	auipc	a5,0x21
   198b0:	bec7b783          	ld	a5,-1044(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   198b4:	0007c783          	lbu	a5,0(a5)
   198b8:	c3f5                	c.beqz	a5,1999c <dwarf::unit::impl::force_abbrevs()+0x238>
    _Atomic_word __result = *__mem;
   198ba:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   198bc:	fff5079b          	addiw	a5,a0,-1
   198c0:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   198c2:	4785                	c.li	a5,1
   198c4:	0ef50263          	beq	a0,a5,199a8 <dwarf::unit::impl::force_abbrevs()+0x244>
}
   198c8:	60ea                	c.ldsp	ra,152(sp)
   198ca:	644a                	c.ldsp	s0,144(sp)
   198cc:	64aa                	c.ldsp	s1,136(sp)
   198ce:	690a                	c.ldsp	s2,128(sp)
   198d0:	79e6                	c.ldsp	s3,120(sp)
   198d2:	7a46                	c.ldsp	s4,112(sp)
   198d4:	7aa6                	c.ldsp	s5,104(sp)
   198d6:	7b06                	c.ldsp	s6,96(sp)
   198d8:	6be6                	c.ldsp	s7,88(sp)
   198da:	610d                	c.addi16sp	sp,160
   198dc:	8082                	c.jr	ra
    abbrevs_vec.resize(highest + 1);
   198de:	0905                	c.addi	s2,1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   198e0:	1484b983          	ld	s3,328(s1)
   198e4:	1404b783          	ld	a5,320(s1)
   198e8:	40f985b3          	sub	a1,s3,a5
   198ec:	858d                	c.srai	a1,0x3
   198ee:	00014717          	auipc	a4,0x14
   198f2:	71273703          	ld	a4,1810(a4) # 2e000 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd8>
   198f6:	02e585b3          	mul	a1,a1,a4
	if (__new_size > size())
   198fa:	0125ee63          	bltu	a1,s2,19916 <dwarf::unit::impl::force_abbrevs()+0x1b2>
	else if (__new_size < size())
   198fe:	04b97163          	bgeu	s2,a1,19940 <dwarf::unit::impl::force_abbrevs()+0x1dc>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   19902:	00291713          	slli	a4,s2,0x2
   19906:	974a                	c.add	a4,s2
   19908:	070e                	c.slli	a4,0x3
   1990a:	00e78933          	add	s2,a5,a4
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   1990e:	03298963          	beq	s3,s2,19940 <dwarf::unit::impl::force_abbrevs()+0x1dc>
   19912:	844a                	c.mv	s0,s2
   19914:	a839                	c.j	19932 <dwarf::unit::impl::force_abbrevs()+0x1ce>
	  _M_default_append(__new_size - size());
   19916:	40b905b3          	sub	a1,s2,a1
   1991a:	14048513          	addi	a0,s1,320
   1991e:	00021317          	auipc	t1,0x21
   19922:	a8a33303          	ld	t1,-1398(t1) # 3a3a8 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)@@Base+0x1f840>
   19926:	9302                	c.jalr	t1
   19928:	a821                	c.j	19940 <dwarf::unit::impl::force_abbrevs()+0x1dc>
	  for (; __first != __last; ++__first)
   1992a:	02840413          	addi	s0,s0,40
   1992e:	00898763          	beq	s3,s0,1993c <dwarf::unit::impl::force_abbrevs()+0x1d8>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   19932:	6808                	c.ld	a0,16(s0)
	if (__p)
   19934:	d97d                	c.beqz	a0,1992a <dwarf::unit::impl::force_abbrevs()+0x1c6>
   19936:	e6bfc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { __a.deallocate(__p, __n); }
   1993a:	bfc5                	c.j	1992a <dwarf::unit::impl::force_abbrevs()+0x1c6>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   1993c:	1524b423          	sd	s2,328(s1)
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   19940:	1684b403          	ld	s0,360(s1)
    for (auto &entry : abbrevs_map)
   19944:	ec09                	c.bnez	s0,1995e <dwarf::unit::impl::force_abbrevs()+0x1fa>
      { _M_h.clear(); }
   19946:	15848513          	addi	a0,s1,344
   1994a:	00021317          	auipc	t1,0x21
   1994e:	9a633303          	ld	t1,-1626(t1) # 3a2f0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()@@Base+0x1f960>
   19952:	9302                	c.jalr	t1
   19954:	b799                	c.j	1989a <dwarf::unit::impl::force_abbrevs()+0x136>
   19956:	e4bfc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1995a:	6000                	c.ld	s0,0(s0)
   1995c:	d46d                	c.beqz	s0,19946 <dwarf::unit::impl::force_abbrevs()+0x1e2>
	return *(this->_M_impl._M_start + __n);
   1995e:	641c                	c.ld	a5,8(s0)
   19960:	00279713          	slli	a4,a5,0x2
   19964:	973e                	c.add	a4,a5
   19966:	070e                	c.slli	a4,0x3
   19968:	1404b783          	ld	a5,320(s1)
   1996c:	97ba                	c.add	a5,a4
   1996e:	6818                	c.ld	a4,16(s0)
   19970:	e398                	c.sd	a4,0(a5)
   19972:	4c18                	c.lw	a4,24(s0)
   19974:	c798                	c.sw	a4,8(a5)
   19976:	01c44703          	lbu	a4,28(s0)
   1997a:	00e78623          	sb	a4,12(a5)
	  _M_start = __x._M_start;
   1997e:	6b88                	c.ld	a0,16(a5)
   19980:	7018                	c.ld	a4,32(s0)
   19982:	eb98                	c.sd	a4,16(a5)
	  _M_finish = __x._M_finish;
   19984:	7418                	c.ld	a4,40(s0)
   19986:	ef98                	c.sd	a4,24(a5)
	  _M_end_of_storage = __x._M_end_of_storage;
   19988:	7818                	c.ld	a4,48(s0)
   1998a:	f398                	c.sd	a4,32(a5)
	  _M_start = __x._M_start;
   1998c:	02043023          	sd	zero,32(s0)
	  _M_finish = __x._M_finish;
   19990:	02043423          	sd	zero,40(s0)
	  _M_end_of_storage = __x._M_end_of_storage;
   19994:	02043823          	sd	zero,48(s0)
	if (__p)
   19998:	fd5d                	c.bnez	a0,19956 <dwarf::unit::impl::force_abbrevs()+0x1f2>
   1999a:	b7c1                	c.j	1995a <dwarf::unit::impl::force_abbrevs()+0x1f6>
      return __exchange_and_add(__mem, __val);
   1999c:	55fd                	c.li	a1,-1
   1999e:	03040513          	addi	a0,s0,48
   199a2:	c4ffc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   199a6:	bf31                	c.j	198c2 <dwarf::unit::impl::force_abbrevs()+0x15e>
	_M_dispose();
   199a8:	601c                	c.ld	a5,0(s0)
   199aa:	6b9c                	c.ld	a5,16(a5)
   199ac:	8522                	c.mv	a0,s0
   199ae:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   199b0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   199b4:	00021797          	auipc	a5,0x21
   199b8:	ae47b783          	ld	a5,-1308(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   199bc:	0007c783          	lbu	a5,0(a5)
   199c0:	cf89                	c.beqz	a5,199da <dwarf::unit::impl::force_abbrevs()+0x276>
    _Atomic_word __result = *__mem;
   199c2:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   199c4:	fff5079b          	addiw	a5,a0,-1
   199c8:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   199ca:	4785                	c.li	a5,1
   199cc:	eef51ee3          	bne	a0,a5,198c8 <dwarf::unit::impl::force_abbrevs()+0x164>
	    _M_destroy();
   199d0:	601c                	c.ld	a5,0(s0)
   199d2:	6f9c                	c.ld	a5,24(a5)
   199d4:	8522                	c.mv	a0,s0
   199d6:	9782                	c.jalr	a5
   199d8:	bdc5                	c.j	198c8 <dwarf::unit::impl::force_abbrevs()+0x164>
      return __exchange_and_add(__mem, __val);
   199da:	55fd                	c.li	a1,-1
   199dc:	03440513          	addi	a0,s0,52
   199e0:	c11fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   199e4:	b7dd                	c.j	199ca <dwarf::unit::impl::force_abbrevs()+0x266>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   199e6:	842a                	c.mv	s0,a0
   199e8:	6542                	c.ldsp	a0,16(sp)
	if (__p)
   199ea:	c119                	c.beqz	a0,199f0 <dwarf::unit::impl::force_abbrevs()+0x28c>
   199ec:	db5fc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   199f0:	7542                	c.ldsp	a0,48(sp)
   199f2:	c511                	c.beqz	a0,199fe <dwarf::unit::impl::force_abbrevs()+0x29a>
	  _M_pi->_M_release();
   199f4:	00021317          	auipc	t1,0x21
   199f8:	9ec33303          	ld	t1,-1556(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   199fc:	9302                	c.jalr	t1
   199fe:	8522                	c.mv	a0,s0
   19a00:	f91fc0ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000019a04 <dwarf::unit::root() const>:
const die &unit::root() const {
   19a04:	7171                	c.addi16sp	sp,-176
   19a06:	f506                	c.sdsp	ra,168(sp)
   19a08:	f122                	c.sdsp	s0,160(sp)
   19a0a:	ed26                	c.sdsp	s1,152(sp)
   19a0c:	e94a                	c.sdsp	s2,144(sp)
   19a0e:	e54e                	c.sdsp	s3,136(sp)
   19a10:	e152                	c.sdsp	s4,128(sp)
   19a12:	fcd6                	c.sdsp	s5,120(sp)
   19a14:	f8da                	c.sdsp	s6,112(sp)
   19a16:	84aa                	c.mv	s1,a0
      { return _M_ptr; }
   19a18:	6508                	c.ld	a0,8(a0)
  if (!m->root.valid()) {
   19a1a:	6d3c                	c.ld	a5,88(a0)
   19a1c:	cf91                	c.beqz	a5,19a38 <dwarf::unit::root() const+0x34>
  return m->root;
   19a1e:	6488                	c.ld	a0,8(s1)
   19a20:	04850513          	addi	a0,a0,72
}
   19a24:	70aa                	c.ldsp	ra,168(sp)
   19a26:	740a                	c.ldsp	s0,160(sp)
   19a28:	64ea                	c.ldsp	s1,152(sp)
   19a2a:	694a                	c.ldsp	s2,144(sp)
   19a2c:	69aa                	c.ldsp	s3,136(sp)
   19a2e:	6a0a                	c.ldsp	s4,128(sp)
   19a30:	7ae6                	c.ldsp	s5,120(sp)
   19a32:	7b46                	c.ldsp	s6,112(sp)
   19a34:	614d                	c.addi16sp	sp,176
   19a36:	8082                	c.jr	ra
    m->force_abbrevs();
   19a38:	d2dff0ef          	jal	ra,19764 <dwarf::unit::impl::force_abbrevs()>
   19a3c:	6480                	c.ld	s0,8(s1)
    m->root = die(this);
   19a3e:	85a6                	c.mv	a1,s1
   19a40:	850a                	c.mv	a0,sp
   19a42:	2c6020ef          	jal	ra,1bd08 <dwarf::die::die(dwarf::unit const*)>
  die &operator=(die &&o) = default;
   19a46:	4782                	c.lwsp	a5,0(sp)
   19a48:	c43c                	c.sw	a5,72(s0)
   19a4a:	67a2                	c.ldsp	a5,8(sp)
   19a4c:	e83c                	c.sd	a5,80(s0)
   19a4e:	67c2                	c.ldsp	a5,16(sp)
   19a50:	ec3c                	c.sd	a5,88(s0)
   19a52:	67e2                	c.ldsp	a5,24(sp)
   19a54:	f03c                	c.sd	a5,96(s0)
  size_type size() const { return end - base; }
   19a56:	69e6                	c.ldsp	s3,88(sp)
   19a58:	67c6                	c.ldsp	a5,80(sp)
   19a5a:	40f989b3          	sub	s3,s3,a5
   19a5e:	4039d913          	srai	s2,s3,0x3
    for (T *p = base; p < end; ++p)
   19a62:	6c54                	c.ld	a3,152(s0)
   19a64:	705c                	c.ld	a5,160(s0)
   19a66:	00f6f763          	bgeu	a3,a5,19a74 <dwarf::unit::root() const+0x70>
   19a6a:	87b6                	c.mv	a5,a3
   19a6c:	07a1                	c.addi	a5,8
   19a6e:	7058                	c.ld	a4,160(s0)
   19a70:	fee7eee3          	bltu	a5,a4,19a6c <dwarf::unit::root() const+0x68>
    end = base;
   19a74:	f054                	c.sd	a3,160(s0)
    if (n <= (size_type)(cap - base))
   19a76:	7448                	c.ld	a0,168(s0)
   19a78:	8d15                	c.sub	a0,a3
   19a7a:	05357963          	bgeu	a0,s3,19acc <dwarf::unit::root() const+0xc8>
   19a7e:	850d                	c.srai	a0,0x3
   19a80:	e111                	c.bnez	a0,19a84 <dwarf::unit::root() const+0x80>
   19a82:	4505                	c.li	a0,1
    while (target < n)
   19a84:	01257563          	bgeu	a0,s2,19a8e <dwarf::unit::root() const+0x8a>
      target <<= 1;
   19a88:	0506                	c.slli	a0,0x1
    while (target < n)
   19a8a:	ff256fe3          	bltu	a0,s2,19a88 <dwarf::unit::root() const+0x84>
    char *newbuf = new char[sizeof(T[target])];
   19a8e:	00351a13          	slli	s4,a0,0x3
   19a92:	8552                	c.mv	a0,s4
   19a94:	afdfc0ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   19a98:	8b2a                	c.mv	s6,a0
    T *src = base, *dest = (T *)newbuf;
   19a9a:	6c48                	c.ld	a0,152(s0)
    for (; src < end; src++, dest++) {
   19a9c:	705c                	c.ld	a5,160(s0)
   19a9e:	08f57163          	bgeu	a0,a5,19b20 <dwarf::unit::root() const+0x11c>
    T *src = base, *dest = (T *)newbuf;
   19aa2:	87aa                	c.mv	a5,a0
   19aa4:	8ada                	c.mv	s5,s6
    for (; src < end; src++, dest++) {
   19aa6:	07a1                	c.addi	a5,8
   19aa8:	0aa1                	c.addi	s5,8
   19aaa:	7058                	c.ld	a4,160(s0)
   19aac:	fee7ede3          	bltu	a5,a4,19aa6 <dwarf::unit::root() const+0xa2>
   19ab0:	06840793          	addi	a5,s0,104
    if ((char *)base != buf)
   19ab4:	00f50563          	beq	a0,a5,19abe <dwarf::unit::root() const+0xba>
      delete[] (char *)base;
   19ab8:	c119                	c.beqz	a0,19abe <dwarf::unit::root() const+0xba>
   19aba:	d97fc0ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   19abe:	09643c23          	sd	s6,152(s0)
    end = dest;
   19ac2:	0b543023          	sd	s5,160(s0)
    cap = base + target;
   19ac6:	9b52                	c.add	s6,s4
   19ac8:	0b643423          	sd	s6,168(s0)
    for (size_type i = 0; i < osize; i++)
   19acc:	00090e63          	beq	s2,zero,19ae8 <dwarf::unit::root() const+0xe4>
   19ad0:	4781                	c.li	a5,0
   19ad2:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   19ad6:	6746                	c.ldsp	a4,80(sp)
   19ad8:	9736                	c.add	a4,a3
   19ada:	6310                	c.ld	a2,0(a4)
   19adc:	6c58                	c.ld	a4,152(s0)
   19ade:	9736                	c.add	a4,a3
   19ae0:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   19ae2:	0785                	c.addi	a5,1
   19ae4:	fef917e3          	bne	s2,a5,19ad2 <dwarf::unit::root() const+0xce>
    end = base + osize;
   19ae8:	6c5c                	c.ld	a5,152(s0)
   19aea:	97ce                	c.add	a5,s3
   19aec:	f05c                	c.sd	a5,160(s0)
   19aee:	77a6                	c.ldsp	a5,104(sp)
   19af0:	f85c                	c.sd	a5,176(s0)
    for (T *p = base; p < end; ++p)
   19af2:	6546                	c.ldsp	a0,80(sp)
   19af4:	67e6                	c.ldsp	a5,88(sp)
   19af6:	00f57763          	bgeu	a0,a5,19b04 <dwarf::unit::root() const+0x100>
   19afa:	87aa                	c.mv	a5,a0
   19afc:	07a1                	c.addi	a5,8
   19afe:	6766                	c.ldsp	a4,88(sp)
   19b00:	fee7eee3          	bltu	a5,a4,19afc <dwarf::unit::root() const+0xf8>
    end = base;
   19b04:	ecaa                	c.sdsp	a0,88(sp)
    if ((char *)base != buf)
   19b06:	101c                	c.addi4spn	a5,sp,32
   19b08:	00f50563          	beq	a0,a5,19b12 <dwarf::unit::root() const+0x10e>
      delete[] (char *)base;
   19b0c:	c119                	c.beqz	a0,19b12 <dwarf::unit::root() const+0x10e>
   19b0e:	d43fc0ef          	jal	ra,16850 <operator delete[](void*)@plt>
   19b12:	6488                	c.ld	a0,8(s1)
    m->root.read(m->root_offset);
   19b14:	790c                	c.ld	a1,48(a0)
   19b16:	04850513          	addi	a0,a0,72
   19b1a:	222020ef          	jal	ra,1bd3c <dwarf::die::read(unsigned long)>
   19b1e:	b701                	c.j	19a1e <dwarf::unit::root() const+0x1a>
    T *src = base, *dest = (T *)newbuf;
   19b20:	8ada                	c.mv	s5,s6
   19b22:	b779                	c.j	19ab0 <dwarf::unit::root() const+0xac>
class die {
   19b24:	842a                	c.mv	s0,a0
   19b26:	1008                	c.addi4spn	a0,sp,32
   19b28:	00021317          	auipc	t1,0x21
   19b2c:	8d833303          	ld	t1,-1832(t1) # 3a400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x22e14>
   19b30:	9302                	c.jalr	t1
   19b32:	8522                	c.mv	a0,s0
   19b34:	e5dfc0ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000019b38 <dwarf::compilation_unit::get_line_table() const>:
const line_table &compilation_unit::get_line_table() const {
   19b38:	7131                	c.addi16sp	sp,-192
   19b3a:	fd06                	c.sdsp	ra,184(sp)
   19b3c:	f922                	c.sdsp	s0,176(sp)
   19b3e:	f526                	c.sdsp	s1,168(sp)
   19b40:	f14a                	c.sdsp	s2,160(sp)
   19b42:	ed4e                	c.sdsp	s3,152(sp)
   19b44:	e952                	c.sdsp	s4,144(sp)
   19b46:	842a                	c.mv	s0,a0
      { return _M_ptr != nullptr; }
   19b48:	651c                	c.ld	a5,8(a0)
  if (!m->lt.valid()) {
   19b4a:	1287b783          	ld	a5,296(a5)
   19b4e:	cf81                	c.beqz	a5,19b66 <dwarf::compilation_unit::get_line_table() const+0x2e>
  return m->lt;
   19b50:	6408                	c.ld	a0,8(s0)
   19b52:	12850513          	addi	a0,a0,296
}
   19b56:	70ea                	c.ldsp	ra,184(sp)
   19b58:	744a                	c.ldsp	s0,176(sp)
   19b5a:	74aa                	c.ldsp	s1,168(sp)
   19b5c:	790a                	c.ldsp	s2,160(sp)
   19b5e:	69ea                	c.ldsp	s3,152(sp)
   19b60:	6a4a                	c.ldsp	s4,144(sp)
   19b62:	6129                	c.addi16sp	sp,192
   19b64:	8082                	c.jr	ra
    const die &d = root();
   19b66:	e9fff0ef          	jal	ra,19a04 <dwarf::unit::root() const>
   19b6a:	84aa                	c.mv	s1,a0
    if (!d.has(DW_AT::stmt_list) || !d.has(DW_AT::name))
   19b6c:	45c1                	c.li	a1,16
   19b6e:	55c020ef          	jal	ra,1c0ca <dwarf::die::has(dwarf::DW_AT) const>
   19b72:	dd79                	c.beqz	a0,19b50 <dwarf::compilation_unit::get_line_table() const+0x18>
   19b74:	458d                	c.li	a1,3
   19b76:	8526                	c.mv	a0,s1
   19b78:	552020ef          	jal	ra,1c0ca <dwarf::die::has(dwarf::DW_AT) const>
   19b7c:	d971                	c.beqz	a0,19b50 <dwarf::compilation_unit::get_line_table() const+0x18>
    shared_ptr<section> sec;
   19b7e:	e402                	c.sdsp	zero,8(sp)
   19b80:	e802                	c.sdsp	zero,16(sp)
      sec = m->file.get_section(section_type::line);
   19b82:	4611                	c.li	a2,4
   19b84:	640c                	c.ld	a1,8(s0)
   19b86:	08a8                	c.addi4spn	a0,sp,88
   19b88:	fbdfd0ef          	jal	ra,17b44 <dwarf::dwarf::get_section(dwarf::section_type) const>
      : _M_ptr(__r._M_ptr), _M_refcount()
   19b8c:	6766                	c.ldsp	a4,88(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   19b8e:	7786                	c.ldsp	a5,96(sp)
	__r._M_pi = _M_pi;
   19b90:	f082                	c.sdsp	zero,96(sp)
	__r._M_ptr = nullptr;
   19b92:	ec82                	c.sdsp	zero,88(sp)
   19b94:	e43a                	c.sdsp	a4,8(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   19b96:	6942                	c.ldsp	s2,16(sp)
	__r._M_pi = _M_pi;
   19b98:	e83e                	c.sdsp	a5,16(sp)
	if (_M_pi != nullptr)
   19b9a:	08090a63          	beq	s2,zero,19c2e <dwarf::compilation_unit::get_line_table() const+0xf6>
    if (__is_single_threaded())
   19b9e:	00021797          	auipc	a5,0x21
   19ba2:	8fa7b783          	ld	a5,-1798(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19ba6:	0007c783          	lbu	a5,0(a5)
   19baa:	c7b9                	c.beqz	a5,19bf8 <dwarf::compilation_unit::get_line_table() const+0xc0>
    _Atomic_word __result = *__mem;
   19bac:	03092783          	lw	a5,48(s2)
    *__mem += __val;
   19bb0:	fff7871b          	addiw	a4,a5,-1
   19bb4:	02e92823          	sw	a4,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19bb8:	4705                	c.li	a4,1
   19bba:	06e79a63          	bne	a5,a4,19c2e <dwarf::compilation_unit::get_line_table() const+0xf6>
	_M_dispose();
   19bbe:	00093783          	ld	a5,0(s2)
   19bc2:	6b9c                	c.ld	a5,16(a5)
   19bc4:	854a                	c.mv	a0,s2
   19bc6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19bc8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19bcc:	00021797          	auipc	a5,0x21
   19bd0:	8cc7b783          	ld	a5,-1844(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19bd4:	0007c783          	lbu	a5,0(a5)
   19bd8:	c3a5                	c.beqz	a5,19c38 <dwarf::compilation_unit::get_line_table() const+0x100>
    _Atomic_word __result = *__mem;
   19bda:	03492783          	lw	a5,52(s2)
    *__mem += __val;
   19bde:	fff7871b          	addiw	a4,a5,-1
   19be2:	02e92a23          	sw	a4,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19be6:	4705                	c.li	a4,1
   19be8:	02e79063          	bne	a5,a4,19c08 <dwarf::compilation_unit::get_line_table() const+0xd0>
	    _M_destroy();
   19bec:	00093783          	ld	a5,0(s2)
   19bf0:	6f9c                	c.ld	a5,24(a5)
   19bf2:	854a                	c.mv	a0,s2
   19bf4:	9782                	c.jalr	a5
   19bf6:	a809                	c.j	19c08 <dwarf::compilation_unit::get_line_table() const+0xd0>
      return __exchange_and_add(__mem, __val);
   19bf8:	55fd                	c.li	a1,-1
   19bfa:	03090513          	addi	a0,s2,48
   19bfe:	9f3fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19c02:	4785                	c.li	a5,1
   19c04:	faf50de3          	beq	a0,a5,19bbe <dwarf::compilation_unit::get_line_table() const+0x86>
	if (_M_pi != nullptr)
   19c08:	7906                	c.ldsp	s2,96(sp)
   19c0a:	02090263          	beq	s2,zero,19c2e <dwarf::compilation_unit::get_line_table() const+0xf6>
    if (__is_single_threaded())
   19c0e:	00021797          	auipc	a5,0x21
   19c12:	88a7b783          	ld	a5,-1910(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19c16:	0007c783          	lbu	a5,0(a5)
   19c1a:	c795                	c.beqz	a5,19c46 <dwarf::compilation_unit::get_line_table() const+0x10e>
    _Atomic_word __result = *__mem;
   19c1c:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   19c20:	fff5079b          	addiw	a5,a0,-1
   19c24:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19c28:	4785                	c.li	a5,1
   19c2a:	02f50463          	beq	a0,a5,19c52 <dwarf::compilation_unit::get_line_table() const+0x11a>
    auto comp_dir = d.has(DW_AT::comp_dir) ? at_comp_dir(d) : "";
   19c2e:	45ed                	c.li	a1,27
   19c30:	8526                	c.mv	a0,s1
   19c32:	498020ef          	jal	ra,1c0ca <dwarf::die::has(dwarf::DW_AT) const>
   19c36:	a095                	c.j	19c9a <dwarf::compilation_unit::get_line_table() const+0x162>
      return __exchange_and_add(__mem, __val);
   19c38:	55fd                	c.li	a1,-1
   19c3a:	03490513          	addi	a0,s2,52
   19c3e:	9b3fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19c42:	87aa                	c.mv	a5,a0
   19c44:	b74d                	c.j	19be6 <dwarf::compilation_unit::get_line_table() const+0xae>
   19c46:	55fd                	c.li	a1,-1
   19c48:	03090513          	addi	a0,s2,48
   19c4c:	9a5fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19c50:	bfe1                	c.j	19c28 <dwarf::compilation_unit::get_line_table() const+0xf0>
	_M_dispose();
   19c52:	00093783          	ld	a5,0(s2)
   19c56:	6b9c                	c.ld	a5,16(a5)
   19c58:	854a                	c.mv	a0,s2
   19c5a:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19c5c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19c60:	00021797          	auipc	a5,0x21
   19c64:	8387b783          	ld	a5,-1992(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19c68:	0007c783          	lbu	a5,0(a5)
   19c6c:	c385                	c.beqz	a5,19c8c <dwarf::compilation_unit::get_line_table() const+0x154>
    _Atomic_word __result = *__mem;
   19c6e:	03492783          	lw	a5,52(s2)
    *__mem += __val;
   19c72:	fff7871b          	addiw	a4,a5,-1
   19c76:	02e92a23          	sw	a4,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19c7a:	4705                	c.li	a4,1
   19c7c:	fae799e3          	bne	a5,a4,19c2e <dwarf::compilation_unit::get_line_table() const+0xf6>
	    _M_destroy();
   19c80:	00093783          	ld	a5,0(s2)
   19c84:	6f9c                	c.ld	a5,24(a5)
   19c86:	854a                	c.mv	a0,s2
   19c88:	9782                	c.jalr	a5
   19c8a:	b755                	c.j	19c2e <dwarf::compilation_unit::get_line_table() const+0xf6>
      return __exchange_and_add(__mem, __val);
   19c8c:	55fd                	c.li	a1,-1
   19c8e:	03490513          	addi	a0,s2,52
   19c92:	95ffc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19c96:	87aa                	c.mv	a5,a0
   19c98:	b7cd                	c.j	19c7a <dwarf::compilation_unit::get_line_table() const+0x142>
   19c9a:	c511                	c.beqz	a0,19ca6 <dwarf::compilation_unit::get_line_table() const+0x16e>
   19c9c:	85a6                	c.mv	a1,s1
   19c9e:	0828                	c.addi4spn	a0,sp,24
   19ca0:	2a40c0ef          	jal	ra,25f44 <dwarf::at_comp_dir[abi:cxx11](dwarf::die const&)>
   19ca4:	a839                	c.j	19cc2 <dwarf::compilation_unit::get_line_table() const+0x18a>
	: allocator_type(__a), _M_p(__dat) { }
   19ca6:	103c                	c.addi4spn	a5,sp,40
   19ca8:	ec3e                	c.sdsp	a5,24(sp)
	_M_construct(__s, __end, forward_iterator_tag());
   19caa:	4681                	c.li	a3,0
   19cac:	00015617          	auipc	a2,0x15
   19cb0:	14460613          	addi	a2,a2,324 # 2edf0 <typeinfo name for dwarf::expr_context+0xb8>
   19cb4:	85b2                	c.mv	a1,a2
   19cb6:	0828                	c.addi4spn	a0,sp,24
   19cb8:	00020317          	auipc	t1,0x20
   19cbc:	66833303          	ld	t1,1640(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   19cc0:	9302                	c.jalr	t1
      { return _M_ptr; }
   19cc2:	00843903          	ld	s2,8(s0)
    m->lt = line_table(sec, d[DW_AT::stmt_list].as_sec_offset(),
   19cc6:	4641                	c.li	a2,16
   19cc8:	85a6                	c.mv	a1,s1
   19cca:	18a8                	c.addi4spn	a0,sp,120
   19ccc:	426020ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   19cd0:	18a8                	c.addi4spn	a0,sp,120
   19cd2:	292040ef          	jal	ra,1df64 <dwarf::value::as_sec_offset() const>
   19cd6:	89aa                	c.mv	s3,a0
   19cd8:	641c                	c.ld	a5,8(s0)
   19cda:	6f9c                	c.ld	a5,24(a5)
   19cdc:	0207aa03          	lw	s4,32(a5)
                       m->subsec->addr_size, comp_dir, at_name(d));
   19ce0:	85a6                	c.mv	a1,s1
   19ce2:	1828                	c.addi4spn	a0,sp,56
   19ce4:	1220c0ef          	jal	ra,25e06 <dwarf::at_name[abi:cxx11](dwarf::die const&)>
    m->lt = line_table(sec, d[DW_AT::stmt_list].as_sec_offset(),
   19ce8:	183c                	c.addi4spn	a5,sp,56
   19cea:	0838                	c.addi4spn	a4,sp,24
   19cec:	86d2                	c.mv	a3,s4
   19cee:	864e                	c.mv	a2,s3
   19cf0:	002c                	c.addi4spn	a1,sp,8
   19cf2:	10a8                	c.addi4spn	a0,sp,104
   19cf4:	4cc090ef          	jal	ra,231c0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
      : _M_ptr(__r._M_ptr), _M_refcount()
   19cf8:	7726                	c.ldsp	a4,104(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   19cfa:	77c6                	c.ldsp	a5,112(sp)
	__r._M_pi = _M_pi;
   19cfc:	f882                	c.sdsp	zero,112(sp)
	__r._M_ptr = nullptr;
   19cfe:	f482                	c.sdsp	zero,104(sp)
   19d00:	12e93423          	sd	a4,296(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   19d04:	13093483          	ld	s1,304(s2)
	__r._M_pi = _M_pi;
   19d08:	12f93823          	sd	a5,304(s2)
	if (_M_pi != nullptr)
   19d0c:	c0c1                	c.beqz	s1,19d8c <dwarf::compilation_unit::get_line_table() const+0x254>
    if (__is_single_threaded())
   19d0e:	00020797          	auipc	a5,0x20
   19d12:	78a7b783          	ld	a5,1930(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19d16:	0007c783          	lbu	a5,0(a5)
   19d1a:	c3a9                	c.beqz	a5,19d5c <dwarf::compilation_unit::get_line_table() const+0x224>
    _Atomic_word __result = *__mem;
   19d1c:	589c                	c.lw	a5,48(s1)
    *__mem += __val;
   19d1e:	fff7871b          	addiw	a4,a5,-1
   19d22:	d898                	c.sw	a4,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19d24:	4705                	c.li	a4,1
   19d26:	06e79363          	bne	a5,a4,19d8c <dwarf::compilation_unit::get_line_table() const+0x254>
	_M_dispose();
   19d2a:	609c                	c.ld	a5,0(s1)
   19d2c:	6b9c                	c.ld	a5,16(a5)
   19d2e:	8526                	c.mv	a0,s1
   19d30:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19d32:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19d36:	00020797          	auipc	a5,0x20
   19d3a:	7627b783          	ld	a5,1890(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19d3e:	0007c783          	lbu	a5,0(a5)
   19d42:	cbdd                	c.beqz	a5,19df8 <dwarf::compilation_unit::get_line_table() const+0x2c0>
    _Atomic_word __result = *__mem;
   19d44:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   19d46:	fff7871b          	addiw	a4,a5,-1
   19d4a:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19d4c:	4705                	c.li	a4,1
   19d4e:	00e79f63          	bne	a5,a4,19d6c <dwarf::compilation_unit::get_line_table() const+0x234>
	    _M_destroy();
   19d52:	609c                	c.ld	a5,0(s1)
   19d54:	6f9c                	c.ld	a5,24(a5)
   19d56:	8526                	c.mv	a0,s1
   19d58:	9782                	c.jalr	a5
   19d5a:	a809                	c.j	19d6c <dwarf::compilation_unit::get_line_table() const+0x234>
      return __exchange_and_add(__mem, __val);
   19d5c:	55fd                	c.li	a1,-1
   19d5e:	03048513          	addi	a0,s1,48
   19d62:	88ffc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19d66:	4785                	c.li	a5,1
   19d68:	fcf501e3          	beq	a0,a5,19d2a <dwarf::compilation_unit::get_line_table() const+0x1f2>
	if (_M_pi != nullptr)
   19d6c:	74c6                	c.ldsp	s1,112(sp)
   19d6e:	cc99                	c.beqz	s1,19d8c <dwarf::compilation_unit::get_line_table() const+0x254>
    if (__is_single_threaded())
   19d70:	00020797          	auipc	a5,0x20
   19d74:	7287b783          	ld	a5,1832(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19d78:	0007c783          	lbu	a5,0(a5)
   19d7c:	c7c9                	c.beqz	a5,19e06 <dwarf::compilation_unit::get_line_table() const+0x2ce>
    _Atomic_word __result = *__mem;
   19d7e:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   19d80:	fff5079b          	addiw	a5,a0,-1
   19d84:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19d86:	4785                	c.li	a5,1
   19d88:	08f50563          	beq	a0,a5,19e12 <dwarf::compilation_unit::get_line_table() const+0x2da>
      { return _M_dataplus._M_p; }
   19d8c:	7562                	c.ldsp	a0,56(sp)
	if (!_M_is_local())
   19d8e:	00bc                	c.addi4spn	a5,sp,72
   19d90:	00f50463          	beq	a0,a5,19d98 <dwarf::compilation_unit::get_line_table() const+0x260>
   19d94:	a0dfc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   19d98:	6562                	c.ldsp	a0,24(sp)
	if (!_M_is_local())
   19d9a:	103c                	c.addi4spn	a5,sp,40
   19d9c:	00f50463          	beq	a0,a5,19da4 <dwarf::compilation_unit::get_line_table() const+0x26c>
   19da0:	a01fc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   19da4:	64c2                	c.ldsp	s1,16(sp)
   19da6:	da0485e3          	beq	s1,zero,19b50 <dwarf::compilation_unit::get_line_table() const+0x18>
    if (__is_single_threaded())
   19daa:	00020797          	auipc	a5,0x20
   19dae:	6ee7b783          	ld	a5,1774(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19db2:	0007c783          	lbu	a5,0(a5)
   19db6:	cfd1                	c.beqz	a5,19e52 <dwarf::compilation_unit::get_line_table() const+0x31a>
    _Atomic_word __result = *__mem;
   19db8:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   19dba:	fff5079b          	addiw	a5,a0,-1
   19dbe:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19dc0:	4785                	c.li	a5,1
   19dc2:	d8f517e3          	bne	a0,a5,19b50 <dwarf::compilation_unit::get_line_table() const+0x18>
	_M_dispose();
   19dc6:	609c                	c.ld	a5,0(s1)
   19dc8:	6b9c                	c.ld	a5,16(a5)
   19dca:	8526                	c.mv	a0,s1
   19dcc:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19dce:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19dd2:	00020797          	auipc	a5,0x20
   19dd6:	6c67b783          	ld	a5,1734(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19dda:	0007c783          	lbu	a5,0(a5)
   19dde:	c3c1                	c.beqz	a5,19e5e <dwarf::compilation_unit::get_line_table() const+0x326>
    _Atomic_word __result = *__mem;
   19de0:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   19de2:	fff7871b          	addiw	a4,a5,-1
   19de6:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19de8:	4705                	c.li	a4,1
   19dea:	d6e793e3          	bne	a5,a4,19b50 <dwarf::compilation_unit::get_line_table() const+0x18>
	    _M_destroy();
   19dee:	609c                	c.ld	a5,0(s1)
   19df0:	6f9c                	c.ld	a5,24(a5)
   19df2:	8526                	c.mv	a0,s1
   19df4:	9782                	c.jalr	a5
   19df6:	bba9                	c.j	19b50 <dwarf::compilation_unit::get_line_table() const+0x18>
      return __exchange_and_add(__mem, __val);
   19df8:	55fd                	c.li	a1,-1
   19dfa:	03448513          	addi	a0,s1,52
   19dfe:	ff2fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19e02:	87aa                	c.mv	a5,a0
   19e04:	b7a1                	c.j	19d4c <dwarf::compilation_unit::get_line_table() const+0x214>
   19e06:	55fd                	c.li	a1,-1
   19e08:	03048513          	addi	a0,s1,48
   19e0c:	fe4fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19e10:	bf9d                	c.j	19d86 <dwarf::compilation_unit::get_line_table() const+0x24e>
	_M_dispose();
   19e12:	609c                	c.ld	a5,0(s1)
   19e14:	6b9c                	c.ld	a5,16(a5)
   19e16:	8526                	c.mv	a0,s1
   19e18:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19e1a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19e1e:	00020797          	auipc	a5,0x20
   19e22:	67a7b783          	ld	a5,1658(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19e26:	0007c783          	lbu	a5,0(a5)
   19e2a:	cf89                	c.beqz	a5,19e44 <dwarf::compilation_unit::get_line_table() const+0x30c>
    _Atomic_word __result = *__mem;
   19e2c:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   19e2e:	fff7871b          	addiw	a4,a5,-1
   19e32:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19e34:	4705                	c.li	a4,1
   19e36:	f4e79be3          	bne	a5,a4,19d8c <dwarf::compilation_unit::get_line_table() const+0x254>
	    _M_destroy();
   19e3a:	609c                	c.ld	a5,0(s1)
   19e3c:	6f9c                	c.ld	a5,24(a5)
   19e3e:	8526                	c.mv	a0,s1
   19e40:	9782                	c.jalr	a5
   19e42:	b7a9                	c.j	19d8c <dwarf::compilation_unit::get_line_table() const+0x254>
      return __exchange_and_add(__mem, __val);
   19e44:	55fd                	c.li	a1,-1
   19e46:	03448513          	addi	a0,s1,52
   19e4a:	fa6fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19e4e:	87aa                	c.mv	a5,a0
   19e50:	b7d5                	c.j	19e34 <dwarf::compilation_unit::get_line_table() const+0x2fc>
   19e52:	55fd                	c.li	a1,-1
   19e54:	03048513          	addi	a0,s1,48
   19e58:	f98fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19e5c:	b795                	c.j	19dc0 <dwarf::compilation_unit::get_line_table() const+0x288>
   19e5e:	55fd                	c.li	a1,-1
   19e60:	03448513          	addi	a0,s1,52
   19e64:	f8cfc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19e68:	87aa                	c.mv	a5,a0
   19e6a:	bfbd                	c.j	19de8 <dwarf::compilation_unit::get_line_table() const+0x2b0>
	if (_M_pi != nullptr)
   19e6c:	6542                	c.ldsp	a0,16(sp)
   19e6e:	ce0501e3          	beq	a0,zero,19b50 <dwarf::compilation_unit::get_line_table() const+0x18>
	  _M_pi->_M_release();
   19e72:	00020317          	auipc	t1,0x20
   19e76:	56e33303          	ld	t1,1390(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   19e7a:	9302                	c.jalr	t1
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   19e7c:	b9d1                	c.j	19b50 <dwarf::compilation_unit::get_line_table() const+0x18>
    } catch (format_error &e) {
   19e7e:	4785                	c.li	a5,1
   19e80:	00f58d63          	beq	a1,a5,19e9a <dwarf::compilation_unit::get_line_table() const+0x362>
   19e84:	842a                	c.mv	s0,a0
	if (_M_pi != nullptr)
   19e86:	6542                	c.ldsp	a0,16(sp)
   19e88:	c511                	c.beqz	a0,19e94 <dwarf::compilation_unit::get_line_table() const+0x35c>
	  _M_pi->_M_release();
   19e8a:	00020317          	auipc	t1,0x20
   19e8e:	55633303          	ld	t1,1366(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   19e92:	9302                	c.jalr	t1
   19e94:	8522                	c.mv	a0,s0
   19e96:	afbfc0ef          	jal	ra,16990 <_Unwind_Resume@plt>
   19e9a:	fd6fc0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
    }
   19e9e:	a93fc0ef          	jal	ra,16930 <__cxa_end_catch@plt>
   19ea2:	b7e9                	c.j	19e6c <dwarf::compilation_unit::get_line_table() const+0x334>
      { return _M_dataplus._M_p; }
   19ea4:	842a                	c.mv	s0,a0
   19ea6:	7562                	c.ldsp	a0,56(sp)
	if (!_M_is_local())
   19ea8:	00bc                	c.addi4spn	a5,sp,72
   19eaa:	00f50463          	beq	a0,a5,19eb2 <dwarf::compilation_unit::get_line_table() const+0x37a>
   19eae:	8f3fc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   19eb2:	6562                	c.ldsp	a0,24(sp)
	if (!_M_is_local())
   19eb4:	103c                	c.addi4spn	a5,sp,40
   19eb6:	fcf508e3          	beq	a0,a5,19e86 <dwarf::compilation_unit::get_line_table() const+0x34e>
   19eba:	8e7fc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   19ebe:	b7e1                	c.j	19e86 <dwarf::compilation_unit::get_line_table() const+0x34e>
      { return _M_dataplus._M_p; }
   19ec0:	842a                	c.mv	s0,a0
   19ec2:	bfc5                	c.j	19eb2 <dwarf::compilation_unit::get_line_table() const+0x37a>
	if (_M_pi != nullptr)
   19ec4:	842a                	c.mv	s0,a0
   19ec6:	b7c1                	c.j	19e86 <dwarf::compilation_unit::get_line_table() const+0x34e>

0000000000019ec8 <dwarf::unit::get_abbrev(unsigned long) const>:
const abbrev_entry &unit::get_abbrev(abbrev_code acode) const {
   19ec8:	7159                	c.addi16sp	sp,-112
   19eca:	f486                	c.sdsp	ra,104(sp)
   19ecc:	f0a2                	c.sdsp	s0,96(sp)
   19ece:	eca6                	c.sdsp	s1,88(sp)
   19ed0:	842a                	c.mv	s0,a0
   19ed2:	e42e                	c.sdsp	a1,8(sp)
      { return _M_ptr; }
   19ed4:	6508                	c.ld	a0,8(a0)
  if (!m->have_abbrevs)
   19ed6:	13854783          	lbu	a5,312(a0)
   19eda:	cf9d                	c.beqz	a5,19f18 <dwarf::unit::get_abbrev(unsigned long) const+0x50>
   19edc:	6418                	c.ld	a4,8(s0)
      : _M_current(__i) { }
   19ede:	14073503          	ld	a0,320(a4)
   19ee2:	14873783          	ld	a5,328(a4)
  if (!m->abbrevs_vec.empty()) {
   19ee6:	02a78c63          	beq	a5,a0,19f1e <dwarf::unit::get_abbrev(unsigned long) const+0x56>
    if (acode >= m->abbrevs_vec.size())
   19eea:	6722                	c.ldsp	a4,8(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   19eec:	8f89                	c.sub	a5,a0
   19eee:	878d                	c.srai	a5,0x3
   19ef0:	00014697          	auipc	a3,0x14
   19ef4:	1106b683          	ld	a3,272(a3) # 2e000 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd8>
   19ef8:	02d787b3          	mul	a5,a5,a3
   19efc:	02f77d63          	bgeu	a4,a5,19f36 <dwarf::unit::get_abbrev(unsigned long) const+0x6e>
	return *(this->_M_impl._M_start + __n);
   19f00:	00271793          	slli	a5,a4,0x2
   19f04:	97ba                	c.add	a5,a4
   19f06:	078e                	c.slli	a5,0x3
   19f08:	953e                	c.add	a0,a5
    if (entry.code == 0)
   19f0a:	611c                	c.ld	a5,0(a0)
   19f0c:	c78d                	c.beqz	a5,19f36 <dwarf::unit::get_abbrev(unsigned long) const+0x6e>
}
   19f0e:	70a6                	c.ldsp	ra,104(sp)
   19f10:	7406                	c.ldsp	s0,96(sp)
   19f12:	64e6                	c.ldsp	s1,88(sp)
   19f14:	6165                	c.addi16sp	sp,112
   19f16:	8082                	c.jr	ra
    m->force_abbrevs();
   19f18:	84dff0ef          	jal	ra,19764 <dwarf::unit::impl::force_abbrevs()>
   19f1c:	b7c1                	c.j	19edc <dwarf::unit::get_abbrev(unsigned long) const+0x14>
      if (size() <= __small_size_threshold())
   19f1e:	17073783          	ld	a5,368(a4)
   19f22:	e795                	c.bnez	a5,19f4e <dwarf::unit::get_abbrev(unsigned long) const+0x86>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   19f24:	16873503          	ld	a0,360(a4)
	  for (auto __it = begin(); __it != end(); ++__it)
   19f28:	c519                	c.beqz	a0,19f36 <dwarf::unit::get_abbrev(unsigned long) const+0x6e>
   19f2a:	6722                	c.ldsp	a4,8(sp)
	    if (this->_M_key_equals(__k, *__it._M_cur))
   19f2c:	651c                	c.ld	a5,8(a0)
   19f2e:	04f70063          	beq	a4,a5,19f6e <dwarf::unit::get_abbrev(unsigned long) const+0xa6>
   19f32:	6108                	c.ld	a0,0(a0)
	  for (auto __it = begin(); __it != end(); ++__it)
   19f34:	fd65                	c.bnez	a0,19f2c <dwarf::unit::get_abbrev(unsigned long) const+0x64>
  throw format_error("unknown abbrev code 0x" + to_hex(acode));
   19f36:	4541                	c.li	a0,16
   19f38:	f58fc0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   19f3c:	84aa                	c.mv	s1,a0
   19f3e:	65a2                	c.ldsp	a1,8(sp)
   19f40:	0808                	c.addi4spn	a0,sp,16
   19f42:	00020317          	auipc	t1,0x20
   19f46:	3ce33303          	ld	t1,974(t1) # 3a310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1fa10>
   19f4a:	9302                	c.jalr	t1
   19f4c:	a01d                	c.j	19f72 <dwarf::unit::get_abbrev(unsigned long) const+0xaa>
	return _M_hash()(__k);
   19f4e:	66a2                	c.ldsp	a3,8(sp)
    { return __num % __den; }
   19f50:	16073583          	ld	a1,352(a4)
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   19f54:	0030                	c.addi4spn	a2,sp,8
   19f56:	02b6f5b3          	remu	a1,a3,a1
   19f5a:	15870513          	addi	a0,a4,344
   19f5e:	00020317          	auipc	t1,0x20
   19f62:	60233303          	ld	t1,1538(t1) # 3a560 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x1f4a2>
   19f66:	9302                	c.jalr	t1
	if (__before_n)
   19f68:	d579                	c.beqz	a0,19f36 <dwarf::unit::get_abbrev(unsigned long) const+0x6e>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   19f6a:	6108                	c.ld	a0,0(a0)
    if (it == m->abbrevs_map.end())
   19f6c:	d569                	c.beqz	a0,19f36 <dwarf::unit::get_abbrev(unsigned long) const+0x6e>
    return it->second;
   19f6e:	0541                	c.addi	a0,16
   19f70:	bf79                	c.j	19f0e <dwarf::unit::get_abbrev(unsigned long) const+0x46>
    { return std::move(__rhs.insert(0, __lhs)); }
   19f72:	00014617          	auipc	a2,0x14
   19f76:	e3e60613          	addi	a2,a2,-450 # 2ddb0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xe0>
   19f7a:	4581                	c.li	a1,0
   19f7c:	0808                	c.addi4spn	a0,sp,16
   19f7e:	e82fc0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   19f82:	85aa                	c.mv	a1,a0
   19f84:	1800                	c.addi4spn	s0,sp,48
   19f86:	8522                	c.mv	a0,s0
   19f88:	f48fc0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   19f8c:	85a2                	c.mv	a1,s0
   19f8e:	8526                	c.mv	a0,s1
   19f90:	8a1fc0ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   19f94:	00020797          	auipc	a5,0x20
   19f98:	5dc7b783          	ld	a5,1500(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   19f9c:	07c1                	c.addi	a5,16
   19f9e:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   19fa0:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   19fa2:	009c                	c.addi4spn	a5,sp,64
   19fa4:	00f50463          	beq	a0,a5,19fac <dwarf::unit::get_abbrev(unsigned long) const+0xe4>
   19fa8:	ff8fc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   19fac:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   19fae:	101c                	c.addi4spn	a5,sp,32
   19fb0:	00f50463          	beq	a0,a5,19fb8 <dwarf::unit::get_abbrev(unsigned long) const+0xf0>
   19fb4:	fecfc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
  throw format_error("unknown abbrev code 0x" + to_hex(acode));
   19fb8:	00020617          	auipc	a2,0x20
   19fbc:	3e063603          	ld	a2,992(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   19fc0:	00020597          	auipc	a1,0x20
   19fc4:	3085b583          	ld	a1,776(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   19fc8:	8526                	c.mv	a0,s1
   19fca:	997fc0ef          	jal	ra,16960 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   19fce:	842a                	c.mv	s0,a0
   19fd0:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   19fd2:	009c                	c.addi4spn	a5,sp,64
   19fd4:	00f50463          	beq	a0,a5,19fdc <dwarf::unit::get_abbrev(unsigned long) const+0x114>
   19fd8:	fc8fc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   19fdc:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   19fde:	101c                	c.addi4spn	a5,sp,32
   19fe0:	00f50463          	beq	a0,a5,19fe8 <dwarf::unit::get_abbrev(unsigned long) const+0x120>
   19fe4:	fbcfc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   19fe8:	8526                	c.mv	a0,s1
   19fea:	f66fc0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   19fee:	8522                	c.mv	a0,s0
   19ff0:	9a1fc0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   19ff4:	842a                	c.mv	s0,a0
   19ff6:	b7dd                	c.j	19fdc <dwarf::unit::get_abbrev(unsigned long) const+0x114>
   19ff8:	842a                	c.mv	s0,a0
   19ffa:	b7fd                	c.j	19fe8 <dwarf::unit::get_abbrev(unsigned long) const+0x120>

0000000000019ffc <dwarf::type_unit::type() const>:

const die &type_unit::type() const {
   19ffc:	7171                	c.addi16sp	sp,-176
   19ffe:	f506                	c.sdsp	ra,168(sp)
   1a000:	f122                	c.sdsp	s0,160(sp)
   1a002:	ed26                	c.sdsp	s1,152(sp)
   1a004:	e94a                	c.sdsp	s2,144(sp)
   1a006:	e54e                	c.sdsp	s3,136(sp)
   1a008:	e152                	c.sdsp	s4,128(sp)
   1a00a:	fcd6                	c.sdsp	s5,120(sp)
   1a00c:	f8da                	c.sdsp	s6,112(sp)
   1a00e:	84aa                	c.mv	s1,a0
   1a010:	6508                	c.ld	a0,8(a0)
  if (!m->type.valid()) {
   1a012:	657c                	c.ld	a5,200(a0)
   1a014:	cf91                	c.beqz	a5,1a030 <dwarf::type_unit::type() const+0x34>
    m->force_abbrevs();
    m->type = die(this);
    m->type.read(m->type_offset);
  }
  return m->type;
   1a016:	6488                	c.ld	a0,8(s1)
   1a018:	0b850513          	addi	a0,a0,184
}
   1a01c:	70aa                	c.ldsp	ra,168(sp)
   1a01e:	740a                	c.ldsp	s0,160(sp)
   1a020:	64ea                	c.ldsp	s1,152(sp)
   1a022:	694a                	c.ldsp	s2,144(sp)
   1a024:	69aa                	c.ldsp	s3,136(sp)
   1a026:	6a0a                	c.ldsp	s4,128(sp)
   1a028:	7ae6                	c.ldsp	s5,120(sp)
   1a02a:	7b46                	c.ldsp	s6,112(sp)
   1a02c:	614d                	c.addi16sp	sp,176
   1a02e:	8082                	c.jr	ra
    m->force_abbrevs();
   1a030:	f34ff0ef          	jal	ra,19764 <dwarf::unit::impl::force_abbrevs()>
   1a034:	6480                	c.ld	s0,8(s1)
    m->type = die(this);
   1a036:	85a6                	c.mv	a1,s1
   1a038:	850a                	c.mv	a0,sp
   1a03a:	4cf010ef          	jal	ra,1bd08 <dwarf::die::die(dwarf::unit const*)>
  die &operator=(die &&o) = default;
   1a03e:	4782                	c.lwsp	a5,0(sp)
   1a040:	0af42c23          	sw	a5,184(s0)
   1a044:	67a2                	c.ldsp	a5,8(sp)
   1a046:	e07c                	c.sd	a5,192(s0)
   1a048:	67c2                	c.ldsp	a5,16(sp)
   1a04a:	e47c                	c.sd	a5,200(s0)
   1a04c:	67e2                	c.ldsp	a5,24(sp)
   1a04e:	e87c                	c.sd	a5,208(s0)
  size_type size() const { return end - base; }
   1a050:	69e6                	c.ldsp	s3,88(sp)
   1a052:	67c6                	c.ldsp	a5,80(sp)
   1a054:	40f989b3          	sub	s3,s3,a5
   1a058:	4039d913          	srai	s2,s3,0x3
    for (T *p = base; p < end; ++p)
   1a05c:	10843683          	ld	a3,264(s0)
   1a060:	11043783          	ld	a5,272(s0)
   1a064:	00f6f863          	bgeu	a3,a5,1a074 <dwarf::type_unit::type() const+0x78>
   1a068:	87b6                	c.mv	a5,a3
   1a06a:	07a1                	c.addi	a5,8
   1a06c:	11043703          	ld	a4,272(s0)
   1a070:	fee7ede3          	bltu	a5,a4,1a06a <dwarf::type_unit::type() const+0x6e>
    end = base;
   1a074:	10d43823          	sd	a3,272(s0)
    if (n <= (size_type)(cap - base))
   1a078:	11843503          	ld	a0,280(s0)
   1a07c:	8d15                	c.sub	a0,a3
   1a07e:	05357c63          	bgeu	a0,s3,1a0d6 <dwarf::type_unit::type() const+0xda>
   1a082:	850d                	c.srai	a0,0x3
   1a084:	e111                	c.bnez	a0,1a088 <dwarf::type_unit::type() const+0x8c>
   1a086:	4505                	c.li	a0,1
    while (target < n)
   1a088:	01257563          	bgeu	a0,s2,1a092 <dwarf::type_unit::type() const+0x96>
      target <<= 1;
   1a08c:	0506                	c.slli	a0,0x1
    while (target < n)
   1a08e:	ff256fe3          	bltu	a0,s2,1a08c <dwarf::type_unit::type() const+0x90>
    char *newbuf = new char[sizeof(T[target])];
   1a092:	00351a13          	slli	s4,a0,0x3
   1a096:	8552                	c.mv	a0,s4
   1a098:	cf8fc0ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   1a09c:	8b2a                	c.mv	s6,a0
    T *src = base, *dest = (T *)newbuf;
   1a09e:	10843503          	ld	a0,264(s0)
    for (; src < end; src++, dest++) {
   1a0a2:	11043783          	ld	a5,272(s0)
   1a0a6:	08f57663          	bgeu	a0,a5,1a132 <dwarf::type_unit::type() const+0x136>
    T *src = base, *dest = (T *)newbuf;
   1a0aa:	87aa                	c.mv	a5,a0
   1a0ac:	8ada                	c.mv	s5,s6
    for (; src < end; src++, dest++) {
   1a0ae:	07a1                	c.addi	a5,8
   1a0b0:	0aa1                	c.addi	s5,8
   1a0b2:	11043703          	ld	a4,272(s0)
   1a0b6:	fee7ece3          	bltu	a5,a4,1a0ae <dwarf::type_unit::type() const+0xb2>
   1a0ba:	0d840793          	addi	a5,s0,216
    if ((char *)base != buf)
   1a0be:	00f50563          	beq	a0,a5,1a0c8 <dwarf::type_unit::type() const+0xcc>
      delete[] (char *)base;
   1a0c2:	c119                	c.beqz	a0,1a0c8 <dwarf::type_unit::type() const+0xcc>
   1a0c4:	f8cfc0ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1a0c8:	11643423          	sd	s6,264(s0)
    end = dest;
   1a0cc:	11543823          	sd	s5,272(s0)
    cap = base + target;
   1a0d0:	9b52                	c.add	s6,s4
   1a0d2:	11643c23          	sd	s6,280(s0)
    for (size_type i = 0; i < osize; i++)
   1a0d6:	00090f63          	beq	s2,zero,1a0f4 <dwarf::type_unit::type() const+0xf8>
   1a0da:	4781                	c.li	a5,0
   1a0dc:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1a0e0:	6746                	c.ldsp	a4,80(sp)
   1a0e2:	9736                	c.add	a4,a3
   1a0e4:	6310                	c.ld	a2,0(a4)
   1a0e6:	10843703          	ld	a4,264(s0)
   1a0ea:	9736                	c.add	a4,a3
   1a0ec:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1a0ee:	0785                	c.addi	a5,1
   1a0f0:	fef916e3          	bne	s2,a5,1a0dc <dwarf::type_unit::type() const+0xe0>
    end = base + osize;
   1a0f4:	10843783          	ld	a5,264(s0)
   1a0f8:	97ce                	c.add	a5,s3
   1a0fa:	10f43823          	sd	a5,272(s0)
   1a0fe:	77a6                	c.ldsp	a5,104(sp)
   1a100:	12f43023          	sd	a5,288(s0)
    for (T *p = base; p < end; ++p)
   1a104:	6546                	c.ldsp	a0,80(sp)
   1a106:	67e6                	c.ldsp	a5,88(sp)
   1a108:	00f57763          	bgeu	a0,a5,1a116 <dwarf::type_unit::type() const+0x11a>
   1a10c:	87aa                	c.mv	a5,a0
   1a10e:	07a1                	c.addi	a5,8
   1a110:	6766                	c.ldsp	a4,88(sp)
   1a112:	fee7eee3          	bltu	a5,a4,1a10e <dwarf::type_unit::type() const+0x112>
    end = base;
   1a116:	ecaa                	c.sdsp	a0,88(sp)
    if ((char *)base != buf)
   1a118:	101c                	c.addi4spn	a5,sp,32
   1a11a:	00f50563          	beq	a0,a5,1a124 <dwarf::type_unit::type() const+0x128>
      delete[] (char *)base;
   1a11e:	c119                	c.beqz	a0,1a124 <dwarf::type_unit::type() const+0x128>
   1a120:	f30fc0ef          	jal	ra,16850 <operator delete[](void*)@plt>
   1a124:	6488                	c.ld	a0,8(s1)
    m->type.read(m->type_offset);
   1a126:	612c                	c.ld	a1,64(a0)
   1a128:	0b850513          	addi	a0,a0,184
   1a12c:	411010ef          	jal	ra,1bd3c <dwarf::die::read(unsigned long)>
   1a130:	b5dd                	c.j	1a016 <dwarf::type_unit::type() const+0x1a>
    T *src = base, *dest = (T *)newbuf;
   1a132:	8ada                	c.mv	s5,s6
   1a134:	b759                	c.j	1a0ba <dwarf::type_unit::type() const+0xbe>
class die {
   1a136:	842a                	c.mv	s0,a0
   1a138:	1008                	c.addi4spn	a0,sp,32
   1a13a:	00020317          	auipc	t1,0x20
   1a13e:	2c633303          	ld	t1,710(t1) # 3a400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x22e14>
   1a142:	9302                	c.jalr	t1
   1a144:	8522                	c.mv	a0,s0
   1a146:	84bfc0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001a14a <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   1a14a:	8082                	c.jr	ra

000000000001a14c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   1a14c:	8082                	c.jr	ra

000000000001a14e <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   1a14e:	8082                	c.jr	ra

000000000001a150 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      }
   1a150:	8082                	c.jr	ra

000000000001a152 <dwarf::format_error::~format_error()>:
class format_error : public std::runtime_error {
   1a152:	1141                	c.addi	sp,-16
   1a154:	e406                	c.sdsp	ra,8(sp)
   1a156:	00020797          	auipc	a5,0x20
   1a15a:	41a7b783          	ld	a5,1050(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   1a15e:	07c1                	c.addi	a5,16
   1a160:	e11c                	c.sd	a5,0(a0)
   1a162:	e6efc0ef          	jal	ra,167d0 <std::runtime_error::~runtime_error()@plt>
   1a166:	60a2                	c.ldsp	ra,8(sp)
   1a168:	0141                	c.addi	sp,16
   1a16a:	8082                	c.jr	ra

000000000001a16c <dwarf::format_error::~format_error()>:
   1a16c:	1141                	c.addi	sp,-16
   1a16e:	e406                	c.sdsp	ra,8(sp)
   1a170:	e022                	c.sdsp	s0,0(sp)
   1a172:	842a                	c.mv	s0,a0
   1a174:	00020797          	auipc	a5,0x20
   1a178:	3fc7b783          	ld	a5,1020(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   1a17c:	07c1                	c.addi	a5,16
   1a17e:	e11c                	c.sd	a5,0(a0)
   1a180:	e50fc0ef          	jal	ra,167d0 <std::runtime_error::~runtime_error()@plt>
   1a184:	8522                	c.mv	a0,s0
   1a186:	e1afc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1a18a:	60a2                	c.ldsp	ra,8(sp)
   1a18c:	6402                	c.ldsp	s0,0(sp)
   1a18e:	0141                	c.addi	sp,16
   1a190:	8082                	c.jr	ra

000000000001a192 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   1a192:	1141                	c.addi	sp,-16
   1a194:	e406                	c.sdsp	ra,8(sp)
   1a196:	e0afc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1a19a:	60a2                	c.ldsp	ra,8(sp)
   1a19c:	0141                	c.addi	sp,16
   1a19e:	8082                	c.jr	ra

000000000001a1a0 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   1a1a0:	1141                	c.addi	sp,-16
   1a1a2:	e406                	c.sdsp	ra,8(sp)
   1a1a4:	dfcfc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1a1a8:	60a2                	c.ldsp	ra,8(sp)
   1a1aa:	0141                	c.addi	sp,16
   1a1ac:	8082                	c.jr	ra

000000000001a1ae <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   1a1ae:	1141                	c.addi	sp,-16
   1a1b0:	e406                	c.sdsp	ra,8(sp)
   1a1b2:	deefc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1a1b6:	60a2                	c.ldsp	ra,8(sp)
   1a1b8:	0141                	c.addi	sp,16
   1a1ba:	8082                	c.jr	ra

000000000001a1bc <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()>:
      ~vector() _GLIBCXX_NOEXCEPT
   1a1bc:	1101                	c.addi	sp,-32
   1a1be:	ec06                	c.sdsp	ra,24(sp)
   1a1c0:	e822                	c.sdsp	s0,16(sp)
   1a1c2:	e426                	c.sdsp	s1,8(sp)
   1a1c4:	e04a                	c.sdsp	s2,0(sp)
   1a1c6:	892a                	c.mv	s2,a0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1a1c8:	6100                	c.ld	s0,0(a0)
   1a1ca:	6504                	c.ld	s1,8(a0)
   1a1cc:	00940963          	beq	s0,s1,1a1de <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()+0x22>
      __pointer->~_Tp();
   1a1d0:	601c                	c.ld	a5,0(s0)
   1a1d2:	639c                	c.ld	a5,0(a5)
   1a1d4:	8522                	c.mv	a0,s0
   1a1d6:	9782                	c.jalr	a5
	  for (; __first != __last; ++__first)
   1a1d8:	0461                	c.addi	s0,24
   1a1da:	fe849be3          	bne	s1,s0,1a1d0 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()+0x14>
	_M_deallocate(_M_impl._M_start,
   1a1de:	00093503          	ld	a0,0(s2)
	if (__p)
   1a1e2:	c119                	c.beqz	a0,1a1e8 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()+0x2c>
   1a1e4:	dbcfc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   1a1e8:	60e2                	c.ldsp	ra,24(sp)
   1a1ea:	6442                	c.ldsp	s0,16(sp)
   1a1ec:	64a2                	c.ldsp	s1,8(sp)
   1a1ee:	6902                	c.ldsp	s2,0(sp)
   1a1f0:	6105                	c.addi16sp	sp,32
   1a1f2:	8082                	c.jr	ra

000000000001a1f4 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   1a1f4:	1141                	c.addi	sp,-16
   1a1f6:	e406                	c.sdsp	ra,8(sp)
   1a1f8:	da8fc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   1a1fc:	60a2                	c.ldsp	ra,8(sp)
   1a1fe:	0141                	c.addi	sp,16
   1a200:	8082                	c.jr	ra

000000000001a202 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   1a202:	1141                	c.addi	sp,-16
   1a204:	e406                	c.sdsp	ra,8(sp)
   1a206:	d9afc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   1a20a:	60a2                	c.ldsp	ra,8(sp)
   1a20c:	0141                	c.addi	sp,16
   1a20e:	8082                	c.jr	ra

000000000001a210 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   1a210:	1141                	c.addi	sp,-16
   1a212:	e406                	c.sdsp	ra,8(sp)
   1a214:	d8cfc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   1a218:	60a2                	c.ldsp	ra,8(sp)
   1a21a:	0141                	c.addi	sp,16
   1a21c:	8082                	c.jr	ra

000000000001a21e <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   1a21e:	1141                	c.addi	sp,-16
   1a220:	e406                	c.sdsp	ra,8(sp)
   1a222:	e022                	c.sdsp	s0,0(sp)
   1a224:	03850413          	addi	s0,a0,56
	    ||
   1a228:	00020797          	auipc	a5,0x20
   1a22c:	3287b783          	ld	a5,808(a5) # 3a550 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc880>
   1a230:	02f58a63          	beq	a1,a5,1a264 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   1a234:	6588                	c.ld	a0,8(a1)
   1a236:	00020797          	auipc	a5,0x20
   1a23a:	1f27b783          	ld	a5,498(a5) # 3a428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc948>
   1a23e:	02f50363          	beq	a0,a5,1a264 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   1a242:	00054703          	lbu	a4,0(a0)
   1a246:	02a00793          	addi	a5,zero,42
   1a24a:	02f70263          	beq	a4,a5,1a26e <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   1a24e:	00020597          	auipc	a1,0x20
   1a252:	1da5b583          	ld	a1,474(a1) # 3a428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc948>
   1a256:	b7afc0ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   1a25a:	00153513          	sltiu	a0,a0,1
   1a25e:	40a00533          	sub	a0,zero,a0
   1a262:	8c69                	c.and	s0,a0
      }
   1a264:	8522                	c.mv	a0,s0
   1a266:	60a2                	c.ldsp	ra,8(sp)
   1a268:	6402                	c.ldsp	s0,0(sp)
   1a26a:	0141                	c.addi	sp,16
   1a26c:	8082                	c.jr	ra
	return nullptr;
   1a26e:	4401                	c.li	s0,0
   1a270:	bfd5                	c.j	1a264 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000001a272 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   1a272:	1141                	c.addi	sp,-16
   1a274:	e406                	c.sdsp	ra,8(sp)
   1a276:	e022                	c.sdsp	s0,0(sp)
   1a278:	03850413          	addi	s0,a0,56
	    ||
   1a27c:	00020797          	auipc	a5,0x20
   1a280:	2d47b783          	ld	a5,724(a5) # 3a550 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc880>
   1a284:	02f58a63          	beq	a1,a5,1a2b8 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   1a288:	6588                	c.ld	a0,8(a1)
   1a28a:	00020797          	auipc	a5,0x20
   1a28e:	19e7b783          	ld	a5,414(a5) # 3a428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc948>
   1a292:	02f50363          	beq	a0,a5,1a2b8 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   1a296:	00054703          	lbu	a4,0(a0)
   1a29a:	02a00793          	addi	a5,zero,42
   1a29e:	02f70263          	beq	a4,a5,1a2c2 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   1a2a2:	00020597          	auipc	a1,0x20
   1a2a6:	1865b583          	ld	a1,390(a1) # 3a428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc948>
   1a2aa:	b26fc0ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   1a2ae:	00153513          	sltiu	a0,a0,1
   1a2b2:	40a00533          	sub	a0,zero,a0
   1a2b6:	8c69                	c.and	s0,a0
      }
   1a2b8:	8522                	c.mv	a0,s0
   1a2ba:	60a2                	c.ldsp	ra,8(sp)
   1a2bc:	6402                	c.ldsp	s0,0(sp)
   1a2be:	0141                	c.addi	sp,16
   1a2c0:	8082                	c.jr	ra
	return nullptr;
   1a2c2:	4401                	c.li	s0,0
   1a2c4:	bfd5                	c.j	1a2b8 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000001a2c6 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   1a2c6:	1141                	c.addi	sp,-16
   1a2c8:	e406                	c.sdsp	ra,8(sp)
   1a2ca:	e022                	c.sdsp	s0,0(sp)
   1a2cc:	03850413          	addi	s0,a0,56
	    ||
   1a2d0:	00020797          	auipc	a5,0x20
   1a2d4:	2807b783          	ld	a5,640(a5) # 3a550 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc880>
   1a2d8:	02f58a63          	beq	a1,a5,1a30c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   1a2dc:	6588                	c.ld	a0,8(a1)
   1a2de:	00020797          	auipc	a5,0x20
   1a2e2:	14a7b783          	ld	a5,330(a5) # 3a428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc948>
   1a2e6:	02f50363          	beq	a0,a5,1a30c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   1a2ea:	00054703          	lbu	a4,0(a0)
   1a2ee:	02a00793          	addi	a5,zero,42
   1a2f2:	02f70263          	beq	a4,a5,1a316 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   1a2f6:	00020597          	auipc	a1,0x20
   1a2fa:	1325b583          	ld	a1,306(a1) # 3a428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc948>
   1a2fe:	ad2fc0ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   1a302:	00153513          	sltiu	a0,a0,1
   1a306:	40a00533          	sub	a0,zero,a0
   1a30a:	8c69                	c.and	s0,a0
      }
   1a30c:	8522                	c.mv	a0,s0
   1a30e:	60a2                	c.ldsp	ra,8(sp)
   1a310:	6402                	c.ldsp	s0,0(sp)
   1a312:	0141                	c.addi	sp,16
   1a314:	8082                	c.jr	ra
	return nullptr;
   1a316:	4401                	c.li	s0,0
   1a318:	bfd5                	c.j	1a30c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000001a31a <std::__cxx11::to_string(int)>:
  inline string
  to_string(int __val)
#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_INT__) <= 32
  noexcept // any 32-bit value fits in the SSO buffer
#endif
  {
   1a31a:	7179                	c.addi16sp	sp,-48
   1a31c:	f406                	c.sdsp	ra,40(sp)
   1a31e:	f022                	c.sdsp	s0,32(sp)
   1a320:	ec26                	c.sdsp	s1,24(sp)
   1a322:	e84a                	c.sdsp	s2,16(sp)
   1a324:	e44e                	c.sdsp	s3,8(sp)
   1a326:	892a                	c.mv	s2,a0
    const bool __neg = __val < 0;
   1a328:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   1a32c:	0005849b          	addiw	s1,a1,0
   1a330:	0405ce63          	blt	a1,zero,1a38c <std::__cxx11::to_string(int)+0x72>
      const unsigned __b2 = __base  * __base;
      const unsigned __b3 = __b2 * __base;
      const unsigned long __b4 = __b3 * __base;
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
   1a334:	47a5                	c.li	a5,9
   1a336:	1497fb63          	bgeu	a5,s1,1a48c <std::__cxx11::to_string(int)+0x172>
	  if (__value < __b2) return __n + 1;
   1a33a:	06300793          	addi	a5,zero,99
   1a33e:	0497fa63          	bgeu	a5,s1,1a392 <std::__cxx11::to_string(int)+0x78>
	  if (__value < __b3) return __n + 2;
   1a342:	3e700793          	addi	a5,zero,999
   1a346:	0697ff63          	bgeu	a5,s1,1a3c4 <std::__cxx11::to_string(int)+0xaa>
	  if (__value < __b4) return __n + 3;
   1a34a:	02049713          	slli	a4,s1,0x20
   1a34e:	9301                	c.srli	a4,0x20
   1a350:	6789                	c.lui	a5,0x2
   1a352:	70f78793          	addi	a5,a5,1807 # 270f <__abi_tag-0xdb85>
   1a356:	1297f963          	bgeu	a5,s1,1a488 <std::__cxx11::to_string(int)+0x16e>
      unsigned __n = 1;
   1a35a:	4405                	c.li	s0,1
	  __value /= __b4;
   1a35c:	6689                	c.lui	a3,0x2
   1a35e:	71068593          	addi	a1,a3,1808 # 2710 <__abi_tag-0xdb84>
	  if (__value < (unsigned)__base) return __n;
   1a362:	4625                	c.li	a2,9
	  if (__value < __b2) return __n + 1;
   1a364:	06300513          	addi	a0,zero,99
	  if (__value < __b3) return __n + 2;
   1a368:	3e700813          	addi	a6,zero,999
	  if (__value < __b4) return __n + 3;
   1a36c:	86be                	c.mv	a3,a5
	  __value /= __b4;
   1a36e:	02b75733          	divu	a4,a4,a1
   1a372:	0007079b          	addiw	a5,a4,0
	  __n += 4;
   1a376:	2411                	c.addiw	s0,4
	  if (__value < (unsigned)__base) return __n;
   1a378:	04f67863          	bgeu	a2,a5,1a3c8 <std::__cxx11::to_string(int)+0xae>
	  if (__value < __b2) return __n + 1;
   1a37c:	00f57c63          	bgeu	a0,a5,1a394 <std::__cxx11::to_string(int)+0x7a>
	  if (__value < __b3) return __n + 2;
   1a380:	04f87363          	bgeu	a6,a5,1a3c6 <std::__cxx11::to_string(int)+0xac>
	  if (__value < __b4) return __n + 3;
   1a384:	fef6e5e3          	bltu	a3,a5,1a36e <std::__cxx11::to_string(int)+0x54>
   1a388:	240d                	c.addiw	s0,3
   1a38a:	a83d                	c.j	1a3c8 <std::__cxx11::to_string(int)+0xae>
   1a38c:	40b004bb          	subw	s1,zero,a1
   1a390:	b755                	c.j	1a334 <std::__cxx11::to_string(int)+0x1a>
      unsigned __n = 1;
   1a392:	4405                	c.li	s0,1
	  if (__value < __b2) return __n + 1;
   1a394:	2405                	c.addiw	s0,1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1a396:	01090793          	addi	a5,s2,16
	: allocator_type(__a), _M_p(__dat) { }
   1a39a:	00f93023          	sd	a5,0(s2)
    const auto __len = __detail::__to_chars_len(__uval);
    string __str(__neg + __len, '-');
   1a39e:	008985bb          	addw	a1,s3,s0
      { _M_construct(__n, __c); }
   1a3a2:	02d00613          	addi	a2,zero,45
   1a3a6:	1582                	c.slli	a1,0x20
   1a3a8:	9181                	c.srli	a1,0x20
   1a3aa:	854a                	c.mv	a0,s2
   1a3ac:	c54fc0ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
	return _M_data()[__pos];
   1a3b0:	00093583          	ld	a1,0(s2)
   1a3b4:	95ce                	c.add	a1,s3
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
      while (__val >= 100)
   1a3b6:	06300793          	addi	a5,zero,99
   1a3ba:	0897f663          	bgeu	a5,s1,1a446 <std::__cxx11::to_string(int)+0x12c>
      unsigned __pos = __len - 1;
   1a3be:	fff4071b          	addiw	a4,s0,-1
   1a3c2:	a02d                	c.j	1a3ec <std::__cxx11::to_string(int)+0xd2>
      unsigned __n = 1;
   1a3c4:	4405                	c.li	s0,1
	  if (__value < __b3) return __n + 2;
   1a3c6:	2409                	c.addiw	s0,2
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1a3c8:	01090793          	addi	a5,s2,16
	: allocator_type(__a), _M_p(__dat) { }
   1a3cc:	00f93023          	sd	a5,0(s2)
    string __str(__neg + __len, '-');
   1a3d0:	008985bb          	addw	a1,s3,s0
      { _M_construct(__n, __c); }
   1a3d4:	02d00613          	addi	a2,zero,45
   1a3d8:	1582                	c.slli	a1,0x20
   1a3da:	9181                	c.srli	a1,0x20
   1a3dc:	854a                	c.mv	a0,s2
   1a3de:	c22fc0ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
	return _M_data()[__pos];
   1a3e2:	00093583          	ld	a1,0(s2)
   1a3e6:	95ce                	c.add	a1,s3
      unsigned __pos = __len - 1;
   1a3e8:	fff4071b          	addiw	a4,s0,-1
	{
	  auto const __num = (__val % 100) * 2;
   1a3ec:	06400813          	addi	a6,zero,100
	  __val /= 100;
	  __first[__pos] = __digits[__num + 1];
   1a3f0:	00020517          	auipc	a0,0x20
   1a3f4:	f8853503          	ld	a0,-120(a0) # 3a378 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xc450>
      while (__val >= 100)
   1a3f8:	6309                	c.lui	t1,0x2
   1a3fa:	70f30313          	addi	t1,t1,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   1a3fe:	0304f7bb          	remuw	a5,s1,a6
   1a402:	0017979b          	slliw	a5,a5,0x1
   1a406:	0004889b          	addiw	a7,s1,0
	  __val /= 100;
   1a40a:	0304d4bb          	divuw	s1,s1,a6
	  __first[__pos] = __digits[__num + 1];
   1a40e:	02071613          	slli	a2,a4,0x20
   1a412:	9201                	c.srli	a2,0x20
   1a414:	962e                	c.add	a2,a1
   1a416:	0017869b          	addiw	a3,a5,1
   1a41a:	1682                	c.slli	a3,0x20
   1a41c:	9281                	c.srli	a3,0x20
   1a41e:	96aa                	c.add	a3,a0
   1a420:	0006c683          	lbu	a3,0(a3)
   1a424:	00d60023          	sb	a3,0(a2)
	  __first[__pos - 1] = __digits[__num];
   1a428:	fff7069b          	addiw	a3,a4,-1
   1a42c:	1682                	c.slli	a3,0x20
   1a42e:	9281                	c.srli	a3,0x20
   1a430:	96ae                	c.add	a3,a1
   1a432:	1782                	c.slli	a5,0x20
   1a434:	9381                	c.srli	a5,0x20
   1a436:	97aa                	c.add	a5,a0
   1a438:	0007c783          	lbu	a5,0(a5)
   1a43c:	00f68023          	sb	a5,0(a3)
	  __pos -= 2;
   1a440:	3779                	c.addiw	a4,-2
      while (__val >= 100)
   1a442:	fb136ee3          	bltu	t1,a7,1a3fe <std::__cxx11::to_string(int)+0xe4>
	}
      if (__val >= 10)
   1a446:	47a5                	c.li	a5,9
   1a448:	0497f463          	bgeu	a5,s1,1a490 <std::__cxx11::to_string(int)+0x176>
	{
	  auto const __num = __val * 2;
   1a44c:	0014949b          	slliw	s1,s1,0x1
	  __first[1] = __digits[__num + 1];
   1a450:	00020717          	auipc	a4,0x20
   1a454:	f2873703          	ld	a4,-216(a4) # 3a378 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xc450>
   1a458:	0014879b          	addiw	a5,s1,1
   1a45c:	1782                	c.slli	a5,0x20
   1a45e:	9381                	c.srli	a5,0x20
   1a460:	97ba                	c.add	a5,a4
   1a462:	0007c783          	lbu	a5,0(a5)
   1a466:	00f580a3          	sb	a5,1(a1)
	  __first[0] = __digits[__num];
   1a46a:	1482                	c.slli	s1,0x20
   1a46c:	9081                	c.srli	s1,0x20
   1a46e:	9726                	c.add	a4,s1
   1a470:	00074483          	lbu	s1,0(a4)
   1a474:	00958023          	sb	s1,0(a1)
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
    return __str;
  }
   1a478:	854a                	c.mv	a0,s2
   1a47a:	70a2                	c.ldsp	ra,40(sp)
   1a47c:	7402                	c.ldsp	s0,32(sp)
   1a47e:	64e2                	c.ldsp	s1,24(sp)
   1a480:	6942                	c.ldsp	s2,16(sp)
   1a482:	69a2                	c.ldsp	s3,8(sp)
   1a484:	6145                	c.addi16sp	sp,48
   1a486:	8082                	c.jr	ra
      unsigned __n = 1;
   1a488:	4405                	c.li	s0,1
   1a48a:	bdfd                	c.j	1a388 <std::__cxx11::to_string(int)+0x6e>
   1a48c:	4405                	c.li	s0,1
   1a48e:	b721                	c.j	1a396 <std::__cxx11::to_string(int)+0x7c>
	}
      else
	__first[0] = '0' + __val;
   1a490:	0304849b          	addiw	s1,s1,48
   1a494:	0ff4f493          	andi	s1,s1,255
   1a498:	bff1                	c.j	1a474 <std::__cxx11::to_string(int)+0x15a>

000000000001a49a <dwarf::type_unit::~type_unit()>:
class type_unit : public unit {
   1a49a:	1141                	c.addi	sp,-16
   1a49c:	e406                	c.sdsp	ra,8(sp)
   1a49e:	00020797          	auipc	a5,0x20
   1a4a2:	ed27b783          	ld	a5,-302(a5) # 3a370 <vtable for dwarf::type_unit@@Base+0xa00>
   1a4a6:	07c1                	c.addi	a5,16
   1a4a8:	e11c                	c.sd	a5,0(a0)
   1a4aa:	de6fd0ef          	jal	ra,17a90 <dwarf::unit::~unit()>
   1a4ae:	60a2                	c.ldsp	ra,8(sp)
   1a4b0:	0141                	c.addi	sp,16
   1a4b2:	8082                	c.jr	ra

000000000001a4b4 <dwarf::type_unit::~type_unit()>:
   1a4b4:	1141                	c.addi	sp,-16
   1a4b6:	e406                	c.sdsp	ra,8(sp)
   1a4b8:	e022                	c.sdsp	s0,0(sp)
   1a4ba:	842a                	c.mv	s0,a0
   1a4bc:	00020797          	auipc	a5,0x20
   1a4c0:	eb47b783          	ld	a5,-332(a5) # 3a370 <vtable for dwarf::type_unit@@Base+0xa00>
   1a4c4:	07c1                	c.addi	a5,16
   1a4c6:	e11c                	c.sd	a5,0(a0)
   1a4c8:	dc8fd0ef          	jal	ra,17a90 <dwarf::unit::~unit()>
   1a4cc:	8522                	c.mv	a0,s0
   1a4ce:	ad2fc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1a4d2:	60a2                	c.ldsp	ra,8(sp)
   1a4d4:	6402                	c.ldsp	s0,0(sp)
   1a4d6:	0141                	c.addi	sp,16
   1a4d8:	8082                	c.jr	ra

000000000001a4da <dwarf::compilation_unit::~compilation_unit()>:
class compilation_unit : public unit {
   1a4da:	1141                	c.addi	sp,-16
   1a4dc:	e406                	c.sdsp	ra,8(sp)
   1a4de:	00020797          	auipc	a5,0x20
   1a4e2:	df27b783          	ld	a5,-526(a5) # 3a2d0 <vtable for dwarf::compilation_unit@@Base+0x980>
   1a4e6:	07c1                	c.addi	a5,16
   1a4e8:	e11c                	c.sd	a5,0(a0)
   1a4ea:	da6fd0ef          	jal	ra,17a90 <dwarf::unit::~unit()>
   1a4ee:	60a2                	c.ldsp	ra,8(sp)
   1a4f0:	0141                	c.addi	sp,16
   1a4f2:	8082                	c.jr	ra

000000000001a4f4 <dwarf::compilation_unit::~compilation_unit()>:
   1a4f4:	1141                	c.addi	sp,-16
   1a4f6:	e406                	c.sdsp	ra,8(sp)
   1a4f8:	e022                	c.sdsp	s0,0(sp)
   1a4fa:	842a                	c.mv	s0,a0
   1a4fc:	00020797          	auipc	a5,0x20
   1a500:	dd47b783          	ld	a5,-556(a5) # 3a2d0 <vtable for dwarf::compilation_unit@@Base+0x980>
   1a504:	07c1                	c.addi	a5,16
   1a506:	e11c                	c.sd	a5,0(a0)
   1a508:	d88fd0ef          	jal	ra,17a90 <dwarf::unit::~unit()>
   1a50c:	8522                	c.mv	a0,s0
   1a50e:	a92fc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1a512:	60a2                	c.ldsp	ra,8(sp)
   1a514:	6402                	c.ldsp	s0,0(sp)
   1a516:	0141                	c.addi	sp,16
   1a518:	8082                	c.jr	ra

000000000001a51a <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)>:
    vector<_Tp, _Alloc>::
   1a51a:	7179                	c.addi16sp	sp,-48
   1a51c:	f406                	c.sdsp	ra,40(sp)
   1a51e:	f022                	c.sdsp	s0,32(sp)
   1a520:	ec26                	c.sdsp	s1,24(sp)
   1a522:	e84a                	c.sdsp	s2,16(sp)
   1a524:	e44e                	c.sdsp	s3,8(sp)
   1a526:	e052                	c.sdsp	s4,0(sp)
   1a528:	84aa                	c.mv	s1,a0
      if (std::__addressof(__x) != this)
   1a52a:	06a58c63          	beq	a1,a0,1a5a2 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x88>
   1a52e:	892e                	c.mv	s2,a1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1a530:	0085ba03          	ld	s4,8(a1)
   1a534:	6180                	c.ld	s0,0(a1)
   1a536:	408a09b3          	sub	s3,s4,s0
			 - this->_M_impl._M_start); }
   1a53a:	6108                	c.ld	a0,0(a0)
   1a53c:	689c                	c.ld	a5,16(s1)
   1a53e:	8f89                	c.sub	a5,a0
	  if (__xlen > capacity())
   1a540:	0137ed63          	bltu	a5,s3,1a55a <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x40>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1a544:	6490                	c.ld	a2,8(s1)
   1a546:	8e09                	c.sub	a2,a0
	  else if (size() >= __xlen)
   1a548:	07366e63          	bltu	a2,s3,1a5c4 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xaa>
					       is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::value, "type must be assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   1a54c:	048a0863          	beq	s4,s0,1a59c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x82>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   1a550:	864e                	c.mv	a2,s3
   1a552:	85a2                	c.mv	a1,s0
   1a554:	cccfc0ef          	jal	ra,16a20 <memmove@plt>
   1a558:	a091                	c.j	1a59c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x82>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1a55a:	06098363          	beq	s3,zero,1a5c0 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xa6>
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1a55e:	57c5                	c.li	a5,-15
   1a560:	8385                	c.srli	a5,0x1
   1a562:	0537e963          	bltu	a5,s3,1a5b4 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x9a>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1a566:	854e                	c.mv	a0,s3
   1a568:	a48fc0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1a56c:	892a                	c.mv	s2,a0
	  for (; __first != __last; ++__first, (void)++__cur)
   1a56e:	008a0e63          	beq	s4,s0,1a58a <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x70>
   1a572:	85a2                	c.mv	a1,s0
      _ForwardIterator __cur = __result;
   1a574:	87ca                	c.mv	a5,s2
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1a576:	4198                	c.lw	a4,0(a1)
   1a578:	c398                	c.sw	a4,0(a5)
   1a57a:	41d8                	c.lw	a4,4(a1)
   1a57c:	c3d8                	c.sw	a4,4(a5)
   1a57e:	4598                	c.lw	a4,8(a1)
   1a580:	c798                	c.sw	a4,8(a5)
	  for (; __first != __last; ++__first, (void)++__cur)
   1a582:	07b1                	c.addi	a5,12
   1a584:	05b1                	c.addi	a1,12
   1a586:	feba18e3          	bne	s4,a1,1a576 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x5c>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1a58a:	6088                	c.ld	a0,0(s1)
	if (__p)
   1a58c:	c119                	c.beqz	a0,1a592 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x78>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1a58e:	a12fc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	      this->_M_impl._M_start = __tmp;
   1a592:	0124b023          	sd	s2,0(s1)
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   1a596:	994e                	c.add	s2,s3
   1a598:	0124b823          	sd	s2,16(s1)
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   1a59c:	609c                	c.ld	a5,0(s1)
   1a59e:	97ce                	c.add	a5,s3
   1a5a0:	e49c                	c.sd	a5,8(s1)
    }
   1a5a2:	8526                	c.mv	a0,s1
   1a5a4:	70a2                	c.ldsp	ra,40(sp)
   1a5a6:	7402                	c.ldsp	s0,32(sp)
   1a5a8:	64e2                	c.ldsp	s1,24(sp)
   1a5aa:	6942                	c.ldsp	s2,16(sp)
   1a5ac:	69a2                	c.ldsp	s3,8(sp)
   1a5ae:	6a02                	c.ldsp	s4,0(sp)
   1a5b0:	6145                	c.addi16sp	sp,48
   1a5b2:	8082                	c.jr	ra
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1a5b4:	0009d463          	bge	s3,zero,1a5bc <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xa2>
	      std::__throw_bad_array_new_length();
   1a5b8:	9c8fc0ef          	jal	ra,16780 <std::__throw_bad_array_new_length()@plt>
	    std::__throw_bad_alloc();
   1a5bc:	894fc0ef          	jal	ra,16650 <std::__throw_bad_alloc()@plt>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1a5c0:	4901                	c.li	s2,0
   1a5c2:	b775                	c.j	1a56e <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x54>
	  if (_Num)
   1a5c4:	c601                	c.beqz	a2,1a5cc <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   1a5c6:	85a2                	c.mv	a1,s0
   1a5c8:	c58fc0ef          	jal	ra,16a20 <memmove@plt>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1a5cc:	6498                	c.ld	a4,8(s1)
   1a5ce:	6094                	c.ld	a3,0(s1)
   1a5d0:	40d706b3          	sub	a3,a4,a3
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   1a5d4:	00093783          	ld	a5,0(s2)
   1a5d8:	97b6                	c.add	a5,a3
					  __x._M_impl._M_finish,
   1a5da:	00893603          	ld	a2,8(s2)
   1a5de:	fac78fe3          	beq	a5,a2,1a59c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x82>
   1a5e2:	4394                	c.lw	a3,0(a5)
   1a5e4:	c314                	c.sw	a3,0(a4)
   1a5e6:	43d4                	c.lw	a3,4(a5)
   1a5e8:	c354                	c.sw	a3,4(a4)
   1a5ea:	4794                	c.lw	a3,8(a5)
   1a5ec:	c714                	c.sw	a3,8(a4)
   1a5ee:	07b1                	c.addi	a5,12
   1a5f0:	0731                	c.addi	a4,12
   1a5f2:	fef618e3          	bne	a2,a5,1a5e2 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xc8>
   1a5f6:	b75d                	c.j	1a59c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x82>

000000000001a5f8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)>:
      while (__x != 0)
   1a5f8:	c1f1                	c.beqz	a1,1a6bc <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0xc4>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1a5fa:	7139                	c.addi16sp	sp,-64
   1a5fc:	fc06                	c.sdsp	ra,56(sp)
   1a5fe:	f822                	c.sdsp	s0,48(sp)
   1a600:	f426                	c.sdsp	s1,40(sp)
   1a602:	f04a                	c.sdsp	s2,32(sp)
   1a604:	ec4e                	c.sdsp	s3,24(sp)
   1a606:	e852                	c.sdsp	s4,16(sp)
   1a608:	e456                	c.sdsp	s5,8(sp)
   1a60a:	e05a                	c.sdsp	s6,0(sp)
   1a60c:	8aaa                	c.mv	s5,a0
   1a60e:	842e                	c.mv	s0,a1
	  _M_erase(_S_right(__x));
   1a610:	00020b17          	auipc	s6,0x20
   1a614:	db8b3b03          	ld	s6,-584(s6) # 3a3c8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)@@Base+0x1fdd0>
    return ::__libc_single_threaded;
   1a618:	00020917          	auipc	s2,0x20
   1a61c:	e8093903          	ld	s2,-384(s2) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a620:	4485                	c.li	s1,1
   1a622:	a005                	c.j	1a642 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x4a>
    if (__is_single_threaded())
   1a624:	00094783          	lbu	a5,0(s2)
   1a628:	c79d                	c.beqz	a5,1a656 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x5e>
    _Atomic_word __result = *__mem;
   1a62a:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   1a62e:	fff5079b          	addiw	a5,a0,-1
   1a632:	02f9a823          	sw	a5,48(s3)
   1a636:	02950663          	beq	a0,s1,1a662 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x6a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1a63a:	8552                	c.mv	a0,s4
   1a63c:	964fc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      while (__x != 0)
   1a640:	c425                	c.beqz	s0,1a6a8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0xb0>
	  _M_erase(_S_right(__x));
   1a642:	6c0c                	c.ld	a1,24(s0)
   1a644:	8556                	c.mv	a0,s5
   1a646:	9b02                	c.jalr	s6
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1a648:	8a22                	c.mv	s4,s0
      { return static_cast<_Link_type>(__x->_M_left); }
   1a64a:	6800                	c.ld	s0,16(s0)
	if (_M_pi != nullptr)
   1a64c:	030a3983          	ld	s3,48(s4)
   1a650:	fc099ae3          	bne	s3,zero,1a624 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x2c>
   1a654:	b7dd                	c.j	1a63a <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x42>
      return __exchange_and_add(__mem, __val);
   1a656:	55fd                	c.li	a1,-1
   1a658:	03098513          	addi	a0,s3,48
   1a65c:	f95fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a660:	bfd9                	c.j	1a636 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x3e>
	_M_dispose();
   1a662:	0009b783          	ld	a5,0(s3)
   1a666:	6b9c                	c.ld	a5,16(a5)
   1a668:	854e                	c.mv	a0,s3
   1a66a:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a66c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a670:	00020797          	auipc	a5,0x20
   1a674:	e287b783          	ld	a5,-472(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a678:	0007c783          	lbu	a5,0(a5)
   1a67c:	c385                	c.beqz	a5,1a69c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0xa4>
    _Atomic_word __result = *__mem;
   1a67e:	0349a503          	lw	a0,52(s3)
    *__mem += __val;
   1a682:	fff5079b          	addiw	a5,a0,-1
   1a686:	02f9aa23          	sw	a5,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a68a:	4785                	c.li	a5,1
   1a68c:	faf517e3          	bne	a0,a5,1a63a <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x42>
	    _M_destroy();
   1a690:	0009b783          	ld	a5,0(s3)
   1a694:	6f9c                	c.ld	a5,24(a5)
   1a696:	854e                	c.mv	a0,s3
   1a698:	9782                	c.jalr	a5
   1a69a:	b745                	c.j	1a63a <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x42>
      return __exchange_and_add(__mem, __val);
   1a69c:	55fd                	c.li	a1,-1
   1a69e:	03498513          	addi	a0,s3,52
   1a6a2:	f4ffb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a6a6:	b7d5                	c.j	1a68a <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x92>
    }
   1a6a8:	70e2                	c.ldsp	ra,56(sp)
   1a6aa:	7442                	c.ldsp	s0,48(sp)
   1a6ac:	74a2                	c.ldsp	s1,40(sp)
   1a6ae:	7902                	c.ldsp	s2,32(sp)
   1a6b0:	69e2                	c.ldsp	s3,24(sp)
   1a6b2:	6a42                	c.ldsp	s4,16(sp)
   1a6b4:	6aa2                	c.ldsp	s5,8(sp)
   1a6b6:	6b02                	c.ldsp	s6,0(sp)
   1a6b8:	6121                	c.addi16sp	sp,64
   1a6ba:	8082                	c.jr	ra
   1a6bc:	8082                	c.jr	ra

000000000001a6be <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   1a6be:	7179                	c.addi16sp	sp,-48
   1a6c0:	f406                	c.sdsp	ra,40(sp)
   1a6c2:	f022                	c.sdsp	s0,32(sp)
   1a6c4:	ec26                	c.sdsp	s1,24(sp)
   1a6c6:	e84a                	c.sdsp	s2,16(sp)
   1a6c8:	e44e                	c.sdsp	s3,8(sp)
   1a6ca:	892a                	c.mv	s2,a0
      { _M_erase(_M_begin()); }
   1a6cc:	696c                	c.ld	a1,208(a0)
   1a6ce:	0c050513          	addi	a0,a0,192
   1a6d2:	00020317          	auipc	t1,0x20
   1a6d6:	cf633303          	ld	t1,-778(t1) # 3a3c8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)@@Base+0x1fdd0>
   1a6da:	9302                	c.jalr	t1
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1a6dc:	09093403          	ld	s0,144(s2)

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
    {
      while (__n)
   1a6e0:	c015                	c.beqz	s0,1a704 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x46>
class type_unit : public unit {
   1a6e2:	00020997          	auipc	s3,0x20
   1a6e6:	c8e9b983          	ld	s3,-882(s3) # 3a370 <vtable for dwarf::type_unit@@Base+0xa00>
   1a6ea:	09c1                	c.addi	s3,16
      _M_next() const noexcept
   1a6ec:	84a2                	c.mv	s1,s0
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1a6ee:	6000                	c.ld	s0,0(s0)
   1a6f0:	0134b823          	sd	s3,16(s1)
   1a6f4:	01048513          	addi	a0,s1,16
   1a6f8:	b98fd0ef          	jal	ra,17a90 <dwarf::unit::~unit()>
   1a6fc:	8526                	c.mv	a0,s1
   1a6fe:	8a2fc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      while (__n)
   1a702:	f46d                	c.bnez	s0,1a6ec <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2e>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
      __builtin_memset(_M_buckets, 0,
   1a704:	08893603          	ld	a2,136(s2)
   1a708:	060e                	c.slli	a2,0x3
   1a70a:	4581                	c.li	a1,0
   1a70c:	08093503          	ld	a0,128(s2)
   1a710:	960fc0ef          	jal	ra,16870 <memset@plt>
		       _M_bucket_count * sizeof(__node_base_ptr));
      _M_element_count = 0;
   1a714:	08093c23          	sd	zero,152(s2)
      _M_before_begin._M_nxt = nullptr;
   1a718:	08093823          	sd	zero,144(s2)
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   1a71c:	08093503          	ld	a0,128(s2)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   1a720:	0b090793          	addi	a5,s2,176
	if (_M_uses_single_bucket(__bkts))
   1a724:	00f50463          	beq	a0,a5,1a72c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6e>
   1a728:	878fc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1a72c:	06893403          	ld	s0,104(s2)
   1a730:	07093483          	ld	s1,112(s2)
	  for (; __first != __last; ++__first)
   1a734:	00940963          	beq	s0,s1,1a746 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x88>
      __pointer->~_Tp();
   1a738:	601c                	c.ld	a5,0(s0)
   1a73a:	639c                	c.ld	a5,0(a5)
   1a73c:	8522                	c.mv	a0,s0
   1a73e:	9782                	c.jalr	a5
	  for (; __first != __last; ++__first)
   1a740:	0461                	c.addi	s0,24
   1a742:	fe849be3          	bne	s1,s0,1a738 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7a>
	_M_deallocate(_M_impl._M_start,
   1a746:	06893503          	ld	a0,104(s2)
	if (__p)
   1a74a:	c119                	c.beqz	a0,1a750 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x92>
   1a74c:	854fc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   1a750:	06093403          	ld	s0,96(s2)
   1a754:	cc19                	c.beqz	s0,1a772 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
    if (__is_single_threaded())
   1a756:	00020797          	auipc	a5,0x20
   1a75a:	d427b783          	ld	a5,-702(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a75e:	0007c783          	lbu	a5,0(a5)
   1a762:	c3ad                	c.beqz	a5,1a7c4 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x106>
    _Atomic_word __result = *__mem;
   1a764:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1a766:	fff5079b          	addiw	a5,a0,-1
   1a76a:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a76c:	4785                	c.li	a5,1
   1a76e:	06f50163          	beq	a0,a5,1a7d0 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x112>
	if (_M_pi != nullptr)
   1a772:	05093403          	ld	s0,80(s2)
   1a776:	cc19                	c.beqz	s0,1a794 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd6>
    if (__is_single_threaded())
   1a778:	00020797          	auipc	a5,0x20
   1a77c:	d207b783          	ld	a5,-736(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a780:	0007c783          	lbu	a5,0(a5)
   1a784:	c7c9                	c.beqz	a5,1a80e <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x150>
    _Atomic_word __result = *__mem;
   1a786:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1a788:	fff5079b          	addiw	a5,a0,-1
   1a78c:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a78e:	4785                	c.li	a5,1
   1a790:	08f50563          	beq	a0,a5,1a81a <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x15c>
	if (_M_pi != nullptr)
   1a794:	04093403          	ld	s0,64(s2)
   1a798:	cc19                	c.beqz	s0,1a7b6 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xf8>
    if (__is_single_threaded())
   1a79a:	00020797          	auipc	a5,0x20
   1a79e:	cfe7b783          	ld	a5,-770(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a7a2:	0007c783          	lbu	a5,0(a5)
   1a7a6:	cbcd                	c.beqz	a5,1a858 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x19a>
    _Atomic_word __result = *__mem;
   1a7a8:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1a7aa:	fff5079b          	addiw	a5,a0,-1
   1a7ae:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a7b0:	4785                	c.li	a5,1
   1a7b2:	0af50963          	beq	a0,a5,1a864 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1a6>
      }
   1a7b6:	70a2                	c.ldsp	ra,40(sp)
   1a7b8:	7402                	c.ldsp	s0,32(sp)
   1a7ba:	64e2                	c.ldsp	s1,24(sp)
   1a7bc:	6942                	c.ldsp	s2,16(sp)
   1a7be:	69a2                	c.ldsp	s3,8(sp)
   1a7c0:	6145                	c.addi16sp	sp,48
   1a7c2:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   1a7c4:	55fd                	c.li	a1,-1
   1a7c6:	03040513          	addi	a0,s0,48
   1a7ca:	e27fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a7ce:	bf79                	c.j	1a76c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xae>
	_M_dispose();
   1a7d0:	601c                	c.ld	a5,0(s0)
   1a7d2:	6b9c                	c.ld	a5,16(a5)
   1a7d4:	8522                	c.mv	a0,s0
   1a7d6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a7d8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a7dc:	00020797          	auipc	a5,0x20
   1a7e0:	cbc7b783          	ld	a5,-836(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a7e4:	0007c783          	lbu	a5,0(a5)
   1a7e8:	cf89                	c.beqz	a5,1a802 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x144>
    _Atomic_word __result = *__mem;
   1a7ea:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1a7ec:	fff5079b          	addiw	a5,a0,-1
   1a7f0:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a7f2:	4785                	c.li	a5,1
   1a7f4:	f6f51fe3          	bne	a0,a5,1a772 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
	    _M_destroy();
   1a7f8:	601c                	c.ld	a5,0(s0)
   1a7fa:	6f9c                	c.ld	a5,24(a5)
   1a7fc:	8522                	c.mv	a0,s0
   1a7fe:	9782                	c.jalr	a5
   1a800:	bf8d                	c.j	1a772 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
      return __exchange_and_add(__mem, __val);
   1a802:	55fd                	c.li	a1,-1
   1a804:	03440513          	addi	a0,s0,52
   1a808:	de9fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a80c:	b7dd                	c.j	1a7f2 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x134>
   1a80e:	55fd                	c.li	a1,-1
   1a810:	03040513          	addi	a0,s0,48
   1a814:	dddfb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a818:	bf9d                	c.j	1a78e <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd0>
	_M_dispose();
   1a81a:	601c                	c.ld	a5,0(s0)
   1a81c:	6b9c                	c.ld	a5,16(a5)
   1a81e:	8522                	c.mv	a0,s0
   1a820:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a822:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a826:	00020797          	auipc	a5,0x20
   1a82a:	c727b783          	ld	a5,-910(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a82e:	0007c783          	lbu	a5,0(a5)
   1a832:	cf89                	c.beqz	a5,1a84c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x18e>
    _Atomic_word __result = *__mem;
   1a834:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1a836:	fff5079b          	addiw	a5,a0,-1
   1a83a:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a83c:	4785                	c.li	a5,1
   1a83e:	f4f51be3          	bne	a0,a5,1a794 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd6>
	    _M_destroy();
   1a842:	601c                	c.ld	a5,0(s0)
   1a844:	6f9c                	c.ld	a5,24(a5)
   1a846:	8522                	c.mv	a0,s0
   1a848:	9782                	c.jalr	a5
   1a84a:	b7a9                	c.j	1a794 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd6>
      return __exchange_and_add(__mem, __val);
   1a84c:	55fd                	c.li	a1,-1
   1a84e:	03440513          	addi	a0,s0,52
   1a852:	d9ffb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a856:	b7dd                	c.j	1a83c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x17e>
   1a858:	55fd                	c.li	a1,-1
   1a85a:	03040513          	addi	a0,s0,48
   1a85e:	d93fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a862:	b7b9                	c.j	1a7b0 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xf2>
	_M_dispose();
   1a864:	601c                	c.ld	a5,0(s0)
   1a866:	6b9c                	c.ld	a5,16(a5)
   1a868:	8522                	c.mv	a0,s0
   1a86a:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a86c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a870:	00020797          	auipc	a5,0x20
   1a874:	c287b783          	ld	a5,-984(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a878:	0007c783          	lbu	a5,0(a5)
   1a87c:	cf89                	c.beqz	a5,1a896 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1d8>
    _Atomic_word __result = *__mem;
   1a87e:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1a880:	fff5079b          	addiw	a5,a0,-1
   1a884:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a886:	4785                	c.li	a5,1
   1a888:	f2f517e3          	bne	a0,a5,1a7b6 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xf8>
	    _M_destroy();
   1a88c:	601c                	c.ld	a5,0(s0)
   1a88e:	6f9c                	c.ld	a5,24(a5)
   1a890:	8522                	c.mv	a0,s0
   1a892:	9782                	c.jalr	a5
      }
   1a894:	b70d                	c.j	1a7b6 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xf8>
      return __exchange_and_add(__mem, __val);
   1a896:	55fd                	c.li	a1,-1
   1a898:	03440513          	addi	a0,s0,52
   1a89c:	d55fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a8a0:	b7dd                	c.j	1a886 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1c8>

000000000001a8a2 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>:
      basic_string<_CharT, _Traits, _Alloc>::
   1a8a2:	7179                	c.addi16sp	sp,-48
   1a8a4:	f406                	c.sdsp	ra,40(sp)
   1a8a6:	f022                	c.sdsp	s0,32(sp)
   1a8a8:	ec26                	c.sdsp	s1,24(sp)
   1a8aa:	e84a                	c.sdsp	s2,16(sp)
   1a8ac:	842a                	c.mv	s0,a0
   1a8ae:	892e                	c.mv	s2,a1
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   1a8b0:	40b604b3          	sub	s1,a2,a1
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   1a8b4:	e426                	c.sdsp	s1,8(sp)
	if (__dnew > size_type(_S_local_capacity))
   1a8b6:	47bd                	c.li	a5,15
   1a8b8:	0297e663          	bltu	a5,s1,1a8e4 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x42>
      { return _M_dataplus._M_p; }
   1a8bc:	6108                	c.ld	a0,0(a0)
	if (__n == 1)
   1a8be:	4785                	c.li	a5,1
   1a8c0:	02f49e63          	bne	s1,a5,1a8fc <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x5a>
	__c1 = __c2;
   1a8c4:	0005c783          	lbu	a5,0(a1)
   1a8c8:	00f50023          	sb	a5,0(a0)
	_M_set_length(__dnew);
   1a8cc:	6722                	c.ldsp	a4,8(sp)
      { _M_string_length = __length; }
   1a8ce:	e418                	c.sd	a4,8(s0)
   1a8d0:	601c                	c.ld	a5,0(s0)
   1a8d2:	97ba                	c.add	a5,a4
   1a8d4:	00078023          	sb	zero,0(a5)
      }
   1a8d8:	70a2                	c.ldsp	ra,40(sp)
   1a8da:	7402                	c.ldsp	s0,32(sp)
   1a8dc:	64e2                	c.ldsp	s1,24(sp)
   1a8de:	6942                	c.ldsp	s2,16(sp)
   1a8e0:	6145                	c.addi16sp	sp,48
   1a8e2:	8082                	c.jr	ra
	    _M_data(_M_create(__dnew, size_type(0)));
   1a8e4:	4601                	c.li	a2,0
   1a8e6:	002c                	c.addi4spn	a1,sp,8
   1a8e8:	8c8fc0ef          	jal	ra,169b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
   1a8ec:	e008                	c.sd	a0,0(s0)
      { _M_allocated_capacity = __capacity; }
   1a8ee:	67a2                	c.ldsp	a5,8(sp)
   1a8f0:	e81c                	c.sd	a5,16(s0)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1a8f2:	8626                	c.mv	a2,s1
   1a8f4:	85ca                	c.mv	a1,s2
   1a8f6:	f4bfb0ef          	jal	ra,16840 <memcpy@plt>
   1a8fa:	bfc9                	c.j	1a8cc <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x2a>
	if (__n == 0)
   1a8fc:	d8e1                	c.beqz	s1,1a8cc <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x2a>
   1a8fe:	bfd5                	c.j	1a8f2 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x50>

000000000001a900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)>:
#define _ELFPP_TO_HEX_HH_

#include <string>
#include <type_traits>

template <typename T> std::string to_hex(T v) {
   1a900:	7139                	c.addi16sp	sp,-64
   1a902:	fc06                	c.sdsp	ra,56(sp)
   1a904:	f822                	c.sdsp	s0,48(sp)
   1a906:	f426                	c.sdsp	s1,40(sp)
   1a908:	84aa                	c.mv	s1,a0
  static_assert(std::is_integral<T>::value,
                "to_hex applied to non-integral type");
  if (v == 0)
   1a90a:	c989                	c.beqz	a1,1a91c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x1c>
    return std::string("0");
  char buf[sizeof(T) * 2 + 1];
  char *pos = &buf[sizeof(buf) - 1];
  *pos-- = '\0';
   1a90c:	00010c23          	sb	zero,24(sp)
   1a910:	01710413          	addi	s0,sp,23
  while (v && pos >= buf) {
    int digit = v & 0xf;
    if (digit < 10)
   1a914:	46a5                	c.li	a3,9
  while (v && pos >= buf) {
   1a916:	00710613          	addi	a2,sp,7
   1a91a:	a825                	c.j	1a952 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1a91c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   1a920:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   1a922:	4681                	c.li	a3,0
   1a924:	00015617          	auipc	a2,0x15
   1a928:	2f560613          	addi	a2,a2,757 # 2fc19 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   1a92c:	00015597          	auipc	a1,0x15
   1a930:	2ec58593          	addi	a1,a1,748 # 2fc18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe8>
   1a934:	00020317          	auipc	t1,0x20
   1a938:	9ec33303          	ld	t1,-1556(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   1a93c:	9302                	c.jalr	t1
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1a93e:	a099                	c.j	1a984 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x84>
   1a940:	00e40023          	sb	a4,0(s0)
      *pos = '0' + digit;
    else
      *pos = 'a' + (digit - 10);
    pos--;
   1a944:	fff40793          	addi	a5,s0,-1
    v >>= 4;
   1a948:	8191                	c.srli	a1,0x4
  while (v && pos >= buf) {
   1a94a:	cd89                	c.beqz	a1,1a964 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x64>
   1a94c:	00c78c63          	beq	a5,a2,1a964 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x64>
    pos--;
   1a950:	843e                	c.mv	s0,a5
    int digit = v & 0xf;
   1a952:	00f5f793          	andi	a5,a1,15
      *pos = 'a' + (digit - 10);
   1a956:	05778713          	addi	a4,a5,87
    if (digit < 10)
   1a95a:	fef6c3e3          	blt	a3,a5,1a940 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x40>
      *pos = '0' + digit;
   1a95e:	03078713          	addi	a4,a5,48
   1a962:	bff9                	c.j	1a940 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x40>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1a964:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   1a968:	e09c                	c.sd	a5,0(s1)
	return __builtin_strlen(__s);
   1a96a:	8522                	c.mv	a0,s0
   1a96c:	d15fb0ef          	jal	ra,16680 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   1a970:	4681                	c.li	a3,0
   1a972:	00a40633          	add	a2,s0,a0
   1a976:	85a2                	c.mv	a1,s0
   1a978:	8526                	c.mv	a0,s1
   1a97a:	00020317          	auipc	t1,0x20
   1a97e:	9a633303          	ld	t1,-1626(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   1a982:	9302                	c.jalr	t1
  }
  return std::string(pos + 1);
}
   1a984:	8526                	c.mv	a0,s1
   1a986:	70e2                	c.ldsp	ra,56(sp)
   1a988:	7442                	c.ldsp	s0,48(sp)
   1a98a:	74a2                	c.ldsp	s1,40(sp)
   1a98c:	6121                	c.addi16sp	sp,64
   1a98e:	8082                	c.jr	ra

000000000001a990 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1a990:	1101                	c.addi	sp,-32
   1a992:	ec06                	c.sdsp	ra,24(sp)
   1a994:	e822                	c.sdsp	s0,16(sp)
   1a996:	e426                	c.sdsp	s1,8(sp)
   1a998:	e04a                	c.sdsp	s2,0(sp)
   1a99a:	892a                	c.mv	s2,a0
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1a99c:	6900                	c.ld	s0,16(a0)
   1a99e:	e41d                	c.bnez	s0,1a9cc <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x3c>
      __builtin_memset(_M_buckets, 0,
   1a9a0:	00893603          	ld	a2,8(s2)
   1a9a4:	060e                	c.slli	a2,0x3
   1a9a6:	4581                	c.li	a1,0
   1a9a8:	00093503          	ld	a0,0(s2)
   1a9ac:	ec5fb0ef          	jal	ra,16870 <memset@plt>
      _M_element_count = 0;
   1a9b0:	00093c23          	sd	zero,24(s2)
      _M_before_begin._M_nxt = nullptr;
   1a9b4:	00093823          	sd	zero,16(s2)
    }
   1a9b8:	60e2                	c.ldsp	ra,24(sp)
   1a9ba:	6442                	c.ldsp	s0,16(sp)
   1a9bc:	64a2                	c.ldsp	s1,8(sp)
   1a9be:	6902                	c.ldsp	s2,0(sp)
   1a9c0:	6105                	c.addi16sp	sp,32
   1a9c2:	8082                	c.jr	ra
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1a9c4:	8526                	c.mv	a0,s1
   1a9c6:	ddbfb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1a9ca:	d879                	c.beqz	s0,1a9a0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x10>
      _M_next() const noexcept
   1a9cc:	84a2                	c.mv	s1,s0
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1a9ce:	6000                	c.ld	s0,0(s0)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1a9d0:	7088                	c.ld	a0,32(s1)
	if (__p)
   1a9d2:	d96d                	c.beqz	a0,1a9c4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x34>
   1a9d4:	dcdfb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1a9d8:	b7f5                	c.j	1a9c4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x34>

000000000001a9da <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   1a9da:	7179                	c.addi16sp	sp,-48
   1a9dc:	f406                	c.sdsp	ra,40(sp)
   1a9de:	f022                	c.sdsp	s0,32(sp)
   1a9e0:	ec26                	c.sdsp	s1,24(sp)
   1a9e2:	e84a                	c.sdsp	s2,16(sp)
   1a9e4:	e44e                	c.sdsp	s3,8(sp)
   1a9e6:	842a                	c.mv	s0,a0
   1a9e8:	03850993          	addi	s3,a0,56
      clear();
   1a9ec:	19050513          	addi	a0,a0,400
   1a9f0:	00020317          	auipc	t1,0x20
   1a9f4:	90033303          	ld	t1,-1792(t1) # 3a2f0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()@@Base+0x1f960>
   1a9f8:	9302                	c.jalr	t1
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   1a9fa:	19043503          	ld	a0,400(s0)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   1a9fe:	1c040793          	addi	a5,s0,448
	if (_M_uses_single_bucket(__bkts))
   1aa02:	00f50463          	beq	a0,a5,1aa0a <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x30>
   1aa06:	d9bfb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1aa0a:	17843483          	ld	s1,376(s0)
   1aa0e:	18043903          	ld	s2,384(s0)
   1aa12:	0b249c63          	bne	s1,s2,1aaca <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xf0>
	_M_deallocate(_M_impl._M_start,
   1aa16:	17843503          	ld	a0,376(s0)
	if (__p)
   1aa1a:	c119                	c.beqz	a0,1aa20 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x46>
   1aa1c:	d85fb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   1aa20:	16843483          	ld	s1,360(s0)
   1aa24:	cc99                	c.beqz	s1,1aa42 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x68>
    if (__is_single_threaded())
   1aa26:	00020797          	auipc	a5,0x20
   1aa2a:	a727b783          	ld	a5,-1422(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1aa2e:	0007c783          	lbu	a5,0(a5)
   1aa32:	c3cd                	c.beqz	a5,1aad4 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xfa>
    _Atomic_word __result = *__mem;
   1aa34:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1aa36:	fff5079b          	addiw	a5,a0,-1
   1aa3a:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1aa3c:	4785                	c.li	a5,1
   1aa3e:	0af50163          	beq	a0,a5,1aae0 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x106>
class die {
   1aa42:	11040693          	addi	a3,s0,272
    for (T *p = base; p < end; ++p)
   1aa46:	14043503          	ld	a0,320(s0)
   1aa4a:	14843783          	ld	a5,328(s0)
   1aa4e:	00f57863          	bgeu	a0,a5,1aa5e <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x84>
   1aa52:	87aa                	c.mv	a5,a0
   1aa54:	07a1                	c.addi	a5,8
   1aa56:	14843703          	ld	a4,328(s0)
   1aa5a:	fee7ede3          	bltu	a5,a4,1aa54 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7a>
    end = base;
   1aa5e:	14a43423          	sd	a0,328(s0)
    if ((char *)base != buf)
   1aa62:	00a68563          	beq	a3,a0,1aa6c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x92>
      delete[] (char *)base;
   1aa66:	c119                	c.beqz	a0,1aa6c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x92>
   1aa68:	de9fb0ef          	jal	ra,16850 <operator delete[](void*)@plt>
   1aa6c:	0a040693          	addi	a3,s0,160
    for (T *p = base; p < end; ++p)
   1aa70:	6868                	c.ld	a0,208(s0)
   1aa72:	6c7c                	c.ld	a5,216(s0)
   1aa74:	00f57763          	bgeu	a0,a5,1aa82 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa8>
   1aa78:	87aa                	c.mv	a5,a0
   1aa7a:	07a1                	c.addi	a5,8
   1aa7c:	6c78                	c.ld	a4,216(s0)
   1aa7e:	fee7eee3          	bltu	a5,a4,1aa7a <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa0>
    end = base;
   1aa82:	ec68                	c.sd	a0,216(s0)
    if ((char *)base != buf)
   1aa84:	00a68563          	beq	a3,a0,1aa8e <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
      delete[] (char *)base;
   1aa88:	c119                	c.beqz	a0,1aa8e <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
   1aa8a:	dc7fb0ef          	jal	ra,16850 <operator delete[](void*)@plt>
	if (_M_pi != nullptr)
   1aa8e:	6c20                	c.ld	s0,88(s0)
   1aa90:	cc19                	c.beqz	s0,1aaae <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd4>
    if (__is_single_threaded())
   1aa92:	00020797          	auipc	a5,0x20
   1aa96:	a067b783          	ld	a5,-1530(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1aa9a:	0007c783          	lbu	a5,0(a5)
   1aa9e:	c3c1                	c.beqz	a5,1ab1e <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x144>
    _Atomic_word __result = *__mem;
   1aaa0:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1aaa2:	fff5079b          	addiw	a5,a0,-1
   1aaa6:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1aaa8:	4785                	c.li	a5,1
   1aaaa:	08f50063          	beq	a0,a5,1ab2a <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x150>
struct unit::impl {
   1aaae:	854e                	c.mv	a0,s3
   1aab0:	f17fc0ef          	jal	ra,179c6 <dwarf::dwarf::~dwarf()>
      }
   1aab4:	70a2                	c.ldsp	ra,40(sp)
   1aab6:	7402                	c.ldsp	s0,32(sp)
   1aab8:	64e2                	c.ldsp	s1,24(sp)
   1aaba:	6942                	c.ldsp	s2,16(sp)
   1aabc:	69a2                	c.ldsp	s3,8(sp)
   1aabe:	6145                	c.addi16sp	sp,48
   1aac0:	8082                	c.jr	ra
   1aac2:	02848493          	addi	s1,s1,40
   1aac6:	f49908e3          	beq	s2,s1,1aa16 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x3c>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1aaca:	6888                	c.ld	a0,16(s1)
	if (__p)
   1aacc:	d97d                	c.beqz	a0,1aac2 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xe8>
   1aace:	cd3fb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1aad2:	bfc5                	c.j	1aac2 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xe8>
      return __exchange_and_add(__mem, __val);
   1aad4:	55fd                	c.li	a1,-1
   1aad6:	03048513          	addi	a0,s1,48
   1aada:	b17fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1aade:	bfb9                	c.j	1aa3c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x62>
	_M_dispose();
   1aae0:	609c                	c.ld	a5,0(s1)
   1aae2:	6b9c                	c.ld	a5,16(a5)
   1aae4:	8526                	c.mv	a0,s1
   1aae6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1aae8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1aaec:	00020797          	auipc	a5,0x20
   1aaf0:	9ac7b783          	ld	a5,-1620(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1aaf4:	0007c783          	lbu	a5,0(a5)
   1aaf8:	cf89                	c.beqz	a5,1ab12 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x138>
    _Atomic_word __result = *__mem;
   1aafa:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1aafc:	fff5079b          	addiw	a5,a0,-1
   1ab00:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1ab02:	4785                	c.li	a5,1
   1ab04:	f2f51fe3          	bne	a0,a5,1aa42 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x68>
	    _M_destroy();
   1ab08:	609c                	c.ld	a5,0(s1)
   1ab0a:	6f9c                	c.ld	a5,24(a5)
   1ab0c:	8526                	c.mv	a0,s1
   1ab0e:	9782                	c.jalr	a5
   1ab10:	bf0d                	c.j	1aa42 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x68>
      return __exchange_and_add(__mem, __val);
   1ab12:	55fd                	c.li	a1,-1
   1ab14:	03448513          	addi	a0,s1,52
   1ab18:	ad9fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ab1c:	b7dd                	c.j	1ab02 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x128>
   1ab1e:	55fd                	c.li	a1,-1
   1ab20:	03040513          	addi	a0,s0,48
   1ab24:	acdfb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ab28:	b741                	c.j	1aaa8 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xce>
	_M_dispose();
   1ab2a:	601c                	c.ld	a5,0(s0)
   1ab2c:	6b9c                	c.ld	a5,16(a5)
   1ab2e:	8522                	c.mv	a0,s0
   1ab30:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1ab32:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1ab36:	00020797          	auipc	a5,0x20
   1ab3a:	9627b783          	ld	a5,-1694(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1ab3e:	0007c783          	lbu	a5,0(a5)
   1ab42:	cf89                	c.beqz	a5,1ab5c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x182>
    _Atomic_word __result = *__mem;
   1ab44:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1ab46:	fff5079b          	addiw	a5,a0,-1
   1ab4a:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1ab4c:	4785                	c.li	a5,1
   1ab4e:	f6f510e3          	bne	a0,a5,1aaae <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd4>
	    _M_destroy();
   1ab52:	601c                	c.ld	a5,0(s0)
   1ab54:	6f9c                	c.ld	a5,24(a5)
   1ab56:	8522                	c.mv	a0,s0
   1ab58:	9782                	c.jalr	a5
   1ab5a:	bf91                	c.j	1aaae <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd4>
      return __exchange_and_add(__mem, __val);
   1ab5c:	55fd                	c.li	a1,-1
   1ab5e:	03440513          	addi	a0,s0,52
   1ab62:	a8ffb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ab66:	b7dd                	c.j	1ab4c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x172>

000000000001ab68 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)>:
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
   1ab68:	14058863          	beq	a1,zero,1acb8 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x150>
    vector<_Tp, _Alloc>::
   1ab6c:	7139                	c.addi16sp	sp,-64
   1ab6e:	fc06                	c.sdsp	ra,56(sp)
   1ab70:	f822                	c.sdsp	s0,48(sp)
   1ab72:	f426                	c.sdsp	s1,40(sp)
   1ab74:	f04a                	c.sdsp	s2,32(sp)
   1ab76:	ec4e                	c.sdsp	s3,24(sp)
   1ab78:	e852                	c.sdsp	s4,16(sp)
   1ab7a:	e456                	c.sdsp	s5,8(sp)
   1ab7c:	892a                	c.mv	s2,a0
   1ab7e:	84ae                	c.mv	s1,a1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1ab80:	6514                	c.ld	a3,8(a0)
   1ab82:	611c                	c.ld	a5,0(a0)
   1ab84:	40f68433          	sub	s0,a3,a5
   1ab88:	40345993          	srai	s3,s0,0x3
   1ab8c:	00013617          	auipc	a2,0x13
   1ab90:	47463603          	ld	a2,1140(a2) # 2e000 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd8>
   1ab94:	02c989b3          	mul	s3,s3,a2
	{
	  const size_type __size = size();
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
					 - this->_M_impl._M_finish);

	  if (__size > max_size() || __navail > max_size() - __size)
   1ab98:	00013797          	auipc	a5,0x13
   1ab9c:	4607b783          	ld	a5,1120(a5) # 2dff8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd0>
   1aba0:	41378733          	sub	a4,a5,s3
					 - this->_M_impl._M_finish);
   1aba4:	691c                	c.ld	a5,16(a0)
   1aba6:	8f95                	c.sub	a5,a3
   1aba8:	878d                	c.srai	a5,0x3
   1abaa:	02c787b3          	mul	a5,a5,a2
	    __builtin_unreachable();

	  if (__navail >= __n)
   1abae:	04b7e063          	bltu	a5,a1,1abee <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x86>
   1abb2:	872e                	c.mv	a4,a1
      template<typename _ForwardIterator, typename _Size>
	_GLIBCXX20_CONSTEXPR
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
	  _ForwardIterator __cur = __first;
   1abb4:	87b6                	c.mv	a5,a3
  abbrev_entry() : code(0) {}
   1abb6:	0007b023          	sd	zero,0(a5)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1abba:	0007b823          	sd	zero,16(a5)
   1abbe:	0007bc23          	sd	zero,24(a5)
   1abc2:	0207b023          	sd	zero,32(a5)
	  __try
	    {
	      for (; __n > 0; --__n, (void) ++__cur)
   1abc6:	177d                	c.addi	a4,-1
   1abc8:	02878793          	addi	a5,a5,40
   1abcc:	f76d                	c.bnez	a4,1abb6 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x4e>
   1abce:	00249793          	slli	a5,s1,0x2
   1abd2:	97a6                	c.add	a5,s1
   1abd4:	078e                	c.slli	a5,0x3
   1abd6:	96be                	c.add	a3,a5
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
   1abd8:	00d93423          	sd	a3,8(s2)
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
   1abdc:	70e2                	c.ldsp	ra,56(sp)
   1abde:	7442                	c.ldsp	s0,48(sp)
   1abe0:	74a2                	c.ldsp	s1,40(sp)
   1abe2:	7902                	c.ldsp	s2,32(sp)
   1abe4:	69e2                	c.ldsp	s3,24(sp)
   1abe6:	6a42                	c.ldsp	s4,16(sp)
   1abe8:	6aa2                	c.ldsp	s5,8(sp)
   1abea:	6121                	c.addi16sp	sp,64
   1abec:	8082                	c.jr	ra
	if (max_size() - size() < __n)
   1abee:	02b76463          	bltu	a4,a1,1ac16 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xae>
	const size_type __len = size() + (std::max)(size(), __n);
   1abf2:	87ae                	c.mv	a5,a1
   1abf4:	0135f363          	bgeu	a1,s3,1abfa <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x92>
   1abf8:	87ce                	c.mv	a5,s3
   1abfa:	97ce                	c.add	a5,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1abfc:	0337e363          	bltu	a5,s3,1ac22 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xba>
   1ac00:	8abe                	c.mv	s5,a5
   1ac02:	00013717          	auipc	a4,0x13
   1ac06:	3f673703          	ld	a4,1014(a4) # 2dff8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd0>
   1ac0a:	00f77363          	bgeu	a4,a5,1ac10 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xa8>
   1ac0e:	8aba                	c.mv	s5,a4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1ac10:	4a01                	c.li	s4,0
   1ac12:	c39d                	c.beqz	a5,1ac38 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xd0>
   1ac14:	a819                	c.j	1ac2a <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xc2>
	  __throw_length_error(__N(__s));
   1ac16:	00013517          	auipc	a0,0x13
   1ac1a:	0ca50513          	addi	a0,a0,202 # 2dce0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x10>
   1ac1e:	a83fb0ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1ac22:	00013a97          	auipc	s5,0x13
   1ac26:	3d6aba83          	ld	s5,982(s5) # 2dff8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd0>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1ac2a:	002a9513          	slli	a0,s5,0x2
   1ac2e:	9556                	c.add	a0,s5
   1ac30:	050e                	c.slli	a0,0x3
   1ac32:	b7ffb0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1ac36:	8a2a                	c.mv	s4,a0
		      std::__uninitialized_default_n_a(__new_start + __size,
   1ac38:	008a07b3          	add	a5,s4,s0
   1ac3c:	8726                	c.mv	a4,s1
   1ac3e:	0007b023          	sd	zero,0(a5)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1ac42:	0007b823          	sd	zero,16(a5)
   1ac46:	0007bc23          	sd	zero,24(a5)
   1ac4a:	0207b023          	sd	zero,32(a5)
   1ac4e:	177d                	c.addi	a4,-1
   1ac50:	02878793          	addi	a5,a5,40
   1ac54:	f76d                	c.bnez	a4,1ac3e <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xd6>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   1ac56:	00093503          	ld	a0,0(s2)
   1ac5a:	00893603          	ld	a2,8(s2)
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
   1ac5e:	02c50863          	beq	a0,a2,1ac8e <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x126>
   1ac62:	87aa                	c.mv	a5,a0
      _ForwardIterator __cur = __result;
   1ac64:	8752                	c.mv	a4,s4
struct abbrev_entry {
   1ac66:	6394                	c.ld	a3,0(a5)
   1ac68:	e314                	c.sd	a3,0(a4)
   1ac6a:	4794                	c.lw	a3,8(a5)
   1ac6c:	c714                	c.sw	a3,8(a4)
   1ac6e:	00c7c683          	lbu	a3,12(a5)
   1ac72:	00d70623          	sb	a3,12(a4)
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   1ac76:	6b94                	c.ld	a3,16(a5)
   1ac78:	eb14                	c.sd	a3,16(a4)
   1ac7a:	6f94                	c.ld	a3,24(a5)
   1ac7c:	ef14                	c.sd	a3,24(a4)
	  _M_end_of_storage(__x._M_end_of_storage)
   1ac7e:	7394                	c.ld	a3,32(a5)
   1ac80:	f314                	c.sd	a3,32(a4)
      for (; __first != __last; ++__first, (void)++__cur)
   1ac82:	02878793          	addi	a5,a5,40
   1ac86:	02870713          	addi	a4,a4,40
   1ac8a:	fcf61ee3          	bne	a2,a5,1ac66 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xfe>
	if (__p)
   1ac8e:	c119                	c.beqz	a0,1ac94 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x12c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1ac90:	b11fb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	      this->_M_impl._M_start = __new_start;
   1ac94:	01493023          	sd	s4,0(s2)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   1ac98:	94ce                	c.add	s1,s3
   1ac9a:	00249793          	slli	a5,s1,0x2
   1ac9e:	97a6                	c.add	a5,s1
   1aca0:	078e                	c.slli	a5,0x3
   1aca2:	97d2                	c.add	a5,s4
   1aca4:	00f93423          	sd	a5,8(s2)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1aca8:	002a9793          	slli	a5,s5,0x2
   1acac:	97d6                	c.add	a5,s5
   1acae:	078e                	c.slli	a5,0x3
   1acb0:	9a3e                	c.add	s4,a5
   1acb2:	01493823          	sd	s4,16(s2)
    }
   1acb6:	b71d                	c.j	1abdc <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x74>
   1acb8:	8082                	c.jr	ra

000000000001acba <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1acba:	1141                	c.addi	sp,-16
   1acbc:	e406                	c.sdsp	ra,8(sp)
   1acbe:	e022                	c.sdsp	s0,0(sp)
   1acc0:	6500                	c.ld	s0,8(a0)
   1acc2:	cc11                	c.beqz	s0,1acde <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()+0x24>
class type_unit : public unit {
   1acc4:	0001f797          	auipc	a5,0x1f
   1acc8:	6ac7b783          	ld	a5,1708(a5) # 3a370 <vtable for dwarf::type_unit@@Base+0xa00>
   1accc:	07c1                	c.addi	a5,16
   1acce:	e81c                	c.sd	a5,16(s0)
   1acd0:	01040513          	addi	a0,s0,16
   1acd4:	dbdfc0ef          	jal	ra,17a90 <dwarf::unit::~unit()>
   1acd8:	8522                	c.mv	a0,s0
   1acda:	ac7fb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1acde:	60a2                	c.ldsp	ra,8(sp)
   1ace0:	6402                	c.ldsp	s0,0(sp)
   1ace2:	0141                	c.addi	sp,16
   1ace4:	8082                	c.jr	ra

000000000001ace6 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1ace6:	86aa                	c.mv	a3,a0
      __node_base_ptr __prev_p = _M_buckets[__bkt];
   1ace8:	611c                	c.ld	a5,0(a0)
   1acea:	00359713          	slli	a4,a1,0x3
   1acee:	97ba                	c.add	a5,a4
   1acf0:	6388                	c.ld	a0,0(a5)
      if (!__prev_p)
   1acf2:	c50d                	c.beqz	a0,1ad1c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x36>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
   1acf4:	611c                	c.ld	a5,0(a0)
   1acf6:	6210                	c.ld	a2,0(a2)
   1acf8:	a011                	c.j	1acfc <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x16>
	   __p = __p->_M_next())
   1acfa:	87ba                	c.mv	a5,a4
      { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
   1acfc:	6798                	c.ld	a4,8(a5)
   1acfe:	00c70f63          	beq	a4,a2,1ad1c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x36>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1ad02:	6398                	c.ld	a4,0(a5)
   1ad04:	cb19                	c.beqz	a4,1ad1a <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x34>
	  __prev_p = __p;
   1ad06:	853e                	c.mv	a0,a5
    { return __num % __den; }
   1ad08:	671c                	c.ld	a5,8(a4)
   1ad0a:	0086b803          	ld	a6,8(a3)
   1ad0e:	0307f7b3          	remu	a5,a5,a6
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1ad12:	fef584e3          	beq	a1,a5,1acfa <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x14>
      return nullptr;
   1ad16:	4501                	c.li	a0,0
   1ad18:	8082                	c.jr	ra
   1ad1a:	853a                	c.mv	a0,a4
    }
   1ad1c:	8082                	c.jr	ra

000000000001ad1e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1ad1e:	7179                	c.addi16sp	sp,-48
   1ad20:	f406                	c.sdsp	ra,40(sp)
   1ad22:	f022                	c.sdsp	s0,32(sp)
   1ad24:	ec26                	c.sdsp	s1,24(sp)
   1ad26:	84ae                	c.mv	s1,a1
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   1ad28:	6900                	c.ld	s0,16(a0)
      while (__x != 0)
   1ad2a:	c409                	c.beqz	s0,1ad34 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x16>
      { return __x < __y; }
   1ad2c:	4194                	c.lw	a3,0(a1)
      { return static_cast<_Link_type>(__x->_M_right); }
   1ad2e:	4801                	c.li	a6,0
   1ad30:	4605                	c.li	a2,1
   1ad32:	a005                	c.j	1ad52 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x34>
      { return &this->_M_impl._M_header; }
   1ad34:	00850413          	addi	s0,a0,8
	  if (__j == begin())
   1ad38:	6d1c                	c.ld	a5,24(a0)
   1ad3a:	02878f63          	beq	a5,s0,1ad78 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x5a>
	_M_node = _Rb_tree_decrement(_M_node);
   1ad3e:	8522                	c.mv	a0,s0
   1ad40:	a81fb0ef          	jal	ra,167c0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>
	return *this;
   1ad44:	85a2                	c.mv	a1,s0
	_M_node = _Rb_tree_decrement(_M_node);
   1ad46:	842a                	c.mv	s0,a0
	return *this;
   1ad48:	a829                	c.j	1ad62 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x44>
      { return static_cast<_Link_type>(__x->_M_right); }
   1ad4a:	6c1c                	c.ld	a5,24(s0)
   1ad4c:	8742                	c.mv	a4,a6
      while (__x != 0)
   1ad4e:	cb81                	c.beqz	a5,1ad5e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x40>
   1ad50:	843e                	c.mv	s0,a5
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   1ad52:	501c                	c.lw	a5,32(s0)
   1ad54:	fef6dbe3          	bge	a3,a5,1ad4a <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x2c>
      { return static_cast<_Link_type>(__x->_M_left); }
   1ad58:	681c                	c.ld	a5,16(s0)
   1ad5a:	8732                	c.mv	a4,a2
   1ad5c:	bfcd                	c.j	1ad4e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x30>
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1ad5e:	85a2                	c.mv	a1,s0
      if (__comp)
   1ad60:	ff61                	c.bnez	a4,1ad38 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x1a>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   1ad62:	5018                	c.lw	a4,32(s0)
   1ad64:	409c                	c.lw	a5,0(s1)
   1ad66:	00f74c63          	blt	a4,a5,1ad7e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x60>
   1ad6a:	4581                	c.li	a1,0
    }
   1ad6c:	8522                	c.mv	a0,s0
   1ad6e:	70a2                	c.ldsp	ra,40(sp)
   1ad70:	7402                	c.ldsp	s0,32(sp)
   1ad72:	64e2                	c.ldsp	s1,24(sp)
   1ad74:	6145                	c.addi16sp	sp,48
   1ad76:	8082                	c.jr	ra
   1ad78:	85a2                	c.mv	a1,s0
   1ad7a:	4401                	c.li	s0,0
   1ad7c:	bfc5                	c.j	1ad6c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x4e>
   1ad7e:	4401                	c.li	s0,0
   1ad80:	b7f5                	c.j	1ad6c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x4e>

000000000001ad82 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1ad82:	7139                	c.addi16sp	sp,-64
   1ad84:	fc06                	c.sdsp	ra,56(sp)
   1ad86:	f822                	c.sdsp	s0,48(sp)
   1ad88:	f426                	c.sdsp	s1,40(sp)
   1ad8a:	f04a                	c.sdsp	s2,32(sp)
   1ad8c:	ec4e                	c.sdsp	s3,24(sp)
   1ad8e:	89aa                	c.mv	s3,a0
   1ad90:	84b2                	c.mv	s1,a2
      { return &this->_M_impl._M_header; }
   1ad92:	00850713          	addi	a4,a0,8
      if (__pos._M_node == _M_end())
   1ad96:	02e58663          	beq	a1,a4,1adc2 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x40>
   1ad9a:	842e                	c.mv	s0,a1
   1ad9c:	00062903          	lw	s2,0(a2)
   1ada0:	5198                	c.lw	a4,32(a1)
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   1ada2:	06e95c63          	bge	s2,a4,1ae1a <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x98>
	  if (__pos._M_node == _M_leftmost()) // begin()
   1ada6:	6d18                	c.ld	a4,24(a0)
   1ada8:	04b70963          	beq	a4,a1,1adfa <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x78>
	_M_node = _Rb_tree_decrement(_M_node);
   1adac:	852e                	c.mv	a0,a1
   1adae:	a13fb0ef          	jal	ra,167c0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   1adb2:	511c                	c.lw	a5,32(a0)
   1adb4:	0527d963          	bge	a5,s2,1ae06 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x84>
	      if (_S_right(__before._M_node) == 0)
   1adb8:	6d1c                	c.ld	a5,24(a0)
   1adba:	c3b9                	c.beqz	a5,1ae00 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x7e>
		return _Res(__pos._M_node, __pos._M_node);
   1adbc:	e022                	c.sdsp	s0,0(sp)
   1adbe:	e422                	c.sdsp	s0,8(sp)
   1adc0:	a025                	c.j	1ade8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   1adc2:	751c                	c.ld	a5,40(a0)
   1adc4:	cb89                	c.beqz	a5,1add6 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x54>
   1adc6:	711c                	c.ld	a5,32(a0)
   1adc8:	4214                	c.lw	a3,0(a2)
   1adca:	5398                	c.lw	a4,32(a5)
   1adcc:	00d75563          	bge	a4,a3,1add6 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x54>
	    return _Res(0, _M_rightmost());
   1add0:	e002                	c.sdsp	zero,0(sp)
   1add2:	e43e                	c.sdsp	a5,8(sp)
   1add4:	a811                	c.j	1ade8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
	    return _M_get_insert_unique_pos(__k);
   1add6:	85a6                	c.mv	a1,s1
   1add8:	854e                	c.mv	a0,s3
   1adda:	0001f317          	auipc	t1,0x1f
   1adde:	68e33303          	ld	t1,1678(t1) # 3a468 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)@@Base+0x1f74a>
   1ade2:	9302                	c.jalr	t1
   1ade4:	e02a                	c.sdsp	a0,0(sp)
   1ade6:	e42e                	c.sdsp	a1,8(sp)
    }
   1ade8:	6502                	c.ldsp	a0,0(sp)
   1adea:	65a2                	c.ldsp	a1,8(sp)
   1adec:	70e2                	c.ldsp	ra,56(sp)
   1adee:	7442                	c.ldsp	s0,48(sp)
   1adf0:	74a2                	c.ldsp	s1,40(sp)
   1adf2:	7902                	c.ldsp	s2,32(sp)
   1adf4:	69e2                	c.ldsp	s3,24(sp)
   1adf6:	6121                	c.addi16sp	sp,64
   1adf8:	8082                	c.jr	ra
	    return _Res(_M_leftmost(), _M_leftmost());
   1adfa:	e03a                	c.sdsp	a4,0(sp)
   1adfc:	e43a                	c.sdsp	a4,8(sp)
   1adfe:	b7ed                	c.j	1ade8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
		return _Res(0, __before._M_node);
   1ae00:	e002                	c.sdsp	zero,0(sp)
   1ae02:	e42a                	c.sdsp	a0,8(sp)
   1ae04:	b7d5                	c.j	1ade8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
	    return _M_get_insert_unique_pos(__k);
   1ae06:	85a6                	c.mv	a1,s1
   1ae08:	854e                	c.mv	a0,s3
   1ae0a:	0001f317          	auipc	t1,0x1f
   1ae0e:	65e33303          	ld	t1,1630(t1) # 3a468 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)@@Base+0x1f74a>
   1ae12:	9302                	c.jalr	t1
   1ae14:	e02a                	c.sdsp	a0,0(sp)
   1ae16:	e42e                	c.sdsp	a1,8(sp)
   1ae18:	bfc1                	c.j	1ade8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   1ae1a:	05275063          	bge	a4,s2,1ae5a <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xd8>
	  if (__pos._M_node == _M_rightmost())
   1ae1e:	7118                	c.ld	a4,32(a0)
   1ae20:	00b70d63          	beq	a4,a1,1ae3a <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xb8>
	_M_node = _Rb_tree_increment(_M_node);
   1ae24:	852e                	c.mv	a0,a1
   1ae26:	90bfb0ef          	jal	ra,16730 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@plt>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   1ae2a:	511c                	c.lw	a5,32(a0)
   1ae2c:	00f95d63          	bge	s2,a5,1ae46 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xc4>
	      if (_S_right(__pos._M_node) == 0)
   1ae30:	6c1c                	c.ld	a5,24(s0)
   1ae32:	c799                	c.beqz	a5,1ae40 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xbe>
		return _Res(__after._M_node, __after._M_node);
   1ae34:	e02a                	c.sdsp	a0,0(sp)
   1ae36:	e42a                	c.sdsp	a0,8(sp)
   1ae38:	bf45                	c.j	1ade8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
	    return _Res(0, _M_rightmost());
   1ae3a:	e002                	c.sdsp	zero,0(sp)
   1ae3c:	e43a                	c.sdsp	a4,8(sp)
   1ae3e:	b76d                	c.j	1ade8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
		return _Res(0, __pos._M_node);
   1ae40:	e002                	c.sdsp	zero,0(sp)
   1ae42:	e422                	c.sdsp	s0,8(sp)
   1ae44:	b755                	c.j	1ade8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
	    return _M_get_insert_unique_pos(__k);
   1ae46:	85a6                	c.mv	a1,s1
   1ae48:	854e                	c.mv	a0,s3
   1ae4a:	0001f317          	auipc	t1,0x1f
   1ae4e:	61e33303          	ld	t1,1566(t1) # 3a468 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)@@Base+0x1f74a>
   1ae52:	9302                	c.jalr	t1
   1ae54:	e02a                	c.sdsp	a0,0(sp)
   1ae56:	e42e                	c.sdsp	a1,8(sp)
   1ae58:	bf41                	c.j	1ade8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
	return _Res(__pos._M_node, 0);
   1ae5a:	e02e                	c.sdsp	a1,0(sp)
   1ae5c:	e402                	c.sdsp	zero,8(sp)
   1ae5e:	b769                	c.j	1ade8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>

000000000001ae60 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1ae60:	7139                	c.addi16sp	sp,-64
   1ae62:	fc06                	c.sdsp	ra,56(sp)
   1ae64:	f822                	c.sdsp	s0,48(sp)
   1ae66:	f426                	c.sdsp	s1,40(sp)
   1ae68:	f04a                	c.sdsp	s2,32(sp)
   1ae6a:	ec4e                	c.sdsp	s3,24(sp)
   1ae6c:	84aa                	c.mv	s1,a0
   1ae6e:	892e                	c.mv	s2,a1
   1ae70:	89b6                	c.mv	s3,a3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1ae72:	03800513          	addi	a0,zero,56
   1ae76:	93bfb0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1ae7a:	842a                	c.mv	s0,a0
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
   1ae7c:	0009b783          	ld	a5,0(s3)
   1ae80:	0007a983          	lw	s3,0(a5)
   1ae84:	03352023          	sw	s3,32(a0)
      : _M_ptr(0), _M_refcount()
   1ae88:	02053423          	sd	zero,40(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1ae8c:	02053823          	sd	zero,48(a0)
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
   1ae90:	02050613          	addi	a2,a0,32
   1ae94:	85ca                	c.mv	a1,s2
   1ae96:	8526                	c.mv	a0,s1
   1ae98:	0001f317          	auipc	t1,0x1f
   1ae9c:	4e833303          	ld	t1,1256(t1) # 3a380 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)@@Base+0x1f5fe>
   1aea0:	9302                	c.jalr	t1
   1aea2:	e02a                	c.sdsp	a0,0(sp)
   1aea4:	e42e                	c.sdsp	a1,8(sp)
	if (__res.second)
   1aea6:	cd95                	c.beqz	a1,1aee2 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x82>
   1aea8:	872a                	c.mv	a4,a0
			    || _M_impl._M_key_compare(_S_key(__z),
   1aeaa:	4505                	c.li	a0,1
   1aeac:	c31d                	c.beqz	a4,1aed2 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x72>
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   1aeae:	00848693          	addi	a3,s1,8
   1aeb2:	862e                	c.mv	a2,a1
   1aeb4:	85a2                	c.mv	a1,s0
   1aeb6:	eeafb0ef          	jal	ra,165a0 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt>
      ++_M_impl._M_node_count;
   1aeba:	749c                	c.ld	a5,40(s1)
   1aebc:	0785                	c.addi	a5,1
   1aebe:	f49c                	c.sd	a5,40(s1)
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1aec0:	84a2                	c.mv	s1,s0
      }
   1aec2:	8526                	c.mv	a0,s1
   1aec4:	70e2                	c.ldsp	ra,56(sp)
   1aec6:	7442                	c.ldsp	s0,48(sp)
   1aec8:	74a2                	c.ldsp	s1,40(sp)
   1aeca:	7902                	c.ldsp	s2,32(sp)
   1aecc:	69e2                	c.ldsp	s3,24(sp)
   1aece:	6121                	c.addi16sp	sp,64
   1aed0:	8082                	c.jr	ra
      { return &this->_M_impl._M_header; }
   1aed2:	00848713          	addi	a4,s1,8
      bool __insert_left = (__x != 0 || __p == _M_end()
   1aed6:	fce58ce3          	beq	a1,a4,1aeae <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x4e>
			    || _M_impl._M_key_compare(_S_key(__z),
   1aeda:	5188                	c.lw	a0,32(a1)
   1aedc:	00a9a533          	slt	a0,s3,a0
   1aee0:	b7f9                	c.j	1aeae <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x4e>
	return iterator(__res.first);
   1aee2:	84aa                	c.mv	s1,a0
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1aee4:	8522                	c.mv	a0,s0
   1aee6:	8bbfb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   1aeea:	bfe1                	c.j	1aec2 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x62>

000000000001aeec <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)>:
      vector<_Tp, _Alloc>::
   1aeec:	711d                	c.addi16sp	sp,-96
   1aeee:	ec86                	c.sdsp	ra,88(sp)
   1aef0:	e8a2                	c.sdsp	s0,80(sp)
   1aef2:	e4a6                	c.sdsp	s1,72(sp)
   1aef4:	e0ca                	c.sdsp	s2,64(sp)
   1aef6:	fc4e                	c.sdsp	s3,56(sp)
   1aef8:	f852                	c.sdsp	s4,48(sp)
   1aefa:	f456                	c.sdsp	s5,40(sp)
   1aefc:	f05a                	c.sdsp	s6,32(sp)
   1aefe:	ec5e                	c.sdsp	s7,24(sp)
   1af00:	e862                	c.sdsp	s8,16(sp)
   1af02:	e466                	c.sdsp	s9,8(sp)
   1af04:	e06a                	c.sdsp	s10,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1af06:	00853983          	ld	s3,8(a0)
   1af0a:	00053a83          	ld	s5,0(a0)
   1af0e:	415987b3          	sub	a5,s3,s5
   1af12:	878d                	c.srai	a5,0x3
   1af14:	00013717          	auipc	a4,0x13
   1af18:	0fc73703          	ld	a4,252(a4) # 2e010 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   1af1c:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   1af20:	00013717          	auipc	a4,0x13
   1af24:	0e873703          	ld	a4,232(a4) # 2e008 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe0>
   1af28:	02e78a63          	beq	a5,a4,1af5c <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x70>
   1af2c:	8a2a                	c.mv	s4,a0
   1af2e:	8432                	c.mv	s0,a2
   1af30:	84b6                	c.mv	s1,a3
   1af32:	892e                	c.mv	s2,a1
      return __a;
   1af34:	873e                	c.mv	a4,a5
      if (__a < __b)
   1af36:	03598963          	beq	s3,s5,1af68 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x7c>
	const size_type __len = size() + (std::max)(size(), __n);
   1af3a:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1af3c:	14f76d63          	bltu	a4,a5,1b096 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x1aa>
   1af40:	8bba                	c.mv	s7,a4
   1af42:	00013797          	auipc	a5,0x13
   1af46:	0c67b783          	ld	a5,198(a5) # 2e008 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe0>
   1af4a:	00e7f363          	bgeu	a5,a4,1af50 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x64>
   1af4e:	8bbe                	c.mv	s7,a5
    { return __lhs.base() - __rhs.base(); }
   1af50:	41558c33          	sub	s8,a1,s5
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1af54:	4b01                	c.li	s6,0
   1af56:	14070d63          	beq	a4,zero,1b0b0 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x1c4>
   1af5a:	a2a1                	c.j	1b0a2 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x1b6>
	  __throw_length_error(__N(__s));
   1af5c:	00013517          	auipc	a0,0x13
   1af60:	af450513          	addi	a0,a0,-1292 # 2da50 <__libc_csu_fini+0x9e>
   1af64:	f3cfb0ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   1af68:	4705                	c.li	a4,1
   1af6a:	bfc1                	c.j	1af3a <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x4e>
   1af6c:	07590063          	beq	s2,s5,1afcc <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xe0>
   1af70:	84d6                	c.mv	s1,s5
      _ForwardIterator __cur = __result;
   1af72:	845a                	c.mv	s0,s6
class unit {
   1af74:	0001fc97          	auipc	s9,0x1f
   1af78:	654cbc83          	ld	s9,1620(s9) # 3a5c8 <vtable for dwarf::unit@@Base+0xc98>
   1af7c:	0cc1                	c.addi	s9,16
    return ::__libc_single_threaded;
   1af7e:	0001fd17          	auipc	s10,0x1f
   1af82:	51ad3d03          	ld	s10,1306(s10) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
  compilation_unit(compilation_unit &&o) = default;
   1af86:	0001fc17          	auipc	s8,0x1f
   1af8a:	34ac3c03          	ld	s8,842(s8) # 3a2d0 <vtable for dwarf::compilation_unit@@Base+0x980>
   1af8e:	0c41                	c.addi	s8,16
   1af90:	a005                	c.j	1afb0 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xc4>
      __atomic_add(__mem, __val);
   1af92:	4585                	c.li	a1,1
   1af94:	03050513          	addi	a0,a0,48
   1af98:	e18fb0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1af9c:	01843023          	sd	s8,0(s0)

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   1afa0:	609c                	c.ld	a5,0(s1)
   1afa2:	639c                	c.ld	a5,0(a5)
   1afa4:	8526                	c.mv	a0,s1
   1afa6:	9782                	c.jalr	a5
      for (; __first != __last; ++__first, (void)++__cur)
   1afa8:	04e1                	c.addi	s1,24
   1afaa:	0461                	c.addi	s0,24
   1afac:	02990163          	beq	s2,s1,1afce <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xe2>
class unit {
   1afb0:	01943023          	sd	s9,0(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1afb4:	649c                	c.ld	a5,8(s1)
   1afb6:	e41c                	c.sd	a5,8(s0)
      : _M_pi(__r._M_pi)
   1afb8:	6888                	c.ld	a0,16(s1)
   1afba:	e808                	c.sd	a0,16(s0)
	if (_M_pi != nullptr)
   1afbc:	d165                	c.beqz	a0,1af9c <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xb0>
    if (__is_single_threaded())
   1afbe:	000d4703          	lbu	a4,0(s10)
   1afc2:	db61                	c.beqz	a4,1af92 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xa6>
  { *__mem += __val; }
   1afc4:	5918                	c.lw	a4,48(a0)
   1afc6:	2705                	c.addiw	a4,1
   1afc8:	d918                	c.sw	a4,48(a0)
   1afca:	bfc9                	c.j	1af9c <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xb0>
      _ForwardIterator __cur = __result;
   1afcc:	845a                	c.mv	s0,s6
	      ++__new_finish;
   1afce:	0461                	c.addi	s0,24
      for (; __first != __last; ++__first, (void)++__cur)
   1afd0:	07390063          	beq	s2,s3,1b030 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x144>
   1afd4:	0001fc17          	auipc	s8,0x1f
   1afd8:	5f4c3c03          	ld	s8,1524(s8) # 3a5c8 <vtable for dwarf::unit@@Base+0xc98>
   1afdc:	0c41                	c.addi	s8,16
    return ::__libc_single_threaded;
   1afde:	0001fc97          	auipc	s9,0x1f
   1afe2:	4bacbc83          	ld	s9,1210(s9) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
  compilation_unit(compilation_unit &&o) = default;
   1afe6:	0001f497          	auipc	s1,0x1f
   1afea:	2ea4b483          	ld	s1,746(s1) # 3a2d0 <vtable for dwarf::compilation_unit@@Base+0x980>
   1afee:	04c1                	c.addi	s1,16
   1aff0:	a005                	c.j	1b010 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x124>
      __atomic_add(__mem, __val);
   1aff2:	4585                	c.li	a1,1
   1aff4:	03050513          	addi	a0,a0,48
   1aff8:	db8fb0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1affc:	e004                	c.sd	s1,0(s0)
   1affe:	00093783          	ld	a5,0(s2)
   1b002:	639c                	c.ld	a5,0(a5)
   1b004:	854a                	c.mv	a0,s2
   1b006:	9782                	c.jalr	a5
   1b008:	0961                	c.addi	s2,24
   1b00a:	0461                	c.addi	s0,24
   1b00c:	03390263          	beq	s2,s3,1b030 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x144>
class unit {
   1b010:	01843023          	sd	s8,0(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1b014:	00893783          	ld	a5,8(s2)
   1b018:	e41c                	c.sd	a5,8(s0)
      : _M_pi(__r._M_pi)
   1b01a:	01093503          	ld	a0,16(s2)
   1b01e:	e808                	c.sd	a0,16(s0)
	if (_M_pi != nullptr)
   1b020:	dd71                	c.beqz	a0,1affc <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x110>
    if (__is_single_threaded())
   1b022:	000cc703          	lbu	a4,0(s9)
   1b026:	d771                	c.beqz	a4,1aff2 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x106>
  { *__mem += __val; }
   1b028:	5918                	c.lw	a4,48(a0)
   1b02a:	2705                	c.addiw	a4,1
   1b02c:	d918                	c.sw	a4,48(a0)
   1b02e:	b7f9                	c.j	1affc <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x110>
	if (__p)
   1b030:	000a8563          	beq	s5,zero,1b03a <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x14e>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1b034:	8556                	c.mv	a0,s5
   1b036:	f6afb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   1b03a:	016a3023          	sd	s6,0(s4)
      this->_M_impl._M_finish = __new_finish;
   1b03e:	008a3423          	sd	s0,8(s4)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1b042:	001b9793          	slli	a5,s7,0x1
   1b046:	97de                	c.add	a5,s7
   1b048:	078e                	c.slli	a5,0x3
   1b04a:	97da                	c.add	a5,s6
   1b04c:	00fa3823          	sd	a5,16(s4)
    }
   1b050:	60e6                	c.ldsp	ra,88(sp)
   1b052:	6446                	c.ldsp	s0,80(sp)
   1b054:	64a6                	c.ldsp	s1,72(sp)
   1b056:	6906                	c.ldsp	s2,64(sp)
   1b058:	79e2                	c.ldsp	s3,56(sp)
   1b05a:	7a42                	c.ldsp	s4,48(sp)
   1b05c:	7aa2                	c.ldsp	s5,40(sp)
   1b05e:	7b02                	c.ldsp	s6,32(sp)
   1b060:	6be2                	c.ldsp	s7,24(sp)
   1b062:	6c42                	c.ldsp	s8,16(sp)
   1b064:	6ca2                	c.ldsp	s9,8(sp)
   1b066:	6d02                	c.ldsp	s10,0(sp)
   1b068:	6125                	c.addi16sp	sp,96
   1b06a:	8082                	c.jr	ra
      __catch(...)
   1b06c:	e04fb0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   1b070:	000b1f63          	bne	s6,zero,1b08e <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x1a2>
	{ __p->~_Up(); }
   1b074:	000c3783          	ld	a5,0(s8)
   1b078:	639c                	c.ld	a5,0(a5)
   1b07a:	8562                	c.mv	a0,s8
   1b07c:	9782                	c.jalr	a5
	  __throw_exception_again;
   1b07e:	843fb0ef          	jal	ra,168c0 <__cxa_rethrow@plt>
      __catch(...)
   1b082:	842a                	c.mv	s0,a0
   1b084:	8adfb0ef          	jal	ra,16930 <__cxa_end_catch@plt>
   1b088:	8522                	c.mv	a0,s0
   1b08a:	907fb0ef          	jal	ra,16990 <_Unwind_Resume@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1b08e:	855a                	c.mv	a0,s6
   1b090:	f10fb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1b094:	b7ed                	c.j	1b07e <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x192>
   1b096:	41558c33          	sub	s8,a1,s5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1b09a:	00013b97          	auipc	s7,0x13
   1b09e:	f6ebbb83          	ld	s7,-146(s7) # 2e008 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe0>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1b0a2:	001b9513          	slli	a0,s7,0x1
   1b0a6:	955e                	c.add	a0,s7
   1b0a8:	050e                	c.slli	a0,0x3
   1b0aa:	f06fb0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1b0ae:	8b2a                	c.mv	s6,a0
	  _Alloc_traits::construct(this->_M_impl,
   1b0b0:	9c5a                	c.add	s8,s6
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1b0b2:	6090                	c.ld	a2,0(s1)
   1b0b4:	85a2                	c.mv	a1,s0
   1b0b6:	8562                	c.mv	a0,s8
   1b0b8:	ddbfc0ef          	jal	ra,17e92 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)>
	}
   1b0bc:	bd45                	c.j	1af6c <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x80>

000000000001b0be <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1b0be:	86aa                	c.mv	a3,a0
      __node_base_ptr __prev_p = _M_buckets[__bkt];
   1b0c0:	611c                	c.ld	a5,0(a0)
   1b0c2:	00359713          	slli	a4,a1,0x3
   1b0c6:	97ba                	c.add	a5,a4
   1b0c8:	6388                	c.ld	a0,0(a5)
      if (!__prev_p)
   1b0ca:	c50d                	c.beqz	a0,1b0f4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x36>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
   1b0cc:	611c                	c.ld	a5,0(a0)
      { return __x == __y; }
   1b0ce:	6210                	c.ld	a2,0(a2)
   1b0d0:	a011                	c.j	1b0d4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x16>
	   __p = __p->_M_next())
   1b0d2:	87ba                	c.mv	a5,a4
      { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
   1b0d4:	6798                	c.ld	a4,8(a5)
   1b0d6:	00c70f63          	beq	a4,a2,1b0f4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x36>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1b0da:	6398                	c.ld	a4,0(a5)
   1b0dc:	cb19                	c.beqz	a4,1b0f2 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x34>
	  __prev_p = __p;
   1b0de:	853e                	c.mv	a0,a5
    { return __num % __den; }
   1b0e0:	671c                	c.ld	a5,8(a4)
   1b0e2:	0086b803          	ld	a6,8(a3)
   1b0e6:	0307f7b3          	remu	a5,a5,a6
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1b0ea:	fef584e3          	beq	a1,a5,1b0d2 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x14>
      return nullptr;
   1b0ee:	4501                	c.li	a0,0
   1b0f0:	8082                	c.jr	ra
   1b0f2:	853a                	c.mv	a0,a4
    }
   1b0f4:	8082                	c.jr	ra

000000000001b0f6 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1b0f6:	7179                	c.addi16sp	sp,-48
   1b0f8:	f406                	c.sdsp	ra,40(sp)
   1b0fa:	f022                	c.sdsp	s0,32(sp)
   1b0fc:	ec26                	c.sdsp	s1,24(sp)
   1b0fe:	e84a                	c.sdsp	s2,16(sp)
   1b100:	e44e                	c.sdsp	s3,8(sp)
   1b102:	84aa                	c.mv	s1,a0
   1b104:	842e                	c.mv	s0,a1
	if (__builtin_expect(__bkt_count == 1, false))
   1b106:	4785                	c.li	a5,1
   1b108:	02f58863          	beq	a1,a5,1b138 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x42>
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1b10c:	57fd                	c.li	a5,-1
   1b10e:	8391                	c.srli	a5,0x4
   1b110:	02b7e963          	bltu	a5,a1,1b142 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x4c>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1b114:	00359993          	slli	s3,a1,0x3
   1b118:	854e                	c.mv	a0,s3
   1b11a:	e96fb0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1b11e:	892a                	c.mv	s2,a0
    {
      __buckets_alloc_type __alloc(_M_node_allocator());

      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
      __buckets_ptr __p = std::__to_address(__ptr);
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
   1b120:	864e                	c.mv	a2,s3
   1b122:	4581                	c.li	a1,0
   1b124:	f4cfb0ef          	jal	ra,16870 <memset@plt>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1b128:	6890                	c.ld	a2,16(s1)
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
      __node_ptr __p = _M_begin();
      _M_before_begin._M_nxt = nullptr;
   1b12a:	0004b823          	sd	zero,16(s1)
      std::size_t __bbegin_bkt = 0;
      while (__p)
   1b12e:	c235                	c.beqz	a2,1b192 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x9c>
      std::size_t __bbegin_bkt = 0;
   1b130:	4581                	c.li	a1,0
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
	  if (!__new_buckets[__bkt])
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
	      _M_before_begin._M_nxt = __p;
	      __new_buckets[__bkt] = &_M_before_begin;
   1b132:	01048893          	addi	a7,s1,16
   1b136:	a025                	c.j	1b15e <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x68>
	    _M_single_bucket = nullptr;
   1b138:	02053823          	sd	zero,48(a0)
	    return &_M_single_bucket;
   1b13c:	03050913          	addi	s2,a0,48
   1b140:	b7e5                	c.j	1b128 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x32>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1b142:	57fd                	c.li	a5,-1
   1b144:	838d                	c.srli	a5,0x3
   1b146:	00b7f463          	bgeu	a5,a1,1b14e <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x58>
	      std::__throw_bad_array_new_length();
   1b14a:	e36fb0ef          	jal	ra,16780 <std::__throw_bad_array_new_length()@plt>
	    std::__throw_bad_alloc();
   1b14e:	d02fb0ef          	jal	ra,16650 <std::__throw_bad_alloc()@plt>
		__new_buckets[__bbegin_bkt] = __p;
	      __bbegin_bkt = __bkt;
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
   1b152:	00083683          	ld	a3,0(a6)
   1b156:	e314                	c.sd	a3,0(a4)
	      __new_buckets[__bkt]->_M_nxt = __p;
   1b158:	639c                	c.ld	a5,0(a5)
   1b15a:	e398                	c.sd	a4,0(a5)
      while (__p)
   1b15c:	ca1d                	c.beqz	a2,1b192 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x9c>
      _M_next() const noexcept
   1b15e:	8732                	c.mv	a4,a2
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1b160:	6210                	c.ld	a2,0(a2)
    { return __num % __den; }
   1b162:	6714                	c.ld	a3,8(a4)
   1b164:	0286f6b3          	remu	a3,a3,s0
	  if (!__new_buckets[__bkt])
   1b168:	00369793          	slli	a5,a3,0x3
   1b16c:	97ca                	c.add	a5,s2
   1b16e:	0007b803          	ld	a6,0(a5)
   1b172:	fe0810e3          	bne	a6,zero,1b152 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x5c>
	      __p->_M_nxt = _M_before_begin._M_nxt;
   1b176:	6888                	c.ld	a0,16(s1)
   1b178:	e308                	c.sd	a0,0(a4)
	      _M_before_begin._M_nxt = __p;
   1b17a:	e898                	c.sd	a4,16(s1)
	      __new_buckets[__bkt] = &_M_before_begin;
   1b17c:	0117b023          	sd	a7,0(a5)
	      if (__p->_M_nxt)
   1b180:	631c                	c.ld	a5,0(a4)
   1b182:	c791                	c.beqz	a5,1b18e <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x98>
		__new_buckets[__bbegin_bkt] = __p;
   1b184:	058e                	c.slli	a1,0x3
   1b186:	95ca                	c.add	a1,s2
   1b188:	e198                	c.sd	a4,0(a1)
	      __bbegin_bkt = __bkt;
   1b18a:	85b6                	c.mv	a1,a3
   1b18c:	bfc1                	c.j	1b15c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x66>
   1b18e:	85b6                	c.mv	a1,a3
   1b190:	b7f1                	c.j	1b15c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x66>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   1b192:	6088                	c.ld	a0,0(s1)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   1b194:	03048793          	addi	a5,s1,48
	if (_M_uses_single_bucket(__bkts))
   1b198:	00f50463          	beq	a0,a5,1b1a0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xaa>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1b19c:	e04fb0ef          	jal	ra,167a0 <operator delete(void*)@plt>

	  __p = __next;
	}

      _M_deallocate_buckets();
      _M_bucket_count = __bkt_count;
   1b1a0:	e480                	c.sd	s0,8(s1)
      _M_buckets = __new_buckets;
   1b1a2:	0124b023          	sd	s2,0(s1)
    }
   1b1a6:	70a2                	c.ldsp	ra,40(sp)
   1b1a8:	7402                	c.ldsp	s0,32(sp)
   1b1aa:	64e2                	c.ldsp	s1,24(sp)
   1b1ac:	6942                	c.ldsp	s2,16(sp)
   1b1ae:	69a2                	c.ldsp	s3,8(sp)
   1b1b0:	6145                	c.addi16sp	sp,48
   1b1b2:	8082                	c.jr	ra

000000000001b1b4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1b1b4:	7139                	c.addi16sp	sp,-64
   1b1b6:	fc06                	c.sdsp	ra,56(sp)
   1b1b8:	f822                	c.sdsp	s0,48(sp)
   1b1ba:	f426                	c.sdsp	s1,40(sp)
   1b1bc:	f04a                	c.sdsp	s2,32(sp)
   1b1be:	ec4e                	c.sdsp	s3,24(sp)
   1b1c0:	e852                	c.sdsp	s4,16(sp)
   1b1c2:	842a                	c.mv	s0,a0
   1b1c4:	84ae                	c.mv	s1,a1
   1b1c6:	89b2                	c.mv	s3,a2
   1b1c8:	8936                	c.mv	s2,a3
    { return _M_next_resize; }
   1b1ca:	02853a03          	ld	s4,40(a0)
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
   1b1ce:	86ba                	c.mv	a3,a4
   1b1d0:	6d10                	c.ld	a2,24(a0)
   1b1d2:	650c                	c.ld	a1,8(a0)
   1b1d4:	02050513          	addi	a0,a0,32
   1b1d8:	e88fb0ef          	jal	ra,16860 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>
   1b1dc:	e02a                	c.sdsp	a0,0(sp)
   1b1de:	e42e                	c.sdsp	a1,8(sp)
      if (__do_rehash.first)
   1b1e0:	0ff57513          	andi	a0,a0,255
   1b1e4:	e91d                	c.bnez	a0,1b21a <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x66>
      if (_M_buckets[__bkt])
   1b1e6:	00349593          	slli	a1,s1,0x3
   1b1ea:	601c                	c.ld	a5,0(s0)
   1b1ec:	97ae                	c.add	a5,a1
   1b1ee:	639c                	c.ld	a5,0(a5)
   1b1f0:	cfa9                	c.beqz	a5,1b24a <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x96>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
   1b1f2:	639c                	c.ld	a5,0(a5)
   1b1f4:	00f93023          	sd	a5,0(s2)
	  _M_buckets[__bkt]->_M_nxt = __node;
   1b1f8:	601c                	c.ld	a5,0(s0)
   1b1fa:	97ae                	c.add	a5,a1
   1b1fc:	639c                	c.ld	a5,0(a5)
   1b1fe:	0127b023          	sd	s2,0(a5)
      ++_M_element_count;
   1b202:	6c1c                	c.ld	a5,24(s0)
   1b204:	0785                	c.addi	a5,1
   1b206:	ec1c                	c.sd	a5,24(s0)
    }
   1b208:	854a                	c.mv	a0,s2
   1b20a:	70e2                	c.ldsp	ra,56(sp)
   1b20c:	7442                	c.ldsp	s0,48(sp)
   1b20e:	74a2                	c.ldsp	s1,40(sp)
   1b210:	7902                	c.ldsp	s2,32(sp)
   1b212:	69e2                	c.ldsp	s3,24(sp)
   1b214:	6a42                	c.ldsp	s4,16(sp)
   1b216:	6121                	c.addi16sp	sp,64
   1b218:	8082                	c.jr	ra
	  _M_rehash_aux(__bkt_count, __unique_keys{});
   1b21a:	4601                	c.li	a2,0
   1b21c:	8522                	c.mv	a0,s0
   1b21e:	0001f317          	auipc	t1,0x1f
   1b222:	1d233303          	ld	t1,466(t1) # 3a3f0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)@@Base+0x1f2fa>
   1b226:	9302                	c.jalr	t1
   1b228:	a829                	c.j	1b242 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x8e>
      __catch(...)
   1b22a:	c46fb0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
    { _M_next_resize = __state; }
   1b22e:	03443423          	sd	s4,40(s0)
	  __throw_exception_again;
   1b232:	e8efb0ef          	jal	ra,168c0 <__cxa_rethrow@plt>
      __catch(...)
   1b236:	842a                	c.mv	s0,a0
   1b238:	ef8fb0ef          	jal	ra,16930 <__cxa_end_catch@plt>
   1b23c:	8522                	c.mv	a0,s0
   1b23e:	f52fb0ef          	jal	ra,16990 <_Unwind_Resume@plt>
    { return __num % __den; }
   1b242:	640c                	c.ld	a1,8(s0)
   1b244:	02b9f4b3          	remu	s1,s3,a1
   1b248:	bf79                	c.j	1b1e6 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x32>
	  __node->_M_nxt = _M_before_begin._M_nxt;
   1b24a:	681c                	c.ld	a5,16(s0)
   1b24c:	00f93023          	sd	a5,0(s2)
	  _M_before_begin._M_nxt = __node;
   1b250:	01243823          	sd	s2,16(s0)
	  if (__node->_M_nxt)
   1b254:	00093783          	ld	a5,0(s2)
   1b258:	cb91                	c.beqz	a5,1b26c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0xb8>
   1b25a:	679c                	c.ld	a5,8(a5)
   1b25c:	6418                	c.ld	a4,8(s0)
   1b25e:	02e7f7b3          	remu	a5,a5,a4
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
   1b262:	6018                	c.ld	a4,0(s0)
   1b264:	078e                	c.slli	a5,0x3
   1b266:	97ba                	c.add	a5,a4
   1b268:	0127b023          	sd	s2,0(a5)
	  _M_buckets[__bkt] = &_M_before_begin;
   1b26c:	601c                	c.ld	a5,0(s0)
   1b26e:	97ae                	c.add	a5,a1
   1b270:	01040713          	addi	a4,s0,16
   1b274:	e398                	c.sd	a4,0(a5)
   1b276:	b771                	c.j	1b202 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x4e>

000000000001b278 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)>:
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
   1b278:	7139                	c.addi16sp	sp,-64
   1b27a:	fc06                	c.sdsp	ra,56(sp)
   1b27c:	f822                	c.sdsp	s0,48(sp)
   1b27e:	f426                	c.sdsp	s1,40(sp)
   1b280:	f04a                	c.sdsp	s2,32(sp)
   1b282:	ec4e                	c.sdsp	s3,24(sp)
   1b284:	84aa                	c.mv	s1,a0
   1b286:	842e                	c.mv	s0,a1
	return _M_hash()(__k);
   1b288:	0005b983          	ld	s3,0(a1)
    { return __num % __den; }
   1b28c:	00853903          	ld	s2,8(a0)
   1b290:	0329f933          	remu	s2,s3,s2
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1b294:	86ce                	c.mv	a3,s3
   1b296:	862e                	c.mv	a2,a1
   1b298:	85ca                	c.mv	a1,s2
   1b29a:	0001f317          	auipc	t1,0x1f
   1b29e:	09633303          	ld	t1,150(t1) # 3a330 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x1f64a>
   1b2a2:	9302                	c.jalr	t1
	if (__before_n)
   1b2a4:	c919                	c.beqz	a0,1b2ba <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)+0x42>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   1b2a6:	6108                	c.ld	a0,0(a0)
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
   1b2a8:	c909                	c.beqz	a0,1b2ba <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)+0x42>
	return __node->_M_v().second;
   1b2aa:	0541                	c.addi	a0,16
    }
   1b2ac:	70e2                	c.ldsp	ra,56(sp)
   1b2ae:	7442                	c.ldsp	s0,48(sp)
   1b2b0:	74a2                	c.ldsp	s1,40(sp)
   1b2b2:	7902                	c.ldsp	s2,32(sp)
   1b2b4:	69e2                	c.ldsp	s3,24(sp)
   1b2b6:	6121                	c.addi16sp	sp,64
   1b2b8:	8082                	c.jr	ra
	  : _M_h(__h),
   1b2ba:	e026                	c.sdsp	s1,0(sp)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1b2bc:	02800513          	addi	a0,zero,40
   1b2c0:	cf0fb0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1b2c4:	86aa                	c.mv	a3,a0
    _Hash_node_base() noexcept : _M_nxt() { }
   1b2c6:	00053023          	sd	zero,0(a0)
   1b2ca:	601c                	c.ld	a5,0(s0)
   1b2cc:	e51c                	c.sd	a5,8(a0)
      : _M_ptr(0), _M_refcount()
   1b2ce:	00053c23          	sd	zero,24(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1b2d2:	02053023          	sd	zero,32(a0)
  type_unit() = default;
   1b2d6:	0001f797          	auipc	a5,0x1f
   1b2da:	09a7b783          	ld	a5,154(a5) # 3a370 <vtable for dwarf::type_unit@@Base+0xa00>
   1b2de:	07c1                	c.addi	a5,16
   1b2e0:	e91c                	c.sd	a5,16(a0)
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
   1b2e2:	e42a                	c.sdsp	a0,8(sp)
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
   1b2e4:	4705                	c.li	a4,1
   1b2e6:	864e                	c.mv	a2,s3
   1b2e8:	85ca                	c.mv	a1,s2
   1b2ea:	8526                	c.mv	a0,s1
   1b2ec:	0001f317          	auipc	t1,0x1f
   1b2f0:	0fc33303          	ld	t1,252(t1) # 3a3e8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)@@Base+0x1f234>
   1b2f4:	9302                	c.jalr	t1
      return __pos->second;
   1b2f6:	0541                	c.addi	a0,16
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1b2f8:	bf55                	c.j	1b2ac <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)+0x34>
    }
   1b2fa:	842a                	c.mv	s0,a0
   1b2fc:	850a                	c.mv	a0,sp
   1b2fe:	0001f317          	auipc	t1,0x1f
   1b302:	0a233303          	ld	t1,162(t1) # 3a3a0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()@@Base+0x1f6e6>
   1b306:	9302                	c.jalr	t1
   1b308:	8522                	c.mv	a0,s0
   1b30a:	e86fb0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001b30e <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)>:
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
   1b30e:	7139                	c.addi16sp	sp,-64
   1b310:	fc06                	c.sdsp	ra,56(sp)
   1b312:	f822                	c.sdsp	s0,48(sp)
   1b314:	f426                	c.sdsp	s1,40(sp)
   1b316:	f04a                	c.sdsp	s2,32(sp)
   1b318:	ec4e                	c.sdsp	s3,24(sp)
   1b31a:	84aa                	c.mv	s1,a0
   1b31c:	842e                	c.mv	s0,a1
	return _M_hash()(__k);
   1b31e:	0005b983          	ld	s3,0(a1)
    { return __num % __den; }
   1b322:	00853903          	ld	s2,8(a0)
   1b326:	0329f933          	remu	s2,s3,s2
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1b32a:	86ce                	c.mv	a3,s3
   1b32c:	862e                	c.mv	a2,a1
   1b32e:	85ca                	c.mv	a1,s2
   1b330:	0001f317          	auipc	t1,0x1f
   1b334:	00033303          	ld	t1,0(t1) # 3a330 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x1f64a>
   1b338:	9302                	c.jalr	t1
	if (__before_n)
   1b33a:	c919                	c.beqz	a0,1b350 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x42>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   1b33c:	6108                	c.ld	a0,0(a0)
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
   1b33e:	c909                	c.beqz	a0,1b350 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x42>
	return __node->_M_v().second;
   1b340:	0541                	c.addi	a0,16
    }
   1b342:	70e2                	c.ldsp	ra,56(sp)
   1b344:	7442                	c.ldsp	s0,48(sp)
   1b346:	74a2                	c.ldsp	s1,40(sp)
   1b348:	7902                	c.ldsp	s2,32(sp)
   1b34a:	69e2                	c.ldsp	s3,24(sp)
   1b34c:	6121                	c.addi16sp	sp,64
   1b34e:	8082                	c.jr	ra
	  : _M_h(__h),
   1b350:	e026                	c.sdsp	s1,0(sp)
   1b352:	02800513          	addi	a0,zero,40
   1b356:	c5afb0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1b35a:	86aa                	c.mv	a3,a0
    _Hash_node_base() noexcept : _M_nxt() { }
   1b35c:	00053023          	sd	zero,0(a0)
   1b360:	601c                	c.ld	a5,0(s0)
   1b362:	e51c                	c.sd	a5,8(a0)
      : _M_ptr(0), _M_refcount()
   1b364:	00053c23          	sd	zero,24(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1b368:	02053023          	sd	zero,32(a0)
   1b36c:	0001f797          	auipc	a5,0x1f
   1b370:	0047b783          	ld	a5,4(a5) # 3a370 <vtable for dwarf::type_unit@@Base+0xa00>
   1b374:	07c1                	c.addi	a5,16
   1b376:	e91c                	c.sd	a5,16(a0)
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
   1b378:	e42a                	c.sdsp	a0,8(sp)
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
   1b37a:	4705                	c.li	a4,1
   1b37c:	864e                	c.mv	a2,s3
   1b37e:	85ca                	c.mv	a1,s2
   1b380:	8526                	c.mv	a0,s1
   1b382:	0001f317          	auipc	t1,0x1f
   1b386:	06633303          	ld	t1,102(t1) # 3a3e8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)@@Base+0x1f234>
   1b38a:	9302                	c.jalr	t1
      return __pos->second;
   1b38c:	0541                	c.addi	a0,16
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1b38e:	bf55                	c.j	1b342 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x34>
    }
   1b390:	842a                	c.mv	s0,a0
   1b392:	850a                	c.mv	a0,sp
   1b394:	0001f317          	auipc	t1,0x1f
   1b398:	00c33303          	ld	t1,12(t1) # 3a3a0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()@@Base+0x1f6e6>
   1b39c:	9302                	c.jalr	t1
   1b39e:	8522                	c.mv	a0,s0
   1b3a0:	df0fb0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001b3a4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1b3a4:	7179                	c.addi16sp	sp,-48
   1b3a6:	f406                	c.sdsp	ra,40(sp)
   1b3a8:	f022                	c.sdsp	s0,32(sp)
   1b3aa:	ec26                	c.sdsp	s1,24(sp)
   1b3ac:	e84a                	c.sdsp	s2,16(sp)
   1b3ae:	e44e                	c.sdsp	s3,8(sp)
   1b3b0:	84aa                	c.mv	s1,a0
   1b3b2:	842e                	c.mv	s0,a1
	if (__builtin_expect(__bkt_count == 1, false))
   1b3b4:	4785                	c.li	a5,1
   1b3b6:	02f58863          	beq	a1,a5,1b3e6 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x42>
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1b3ba:	57fd                	c.li	a5,-1
   1b3bc:	8391                	c.srli	a5,0x4
   1b3be:	02b7e963          	bltu	a5,a1,1b3f0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x4c>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1b3c2:	00359993          	slli	s3,a1,0x3
   1b3c6:	854e                	c.mv	a0,s3
   1b3c8:	be8fb0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1b3cc:	892a                	c.mv	s2,a0
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
   1b3ce:	864e                	c.mv	a2,s3
   1b3d0:	4581                	c.li	a1,0
   1b3d2:	c9efb0ef          	jal	ra,16870 <memset@plt>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1b3d6:	6890                	c.ld	a2,16(s1)
      _M_before_begin._M_nxt = nullptr;
   1b3d8:	0004b823          	sd	zero,16(s1)
      while (__p)
   1b3dc:	c235                	c.beqz	a2,1b440 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x9c>
      std::size_t __bbegin_bkt = 0;
   1b3de:	4581                	c.li	a1,0
	      __new_buckets[__bkt] = &_M_before_begin;
   1b3e0:	01048893          	addi	a7,s1,16
   1b3e4:	a025                	c.j	1b40c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x68>
	    _M_single_bucket = nullptr;
   1b3e6:	02053823          	sd	zero,48(a0)
	    return &_M_single_bucket;
   1b3ea:	03050913          	addi	s2,a0,48
   1b3ee:	b7e5                	c.j	1b3d6 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x32>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1b3f0:	57fd                	c.li	a5,-1
   1b3f2:	838d                	c.srli	a5,0x3
   1b3f4:	00b7f463          	bgeu	a5,a1,1b3fc <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x58>
	      std::__throw_bad_array_new_length();
   1b3f8:	b88fb0ef          	jal	ra,16780 <std::__throw_bad_array_new_length()@plt>
	    std::__throw_bad_alloc();
   1b3fc:	a54fb0ef          	jal	ra,16650 <std::__throw_bad_alloc()@plt>
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
   1b400:	00083683          	ld	a3,0(a6)
   1b404:	e314                	c.sd	a3,0(a4)
	      __new_buckets[__bkt]->_M_nxt = __p;
   1b406:	639c                	c.ld	a5,0(a5)
   1b408:	e398                	c.sd	a4,0(a5)
      while (__p)
   1b40a:	ca1d                	c.beqz	a2,1b440 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x9c>
      _M_next() const noexcept
   1b40c:	8732                	c.mv	a4,a2
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1b40e:	6210                	c.ld	a2,0(a2)
    { return __num % __den; }
   1b410:	6714                	c.ld	a3,8(a4)
   1b412:	0286f6b3          	remu	a3,a3,s0
	  if (!__new_buckets[__bkt])
   1b416:	00369793          	slli	a5,a3,0x3
   1b41a:	97ca                	c.add	a5,s2
   1b41c:	0007b803          	ld	a6,0(a5)
   1b420:	fe0810e3          	bne	a6,zero,1b400 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x5c>
	      __p->_M_nxt = _M_before_begin._M_nxt;
   1b424:	6888                	c.ld	a0,16(s1)
   1b426:	e308                	c.sd	a0,0(a4)
	      _M_before_begin._M_nxt = __p;
   1b428:	e898                	c.sd	a4,16(s1)
	      __new_buckets[__bkt] = &_M_before_begin;
   1b42a:	0117b023          	sd	a7,0(a5)
	      if (__p->_M_nxt)
   1b42e:	631c                	c.ld	a5,0(a4)
   1b430:	c791                	c.beqz	a5,1b43c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x98>
		__new_buckets[__bbegin_bkt] = __p;
   1b432:	058e                	c.slli	a1,0x3
   1b434:	95ca                	c.add	a1,s2
   1b436:	e198                	c.sd	a4,0(a1)
	      __bbegin_bkt = __bkt;
   1b438:	85b6                	c.mv	a1,a3
   1b43a:	bfc1                	c.j	1b40a <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x66>
   1b43c:	85b6                	c.mv	a1,a3
   1b43e:	b7f1                	c.j	1b40a <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x66>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   1b440:	6088                	c.ld	a0,0(s1)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   1b442:	03048793          	addi	a5,s1,48
	if (_M_uses_single_bucket(__bkts))
   1b446:	00f50463          	beq	a0,a5,1b44e <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xaa>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1b44a:	b56fb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      _M_bucket_count = __bkt_count;
   1b44e:	e480                	c.sd	s0,8(s1)
      _M_buckets = __new_buckets;
   1b450:	0124b023          	sd	s2,0(s1)
    }
   1b454:	70a2                	c.ldsp	ra,40(sp)
   1b456:	7402                	c.ldsp	s0,32(sp)
   1b458:	64e2                	c.ldsp	s1,24(sp)
   1b45a:	6942                	c.ldsp	s2,16(sp)
   1b45c:	69a2                	c.ldsp	s3,8(sp)
   1b45e:	6145                	c.addi16sp	sp,48
   1b460:	8082                	c.jr	ra

000000000001b462 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1b462:	7139                	c.addi16sp	sp,-64
   1b464:	fc06                	c.sdsp	ra,56(sp)
   1b466:	f822                	c.sdsp	s0,48(sp)
   1b468:	f426                	c.sdsp	s1,40(sp)
   1b46a:	f04a                	c.sdsp	s2,32(sp)
   1b46c:	ec4e                	c.sdsp	s3,24(sp)
   1b46e:	e852                	c.sdsp	s4,16(sp)
   1b470:	842a                	c.mv	s0,a0
   1b472:	84ae                	c.mv	s1,a1
   1b474:	89b2                	c.mv	s3,a2
   1b476:	8936                	c.mv	s2,a3
    { return _M_next_resize; }
   1b478:	02853a03          	ld	s4,40(a0)
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
   1b47c:	86ba                	c.mv	a3,a4
   1b47e:	6d10                	c.ld	a2,24(a0)
   1b480:	650c                	c.ld	a1,8(a0)
   1b482:	02050513          	addi	a0,a0,32
   1b486:	bdafb0ef          	jal	ra,16860 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>
   1b48a:	e02a                	c.sdsp	a0,0(sp)
   1b48c:	e42e                	c.sdsp	a1,8(sp)
      if (__do_rehash.first)
   1b48e:	0ff57513          	andi	a0,a0,255
   1b492:	e91d                	c.bnez	a0,1b4c8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x66>
      if (_M_buckets[__bkt])
   1b494:	00349593          	slli	a1,s1,0x3
   1b498:	601c                	c.ld	a5,0(s0)
   1b49a:	97ae                	c.add	a5,a1
   1b49c:	639c                	c.ld	a5,0(a5)
   1b49e:	cfa9                	c.beqz	a5,1b4f8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x96>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
   1b4a0:	639c                	c.ld	a5,0(a5)
   1b4a2:	00f93023          	sd	a5,0(s2)
	  _M_buckets[__bkt]->_M_nxt = __node;
   1b4a6:	601c                	c.ld	a5,0(s0)
   1b4a8:	97ae                	c.add	a5,a1
   1b4aa:	639c                	c.ld	a5,0(a5)
   1b4ac:	0127b023          	sd	s2,0(a5)
      ++_M_element_count;
   1b4b0:	6c1c                	c.ld	a5,24(s0)
   1b4b2:	0785                	c.addi	a5,1
   1b4b4:	ec1c                	c.sd	a5,24(s0)
    }
   1b4b6:	854a                	c.mv	a0,s2
   1b4b8:	70e2                	c.ldsp	ra,56(sp)
   1b4ba:	7442                	c.ldsp	s0,48(sp)
   1b4bc:	74a2                	c.ldsp	s1,40(sp)
   1b4be:	7902                	c.ldsp	s2,32(sp)
   1b4c0:	69e2                	c.ldsp	s3,24(sp)
   1b4c2:	6a42                	c.ldsp	s4,16(sp)
   1b4c4:	6121                	c.addi16sp	sp,64
   1b4c6:	8082                	c.jr	ra
	  _M_rehash_aux(__bkt_count, __unique_keys{});
   1b4c8:	4601                	c.li	a2,0
   1b4ca:	8522                	c.mv	a0,s0
   1b4cc:	0001f317          	auipc	t1,0x1f
   1b4d0:	de433303          	ld	t1,-540(t1) # 3a2b0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)@@Base+0x1ef0c>
   1b4d4:	9302                	c.jalr	t1
   1b4d6:	a829                	c.j	1b4f0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x8e>
      __catch(...)
   1b4d8:	998fb0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
    { _M_next_resize = __state; }
   1b4dc:	03443423          	sd	s4,40(s0)
	  __throw_exception_again;
   1b4e0:	be0fb0ef          	jal	ra,168c0 <__cxa_rethrow@plt>
      __catch(...)
   1b4e4:	842a                	c.mv	s0,a0
   1b4e6:	c4afb0ef          	jal	ra,16930 <__cxa_end_catch@plt>
   1b4ea:	8522                	c.mv	a0,s0
   1b4ec:	ca4fb0ef          	jal	ra,16990 <_Unwind_Resume@plt>
    { return __num % __den; }
   1b4f0:	640c                	c.ld	a1,8(s0)
   1b4f2:	02b9f4b3          	remu	s1,s3,a1
   1b4f6:	bf79                	c.j	1b494 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x32>
	  __node->_M_nxt = _M_before_begin._M_nxt;
   1b4f8:	681c                	c.ld	a5,16(s0)
   1b4fa:	00f93023          	sd	a5,0(s2)
	  _M_before_begin._M_nxt = __node;
   1b4fe:	01243823          	sd	s2,16(s0)
	  if (__node->_M_nxt)
   1b502:	00093783          	ld	a5,0(s2)
   1b506:	cb91                	c.beqz	a5,1b51a <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0xb8>
   1b508:	679c                	c.ld	a5,8(a5)
   1b50a:	6418                	c.ld	a4,8(s0)
   1b50c:	02e7f7b3          	remu	a5,a5,a4
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
   1b510:	6018                	c.ld	a4,0(s0)
   1b512:	078e                	c.slli	a5,0x3
   1b514:	97ba                	c.add	a5,a4
   1b516:	0127b023          	sd	s2,0(a5)
	  _M_buckets[__bkt] = &_M_before_begin;
   1b51a:	601c                	c.ld	a5,0(s0)
   1b51c:	97ae                	c.add	a5,a1
   1b51e:	01040713          	addi	a4,s0,16
   1b522:	e398                	c.sd	a4,0(a5)
   1b524:	b771                	c.j	1b4b0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x4e>

000000000001b526 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)>:
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
   1b526:	7179                	c.addi16sp	sp,-48
   1b528:	f406                	c.sdsp	ra,40(sp)
   1b52a:	f022                	c.sdsp	s0,32(sp)
   1b52c:	ec26                	c.sdsp	s1,24(sp)
   1b52e:	e84a                	c.sdsp	s2,16(sp)
   1b530:	e44e                	c.sdsp	s3,8(sp)
   1b532:	e052                	c.sdsp	s4,0(sp)
   1b534:	892a                	c.mv	s2,a0
   1b536:	842e                	c.mv	s0,a1
	return _M_hash()(__k);
   1b538:	0005ba03          	ld	s4,0(a1)
    { return __num % __den; }
   1b53c:	00853983          	ld	s3,8(a0)
   1b540:	033a79b3          	remu	s3,s4,s3
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1b544:	86d2                	c.mv	a3,s4
   1b546:	862e                	c.mv	a2,a1
   1b548:	85ce                	c.mv	a1,s3
   1b54a:	0001f317          	auipc	t1,0x1f
   1b54e:	01633303          	ld	t1,22(t1) # 3a560 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x1f4a2>
   1b552:	9302                	c.jalr	t1
	if (__before_n)
   1b554:	cd09                	c.beqz	a0,1b56e <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x48>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   1b556:	611c                	c.ld	a5,0(a0)
	return __node->_M_v().second;
   1b558:	01078513          	addi	a0,a5,16
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
   1b55c:	cb89                	c.beqz	a5,1b56e <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x48>
    }
   1b55e:	70a2                	c.ldsp	ra,40(sp)
   1b560:	7402                	c.ldsp	s0,32(sp)
   1b562:	64e2                	c.ldsp	s1,24(sp)
   1b564:	6942                	c.ldsp	s2,16(sp)
   1b566:	69a2                	c.ldsp	s3,8(sp)
   1b568:	6a02                	c.ldsp	s4,0(sp)
   1b56a:	6145                	c.addi16sp	sp,48
   1b56c:	8082                	c.jr	ra
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1b56e:	03800513          	addi	a0,zero,56
   1b572:	a3efb0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1b576:	84aa                	c.mv	s1,a0
    _Hash_node_base() noexcept : _M_nxt() { }
   1b578:	00053023          	sd	zero,0(a0)
   1b57c:	601c                	c.ld	a5,0(s0)
   1b57e:	e51c                	c.sd	a5,8(a0)
  abbrev_entry() : code(0) {}
   1b580:	00053823          	sd	zero,16(a0)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1b584:	02053023          	sd	zero,32(a0)
   1b588:	02053423          	sd	zero,40(a0)
   1b58c:	02053823          	sd	zero,48(a0)
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
   1b590:	4705                	c.li	a4,1
   1b592:	86aa                	c.mv	a3,a0
   1b594:	8652                	c.mv	a2,s4
   1b596:	85ce                	c.mv	a1,s3
   1b598:	854a                	c.mv	a0,s2
   1b59a:	0001f317          	auipc	t1,0x1f
   1b59e:	fde33303          	ld	t1,-34(t1) # 3a578 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)@@Base+0x1f116>
   1b5a2:	9302                	c.jalr	t1
      return __pos->second;
   1b5a4:	0541                	c.addi	a0,16
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1b5a6:	bf65                	c.j	1b55e <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x38>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1b5a8:	842a                	c.mv	s0,a0
   1b5aa:	7088                	c.ld	a0,32(s1)
	if (__p)
   1b5ac:	c119                	c.beqz	a0,1b5b2 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x8c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1b5ae:	9f2fb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1b5b2:	8526                	c.mv	a0,s1
   1b5b4:	9ecfb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1b5b8:	8522                	c.mv	a0,s0
   1b5ba:	bd6fb0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001b5be <dwarf::cursor::skip_initial_length()>:
  pos = begin + length;
  return make_shared<section>(sec->type, begin, length, sec->ord, fmt);
}

void cursor::skip_initial_length() {
  switch (sec->fmt) {
   1b5be:	611c                	c.ld	a5,0(a0)
   1b5c0:	4f9c                	c.lw	a5,24(a5)
   1b5c2:	4705                	c.li	a4,1
   1b5c4:	00e79663          	bne	a5,a4,1b5d0 <dwarf::cursor::skip_initial_length()+0x12>
  case format::dwarf32:
    pos += sizeof(uword);
   1b5c8:	691c                	c.ld	a5,16(a0)
   1b5ca:	0791                	c.addi	a5,4
   1b5cc:	e91c                	c.sd	a5,16(a0)
   1b5ce:	8082                	c.jr	ra
  switch (sec->fmt) {
   1b5d0:	4709                	c.li	a4,2
   1b5d2:	00e79563          	bne	a5,a4,1b5dc <dwarf::cursor::skip_initial_length()+0x1e>
    break;
  case format::dwarf64:
    pos += sizeof(uword) + sizeof(uint64_t);
   1b5d6:	691c                	c.ld	a5,16(a0)
   1b5d8:	07b1                	c.addi	a5,12
    break;
   1b5da:	bfcd                	c.j	1b5cc <dwarf::cursor::skip_initial_length()+0xe>
void cursor::skip_initial_length() {
   1b5dc:	1101                	c.addi	sp,-32
   1b5de:	ec06                	c.sdsp	ra,24(sp)
   1b5e0:	e822                	c.sdsp	s0,16(sp)
   1b5e2:	e426                	c.sdsp	s1,8(sp)
  default:
    throw logic_error("cannot skip initial length with unknown format");
   1b5e4:	4541                	c.li	a0,16
   1b5e6:	8aafb0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1b5ea:	84aa                	c.mv	s1,a0
   1b5ec:	00013597          	auipc	a1,0x13
   1b5f0:	a3c58593          	addi	a1,a1,-1476 # 2e028 <std::piecewise_construct+0x8>
   1b5f4:	aacfb0ef          	jal	ra,168a0 <std::logic_error::logic_error(char const*)@plt>
   1b5f8:	0001f617          	auipc	a2,0x1f
   1b5fc:	e9063603          	ld	a2,-368(a2) # 3a488 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   1b600:	0001f597          	auipc	a1,0x1f
   1b604:	f905b583          	ld	a1,-112(a1) # 3a590 <typeinfo for std::logic_error@GLIBCXX_3.4+0xd40>
   1b608:	8526                	c.mv	a0,s1
   1b60a:	b56fb0ef          	jal	ra,16960 <__cxa_throw@plt>
   1b60e:	842a                	c.mv	s0,a0
   1b610:	8526                	c.mv	a0,s1
   1b612:	93efb0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1b616:	8522                	c.mv	a0,s0
   1b618:	b78fb0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001b61c <dwarf::cursor::cstr(unsigned long*)>:
  const char *p = this->cstr(&size);
  out.resize(size);
  memmove(&out.front(), p, size);
}

const char *cursor::cstr(size_t *size_out) {
   1b61c:	862a                	c.mv	a2,a0
  // Scan string size
  const char *p = pos;
   1b61e:	6908                	c.ld	a0,16(a0)
      { return _M_ptr; }
   1b620:	00063803          	ld	a6,0(a2)
  while (pos < sec->end && *pos)
   1b624:	01083703          	ld	a4,16(a6)
   1b628:	02e57563          	bgeu	a0,a4,1b652 <dwarf::cursor::cstr(unsigned long*)+0x36>
   1b62c:	87aa                	c.mv	a5,a0
   1b62e:	0007c683          	lbu	a3,0(a5)
   1b632:	c699                	c.beqz	a3,1b640 <dwarf::cursor::cstr(unsigned long*)+0x24>
    pos++;
   1b634:	0785                	c.addi	a5,1
   1b636:	ea1c                	c.sd	a5,16(a2)
  while (pos < sec->end && *pos)
   1b638:	01083703          	ld	a4,16(a6)
   1b63c:	fee7e9e3          	bltu	a5,a4,1b62e <dwarf::cursor::cstr(unsigned long*)+0x12>
  if (pos == sec->end)
   1b640:	00e78b63          	beq	a5,a4,1b656 <dwarf::cursor::cstr(unsigned long*)+0x3a>
    throw format_error("unterminated string");
  if (size_out)
   1b644:	c199                	c.beqz	a1,1b64a <dwarf::cursor::cstr(unsigned long*)+0x2e>
    *size_out = pos - p;
   1b646:	8f89                	c.sub	a5,a0
   1b648:	e19c                	c.sd	a5,0(a1)
  pos++;
   1b64a:	6a1c                	c.ld	a5,16(a2)
   1b64c:	0785                	c.addi	a5,1
   1b64e:	ea1c                	c.sd	a5,16(a2)
  return p;
}
   1b650:	8082                	c.jr	ra
  while (pos < sec->end && *pos)
   1b652:	87aa                	c.mv	a5,a0
   1b654:	b7f5                	c.j	1b640 <dwarf::cursor::cstr(unsigned long*)+0x24>
const char *cursor::cstr(size_t *size_out) {
   1b656:	1101                	c.addi	sp,-32
   1b658:	ec06                	c.sdsp	ra,24(sp)
   1b65a:	e822                	c.sdsp	s0,16(sp)
   1b65c:	e426                	c.sdsp	s1,8(sp)
    throw format_error("unterminated string");
   1b65e:	4541                	c.li	a0,16
   1b660:	830fb0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1b664:	842a                	c.mv	s0,a0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   1b666:	00013597          	auipc	a1,0x13
   1b66a:	9f258593          	addi	a1,a1,-1550 # 2e058 <std::piecewise_construct+0x38>
   1b66e:	ba2fb0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   1b672:	0001f797          	auipc	a5,0x1f
   1b676:	efe7b783          	ld	a5,-258(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   1b67a:	07c1                	c.addi	a5,16
   1b67c:	e01c                	c.sd	a5,0(s0)
   1b67e:	0001f617          	auipc	a2,0x1f
   1b682:	d1a63603          	ld	a2,-742(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   1b686:	0001f597          	auipc	a1,0x1f
   1b68a:	c425b583          	ld	a1,-958(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   1b68e:	8522                	c.mv	a0,s0
   1b690:	ad0fb0ef          	jal	ra,16960 <__cxa_throw@plt>
   1b694:	84aa                	c.mv	s1,a0
   1b696:	8522                	c.mv	a0,s0
   1b698:	8b8fb0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1b69c:	8526                	c.mv	a0,s1
   1b69e:	af2fb0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001b6a2 <dwarf::cursor::string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
void cursor::string(std::string &out) {
   1b6a2:	7179                	c.addi16sp	sp,-48
   1b6a4:	f406                	c.sdsp	ra,40(sp)
   1b6a6:	f022                	c.sdsp	s0,32(sp)
   1b6a8:	ec26                	c.sdsp	s1,24(sp)
   1b6aa:	842e                	c.mv	s0,a1
  const char *p = this->cstr(&size);
   1b6ac:	002c                	c.addi4spn	a1,sp,8
   1b6ae:	f6fff0ef          	jal	ra,1b61c <dwarf::cursor::cstr(unsigned long*)>
   1b6b2:	84aa                	c.mv	s1,a0
      { this->resize(__n, _CharT()); }
   1b6b4:	4601                	c.li	a2,0
   1b6b6:	65a2                	c.ldsp	a1,8(sp)
   1b6b8:	8522                	c.mv	a0,s0
   1b6ba:	f67fa0ef          	jal	ra,16620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@plt>
  memmove(&out.front(), p, size);
   1b6be:	6622                	c.ldsp	a2,8(sp)
   1b6c0:	85a6                	c.mv	a1,s1
   1b6c2:	6008                	c.ld	a0,0(s0)
   1b6c4:	b5cfb0ef          	jal	ra,16a20 <memmove@plt>
}
   1b6c8:	70a2                	c.ldsp	ra,40(sp)
   1b6ca:	7402                	c.ldsp	s0,32(sp)
   1b6cc:	64e2                	c.ldsp	s1,24(sp)
   1b6ce:	6145                	c.addi16sp	sp,48
   1b6d0:	8082                	c.jr	ra

000000000001b6d2 <dwarf::cursor::underflow()>:
  default:
    throw format_error("unknown form " + to_string(form));
  }
}

void cursor::underflow() {
   1b6d2:	1101                	c.addi	sp,-32
   1b6d4:	ec06                	c.sdsp	ra,24(sp)
   1b6d6:	e822                	c.sdsp	s0,16(sp)
   1b6d8:	e426                	c.sdsp	s1,8(sp)
  throw underflow_error("cannot read past end of DWARF section");
   1b6da:	4541                	c.li	a0,16
   1b6dc:	fb5fa0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1b6e0:	842a                	c.mv	s0,a0
   1b6e2:	00013597          	auipc	a1,0x13
   1b6e6:	98e58593          	addi	a1,a1,-1650 # 2e070 <std::piecewise_construct+0x50>
   1b6ea:	b96fb0ef          	jal	ra,16a80 <std::underflow_error::underflow_error(char const*)@plt>
   1b6ee:	0001f617          	auipc	a2,0x1f
   1b6f2:	f0a63603          	ld	a2,-246(a2) # 3a5f8 <std::underflow_error::~underflow_error()@GLIBCXX_3.4>
   1b6f6:	0001f597          	auipc	a1,0x1f
   1b6fa:	d1a5b583          	ld	a1,-742(a1) # 3a410 <typeinfo for std::underflow_error@GLIBCXX_3.4>
   1b6fe:	8522                	c.mv	a0,s0
   1b700:	a60fb0ef          	jal	ra,16960 <__cxa_throw@plt>
   1b704:	84aa                	c.mv	s1,a0
   1b706:	8522                	c.mv	a0,s0
   1b708:	848fb0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1b70c:	8526                	c.mv	a0,s1
   1b70e:	a82fb0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001b712 <dwarf::cursor::sleb128()>:
   1b712:	610c                	c.ld	a1,0(a0)
  unsigned shift = 0;
   1b714:	4701                	c.li	a4,0
  uint64_t result = 0;
   1b716:	4601                	c.li	a2,0
  while (pos < sec->end) {
   1b718:	691c                	c.ld	a5,16(a0)
   1b71a:	6994                	c.ld	a3,16(a1)
   1b71c:	04d7f063          	bgeu	a5,a3,1b75c <dwarf::cursor::sleb128()+0x4a>
    uint8_t byte = *(uint8_t *)(pos++);
   1b720:	00178693          	addi	a3,a5,1
   1b724:	e914                	c.sd	a3,16(a0)
   1b726:	0007c683          	lbu	a3,0(a5)
    result |= (uint64_t)(byte & 0x7f) << shift;
   1b72a:	07f6f793          	andi	a5,a3,127
   1b72e:	00e797b3          	sll	a5,a5,a4
   1b732:	8e5d                	c.or	a2,a5
    shift += 7;
   1b734:	271d                	c.addiw	a4,7
    if ((byte & 0x80) == 0) {
   1b736:	0186979b          	slliw	a5,a3,0x18
   1b73a:	4187d79b          	sraiw	a5,a5,0x18
   1b73e:	fc07cde3          	blt	a5,zero,1b718 <dwarf::cursor::sleb128()+0x6>
      if (shift < sizeof(result) * 8 && (byte & 0x40))
   1b742:	03f00793          	addi	a5,zero,63
   1b746:	00e7e963          	bltu	a5,a4,1b758 <dwarf::cursor::sleb128()+0x46>
   1b74a:	0406f693          	andi	a3,a3,64
   1b74e:	c689                	c.beqz	a3,1b758 <dwarf::cursor::sleb128()+0x46>
        result |= -((uint64_t)1 << shift);
   1b750:	57fd                	c.li	a5,-1
   1b752:	00e797b3          	sll	a5,a5,a4
   1b756:	8e5d                	c.or	a2,a5
      return result;
   1b758:	8532                	c.mv	a0,a2
}
   1b75a:	8082                	c.jr	ra
int64_t cursor::sleb128() {
   1b75c:	1141                	c.addi	sp,-16
   1b75e:	e406                	c.sdsp	ra,8(sp)
  underflow();
   1b760:	f73ff0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
  return 0;
   1b764:	4501                	c.li	a0,0
}
   1b766:	60a2                	c.ldsp	ra,8(sp)
   1b768:	0141                	c.addi	sp,16
   1b76a:	8082                	c.jr	ra

000000000001b76c <dwarf::cursor::skip_form(dwarf::DW_FORM)>:
void cursor::skip_form(DW_FORM form) {
   1b76c:	711d                	c.addi16sp	sp,-96
   1b76e:	ec86                	c.sdsp	ra,88(sp)
   1b770:	e8a2                	c.sdsp	s0,80(sp)
   1b772:	e4a6                	c.sdsp	s1,72(sp)
   1b774:	e0ca                	c.sdsp	s2,64(sp)
   1b776:	84ae                	c.mv	s1,a1
  switch (form) {
   1b778:	02000793          	addi	a5,zero,32
   1b77c:	22b7e863          	bltu	a5,a1,1b9ac <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x240>
   1b780:	842a                	c.mv	s0,a0
   1b782:	00259793          	slli	a5,a1,0x2
   1b786:	00013717          	auipc	a4,0x13
   1b78a:	99a70713          	addi	a4,a4,-1638 # 2e120 <std::piecewise_construct+0x100>
   1b78e:	97ba                	c.add	a5,a4
   1b790:	439c                	c.lw	a5,0(a5)
   1b792:	97ba                	c.add	a5,a4
   1b794:	8782                	c.jr	a5
    while (pos < sec->end) {
   1b796:	691c                	c.ld	a5,16(a0)
   1b798:	6108                	c.ld	a0,0(a0)
   1b79a:	6918                	c.ld	a4,16(a0)
    std::uint64_t result = 0;
   1b79c:	4581                	c.li	a1,0
    int shift = 0;
   1b79e:	4601                	c.li	a2,0
    while (pos < sec->end) {
   1b7a0:	02e7f563          	bgeu	a5,a4,1b7ca <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x5e>
      uint8_t byte = *(uint8_t *)(pos++);
   1b7a4:	0785                	c.addi	a5,1
   1b7a6:	e81c                	c.sd	a5,16(s0)
   1b7a8:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1b7ac:	07f77693          	andi	a3,a4,127
   1b7b0:	00c696b3          	sll	a3,a3,a2
   1b7b4:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   1b7b6:	0187171b          	slliw	a4,a4,0x18
   1b7ba:	4187571b          	sraiw	a4,a4,0x18
   1b7be:	00075a63          	bge	a4,zero,1b7d2 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x66>
      shift += 7;
   1b7c2:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   1b7c4:	6918                	c.ld	a4,16(a0)
   1b7c6:	fce7efe3          	bltu	a5,a4,1b7a4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x38>
    underflow();
   1b7ca:	8522                	c.mv	a0,s0
   1b7cc:	f07ff0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    return 0;
   1b7d0:	4581                	c.li	a1,0
    skip_form((DW_FORM)uleb128());
   1b7d2:	2581                	c.addiw	a1,0
   1b7d4:	8522                	c.mv	a0,s0
   1b7d6:	f97ff0ef          	jal	ra,1b76c <dwarf::cursor::skip_form(dwarf::DW_FORM)>
    break;
   1b7da:	a091                	c.j	1b81e <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    while (pos < sec->end) {
   1b7dc:	691c                	c.ld	a5,16(a0)
   1b7de:	6108                	c.ld	a0,0(a0)
   1b7e0:	6918                	c.ld	a4,16(a0)
    std::uint64_t result = 0;
   1b7e2:	4581                	c.li	a1,0
    int shift = 0;
   1b7e4:	4601                	c.li	a2,0
    while (pos < sec->end) {
   1b7e6:	02e7f563          	bgeu	a5,a4,1b810 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xa4>
      uint8_t byte = *(uint8_t *)(pos++);
   1b7ea:	0785                	c.addi	a5,1
   1b7ec:	e81c                	c.sd	a5,16(s0)
   1b7ee:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1b7f2:	07f77693          	andi	a3,a4,127
   1b7f6:	00c696b3          	sll	a3,a3,a2
   1b7fa:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   1b7fc:	0187171b          	slliw	a4,a4,0x18
   1b800:	4187571b          	sraiw	a4,a4,0x18
   1b804:	00075a63          	bge	a4,zero,1b818 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xac>
      shift += 7;
   1b808:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   1b80a:	6918                	c.ld	a4,16(a0)
   1b80c:	fce7efe3          	bltu	a5,a4,1b7ea <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x7e>
    underflow();
   1b810:	8522                	c.mv	a0,s0
   1b812:	ec1ff0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    return 0;
   1b816:	4581                	c.li	a1,0
    pos += tmp;
   1b818:	681c                	c.ld	a5,16(s0)
   1b81a:	97ae                	c.add	a5,a1
   1b81c:	e81c                	c.sd	a5,16(s0)
}
   1b81e:	60e6                	c.ldsp	ra,88(sp)
   1b820:	6446                	c.ldsp	s0,80(sp)
   1b822:	64a6                	c.ldsp	s1,72(sp)
   1b824:	6906                	c.ldsp	s2,64(sp)
   1b826:	6125                	c.addi16sp	sp,96
   1b828:	8082                	c.jr	ra
    pos += sec->addr_size;
   1b82a:	611c                	c.ld	a5,0(a0)
   1b82c:	0207e703          	lwu	a4,32(a5)
   1b830:	691c                	c.ld	a5,16(a0)
   1b832:	97ba                	c.add	a5,a4
   1b834:	e91c                	c.sd	a5,16(a0)
    break;
   1b836:	b7e5                	c.j	1b81e <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    switch (sec->fmt) {
   1b838:	611c                	c.ld	a5,0(a0)
   1b83a:	4f9c                	c.lw	a5,24(a5)
   1b83c:	4709                	c.li	a4,2
   1b83e:	00e78c63          	beq	a5,a4,1b856 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xea>
   1b842:	fcf74ee3          	blt	a4,a5,1b81e <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
   1b846:	cf81                	c.beqz	a5,1b85e <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xf2>
   1b848:	4705                	c.li	a4,1
   1b84a:	fce79ae3          	bne	a5,a4,1b81e <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
      pos += 4;
   1b84e:	691c                	c.ld	a5,16(a0)
   1b850:	0791                	c.addi	a5,4
   1b852:	e91c                	c.sd	a5,16(a0)
      break;
   1b854:	b7e9                	c.j	1b81e <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
      pos += 8;
   1b856:	691c                	c.ld	a5,16(a0)
   1b858:	07a1                	c.addi	a5,8
   1b85a:	e91c                	c.sd	a5,16(a0)
      break;
   1b85c:	b7c9                	c.j	1b81e <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
      throw logic_error("cannot read form with unknown format");
   1b85e:	4541                	c.li	a0,16
   1b860:	e31fa0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1b864:	842a                	c.mv	s0,a0
   1b866:	00013597          	auipc	a1,0x13
   1b86a:	83258593          	addi	a1,a1,-1998 # 2e098 <std::piecewise_construct+0x78>
   1b86e:	832fb0ef          	jal	ra,168a0 <std::logic_error::logic_error(char const*)@plt>
   1b872:	0001f617          	auipc	a2,0x1f
   1b876:	c1663603          	ld	a2,-1002(a2) # 3a488 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   1b87a:	0001f597          	auipc	a1,0x1f
   1b87e:	d165b583          	ld	a1,-746(a1) # 3a590 <typeinfo for std::logic_error@GLIBCXX_3.4+0xd40>
   1b882:	8522                	c.mv	a0,s0
   1b884:	8dcfb0ef          	jal	ra,16960 <__cxa_throw@plt>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1b888:	611c                	c.ld	a5,0(a0)
   1b88a:	6b98                	c.ld	a4,16(a5)
   1b88c:	691c                	c.ld	a5,16(a0)
   1b88e:	00e7e463          	bltu	a5,a4,1b896 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x12a>
      underflow();
   1b892:	e41ff0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1b896:	681c                	c.ld	a5,16(s0)
    if (sec->ord == byte_order::lsb) {
   1b898:	6018                	c.ld	a4,0(s0)
   1b89a:	4f58                	c.lw	a4,28(a4)
   1b89c:	1a070d63          	beq	a4,zero,1ba56 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2ea>
        val = (val << 8) | (uint64_t)p[i];
   1b8a0:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1b8a4:	aa5d                	c.j	1ba5a <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2ee>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1b8a6:	611c                	c.ld	a5,0(a0)
   1b8a8:	6b98                	c.ld	a4,16(a5)
   1b8aa:	691c                	c.ld	a5,16(a0)
   1b8ac:	40f70633          	sub	a2,a4,a5
   1b8b0:	4685                	c.li	a3,1
   1b8b2:	00c6f463          	bgeu	a3,a2,1b8ba <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x14e>
   1b8b6:	00e7e563          	bltu	a5,a4,1b8c0 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x154>
      underflow();
   1b8ba:	8522                	c.mv	a0,s0
   1b8bc:	e17ff0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1b8c0:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1b8c2:	601c                	c.ld	a5,0(s0)
   1b8c4:	4fdc                	c.lw	a5,28(a5)
   1b8c6:	eb99                	c.bnez	a5,1b8dc <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x170>
        val |= ((uint64_t)p[i]) << (i * 8);
   1b8c8:	00174783          	lbu	a5,1(a4)
   1b8cc:	07a2                	c.slli	a5,0x8
   1b8ce:	00074683          	lbu	a3,0(a4)
   1b8d2:	8fd5                	c.or	a5,a3
    pos += tmp;
   1b8d4:	0789                	c.addi	a5,2
   1b8d6:	973e                	c.add	a4,a5
   1b8d8:	e818                	c.sd	a4,16(s0)
    break;
   1b8da:	b791                	c.j	1b81e <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
        val = (val << 8) | (uint64_t)p[i];
   1b8dc:	00074783          	lbu	a5,0(a4)
   1b8e0:	07a2                	c.slli	a5,0x8
   1b8e2:	00174683          	lbu	a3,1(a4)
   1b8e6:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1b8e8:	b7f5                	c.j	1b8d4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x168>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1b8ea:	611c                	c.ld	a5,0(a0)
   1b8ec:	6b98                	c.ld	a4,16(a5)
   1b8ee:	691c                	c.ld	a5,16(a0)
   1b8f0:	40f70633          	sub	a2,a4,a5
   1b8f4:	468d                	c.li	a3,3
   1b8f6:	00c6f463          	bgeu	a3,a2,1b8fe <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x192>
   1b8fa:	00e7e563          	bltu	a5,a4,1b904 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x198>
      underflow();
   1b8fe:	8522                	c.mv	a0,s0
   1b900:	dd3ff0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1b904:	680c                	c.ld	a1,16(s0)
    if (sec->ord == byte_order::lsb) {
   1b906:	601c                	c.ld	a5,0(s0)
   1b908:	4fdc                	c.lw	a5,28(a5)
   1b90a:	e785                	c.bnez	a5,1b932 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x1c6>
   1b90c:	862e                	c.mv	a2,a1
   1b90e:	4701                	c.li	a4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1b910:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1b914:	00064683          	lbu	a3,0(a2)
   1b918:	00e696b3          	sll	a3,a3,a4
   1b91c:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1b91e:	0605                	c.addi	a2,1
   1b920:	2721                	c.addiw	a4,8
   1b922:	fea719e3          	bne	a4,a0,1b914 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x1a8>
    pos += tmp;
   1b926:	1782                	c.slli	a5,0x20
   1b928:	9381                	c.srli	a5,0x20
   1b92a:	0791                	c.addi	a5,4
   1b92c:	95be                	c.add	a1,a5
   1b92e:	e80c                	c.sd	a1,16(s0)
    break;
   1b930:	b5fd                	c.j	1b81e <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
   1b932:	872e                	c.mv	a4,a1
   1b934:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1b938:	4781                	c.li	a5,0
        val = (val << 8) | (uint64_t)p[i];
   1b93a:	07a2                	c.slli	a5,0x8
   1b93c:	00074683          	lbu	a3,0(a4)
   1b940:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1b942:	0705                	c.addi	a4,1
   1b944:	fee61be3          	bne	a2,a4,1b93a <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x1ce>
   1b948:	bff9                	c.j	1b926 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x1ba>
    pos += 1;
   1b94a:	691c                	c.ld	a5,16(a0)
   1b94c:	0785                	c.addi	a5,1
   1b94e:	e91c                	c.sd	a5,16(a0)
    break;
   1b950:	b5f9                	c.j	1b81e <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    pos += 2;
   1b952:	691c                	c.ld	a5,16(a0)
   1b954:	0789                	c.addi	a5,2
   1b956:	e91c                	c.sd	a5,16(a0)
    break;
   1b958:	b5d9                	c.j	1b81e <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    pos += 4;
   1b95a:	691c                	c.ld	a5,16(a0)
   1b95c:	0791                	c.addi	a5,4
   1b95e:	e91c                	c.sd	a5,16(a0)
    break;
   1b960:	bd7d                	c.j	1b81e <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    pos += 8;
   1b962:	691c                	c.ld	a5,16(a0)
   1b964:	07a1                	c.addi	a5,8
   1b966:	e91c                	c.sd	a5,16(a0)
    break;
   1b968:	bd5d                	c.j	1b81e <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    while (pos < sec->end && (*(uint8_t *)pos & 0x80))
   1b96a:	691c                	c.ld	a5,16(a0)
   1b96c:	6114                	c.ld	a3,0(a0)
   1b96e:	6a98                	c.ld	a4,16(a3)
   1b970:	00e7fb63          	bgeu	a5,a4,1b986 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x21a>
   1b974:	00078703          	lb	a4,0(a5)
   1b978:	00075763          	bge	a4,zero,1b986 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x21a>
      pos++;
   1b97c:	0785                	c.addi	a5,1
   1b97e:	e81c                	c.sd	a5,16(s0)
    while (pos < sec->end && (*(uint8_t *)pos & 0x80))
   1b980:	6a98                	c.ld	a4,16(a3)
   1b982:	fee7e9e3          	bltu	a5,a4,1b974 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x208>
    pos++;
   1b986:	0785                	c.addi	a5,1
   1b988:	e81c                	c.sd	a5,16(s0)
    break;
   1b98a:	bd51                	c.j	1b81e <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    while (pos < sec->end && *pos)
   1b98c:	691c                	c.ld	a5,16(a0)
   1b98e:	6114                	c.ld	a3,0(a0)
   1b990:	6a98                	c.ld	a4,16(a3)
   1b992:	00e7fa63          	bgeu	a5,a4,1b9a6 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x23a>
   1b996:	0007c703          	lbu	a4,0(a5)
   1b99a:	c711                	c.beqz	a4,1b9a6 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x23a>
      pos++;
   1b99c:	0785                	c.addi	a5,1
   1b99e:	e81c                	c.sd	a5,16(s0)
    while (pos < sec->end && *pos)
   1b9a0:	6a98                	c.ld	a4,16(a3)
   1b9a2:	fee7eae3          	bltu	a5,a4,1b996 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x22a>
    pos++;
   1b9a6:	0785                	c.addi	a5,1
   1b9a8:	e81c                	c.sd	a5,16(s0)
    break;
   1b9aa:	bd95                	c.j	1b81e <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    throw format_error("unknown form " + to_string(form));
   1b9ac:	4541                	c.li	a0,16
   1b9ae:	ce3fa0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1b9b2:	892a                	c.mv	s2,a0
   1b9b4:	85a6                	c.mv	a1,s1
   1b9b6:	850a                	c.mv	a0,sp
   1b9b8:	7350c0ef          	jal	ra,288ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1b9bc:	00012617          	auipc	a2,0x12
   1b9c0:	70460613          	addi	a2,a2,1796 # 2e0c0 <std::piecewise_construct+0xa0>
   1b9c4:	4581                	c.li	a1,0
   1b9c6:	850a                	c.mv	a0,sp
   1b9c8:	c39fa0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1b9cc:	85aa                	c.mv	a1,a0
   1b9ce:	1000                	c.addi4spn	s0,sp,32
   1b9d0:	8522                	c.mv	a0,s0
   1b9d2:	cfffa0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   1b9d6:	85a2                	c.mv	a1,s0
   1b9d8:	854a                	c.mv	a0,s2
   1b9da:	e57fa0ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1b9de:	0001f797          	auipc	a5,0x1f
   1b9e2:	b927b783          	ld	a5,-1134(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   1b9e6:	07c1                	c.addi	a5,16
   1b9e8:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   1b9ec:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1b9ee:	181c                	c.addi4spn	a5,sp,48
   1b9f0:	00f50463          	beq	a0,a5,1b9f8 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x28c>
   1b9f4:	dadfa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1b9f8:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1b9fa:	081c                	c.addi4spn	a5,sp,16
   1b9fc:	00f50463          	beq	a0,a5,1ba04 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x298>
   1ba00:	da1fa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1ba04:	0001f617          	auipc	a2,0x1f
   1ba08:	99463603          	ld	a2,-1644(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   1ba0c:	0001f597          	auipc	a1,0x1f
   1ba10:	8bc5b583          	ld	a1,-1860(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   1ba14:	854a                	c.mv	a0,s2
   1ba16:	f4bfa0ef          	jal	ra,16960 <__cxa_throw@plt>
      throw logic_error("cannot read form with unknown format");
   1ba1a:	84aa                	c.mv	s1,a0
   1ba1c:	8522                	c.mv	a0,s0
   1ba1e:	d33fa0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1ba22:	8526                	c.mv	a0,s1
   1ba24:	f6dfa0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1ba28:	842a                	c.mv	s0,a0
   1ba2a:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1ba2c:	181c                	c.addi4spn	a5,sp,48
   1ba2e:	00f50463          	beq	a0,a5,1ba36 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2ca>
   1ba32:	d6ffa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ba36:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1ba38:	081c                	c.addi4spn	a5,sp,16
   1ba3a:	00f50463          	beq	a0,a5,1ba42 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2d6>
   1ba3e:	d63fa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
    throw format_error("unknown form " + to_string(form));
   1ba42:	854a                	c.mv	a0,s2
   1ba44:	d0dfa0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1ba48:	8522                	c.mv	a0,s0
   1ba4a:	f47fa0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1ba4e:	842a                	c.mv	s0,a0
   1ba50:	b7dd                	c.j	1ba36 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2ca>
   1ba52:	842a                	c.mv	s0,a0
   1ba54:	b7fd                	c.j	1ba42 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2d6>
        val |= ((uint64_t)p[i]) << (i * 8);
   1ba56:	0007c703          	lbu	a4,0(a5)
    pos += tmp;
   1ba5a:	0705                	c.addi	a4,1
   1ba5c:	97ba                	c.add	a5,a4
   1ba5e:	e81c                	c.sd	a5,16(s0)
    break;
   1ba60:	bb7d                	c.j	1b81e <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>

000000000001ba62 <dwarf::cursor::subsection()>:
shared_ptr<section> cursor::subsection() {
   1ba62:	7179                	c.addi16sp	sp,-48
   1ba64:	f406                	c.sdsp	ra,40(sp)
   1ba66:	f022                	c.sdsp	s0,32(sp)
   1ba68:	ec26                	c.sdsp	s1,24(sp)
   1ba6a:	e84a                	c.sdsp	s2,16(sp)
   1ba6c:	e44e                	c.sdsp	s3,8(sp)
   1ba6e:	e052                	c.sdsp	s4,0(sp)
   1ba70:	892a                	c.mv	s2,a0
   1ba72:	84ae                	c.mv	s1,a1
  const char *begin = pos;
   1ba74:	0105b983          	ld	s3,16(a1)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ba78:	619c                	c.ld	a5,0(a1)
   1ba7a:	6b9c                	c.ld	a5,16(a5)
   1ba7c:	413786b3          	sub	a3,a5,s3
   1ba80:	470d                	c.li	a4,3
   1ba82:	00d77463          	bgeu	a4,a3,1ba8a <dwarf::cursor::subsection()+0x28>
   1ba86:	00f9e563          	bltu	s3,a5,1ba90 <dwarf::cursor::subsection()+0x2e>
      underflow();
   1ba8a:	8526                	c.mv	a0,s1
   1ba8c:	c47ff0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1ba90:	688c                	c.ld	a1,16(s1)
   1ba92:	6088                	c.ld	a0,0(s1)
    if (sec->ord == byte_order::lsb) {
   1ba94:	4d5c                	c.lw	a5,28(a0)
   1ba96:	e7d5                	c.bnez	a5,1bb42 <dwarf::cursor::subsection()+0xe0>
   1ba98:	862e                	c.mv	a2,a1
   1ba9a:	4701                	c.li	a4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1ba9c:	02000813          	addi	a6,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1baa0:	00064683          	lbu	a3,0(a2)
   1baa4:	00e696b3          	sll	a3,a3,a4
   1baa8:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1baaa:	0605                	c.addi	a2,1
   1baac:	2721                	c.addiw	a4,8
   1baae:	ff0719e3          	bne	a4,a6,1baa0 <dwarf::cursor::subsection()+0x3e>
    pos += sizeof(T);
   1bab2:	0591                	c.addi	a1,4
   1bab4:	e88c                	c.sd	a1,16(s1)
   1bab6:	1782                	c.slli	a5,0x20
   1bab8:	9381                	c.srli	a5,0x20
  if (length < 0xfffffff0) {
   1baba:	4705                	c.li	a4,1
   1babc:	1702                	c.slli	a4,0x20
   1babe:	173d                	c.addi	a4,-17
   1bac0:	08f76d63          	bltu	a4,a5,1bb5a <dwarf::cursor::subsection()+0xf8>
    length += sizeof(uword);
   1bac4:	0791                	c.addi	a5,4
    fmt = format::dwarf32;
   1bac6:	4a05                	c.li	s4,1
  pos = begin + length;
   1bac8:	00f98433          	add	s0,s3,a5
   1bacc:	e880                	c.sd	s0,16(s1)
   1bace:	6084                	c.ld	s1,0(s1)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   1bad0:	00093023          	sd	zero,0(s2)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1bad4:	06000513          	addi	a0,zero,96
   1bad8:	cd9fa0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1badc:	00052423          	sw	zero,8(a0)
   1bae0:	00052623          	sw	zero,12(a0)
   1bae4:	00052823          	sw	zero,16(a0)
   1bae8:	00052a23          	sw	zero,20(a0)
   1baec:	00052c23          	sw	zero,24(a0)
   1baf0:	00052e23          	sw	zero,28(a0)
   1baf4:	02053023          	sd	zero,32(a0)
   1baf8:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   1bafc:	4785                	c.li	a5,1
   1bafe:	d91c                	c.sw	a5,48(a0)
   1bb00:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   1bb02:	0001f797          	auipc	a5,0x1f
   1bb06:	ad67b783          	ld	a5,-1322(a5) # 3a5d8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   1bb0a:	07c1                	c.addi	a5,16
   1bb0c:	e11c                	c.sd	a5,0(a0)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1bb0e:	4098                	c.lw	a4,0(s1)
   1bb10:	4cdc                	c.lw	a5,28(s1)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   1bb12:	dd18                	c.sw	a4,56(a0)
   1bb14:	05353023          	sd	s3,64(a0)
   1bb18:	e520                	c.sd	s0,72(a0)
   1bb1a:	05452823          	sw	s4,80(a0)
        ord(ord), addr_size(addr_size) {}
   1bb1e:	c97c                	c.sw	a5,84(a0)
   1bb20:	04052c23          	sw	zero,88(a0)
	  _M_pi = __pi;
   1bb24:	00a93423          	sd	a0,8(s2)
   1bb28:	03850793          	addi	a5,a0,56
	  __p = __pi->_M_ptr();
   1bb2c:	00f93023          	sd	a5,0(s2)
}
   1bb30:	854a                	c.mv	a0,s2
   1bb32:	70a2                	c.ldsp	ra,40(sp)
   1bb34:	7402                	c.ldsp	s0,32(sp)
   1bb36:	64e2                	c.ldsp	s1,24(sp)
   1bb38:	6942                	c.ldsp	s2,16(sp)
   1bb3a:	69a2                	c.ldsp	s3,8(sp)
   1bb3c:	6a02                	c.ldsp	s4,0(sp)
   1bb3e:	6145                	c.addi16sp	sp,48
   1bb40:	8082                	c.jr	ra
   1bb42:	872e                	c.mv	a4,a1
   1bb44:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1bb48:	4781                	c.li	a5,0
        val = (val << 8) | (uint64_t)p[i];
   1bb4a:	07a2                	c.slli	a5,0x8
   1bb4c:	00074683          	lbu	a3,0(a4)
   1bb50:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1bb52:	0705                	c.addi	a4,1
   1bb54:	fec71be3          	bne	a4,a2,1bb4a <dwarf::cursor::subsection()+0xe8>
   1bb58:	bfa9                	c.j	1bab2 <dwarf::cursor::subsection()+0x50>
  } else if (length == 0xffffffff) {
   1bb5a:	577d                	c.li	a4,-1
   1bb5c:	9301                	c.srli	a4,0x20
   1bb5e:	04e79b63          	bne	a5,a4,1bbb4 <dwarf::cursor::subsection()+0x152>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1bb62:	691c                	c.ld	a5,16(a0)
   1bb64:	40b786b3          	sub	a3,a5,a1
   1bb68:	471d                	c.li	a4,7
   1bb6a:	00d77463          	bgeu	a4,a3,1bb72 <dwarf::cursor::subsection()+0x110>
   1bb6e:	00f5e563          	bltu	a1,a5,1bb78 <dwarf::cursor::subsection()+0x116>
      underflow();
   1bb72:	8526                	c.mv	a0,s1
   1bb74:	b5fff0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1bb78:	6898                	c.ld	a4,16(s1)
    if (sec->ord == byte_order::lsb) {
   1bb7a:	609c                	c.ld	a5,0(s1)
   1bb7c:	4fdc                	c.lw	a5,28(a5)
   1bb7e:	e385                	c.bnez	a5,1bb9e <dwarf::cursor::subsection()+0x13c>
   1bb80:	4681                	c.li	a3,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1bb82:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1bb86:	00074603          	lbu	a2,0(a4)
   1bb8a:	00d61633          	sll	a2,a2,a3
   1bb8e:	8fd1                	c.or	a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1bb90:	0705                	c.addi	a4,1
   1bb92:	26a1                	c.addiw	a3,8
   1bb94:	feb699e3          	bne	a3,a1,1bb86 <dwarf::cursor::subsection()+0x124>
    length += sizeof(uword) + sizeof(uint64_t);
   1bb98:	07b1                	c.addi	a5,12
    fmt = format::dwarf64;
   1bb9a:	4a09                	c.li	s4,2
   1bb9c:	b735                	c.j	1bac8 <dwarf::cursor::subsection()+0x66>
   1bb9e:	86ba                	c.mv	a3,a4
   1bba0:	0721                	c.addi	a4,8
    uint64_t val = 0;
   1bba2:	4781                	c.li	a5,0
        val = (val << 8) | (uint64_t)p[i];
   1bba4:	07a2                	c.slli	a5,0x8
   1bba6:	0006c603          	lbu	a2,0(a3)
   1bbaa:	8fd1                	c.or	a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1bbac:	0685                	c.addi	a3,1
   1bbae:	fee69be3          	bne	a3,a4,1bba4 <dwarf::cursor::subsection()+0x142>
   1bbb2:	b7dd                	c.j	1bb98 <dwarf::cursor::subsection()+0x136>
    throw format_error("initial length has reserved value");
   1bbb4:	4541                	c.li	a0,16
   1bbb6:	adbfa0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1bbba:	842a                	c.mv	s0,a0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   1bbbc:	00012597          	auipc	a1,0x12
   1bbc0:	51458593          	addi	a1,a1,1300 # 2e0d0 <std::piecewise_construct+0xb0>
   1bbc4:	e4dfa0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   1bbc8:	0001f797          	auipc	a5,0x1f
   1bbcc:	9a87b783          	ld	a5,-1624(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   1bbd0:	07c1                	c.addi	a5,16
   1bbd2:	e01c                	c.sd	a5,0(s0)
   1bbd4:	0001e617          	auipc	a2,0x1e
   1bbd8:	7c463603          	ld	a2,1988(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   1bbdc:	0001e597          	auipc	a1,0x1e
   1bbe0:	6ec5b583          	ld	a1,1772(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   1bbe4:	8522                	c.mv	a0,s0
   1bbe6:	d7bfa0ef          	jal	ra,16960 <__cxa_throw@plt>
   1bbea:	84aa                	c.mv	s1,a0
   1bbec:	8522                	c.mv	a0,s0
   1bbee:	b63fa0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1bbf2:	8526                	c.mv	a0,s1
   1bbf4:	d9dfa0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001bbf8 <dwarf::cursor::offset()>:
section_offset cursor::offset() {
   1bbf8:	1101                	c.addi	sp,-32
   1bbfa:	ec06                	c.sdsp	ra,24(sp)
   1bbfc:	e822                	c.sdsp	s0,16(sp)
   1bbfe:	e426                	c.sdsp	s1,8(sp)
   1bc00:	842a                	c.mv	s0,a0
      { return _M_ptr; }
   1bc02:	611c                	c.ld	a5,0(a0)
  switch (sec->fmt) {
   1bc04:	4f98                	c.lw	a4,24(a5)
   1bc06:	4685                	c.li	a3,1
   1bc08:	04d70563          	beq	a4,a3,1bc52 <dwarf::cursor::offset()+0x5a>
   1bc0c:	4689                	c.li	a3,2
   1bc0e:	0cd71163          	bne	a4,a3,1bcd0 <dwarf::cursor::offset()+0xd8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1bc12:	6b98                	c.ld	a4,16(a5)
   1bc14:	691c                	c.ld	a5,16(a0)
   1bc16:	40f70633          	sub	a2,a4,a5
   1bc1a:	469d                	c.li	a3,7
   1bc1c:	00c6f463          	bgeu	a3,a2,1bc24 <dwarf::cursor::offset()+0x2c>
   1bc20:	00e7e563          	bltu	a5,a4,1bc2a <dwarf::cursor::offset()+0x32>
      underflow();
   1bc24:	8522                	c.mv	a0,s0
   1bc26:	aadff0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1bc2a:	6810                	c.ld	a2,16(s0)
    if (sec->ord == byte_order::lsb) {
   1bc2c:	601c                	c.ld	a5,0(s0)
   1bc2e:	4fdc                	c.lw	a5,28(a5)
   1bc30:	e7c1                	c.bnez	a5,1bcb8 <dwarf::cursor::offset()+0xc0>
   1bc32:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1bc34:	4501                	c.li	a0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1bc36:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1bc3a:	0006c703          	lbu	a4,0(a3)
   1bc3e:	00f71733          	sll	a4,a4,a5
   1bc42:	8d59                	c.or	a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1bc44:	0685                	c.addi	a3,1
   1bc46:	27a1                	c.addiw	a5,8
   1bc48:	feb799e3          	bne	a5,a1,1bc3a <dwarf::cursor::offset()+0x42>
    pos += sizeof(T);
   1bc4c:	00860713          	addi	a4,a2,8
    return fixed<uint64_t>();
   1bc50:	a091                	c.j	1bc94 <dwarf::cursor::offset()+0x9c>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1bc52:	6b98                	c.ld	a4,16(a5)
   1bc54:	691c                	c.ld	a5,16(a0)
   1bc56:	40f70633          	sub	a2,a4,a5
   1bc5a:	468d                	c.li	a3,3
   1bc5c:	00c6f463          	bgeu	a3,a2,1bc64 <dwarf::cursor::offset()+0x6c>
   1bc60:	00e7e563          	bltu	a5,a4,1bc6a <dwarf::cursor::offset()+0x72>
      underflow();
   1bc64:	8522                	c.mv	a0,s0
   1bc66:	a6dff0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1bc6a:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1bc6c:	601c                	c.ld	a5,0(s0)
   1bc6e:	4fdc                	c.lw	a5,28(a5)
   1bc70:	eb85                	c.bnez	a5,1bca0 <dwarf::cursor::offset()+0xa8>
   1bc72:	85ba                	c.mv	a1,a4
   1bc74:	4681                	c.li	a3,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1bc76:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1bc7a:	0005c603          	lbu	a2,0(a1)
   1bc7e:	00d61633          	sll	a2,a2,a3
   1bc82:	8fd1                	c.or	a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1bc84:	0585                	c.addi	a1,1
   1bc86:	26a1                	c.addiw	a3,8
   1bc88:	fea699e3          	bne	a3,a0,1bc7a <dwarf::cursor::offset()+0x82>
    pos += sizeof(T);
   1bc8c:	0711                	c.addi	a4,4
   1bc8e:	02079513          	slli	a0,a5,0x20
   1bc92:	9101                	c.srli	a0,0x20
   1bc94:	e818                	c.sd	a4,16(s0)
}
   1bc96:	60e2                	c.ldsp	ra,24(sp)
   1bc98:	6442                	c.ldsp	s0,16(sp)
   1bc9a:	64a2                	c.ldsp	s1,8(sp)
   1bc9c:	6105                	c.addi16sp	sp,32
   1bc9e:	8082                	c.jr	ra
   1bca0:	86ba                	c.mv	a3,a4
   1bca2:	00470593          	addi	a1,a4,4
    uint64_t val = 0;
   1bca6:	4781                	c.li	a5,0
        val = (val << 8) | (uint64_t)p[i];
   1bca8:	07a2                	c.slli	a5,0x8
   1bcaa:	0006c603          	lbu	a2,0(a3)
   1bcae:	8fd1                	c.or	a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1bcb0:	0685                	c.addi	a3,1
   1bcb2:	feb69be3          	bne	a3,a1,1bca8 <dwarf::cursor::offset()+0xb0>
   1bcb6:	bfd9                	c.j	1bc8c <dwarf::cursor::offset()+0x94>
   1bcb8:	87b2                	c.mv	a5,a2
   1bcba:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1bcbe:	4501                	c.li	a0,0
        val = (val << 8) | (uint64_t)p[i];
   1bcc0:	0522                	c.slli	a0,0x8
   1bcc2:	0007c703          	lbu	a4,0(a5)
   1bcc6:	8d59                	c.or	a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1bcc8:	0785                	c.addi	a5,1
   1bcca:	fed79be3          	bne	a5,a3,1bcc0 <dwarf::cursor::offset()+0xc8>
   1bcce:	bfbd                	c.j	1bc4c <dwarf::cursor::offset()+0x54>
    throw logic_error("cannot read offset with unknown format");
   1bcd0:	4541                	c.li	a0,16
   1bcd2:	9bffa0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1bcd6:	842a                	c.mv	s0,a0
   1bcd8:	00012597          	auipc	a1,0x12
   1bcdc:	42058593          	addi	a1,a1,1056 # 2e0f8 <std::piecewise_construct+0xd8>
   1bce0:	bc1fa0ef          	jal	ra,168a0 <std::logic_error::logic_error(char const*)@plt>
   1bce4:	0001e617          	auipc	a2,0x1e
   1bce8:	7a463603          	ld	a2,1956(a2) # 3a488 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   1bcec:	0001f597          	auipc	a1,0x1f
   1bcf0:	8a45b583          	ld	a1,-1884(a1) # 3a590 <typeinfo for std::logic_error@GLIBCXX_3.4+0xd40>
   1bcf4:	8522                	c.mv	a0,s0
   1bcf6:	c6bfa0ef          	jal	ra,16960 <__cxa_throw@plt>
   1bcfa:	84aa                	c.mv	s1,a0
   1bcfc:	8522                	c.mv	a0,s0
   1bcfe:	a53fa0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1bd02:	8526                	c.mv	a0,s1
   1bd04:	c8dfa0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001bd08 <dwarf::die::die(dwarf::unit const*)>:

using namespace std;

DWARFPP_BEGIN_NAMESPACE

die::die(const unit *cu) : cu(cu), abbrev(nullptr) {}
   1bd08:	e50c                	c.sd	a1,8(a0)
   1bd0a:	00053823          	sd	zero,16(a0)
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   1bd0e:	02050793          	addi	a5,a0,32
   1bd12:	e93c                	c.sd	a5,80(a0)
   1bd14:	ed3c                	c.sd	a5,88(a0)
   1bd16:	05050793          	addi	a5,a0,80
   1bd1a:	f13c                	c.sd	a5,96(a0)
   1bd1c:	8082                	c.jr	ra

000000000001bd1e <dwarf::die::get_unit() const>:

const unit &die::get_unit() const { return *cu; }
   1bd1e:	6508                	c.ld	a0,8(a0)
   1bd20:	8082                	c.jr	ra

000000000001bd22 <dwarf::die::get_section_offset() const>:

section_offset die::get_section_offset() const {
   1bd22:	1141                	c.addi	sp,-16
   1bd24:	e406                	c.sdsp	ra,8(sp)
   1bd26:	e022                	c.sdsp	s0,0(sp)
   1bd28:	842a                	c.mv	s0,a0
  return cu->get_section_offset() + offset;
   1bd2a:	6508                	c.ld	a0,8(a0)
   1bd2c:	e07fb0ef          	jal	ra,17b32 <dwarf::unit::get_section_offset() const>
   1bd30:	6c1c                	c.ld	a5,24(s0)
}
   1bd32:	953e                	c.add	a0,a5
   1bd34:	60a2                	c.ldsp	ra,8(sp)
   1bd36:	6402                	c.ldsp	s0,0(sp)
   1bd38:	0141                	c.addi	sp,16
   1bd3a:	8082                	c.jr	ra

000000000001bd3c <dwarf::die::read(unsigned long)>:

void die::read(section_offset off) {
   1bd3c:	7159                	c.addi16sp	sp,-112
   1bd3e:	f486                	c.sdsp	ra,104(sp)
   1bd40:	f0a2                	c.sdsp	s0,96(sp)
   1bd42:	eca6                	c.sdsp	s1,88(sp)
   1bd44:	e8ca                	c.sdsp	s2,80(sp)
   1bd46:	e4ce                	c.sdsp	s3,72(sp)
   1bd48:	e0d2                	c.sdsp	s4,64(sp)
   1bd4a:	fc56                	c.sdsp	s5,56(sp)
   1bd4c:	f85a                	c.sdsp	s6,48(sp)
   1bd4e:	f45e                	c.sdsp	s7,40(sp)
   1bd50:	f062                	c.sdsp	s8,32(sp)
   1bd52:	84aa                	c.mv	s1,a0
   1bd54:	892e                	c.mv	s2,a1
  cursor cur(cu->data(), off);
   1bd56:	6508                	c.ld	a0,8(a0)
   1bd58:	de1fb0ef          	jal	ra,17b38 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1bd5c:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1bd60:	6500                	c.ld	s0,8(a0)
	if (_M_pi != nullptr)
   1bd62:	30040e63          	beq	s0,zero,1c07e <dwarf::die::read(unsigned long)+0x342>
    if (__is_single_threaded())
   1bd66:	0001e797          	auipc	a5,0x1e
   1bd6a:	7327b783          	ld	a5,1842(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1bd6e:	0007c783          	lbu	a5,0(a5)
   1bd72:	cbbd                	c.beqz	a5,1bde8 <dwarf::die::read(unsigned long)+0xac>
  { *__mem += __val; }
   1bd74:	581c                	c.lw	a5,48(s0)
   1bd76:	2785                	c.addiw	a5,1
   1bd78:	d81c                	c.sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1bd7a:	e44e                	c.sdsp	s3,8(sp)
      : _M_pi(__r._M_pi)
   1bd7c:	e822                	c.sdsp	s0,16(sp)
    if (__is_single_threaded())
   1bd7e:	0001e797          	auipc	a5,0x1e
   1bd82:	71a7b783          	ld	a5,1818(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1bd86:	0007c783          	lbu	a5,0(a5)
   1bd8a:	c7ad                	c.beqz	a5,1bdf4 <dwarf::die::read(unsigned long)+0xb8>
  { *__mem += __val; }
   1bd8c:	581c                	c.lw	a5,48(s0)
   1bd8e:	2785                	c.addiw	a5,1
   1bd90:	d81c                	c.sw	a5,48(s0)
      : sec(sec), pos(sec->begin + offset) {}
   1bd92:	0089b783          	ld	a5,8(s3)
   1bd96:	97ca                	c.add	a5,s2
   1bd98:	ec3e                	c.sdsp	a5,24(sp)
    if (__is_single_threaded())
   1bd9a:	0001e797          	auipc	a5,0x1e
   1bd9e:	6fe7b783          	ld	a5,1790(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1bda2:	0007c783          	lbu	a5,0(a5)
   1bda6:	cfa9                	c.beqz	a5,1be00 <dwarf::die::read(unsigned long)+0xc4>
    _Atomic_word __result = *__mem;
   1bda8:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1bdaa:	fff5079b          	addiw	a5,a0,-1
   1bdae:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1bdb0:	4785                	c.li	a5,1
   1bdb2:	2cf51c63          	bne	a0,a5,1c08a <dwarf::die::read(unsigned long)+0x34e>
	_M_dispose();
   1bdb6:	601c                	c.ld	a5,0(s0)
   1bdb8:	6b9c                	c.ld	a5,16(a5)
   1bdba:	8522                	c.mv	a0,s0
   1bdbc:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1bdbe:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1bdc2:	0001e797          	auipc	a5,0x1e
   1bdc6:	6d67b783          	ld	a5,1750(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1bdca:	0007c783          	lbu	a5,0(a5)
   1bdce:	cf9d                	c.beqz	a5,1be0c <dwarf::die::read(unsigned long)+0xd0>
    _Atomic_word __result = *__mem;
   1bdd0:	585c                	c.lw	a5,52(s0)
    *__mem += __val;
   1bdd2:	fff7871b          	addiw	a4,a5,-1
   1bdd6:	d858                	c.sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1bdd8:	4705                	c.li	a4,1
   1bdda:	2ae79863          	bne	a5,a4,1c08a <dwarf::die::read(unsigned long)+0x34e>
	    _M_destroy();
   1bdde:	601c                	c.ld	a5,0(s0)
   1bde0:	6f9c                	c.ld	a5,24(a5)
   1bde2:	8522                	c.mv	a0,s0
   1bde4:	9782                	c.jalr	a5
   1bde6:	a455                	c.j	1c08a <dwarf::die::read(unsigned long)+0x34e>
      __atomic_add(__mem, __val);
   1bde8:	4585                	c.li	a1,1
   1bdea:	03040513          	addi	a0,s0,48
   1bdee:	fc2fa0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1bdf2:	b761                	c.j	1bd7a <dwarf::die::read(unsigned long)+0x3e>
   1bdf4:	4585                	c.li	a1,1
   1bdf6:	03040513          	addi	a0,s0,48
   1bdfa:	fb6fa0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1bdfe:	bf51                	c.j	1bd92 <dwarf::die::read(unsigned long)+0x56>
      return __exchange_and_add(__mem, __val);
   1be00:	55fd                	c.li	a1,-1
   1be02:	03040513          	addi	a0,s0,48
   1be06:	feafa0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1be0a:	b75d                	c.j	1bdb0 <dwarf::die::read(unsigned long)+0x74>
   1be0c:	55fd                	c.li	a1,-1
   1be0e:	03440513          	addi	a0,s0,52
   1be12:	fdefa0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1be16:	87aa                	c.mv	a5,a0
   1be18:	b7c1                	c.j	1bdd8 <dwarf::die::read(unsigned long)+0x9c>
    return 0;
   1be1a:	4581                	c.li	a1,0

  offset = off;

  abbrev_code acode = cur.uleb128();
  if (acode == 0) {
   1be1c:	e9d1                	c.bnez	a1,1beb0 <dwarf::die::read(unsigned long)+0x174>
    abbrev = nullptr;
   1be1e:	0004b823          	sd	zero,16(s1)
  section_offset get_section_offset() const { return pos - sec->begin; }
   1be22:	67a2                	c.ldsp	a5,8(sp)
   1be24:	6798                	c.ld	a4,8(a5)
   1be26:	67e2                	c.ldsp	a5,24(sp)
   1be28:	8f99                	c.sub	a5,a4
    next = cur.get_section_offset();
   1be2a:	f4bc                	c.sd	a5,104(s1)
	if (_M_pi != nullptr)
   1be2c:	6442                	c.ldsp	s0,16(sp)
   1be2e:	cc19                	c.beqz	s0,1be4c <dwarf::die::read(unsigned long)+0x110>
    if (__is_single_threaded())
   1be30:	0001e797          	auipc	a5,0x1e
   1be34:	6687b783          	ld	a5,1640(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1be38:	0007c783          	lbu	a5,0(a5)
   1be3c:	c785                	c.beqz	a5,1be64 <dwarf::die::read(unsigned long)+0x128>
    _Atomic_word __result = *__mem;
   1be3e:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1be40:	fff5079b          	addiw	a5,a0,-1
   1be44:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1be46:	4785                	c.li	a5,1
   1be48:	02f50463          	beq	a0,a5,1be70 <dwarf::die::read(unsigned long)+0x134>
  for (auto &attr : abbrev->attributes) {
    attrs.push_back(cur.get_section_offset());
    cur.skip_form(attr.form);
  }
  next = cur.get_section_offset();
}
   1be4c:	70a6                	c.ldsp	ra,104(sp)
   1be4e:	7406                	c.ldsp	s0,96(sp)
   1be50:	64e6                	c.ldsp	s1,88(sp)
   1be52:	6946                	c.ldsp	s2,80(sp)
   1be54:	69a6                	c.ldsp	s3,72(sp)
   1be56:	6a06                	c.ldsp	s4,64(sp)
   1be58:	7ae2                	c.ldsp	s5,56(sp)
   1be5a:	7b42                	c.ldsp	s6,48(sp)
   1be5c:	7ba2                	c.ldsp	s7,40(sp)
   1be5e:	7c02                	c.ldsp	s8,32(sp)
   1be60:	6165                	c.addi16sp	sp,112
   1be62:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   1be64:	55fd                	c.li	a1,-1
   1be66:	03040513          	addi	a0,s0,48
   1be6a:	f86fa0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1be6e:	bfe1                	c.j	1be46 <dwarf::die::read(unsigned long)+0x10a>
	_M_dispose();
   1be70:	601c                	c.ld	a5,0(s0)
   1be72:	6b9c                	c.ld	a5,16(a5)
   1be74:	8522                	c.mv	a0,s0
   1be76:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1be78:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1be7c:	0001e797          	auipc	a5,0x1e
   1be80:	61c7b783          	ld	a5,1564(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1be84:	0007c783          	lbu	a5,0(a5)
   1be88:	cf89                	c.beqz	a5,1bea2 <dwarf::die::read(unsigned long)+0x166>
    _Atomic_word __result = *__mem;
   1be8a:	585c                	c.lw	a5,52(s0)
    *__mem += __val;
   1be8c:	fff7871b          	addiw	a4,a5,-1
   1be90:	d858                	c.sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1be92:	4705                	c.li	a4,1
   1be94:	fae79ce3          	bne	a5,a4,1be4c <dwarf::die::read(unsigned long)+0x110>
	    _M_destroy();
   1be98:	601c                	c.ld	a5,0(s0)
   1be9a:	6f9c                	c.ld	a5,24(a5)
   1be9c:	8522                	c.mv	a0,s0
   1be9e:	9782                	c.jalr	a5
   1bea0:	b775                	c.j	1be4c <dwarf::die::read(unsigned long)+0x110>
      return __exchange_and_add(__mem, __val);
   1bea2:	55fd                	c.li	a1,-1
   1bea4:	03440513          	addi	a0,s0,52
   1bea8:	f48fa0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1beac:	87aa                	c.mv	a5,a0
   1beae:	b7d5                	c.j	1be92 <dwarf::die::read(unsigned long)+0x156>
  abbrev = &cu->get_abbrev(acode);
   1beb0:	6488                	c.ld	a0,8(s1)
   1beb2:	816fe0ef          	jal	ra,19ec8 <dwarf::unit::get_abbrev(unsigned long) const>
   1beb6:	e888                	c.sd	a0,16(s1)
  tag = abbrev->tag;
   1beb8:	451c                	c.lw	a5,8(a0)
   1beba:	c09c                	c.sw	a5,0(s1)
  attrs.clear();
   1bebc:	02048b13          	addi	s6,s1,32
    for (T *p = base; p < end; ++p)
   1bec0:	68b4                	c.ld	a3,80(s1)
   1bec2:	6cbc                	c.ld	a5,88(s1)
   1bec4:	00f6f763          	bgeu	a3,a5,1bed2 <dwarf::die::read(unsigned long)+0x196>
   1bec8:	87b6                	c.mv	a5,a3
   1beca:	07a1                	c.addi	a5,8
   1becc:	6cb8                	c.ld	a4,88(s1)
   1bece:	fee7eee3          	bltu	a5,a4,1beca <dwarf::die::read(unsigned long)+0x18e>
    end = base;
   1bed2:	ecb4                	c.sd	a3,88(s1)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1bed4:	6d18                	c.ld	a4,24(a0)
   1bed6:	691c                	c.ld	a5,16(a0)
   1bed8:	8f1d                	c.sub	a4,a5
   1beda:	8709                	c.srai	a4,0x2
   1bedc:	00012797          	auipc	a5,0x12
   1bee0:	1347b783          	ld	a5,308(a5) # 2e010 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   1bee4:	02f70733          	mul	a4,a4,a5
    if (n <= (size_type)(cap - base))
   1bee8:	70bc                	c.ld	a5,96(s1)
   1beea:	8f95                	c.sub	a5,a3
   1beec:	878d                	c.srai	a5,0x3
   1beee:	04e7fb63          	bgeu	a5,a4,1bf44 <dwarf::die::read(unsigned long)+0x208>
   1bef2:	e391                	c.bnez	a5,1bef6 <dwarf::die::read(unsigned long)+0x1ba>
   1bef4:	4785                	c.li	a5,1
    while (target < n)
   1bef6:	00e7f563          	bgeu	a5,a4,1bf00 <dwarf::die::read(unsigned long)+0x1c4>
      target <<= 1;
   1befa:	0786                	c.slli	a5,0x1
    while (target < n)
   1befc:	fee7efe3          	bltu	a5,a4,1befa <dwarf::die::read(unsigned long)+0x1be>
    char *newbuf = new char[sizeof(T[target])];
   1bf00:	00379413          	slli	s0,a5,0x3
   1bf04:	8522                	c.mv	a0,s0
   1bf06:	e8afa0ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   1bf0a:	89aa                	c.mv	s3,a0
    T *src = base, *dest = (T *)newbuf;
   1bf0c:	68a8                	c.ld	a0,80(s1)
    for (; src < end; src++, dest++) {
   1bf0e:	6cb8                	c.ld	a4,88(s1)
   1bf10:	04e57463          	bgeu	a0,a4,1bf58 <dwarf::die::read(unsigned long)+0x21c>
    T *src = base, *dest = (T *)newbuf;
   1bf14:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1bf16:	07a1                	c.addi	a5,8
   1bf18:	fee7efe3          	bltu	a5,a4,1bf16 <dwarf::die::read(unsigned long)+0x1da>
   1bf1c:	fff70913          	addi	s2,a4,-1
   1bf20:	40a90933          	sub	s2,s2,a0
   1bf24:	ff897913          	andi	s2,s2,-8
   1bf28:	0921                	c.addi	s2,8
   1bf2a:	994e                	c.add	s2,s3
    if ((char *)base != buf)
   1bf2c:	00ab0563          	beq	s6,a0,1bf36 <dwarf::die::read(unsigned long)+0x1fa>
      delete[] (char *)base;
   1bf30:	c119                	c.beqz	a0,1bf36 <dwarf::die::read(unsigned long)+0x1fa>
   1bf32:	91ffa0ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1bf36:	0534b823          	sd	s3,80(s1)
    end = dest;
   1bf3a:	0524bc23          	sd	s2,88(s1)
    cap = base + target;
   1bf3e:	99a2                	c.add	s3,s0
   1bf40:	0734b023          	sd	s3,96(s1)
  for (auto &attr : abbrev->attributes) {
   1bf44:	689c                	c.ld	a5,16(s1)
      : _M_current(__i) { }
   1bf46:	0107b903          	ld	s2,16(a5)
   1bf4a:	0187ba03          	ld	s4,24(a5)
   1bf4e:	0b2a0163          	beq	s4,s2,1bff0 <dwarf::die::read(unsigned long)+0x2b4>
    cur.skip_form(attr.form);
   1bf52:	00810a93          	addi	s5,sp,8
   1bf56:	a08d                	c.j	1bfb8 <dwarf::die::read(unsigned long)+0x27c>
    T *src = base, *dest = (T *)newbuf;
   1bf58:	894e                	c.mv	s2,s3
   1bf5a:	bfc9                	c.j	1bf2c <dwarf::die::read(unsigned long)+0x1f0>
    char *newbuf = new char[sizeof(T[target])];
   1bf5c:	8c2a                	c.mv	s8,a0
    T *src = base, *dest = (T *)newbuf;
   1bf5e:	68a8                	c.ld	a0,80(s1)
    for (; src < end; src++, dest++) {
   1bf60:	6cb8                	c.ld	a4,88(s1)
   1bf62:	04e57663          	bgeu	a0,a4,1bfae <dwarf::die::read(unsigned long)+0x272>
    T *src = base, *dest = (T *)newbuf;
   1bf66:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1bf68:	07a1                	c.addi	a5,8
   1bf6a:	fee7efe3          	bltu	a5,a4,1bf68 <dwarf::die::read(unsigned long)+0x22c>
   1bf6e:	fff70b93          	addi	s7,a4,-1
   1bf72:	40ab8bb3          	sub	s7,s7,a0
   1bf76:	ff8bfb93          	andi	s7,s7,-8
   1bf7a:	0ba1                	c.addi	s7,8
   1bf7c:	9be2                	c.add	s7,s8
    if ((char *)base != buf)
   1bf7e:	00ab0563          	beq	s6,a0,1bf88 <dwarf::die::read(unsigned long)+0x24c>
      delete[] (char *)base;
   1bf82:	c119                	c.beqz	a0,1bf88 <dwarf::die::read(unsigned long)+0x24c>
   1bf84:	8cdfa0ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1bf88:	0584b823          	sd	s8,80(s1)
    end = dest;
   1bf8c:	0574bc23          	sd	s7,88(s1)
    cap = base + target;
   1bf90:	9c22                	c.add	s8,s0
   1bf92:	0784b023          	sd	s8,96(s1)
    new (end) T(std::move(x));
   1bf96:	6cbc                	c.ld	a5,88(s1)
   1bf98:	0137b023          	sd	s3,0(a5)
    end++;
   1bf9c:	6cbc                	c.ld	a5,88(s1)
   1bf9e:	07a1                	c.addi	a5,8
   1bfa0:	ecbc                	c.sd	a5,88(s1)
   1bfa2:	00492583          	lw	a1,4(s2)
   1bfa6:	8556                	c.mv	a0,s5
   1bfa8:	fc4ff0ef          	jal	ra,1b76c <dwarf::cursor::skip_form(dwarf::DW_FORM)>
   1bfac:	a019                	c.j	1bfb2 <dwarf::die::read(unsigned long)+0x276>
    T *src = base, *dest = (T *)newbuf;
   1bfae:	8be2                	c.mv	s7,s8
   1bfb0:	b7f9                	c.j	1bf7e <dwarf::die::read(unsigned long)+0x242>
  for (auto &attr : abbrev->attributes) {
   1bfb2:	0931                	c.addi	s2,12
   1bfb4:	032a0e63          	beq	s4,s2,1bff0 <dwarf::die::read(unsigned long)+0x2b4>
   1bfb8:	67a2                	c.ldsp	a5,8(sp)
   1bfba:	679c                	c.ld	a5,8(a5)
   1bfbc:	69e2                	c.ldsp	s3,24(sp)
   1bfbe:	40f989b3          	sub	s3,s3,a5
  size_type size() const { return end - base; }
   1bfc2:	68b4                	c.ld	a3,80(s1)
   1bfc4:	6cb8                	c.ld	a4,88(s1)
   1bfc6:	8f15                	c.sub	a4,a3
   1bfc8:	870d                	c.srai	a4,0x3
    reserve(size() + 1);
   1bfca:	0705                	c.addi	a4,1
    if (n <= (size_type)(cap - base))
   1bfcc:	70bc                	c.ld	a5,96(s1)
   1bfce:	8f95                	c.sub	a5,a3
   1bfd0:	878d                	c.srai	a5,0x3
   1bfd2:	fce7f2e3          	bgeu	a5,a4,1bf96 <dwarf::die::read(unsigned long)+0x25a>
   1bfd6:	e391                	c.bnez	a5,1bfda <dwarf::die::read(unsigned long)+0x29e>
   1bfd8:	4785                	c.li	a5,1
    while (target < n)
   1bfda:	00e7f563          	bgeu	a5,a4,1bfe4 <dwarf::die::read(unsigned long)+0x2a8>
      target <<= 1;
   1bfde:	0786                	c.slli	a5,0x1
    while (target < n)
   1bfe0:	fee7efe3          	bltu	a5,a4,1bfde <dwarf::die::read(unsigned long)+0x2a2>
    char *newbuf = new char[sizeof(T[target])];
   1bfe4:	00379413          	slli	s0,a5,0x3
   1bfe8:	8522                	c.mv	a0,s0
   1bfea:	da6fa0ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   1bfee:	b7bd                	c.j	1bf5c <dwarf::die::read(unsigned long)+0x220>
   1bff0:	67a2                	c.ldsp	a5,8(sp)
   1bff2:	6798                	c.ld	a4,8(a5)
   1bff4:	67e2                	c.ldsp	a5,24(sp)
   1bff6:	8f99                	c.sub	a5,a4
  next = cur.get_section_offset();
   1bff8:	f4bc                	c.sd	a5,104(s1)
	if (_M_pi != nullptr)
   1bffa:	6442                	c.ldsp	s0,16(sp)
   1bffc:	e40408e3          	beq	s0,zero,1be4c <dwarf::die::read(unsigned long)+0x110>
    if (__is_single_threaded())
   1c000:	0001e797          	auipc	a5,0x1e
   1c004:	4987b783          	ld	a5,1176(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1c008:	0007c783          	lbu	a5,0(a5)
   1c00c:	c3a9                	c.beqz	a5,1c04e <dwarf::die::read(unsigned long)+0x312>
    _Atomic_word __result = *__mem;
   1c00e:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1c010:	fff5079b          	addiw	a5,a0,-1
   1c014:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1c016:	4785                	c.li	a5,1
   1c018:	e2f51ae3          	bne	a0,a5,1be4c <dwarf::die::read(unsigned long)+0x110>
	_M_dispose();
   1c01c:	601c                	c.ld	a5,0(s0)
   1c01e:	6b9c                	c.ld	a5,16(a5)
   1c020:	8522                	c.mv	a0,s0
   1c022:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1c024:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1c028:	0001e797          	auipc	a5,0x1e
   1c02c:	4707b783          	ld	a5,1136(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1c030:	0007c783          	lbu	a5,0(a5)
   1c034:	c39d                	c.beqz	a5,1c05a <dwarf::die::read(unsigned long)+0x31e>
    _Atomic_word __result = *__mem;
   1c036:	585c                	c.lw	a5,52(s0)
    *__mem += __val;
   1c038:	fff7871b          	addiw	a4,a5,-1
   1c03c:	d858                	c.sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1c03e:	4705                	c.li	a4,1
   1c040:	e0e796e3          	bne	a5,a4,1be4c <dwarf::die::read(unsigned long)+0x110>
	    _M_destroy();
   1c044:	601c                	c.ld	a5,0(s0)
   1c046:	6f9c                	c.ld	a5,24(a5)
   1c048:	8522                	c.mv	a0,s0
   1c04a:	9782                	c.jalr	a5
   1c04c:	b501                	c.j	1be4c <dwarf::die::read(unsigned long)+0x110>
      return __exchange_and_add(__mem, __val);
   1c04e:	55fd                	c.li	a1,-1
   1c050:	03040513          	addi	a0,s0,48
   1c054:	d9cfa0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c058:	bf7d                	c.j	1c016 <dwarf::die::read(unsigned long)+0x2da>
   1c05a:	55fd                	c.li	a1,-1
   1c05c:	03440513          	addi	a0,s0,52
   1c060:	d90fa0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c064:	87aa                	c.mv	a5,a0
   1c066:	bfe1                	c.j	1c03e <dwarf::die::read(unsigned long)+0x302>
	if (_M_pi != nullptr)
   1c068:	842a                	c.mv	s0,a0
   1c06a:	6542                	c.ldsp	a0,16(sp)
   1c06c:	c511                	c.beqz	a0,1c078 <dwarf::die::read(unsigned long)+0x33c>
	  _M_pi->_M_release();
   1c06e:	0001e317          	auipc	t1,0x1e
   1c072:	37233303          	ld	t1,882(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   1c076:	9302                	c.jalr	t1
   1c078:	8522                	c.mv	a0,s0
   1c07a:	917fa0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1c07e:	e44e                	c.sdsp	s3,8(sp)
      : _M_pi(__r._M_pi)
   1c080:	e802                	c.sdsp	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1c082:	0089b783          	ld	a5,8(s3)
   1c086:	97ca                	c.add	a5,s2
   1c088:	ec3e                	c.sdsp	a5,24(sp)
  offset = off;
   1c08a:	0124bc23          	sd	s2,24(s1)
    while (pos < sec->end) {
   1c08e:	67e2                	c.ldsp	a5,24(sp)
      { return _M_ptr; }
   1c090:	6522                	c.ldsp	a0,8(sp)
   1c092:	6918                	c.ld	a4,16(a0)
   1c094:	02e7f763          	bgeu	a5,a4,1c0c2 <dwarf::die::read(unsigned long)+0x386>
    std::uint64_t result = 0;
   1c098:	4581                	c.li	a1,0
    int shift = 0;
   1c09a:	4601                	c.li	a2,0
      uint8_t byte = *(uint8_t *)(pos++);
   1c09c:	0785                	c.addi	a5,1
   1c09e:	ec3e                	c.sdsp	a5,24(sp)
   1c0a0:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1c0a4:	07f77693          	andi	a3,a4,127
   1c0a8:	00c696b3          	sll	a3,a3,a2
   1c0ac:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   1c0ae:	0187171b          	slliw	a4,a4,0x18
   1c0b2:	4187571b          	sraiw	a4,a4,0x18
   1c0b6:	d60753e3          	bge	a4,zero,1be1c <dwarf::die::read(unsigned long)+0xe0>
      shift += 7;
   1c0ba:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   1c0bc:	6918                	c.ld	a4,16(a0)
   1c0be:	fce7efe3          	bltu	a5,a4,1c09c <dwarf::die::read(unsigned long)+0x360>
    underflow();
   1c0c2:	0028                	c.addi4spn	a0,sp,8
   1c0c4:	e0eff0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    return 0;
   1c0c8:	bb89                	c.j	1be1a <dwarf::die::read(unsigned long)+0xde>

000000000001c0ca <dwarf::die::has(dwarf::DW_AT) const>:

bool die::has(DW_AT attr) const {
  if (!abbrev)
   1c0ca:	6918                	c.ld	a4,16(a0)
   1c0cc:	cf09                	c.beqz	a4,1c0e6 <dwarf::die::has(dwarf::DW_AT) const+0x1c>
   1c0ce:	6b1c                	c.ld	a5,16(a4)
   1c0d0:	6f14                	c.ld	a3,24(a4)
    return false;
  // XXX Totally lame
  for (auto &a : abbrev->attributes)
   1c0d2:	00f68c63          	beq	a3,a5,1c0ea <dwarf::die::has(dwarf::DW_AT) const+0x20>
    if (a.name == attr)
   1c0d6:	4398                	c.lw	a4,0(a5)
   1c0d8:	00b70b63          	beq	a4,a1,1c0ee <dwarf::die::has(dwarf::DW_AT) const+0x24>
  for (auto &a : abbrev->attributes)
   1c0dc:	07b1                	c.addi	a5,12
   1c0de:	fef69ce3          	bne	a3,a5,1c0d6 <dwarf::die::has(dwarf::DW_AT) const+0xc>
      return true;
  return false;
   1c0e2:	4501                	c.li	a0,0
   1c0e4:	8082                	c.jr	ra
    return false;
   1c0e6:	4501                	c.li	a0,0
   1c0e8:	8082                	c.jr	ra
  return false;
   1c0ea:	4501                	c.li	a0,0
   1c0ec:	8082                	c.jr	ra
      return true;
   1c0ee:	4505                	c.li	a0,1
}
   1c0f0:	8082                	c.jr	ra

000000000001c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>:

value die::operator[](DW_AT attr) const {
   1c0f2:	711d                	c.addi16sp	sp,-96
   1c0f4:	ec86                	c.sdsp	ra,88(sp)
   1c0f6:	e8a2                	c.sdsp	s0,80(sp)
   1c0f8:	e4a6                	c.sdsp	s1,72(sp)
   1c0fa:	8432                	c.mv	s0,a2
  // XXX We can pre-compute almost all of this work in the
  // abbrev_entry.
  if (abbrev) {
   1c0fc:	699c                	c.ld	a5,16(a1)
   1c0fe:	c3a1                	c.beqz	a5,1c13e <dwarf::die::operator[](dwarf::DW_AT) const+0x4c>
   1c100:	84aa                	c.mv	s1,a0
   1c102:	6b94                	c.ld	a3,16(a5)
   1c104:	6f90                	c.ld	a2,24(a5)
    int i = 0;
    for (auto &a : abbrev->attributes) {
   1c106:	02d60c63          	beq	a2,a3,1c13e <dwarf::die::operator[](dwarf::DW_AT) const+0x4c>
    int i = 0;
   1c10a:	4781                	c.li	a5,0
   1c10c:	a029                	c.j	1c116 <dwarf::die::operator[](dwarf::DW_AT) const+0x24>
      if (a.name == attr)
        return value(cu, a.name, a.form, a.type, attrs[i]);
      i++;
   1c10e:	2785                	c.addiw	a5,1
    for (auto &a : abbrev->attributes) {
   1c110:	06b1                	c.addi	a3,12
   1c112:	02d60663          	beq	a2,a3,1c13e <dwarf::die::operator[](dwarf::DW_AT) const+0x4c>
      if (a.name == attr)
   1c116:	4298                	c.lw	a4,0(a3)
   1c118:	fe871be3          	bne	a4,s0,1c10e <dwarf::die::operator[](dwarf::DW_AT) const+0x1c>
        return value(cu, a.name, a.form, a.type, attrs[i]);
   1c11c:	69b8                	c.ld	a4,80(a1)
   1c11e:	078e                	c.slli	a5,0x3
   1c120:	97ba                	c.add	a5,a4
   1c122:	639c                	c.ld	a5,0(a5)
   1c124:	4698                	c.lw	a4,8(a3)
   1c126:	42d4                	c.lw	a3,4(a3)
   1c128:	8622                	c.mv	a2,s0
   1c12a:	658c                	c.ld	a1,8(a1)
   1c12c:	8526                	c.mv	a0,s1
   1c12e:	332020ef          	jal	ra,1e460 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)>
    }
  }
  throw out_of_range("DIE does not have attribute " + to_string(attr));
}
   1c132:	8526                	c.mv	a0,s1
   1c134:	60e6                	c.ldsp	ra,88(sp)
   1c136:	6446                	c.ldsp	s0,80(sp)
   1c138:	64a6                	c.ldsp	s1,72(sp)
   1c13a:	6125                	c.addi16sp	sp,96
   1c13c:	8082                	c.jr	ra
  throw out_of_range("DIE does not have attribute " + to_string(attr));
   1c13e:	4541                	c.li	a0,16
   1c140:	d50fa0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1c144:	84aa                	c.mv	s1,a0
   1c146:	85a2                	c.mv	a1,s0
   1c148:	850a                	c.mv	a0,sp
   1c14a:	6c10d0ef          	jal	ra,2a00a <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1c14e:	00012617          	auipc	a2,0x12
   1c152:	05a60613          	addi	a2,a2,90 # 2e1a8 <std::piecewise_construct+0x188>
   1c156:	4581                	c.li	a1,0
   1c158:	850a                	c.mv	a0,sp
   1c15a:	ca6fa0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1c15e:	85aa                	c.mv	a1,a0
   1c160:	1000                	c.addi4spn	s0,sp,32
   1c162:	8522                	c.mv	a0,s0
   1c164:	d6cfa0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1c168:	85a2                	c.mv	a1,s0
   1c16a:	8526                	c.mv	a0,s1
   1c16c:	f84fa0ef          	jal	ra,168f0 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   1c170:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1c172:	181c                	c.addi4spn	a5,sp,48
   1c174:	00f50463          	beq	a0,a5,1c17c <dwarf::die::operator[](dwarf::DW_AT) const+0x8a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1c178:	e28fa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c17c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1c17e:	081c                	c.addi4spn	a5,sp,16
   1c180:	00f50463          	beq	a0,a5,1c188 <dwarf::die::operator[](dwarf::DW_AT) const+0x96>
   1c184:	e1cfa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1c188:	0001e617          	auipc	a2,0x1e
   1c18c:	35063603          	ld	a2,848(a2) # 3a4d8 <std::out_of_range::~out_of_range()@GLIBCXX_3.4>
   1c190:	0001e597          	auipc	a1,0x1e
   1c194:	3f85b583          	ld	a1,1016(a1) # 3a588 <typeinfo for std::out_of_range@GLIBCXX_3.4>
   1c198:	8526                	c.mv	a0,s1
   1c19a:	fc6fa0ef          	jal	ra,16960 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   1c19e:	842a                	c.mv	s0,a0
   1c1a0:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1c1a2:	181c                	c.addi4spn	a5,sp,48
   1c1a4:	00f50463          	beq	a0,a5,1c1ac <dwarf::die::operator[](dwarf::DW_AT) const+0xba>
   1c1a8:	df8fa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c1ac:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1c1ae:	081c                	c.addi4spn	a5,sp,16
   1c1b0:	00f50463          	beq	a0,a5,1c1b8 <dwarf::die::operator[](dwarf::DW_AT) const+0xc6>
   1c1b4:	decfa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1c1b8:	8526                	c.mv	a0,s1
   1c1ba:	d96fa0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1c1be:	8522                	c.mv	a0,s0
   1c1c0:	fd0fa0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1c1c4:	842a                	c.mv	s0,a0
   1c1c6:	b7dd                	c.j	1c1ac <dwarf::die::operator[](dwarf::DW_AT) const+0xba>
   1c1c8:	842a                	c.mv	s0,a0
   1c1ca:	b7fd                	c.j	1c1b8 <dwarf::die::operator[](dwarf::DW_AT) const+0xc6>

000000000001c1cc <dwarf::die::operator==(dwarf::die const&) const>:
  }
  return res;
}

bool die::operator==(const die &o) const {
  return cu == o.cu && offset == o.offset;
   1c1cc:	6518                	c.ld	a4,8(a0)
   1c1ce:	659c                	c.ld	a5,8(a1)
   1c1d0:	00f70463          	beq	a4,a5,1c1d8 <dwarf::die::operator==(dwarf::die const&) const+0xc>
   1c1d4:	4501                	c.li	a0,0
}
   1c1d6:	8082                	c.jr	ra
  return cu == o.cu && offset == o.offset;
   1c1d8:	6d08                	c.ld	a0,24(a0)
   1c1da:	6d9c                	c.ld	a5,24(a1)
   1c1dc:	8d1d                	c.sub	a0,a5
   1c1de:	00153513          	sltiu	a0,a0,1
   1c1e2:	8082                	c.jr	ra

000000000001c1e4 <dwarf::die::operator!=(dwarf::die const&) const>:

bool die::operator!=(const die &o) const { return !(*this == o); }
   1c1e4:	1141                	c.addi	sp,-16
   1c1e6:	e406                	c.sdsp	ra,8(sp)
   1c1e8:	fe5ff0ef          	jal	ra,1c1cc <dwarf::die::operator==(dwarf::die const&) const>
   1c1ec:	00154513          	xori	a0,a0,1
   1c1f0:	0ff57513          	andi	a0,a0,255
   1c1f4:	60a2                	c.ldsp	ra,8(sp)
   1c1f6:	0141                	c.addi	sp,16
   1c1f8:	8082                	c.jr	ra

000000000001c1fa <std::hash<dwarf::die>::operator()(dwarf::die const&) const>:

DWARFPP_END_NAMESPACE

size_t std::hash<dwarf::die>::operator()(const dwarf::die &a) const {
  return hash<decltype(a.cu)>()(a.cu) ^
         hash<decltype(a.get_unit_offset())>()(a.get_unit_offset());
   1c1fa:	6588                	c.ld	a0,8(a1)
   1c1fc:	6d9c                	c.ld	a5,24(a1)
}
   1c1fe:	8d3d                	c.xor	a0,a5
   1c200:	8082                	c.jr	ra

000000000001c202 <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)>:
die::iterator::iterator(const unit *cu, section_offset off) : d(cu) {
   1c202:	1101                	c.addi	sp,-32
   1c204:	ec06                	c.sdsp	ra,24(sp)
   1c206:	e822                	c.sdsp	s0,16(sp)
   1c208:	e426                	c.sdsp	s1,8(sp)
   1c20a:	842a                	c.mv	s0,a0
   1c20c:	84b2                	c.mv	s1,a2
   1c20e:	afbff0ef          	jal	ra,1bd08 <dwarf::die::die(dwarf::unit const*)>
  d.read(off);
   1c212:	85a6                	c.mv	a1,s1
   1c214:	8522                	c.mv	a0,s0
   1c216:	b27ff0ef          	jal	ra,1bd3c <dwarf::die::read(unsigned long)>
   1c21a:	a821                	c.j	1c232 <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)+0x30>
class die {
   1c21c:	84aa                	c.mv	s1,a0
   1c21e:	02040513          	addi	a0,s0,32
   1c222:	0001e317          	auipc	t1,0x1e
   1c226:	1de33303          	ld	t1,478(t1) # 3a400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x22e14>
   1c22a:	9302                	c.jalr	t1
   1c22c:	8526                	c.mv	a0,s1
   1c22e:	f62fa0ef          	jal	ra,16990 <_Unwind_Resume@plt>
}
   1c232:	60e2                	c.ldsp	ra,24(sp)
   1c234:	6442                	c.ldsp	s0,16(sp)
   1c236:	64a2                	c.ldsp	s1,8(sp)
   1c238:	6105                	c.addi16sp	sp,32
   1c23a:	8082                	c.jr	ra

000000000001c23c <dwarf::die::begin() const>:
die::iterator die::begin() const {
   1c23c:	1141                	c.addi	sp,-16
   1c23e:	e406                	c.sdsp	ra,8(sp)
   1c240:	e022                	c.sdsp	s0,0(sp)
   1c242:	842a                	c.mv	s0,a0
  if (!abbrev || !abbrev->children)
   1c244:	699c                	c.ld	a5,16(a1)
   1c246:	c781                	c.beqz	a5,1c24e <dwarf::die::begin() const+0x12>
   1c248:	00c7c783          	lbu	a5,12(a5)
   1c24c:	e3b9                	c.bnez	a5,1c292 <dwarf::die::begin() const+0x56>
inline die::iterator die::end() const { return iterator(); }
   1c24e:	00043023          	sd	zero,0(s0)
   1c252:	00043423          	sd	zero,8(s0)
   1c256:	00043823          	sd	zero,16(s0)
   1c25a:	00043c23          	sd	zero,24(s0)
   1c25e:	02043023          	sd	zero,32(s0)
   1c262:	02043423          	sd	zero,40(s0)
   1c266:	02043823          	sd	zero,48(s0)
   1c26a:	02043c23          	sd	zero,56(s0)
   1c26e:	04043023          	sd	zero,64(s0)
   1c272:	04043423          	sd	zero,72(s0)
   1c276:	06043423          	sd	zero,104(s0)
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   1c27a:	02040793          	addi	a5,s0,32
   1c27e:	e83c                	c.sd	a5,80(s0)
   1c280:	ec3c                	c.sd	a5,88(s0)
   1c282:	05040793          	addi	a5,s0,80
   1c286:	f03c                	c.sd	a5,96(s0)
}
   1c288:	8522                	c.mv	a0,s0
   1c28a:	60a2                	c.ldsp	ra,8(sp)
   1c28c:	6402                	c.ldsp	s0,0(sp)
   1c28e:	0141                	c.addi	sp,16
   1c290:	8082                	c.jr	ra
  return iterator(cu, next);
   1c292:	75b0                	c.ld	a2,104(a1)
   1c294:	658c                	c.ld	a1,8(a1)
   1c296:	f6dff0ef          	jal	ra,1c202 <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)>
   1c29a:	b7fd                	c.j	1c288 <dwarf::die::begin() const+0x4c>

000000000001c29c <dwarf::die::resolve(dwarf::DW_AT) const>:
value die::resolve(DW_AT attr) const {
   1c29c:	714d                	c.addi16sp	sp,-336
   1c29e:	e686                	c.sdsp	ra,328(sp)
   1c2a0:	e2a2                	c.sdsp	s0,320(sp)
   1c2a2:	fe26                	c.sdsp	s1,312(sp)
   1c2a4:	fa4a                	c.sdsp	s2,304(sp)
   1c2a6:	84aa                	c.mv	s1,a0
   1c2a8:	842e                	c.mv	s0,a1
   1c2aa:	8932                	c.mv	s2,a2
  if (has(attr))
   1c2ac:	85b2                	c.mv	a1,a2
   1c2ae:	8522                	c.mv	a0,s0
   1c2b0:	e1bff0ef          	jal	ra,1c0ca <dwarf::die::has(dwarf::DW_AT) const>
   1c2b4:	cd09                	c.beqz	a0,1c2ce <dwarf::die::resolve(dwarf::DW_AT) const+0x32>
    return (*this)[attr];
   1c2b6:	864a                	c.mv	a2,s2
   1c2b8:	85a2                	c.mv	a1,s0
   1c2ba:	8526                	c.mv	a0,s1
   1c2bc:	e37ff0ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
}
   1c2c0:	8526                	c.mv	a0,s1
   1c2c2:	60b6                	c.ldsp	ra,328(sp)
   1c2c4:	6416                	c.ldsp	s0,320(sp)
   1c2c6:	74f2                	c.ldsp	s1,312(sp)
   1c2c8:	7952                	c.ldsp	s2,304(sp)
   1c2ca:	6171                	c.addi16sp	sp,336
   1c2cc:	8082                	c.jr	ra
  if (has(DW_AT::abstract_origin)) {
   1c2ce:	03100593          	addi	a1,zero,49
   1c2d2:	8522                	c.mv	a0,s0
   1c2d4:	df7ff0ef          	jal	ra,1c0ca <dwarf::die::has(dwarf::DW_AT) const>
   1c2d8:	0e050763          	beq	a0,zero,1c3c6 <dwarf::die::resolve(dwarf::DW_AT) const+0x12a>
    die ao = (*this)[DW_AT::abstract_origin].as_reference();
   1c2dc:	03100613          	addi	a2,zero,49
   1c2e0:	85a2                	c.mv	a1,s0
   1c2e2:	11a0                	c.addi4spn	s0,sp,232
   1c2e4:	8522                	c.mv	a0,s0
   1c2e6:	e0dff0ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   1c2ea:	85a2                	c.mv	a1,s0
   1c2ec:	0020                	c.addi4spn	s0,sp,8
   1c2ee:	8522                	c.mv	a0,s0
   1c2f0:	452020ef          	jal	ra,1e742 <dwarf::value::as_reference() const>
    if (ao.has(attr))
   1c2f4:	85ca                	c.mv	a1,s2
   1c2f6:	8522                	c.mv	a0,s0
   1c2f8:	dd3ff0ef          	jal	ra,1c0ca <dwarf::die::has(dwarf::DW_AT) const>
   1c2fc:	c519                	c.beqz	a0,1c30a <dwarf::die::resolve(dwarf::DW_AT) const+0x6e>
      return ao[attr];
   1c2fe:	864a                	c.mv	a2,s2
   1c300:	85a2                	c.mv	a1,s0
   1c302:	8526                	c.mv	a0,s1
   1c304:	defff0ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   1c308:	a869                	c.j	1c3a2 <dwarf::die::resolve(dwarf::DW_AT) const+0x106>
    if (ao.has(DW_AT::specification)) {
   1c30a:	04700593          	addi	a1,zero,71
   1c30e:	0028                	c.addi4spn	a0,sp,8
   1c310:	dbbff0ef          	jal	ra,1c0ca <dwarf::die::has(dwarf::DW_AT) const>
   1c314:	c531                	c.beqz	a0,1c360 <dwarf::die::resolve(dwarf::DW_AT) const+0xc4>
      die s = ao[DW_AT::specification].as_reference();
   1c316:	04700613          	addi	a2,zero,71
   1c31a:	002c                	c.addi4spn	a1,sp,8
   1c31c:	0208                	c.addi4spn	a0,sp,256
   1c31e:	dd5ff0ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   1c322:	020c                	c.addi4spn	a1,sp,256
   1c324:	18a8                	c.addi4spn	a0,sp,120
   1c326:	41c020ef          	jal	ra,1e742 <dwarf::value::as_reference() const>
      if (s.has(attr))
   1c32a:	85ca                	c.mv	a1,s2
   1c32c:	18a8                	c.addi4spn	a0,sp,120
   1c32e:	d9dff0ef          	jal	ra,1c0ca <dwarf::die::has(dwarf::DW_AT) const>
   1c332:	c519                	c.beqz	a0,1c340 <dwarf::die::resolve(dwarf::DW_AT) const+0xa4>
        return s[attr];
   1c334:	864a                	c.mv	a2,s2
   1c336:	18ac                	c.addi4spn	a1,sp,120
   1c338:	8526                	c.mv	a0,s1
   1c33a:	db9ff0ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   1c33e:	a091                	c.j	1c382 <dwarf::die::resolve(dwarf::DW_AT) const+0xe6>
    for (T *p = base; p < end; ++p)
   1c340:	652e                	c.ldsp	a0,200(sp)
   1c342:	67ce                	c.ldsp	a5,208(sp)
   1c344:	00f57763          	bgeu	a0,a5,1c352 <dwarf::die::resolve(dwarf::DW_AT) const+0xb6>
   1c348:	87aa                	c.mv	a5,a0
   1c34a:	07a1                	c.addi	a5,8
   1c34c:	674e                	c.ldsp	a4,208(sp)
   1c34e:	fee7eee3          	bltu	a5,a4,1c34a <dwarf::die::resolve(dwarf::DW_AT) const+0xae>
    end = base;
   1c352:	e9aa                	c.sdsp	a0,208(sp)
    if ((char *)base != buf)
   1c354:	093c                	c.addi4spn	a5,sp,152
   1c356:	00f50563          	beq	a0,a5,1c360 <dwarf::die::resolve(dwarf::DW_AT) const+0xc4>
      delete[] (char *)base;
   1c35a:	c119                	c.beqz	a0,1c360 <dwarf::die::resolve(dwarf::DW_AT) const+0xc4>
   1c35c:	cf4fa0ef          	jal	ra,16850 <operator delete[](void*)@plt>
    for (T *p = base; p < end; ++p)
   1c360:	6566                	c.ldsp	a0,88(sp)
   1c362:	7786                	c.ldsp	a5,96(sp)
   1c364:	00f57763          	bgeu	a0,a5,1c372 <dwarf::die::resolve(dwarf::DW_AT) const+0xd6>
   1c368:	87aa                	c.mv	a5,a0
   1c36a:	07a1                	c.addi	a5,8
   1c36c:	7706                	c.ldsp	a4,96(sp)
   1c36e:	fee7eee3          	bltu	a5,a4,1c36a <dwarf::die::resolve(dwarf::DW_AT) const+0xce>
    end = base;
   1c372:	f0aa                	c.sdsp	a0,96(sp)
    if ((char *)base != buf)
   1c374:	103c                	c.addi4spn	a5,sp,40
   1c376:	04f50e63          	beq	a0,a5,1c3d2 <dwarf::die::resolve(dwarf::DW_AT) const+0x136>
      delete[] (char *)base;
   1c37a:	cd21                	c.beqz	a0,1c3d2 <dwarf::die::resolve(dwarf::DW_AT) const+0x136>
   1c37c:	cd4fa0ef          	jal	ra,16850 <operator delete[](void*)@plt>
   1c380:	a889                	c.j	1c3d2 <dwarf::die::resolve(dwarf::DW_AT) const+0x136>
    for (T *p = base; p < end; ++p)
   1c382:	652e                	c.ldsp	a0,200(sp)
   1c384:	67ce                	c.ldsp	a5,208(sp)
   1c386:	00f57763          	bgeu	a0,a5,1c394 <dwarf::die::resolve(dwarf::DW_AT) const+0xf8>
   1c38a:	87aa                	c.mv	a5,a0
   1c38c:	07a1                	c.addi	a5,8
   1c38e:	674e                	c.ldsp	a4,208(sp)
   1c390:	fee7eee3          	bltu	a5,a4,1c38c <dwarf::die::resolve(dwarf::DW_AT) const+0xf0>
    end = base;
   1c394:	e9aa                	c.sdsp	a0,208(sp)
    if ((char *)base != buf)
   1c396:	093c                	c.addi4spn	a5,sp,152
   1c398:	00f50563          	beq	a0,a5,1c3a2 <dwarf::die::resolve(dwarf::DW_AT) const+0x106>
      delete[] (char *)base;
   1c39c:	c119                	c.beqz	a0,1c3a2 <dwarf::die::resolve(dwarf::DW_AT) const+0x106>
   1c39e:	cb2fa0ef          	jal	ra,16850 <operator delete[](void*)@plt>
    for (T *p = base; p < end; ++p)
   1c3a2:	6566                	c.ldsp	a0,88(sp)
   1c3a4:	7786                	c.ldsp	a5,96(sp)
   1c3a6:	00f57763          	bgeu	a0,a5,1c3b4 <dwarf::die::resolve(dwarf::DW_AT) const+0x118>
   1c3aa:	87aa                	c.mv	a5,a0
   1c3ac:	07a1                	c.addi	a5,8
   1c3ae:	7706                	c.ldsp	a4,96(sp)
   1c3b0:	fee7eee3          	bltu	a5,a4,1c3ac <dwarf::die::resolve(dwarf::DW_AT) const+0x110>
    end = base;
   1c3b4:	f0aa                	c.sdsp	a0,96(sp)
    if ((char *)base != buf)
   1c3b6:	103c                	c.addi4spn	a5,sp,40
   1c3b8:	f0f504e3          	beq	a0,a5,1c2c0 <dwarf::die::resolve(dwarf::DW_AT) const+0x24>
      delete[] (char *)base;
   1c3bc:	f00502e3          	beq	a0,zero,1c2c0 <dwarf::die::resolve(dwarf::DW_AT) const+0x24>
   1c3c0:	c90fa0ef          	jal	ra,16850 <operator delete[](void*)@plt>
   1c3c4:	bdf5                	c.j	1c2c0 <dwarf::die::resolve(dwarf::DW_AT) const+0x24>
  } else if (has(DW_AT::specification)) {
   1c3c6:	04700593          	addi	a1,zero,71
   1c3ca:	8522                	c.mv	a0,s0
   1c3cc:	cffff0ef          	jal	ra,1c0ca <dwarf::die::has(dwarf::DW_AT) const>
   1c3d0:	e511                	c.bnez	a0,1c3dc <dwarf::die::resolve(dwarf::DW_AT) const+0x140>
  value() : cu(nullptr), typ(type::invalid) {}
   1c3d2:	0004b023          	sd	zero,0(s1)
   1c3d6:	0004a623          	sw	zero,12(s1)
   1c3da:	b5dd                	c.j	1c2c0 <dwarf::die::resolve(dwarf::DW_AT) const+0x24>
    die s = (*this)[DW_AT::specification].as_reference();
   1c3dc:	04700613          	addi	a2,zero,71
   1c3e0:	85a2                	c.mv	a1,s0
   1c3e2:	0a20                	c.addi4spn	s0,sp,280
   1c3e4:	8522                	c.mv	a0,s0
   1c3e6:	d0dff0ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   1c3ea:	85a2                	c.mv	a1,s0
   1c3ec:	18a0                	c.addi4spn	s0,sp,120
   1c3ee:	8522                	c.mv	a0,s0
   1c3f0:	352020ef          	jal	ra,1e742 <dwarf::value::as_reference() const>
    if (s.has(attr))
   1c3f4:	85ca                	c.mv	a1,s2
   1c3f6:	8522                	c.mv	a0,s0
   1c3f8:	cd3ff0ef          	jal	ra,1c0ca <dwarf::die::has(dwarf::DW_AT) const>
   1c3fc:	c519                	c.beqz	a0,1c40a <dwarf::die::resolve(dwarf::DW_AT) const+0x16e>
      return s[attr];
   1c3fe:	864a                	c.mv	a2,s2
   1c400:	85a2                	c.mv	a1,s0
   1c402:	8526                	c.mv	a0,s1
   1c404:	cefff0ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   1c408:	a015                	c.j	1c42c <dwarf::die::resolve(dwarf::DW_AT) const+0x190>
    for (T *p = base; p < end; ++p)
   1c40a:	652e                	c.ldsp	a0,200(sp)
   1c40c:	67ce                	c.ldsp	a5,208(sp)
   1c40e:	00f57763          	bgeu	a0,a5,1c41c <dwarf::die::resolve(dwarf::DW_AT) const+0x180>
   1c412:	87aa                	c.mv	a5,a0
   1c414:	07a1                	c.addi	a5,8
   1c416:	674e                	c.ldsp	a4,208(sp)
   1c418:	fee7eee3          	bltu	a5,a4,1c414 <dwarf::die::resolve(dwarf::DW_AT) const+0x178>
    end = base;
   1c41c:	e9aa                	c.sdsp	a0,208(sp)
    if ((char *)base != buf)
   1c41e:	093c                	c.addi4spn	a5,sp,152
   1c420:	faf509e3          	beq	a0,a5,1c3d2 <dwarf::die::resolve(dwarf::DW_AT) const+0x136>
      delete[] (char *)base;
   1c424:	d55d                	c.beqz	a0,1c3d2 <dwarf::die::resolve(dwarf::DW_AT) const+0x136>
   1c426:	c2afa0ef          	jal	ra,16850 <operator delete[](void*)@plt>
   1c42a:	b765                	c.j	1c3d2 <dwarf::die::resolve(dwarf::DW_AT) const+0x136>
    for (T *p = base; p < end; ++p)
   1c42c:	652e                	c.ldsp	a0,200(sp)
   1c42e:	67ce                	c.ldsp	a5,208(sp)
   1c430:	00f57763          	bgeu	a0,a5,1c43e <dwarf::die::resolve(dwarf::DW_AT) const+0x1a2>
   1c434:	87aa                	c.mv	a5,a0
   1c436:	07a1                	c.addi	a5,8
   1c438:	674e                	c.ldsp	a4,208(sp)
   1c43a:	fee7eee3          	bltu	a5,a4,1c436 <dwarf::die::resolve(dwarf::DW_AT) const+0x19a>
    end = base;
   1c43e:	e9aa                	c.sdsp	a0,208(sp)
    if ((char *)base != buf)
   1c440:	093c                	c.addi4spn	a5,sp,152
   1c442:	e6f50fe3          	beq	a0,a5,1c2c0 <dwarf::die::resolve(dwarf::DW_AT) const+0x24>
      delete[] (char *)base;
   1c446:	e6050de3          	beq	a0,zero,1c2c0 <dwarf::die::resolve(dwarf::DW_AT) const+0x24>
   1c44a:	c06fa0ef          	jal	ra,16850 <operator delete[](void*)@plt>
   1c44e:	bd8d                	c.j	1c2c0 <dwarf::die::resolve(dwarf::DW_AT) const+0x24>
class die {
   1c450:	842a                	c.mv	s0,a0
   1c452:	0928                	c.addi4spn	a0,sp,152
   1c454:	0001e317          	auipc	t1,0x1e
   1c458:	fac33303          	ld	t1,-84(t1) # 3a400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x22e14>
   1c45c:	9302                	c.jalr	t1
   1c45e:	1028                	c.addi4spn	a0,sp,40
   1c460:	0001e317          	auipc	t1,0x1e
   1c464:	fa033303          	ld	t1,-96(t1) # 3a400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x22e14>
   1c468:	9302                	c.jalr	t1
   1c46a:	8522                	c.mv	a0,s0
   1c46c:	d24fa0ef          	jal	ra,16990 <_Unwind_Resume@plt>
   1c470:	842a                	c.mv	s0,a0
   1c472:	b7f5                	c.j	1c45e <dwarf::die::resolve(dwarf::DW_AT) const+0x1c2>
   1c474:	842a                	c.mv	s0,a0
   1c476:	0928                	c.addi4spn	a0,sp,152
   1c478:	0001e317          	auipc	t1,0x1e
   1c47c:	f8833303          	ld	t1,-120(t1) # 3a400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x22e14>
   1c480:	9302                	c.jalr	t1
   1c482:	8522                	c.mv	a0,s0
   1c484:	d0cfa0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001c488 <dwarf::die::iterator::operator++()>:
die::iterator &die::iterator::operator++() {
   1c488:	7155                	c.addi16sp	sp,-208
   1c48a:	e586                	c.sdsp	ra,200(sp)
   1c48c:	e1a2                	c.sdsp	s0,192(sp)
   1c48e:	fd26                	c.sdsp	s1,184(sp)
   1c490:	f94a                	c.sdsp	s2,176(sp)
   1c492:	f54e                	c.sdsp	s3,168(sp)
   1c494:	f152                	c.sdsp	s4,160(sp)
   1c496:	ed56                	c.sdsp	s5,152(sp)
   1c498:	842a                	c.mv	s0,a0
  if (!d.abbrev)
   1c49a:	691c                	c.ld	a5,16(a0)
   1c49c:	c799                	c.beqz	a5,1c4aa <dwarf::die::iterator::operator++()+0x22>
  if (!d.abbrev->children) {
   1c49e:	00c7c783          	lbu	a5,12(a5)
   1c4a2:	ef91                	c.bnez	a5,1c4be <dwarf::die::iterator::operator++()+0x36>
    d.read(d.next);
   1c4a4:	752c                	c.ld	a1,104(a0)
   1c4a6:	897ff0ef          	jal	ra,1bd3c <dwarf::die::read(unsigned long)>
}
   1c4aa:	8522                	c.mv	a0,s0
   1c4ac:	60ae                	c.ldsp	ra,200(sp)
   1c4ae:	640e                	c.ldsp	s0,192(sp)
   1c4b0:	74ea                	c.ldsp	s1,184(sp)
   1c4b2:	794a                	c.ldsp	s2,176(sp)
   1c4b4:	79aa                	c.ldsp	s3,168(sp)
   1c4b6:	7a0a                	c.ldsp	s4,160(sp)
   1c4b8:	6aea                	c.ldsp	s5,152(sp)
   1c4ba:	6169                	c.addi16sp	sp,208
   1c4bc:	8082                	c.jr	ra
  } else if (d.has(DW_AT::sibling)) {
   1c4be:	4585                	c.li	a1,1
   1c4c0:	c0bff0ef          	jal	ra,1c0ca <dwarf::die::has(dwarf::DW_AT) const>
   1c4c4:	0e050963          	beq	a0,zero,1c5b6 <dwarf::die::iterator::operator++()+0x12e>
    d = d[DW_AT::sibling].as_reference();
   1c4c8:	4605                	c.li	a2,1
   1c4ca:	85a2                	c.mv	a1,s0
   1c4cc:	18a4                	c.addi4spn	s1,sp,120
   1c4ce:	8526                	c.mv	a0,s1
   1c4d0:	c23ff0ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   1c4d4:	85a6                	c.mv	a1,s1
   1c4d6:	0028                	c.addi4spn	a0,sp,8
   1c4d8:	26a020ef          	jal	ra,1e742 <dwarf::value::as_reference() const>
  die &operator=(die &&o) = default;
   1c4dc:	47a2                	c.lwsp	a5,8(sp)
   1c4de:	c01c                	c.sw	a5,0(s0)
   1c4e0:	67c2                	c.ldsp	a5,16(sp)
   1c4e2:	e41c                	c.sd	a5,8(s0)
   1c4e4:	67e2                	c.ldsp	a5,24(sp)
   1c4e6:	e81c                	c.sd	a5,16(s0)
   1c4e8:	7782                	c.ldsp	a5,32(sp)
   1c4ea:	ec1c                	c.sd	a5,24(s0)
  size_type size() const { return end - base; }
   1c4ec:	7906                	c.ldsp	s2,96(sp)
   1c4ee:	67e6                	c.ldsp	a5,88(sp)
   1c4f0:	40f90933          	sub	s2,s2,a5
   1c4f4:	40395493          	srai	s1,s2,0x3
    for (T *p = base; p < end; ++p)
   1c4f8:	6834                	c.ld	a3,80(s0)
   1c4fa:	6c3c                	c.ld	a5,88(s0)
   1c4fc:	00f6f763          	bgeu	a3,a5,1c50a <dwarf::die::iterator::operator++()+0x82>
   1c500:	87b6                	c.mv	a5,a3
   1c502:	07a1                	c.addi	a5,8
   1c504:	6c38                	c.ld	a4,88(s0)
   1c506:	fee7eee3          	bltu	a5,a4,1c502 <dwarf::die::iterator::operator++()+0x7a>
    end = base;
   1c50a:	ec34                	c.sd	a3,88(s0)
    if (n <= (size_type)(cap - base))
   1c50c:	7028                	c.ld	a0,96(s0)
   1c50e:	8d15                	c.sub	a0,a3
   1c510:	05257e63          	bgeu	a0,s2,1c56c <dwarf::die::iterator::operator++()+0xe4>
   1c514:	850d                	c.srai	a0,0x3
   1c516:	e111                	c.bnez	a0,1c51a <dwarf::die::iterator::operator++()+0x92>
   1c518:	4505                	c.li	a0,1
    while (target < n)
   1c51a:	00957563          	bgeu	a0,s1,1c524 <dwarf::die::iterator::operator++()+0x9c>
      target <<= 1;
   1c51e:	0506                	c.slli	a0,0x1
    while (target < n)
   1c520:	fe956fe3          	bltu	a0,s1,1c51e <dwarf::die::iterator::operator++()+0x96>
    char *newbuf = new char[sizeof(T[target])];
   1c524:	00351993          	slli	s3,a0,0x3
   1c528:	854e                	c.mv	a0,s3
   1c52a:	866fa0ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   1c52e:	8aaa                	c.mv	s5,a0
    T *src = base, *dest = (T *)newbuf;
   1c530:	6828                	c.ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   1c532:	6c38                	c.ld	a4,88(s0)
   1c534:	06e57f63          	bgeu	a0,a4,1c5b2 <dwarf::die::iterator::operator++()+0x12a>
    T *src = base, *dest = (T *)newbuf;
   1c538:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1c53a:	07a1                	c.addi	a5,8
   1c53c:	fee7efe3          	bltu	a5,a4,1c53a <dwarf::die::iterator::operator++()+0xb2>
   1c540:	fff70a13          	addi	s4,a4,-1
   1c544:	40aa0a33          	sub	s4,s4,a0
   1c548:	ff8a7a13          	andi	s4,s4,-8
   1c54c:	0a21                	c.addi	s4,8
   1c54e:	9a56                	c.add	s4,s5
   1c550:	02040793          	addi	a5,s0,32
    if ((char *)base != buf)
   1c554:	00f50563          	beq	a0,a5,1c55e <dwarf::die::iterator::operator++()+0xd6>
      delete[] (char *)base;
   1c558:	c119                	c.beqz	a0,1c55e <dwarf::die::iterator::operator++()+0xd6>
   1c55a:	af6fa0ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1c55e:	05543823          	sd	s5,80(s0)
    end = dest;
   1c562:	05443c23          	sd	s4,88(s0)
    cap = base + target;
   1c566:	9ace                	c.add	s5,s3
   1c568:	07543023          	sd	s5,96(s0)
    for (size_type i = 0; i < osize; i++)
   1c56c:	cc89                	c.beqz	s1,1c586 <dwarf::die::iterator::operator++()+0xfe>
   1c56e:	4781                	c.li	a5,0
   1c570:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1c574:	6766                	c.ldsp	a4,88(sp)
   1c576:	9736                	c.add	a4,a3
   1c578:	6310                	c.ld	a2,0(a4)
   1c57a:	6838                	c.ld	a4,80(s0)
   1c57c:	9736                	c.add	a4,a3
   1c57e:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1c580:	0785                	c.addi	a5,1
   1c582:	fef497e3          	bne	s1,a5,1c570 <dwarf::die::iterator::operator++()+0xe8>
    end = base + osize;
   1c586:	683c                	c.ld	a5,80(s0)
   1c588:	97ca                	c.add	a5,s2
   1c58a:	ec3c                	c.sd	a5,88(s0)
   1c58c:	77c6                	c.ldsp	a5,112(sp)
   1c58e:	f43c                	c.sd	a5,104(s0)
    for (T *p = base; p < end; ++p)
   1c590:	6566                	c.ldsp	a0,88(sp)
   1c592:	7786                	c.ldsp	a5,96(sp)
   1c594:	00f57763          	bgeu	a0,a5,1c5a2 <dwarf::die::iterator::operator++()+0x11a>
   1c598:	87aa                	c.mv	a5,a0
   1c59a:	07a1                	c.addi	a5,8
   1c59c:	7706                	c.ldsp	a4,96(sp)
   1c59e:	fee7eee3          	bltu	a5,a4,1c59a <dwarf::die::iterator::operator++()+0x112>
    if ((char *)base != buf)
   1c5a2:	103c                	c.addi4spn	a5,sp,40
   1c5a4:	f0f503e3          	beq	a0,a5,1c4aa <dwarf::die::iterator::operator++()+0x22>
      delete[] (char *)base;
   1c5a8:	f00501e3          	beq	a0,zero,1c4aa <dwarf::die::iterator::operator++()+0x22>
   1c5ac:	aa4fa0ef          	jal	ra,16850 <operator delete[](void*)@plt>
   1c5b0:	bded                	c.j	1c4aa <dwarf::die::iterator::operator++()+0x22>
    T *src = base, *dest = (T *)newbuf;
   1c5b2:	8a56                	c.mv	s4,s5
   1c5b4:	bf71                	c.j	1c550 <dwarf::die::iterator::operator++()+0xc8>
    iterator sub(d.cu, d.next);
   1c5b6:	7430                	c.ld	a2,104(s0)
   1c5b8:	640c                	c.ld	a1,8(s0)
   1c5ba:	0028                	c.addi4spn	a0,sp,8
   1c5bc:	c47ff0ef          	jal	ra,1c202 <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)>
      ++sub;
   1c5c0:	0024                	c.addi4spn	s1,sp,8
    while (sub->abbrev)
   1c5c2:	67e2                	c.ldsp	a5,24(sp)
   1c5c4:	c789                	c.beqz	a5,1c5ce <dwarf::die::iterator::operator++()+0x146>
      ++sub;
   1c5c6:	8526                	c.mv	a0,s1
   1c5c8:	ec1ff0ef          	jal	ra,1c488 <dwarf::die::iterator::operator++()>
   1c5cc:	bfdd                	c.j	1c5c2 <dwarf::die::iterator::operator++()+0x13a>
    d.read(sub->next);
   1c5ce:	75c6                	c.ldsp	a1,112(sp)
   1c5d0:	8522                	c.mv	a0,s0
   1c5d2:	f6aff0ef          	jal	ra,1bd3c <dwarf::die::read(unsigned long)>
    for (T *p = base; p < end; ++p)
   1c5d6:	6566                	c.ldsp	a0,88(sp)
   1c5d8:	7786                	c.ldsp	a5,96(sp)
   1c5da:	00f57763          	bgeu	a0,a5,1c5e8 <dwarf::die::iterator::operator++()+0x160>
   1c5de:	87aa                	c.mv	a5,a0
   1c5e0:	07a1                	c.addi	a5,8
   1c5e2:	7706                	c.ldsp	a4,96(sp)
   1c5e4:	fee7eee3          	bltu	a5,a4,1c5e0 <dwarf::die::iterator::operator++()+0x158>
    if ((char *)base != buf)
   1c5e8:	103c                	c.addi4spn	a5,sp,40
   1c5ea:	ecf500e3          	beq	a0,a5,1c4aa <dwarf::die::iterator::operator++()+0x22>
      delete[] (char *)base;
   1c5ee:	ea050ee3          	beq	a0,zero,1c4aa <dwarf::die::iterator::operator++()+0x22>
   1c5f2:	a5efa0ef          	jal	ra,16850 <operator delete[](void*)@plt>
   1c5f6:	bd55                	c.j	1c4aa <dwarf::die::iterator::operator++()+0x22>
class die {
   1c5f8:	842a                	c.mv	s0,a0
   1c5fa:	1028                	c.addi4spn	a0,sp,40
   1c5fc:	0001e317          	auipc	t1,0x1e
   1c600:	e0433303          	ld	t1,-508(t1) # 3a400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x22e14>
   1c604:	9302                	c.jalr	t1
   1c606:	8522                	c.mv	a0,s0
   1c608:	b88fa0ef          	jal	ra,16990 <_Unwind_Resume@plt>
   1c60c:	842a                	c.mv	s0,a0
   1c60e:	1028                	c.addi4spn	a0,sp,40
   1c610:	0001e317          	auipc	t1,0x1e
   1c614:	df033303          	ld	t1,-528(t1) # 3a400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x22e14>
   1c618:	9302                	c.jalr	t1
   1c61a:	8522                	c.mv	a0,s0
   1c61c:	b74fa0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001c620 <dwarf::die::attributes() const>:
const vector<pair<DW_AT, value>> die::attributes() const {
   1c620:	7175                	c.addi16sp	sp,-144
   1c622:	e506                	c.sdsp	ra,136(sp)
   1c624:	e122                	c.sdsp	s0,128(sp)
   1c626:	fca6                	c.sdsp	s1,120(sp)
   1c628:	f8ca                	c.sdsp	s2,112(sp)
   1c62a:	f4ce                	c.sdsp	s3,104(sp)
   1c62c:	f0d2                	c.sdsp	s4,96(sp)
   1c62e:	ecd6                	c.sdsp	s5,88(sp)
   1c630:	e8da                	c.sdsp	s6,80(sp)
   1c632:	e4de                	c.sdsp	s7,72(sp)
   1c634:	84aa                	c.mv	s1,a0
	: _M_start(), _M_finish(), _M_end_of_storage()
   1c636:	00053023          	sd	zero,0(a0)
   1c63a:	00053423          	sd	zero,8(a0)
   1c63e:	00053823          	sd	zero,16(a0)
  if (!abbrev)
   1c642:	699c                	c.ld	a5,16(a1)
   1c644:	c7d1                	c.beqz	a5,1c6d0 <dwarf::die::attributes() const+0xb0>
   1c646:	89ae                	c.mv	s3,a1
   1c648:	6b80                	c.ld	s0,16(a5)
   1c64a:	0187ba03          	ld	s4,24(a5)
  for (auto &a : abbrev->attributes) {
   1c64e:	088a0163          	beq	s4,s0,1c6d0 <dwarf::die::attributes() const+0xb0>
   1c652:	4901                	c.li	s2,0
        make_pair(a.name, value(cu, a.name, a.form, a.type, attrs[i])));
   1c654:	02810a93          	addi	s5,sp,40
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   1c658:	00810b13          	addi	s6,sp,8
   1c65c:	0001eb97          	auipc	s7,0x1e
   1c660:	eb4bbb83          	ld	s7,-332(s7) # 3a510 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)@@Base+0x1de28>
   1c664:	a82d                	c.j	1c69e <dwarf::die::attributes() const+0x7e>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   1c666:	401c                	c.lw	a5,0(s0)
   1c668:	c43e                	c.swsp	a5,8(sp)
   1c66a:	77a2                	c.ldsp	a5,40(sp)
   1c66c:	e83e                	c.sdsp	a5,16(sp)
   1c66e:	77c2                	c.ldsp	a5,48(sp)
   1c670:	ec3e                	c.sdsp	a5,24(sp)
   1c672:	77e2                	c.ldsp	a5,56(sp)
   1c674:	f03e                	c.sdsp	a5,32(sp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   1c676:	648c                	c.ld	a1,8(s1)
   1c678:	689c                	c.ld	a5,16(s1)
   1c67a:	02f58f63          	beq	a1,a5,1c6b8 <dwarf::die::attributes() const+0x98>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1c67e:	67a2                	c.ldsp	a5,8(sp)
   1c680:	e19c                	c.sd	a5,0(a1)
   1c682:	67c2                	c.ldsp	a5,16(sp)
   1c684:	e59c                	c.sd	a5,8(a1)
   1c686:	67e2                	c.ldsp	a5,24(sp)
   1c688:	e99c                	c.sd	a5,16(a1)
   1c68a:	7782                	c.ldsp	a5,32(sp)
   1c68c:	ed9c                	c.sd	a5,24(a1)
	    ++this->_M_impl._M_finish;
   1c68e:	649c                	c.ld	a5,8(s1)
   1c690:	02078793          	addi	a5,a5,32
   1c694:	e49c                	c.sd	a5,8(s1)
  for (auto &a : abbrev->attributes) {
   1c696:	0431                	c.addi	s0,12
   1c698:	0921                	c.addi	s2,8
   1c69a:	028a0b63          	beq	s4,s0,1c6d0 <dwarf::die::attributes() const+0xb0>
        make_pair(a.name, value(cu, a.name, a.form, a.type, attrs[i])));
   1c69e:	0509b783          	ld	a5,80(s3)
   1c6a2:	97ca                	c.add	a5,s2
   1c6a4:	639c                	c.ld	a5,0(a5)
   1c6a6:	4418                	c.lw	a4,8(s0)
   1c6a8:	4054                	c.lw	a3,4(s0)
   1c6aa:	4010                	c.lw	a2,0(s0)
   1c6ac:	0089b583          	ld	a1,8(s3)
   1c6b0:	8556                	c.mv	a0,s5
   1c6b2:	5af010ef          	jal	ra,1e460 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)>
   1c6b6:	bf45                	c.j	1c666 <dwarf::die::attributes() const+0x46>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   1c6b8:	865a                	c.mv	a2,s6
   1c6ba:	8526                	c.mv	a0,s1
   1c6bc:	9b82                	c.jalr	s7
   1c6be:	bfe1                	c.j	1c696 <dwarf::die::attributes() const+0x76>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1c6c0:	842a                	c.mv	s0,a0
   1c6c2:	6088                	c.ld	a0,0(s1)
	if (__p)
   1c6c4:	c119                	c.beqz	a0,1c6ca <dwarf::die::attributes() const+0xaa>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1c6c6:	8dafa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1c6ca:	8522                	c.mv	a0,s0
   1c6cc:	ac4fa0ef          	jal	ra,16990 <_Unwind_Resume@plt>
}
   1c6d0:	8526                	c.mv	a0,s1
   1c6d2:	60aa                	c.ldsp	ra,136(sp)
   1c6d4:	640a                	c.ldsp	s0,128(sp)
   1c6d6:	74e6                	c.ldsp	s1,120(sp)
   1c6d8:	7946                	c.ldsp	s2,112(sp)
   1c6da:	79a6                	c.ldsp	s3,104(sp)
   1c6dc:	7a06                	c.ldsp	s4,96(sp)
   1c6de:	6ae6                	c.ldsp	s5,88(sp)
   1c6e0:	6b46                	c.ldsp	s6,80(sp)
   1c6e2:	6ba6                	c.ldsp	s7,72(sp)
   1c6e4:	6149                	c.addi16sp	sp,144
   1c6e6:	8082                	c.jr	ra

000000000001c6e8 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)>:
      vector<_Tp, _Alloc>::
   1c6e8:	715d                	c.addi16sp	sp,-80
   1c6ea:	e486                	c.sdsp	ra,72(sp)
   1c6ec:	e0a2                	c.sdsp	s0,64(sp)
   1c6ee:	fc26                	c.sdsp	s1,56(sp)
   1c6f0:	f84a                	c.sdsp	s2,48(sp)
   1c6f2:	f44e                	c.sdsp	s3,40(sp)
   1c6f4:	f052                	c.sdsp	s4,32(sp)
   1c6f6:	ec56                	c.sdsp	s5,24(sp)
   1c6f8:	e85a                	c.sdsp	s6,16(sp)
   1c6fa:	e45e                	c.sdsp	s7,8(sp)
   1c6fc:	e062                	c.sdsp	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1c6fe:	00853903          	ld	s2,8(a0)
   1c702:	00053a03          	ld	s4,0(a0)
   1c706:	414907b3          	sub	a5,s2,s4
   1c70a:	8795                	c.srai	a5,0x5
	if (max_size() - size() < __n)
   1c70c:	577d                	c.li	a4,-1
   1c70e:	8319                	c.srli	a4,0x6
   1c710:	02e78763          	beq	a5,a4,1c73e <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x56>
   1c714:	8aaa                	c.mv	s5,a0
   1c716:	8bae                	c.mv	s7,a1
   1c718:	84b2                	c.mv	s1,a2
   1c71a:	842e                	c.mv	s0,a1
      return __a;
   1c71c:	873e                	c.mv	a4,a5
      if (__a < __b)
   1c71e:	03490663          	beq	s2,s4,1c74a <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x62>
	const size_type __len = size() + (std::max)(size(), __n);
   1c722:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1c724:	02f76763          	bltu	a4,a5,1c752 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x6a>
   1c728:	8b3a                	c.mv	s6,a4
   1c72a:	57fd                	c.li	a5,-1
   1c72c:	8399                	c.srli	a5,0x6
   1c72e:	00e7f363          	bgeu	a5,a4,1c734 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x4c>
   1c732:	8b3e                	c.mv	s6,a5
    { return __lhs.base() - __rhs.base(); }
   1c734:	414b8c33          	sub	s8,s7,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1c738:	4981                	c.li	s3,0
   1c73a:	c715                	c.beqz	a4,1c766 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x7e>
   1c73c:	a005                	c.j	1c75c <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x74>
	  __throw_length_error(__N(__s));
   1c73e:	00011517          	auipc	a0,0x11
   1c742:	31250513          	addi	a0,a0,786 # 2da50 <__libc_csu_fini+0x9e>
   1c746:	f5bf90ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   1c74a:	4705                	c.li	a4,1
   1c74c:	bfd9                	c.j	1c722 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x3a>
      _ForwardIterator __cur = __result;
   1c74e:	84ce                	c.mv	s1,s3
   1c750:	a891                	c.j	1c7a4 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xbc>
   1c752:	414b8c33          	sub	s8,s7,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1c756:	5b7d                	c.li	s6,-1
   1c758:	006b5b13          	srli	s6,s6,0x6
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1c75c:	005b1513          	slli	a0,s6,0x5
   1c760:	850fa0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1c764:	89aa                	c.mv	s3,a0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1c766:	018987b3          	add	a5,s3,s8
   1c76a:	608c                	c.ld	a1,0(s1)
   1c76c:	6490                	c.ld	a2,8(s1)
   1c76e:	6894                	c.ld	a3,16(s1)
   1c770:	6c98                	c.ld	a4,24(s1)
   1c772:	e38c                	c.sd	a1,0(a5)
   1c774:	e790                	c.sd	a2,8(a5)
   1c776:	eb94                	c.sd	a3,16(a5)
   1c778:	ef98                	c.sd	a4,24(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   1c77a:	fd440ae3          	beq	s0,s4,1c74e <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x66>
   1c77e:	414b84b3          	sub	s1,s7,s4
   1c782:	94ce                	c.add	s1,s3
      _ForwardIterator __cur = __result;
   1c784:	87ce                	c.mv	a5,s3
      for (; __first != __last; ++__first, (void)++__cur)
   1c786:	8752                	c.mv	a4,s4
   1c788:	6308                	c.ld	a0,0(a4)
   1c78a:	670c                	c.ld	a1,8(a4)
   1c78c:	6b10                	c.ld	a2,16(a4)
   1c78e:	6f14                	c.ld	a3,24(a4)
   1c790:	e388                	c.sd	a0,0(a5)
   1c792:	e78c                	c.sd	a1,8(a5)
   1c794:	eb90                	c.sd	a2,16(a5)
   1c796:	ef94                	c.sd	a3,24(a5)
   1c798:	02070713          	addi	a4,a4,32
   1c79c:	02078793          	addi	a5,a5,32
   1c7a0:	fe9794e3          	bne	a5,s1,1c788 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xa0>
	      ++__new_finish;
   1c7a4:	02048493          	addi	s1,s1,32
   1c7a8:	03240463          	beq	s0,s2,1c7d0 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xe8>
   1c7ac:	41790bb3          	sub	s7,s2,s7
      _ForwardIterator __cur = __result;
   1c7b0:	87a6                	c.mv	a5,s1
   1c7b2:	6008                	c.ld	a0,0(s0)
   1c7b4:	6410                	c.ld	a2,8(s0)
   1c7b6:	6814                	c.ld	a3,16(s0)
   1c7b8:	6c18                	c.ld	a4,24(s0)
   1c7ba:	e388                	c.sd	a0,0(a5)
   1c7bc:	e790                	c.sd	a2,8(a5)
   1c7be:	eb94                	c.sd	a3,16(a5)
   1c7c0:	ef98                	c.sd	a4,24(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   1c7c2:	02040413          	addi	s0,s0,32
   1c7c6:	02078793          	addi	a5,a5,32
   1c7ca:	ff2414e3          	bne	s0,s2,1c7b2 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xca>
   1c7ce:	94de                	c.add	s1,s7
	if (__p)
   1c7d0:	000a0563          	beq	s4,zero,1c7da <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xf2>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1c7d4:	8552                	c.mv	a0,s4
   1c7d6:	fcbf90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   1c7da:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   1c7de:	009ab423          	sd	s1,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1c7e2:	0b16                	c.slli	s6,0x5
   1c7e4:	99da                	c.add	s3,s6
   1c7e6:	013ab823          	sd	s3,16(s5)
    }
   1c7ea:	60a6                	c.ldsp	ra,72(sp)
   1c7ec:	6406                	c.ldsp	s0,64(sp)
   1c7ee:	74e2                	c.ldsp	s1,56(sp)
   1c7f0:	7942                	c.ldsp	s2,48(sp)
   1c7f2:	79a2                	c.ldsp	s3,40(sp)
   1c7f4:	7a02                	c.ldsp	s4,32(sp)
   1c7f6:	6ae2                	c.ldsp	s5,24(sp)
   1c7f8:	6b42                	c.ldsp	s6,16(sp)
   1c7fa:	6ba2                	c.ldsp	s7,8(sp)
   1c7fc:	6c02                	c.ldsp	s8,0(sp)
   1c7fe:	6161                	c.addi16sp	sp,80
   1c800:	8082                	c.jr	ra

000000000001c802 <dwarf::value::get_section_offset() const>:
    : cu(cu), form(form), typ(typ), offset(offset) {
  if (form == DW_FORM::indirect)
    resolve_indirect(name);
}

section_offset value::get_section_offset() const {
   1c802:	1141                	c.addi	sp,-16
   1c804:	e406                	c.sdsp	ra,8(sp)
   1c806:	e022                	c.sdsp	s0,0(sp)
   1c808:	842a                	c.mv	s0,a0
  return cu->get_section_offset() + offset;
   1c80a:	6108                	c.ld	a0,0(a0)
   1c80c:	b26fb0ef          	jal	ra,17b32 <dwarf::unit::get_section_offset() const>
   1c810:	681c                	c.ld	a5,16(s0)
}
   1c812:	953e                	c.add	a0,a5
   1c814:	60a2                	c.ldsp	ra,8(sp)
   1c816:	6402                	c.ldsp	s0,0(sp)
   1c818:	0141                	c.addi	sp,16
   1c81a:	8082                	c.jr	ra

000000000001c81c <dwarf::value::as_address() const>:

taddr value::as_address() const {
   1c81c:	7135                	c.addi16sp	sp,-160
   1c81e:	ed06                	c.sdsp	ra,152(sp)
   1c820:	e922                	c.sdsp	s0,144(sp)
   1c822:	e526                	c.sdsp	s1,136(sp)
   1c824:	e14a                	c.sdsp	s2,128(sp)
   1c826:	842a                	c.mv	s0,a0
  if (form != DW_FORM::addr)
   1c828:	4518                	c.lw	a4,8(a0)
   1c82a:	4785                	c.li	a5,1
   1c82c:	0af71063          	bne	a4,a5,1c8cc <dwarf::value::as_address() const+0xb0>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as address");

  cursor cur(cu->data(), offset);
   1c830:	6108                	c.ld	a0,0(a0)
   1c832:	b06fb0ef          	jal	ra,17b38 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1c836:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1c83a:	6504                	c.ld	s1,8(a0)
	if (_M_pi != nullptr)
   1c83c:	20048f63          	beq	s1,zero,1ca5a <dwarf::value::as_address() const+0x23e>
    if (__is_single_threaded())
   1c840:	0001e797          	auipc	a5,0x1e
   1c844:	c587b783          	ld	a5,-936(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1c848:	0007c783          	lbu	a5,0(a5)
   1c84c:	10078863          	beq	a5,zero,1c95c <dwarf::value::as_address() const+0x140>
  { *__mem += __val; }
   1c850:	589c                	c.lw	a5,48(s1)
   1c852:	2785                	c.addiw	a5,1
   1c854:	d89c                	c.sw	a5,48(s1)
   1c856:	6800                	c.ld	s0,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1c858:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   1c85a:	f8a6                	c.sdsp	s1,112(sp)
    if (__is_single_threaded())
   1c85c:	0001e797          	auipc	a5,0x1e
   1c860:	c3c7b783          	ld	a5,-964(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1c864:	0007c783          	lbu	a5,0(a5)
   1c868:	10078063          	beq	a5,zero,1c968 <dwarf::value::as_address() const+0x14c>
  { *__mem += __val; }
   1c86c:	589c                	c.lw	a5,48(s1)
   1c86e:	2785                	c.addiw	a5,1
   1c870:	d89c                	c.sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   1c872:	00893783          	ld	a5,8(s2)
   1c876:	97a2                	c.add	a5,s0
   1c878:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   1c87a:	0001e797          	auipc	a5,0x1e
   1c87e:	c1e7b783          	ld	a5,-994(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1c882:	0007c783          	lbu	a5,0(a5)
   1c886:	0e078763          	beq	a5,zero,1c974 <dwarf::value::as_address() const+0x158>
    _Atomic_word __result = *__mem;
   1c88a:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1c88c:	fff5079b          	addiw	a5,a0,-1
   1c890:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1c892:	4785                	c.li	a5,1
   1c894:	1cf51a63          	bne	a0,a5,1ca68 <dwarf::value::as_address() const+0x24c>
	_M_dispose();
   1c898:	609c                	c.ld	a5,0(s1)
   1c89a:	6b9c                	c.ld	a5,16(a5)
   1c89c:	8526                	c.mv	a0,s1
   1c89e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1c8a0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1c8a4:	0001e797          	auipc	a5,0x1e
   1c8a8:	bf47b783          	ld	a5,-1036(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1c8ac:	0007c783          	lbu	a5,0(a5)
   1c8b0:	0c078863          	beq	a5,zero,1c980 <dwarf::value::as_address() const+0x164>
    _Atomic_word __result = *__mem;
   1c8b4:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1c8b6:	fff5079b          	addiw	a5,a0,-1
   1c8ba:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1c8bc:	4785                	c.li	a5,1
   1c8be:	1af51563          	bne	a0,a5,1ca68 <dwarf::value::as_address() const+0x24c>
	    _M_destroy();
   1c8c2:	609c                	c.ld	a5,0(s1)
   1c8c4:	6f9c                	c.ld	a5,24(a5)
   1c8c6:	8526                	c.mv	a0,s1
   1c8c8:	9782                	c.jalr	a5
   1c8ca:	aa79                	c.j	1ca68 <dwarf::value::as_address() const+0x24c>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as address");
   1c8cc:	4541                	c.li	a0,16
   1c8ce:	dc3f90ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1c8d2:	84aa                	c.mv	s1,a0
   1c8d4:	444c                	c.lw	a1,12(s0)
   1c8d6:	0028                	c.addi4spn	a0,sp,8
   1c8d8:	6c00b0ef          	jal	ra,27f98 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1c8dc:	00012617          	auipc	a2,0x12
   1c8e0:	90c60613          	addi	a2,a2,-1780 # 2e1e8 <std::piecewise_construct+0x1c8>
   1c8e4:	4581                	c.li	a1,0
   1c8e6:	0028                	c.addi4spn	a0,sp,8
   1c8e8:	d19f90ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1c8ec:	85aa                	c.mv	a1,a0
   1c8ee:	1020                	c.addi4spn	s0,sp,40
   1c8f0:	8522                	c.mv	a0,s0
   1c8f2:	ddff90ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1c8f6:	00012597          	auipc	a1,0x12
   1c8fa:	90258593          	addi	a1,a1,-1790 # 2e1f8 <std::piecewise_construct+0x1d8>
   1c8fe:	8522                	c.mv	a0,s0
   1c900:	940fa0ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1c904:	85aa                	c.mv	a1,a0
   1c906:	00a0                	c.addi4spn	s0,sp,72
   1c908:	8522                	c.mv	a0,s0
   1c90a:	dc7f90ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::logic_error(what_arg) {}
   1c90e:	85a2                	c.mv	a1,s0
   1c910:	8526                	c.mv	a0,s1
   1c912:	97efa0ef          	jal	ra,16a90 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1c916:	0001e797          	auipc	a5,0x1e
   1c91a:	b4a7b783          	ld	a5,-1206(a5) # 3a460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   1c91e:	07c1                	c.addi	a5,16
   1c920:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1c922:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1c924:	08bc                	c.addi4spn	a5,sp,88
   1c926:	00f50463          	beq	a0,a5,1c92e <dwarf::value::as_address() const+0x112>
   1c92a:	e77f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c92e:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1c930:	183c                	c.addi4spn	a5,sp,56
   1c932:	00f50463          	beq	a0,a5,1c93a <dwarf::value::as_address() const+0x11e>
   1c936:	e6bf90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c93a:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1c93c:	083c                	c.addi4spn	a5,sp,24
   1c93e:	00f50463          	beq	a0,a5,1c946 <dwarf::value::as_address() const+0x12a>
   1c942:	e5ff90ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1c946:	0001e617          	auipc	a2,0x1e
   1c94a:	caa63603          	ld	a2,-854(a2) # 3a5f0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1aaa0>
   1c94e:	0001e597          	auipc	a1,0x1e
   1c952:	c625b583          	ld	a1,-926(a1) # 3a5b0 <typeinfo for dwarf::value_type_mismatch@@Base+0xca18>
   1c956:	8526                	c.mv	a0,s1
   1c958:	808fa0ef          	jal	ra,16960 <__cxa_throw@plt>
      __atomic_add(__mem, __val);
   1c95c:	4585                	c.li	a1,1
   1c95e:	03048513          	addi	a0,s1,48
   1c962:	c4ff90ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1c966:	bdc5                	c.j	1c856 <dwarf::value::as_address() const+0x3a>
   1c968:	4585                	c.li	a1,1
   1c96a:	03048513          	addi	a0,s1,48
   1c96e:	c43f90ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1c972:	b701                	c.j	1c872 <dwarf::value::as_address() const+0x56>
      return __exchange_and_add(__mem, __val);
   1c974:	55fd                	c.li	a1,-1
   1c976:	03048513          	addi	a0,s1,48
   1c97a:	c77f90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c97e:	bf11                	c.j	1c892 <dwarf::value::as_address() const+0x76>
   1c980:	55fd                	c.li	a1,-1
   1c982:	03448513          	addi	a0,s1,52
   1c986:	c6bf90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c98a:	bf0d                	c.j	1c8bc <dwarf::value::as_address() const+0xa0>
  return cur.address();
   1c98c:	842a                	c.mv	s0,a0
	if (_M_pi != nullptr)
   1c98e:	74c6                	c.ldsp	s1,112(sp)
   1c990:	cc99                	c.beqz	s1,1c9ae <dwarf::value::as_address() const+0x192>
    if (__is_single_threaded())
   1c992:	0001e797          	auipc	a5,0x1e
   1c996:	b067b783          	ld	a5,-1274(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1c99a:	0007c783          	lbu	a5,0(a5)
   1c99e:	cf99                	c.beqz	a5,1c9bc <dwarf::value::as_address() const+0x1a0>
    _Atomic_word __result = *__mem;
   1c9a0:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1c9a2:	fff5079b          	addiw	a5,a0,-1
   1c9a6:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1c9a8:	4785                	c.li	a5,1
   1c9aa:	00f50f63          	beq	a0,a5,1c9c8 <dwarf::value::as_address() const+0x1ac>
}
   1c9ae:	8522                	c.mv	a0,s0
   1c9b0:	60ea                	c.ldsp	ra,152(sp)
   1c9b2:	644a                	c.ldsp	s0,144(sp)
   1c9b4:	64aa                	c.ldsp	s1,136(sp)
   1c9b6:	690a                	c.ldsp	s2,128(sp)
   1c9b8:	610d                	c.addi16sp	sp,160
   1c9ba:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   1c9bc:	55fd                	c.li	a1,-1
   1c9be:	03048513          	addi	a0,s1,48
   1c9c2:	c2ff90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c9c6:	b7cd                	c.j	1c9a8 <dwarf::value::as_address() const+0x18c>
	_M_dispose();
   1c9c8:	609c                	c.ld	a5,0(s1)
   1c9ca:	6b9c                	c.ld	a5,16(a5)
   1c9cc:	8526                	c.mv	a0,s1
   1c9ce:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1c9d0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1c9d4:	0001e797          	auipc	a5,0x1e
   1c9d8:	ac47b783          	ld	a5,-1340(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1c9dc:	0007c783          	lbu	a5,0(a5)
   1c9e0:	cf89                	c.beqz	a5,1c9fa <dwarf::value::as_address() const+0x1de>
    _Atomic_word __result = *__mem;
   1c9e2:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1c9e4:	fff5079b          	addiw	a5,a0,-1
   1c9e8:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1c9ea:	4785                	c.li	a5,1
   1c9ec:	fcf511e3          	bne	a0,a5,1c9ae <dwarf::value::as_address() const+0x192>
	    _M_destroy();
   1c9f0:	609c                	c.ld	a5,0(s1)
   1c9f2:	6f9c                	c.ld	a5,24(a5)
   1c9f4:	8526                	c.mv	a0,s1
   1c9f6:	9782                	c.jalr	a5
  return cur.address();
   1c9f8:	bf5d                	c.j	1c9ae <dwarf::value::as_address() const+0x192>
      return __exchange_and_add(__mem, __val);
   1c9fa:	55fd                	c.li	a1,-1
   1c9fc:	03448513          	addi	a0,s1,52
   1ca00:	bf1f90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ca04:	b7dd                	c.j	1c9ea <dwarf::value::as_address() const+0x1ce>
      { return _M_dataplus._M_p; }
   1ca06:	842a                	c.mv	s0,a0
   1ca08:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1ca0a:	08bc                	c.addi4spn	a5,sp,88
   1ca0c:	00f50463          	beq	a0,a5,1ca14 <dwarf::value::as_address() const+0x1f8>
   1ca10:	d91f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ca14:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1ca16:	183c                	c.addi4spn	a5,sp,56
   1ca18:	00f50463          	beq	a0,a5,1ca20 <dwarf::value::as_address() const+0x204>
   1ca1c:	d85f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ca20:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1ca22:	083c                	c.addi4spn	a5,sp,24
   1ca24:	00f50463          	beq	a0,a5,1ca2c <dwarf::value::as_address() const+0x210>
   1ca28:	d79f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as address");
   1ca2c:	8526                	c.mv	a0,s1
   1ca2e:	d23f90ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1ca32:	8522                	c.mv	a0,s0
   1ca34:	f5df90ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1ca38:	842a                	c.mv	s0,a0
   1ca3a:	bfe9                	c.j	1ca14 <dwarf::value::as_address() const+0x1f8>
   1ca3c:	842a                	c.mv	s0,a0
   1ca3e:	b7cd                	c.j	1ca20 <dwarf::value::as_address() const+0x204>
   1ca40:	842a                	c.mv	s0,a0
   1ca42:	b7ed                	c.j	1ca2c <dwarf::value::as_address() const+0x210>
	if (_M_pi != nullptr)
   1ca44:	842a                	c.mv	s0,a0
   1ca46:	7546                	c.ldsp	a0,112(sp)
   1ca48:	c511                	c.beqz	a0,1ca54 <dwarf::value::as_address() const+0x238>
	  _M_pi->_M_release();
   1ca4a:	0001e317          	auipc	t1,0x1e
   1ca4e:	99633303          	ld	t1,-1642(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   1ca52:	9302                	c.jalr	t1
   1ca54:	8522                	c.mv	a0,s0
   1ca56:	f3bf90ef          	jal	ra,16990 <_Unwind_Resume@plt>
  cursor cur(cu->data(), offset);
   1ca5a:	6818                	c.ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1ca5c:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   1ca5e:	f882                	c.sdsp	zero,112(sp)
   1ca60:	00893783          	ld	a5,8(s2)
   1ca64:	97ba                	c.add	a5,a4
   1ca66:	fcbe                	c.sdsp	a5,120(sp)
  return cur.address();
   1ca68:	10a8                	c.addi4spn	a0,sp,104
   1ca6a:	0001e317          	auipc	t1,0x1e
   1ca6e:	92633303          	ld	t1,-1754(t1) # 3a390 <dwarf::cursor::address()@@Base+0x1a800>
   1ca72:	9302                	c.jalr	t1
   1ca74:	bf21                	c.j	1c98c <dwarf::value::as_address() const+0x170>

000000000001ca76 <dwarf::value::as_block(unsigned long*) const>:

const void *value::as_block(size_t *size_out) const {
   1ca76:	7171                	c.addi16sp	sp,-176
   1ca78:	f506                	c.sdsp	ra,168(sp)
   1ca7a:	f122                	c.sdsp	s0,160(sp)
   1ca7c:	ed26                	c.sdsp	s1,152(sp)
   1ca7e:	e94a                	c.sdsp	s2,144(sp)
   1ca80:	e54e                	c.sdsp	s3,136(sp)
   1ca82:	e152                	c.sdsp	s4,128(sp)
   1ca84:	84aa                	c.mv	s1,a0
   1ca86:	842e                	c.mv	s0,a1
  // XXX Blocks can contain all sorts of things, including
  // references, which couldn't be resolved by callers in the
  // current minimal API.
  cursor cur(cu->data(), offset);
   1ca88:	6108                	c.ld	a0,0(a0)
   1ca8a:	8aefb0ef          	jal	ra,17b38 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1ca8e:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1ca92:	00853903          	ld	s2,8(a0)
	if (_M_pi != nullptr)
   1ca96:	34090963          	beq	s2,zero,1cde8 <dwarf::value::as_block(unsigned long*) const+0x372>
    if (__is_single_threaded())
   1ca9a:	0001e797          	auipc	a5,0x1e
   1ca9e:	9fe7b783          	ld	a5,-1538(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1caa2:	0007c783          	lbu	a5,0(a5)
   1caa6:	c7d9                	c.beqz	a5,1cb34 <dwarf::value::as_block(unsigned long*) const+0xbe>
  { *__mem += __val; }
   1caa8:	03092783          	lw	a5,48(s2)
   1caac:	2785                	c.addiw	a5,1
   1caae:	02f92823          	sw	a5,48(s2)
   1cab2:	0104ba03          	ld	s4,16(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1cab6:	f4ce                	c.sdsp	s3,104(sp)
      : _M_pi(__r._M_pi)
   1cab8:	f8ca                	c.sdsp	s2,112(sp)
    if (__is_single_threaded())
   1caba:	0001e797          	auipc	a5,0x1e
   1cabe:	9de7b783          	ld	a5,-1570(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1cac2:	0007c783          	lbu	a5,0(a5)
   1cac6:	cfad                	c.beqz	a5,1cb40 <dwarf::value::as_block(unsigned long*) const+0xca>
  { *__mem += __val; }
   1cac8:	03092783          	lw	a5,48(s2)
   1cacc:	2785                	c.addiw	a5,1
   1cace:	02f92823          	sw	a5,48(s2)
   1cad2:	0089b783          	ld	a5,8(s3)
   1cad6:	97d2                	c.add	a5,s4
   1cad8:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   1cada:	0001e797          	auipc	a5,0x1e
   1cade:	9be7b783          	ld	a5,-1602(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1cae2:	0007c783          	lbu	a5,0(a5)
   1cae6:	c3bd                	c.beqz	a5,1cb4c <dwarf::value::as_block(unsigned long*) const+0xd6>
    _Atomic_word __result = *__mem;
   1cae8:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   1caec:	fff5079b          	addiw	a5,a0,-1
   1caf0:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1caf4:	4785                	c.li	a5,1
   1caf6:	30f51063          	bne	a0,a5,1cdf6 <dwarf::value::as_block(unsigned long*) const+0x380>
	_M_dispose();
   1cafa:	00093783          	ld	a5,0(s2)
   1cafe:	6b9c                	c.ld	a5,16(a5)
   1cb00:	854a                	c.mv	a0,s2
   1cb02:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1cb04:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1cb08:	0001e797          	auipc	a5,0x1e
   1cb0c:	9907b783          	ld	a5,-1648(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1cb10:	0007c783          	lbu	a5,0(a5)
   1cb14:	c3b1                	c.beqz	a5,1cb58 <dwarf::value::as_block(unsigned long*) const+0xe2>
    _Atomic_word __result = *__mem;
   1cb16:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   1cb1a:	fff5079b          	addiw	a5,a0,-1
   1cb1e:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1cb22:	4785                	c.li	a5,1
   1cb24:	2cf51963          	bne	a0,a5,1cdf6 <dwarf::value::as_block(unsigned long*) const+0x380>
	    _M_destroy();
   1cb28:	00093783          	ld	a5,0(s2)
   1cb2c:	6f9c                	c.ld	a5,24(a5)
   1cb2e:	854a                	c.mv	a0,s2
   1cb30:	9782                	c.jalr	a5
   1cb32:	a4d1                	c.j	1cdf6 <dwarf::value::as_block(unsigned long*) const+0x380>
      __atomic_add(__mem, __val);
   1cb34:	4585                	c.li	a1,1
   1cb36:	03090513          	addi	a0,s2,48
   1cb3a:	a77f90ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1cb3e:	bf95                	c.j	1cab2 <dwarf::value::as_block(unsigned long*) const+0x3c>
   1cb40:	4585                	c.li	a1,1
   1cb42:	03090513          	addi	a0,s2,48
   1cb46:	a6bf90ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1cb4a:	b761                	c.j	1cad2 <dwarf::value::as_block(unsigned long*) const+0x5c>
      return __exchange_and_add(__mem, __val);
   1cb4c:	55fd                	c.li	a1,-1
   1cb4e:	03090513          	addi	a0,s2,48
   1cb52:	a9ff90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1cb56:	bf79                	c.j	1caf4 <dwarf::value::as_block(unsigned long*) const+0x7e>
   1cb58:	55fd                	c.li	a1,-1
   1cb5a:	03490513          	addi	a0,s2,52
   1cb5e:	a93f90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1cb62:	b7c1                	c.j	1cb22 <dwarf::value::as_block(unsigned long*) const+0xac>
    while (pos < sec->end) {
   1cb64:	7766                	c.ldsp	a4,120(sp)
      { return _M_ptr; }
   1cb66:	7526                	c.ldsp	a0,104(sp)
   1cb68:	6914                	c.ld	a3,16(a0)
    std::uint64_t result = 0;
   1cb6a:	4781                	c.li	a5,0
    int shift = 0;
   1cb6c:	4581                	c.li	a1,0
    while (pos < sec->end) {
   1cb6e:	02d77563          	bgeu	a4,a3,1cb98 <dwarf::value::as_block(unsigned long*) const+0x122>
      uint8_t byte = *(uint8_t *)(pos++);
   1cb72:	0705                	c.addi	a4,1
   1cb74:	fcba                	c.sdsp	a4,120(sp)
   1cb76:	fff74683          	lbu	a3,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1cb7a:	07f6f613          	andi	a2,a3,127
   1cb7e:	00b61633          	sll	a2,a2,a1
   1cb82:	8fd1                	c.or	a5,a2
      if ((byte & 0x80) == 0)
   1cb84:	0186969b          	slliw	a3,a3,0x18
   1cb88:	4186d69b          	sraiw	a3,a3,0x18
   1cb8c:	2406d063          	bge	a3,zero,1cdcc <dwarf::value::as_block(unsigned long*) const+0x356>
      shift += 7;
   1cb90:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   1cb92:	6914                	c.ld	a3,16(a0)
   1cb94:	fcd76fe3          	bltu	a4,a3,1cb72 <dwarf::value::as_block(unsigned long*) const+0xfc>
    underflow();
   1cb98:	10a8                	c.addi4spn	a0,sp,104
   1cb9a:	b39fe0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    return 0;
   1cb9e:	a0c9                	c.j	1cc60 <dwarf::value::as_block(unsigned long*) const+0x1ea>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1cba0:	77a6                	c.ldsp	a5,104(sp)
   1cba2:	6b98                	c.ld	a4,16(a5)
   1cba4:	77e6                	c.ldsp	a5,120(sp)
   1cba6:	00e7e563          	bltu	a5,a4,1cbb0 <dwarf::value::as_block(unsigned long*) const+0x13a>
      underflow();
   1cbaa:	10a8                	c.addi4spn	a0,sp,104
   1cbac:	b27fe0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1cbb0:	7766                	c.ldsp	a4,120(sp)
    if (sec->ord == byte_order::lsb) {
   1cbb2:	77a6                	c.ldsp	a5,104(sp)
   1cbb4:	4fdc                	c.lw	a5,28(a5)
   1cbb6:	20078763          	beq	a5,zero,1cdc4 <dwarf::value::as_block(unsigned long*) const+0x34e>
        val = (val << 8) | (uint64_t)p[i];
   1cbba:	00074783          	lbu	a5,0(a4)
      for (unsigned i = 0; i < sizeof(T); i++)
   1cbbe:	a429                	c.j	1cdc8 <dwarf::value::as_block(unsigned long*) const+0x352>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1cbc0:	77a6                	c.ldsp	a5,104(sp)
   1cbc2:	6b98                	c.ld	a4,16(a5)
   1cbc4:	77e6                	c.ldsp	a5,120(sp)
   1cbc6:	40f70633          	sub	a2,a4,a5
   1cbca:	4685                	c.li	a3,1
   1cbcc:	00c6f463          	bgeu	a3,a2,1cbd4 <dwarf::value::as_block(unsigned long*) const+0x15e>
   1cbd0:	00e7e563          	bltu	a5,a4,1cbda <dwarf::value::as_block(unsigned long*) const+0x164>
      underflow();
   1cbd4:	10a8                	c.addi4spn	a0,sp,104
   1cbd6:	afdfe0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1cbda:	7766                	c.ldsp	a4,120(sp)
    if (sec->ord == byte_order::lsb) {
   1cbdc:	77a6                	c.ldsp	a5,104(sp)
   1cbde:	4fdc                	c.lw	a5,28(a5)
   1cbe0:	eb91                	c.bnez	a5,1cbf4 <dwarf::value::as_block(unsigned long*) const+0x17e>
        val |= ((uint64_t)p[i]) << (i * 8);
   1cbe2:	00174783          	lbu	a5,1(a4)
   1cbe6:	07a2                	c.slli	a5,0x8
   1cbe8:	00074683          	lbu	a3,0(a4)
   1cbec:	8fd5                	c.or	a5,a3
    pos += sizeof(T);
   1cbee:	0709                	c.addi	a4,2
   1cbf0:	fcba                	c.sdsp	a4,120(sp)
  case DW_FORM::block1:
    *size_out = cur.fixed<uint8_t>();
    break;
  case DW_FORM::block2:
    *size_out = cur.fixed<uint16_t>();
    break;
   1cbf2:	aae9                	c.j	1cdcc <dwarf::value::as_block(unsigned long*) const+0x356>
        val = (val << 8) | (uint64_t)p[i];
   1cbf4:	00074783          	lbu	a5,0(a4)
   1cbf8:	07a2                	c.slli	a5,0x8
   1cbfa:	00174683          	lbu	a3,1(a4)
   1cbfe:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1cc00:	b7fd                	c.j	1cbee <dwarf::value::as_block(unsigned long*) const+0x178>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1cc02:	77a6                	c.ldsp	a5,104(sp)
   1cc04:	6b98                	c.ld	a4,16(a5)
   1cc06:	77e6                	c.ldsp	a5,120(sp)
   1cc08:	40f70633          	sub	a2,a4,a5
   1cc0c:	468d                	c.li	a3,3
   1cc0e:	00c6f463          	bgeu	a3,a2,1cc16 <dwarf::value::as_block(unsigned long*) const+0x1a0>
   1cc12:	00e7e563          	bltu	a5,a4,1cc1c <dwarf::value::as_block(unsigned long*) const+0x1a6>
      underflow();
   1cc16:	10a8                	c.addi4spn	a0,sp,104
   1cc18:	abbfe0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1cc1c:	75e6                	c.ldsp	a1,120(sp)
    if (sec->ord == byte_order::lsb) {
   1cc1e:	77a6                	c.ldsp	a5,104(sp)
   1cc20:	4fdc                	c.lw	a5,28(a5)
   1cc22:	e39d                	c.bnez	a5,1cc48 <dwarf::value::as_block(unsigned long*) const+0x1d2>
   1cc24:	862e                	c.mv	a2,a1
   1cc26:	4701                	c.li	a4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1cc28:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1cc2c:	00064683          	lbu	a3,0(a2)
   1cc30:	00e696b3          	sll	a3,a3,a4
   1cc34:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1cc36:	0605                	c.addi	a2,1
   1cc38:	2721                	c.addiw	a4,8
   1cc3a:	fea719e3          	bne	a4,a0,1cc2c <dwarf::value::as_block(unsigned long*) const+0x1b6>
    pos += sizeof(T);
   1cc3e:	0591                	c.addi	a1,4
   1cc40:	fcae                	c.sdsp	a1,120(sp)
   1cc42:	1782                	c.slli	a5,0x20
   1cc44:	9381                	c.srli	a5,0x20
  case DW_FORM::block4:
    *size_out = cur.fixed<uint32_t>();
    break;
   1cc46:	a259                	c.j	1cdcc <dwarf::value::as_block(unsigned long*) const+0x356>
   1cc48:	872e                	c.mv	a4,a1
   1cc4a:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1cc4e:	4781                	c.li	a5,0
        val = (val << 8) | (uint64_t)p[i];
   1cc50:	07a2                	c.slli	a5,0x8
   1cc52:	00074683          	lbu	a3,0(a4)
   1cc56:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1cc58:	0705                	c.addi	a4,1
   1cc5a:	fec71be3          	bne	a4,a2,1cc50 <dwarf::value::as_block(unsigned long*) const+0x1da>
   1cc5e:	b7c5                	c.j	1cc3e <dwarf::value::as_block(unsigned long*) const+0x1c8>
    return 0;
   1cc60:	4781                	c.li	a5,0
  case DW_FORM::block:
  case DW_FORM::exprloc:
    *size_out = cur.uleb128();
    break;
   1cc62:	a2ad                	c.j	1cdcc <dwarf::value::as_block(unsigned long*) const+0x356>
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as block");
   1cc64:	4541                	c.li	a0,16
   1cc66:	a2bf90ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1cc6a:	892a                	c.mv	s2,a0
   1cc6c:	44cc                	c.lw	a1,12(s1)
   1cc6e:	0028                	c.addi4spn	a0,sp,8
   1cc70:	3280b0ef          	jal	ra,27f98 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1cc74:	00011617          	auipc	a2,0x11
   1cc78:	57460613          	addi	a2,a2,1396 # 2e1e8 <std::piecewise_construct+0x1c8>
   1cc7c:	4581                	c.li	a1,0
   1cc7e:	0028                	c.addi4spn	a0,sp,8
   1cc80:	981f90ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1cc84:	85aa                	c.mv	a1,a0
   1cc86:	1020                	c.addi4spn	s0,sp,40
   1cc88:	8522                	c.mv	a0,s0
   1cc8a:	a47f90ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1cc8e:	00011597          	auipc	a1,0x11
   1cc92:	57a58593          	addi	a1,a1,1402 # 2e208 <std::piecewise_construct+0x1e8>
   1cc96:	8522                	c.mv	a0,s0
   1cc98:	da9f90ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1cc9c:	85aa                	c.mv	a1,a0
   1cc9e:	00a0                	c.addi4spn	s0,sp,72
   1cca0:	8522                	c.mv	a0,s0
   1cca2:	a2ff90ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1cca6:	85a2                	c.mv	a1,s0
   1cca8:	854a                	c.mv	a0,s2
   1ccaa:	de7f90ef          	jal	ra,16a90 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1ccae:	0001d797          	auipc	a5,0x1d
   1ccb2:	7b27b783          	ld	a5,1970(a5) # 3a460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   1ccb6:	07c1                	c.addi	a5,16
   1ccb8:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   1ccbc:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1ccbe:	08bc                	c.addi4spn	a5,sp,88
   1ccc0:	00f50463          	beq	a0,a5,1ccc8 <dwarf::value::as_block(unsigned long*) const+0x252>
   1ccc4:	addf90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ccc8:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1ccca:	183c                	c.addi4spn	a5,sp,56
   1cccc:	00f50463          	beq	a0,a5,1ccd4 <dwarf::value::as_block(unsigned long*) const+0x25e>
   1ccd0:	ad1f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ccd4:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1ccd6:	083c                	c.addi4spn	a5,sp,24
   1ccd8:	00f50463          	beq	a0,a5,1cce0 <dwarf::value::as_block(unsigned long*) const+0x26a>
   1ccdc:	ac5f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1cce0:	0001e617          	auipc	a2,0x1e
   1cce4:	91063603          	ld	a2,-1776(a2) # 3a5f0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1aaa0>
   1cce8:	0001e597          	auipc	a1,0x1e
   1ccec:	8c85b583          	ld	a1,-1848(a1) # 3a5b0 <typeinfo for dwarf::value_type_mismatch@@Base+0xca18>
   1ccf0:	854a                	c.mv	a0,s2
   1ccf2:	c6ff90ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1ccf6:	842a                	c.mv	s0,a0
   1ccf8:	a075                	c.j	1cda4 <dwarf::value::as_block(unsigned long*) const+0x32e>
  }
  cur.ensure(*size_out);
  return cur.pos;
   1ccfa:	74e6                	c.ldsp	s1,120(sp)
   1ccfc:	7446                	c.ldsp	s0,112(sp)
   1ccfe:	cc19                	c.beqz	s0,1cd1c <dwarf::value::as_block(unsigned long*) const+0x2a6>
    if (__is_single_threaded())
   1cd00:	0001d797          	auipc	a5,0x1d
   1cd04:	7987b783          	ld	a5,1944(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1cd08:	0007c783          	lbu	a5,0(a5)
   1cd0c:	c38d                	c.beqz	a5,1cd2e <dwarf::value::as_block(unsigned long*) const+0x2b8>
    _Atomic_word __result = *__mem;
   1cd0e:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1cd10:	fff5079b          	addiw	a5,a0,-1
   1cd14:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1cd16:	4785                	c.li	a5,1
   1cd18:	02f50163          	beq	a0,a5,1cd3a <dwarf::value::as_block(unsigned long*) const+0x2c4>
}
   1cd1c:	8526                	c.mv	a0,s1
   1cd1e:	70aa                	c.ldsp	ra,168(sp)
   1cd20:	740a                	c.ldsp	s0,160(sp)
   1cd22:	64ea                	c.ldsp	s1,152(sp)
   1cd24:	694a                	c.ldsp	s2,144(sp)
   1cd26:	69aa                	c.ldsp	s3,136(sp)
   1cd28:	6a0a                	c.ldsp	s4,128(sp)
   1cd2a:	614d                	c.addi16sp	sp,176
   1cd2c:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   1cd2e:	55fd                	c.li	a1,-1
   1cd30:	03040513          	addi	a0,s0,48
   1cd34:	8bdf90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1cd38:	bff9                	c.j	1cd16 <dwarf::value::as_block(unsigned long*) const+0x2a0>
	_M_dispose();
   1cd3a:	601c                	c.ld	a5,0(s0)
   1cd3c:	6b9c                	c.ld	a5,16(a5)
   1cd3e:	8522                	c.mv	a0,s0
   1cd40:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1cd42:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1cd46:	0001d797          	auipc	a5,0x1d
   1cd4a:	7527b783          	ld	a5,1874(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1cd4e:	0007c783          	lbu	a5,0(a5)
   1cd52:	cf89                	c.beqz	a5,1cd6c <dwarf::value::as_block(unsigned long*) const+0x2f6>
    _Atomic_word __result = *__mem;
   1cd54:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1cd56:	fff5079b          	addiw	a5,a0,-1
   1cd5a:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1cd5c:	4785                	c.li	a5,1
   1cd5e:	faf51fe3          	bne	a0,a5,1cd1c <dwarf::value::as_block(unsigned long*) const+0x2a6>
	    _M_destroy();
   1cd62:	601c                	c.ld	a5,0(s0)
   1cd64:	6f9c                	c.ld	a5,24(a5)
   1cd66:	8522                	c.mv	a0,s0
   1cd68:	9782                	c.jalr	a5
  return cur.pos;
   1cd6a:	bf4d                	c.j	1cd1c <dwarf::value::as_block(unsigned long*) const+0x2a6>
      return __exchange_and_add(__mem, __val);
   1cd6c:	55fd                	c.li	a1,-1
   1cd6e:	03440513          	addi	a0,s0,52
   1cd72:	87ff90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1cd76:	b7dd                	c.j	1cd5c <dwarf::value::as_block(unsigned long*) const+0x2e6>
      { return _M_dataplus._M_p; }
   1cd78:	842a                	c.mv	s0,a0
   1cd7a:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1cd7c:	08bc                	c.addi4spn	a5,sp,88
   1cd7e:	00f50463          	beq	a0,a5,1cd86 <dwarf::value::as_block(unsigned long*) const+0x310>
   1cd82:	a1ff90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1cd86:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1cd88:	183c                	c.addi4spn	a5,sp,56
   1cd8a:	00f50463          	beq	a0,a5,1cd92 <dwarf::value::as_block(unsigned long*) const+0x31c>
   1cd8e:	a13f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1cd92:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1cd94:	083c                	c.addi4spn	a5,sp,24
   1cd96:	00f50463          	beq	a0,a5,1cd9e <dwarf::value::as_block(unsigned long*) const+0x328>
   1cd9a:	a07f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as block");
   1cd9e:	854a                	c.mv	a0,s2
   1cda0:	9b1f90ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1cda4:	7546                	c.ldsp	a0,112(sp)
   1cda6:	c511                	c.beqz	a0,1cdb2 <dwarf::value::as_block(unsigned long*) const+0x33c>
	  _M_pi->_M_release();
   1cda8:	0001d317          	auipc	t1,0x1d
   1cdac:	63833303          	ld	t1,1592(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   1cdb0:	9302                	c.jalr	t1
   1cdb2:	8522                	c.mv	a0,s0
   1cdb4:	bddf90ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1cdb8:	842a                	c.mv	s0,a0
   1cdba:	b7f1                	c.j	1cd86 <dwarf::value::as_block(unsigned long*) const+0x310>
   1cdbc:	842a                	c.mv	s0,a0
   1cdbe:	bfd1                	c.j	1cd92 <dwarf::value::as_block(unsigned long*) const+0x31c>
   1cdc0:	842a                	c.mv	s0,a0
   1cdc2:	bff1                	c.j	1cd9e <dwarf::value::as_block(unsigned long*) const+0x328>
        val |= ((uint64_t)p[i]) << (i * 8);
   1cdc4:	00074783          	lbu	a5,0(a4)
    pos += sizeof(T);
   1cdc8:	0705                	c.addi	a4,1
   1cdca:	fcba                	c.sdsp	a4,120(sp)
    *size_out = cur.fixed<uint8_t>();
   1cdcc:	e01c                	c.sd	a5,0(s0)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1cdce:	7726                	c.ldsp	a4,104(sp)
   1cdd0:	6b14                	c.ld	a3,16(a4)
   1cdd2:	7766                	c.ldsp	a4,120(sp)
   1cdd4:	40e68633          	sub	a2,a3,a4
   1cdd8:	00f66463          	bltu	a2,a5,1cde0 <dwarf::value::as_block(unsigned long*) const+0x36a>
   1cddc:	f0d76fe3          	bltu	a4,a3,1ccfa <dwarf::value::as_block(unsigned long*) const+0x284>
      underflow();
   1cde0:	10a8                	c.addi4spn	a0,sp,104
   1cde2:	8f1fe0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
   1cde6:	bf11                	c.j	1ccfa <dwarf::value::as_block(unsigned long*) const+0x284>
  cursor cur(cu->data(), offset);
   1cde8:	6898                	c.ld	a4,16(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1cdea:	f4ce                	c.sdsp	s3,104(sp)
      : _M_pi(__r._M_pi)
   1cdec:	f882                	c.sdsp	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1cdee:	0089b783          	ld	a5,8(s3)
   1cdf2:	97ba                	c.add	a5,a4
   1cdf4:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
   1cdf6:	449c                	c.lw	a5,8(s1)
   1cdf8:	37f5                	c.addiw	a5,-3
   1cdfa:	0007869b          	addiw	a3,a5,0
   1cdfe:	4755                	c.li	a4,21
   1ce00:	e6d762e3          	bltu	a4,a3,1cc64 <dwarf::value::as_block(unsigned long*) const+0x1ee>
   1ce04:	02079713          	slli	a4,a5,0x20
   1ce08:	01e75793          	srli	a5,a4,0x1e
   1ce0c:	00011717          	auipc	a4,0x11
   1ce10:	56c70713          	addi	a4,a4,1388 # 2e378 <std::piecewise_construct+0x358>
   1ce14:	97ba                	c.add	a5,a4
   1ce16:	439c                	c.lw	a5,0(a5)
   1ce18:	97ba                	c.add	a5,a4
   1ce1a:	8782                	c.jr	a5

000000000001ce1c <dwarf::value::as_uconstant() const>:

uint64_t value::as_uconstant() const {
   1ce1c:	7171                	c.addi16sp	sp,-176
   1ce1e:	f506                	c.sdsp	ra,168(sp)
   1ce20:	f122                	c.sdsp	s0,160(sp)
   1ce22:	ed26                	c.sdsp	s1,152(sp)
   1ce24:	e94a                	c.sdsp	s2,144(sp)
   1ce26:	e54e                	c.sdsp	s3,136(sp)
   1ce28:	842a                	c.mv	s0,a0
  cursor cur(cu->data(), offset);
   1ce2a:	6108                	c.ld	a0,0(a0)
   1ce2c:	d0dfa0ef          	jal	ra,17b38 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1ce30:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1ce34:	6504                	c.ld	s1,8(a0)
	if (_M_pi != nullptr)
   1ce36:	36048b63          	beq	s1,zero,1d1ac <dwarf::value::as_uconstant() const+0x390>
    if (__is_single_threaded())
   1ce3a:	0001d797          	auipc	a5,0x1d
   1ce3e:	65e7b783          	ld	a5,1630(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1ce42:	0007c783          	lbu	a5,0(a5)
   1ce46:	cfad                	c.beqz	a5,1cec0 <dwarf::value::as_uconstant() const+0xa4>
  { *__mem += __val; }
   1ce48:	589c                	c.lw	a5,48(s1)
   1ce4a:	2785                	c.addiw	a5,1
   1ce4c:	d89c                	c.sw	a5,48(s1)
   1ce4e:	01043983          	ld	s3,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1ce52:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   1ce54:	f8a6                	c.sdsp	s1,112(sp)
    if (__is_single_threaded())
   1ce56:	0001d797          	auipc	a5,0x1d
   1ce5a:	6427b783          	ld	a5,1602(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1ce5e:	0007c783          	lbu	a5,0(a5)
   1ce62:	c7ad                	c.beqz	a5,1cecc <dwarf::value::as_uconstant() const+0xb0>
  { *__mem += __val; }
   1ce64:	589c                	c.lw	a5,48(s1)
   1ce66:	2785                	c.addiw	a5,1
   1ce68:	d89c                	c.sw	a5,48(s1)
   1ce6a:	00893783          	ld	a5,8(s2)
   1ce6e:	97ce                	c.add	a5,s3
   1ce70:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   1ce72:	0001d797          	auipc	a5,0x1d
   1ce76:	6267b783          	ld	a5,1574(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1ce7a:	0007c783          	lbu	a5,0(a5)
   1ce7e:	cfa9                	c.beqz	a5,1ced8 <dwarf::value::as_uconstant() const+0xbc>
    _Atomic_word __result = *__mem;
   1ce80:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1ce82:	fff5079b          	addiw	a5,a0,-1
   1ce86:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1ce88:	4785                	c.li	a5,1
   1ce8a:	32f51863          	bne	a0,a5,1d1ba <dwarf::value::as_uconstant() const+0x39e>
	_M_dispose();
   1ce8e:	609c                	c.ld	a5,0(s1)
   1ce90:	6b9c                	c.ld	a5,16(a5)
   1ce92:	8526                	c.mv	a0,s1
   1ce94:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1ce96:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1ce9a:	0001d797          	auipc	a5,0x1d
   1ce9e:	5fe7b783          	ld	a5,1534(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1cea2:	0007c783          	lbu	a5,0(a5)
   1cea6:	cf9d                	c.beqz	a5,1cee4 <dwarf::value::as_uconstant() const+0xc8>
    _Atomic_word __result = *__mem;
   1cea8:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1ceaa:	fff5079b          	addiw	a5,a0,-1
   1ceae:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1ceb0:	4785                	c.li	a5,1
   1ceb2:	30f51463          	bne	a0,a5,1d1ba <dwarf::value::as_uconstant() const+0x39e>
	    _M_destroy();
   1ceb6:	609c                	c.ld	a5,0(s1)
   1ceb8:	6f9c                	c.ld	a5,24(a5)
   1ceba:	8526                	c.mv	a0,s1
   1cebc:	9782                	c.jalr	a5
   1cebe:	acf5                	c.j	1d1ba <dwarf::value::as_uconstant() const+0x39e>
      __atomic_add(__mem, __val);
   1cec0:	4585                	c.li	a1,1
   1cec2:	03048513          	addi	a0,s1,48
   1cec6:	eeaf90ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1ceca:	b751                	c.j	1ce4e <dwarf::value::as_uconstant() const+0x32>
   1cecc:	4585                	c.li	a1,1
   1cece:	03048513          	addi	a0,s1,48
   1ced2:	edef90ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1ced6:	bf51                	c.j	1ce6a <dwarf::value::as_uconstant() const+0x4e>
      return __exchange_and_add(__mem, __val);
   1ced8:	55fd                	c.li	a1,-1
   1ceda:	03048513          	addi	a0,s1,48
   1cede:	f12f90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1cee2:	b75d                	c.j	1ce88 <dwarf::value::as_uconstant() const+0x6c>
   1cee4:	55fd                	c.li	a1,-1
   1cee6:	03448513          	addi	a0,s1,52
   1ceea:	f06f90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ceee:	b7c9                	c.j	1ceb0 <dwarf::value::as_uconstant() const+0x94>
    while (pos < sec->end) {
   1cef0:	77e6                	c.ldsp	a5,120(sp)
      { return _M_ptr; }
   1cef2:	75a6                	c.ldsp	a1,104(sp)
   1cef4:	6998                	c.ld	a4,16(a1)
    std::uint64_t result = 0;
   1cef6:	4401                	c.li	s0,0
    int shift = 0;
   1cef8:	4601                	c.li	a2,0
    while (pos < sec->end) {
   1cefa:	02e7f563          	bgeu	a5,a4,1cf24 <dwarf::value::as_uconstant() const+0x108>
      uint8_t byte = *(uint8_t *)(pos++);
   1cefe:	0785                	c.addi	a5,1
   1cf00:	fcbe                	c.sdsp	a5,120(sp)
   1cf02:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1cf06:	07f77693          	andi	a3,a4,127
   1cf0a:	00c696b3          	sll	a3,a3,a2
   1cf0e:	8c55                	c.or	s0,a3
      if ((byte & 0x80) == 0)
   1cf10:	0187171b          	slliw	a4,a4,0x18
   1cf14:	4187571b          	sraiw	a4,a4,0x18
   1cf18:	26075263          	bge	a4,zero,1d17c <dwarf::value::as_uconstant() const+0x360>
      shift += 7;
   1cf1c:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   1cf1e:	6998                	c.ld	a4,16(a1)
   1cf20:	fce7efe3          	bltu	a5,a4,1cefe <dwarf::value::as_uconstant() const+0xe2>
    underflow();
   1cf24:	10a8                	c.addi4spn	a0,sp,104
   1cf26:	facfe0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
   1cf2a:	aa45                	c.j	1d0da <dwarf::value::as_uconstant() const+0x2be>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1cf2c:	77a6                	c.ldsp	a5,104(sp)
   1cf2e:	6b98                	c.ld	a4,16(a5)
   1cf30:	77e6                	c.ldsp	a5,120(sp)
   1cf32:	00e7e563          	bltu	a5,a4,1cf3c <dwarf::value::as_uconstant() const+0x120>
      underflow();
   1cf36:	10a8                	c.addi4spn	a0,sp,104
   1cf38:	f9afe0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1cf3c:	77e6                	c.ldsp	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1cf3e:	7726                	c.ldsp	a4,104(sp)
   1cf40:	4f58                	c.lw	a4,28(a4)
   1cf42:	22070963          	beq	a4,zero,1d174 <dwarf::value::as_uconstant() const+0x358>
        val = (val << 8) | (uint64_t)p[i];
   1cf46:	0007c403          	lbu	s0,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1cf4a:	a43d                	c.j	1d178 <dwarf::value::as_uconstant() const+0x35c>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1cf4c:	77a6                	c.ldsp	a5,104(sp)
   1cf4e:	6b98                	c.ld	a4,16(a5)
   1cf50:	77e6                	c.ldsp	a5,120(sp)
   1cf52:	40f70633          	sub	a2,a4,a5
   1cf56:	4685                	c.li	a3,1
   1cf58:	00c6f463          	bgeu	a3,a2,1cf60 <dwarf::value::as_uconstant() const+0x144>
   1cf5c:	00e7e563          	bltu	a5,a4,1cf66 <dwarf::value::as_uconstant() const+0x14a>
      underflow();
   1cf60:	10a8                	c.addi4spn	a0,sp,104
   1cf62:	f70fe0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1cf66:	77e6                	c.ldsp	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1cf68:	7726                	c.ldsp	a4,104(sp)
   1cf6a:	4f58                	c.lw	a4,28(a4)
   1cf6c:	eb11                	c.bnez	a4,1cf80 <dwarf::value::as_uconstant() const+0x164>
        val |= ((uint64_t)p[i]) << (i * 8);
   1cf6e:	0017c403          	lbu	s0,1(a5)
   1cf72:	0422                	c.slli	s0,0x8
   1cf74:	0007c703          	lbu	a4,0(a5)
   1cf78:	8c59                	c.or	s0,a4
    pos += sizeof(T);
   1cf7a:	0789                	c.addi	a5,2
   1cf7c:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
  case DW_FORM::data1:
    return cur.fixed<uint8_t>();
  case DW_FORM::data2:
    return cur.fixed<uint16_t>();
   1cf7e:	aafd                	c.j	1d17c <dwarf::value::as_uconstant() const+0x360>
        val = (val << 8) | (uint64_t)p[i];
   1cf80:	0007c403          	lbu	s0,0(a5)
   1cf84:	0422                	c.slli	s0,0x8
   1cf86:	0017c703          	lbu	a4,1(a5)
   1cf8a:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1cf8c:	b7fd                	c.j	1cf7a <dwarf::value::as_uconstant() const+0x15e>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1cf8e:	77a6                	c.ldsp	a5,104(sp)
   1cf90:	6b98                	c.ld	a4,16(a5)
   1cf92:	77e6                	c.ldsp	a5,120(sp)
   1cf94:	40f70633          	sub	a2,a4,a5
   1cf98:	468d                	c.li	a3,3
   1cf9a:	00c6f463          	bgeu	a3,a2,1cfa2 <dwarf::value::as_uconstant() const+0x186>
   1cf9e:	00e7e563          	bltu	a5,a4,1cfa8 <dwarf::value::as_uconstant() const+0x18c>
      underflow();
   1cfa2:	10a8                	c.addi4spn	a0,sp,104
   1cfa4:	f2efe0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1cfa8:	7666                	c.ldsp	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1cfaa:	77a6                	c.ldsp	a5,104(sp)
   1cfac:	4fdc                	c.lw	a5,28(a5)
   1cfae:	e39d                	c.bnez	a5,1cfd4 <dwarf::value::as_uconstant() const+0x1b8>
   1cfb0:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1cfb2:	4401                	c.li	s0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1cfb4:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1cfb8:	0006c703          	lbu	a4,0(a3)
   1cfbc:	00f71733          	sll	a4,a4,a5
   1cfc0:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1cfc2:	0685                	c.addi	a3,1
   1cfc4:	27a1                	c.addiw	a5,8
   1cfc6:	feb799e3          	bne	a5,a1,1cfb8 <dwarf::value::as_uconstant() const+0x19c>
    pos += sizeof(T);
   1cfca:	0611                	c.addi	a2,4
   1cfcc:	fcb2                	c.sdsp	a2,120(sp)
   1cfce:	1402                	c.slli	s0,0x20
   1cfd0:	9001                	c.srli	s0,0x20
  case DW_FORM::data4:
    return cur.fixed<uint32_t>();
   1cfd2:	a26d                	c.j	1d17c <dwarf::value::as_uconstant() const+0x360>
   1cfd4:	87b2                	c.mv	a5,a2
   1cfd6:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   1cfda:	4401                	c.li	s0,0
        val = (val << 8) | (uint64_t)p[i];
   1cfdc:	0422                	c.slli	s0,0x8
   1cfde:	0007c703          	lbu	a4,0(a5)
   1cfe2:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1cfe4:	0785                	c.addi	a5,1
   1cfe6:	fef69be3          	bne	a3,a5,1cfdc <dwarf::value::as_uconstant() const+0x1c0>
   1cfea:	b7c5                	c.j	1cfca <dwarf::value::as_uconstant() const+0x1ae>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1cfec:	77a6                	c.ldsp	a5,104(sp)
   1cfee:	6b98                	c.ld	a4,16(a5)
   1cff0:	77e6                	c.ldsp	a5,120(sp)
   1cff2:	40f70633          	sub	a2,a4,a5
   1cff6:	469d                	c.li	a3,7
   1cff8:	00c6f463          	bgeu	a3,a2,1d000 <dwarf::value::as_uconstant() const+0x1e4>
   1cffc:	00e7e563          	bltu	a5,a4,1d006 <dwarf::value::as_uconstant() const+0x1ea>
      underflow();
   1d000:	10a8                	c.addi4spn	a0,sp,104
   1d002:	ed0fe0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1d006:	7666                	c.ldsp	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1d008:	77a6                	c.ldsp	a5,104(sp)
   1d00a:	4fdc                	c.lw	a5,28(a5)
   1d00c:	e38d                	c.bnez	a5,1d02e <dwarf::value::as_uconstant() const+0x212>
   1d00e:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1d010:	4401                	c.li	s0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1d012:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1d016:	0006c703          	lbu	a4,0(a3)
   1d01a:	00f71733          	sll	a4,a4,a5
   1d01e:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1d020:	0685                	c.addi	a3,1
   1d022:	27a1                	c.addiw	a5,8
   1d024:	feb799e3          	bne	a5,a1,1d016 <dwarf::value::as_uconstant() const+0x1fa>
    pos += sizeof(T);
   1d028:	0621                	c.addi	a2,8
   1d02a:	fcb2                	c.sdsp	a2,120(sp)
   1d02c:	aa81                	c.j	1d17c <dwarf::value::as_uconstant() const+0x360>
   1d02e:	87b2                	c.mv	a5,a2
   1d030:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1d034:	4401                	c.li	s0,0
        val = (val << 8) | (uint64_t)p[i];
   1d036:	0422                	c.slli	s0,0x8
   1d038:	0007c703          	lbu	a4,0(a5)
   1d03c:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1d03e:	0785                	c.addi	a5,1
   1d040:	fed79be3          	bne	a5,a3,1d036 <dwarf::value::as_uconstant() const+0x21a>
   1d044:	b7d5                	c.j	1d028 <dwarf::value::as_uconstant() const+0x20c>
    return cur.fixed<uint64_t>();
  case DW_FORM::udata:
    return cur.uleb128();
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) +
                              " as uconstant");
   1d046:	4541                	c.li	a0,16
   1d048:	e48f90ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1d04c:	84aa                	c.mv	s1,a0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   1d04e:	444c                	c.lw	a1,12(s0)
   1d050:	0028                	c.addi4spn	a0,sp,8
   1d052:	7470a0ef          	jal	ra,27f98 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1d056:	00011617          	auipc	a2,0x11
   1d05a:	19260613          	addi	a2,a2,402 # 2e1e8 <std::piecewise_construct+0x1c8>
   1d05e:	4581                	c.li	a1,0
   1d060:	0028                	c.addi4spn	a0,sp,8
   1d062:	d9ef90ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1d066:	85aa                	c.mv	a1,a0
   1d068:	1020                	c.addi4spn	s0,sp,40
   1d06a:	8522                	c.mv	a0,s0
   1d06c:	e64f90ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1d070:	00011597          	auipc	a1,0x11
   1d074:	1a858593          	addi	a1,a1,424 # 2e218 <std::piecewise_construct+0x1f8>
   1d078:	8522                	c.mv	a0,s0
   1d07a:	9c7f90ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1d07e:	85aa                	c.mv	a1,a0
   1d080:	00a0                	c.addi4spn	s0,sp,72
   1d082:	8522                	c.mv	a0,s0
   1d084:	e4cf90ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1d088:	85a2                	c.mv	a1,s0
   1d08a:	8526                	c.mv	a0,s1
   1d08c:	a05f90ef          	jal	ra,16a90 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1d090:	0001d797          	auipc	a5,0x1d
   1d094:	3d07b783          	ld	a5,976(a5) # 3a460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   1d098:	07c1                	c.addi	a5,16
   1d09a:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1d09c:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1d09e:	08bc                	c.addi4spn	a5,sp,88
   1d0a0:	00f50463          	beq	a0,a5,1d0a8 <dwarf::value::as_uconstant() const+0x28c>
   1d0a4:	efcf90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d0a8:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1d0aa:	183c                	c.addi4spn	a5,sp,56
   1d0ac:	00f50463          	beq	a0,a5,1d0b4 <dwarf::value::as_uconstant() const+0x298>
   1d0b0:	ef0f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d0b4:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1d0b6:	083c                	c.addi4spn	a5,sp,24
   1d0b8:	00f50463          	beq	a0,a5,1d0c0 <dwarf::value::as_uconstant() const+0x2a4>
   1d0bc:	ee4f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
                              " as uconstant");
   1d0c0:	0001d617          	auipc	a2,0x1d
   1d0c4:	53063603          	ld	a2,1328(a2) # 3a5f0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1aaa0>
   1d0c8:	0001d597          	auipc	a1,0x1d
   1d0cc:	4e85b583          	ld	a1,1256(a1) # 3a5b0 <typeinfo for dwarf::value_type_mismatch@@Base+0xca18>
   1d0d0:	8526                	c.mv	a0,s1
   1d0d2:	88ff90ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1d0d6:	842a                	c.mv	s0,a0
   1d0d8:	a8b5                	c.j	1d154 <dwarf::value::as_uconstant() const+0x338>
    return 0;
   1d0da:	4401                	c.li	s0,0
   1d0dc:	a045                	c.j	1d17c <dwarf::value::as_uconstant() const+0x360>
   1d0de:	55fd                	c.li	a1,-1
   1d0e0:	03048513          	addi	a0,s1,48
   1d0e4:	d0cf90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d0e8:	a07d                	c.j	1d196 <dwarf::value::as_uconstant() const+0x37a>
	_M_dispose();
   1d0ea:	609c                	c.ld	a5,0(s1)
   1d0ec:	6b9c                	c.ld	a5,16(a5)
   1d0ee:	8526                	c.mv	a0,s1
   1d0f0:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d0f2:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d0f6:	0001d797          	auipc	a5,0x1d
   1d0fa:	3a27b783          	ld	a5,930(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1d0fe:	0007c783          	lbu	a5,0(a5)
   1d102:	cf89                	c.beqz	a5,1d11c <dwarf::value::as_uconstant() const+0x300>
    _Atomic_word __result = *__mem;
   1d104:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1d106:	fff5079b          	addiw	a5,a0,-1
   1d10a:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d10c:	4785                	c.li	a5,1
   1d10e:	08f51763          	bne	a0,a5,1d19c <dwarf::value::as_uconstant() const+0x380>
	    _M_destroy();
   1d112:	609c                	c.ld	a5,0(s1)
   1d114:	6f9c                	c.ld	a5,24(a5)
   1d116:	8526                	c.mv	a0,s1
   1d118:	9782                	c.jalr	a5
   1d11a:	a049                	c.j	1d19c <dwarf::value::as_uconstant() const+0x380>
      return __exchange_and_add(__mem, __val);
   1d11c:	55fd                	c.li	a1,-1
   1d11e:	03448513          	addi	a0,s1,52
   1d122:	ccef90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d126:	b7dd                	c.j	1d10c <dwarf::value::as_uconstant() const+0x2f0>
      { return _M_dataplus._M_p; }
   1d128:	842a                	c.mv	s0,a0
   1d12a:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1d12c:	08bc                	c.addi4spn	a5,sp,88
   1d12e:	00f50463          	beq	a0,a5,1d136 <dwarf::value::as_uconstant() const+0x31a>
   1d132:	e6ef90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d136:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1d138:	183c                	c.addi4spn	a5,sp,56
   1d13a:	00f50463          	beq	a0,a5,1d142 <dwarf::value::as_uconstant() const+0x326>
   1d13e:	e62f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d142:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1d144:	083c                	c.addi4spn	a5,sp,24
   1d146:	00f50463          	beq	a0,a5,1d14e <dwarf::value::as_uconstant() const+0x332>
   1d14a:	e56f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1d14e:	8526                	c.mv	a0,s1
   1d150:	e00f90ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1d154:	7546                	c.ldsp	a0,112(sp)
   1d156:	c511                	c.beqz	a0,1d162 <dwarf::value::as_uconstant() const+0x346>
	  _M_pi->_M_release();
   1d158:	0001d317          	auipc	t1,0x1d
   1d15c:	28833303          	ld	t1,648(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   1d160:	9302                	c.jalr	t1
   1d162:	8522                	c.mv	a0,s0
   1d164:	82df90ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1d168:	842a                	c.mv	s0,a0
   1d16a:	b7f1                	c.j	1d136 <dwarf::value::as_uconstant() const+0x31a>
   1d16c:	842a                	c.mv	s0,a0
   1d16e:	bfd1                	c.j	1d142 <dwarf::value::as_uconstant() const+0x326>
   1d170:	842a                	c.mv	s0,a0
   1d172:	bff1                	c.j	1d14e <dwarf::value::as_uconstant() const+0x332>
        val |= ((uint64_t)p[i]) << (i * 8);
   1d174:	0007c403          	lbu	s0,0(a5)
    pos += sizeof(T);
   1d178:	0785                	c.addi	a5,1
   1d17a:	fcbe                	c.sdsp	a5,120(sp)
	if (_M_pi != nullptr)
   1d17c:	74c6                	c.ldsp	s1,112(sp)
   1d17e:	cc99                	c.beqz	s1,1d19c <dwarf::value::as_uconstant() const+0x380>
    if (__is_single_threaded())
   1d180:	0001d797          	auipc	a5,0x1d
   1d184:	3187b783          	ld	a5,792(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1d188:	0007c783          	lbu	a5,0(a5)
   1d18c:	dba9                	c.beqz	a5,1d0de <dwarf::value::as_uconstant() const+0x2c2>
    _Atomic_word __result = *__mem;
   1d18e:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1d190:	fff5079b          	addiw	a5,a0,-1
   1d194:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d196:	4785                	c.li	a5,1
   1d198:	f4f509e3          	beq	a0,a5,1d0ea <dwarf::value::as_uconstant() const+0x2ce>
  }
}
   1d19c:	8522                	c.mv	a0,s0
   1d19e:	70aa                	c.ldsp	ra,168(sp)
   1d1a0:	740a                	c.ldsp	s0,160(sp)
   1d1a2:	64ea                	c.ldsp	s1,152(sp)
   1d1a4:	694a                	c.ldsp	s2,144(sp)
   1d1a6:	69aa                	c.ldsp	s3,136(sp)
   1d1a8:	614d                	c.addi16sp	sp,176
   1d1aa:	8082                	c.jr	ra
  cursor cur(cu->data(), offset);
   1d1ac:	6818                	c.ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d1ae:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   1d1b0:	f882                	c.sdsp	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1d1b2:	00893783          	ld	a5,8(s2)
   1d1b6:	97ba                	c.add	a5,a4
   1d1b8:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
   1d1ba:	441c                	c.lw	a5,8(s0)
   1d1bc:	37ed                	c.addiw	a5,-5
   1d1be:	0007869b          	addiw	a3,a5,0
   1d1c2:	4729                	c.li	a4,10
   1d1c4:	e8d761e3          	bltu	a4,a3,1d046 <dwarf::value::as_uconstant() const+0x22a>
   1d1c8:	02079713          	slli	a4,a5,0x20
   1d1cc:	01e75793          	srli	a5,a4,0x1e
   1d1d0:	00011717          	auipc	a4,0x11
   1d1d4:	20070713          	addi	a4,a4,512 # 2e3d0 <std::piecewise_construct+0x3b0>
   1d1d8:	97ba                	c.add	a5,a4
   1d1da:	439c                	c.lw	a5,0(a5)
   1d1dc:	97ba                	c.add	a5,a4
   1d1de:	8782                	c.jr	a5

000000000001d1e0 <dwarf::value::as_sconstant() const>:

int64_t value::as_sconstant() const {
   1d1e0:	7171                	c.addi16sp	sp,-176
   1d1e2:	f506                	c.sdsp	ra,168(sp)
   1d1e4:	f122                	c.sdsp	s0,160(sp)
   1d1e6:	ed26                	c.sdsp	s1,152(sp)
   1d1e8:	e94a                	c.sdsp	s2,144(sp)
   1d1ea:	e54e                	c.sdsp	s3,136(sp)
   1d1ec:	842a                	c.mv	s0,a0
  cursor cur(cu->data(), offset);
   1d1ee:	6108                	c.ld	a0,0(a0)
   1d1f0:	949fa0ef          	jal	ra,17b38 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d1f4:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1d1f8:	6504                	c.ld	s1,8(a0)
	if (_M_pi != nullptr)
   1d1fa:	34048963          	beq	s1,zero,1d54c <dwarf::value::as_sconstant() const+0x36c>
    if (__is_single_threaded())
   1d1fe:	0001d797          	auipc	a5,0x1d
   1d202:	29a7b783          	ld	a5,666(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1d206:	0007c783          	lbu	a5,0(a5)
   1d20a:	cfad                	c.beqz	a5,1d284 <dwarf::value::as_sconstant() const+0xa4>
  { *__mem += __val; }
   1d20c:	589c                	c.lw	a5,48(s1)
   1d20e:	2785                	c.addiw	a5,1
   1d210:	d89c                	c.sw	a5,48(s1)
   1d212:	01043983          	ld	s3,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d216:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   1d218:	f8a6                	c.sdsp	s1,112(sp)
    if (__is_single_threaded())
   1d21a:	0001d797          	auipc	a5,0x1d
   1d21e:	27e7b783          	ld	a5,638(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1d222:	0007c783          	lbu	a5,0(a5)
   1d226:	c7ad                	c.beqz	a5,1d290 <dwarf::value::as_sconstant() const+0xb0>
  { *__mem += __val; }
   1d228:	589c                	c.lw	a5,48(s1)
   1d22a:	2785                	c.addiw	a5,1
   1d22c:	d89c                	c.sw	a5,48(s1)
   1d22e:	00893783          	ld	a5,8(s2)
   1d232:	97ce                	c.add	a5,s3
   1d234:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   1d236:	0001d797          	auipc	a5,0x1d
   1d23a:	2627b783          	ld	a5,610(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1d23e:	0007c783          	lbu	a5,0(a5)
   1d242:	cfa9                	c.beqz	a5,1d29c <dwarf::value::as_sconstant() const+0xbc>
    _Atomic_word __result = *__mem;
   1d244:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1d246:	fff5079b          	addiw	a5,a0,-1
   1d24a:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d24c:	4785                	c.li	a5,1
   1d24e:	30f51663          	bne	a0,a5,1d55a <dwarf::value::as_sconstant() const+0x37a>
	_M_dispose();
   1d252:	609c                	c.ld	a5,0(s1)
   1d254:	6b9c                	c.ld	a5,16(a5)
   1d256:	8526                	c.mv	a0,s1
   1d258:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d25a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d25e:	0001d797          	auipc	a5,0x1d
   1d262:	23a7b783          	ld	a5,570(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1d266:	0007c783          	lbu	a5,0(a5)
   1d26a:	cf9d                	c.beqz	a5,1d2a8 <dwarf::value::as_sconstant() const+0xc8>
    _Atomic_word __result = *__mem;
   1d26c:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1d26e:	fff5079b          	addiw	a5,a0,-1
   1d272:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d274:	4785                	c.li	a5,1
   1d276:	2ef51263          	bne	a0,a5,1d55a <dwarf::value::as_sconstant() const+0x37a>
	    _M_destroy();
   1d27a:	609c                	c.ld	a5,0(s1)
   1d27c:	6f9c                	c.ld	a5,24(a5)
   1d27e:	8526                	c.mv	a0,s1
   1d280:	9782                	c.jalr	a5
   1d282:	ace1                	c.j	1d55a <dwarf::value::as_sconstant() const+0x37a>
      __atomic_add(__mem, __val);
   1d284:	4585                	c.li	a1,1
   1d286:	03048513          	addi	a0,s1,48
   1d28a:	b26f90ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d28e:	b751                	c.j	1d212 <dwarf::value::as_sconstant() const+0x32>
   1d290:	4585                	c.li	a1,1
   1d292:	03048513          	addi	a0,s1,48
   1d296:	b1af90ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d29a:	bf51                	c.j	1d22e <dwarf::value::as_sconstant() const+0x4e>
      return __exchange_and_add(__mem, __val);
   1d29c:	55fd                	c.li	a1,-1
   1d29e:	03048513          	addi	a0,s1,48
   1d2a2:	b4ef90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d2a6:	b75d                	c.j	1d24c <dwarf::value::as_sconstant() const+0x6c>
   1d2a8:	55fd                	c.li	a1,-1
   1d2aa:	03448513          	addi	a0,s1,52
   1d2ae:	b42f90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d2b2:	b7c9                	c.j	1d274 <dwarf::value::as_sconstant() const+0x94>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1d2b4:	77a6                	c.ldsp	a5,104(sp)
   1d2b6:	6b98                	c.ld	a4,16(a5)
   1d2b8:	77e6                	c.ldsp	a5,120(sp)
   1d2ba:	00e7e563          	bltu	a5,a4,1d2c4 <dwarf::value::as_sconstant() const+0xe4>
      underflow();
   1d2be:	10a8                	c.addi4spn	a0,sp,104
   1d2c0:	c12fe0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1d2c4:	77e6                	c.ldsp	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1d2c6:	7726                	c.ldsp	a4,104(sp)
   1d2c8:	4f58                	c.lw	a4,28(a4)
   1d2ca:	24070163          	beq	a4,zero,1d50c <dwarf::value::as_sconstant() const+0x32c>
        val = (val << 8) | (uint64_t)p[i];
   1d2ce:	0007c503          	lbu	a0,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1d2d2:	ac3d                	c.j	1d510 <dwarf::value::as_sconstant() const+0x330>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1d2d4:	77a6                	c.ldsp	a5,104(sp)
   1d2d6:	6b98                	c.ld	a4,16(a5)
   1d2d8:	77e6                	c.ldsp	a5,120(sp)
   1d2da:	40f70633          	sub	a2,a4,a5
   1d2de:	4685                	c.li	a3,1
   1d2e0:	00c6f463          	bgeu	a3,a2,1d2e8 <dwarf::value::as_sconstant() const+0x108>
   1d2e4:	00e7e563          	bltu	a5,a4,1d2ee <dwarf::value::as_sconstant() const+0x10e>
      underflow();
   1d2e8:	10a8                	c.addi4spn	a0,sp,104
   1d2ea:	be8fe0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1d2ee:	77e6                	c.ldsp	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1d2f0:	7726                	c.ldsp	a4,104(sp)
   1d2f2:	4f58                	c.lw	a4,28(a4)
   1d2f4:	ef11                	c.bnez	a4,1d310 <dwarf::value::as_sconstant() const+0x130>
        val |= ((uint64_t)p[i]) << (i * 8);
   1d2f6:	0017c503          	lbu	a0,1(a5)
   1d2fa:	0522                	c.slli	a0,0x8
   1d2fc:	0007c703          	lbu	a4,0(a5)
   1d300:	8d59                	c.or	a0,a4
    pos += sizeof(T);
   1d302:	0789                	c.addi	a5,2
   1d304:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
  case DW_FORM::data1:
    return cur.fixed<int8_t>();
  case DW_FORM::data2:
    return cur.fixed<int16_t>();
   1d306:	0105141b          	slliw	s0,a0,0x10
   1d30a:	4104541b          	sraiw	s0,s0,0x10
   1d30e:	a439                	c.j	1d51c <dwarf::value::as_sconstant() const+0x33c>
        val = (val << 8) | (uint64_t)p[i];
   1d310:	0007c503          	lbu	a0,0(a5)
   1d314:	0522                	c.slli	a0,0x8
   1d316:	0017c703          	lbu	a4,1(a5)
   1d31a:	8d59                	c.or	a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1d31c:	b7dd                	c.j	1d302 <dwarf::value::as_sconstant() const+0x122>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1d31e:	77a6                	c.ldsp	a5,104(sp)
   1d320:	6b98                	c.ld	a4,16(a5)
   1d322:	77e6                	c.ldsp	a5,120(sp)
   1d324:	40f70633          	sub	a2,a4,a5
   1d328:	468d                	c.li	a3,3
   1d32a:	00c6f463          	bgeu	a3,a2,1d332 <dwarf::value::as_sconstant() const+0x152>
   1d32e:	00e7e563          	bltu	a5,a4,1d338 <dwarf::value::as_sconstant() const+0x158>
      underflow();
   1d332:	10a8                	c.addi4spn	a0,sp,104
   1d334:	b9efe0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1d338:	7666                	c.ldsp	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1d33a:	77a6                	c.ldsp	a5,104(sp)
   1d33c:	4fdc                	c.lw	a5,28(a5)
   1d33e:	e39d                	c.bnez	a5,1d364 <dwarf::value::as_sconstant() const+0x184>
   1d340:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1d342:	4501                	c.li	a0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1d344:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1d348:	0006c703          	lbu	a4,0(a3)
   1d34c:	00f71733          	sll	a4,a4,a5
   1d350:	8d59                	c.or	a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1d352:	0685                	c.addi	a3,1
   1d354:	27a1                	c.addiw	a5,8
   1d356:	feb799e3          	bne	a5,a1,1d348 <dwarf::value::as_sconstant() const+0x168>
    pos += sizeof(T);
   1d35a:	0611                	c.addi	a2,4
   1d35c:	fcb2                	c.sdsp	a2,120(sp)
  case DW_FORM::data4:
    return cur.fixed<int32_t>();
   1d35e:	0005041b          	addiw	s0,a0,0
   1d362:	aa6d                	c.j	1d51c <dwarf::value::as_sconstant() const+0x33c>
   1d364:	87b2                	c.mv	a5,a2
   1d366:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   1d36a:	4501                	c.li	a0,0
        val = (val << 8) | (uint64_t)p[i];
   1d36c:	0522                	c.slli	a0,0x8
   1d36e:	0007c703          	lbu	a4,0(a5)
   1d372:	8d59                	c.or	a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1d374:	0785                	c.addi	a5,1
   1d376:	fef69be3          	bne	a3,a5,1d36c <dwarf::value::as_sconstant() const+0x18c>
   1d37a:	b7c5                	c.j	1d35a <dwarf::value::as_sconstant() const+0x17a>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1d37c:	77a6                	c.ldsp	a5,104(sp)
   1d37e:	6b98                	c.ld	a4,16(a5)
   1d380:	77e6                	c.ldsp	a5,120(sp)
   1d382:	40f70633          	sub	a2,a4,a5
   1d386:	469d                	c.li	a3,7
   1d388:	00c6f463          	bgeu	a3,a2,1d390 <dwarf::value::as_sconstant() const+0x1b0>
   1d38c:	00e7e563          	bltu	a5,a4,1d396 <dwarf::value::as_sconstant() const+0x1b6>
      underflow();
   1d390:	10a8                	c.addi4spn	a0,sp,104
   1d392:	b40fe0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1d396:	7666                	c.ldsp	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1d398:	77a6                	c.ldsp	a5,104(sp)
   1d39a:	4fdc                	c.lw	a5,28(a5)
   1d39c:	e395                	c.bnez	a5,1d3c0 <dwarf::value::as_sconstant() const+0x1e0>
   1d39e:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1d3a0:	4501                	c.li	a0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1d3a2:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1d3a6:	0006c703          	lbu	a4,0(a3)
   1d3aa:	00f71733          	sll	a4,a4,a5
   1d3ae:	8d59                	c.or	a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1d3b0:	0685                	c.addi	a3,1
   1d3b2:	27a1                	c.addiw	a5,8
   1d3b4:	feb799e3          	bne	a5,a1,1d3a6 <dwarf::value::as_sconstant() const+0x1c6>
    pos += sizeof(T);
   1d3b8:	0621                	c.addi	a2,8
   1d3ba:	fcb2                	c.sdsp	a2,120(sp)
    return (T)val;
   1d3bc:	842a                	c.mv	s0,a0
   1d3be:	aab9                	c.j	1d51c <dwarf::value::as_sconstant() const+0x33c>
   1d3c0:	87b2                	c.mv	a5,a2
   1d3c2:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1d3c6:	4501                	c.li	a0,0
        val = (val << 8) | (uint64_t)p[i];
   1d3c8:	0522                	c.slli	a0,0x8
   1d3ca:	0007c703          	lbu	a4,0(a5)
   1d3ce:	8d59                	c.or	a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1d3d0:	0785                	c.addi	a5,1
   1d3d2:	fed79be3          	bne	a5,a3,1d3c8 <dwarf::value::as_sconstant() const+0x1e8>
   1d3d6:	b7cd                	c.j	1d3b8 <dwarf::value::as_sconstant() const+0x1d8>
  case DW_FORM::data8:
    return cur.fixed<int64_t>();
  case DW_FORM::sdata:
    return cur.sleb128();
   1d3d8:	10a8                	c.addi4spn	a0,sp,104
   1d3da:	b38fe0ef          	jal	ra,1b712 <dwarf::cursor::sleb128()>
   1d3de:	842a                	c.mv	s0,a0
   1d3e0:	aa35                	c.j	1d51c <dwarf::value::as_sconstant() const+0x33c>
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) +
                              " as sconstant");
   1d3e2:	4541                	c.li	a0,16
   1d3e4:	aacf90ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1d3e8:	84aa                	c.mv	s1,a0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   1d3ea:	444c                	c.lw	a1,12(s0)
   1d3ec:	0028                	c.addi4spn	a0,sp,8
   1d3ee:	3ab0a0ef          	jal	ra,27f98 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1d3f2:	00011617          	auipc	a2,0x11
   1d3f6:	df660613          	addi	a2,a2,-522 # 2e1e8 <std::piecewise_construct+0x1c8>
   1d3fa:	4581                	c.li	a1,0
   1d3fc:	0028                	c.addi4spn	a0,sp,8
   1d3fe:	a02f90ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1d402:	85aa                	c.mv	a1,a0
   1d404:	1020                	c.addi4spn	s0,sp,40
   1d406:	8522                	c.mv	a0,s0
   1d408:	ac8f90ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1d40c:	00011597          	auipc	a1,0x11
   1d410:	e1c58593          	addi	a1,a1,-484 # 2e228 <std::piecewise_construct+0x208>
   1d414:	8522                	c.mv	a0,s0
   1d416:	e2af90ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1d41a:	85aa                	c.mv	a1,a0
   1d41c:	00a0                	c.addi4spn	s0,sp,72
   1d41e:	8522                	c.mv	a0,s0
   1d420:	ab0f90ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1d424:	85a2                	c.mv	a1,s0
   1d426:	8526                	c.mv	a0,s1
   1d428:	e68f90ef          	jal	ra,16a90 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1d42c:	0001d797          	auipc	a5,0x1d
   1d430:	0347b783          	ld	a5,52(a5) # 3a460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   1d434:	07c1                	c.addi	a5,16
   1d436:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1d438:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1d43a:	08bc                	c.addi4spn	a5,sp,88
   1d43c:	00f50463          	beq	a0,a5,1d444 <dwarf::value::as_sconstant() const+0x264>
   1d440:	b60f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d444:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1d446:	183c                	c.addi4spn	a5,sp,56
   1d448:	00f50463          	beq	a0,a5,1d450 <dwarf::value::as_sconstant() const+0x270>
   1d44c:	b54f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d450:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1d452:	083c                	c.addi4spn	a5,sp,24
   1d454:	00f50463          	beq	a0,a5,1d45c <dwarf::value::as_sconstant() const+0x27c>
   1d458:	b48f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
                              " as sconstant");
   1d45c:	0001d617          	auipc	a2,0x1d
   1d460:	19463603          	ld	a2,404(a2) # 3a5f0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1aaa0>
   1d464:	0001d597          	auipc	a1,0x1d
   1d468:	14c5b583          	ld	a1,332(a1) # 3a5b0 <typeinfo for dwarf::value_type_mismatch@@Base+0xca18>
   1d46c:	8526                	c.mv	a0,s1
   1d46e:	cf2f90ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1d472:	842a                	c.mv	s0,a0
   1d474:	a8a5                	c.j	1d4ec <dwarf::value::as_sconstant() const+0x30c>
   1d476:	55fd                	c.li	a1,-1
   1d478:	03048513          	addi	a0,s1,48
   1d47c:	974f90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d480:	a85d                	c.j	1d536 <dwarf::value::as_sconstant() const+0x356>
	_M_dispose();
   1d482:	609c                	c.ld	a5,0(s1)
   1d484:	6b9c                	c.ld	a5,16(a5)
   1d486:	8526                	c.mv	a0,s1
   1d488:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d48a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d48e:	0001d797          	auipc	a5,0x1d
   1d492:	00a7b783          	ld	a5,10(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1d496:	0007c783          	lbu	a5,0(a5)
   1d49a:	cf89                	c.beqz	a5,1d4b4 <dwarf::value::as_sconstant() const+0x2d4>
    _Atomic_word __result = *__mem;
   1d49c:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1d49e:	fff5079b          	addiw	a5,a0,-1
   1d4a2:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d4a4:	4785                	c.li	a5,1
   1d4a6:	08f51b63          	bne	a0,a5,1d53c <dwarf::value::as_sconstant() const+0x35c>
	    _M_destroy();
   1d4aa:	609c                	c.ld	a5,0(s1)
   1d4ac:	6f9c                	c.ld	a5,24(a5)
   1d4ae:	8526                	c.mv	a0,s1
   1d4b0:	9782                	c.jalr	a5
   1d4b2:	a069                	c.j	1d53c <dwarf::value::as_sconstant() const+0x35c>
      return __exchange_and_add(__mem, __val);
   1d4b4:	55fd                	c.li	a1,-1
   1d4b6:	03448513          	addi	a0,s1,52
   1d4ba:	936f90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d4be:	b7dd                	c.j	1d4a4 <dwarf::value::as_sconstant() const+0x2c4>
      { return _M_dataplus._M_p; }
   1d4c0:	842a                	c.mv	s0,a0
   1d4c2:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1d4c4:	08bc                	c.addi4spn	a5,sp,88
   1d4c6:	00f50463          	beq	a0,a5,1d4ce <dwarf::value::as_sconstant() const+0x2ee>
   1d4ca:	ad6f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d4ce:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1d4d0:	183c                	c.addi4spn	a5,sp,56
   1d4d2:	00f50463          	beq	a0,a5,1d4da <dwarf::value::as_sconstant() const+0x2fa>
   1d4d6:	acaf90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d4da:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1d4dc:	083c                	c.addi4spn	a5,sp,24
   1d4de:	00f50463          	beq	a0,a5,1d4e6 <dwarf::value::as_sconstant() const+0x306>
   1d4e2:	abef90ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1d4e6:	8526                	c.mv	a0,s1
   1d4e8:	a68f90ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1d4ec:	7546                	c.ldsp	a0,112(sp)
   1d4ee:	c511                	c.beqz	a0,1d4fa <dwarf::value::as_sconstant() const+0x31a>
	  _M_pi->_M_release();
   1d4f0:	0001d317          	auipc	t1,0x1d
   1d4f4:	ef033303          	ld	t1,-272(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   1d4f8:	9302                	c.jalr	t1
   1d4fa:	8522                	c.mv	a0,s0
   1d4fc:	c94f90ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1d500:	842a                	c.mv	s0,a0
   1d502:	b7f1                	c.j	1d4ce <dwarf::value::as_sconstant() const+0x2ee>
   1d504:	842a                	c.mv	s0,a0
   1d506:	bfd1                	c.j	1d4da <dwarf::value::as_sconstant() const+0x2fa>
   1d508:	842a                	c.mv	s0,a0
   1d50a:	bff1                	c.j	1d4e6 <dwarf::value::as_sconstant() const+0x306>
        val |= ((uint64_t)p[i]) << (i * 8);
   1d50c:	0007c503          	lbu	a0,0(a5)
    pos += sizeof(T);
   1d510:	0785                	c.addi	a5,1
   1d512:	fcbe                	c.sdsp	a5,120(sp)
    return cur.fixed<int8_t>();
   1d514:	0185141b          	slliw	s0,a0,0x18
   1d518:	4184541b          	sraiw	s0,s0,0x18
	if (_M_pi != nullptr)
   1d51c:	74c6                	c.ldsp	s1,112(sp)
   1d51e:	cc99                	c.beqz	s1,1d53c <dwarf::value::as_sconstant() const+0x35c>
    if (__is_single_threaded())
   1d520:	0001d797          	auipc	a5,0x1d
   1d524:	f787b783          	ld	a5,-136(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1d528:	0007c783          	lbu	a5,0(a5)
   1d52c:	d7a9                	c.beqz	a5,1d476 <dwarf::value::as_sconstant() const+0x296>
    _Atomic_word __result = *__mem;
   1d52e:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1d530:	fff5079b          	addiw	a5,a0,-1
   1d534:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d536:	4785                	c.li	a5,1
   1d538:	f4f505e3          	beq	a0,a5,1d482 <dwarf::value::as_sconstant() const+0x2a2>
  }
}
   1d53c:	8522                	c.mv	a0,s0
   1d53e:	70aa                	c.ldsp	ra,168(sp)
   1d540:	740a                	c.ldsp	s0,160(sp)
   1d542:	64ea                	c.ldsp	s1,152(sp)
   1d544:	694a                	c.ldsp	s2,144(sp)
   1d546:	69aa                	c.ldsp	s3,136(sp)
   1d548:	614d                	c.addi16sp	sp,176
   1d54a:	8082                	c.jr	ra
  cursor cur(cu->data(), offset);
   1d54c:	6818                	c.ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d54e:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   1d550:	f882                	c.sdsp	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1d552:	00893783          	ld	a5,8(s2)
   1d556:	97ba                	c.add	a5,a4
   1d558:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
   1d55a:	441c                	c.lw	a5,8(s0)
   1d55c:	37ed                	c.addiw	a5,-5
   1d55e:	0007869b          	addiw	a3,a5,0
   1d562:	4721                	c.li	a4,8
   1d564:	e6d76fe3          	bltu	a4,a3,1d3e2 <dwarf::value::as_sconstant() const+0x202>
   1d568:	02079713          	slli	a4,a5,0x20
   1d56c:	01e75793          	srli	a5,a4,0x1e
   1d570:	00011717          	auipc	a4,0x11
   1d574:	e8c70713          	addi	a4,a4,-372 # 2e3fc <std::piecewise_construct+0x3dc>
   1d578:	97ba                	c.add	a5,a4
   1d57a:	439c                	c.lw	a5,0(a5)
   1d57c:	97ba                	c.add	a5,a4
   1d57e:	8782                	c.jr	a5

000000000001d580 <dwarf::value::as_exprloc() const>:

expr value::as_exprloc() const {
   1d580:	7171                	c.addi16sp	sp,-176
   1d582:	f506                	c.sdsp	ra,168(sp)
   1d584:	f122                	c.sdsp	s0,160(sp)
   1d586:	ed26                	c.sdsp	s1,152(sp)
   1d588:	e94a                	c.sdsp	s2,144(sp)
   1d58a:	e54e                	c.sdsp	s3,136(sp)
   1d58c:	e152                	c.sdsp	s4,128(sp)
   1d58e:	84aa                	c.mv	s1,a0
   1d590:	842e                	c.mv	s0,a1
  cursor cur(cu->data(), offset);
   1d592:	6188                	c.ld	a0,0(a1)
   1d594:	da4fa0ef          	jal	ra,17b38 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d598:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1d59c:	00853903          	ld	s2,8(a0)
	if (_M_pi != nullptr)
   1d5a0:	34090263          	beq	s2,zero,1d8e4 <dwarf::value::as_exprloc() const+0x364>
    if (__is_single_threaded())
   1d5a4:	0001d797          	auipc	a5,0x1d
   1d5a8:	ef47b783          	ld	a5,-268(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1d5ac:	0007c783          	lbu	a5,0(a5)
   1d5b0:	c7d9                	c.beqz	a5,1d63e <dwarf::value::as_exprloc() const+0xbe>
  { *__mem += __val; }
   1d5b2:	03092783          	lw	a5,48(s2)
   1d5b6:	2785                	c.addiw	a5,1
   1d5b8:	02f92823          	sw	a5,48(s2)
   1d5bc:	01043a03          	ld	s4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d5c0:	f4ce                	c.sdsp	s3,104(sp)
      : _M_pi(__r._M_pi)
   1d5c2:	f8ca                	c.sdsp	s2,112(sp)
    if (__is_single_threaded())
   1d5c4:	0001d797          	auipc	a5,0x1d
   1d5c8:	ed47b783          	ld	a5,-300(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1d5cc:	0007c783          	lbu	a5,0(a5)
   1d5d0:	cfad                	c.beqz	a5,1d64a <dwarf::value::as_exprloc() const+0xca>
  { *__mem += __val; }
   1d5d2:	03092783          	lw	a5,48(s2)
   1d5d6:	2785                	c.addiw	a5,1
   1d5d8:	02f92823          	sw	a5,48(s2)
   1d5dc:	0089b783          	ld	a5,8(s3)
   1d5e0:	97d2                	c.add	a5,s4
   1d5e2:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   1d5e4:	0001d797          	auipc	a5,0x1d
   1d5e8:	eb47b783          	ld	a5,-332(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1d5ec:	0007c783          	lbu	a5,0(a5)
   1d5f0:	c3bd                	c.beqz	a5,1d656 <dwarf::value::as_exprloc() const+0xd6>
    _Atomic_word __result = *__mem;
   1d5f2:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   1d5f6:	fff5079b          	addiw	a5,a0,-1
   1d5fa:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d5fe:	4785                	c.li	a5,1
   1d600:	2ef51963          	bne	a0,a5,1d8f2 <dwarf::value::as_exprloc() const+0x372>
	_M_dispose();
   1d604:	00093783          	ld	a5,0(s2)
   1d608:	6b9c                	c.ld	a5,16(a5)
   1d60a:	854a                	c.mv	a0,s2
   1d60c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d60e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d612:	0001d797          	auipc	a5,0x1d
   1d616:	e867b783          	ld	a5,-378(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1d61a:	0007c783          	lbu	a5,0(a5)
   1d61e:	c3b1                	c.beqz	a5,1d662 <dwarf::value::as_exprloc() const+0xe2>
    _Atomic_word __result = *__mem;
   1d620:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   1d624:	fff5079b          	addiw	a5,a0,-1
   1d628:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d62c:	4785                	c.li	a5,1
   1d62e:	2cf51263          	bne	a0,a5,1d8f2 <dwarf::value::as_exprloc() const+0x372>
	    _M_destroy();
   1d632:	00093783          	ld	a5,0(s2)
   1d636:	6f9c                	c.ld	a5,24(a5)
   1d638:	854a                	c.mv	a0,s2
   1d63a:	9782                	c.jalr	a5
   1d63c:	ac5d                	c.j	1d8f2 <dwarf::value::as_exprloc() const+0x372>
      __atomic_add(__mem, __val);
   1d63e:	4585                	c.li	a1,1
   1d640:	03090513          	addi	a0,s2,48
   1d644:	f6df80ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d648:	bf95                	c.j	1d5bc <dwarf::value::as_exprloc() const+0x3c>
   1d64a:	4585                	c.li	a1,1
   1d64c:	03090513          	addi	a0,s2,48
   1d650:	f61f80ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d654:	b761                	c.j	1d5dc <dwarf::value::as_exprloc() const+0x5c>
      return __exchange_and_add(__mem, __val);
   1d656:	55fd                	c.li	a1,-1
   1d658:	03090513          	addi	a0,s2,48
   1d65c:	f95f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d660:	bf79                	c.j	1d5fe <dwarf::value::as_exprloc() const+0x7e>
   1d662:	55fd                	c.li	a1,-1
   1d664:	03490513          	addi	a0,s2,52
   1d668:	f89f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d66c:	b7c1                	c.j	1d62c <dwarf::value::as_exprloc() const+0xac>
    while (pos < sec->end) {
   1d66e:	77e6                	c.ldsp	a5,120(sp)
      { return _M_ptr; }
   1d670:	7526                	c.ldsp	a0,104(sp)
   1d672:	6918                	c.ld	a4,16(a0)
   1d674:	02e7f763          	bgeu	a5,a4,1d6a2 <dwarf::value::as_exprloc() const+0x122>
    std::uint64_t result = 0;
   1d678:	4681                	c.li	a3,0
    int shift = 0;
   1d67a:	4581                	c.li	a1,0
      uint8_t byte = *(uint8_t *)(pos++);
   1d67c:	0785                	c.addi	a5,1
   1d67e:	fcbe                	c.sdsp	a5,120(sp)
   1d680:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1d684:	07f77613          	andi	a2,a4,127
   1d688:	00b61633          	sll	a2,a2,a1
   1d68c:	8ed1                	c.or	a3,a2
      if ((byte & 0x80) == 0)
   1d68e:	0187171b          	slliw	a4,a4,0x18
   1d692:	4187571b          	sraiw	a4,a4,0x18
   1d696:	22075e63          	bge	a4,zero,1d8d2 <dwarf::value::as_exprloc() const+0x352>
      shift += 7;
   1d69a:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   1d69c:	6918                	c.ld	a4,16(a0)
   1d69e:	fce7efe3          	bltu	a5,a4,1d67c <dwarf::value::as_exprloc() const+0xfc>
    underflow();
   1d6a2:	10a8                	c.addi4spn	a0,sp,104
   1d6a4:	82efe0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
   1d6a8:	aa99                	c.j	1d7fe <dwarf::value::as_exprloc() const+0x27e>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1d6aa:	77a6                	c.ldsp	a5,104(sp)
   1d6ac:	6b98                	c.ld	a4,16(a5)
   1d6ae:	77e6                	c.ldsp	a5,120(sp)
   1d6b0:	00e7e563          	bltu	a5,a4,1d6ba <dwarf::value::as_exprloc() const+0x13a>
      underflow();
   1d6b4:	10a8                	c.addi4spn	a0,sp,104
   1d6b6:	81cfe0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1d6ba:	77e6                	c.ldsp	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1d6bc:	7726                	c.ldsp	a4,104(sp)
   1d6be:	4f58                	c.lw	a4,28(a4)
   1d6c0:	20070563          	beq	a4,zero,1d8ca <dwarf::value::as_exprloc() const+0x34a>
        val = (val << 8) | (uint64_t)p[i];
   1d6c4:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1d6c8:	a419                	c.j	1d8ce <dwarf::value::as_exprloc() const+0x34e>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1d6ca:	77a6                	c.ldsp	a5,104(sp)
   1d6cc:	6b98                	c.ld	a4,16(a5)
   1d6ce:	77e6                	c.ldsp	a5,120(sp)
   1d6d0:	40f70633          	sub	a2,a4,a5
   1d6d4:	4685                	c.li	a3,1
   1d6d6:	00c6f463          	bgeu	a3,a2,1d6de <dwarf::value::as_exprloc() const+0x15e>
   1d6da:	00e7e563          	bltu	a5,a4,1d6e4 <dwarf::value::as_exprloc() const+0x164>
      underflow();
   1d6de:	10a8                	c.addi4spn	a0,sp,104
   1d6e0:	ff3fd0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1d6e4:	77e6                	c.ldsp	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1d6e6:	7726                	c.ldsp	a4,104(sp)
   1d6e8:	4f58                	c.lw	a4,28(a4)
   1d6ea:	eb11                	c.bnez	a4,1d6fe <dwarf::value::as_exprloc() const+0x17e>
        val |= ((uint64_t)p[i]) << (i * 8);
   1d6ec:	0017c683          	lbu	a3,1(a5)
   1d6f0:	06a2                	c.slli	a3,0x8
   1d6f2:	0007c703          	lbu	a4,0(a5)
   1d6f6:	8ed9                	c.or	a3,a4
    pos += sizeof(T);
   1d6f8:	0789                	c.addi	a5,2
   1d6fa:	fcbe                	c.sdsp	a5,120(sp)
  case DW_FORM::block1:
    size = cur.fixed<uint8_t>();
    break;
  case DW_FORM::block2:
    size = cur.fixed<uint16_t>();
    break;
   1d6fc:	aad9                	c.j	1d8d2 <dwarf::value::as_exprloc() const+0x352>
        val = (val << 8) | (uint64_t)p[i];
   1d6fe:	0007c683          	lbu	a3,0(a5)
   1d702:	06a2                	c.slli	a3,0x8
   1d704:	0017c703          	lbu	a4,1(a5)
   1d708:	8ed9                	c.or	a3,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1d70a:	b7fd                	c.j	1d6f8 <dwarf::value::as_exprloc() const+0x178>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1d70c:	77a6                	c.ldsp	a5,104(sp)
   1d70e:	6b98                	c.ld	a4,16(a5)
   1d710:	77e6                	c.ldsp	a5,120(sp)
   1d712:	40f70633          	sub	a2,a4,a5
   1d716:	468d                	c.li	a3,3
   1d718:	00c6f463          	bgeu	a3,a2,1d720 <dwarf::value::as_exprloc() const+0x1a0>
   1d71c:	00e7e563          	bltu	a5,a4,1d726 <dwarf::value::as_exprloc() const+0x1a6>
      underflow();
   1d720:	10a8                	c.addi4spn	a0,sp,104
   1d722:	fb1fd0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1d726:	75e6                	c.ldsp	a1,120(sp)
    if (sec->ord == byte_order::lsb) {
   1d728:	77a6                	c.ldsp	a5,104(sp)
   1d72a:	4fdc                	c.lw	a5,28(a5)
   1d72c:	e39d                	c.bnez	a5,1d752 <dwarf::value::as_exprloc() const+0x1d2>
   1d72e:	862e                	c.mv	a2,a1
    uint64_t val = 0;
   1d730:	4681                	c.li	a3,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1d732:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1d736:	00064703          	lbu	a4,0(a2)
   1d73a:	00f71733          	sll	a4,a4,a5
   1d73e:	8ed9                	c.or	a3,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1d740:	0605                	c.addi	a2,1
   1d742:	27a1                	c.addiw	a5,8
   1d744:	fea799e3          	bne	a5,a0,1d736 <dwarf::value::as_exprloc() const+0x1b6>
    pos += sizeof(T);
   1d748:	0591                	c.addi	a1,4
   1d74a:	fcae                	c.sdsp	a1,120(sp)
   1d74c:	1682                	c.slli	a3,0x20
   1d74e:	9281                	c.srli	a3,0x20
  case DW_FORM::block4:
    size = cur.fixed<uint32_t>();
    break;
   1d750:	a249                	c.j	1d8d2 <dwarf::value::as_exprloc() const+0x352>
   1d752:	87ae                	c.mv	a5,a1
   1d754:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1d758:	4681                	c.li	a3,0
        val = (val << 8) | (uint64_t)p[i];
   1d75a:	06a2                	c.slli	a3,0x8
   1d75c:	0007c703          	lbu	a4,0(a5)
   1d760:	8ed9                	c.or	a3,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1d762:	0785                	c.addi	a5,1
   1d764:	fec79be3          	bne	a5,a2,1d75a <dwarf::value::as_exprloc() const+0x1da>
   1d768:	b7c5                	c.j	1d748 <dwarf::value::as_exprloc() const+0x1c8>
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as exprloc");
   1d76a:	4541                	c.li	a0,16
   1d76c:	f25f80ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1d770:	84aa                	c.mv	s1,a0
   1d772:	444c                	c.lw	a1,12(s0)
   1d774:	0028                	c.addi4spn	a0,sp,8
   1d776:	0230a0ef          	jal	ra,27f98 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1d77a:	00011617          	auipc	a2,0x11
   1d77e:	a6e60613          	addi	a2,a2,-1426 # 2e1e8 <std::piecewise_construct+0x1c8>
   1d782:	4581                	c.li	a1,0
   1d784:	0028                	c.addi4spn	a0,sp,8
   1d786:	e7bf80ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1d78a:	85aa                	c.mv	a1,a0
   1d78c:	1020                	c.addi4spn	s0,sp,40
   1d78e:	8522                	c.mv	a0,s0
   1d790:	f41f80ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1d794:	00011597          	auipc	a1,0x11
   1d798:	aa458593          	addi	a1,a1,-1372 # 2e238 <std::piecewise_construct+0x218>
   1d79c:	8522                	c.mv	a0,s0
   1d79e:	aa2f90ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1d7a2:	85aa                	c.mv	a1,a0
   1d7a4:	00a0                	c.addi4spn	s0,sp,72
   1d7a6:	8522                	c.mv	a0,s0
   1d7a8:	f29f80ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1d7ac:	85a2                	c.mv	a1,s0
   1d7ae:	8526                	c.mv	a0,s1
   1d7b0:	ae0f90ef          	jal	ra,16a90 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1d7b4:	0001d797          	auipc	a5,0x1d
   1d7b8:	cac7b783          	ld	a5,-852(a5) # 3a460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   1d7bc:	07c1                	c.addi	a5,16
   1d7be:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1d7c0:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1d7c2:	08bc                	c.addi4spn	a5,sp,88
   1d7c4:	00f50463          	beq	a0,a5,1d7cc <dwarf::value::as_exprloc() const+0x24c>
   1d7c8:	fd9f80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d7cc:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1d7ce:	183c                	c.addi4spn	a5,sp,56
   1d7d0:	00f50463          	beq	a0,a5,1d7d8 <dwarf::value::as_exprloc() const+0x258>
   1d7d4:	fcdf80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d7d8:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1d7da:	083c                	c.addi4spn	a5,sp,24
   1d7dc:	00f50463          	beq	a0,a5,1d7e4 <dwarf::value::as_exprloc() const+0x264>
   1d7e0:	fc1f80ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1d7e4:	0001d617          	auipc	a2,0x1d
   1d7e8:	e0c63603          	ld	a2,-500(a2) # 3a5f0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1aaa0>
   1d7ec:	0001d597          	auipc	a1,0x1d
   1d7f0:	dc45b583          	ld	a1,-572(a1) # 3a5b0 <typeinfo for dwarf::value_type_mismatch@@Base+0xca18>
   1d7f4:	8526                	c.mv	a0,s1
   1d7f6:	96af90ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1d7fa:	842a                	c.mv	s0,a0
   1d7fc:	a07d                	c.j	1d8aa <dwarf::value::as_exprloc() const+0x32a>
    return 0;
   1d7fe:	4681                	c.li	a3,0
   1d800:	a8c9                	c.j	1d8d2 <dwarf::value::as_exprloc() const+0x352>
   1d802:	7446                	c.ldsp	s0,112(sp)
   1d804:	cc19                	c.beqz	s0,1d822 <dwarf::value::as_exprloc() const+0x2a2>
    if (__is_single_threaded())
   1d806:	0001d797          	auipc	a5,0x1d
   1d80a:	c927b783          	ld	a5,-878(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1d80e:	0007c783          	lbu	a5,0(a5)
   1d812:	c38d                	c.beqz	a5,1d834 <dwarf::value::as_exprloc() const+0x2b4>
    _Atomic_word __result = *__mem;
   1d814:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1d816:	fff5079b          	addiw	a5,a0,-1
   1d81a:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d81c:	4785                	c.li	a5,1
   1d81e:	02f50163          	beq	a0,a5,1d840 <dwarf::value::as_exprloc() const+0x2c0>
  }
  return expr(cu, cur.get_section_offset(), size);
}
   1d822:	8526                	c.mv	a0,s1
   1d824:	70aa                	c.ldsp	ra,168(sp)
   1d826:	740a                	c.ldsp	s0,160(sp)
   1d828:	64ea                	c.ldsp	s1,152(sp)
   1d82a:	694a                	c.ldsp	s2,144(sp)
   1d82c:	69aa                	c.ldsp	s3,136(sp)
   1d82e:	6a0a                	c.ldsp	s4,128(sp)
   1d830:	614d                	c.addi16sp	sp,176
   1d832:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   1d834:	55fd                	c.li	a1,-1
   1d836:	03040513          	addi	a0,s0,48
   1d83a:	db7f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d83e:	bff9                	c.j	1d81c <dwarf::value::as_exprloc() const+0x29c>
	_M_dispose();
   1d840:	601c                	c.ld	a5,0(s0)
   1d842:	6b9c                	c.ld	a5,16(a5)
   1d844:	8522                	c.mv	a0,s0
   1d846:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d848:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d84c:	0001d797          	auipc	a5,0x1d
   1d850:	c4c7b783          	ld	a5,-948(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1d854:	0007c783          	lbu	a5,0(a5)
   1d858:	cf89                	c.beqz	a5,1d872 <dwarf::value::as_exprloc() const+0x2f2>
    _Atomic_word __result = *__mem;
   1d85a:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1d85c:	fff5079b          	addiw	a5,a0,-1
   1d860:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d862:	4785                	c.li	a5,1
   1d864:	faf51fe3          	bne	a0,a5,1d822 <dwarf::value::as_exprloc() const+0x2a2>
	    _M_destroy();
   1d868:	601c                	c.ld	a5,0(s0)
   1d86a:	6f9c                	c.ld	a5,24(a5)
   1d86c:	8522                	c.mv	a0,s0
   1d86e:	9782                	c.jalr	a5
  return expr(cu, cur.get_section_offset(), size);
   1d870:	bf4d                	c.j	1d822 <dwarf::value::as_exprloc() const+0x2a2>
      return __exchange_and_add(__mem, __val);
   1d872:	55fd                	c.li	a1,-1
   1d874:	03440513          	addi	a0,s0,52
   1d878:	d79f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d87c:	b7dd                	c.j	1d862 <dwarf::value::as_exprloc() const+0x2e2>
      { return _M_dataplus._M_p; }
   1d87e:	842a                	c.mv	s0,a0
   1d880:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1d882:	08bc                	c.addi4spn	a5,sp,88
   1d884:	00f50463          	beq	a0,a5,1d88c <dwarf::value::as_exprloc() const+0x30c>
   1d888:	f19f80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d88c:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1d88e:	183c                	c.addi4spn	a5,sp,56
   1d890:	00f50463          	beq	a0,a5,1d898 <dwarf::value::as_exprloc() const+0x318>
   1d894:	f0df80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d898:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1d89a:	083c                	c.addi4spn	a5,sp,24
   1d89c:	00f50463          	beq	a0,a5,1d8a4 <dwarf::value::as_exprloc() const+0x324>
   1d8a0:	f01f80ef          	jal	ra,167a0 <operator delete(void*)@plt>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as exprloc");
   1d8a4:	8526                	c.mv	a0,s1
   1d8a6:	eabf80ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1d8aa:	7546                	c.ldsp	a0,112(sp)
   1d8ac:	c511                	c.beqz	a0,1d8b8 <dwarf::value::as_exprloc() const+0x338>
	  _M_pi->_M_release();
   1d8ae:	0001d317          	auipc	t1,0x1d
   1d8b2:	b3233303          	ld	t1,-1230(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   1d8b6:	9302                	c.jalr	t1
   1d8b8:	8522                	c.mv	a0,s0
   1d8ba:	8d6f90ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1d8be:	842a                	c.mv	s0,a0
   1d8c0:	b7f1                	c.j	1d88c <dwarf::value::as_exprloc() const+0x30c>
   1d8c2:	842a                	c.mv	s0,a0
   1d8c4:	bfd1                	c.j	1d898 <dwarf::value::as_exprloc() const+0x318>
   1d8c6:	842a                	c.mv	s0,a0
   1d8c8:	bff1                	c.j	1d8a4 <dwarf::value::as_exprloc() const+0x324>
        val |= ((uint64_t)p[i]) << (i * 8);
   1d8ca:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   1d8ce:	0785                	c.addi	a5,1
   1d8d0:	fcbe                	c.sdsp	a5,120(sp)
  section_offset get_section_offset() const { return pos - sec->begin; }
   1d8d2:	77a6                	c.ldsp	a5,104(sp)
   1d8d4:	679c                	c.ld	a5,8(a5)
  return expr(cu, cur.get_section_offset(), size);
   1d8d6:	7666                	c.ldsp	a2,120(sp)
   1d8d8:	8e1d                	c.sub	a2,a5
   1d8da:	600c                	c.ld	a1,0(s0)
   1d8dc:	8526                	c.mv	a0,s1
   1d8de:	4e7020ef          	jal	ra,205c4 <dwarf::expr::expr(dwarf::unit const*, unsigned long, unsigned long)>
   1d8e2:	b705                	c.j	1d802 <dwarf::value::as_exprloc() const+0x282>
  cursor cur(cu->data(), offset);
   1d8e4:	6818                	c.ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d8e6:	f4ce                	c.sdsp	s3,104(sp)
      : _M_pi(__r._M_pi)
   1d8e8:	f882                	c.sdsp	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1d8ea:	0089b783          	ld	a5,8(s3)
   1d8ee:	97ba                	c.add	a5,a4
   1d8f0:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
   1d8f2:	441c                	c.lw	a5,8(s0)
   1d8f4:	37f5                	c.addiw	a5,-3
   1d8f6:	0007869b          	addiw	a3,a5,0
   1d8fa:	4755                	c.li	a4,21
   1d8fc:	e6d767e3          	bltu	a4,a3,1d76a <dwarf::value::as_exprloc() const+0x1ea>
   1d900:	02079713          	slli	a4,a5,0x20
   1d904:	01e75793          	srli	a5,a4,0x1e
   1d908:	00011717          	auipc	a4,0x11
   1d90c:	b1870713          	addi	a4,a4,-1256 # 2e420 <std::piecewise_construct+0x400>
   1d910:	97ba                	c.add	a5,a4
   1d912:	439c                	c.lw	a5,0(a5)
   1d914:	97ba                	c.add	a5,a4
   1d916:	8782                	c.jr	a5

000000000001d918 <dwarf::value::as_flag() const>:

bool value::as_flag() const {
   1d918:	7119                	c.addi16sp	sp,-128
   1d91a:	fc86                	c.sdsp	ra,120(sp)
   1d91c:	f8a2                	c.sdsp	s0,112(sp)
   1d91e:	f4a6                	c.sdsp	s1,104(sp)
   1d920:	f0ca                	c.sdsp	s2,96(sp)
   1d922:	842a                	c.mv	s0,a0
  switch (form) {
   1d924:	451c                	c.lw	a5,8(a0)
   1d926:	4731                	c.li	a4,12
   1d928:	00e78d63          	beq	a5,a4,1d942 <dwarf::value::as_flag() const+0x2a>
   1d92c:	4765                	c.li	a4,25
   1d92e:	4485                	c.li	s1,1
   1d930:	0ee79f63          	bne	a5,a4,1da2e <dwarf::value::as_flag() const+0x116>
  case DW_FORM::flag_present:
    return true;
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as flag");
  }
}
   1d934:	8526                	c.mv	a0,s1
   1d936:	70e6                	c.ldsp	ra,120(sp)
   1d938:	7446                	c.ldsp	s0,112(sp)
   1d93a:	74a6                	c.ldsp	s1,104(sp)
   1d93c:	7906                	c.ldsp	s2,96(sp)
   1d93e:	6109                	c.addi16sp	sp,128
   1d940:	8082                	c.jr	ra
    cursor cur(cu->data(), offset);
   1d942:	6108                	c.ld	a0,0(a0)
   1d944:	9f4fa0ef          	jal	ra,17b38 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d948:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1d94c:	6504                	c.ld	s1,8(a0)
	if (_M_pi != nullptr)
   1d94e:	22048463          	beq	s1,zero,1db76 <dwarf::value::as_flag() const+0x25e>
    if (__is_single_threaded())
   1d952:	0001d797          	auipc	a5,0x1d
   1d956:	b467b783          	ld	a5,-1210(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1d95a:	0007c783          	lbu	a5,0(a5)
   1d95e:	cfa5                	c.beqz	a5,1d9d6 <dwarf::value::as_flag() const+0xbe>
  { *__mem += __val; }
   1d960:	589c                	c.lw	a5,48(s1)
   1d962:	2785                	c.addiw	a5,1
   1d964:	d89c                	c.sw	a5,48(s1)
   1d966:	6800                	c.ld	s0,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d968:	e0ca                	c.sdsp	s2,64(sp)
      : _M_pi(__r._M_pi)
   1d96a:	e4a6                	c.sdsp	s1,72(sp)
    if (__is_single_threaded())
   1d96c:	0001d797          	auipc	a5,0x1d
   1d970:	b2c7b783          	ld	a5,-1236(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1d974:	0007c783          	lbu	a5,0(a5)
   1d978:	c7ad                	c.beqz	a5,1d9e2 <dwarf::value::as_flag() const+0xca>
  { *__mem += __val; }
   1d97a:	589c                	c.lw	a5,48(s1)
   1d97c:	2785                	c.addiw	a5,1
   1d97e:	d89c                	c.sw	a5,48(s1)
   1d980:	00893783          	ld	a5,8(s2)
   1d984:	97a2                	c.add	a5,s0
   1d986:	e8be                	c.sdsp	a5,80(sp)
    if (__is_single_threaded())
   1d988:	0001d797          	auipc	a5,0x1d
   1d98c:	b107b783          	ld	a5,-1264(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1d990:	0007c783          	lbu	a5,0(a5)
   1d994:	cfa9                	c.beqz	a5,1d9ee <dwarf::value::as_flag() const+0xd6>
    _Atomic_word __result = *__mem;
   1d996:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1d998:	fff5079b          	addiw	a5,a0,-1
   1d99c:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d99e:	4785                	c.li	a5,1
   1d9a0:	1ef51263          	bne	a0,a5,1db84 <dwarf::value::as_flag() const+0x26c>
	_M_dispose();
   1d9a4:	609c                	c.ld	a5,0(s1)
   1d9a6:	6b9c                	c.ld	a5,16(a5)
   1d9a8:	8526                	c.mv	a0,s1
   1d9aa:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d9ac:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d9b0:	0001d797          	auipc	a5,0x1d
   1d9b4:	ae87b783          	ld	a5,-1304(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1d9b8:	0007c783          	lbu	a5,0(a5)
   1d9bc:	cf9d                	c.beqz	a5,1d9fa <dwarf::value::as_flag() const+0xe2>
    _Atomic_word __result = *__mem;
   1d9be:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1d9c0:	fff5079b          	addiw	a5,a0,-1
   1d9c4:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d9c6:	4785                	c.li	a5,1
   1d9c8:	1af51e63          	bne	a0,a5,1db84 <dwarf::value::as_flag() const+0x26c>
	    _M_destroy();
   1d9cc:	609c                	c.ld	a5,0(s1)
   1d9ce:	6f9c                	c.ld	a5,24(a5)
   1d9d0:	8526                	c.mv	a0,s1
   1d9d2:	9782                	c.jalr	a5
   1d9d4:	aa45                	c.j	1db84 <dwarf::value::as_flag() const+0x26c>
      __atomic_add(__mem, __val);
   1d9d6:	4585                	c.li	a1,1
   1d9d8:	03048513          	addi	a0,s1,48
   1d9dc:	bd5f80ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d9e0:	b759                	c.j	1d966 <dwarf::value::as_flag() const+0x4e>
   1d9e2:	4585                	c.li	a1,1
   1d9e4:	03048513          	addi	a0,s1,48
   1d9e8:	bc9f80ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d9ec:	bf51                	c.j	1d980 <dwarf::value::as_flag() const+0x68>
      return __exchange_and_add(__mem, __val);
   1d9ee:	55fd                	c.li	a1,-1
   1d9f0:	03048513          	addi	a0,s1,48
   1d9f4:	bfdf80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d9f8:	b75d                	c.j	1d99e <dwarf::value::as_flag() const+0x86>
   1d9fa:	55fd                	c.li	a1,-1
   1d9fc:	03448513          	addi	a0,s1,52
   1da00:	bf1f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1da04:	b7c9                	c.j	1d9c6 <dwarf::value::as_flag() const+0xae>
    const unsigned char *p = (const unsigned char *)pos;
   1da06:	67c6                	c.ldsp	a5,80(sp)
    if (sec->ord == byte_order::lsb) {
   1da08:	6706                	c.ldsp	a4,64(sp)
   1da0a:	4f58                	c.lw	a4,28(a4)
   1da0c:	10070363          	beq	a4,zero,1db12 <dwarf::value::as_flag() const+0x1fa>
        val = (val << 8) | (uint64_t)p[i];
   1da10:	0007c483          	lbu	s1,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1da14:	a209                	c.j	1db16 <dwarf::value::as_flag() const+0x1fe>
   1da16:	55fd                	c.li	a1,-1
   1da18:	03040513          	addi	a0,s0,48
   1da1c:	bd5f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1da20:	aa31                	c.j	1db3c <dwarf::value::as_flag() const+0x224>
   1da22:	55fd                	c.li	a1,-1
   1da24:	03440513          	addi	a0,s0,52
   1da28:	bc9f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1da2c:	aa2d                	c.j	1db66 <dwarf::value::as_flag() const+0x24e>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as flag");
   1da2e:	4541                	c.li	a0,16
   1da30:	c61f80ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1da34:	84aa                	c.mv	s1,a0
   1da36:	444c                	c.lw	a1,12(s0)
   1da38:	850a                	c.mv	a0,sp
   1da3a:	55e0a0ef          	jal	ra,27f98 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1da3e:	00010617          	auipc	a2,0x10
   1da42:	7aa60613          	addi	a2,a2,1962 # 2e1e8 <std::piecewise_construct+0x1c8>
   1da46:	4581                	c.li	a1,0
   1da48:	850a                	c.mv	a0,sp
   1da4a:	bb7f80ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1da4e:	85aa                	c.mv	a1,a0
   1da50:	1000                	c.addi4spn	s0,sp,32
   1da52:	8522                	c.mv	a0,s0
   1da54:	c7df80ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1da58:	00010597          	auipc	a1,0x10
   1da5c:	7f058593          	addi	a1,a1,2032 # 2e248 <std::piecewise_construct+0x228>
   1da60:	8522                	c.mv	a0,s0
   1da62:	fdff80ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1da66:	85aa                	c.mv	a1,a0
   1da68:	0080                	c.addi4spn	s0,sp,64
   1da6a:	8522                	c.mv	a0,s0
   1da6c:	c65f80ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1da70:	85a2                	c.mv	a1,s0
   1da72:	8526                	c.mv	a0,s1
   1da74:	81cf90ef          	jal	ra,16a90 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1da78:	0001d797          	auipc	a5,0x1d
   1da7c:	9e87b783          	ld	a5,-1560(a5) # 3a460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   1da80:	07c1                	c.addi	a5,16
   1da82:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1da84:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   1da86:	089c                	c.addi4spn	a5,sp,80
   1da88:	00f50463          	beq	a0,a5,1da90 <dwarf::value::as_flag() const+0x178>
   1da8c:	d15f80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1da90:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1da92:	181c                	c.addi4spn	a5,sp,48
   1da94:	00f50463          	beq	a0,a5,1da9c <dwarf::value::as_flag() const+0x184>
   1da98:	d09f80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1da9c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1da9e:	081c                	c.addi4spn	a5,sp,16
   1daa0:	00f50463          	beq	a0,a5,1daa8 <dwarf::value::as_flag() const+0x190>
   1daa4:	cfdf80ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1daa8:	0001d617          	auipc	a2,0x1d
   1daac:	b4863603          	ld	a2,-1208(a2) # 3a5f0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1aaa0>
   1dab0:	0001d597          	auipc	a1,0x1d
   1dab4:	b005b583          	ld	a1,-1280(a1) # 3a5b0 <typeinfo for dwarf::value_type_mismatch@@Base+0xca18>
   1dab8:	8526                	c.mv	a0,s1
   1daba:	ea7f80ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1dabe:	842a                	c.mv	s0,a0
   1dac0:	6526                	c.ldsp	a0,72(sp)
   1dac2:	c511                	c.beqz	a0,1dace <dwarf::value::as_flag() const+0x1b6>
	  _M_pi->_M_release();
   1dac4:	0001d317          	auipc	t1,0x1d
   1dac8:	91c33303          	ld	t1,-1764(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   1dacc:	9302                	c.jalr	t1
   1dace:	8522                	c.mv	a0,s0
   1dad0:	ec1f80ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1dad4:	842a                	c.mv	s0,a0
   1dad6:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   1dad8:	089c                	c.addi4spn	a5,sp,80
   1dada:	00f50463          	beq	a0,a5,1dae2 <dwarf::value::as_flag() const+0x1ca>
   1dade:	cc3f80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1dae2:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1dae4:	181c                	c.addi4spn	a5,sp,48
   1dae6:	00f50463          	beq	a0,a5,1daee <dwarf::value::as_flag() const+0x1d6>
   1daea:	cb7f80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1daee:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1daf0:	081c                	c.addi4spn	a5,sp,16
   1daf2:	00f50463          	beq	a0,a5,1dafa <dwarf::value::as_flag() const+0x1e2>
   1daf6:	cabf80ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1dafa:	8526                	c.mv	a0,s1
   1dafc:	c55f80ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1db00:	8522                	c.mv	a0,s0
   1db02:	e8ff80ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1db06:	842a                	c.mv	s0,a0
   1db08:	bfe9                	c.j	1dae2 <dwarf::value::as_flag() const+0x1ca>
   1db0a:	842a                	c.mv	s0,a0
   1db0c:	b7cd                	c.j	1daee <dwarf::value::as_flag() const+0x1d6>
   1db0e:	842a                	c.mv	s0,a0
   1db10:	b7ed                	c.j	1dafa <dwarf::value::as_flag() const+0x1e2>
        val |= ((uint64_t)p[i]) << (i * 8);
   1db12:	0007c483          	lbu	s1,0(a5)
    pos += sizeof(T);
   1db16:	0785                	c.addi	a5,1
   1db18:	e8be                	c.sdsp	a5,80(sp)
    return cur.fixed<ubyte>() != 0;
   1db1a:	009034b3          	sltu	s1,zero,s1
	if (_M_pi != nullptr)
   1db1e:	6426                	c.ldsp	s0,72(sp)
   1db20:	e0040ae3          	beq	s0,zero,1d934 <dwarf::value::as_flag() const+0x1c>
    if (__is_single_threaded())
   1db24:	0001d797          	auipc	a5,0x1d
   1db28:	9747b783          	ld	a5,-1676(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1db2c:	0007c783          	lbu	a5,0(a5)
   1db30:	ee0783e3          	beq	a5,zero,1da16 <dwarf::value::as_flag() const+0xfe>
    _Atomic_word __result = *__mem;
   1db34:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1db36:	fff5079b          	addiw	a5,a0,-1
   1db3a:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1db3c:	4785                	c.li	a5,1
   1db3e:	def51be3          	bne	a0,a5,1d934 <dwarf::value::as_flag() const+0x1c>
	_M_dispose();
   1db42:	601c                	c.ld	a5,0(s0)
   1db44:	6b9c                	c.ld	a5,16(a5)
   1db46:	8522                	c.mv	a0,s0
   1db48:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1db4a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1db4e:	0001d797          	auipc	a5,0x1d
   1db52:	94a7b783          	ld	a5,-1718(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1db56:	0007c783          	lbu	a5,0(a5)
   1db5a:	ec0784e3          	beq	a5,zero,1da22 <dwarf::value::as_flag() const+0x10a>
    _Atomic_word __result = *__mem;
   1db5e:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1db60:	fff5079b          	addiw	a5,a0,-1
   1db64:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1db66:	4785                	c.li	a5,1
   1db68:	dcf516e3          	bne	a0,a5,1d934 <dwarf::value::as_flag() const+0x1c>
	    _M_destroy();
   1db6c:	601c                	c.ld	a5,0(s0)
   1db6e:	6f9c                	c.ld	a5,24(a5)
   1db70:	8522                	c.mv	a0,s0
   1db72:	9782                	c.jalr	a5
   1db74:	b3c1                	c.j	1d934 <dwarf::value::as_flag() const+0x1c>
    cursor cur(cu->data(), offset);
   1db76:	6818                	c.ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1db78:	e0ca                	c.sdsp	s2,64(sp)
      : _M_pi(__r._M_pi)
   1db7a:	e482                	c.sdsp	zero,72(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1db7c:	00893783          	ld	a5,8(s2)
   1db80:	97ba                	c.add	a5,a4
   1db82:	e8be                	c.sdsp	a5,80(sp)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1db84:	6786                	c.ldsp	a5,64(sp)
   1db86:	6b98                	c.ld	a4,16(a5)
   1db88:	67c6                	c.ldsp	a5,80(sp)
   1db8a:	e6e7eee3          	bltu	a5,a4,1da06 <dwarf::value::as_flag() const+0xee>
      underflow();
   1db8e:	0088                	c.addi4spn	a0,sp,64
   1db90:	b43fd0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
   1db94:	bd8d                	c.j	1da06 <dwarf::value::as_flag() const+0xee>

000000000001db96 <dwarf::value::as_cstr(unsigned long*) const>:
  size_t size;
  const char *s = as_cstr(&size);
  return string(s, size);
}

const char *value::as_cstr(size_t *size_out) const {
   1db96:	7131                	c.addi16sp	sp,-192
   1db98:	fd06                	c.sdsp	ra,184(sp)
   1db9a:	f922                	c.sdsp	s0,176(sp)
   1db9c:	f526                	c.sdsp	s1,168(sp)
   1db9e:	f14a                	c.sdsp	s2,160(sp)
   1dba0:	ed4e                	c.sdsp	s3,152(sp)
   1dba2:	e952                	c.sdsp	s4,144(sp)
   1dba4:	842a                	c.mv	s0,a0
   1dba6:	892e                	c.mv	s2,a1
  cursor cur(cu->data(), offset);
   1dba8:	6108                	c.ld	a0,0(a0)
   1dbaa:	f8ff90ef          	jal	ra,17b38 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1dbae:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1dbb2:	6504                	c.ld	s1,8(a0)
	if (_M_pi != nullptr)
   1dbb4:	34048e63          	beq	s1,zero,1df10 <dwarf::value::as_cstr(unsigned long*) const+0x37a>
    if (__is_single_threaded())
   1dbb8:	0001d797          	auipc	a5,0x1d
   1dbbc:	8e07b783          	ld	a5,-1824(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1dbc0:	0007c783          	lbu	a5,0(a5)
   1dbc4:	cfad                	c.beqz	a5,1dc3e <dwarf::value::as_cstr(unsigned long*) const+0xa8>
  { *__mem += __val; }
   1dbc6:	589c                	c.lw	a5,48(s1)
   1dbc8:	2785                	c.addiw	a5,1
   1dbca:	d89c                	c.sw	a5,48(s1)
   1dbcc:	01043a03          	ld	s4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1dbd0:	f4ce                	c.sdsp	s3,104(sp)
      : _M_pi(__r._M_pi)
   1dbd2:	f8a6                	c.sdsp	s1,112(sp)
    if (__is_single_threaded())
   1dbd4:	0001d797          	auipc	a5,0x1d
   1dbd8:	8c47b783          	ld	a5,-1852(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1dbdc:	0007c783          	lbu	a5,0(a5)
   1dbe0:	c7ad                	c.beqz	a5,1dc4a <dwarf::value::as_cstr(unsigned long*) const+0xb4>
  { *__mem += __val; }
   1dbe2:	589c                	c.lw	a5,48(s1)
   1dbe4:	2785                	c.addiw	a5,1
   1dbe6:	d89c                	c.sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   1dbe8:	0089b783          	ld	a5,8(s3)
   1dbec:	97d2                	c.add	a5,s4
   1dbee:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   1dbf0:	0001d797          	auipc	a5,0x1d
   1dbf4:	8a87b783          	ld	a5,-1880(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1dbf8:	0007c783          	lbu	a5,0(a5)
   1dbfc:	cfa9                	c.beqz	a5,1dc56 <dwarf::value::as_cstr(unsigned long*) const+0xc0>
    _Atomic_word __result = *__mem;
   1dbfe:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1dc00:	fff5079b          	addiw	a5,a0,-1
   1dc04:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1dc06:	4785                	c.li	a5,1
   1dc08:	30f51b63          	bne	a0,a5,1df1e <dwarf::value::as_cstr(unsigned long*) const+0x388>
	_M_dispose();
   1dc0c:	609c                	c.ld	a5,0(s1)
   1dc0e:	6b9c                	c.ld	a5,16(a5)
   1dc10:	8526                	c.mv	a0,s1
   1dc12:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1dc14:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1dc18:	0001d797          	auipc	a5,0x1d
   1dc1c:	8807b783          	ld	a5,-1920(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1dc20:	0007c783          	lbu	a5,0(a5)
   1dc24:	cf9d                	c.beqz	a5,1dc62 <dwarf::value::as_cstr(unsigned long*) const+0xcc>
    _Atomic_word __result = *__mem;
   1dc26:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1dc28:	fff5079b          	addiw	a5,a0,-1
   1dc2c:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1dc2e:	4785                	c.li	a5,1
   1dc30:	2ef51763          	bne	a0,a5,1df1e <dwarf::value::as_cstr(unsigned long*) const+0x388>
	    _M_destroy();
   1dc34:	609c                	c.ld	a5,0(s1)
   1dc36:	6f9c                	c.ld	a5,24(a5)
   1dc38:	8526                	c.mv	a0,s1
   1dc3a:	9782                	c.jalr	a5
   1dc3c:	a4cd                	c.j	1df1e <dwarf::value::as_cstr(unsigned long*) const+0x388>
      __atomic_add(__mem, __val);
   1dc3e:	4585                	c.li	a1,1
   1dc40:	03048513          	addi	a0,s1,48
   1dc44:	96df80ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1dc48:	b751                	c.j	1dbcc <dwarf::value::as_cstr(unsigned long*) const+0x36>
   1dc4a:	4585                	c.li	a1,1
   1dc4c:	03048513          	addi	a0,s1,48
   1dc50:	961f80ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1dc54:	bf51                	c.j	1dbe8 <dwarf::value::as_cstr(unsigned long*) const+0x52>
      return __exchange_and_add(__mem, __val);
   1dc56:	55fd                	c.li	a1,-1
   1dc58:	03048513          	addi	a0,s1,48
   1dc5c:	995f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1dc60:	b75d                	c.j	1dc06 <dwarf::value::as_cstr(unsigned long*) const+0x70>
   1dc62:	55fd                	c.li	a1,-1
   1dc64:	03448513          	addi	a0,s1,52
   1dc68:	989f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1dc6c:	b7c9                	c.j	1dc2e <dwarf::value::as_cstr(unsigned long*) const+0x98>
  switch (form) {
  case DW_FORM::string:
    return cur.cstr(size_out);
   1dc6e:	85ca                	c.mv	a1,s2
   1dc70:	10a8                	c.addi4spn	a0,sp,104
   1dc72:	9abfd0ef          	jal	ra,1b61c <dwarf::cursor::cstr(unsigned long*)>
   1dc76:	842a                	c.mv	s0,a0
	if (_M_pi != nullptr)
   1dc78:	74c6                	c.ldsp	s1,112(sp)
   1dc7a:	c085                	c.beqz	s1,1dc9a <dwarf::value::as_cstr(unsigned long*) const+0x104>
    if (__is_single_threaded())
   1dc7c:	0001d797          	auipc	a5,0x1d
   1dc80:	81c7b783          	ld	a5,-2020(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1dc84:	0007c783          	lbu	a5,0(a5)
   1dc88:	1e078063          	beq	a5,zero,1de68 <dwarf::value::as_cstr(unsigned long*) const+0x2d2>
    _Atomic_word __result = *__mem;
   1dc8c:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1dc8e:	fff5079b          	addiw	a5,a0,-1
   1dc92:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1dc94:	4785                	c.li	a5,1
   1dc96:	1cf50f63          	beq	a0,a5,1de74 <dwarf::value::as_cstr(unsigned long*) const+0x2de>
    return scur.cstr(size_out);
  }
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as string");
  }
}
   1dc9a:	8522                	c.mv	a0,s0
   1dc9c:	70ea                	c.ldsp	ra,184(sp)
   1dc9e:	744a                	c.ldsp	s0,176(sp)
   1dca0:	74aa                	c.ldsp	s1,168(sp)
   1dca2:	790a                	c.ldsp	s2,160(sp)
   1dca4:	69ea                	c.ldsp	s3,152(sp)
   1dca6:	6a4a                	c.ldsp	s4,144(sp)
   1dca8:	6129                	c.addi16sp	sp,192
   1dcaa:	8082                	c.jr	ra
    section_offset off = cur.offset();
   1dcac:	84aa                	c.mv	s1,a0
    cursor scur(cu->get_dwarf().get_section(section_type::str), off);
   1dcae:	6008                	c.ld	a0,0(s0)
   1dcb0:	e7ff90ef          	jal	ra,17b2e <dwarf::unit::get_dwarf() const>
   1dcb4:	85aa                	c.mv	a1,a0
   1dcb6:	4629                	c.li	a2,10
   1dcb8:	0108                	c.addi4spn	a0,sp,128
   1dcba:	e8bf90ef          	jal	ra,17b44 <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1dcbe:	678a                	c.ldsp	a5,128(sp)
   1dcc0:	e4be                	c.sdsp	a5,72(sp)
      : _M_pi(__r._M_pi)
   1dcc2:	652a                	c.ldsp	a0,136(sp)
   1dcc4:	e8aa                	c.sdsp	a0,80(sp)
	if (_M_pi != nullptr)
   1dcc6:	c919                	c.beqz	a0,1dcdc <dwarf::value::as_cstr(unsigned long*) const+0x146>
    if (__is_single_threaded())
   1dcc8:	0001c797          	auipc	a5,0x1c
   1dccc:	7d07b783          	ld	a5,2000(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1dcd0:	0007c783          	lbu	a5,0(a5)
   1dcd4:	cf95                	c.beqz	a5,1dd10 <dwarf::value::as_cstr(unsigned long*) const+0x17a>
  { *__mem += __val; }
   1dcd6:	591c                	c.lw	a5,48(a0)
   1dcd8:	2785                	c.addiw	a5,1
   1dcda:	d91c                	c.sw	a5,48(a0)
   1dcdc:	678a                	c.ldsp	a5,128(sp)
   1dcde:	679c                	c.ld	a5,8(a5)
   1dce0:	00978533          	add	a0,a5,s1
   1dce4:	ecaa                	c.sdsp	a0,88(sp)
	if (_M_pi != nullptr)
   1dce6:	642a                	c.ldsp	s0,136(sp)
   1dce8:	cc19                	c.beqz	s0,1dd06 <dwarf::value::as_cstr(unsigned long*) const+0x170>
    if (__is_single_threaded())
   1dcea:	0001c797          	auipc	a5,0x1c
   1dcee:	7ae7b783          	ld	a5,1966(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1dcf2:	0007c783          	lbu	a5,0(a5)
   1dcf6:	c39d                	c.beqz	a5,1dd1c <dwarf::value::as_cstr(unsigned long*) const+0x186>
    _Atomic_word __result = *__mem;
   1dcf8:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1dcfa:	fff5079b          	addiw	a5,a0,-1
   1dcfe:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1dd00:	4785                	c.li	a5,1
   1dd02:	02f50363          	beq	a0,a5,1dd28 <dwarf::value::as_cstr(unsigned long*) const+0x192>
    return scur.cstr(size_out);
   1dd06:	85ca                	c.mv	a1,s2
   1dd08:	00a8                	c.addi4spn	a0,sp,72
   1dd0a:	913fd0ef          	jal	ra,1b61c <dwarf::cursor::cstr(unsigned long*)>
   1dd0e:	a8a1                	c.j	1dd66 <dwarf::value::as_cstr(unsigned long*) const+0x1d0>
      __atomic_add(__mem, __val);
   1dd10:	4585                	c.li	a1,1
   1dd12:	03050513          	addi	a0,a0,48
   1dd16:	89bf80ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1dd1a:	b7c9                	c.j	1dcdc <dwarf::value::as_cstr(unsigned long*) const+0x146>
      return __exchange_and_add(__mem, __val);
   1dd1c:	55fd                	c.li	a1,-1
   1dd1e:	03040513          	addi	a0,s0,48
   1dd22:	8cff80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1dd26:	bfe9                	c.j	1dd00 <dwarf::value::as_cstr(unsigned long*) const+0x16a>
	_M_dispose();
   1dd28:	601c                	c.ld	a5,0(s0)
   1dd2a:	6b9c                	c.ld	a5,16(a5)
   1dd2c:	8522                	c.mv	a0,s0
   1dd2e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1dd30:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1dd34:	0001c797          	auipc	a5,0x1c
   1dd38:	7647b783          	ld	a5,1892(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1dd3c:	0007c783          	lbu	a5,0(a5)
   1dd40:	cf89                	c.beqz	a5,1dd5a <dwarf::value::as_cstr(unsigned long*) const+0x1c4>
    _Atomic_word __result = *__mem;
   1dd42:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1dd44:	fff5079b          	addiw	a5,a0,-1
   1dd48:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1dd4a:	4785                	c.li	a5,1
   1dd4c:	faf51de3          	bne	a0,a5,1dd06 <dwarf::value::as_cstr(unsigned long*) const+0x170>
	    _M_destroy();
   1dd50:	601c                	c.ld	a5,0(s0)
   1dd52:	6f9c                	c.ld	a5,24(a5)
   1dd54:	8522                	c.mv	a0,s0
   1dd56:	9782                	c.jalr	a5
   1dd58:	b77d                	c.j	1dd06 <dwarf::value::as_cstr(unsigned long*) const+0x170>
      return __exchange_and_add(__mem, __val);
   1dd5a:	55fd                	c.li	a1,-1
   1dd5c:	03440513          	addi	a0,s0,52
   1dd60:	891f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1dd64:	b7dd                	c.j	1dd4a <dwarf::value::as_cstr(unsigned long*) const+0x1b4>
   1dd66:	842a                	c.mv	s0,a0
	if (_M_pi != nullptr)
   1dd68:	64c6                	c.ldsp	s1,80(sp)
   1dd6a:	f00487e3          	beq	s1,zero,1dc78 <dwarf::value::as_cstr(unsigned long*) const+0xe2>
    if (__is_single_threaded())
   1dd6e:	0001c797          	auipc	a5,0x1c
   1dd72:	72a7b783          	ld	a5,1834(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1dd76:	0007c783          	lbu	a5,0(a5)
   1dd7a:	c3a9                	c.beqz	a5,1ddbc <dwarf::value::as_cstr(unsigned long*) const+0x226>
    _Atomic_word __result = *__mem;
   1dd7c:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1dd7e:	fff5079b          	addiw	a5,a0,-1
   1dd82:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1dd84:	4785                	c.li	a5,1
   1dd86:	eef519e3          	bne	a0,a5,1dc78 <dwarf::value::as_cstr(unsigned long*) const+0xe2>
	_M_dispose();
   1dd8a:	609c                	c.ld	a5,0(s1)
   1dd8c:	6b9c                	c.ld	a5,16(a5)
   1dd8e:	8526                	c.mv	a0,s1
   1dd90:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1dd92:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1dd96:	0001c797          	auipc	a5,0x1c
   1dd9a:	7027b783          	ld	a5,1794(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1dd9e:	0007c783          	lbu	a5,0(a5)
   1dda2:	c39d                	c.beqz	a5,1ddc8 <dwarf::value::as_cstr(unsigned long*) const+0x232>
    _Atomic_word __result = *__mem;
   1dda4:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1dda6:	fff5079b          	addiw	a5,a0,-1
   1ddaa:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1ddac:	4785                	c.li	a5,1
   1ddae:	ecf515e3          	bne	a0,a5,1dc78 <dwarf::value::as_cstr(unsigned long*) const+0xe2>
	    _M_destroy();
   1ddb2:	609c                	c.ld	a5,0(s1)
   1ddb4:	6f9c                	c.ld	a5,24(a5)
   1ddb6:	8526                	c.mv	a0,s1
   1ddb8:	9782                	c.jalr	a5
   1ddba:	bd7d                	c.j	1dc78 <dwarf::value::as_cstr(unsigned long*) const+0xe2>
      return __exchange_and_add(__mem, __val);
   1ddbc:	55fd                	c.li	a1,-1
   1ddbe:	03048513          	addi	a0,s1,48
   1ddc2:	82ff80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ddc6:	bf7d                	c.j	1dd84 <dwarf::value::as_cstr(unsigned long*) const+0x1ee>
   1ddc8:	55fd                	c.li	a1,-1
   1ddca:	03448513          	addi	a0,s1,52
   1ddce:	823f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ddd2:	bfe9                	c.j	1ddac <dwarf::value::as_cstr(unsigned long*) const+0x216>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as string");
   1ddd4:	4541                	c.li	a0,16
   1ddd6:	8bbf80ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1ddda:	84aa                	c.mv	s1,a0
   1dddc:	444c                	c.lw	a1,12(s0)
   1ddde:	0028                	c.addi4spn	a0,sp,8
   1dde0:	1b80a0ef          	jal	ra,27f98 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1dde4:	00010617          	auipc	a2,0x10
   1dde8:	40460613          	addi	a2,a2,1028 # 2e1e8 <std::piecewise_construct+0x1c8>
   1ddec:	4581                	c.li	a1,0
   1ddee:	0028                	c.addi4spn	a0,sp,8
   1ddf0:	811f80ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1ddf4:	85aa                	c.mv	a1,a0
   1ddf6:	1020                	c.addi4spn	s0,sp,40
   1ddf8:	8522                	c.mv	a0,s0
   1ddfa:	8d7f80ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1ddfe:	00010597          	auipc	a1,0x10
   1de02:	45a58593          	addi	a1,a1,1114 # 2e258 <std::piecewise_construct+0x238>
   1de06:	8522                	c.mv	a0,s0
   1de08:	c39f80ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1de0c:	85aa                	c.mv	a1,a0
   1de0e:	00a0                	c.addi4spn	s0,sp,72
   1de10:	8522                	c.mv	a0,s0
   1de12:	8bff80ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1de16:	85a2                	c.mv	a1,s0
   1de18:	8526                	c.mv	a0,s1
   1de1a:	c77f80ef          	jal	ra,16a90 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1de1e:	0001c797          	auipc	a5,0x1c
   1de22:	6427b783          	ld	a5,1602(a5) # 3a460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   1de26:	07c1                	c.addi	a5,16
   1de28:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1de2a:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1de2c:	08bc                	c.addi4spn	a5,sp,88
   1de2e:	00f50463          	beq	a0,a5,1de36 <dwarf::value::as_cstr(unsigned long*) const+0x2a0>
   1de32:	96ff80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1de36:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1de38:	183c                	c.addi4spn	a5,sp,56
   1de3a:	00f50463          	beq	a0,a5,1de42 <dwarf::value::as_cstr(unsigned long*) const+0x2ac>
   1de3e:	963f80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1de42:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1de44:	083c                	c.addi4spn	a5,sp,24
   1de46:	00f50463          	beq	a0,a5,1de4e <dwarf::value::as_cstr(unsigned long*) const+0x2b8>
   1de4a:	957f80ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1de4e:	0001c617          	auipc	a2,0x1c
   1de52:	7a263603          	ld	a2,1954(a2) # 3a5f0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1aaa0>
   1de56:	0001c597          	auipc	a1,0x1c
   1de5a:	75a5b583          	ld	a1,1882(a1) # 3a5b0 <typeinfo for dwarf::value_type_mismatch@@Base+0xca18>
   1de5e:	8526                	c.mv	a0,s1
   1de60:	b01f80ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1de64:	842a                	c.mv	s0,a0
   1de66:	a8b1                	c.j	1dec2 <dwarf::value::as_cstr(unsigned long*) const+0x32c>
   1de68:	55fd                	c.li	a1,-1
   1de6a:	03048513          	addi	a0,s1,48
   1de6e:	f82f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1de72:	b50d                	c.j	1dc94 <dwarf::value::as_cstr(unsigned long*) const+0xfe>
	_M_dispose();
   1de74:	609c                	c.ld	a5,0(s1)
   1de76:	6b9c                	c.ld	a5,16(a5)
   1de78:	8526                	c.mv	a0,s1
   1de7a:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1de7c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1de80:	0001c797          	auipc	a5,0x1c
   1de84:	6187b783          	ld	a5,1560(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1de88:	0007c783          	lbu	a5,0(a5)
   1de8c:	cf89                	c.beqz	a5,1dea6 <dwarf::value::as_cstr(unsigned long*) const+0x310>
    _Atomic_word __result = *__mem;
   1de8e:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1de90:	fff5079b          	addiw	a5,a0,-1
   1de94:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1de96:	4785                	c.li	a5,1
   1de98:	e0f511e3          	bne	a0,a5,1dc9a <dwarf::value::as_cstr(unsigned long*) const+0x104>
	    _M_destroy();
   1de9c:	609c                	c.ld	a5,0(s1)
   1de9e:	6f9c                	c.ld	a5,24(a5)
   1dea0:	8526                	c.mv	a0,s1
   1dea2:	9782                	c.jalr	a5
   1dea4:	bbdd                	c.j	1dc9a <dwarf::value::as_cstr(unsigned long*) const+0x104>
      return __exchange_and_add(__mem, __val);
   1dea6:	55fd                	c.li	a1,-1
   1dea8:	03448513          	addi	a0,s1,52
   1deac:	f44f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1deb0:	b7dd                	c.j	1de96 <dwarf::value::as_cstr(unsigned long*) const+0x300>
	if (_M_pi != nullptr)
   1deb2:	842a                	c.mv	s0,a0
   1deb4:	6546                	c.ldsp	a0,80(sp)
   1deb6:	c511                	c.beqz	a0,1dec2 <dwarf::value::as_cstr(unsigned long*) const+0x32c>
	  _M_pi->_M_release();
   1deb8:	0001c317          	auipc	t1,0x1c
   1debc:	52833303          	ld	t1,1320(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   1dec0:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   1dec2:	7546                	c.ldsp	a0,112(sp)
   1dec4:	c511                	c.beqz	a0,1ded0 <dwarf::value::as_cstr(unsigned long*) const+0x33a>
	  _M_pi->_M_release();
   1dec6:	0001c317          	auipc	t1,0x1c
   1deca:	51a33303          	ld	t1,1306(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   1dece:	9302                	c.jalr	t1
   1ded0:	8522                	c.mv	a0,s0
   1ded2:	abff80ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1ded6:	842a                	c.mv	s0,a0
   1ded8:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1deda:	08bc                	c.addi4spn	a5,sp,88
   1dedc:	00f50463          	beq	a0,a5,1dee4 <dwarf::value::as_cstr(unsigned long*) const+0x34e>
   1dee0:	8c1f80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1dee4:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1dee6:	183c                	c.addi4spn	a5,sp,56
   1dee8:	00f50463          	beq	a0,a5,1def0 <dwarf::value::as_cstr(unsigned long*) const+0x35a>
   1deec:	8b5f80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1def0:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1def2:	083c                	c.addi4spn	a5,sp,24
   1def4:	00f50463          	beq	a0,a5,1defc <dwarf::value::as_cstr(unsigned long*) const+0x366>
   1def8:	8a9f80ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1defc:	8526                	c.mv	a0,s1
   1defe:	853f80ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1df02:	b7c1                	c.j	1dec2 <dwarf::value::as_cstr(unsigned long*) const+0x32c>
      { return _M_dataplus._M_p; }
   1df04:	842a                	c.mv	s0,a0
   1df06:	bff9                	c.j	1dee4 <dwarf::value::as_cstr(unsigned long*) const+0x34e>
   1df08:	842a                	c.mv	s0,a0
   1df0a:	b7dd                	c.j	1def0 <dwarf::value::as_cstr(unsigned long*) const+0x35a>
   1df0c:	842a                	c.mv	s0,a0
   1df0e:	b7fd                	c.j	1defc <dwarf::value::as_cstr(unsigned long*) const+0x366>
  cursor cur(cu->data(), offset);
   1df10:	6818                	c.ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1df12:	f4ce                	c.sdsp	s3,104(sp)
      : _M_pi(__r._M_pi)
   1df14:	f882                	c.sdsp	zero,112(sp)
   1df16:	0089b783          	ld	a5,8(s3)
   1df1a:	97ba                	c.add	a5,a4
   1df1c:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
   1df1e:	441c                	c.lw	a5,8(s0)
   1df20:	4721                	c.li	a4,8
   1df22:	d4e786e3          	beq	a5,a4,1dc6e <dwarf::value::as_cstr(unsigned long*) const+0xd8>
   1df26:	4739                	c.li	a4,14
   1df28:	eae796e3          	bne	a5,a4,1ddd4 <dwarf::value::as_cstr(unsigned long*) const+0x23e>
    section_offset off = cur.offset();
   1df2c:	10a8                	c.addi4spn	a0,sp,104
   1df2e:	ccbfd0ef          	jal	ra,1bbf8 <dwarf::cursor::offset()>
   1df32:	bbad                	c.j	1dcac <dwarf::value::as_cstr(unsigned long*) const+0x116>

000000000001df34 <dwarf::value::as_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) const>:
void value::as_string(string &buf) const {
   1df34:	7179                	c.addi16sp	sp,-48
   1df36:	f406                	c.sdsp	ra,40(sp)
   1df38:	f022                	c.sdsp	s0,32(sp)
   1df3a:	ec26                	c.sdsp	s1,24(sp)
   1df3c:	842e                	c.mv	s0,a1
  const char *p = as_cstr(&size);
   1df3e:	002c                	c.addi4spn	a1,sp,8
   1df40:	c57ff0ef          	jal	ra,1db96 <dwarf::value::as_cstr(unsigned long*) const>
   1df44:	84aa                	c.mv	s1,a0
      { this->resize(__n, _CharT()); }
   1df46:	4601                	c.li	a2,0
   1df48:	65a2                	c.ldsp	a1,8(sp)
   1df4a:	8522                	c.mv	a0,s0
   1df4c:	ed4f80ef          	jal	ra,16620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@plt>
  memmove(&buf.front(), p, size);
   1df50:	6622                	c.ldsp	a2,8(sp)
   1df52:	85a6                	c.mv	a1,s1
   1df54:	6008                	c.ld	a0,0(s0)
   1df56:	acbf80ef          	jal	ra,16a20 <memmove@plt>
}
   1df5a:	70a2                	c.ldsp	ra,40(sp)
   1df5c:	7402                	c.ldsp	s0,32(sp)
   1df5e:	64e2                	c.ldsp	s1,24(sp)
   1df60:	6145                	c.addi16sp	sp,48
   1df62:	8082                	c.jr	ra

000000000001df64 <dwarf::value::as_sec_offset() const>:

section_offset value::as_sec_offset() const {
   1df64:	7171                	c.addi16sp	sp,-176
   1df66:	f506                	c.sdsp	ra,168(sp)
   1df68:	f122                	c.sdsp	s0,160(sp)
   1df6a:	ed26                	c.sdsp	s1,152(sp)
   1df6c:	e94a                	c.sdsp	s2,144(sp)
   1df6e:	e54e                	c.sdsp	s3,136(sp)
   1df70:	892a                	c.mv	s2,a0
  // Prior to DWARF 4, sec_offsets were encoded as data4 or
  // data8.
  cursor cur(cu->data(), offset);
   1df72:	6108                	c.ld	a0,0(a0)
   1df74:	bc5f90ef          	jal	ra,17b38 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1df78:	6104                	c.ld	s1,0(a0)
      : _M_pi(__r._M_pi)
   1df7a:	6500                	c.ld	s0,8(a0)
	if (_M_pi != nullptr)
   1df7c:	2c040b63          	beq	s0,zero,1e252 <dwarf::value::as_sec_offset() const+0x2ee>
    if (__is_single_threaded())
   1df80:	0001c797          	auipc	a5,0x1c
   1df84:	5187b783          	ld	a5,1304(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1df88:	0007c783          	lbu	a5,0(a5)
   1df8c:	cfa5                	c.beqz	a5,1e004 <dwarf::value::as_sec_offset() const+0xa0>
  { *__mem += __val; }
   1df8e:	581c                	c.lw	a5,48(s0)
   1df90:	2785                	c.addiw	a5,1
   1df92:	d81c                	c.sw	a5,48(s0)
   1df94:	01093983          	ld	s3,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1df98:	f4a6                	c.sdsp	s1,104(sp)
      : _M_pi(__r._M_pi)
   1df9a:	f8a2                	c.sdsp	s0,112(sp)
    if (__is_single_threaded())
   1df9c:	0001c797          	auipc	a5,0x1c
   1dfa0:	4fc7b783          	ld	a5,1276(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1dfa4:	0007c783          	lbu	a5,0(a5)
   1dfa8:	c7a5                	c.beqz	a5,1e010 <dwarf::value::as_sec_offset() const+0xac>
  { *__mem += __val; }
   1dfaa:	581c                	c.lw	a5,48(s0)
   1dfac:	2785                	c.addiw	a5,1
   1dfae:	d81c                	c.sw	a5,48(s0)
   1dfb0:	649c                	c.ld	a5,8(s1)
   1dfb2:	97ce                	c.add	a5,s3
   1dfb4:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   1dfb6:	0001c797          	auipc	a5,0x1c
   1dfba:	4e27b783          	ld	a5,1250(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1dfbe:	0007c783          	lbu	a5,0(a5)
   1dfc2:	cfa9                	c.beqz	a5,1e01c <dwarf::value::as_sec_offset() const+0xb8>
    _Atomic_word __result = *__mem;
   1dfc4:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1dfc6:	fff5079b          	addiw	a5,a0,-1
   1dfca:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1dfcc:	4785                	c.li	a5,1
   1dfce:	28f51963          	bne	a0,a5,1e260 <dwarf::value::as_sec_offset() const+0x2fc>
	_M_dispose();
   1dfd2:	601c                	c.ld	a5,0(s0)
   1dfd4:	6b9c                	c.ld	a5,16(a5)
   1dfd6:	8522                	c.mv	a0,s0
   1dfd8:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1dfda:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1dfde:	0001c797          	auipc	a5,0x1c
   1dfe2:	4ba7b783          	ld	a5,1210(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1dfe6:	0007c783          	lbu	a5,0(a5)
   1dfea:	cf9d                	c.beqz	a5,1e028 <dwarf::value::as_sec_offset() const+0xc4>
    _Atomic_word __result = *__mem;
   1dfec:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1dfee:	fff5079b          	addiw	a5,a0,-1
   1dff2:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1dff4:	4785                	c.li	a5,1
   1dff6:	26f51563          	bne	a0,a5,1e260 <dwarf::value::as_sec_offset() const+0x2fc>
	    _M_destroy();
   1dffa:	601c                	c.ld	a5,0(s0)
   1dffc:	6f9c                	c.ld	a5,24(a5)
   1dffe:	8522                	c.mv	a0,s0
   1e000:	9782                	c.jalr	a5
   1e002:	acb9                	c.j	1e260 <dwarf::value::as_sec_offset() const+0x2fc>
      __atomic_add(__mem, __val);
   1e004:	4585                	c.li	a1,1
   1e006:	03040513          	addi	a0,s0,48
   1e00a:	da6f80ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1e00e:	b759                	c.j	1df94 <dwarf::value::as_sec_offset() const+0x30>
   1e010:	4585                	c.li	a1,1
   1e012:	03040513          	addi	a0,s0,48
   1e016:	d9af80ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1e01a:	bf59                	c.j	1dfb0 <dwarf::value::as_sec_offset() const+0x4c>
      return __exchange_and_add(__mem, __val);
   1e01c:	55fd                	c.li	a1,-1
   1e01e:	03040513          	addi	a0,s0,48
   1e022:	dcef80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e026:	b75d                	c.j	1dfcc <dwarf::value::as_sec_offset() const+0x68>
   1e028:	55fd                	c.li	a1,-1
   1e02a:	03440513          	addi	a0,s0,52
   1e02e:	dc2f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e032:	b7c9                	c.j	1dff4 <dwarf::value::as_sec_offset() const+0x90>
  switch (form) {
   1e034:	4719                	c.li	a4,6
   1e036:	0ee79863          	bne	a5,a4,1e126 <dwarf::value::as_sec_offset() const+0x1c2>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1e03a:	77a6                	c.ldsp	a5,104(sp)
   1e03c:	6b98                	c.ld	a4,16(a5)
   1e03e:	77e6                	c.ldsp	a5,120(sp)
   1e040:	40f70633          	sub	a2,a4,a5
   1e044:	468d                	c.li	a3,3
   1e046:	00c6f463          	bgeu	a3,a2,1e04e <dwarf::value::as_sec_offset() const+0xea>
   1e04a:	00e7e563          	bltu	a5,a4,1e054 <dwarf::value::as_sec_offset() const+0xf0>
      underflow();
   1e04e:	10a8                	c.addi4spn	a0,sp,104
   1e050:	e82fd0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1e054:	7666                	c.ldsp	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1e056:	77a6                	c.ldsp	a5,104(sp)
   1e058:	4fdc                	c.lw	a5,28(a5)
   1e05a:	ebb9                	c.bnez	a5,1e0b0 <dwarf::value::as_sec_offset() const+0x14c>
   1e05c:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1e05e:	4401                	c.li	s0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1e060:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1e064:	0006c703          	lbu	a4,0(a3)
   1e068:	00f71733          	sll	a4,a4,a5
   1e06c:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1e06e:	0685                	c.addi	a3,1
   1e070:	27a1                	c.addiw	a5,8
   1e072:	feb799e3          	bne	a5,a1,1e064 <dwarf::value::as_sec_offset() const+0x100>
    pos += sizeof(T);
   1e076:	0611                	c.addi	a2,4
   1e078:	fcb2                	c.sdsp	a2,120(sp)
   1e07a:	1402                	c.slli	s0,0x20
   1e07c:	9001                	c.srli	s0,0x20
	if (_M_pi != nullptr)
   1e07e:	74c6                	c.ldsp	s1,112(sp)
   1e080:	c085                	c.beqz	s1,1e0a0 <dwarf::value::as_sec_offset() const+0x13c>
    if (__is_single_threaded())
   1e082:	0001c797          	auipc	a5,0x1c
   1e086:	4167b783          	ld	a5,1046(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e08a:	0007c783          	lbu	a5,0(a5)
   1e08e:	12078763          	beq	a5,zero,1e1bc <dwarf::value::as_sec_offset() const+0x258>
    _Atomic_word __result = *__mem;
   1e092:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1e094:	fff5079b          	addiw	a5,a0,-1
   1e098:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1e09a:	4785                	c.li	a5,1
   1e09c:	12f50663          	beq	a0,a5,1e1c8 <dwarf::value::as_sec_offset() const+0x264>
    return cur.offset();
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) +
                              " as sec_offset");
  }
}
   1e0a0:	8522                	c.mv	a0,s0
   1e0a2:	70aa                	c.ldsp	ra,168(sp)
   1e0a4:	740a                	c.ldsp	s0,160(sp)
   1e0a6:	64ea                	c.ldsp	s1,152(sp)
   1e0a8:	694a                	c.ldsp	s2,144(sp)
   1e0aa:	69aa                	c.ldsp	s3,136(sp)
   1e0ac:	614d                	c.addi16sp	sp,176
   1e0ae:	8082                	c.jr	ra
   1e0b0:	87b2                	c.mv	a5,a2
   1e0b2:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   1e0b6:	4401                	c.li	s0,0
        val = (val << 8) | (uint64_t)p[i];
   1e0b8:	0422                	c.slli	s0,0x8
   1e0ba:	0007c703          	lbu	a4,0(a5)
   1e0be:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1e0c0:	0785                	c.addi	a5,1
   1e0c2:	fed79be3          	bne	a5,a3,1e0b8 <dwarf::value::as_sec_offset() const+0x154>
   1e0c6:	bf45                	c.j	1e076 <dwarf::value::as_sec_offset() const+0x112>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1e0c8:	77a6                	c.ldsp	a5,104(sp)
   1e0ca:	6b98                	c.ld	a4,16(a5)
   1e0cc:	77e6                	c.ldsp	a5,120(sp)
   1e0ce:	40f70633          	sub	a2,a4,a5
   1e0d2:	469d                	c.li	a3,7
   1e0d4:	00c6f463          	bgeu	a3,a2,1e0dc <dwarf::value::as_sec_offset() const+0x178>
   1e0d8:	00e7e563          	bltu	a5,a4,1e0e2 <dwarf::value::as_sec_offset() const+0x17e>
      underflow();
   1e0dc:	10a8                	c.addi4spn	a0,sp,104
   1e0de:	df4fd0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1e0e2:	7666                	c.ldsp	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1e0e4:	77a6                	c.ldsp	a5,104(sp)
   1e0e6:	4fdc                	c.lw	a5,28(a5)
   1e0e8:	e38d                	c.bnez	a5,1e10a <dwarf::value::as_sec_offset() const+0x1a6>
   1e0ea:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1e0ec:	4401                	c.li	s0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1e0ee:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1e0f2:	0006c703          	lbu	a4,0(a3)
   1e0f6:	00f71733          	sll	a4,a4,a5
   1e0fa:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1e0fc:	0685                	c.addi	a3,1
   1e0fe:	27a1                	c.addiw	a5,8
   1e100:	feb799e3          	bne	a5,a1,1e0f2 <dwarf::value::as_sec_offset() const+0x18e>
    pos += sizeof(T);
   1e104:	0621                	c.addi	a2,8
   1e106:	fcb2                	c.sdsp	a2,120(sp)
   1e108:	bf9d                	c.j	1e07e <dwarf::value::as_sec_offset() const+0x11a>
   1e10a:	87b2                	c.mv	a5,a2
   1e10c:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1e110:	4401                	c.li	s0,0
        val = (val << 8) | (uint64_t)p[i];
   1e112:	0422                	c.slli	s0,0x8
   1e114:	0007c703          	lbu	a4,0(a5)
   1e118:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1e11a:	0785                	c.addi	a5,1
   1e11c:	fed79be3          	bne	a5,a3,1e112 <dwarf::value::as_sec_offset() const+0x1ae>
   1e120:	b7d5                	c.j	1e104 <dwarf::value::as_sec_offset() const+0x1a0>
    return cur.offset();
   1e122:	842a                	c.mv	s0,a0
   1e124:	bfa9                	c.j	1e07e <dwarf::value::as_sec_offset() const+0x11a>
                              " as sec_offset");
   1e126:	4541                	c.li	a0,16
   1e128:	d68f80ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1e12c:	84aa                	c.mv	s1,a0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   1e12e:	00c92583          	lw	a1,12(s2)
   1e132:	0028                	c.addi4spn	a0,sp,8
   1e134:	665090ef          	jal	ra,27f98 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1e138:	00010617          	auipc	a2,0x10
   1e13c:	0b060613          	addi	a2,a2,176 # 2e1e8 <std::piecewise_construct+0x1c8>
   1e140:	4581                	c.li	a1,0
   1e142:	0028                	c.addi4spn	a0,sp,8
   1e144:	cbcf80ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1e148:	85aa                	c.mv	a1,a0
   1e14a:	1020                	c.addi4spn	s0,sp,40
   1e14c:	8522                	c.mv	a0,s0
   1e14e:	d82f80ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1e152:	00010597          	auipc	a1,0x10
   1e156:	11658593          	addi	a1,a1,278 # 2e268 <std::piecewise_construct+0x248>
   1e15a:	8522                	c.mv	a0,s0
   1e15c:	8e5f80ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1e160:	85aa                	c.mv	a1,a0
   1e162:	00a0                	c.addi4spn	s0,sp,72
   1e164:	8522                	c.mv	a0,s0
   1e166:	d6af80ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1e16a:	85a2                	c.mv	a1,s0
   1e16c:	8526                	c.mv	a0,s1
   1e16e:	923f80ef          	jal	ra,16a90 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1e172:	0001c797          	auipc	a5,0x1c
   1e176:	2ee7b783          	ld	a5,750(a5) # 3a460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   1e17a:	07c1                	c.addi	a5,16
   1e17c:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1e17e:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1e180:	08bc                	c.addi4spn	a5,sp,88
   1e182:	00f50463          	beq	a0,a5,1e18a <dwarf::value::as_sec_offset() const+0x226>
   1e186:	e1af80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e18a:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1e18c:	183c                	c.addi4spn	a5,sp,56
   1e18e:	00f50463          	beq	a0,a5,1e196 <dwarf::value::as_sec_offset() const+0x232>
   1e192:	e0ef80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e196:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1e198:	083c                	c.addi4spn	a5,sp,24
   1e19a:	00f50463          	beq	a0,a5,1e1a2 <dwarf::value::as_sec_offset() const+0x23e>
   1e19e:	e02f80ef          	jal	ra,167a0 <operator delete(void*)@plt>
                              " as sec_offset");
   1e1a2:	0001c617          	auipc	a2,0x1c
   1e1a6:	44e63603          	ld	a2,1102(a2) # 3a5f0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1aaa0>
   1e1aa:	0001c597          	auipc	a1,0x1c
   1e1ae:	4065b583          	ld	a1,1030(a1) # 3a5b0 <typeinfo for dwarf::value_type_mismatch@@Base+0xca18>
   1e1b2:	8526                	c.mv	a0,s1
   1e1b4:	facf80ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1e1b8:	842a                	c.mv	s0,a0
   1e1ba:	a8a5                	c.j	1e232 <dwarf::value::as_sec_offset() const+0x2ce>
      return __exchange_and_add(__mem, __val);
   1e1bc:	55fd                	c.li	a1,-1
   1e1be:	03048513          	addi	a0,s1,48
   1e1c2:	c2ef80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e1c6:	bdd1                	c.j	1e09a <dwarf::value::as_sec_offset() const+0x136>
	_M_dispose();
   1e1c8:	609c                	c.ld	a5,0(s1)
   1e1ca:	6b9c                	c.ld	a5,16(a5)
   1e1cc:	8526                	c.mv	a0,s1
   1e1ce:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1e1d0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1e1d4:	0001c797          	auipc	a5,0x1c
   1e1d8:	2c47b783          	ld	a5,708(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e1dc:	0007c783          	lbu	a5,0(a5)
   1e1e0:	cf89                	c.beqz	a5,1e1fa <dwarf::value::as_sec_offset() const+0x296>
    _Atomic_word __result = *__mem;
   1e1e2:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1e1e4:	fff5079b          	addiw	a5,a0,-1
   1e1e8:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1e1ea:	4785                	c.li	a5,1
   1e1ec:	eaf51ae3          	bne	a0,a5,1e0a0 <dwarf::value::as_sec_offset() const+0x13c>
	    _M_destroy();
   1e1f0:	609c                	c.ld	a5,0(s1)
   1e1f2:	6f9c                	c.ld	a5,24(a5)
   1e1f4:	8526                	c.mv	a0,s1
   1e1f6:	9782                	c.jalr	a5
   1e1f8:	b565                	c.j	1e0a0 <dwarf::value::as_sec_offset() const+0x13c>
      return __exchange_and_add(__mem, __val);
   1e1fa:	55fd                	c.li	a1,-1
   1e1fc:	03448513          	addi	a0,s1,52
   1e200:	bf0f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e204:	b7dd                	c.j	1e1ea <dwarf::value::as_sec_offset() const+0x286>
      { return _M_dataplus._M_p; }
   1e206:	842a                	c.mv	s0,a0
   1e208:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1e20a:	08bc                	c.addi4spn	a5,sp,88
   1e20c:	00f50463          	beq	a0,a5,1e214 <dwarf::value::as_sec_offset() const+0x2b0>
   1e210:	d90f80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e214:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1e216:	183c                	c.addi4spn	a5,sp,56
   1e218:	00f50463          	beq	a0,a5,1e220 <dwarf::value::as_sec_offset() const+0x2bc>
   1e21c:	d84f80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e220:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1e222:	083c                	c.addi4spn	a5,sp,24
   1e224:	00f50463          	beq	a0,a5,1e22c <dwarf::value::as_sec_offset() const+0x2c8>
   1e228:	d78f80ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1e22c:	8526                	c.mv	a0,s1
   1e22e:	d22f80ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1e232:	7546                	c.ldsp	a0,112(sp)
   1e234:	c511                	c.beqz	a0,1e240 <dwarf::value::as_sec_offset() const+0x2dc>
	  _M_pi->_M_release();
   1e236:	0001c317          	auipc	t1,0x1c
   1e23a:	1aa33303          	ld	t1,426(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   1e23e:	9302                	c.jalr	t1
   1e240:	8522                	c.mv	a0,s0
   1e242:	f4ef80ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1e246:	842a                	c.mv	s0,a0
   1e248:	b7f1                	c.j	1e214 <dwarf::value::as_sec_offset() const+0x2b0>
   1e24a:	842a                	c.mv	s0,a0
   1e24c:	bfd1                	c.j	1e220 <dwarf::value::as_sec_offset() const+0x2bc>
   1e24e:	842a                	c.mv	s0,a0
   1e250:	bff1                	c.j	1e22c <dwarf::value::as_sec_offset() const+0x2c8>
  cursor cur(cu->data(), offset);
   1e252:	01093703          	ld	a4,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e256:	f4a6                	c.sdsp	s1,104(sp)
      : _M_pi(__r._M_pi)
   1e258:	f882                	c.sdsp	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1e25a:	649c                	c.ld	a5,8(s1)
   1e25c:	97ba                	c.add	a5,a4
   1e25e:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
   1e260:	00892783          	lw	a5,8(s2)
   1e264:	471d                	c.li	a4,7
   1e266:	e6e781e3          	beq	a5,a4,1e0c8 <dwarf::value::as_sec_offset() const+0x164>
   1e26a:	475d                	c.li	a4,23
   1e26c:	dce794e3          	bne	a5,a4,1e034 <dwarf::value::as_sec_offset() const+0xd0>
    return cur.offset();
   1e270:	10a8                	c.addi4spn	a0,sp,104
   1e272:	987fd0ef          	jal	ra,1bbf8 <dwarf::cursor::offset()>
   1e276:	b575                	c.j	1e122 <dwarf::value::as_sec_offset() const+0x1be>

000000000001e278 <dwarf::value::resolve_indirect(dwarf::DW_AT)>:

void value::resolve_indirect(DW_AT name) {
  if (form != DW_FORM::indirect)
   1e278:	4518                	c.lw	a4,8(a0)
   1e27a:	47d9                	c.li	a5,22
   1e27c:	00f70363          	beq	a4,a5,1e282 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xa>
   1e280:	8082                	c.jr	ra
void value::resolve_indirect(DW_AT name) {
   1e282:	711d                	c.addi16sp	sp,-96
   1e284:	ec86                	c.sdsp	ra,88(sp)
   1e286:	e8a2                	c.sdsp	s0,80(sp)
   1e288:	e4a6                	c.sdsp	s1,72(sp)
   1e28a:	e0ca                	c.sdsp	s2,64(sp)
   1e28c:	fc4e                	c.sdsp	s3,56(sp)
   1e28e:	f852                	c.sdsp	s4,48(sp)
   1e290:	842a                	c.mv	s0,a0
   1e292:	892e                	c.mv	s2,a1
    return;

  cursor c(cu->data(), offset);
   1e294:	6108                	c.ld	a0,0(a0)
   1e296:	8a3f90ef          	jal	ra,17b38 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e29a:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1e29e:	6504                	c.ld	s1,8(a0)
	if (_M_pi != nullptr)
   1e2a0:	1a048463          	beq	s1,zero,1e448 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1d0>
    if (__is_single_threaded())
   1e2a4:	0001c797          	auipc	a5,0x1c
   1e2a8:	1f47b783          	ld	a5,500(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e2ac:	0007c783          	lbu	a5,0(a5)
   1e2b0:	cfad                	c.beqz	a5,1e32a <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xb2>
  { *__mem += __val; }
   1e2b2:	589c                	c.lw	a5,48(s1)
   1e2b4:	2785                	c.addiw	a5,1
   1e2b6:	d89c                	c.sw	a5,48(s1)
   1e2b8:	01043a03          	ld	s4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e2bc:	e44e                	c.sdsp	s3,8(sp)
      : _M_pi(__r._M_pi)
   1e2be:	e826                	c.sdsp	s1,16(sp)
    if (__is_single_threaded())
   1e2c0:	0001c797          	auipc	a5,0x1c
   1e2c4:	1d87b783          	ld	a5,472(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e2c8:	0007c783          	lbu	a5,0(a5)
   1e2cc:	c7ad                	c.beqz	a5,1e336 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xbe>
  { *__mem += __val; }
   1e2ce:	589c                	c.lw	a5,48(s1)
   1e2d0:	2785                	c.addiw	a5,1
   1e2d2:	d89c                	c.sw	a5,48(s1)
   1e2d4:	0089b783          	ld	a5,8(s3)
   1e2d8:	97d2                	c.add	a5,s4
   1e2da:	ec3e                	c.sdsp	a5,24(sp)
    if (__is_single_threaded())
   1e2dc:	0001c797          	auipc	a5,0x1c
   1e2e0:	1bc7b783          	ld	a5,444(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e2e4:	0007c783          	lbu	a5,0(a5)
   1e2e8:	cfa9                	c.beqz	a5,1e342 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xca>
    _Atomic_word __result = *__mem;
   1e2ea:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1e2ec:	fff5079b          	addiw	a5,a0,-1
   1e2f0:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1e2f2:	4785                	c.li	a5,1
   1e2f4:	16f51163          	bne	a0,a5,1e456 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1de>
	_M_dispose();
   1e2f8:	609c                	c.ld	a5,0(s1)
   1e2fa:	6b9c                	c.ld	a5,16(a5)
   1e2fc:	8526                	c.mv	a0,s1
   1e2fe:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1e300:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1e304:	0001c797          	auipc	a5,0x1c
   1e308:	1947b783          	ld	a5,404(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e30c:	0007c783          	lbu	a5,0(a5)
   1e310:	cf9d                	c.beqz	a5,1e34e <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xd6>
    _Atomic_word __result = *__mem;
   1e312:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   1e314:	fff7871b          	addiw	a4,a5,-1
   1e318:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1e31a:	4705                	c.li	a4,1
   1e31c:	12e79d63          	bne	a5,a4,1e456 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1de>
	    _M_destroy();
   1e320:	609c                	c.ld	a5,0(s1)
   1e322:	6f9c                	c.ld	a5,24(a5)
   1e324:	8526                	c.mv	a0,s1
   1e326:	9782                	c.jalr	a5
   1e328:	a23d                	c.j	1e456 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1de>
      __atomic_add(__mem, __val);
   1e32a:	4585                	c.li	a1,1
   1e32c:	03048513          	addi	a0,s1,48
   1e330:	a80f80ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1e334:	b751                	c.j	1e2b8 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x40>
   1e336:	4585                	c.li	a1,1
   1e338:	03048513          	addi	a0,s1,48
   1e33c:	a74f80ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1e340:	bf51                	c.j	1e2d4 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x5c>
      return __exchange_and_add(__mem, __val);
   1e342:	55fd                	c.li	a1,-1
   1e344:	03048513          	addi	a0,s1,48
   1e348:	aa8f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e34c:	b75d                	c.j	1e2f2 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x7a>
   1e34e:	55fd                	c.li	a1,-1
   1e350:	03448513          	addi	a0,s1,52
   1e354:	a9cf80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e358:	87aa                	c.mv	a5,a0
   1e35a:	b7c1                	c.j	1e31a <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xa2>
    return 0;
   1e35c:	4601                	c.li	a2,0
  DW_FORM form;
  do {
    form = (DW_FORM)c.uleb128();
   1e35e:	2601                	c.addiw	a2,0
  } while (form == DW_FORM::indirect);
   1e360:	04961063          	bne	a2,s1,1e3a0 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x128>
    while (pos < sec->end) {
   1e364:	67e2                	c.ldsp	a5,24(sp)
      { return _M_ptr; }
   1e366:	65a2                	c.ldsp	a1,8(sp)
   1e368:	6998                	c.ld	a4,16(a1)
   1e36a:	02e7f763          	bgeu	a5,a4,1e398 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x120>
    std::uint64_t result = 0;
   1e36e:	4601                	c.li	a2,0
    int shift = 0;
   1e370:	884e                	c.mv	a6,s3
      uint8_t byte = *(uint8_t *)(pos++);
   1e372:	0785                	c.addi	a5,1
   1e374:	ec3e                	c.sdsp	a5,24(sp)
   1e376:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1e37a:	07f77693          	andi	a3,a4,127
   1e37e:	010696b3          	sll	a3,a3,a6
   1e382:	8e55                	c.or	a2,a3
      if ((byte & 0x80) == 0)
   1e384:	0187171b          	slliw	a4,a4,0x18
   1e388:	4187571b          	sraiw	a4,a4,0x18
   1e38c:	fc0759e3          	bge	a4,zero,1e35e <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xe6>
      shift += 7;
   1e390:	281d                	c.addiw	a6,7
    while (pos < sec->end) {
   1e392:	6998                	c.ld	a4,16(a1)
   1e394:	fce7efe3          	bltu	a5,a4,1e372 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xfa>
    underflow();
   1e398:	8552                	c.mv	a0,s4
   1e39a:	b38fd0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    return 0;
   1e39e:	bf7d                	c.j	1e35c <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xe4>
  typ = attribute_spec(name, form).type;
   1e3a0:	85ca                	c.mv	a1,s2
   1e3a2:	1008                	c.addi4spn	a0,sp,32
   1e3a4:	3bf010ef          	jal	ra,1ff62 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)>
   1e3a8:	57a2                	c.lwsp	a5,40(sp)
   1e3aa:	c45c                	c.sw	a5,12(s0)
  section_offset get_section_offset() const { return pos - sec->begin; }
   1e3ac:	67a2                	c.ldsp	a5,8(sp)
   1e3ae:	6798                	c.ld	a4,8(a5)
   1e3b0:	67e2                	c.ldsp	a5,24(sp)
   1e3b2:	8f99                	c.sub	a5,a4
  offset = c.get_section_offset();
   1e3b4:	e81c                	c.sd	a5,16(s0)
	if (_M_pi != nullptr)
   1e3b6:	6442                	c.ldsp	s0,16(sp)
   1e3b8:	cc19                	c.beqz	s0,1e3d6 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x15e>
    if (__is_single_threaded())
   1e3ba:	0001c797          	auipc	a5,0x1c
   1e3be:	0de7b783          	ld	a5,222(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e3c2:	0007c783          	lbu	a5,0(a5)
   1e3c6:	c385                	c.beqz	a5,1e3e6 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x16e>
    _Atomic_word __result = *__mem;
   1e3c8:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1e3ca:	fff5079b          	addiw	a5,a0,-1
   1e3ce:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1e3d0:	4785                	c.li	a5,1
   1e3d2:	02f50063          	beq	a0,a5,1e3f2 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x17a>
}
   1e3d6:	60e6                	c.ldsp	ra,88(sp)
   1e3d8:	6446                	c.ldsp	s0,80(sp)
   1e3da:	64a6                	c.ldsp	s1,72(sp)
   1e3dc:	6906                	c.ldsp	s2,64(sp)
   1e3de:	79e2                	c.ldsp	s3,56(sp)
   1e3e0:	7a42                	c.ldsp	s4,48(sp)
   1e3e2:	6125                	c.addi16sp	sp,96
   1e3e4:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   1e3e6:	55fd                	c.li	a1,-1
   1e3e8:	03040513          	addi	a0,s0,48
   1e3ec:	a04f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e3f0:	b7c5                	c.j	1e3d0 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x158>
	_M_dispose();
   1e3f2:	601c                	c.ld	a5,0(s0)
   1e3f4:	6b9c                	c.ld	a5,16(a5)
   1e3f6:	8522                	c.mv	a0,s0
   1e3f8:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1e3fa:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1e3fe:	0001c797          	auipc	a5,0x1c
   1e402:	09a7b783          	ld	a5,154(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e406:	0007c783          	lbu	a5,0(a5)
   1e40a:	cf89                	c.beqz	a5,1e424 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1ac>
    _Atomic_word __result = *__mem;
   1e40c:	585c                	c.lw	a5,52(s0)
    *__mem += __val;
   1e40e:	fff7871b          	addiw	a4,a5,-1
   1e412:	d858                	c.sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1e414:	4705                	c.li	a4,1
   1e416:	fce790e3          	bne	a5,a4,1e3d6 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x15e>
	    _M_destroy();
   1e41a:	601c                	c.ld	a5,0(s0)
   1e41c:	6f9c                	c.ld	a5,24(a5)
   1e41e:	8522                	c.mv	a0,s0
   1e420:	9782                	c.jalr	a5
   1e422:	bf55                	c.j	1e3d6 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x15e>
      return __exchange_and_add(__mem, __val);
   1e424:	55fd                	c.li	a1,-1
   1e426:	03440513          	addi	a0,s0,52
   1e42a:	9c6f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e42e:	87aa                	c.mv	a5,a0
   1e430:	b7d5                	c.j	1e414 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x19c>
	if (_M_pi != nullptr)
   1e432:	842a                	c.mv	s0,a0
   1e434:	6542                	c.ldsp	a0,16(sp)
   1e436:	c511                	c.beqz	a0,1e442 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1ca>
	  _M_pi->_M_release();
   1e438:	0001c317          	auipc	t1,0x1c
   1e43c:	fa833303          	ld	t1,-88(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   1e440:	9302                	c.jalr	t1
   1e442:	8522                	c.mv	a0,s0
   1e444:	d4cf80ef          	jal	ra,16990 <_Unwind_Resume@plt>
  cursor c(cu->data(), offset);
   1e448:	6818                	c.ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e44a:	e44e                	c.sdsp	s3,8(sp)
      : _M_pi(__r._M_pi)
   1e44c:	e802                	c.sdsp	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1e44e:	0089b783          	ld	a5,8(s3)
   1e452:	97ba                	c.add	a5,a4
   1e454:	ec3e                	c.sdsp	a5,24(sp)
    underflow();
   1e456:	00810a13          	addi	s4,sp,8
    int shift = 0;
   1e45a:	4981                	c.li	s3,0
  } while (form == DW_FORM::indirect);
   1e45c:	44d9                	c.li	s1,22
   1e45e:	b719                	c.j	1e364 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xec>

000000000001e460 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)>:
    : cu(cu), form(form), typ(typ), offset(offset) {
   1e460:	e10c                	c.sd	a1,0(a0)
   1e462:	c514                	c.sw	a3,8(a0)
   1e464:	c558                	c.sw	a4,12(a0)
   1e466:	e91c                	c.sd	a5,16(a0)
  if (form == DW_FORM::indirect)
   1e468:	47d9                	c.li	a5,22
   1e46a:	00f68363          	beq	a3,a5,1e470 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)+0x10>
   1e46e:	8082                	c.jr	ra
value::value(const unit *cu, DW_AT name, DW_FORM form, type typ,
   1e470:	1141                	c.addi	sp,-16
   1e472:	e406                	c.sdsp	ra,8(sp)
    resolve_indirect(name);
   1e474:	85b2                	c.mv	a1,a2
   1e476:	e03ff0ef          	jal	ra,1e278 <dwarf::value::resolve_indirect(dwarf::DW_AT)>
}
   1e47a:	60a2                	c.ldsp	ra,8(sp)
   1e47c:	0141                	c.addi	sp,16
   1e47e:	8082                	c.jr	ra

000000000001e480 <dwarf::value::as_rangelist() const>:
rangelist value::as_rangelist() const {
   1e480:	7155                	c.addi16sp	sp,-208
   1e482:	e586                	c.sdsp	ra,200(sp)
   1e484:	e1a2                	c.sdsp	s0,192(sp)
   1e486:	fd26                	c.sdsp	s1,184(sp)
   1e488:	f94a                	c.sdsp	s2,176(sp)
   1e48a:	f54e                	c.sdsp	s3,168(sp)
   1e48c:	f152                	c.sdsp	s4,160(sp)
   1e48e:	ed56                	c.sdsp	s5,152(sp)
   1e490:	e95a                	c.sdsp	s6,144(sp)
   1e492:	e55e                	c.sdsp	s7,136(sp)
   1e494:	e162                	c.sdsp	s8,128(sp)
   1e496:	8a2a                	c.mv	s4,a0
   1e498:	892e                	c.mv	s2,a1
  section_offset off = as_sec_offset();
   1e49a:	852e                	c.mv	a0,a1
   1e49c:	ac9ff0ef          	jal	ra,1df64 <dwarf::value::as_sec_offset() const>
   1e4a0:	8aaa                	c.mv	s5,a0
  die cudie = cu->root();
   1e4a2:	00093503          	ld	a0,0(s2)
   1e4a6:	d5efb0ef          	jal	ra,19a04 <dwarf::unit::root() const>
   1e4aa:	842a                	c.mv	s0,a0
  die(const die &o) = default;
   1e4ac:	411c                	c.lw	a5,0(a0)
   1e4ae:	c83e                	c.swsp	a5,16(sp)
   1e4b0:	651c                	c.ld	a5,8(a0)
   1e4b2:	ec3e                	c.sdsp	a5,24(sp)
   1e4b4:	691c                	c.ld	a5,16(a0)
   1e4b6:	f03e                	c.sdsp	a5,32(sp)
   1e4b8:	6d1c                	c.ld	a5,24(a0)
   1e4ba:	f43e                	c.sdsp	a5,40(sp)
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   1e4bc:	181c                	c.addi4spn	a5,sp,48
   1e4be:	f0be                	c.sdsp	a5,96(sp)
   1e4c0:	f4be                	c.sdsp	a5,104(sp)
   1e4c2:	109c                	c.addi4spn	a5,sp,96
   1e4c4:	f8be                	c.sdsp	a5,112(sp)
  size_type size() const { return end - base; }
   1e4c6:	05853983          	ld	s3,88(a0)
   1e4ca:	693c                	c.ld	a5,80(a0)
   1e4cc:	40f989b3          	sub	s3,s3,a5
   1e4d0:	4039d493          	srai	s1,s3,0x3
    if (n <= (size_type)(cap - base))
   1e4d4:	03000793          	addi	a5,zero,48
   1e4d8:	0537f663          	bgeu	a5,s3,1e524 <dwarf::value::as_rangelist() const+0xa4>
    size_type target = cap - base;
   1e4dc:	4519                	c.li	a0,6
      target <<= 1;
   1e4de:	0506                	c.slli	a0,0x1
    while (target < n)
   1e4e0:	fe956fe3          	bltu	a0,s1,1e4de <dwarf::value::as_rangelist() const+0x5e>
    char *newbuf = new char[sizeof(T[target])];
   1e4e4:	00351b13          	slli	s6,a0,0x3
   1e4e8:	855a                	c.mv	a0,s6
   1e4ea:	8a6f80ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   1e4ee:	8c2a                	c.mv	s8,a0
    T *src = base, *dest = (T *)newbuf;
   1e4f0:	7506                	c.ldsp	a0,96(sp)
    for (; src < end; src++, dest++) {
   1e4f2:	7726                	c.ldsp	a4,104(sp)
   1e4f4:	04e57f63          	bgeu	a0,a4,1e552 <dwarf::value::as_rangelist() const+0xd2>
    T *src = base, *dest = (T *)newbuf;
   1e4f8:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1e4fa:	07a1                	c.addi	a5,8
   1e4fc:	fee7efe3          	bltu	a5,a4,1e4fa <dwarf::value::as_rangelist() const+0x7a>
   1e500:	fff70b93          	addi	s7,a4,-1
   1e504:	40ab8bb3          	sub	s7,s7,a0
   1e508:	ff8bfb93          	andi	s7,s7,-8
   1e50c:	0ba1                	c.addi	s7,8
   1e50e:	9be2                	c.add	s7,s8
    if ((char *)base != buf)
   1e510:	181c                	c.addi4spn	a5,sp,48
   1e512:	00f50563          	beq	a0,a5,1e51c <dwarf::value::as_rangelist() const+0x9c>
      delete[] (char *)base;
   1e516:	c119                	c.beqz	a0,1e51c <dwarf::value::as_rangelist() const+0x9c>
   1e518:	b38f80ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1e51c:	f0e2                	c.sdsp	s8,96(sp)
    end = dest;
   1e51e:	f4de                	c.sdsp	s7,104(sp)
    cap = base + target;
   1e520:	9c5a                	c.add	s8,s6
   1e522:	f8e2                	c.sdsp	s8,112(sp)
    for (size_type i = 0; i < osize; i++)
   1e524:	cc89                	c.beqz	s1,1e53e <dwarf::value::as_rangelist() const+0xbe>
   1e526:	4781                	c.li	a5,0
   1e528:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1e52c:	6838                	c.ld	a4,80(s0)
   1e52e:	9736                	c.add	a4,a3
   1e530:	6310                	c.ld	a2,0(a4)
   1e532:	7706                	c.ldsp	a4,96(sp)
   1e534:	9736                	c.add	a4,a3
   1e536:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1e538:	0785                	c.addi	a5,1
   1e53a:	fef497e3          	bne	s1,a5,1e528 <dwarf::value::as_rangelist() const+0xa8>
    end = base + osize;
   1e53e:	7786                	c.ldsp	a5,96(sp)
   1e540:	97ce                	c.add	a5,s3
   1e542:	f4be                	c.sdsp	a5,104(sp)
   1e544:	743c                	c.ld	a5,104(s0)
   1e546:	fcbe                	c.sdsp	a5,120(sp)
  taddr cu_low_pc = cudie.has(DW_AT::low_pc) ? at_low_pc(cudie) : 0;
   1e548:	45c5                	c.li	a1,17
   1e54a:	0808                	c.addi4spn	a0,sp,16
   1e54c:	b7ffd0ef          	jal	ra,1c0ca <dwarf::die::has(dwarf::DW_AT) const>
   1e550:	a019                	c.j	1e556 <dwarf::value::as_rangelist() const+0xd6>
    T *src = base, *dest = (T *)newbuf;
   1e552:	8be2                	c.mv	s7,s8
   1e554:	bf75                	c.j	1e510 <dwarf::value::as_rangelist() const+0x90>
   1e556:	c911                	c.beqz	a0,1e56a <dwarf::value::as_rangelist() const+0xea>
   1e558:	0808                	c.addi4spn	a0,sp,16
   1e55a:	0f7070ef          	jal	ra,25e50 <dwarf::at_low_pc(dwarf::die const&)>
   1e55e:	84aa                	c.mv	s1,a0
  auto sec = cu->get_dwarf().get_section(section_type::ranges);
   1e560:	00093503          	ld	a0,0(s2)
   1e564:	dcaf90ef          	jal	ra,17b2e <dwarf::unit::get_dwarf() const>
   1e568:	a019                	c.j	1e56e <dwarf::value::as_rangelist() const+0xee>
  taddr cu_low_pc = cudie.has(DW_AT::low_pc) ? at_low_pc(cudie) : 0;
   1e56a:	4481                	c.li	s1,0
   1e56c:	bfd5                	c.j	1e560 <dwarf::value::as_rangelist() const+0xe0>
  auto sec = cu->get_dwarf().get_section(section_type::ranges);
   1e56e:	85aa                	c.mv	a1,a0
   1e570:	4625                	c.li	a2,9
   1e572:	850a                	c.mv	a0,sp
   1e574:	dd0f90ef          	jal	ra,17b44 <dwarf::dwarf::get_section(dwarf::section_type) const>
  auto cusec = cu->data();
   1e578:	00093503          	ld	a0,0(s2)
   1e57c:	dbcf90ef          	jal	ra,17b38 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e580:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1e584:	6500                	c.ld	s0,8(a0)
	if (_M_pi != nullptr)
   1e586:	c819                	c.beqz	s0,1e59c <dwarf::value::as_rangelist() const+0x11c>
    if (__is_single_threaded())
   1e588:	0001c797          	auipc	a5,0x1c
   1e58c:	f107b783          	ld	a5,-240(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e590:	0007c783          	lbu	a5,0(a5)
   1e594:	cf89                	c.beqz	a5,1e5ae <dwarf::value::as_rangelist() const+0x12e>
  { *__mem += __val; }
   1e596:	581c                	c.lw	a5,48(s0)
   1e598:	2785                	c.addiw	a5,1
   1e59a:	d81c                	c.sw	a5,48(s0)
  return rangelist(sec, off, cusec->addr_size, cu_low_pc);
   1e59c:	8726                	c.mv	a4,s1
   1e59e:	02092683          	lw	a3,32(s2)
   1e5a2:	8656                	c.mv	a2,s5
   1e5a4:	858a                	c.mv	a1,sp
   1e5a6:	8552                	c.mv	a0,s4
   1e5a8:	5c7030ef          	jal	ra,2236e <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)>
   1e5ac:	a039                	c.j	1e5ba <dwarf::value::as_rangelist() const+0x13a>
      __atomic_add(__mem, __val);
   1e5ae:	4585                	c.li	a1,1
   1e5b0:	03040513          	addi	a0,s0,48
   1e5b4:	ffdf70ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1e5b8:	b7d5                	c.j	1e59c <dwarf::value::as_rangelist() const+0x11c>
	if (_M_pi != nullptr)
   1e5ba:	cc19                	c.beqz	s0,1e5d8 <dwarf::value::as_rangelist() const+0x158>
    if (__is_single_threaded())
   1e5bc:	0001c797          	auipc	a5,0x1c
   1e5c0:	edc7b783          	ld	a5,-292(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e5c4:	0007c783          	lbu	a5,0(a5)
   1e5c8:	c7a5                	c.beqz	a5,1e630 <dwarf::value::as_rangelist() const+0x1b0>
    _Atomic_word __result = *__mem;
   1e5ca:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1e5cc:	fff5079b          	addiw	a5,a0,-1
   1e5d0:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1e5d2:	4785                	c.li	a5,1
   1e5d4:	06f50463          	beq	a0,a5,1e63c <dwarf::value::as_rangelist() const+0x1bc>
	if (_M_pi != nullptr)
   1e5d8:	6422                	c.ldsp	s0,8(sp)
   1e5da:	cc19                	c.beqz	s0,1e5f8 <dwarf::value::as_rangelist() const+0x178>
    if (__is_single_threaded())
   1e5dc:	0001c797          	auipc	a5,0x1c
   1e5e0:	ebc7b783          	ld	a5,-324(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e5e4:	0007c783          	lbu	a5,0(a5)
   1e5e8:	cbc9                	c.beqz	a5,1e67a <dwarf::value::as_rangelist() const+0x1fa>
    _Atomic_word __result = *__mem;
   1e5ea:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1e5ec:	fff5079b          	addiw	a5,a0,-1
   1e5f0:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1e5f2:	4785                	c.li	a5,1
   1e5f4:	08f50963          	beq	a0,a5,1e686 <dwarf::value::as_rangelist() const+0x206>
    for (T *p = base; p < end; ++p)
   1e5f8:	7506                	c.ldsp	a0,96(sp)
   1e5fa:	77a6                	c.ldsp	a5,104(sp)
   1e5fc:	00f57763          	bgeu	a0,a5,1e60a <dwarf::value::as_rangelist() const+0x18a>
   1e600:	87aa                	c.mv	a5,a0
   1e602:	07a1                	c.addi	a5,8
   1e604:	7726                	c.ldsp	a4,104(sp)
   1e606:	fee7eee3          	bltu	a5,a4,1e602 <dwarf::value::as_rangelist() const+0x182>
    if ((char *)base != buf)
   1e60a:	181c                	c.addi4spn	a5,sp,48
   1e60c:	00f50563          	beq	a0,a5,1e616 <dwarf::value::as_rangelist() const+0x196>
      delete[] (char *)base;
   1e610:	c119                	c.beqz	a0,1e616 <dwarf::value::as_rangelist() const+0x196>
   1e612:	a3ef80ef          	jal	ra,16850 <operator delete[](void*)@plt>
}
   1e616:	8552                	c.mv	a0,s4
   1e618:	60ae                	c.ldsp	ra,200(sp)
   1e61a:	640e                	c.ldsp	s0,192(sp)
   1e61c:	74ea                	c.ldsp	s1,184(sp)
   1e61e:	794a                	c.ldsp	s2,176(sp)
   1e620:	79aa                	c.ldsp	s3,168(sp)
   1e622:	7a0a                	c.ldsp	s4,160(sp)
   1e624:	6aea                	c.ldsp	s5,152(sp)
   1e626:	6b4a                	c.ldsp	s6,144(sp)
   1e628:	6baa                	c.ldsp	s7,136(sp)
   1e62a:	6c0a                	c.ldsp	s8,128(sp)
   1e62c:	6169                	c.addi16sp	sp,208
   1e62e:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   1e630:	55fd                	c.li	a1,-1
   1e632:	03040513          	addi	a0,s0,48
   1e636:	fbbf70ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e63a:	bf61                	c.j	1e5d2 <dwarf::value::as_rangelist() const+0x152>
	_M_dispose();
   1e63c:	601c                	c.ld	a5,0(s0)
   1e63e:	6b9c                	c.ld	a5,16(a5)
   1e640:	8522                	c.mv	a0,s0
   1e642:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1e644:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1e648:	0001c797          	auipc	a5,0x1c
   1e64c:	e507b783          	ld	a5,-432(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e650:	0007c783          	lbu	a5,0(a5)
   1e654:	cf89                	c.beqz	a5,1e66e <dwarf::value::as_rangelist() const+0x1ee>
    _Atomic_word __result = *__mem;
   1e656:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1e658:	fff5079b          	addiw	a5,a0,-1
   1e65c:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1e65e:	4785                	c.li	a5,1
   1e660:	f6f51ce3          	bne	a0,a5,1e5d8 <dwarf::value::as_rangelist() const+0x158>
	    _M_destroy();
   1e664:	601c                	c.ld	a5,0(s0)
   1e666:	6f9c                	c.ld	a5,24(a5)
   1e668:	8522                	c.mv	a0,s0
   1e66a:	9782                	c.jalr	a5
   1e66c:	b7b5                	c.j	1e5d8 <dwarf::value::as_rangelist() const+0x158>
      return __exchange_and_add(__mem, __val);
   1e66e:	55fd                	c.li	a1,-1
   1e670:	03440513          	addi	a0,s0,52
   1e674:	f7df70ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e678:	b7dd                	c.j	1e65e <dwarf::value::as_rangelist() const+0x1de>
   1e67a:	55fd                	c.li	a1,-1
   1e67c:	03040513          	addi	a0,s0,48
   1e680:	f71f70ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e684:	b7bd                	c.j	1e5f2 <dwarf::value::as_rangelist() const+0x172>
	_M_dispose();
   1e686:	601c                	c.ld	a5,0(s0)
   1e688:	6b9c                	c.ld	a5,16(a5)
   1e68a:	8522                	c.mv	a0,s0
   1e68c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1e68e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1e692:	0001c797          	auipc	a5,0x1c
   1e696:	e067b783          	ld	a5,-506(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e69a:	0007c783          	lbu	a5,0(a5)
   1e69e:	cf89                	c.beqz	a5,1e6b8 <dwarf::value::as_rangelist() const+0x238>
    _Atomic_word __result = *__mem;
   1e6a0:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1e6a2:	fff5079b          	addiw	a5,a0,-1
   1e6a6:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1e6a8:	4785                	c.li	a5,1
   1e6aa:	f4f517e3          	bne	a0,a5,1e5f8 <dwarf::value::as_rangelist() const+0x178>
	    _M_destroy();
   1e6ae:	601c                	c.ld	a5,0(s0)
   1e6b0:	6f9c                	c.ld	a5,24(a5)
   1e6b2:	8522                	c.mv	a0,s0
   1e6b4:	9782                	c.jalr	a5
   1e6b6:	b789                	c.j	1e5f8 <dwarf::value::as_rangelist() const+0x178>
      return __exchange_and_add(__mem, __val);
   1e6b8:	55fd                	c.li	a1,-1
   1e6ba:	03440513          	addi	a0,s0,52
   1e6be:	f33f70ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e6c2:	b7dd                	c.j	1e6a8 <dwarf::value::as_rangelist() const+0x228>
	if (_M_pi != nullptr)
   1e6c4:	84aa                	c.mv	s1,a0
   1e6c6:	c419                	c.beqz	s0,1e6d4 <dwarf::value::as_rangelist() const+0x254>
	  _M_pi->_M_release();
   1e6c8:	8522                	c.mv	a0,s0
   1e6ca:	0001c317          	auipc	t1,0x1c
   1e6ce:	d1633303          	ld	t1,-746(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   1e6d2:	9302                	c.jalr	t1
   1e6d4:	8426                	c.mv	s0,s1
	if (_M_pi != nullptr)
   1e6d6:	6522                	c.ldsp	a0,8(sp)
   1e6d8:	c511                	c.beqz	a0,1e6e4 <dwarf::value::as_rangelist() const+0x264>
	  _M_pi->_M_release();
   1e6da:	0001c317          	auipc	t1,0x1c
   1e6de:	d0633303          	ld	t1,-762(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   1e6e2:	9302                	c.jalr	t1
class die {
   1e6e4:	1808                	c.addi4spn	a0,sp,48
   1e6e6:	0001c317          	auipc	t1,0x1c
   1e6ea:	d1a33303          	ld	t1,-742(t1) # 3a400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x22e14>
   1e6ee:	9302                	c.jalr	t1
   1e6f0:	8522                	c.mv	a0,s0
   1e6f2:	a9ef80ef          	jal	ra,16990 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   1e6f6:	842a                	c.mv	s0,a0
   1e6f8:	bff9                	c.j	1e6d6 <dwarf::value::as_rangelist() const+0x256>
   1e6fa:	842a                	c.mv	s0,a0
   1e6fc:	b7e5                	c.j	1e6e4 <dwarf::value::as_rangelist() const+0x264>

000000000001e6fe <dwarf::value::as_string[abi:cxx11]() const>:
string value::as_string() const {
   1e6fe:	1101                	c.addi	sp,-32
   1e700:	ec06                	c.sdsp	ra,24(sp)
   1e702:	e822                	c.sdsp	s0,16(sp)
   1e704:	842a                	c.mv	s0,a0
   1e706:	852e                	c.mv	a0,a1
  const char *s = as_cstr(&size);
   1e708:	002c                	c.addi4spn	a1,sp,8
   1e70a:	c8cff0ef          	jal	ra,1db96 <dwarf::value::as_cstr(unsigned long*) const>
   1e70e:	85aa                	c.mv	a1,a0
  return string(s, size);
   1e710:	6622                	c.ldsp	a2,8(sp)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1e712:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   1e716:	e01c                	c.sd	a5,0(s0)
	if (__s == 0 && __n > 0)
   1e718:	cd11                	c.beqz	a0,1e734 <dwarf::value::as_string[abi:cxx11]() const+0x36>
	_M_construct(__s, __s + __n, std::forward_iterator_tag());
   1e71a:	4681                	c.li	a3,0
   1e71c:	962e                	c.add	a2,a1
   1e71e:	8522                	c.mv	a0,s0
   1e720:	0001c317          	auipc	t1,0x1c
   1e724:	c0033303          	ld	t1,-1024(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   1e728:	9302                	c.jalr	t1
}
   1e72a:	8522                	c.mv	a0,s0
   1e72c:	60e2                	c.ldsp	ra,24(sp)
   1e72e:	6442                	c.ldsp	s0,16(sp)
   1e730:	6105                	c.addi16sp	sp,32
   1e732:	8082                	c.jr	ra
	if (__s == 0 && __n > 0)
   1e734:	d27d                	c.beqz	a2,1e71a <dwarf::value::as_string[abi:cxx11]() const+0x1c>
	  std::__throw_logic_error(__N("basic_string: "
   1e736:	0000f517          	auipc	a0,0xf
   1e73a:	28250513          	addi	a0,a0,642 # 2d9b8 <__libc_csu_fini+0x6>
   1e73e:	802f80ef          	jal	ra,16740 <std::__throw_logic_error(char const*)@plt>

000000000001e742 <dwarf::value::as_reference() const>:
die value::as_reference() const {
   1e742:	7165                	c.addi16sp	sp,-400
   1e744:	e706                	c.sdsp	ra,392(sp)
   1e746:	e322                	c.sdsp	s0,384(sp)
   1e748:	fea6                	c.sdsp	s1,376(sp)
   1e74a:	faca                	c.sdsp	s2,368(sp)
   1e74c:	f6ce                	c.sdsp	s3,360(sp)
   1e74e:	f2d2                	c.sdsp	s4,352(sp)
   1e750:	eed6                	c.sdsp	s5,344(sp)
   1e752:	eada                	c.sdsp	s6,336(sp)
   1e754:	e6de                	c.sdsp	s7,328(sp)
   1e756:	842a                	c.mv	s0,a0
   1e758:	892e                	c.mv	s2,a1
  cursor cur(cu->data(), offset);
   1e75a:	6188                	c.ld	a0,0(a1)
   1e75c:	bdcf90ef          	jal	ra,17b38 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e760:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1e764:	6504                	c.ld	s1,8(a0)
	if (_M_pi != nullptr)
   1e766:	7e048a63          	beq	s1,zero,1ef5a <dwarf::value::as_reference() const+0x818>
    if (__is_single_threaded())
   1e76a:	0001c797          	auipc	a5,0x1c
   1e76e:	d2e7b783          	ld	a5,-722(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e772:	0007c783          	lbu	a5,0(a5)
   1e776:	cfb5                	c.beqz	a5,1e7f2 <dwarf::value::as_reference() const+0xb0>
  { *__mem += __val; }
   1e778:	589c                	c.lw	a5,48(s1)
   1e77a:	2785                	c.addiw	a5,1
   1e77c:	d89c                	c.sw	a5,48(s1)
   1e77e:	01093a03          	ld	s4,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e782:	f64e                	c.sdsp	s3,296(sp)
      : _M_pi(__r._M_pi)
   1e784:	fa26                	c.sdsp	s1,304(sp)
    if (__is_single_threaded())
   1e786:	0001c797          	auipc	a5,0x1c
   1e78a:	d127b783          	ld	a5,-750(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e78e:	0007c783          	lbu	a5,0(a5)
   1e792:	c7b5                	c.beqz	a5,1e7fe <dwarf::value::as_reference() const+0xbc>
  { *__mem += __val; }
   1e794:	589c                	c.lw	a5,48(s1)
   1e796:	2785                	c.addiw	a5,1
   1e798:	d89c                	c.sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   1e79a:	0089b783          	ld	a5,8(s3)
   1e79e:	97d2                	c.add	a5,s4
   1e7a0:	fe3e                	c.sdsp	a5,312(sp)
    if (__is_single_threaded())
   1e7a2:	0001c797          	auipc	a5,0x1c
   1e7a6:	cf67b783          	ld	a5,-778(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e7aa:	0007c783          	lbu	a5,0(a5)
   1e7ae:	cfb1                	c.beqz	a5,1e80a <dwarf::value::as_reference() const+0xc8>
    _Atomic_word __result = *__mem;
   1e7b0:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1e7b2:	fff5079b          	addiw	a5,a0,-1
   1e7b6:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1e7b8:	4785                	c.li	a5,1
   1e7ba:	7af51863          	bne	a0,a5,1ef6a <dwarf::value::as_reference() const+0x828>
	_M_dispose();
   1e7be:	609c                	c.ld	a5,0(s1)
   1e7c0:	6b9c                	c.ld	a5,16(a5)
   1e7c2:	8526                	c.mv	a0,s1
   1e7c4:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1e7c6:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1e7ca:	0001c797          	auipc	a5,0x1c
   1e7ce:	cce7b783          	ld	a5,-818(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e7d2:	0007c783          	lbu	a5,0(a5)
   1e7d6:	c3a1                	c.beqz	a5,1e816 <dwarf::value::as_reference() const+0xd4>
    _Atomic_word __result = *__mem;
   1e7d8:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1e7da:	fff5079b          	addiw	a5,a0,-1
   1e7de:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1e7e0:	4785                	c.li	a5,1
   1e7e2:	78f51463          	bne	a0,a5,1ef6a <dwarf::value::as_reference() const+0x828>
	    _M_destroy();
   1e7e6:	609c                	c.ld	a5,0(s1)
   1e7e8:	6f9c                	c.ld	a5,24(a5)
   1e7ea:	8526                	c.mv	a0,s1
   1e7ec:	9782                	c.jalr	a5
   1e7ee:	77c0006f          	jal	zero,1ef6a <dwarf::value::as_reference() const+0x828>
      __atomic_add(__mem, __val);
   1e7f2:	4585                	c.li	a1,1
   1e7f4:	03048513          	addi	a0,s1,48
   1e7f8:	db9f70ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1e7fc:	b749                	c.j	1e77e <dwarf::value::as_reference() const+0x3c>
   1e7fe:	4585                	c.li	a1,1
   1e800:	03048513          	addi	a0,s1,48
   1e804:	dadf70ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1e808:	bf49                	c.j	1e79a <dwarf::value::as_reference() const+0x58>
      return __exchange_and_add(__mem, __val);
   1e80a:	55fd                	c.li	a1,-1
   1e80c:	03048513          	addi	a0,s1,48
   1e810:	de1f70ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e814:	b755                	c.j	1e7b8 <dwarf::value::as_reference() const+0x76>
   1e816:	55fd                	c.li	a1,-1
   1e818:	03448513          	addi	a0,s1,52
   1e81c:	dd5f70ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e820:	b7c1                	c.j	1e7e0 <dwarf::value::as_reference() const+0x9e>
    while (pos < sec->end) {
   1e822:	77f2                	c.ldsp	a5,312(sp)
      { return _M_ptr; }
   1e824:	75b2                	c.ldsp	a1,296(sp)
   1e826:	6998                	c.ld	a4,16(a1)
    std::uint64_t result = 0;
   1e828:	4481                	c.li	s1,0
    int shift = 0;
   1e82a:	4601                	c.li	a2,0
    while (pos < sec->end) {
   1e82c:	02e7f563          	bgeu	a5,a4,1e856 <dwarf::value::as_reference() const+0x114>
      uint8_t byte = *(uint8_t *)(pos++);
   1e830:	0785                	c.addi	a5,1
   1e832:	fe3e                	c.sdsp	a5,312(sp)
   1e834:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1e838:	07f77693          	andi	a3,a4,127
   1e83c:	00c696b3          	sll	a3,a3,a2
   1e840:	8cd5                	c.or	s1,a3
      if ((byte & 0x80) == 0)
   1e842:	0187171b          	slliw	a4,a4,0x18
   1e846:	4187571b          	sraiw	a4,a4,0x18
   1e84a:	70075263          	bge	a4,zero,1ef4e <dwarf::value::as_reference() const+0x80c>
      shift += 7;
   1e84e:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   1e850:	6998                	c.ld	a4,16(a1)
   1e852:	fce7efe3          	bltu	a5,a4,1e830 <dwarf::value::as_reference() const+0xee>
    underflow();
   1e856:	1228                	c.addi4spn	a0,sp,296
   1e858:	e7bfc0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
   1e85c:	a935                	c.j	1ec98 <dwarf::value::as_reference() const+0x556>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1e85e:	77b2                	c.ldsp	a5,296(sp)
   1e860:	6b98                	c.ld	a4,16(a5)
   1e862:	77f2                	c.ldsp	a5,312(sp)
   1e864:	00e7e563          	bltu	a5,a4,1e86e <dwarf::value::as_reference() const+0x12c>
      underflow();
   1e868:	1228                	c.addi4spn	a0,sp,296
   1e86a:	e69fc0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1e86e:	77f2                	c.ldsp	a5,312(sp)
    if (sec->ord == byte_order::lsb) {
   1e870:	7732                	c.ldsp	a4,296(sp)
   1e872:	4f58                	c.lw	a4,28(a4)
   1e874:	6c070963          	beq	a4,zero,1ef46 <dwarf::value::as_reference() const+0x804>
        val = (val << 8) | (uint64_t)p[i];
   1e878:	0007c483          	lbu	s1,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1e87c:	a5f9                	c.j	1ef4a <dwarf::value::as_reference() const+0x808>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1e87e:	77b2                	c.ldsp	a5,296(sp)
   1e880:	6b98                	c.ld	a4,16(a5)
   1e882:	77f2                	c.ldsp	a5,312(sp)
   1e884:	40f70633          	sub	a2,a4,a5
   1e888:	4685                	c.li	a3,1
   1e88a:	00c6f463          	bgeu	a3,a2,1e892 <dwarf::value::as_reference() const+0x150>
   1e88e:	00e7e563          	bltu	a5,a4,1e898 <dwarf::value::as_reference() const+0x156>
      underflow();
   1e892:	1228                	c.addi4spn	a0,sp,296
   1e894:	e3ffc0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1e898:	77f2                	c.ldsp	a5,312(sp)
    if (sec->ord == byte_order::lsb) {
   1e89a:	7732                	c.ldsp	a4,296(sp)
   1e89c:	4f58                	c.lw	a4,28(a4)
   1e89e:	eb11                	c.bnez	a4,1e8b2 <dwarf::value::as_reference() const+0x170>
        val |= ((uint64_t)p[i]) << (i * 8);
   1e8a0:	0017c483          	lbu	s1,1(a5)
   1e8a4:	04a2                	c.slli	s1,0x8
   1e8a6:	0007c703          	lbu	a4,0(a5)
   1e8aa:	8cd9                	c.or	s1,a4
    pos += sizeof(T);
   1e8ac:	0789                	c.addi	a5,2
   1e8ae:	fe3e                	c.sdsp	a5,312(sp)
    break;
   1e8b0:	ad79                	c.j	1ef4e <dwarf::value::as_reference() const+0x80c>
        val = (val << 8) | (uint64_t)p[i];
   1e8b2:	0007c483          	lbu	s1,0(a5)
   1e8b6:	04a2                	c.slli	s1,0x8
   1e8b8:	0017c703          	lbu	a4,1(a5)
   1e8bc:	8cd9                	c.or	s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1e8be:	b7fd                	c.j	1e8ac <dwarf::value::as_reference() const+0x16a>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1e8c0:	77b2                	c.ldsp	a5,296(sp)
   1e8c2:	6b98                	c.ld	a4,16(a5)
   1e8c4:	77f2                	c.ldsp	a5,312(sp)
   1e8c6:	40f70633          	sub	a2,a4,a5
   1e8ca:	468d                	c.li	a3,3
   1e8cc:	00c6f463          	bgeu	a3,a2,1e8d4 <dwarf::value::as_reference() const+0x192>
   1e8d0:	00e7e563          	bltu	a5,a4,1e8da <dwarf::value::as_reference() const+0x198>
      underflow();
   1e8d4:	1228                	c.addi4spn	a0,sp,296
   1e8d6:	dfdfc0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1e8da:	7672                	c.ldsp	a2,312(sp)
    if (sec->ord == byte_order::lsb) {
   1e8dc:	77b2                	c.ldsp	a5,296(sp)
   1e8de:	4fdc                	c.lw	a5,28(a5)
   1e8e0:	e39d                	c.bnez	a5,1e906 <dwarf::value::as_reference() const+0x1c4>
   1e8e2:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1e8e4:	4481                	c.li	s1,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1e8e6:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1e8ea:	0006c703          	lbu	a4,0(a3)
   1e8ee:	00f71733          	sll	a4,a4,a5
   1e8f2:	8cd9                	c.or	s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1e8f4:	0685                	c.addi	a3,1
   1e8f6:	27a1                	c.addiw	a5,8
   1e8f8:	feb799e3          	bne	a5,a1,1e8ea <dwarf::value::as_reference() const+0x1a8>
    pos += sizeof(T);
   1e8fc:	0611                	c.addi	a2,4
   1e8fe:	fe32                	c.sdsp	a2,312(sp)
   1e900:	1482                	c.slli	s1,0x20
   1e902:	9081                	c.srli	s1,0x20
    break;
   1e904:	a5a9                	c.j	1ef4e <dwarf::value::as_reference() const+0x80c>
   1e906:	87b2                	c.mv	a5,a2
   1e908:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   1e90c:	4481                	c.li	s1,0
        val = (val << 8) | (uint64_t)p[i];
   1e90e:	04a2                	c.slli	s1,0x8
   1e910:	0007c703          	lbu	a4,0(a5)
   1e914:	8cd9                	c.or	s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1e916:	0785                	c.addi	a5,1
   1e918:	fef69be3          	bne	a3,a5,1e90e <dwarf::value::as_reference() const+0x1cc>
   1e91c:	b7c5                	c.j	1e8fc <dwarf::value::as_reference() const+0x1ba>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1e91e:	77b2                	c.ldsp	a5,296(sp)
   1e920:	6b98                	c.ld	a4,16(a5)
   1e922:	77f2                	c.ldsp	a5,312(sp)
   1e924:	40f70633          	sub	a2,a4,a5
   1e928:	469d                	c.li	a3,7
   1e92a:	00c6f463          	bgeu	a3,a2,1e932 <dwarf::value::as_reference() const+0x1f0>
   1e92e:	00e7e563          	bltu	a5,a4,1e938 <dwarf::value::as_reference() const+0x1f6>
      underflow();
   1e932:	1228                	c.addi4spn	a0,sp,296
   1e934:	d9ffc0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1e938:	7672                	c.ldsp	a2,312(sp)
    if (sec->ord == byte_order::lsb) {
   1e93a:	77b2                	c.ldsp	a5,296(sp)
   1e93c:	4fdc                	c.lw	a5,28(a5)
   1e93e:	e38d                	c.bnez	a5,1e960 <dwarf::value::as_reference() const+0x21e>
   1e940:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1e942:	4481                	c.li	s1,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1e944:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1e948:	0006c703          	lbu	a4,0(a3)
   1e94c:	00f71733          	sll	a4,a4,a5
   1e950:	8cd9                	c.or	s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1e952:	0685                	c.addi	a3,1
   1e954:	27a1                	c.addiw	a5,8
   1e956:	feb799e3          	bne	a5,a1,1e948 <dwarf::value::as_reference() const+0x206>
    pos += sizeof(T);
   1e95a:	0621                	c.addi	a2,8
   1e95c:	fe32                	c.sdsp	a2,312(sp)
   1e95e:	abc5                	c.j	1ef4e <dwarf::value::as_reference() const+0x80c>
   1e960:	87b2                	c.mv	a5,a2
   1e962:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1e966:	4481                	c.li	s1,0
        val = (val << 8) | (uint64_t)p[i];
   1e968:	04a2                	c.slli	s1,0x8
   1e96a:	0007c703          	lbu	a4,0(a5)
   1e96e:	8cd9                	c.or	s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1e970:	0785                	c.addi	a5,1
   1e972:	fef69be3          	bne	a3,a5,1e968 <dwarf::value::as_reference() const+0x226>
   1e976:	b7d5                	c.j	1e95a <dwarf::value::as_reference() const+0x218>
    off = cur.offset();
   1e978:	1228                	c.addi4spn	a0,sp,296
   1e97a:	a7efd0ef          	jal	ra,1bbf8 <dwarf::cursor::offset()>
   1e97e:	89aa                	c.mv	s3,a0
    for (auto &file_cu : cu->get_dwarf().compilation_units()) {
   1e980:	00093503          	ld	a0,0(s2)
   1e984:	9aaf90ef          	jal	ra,17b2e <dwarf::unit::get_dwarf() const>
   1e988:	8b6f90ef          	jal	ra,17a3e <dwarf::dwarf::compilation_units() const>
      : _M_current(__i) { }
   1e98c:	6104                	c.ld	s1,0(a0)
   1e98e:	00853a83          	ld	s5,8(a0)
   1e992:	029a8563          	beq	s5,s1,1e9bc <dwarf::value::as_reference() const+0x27a>
    const compilation_unit *base_cu = nullptr;
   1e996:	4901                	c.li	s2,0
   1e998:	a031                	c.j	1e9a4 <dwarf::value::as_reference() const+0x262>
      if (file_cu.get_section_offset() > off)
   1e99a:	00a9ec63          	bltu	s3,a0,1e9b2 <dwarf::value::as_reference() const+0x270>
    for (auto &file_cu : cu->get_dwarf().compilation_units()) {
   1e99e:	04e1                	c.addi	s1,24
   1e9a0:	009a8863          	beq	s5,s1,1e9b0 <dwarf::value::as_reference() const+0x26e>
   1e9a4:	8a4a                	c.mv	s4,s2
   1e9a6:	8926                	c.mv	s2,s1
      if (file_cu.get_section_offset() > off)
   1e9a8:	8526                	c.mv	a0,s1
   1e9aa:	988f90ef          	jal	ra,17b32 <dwarf::unit::get_section_offset() const>
   1e9ae:	b7f5                	c.j	1e99a <dwarf::value::as_reference() const+0x258>
   1e9b0:	8a4a                	c.mv	s4,s2
    die d(base_cu);
   1e9b2:	85d2                	c.mv	a1,s4
   1e9b4:	00a8                	c.addi4spn	a0,sp,72
   1e9b6:	b52fd0ef          	jal	ra,1bd08 <dwarf::die::die(dwarf::unit const*)>
   1e9ba:	a019                	c.j	1e9c0 <dwarf::value::as_reference() const+0x27e>
    const compilation_unit *base_cu = nullptr;
   1e9bc:	4a01                	c.li	s4,0
   1e9be:	bfd5                	c.j	1e9b2 <dwarf::value::as_reference() const+0x270>
    d.read(off - base_cu->get_section_offset());
   1e9c0:	8552                	c.mv	a0,s4
   1e9c2:	970f90ef          	jal	ra,17b32 <dwarf::unit::get_section_offset() const>
   1e9c6:	40a985b3          	sub	a1,s3,a0
   1e9ca:	00a8                	c.addi4spn	a0,sp,72
   1e9cc:	b70fd0ef          	jal	ra,1bd3c <dwarf::die::read(unsigned long)>
  die(die &&o) = default;
   1e9d0:	47a6                	c.lwsp	a5,72(sp)
   1e9d2:	c01c                	c.sw	a5,0(s0)
   1e9d4:	67c6                	c.ldsp	a5,80(sp)
   1e9d6:	e41c                	c.sd	a5,8(s0)
   1e9d8:	67e6                	c.ldsp	a5,88(sp)
   1e9da:	e81c                	c.sd	a5,16(s0)
   1e9dc:	7786                	c.ldsp	a5,96(sp)
   1e9de:	ec1c                	c.sd	a5,24(s0)
   1e9e0:	02040a13          	addi	s4,s0,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   1e9e4:	05443823          	sd	s4,80(s0)
   1e9e8:	05443c23          	sd	s4,88(s0)
   1e9ec:	05040793          	addi	a5,s0,80
   1e9f0:	f03c                	c.sd	a5,96(s0)
    if ((char *)o.base == o.buf) {
   1e9f2:	676a                	c.ldsp	a4,152(sp)
   1e9f4:	10b4                	c.addi4spn	a3,sp,104
   1e9f6:	04d70063          	beq	a4,a3,1ea36 <dwarf::value::as_reference() const+0x2f4>
      base = o.base;
   1e9fa:	e838                	c.sd	a4,80(s0)
      end = o.end;
   1e9fc:	778a                	c.ldsp	a5,160(sp)
   1e9fe:	ec3c                	c.sd	a5,88(s0)
      cap = o.cap;
   1ea00:	77aa                	c.ldsp	a5,168(sp)
   1ea02:	f03c                	c.sd	a5,96(s0)
      o.base = (T *)o.buf;
   1ea04:	10bc                	c.addi4spn	a5,sp,104
   1ea06:	ed3e                	c.sdsp	a5,152(sp)
      o.end = o.base;
   1ea08:	f13e                	c.sdsp	a5,160(sp)
      o.cap = (T *)&o.buf[sizeof(T[Min])];
   1ea0a:	093c                	c.addi4spn	a5,sp,152
   1ea0c:	f53e                	c.sdsp	a5,168(sp)
   1ea0e:	77ca                	c.ldsp	a5,176(sp)
   1ea10:	f43c                	c.sd	a5,104(s0)
    for (T *p = base; p < end; ++p)
   1ea12:	656a                	c.ldsp	a0,152(sp)
   1ea14:	778a                	c.ldsp	a5,160(sp)
   1ea16:	00f57763          	bgeu	a0,a5,1ea24 <dwarf::value::as_reference() const+0x2e2>
   1ea1a:	87aa                	c.mv	a5,a0
   1ea1c:	07a1                	c.addi	a5,8
   1ea1e:	770a                	c.ldsp	a4,160(sp)
   1ea20:	fee7eee3          	bltu	a5,a4,1ea1c <dwarf::value::as_reference() const+0x2da>
    end = base;
   1ea24:	f12a                	c.sdsp	a0,160(sp)
    if ((char *)base != buf)
   1ea26:	10bc                	c.addi4spn	a5,sp,104
   1ea28:	2cf50f63          	beq	a0,a5,1ed06 <dwarf::value::as_reference() const+0x5c4>
      delete[] (char *)base;
   1ea2c:	2c050d63          	beq	a0,zero,1ed06 <dwarf::value::as_reference() const+0x5c4>
   1ea30:	e21f70ef          	jal	ra,16850 <operator delete[](void*)@plt>
   1ea34:	acc9                	c.j	1ed06 <dwarf::value::as_reference() const+0x5c4>
  size_type size() const { return end - base; }
   1ea36:	798a                	c.ldsp	s3,160(sp)
   1ea38:	40d989b3          	sub	s3,s3,a3
   1ea3c:	4039d913          	srai	s2,s3,0x3
    if (n <= (size_type)(cap - base))
   1ea40:	414787b3          	sub	a5,a5,s4
   1ea44:	0537fc63          	bgeu	a5,s3,1ea9c <dwarf::value::as_reference() const+0x35a>
   1ea48:	878d                	c.srai	a5,0x3
   1ea4a:	e391                	c.bnez	a5,1ea4e <dwarf::value::as_reference() const+0x30c>
   1ea4c:	4785                	c.li	a5,1
    while (target < n)
   1ea4e:	0127f563          	bgeu	a5,s2,1ea58 <dwarf::value::as_reference() const+0x316>
      target <<= 1;
   1ea52:	0786                	c.slli	a5,0x1
    while (target < n)
   1ea54:	ff27efe3          	bltu	a5,s2,1ea52 <dwarf::value::as_reference() const+0x310>
    char *newbuf = new char[sizeof(T[target])];
   1ea58:	00379493          	slli	s1,a5,0x3
   1ea5c:	8526                	c.mv	a0,s1
   1ea5e:	b33f70ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   1ea62:	8b2a                	c.mv	s6,a0
    T *src = base, *dest = (T *)newbuf;
   1ea64:	6828                	c.ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   1ea66:	6c38                	c.ld	a4,88(s0)
   1ea68:	06e57663          	bgeu	a0,a4,1ead4 <dwarf::value::as_reference() const+0x392>
    T *src = base, *dest = (T *)newbuf;
   1ea6c:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1ea6e:	07a1                	c.addi	a5,8
   1ea70:	fee7efe3          	bltu	a5,a4,1ea6e <dwarf::value::as_reference() const+0x32c>
   1ea74:	fff70a93          	addi	s5,a4,-1
   1ea78:	40aa8ab3          	sub	s5,s5,a0
   1ea7c:	ff8afa93          	andi	s5,s5,-8
   1ea80:	0aa1                	c.addi	s5,8
   1ea82:	9ada                	c.add	s5,s6
    if ((char *)base != buf)
   1ea84:	00aa0563          	beq	s4,a0,1ea8e <dwarf::value::as_reference() const+0x34c>
      delete[] (char *)base;
   1ea88:	c119                	c.beqz	a0,1ea8e <dwarf::value::as_reference() const+0x34c>
   1ea8a:	dc7f70ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1ea8e:	05643823          	sd	s6,80(s0)
    end = dest;
   1ea92:	05543c23          	sd	s5,88(s0)
    cap = base + target;
   1ea96:	9b26                	c.add	s6,s1
   1ea98:	07643023          	sd	s6,96(s0)
    for (size_type i = 0; i < osize; i++)
   1ea9c:	00090e63          	beq	s2,zero,1eab8 <dwarf::value::as_reference() const+0x376>
   1eaa0:	4781                	c.li	a5,0
   1eaa2:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1eaa6:	676a                	c.ldsp	a4,152(sp)
   1eaa8:	9736                	c.add	a4,a3
   1eaaa:	6310                	c.ld	a2,0(a4)
   1eaac:	6838                	c.ld	a4,80(s0)
   1eaae:	9736                	c.add	a4,a3
   1eab0:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1eab2:	0785                	c.addi	a5,1
   1eab4:	fef917e3          	bne	s2,a5,1eaa2 <dwarf::value::as_reference() const+0x360>
    end = base + osize;
   1eab8:	683c                	c.ld	a5,80(s0)
   1eaba:	97ce                	c.add	a5,s3
   1eabc:	ec3c                	c.sd	a5,88(s0)
    for (T *p = base; p < end; ++p)
   1eabe:	66ea                	c.ldsp	a3,152(sp)
   1eac0:	778a                	c.ldsp	a5,160(sp)
   1eac2:	00f6f763          	bgeu	a3,a5,1ead0 <dwarf::value::as_reference() const+0x38e>
   1eac6:	87b6                	c.mv	a5,a3
   1eac8:	07a1                	c.addi	a5,8
   1eaca:	770a                	c.ldsp	a4,160(sp)
   1eacc:	fee7eee3          	bltu	a5,a4,1eac8 <dwarf::value::as_reference() const+0x386>
    end = base;
   1ead0:	f136                	c.sdsp	a3,160(sp)
  }
   1ead2:	bf35                	c.j	1ea0e <dwarf::value::as_reference() const+0x2cc>
    T *src = base, *dest = (T *)newbuf;
   1ead4:	8ada                	c.mv	s5,s6
   1ead6:	b77d                	c.j	1ea84 <dwarf::value::as_reference() const+0x342>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ead8:	77b2                	c.ldsp	a5,296(sp)
   1eada:	6b98                	c.ld	a4,16(a5)
   1eadc:	77f2                	c.ldsp	a5,312(sp)
   1eade:	40f70633          	sub	a2,a4,a5
   1eae2:	469d                	c.li	a3,7
   1eae4:	00c6f463          	bgeu	a3,a2,1eaec <dwarf::value::as_reference() const+0x3aa>
   1eae8:	00e7e563          	bltu	a5,a4,1eaf2 <dwarf::value::as_reference() const+0x3b0>
      underflow();
   1eaec:	1228                	c.addi4spn	a0,sp,296
   1eaee:	be5fc0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1eaf2:	7672                	c.ldsp	a2,312(sp)
    if (sec->ord == byte_order::lsb) {
   1eaf4:	77b2                	c.ldsp	a5,296(sp)
   1eaf6:	4fdc                	c.lw	a5,28(a5)
   1eaf8:	e795                	c.bnez	a5,1eb24 <dwarf::value::as_reference() const+0x3e2>
   1eafa:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1eafc:	4a81                	c.li	s5,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1eafe:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1eb02:	0006c703          	lbu	a4,0(a3)
   1eb06:	00f71733          	sll	a4,a4,a5
   1eb0a:	00eaeab3          	or	s5,s5,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1eb0e:	0685                	c.addi	a3,1
   1eb10:	27a1                	c.addiw	a5,8
   1eb12:	feb798e3          	bne	a5,a1,1eb02 <dwarf::value::as_reference() const+0x3c0>
    pos += sizeof(T);
   1eb16:	0621                	c.addi	a2,8
   1eb18:	fe32                	c.sdsp	a2,312(sp)
      return cu->get_dwarf().get_type_unit(sig).type();
   1eb1a:	00093503          	ld	a0,0(s2)
   1eb1e:	810f90ef          	jal	ra,17b2e <dwarf::unit::get_dwarf() const>
   1eb22:	a831                	c.j	1eb3e <dwarf::value::as_reference() const+0x3fc>
   1eb24:	87b2                	c.mv	a5,a2
   1eb26:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1eb2a:	4a81                	c.li	s5,0
        val = (val << 8) | (uint64_t)p[i];
   1eb2c:	0aa2                	c.slli	s5,0x8
   1eb2e:	0007c703          	lbu	a4,0(a5)
   1eb32:	01576ab3          	or	s5,a4,s5
      for (unsigned i = 0; i < sizeof(T); i++)
   1eb36:	0785                	c.addi	a5,1
   1eb38:	fef69ae3          	bne	a3,a5,1eb2c <dwarf::value::as_reference() const+0x3ea>
   1eb3c:	bfe9                	c.j	1eb16 <dwarf::value::as_reference() const+0x3d4>
   1eb3e:	85d6                	c.mv	a1,s5
   1eb40:	847fa0ef          	jal	ra,19386 <dwarf::dwarf::get_type_unit(unsigned long) const>
   1eb44:	cb8fb0ef          	jal	ra,19ffc <dwarf::type_unit::type() const>
   1eb48:	84aa                	c.mv	s1,a0
  die(const die &o) = default;
   1eb4a:	411c                	c.lw	a5,0(a0)
   1eb4c:	c01c                	c.sw	a5,0(s0)
   1eb4e:	651c                	c.ld	a5,8(a0)
   1eb50:	e41c                	c.sd	a5,8(s0)
   1eb52:	691c                	c.ld	a5,16(a0)
   1eb54:	e81c                	c.sd	a5,16(s0)
   1eb56:	6d1c                	c.ld	a5,24(a0)
   1eb58:	ec1c                	c.sd	a5,24(s0)
   1eb5a:	02040b13          	addi	s6,s0,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   1eb5e:	05643823          	sd	s6,80(s0)
   1eb62:	05643c23          	sd	s6,88(s0)
   1eb66:	05040793          	addi	a5,s0,80
   1eb6a:	f03c                	c.sd	a5,96(s0)
  size_type size() const { return end - base; }
   1eb6c:	05853983          	ld	s3,88(a0)
   1eb70:	6938                	c.ld	a4,80(a0)
   1eb72:	40e989b3          	sub	s3,s3,a4
   1eb76:	4039d913          	srai	s2,s3,0x3
    if (n <= (size_type)(cap - base))
   1eb7a:	416787b3          	sub	a5,a5,s6
   1eb7e:	0537fc63          	bgeu	a5,s3,1ebd6 <dwarf::value::as_reference() const+0x494>
   1eb82:	878d                	c.srai	a5,0x3
   1eb84:	e391                	c.bnez	a5,1eb88 <dwarf::value::as_reference() const+0x446>
   1eb86:	4785                	c.li	a5,1
    while (target < n)
   1eb88:	0127f563          	bgeu	a5,s2,1eb92 <dwarf::value::as_reference() const+0x450>
      target <<= 1;
   1eb8c:	0786                	c.slli	a5,0x1
    while (target < n)
   1eb8e:	ff27efe3          	bltu	a5,s2,1eb8c <dwarf::value::as_reference() const+0x44a>
    char *newbuf = new char[sizeof(T[target])];
   1eb92:	00379a13          	slli	s4,a5,0x3
   1eb96:	8552                	c.mv	a0,s4
   1eb98:	9f9f70ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   1eb9c:	8baa                	c.mv	s7,a0
    T *src = base, *dest = (T *)newbuf;
   1eb9e:	6828                	c.ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   1eba0:	6c38                	c.ld	a4,88(s0)
   1eba2:	04e57e63          	bgeu	a0,a4,1ebfe <dwarf::value::as_reference() const+0x4bc>
    T *src = base, *dest = (T *)newbuf;
   1eba6:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1eba8:	07a1                	c.addi	a5,8
   1ebaa:	fee7efe3          	bltu	a5,a4,1eba8 <dwarf::value::as_reference() const+0x466>
   1ebae:	fff70a93          	addi	s5,a4,-1
   1ebb2:	40aa8ab3          	sub	s5,s5,a0
   1ebb6:	ff8afa93          	andi	s5,s5,-8
   1ebba:	0aa1                	c.addi	s5,8
   1ebbc:	9ade                	c.add	s5,s7
    if ((char *)base != buf)
   1ebbe:	00ab0563          	beq	s6,a0,1ebc8 <dwarf::value::as_reference() const+0x486>
      delete[] (char *)base;
   1ebc2:	c119                	c.beqz	a0,1ebc8 <dwarf::value::as_reference() const+0x486>
   1ebc4:	c8df70ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1ebc8:	05743823          	sd	s7,80(s0)
    end = dest;
   1ebcc:	05543c23          	sd	s5,88(s0)
    cap = base + target;
   1ebd0:	9bd2                	c.add	s7,s4
   1ebd2:	07743023          	sd	s7,96(s0)
    for (size_type i = 0; i < osize; i++)
   1ebd6:	00090e63          	beq	s2,zero,1ebf2 <dwarf::value::as_reference() const+0x4b0>
   1ebda:	4781                	c.li	a5,0
   1ebdc:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1ebe0:	68b8                	c.ld	a4,80(s1)
   1ebe2:	9736                	c.add	a4,a3
   1ebe4:	6310                	c.ld	a2,0(a4)
   1ebe6:	6838                	c.ld	a4,80(s0)
   1ebe8:	9736                	c.add	a4,a3
   1ebea:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1ebec:	0785                	c.addi	a5,1
   1ebee:	fef917e3          	bne	s2,a5,1ebdc <dwarf::value::as_reference() const+0x49a>
    end = base + osize;
   1ebf2:	683c                	c.ld	a5,80(s0)
   1ebf4:	97ce                	c.add	a5,s3
   1ebf6:	ec3c                	c.sd	a5,88(s0)
   1ebf8:	74bc                	c.ld	a5,104(s1)
   1ebfa:	f43c                	c.sd	a5,104(s0)
   1ebfc:	a229                	c.j	1ed06 <dwarf::value::as_reference() const+0x5c4>
    T *src = base, *dest = (T *)newbuf;
   1ebfe:	8ade                	c.mv	s5,s7
   1ec00:	bf7d                	c.j	1ebbe <dwarf::value::as_reference() const+0x47c>
                              " as reference");
   1ec02:	4541                	c.li	a0,16
   1ec04:	a8df70ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1ec08:	84aa                	c.mv	s1,a0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   1ec0a:	00c92583          	lw	a1,12(s2)
   1ec0e:	0028                	c.addi4spn	a0,sp,8
   1ec10:	388090ef          	jal	ra,27f98 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1ec14:	0000f617          	auipc	a2,0xf
   1ec18:	5d460613          	addi	a2,a2,1492 # 2e1e8 <std::piecewise_construct+0x1c8>
   1ec1c:	4581                	c.li	a1,0
   1ec1e:	0028                	c.addi4spn	a0,sp,8
   1ec20:	9e1f70ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1ec24:	85aa                	c.mv	a1,a0
   1ec26:	1020                	c.addi4spn	s0,sp,40
   1ec28:	8522                	c.mv	a0,s0
   1ec2a:	aa7f70ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1ec2e:	0000f597          	auipc	a1,0xf
   1ec32:	64a58593          	addi	a1,a1,1610 # 2e278 <std::piecewise_construct+0x258>
   1ec36:	8522                	c.mv	a0,s0
   1ec38:	e09f70ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1ec3c:	85aa                	c.mv	a1,a0
   1ec3e:	00a0                	c.addi4spn	s0,sp,72
   1ec40:	8522                	c.mv	a0,s0
   1ec42:	a8ff70ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::logic_error(what_arg) {}
   1ec46:	85a2                	c.mv	a1,s0
   1ec48:	8526                	c.mv	a0,s1
   1ec4a:	e47f70ef          	jal	ra,16a90 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1ec4e:	0001c797          	auipc	a5,0x1c
   1ec52:	8127b783          	ld	a5,-2030(a5) # 3a460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   1ec56:	07c1                	c.addi	a5,16
   1ec58:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1ec5a:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1ec5c:	08bc                	c.addi4spn	a5,sp,88
   1ec5e:	00f50463          	beq	a0,a5,1ec66 <dwarf::value::as_reference() const+0x524>
   1ec62:	b3ff70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ec66:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1ec68:	183c                	c.addi4spn	a5,sp,56
   1ec6a:	00f50463          	beq	a0,a5,1ec72 <dwarf::value::as_reference() const+0x530>
   1ec6e:	b33f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ec72:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1ec74:	083c                	c.addi4spn	a5,sp,24
   1ec76:	00f50463          	beq	a0,a5,1ec7e <dwarf::value::as_reference() const+0x53c>
   1ec7a:	b27f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
                              " as reference");
   1ec7e:	0001c617          	auipc	a2,0x1c
   1ec82:	97263603          	ld	a2,-1678(a2) # 3a5f0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1aaa0>
   1ec86:	0001c597          	auipc	a1,0x1c
   1ec8a:	92a5b583          	ld	a1,-1750(a1) # 3a5b0 <typeinfo for dwarf::value_type_mismatch@@Base+0xca18>
   1ec8e:	8526                	c.mv	a0,s1
   1ec90:	cd1f70ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1ec94:	842a                	c.mv	s0,a0
   1ec96:	a24d                	c.j	1ee38 <dwarf::value::as_reference() const+0x6f6>
    return 0;
   1ec98:	4481                	c.li	s1,0
   1ec9a:	ac55                	c.j	1ef4e <dwarf::value::as_reference() const+0x80c>
  d.read(off);
   1ec9c:	85a6                	c.mv	a1,s1
   1ec9e:	1928                	c.addi4spn	a0,sp,184
   1eca0:	89cfd0ef          	jal	ra,1bd3c <dwarf::die::read(unsigned long)>
  die(die &&o) = default;
   1eca4:	57ea                	c.lwsp	a5,184(sp)
   1eca6:	c01c                	c.sw	a5,0(s0)
   1eca8:	678e                	c.ldsp	a5,192(sp)
   1ecaa:	e41c                	c.sd	a5,8(s0)
   1ecac:	67ae                	c.ldsp	a5,200(sp)
   1ecae:	e81c                	c.sd	a5,16(s0)
   1ecb0:	67ce                	c.ldsp	a5,208(sp)
   1ecb2:	ec1c                	c.sd	a5,24(s0)
   1ecb4:	02040a13          	addi	s4,s0,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   1ecb8:	05443823          	sd	s4,80(s0)
   1ecbc:	05443c23          	sd	s4,88(s0)
   1ecc0:	05040793          	addi	a5,s0,80
   1ecc4:	f03c                	c.sd	a5,96(s0)
    if ((char *)o.base == o.buf) {
   1ecc6:	6732                	c.ldsp	a4,264(sp)
   1ecc8:	09b4                	c.addi4spn	a3,sp,216
   1ecca:	06d70a63          	beq	a4,a3,1ed3e <dwarf::value::as_reference() const+0x5fc>
      base = o.base;
   1ecce:	e838                	c.sd	a4,80(s0)
      end = o.end;
   1ecd0:	67d2                	c.ldsp	a5,272(sp)
   1ecd2:	ec3c                	c.sd	a5,88(s0)
      cap = o.cap;
   1ecd4:	67f2                	c.ldsp	a5,280(sp)
   1ecd6:	f03c                	c.sd	a5,96(s0)
      o.base = (T *)o.buf;
   1ecd8:	09bc                	c.addi4spn	a5,sp,216
   1ecda:	e63e                	c.sdsp	a5,264(sp)
      o.end = o.base;
   1ecdc:	ea3e                	c.sdsp	a5,272(sp)
      o.cap = (T *)&o.buf[sizeof(T[Min])];
   1ecde:	023c                	c.addi4spn	a5,sp,264
   1ece0:	ee3e                	c.sdsp	a5,280(sp)
   1ece2:	7792                	c.ldsp	a5,288(sp)
   1ece4:	f43c                	c.sd	a5,104(s0)
    for (T *p = base; p < end; ++p)
   1ece6:	6532                	c.ldsp	a0,264(sp)
   1ece8:	67d2                	c.ldsp	a5,272(sp)
   1ecea:	00f57763          	bgeu	a0,a5,1ecf8 <dwarf::value::as_reference() const+0x5b6>
   1ecee:	87aa                	c.mv	a5,a0
   1ecf0:	07a1                	c.addi	a5,8
   1ecf2:	6752                	c.ldsp	a4,272(sp)
   1ecf4:	fee7eee3          	bltu	a5,a4,1ecf0 <dwarf::value::as_reference() const+0x5ae>
    end = base;
   1ecf8:	ea2a                	c.sdsp	a0,272(sp)
    if ((char *)base != buf)
   1ecfa:	09bc                	c.addi4spn	a5,sp,216
   1ecfc:	00f50563          	beq	a0,a5,1ed06 <dwarf::value::as_reference() const+0x5c4>
      delete[] (char *)base;
   1ed00:	c119                	c.beqz	a0,1ed06 <dwarf::value::as_reference() const+0x5c4>
   1ed02:	b4ff70ef          	jal	ra,16850 <operator delete[](void*)@plt>
   1ed06:	74d2                	c.ldsp	s1,304(sp)
   1ed08:	cc99                	c.beqz	s1,1ed26 <dwarf::value::as_reference() const+0x5e4>
    if (__is_single_threaded())
   1ed0a:	0001b797          	auipc	a5,0x1b
   1ed0e:	78e7b783          	ld	a5,1934(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1ed12:	0007c783          	lbu	a5,0(a5)
   1ed16:	c7e9                	c.beqz	a5,1ede0 <dwarf::value::as_reference() const+0x69e>
    _Atomic_word __result = *__mem;
   1ed18:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1ed1a:	fff5079b          	addiw	a5,a0,-1
   1ed1e:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1ed20:	4785                	c.li	a5,1
   1ed22:	0cf50563          	beq	a0,a5,1edec <dwarf::value::as_reference() const+0x6aa>
}
   1ed26:	8522                	c.mv	a0,s0
   1ed28:	60ba                	c.ldsp	ra,392(sp)
   1ed2a:	641a                	c.ldsp	s0,384(sp)
   1ed2c:	74f6                	c.ldsp	s1,376(sp)
   1ed2e:	7956                	c.ldsp	s2,368(sp)
   1ed30:	79b6                	c.ldsp	s3,360(sp)
   1ed32:	7a16                	c.ldsp	s4,352(sp)
   1ed34:	6af6                	c.ldsp	s5,344(sp)
   1ed36:	6b56                	c.ldsp	s6,336(sp)
   1ed38:	6bb6                	c.ldsp	s7,328(sp)
   1ed3a:	6159                	c.addi16sp	sp,400
   1ed3c:	8082                	c.jr	ra
  size_type size() const { return end - base; }
   1ed3e:	69d2                	c.ldsp	s3,272(sp)
   1ed40:	40d989b3          	sub	s3,s3,a3
   1ed44:	4039d913          	srai	s2,s3,0x3
    if (n <= (size_type)(cap - base))
   1ed48:	414787b3          	sub	a5,a5,s4
   1ed4c:	0537fc63          	bgeu	a5,s3,1eda4 <dwarf::value::as_reference() const+0x662>
   1ed50:	878d                	c.srai	a5,0x3
   1ed52:	e391                	c.bnez	a5,1ed56 <dwarf::value::as_reference() const+0x614>
   1ed54:	4785                	c.li	a5,1
    while (target < n)
   1ed56:	0127f563          	bgeu	a5,s2,1ed60 <dwarf::value::as_reference() const+0x61e>
      target <<= 1;
   1ed5a:	0786                	c.slli	a5,0x1
    while (target < n)
   1ed5c:	ff27efe3          	bltu	a5,s2,1ed5a <dwarf::value::as_reference() const+0x618>
    char *newbuf = new char[sizeof(T[target])];
   1ed60:	00379493          	slli	s1,a5,0x3
   1ed64:	8526                	c.mv	a0,s1
   1ed66:	82bf70ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   1ed6a:	8b2a                	c.mv	s6,a0
    T *src = base, *dest = (T *)newbuf;
   1ed6c:	6828                	c.ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   1ed6e:	6c38                	c.ld	a4,88(s0)
   1ed70:	06e57663          	bgeu	a0,a4,1eddc <dwarf::value::as_reference() const+0x69a>
    T *src = base, *dest = (T *)newbuf;
   1ed74:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1ed76:	07a1                	c.addi	a5,8
   1ed78:	fee7efe3          	bltu	a5,a4,1ed76 <dwarf::value::as_reference() const+0x634>
   1ed7c:	fff70a93          	addi	s5,a4,-1
   1ed80:	40aa8ab3          	sub	s5,s5,a0
   1ed84:	ff8afa93          	andi	s5,s5,-8
   1ed88:	0aa1                	c.addi	s5,8
   1ed8a:	9ada                	c.add	s5,s6
    if ((char *)base != buf)
   1ed8c:	00aa0563          	beq	s4,a0,1ed96 <dwarf::value::as_reference() const+0x654>
      delete[] (char *)base;
   1ed90:	c119                	c.beqz	a0,1ed96 <dwarf::value::as_reference() const+0x654>
   1ed92:	abff70ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1ed96:	05643823          	sd	s6,80(s0)
    end = dest;
   1ed9a:	05543c23          	sd	s5,88(s0)
    cap = base + target;
   1ed9e:	9b26                	c.add	s6,s1
   1eda0:	07643023          	sd	s6,96(s0)
    for (size_type i = 0; i < osize; i++)
   1eda4:	00090e63          	beq	s2,zero,1edc0 <dwarf::value::as_reference() const+0x67e>
   1eda8:	4781                	c.li	a5,0
   1edaa:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1edae:	6732                	c.ldsp	a4,264(sp)
   1edb0:	9736                	c.add	a4,a3
   1edb2:	6310                	c.ld	a2,0(a4)
   1edb4:	6838                	c.ld	a4,80(s0)
   1edb6:	9736                	c.add	a4,a3
   1edb8:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1edba:	0785                	c.addi	a5,1
   1edbc:	fef917e3          	bne	s2,a5,1edaa <dwarf::value::as_reference() const+0x668>
    end = base + osize;
   1edc0:	683c                	c.ld	a5,80(s0)
   1edc2:	97ce                	c.add	a5,s3
   1edc4:	ec3c                	c.sd	a5,88(s0)
    for (T *p = base; p < end; ++p)
   1edc6:	66b2                	c.ldsp	a3,264(sp)
   1edc8:	67d2                	c.ldsp	a5,272(sp)
   1edca:	00f6f763          	bgeu	a3,a5,1edd8 <dwarf::value::as_reference() const+0x696>
   1edce:	87b6                	c.mv	a5,a3
   1edd0:	07a1                	c.addi	a5,8
   1edd2:	6752                	c.ldsp	a4,272(sp)
   1edd4:	fee7eee3          	bltu	a5,a4,1edd0 <dwarf::value::as_reference() const+0x68e>
    end = base;
   1edd8:	ea36                	c.sdsp	a3,272(sp)
  }
   1edda:	b721                	c.j	1ece2 <dwarf::value::as_reference() const+0x5a0>
    T *src = base, *dest = (T *)newbuf;
   1eddc:	8ada                	c.mv	s5,s6
   1edde:	b77d                	c.j	1ed8c <dwarf::value::as_reference() const+0x64a>
      return __exchange_and_add(__mem, __val);
   1ede0:	55fd                	c.li	a1,-1
   1ede2:	03048513          	addi	a0,s1,48
   1ede6:	80bf70ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1edea:	bf1d                	c.j	1ed20 <dwarf::value::as_reference() const+0x5de>
	_M_dispose();
   1edec:	609c                	c.ld	a5,0(s1)
   1edee:	6b9c                	c.ld	a5,16(a5)
   1edf0:	8526                	c.mv	a0,s1
   1edf2:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1edf4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1edf8:	0001b797          	auipc	a5,0x1b
   1edfc:	6a07b783          	ld	a5,1696(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1ee00:	0007c783          	lbu	a5,0(a5)
   1ee04:	cf89                	c.beqz	a5,1ee1e <dwarf::value::as_reference() const+0x6dc>
    _Atomic_word __result = *__mem;
   1ee06:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1ee08:	fff5079b          	addiw	a5,a0,-1
   1ee0c:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1ee0e:	4785                	c.li	a5,1
   1ee10:	f0f51be3          	bne	a0,a5,1ed26 <dwarf::value::as_reference() const+0x5e4>
	    _M_destroy();
   1ee14:	609c                	c.ld	a5,0(s1)
   1ee16:	6f9c                	c.ld	a5,24(a5)
   1ee18:	8526                	c.mv	a0,s1
   1ee1a:	9782                	c.jalr	a5
   1ee1c:	b729                	c.j	1ed26 <dwarf::value::as_reference() const+0x5e4>
      return __exchange_and_add(__mem, __val);
   1ee1e:	55fd                	c.li	a1,-1
   1ee20:	03448513          	addi	a0,s1,52
   1ee24:	fccf70ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ee28:	b7dd                	c.j	1ee0e <dwarf::value::as_reference() const+0x6cc>
class die {
   1ee2a:	842a                	c.mv	s0,a0
   1ee2c:	10a8                	c.addi4spn	a0,sp,104
   1ee2e:	0001b317          	auipc	t1,0x1b
   1ee32:	5d233303          	ld	t1,1490(t1) # 3a400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x22e14>
   1ee36:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   1ee38:	7552                	c.ldsp	a0,304(sp)
   1ee3a:	c511                	c.beqz	a0,1ee46 <dwarf::value::as_reference() const+0x704>
	  _M_pi->_M_release();
   1ee3c:	0001b317          	auipc	t1,0x1b
   1ee40:	5a433303          	ld	t1,1444(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   1ee44:	9302                	c.jalr	t1
   1ee46:	8522                	c.mv	a0,s0
   1ee48:	b49f70ef          	jal	ra,16990 <_Unwind_Resume@plt>
    } catch (std::out_of_range &e) {
   1ee4c:	4785                	c.li	a5,1
   1ee4e:	842a                	c.mv	s0,a0
   1ee50:	fef594e3          	bne	a1,a5,1ee38 <dwarf::value::as_reference() const+0x6f6>
   1ee54:	81df70ef          	jal	ra,16670 <__cxa_begin_catch@plt>
      throw format_error("unknown type signature 0x" + to_hex(sig));
   1ee58:	4541                	c.li	a0,16
   1ee5a:	837f70ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1ee5e:	84aa                	c.mv	s1,a0
   1ee60:	85d6                	c.mv	a1,s5
   1ee62:	1028                	c.addi4spn	a0,sp,40
   1ee64:	0001b317          	auipc	t1,0x1b
   1ee68:	4ac33303          	ld	t1,1196(t1) # 3a310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1fa10>
   1ee6c:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   1ee6e:	0000f617          	auipc	a2,0xf
   1ee72:	41a60613          	addi	a2,a2,1050 # 2e288 <std::piecewise_construct+0x268>
   1ee76:	4581                	c.li	a1,0
   1ee78:	1028                	c.addi4spn	a0,sp,40
   1ee7a:	f86f70ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1ee7e:	85aa                	c.mv	a1,a0
   1ee80:	00a0                	c.addi4spn	s0,sp,72
   1ee82:	8522                	c.mv	a0,s0
   1ee84:	84df70ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   1ee88:	85a2                	c.mv	a1,s0
   1ee8a:	8526                	c.mv	a0,s1
   1ee8c:	9a5f70ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1ee90:	0001b797          	auipc	a5,0x1b
   1ee94:	6e07b783          	ld	a5,1760(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   1ee98:	07c1                	c.addi	a5,16
   1ee9a:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1ee9c:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1ee9e:	08bc                	c.addi4spn	a5,sp,88
   1eea0:	00f50463          	beq	a0,a5,1eea8 <dwarf::value::as_reference() const+0x766>
   1eea4:	8fdf70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1eea8:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1eeaa:	183c                	c.addi4spn	a5,sp,56
   1eeac:	00f50463          	beq	a0,a5,1eeb4 <dwarf::value::as_reference() const+0x772>
   1eeb0:	8f1f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1eeb4:	0001b617          	auipc	a2,0x1b
   1eeb8:	4e463603          	ld	a2,1252(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   1eebc:	0001b597          	auipc	a1,0x1b
   1eec0:	40c5b583          	ld	a1,1036(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   1eec4:	8526                	c.mv	a0,s1
   1eec6:	a9bf70ef          	jal	ra,16960 <__cxa_throw@plt>
    }
   1eeca:	842a                	c.mv	s0,a0
   1eecc:	a00d                	c.j	1eeee <dwarf::value::as_reference() const+0x7ac>
      { return _M_dataplus._M_p; }
   1eece:	842a                	c.mv	s0,a0
   1eed0:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1eed2:	08bc                	c.addi4spn	a5,sp,88
   1eed4:	00f50463          	beq	a0,a5,1eedc <dwarf::value::as_reference() const+0x79a>
   1eed8:	8c9f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1eedc:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1eede:	183c                	c.addi4spn	a5,sp,56
   1eee0:	00f50463          	beq	a0,a5,1eee8 <dwarf::value::as_reference() const+0x7a6>
   1eee4:	8bdf70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      throw format_error("unknown type signature 0x" + to_hex(sig));
   1eee8:	8526                	c.mv	a0,s1
   1eeea:	867f70ef          	jal	ra,16750 <__cxa_free_exception@plt>
    }
   1eeee:	a43f70ef          	jal	ra,16930 <__cxa_end_catch@plt>
   1eef2:	b799                	c.j	1ee38 <dwarf::value::as_reference() const+0x6f6>
      { return _M_dataplus._M_p; }
   1eef4:	842a                	c.mv	s0,a0
   1eef6:	b7dd                	c.j	1eedc <dwarf::value::as_reference() const+0x79a>
      throw format_error("unknown type signature 0x" + to_hex(sig));
   1eef8:	842a                	c.mv	s0,a0
   1eefa:	b7fd                	c.j	1eee8 <dwarf::value::as_reference() const+0x7a6>
   1eefc:	842a                	c.mv	s0,a0
   1eefe:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1ef00:	08bc                	c.addi4spn	a5,sp,88
   1ef02:	00f50463          	beq	a0,a5,1ef0a <dwarf::value::as_reference() const+0x7c8>
   1ef06:	89bf70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ef0a:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1ef0c:	183c                	c.addi4spn	a5,sp,56
   1ef0e:	00f50463          	beq	a0,a5,1ef16 <dwarf::value::as_reference() const+0x7d4>
   1ef12:	88ff70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ef16:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1ef18:	083c                	c.addi4spn	a5,sp,24
   1ef1a:	00f50463          	beq	a0,a5,1ef22 <dwarf::value::as_reference() const+0x7e0>
   1ef1e:	883f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
                              " as reference");
   1ef22:	8526                	c.mv	a0,s1
   1ef24:	82df70ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1ef28:	bf01                	c.j	1ee38 <dwarf::value::as_reference() const+0x6f6>
      { return _M_dataplus._M_p; }
   1ef2a:	842a                	c.mv	s0,a0
   1ef2c:	bff9                	c.j	1ef0a <dwarf::value::as_reference() const+0x7c8>
   1ef2e:	842a                	c.mv	s0,a0
   1ef30:	b7dd                	c.j	1ef16 <dwarf::value::as_reference() const+0x7d4>
   1ef32:	842a                	c.mv	s0,a0
   1ef34:	b7fd                	c.j	1ef22 <dwarf::value::as_reference() const+0x7e0>
class die {
   1ef36:	842a                	c.mv	s0,a0
   1ef38:	09a8                	c.addi4spn	a0,sp,216
   1ef3a:	0001b317          	auipc	t1,0x1b
   1ef3e:	4c633303          	ld	t1,1222(t1) # 3a400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x22e14>
   1ef42:	9302                	c.jalr	t1
   1ef44:	bdd5                	c.j	1ee38 <dwarf::value::as_reference() const+0x6f6>
        val |= ((uint64_t)p[i]) << (i * 8);
   1ef46:	0007c483          	lbu	s1,0(a5)
    pos += sizeof(T);
   1ef4a:	0785                	c.addi	a5,1
   1ef4c:	fe3e                	c.sdsp	a5,312(sp)
  die d(cu);
   1ef4e:	00093583          	ld	a1,0(s2)
   1ef52:	1928                	c.addi4spn	a0,sp,184
   1ef54:	db5fc0ef          	jal	ra,1bd08 <dwarf::die::die(dwarf::unit const*)>
   1ef58:	b391                	c.j	1ec9c <dwarf::value::as_reference() const+0x55a>
  cursor cur(cu->data(), offset);
   1ef5a:	01093703          	ld	a4,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1ef5e:	f64e                	c.sdsp	s3,296(sp)
      : _M_pi(__r._M_pi)
   1ef60:	fa02                	c.sdsp	zero,304(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1ef62:	0089b783          	ld	a5,8(s3)
   1ef66:	97ba                	c.add	a5,a4
   1ef68:	fe3e                	c.sdsp	a5,312(sp)
  switch (form) {
   1ef6a:	00892783          	lw	a5,8(s2)
   1ef6e:	37c1                	c.addiw	a5,-16
   1ef70:	0007869b          	addiw	a3,a5,0
   1ef74:	4741                	c.li	a4,16
   1ef76:	c8d766e3          	bltu	a4,a3,1ec02 <dwarf::value::as_reference() const+0x4c0>
   1ef7a:	02079713          	slli	a4,a5,0x20
   1ef7e:	01e75793          	srli	a5,a4,0x1e
   1ef82:	0000f717          	auipc	a4,0xf
   1ef86:	4f670713          	addi	a4,a4,1270 # 2e478 <std::piecewise_construct+0x458>
   1ef8a:	97ba                	c.add	a5,a4
   1ef8c:	439c                	c.lw	a5,0(a5)
   1ef8e:	97ba                	c.add	a5,a4
   1ef90:	8782                	c.jr	a5

000000000001ef92 <dwarf::to_string[abi:cxx11](dwarf::value const&)>:

string to_string(const value &v) {
   1ef92:	7169                	c.addi16sp	sp,-304
   1ef94:	f606                	c.sdsp	ra,296(sp)
   1ef96:	f222                	c.sdsp	s0,288(sp)
   1ef98:	ee26                	c.sdsp	s1,280(sp)
   1ef9a:	ea4a                	c.sdsp	s2,272(sp)
   1ef9c:	e64e                	c.sdsp	s3,264(sp)
   1ef9e:	e252                	c.sdsp	s4,256(sp)
   1efa0:	fdd6                	c.sdsp	s5,248(sp)
   1efa2:	f9da                	c.sdsp	s6,240(sp)
   1efa4:	f5de                	c.sdsp	s7,232(sp)
   1efa6:	f1e2                	c.sdsp	s8,224(sp)
   1efa8:	ede6                	c.sdsp	s9,216(sp)
   1efaa:	e9ea                	c.sdsp	s10,208(sp)
   1efac:	e5ee                	c.sdsp	s11,200(sp)
   1efae:	842a                	c.mv	s0,a0
   1efb0:	852e                	c.mv	a0,a1
  type get_type() const { return typ; }
   1efb2:	45cc                	c.lw	a1,12(a1)
  switch (v.get_type()) {
   1efb4:	4735                	c.li	a4,13
   1efb6:	26b760e3          	bltu	a4,a1,1fa16 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa84>
   1efba:	00259793          	slli	a5,a1,0x2
   1efbe:	0000f717          	auipc	a4,0xf
   1efc2:	4fe70713          	addi	a4,a4,1278 # 2e4bc <std::piecewise_construct+0x49c>
   1efc6:	97ba                	c.add	a5,a4
   1efc8:	439c                	c.lw	a5,0(a5)
   1efca:	97ba                	c.add	a5,a4
   1efcc:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1efce:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   1efd2:	e01c                	c.sd	a5,0(s0)
	_M_construct(__s, __end, forward_iterator_tag());
   1efd4:	4681                	c.li	a3,0
   1efd6:	0000f617          	auipc	a2,0xf
   1efda:	2f660613          	addi	a2,a2,758 # 2e2cc <std::piecewise_construct+0x2ac>
   1efde:	0000f597          	auipc	a1,0xf
   1efe2:	2da58593          	addi	a1,a1,730 # 2e2b8 <std::piecewise_construct+0x298>
   1efe6:	8522                	c.mv	a0,s0
   1efe8:	0001b317          	auipc	t1,0x1b
   1efec:	33833303          	ld	t1,824(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   1eff0:	9302                	c.jalr	t1
  }
  case value::type::string:
    return v.as_string();
  }
  return "<unexpected value type " + to_string(v.get_type()) + ">";
}
   1eff2:	8522                	c.mv	a0,s0
   1eff4:	70b2                	c.ldsp	ra,296(sp)
   1eff6:	7412                	c.ldsp	s0,288(sp)
   1eff8:	64f2                	c.ldsp	s1,280(sp)
   1effa:	6952                	c.ldsp	s2,272(sp)
   1effc:	69b2                	c.ldsp	s3,264(sp)
   1effe:	6a12                	c.ldsp	s4,256(sp)
   1f000:	7aee                	c.ldsp	s5,248(sp)
   1f002:	7b4e                	c.ldsp	s6,240(sp)
   1f004:	7bae                	c.ldsp	s7,232(sp)
   1f006:	7c0e                	c.ldsp	s8,224(sp)
   1f008:	6cee                	c.ldsp	s9,216(sp)
   1f00a:	6d4e                	c.ldsp	s10,208(sp)
   1f00c:	6dae                	c.ldsp	s11,200(sp)
   1f00e:	6155                	c.addi16sp	sp,304
   1f010:	8082                	c.jr	ra
    return "0x" + to_hex(v.as_address());
   1f012:	80bfd0ef          	jal	ra,1c81c <dwarf::value::as_address() const>
   1f016:	85aa                	c.mv	a1,a0
   1f018:	0884                	c.addi4spn	s1,sp,80
   1f01a:	8526                	c.mv	a0,s1
   1f01c:	0001b317          	auipc	t1,0x1b
   1f020:	2f433303          	ld	t1,756(t1) # 3a310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1fa10>
   1f024:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1f026:	4709                	c.li	a4,2
   1f028:	00010697          	auipc	a3,0x10
   1f02c:	1d868693          	addi	a3,a3,472 # 2f200 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d0>
   1f030:	4601                	c.li	a2,0
   1f032:	4581                	c.li	a1,0
   1f034:	8526                	c.mv	a0,s1
   1f036:	8cbf70ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1f03a:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1f03c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1f040:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1f042:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1f044:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1f048:	03278463          	beq	a5,s2,1f070 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xde>
      { _M_dataplus._M_p = __p; }
   1f04c:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1f04e:	689c                	c.ld	a5,16(s1)
   1f050:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1f052:	649c                	c.ld	a5,8(s1)
   1f054:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1f056:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1f05a:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1f05e:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1f062:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1f064:	109c                	c.addi4spn	a5,sp,96
   1f066:	f8f506e3          	beq	a0,a5,1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
   1f06a:	f36f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1f06e:	b751                	c.j	1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1f070:	6490                	c.ld	a2,8(s1)
   1f072:	0605                	c.addi	a2,1
	if (__n == 0)
   1f074:	de79                	c.beqz	a2,1f052 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xc0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1f076:	85ca                	c.mv	a1,s2
   1f078:	fc8f70ef          	jal	ra,16840 <memcpy@plt>
   1f07c:	bfd9                	c.j	1f052 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xc0>
    const char *b = (const char *)v.as_block(&size);
   1f07e:	080c                	c.addi4spn	a1,sp,16
   1f080:	9f7fd0ef          	jal	ra,1ca76 <dwarf::value::as_block(unsigned long*) const>
   1f084:	8a2a                	c.mv	s4,a0
    string res = ::to_string(size) + " byte block:";
   1f086:	64c2                	c.ldsp	s1,16(sp)
  to_string(unsigned long __val)
#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_LONG__) <= 32
  noexcept // any 32-bit value fits in the SSO buffer
#endif
  {
    string __str(__detail::__to_chars_len(__val), '\0');
   1f088:	45a9                	c.li	a1,10
   1f08a:	8526                	c.mv	a0,s1
   1f08c:	0001b317          	auipc	t1,0x1b
   1f090:	4b433303          	ld	t1,1204(t1) # 3a540 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)@@Base+0x1a6be>
   1f094:	9302                	c.jalr	t1
	: allocator_type(__a), _M_p(__dat) { }
   1f096:	109c                	c.addi4spn	a5,sp,96
   1f098:	e8be                	c.sdsp	a5,80(sp)
      { _M_construct(__n, __c); }
   1f09a:	4601                	c.li	a2,0
   1f09c:	02051593          	slli	a1,a0,0x20
   1f0a0:	9181                	c.srli	a1,0x20
   1f0a2:	0888                	c.addi4spn	a0,sp,80
   1f0a4:	f5cf70ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   1f0a8:	8626                	c.mv	a2,s1
   1f0aa:	45e6                	c.lwsp	a1,88(sp)
   1f0ac:	6546                	c.ldsp	a0,80(sp)
   1f0ae:	0001b317          	auipc	t1,0x1b
   1f0b2:	35a33303          	ld	t1,858(t1) # 3a408 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)@@Base+0x1a526>
   1f0b6:	9302                	c.jalr	t1
	if (this->max_size() - (this->size() - __n1) < __n2)
   1f0b8:	57fd                	c.li	a5,-1
   1f0ba:	8389                	c.srli	a5,0x2
   1f0bc:	6766                	c.ldsp	a4,88(sp)
   1f0be:	8f99                	c.sub	a5,a4
   1f0c0:	472d                	c.li	a4,11
   1f0c2:	00f77b63          	bgeu	a4,a5,1f0d8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x146>
	return _M_append(__s, __n);
   1f0c6:	4631                	c.li	a2,12
   1f0c8:	0000f597          	auipc	a1,0xf
   1f0cc:	22058593          	addi	a1,a1,544 # 2e2e8 <std::piecewise_construct+0x2c8>
   1f0d0:	0888                	c.addi4spn	a0,sp,80
   1f0d2:	d5ef70ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1f0d6:	a00d                	c.j	1f0f8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x166>
	  __throw_length_error(__N(__s));
   1f0d8:	0000f517          	auipc	a0,0xf
   1f0dc:	1f850513          	addi	a0,a0,504 # 2e2d0 <std::piecewise_construct+0x2b0>
   1f0e0:	dc0f70ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1f0e4:	842a                	c.mv	s0,a0
   1f0e6:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1f0e8:	109c                	c.addi4spn	a5,sp,96
   1f0ea:	00f50463          	beq	a0,a5,1f0f2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x160>
   1f0ee:	eb2f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1f0f2:	8522                	c.mv	a0,s0
   1f0f4:	89df70ef          	jal	ra,16990 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   1f0f8:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1f0fa:	009c                	c.addi4spn	a5,sp,64
   1f0fc:	f83e                	c.sdsp	a5,48(sp)
      { return _M_dataplus._M_p; }
   1f0fe:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1f100:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1f104:	05278663          	beq	a5,s2,1f150 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1be>
      { _M_dataplus._M_p = __p; }
   1f108:	f83e                	c.sdsp	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   1f10a:	691c                	c.ld	a5,16(a0)
   1f10c:	e0be                	c.sdsp	a5,64(sp)
      { _M_string_length = __length; }
   1f10e:	649c                	c.ld	a5,8(s1)
   1f110:	fc3e                	c.sdsp	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   1f112:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1f116:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1f11a:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1f11e:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1f120:	109c                	c.addi4spn	a5,sp,96
   1f122:	00f50463          	beq	a0,a5,1f12a <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x198>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f126:	e7af70ef          	jal	ra,167a0 <operator delete(void*)@plt>
    for (size_t pos = 0; pos < size; ++pos) {
   1f12a:	67c2                	c.ldsp	a5,16(sp)
   1f12c:	14078363          	beq	a5,zero,1f272 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2e0>
   1f130:	4481                	c.li	s1,0
	return _M_is_local() ? size_type(_S_local_capacity)
   1f132:	04010b13          	addi	s6,sp,64
   1f136:	4cbd                	c.li	s9,15
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
   1f138:	03010993          	addi	s3,sp,48
	: allocator_type(__a), _M_p(__dat) { }
   1f13c:	05010b93          	addi	s7,sp,80
   1f140:	06010913          	addi	s2,sp,96
    pos--;
   1f144:	00810c13          	addi	s8,sp,8
	if (this->max_size() - (this->size() - __n1) < __n2)
   1f148:	5afd                	c.li	s5,-1
   1f14a:	002ada93          	srli	s5,s5,0x2
   1f14e:	a04d                	c.j	1f1f0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x25e>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1f150:	6510                	c.ld	a2,8(a0)
   1f152:	0605                	c.addi	a2,1
	if (__n == 0)
   1f154:	de4d                	c.beqz	a2,1f10e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x17c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1f156:	85ca                	c.mv	a1,s2
   1f158:	0088                	c.addi4spn	a0,sp,64
   1f15a:	ee6f70ef          	jal	ra,16840 <memcpy@plt>
   1f15e:	bf45                	c.j	1f10e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x17c>
	return _M_is_local() ? size_type(_S_local_capacity)
   1f160:	87e6                	c.mv	a5,s9
   1f162:	a871                	c.j	1f1fe <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x26c>
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
   1f164:	4705                	c.li	a4,1
   1f166:	4681                	c.li	a3,0
   1f168:	4601                	c.li	a2,0
   1f16a:	85ee                	c.mv	a1,s11
   1f16c:	854e                	c.mv	a0,s3
   1f16e:	863f70ef          	jal	ra,169d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1f172:	a841                	c.j	1f202 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x270>
	: allocator_type(__a), _M_p(__dat) { }
   1f174:	e8ca                	c.sdsp	s2,80(sp)
	_M_construct(__s, __end, forward_iterator_tag());
   1f176:	4681                	c.li	a3,0
   1f178:	00011617          	auipc	a2,0x11
   1f17c:	aa160613          	addi	a2,a2,-1375 # 2fc19 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   1f180:	00011597          	auipc	a1,0x11
   1f184:	a9858593          	addi	a1,a1,-1384 # 2fc18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe8>
   1f188:	855e                	c.mv	a0,s7
   1f18a:	0001b317          	auipc	t1,0x1b
   1f18e:	19633303          	ld	t1,406(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   1f192:	9302                	c.jalr	t1
   1f194:	a021                	c.j	1f19c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x20a>
  *pos-- = '\0';
   1f196:	00910d13          	addi	s10,sp,9
   1f19a:	a86d                	c.j	1f254 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2c2>
      { return _M_dataplus._M_p; }
   1f19c:	65c6                	c.ldsp	a1,80(sp)
      { return _M_string_length; }
   1f19e:	6666                	c.ldsp	a2,88(sp)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1f1a0:	77e2                	c.ldsp	a5,56(sp)
   1f1a2:	40fa87b3          	sub	a5,s5,a5
   1f1a6:	00c7e663          	bltu	a5,a2,1f1b2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x220>
	return _M_append(__s, __n);
   1f1aa:	854e                	c.mv	a0,s3
   1f1ac:	c84f70ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1f1b0:	a03d                	c.j	1f1de <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x24c>
	  __throw_length_error(__N(__s));
   1f1b2:	0000f517          	auipc	a0,0xf
   1f1b6:	11e50513          	addi	a0,a0,286 # 2e2d0 <std::piecewise_construct+0x2b0>
   1f1ba:	ce6f70ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1f1be:	842a                	c.mv	s0,a0
   1f1c0:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1f1c2:	109c                	c.addi4spn	a5,sp,96
   1f1c4:	00f50463          	beq	a0,a5,1f1cc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x23a>
   1f1c8:	dd8f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f1cc:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1f1ce:	009c                	c.addi4spn	a5,sp,64
   1f1d0:	00f50463          	beq	a0,a5,1f1d8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x246>
   1f1d4:	dccf70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1f1d8:	8522                	c.mv	a0,s0
   1f1da:	fb6f70ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1f1de:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1f1e0:	01250463          	beq	a0,s2,1f1e8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x256>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f1e4:	dbcf70ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1f1e8:	0485                	c.addi	s1,1
   1f1ea:	67c2                	c.ldsp	a5,16(sp)
   1f1ec:	08f4f363          	bgeu	s1,a5,1f272 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2e0>
      { return _M_string_length; }
   1f1f0:	7de2                	c.ldsp	s11,56(sp)
	if (__size + 1 > this->capacity())
   1f1f2:	001d8d13          	addi	s10,s11,1
	return _M_is_local() ? size_type(_S_local_capacity)
   1f1f6:	77c2                	c.ldsp	a5,48(sp)
   1f1f8:	f76784e3          	beq	a5,s6,1f160 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1ce>
   1f1fc:	6786                	c.ldsp	a5,64(sp)
	if (__size + 1 > this->capacity())
   1f1fe:	f7a7e3e3          	bltu	a5,s10,1f164 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1d2>
	__c1 = __c2;
   1f202:	75c2                	c.ldsp	a1,48(sp)
   1f204:	95ee                	c.add	a1,s11
   1f206:	02000793          	addi	a5,zero,32
   1f20a:	00f58023          	sb	a5,0(a1)
      { _M_string_length = __length; }
   1f20e:	fc6a                	c.sdsp	s10,56(sp)
   1f210:	77c2                	c.ldsp	a5,48(sp)
   1f212:	97ea                	c.add	a5,s10
   1f214:	00078023          	sb	zero,0(a5)
      res += to_hex(b[pos]);
   1f218:	009a07b3          	add	a5,s4,s1
   1f21c:	0007c783          	lbu	a5,0(a5)
  if (v == 0)
   1f220:	dbb1                	c.beqz	a5,1f174 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1e2>
  *pos-- = '\0';
   1f222:	00010523          	sb	zero,10(sp)
  while (v && pos >= buf) {
   1f226:	00f7f713          	andi	a4,a5,15
    if (digit < 10)
   1f22a:	4625                	c.li	a2,9
      *pos = '0' + digit;
   1f22c:	03070693          	addi	a3,a4,48
    if (digit < 10)
   1f230:	00e67463          	bgeu	a2,a4,1f238 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2a6>
      *pos = 'a' + (digit - 10);
   1f234:	05770693          	addi	a3,a4,87
   1f238:	00d104a3          	sb	a3,9(sp)
    v >>= 4;
   1f23c:	8391                	c.srli	a5,0x4
  while (v && pos >= buf) {
   1f23e:	dfa1                	c.beqz	a5,1f196 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x204>
    if (digit < 10)
   1f240:	46a5                	c.li	a3,9
      *pos = 'a' + (digit - 10);
   1f242:	05778713          	addi	a4,a5,87
    if (digit < 10)
   1f246:	00f6e463          	bltu	a3,a5,1f24e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2bc>
      *pos = '0' + digit;
   1f24a:	03078713          	addi	a4,a5,48
   1f24e:	00e10423          	sb	a4,8(sp)
    pos--;
   1f252:	8d62                	c.mv	s10,s8
	: allocator_type(__a), _M_p(__dat) { }
   1f254:	e8ca                	c.sdsp	s2,80(sp)
	return __builtin_strlen(__s);
   1f256:	856a                	c.mv	a0,s10
   1f258:	c28f70ef          	jal	ra,16680 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   1f25c:	4681                	c.li	a3,0
   1f25e:	00ad0633          	add	a2,s10,a0
   1f262:	85ea                	c.mv	a1,s10
   1f264:	855e                	c.mv	a0,s7
   1f266:	0001b317          	auipc	t1,0x1b
   1f26a:	0ba33303          	ld	t1,186(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   1f26e:	9302                	c.jalr	t1
      }
   1f270:	b735                	c.j	1f19c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x20a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1f272:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1f276:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1f278:	77c2                	c.ldsp	a5,48(sp)
	if (__str._M_is_local())
   1f27a:	0098                	c.addi4spn	a4,sp,64
   1f27c:	00e78863          	beq	a5,a4,1f28c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2fa>
      { _M_dataplus._M_p = __p; }
   1f280:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1f282:	6786                	c.ldsp	a5,64(sp)
   1f284:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1f286:	77e2                	c.ldsp	a5,56(sp)
   1f288:	e41c                	c.sd	a5,8(s0)
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1f28a:	b3a5                	c.j	1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1f28c:	7662                	c.ldsp	a2,56(sp)
   1f28e:	0605                	c.addi	a2,1
	if (__n == 0)
   1f290:	da7d                	c.beqz	a2,1f286 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2f4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1f292:	85ba                	c.mv	a1,a4
   1f294:	dacf70ef          	jal	ra,16840 <memcpy@plt>
   1f298:	b7fd                	c.j	1f286 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2f4>
    return "0x" + to_hex(v.as_uconstant());
   1f29a:	b83fd0ef          	jal	ra,1ce1c <dwarf::value::as_uconstant() const>
   1f29e:	85aa                	c.mv	a1,a0
   1f2a0:	0884                	c.addi4spn	s1,sp,80
   1f2a2:	8526                	c.mv	a0,s1
   1f2a4:	0001b317          	auipc	t1,0x1b
   1f2a8:	06c33303          	ld	t1,108(t1) # 3a310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1fa10>
   1f2ac:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1f2ae:	4709                	c.li	a4,2
   1f2b0:	00010697          	auipc	a3,0x10
   1f2b4:	f5068693          	addi	a3,a3,-176 # 2f200 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d0>
   1f2b8:	4601                	c.li	a2,0
   1f2ba:	4581                	c.li	a1,0
   1f2bc:	8526                	c.mv	a0,s1
   1f2be:	e42f70ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1f2c2:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1f2c4:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1f2c8:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1f2ca:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1f2cc:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1f2d0:	03278463          	beq	a5,s2,1f2f8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x366>
      { _M_dataplus._M_p = __p; }
   1f2d4:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1f2d6:	689c                	c.ld	a5,16(s1)
   1f2d8:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1f2da:	649c                	c.ld	a5,8(s1)
   1f2dc:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1f2de:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1f2e2:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1f2e6:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1f2ea:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1f2ec:	109c                	c.addi4spn	a5,sp,96
   1f2ee:	d0f502e3          	beq	a0,a5,1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f2f2:	caef70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1f2f6:	b9f5                	c.j	1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1f2f8:	6490                	c.ld	a2,8(s1)
   1f2fa:	0605                	c.addi	a2,1
	if (__n == 0)
   1f2fc:	de79                	c.beqz	a2,1f2da <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x348>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1f2fe:	85ca                	c.mv	a1,s2
   1f300:	d40f70ef          	jal	ra,16840 <memcpy@plt>
   1f304:	bfd9                	c.j	1f2da <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x348>
    return ::to_string(v.as_uconstant());
   1f306:	b17fd0ef          	jal	ra,1ce1c <dwarf::value::as_uconstant() const>
   1f30a:	84aa                	c.mv	s1,a0
    string __str(__detail::__to_chars_len(__val), '\0');
   1f30c:	45a9                	c.li	a1,10
   1f30e:	0001b317          	auipc	t1,0x1b
   1f312:	23233303          	ld	t1,562(t1) # 3a540 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)@@Base+0x1a6be>
   1f316:	9302                	c.jalr	t1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1f318:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   1f31c:	e01c                	c.sd	a5,0(s0)
      { _M_construct(__n, __c); }
   1f31e:	4601                	c.li	a2,0
   1f320:	02051593          	slli	a1,a0,0x20
   1f324:	9181                	c.srli	a1,0x20
   1f326:	8522                	c.mv	a0,s0
   1f328:	cd8f70ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   1f32c:	8626                	c.mv	a2,s1
   1f32e:	440c                	c.lw	a1,8(s0)
   1f330:	6008                	c.ld	a0,0(s0)
   1f332:	0001b317          	auipc	t1,0x1b
   1f336:	0d633303          	ld	t1,214(t1) # 3a408 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)@@Base+0x1a526>
   1f33a:	9302                	c.jalr	t1
    return __str;
   1f33c:	b95d                	c.j	1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
    return ::to_string(v.as_sconstant());
   1f33e:	ea3fd0ef          	jal	ra,1d1e0 <dwarf::value::as_sconstant() const>
    const bool __neg = __val < 0;
   1f342:	03f55913          	srli	s2,a0,0x3f
    const unsigned long __uval = __neg ? (unsigned long)~__val + 1ul : __val;
   1f346:	43f55793          	srai	a5,a0,0x3f
   1f34a:	00a7c4b3          	xor	s1,a5,a0
   1f34e:	8c9d                	c.sub	s1,a5
    const auto __len = __detail::__to_chars_len(__uval);
   1f350:	45a9                	c.li	a1,10
   1f352:	8526                	c.mv	a0,s1
   1f354:	0001b317          	auipc	t1,0x1b
   1f358:	1ec33303          	ld	t1,492(t1) # 3a540 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)@@Base+0x1a6be>
   1f35c:	9302                	c.jalr	t1
   1f35e:	0005099b          	addiw	s3,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1f362:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   1f366:	e01c                	c.sd	a5,0(s0)
    string __str(__neg + __len, '-');
   1f368:	00a905bb          	addw	a1,s2,a0
      { _M_construct(__n, __c); }
   1f36c:	02d00613          	addi	a2,zero,45
   1f370:	1582                	c.slli	a1,0x20
   1f372:	9181                	c.srli	a1,0x20
   1f374:	8522                	c.mv	a0,s0
   1f376:	c8af70ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
	return _M_data()[__pos];
   1f37a:	6008                	c.ld	a0,0(s0)
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   1f37c:	8626                	c.mv	a2,s1
   1f37e:	85ce                	c.mv	a1,s3
   1f380:	954a                	c.add	a0,s2
   1f382:	0001b317          	auipc	t1,0x1b
   1f386:	08633303          	ld	t1,134(t1) # 3a408 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)@@Base+0x1a526>
   1f38a:	9302                	c.jalr	t1
    return __str;
   1f38c:	b19d                	c.j	1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1f38e:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   1f392:	e01c                	c.sd	a5,0(s0)
	_M_construct(__s, __end, forward_iterator_tag());
   1f394:	4681                	c.li	a3,0
   1f396:	0000f617          	auipc	a2,0xf
   1f39a:	f6b60613          	addi	a2,a2,-149 # 2e301 <std::piecewise_construct+0x2e1>
   1f39e:	0000f597          	auipc	a1,0xf
   1f3a2:	f5a58593          	addi	a1,a1,-166 # 2e2f8 <std::piecewise_construct+0x2d8>
   1f3a6:	8522                	c.mv	a0,s0
   1f3a8:	0001b317          	auipc	t1,0x1b
   1f3ac:	f7833303          	ld	t1,-136(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   1f3b0:	9302                	c.jalr	t1
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1f3b2:	b181                	c.j	1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
    return v.as_flag() ? "true" : "false";
   1f3b4:	d64fe0ef          	jal	ra,1d918 <dwarf::value::as_flag() const>
   1f3b8:	0000f497          	auipc	s1,0xf
   1f3bc:	ef848493          	addi	s1,s1,-264 # 2e2b0 <std::piecewise_construct+0x290>
   1f3c0:	c509                	c.beqz	a0,1f3ca <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x438>
   1f3c2:	0000f497          	auipc	s1,0xf
   1f3c6:	ee648493          	addi	s1,s1,-282 # 2e2a8 <std::piecewise_construct+0x288>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1f3ca:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   1f3ce:	e01c                	c.sd	a5,0(s0)
	return __builtin_strlen(__s);
   1f3d0:	8526                	c.mv	a0,s1
   1f3d2:	aaef70ef          	jal	ra,16680 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   1f3d6:	4681                	c.li	a3,0
   1f3d8:	00a48633          	add	a2,s1,a0
   1f3dc:	85a6                	c.mv	a1,s1
   1f3de:	8522                	c.mv	a0,s0
   1f3e0:	0001b317          	auipc	t1,0x1b
   1f3e4:	f4033303          	ld	t1,-192(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   1f3e8:	9302                	c.jalr	t1
   1f3ea:	b121                	c.j	1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
    return "<line 0x" + to_hex(v.as_sec_offset()) + ">";
   1f3ec:	b79fe0ef          	jal	ra,1df64 <dwarf::value::as_sec_offset() const>
   1f3f0:	85aa                	c.mv	a1,a0
   1f3f2:	1804                	c.addi4spn	s1,sp,48
   1f3f4:	8526                	c.mv	a0,s1
   1f3f6:	0001b317          	auipc	t1,0x1b
   1f3fa:	f1a33303          	ld	t1,-230(t1) # 3a310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1fa10>
   1f3fe:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1f400:	4721                	c.li	a4,8
   1f402:	0000f697          	auipc	a3,0xf
   1f406:	f0668693          	addi	a3,a3,-250 # 2e308 <std::piecewise_construct+0x2e8>
   1f40a:	4601                	c.li	a2,0
   1f40c:	4581                	c.li	a1,0
   1f40e:	8526                	c.mv	a0,s1
   1f410:	cf0f70ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1f414:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1f416:	109c                	c.addi4spn	a5,sp,96
   1f418:	e8be                	c.sdsp	a5,80(sp)
      { return _M_dataplus._M_p; }
   1f41a:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1f41c:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1f420:	03278b63          	beq	a5,s2,1f456 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4c4>
      { _M_dataplus._M_p = __p; }
   1f424:	e8be                	c.sdsp	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   1f426:	691c                	c.ld	a5,16(a0)
   1f428:	f0be                	c.sdsp	a5,96(sp)
      { _M_string_length = __length; }
   1f42a:	649c                	c.ld	a5,8(s1)
   1f42c:	ecbe                	c.sdsp	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   1f42e:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1f432:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1f436:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1f43a:	6766                	c.ldsp	a4,88(sp)
   1f43c:	57fd                	c.li	a5,-1
   1f43e:	8389                	c.srli	a5,0x2
   1f440:	02f70363          	beq	a4,a5,1f466 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4d4>
	return _M_append(__s, __n);
   1f444:	4605                	c.li	a2,1
   1f446:	0000f597          	auipc	a1,0xf
   1f44a:	eba58593          	addi	a1,a1,-326 # 2e300 <std::piecewise_construct+0x2e0>
   1f44e:	0888                	c.addi4spn	a0,sp,80
   1f450:	9e0f70ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1f454:	a83d                	c.j	1f492 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x500>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1f456:	6510                	c.ld	a2,8(a0)
   1f458:	0605                	c.addi	a2,1
	if (__n == 0)
   1f45a:	da61                	c.beqz	a2,1f42a <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x498>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1f45c:	85ca                	c.mv	a1,s2
   1f45e:	1088                	c.addi4spn	a0,sp,96
   1f460:	be0f70ef          	jal	ra,16840 <memcpy@plt>
   1f464:	b7d9                	c.j	1f42a <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x498>
	  __throw_length_error(__N(__s));
   1f466:	0000f517          	auipc	a0,0xf
   1f46a:	e6a50513          	addi	a0,a0,-406 # 2e2d0 <std::piecewise_construct+0x2b0>
   1f46e:	a32f70ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1f472:	842a                	c.mv	s0,a0
   1f474:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1f476:	109c                	c.addi4spn	a5,sp,96
   1f478:	00f50463          	beq	a0,a5,1f480 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4ee>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f47c:	b24f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f480:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1f482:	009c                	c.addi4spn	a5,sp,64
   1f484:	00f50463          	beq	a0,a5,1f48c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4fa>
   1f488:	b18f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1f48c:	8522                	c.mv	a0,s0
   1f48e:	d02f70ef          	jal	ra,16990 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   1f492:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1f494:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1f498:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1f49a:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1f49c:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1f4a0:	03278a63          	beq	a5,s2,1f4d4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x542>
      { _M_dataplus._M_p = __p; }
   1f4a4:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1f4a6:	689c                	c.ld	a5,16(s1)
   1f4a8:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1f4aa:	649c                	c.ld	a5,8(s1)
   1f4ac:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1f4ae:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1f4b2:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1f4b6:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1f4ba:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1f4bc:	109c                	c.addi4spn	a5,sp,96
   1f4be:	00f50463          	beq	a0,a5,1f4c6 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x534>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f4c2:	adef70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f4c6:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1f4c8:	009c                	c.addi4spn	a5,sp,64
   1f4ca:	b2f504e3          	beq	a0,a5,1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
   1f4ce:	ad2f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1f4d2:	b605                	c.j	1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1f4d4:	6490                	c.ld	a2,8(s1)
   1f4d6:	0605                	c.addi	a2,1
	if (__n == 0)
   1f4d8:	da69                	c.beqz	a2,1f4aa <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x518>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1f4da:	85ca                	c.mv	a1,s2
   1f4dc:	b64f70ef          	jal	ra,16840 <memcpy@plt>
   1f4e0:	b7e9                	c.j	1f4aa <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x518>
    return "<loclist 0x" + to_hex(v.as_sec_offset()) + ">";
   1f4e2:	a83fe0ef          	jal	ra,1df64 <dwarf::value::as_sec_offset() const>
   1f4e6:	85aa                	c.mv	a1,a0
   1f4e8:	1804                	c.addi4spn	s1,sp,48
   1f4ea:	8526                	c.mv	a0,s1
   1f4ec:	0001b317          	auipc	t1,0x1b
   1f4f0:	e2433303          	ld	t1,-476(t1) # 3a310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1fa10>
   1f4f4:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1f4f6:	472d                	c.li	a4,11
   1f4f8:	0000f697          	auipc	a3,0xf
   1f4fc:	e2068693          	addi	a3,a3,-480 # 2e318 <std::piecewise_construct+0x2f8>
   1f500:	4601                	c.li	a2,0
   1f502:	4581                	c.li	a1,0
   1f504:	8526                	c.mv	a0,s1
   1f506:	bfaf70ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1f50a:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1f50c:	109c                	c.addi4spn	a5,sp,96
   1f50e:	e8be                	c.sdsp	a5,80(sp)
      { return _M_dataplus._M_p; }
   1f510:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1f512:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1f516:	03278b63          	beq	a5,s2,1f54c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x5ba>
      { _M_dataplus._M_p = __p; }
   1f51a:	e8be                	c.sdsp	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   1f51c:	691c                	c.ld	a5,16(a0)
   1f51e:	f0be                	c.sdsp	a5,96(sp)
      { _M_string_length = __length; }
   1f520:	649c                	c.ld	a5,8(s1)
   1f522:	ecbe                	c.sdsp	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   1f524:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1f528:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1f52c:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1f530:	6766                	c.ldsp	a4,88(sp)
   1f532:	57fd                	c.li	a5,-1
   1f534:	8389                	c.srli	a5,0x2
   1f536:	02f70363          	beq	a4,a5,1f55c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x5ca>
	return _M_append(__s, __n);
   1f53a:	4605                	c.li	a2,1
   1f53c:	0000f597          	auipc	a1,0xf
   1f540:	dc458593          	addi	a1,a1,-572 # 2e300 <std::piecewise_construct+0x2e0>
   1f544:	0888                	c.addi4spn	a0,sp,80
   1f546:	8eaf70ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1f54a:	a83d                	c.j	1f588 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x5f6>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1f54c:	6510                	c.ld	a2,8(a0)
   1f54e:	0605                	c.addi	a2,1
	if (__n == 0)
   1f550:	da61                	c.beqz	a2,1f520 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x58e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1f552:	85ca                	c.mv	a1,s2
   1f554:	1088                	c.addi4spn	a0,sp,96
   1f556:	aeaf70ef          	jal	ra,16840 <memcpy@plt>
   1f55a:	b7d9                	c.j	1f520 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x58e>
	  __throw_length_error(__N(__s));
   1f55c:	0000f517          	auipc	a0,0xf
   1f560:	d7450513          	addi	a0,a0,-652 # 2e2d0 <std::piecewise_construct+0x2b0>
   1f564:	93cf70ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1f568:	842a                	c.mv	s0,a0
   1f56a:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1f56c:	109c                	c.addi4spn	a5,sp,96
   1f56e:	00f50463          	beq	a0,a5,1f576 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x5e4>
   1f572:	a2ef70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f576:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1f578:	009c                	c.addi4spn	a5,sp,64
   1f57a:	00f50463          	beq	a0,a5,1f582 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x5f0>
   1f57e:	a22f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1f582:	8522                	c.mv	a0,s0
   1f584:	c0cf70ef          	jal	ra,16990 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   1f588:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1f58a:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1f58e:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1f590:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1f592:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1f596:	03278a63          	beq	a5,s2,1f5ca <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x638>
      { _M_dataplus._M_p = __p; }
   1f59a:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1f59c:	689c                	c.ld	a5,16(s1)
   1f59e:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1f5a0:	649c                	c.ld	a5,8(s1)
   1f5a2:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1f5a4:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1f5a8:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1f5ac:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1f5b0:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1f5b2:	109c                	c.addi4spn	a5,sp,96
   1f5b4:	00f50463          	beq	a0,a5,1f5bc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x62a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f5b8:	9e8f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f5bc:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1f5be:	009c                	c.addi4spn	a5,sp,64
   1f5c0:	a2f509e3          	beq	a0,a5,1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
   1f5c4:	9dcf70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1f5c8:	b42d                	c.j	1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1f5ca:	6490                	c.ld	a2,8(s1)
   1f5cc:	0605                	c.addi	a2,1
	if (__n == 0)
   1f5ce:	da69                	c.beqz	a2,1f5a0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1f5d0:	85ca                	c.mv	a1,s2
   1f5d2:	a6ef70ef          	jal	ra,16840 <memcpy@plt>
   1f5d6:	b7e9                	c.j	1f5a0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60e>
    return "<mac 0x" + to_hex(v.as_sec_offset()) + ">";
   1f5d8:	98dfe0ef          	jal	ra,1df64 <dwarf::value::as_sec_offset() const>
   1f5dc:	85aa                	c.mv	a1,a0
   1f5de:	1804                	c.addi4spn	s1,sp,48
   1f5e0:	8526                	c.mv	a0,s1
   1f5e2:	0001b317          	auipc	t1,0x1b
   1f5e6:	d2e33303          	ld	t1,-722(t1) # 3a310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1fa10>
   1f5ea:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1f5ec:	471d                	c.li	a4,7
   1f5ee:	0000f697          	auipc	a3,0xf
   1f5f2:	d3a68693          	addi	a3,a3,-710 # 2e328 <std::piecewise_construct+0x308>
   1f5f6:	4601                	c.li	a2,0
   1f5f8:	4581                	c.li	a1,0
   1f5fa:	8526                	c.mv	a0,s1
   1f5fc:	b04f70ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1f600:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1f602:	109c                	c.addi4spn	a5,sp,96
   1f604:	e8be                	c.sdsp	a5,80(sp)
      { return _M_dataplus._M_p; }
   1f606:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1f608:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1f60c:	03278b63          	beq	a5,s2,1f642 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6b0>
      { _M_dataplus._M_p = __p; }
   1f610:	e8be                	c.sdsp	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   1f612:	691c                	c.ld	a5,16(a0)
   1f614:	f0be                	c.sdsp	a5,96(sp)
      { _M_string_length = __length; }
   1f616:	649c                	c.ld	a5,8(s1)
   1f618:	ecbe                	c.sdsp	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   1f61a:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1f61e:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1f622:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1f626:	6766                	c.ldsp	a4,88(sp)
   1f628:	57fd                	c.li	a5,-1
   1f62a:	8389                	c.srli	a5,0x2
   1f62c:	02f70363          	beq	a4,a5,1f652 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6c0>
	return _M_append(__s, __n);
   1f630:	4605                	c.li	a2,1
   1f632:	0000f597          	auipc	a1,0xf
   1f636:	cce58593          	addi	a1,a1,-818 # 2e300 <std::piecewise_construct+0x2e0>
   1f63a:	0888                	c.addi4spn	a0,sp,80
   1f63c:	ff5f60ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1f640:	a83d                	c.j	1f67e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6ec>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1f642:	6510                	c.ld	a2,8(a0)
   1f644:	0605                	c.addi	a2,1
	if (__n == 0)
   1f646:	da61                	c.beqz	a2,1f616 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x684>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1f648:	85ca                	c.mv	a1,s2
   1f64a:	1088                	c.addi4spn	a0,sp,96
   1f64c:	9f4f70ef          	jal	ra,16840 <memcpy@plt>
   1f650:	b7d9                	c.j	1f616 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x684>
	  __throw_length_error(__N(__s));
   1f652:	0000f517          	auipc	a0,0xf
   1f656:	c7e50513          	addi	a0,a0,-898 # 2e2d0 <std::piecewise_construct+0x2b0>
   1f65a:	846f70ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1f65e:	842a                	c.mv	s0,a0
   1f660:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1f662:	109c                	c.addi4spn	a5,sp,96
   1f664:	00f50463          	beq	a0,a5,1f66c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6da>
   1f668:	938f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f66c:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1f66e:	009c                	c.addi4spn	a5,sp,64
   1f670:	00f50463          	beq	a0,a5,1f678 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6e6>
   1f674:	92cf70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1f678:	8522                	c.mv	a0,s0
   1f67a:	b16f70ef          	jal	ra,16990 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   1f67e:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1f680:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1f684:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1f686:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1f688:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1f68c:	03278a63          	beq	a5,s2,1f6c0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x72e>
      { _M_dataplus._M_p = __p; }
   1f690:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1f692:	689c                	c.ld	a5,16(s1)
   1f694:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1f696:	649c                	c.ld	a5,8(s1)
   1f698:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1f69a:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1f69e:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1f6a2:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1f6a6:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1f6a8:	109c                	c.addi4spn	a5,sp,96
   1f6aa:	00f50463          	beq	a0,a5,1f6b2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x720>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f6ae:	8f2f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f6b2:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1f6b4:	009c                	c.addi4spn	a5,sp,64
   1f6b6:	92f50ee3          	beq	a0,a5,1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
   1f6ba:	8e6f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1f6be:	ba15                	c.j	1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1f6c0:	6490                	c.ld	a2,8(s1)
   1f6c2:	0605                	c.addi	a2,1
	if (__n == 0)
   1f6c4:	da69                	c.beqz	a2,1f696 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x704>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1f6c6:	85ca                	c.mv	a1,s2
   1f6c8:	978f70ef          	jal	ra,16840 <memcpy@plt>
   1f6cc:	b7e9                	c.j	1f696 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x704>
    return "<rangelist 0x" + to_hex(v.as_sec_offset()) + ">";
   1f6ce:	897fe0ef          	jal	ra,1df64 <dwarf::value::as_sec_offset() const>
   1f6d2:	85aa                	c.mv	a1,a0
   1f6d4:	1804                	c.addi4spn	s1,sp,48
   1f6d6:	8526                	c.mv	a0,s1
   1f6d8:	0001b317          	auipc	t1,0x1b
   1f6dc:	c3833303          	ld	t1,-968(t1) # 3a310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1fa10>
   1f6e0:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1f6e2:	4735                	c.li	a4,13
   1f6e4:	0000f697          	auipc	a3,0xf
   1f6e8:	c4c68693          	addi	a3,a3,-948 # 2e330 <std::piecewise_construct+0x310>
   1f6ec:	4601                	c.li	a2,0
   1f6ee:	4581                	c.li	a1,0
   1f6f0:	8526                	c.mv	a0,s1
   1f6f2:	a0ef70ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1f6f6:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1f6f8:	109c                	c.addi4spn	a5,sp,96
   1f6fa:	e8be                	c.sdsp	a5,80(sp)
      { return _M_dataplus._M_p; }
   1f6fc:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1f6fe:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1f702:	03278b63          	beq	a5,s2,1f738 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7a6>
      { _M_dataplus._M_p = __p; }
   1f706:	e8be                	c.sdsp	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   1f708:	691c                	c.ld	a5,16(a0)
   1f70a:	f0be                	c.sdsp	a5,96(sp)
      { _M_string_length = __length; }
   1f70c:	649c                	c.ld	a5,8(s1)
   1f70e:	ecbe                	c.sdsp	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   1f710:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1f714:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1f718:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1f71c:	6766                	c.ldsp	a4,88(sp)
   1f71e:	57fd                	c.li	a5,-1
   1f720:	8389                	c.srli	a5,0x2
   1f722:	02f70363          	beq	a4,a5,1f748 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7b6>
	return _M_append(__s, __n);
   1f726:	4605                	c.li	a2,1
   1f728:	0000f597          	auipc	a1,0xf
   1f72c:	bd858593          	addi	a1,a1,-1064 # 2e300 <std::piecewise_construct+0x2e0>
   1f730:	0888                	c.addi4spn	a0,sp,80
   1f732:	efff60ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1f736:	a83d                	c.j	1f774 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7e2>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1f738:	6510                	c.ld	a2,8(a0)
   1f73a:	0605                	c.addi	a2,1
	if (__n == 0)
   1f73c:	da61                	c.beqz	a2,1f70c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x77a>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1f73e:	85ca                	c.mv	a1,s2
   1f740:	1088                	c.addi4spn	a0,sp,96
   1f742:	8fef70ef          	jal	ra,16840 <memcpy@plt>
   1f746:	b7d9                	c.j	1f70c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x77a>
	  __throw_length_error(__N(__s));
   1f748:	0000f517          	auipc	a0,0xf
   1f74c:	b8850513          	addi	a0,a0,-1144 # 2e2d0 <std::piecewise_construct+0x2b0>
   1f750:	f51f60ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1f754:	842a                	c.mv	s0,a0
   1f756:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1f758:	109c                	c.addi4spn	a5,sp,96
   1f75a:	00f50463          	beq	a0,a5,1f762 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7d0>
   1f75e:	842f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f762:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1f764:	009c                	c.addi4spn	a5,sp,64
   1f766:	00f50463          	beq	a0,a5,1f76e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7dc>
   1f76a:	836f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1f76e:	8522                	c.mv	a0,s0
   1f770:	a20f70ef          	jal	ra,16990 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   1f774:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1f776:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1f77a:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1f77c:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1f77e:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1f782:	03278b63          	beq	a5,s2,1f7b8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x826>
      { _M_dataplus._M_p = __p; }
   1f786:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1f788:	689c                	c.ld	a5,16(s1)
   1f78a:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1f78c:	649c                	c.ld	a5,8(s1)
   1f78e:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1f790:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1f794:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1f798:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1f79c:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1f79e:	109c                	c.addi4spn	a5,sp,96
   1f7a0:	00f50463          	beq	a0,a5,1f7a8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x816>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f7a4:	ffdf60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f7a8:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1f7aa:	009c                	c.addi4spn	a5,sp,64
   1f7ac:	84f503e3          	beq	a0,a5,1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
   1f7b0:	ff1f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1f7b4:	83fff06f          	jal	zero,1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1f7b8:	6490                	c.ld	a2,8(s1)
   1f7ba:	0605                	c.addi	a2,1
	if (__n == 0)
   1f7bc:	da61                	c.beqz	a2,1f78c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7fa>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1f7be:	85ca                	c.mv	a1,s2
   1f7c0:	880f70ef          	jal	ra,16840 <memcpy@plt>
   1f7c4:	b7e1                	c.j	1f78c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7fa>
    die d = v.as_reference();
   1f7c6:	85aa                	c.mv	a1,a0
   1f7c8:	0884                	c.addi4spn	s1,sp,80
   1f7ca:	8526                	c.mv	a0,s1
   1f7cc:	f77fe0ef          	jal	ra,1e742 <dwarf::value::as_reference() const>
    auto tu = dynamic_cast<const type_unit *>(&d.get_unit());
   1f7d0:	8526                	c.mv	a0,s1
   1f7d2:	d4cfc0ef          	jal	ra,1bd1e <dwarf::die::get_unit() const>
   1f7d6:	12050063          	beq	a0,zero,1f8f6 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x964>
   1f7da:	4681                	c.li	a3,0
   1f7dc:	0001b617          	auipc	a2,0x1b
   1f7e0:	de463603          	ld	a2,-540(a2) # 3a5c0 <typeinfo for dwarf::type_unit@@Base+0xd18>
   1f7e4:	0001b597          	auipc	a1,0x1b
   1f7e8:	ad45b583          	ld	a1,-1324(a1) # 3a2b8 <typeinfo for dwarf::unit@@Base+0xa38>
   1f7ec:	804f70ef          	jal	ra,167f0 <__dynamic_cast@plt>
    if (tu)
   1f7f0:	10050363          	beq	a0,zero,1f8f6 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x964>
      return "<.debug_types+0x" + to_hex(d.get_section_offset()) + ">";
   1f7f4:	8526                	c.mv	a0,s1
   1f7f6:	d2cfc0ef          	jal	ra,1bd22 <dwarf::die::get_section_offset() const>
   1f7fa:	85aa                	c.mv	a1,a0
   1f7fc:	0808                	c.addi4spn	a0,sp,16
   1f7fe:	0001b317          	auipc	t1,0x1b
   1f802:	b1233303          	ld	t1,-1262(t1) # 3a310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1fa10>
   1f806:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1f808:	4741                	c.li	a4,16
   1f80a:	0000f697          	auipc	a3,0xf
   1f80e:	b3668693          	addi	a3,a3,-1226 # 2e340 <std::piecewise_construct+0x320>
   1f812:	4601                	c.li	a2,0
   1f814:	4581                	c.li	a1,0
   1f816:	0808                	c.addi4spn	a0,sp,16
   1f818:	8e8f70ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1f81c:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1f81e:	009c                	c.addi4spn	a5,sp,64
   1f820:	f83e                	c.sdsp	a5,48(sp)
      { return _M_dataplus._M_p; }
   1f822:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1f824:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1f828:	03278b63          	beq	a5,s2,1f85e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8cc>
      { _M_dataplus._M_p = __p; }
   1f82c:	f83e                	c.sdsp	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   1f82e:	691c                	c.ld	a5,16(a0)
   1f830:	e0be                	c.sdsp	a5,64(sp)
      { _M_string_length = __length; }
   1f832:	649c                	c.ld	a5,8(s1)
   1f834:	fc3e                	c.sdsp	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   1f836:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1f83a:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1f83e:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1f842:	7762                	c.ldsp	a4,56(sp)
   1f844:	57fd                	c.li	a5,-1
   1f846:	8389                	c.srli	a5,0x2
   1f848:	02f70363          	beq	a4,a5,1f86e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8dc>
	return _M_append(__s, __n);
   1f84c:	4605                	c.li	a2,1
   1f84e:	0000f597          	auipc	a1,0xf
   1f852:	ab258593          	addi	a1,a1,-1358 # 2e300 <std::piecewise_construct+0x2e0>
   1f856:	1808                	c.addi4spn	a0,sp,48
   1f858:	dd9f60ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1f85c:	a0a9                	c.j	1f8a6 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x914>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1f85e:	6510                	c.ld	a2,8(a0)
   1f860:	0605                	c.addi	a2,1
	if (__n == 0)
   1f862:	da61                	c.beqz	a2,1f832 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8a0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1f864:	85ca                	c.mv	a1,s2
   1f866:	0088                	c.addi4spn	a0,sp,64
   1f868:	fd9f60ef          	jal	ra,16840 <memcpy@plt>
   1f86c:	b7d9                	c.j	1f832 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8a0>
	  __throw_length_error(__N(__s));
   1f86e:	0000f517          	auipc	a0,0xf
   1f872:	a6250513          	addi	a0,a0,-1438 # 2e2d0 <std::piecewise_construct+0x2b0>
   1f876:	e2bf60ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1f87a:	842a                	c.mv	s0,a0
   1f87c:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1f87e:	009c                	c.addi4spn	a5,sp,64
   1f880:	00f50463          	beq	a0,a5,1f888 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8f6>
   1f884:	f1df60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f888:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   1f88a:	101c                	c.addi4spn	a5,sp,32
   1f88c:	00f50463          	beq	a0,a5,1f894 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x902>
   1f890:	f11f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
class die {
   1f894:	1888                	c.addi4spn	a0,sp,112
   1f896:	0001b317          	auipc	t1,0x1b
   1f89a:	b6a33303          	ld	t1,-1174(t1) # 3a400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x22e14>
   1f89e:	9302                	c.jalr	t1
   1f8a0:	8522                	c.mv	a0,s0
   1f8a2:	8eef70ef          	jal	ra,16990 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   1f8a6:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1f8a8:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1f8ac:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1f8ae:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1f8b0:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1f8b4:	03278a63          	beq	a5,s2,1f8e8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x956>
      { _M_dataplus._M_p = __p; }
   1f8b8:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1f8ba:	689c                	c.ld	a5,16(s1)
   1f8bc:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1f8be:	649c                	c.ld	a5,8(s1)
   1f8c0:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1f8c2:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1f8c6:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1f8ca:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1f8ce:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1f8d0:	009c                	c.addi4spn	a5,sp,64
   1f8d2:	00f50463          	beq	a0,a5,1f8da <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x948>
   1f8d6:	ecbf60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f8da:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   1f8dc:	101c                	c.addi4spn	a5,sp,32
   1f8de:	0ef50d63          	beq	a0,a5,1f9d8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa46>
   1f8e2:	ebff60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1f8e6:	a8cd                	c.j	1f9d8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa46>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1f8e8:	6490                	c.ld	a2,8(s1)
   1f8ea:	0605                	c.addi	a2,1
	if (__n == 0)
   1f8ec:	da69                	c.beqz	a2,1f8be <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x92c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1f8ee:	85ca                	c.mv	a1,s2
   1f8f0:	f51f60ef          	jal	ra,16840 <memcpy@plt>
   1f8f4:	b7e9                	c.j	1f8be <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x92c>
    return "<0x" + to_hex(d.get_section_offset()) + ">";
   1f8f6:	0888                	c.addi4spn	a0,sp,80
   1f8f8:	c2afc0ef          	jal	ra,1bd22 <dwarf::die::get_section_offset() const>
   1f8fc:	85aa                	c.mv	a1,a0
   1f8fe:	0808                	c.addi4spn	a0,sp,16
   1f900:	0001b317          	auipc	t1,0x1b
   1f904:	a1033303          	ld	t1,-1520(t1) # 3a310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1fa10>
   1f908:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1f90a:	470d                	c.li	a4,3
   1f90c:	0000f697          	auipc	a3,0xf
   1f910:	a4c68693          	addi	a3,a3,-1460 # 2e358 <std::piecewise_construct+0x338>
   1f914:	4601                	c.li	a2,0
   1f916:	4581                	c.li	a1,0
   1f918:	0808                	c.addi4spn	a0,sp,16
   1f91a:	fe7f60ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1f91e:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1f920:	009c                	c.addi4spn	a5,sp,64
   1f922:	f83e                	c.sdsp	a5,48(sp)
      { return _M_dataplus._M_p; }
   1f924:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1f926:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1f92a:	03278b63          	beq	a5,s2,1f960 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9ce>
      { _M_dataplus._M_p = __p; }
   1f92e:	f83e                	c.sdsp	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   1f930:	691c                	c.ld	a5,16(a0)
   1f932:	e0be                	c.sdsp	a5,64(sp)
      { _M_string_length = __length; }
   1f934:	649c                	c.ld	a5,8(s1)
   1f936:	fc3e                	c.sdsp	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   1f938:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1f93c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1f940:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1f944:	7762                	c.ldsp	a4,56(sp)
   1f946:	57fd                	c.li	a5,-1
   1f948:	8389                	c.srli	a5,0x2
   1f94a:	02f70363          	beq	a4,a5,1f970 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9de>
	return _M_append(__s, __n);
   1f94e:	4605                	c.li	a2,1
   1f950:	0000f597          	auipc	a1,0xf
   1f954:	9b058593          	addi	a1,a1,-1616 # 2e300 <std::piecewise_construct+0x2e0>
   1f958:	1808                	c.addi4spn	a0,sp,48
   1f95a:	cd7f60ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1f95e:	a82d                	c.j	1f998 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa06>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1f960:	6510                	c.ld	a2,8(a0)
   1f962:	0605                	c.addi	a2,1
	if (__n == 0)
   1f964:	da61                	c.beqz	a2,1f934 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9a2>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1f966:	85ca                	c.mv	a1,s2
   1f968:	0088                	c.addi4spn	a0,sp,64
   1f96a:	ed7f60ef          	jal	ra,16840 <memcpy@plt>
   1f96e:	b7d9                	c.j	1f934 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9a2>
	  __throw_length_error(__N(__s));
   1f970:	0000f517          	auipc	a0,0xf
   1f974:	96050513          	addi	a0,a0,-1696 # 2e2d0 <std::piecewise_construct+0x2b0>
   1f978:	d29f60ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1f97c:	842a                	c.mv	s0,a0
   1f97e:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1f980:	009c                	c.addi4spn	a5,sp,64
   1f982:	00f50463          	beq	a0,a5,1f98a <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9f8>
   1f986:	e1bf60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f98a:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   1f98c:	101c                	c.addi4spn	a5,sp,32
   1f98e:	f0f503e3          	beq	a0,a5,1f894 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x902>
   1f992:	e0ff60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1f996:	bdfd                	c.j	1f894 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x902>
	return _M_append(__s, __n);
   1f998:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1f99a:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1f99e:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1f9a0:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1f9a2:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1f9a6:	05278b63          	beq	a5,s2,1f9fc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa6a>
      { _M_dataplus._M_p = __p; }
   1f9aa:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1f9ac:	689c                	c.ld	a5,16(s1)
   1f9ae:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1f9b0:	649c                	c.ld	a5,8(s1)
   1f9b2:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1f9b4:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1f9b8:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1f9bc:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1f9c0:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1f9c2:	009c                	c.addi4spn	a5,sp,64
   1f9c4:	00f50463          	beq	a0,a5,1f9cc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa3a>
   1f9c8:	dd9f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f9cc:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   1f9ce:	101c                	c.addi4spn	a5,sp,32
   1f9d0:	00f50463          	beq	a0,a5,1f9d8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa46>
   1f9d4:	dcdf60ef          	jal	ra,167a0 <operator delete(void*)@plt>
    for (T *p = base; p < end; ++p)
   1f9d8:	750a                	c.ldsp	a0,160(sp)
   1f9da:	77aa                	c.ldsp	a5,168(sp)
   1f9dc:	00f57763          	bgeu	a0,a5,1f9ea <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa58>
   1f9e0:	87aa                	c.mv	a5,a0
   1f9e2:	07a1                	c.addi	a5,8
   1f9e4:	772a                	c.ldsp	a4,168(sp)
   1f9e6:	fee7eee3          	bltu	a5,a4,1f9e2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa50>
    if ((char *)base != buf)
   1f9ea:	189c                	c.addi4spn	a5,sp,112
   1f9ec:	e0f50363          	beq	a0,a5,1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
      delete[] (char *)base;
   1f9f0:	e0050163          	beq	a0,zero,1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
   1f9f4:	e5df60ef          	jal	ra,16850 <operator delete[](void*)@plt>
   1f9f8:	dfaff06f          	jal	zero,1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1f9fc:	6490                	c.ld	a2,8(s1)
   1f9fe:	0605                	c.addi	a2,1
	if (__n == 0)
   1fa00:	da45                	c.beqz	a2,1f9b0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa1e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1fa02:	85ca                	c.mv	a1,s2
   1fa04:	e3df60ef          	jal	ra,16840 <memcpy@plt>
   1fa08:	b765                	c.j	1f9b0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa1e>
    return v.as_string();
   1fa0a:	85aa                	c.mv	a1,a0
   1fa0c:	8522                	c.mv	a0,s0
   1fa0e:	cf1fe0ef          	jal	ra,1e6fe <dwarf::value::as_string[abi:cxx11]() const>
   1fa12:	de0ff06f          	jal	zero,1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
  return "<unexpected value type " + to_string(v.get_type()) + ">";
   1fa16:	1804                	c.addi4spn	s1,sp,48
   1fa18:	8526                	c.mv	a0,s1
   1fa1a:	57e080ef          	jal	ra,27f98 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1fa1e:	475d                	c.li	a4,23
   1fa20:	0000f697          	auipc	a3,0xf
   1fa24:	94068693          	addi	a3,a3,-1728 # 2e360 <std::piecewise_construct+0x340>
   1fa28:	4601                	c.li	a2,0
   1fa2a:	4581                	c.li	a1,0
   1fa2c:	8526                	c.mv	a0,s1
   1fa2e:	ed3f60ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1fa32:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1fa34:	109c                	c.addi4spn	a5,sp,96
   1fa36:	e8be                	c.sdsp	a5,80(sp)
      { return _M_dataplus._M_p; }
   1fa38:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1fa3a:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1fa3e:	03278b63          	beq	a5,s2,1fa74 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xae2>
      { _M_dataplus._M_p = __p; }
   1fa42:	e8be                	c.sdsp	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   1fa44:	691c                	c.ld	a5,16(a0)
   1fa46:	f0be                	c.sdsp	a5,96(sp)
      { _M_string_length = __length; }
   1fa48:	649c                	c.ld	a5,8(s1)
   1fa4a:	ecbe                	c.sdsp	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   1fa4c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1fa50:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1fa54:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1fa58:	6766                	c.ldsp	a4,88(sp)
   1fa5a:	57fd                	c.li	a5,-1
   1fa5c:	8389                	c.srli	a5,0x2
   1fa5e:	02f70363          	beq	a4,a5,1fa84 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xaf2>
	return _M_append(__s, __n);
   1fa62:	4605                	c.li	a2,1
   1fa64:	0000f597          	auipc	a1,0xf
   1fa68:	89c58593          	addi	a1,a1,-1892 # 2e300 <std::piecewise_construct+0x2e0>
   1fa6c:	0888                	c.addi4spn	a0,sp,80
   1fa6e:	bc3f60ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1fa72:	a83d                	c.j	1fab0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb1e>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1fa74:	6510                	c.ld	a2,8(a0)
   1fa76:	0605                	c.addi	a2,1
	if (__n == 0)
   1fa78:	da61                	c.beqz	a2,1fa48 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xab6>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1fa7a:	85ca                	c.mv	a1,s2
   1fa7c:	1088                	c.addi4spn	a0,sp,96
   1fa7e:	dc3f60ef          	jal	ra,16840 <memcpy@plt>
   1fa82:	b7d9                	c.j	1fa48 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xab6>
	  __throw_length_error(__N(__s));
   1fa84:	0000f517          	auipc	a0,0xf
   1fa88:	84c50513          	addi	a0,a0,-1972 # 2e2d0 <std::piecewise_construct+0x2b0>
   1fa8c:	c15f60ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1fa90:	842a                	c.mv	s0,a0
   1fa92:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1fa94:	109c                	c.addi4spn	a5,sp,96
   1fa96:	00f50463          	beq	a0,a5,1fa9e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb0c>
   1fa9a:	d07f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1fa9e:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1faa0:	009c                	c.addi4spn	a5,sp,64
   1faa2:	00f50463          	beq	a0,a5,1faaa <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb18>
   1faa6:	cfbf60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1faaa:	8522                	c.mv	a0,s0
   1faac:	ee5f60ef          	jal	ra,16990 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   1fab0:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1fab2:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1fab6:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1fab8:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1faba:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1fabe:	03278b63          	beq	a5,s2,1faf4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb62>
      { _M_dataplus._M_p = __p; }
   1fac2:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1fac4:	689c                	c.ld	a5,16(s1)
   1fac6:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1fac8:	649c                	c.ld	a5,8(s1)
   1faca:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1facc:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1fad0:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1fad4:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1fad8:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1fada:	109c                	c.addi4spn	a5,sp,96
   1fadc:	00f50463          	beq	a0,a5,1fae4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb52>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1fae0:	cc1f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1fae4:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1fae6:	009c                	c.addi4spn	a5,sp,64
   1fae8:	d0f50563          	beq	a0,a5,1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
   1faec:	cb5f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1faf0:	d02ff06f          	jal	zero,1eff2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1faf4:	6490                	c.ld	a2,8(s1)
   1faf6:	0605                	c.addi	a2,1
	if (__n == 0)
   1faf8:	da61                	c.beqz	a2,1fac8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb36>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1fafa:	85ca                	c.mv	a1,s2
   1fafc:	d45f60ef          	jal	ra,16840 <memcpy@plt>
   1fb00:	b7e1                	c.j	1fac8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb36>
      { return _M_dataplus._M_p; }
   1fb02:	842a                	c.mv	s0,a0
   1fb04:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1fb06:	109c                	c.addi4spn	a5,sp,96
   1fb08:	00f50463          	beq	a0,a5,1fb10 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb7e>
   1fb0c:	c95f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1fb10:	8522                	c.mv	a0,s0
   1fb12:	e7ff60ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1fb16:	842a                	c.mv	s0,a0
   1fb18:	eb4ff06f          	jal	zero,1f1cc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x23a>
   1fb1c:	842a                	c.mv	s0,a0
   1fb1e:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1fb20:	109c                	c.addi4spn	a5,sp,96
   1fb22:	00f50463          	beq	a0,a5,1fb2a <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb98>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1fb26:	c7bf60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1fb2a:	8522                	c.mv	a0,s0
   1fb2c:	e65f60ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1fb30:	842a                	c.mv	s0,a0
   1fb32:	b2b9                	c.j	1f480 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4ee>
   1fb34:	842a                	c.mv	s0,a0
   1fb36:	b481                	c.j	1f576 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x5e4>
   1fb38:	842a                	c.mv	s0,a0
   1fb3a:	be0d                	c.j	1f66c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6da>
   1fb3c:	842a                	c.mv	s0,a0
   1fb3e:	b115                	c.j	1f762 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7d0>
   1fb40:	842a                	c.mv	s0,a0
   1fb42:	b399                	c.j	1f888 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8f6>
   1fb44:	842a                	c.mv	s0,a0
   1fb46:	b591                	c.j	1f98a <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9f8>
   1fb48:	842a                	c.mv	s0,a0
   1fb4a:	b3a9                	c.j	1f894 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x902>
   1fb4c:	842a                	c.mv	s0,a0
   1fb4e:	bf81                	c.j	1fa9e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb0c>

000000000001fb50 <dwarf::value_type_mismatch::~value_type_mismatch()>:
class value_type_mismatch : public std::logic_error {
   1fb50:	1141                	c.addi	sp,-16
   1fb52:	e406                	c.sdsp	ra,8(sp)
   1fb54:	0001b797          	auipc	a5,0x1b
   1fb58:	90c7b783          	ld	a5,-1780(a5) # 3a460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   1fb5c:	07c1                	c.addi	a5,16
   1fb5e:	e11c                	c.sd	a5,0(a0)
   1fb60:	e41f60ef          	jal	ra,169a0 <std::logic_error::~logic_error()@plt>
   1fb64:	60a2                	c.ldsp	ra,8(sp)
   1fb66:	0141                	c.addi	sp,16
   1fb68:	8082                	c.jr	ra

000000000001fb6a <dwarf::value_type_mismatch::~value_type_mismatch()>:
   1fb6a:	1141                	c.addi	sp,-16
   1fb6c:	e406                	c.sdsp	ra,8(sp)
   1fb6e:	e022                	c.sdsp	s0,0(sp)
   1fb70:	842a                	c.mv	s0,a0
   1fb72:	0001b797          	auipc	a5,0x1b
   1fb76:	8ee7b783          	ld	a5,-1810(a5) # 3a460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   1fb7a:	07c1                	c.addi	a5,16
   1fb7c:	e11c                	c.sd	a5,0(a0)
   1fb7e:	e23f60ef          	jal	ra,169a0 <std::logic_error::~logic_error()@plt>
   1fb82:	8522                	c.mv	a0,s0
   1fb84:	c1df60ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1fb88:	60a2                	c.ldsp	ra,8(sp)
   1fb8a:	6402                	c.ldsp	s0,0(sp)
   1fb8c:	0141                	c.addi	sp,16
   1fb8e:	8082                	c.jr	ra

000000000001fb90 <dwarf::cursor::address()>:
  taddr address() {
   1fb90:	7119                	c.addi16sp	sp,-128
   1fb92:	fc86                	c.sdsp	ra,120(sp)
   1fb94:	f8a2                	c.sdsp	s0,112(sp)
   1fb96:	f4a6                	c.sdsp	s1,104(sp)
   1fb98:	842a                	c.mv	s0,a0
      { return _M_ptr; }
   1fb9a:	6118                	c.ld	a4,0(a0)
    switch (sec->addr_size) {
   1fb9c:	531c                	c.lw	a5,32(a4)
   1fb9e:	4691                	c.li	a3,4
   1fba0:	0ad78b63          	beq	a5,a3,1fc56 <dwarf::cursor::address()+0xc6>
   1fba4:	04f6e163          	bltu	a3,a5,1fbe6 <dwarf::cursor::address()+0x56>
   1fba8:	4685                	c.li	a3,1
   1fbaa:	08d78063          	beq	a5,a3,1fc2a <dwarf::cursor::address()+0x9a>
   1fbae:	4689                	c.li	a3,2
   1fbb0:	10d79d63          	bne	a5,a3,1fcca <dwarf::cursor::address()+0x13a>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1fbb4:	6b18                	c.ld	a4,16(a4)
   1fbb6:	691c                	c.ld	a5,16(a0)
   1fbb8:	40f70633          	sub	a2,a4,a5
   1fbbc:	4685                	c.li	a3,1
   1fbbe:	00c6f463          	bgeu	a3,a2,1fbc6 <dwarf::cursor::address()+0x36>
   1fbc2:	00e7e563          	bltu	a5,a4,1fbcc <dwarf::cursor::address()+0x3c>
      underflow();
   1fbc6:	8522                	c.mv	a0,s0
   1fbc8:	b0bfb0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1fbcc:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1fbce:	601c                	c.ld	a5,0(s0)
   1fbd0:	4fdc                	c.lw	a5,28(a5)
   1fbd2:	ebb5                	c.bnez	a5,1fc46 <dwarf::cursor::address()+0xb6>
        val |= ((uint64_t)p[i]) << (i * 8);
   1fbd4:	00174783          	lbu	a5,1(a4)
   1fbd8:	07a2                	c.slli	a5,0x8
   1fbda:	00074683          	lbu	a3,0(a4)
   1fbde:	00d7e533          	or	a0,a5,a3
    pos += sizeof(T);
   1fbe2:	0709                	c.addi	a4,2
      return fixed<uint16_t>();
   1fbe4:	ac49                	c.j	1fe76 <dwarf::cursor::address()+0x2e6>
    switch (sec->addr_size) {
   1fbe6:	46a1                	c.li	a3,8
   1fbe8:	0ed79163          	bne	a5,a3,1fcca <dwarf::cursor::address()+0x13a>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1fbec:	6b18                	c.ld	a4,16(a4)
   1fbee:	691c                	c.ld	a5,16(a0)
   1fbf0:	40f70633          	sub	a2,a4,a5
   1fbf4:	469d                	c.li	a3,7
   1fbf6:	00c6f463          	bgeu	a3,a2,1fbfe <dwarf::cursor::address()+0x6e>
   1fbfa:	00e7e563          	bltu	a5,a4,1fc04 <dwarf::cursor::address()+0x74>
      underflow();
   1fbfe:	8522                	c.mv	a0,s0
   1fc00:	ad3fb0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1fc04:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1fc06:	601c                	c.ld	a5,0(s0)
   1fc08:	4fdc                	c.lw	a5,28(a5)
   1fc0a:	e7c5                	c.bnez	a5,1fcb2 <dwarf::cursor::address()+0x122>
   1fc0c:	863a                	c.mv	a2,a4
    uint64_t val = 0;
   1fc0e:	4501                	c.li	a0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1fc10:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1fc14:	00064683          	lbu	a3,0(a2)
   1fc18:	00f696b3          	sll	a3,a3,a5
   1fc1c:	8d55                	c.or	a0,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1fc1e:	0605                	c.addi	a2,1
   1fc20:	27a1                	c.addiw	a5,8
   1fc22:	feb799e3          	bne	a5,a1,1fc14 <dwarf::cursor::address()+0x84>
    pos += sizeof(T);
   1fc26:	0721                	c.addi	a4,8
      return fixed<uint64_t>();
   1fc28:	a4b9                	c.j	1fe76 <dwarf::cursor::address()+0x2e6>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1fc2a:	6b18                	c.ld	a4,16(a4)
   1fc2c:	691c                	c.ld	a5,16(a0)
   1fc2e:	00e7e463          	bltu	a5,a4,1fc36 <dwarf::cursor::address()+0xa6>
      underflow();
   1fc32:	aa1fb0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1fc36:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1fc38:	601c                	c.ld	a5,0(s0)
   1fc3a:	4fdc                	c.lw	a5,28(a5)
   1fc3c:	22078a63          	beq	a5,zero,1fe70 <dwarf::cursor::address()+0x2e0>
        val = (val << 8) | (uint64_t)p[i];
   1fc40:	00074503          	lbu	a0,0(a4)
      for (unsigned i = 0; i < sizeof(T); i++)
   1fc44:	ac05                	c.j	1fe74 <dwarf::cursor::address()+0x2e4>
        val = (val << 8) | (uint64_t)p[i];
   1fc46:	00074783          	lbu	a5,0(a4)
   1fc4a:	07a2                	c.slli	a5,0x8
   1fc4c:	00174683          	lbu	a3,1(a4)
   1fc50:	00d7e533          	or	a0,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1fc54:	b779                	c.j	1fbe2 <dwarf::cursor::address()+0x52>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1fc56:	6b18                	c.ld	a4,16(a4)
   1fc58:	691c                	c.ld	a5,16(a0)
   1fc5a:	40f70633          	sub	a2,a4,a5
   1fc5e:	468d                	c.li	a3,3
   1fc60:	00c6f463          	bgeu	a3,a2,1fc68 <dwarf::cursor::address()+0xd8>
   1fc64:	00e7e563          	bltu	a5,a4,1fc6e <dwarf::cursor::address()+0xde>
      underflow();
   1fc68:	8522                	c.mv	a0,s0
   1fc6a:	a69fb0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1fc6e:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1fc70:	601c                	c.ld	a5,0(s0)
   1fc72:	4fdc                	c.lw	a5,28(a5)
   1fc74:	e39d                	c.bnez	a5,1fc9a <dwarf::cursor::address()+0x10a>
   1fc76:	85ba                	c.mv	a1,a4
   1fc78:	4681                	c.li	a3,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1fc7a:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1fc7e:	0005c603          	lbu	a2,0(a1)
   1fc82:	00d61633          	sll	a2,a2,a3
   1fc86:	8fd1                	c.or	a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1fc88:	0585                	c.addi	a1,1
   1fc8a:	26a1                	c.addiw	a3,8
   1fc8c:	fea699e3          	bne	a3,a0,1fc7e <dwarf::cursor::address()+0xee>
    pos += sizeof(T);
   1fc90:	0711                	c.addi	a4,4
   1fc92:	02079513          	slli	a0,a5,0x20
   1fc96:	9101                	c.srli	a0,0x20
      return fixed<uint32_t>();
   1fc98:	aaf9                	c.j	1fe76 <dwarf::cursor::address()+0x2e6>
   1fc9a:	86ba                	c.mv	a3,a4
   1fc9c:	00470593          	addi	a1,a4,4
    uint64_t val = 0;
   1fca0:	4781                	c.li	a5,0
        val = (val << 8) | (uint64_t)p[i];
   1fca2:	07a2                	c.slli	a5,0x8
   1fca4:	0006c603          	lbu	a2,0(a3)
   1fca8:	8fd1                	c.or	a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1fcaa:	0685                	c.addi	a3,1
   1fcac:	fed59be3          	bne	a1,a3,1fca2 <dwarf::cursor::address()+0x112>
   1fcb0:	b7c5                	c.j	1fc90 <dwarf::cursor::address()+0x100>
   1fcb2:	87ba                	c.mv	a5,a4
   1fcb4:	00870613          	addi	a2,a4,8
    uint64_t val = 0;
   1fcb8:	4501                	c.li	a0,0
        val = (val << 8) | (uint64_t)p[i];
   1fcba:	0522                	c.slli	a0,0x8
   1fcbc:	0007c683          	lbu	a3,0(a5)
   1fcc0:	8d55                	c.or	a0,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1fcc2:	0785                	c.addi	a5,1
   1fcc4:	fec79be3          	bne	a5,a2,1fcba <dwarf::cursor::address()+0x12a>
   1fcc8:	bfb9                	c.j	1fc26 <dwarf::cursor::address()+0x96>
          "address size " + std::to_string(sec->addr_size) + " not supported");
   1fcca:	4541                	c.li	a0,16
   1fccc:	9c5f60ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1fcd0:	84aa                	c.mv	s1,a0
   1fcd2:	601c                	c.ld	a5,0(s0)
   1fcd4:	5380                	c.lw	s0,32(a5)
   1fcd6:	87a2                	c.mv	a5,s0
      unsigned __n = 1;
   1fcd8:	4585                	c.li	a1,1
	  if (__value < (unsigned)__base) return __n;
   1fcda:	48a5                	c.li	a7,9
	  if (__value < __b2) return __n + 1;
   1fcdc:	06300813          	addi	a6,zero,99
	  if (__value < __b3) return __n + 2;
   1fce0:	3e700513          	addi	a0,zero,999
	  if (__value < __b4) return __n + 3;
   1fce4:	6709                	c.lui	a4,0x2
   1fce6:	70f70613          	addi	a2,a4,1807 # 270f <__abi_tag-0xdb85>
	  __value /= __b4;
   1fcea:	71070713          	addi	a4,a4,1808
	  if (__value < (unsigned)__base) return __n;
   1fcee:	00f8f563          	bgeu	a7,a5,1fcf8 <dwarf::cursor::address()+0x168>
	  if (__value < __b2) return __n + 1;
   1fcf2:	06f86a63          	bltu	a6,a5,1fd66 <dwarf::cursor::address()+0x1d6>
   1fcf6:	2585                	c.addiw	a1,1
	: allocator_type(__a), _M_p(__dat) { }
   1fcf8:	081c                	c.addi4spn	a5,sp,16
   1fcfa:	e03e                	c.sdsp	a5,0(sp)
      { _M_construct(__n, __c); }
   1fcfc:	4601                	c.li	a2,0
   1fcfe:	1582                	c.slli	a1,0x20
   1fd00:	9181                	c.srli	a1,0x20
   1fd02:	850a                	c.mv	a0,sp
   1fd04:	afdf60ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   1fd08:	6602                	c.ldsp	a2,0(sp)
      unsigned __pos = __len - 1;
   1fd0a:	6722                	c.ldsp	a4,8(sp)
   1fd0c:	377d                	c.addiw	a4,-1
      while (__val >= 100)
   1fd0e:	06300893          	addi	a7,zero,99
	  auto const __num = (__val % 100) * 2;
   1fd12:	06400813          	addi	a6,zero,100
	  __first[__pos] = __digits[__num + 1];
   1fd16:	0001a517          	auipc	a0,0x1a
   1fd1a:	66253503          	ld	a0,1634(a0) # 3a378 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xc450>
      while (__val >= 100)
   1fd1e:	0688e463          	bltu	a7,s0,1fd86 <dwarf::cursor::address()+0x1f6>
      if (__val >= 10)
   1fd22:	47a5                	c.li	a5,9
   1fd24:	0a87f263          	bgeu	a5,s0,1fdc8 <dwarf::cursor::address()+0x238>
	  auto const __num = __val * 2;
   1fd28:	0014141b          	slliw	s0,s0,0x1
	  __first[1] = __digits[__num + 1];
   1fd2c:	0001a717          	auipc	a4,0x1a
   1fd30:	64c73703          	ld	a4,1612(a4) # 3a378 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xc450>
   1fd34:	0014079b          	addiw	a5,s0,1
   1fd38:	1782                	c.slli	a5,0x20
   1fd3a:	9381                	c.srli	a5,0x20
   1fd3c:	97ba                	c.add	a5,a4
   1fd3e:	0007c783          	lbu	a5,0(a5)
   1fd42:	00f600a3          	sb	a5,1(a2)
	  __first[0] = __digits[__num];
   1fd46:	1402                	c.slli	s0,0x20
   1fd48:	9001                	c.srli	s0,0x20
   1fd4a:	9722                	c.add	a4,s0
   1fd4c:	00074783          	lbu	a5,0(a4)
   1fd50:	00f60023          	sb	a5,0(a2)
    { return std::move(__rhs.insert(0, __lhs)); }
   1fd54:	0000e617          	auipc	a2,0xe
   1fd58:	47460613          	addi	a2,a2,1140 # 2e1c8 <std::piecewise_construct+0x1a8>
   1fd5c:	4581                	c.li	a1,0
   1fd5e:	850a                	c.mv	a0,sp
   1fd60:	8a1f60ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1fd64:	a0bd                	c.j	1fdd2 <dwarf::cursor::address()+0x242>
	  if (__value < __b3) return __n + 2;
   1fd66:	00f56463          	bltu	a0,a5,1fd6e <dwarf::cursor::address()+0x1de>
   1fd6a:	2589                	c.addiw	a1,2
   1fd6c:	b771                	c.j	1fcf8 <dwarf::cursor::address()+0x168>
	  if (__value < __b4) return __n + 3;
   1fd6e:	02079693          	slli	a3,a5,0x20
   1fd72:	9281                	c.srli	a3,0x20
   1fd74:	00f66463          	bltu	a2,a5,1fd7c <dwarf::cursor::address()+0x1ec>
   1fd78:	258d                	c.addiw	a1,3
   1fd7a:	bfbd                	c.j	1fcf8 <dwarf::cursor::address()+0x168>
	  __value /= __b4;
   1fd7c:	02e6d7b3          	divu	a5,a3,a4
   1fd80:	2781                	c.addiw	a5,0
	  __n += 4;
   1fd82:	2591                	c.addiw	a1,4
	  if (__value < (unsigned)__base) return __n;
   1fd84:	b7ad                	c.j	1fcee <dwarf::cursor::address()+0x15e>
	  auto const __num = (__val % 100) * 2;
   1fd86:	030477bb          	remuw	a5,s0,a6
   1fd8a:	0017979b          	slliw	a5,a5,0x1
	  __val /= 100;
   1fd8e:	0304543b          	divuw	s0,s0,a6
	  __first[__pos] = __digits[__num + 1];
   1fd92:	02071593          	slli	a1,a4,0x20
   1fd96:	9181                	c.srli	a1,0x20
   1fd98:	95b2                	c.add	a1,a2
   1fd9a:	0017869b          	addiw	a3,a5,1
   1fd9e:	1682                	c.slli	a3,0x20
   1fda0:	9281                	c.srli	a3,0x20
   1fda2:	96aa                	c.add	a3,a0
   1fda4:	0006c683          	lbu	a3,0(a3)
   1fda8:	00d58023          	sb	a3,0(a1)
	  __first[__pos - 1] = __digits[__num];
   1fdac:	fff7069b          	addiw	a3,a4,-1
   1fdb0:	1682                	c.slli	a3,0x20
   1fdb2:	9281                	c.srli	a3,0x20
   1fdb4:	96b2                	c.add	a3,a2
   1fdb6:	1782                	c.slli	a5,0x20
   1fdb8:	9381                	c.srli	a5,0x20
   1fdba:	97aa                	c.add	a5,a0
   1fdbc:	0007c783          	lbu	a5,0(a5)
   1fdc0:	00f68023          	sb	a5,0(a3)
	  __pos -= 2;
   1fdc4:	3779                	c.addiw	a4,-2
   1fdc6:	bfa1                	c.j	1fd1e <dwarf::cursor::address()+0x18e>
	__first[0] = '0' + __val;
   1fdc8:	0304079b          	addiw	a5,s0,48
   1fdcc:	0ff7f793          	andi	a5,a5,255
   1fdd0:	b741                	c.j	1fd50 <dwarf::cursor::address()+0x1c0>
   1fdd2:	85aa                	c.mv	a1,a0
   1fdd4:	1000                	c.addi4spn	s0,sp,32
   1fdd6:	8522                	c.mv	a0,s0
   1fdd8:	8f9f60ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1fddc:	0000e597          	auipc	a1,0xe
   1fde0:	3fc58593          	addi	a1,a1,1020 # 2e1d8 <std::piecewise_construct+0x1b8>
   1fde4:	8522                	c.mv	a0,s0
   1fde6:	c5bf60ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1fdea:	85aa                	c.mv	a1,a0
   1fdec:	0080                	c.addi4spn	s0,sp,64
   1fdee:	8522                	c.mv	a0,s0
   1fdf0:	8e1f60ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      throw std::runtime_error(
   1fdf4:	85a2                	c.mv	a1,s0
   1fdf6:	8526                	c.mv	a0,s1
   1fdf8:	b29f60ef          	jal	ra,16920 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   1fdfc:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   1fdfe:	089c                	c.addi4spn	a5,sp,80
   1fe00:	00f50463          	beq	a0,a5,1fe08 <dwarf::cursor::address()+0x278>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1fe04:	99df60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1fe08:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1fe0a:	181c                	c.addi4spn	a5,sp,48
   1fe0c:	00f50463          	beq	a0,a5,1fe14 <dwarf::cursor::address()+0x284>
   1fe10:	991f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1fe14:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1fe16:	081c                	c.addi4spn	a5,sp,16
   1fe18:	00f50463          	beq	a0,a5,1fe20 <dwarf::cursor::address()+0x290>
   1fe1c:	985f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
          "address size " + std::to_string(sec->addr_size) + " not supported");
   1fe20:	0001a617          	auipc	a2,0x1a
   1fe24:	60063603          	ld	a2,1536(a2) # 3a420 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   1fe28:	0001a597          	auipc	a1,0x1a
   1fe2c:	7e85b583          	ld	a1,2024(a1) # 3a610 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   1fe30:	8526                	c.mv	a0,s1
   1fe32:	b2ff60ef          	jal	ra,16960 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   1fe36:	842a                	c.mv	s0,a0
   1fe38:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   1fe3a:	089c                	c.addi4spn	a5,sp,80
   1fe3c:	00f50463          	beq	a0,a5,1fe44 <dwarf::cursor::address()+0x2b4>
   1fe40:	961f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1fe44:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1fe46:	181c                	c.addi4spn	a5,sp,48
   1fe48:	00f50463          	beq	a0,a5,1fe50 <dwarf::cursor::address()+0x2c0>
   1fe4c:	955f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1fe50:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1fe52:	081c                	c.addi4spn	a5,sp,16
   1fe54:	00f50463          	beq	a0,a5,1fe5c <dwarf::cursor::address()+0x2cc>
   1fe58:	949f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1fe5c:	8526                	c.mv	a0,s1
   1fe5e:	8f3f60ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1fe62:	8522                	c.mv	a0,s0
   1fe64:	b2df60ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1fe68:	842a                	c.mv	s0,a0
   1fe6a:	bfe9                	c.j	1fe44 <dwarf::cursor::address()+0x2b4>
   1fe6c:	842a                	c.mv	s0,a0
   1fe6e:	b7cd                	c.j	1fe50 <dwarf::cursor::address()+0x2c0>
        val |= ((uint64_t)p[i]) << (i * 8);
   1fe70:	00074503          	lbu	a0,0(a4)
    pos += sizeof(T);
   1fe74:	0705                	c.addi	a4,1
   1fe76:	e818                	c.sd	a4,16(s0)
  }
   1fe78:	70e6                	c.ldsp	ra,120(sp)
   1fe7a:	7446                	c.ldsp	s0,112(sp)
   1fe7c:	74a6                	c.ldsp	s1,104(sp)
   1fe7e:	6109                	c.addi16sp	sp,128
   1fe80:	8082                	c.jr	ra

000000000001fe82 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)>:
    __to_chars_len(_Tp __value, int __base = 10) noexcept
   1fe82:	87aa                	c.mv	a5,a0
      const unsigned __b2 = __base  * __base;
   1fe84:	02b586bb          	mulw	a3,a1,a1
      const unsigned __b3 = __b2 * __base;
   1fe88:	02b6863b          	mulw	a2,a3,a1
      const unsigned long __b4 = __b3 * __base;
   1fe8c:	02b6073b          	mulw	a4,a2,a1
   1fe90:	1702                	c.slli	a4,0x20
   1fe92:	9301                	c.srli	a4,0x20
	  if (__value < (unsigned)__base) return __n;
   1fe94:	1582                	c.slli	a1,0x20
   1fe96:	9181                	c.srli	a1,0x20
   1fe98:	04b56363          	bltu	a0,a1,1fede <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x5c>
	  if (__value < __b2) return __n + 1;
   1fe9c:	1682                	c.slli	a3,0x20
   1fe9e:	9281                	c.srli	a3,0x20
   1fea0:	02d56663          	bltu	a0,a3,1fecc <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x4a>
	  if (__value < __b3) return __n + 2;
   1fea4:	1602                	c.slli	a2,0x20
   1fea6:	9201                	c.srli	a2,0x20
   1fea8:	02c56563          	bltu	a0,a2,1fed2 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x50>
	  if (__value < __b4) return __n + 3;
   1feac:	02e56663          	bltu	a0,a4,1fed8 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x56>
      unsigned __n = 1;
   1feb0:	4505                	c.li	a0,1
	  __value /= __b4;
   1feb2:	02e7d7b3          	divu	a5,a5,a4
	  __n += 4;
   1feb6:	2511                	c.addiw	a0,4
	  if (__value < (unsigned)__base) return __n;
   1feb8:	02b7e263          	bltu	a5,a1,1fedc <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x5a>
	  if (__value < __b2) return __n + 1;
   1febc:	00d7e963          	bltu	a5,a3,1fece <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x4c>
	  if (__value < __b3) return __n + 2;
   1fec0:	00c7ea63          	bltu	a5,a2,1fed4 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x52>
	  if (__value < __b4) return __n + 3;
   1fec4:	fee7f7e3          	bgeu	a5,a4,1feb2 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x30>
   1fec8:	250d                	c.addiw	a0,3
   1feca:	8082                	c.jr	ra
      unsigned __n = 1;
   1fecc:	4505                	c.li	a0,1
	  if (__value < __b2) return __n + 1;
   1fece:	2505                	c.addiw	a0,1
   1fed0:	8082                	c.jr	ra
      unsigned __n = 1;
   1fed2:	4505                	c.li	a0,1
	  if (__value < __b3) return __n + 2;
   1fed4:	2509                	c.addiw	a0,2
   1fed6:	8082                	c.jr	ra
      unsigned __n = 1;
   1fed8:	4505                	c.li	a0,1
   1feda:	b7fd                	c.j	1fec8 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x46>
   1fedc:	8082                	c.jr	ra
   1fede:	4505                	c.li	a0,1
    }
   1fee0:	8082                	c.jr	ra

000000000001fee2 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)>:
      unsigned __pos = __len - 1;
   1fee2:	35fd                	c.addiw	a1,-1
      while (__val >= 100)
   1fee4:	06300793          	addi	a5,zero,99
   1fee8:	04c7f663          	bgeu	a5,a2,1ff34 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x52>
	  auto const __num = (__val % 100) * 2;
   1feec:	06400693          	addi	a3,zero,100
	  __first[__pos] = __digits[__num + 1];
   1fef0:	0001ae17          	auipc	t3,0x1a
   1fef4:	590e3e03          	ld	t3,1424(t3) # 3a480 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xbf88>
      while (__val >= 100)
   1fef8:	6309                	c.lui	t1,0x2
   1fefa:	70f30313          	addi	t1,t1,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   1fefe:	02d677b3          	remu	a5,a2,a3
   1ff02:	0786                	c.slli	a5,0x1
   1ff04:	8832                	c.mv	a6,a2
	  __val /= 100;
   1ff06:	02d65633          	divu	a2,a2,a3
	  __first[__pos] = __digits[__num + 1];
   1ff0a:	02059713          	slli	a4,a1,0x20
   1ff0e:	9301                	c.srli	a4,0x20
   1ff10:	972a                	c.add	a4,a0
   1ff12:	97f2                	c.add	a5,t3
   1ff14:	0017c883          	lbu	a7,1(a5)
   1ff18:	01170023          	sb	a7,0(a4)
	  __first[__pos - 1] = __digits[__num];
   1ff1c:	fff5871b          	addiw	a4,a1,-1
   1ff20:	1702                	c.slli	a4,0x20
   1ff22:	9301                	c.srli	a4,0x20
   1ff24:	972a                	c.add	a4,a0
   1ff26:	0007c783          	lbu	a5,0(a5)
   1ff2a:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   1ff2e:	35f9                	c.addiw	a1,-2
      while (__val >= 100)
   1ff30:	fd0367e3          	bltu	t1,a6,1fefe <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x1c>
      if (__val >= 10)
   1ff34:	47a5                	c.li	a5,9
   1ff36:	02c7f163          	bgeu	a5,a2,1ff58 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x76>
	  auto const __num = __val * 2;
   1ff3a:	0606                	c.slli	a2,0x1
	  __first[1] = __digits[__num + 1];
   1ff3c:	0001a797          	auipc	a5,0x1a
   1ff40:	5447b783          	ld	a5,1348(a5) # 3a480 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xbf88>
   1ff44:	97b2                	c.add	a5,a2
   1ff46:	0017c703          	lbu	a4,1(a5)
   1ff4a:	00e500a3          	sb	a4,1(a0)
	  __first[0] = __digits[__num];
   1ff4e:	0007c603          	lbu	a2,0(a5)
   1ff52:	00c50023          	sb	a2,0(a0)
    }
   1ff56:	8082                	c.jr	ra
	__first[0] = '0' + __val;
   1ff58:	0306061b          	addiw	a2,a2,48
   1ff5c:	0ff67613          	andi	a2,a2,255
   1ff60:	bfcd                	c.j	1ff52 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x70>

000000000001ff62 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)>:
    }
  }
  throw format_error("unknown attribute form " + to_string(form));
}

attribute_spec::attribute_spec(DW_AT name, DW_FORM form)
   1ff62:	711d                	c.addi16sp	sp,-96
   1ff64:	ec86                	c.sdsp	ra,88(sp)
   1ff66:	e8a2                	c.sdsp	s0,80(sp)
   1ff68:	e4a6                	c.sdsp	s1,72(sp)
   1ff6a:	e0ca                	c.sdsp	s2,64(sp)
   1ff6c:	8432                	c.mv	s0,a2
    : name(name), form(form), type(resolve_type(name, form)) {}
   1ff6e:	c10c                	c.sw	a1,0(a0)
   1ff70:	c150                	c.sw	a2,4(a0)
  switch (form) {
   1ff72:	02000793          	addi	a5,zero,32
   1ff76:	16c7ee63          	bltu	a5,a2,200f2 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x190>
   1ff7a:	84ae                	c.mv	s1,a1
   1ff7c:	00261793          	slli	a5,a2,0x2
   1ff80:	0000e717          	auipc	a4,0xe
   1ff84:	69070713          	addi	a4,a4,1680 # 2e610 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x118>
   1ff88:	97ba                	c.add	a5,a4
   1ff8a:	439c                	c.lw	a5,0(a5)
   1ff8c:	97ba                	c.add	a5,a4
   1ff8e:	8782                	c.jr	a5
    return value::type::constant;
   1ff90:	440d                	c.li	s0,3
   1ff92:	a8d5                	c.j	20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    switch (name) {
   1ff94:	05100793          	addi	a5,zero,81
   1ff98:	4409                	c.li	s0,2
   1ff9a:	0eb7c663          	blt	a5,a1,20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   1ff9e:	47e1                	c.li	a5,24
   1ffa0:	00b7de63          	bge	a5,a1,1ffbc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x5a>
   1ffa4:	359d                	c.addiw	a1,-25
   1ffa6:	0000e797          	auipc	a5,0xe
   1ffaa:	72a7b783          	ld	a5,1834(a5) # 2e6d0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1d8>
   1ffae:	00b7d7b3          	srl	a5,a5,a1
   1ffb2:	8b85                	c.andi	a5,1
      return value::type::exprloc;
   1ffb4:	4419                	c.li	s0,6
    switch (name) {
   1ffb6:	ebe1                	c.bnez	a5,20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   1ffb8:	4409                	c.li	s0,2
   1ffba:	a0f1                	c.j	20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   1ffbc:	4789                	c.li	a5,2
   1ffbe:	1af58263          	beq	a1,a5,20162 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x200>
   1ffc2:	35d5                	c.addiw	a1,-11
   1ffc4:	0cb7e163          	bltu	a5,a1,20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
      return value::type::exprloc;
   1ffc8:	4419                	c.li	s0,6
   1ffca:	a875                	c.j	20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    switch (name) {
   1ffcc:	05500793          	addi	a5,zero,85
   1ffd0:	18b7cb63          	blt	a5,a1,20166 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x204>
   1ffd4:	47e1                	c.li	a5,24
   1ffd6:	00b7de63          	bge	a5,a1,1fff2 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x90>
   1ffda:	fe75871b          	addiw	a4,a1,-25
   1ffde:	0000e797          	auipc	a5,0xe
   1ffe2:	6fa7b783          	ld	a5,1786(a5) # 2e6d8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1e0>
   1ffe6:	00e7d7b3          	srl	a5,a5,a4
   1ffea:	8b85                	c.andi	a5,1
   1ffec:	ef9d                	c.bnez	a5,2002a <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0xc8>
   1ffee:	440d                	c.li	s0,3
   1fff0:	a859                	c.j	20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   1fff2:	4789                	c.li	a5,2
   1fff4:	16f58b63          	beq	a1,a5,2016a <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x208>
   1fff8:	47c1                	c.li	a5,16
   1fffa:	440d                	c.li	s0,3
   1fffc:	08f59563          	bne	a1,a5,20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
      return value::type::line;
   20000:	4421                	c.li	s0,8
   20002:	a051                	c.j	20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    return value::type::sconstant;
   20004:	4415                	c.li	s0,5
   20006:	a041                	c.j	20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    return value::type::exprloc;
   20008:	4419                	c.li	s0,6
   2000a:	a8b5                	c.j	20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    return value::type::flag;
   2000c:	441d                	c.li	s0,7
   2000e:	a8a5                	c.j	20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    return value::type::reference;
   20010:	4431                	c.li	s0,12
   20012:	a895                	c.j	20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    return value::type::string;
   20014:	4435                	c.li	s0,13
   20016:	a885                	c.j	20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    return value::type::invalid;
   20018:	4401                	c.li	s0,0
   2001a:	a0b5                	c.j	20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    switch (name) {
   2001c:	05500793          	addi	a5,zero,85
   20020:	04b7cd63          	blt	a5,a1,2007a <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x118>
   20024:	47e1                	c.li	a5,24
   20026:	04b7d263          	bge	a5,a1,2006a <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x108>
   2002a:	fe74871b          	addiw	a4,s1,-25
   2002e:	4785                	c.li	a5,1
   20030:	00e797b3          	sll	a5,a5,a4
   20034:	0000e717          	auipc	a4,0xe
   20038:	6ac73703          	ld	a4,1708(a4) # 2e6e0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1e8>
   2003c:	8f7d                	c.and	a4,a5
   2003e:	12071a63          	bne	a4,zero,20172 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x210>
   20042:	0000e717          	auipc	a4,0xe
   20046:	6a673703          	ld	a4,1702(a4) # 2e6e8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f0>
   2004a:	8ff9                	c.and	a5,a4
   2004c:	12079563          	bne	a5,zero,20176 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x214>
   20050:	04300793          	addi	a5,zero,67
   20054:	12f48363          	beq	s1,a5,2017a <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x218>
                         to_string(name));
   20058:	4541                	c.li	a0,16
   2005a:	e36f60ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2005e:	892a                	c.mv	s2,a0
   20060:	85a6                	c.mv	a1,s1
   20062:	850a                	c.mv	a0,sp
   20064:	7a7090ef          	jal	ra,2a00a <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
   20068:	a035                	c.j	20094 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x132>
    switch (name) {
   2006a:	4789                	c.li	a5,2
   2006c:	10f58163          	beq	a1,a5,2016e <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x20c>
   20070:	47c1                	c.li	a5,16
      return value::type::line;
   20072:	4421                	c.li	s0,8
    switch (name) {
   20074:	00f58963          	beq	a1,a5,20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   20078:	b7c5                	c.j	20058 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0xf6>
   2007a:	77f9                	c.lui	a5,0xffffe
   2007c:	9fad                	c.addw	a5,a1
   2007e:	6709                	c.lui	a4,0x2
      return value::type::invalid;
   20080:	4401                	c.li	s0,0
    switch (name) {
   20082:	fce7fbe3          	bgeu	a5,a4,20058 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0xf6>
    : name(name), form(form), type(resolve_type(name, form)) {}
   20086:	c500                	c.sw	s0,8(a0)
   20088:	60e6                	c.ldsp	ra,88(sp)
   2008a:	6446                	c.ldsp	s0,80(sp)
   2008c:	64a6                	c.ldsp	s1,72(sp)
   2008e:	6906                	c.ldsp	s2,64(sp)
   20090:	6125                	c.addi16sp	sp,96
   20092:	8082                	c.jr	ra
    { return std::move(__rhs.insert(0, __lhs)); }
   20094:	0000e617          	auipc	a2,0xe
   20098:	53460613          	addi	a2,a2,1332 # 2e5c8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0xd0>
   2009c:	4581                	c.li	a1,0
   2009e:	850a                	c.mv	a0,sp
   200a0:	d60f60ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   200a4:	85aa                	c.mv	a1,a0
   200a6:	1000                	c.addi4spn	s0,sp,32
   200a8:	8522                	c.mv	a0,s0
   200aa:	e26f60ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   200ae:	85a2                	c.mv	a1,s0
   200b0:	854a                	c.mv	a0,s2
   200b2:	f7ef60ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   200b6:	0001a797          	auipc	a5,0x1a
   200ba:	4ba7b783          	ld	a5,1210(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   200be:	07c1                	c.addi	a5,16
   200c0:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   200c4:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   200c6:	181c                	c.addi4spn	a5,sp,48
   200c8:	00f50463          	beq	a0,a5,200d0 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x16e>
   200cc:	ed4f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   200d0:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   200d2:	081c                	c.addi4spn	a5,sp,16
   200d4:	00f50463          	beq	a0,a5,200dc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x17a>
   200d8:	ec8f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
                         to_string(name));
   200dc:	0001a617          	auipc	a2,0x1a
   200e0:	2bc63603          	ld	a2,700(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   200e4:	0001a597          	auipc	a1,0x1a
   200e8:	1e45b583          	ld	a1,484(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   200ec:	854a                	c.mv	a0,s2
   200ee:	873f60ef          	jal	ra,16960 <__cxa_throw@plt>
  throw format_error("unknown attribute form " + to_string(form));
   200f2:	4541                	c.li	a0,16
   200f4:	d9cf60ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   200f8:	84aa                	c.mv	s1,a0
   200fa:	85a2                	c.mv	a1,s0
   200fc:	850a                	c.mv	a0,sp
   200fe:	7ee080ef          	jal	ra,288ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)>
    { return std::move(__rhs.insert(0, __lhs)); }
   20102:	0000e617          	auipc	a2,0xe
   20106:	4f660613          	addi	a2,a2,1270 # 2e5f8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x100>
   2010a:	4581                	c.li	a1,0
   2010c:	850a                	c.mv	a0,sp
   2010e:	cf2f60ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   20112:	85aa                	c.mv	a1,a0
   20114:	1000                	c.addi4spn	s0,sp,32
   20116:	8522                	c.mv	a0,s0
   20118:	db8f60ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   2011c:	85a2                	c.mv	a1,s0
   2011e:	8526                	c.mv	a0,s1
   20120:	f10f60ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   20124:	0001a797          	auipc	a5,0x1a
   20128:	44c7b783          	ld	a5,1100(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   2012c:	07c1                	c.addi	a5,16
   2012e:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   20130:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   20132:	181c                	c.addi4spn	a5,sp,48
   20134:	00f50463          	beq	a0,a5,2013c <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1da>
   20138:	e68f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2013c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2013e:	081c                	c.addi4spn	a5,sp,16
   20140:	00f50463          	beq	a0,a5,20148 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1e6>
   20144:	e5cf60ef          	jal	ra,167a0 <operator delete(void*)@plt>
   20148:	0001a617          	auipc	a2,0x1a
   2014c:	25063603          	ld	a2,592(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   20150:	0001a597          	auipc	a1,0x1a
   20154:	1785b583          	ld	a1,376(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   20158:	8526                	c.mv	a0,s1
   2015a:	807f60ef          	jal	ra,16960 <__cxa_throw@plt>
  switch (form) {
   2015e:	4411                	c.li	s0,4
   20160:	b71d                	c.j	20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
      return value::type::exprloc;
   20162:	4419                	c.li	s0,6
   20164:	b70d                	c.j	20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   20166:	440d                	c.li	s0,3
   20168:	bf39                	c.j	20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   2016a:	4425                	c.li	s0,9
   2016c:	bf29                	c.j	20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    switch (name) {
   2016e:	4425                	c.li	s0,9
   20170:	bf19                	c.j	20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   20172:	4425                	c.li	s0,9
   20174:	bf09                	c.j	20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
      return value::type::rangelist;
   20176:	442d                	c.li	s0,11
   20178:	b739                	c.j	20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
      return value::type::mac;
   2017a:	4429                	c.li	s0,10
   2017c:	b729                	c.j	20086 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
      { return _M_dataplus._M_p; }
   2017e:	842a                	c.mv	s0,a0
   20180:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   20182:	181c                	c.addi4spn	a5,sp,48
   20184:	00f50463          	beq	a0,a5,2018c <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x22a>
   20188:	e18f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2018c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2018e:	081c                	c.addi4spn	a5,sp,16
   20190:	00f50463          	beq	a0,a5,20198 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x236>
   20194:	e0cf60ef          	jal	ra,167a0 <operator delete(void*)@plt>
                         to_string(name));
   20198:	854a                	c.mv	a0,s2
   2019a:	db6f60ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2019e:	8522                	c.mv	a0,s0
   201a0:	ff0f60ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   201a4:	842a                	c.mv	s0,a0
   201a6:	b7dd                	c.j	2018c <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x22a>
   201a8:	842a                	c.mv	s0,a0
   201aa:	b7fd                	c.j	20198 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x236>
   201ac:	842a                	c.mv	s0,a0
   201ae:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   201b0:	181c                	c.addi4spn	a5,sp,48
   201b2:	00f50463          	beq	a0,a5,201ba <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x258>
   201b6:	deaf60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   201ba:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   201bc:	081c                	c.addi4spn	a5,sp,16
   201be:	00f50463          	beq	a0,a5,201c6 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x264>
   201c2:	ddef60ef          	jal	ra,167a0 <operator delete(void*)@plt>
  throw format_error("unknown attribute form " + to_string(form));
   201c6:	8526                	c.mv	a0,s1
   201c8:	d88f60ef          	jal	ra,16750 <__cxa_free_exception@plt>
   201cc:	8522                	c.mv	a0,s0
   201ce:	fc2f60ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   201d2:	842a                	c.mv	s0,a0
   201d4:	b7dd                	c.j	201ba <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x258>
   201d6:	842a                	c.mv	s0,a0
   201d8:	b7fd                	c.j	201c6 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x264>

00000000000201da <dwarf::abbrev_entry::read(dwarf::cursor*)>:

bool abbrev_entry::read(cursor *cur) {
   201da:	715d                	c.addi16sp	sp,-80
   201dc:	e486                	c.sdsp	ra,72(sp)
   201de:	e0a2                	c.sdsp	s0,64(sp)
   201e0:	fc26                	c.sdsp	s1,56(sp)
   201e2:	f84a                	c.sdsp	s2,48(sp)
   201e4:	f44e                	c.sdsp	s3,40(sp)
   201e6:	f052                	c.sdsp	s4,32(sp)
   201e8:	ec56                	c.sdsp	s5,24(sp)
   201ea:	e85a                	c.sdsp	s6,16(sp)
   201ec:	84aa                	c.mv	s1,a0
   201ee:	842e                	c.mv	s0,a1
      { _M_erase_at_end(this->_M_impl._M_start); }
   201f0:	691c                	c.ld	a5,16(a0)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   201f2:	6d18                	c.ld	a4,24(a0)
   201f4:	00e78363          	beq	a5,a4,201fa <dwarf::abbrev_entry::read(dwarf::cursor*)+0x20>
	    this->_M_impl._M_finish = __pos;
   201f8:	ed1c                	c.sd	a5,24(a0)
    while (pos < sec->end) {
   201fa:	681c                	c.ld	a5,16(s0)
   201fc:	6008                	c.ld	a0,0(s0)
   201fe:	6918                	c.ld	a4,16(a0)
   20200:	02e7f763          	bgeu	a5,a4,2022e <dwarf::abbrev_entry::read(dwarf::cursor*)+0x54>
   20204:	4581                	c.li	a1,0
   20206:	4601                	c.li	a2,0
      uint8_t byte = *(uint8_t *)(pos++);
   20208:	0785                	c.addi	a5,1
   2020a:	e81c                	c.sd	a5,16(s0)
   2020c:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   20210:	07f77693          	andi	a3,a4,127
   20214:	00c696b3          	sll	a3,a3,a2
   20218:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   2021a:	0187171b          	slliw	a4,a4,0x18
   2021e:	4187571b          	sraiw	a4,a4,0x18
   20222:	02075663          	bge	a4,zero,2024e <dwarf::abbrev_entry::read(dwarf::cursor*)+0x74>
      shift += 7;
   20226:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   20228:	6918                	c.ld	a4,16(a0)
   2022a:	fce7efe3          	bltu	a5,a4,20208 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x2e>
    underflow();
   2022e:	8522                	c.mv	a0,s0
   20230:	ca2fb0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
  attributes.clear();

  // Section 7.5.3
  code = cur->uleb128();
   20234:	0004b023          	sd	zero,0(s1)
  if (!code)
    return false;
   20238:	4501                	c.li	a0,0
      break;
    attributes.push_back(attribute_spec(name, form));
  }
  attributes.shrink_to_fit();
  return true;
}
   2023a:	60a6                	c.ldsp	ra,72(sp)
   2023c:	6406                	c.ldsp	s0,64(sp)
   2023e:	74e2                	c.ldsp	s1,56(sp)
   20240:	7942                	c.ldsp	s2,48(sp)
   20242:	79a2                	c.ldsp	s3,40(sp)
   20244:	7a02                	c.ldsp	s4,32(sp)
   20246:	6ae2                	c.ldsp	s5,24(sp)
   20248:	6b42                	c.ldsp	s6,16(sp)
   2024a:	6161                	c.addi16sp	sp,80
   2024c:	8082                	c.jr	ra
  code = cur->uleb128();
   2024e:	e08c                	c.sd	a1,0(s1)
  if (!code)
   20250:	12058263          	beq	a1,zero,20374 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x19a>
    while (pos < sec->end) {
   20254:	681c                	c.ld	a5,16(s0)
   20256:	6008                	c.ld	a0,0(s0)
   20258:	6918                	c.ld	a4,16(a0)
   2025a:	02e7f763          	bgeu	a5,a4,20288 <dwarf::abbrev_entry::read(dwarf::cursor*)+0xae>
    std::uint64_t result = 0;
   2025e:	4581                	c.li	a1,0
    int shift = 0;
   20260:	4601                	c.li	a2,0
      uint8_t byte = *(uint8_t *)(pos++);
   20262:	0785                	c.addi	a5,1
   20264:	e81c                	c.sd	a5,16(s0)
   20266:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   2026a:	07f77693          	andi	a3,a4,127
   2026e:	00c696b3          	sll	a3,a3,a2
   20272:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   20274:	0187171b          	slliw	a4,a4,0x18
   20278:	4187571b          	sraiw	a4,a4,0x18
   2027c:	00075a63          	bge	a4,zero,20290 <dwarf::abbrev_entry::read(dwarf::cursor*)+0xb6>
      shift += 7;
   20280:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   20282:	6918                	c.ld	a4,16(a0)
   20284:	fce7efe3          	bltu	a5,a4,20262 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x88>
    underflow();
   20288:	8522                	c.mv	a0,s0
   2028a:	c48fb0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    return 0;
   2028e:	4581                	c.li	a1,0
  tag = (DW_TAG)cur->uleb128();
   20290:	c48c                	c.sw	a1,8(s1)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20292:	601c                	c.ld	a5,0(s0)
   20294:	6b98                	c.ld	a4,16(a5)
   20296:	681c                	c.ld	a5,16(s0)
   20298:	00e7e563          	bltu	a5,a4,202a2 <dwarf::abbrev_entry::read(dwarf::cursor*)+0xc8>
      underflow();
   2029c:	8522                	c.mv	a0,s0
   2029e:	c34fb0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   202a2:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   202a4:	601c                	c.ld	a5,0(s0)
   202a6:	4fdc                	c.lw	a5,28(a5)
   202a8:	cbe1                	c.beqz	a5,20378 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x19e>
        val = (val << 8) | (uint64_t)p[i];
   202aa:	00074783          	lbu	a5,0(a4) # 2000 <__abi_tag-0xe294>
      for (unsigned i = 0; i < sizeof(T); i++)
   202ae:	a0f9                	c.j	2037c <dwarf::abbrev_entry::read(dwarf::cursor*)+0x1a2>
    DW_FORM form = (DW_FORM)cur->uleb128();
   202b0:	2601                	c.addiw	a2,0
    if (name == (DW_AT)0 && form == (DW_FORM)0)
   202b2:	00cb67b3          	or	a5,s6,a2
   202b6:	c7dd                	c.beqz	a5,20364 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x18a>
    attributes.push_back(attribute_spec(name, form));
   202b8:	85da                	c.mv	a1,s6
   202ba:	854e                	c.mv	a0,s3
   202bc:	ca7ff0ef          	jal	ra,1ff62 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   202c0:	6c8c                	c.ld	a1,24(s1)
   202c2:	709c                	c.ld	a5,32(s1)
   202c4:	08f58c63          	beq	a1,a5,2035c <dwarf::abbrev_entry::read(dwarf::cursor*)+0x182>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   202c8:	4782                	c.lwsp	a5,0(sp)
   202ca:	c19c                	c.sw	a5,0(a1)
   202cc:	4792                	c.lwsp	a5,4(sp)
   202ce:	c1dc                	c.sw	a5,4(a1)
   202d0:	47a2                	c.lwsp	a5,8(sp)
   202d2:	c59c                	c.sw	a5,8(a1)
	    ++this->_M_impl._M_finish;
   202d4:	6c9c                	c.ld	a5,24(s1)
   202d6:	07b1                	c.addi	a5,12
   202d8:	ec9c                	c.sd	a5,24(s1)
    while (pos < sec->end) {
   202da:	681c                	c.ld	a5,16(s0)
   202dc:	600c                	c.ld	a1,0(s0)
   202de:	6998                	c.ld	a4,16(a1)
   202e0:	02e7f863          	bgeu	a5,a4,20310 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x136>
    std::uint64_t result = 0;
   202e4:	4b01                	c.li	s6,0
    int shift = 0;
   202e6:	864a                	c.mv	a2,s2
      uint8_t byte = *(uint8_t *)(pos++);
   202e8:	0785                	c.addi	a5,1
   202ea:	e81c                	c.sd	a5,16(s0)
   202ec:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   202f0:	07f77693          	andi	a3,a4,127
   202f4:	00c696b3          	sll	a3,a3,a2
   202f8:	00db6b33          	or	s6,s6,a3
      if ((byte & 0x80) == 0)
   202fc:	0187171b          	slliw	a4,a4,0x18
   20300:	4187571b          	sraiw	a4,a4,0x18
   20304:	00075a63          	bge	a4,zero,20318 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x13e>
      shift += 7;
   20308:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   2030a:	6998                	c.ld	a4,16(a1)
   2030c:	fce7eee3          	bltu	a5,a4,202e8 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x10e>
    underflow();
   20310:	8522                	c.mv	a0,s0
   20312:	bc0fb0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    return 0;
   20316:	4b01                	c.li	s6,0
    DW_AT name = (DW_AT)cur->uleb128();
   20318:	2b01                	c.addiw	s6,0
    while (pos < sec->end) {
   2031a:	681c                	c.ld	a5,16(s0)
   2031c:	6008                	c.ld	a0,0(s0)
   2031e:	6918                	c.ld	a4,16(a0)
   20320:	02e7f763          	bgeu	a5,a4,2034e <dwarf::abbrev_entry::read(dwarf::cursor*)+0x174>
    std::uint64_t result = 0;
   20324:	4601                	c.li	a2,0
    int shift = 0;
   20326:	85ca                	c.mv	a1,s2
      uint8_t byte = *(uint8_t *)(pos++);
   20328:	0785                	c.addi	a5,1
   2032a:	e81c                	c.sd	a5,16(s0)
   2032c:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   20330:	07f77693          	andi	a3,a4,127
   20334:	00b696b3          	sll	a3,a3,a1
   20338:	8e55                	c.or	a2,a3
      if ((byte & 0x80) == 0)
   2033a:	0187171b          	slliw	a4,a4,0x18
   2033e:	4187571b          	sraiw	a4,a4,0x18
   20342:	f60757e3          	bge	a4,zero,202b0 <dwarf::abbrev_entry::read(dwarf::cursor*)+0xd6>
      shift += 7;
   20346:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   20348:	6918                	c.ld	a4,16(a0)
   2034a:	fce7efe3          	bltu	a5,a4,20328 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x14e>
    underflow();
   2034e:	8522                	c.mv	a0,s0
   20350:	b82fb0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    if (name == (DW_AT)0 && form == (DW_FORM)0)
   20354:	000b0863          	beq	s6,zero,20364 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x18a>
    DW_FORM form = (DW_FORM)cur->uleb128();
   20358:	864a                	c.mv	a2,s2
   2035a:	bfb9                	c.j	202b8 <dwarf::abbrev_entry::read(dwarf::cursor*)+0xde>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2035c:	864e                	c.mv	a2,s3
   2035e:	8552                	c.mv	a0,s4
   20360:	9a82                	c.jalr	s5
  }
   20362:	bfa5                	c.j	202da <dwarf::abbrev_entry::read(dwarf::cursor*)+0x100>
      { _M_shrink_to_fit(); }
   20364:	8552                	c.mv	a0,s4
   20366:	0001a317          	auipc	t1,0x1a
   2036a:	25233303          	ld	t1,594(t1) # 3a5b8 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()@@Base+0x1a21c>
   2036e:	9302                	c.jalr	t1
  return true;
   20370:	4505                	c.li	a0,1
   20372:	b5e1                	c.j	2023a <dwarf::abbrev_entry::read(dwarf::cursor*)+0x60>
    return false;
   20374:	4501                	c.li	a0,0
   20376:	b5d1                	c.j	2023a <dwarf::abbrev_entry::read(dwarf::cursor*)+0x60>
        val |= ((uint64_t)p[i]) << (i * 8);
   20378:	00074783          	lbu	a5,0(a4)
  attributes.clear();
   2037c:	01048a13          	addi	s4,s1,16
    pos += sizeof(T);
   20380:	0705                	c.addi	a4,1
   20382:	e818                	c.sd	a4,16(s0)
  children = cur->fixed<DW_CHILDREN>() == DW_CHILDREN::yes;
   20384:	17fd                	c.addi	a5,-1
   20386:	0017b793          	sltiu	a5,a5,1
   2038a:	00f48623          	sb	a5,12(s1)
    int shift = 0;
   2038e:	4901                	c.li	s2,0
    attributes.push_back(attribute_spec(name, form));
   20390:	898a                	c.mv	s3,sp
   20392:	0001aa97          	auipc	s5,0x1a
   20396:	126aba83          	ld	s5,294(s5) # 3a4b8 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)@@Base+0x1a05c>
   2039a:	b781                	c.j	202da <dwarf::abbrev_entry::read(dwarf::cursor*)+0x100>

000000000002039c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()>:

  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    bool
    vector<_Tp, _Alloc>::
   2039c:	7179                	c.addi16sp	sp,-48
   2039e:	f406                	c.sdsp	ra,40(sp)
   203a0:	f022                	c.sdsp	s0,32(sp)
   203a2:	ec26                	c.sdsp	s1,24(sp)
   203a4:	e84a                	c.sdsp	s2,16(sp)
   203a6:	e44e                	c.sdsp	s3,8(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   203a8:	6500                	c.ld	s0,8(a0)
    _M_shrink_to_fit()
    {
      if (capacity() == size())
   203aa:	691c                	c.ld	a5,16(a0)
   203ac:	0af40063          	beq	s0,a5,2044c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xb0>
   203b0:	84aa                	c.mv	s1,a0
			 - this->_M_impl._M_start); }
   203b2:	00053983          	ld	s3,0(a0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   203b6:	41340933          	sub	s2,s0,s3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   203ba:	57c5                	c.li	a5,-15
   203bc:	8385                	c.srli	a5,0x1
   203be:	0127e863          	bltu	a5,s2,203ce <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x32>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   203c2:	06090f63          	beq	s2,zero,20440 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xa4>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   203c6:	854a                	c.mv	a0,s2
   203c8:	be8f60ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   203cc:	a829                	c.j	203e6 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x4a>
	  __throw_length_error(
   203ce:	0000e517          	auipc	a0,0xe
   203d2:	2ca50513          	addi	a0,a0,714 # 2e698 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1a0>
   203d6:	acaf60ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	    _Tp(__make_move_if_noexcept_iterator(__c.begin()),
		__make_move_if_noexcept_iterator(__c.end()),
		__c.get_allocator()).swap(__c);
	    return true;
	  }
	catch(...)
   203da:	a96f60ef          	jal	ra,16670 <__cxa_begin_catch@plt>
   203de:	d52f60ef          	jal	ra,16930 <__cxa_end_catch@plt>
	  { return false; }
   203e2:	4501                	c.li	a0,0
   203e4:	a0ad                	c.j	2044e <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xb2>
   203e6:	862a                	c.mv	a2,a0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   203e8:	9932                	c.add	s2,a2
	  for (; __first != __last; ++__first, (void)++__cur)
   203ea:	05340d63          	beq	s0,s3,20444 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xa8>
   203ee:	87ce                	c.mv	a5,s3
      _ForwardIterator __cur = __result;
   203f0:	8732                	c.mv	a4,a2
   203f2:	4394                	c.lw	a3,0(a5)
   203f4:	c314                	c.sw	a3,0(a4)
   203f6:	43d4                	c.lw	a3,4(a5)
   203f8:	c354                	c.sw	a3,4(a4)
   203fa:	4794                	c.lw	a3,8(a5)
   203fc:	c714                	c.sw	a3,8(a4)
	  for (; __first != __last; ++__first, (void)++__cur)
   203fe:	0731                	c.addi	a4,12
   20400:	07b1                	c.addi	a5,12
   20402:	fef418e3          	bne	s0,a5,203f2 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x56>
   20406:	ff440793          	addi	a5,s0,-12
   2040a:	413787b3          	sub	a5,a5,s3
   2040e:	8389                	c.srli	a5,0x2
   20410:	0000e717          	auipc	a4,0xe
   20414:	2e073703          	ld	a4,736(a4) # 2e6f0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f8>
   20418:	02e787b3          	mul	a5,a5,a4
   2041c:	078a                	c.slli	a5,0x2
   2041e:	8389                	c.srli	a5,0x2
   20420:	0785                	c.addi	a5,1
   20422:	00179713          	slli	a4,a5,0x1
   20426:	97ba                	c.add	a5,a4
   20428:	078a                	c.slli	a5,0x2
   2042a:	97b2                	c.add	a5,a2
	  _M_start = __x._M_start;
   2042c:	6088                	c.ld	a0,0(s1)
   2042e:	e090                	c.sd	a2,0(s1)
	  _M_finish = __x._M_finish;
   20430:	e49c                	c.sd	a5,8(s1)
	  _M_end_of_storage = __x._M_end_of_storage;
   20432:	0124b823          	sd	s2,16(s1)
	if (__p)
   20436:	c909                	c.beqz	a0,20448 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xac>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   20438:	b68f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
	    return true;
   2043c:	4505                	c.li	a0,1
      { __a.deallocate(__p, __n); }
   2043e:	a801                	c.j	2044e <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xb2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   20440:	4601                	c.li	a2,0
   20442:	b75d                	c.j	203e8 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x4c>
      _ForwardIterator __cur = __result;
   20444:	87b2                	c.mv	a5,a2
   20446:	b7dd                	c.j	2042c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x90>
   20448:	4505                	c.li	a0,1
   2044a:	a011                	c.j	2044e <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xb2>
	return false;
   2044c:	4501                	c.li	a0,0
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);
    }
   2044e:	70a2                	c.ldsp	ra,40(sp)
   20450:	7402                	c.ldsp	s0,32(sp)
   20452:	64e2                	c.ldsp	s1,24(sp)
   20454:	6942                	c.ldsp	s2,16(sp)
   20456:	69a2                	c.ldsp	s3,8(sp)
   20458:	6145                	c.addi16sp	sp,48
   2045a:	8082                	c.jr	ra

000000000002045c <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)>:
      vector<_Tp, _Alloc>::
   2045c:	715d                	c.addi16sp	sp,-80
   2045e:	e486                	c.sdsp	ra,72(sp)
   20460:	e0a2                	c.sdsp	s0,64(sp)
   20462:	fc26                	c.sdsp	s1,56(sp)
   20464:	f84a                	c.sdsp	s2,48(sp)
   20466:	f44e                	c.sdsp	s3,40(sp)
   20468:	f052                	c.sdsp	s4,32(sp)
   2046a:	ec56                	c.sdsp	s5,24(sp)
   2046c:	e85a                	c.sdsp	s6,16(sp)
   2046e:	e45e                	c.sdsp	s7,8(sp)
   20470:	e062                	c.sdsp	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   20472:	6504                	c.ld	s1,8(a0)
   20474:	00053983          	ld	s3,0(a0)
   20478:	413487b3          	sub	a5,s1,s3
   2047c:	8789                	c.srai	a5,0x2
   2047e:	0000e717          	auipc	a4,0xe
   20482:	b9273703          	ld	a4,-1134(a4) # 2e010 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   20486:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   2048a:	0000e717          	auipc	a4,0xe
   2048e:	26e73703          	ld	a4,622(a4) # 2e6f8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x200>
   20492:	02e78963          	beq	a5,a4,204c4 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x68>
   20496:	8a2a                	c.mv	s4,a0
   20498:	842e                	c.mv	s0,a1
   2049a:	8b32                	c.mv	s6,a2
   2049c:	8bae                	c.mv	s7,a1
      return __a;
   2049e:	873e                	c.mv	a4,a5
      if (__a < __b)
   204a0:	03348863          	beq	s1,s3,204d0 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x74>
	const size_type __len = size() + (std::max)(size(), __n);
   204a4:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   204a6:	02f76963          	bltu	a4,a5,204d8 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x7c>
   204aa:	8aba                	c.mv	s5,a4
   204ac:	0000e797          	auipc	a5,0xe
   204b0:	24c7b783          	ld	a5,588(a5) # 2e6f8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x200>
   204b4:	00e7f363          	bgeu	a5,a4,204ba <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x5e>
   204b8:	8abe                	c.mv	s5,a5
    { return __lhs.base() - __rhs.base(); }
   204ba:	41340c33          	sub	s8,s0,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   204be:	4901                	c.li	s2,0
   204c0:	cb0d                	c.beqz	a4,204f2 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x96>
   204c2:	a00d                	c.j	204e4 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x88>
	  __throw_length_error(__N(__s));
   204c4:	0000d517          	auipc	a0,0xd
   204c8:	58c50513          	addi	a0,a0,1420 # 2da50 <__libc_csu_fini+0x9e>
   204cc:	9d4f60ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   204d0:	4705                	c.li	a4,1
   204d2:	bfc9                	c.j	204a4 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x48>
      _ForwardIterator __cur = __result;
   204d4:	8b4a                	c.mv	s6,s2
   204d6:	a895                	c.j	2054a <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xee>
   204d8:	41340c33          	sub	s8,s0,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   204dc:	0000ea97          	auipc	s5,0xe
   204e0:	21caba83          	ld	s5,540(s5) # 2e6f8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x200>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   204e4:	001a9513          	slli	a0,s5,0x1
   204e8:	9556                	c.add	a0,s5
   204ea:	050a                	c.slli	a0,0x2
   204ec:	ac4f60ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   204f0:	892a                	c.mv	s2,a0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   204f2:	018907b3          	add	a5,s2,s8
   204f6:	000b2703          	lw	a4,0(s6)
   204fa:	c398                	c.sw	a4,0(a5)
   204fc:	004b2703          	lw	a4,4(s6)
   20500:	c3d8                	c.sw	a4,4(a5)
   20502:	008b2703          	lw	a4,8(s6)
   20506:	c798                	c.sw	a4,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   20508:	fd3b86e3          	beq	s7,s3,204d4 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x78>
      _ForwardIterator __cur = __result;
   2050c:	874a                	c.mv	a4,s2
      for (; __first != __last; ++__first, (void)++__cur)
   2050e:	87ce                	c.mv	a5,s3
   20510:	4394                	c.lw	a3,0(a5)
   20512:	c314                	c.sw	a3,0(a4)
   20514:	43d4                	c.lw	a3,4(a5)
   20516:	c354                	c.sw	a3,4(a4)
   20518:	4794                	c.lw	a3,8(a5)
   2051a:	c714                	c.sw	a3,8(a4)
   2051c:	07b1                	c.addi	a5,12
   2051e:	0731                	c.addi	a4,12
   20520:	ff7798e3          	bne	a5,s7,20510 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xb4>
   20524:	ff440793          	addi	a5,s0,-12
   20528:	413787b3          	sub	a5,a5,s3
   2052c:	8389                	c.srli	a5,0x2
   2052e:	0000e717          	auipc	a4,0xe
   20532:	1c273703          	ld	a4,450(a4) # 2e6f0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f8>
   20536:	02e787b3          	mul	a5,a5,a4
   2053a:	078a                	c.slli	a5,0x2
   2053c:	8389                	c.srli	a5,0x2
   2053e:	0785                	c.addi	a5,1
   20540:	00179b13          	slli	s6,a5,0x1
   20544:	9b3e                	c.add	s6,a5
   20546:	0b0a                	c.slli	s6,0x2
   20548:	9b4a                	c.add	s6,s2
	      ++__new_finish;
   2054a:	0b31                	c.addi	s6,12
   2054c:	049b8063          	beq	s7,s1,2058c <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x130>
   20550:	87a2                	c.mv	a5,s0
      _ForwardIterator __cur = __result;
   20552:	875a                	c.mv	a4,s6
   20554:	4394                	c.lw	a3,0(a5)
   20556:	c314                	c.sw	a3,0(a4)
   20558:	43d4                	c.lw	a3,4(a5)
   2055a:	c354                	c.sw	a3,4(a4)
   2055c:	4794                	c.lw	a3,8(a5)
   2055e:	c714                	c.sw	a3,8(a4)
      for (; __first != __last; ++__first, (void)++__cur)
   20560:	07b1                	c.addi	a5,12
   20562:	0731                	c.addi	a4,12
   20564:	fe9798e3          	bne	a5,s1,20554 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xf8>
   20568:	408487b3          	sub	a5,s1,s0
   2056c:	17d1                	c.addi	a5,-12
   2056e:	8389                	c.srli	a5,0x2
   20570:	0000e717          	auipc	a4,0xe
   20574:	18073703          	ld	a4,384(a4) # 2e6f0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f8>
   20578:	02e787b3          	mul	a5,a5,a4
   2057c:	078a                	c.slli	a5,0x2
   2057e:	8389                	c.srli	a5,0x2
   20580:	0785                	c.addi	a5,1
   20582:	00179713          	slli	a4,a5,0x1
   20586:	97ba                	c.add	a5,a4
   20588:	078a                	c.slli	a5,0x2
   2058a:	9b3e                	c.add	s6,a5
	if (__p)
   2058c:	00098563          	beq	s3,zero,20596 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x13a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   20590:	854e                	c.mv	a0,s3
   20592:	a0ef60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   20596:	012a3023          	sd	s2,0(s4)
      this->_M_impl._M_finish = __new_finish;
   2059a:	016a3423          	sd	s6,8(s4)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2059e:	001a9793          	slli	a5,s5,0x1
   205a2:	97d6                	c.add	a5,s5
   205a4:	078a                	c.slli	a5,0x2
   205a6:	993e                	c.add	s2,a5
   205a8:	012a3823          	sd	s2,16(s4)
    }
   205ac:	60a6                	c.ldsp	ra,72(sp)
   205ae:	6406                	c.ldsp	s0,64(sp)
   205b0:	74e2                	c.ldsp	s1,56(sp)
   205b2:	7942                	c.ldsp	s2,48(sp)
   205b4:	79a2                	c.ldsp	s3,40(sp)
   205b6:	7a02                	c.ldsp	s4,32(sp)
   205b8:	6ae2                	c.ldsp	s5,24(sp)
   205ba:	6b42                	c.ldsp	s6,16(sp)
   205bc:	6ba2                	c.ldsp	s7,8(sp)
   205be:	6c02                	c.ldsp	s8,0(sp)
   205c0:	6161                	c.addi16sp	sp,80
   205c2:	8082                	c.jr	ra

00000000000205c4 <dwarf::expr::expr(dwarf::unit const*, unsigned long, unsigned long)>:
DWARFPP_BEGIN_NAMESPACE

expr_context no_expr_context;

expr::expr(const unit *cu, section_offset offset, section_length len)
    : cu(cu), offset(offset), len(len) {}
   205c4:	e10c                	c.sd	a1,0(a0)
   205c6:	e510                	c.sd	a2,8(a0)
   205c8:	e914                	c.sd	a3,16(a0)
   205ca:	8082                	c.jr	ra

00000000000205cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const>:
  return evaluate(ctx, {argument});
}

expr_result
expr::evaluate(expr_context *ctx,
               const std::initializer_list<taddr> &arguments) const {
   205cc:	7169                	c.addi16sp	sp,-304
   205ce:	f606                	c.sdsp	ra,296(sp)
   205d0:	f222                	c.sdsp	s0,288(sp)
   205d2:	ee26                	c.sdsp	s1,280(sp)
   205d4:	ea4a                	c.sdsp	s2,272(sp)
   205d6:	e64e                	c.sdsp	s3,264(sp)
   205d8:	e252                	c.sdsp	s4,256(sp)
   205da:	fdd6                	c.sdsp	s5,248(sp)
   205dc:	f9da                	c.sdsp	s6,240(sp)
   205de:	f5de                	c.sdsp	s7,232(sp)
   205e0:	f1e2                	c.sdsp	s8,224(sp)
   205e2:	ede6                	c.sdsp	s9,216(sp)
   205e4:	e9ea                	c.sdsp	s10,208(sp)
   205e6:	e5ee                	c.sdsp	s11,200(sp)
   205e8:	8aaa                	c.mv	s5,a0
   205ea:	892e                	c.mv	s2,a1
   205ec:	8b32                	c.mv	s6,a2
   205ee:	89b6                	c.mv	s3,a3
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   205f0:	10bc                	c.addi4spn	a5,sp,104
   205f2:	f53e                	c.sdsp	a5,168(sp)
   205f4:	f93e                	c.sdsp	a5,176(sp)
   205f6:	113c                	c.addi4spn	a5,sp,168
   205f8:	fd3e                	c.sdsp	a5,184(sp)
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }

      // Number of elements.
      constexpr size_type
      size() const noexcept { return _M_len; }
   205fa:	6698                	c.ld	a4,8(a3)
    if (n <= (size_type)(cap - base))
   205fc:	47a1                	c.li	a5,8
   205fe:	04e7f363          	bgeu	a5,a4,20644 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x78>
      target <<= 1;
   20602:	0786                	c.slli	a5,0x1
    while (target < n)
   20604:	fee7efe3          	bltu	a5,a4,20602 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x36>
    char *newbuf = new char[sizeof(T[target])];
   20608:	00379413          	slli	s0,a5,0x3
   2060c:	8522                	c.mv	a0,s0
   2060e:	f83f50ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   20612:	8a2a                	c.mv	s4,a0
    T *src = base, *dest = (T *)newbuf;
   20614:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   20616:	774a                	c.ldsp	a4,176(sp)
   20618:	04e57263          	bgeu	a0,a4,2065c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x90>
    T *src = base, *dest = (T *)newbuf;
   2061c:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   2061e:	07a1                	c.addi	a5,8
   20620:	fee7efe3          	bltu	a5,a4,2061e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x52>
   20624:	fff70493          	addi	s1,a4,-1
   20628:	8c89                	c.sub	s1,a0
   2062a:	98e1                	c.andi	s1,-8
   2062c:	04a1                	c.addi	s1,8
   2062e:	94d2                	c.add	s1,s4
    if ((char *)base != buf)
   20630:	10bc                	c.addi4spn	a5,sp,104
   20632:	00f50563          	beq	a0,a5,2063c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x70>
      delete[] (char *)base;
   20636:	c119                	c.beqz	a0,2063c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x70>
   20638:	a18f60ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   2063c:	f552                	c.sdsp	s4,168(sp)
    end = dest;
   2063e:	f926                	c.sdsp	s1,176(sp)
    cap = base + target;
   20640:	9a22                	c.add	s4,s0
   20642:	fd52                	c.sdsp	s4,184(sp)

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
   20644:	0009b783          	ld	a5,0(s3)

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   20648:	0089b483          	ld	s1,8(s3)
   2064c:	048e                	c.slli	s1,0x3
  small_vector<taddr, 8> stack;

  // Create the initial stack.  arguments are in reverse order
  // (that is, element 0 is TOS), so reverse it.
  stack.reserve(arguments.size());
  for (const taddr *elt = arguments.end() - 1; elt >= arguments.begin(); elt--)
   2064e:	14e1                	c.addi	s1,-8
   20650:	94be                	c.add	s1,a5
   20652:	08f4e563          	bltu	s1,a5,206dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x110>
    if ((char *)base != buf)
   20656:	06810a13          	addi	s4,sp,104
   2065a:	a881                	c.j	206aa <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xde>
    T *src = base, *dest = (T *)newbuf;
   2065c:	84d2                	c.mv	s1,s4
   2065e:	bfc9                	c.j	20630 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x64>
    char *newbuf = new char[sizeof(T[target])];
   20660:	8c2a                	c.mv	s8,a0
    T *src = base, *dest = (T *)newbuf;
   20662:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   20664:	774a                	c.ldsp	a4,176(sp)
   20666:	06e57963          	bgeu	a0,a4,206d8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10c>
    T *src = base, *dest = (T *)newbuf;
   2066a:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   2066c:	07a1                	c.addi	a5,8
   2066e:	fee7efe3          	bltu	a5,a4,2066c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa0>
   20672:	fff70b93          	addi	s7,a4,-1
   20676:	40ab8bb3          	sub	s7,s7,a0
   2067a:	ff8bfb93          	andi	s7,s7,-8
   2067e:	0ba1                	c.addi	s7,8
   20680:	9be2                	c.add	s7,s8
    if ((char *)base != buf)
   20682:	01450563          	beq	a0,s4,2068c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc0>
      delete[] (char *)base;
   20686:	c119                	c.beqz	a0,2068c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc0>
   20688:	9c8f60ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   2068c:	f562                	c.sdsp	s8,168(sp)
    end = dest;
   2068e:	f95e                	c.sdsp	s7,176(sp)
    cap = base + target;
   20690:	9c22                	c.add	s8,s0
   20692:	fd62                	c.sdsp	s8,184(sp)
    new (end) T(x);
   20694:	6098                	c.ld	a4,0(s1)
   20696:	77ca                	c.ldsp	a5,176(sp)
   20698:	e398                	c.sd	a4,0(a5)
    end++;
   2069a:	77ca                	c.ldsp	a5,176(sp)
   2069c:	07a1                	c.addi	a5,8
   2069e:	f93e                	c.sdsp	a5,176(sp)
   206a0:	14e1                	c.addi	s1,-8
   206a2:	0009b783          	ld	a5,0(s3)
   206a6:	02f4eb63          	bltu	s1,a5,206dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x110>
  size_type size() const { return end - base; }
   206aa:	772a                	c.ldsp	a4,168(sp)
   206ac:	77ca                	c.ldsp	a5,176(sp)
   206ae:	8f99                	c.sub	a5,a4
   206b0:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   206b2:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   206b4:	756a                	c.ldsp	a0,184(sp)
   206b6:	8d19                	c.sub	a0,a4
   206b8:	850d                	c.srai	a0,0x3
   206ba:	fcf57de3          	bgeu	a0,a5,20694 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc8>
   206be:	e111                	c.bnez	a0,206c2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf6>
   206c0:	4505                	c.li	a0,1
    while (target < n)
   206c2:	00f57563          	bgeu	a0,a5,206cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x100>
      target <<= 1;
   206c6:	0506                	c.slli	a0,0x1
    while (target < n)
   206c8:	fef56fe3          	bltu	a0,a5,206c6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfa>
    char *newbuf = new char[sizeof(T[target])];
   206cc:	00351413          	slli	s0,a0,0x3
   206d0:	8522                	c.mv	a0,s0
   206d2:	ebff50ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   206d6:	b769                	c.j	20660 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x94>
    T *src = base, *dest = (T *)newbuf;
   206d8:	8be2                	c.mv	s7,s8
   206da:	b765                	c.j	20682 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb6>
    stack.push_back(*elt);

  // Create a subsection for just this expression so we can
  // easily detect the end (including premature end).
  auto cusec = cu->data();
   206dc:	00093503          	ld	a0,0(s2)
   206e0:	c58f70ef          	jal	ra,17b38 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   206e4:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   206e8:	00853b83          	ld	s7,8(a0)
	if (_M_pi != nullptr)
   206ec:	000b8e63          	beq	s7,zero,20708 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13c>
    if (__is_single_threaded())
   206f0:	0001a797          	auipc	a5,0x1a
   206f4:	da87b783          	ld	a5,-600(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   206f8:	0007c783          	lbu	a5,0(a5)
   206fc:	c385                	c.beqz	a5,2071c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x150>
  { *__mem += __val; }
   206fe:	030ba783          	lw	a5,48(s7)
   20702:	2785                	c.addiw	a5,1
   20704:	02fba823          	sw	a5,48(s7)
  shared_ptr<section> subsec(
      make_shared<section>(cusec->type, cusec->begin + offset, len, cusec->ord,
   20708:	0089b403          	ld	s0,8(s3)
   2070c:	00893783          	ld	a5,8(s2)
   20710:	943e                	c.add	s0,a5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   20712:	06000513          	addi	a0,zero,96
   20716:	89af60ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   2071a:	a039                	c.j	20728 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x15c>
      __atomic_add(__mem, __val);
   2071c:	4585                	c.li	a1,1
   2071e:	030b8513          	addi	a0,s7,48
   20722:	e8ff50ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   20726:	b7cd                	c.j	20708 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13c>
   20728:	84aa                	c.mv	s1,a0
   2072a:	00052423          	sw	zero,8(a0)
   2072e:	00052623          	sw	zero,12(a0)
   20732:	00052823          	sw	zero,16(a0)
   20736:	00052a23          	sw	zero,20(a0)
   2073a:	00052c23          	sw	zero,24(a0)
   2073e:	00052e23          	sw	zero,28(a0)
   20742:	02053023          	sd	zero,32(a0)
   20746:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   2074a:	4785                	c.li	a5,1
   2074c:	d91c                	c.sw	a5,48(a0)
   2074e:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   20750:	0001a797          	auipc	a5,0x1a
   20754:	e887b783          	ld	a5,-376(a5) # 3a5d8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   20758:	07c1                	c.addi	a5,16
   2075a:	e11c                	c.sd	a5,0(a0)
   2075c:	0009a583          	lw	a1,0(s3)
   20760:	01093603          	ld	a2,16(s2)
   20764:	01c9a703          	lw	a4,28(s3)
   20768:	0189a683          	lw	a3,24(s3)
   2076c:	0209a783          	lw	a5,32(s3)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   20770:	dd0c                	c.sw	a1,56(a0)
   20772:	e120                	c.sd	s0,64(a0)
   20774:	9432                	c.add	s0,a2
   20776:	e520                	c.sd	s0,72(a0)
   20778:	c934                	c.sw	a3,80(a0)
        ord(ord), addr_size(addr_size) {}
   2077a:	c978                	c.sw	a4,84(a0)
   2077c:	cd3c                	c.sw	a5,88(a0)
   2077e:	03850c13          	addi	s8,a0,56
    if (__is_single_threaded())
   20782:	0001a797          	auipc	a5,0x1a
   20786:	d167b783          	ld	a5,-746(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2078a:	0007c783          	lbu	a5,0(a5)
   2078e:	10078863          	beq	a5,zero,2089e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2d2>
  { *__mem += __val; }
   20792:	4789                	c.li	a5,2
   20794:	d91c                	c.sw	a5,48(a0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20796:	e8e2                	c.sdsp	s8,80(sp)
      : _M_pi(__r._M_pi)
   20798:	eca6                	c.sdsp	s1,88(sp)
    if (__is_single_threaded())
   2079a:	0001a797          	auipc	a5,0x1a
   2079e:	cfe7b783          	ld	a5,-770(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   207a2:	0007c783          	lbu	a5,0(a5)
   207a6:	10078263          	beq	a5,zero,208aa <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2de>
  { *__mem += __val; }
   207aa:	589c                	c.lw	a5,48(s1)
   207ac:	2785                	c.addiw	a5,1
   207ae:	d89c                	c.sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   207b0:	60bc                	c.ld	a5,64(s1)
   207b2:	f0be                	c.sdsp	a5,96(sp)
    if (__is_single_threaded())
   207b4:	0001a797          	auipc	a5,0x1a
   207b8:	ce47b783          	ld	a5,-796(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   207bc:	0007c783          	lbu	a5,0(a5)
   207c0:	0e078b63          	beq	a5,zero,208b6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2ea>
    _Atomic_word __result = *__mem;
   207c4:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   207c6:	fff5079b          	addiw	a5,a0,-1
   207ca:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   207cc:	4785                	c.li	a5,1
   207ce:	0ef50a63          	beq	a0,a5,208c2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2f6>
  bool end() const { return pos >= sec->end; }
   207d2:	67c6                	c.ldsp	a5,80(sp)
  // create the result directly, rather than using the top of
  // stack.
  expr_result result;

  // 2.6.1.1.4 Empty location descriptions
  if (cur.end()) {
   207d4:	6b98                	c.ld	a4,16(a5)
   207d6:	7786                	c.ldsp	a5,96(sp)
   207d8:	12e7e563          	bltu	a5,a4,20902 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x336>
    result.location_type = expr_result::type::empty;
   207dc:	4791                	c.li	a5,4
   207de:	00faa023          	sw	a5,0(s5)
    result.value = 0;
   207e2:	000ab423          	sd	zero,8(s5)
	if (_M_pi != nullptr)
   207e6:	6466                	c.ldsp	s0,88(sp)
   207e8:	c01d                	c.beqz	s0,2080e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x242>
    if (__is_single_threaded())
   207ea:	0001a797          	auipc	a5,0x1a
   207ee:	cae7b783          	ld	a5,-850(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   207f2:	0007c783          	lbu	a5,0(a5)
   207f6:	e399                	c.bnez	a5,207fc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x230>
   207f8:	6100106f          	jal	zero,21e08 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x183c>
    _Atomic_word __result = *__mem;
   207fc:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   207fe:	fff5079b          	addiw	a5,a0,-1
   20802:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20804:	4785                	c.li	a5,1
   20806:	00f51463          	bne	a0,a5,2080e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x242>
   2080a:	60c0106f          	jal	zero,21e16 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x184a>
    if (__is_single_threaded())
   2080e:	0001a797          	auipc	a5,0x1a
   20812:	c8a7b783          	ld	a5,-886(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   20816:	0007c783          	lbu	a5,0(a5)
   2081a:	e399                	c.bnez	a5,20820 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x254>
   2081c:	6400106f          	jal	zero,21e5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1890>
    _Atomic_word __result = *__mem;
   20820:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   20822:	fff5079b          	addiw	a5,a0,-1
   20826:	d89c                	c.sw	a5,48(s1)
   20828:	4785                	c.li	a5,1
   2082a:	00f51463          	bne	a0,a5,20832 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x266>
   2082e:	63c0106f          	jal	zero,21e6a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x189e>
	if (_M_pi != nullptr)
   20832:	020b8663          	beq	s7,zero,2085e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x292>
    if (__is_single_threaded())
   20836:	0001a797          	auipc	a5,0x1a
   2083a:	c627b783          	ld	a5,-926(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2083e:	0007c783          	lbu	a5,0(a5)
   20842:	e399                	c.bnez	a5,20848 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x27c>
   20844:	66c0106f          	jal	zero,21eb0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x18e4>
    _Atomic_word __result = *__mem;
   20848:	030ba503          	lw	a0,48(s7)
    *__mem += __val;
   2084c:	fff5079b          	addiw	a5,a0,-1
   20850:	02fba823          	sw	a5,48(s7)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20854:	4785                	c.li	a5,1
   20856:	00f51463          	bne	a0,a5,2085e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x292>
   2085a:	6640106f          	jal	zero,21ebe <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x18f2>
    for (T *p = base; p < end; ++p)
   2085e:	752a                	c.ldsp	a0,168(sp)
   20860:	77ca                	c.ldsp	a5,176(sp)
   20862:	00f57763          	bgeu	a0,a5,20870 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2a4>
   20866:	87aa                	c.mv	a5,a0
   20868:	07a1                	c.addi	a5,8
   2086a:	774a                	c.ldsp	a4,176(sp)
   2086c:	fee7eee3          	bltu	a5,a4,20868 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x29c>
    end = base;
   20870:	f92a                	c.sdsp	a0,176(sp)
    if ((char *)base != buf)
   20872:	10bc                	c.addi4spn	a5,sp,104
   20874:	00f50563          	beq	a0,a5,2087e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2b2>
      delete[] (char *)base;
   20878:	c119                	c.beqz	a0,2087e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2b2>
   2087a:	fd7f50ef          	jal	ra,16850 <operator delete[](void*)@plt>

  return result;

underflow:
  throw expr_error("stack underflow evaluating DWARF expression");
}
   2087e:	8556                	c.mv	a0,s5
   20880:	70b2                	c.ldsp	ra,296(sp)
   20882:	7412                	c.ldsp	s0,288(sp)
   20884:	64f2                	c.ldsp	s1,280(sp)
   20886:	6952                	c.ldsp	s2,272(sp)
   20888:	69b2                	c.ldsp	s3,264(sp)
   2088a:	6a12                	c.ldsp	s4,256(sp)
   2088c:	7aee                	c.ldsp	s5,248(sp)
   2088e:	7b4e                	c.ldsp	s6,240(sp)
   20890:	7bae                	c.ldsp	s7,232(sp)
   20892:	7c0e                	c.ldsp	s8,224(sp)
   20894:	6cee                	c.ldsp	s9,216(sp)
   20896:	6d4e                	c.ldsp	s10,208(sp)
   20898:	6dae                	c.ldsp	s11,200(sp)
   2089a:	6155                	c.addi16sp	sp,304
   2089c:	8082                	c.jr	ra
      __atomic_add(__mem, __val);
   2089e:	4585                	c.li	a1,1
   208a0:	03050513          	addi	a0,a0,48
   208a4:	d0df50ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   208a8:	b5fd                	c.j	20796 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ca>
   208aa:	4585                	c.li	a1,1
   208ac:	03048513          	addi	a0,s1,48
   208b0:	d01f50ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   208b4:	bdf5                	c.j	207b0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1e4>
      return __exchange_and_add(__mem, __val);
   208b6:	55fd                	c.li	a1,-1
   208b8:	03048513          	addi	a0,s1,48
   208bc:	d35f50ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   208c0:	b731                	c.j	207cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x200>
	_M_dispose();
   208c2:	609c                	c.ld	a5,0(s1)
   208c4:	6b9c                	c.ld	a5,16(a5)
   208c6:	8526                	c.mv	a0,s1
   208c8:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   208ca:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   208ce:	0001a797          	auipc	a5,0x1a
   208d2:	bca7b783          	ld	a5,-1078(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   208d6:	0007c783          	lbu	a5,0(a5)
   208da:	cf89                	c.beqz	a5,208f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x328>
    _Atomic_word __result = *__mem;
   208dc:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   208de:	fff7871b          	addiw	a4,a5,-1
   208e2:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   208e4:	4705                	c.li	a4,1
   208e6:	eee796e3          	bne	a5,a4,207d2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x206>
	    _M_destroy();
   208ea:	609c                	c.ld	a5,0(s1)
   208ec:	6f9c                	c.ld	a5,24(a5)
   208ee:	8526                	c.mv	a0,s1
   208f0:	9782                	c.jalr	a5
   208f2:	b5c5                	c.j	207d2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x206>
      return __exchange_and_add(__mem, __val);
   208f4:	55fd                	c.li	a1,-1
   208f6:	03448513          	addi	a0,s1,52
   208fa:	cf7f50ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   208fe:	87aa                	c.mv	a5,a0
   20900:	b7d5                	c.j	208e4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x318>
  result.location_type = expr_result::type::address;
   20902:	000aa023          	sw	zero,0(s5)
    switch (op) {
   20906:	0fc00993          	addi	s3,zero,252
   2090a:	0000e417          	auipc	s0,0xe
   2090e:	01e40413          	addi	s0,s0,30 # 2e928 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x430>
    return ::__libc_single_threaded;
   20912:	0001ad17          	auipc	s10,0x1a
   20916:	b86d3d03          	ld	s10,-1146(s10) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
      CHECKN(2);
   2091a:	4da1                	c.li	s11,8
  while (!cur.end()) {
   2091c:	3db0006f          	jal	zero,214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    while (pos < sec->end) {
   20920:	6a9c                	c.ld	a5,16(a3)
    std::uint64_t result = 0;
   20922:	4901                	c.li	s2,0
    int shift = 0;
   20924:	4581                	c.li	a1,0
    while (pos < sec->end) {
   20926:	02f77663          	bgeu	a4,a5,20952 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x386>
      uint8_t byte = *(uint8_t *)(pos++);
   2092a:	0705                	c.addi	a4,1
   2092c:	f0ba                	c.sdsp	a4,96(sp)
   2092e:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   20932:	07f7f613          	andi	a2,a5,127
   20936:	00b61633          	sll	a2,a2,a1
   2093a:	00c96933          	or	s2,s2,a2
      if ((byte & 0x80) == 0)
   2093e:	0187979b          	slliw	a5,a5,0x18
   20942:	4187d79b          	sraiw	a5,a5,0x18
   20946:	0e07dbe3          	bge	a5,zero,2123c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc70>
      shift += 7;
   2094a:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   2094c:	6a9c                	c.ld	a5,16(a3)
   2094e:	fcf76ee3          	bltu	a4,a5,2092a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x35e>
    underflow();
   20952:	0888                	c.addi4spn	a0,sp,80
   20954:	d7ffa0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    return 0;
   20958:	0e30006f          	jal	zero,2123a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc6e>
    while (pos < sec->end) {
   2095c:	6a9c                	c.ld	a5,16(a3)
    std::uint64_t result = 0;
   2095e:	4501                	c.li	a0,0
    int shift = 0;
   20960:	4581                	c.li	a1,0
    while (pos < sec->end) {
   20962:	02f77563          	bgeu	a4,a5,2098c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x3c0>
      uint8_t byte = *(uint8_t *)(pos++);
   20966:	0705                	c.addi	a4,1
   20968:	f0ba                	c.sdsp	a4,96(sp)
   2096a:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   2096e:	07f7f613          	andi	a2,a5,127
   20972:	00b61633          	sll	a2,a2,a1
   20976:	8d51                	c.or	a0,a2
      if ((byte & 0x80) == 0)
   20978:	0187979b          	slliw	a5,a5,0x18
   2097c:	4187d79b          	sraiw	a5,a5,0x18
   20980:	5a07dee3          	bge	a5,zero,2173c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1170>
      shift += 7;
   20984:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   20986:	6a9c                	c.ld	a5,16(a3)
   20988:	fcf76fe3          	bltu	a4,a5,20966 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x39a>
    underflow();
   2098c:	0888                	c.addi4spn	a0,sp,80
   2098e:	d45fa0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    return 0;
   20992:	5a90006f          	jal	zero,2173a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x116e>
    while (pos < sec->end) {
   20996:	6a9c                	c.ld	a5,16(a3)
    std::uint64_t result = 0;
   20998:	4a01                	c.li	s4,0
    int shift = 0;
   2099a:	4581                	c.li	a1,0
    while (pos < sec->end) {
   2099c:	02f77663          	bgeu	a4,a5,209c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x3fc>
      uint8_t byte = *(uint8_t *)(pos++);
   209a0:	0705                	c.addi	a4,1
   209a2:	f0ba                	c.sdsp	a4,96(sp)
   209a4:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   209a8:	07f7f613          	andi	a2,a5,127
   209ac:	00b61633          	sll	a2,a2,a1
   209b0:	00ca6a33          	or	s4,s4,a2
      if ((byte & 0x80) == 0)
   209b4:	0187979b          	slliw	a5,a5,0x18
   209b8:	4187d79b          	sraiw	a5,a5,0x18
   209bc:	6c07d263          	bge	a5,zero,21080 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xab4>
      shift += 7;
   209c0:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   209c2:	6a9c                	c.ld	a5,16(a3)
   209c4:	fcf76ee3          	bltu	a4,a5,209a0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x3d4>
    underflow();
   209c8:	0888                	c.addi4spn	a0,sp,80
   209ca:	d09fa0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    return 0;
   209ce:	ad45                	c.j	2107e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xab2>
      stack.push_back((unsigned)op - (unsigned)DW_OP::lit0);
   209d0:	fd09091b          	addiw	s2,s2,-48
   209d4:	1902                	c.slli	s2,0x20
   209d6:	02095913          	srli	s2,s2,0x20
  size_type size() const { return end - base; }
   209da:	772a                	c.ldsp	a4,168(sp)
   209dc:	77ca                	c.ldsp	a5,176(sp)
   209de:	8f99                	c.sub	a5,a4
   209e0:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   209e2:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   209e4:	7a6a                	c.ldsp	s4,184(sp)
   209e6:	40ea0a33          	sub	s4,s4,a4
   209ea:	403a5a13          	srai	s4,s4,0x3
   209ee:	04fa7963          	bgeu	s4,a5,20a40 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x474>
   209f2:	000a1363          	bne	s4,zero,209f8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x42c>
   209f6:	4a05                	c.li	s4,1
    while (target < n)
   209f8:	00fa7563          	bgeu	s4,a5,20a02 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x436>
      target <<= 1;
   209fc:	0a06                	c.slli	s4,0x1
    while (target < n)
   209fe:	fefa6fe3          	bltu	s4,a5,209fc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x430>
    char *newbuf = new char[sizeof(T[target])];
   20a02:	0a0e                	c.slli	s4,0x3
   20a04:	8552                	c.mv	a0,s4
   20a06:	b8bf50ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   20a0a:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   20a0c:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   20a0e:	774a                	c.ldsp	a4,176(sp)
   20a10:	04e57063          	bgeu	a0,a4,20a50 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x484>
    T *src = base, *dest = (T *)newbuf;
   20a14:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20a16:	07a1                	c.addi	a5,8
   20a18:	fee7efe3          	bltu	a5,a4,20a16 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x44a>
   20a1c:	fff70793          	addi	a5,a4,-1
   20a20:	8f89                	c.sub	a5,a0
   20a22:	9be1                	c.andi	a5,-8
   20a24:	07a1                	c.addi	a5,8
   20a26:	97e6                	c.add	a5,s9
   20a28:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20a2a:	10bc                	c.addi4spn	a5,sp,104
   20a2c:	00f50563          	beq	a0,a5,20a36 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x46a>
      delete[] (char *)base;
   20a30:	c119                	c.beqz	a0,20a36 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x46a>
   20a32:	e1ff50ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20a36:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   20a38:	67a2                	c.ldsp	a5,8(sp)
   20a3a:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   20a3c:	9cd2                	c.add	s9,s4
   20a3e:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   20a40:	77ca                	c.ldsp	a5,176(sp)
   20a42:	0127b023          	sd	s2,0(a5)
    end++;
   20a46:	77ca                	c.ldsp	a5,176(sp)
   20a48:	07a1                	c.addi	a5,8
   20a4a:	f93e                	c.sdsp	a5,176(sp)
      break;
   20a4c:	2ab0006f          	jal	zero,214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   20a50:	e466                	c.sdsp	s9,8(sp)
   20a52:	bfe1                	c.j	20a2a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x45e>
      stack.push_back(cur.address());
   20a54:	0888                	c.addi4spn	a0,sp,80
   20a56:	0001a317          	auipc	t1,0x1a
   20a5a:	93a33303          	ld	t1,-1734(t1) # 3a390 <dwarf::cursor::address()@@Base+0x1a800>
   20a5e:	9302                	c.jalr	t1
   20a60:	e42a                	c.sdsp	a0,8(sp)
  size_type size() const { return end - base; }
   20a62:	772a                	c.ldsp	a4,168(sp)
   20a64:	77ca                	c.ldsp	a5,176(sp)
   20a66:	8f99                	c.sub	a5,a4
   20a68:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   20a6a:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   20a6c:	796a                	c.ldsp	s2,184(sp)
   20a6e:	40e90933          	sub	s2,s2,a4
   20a72:	40395913          	srai	s2,s2,0x3
   20a76:	04f97963          	bgeu	s2,a5,20ac8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4fc>
   20a7a:	00091363          	bne	s2,zero,20a80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4b4>
   20a7e:	4905                	c.li	s2,1
    while (target < n)
   20a80:	00f97563          	bgeu	s2,a5,20a8a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4be>
      target <<= 1;
   20a84:	0906                	c.slli	s2,0x1
    while (target < n)
   20a86:	fef96fe3          	bltu	s2,a5,20a84 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4b8>
    char *newbuf = new char[sizeof(T[target])];
   20a8a:	090e                	c.slli	s2,0x3
   20a8c:	854a                	c.mv	a0,s2
   20a8e:	b03f50ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   20a92:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   20a94:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   20a96:	774a                	c.ldsp	a4,176(sp)
   20a98:	04e57063          	bgeu	a0,a4,20ad8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x50c>
    T *src = base, *dest = (T *)newbuf;
   20a9c:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20a9e:	07a1                	c.addi	a5,8
   20aa0:	fee7efe3          	bltu	a5,a4,20a9e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4d2>
   20aa4:	fff70a13          	addi	s4,a4,-1
   20aa8:	40aa0a33          	sub	s4,s4,a0
   20aac:	ff8a7a13          	andi	s4,s4,-8
   20ab0:	0a21                	c.addi	s4,8
   20ab2:	9a66                	c.add	s4,s9
    if ((char *)base != buf)
   20ab4:	10bc                	c.addi4spn	a5,sp,104
   20ab6:	00f50563          	beq	a0,a5,20ac0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4f4>
      delete[] (char *)base;
   20aba:	c119                	c.beqz	a0,20ac0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4f4>
   20abc:	d95f50ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20ac0:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   20ac2:	f952                	c.sdsp	s4,176(sp)
    cap = base + target;
   20ac4:	9cca                	c.add	s9,s2
   20ac6:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   20ac8:	77ca                	c.ldsp	a5,176(sp)
   20aca:	6722                	c.ldsp	a4,8(sp)
   20acc:	e398                	c.sd	a4,0(a5)
    end++;
   20ace:	77ca                	c.ldsp	a5,176(sp)
   20ad0:	07a1                	c.addi	a5,8
   20ad2:	f93e                	c.sdsp	a5,176(sp)
      break;
   20ad4:	2230006f          	jal	zero,214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   20ad8:	8a66                	c.mv	s4,s9
   20ada:	bfe9                	c.j	20ab4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4e8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20adc:	6a9c                	c.ld	a5,16(a3)
   20ade:	00f76563          	bltu	a4,a5,20ae8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x51c>
      underflow();
   20ae2:	0888                	c.addi4spn	a0,sp,80
   20ae4:	beffa0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20ae8:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   20aea:	6746                	c.ldsp	a4,80(sp)
   20aec:	4f58                	c.lw	a4,28(a4)
   20aee:	e319                	c.bnez	a4,20af4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x528>
   20af0:	55a0106f          	jal	zero,2204a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a7e>
        val = (val << 8) | (uint64_t)p[i];
   20af4:	0007cc83          	lbu	s9,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   20af8:	5560106f          	jal	zero,2204e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a82>
    char *newbuf = new char[sizeof(T[target])];
   20afc:	8a2a                	c.mv	s4,a0
    T *src = base, *dest = (T *)newbuf;
   20afe:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   20b00:	774a                	c.ldsp	a4,176(sp)
   20b02:	04e57063          	bgeu	a0,a4,20b42 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x576>
    T *src = base, *dest = (T *)newbuf;
   20b06:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20b08:	07a1                	c.addi	a5,8
   20b0a:	fee7efe3          	bltu	a5,a4,20b08 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x53c>
   20b0e:	fff70793          	addi	a5,a4,-1
   20b12:	8f89                	c.sub	a5,a0
   20b14:	9be1                	c.andi	a5,-8
   20b16:	07a1                	c.addi	a5,8
   20b18:	97d2                	c.add	a5,s4
   20b1a:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20b1c:	10bc                	c.addi4spn	a5,sp,104
   20b1e:	00f50563          	beq	a0,a5,20b28 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x55c>
      delete[] (char *)base;
   20b22:	c119                	c.beqz	a0,20b28 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x55c>
   20b24:	d2df50ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20b28:	f552                	c.sdsp	s4,168(sp)
    end = dest;
   20b2a:	67a2                	c.ldsp	a5,8(sp)
   20b2c:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   20b2e:	9a4a                	c.add	s4,s2
   20b30:	fd52                	c.sdsp	s4,184(sp)
    new (end) T(std::move(x));
   20b32:	77ca                	c.ldsp	a5,176(sp)
   20b34:	0197b023          	sd	s9,0(a5)
    end++;
   20b38:	77ca                	c.ldsp	a5,176(sp)
   20b3a:	07a1                	c.addi	a5,8
   20b3c:	f93e                	c.sdsp	a5,176(sp)
      break;
   20b3e:	1b90006f          	jal	zero,214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   20b42:	e452                	c.sdsp	s4,8(sp)
   20b44:	bfe1                	c.j	20b1c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x550>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20b46:	6a9c                	c.ld	a5,16(a3)
   20b48:	40e78633          	sub	a2,a5,a4
   20b4c:	4685                	c.li	a3,1
   20b4e:	00c6f463          	bgeu	a3,a2,20b56 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x58a>
   20b52:	00f76563          	bltu	a4,a5,20b5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x590>
      underflow();
   20b56:	0888                	c.addi4spn	a0,sp,80
   20b58:	b7bfa0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20b5c:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   20b5e:	6746                	c.ldsp	a4,80(sp)
   20b60:	4f58                	c.lw	a4,28(a4)
   20b62:	e339                	c.bnez	a4,20ba8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5dc>
        val |= ((uint64_t)p[i]) << (i * 8);
   20b64:	0017ca03          	lbu	s4,1(a5)
   20b68:	0a22                	c.slli	s4,0x8
   20b6a:	0007c703          	lbu	a4,0(a5)
   20b6e:	00ea6a33          	or	s4,s4,a4
    pos += sizeof(T);
   20b72:	0789                	c.addi	a5,2
   20b74:	f0be                	c.sdsp	a5,96(sp)
  size_type size() const { return end - base; }
   20b76:	772a                	c.ldsp	a4,168(sp)
   20b78:	77ca                	c.ldsp	a5,176(sp)
   20b7a:	8f99                	c.sub	a5,a4
   20b7c:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   20b7e:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   20b80:	796a                	c.ldsp	s2,184(sp)
   20b82:	40e90933          	sub	s2,s2,a4
   20b86:	40395913          	srai	s2,s2,0x3
   20b8a:	06f97263          	bgeu	s2,a5,20bee <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x622>
   20b8e:	00091363          	bne	s2,zero,20b94 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5c8>
   20b92:	4905                	c.li	s2,1
    while (target < n)
   20b94:	00f97563          	bgeu	s2,a5,20b9e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5d2>
      target <<= 1;
   20b98:	0906                	c.slli	s2,0x1
    while (target < n)
   20b9a:	fef96fe3          	bltu	s2,a5,20b98 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5cc>
    char *newbuf = new char[sizeof(T[target])];
   20b9e:	090e                	c.slli	s2,0x3
   20ba0:	854a                	c.mv	a0,s2
   20ba2:	9eff50ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   20ba6:	a809                	c.j	20bb8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5ec>
        val = (val << 8) | (uint64_t)p[i];
   20ba8:	0007ca03          	lbu	s4,0(a5)
   20bac:	0a22                	c.slli	s4,0x8
   20bae:	0017c703          	lbu	a4,1(a5)
   20bb2:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   20bb6:	bf75                	c.j	20b72 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5a6>
   20bb8:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   20bba:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   20bbc:	774a                	c.ldsp	a4,176(sp)
   20bbe:	04e57063          	bgeu	a0,a4,20bfe <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x632>
    T *src = base, *dest = (T *)newbuf;
   20bc2:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20bc4:	07a1                	c.addi	a5,8
   20bc6:	fee7efe3          	bltu	a5,a4,20bc4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5f8>
   20bca:	fff70793          	addi	a5,a4,-1
   20bce:	8f89                	c.sub	a5,a0
   20bd0:	9be1                	c.andi	a5,-8
   20bd2:	07a1                	c.addi	a5,8
   20bd4:	97e6                	c.add	a5,s9
   20bd6:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20bd8:	10bc                	c.addi4spn	a5,sp,104
   20bda:	00f50563          	beq	a0,a5,20be4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x618>
      delete[] (char *)base;
   20bde:	c119                	c.beqz	a0,20be4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x618>
   20be0:	c71f50ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20be4:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   20be6:	67a2                	c.ldsp	a5,8(sp)
   20be8:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   20bea:	9cca                	c.add	s9,s2
   20bec:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   20bee:	77ca                	c.ldsp	a5,176(sp)
   20bf0:	0147b023          	sd	s4,0(a5)
    end++;
   20bf4:	77ca                	c.ldsp	a5,176(sp)
   20bf6:	07a1                	c.addi	a5,8
   20bf8:	f93e                	c.sdsp	a5,176(sp)
      break;
   20bfa:	0fd0006f          	jal	zero,214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   20bfe:	e466                	c.sdsp	s9,8(sp)
   20c00:	bfe1                	c.j	20bd8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x60c>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20c02:	6a9c                	c.ld	a5,16(a3)
   20c04:	40e78633          	sub	a2,a5,a4
   20c08:	468d                	c.li	a3,3
   20c0a:	00c6f463          	bgeu	a3,a2,20c12 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x646>
   20c0e:	00f76563          	bltu	a4,a5,20c18 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x64c>
      underflow();
   20c12:	0888                	c.addi4spn	a0,sp,80
   20c14:	abffa0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20c18:	7606                	c.ldsp	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   20c1a:	67c6                	c.ldsp	a5,80(sp)
   20c1c:	4fdc                	c.lw	a5,28(a5)
   20c1e:	efa9                	c.bnez	a5,20c78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6ac>
   20c20:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   20c22:	4a01                	c.li	s4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   20c24:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   20c28:	0006c703          	lbu	a4,0(a3)
   20c2c:	00f71733          	sll	a4,a4,a5
   20c30:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   20c34:	0685                	c.addi	a3,1
   20c36:	27a1                	c.addiw	a5,8
   20c38:	feb798e3          	bne	a5,a1,20c28 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x65c>
    pos += sizeof(T);
   20c3c:	0611                	c.addi	a2,4
   20c3e:	f0b2                	c.sdsp	a2,96(sp)
   20c40:	1a02                	c.slli	s4,0x20
   20c42:	020a5a13          	srli	s4,s4,0x20
  size_type size() const { return end - base; }
   20c46:	772a                	c.ldsp	a4,168(sp)
   20c48:	77ca                	c.ldsp	a5,176(sp)
   20c4a:	8f99                	c.sub	a5,a4
   20c4c:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   20c4e:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   20c50:	796a                	c.ldsp	s2,184(sp)
   20c52:	40e90933          	sub	s2,s2,a4
   20c56:	40395913          	srai	s2,s2,0x3
   20c5a:	06f97763          	bgeu	s2,a5,20cc8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6fc>
   20c5e:	00091363          	bne	s2,zero,20c64 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x698>
   20c62:	4905                	c.li	s2,1
    while (target < n)
   20c64:	00f97563          	bgeu	s2,a5,20c6e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6a2>
      target <<= 1;
   20c68:	0906                	c.slli	s2,0x1
    while (target < n)
   20c6a:	fef96fe3          	bltu	s2,a5,20c68 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x69c>
    char *newbuf = new char[sizeof(T[target])];
   20c6e:	090e                	c.slli	s2,0x3
   20c70:	854a                	c.mv	a0,s2
   20c72:	91ff50ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   20c76:	a831                	c.j	20c92 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6c6>
   20c78:	87b2                	c.mv	a5,a2
   20c7a:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   20c7e:	4a01                	c.li	s4,0
        val = (val << 8) | (uint64_t)p[i];
   20c80:	0a22                	c.slli	s4,0x8
   20c82:	0007c703          	lbu	a4,0(a5)
   20c86:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   20c8a:	0785                	c.addi	a5,1
   20c8c:	fef69ae3          	bne	a3,a5,20c80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6b4>
   20c90:	b775                	c.j	20c3c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x670>
   20c92:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   20c94:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   20c96:	774a                	c.ldsp	a4,176(sp)
   20c98:	04e57063          	bgeu	a0,a4,20cd8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x70c>
    T *src = base, *dest = (T *)newbuf;
   20c9c:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20c9e:	07a1                	c.addi	a5,8
   20ca0:	fee7efe3          	bltu	a5,a4,20c9e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6d2>
   20ca4:	fff70793          	addi	a5,a4,-1
   20ca8:	8f89                	c.sub	a5,a0
   20caa:	9be1                	c.andi	a5,-8
   20cac:	07a1                	c.addi	a5,8
   20cae:	97e6                	c.add	a5,s9
   20cb0:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20cb2:	10bc                	c.addi4spn	a5,sp,104
   20cb4:	00f50563          	beq	a0,a5,20cbe <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6f2>
      delete[] (char *)base;
   20cb8:	c119                	c.beqz	a0,20cbe <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6f2>
   20cba:	b97f50ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20cbe:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   20cc0:	67a2                	c.ldsp	a5,8(sp)
   20cc2:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   20cc4:	9cca                	c.add	s9,s2
   20cc6:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   20cc8:	77ca                	c.ldsp	a5,176(sp)
   20cca:	0147b023          	sd	s4,0(a5)
    end++;
   20cce:	77ca                	c.ldsp	a5,176(sp)
   20cd0:	07a1                	c.addi	a5,8
   20cd2:	f93e                	c.sdsp	a5,176(sp)
      break;
   20cd4:	0230006f          	jal	zero,214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   20cd8:	e466                	c.sdsp	s9,8(sp)
   20cda:	bfe1                	c.j	20cb2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6e6>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20cdc:	6a9c                	c.ld	a5,16(a3)
   20cde:	40e78633          	sub	a2,a5,a4
   20ce2:	469d                	c.li	a3,7
   20ce4:	00c6f463          	bgeu	a3,a2,20cec <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x720>
   20ce8:	00f76563          	bltu	a4,a5,20cf2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x726>
      underflow();
   20cec:	0888                	c.addi4spn	a0,sp,80
   20cee:	9e5fa0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20cf2:	7606                	c.ldsp	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   20cf4:	67c6                	c.ldsp	a5,80(sp)
   20cf6:	4fdc                	c.lw	a5,28(a5)
   20cf8:	ebb1                	c.bnez	a5,20d4c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x780>
   20cfa:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   20cfc:	4a01                	c.li	s4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   20cfe:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   20d02:	0006c703          	lbu	a4,0(a3)
   20d06:	00f71733          	sll	a4,a4,a5
   20d0a:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   20d0e:	0685                	c.addi	a3,1
   20d10:	27a1                	c.addiw	a5,8
   20d12:	feb798e3          	bne	a5,a1,20d02 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x736>
    pos += sizeof(T);
   20d16:	0621                	c.addi	a2,8
   20d18:	f0b2                	c.sdsp	a2,96(sp)
  size_type size() const { return end - base; }
   20d1a:	772a                	c.ldsp	a4,168(sp)
   20d1c:	77ca                	c.ldsp	a5,176(sp)
   20d1e:	8f99                	c.sub	a5,a4
   20d20:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   20d22:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   20d24:	796a                	c.ldsp	s2,184(sp)
   20d26:	40e90933          	sub	s2,s2,a4
   20d2a:	40395913          	srai	s2,s2,0x3
   20d2e:	06f97763          	bgeu	s2,a5,20d9c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7d0>
   20d32:	00091363          	bne	s2,zero,20d38 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x76c>
   20d36:	4905                	c.li	s2,1
    while (target < n)
   20d38:	00f97563          	bgeu	s2,a5,20d42 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x776>
      target <<= 1;
   20d3c:	0906                	c.slli	s2,0x1
    while (target < n)
   20d3e:	fef96fe3          	bltu	s2,a5,20d3c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x770>
    char *newbuf = new char[sizeof(T[target])];
   20d42:	090e                	c.slli	s2,0x3
   20d44:	854a                	c.mv	a0,s2
   20d46:	84bf50ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   20d4a:	a831                	c.j	20d66 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x79a>
   20d4c:	87b2                	c.mv	a5,a2
   20d4e:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   20d52:	4a01                	c.li	s4,0
        val = (val << 8) | (uint64_t)p[i];
   20d54:	0a22                	c.slli	s4,0x8
   20d56:	0007c703          	lbu	a4,0(a5)
   20d5a:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   20d5e:	0785                	c.addi	a5,1
   20d60:	fed79ae3          	bne	a5,a3,20d54 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x788>
   20d64:	bf4d                	c.j	20d16 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x74a>
   20d66:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   20d68:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   20d6a:	774a                	c.ldsp	a4,176(sp)
   20d6c:	02e57f63          	bgeu	a0,a4,20daa <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7de>
    T *src = base, *dest = (T *)newbuf;
   20d70:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20d72:	07a1                	c.addi	a5,8
   20d74:	fee7efe3          	bltu	a5,a4,20d72 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7a6>
   20d78:	fff70793          	addi	a5,a4,-1
   20d7c:	8f89                	c.sub	a5,a0
   20d7e:	9be1                	c.andi	a5,-8
   20d80:	07a1                	c.addi	a5,8
   20d82:	97e6                	c.add	a5,s9
   20d84:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20d86:	10bc                	c.addi4spn	a5,sp,104
   20d88:	00f50563          	beq	a0,a5,20d92 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7c6>
      delete[] (char *)base;
   20d8c:	c119                	c.beqz	a0,20d92 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7c6>
   20d8e:	ac3f50ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20d92:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   20d94:	67a2                	c.ldsp	a5,8(sp)
   20d96:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   20d98:	9cca                	c.add	s9,s2
   20d9a:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   20d9c:	77ca                	c.ldsp	a5,176(sp)
   20d9e:	0147b023          	sd	s4,0(a5)
    end++;
   20da2:	77ca                	c.ldsp	a5,176(sp)
   20da4:	07a1                	c.addi	a5,8
   20da6:	f93e                	c.sdsp	a5,176(sp)
      break;
   20da8:	a7b9                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   20daa:	e466                	c.sdsp	s9,8(sp)
   20dac:	bfe9                	c.j	20d86 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7ba>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20dae:	6a9c                	c.ld	a5,16(a3)
   20db0:	00f76563          	bltu	a4,a5,20dba <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7ee>
      underflow();
   20db4:	0888                	c.addi4spn	a0,sp,80
   20db6:	91dfa0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20dba:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   20dbc:	6746                	c.ldsp	a4,80(sp)
   20dbe:	4f58                	c.lw	a4,28(a4)
   20dc0:	e319                	c.bnez	a4,20dc6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7fa>
   20dc2:	2c80106f          	jal	zero,2208a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1abe>
        val = (val << 8) | (uint64_t)p[i];
   20dc6:	0007cc83          	lbu	s9,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   20dca:	2c40106f          	jal	zero,2208e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ac2>
    char *newbuf = new char[sizeof(T[target])];
   20dce:	8a2a                	c.mv	s4,a0
    T *src = base, *dest = (T *)newbuf;
   20dd0:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   20dd2:	774a                	c.ldsp	a4,176(sp)
   20dd4:	02e57f63          	bgeu	a0,a4,20e12 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x846>
    T *src = base, *dest = (T *)newbuf;
   20dd8:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20dda:	07a1                	c.addi	a5,8
   20ddc:	fee7efe3          	bltu	a5,a4,20dda <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x80e>
   20de0:	fff70793          	addi	a5,a4,-1
   20de4:	8f89                	c.sub	a5,a0
   20de6:	9be1                	c.andi	a5,-8
   20de8:	07a1                	c.addi	a5,8
   20dea:	97d2                	c.add	a5,s4
   20dec:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20dee:	10bc                	c.addi4spn	a5,sp,104
   20df0:	00f50563          	beq	a0,a5,20dfa <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x82e>
      delete[] (char *)base;
   20df4:	c119                	c.beqz	a0,20dfa <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x82e>
   20df6:	a5bf50ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20dfa:	f552                	c.sdsp	s4,168(sp)
    end = dest;
   20dfc:	67a2                	c.ldsp	a5,8(sp)
   20dfe:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   20e00:	9a4a                	c.add	s4,s2
   20e02:	fd52                	c.sdsp	s4,184(sp)
    new (end) T(std::move(x));
   20e04:	77ca                	c.ldsp	a5,176(sp)
   20e06:	0197b023          	sd	s9,0(a5)
    end++;
   20e0a:	77ca                	c.ldsp	a5,176(sp)
   20e0c:	07a1                	c.addi	a5,8
   20e0e:	f93e                	c.sdsp	a5,176(sp)
      break;
   20e10:	a5dd                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   20e12:	e452                	c.sdsp	s4,8(sp)
   20e14:	bfe9                	c.j	20dee <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x822>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20e16:	6a9c                	c.ld	a5,16(a3)
   20e18:	40e78633          	sub	a2,a5,a4
   20e1c:	4685                	c.li	a3,1
   20e1e:	00c6f463          	bgeu	a3,a2,20e26 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x85a>
   20e22:	00f76563          	bltu	a4,a5,20e2c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x860>
      underflow();
   20e26:	0888                	c.addi4spn	a0,sp,80
   20e28:	8abfa0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20e2c:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   20e2e:	6746                	c.ldsp	a4,80(sp)
   20e30:	4f58                	c.lw	a4,28(a4)
   20e32:	e739                	c.bnez	a4,20e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8b4>
        val |= ((uint64_t)p[i]) << (i * 8);
   20e34:	0017ca03          	lbu	s4,1(a5)
   20e38:	0a22                	c.slli	s4,0x8
   20e3a:	0007c703          	lbu	a4,0(a5)
   20e3e:	00ea6a33          	or	s4,s4,a4
    pos += sizeof(T);
   20e42:	0789                	c.addi	a5,2
   20e44:	f0be                	c.sdsp	a5,96(sp)
      stack.push_back(cur.fixed<int16_t>());
   20e46:	010a1a1b          	slliw	s4,s4,0x10
   20e4a:	410a5a1b          	sraiw	s4,s4,0x10
  size_type size() const { return end - base; }
   20e4e:	772a                	c.ldsp	a4,168(sp)
   20e50:	77ca                	c.ldsp	a5,176(sp)
   20e52:	8f99                	c.sub	a5,a4
   20e54:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   20e56:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   20e58:	796a                	c.ldsp	s2,184(sp)
   20e5a:	40e90933          	sub	s2,s2,a4
   20e5e:	40395913          	srai	s2,s2,0x3
   20e62:	06f97263          	bgeu	s2,a5,20ec6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8fa>
   20e66:	00091363          	bne	s2,zero,20e6c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8a0>
   20e6a:	4905                	c.li	s2,1
    while (target < n)
   20e6c:	00f97563          	bgeu	s2,a5,20e76 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8aa>
      target <<= 1;
   20e70:	0906                	c.slli	s2,0x1
    while (target < n)
   20e72:	fef96fe3          	bltu	s2,a5,20e70 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8a4>
    char *newbuf = new char[sizeof(T[target])];
   20e76:	090e                	c.slli	s2,0x3
   20e78:	854a                	c.mv	a0,s2
   20e7a:	f16f50ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   20e7e:	a809                	c.j	20e90 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8c4>
        val = (val << 8) | (uint64_t)p[i];
   20e80:	0007ca03          	lbu	s4,0(a5)
   20e84:	0a22                	c.slli	s4,0x8
   20e86:	0017c703          	lbu	a4,1(a5)
   20e8a:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   20e8e:	bf55                	c.j	20e42 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x876>
   20e90:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   20e92:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   20e94:	774a                	c.ldsp	a4,176(sp)
   20e96:	02e57f63          	bgeu	a0,a4,20ed4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x908>
    T *src = base, *dest = (T *)newbuf;
   20e9a:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20e9c:	07a1                	c.addi	a5,8
   20e9e:	fee7efe3          	bltu	a5,a4,20e9c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8d0>
   20ea2:	fff70793          	addi	a5,a4,-1
   20ea6:	8f89                	c.sub	a5,a0
   20ea8:	9be1                	c.andi	a5,-8
   20eaa:	07a1                	c.addi	a5,8
   20eac:	97e6                	c.add	a5,s9
   20eae:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20eb0:	10bc                	c.addi4spn	a5,sp,104
   20eb2:	00f50563          	beq	a0,a5,20ebc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8f0>
      delete[] (char *)base;
   20eb6:	c119                	c.beqz	a0,20ebc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8f0>
   20eb8:	999f50ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20ebc:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   20ebe:	67a2                	c.ldsp	a5,8(sp)
   20ec0:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   20ec2:	9cca                	c.add	s9,s2
   20ec4:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   20ec6:	77ca                	c.ldsp	a5,176(sp)
   20ec8:	0147b023          	sd	s4,0(a5)
    end++;
   20ecc:	77ca                	c.ldsp	a5,176(sp)
   20ece:	07a1                	c.addi	a5,8
   20ed0:	f93e                	c.sdsp	a5,176(sp)
      break;
   20ed2:	a515                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   20ed4:	e466                	c.sdsp	s9,8(sp)
   20ed6:	bfe9                	c.j	20eb0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8e4>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20ed8:	6a9c                	c.ld	a5,16(a3)
   20eda:	40e78633          	sub	a2,a5,a4
   20ede:	468d                	c.li	a3,3
   20ee0:	00c6f463          	bgeu	a3,a2,20ee8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x91c>
   20ee4:	00f76563          	bltu	a4,a5,20eee <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x922>
      underflow();
   20ee8:	0888                	c.addi4spn	a0,sp,80
   20eea:	fe8fa0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20eee:	7606                	c.ldsp	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   20ef0:	67c6                	c.ldsp	a5,80(sp)
   20ef2:	4fdc                	c.lw	a5,28(a5)
   20ef4:	ebb9                	c.bnez	a5,20f4a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x97e>
   20ef6:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   20ef8:	4a01                	c.li	s4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   20efa:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   20efe:	0006c703          	lbu	a4,0(a3)
   20f02:	00f71733          	sll	a4,a4,a5
   20f06:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   20f0a:	0685                	c.addi	a3,1
   20f0c:	27a1                	c.addiw	a5,8
   20f0e:	feb798e3          	bne	a5,a1,20efe <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x932>
    pos += sizeof(T);
   20f12:	0611                	c.addi	a2,4
   20f14:	f0b2                	c.sdsp	a2,96(sp)
      stack.push_back(cur.fixed<int32_t>());
   20f16:	2a01                	c.addiw	s4,0
  size_type size() const { return end - base; }
   20f18:	772a                	c.ldsp	a4,168(sp)
   20f1a:	77ca                	c.ldsp	a5,176(sp)
   20f1c:	8f99                	c.sub	a5,a4
   20f1e:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   20f20:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   20f22:	796a                	c.ldsp	s2,184(sp)
   20f24:	40e90933          	sub	s2,s2,a4
   20f28:	40395913          	srai	s2,s2,0x3
   20f2c:	06f97763          	bgeu	s2,a5,20f9a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9ce>
   20f30:	00091363          	bne	s2,zero,20f36 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x96a>
   20f34:	4905                	c.li	s2,1
    while (target < n)
   20f36:	00f97563          	bgeu	s2,a5,20f40 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x974>
      target <<= 1;
   20f3a:	0906                	c.slli	s2,0x1
    while (target < n)
   20f3c:	fef96fe3          	bltu	s2,a5,20f3a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x96e>
    char *newbuf = new char[sizeof(T[target])];
   20f40:	090e                	c.slli	s2,0x3
   20f42:	854a                	c.mv	a0,s2
   20f44:	e4cf50ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   20f48:	a831                	c.j	20f64 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x998>
   20f4a:	87b2                	c.mv	a5,a2
   20f4c:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   20f50:	4a01                	c.li	s4,0
        val = (val << 8) | (uint64_t)p[i];
   20f52:	0a22                	c.slli	s4,0x8
   20f54:	0007c703          	lbu	a4,0(a5)
   20f58:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   20f5c:	0785                	c.addi	a5,1
   20f5e:	fef69ae3          	bne	a3,a5,20f52 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x986>
   20f62:	bf45                	c.j	20f12 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x946>
   20f64:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   20f66:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   20f68:	774a                	c.ldsp	a4,176(sp)
   20f6a:	02e57f63          	bgeu	a0,a4,20fa8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9dc>
    T *src = base, *dest = (T *)newbuf;
   20f6e:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20f70:	07a1                	c.addi	a5,8
   20f72:	fee7efe3          	bltu	a5,a4,20f70 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9a4>
   20f76:	fff70793          	addi	a5,a4,-1
   20f7a:	8f89                	c.sub	a5,a0
   20f7c:	9be1                	c.andi	a5,-8
   20f7e:	07a1                	c.addi	a5,8
   20f80:	97e6                	c.add	a5,s9
   20f82:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20f84:	10bc                	c.addi4spn	a5,sp,104
   20f86:	00f50563          	beq	a0,a5,20f90 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9c4>
      delete[] (char *)base;
   20f8a:	c119                	c.beqz	a0,20f90 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9c4>
   20f8c:	8c5f50ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20f90:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   20f92:	67a2                	c.ldsp	a5,8(sp)
   20f94:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   20f96:	9cca                	c.add	s9,s2
   20f98:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   20f9a:	77ca                	c.ldsp	a5,176(sp)
   20f9c:	0147b023          	sd	s4,0(a5)
    end++;
   20fa0:	77ca                	c.ldsp	a5,176(sp)
   20fa2:	07a1                	c.addi	a5,8
   20fa4:	f93e                	c.sdsp	a5,176(sp)
      break;
   20fa6:	ab81                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   20fa8:	e466                	c.sdsp	s9,8(sp)
   20faa:	bfe9                	c.j	20f84 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9b8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20fac:	6a9c                	c.ld	a5,16(a3)
   20fae:	40e78633          	sub	a2,a5,a4
   20fb2:	469d                	c.li	a3,7
   20fb4:	00c6f463          	bgeu	a3,a2,20fbc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9f0>
   20fb8:	00f76563          	bltu	a4,a5,20fc2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9f6>
      underflow();
   20fbc:	0888                	c.addi4spn	a0,sp,80
   20fbe:	f14fa0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20fc2:	7606                	c.ldsp	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   20fc4:	67c6                	c.ldsp	a5,80(sp)
   20fc6:	4fdc                	c.lw	a5,28(a5)
   20fc8:	ebb1                	c.bnez	a5,2101c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa50>
   20fca:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   20fcc:	4a01                	c.li	s4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   20fce:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   20fd2:	0006c703          	lbu	a4,0(a3)
   20fd6:	00f71733          	sll	a4,a4,a5
   20fda:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   20fde:	0685                	c.addi	a3,1
   20fe0:	27a1                	c.addiw	a5,8
   20fe2:	feb798e3          	bne	a5,a1,20fd2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa06>
    pos += sizeof(T);
   20fe6:	0621                	c.addi	a2,8
   20fe8:	f0b2                	c.sdsp	a2,96(sp)
  size_type size() const { return end - base; }
   20fea:	772a                	c.ldsp	a4,168(sp)
   20fec:	77ca                	c.ldsp	a5,176(sp)
   20fee:	8f99                	c.sub	a5,a4
   20ff0:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   20ff2:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   20ff4:	796a                	c.ldsp	s2,184(sp)
   20ff6:	40e90933          	sub	s2,s2,a4
   20ffa:	40395913          	srai	s2,s2,0x3
   20ffe:	06f97763          	bgeu	s2,a5,2106c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xaa0>
   21002:	00091363          	bne	s2,zero,21008 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa3c>
   21006:	4905                	c.li	s2,1
    while (target < n)
   21008:	00f97563          	bgeu	s2,a5,21012 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa46>
      target <<= 1;
   2100c:	0906                	c.slli	s2,0x1
    while (target < n)
   2100e:	fef96fe3          	bltu	s2,a5,2100c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa40>
    char *newbuf = new char[sizeof(T[target])];
   21012:	090e                	c.slli	s2,0x3
   21014:	854a                	c.mv	a0,s2
   21016:	d7af50ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   2101a:	a831                	c.j	21036 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa6a>
   2101c:	87b2                	c.mv	a5,a2
   2101e:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   21022:	4a01                	c.li	s4,0
        val = (val << 8) | (uint64_t)p[i];
   21024:	0a22                	c.slli	s4,0x8
   21026:	0007c703          	lbu	a4,0(a5)
   2102a:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   2102e:	0785                	c.addi	a5,1
   21030:	fed79ae3          	bne	a5,a3,21024 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa58>
   21034:	bf4d                	c.j	20fe6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa1a>
   21036:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   21038:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   2103a:	774a                	c.ldsp	a4,176(sp)
   2103c:	02e57f63          	bgeu	a0,a4,2107a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xaae>
    T *src = base, *dest = (T *)newbuf;
   21040:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   21042:	07a1                	c.addi	a5,8
   21044:	fee7efe3          	bltu	a5,a4,21042 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa76>
   21048:	fff70793          	addi	a5,a4,-1
   2104c:	8f89                	c.sub	a5,a0
   2104e:	9be1                	c.andi	a5,-8
   21050:	07a1                	c.addi	a5,8
   21052:	97e6                	c.add	a5,s9
   21054:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   21056:	10bc                	c.addi4spn	a5,sp,104
   21058:	00f50563          	beq	a0,a5,21062 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa96>
      delete[] (char *)base;
   2105c:	c119                	c.beqz	a0,21062 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa96>
   2105e:	ff2f50ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   21062:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   21064:	67a2                	c.ldsp	a5,8(sp)
   21066:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   21068:	9cca                	c.add	s9,s2
   2106a:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   2106c:	77ca                	c.ldsp	a5,176(sp)
   2106e:	0147b023          	sd	s4,0(a5)
    end++;
   21072:	77ca                	c.ldsp	a5,176(sp)
   21074:	07a1                	c.addi	a5,8
   21076:	f93e                	c.sdsp	a5,176(sp)
      break;
   21078:	a9bd                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   2107a:	e466                	c.sdsp	s9,8(sp)
   2107c:	bfe9                	c.j	21056 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa8a>
    return 0;
   2107e:	4a01                	c.li	s4,0
  size_type size() const { return end - base; }
   21080:	772a                	c.ldsp	a4,168(sp)
   21082:	77ca                	c.ldsp	a5,176(sp)
   21084:	8f99                	c.sub	a5,a4
   21086:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   21088:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   2108a:	796a                	c.ldsp	s2,184(sp)
   2108c:	40e90933          	sub	s2,s2,a4
   21090:	40395913          	srai	s2,s2,0x3
   21094:	04f97963          	bgeu	s2,a5,210e6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb1a>
   21098:	00091363          	bne	s2,zero,2109e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xad2>
   2109c:	4905                	c.li	s2,1
    while (target < n)
   2109e:	00f97563          	bgeu	s2,a5,210a8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xadc>
      target <<= 1;
   210a2:	0906                	c.slli	s2,0x1
    while (target < n)
   210a4:	fef96fe3          	bltu	s2,a5,210a2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xad6>
    char *newbuf = new char[sizeof(T[target])];
   210a8:	090e                	c.slli	s2,0x3
   210aa:	854a                	c.mv	a0,s2
   210ac:	ce4f50ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   210b0:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   210b2:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   210b4:	774a                	c.ldsp	a4,176(sp)
   210b6:	02e57f63          	bgeu	a0,a4,210f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb28>
    T *src = base, *dest = (T *)newbuf;
   210ba:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   210bc:	07a1                	c.addi	a5,8
   210be:	fee7efe3          	bltu	a5,a4,210bc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xaf0>
   210c2:	fff70793          	addi	a5,a4,-1
   210c6:	8f89                	c.sub	a5,a0
   210c8:	9be1                	c.andi	a5,-8
   210ca:	07a1                	c.addi	a5,8
   210cc:	97e6                	c.add	a5,s9
   210ce:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   210d0:	10bc                	c.addi4spn	a5,sp,104
   210d2:	00f50563          	beq	a0,a5,210dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb10>
      delete[] (char *)base;
   210d6:	c119                	c.beqz	a0,210dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb10>
   210d8:	f78f50ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   210dc:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   210de:	67a2                	c.ldsp	a5,8(sp)
   210e0:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   210e2:	9cca                	c.add	s9,s2
   210e4:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   210e6:	77ca                	c.ldsp	a5,176(sp)
   210e8:	0147b023          	sd	s4,0(a5)
    end++;
   210ec:	77ca                	c.ldsp	a5,176(sp)
   210ee:	07a1                	c.addi	a5,8
   210f0:	f93e                	c.sdsp	a5,176(sp)
      break;
   210f2:	a111                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   210f4:	e466                	c.sdsp	s9,8(sp)
   210f6:	bfe9                	c.j	210d0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb04>
      stack.push_back(cur.sleb128());
   210f8:	0888                	c.addi4spn	a0,sp,80
   210fa:	e18fa0ef          	jal	ra,1b712 <dwarf::cursor::sleb128()>
   210fe:	e42a                	c.sdsp	a0,8(sp)
  size_type size() const { return end - base; }
   21100:	772a                	c.ldsp	a4,168(sp)
   21102:	77ca                	c.ldsp	a5,176(sp)
   21104:	8f99                	c.sub	a5,a4
   21106:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   21108:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   2110a:	796a                	c.ldsp	s2,184(sp)
   2110c:	40e90933          	sub	s2,s2,a4
   21110:	40395913          	srai	s2,s2,0x3
   21114:	04f97963          	bgeu	s2,a5,21166 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb9a>
   21118:	00091363          	bne	s2,zero,2111e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb52>
   2111c:	4905                	c.li	s2,1
    while (target < n)
   2111e:	00f97563          	bgeu	s2,a5,21128 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb5c>
      target <<= 1;
   21122:	0906                	c.slli	s2,0x1
    while (target < n)
   21124:	fef96fe3          	bltu	s2,a5,21122 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb56>
    char *newbuf = new char[sizeof(T[target])];
   21128:	090e                	c.slli	s2,0x3
   2112a:	854a                	c.mv	a0,s2
   2112c:	c64f50ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   21130:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   21132:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   21134:	774a                	c.ldsp	a4,176(sp)
   21136:	02e57f63          	bgeu	a0,a4,21174 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xba8>
    T *src = base, *dest = (T *)newbuf;
   2113a:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   2113c:	07a1                	c.addi	a5,8
   2113e:	fee7efe3          	bltu	a5,a4,2113c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb70>
   21142:	fff70a13          	addi	s4,a4,-1
   21146:	40aa0a33          	sub	s4,s4,a0
   2114a:	ff8a7a13          	andi	s4,s4,-8
   2114e:	0a21                	c.addi	s4,8
   21150:	9a66                	c.add	s4,s9
    if ((char *)base != buf)
   21152:	10bc                	c.addi4spn	a5,sp,104
   21154:	00f50563          	beq	a0,a5,2115e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb92>
      delete[] (char *)base;
   21158:	c119                	c.beqz	a0,2115e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb92>
   2115a:	ef6f50ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   2115e:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   21160:	f952                	c.sdsp	s4,176(sp)
    cap = base + target;
   21162:	9cca                	c.add	s9,s2
   21164:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   21166:	77ca                	c.ldsp	a5,176(sp)
   21168:	6722                	c.ldsp	a4,8(sp)
   2116a:	e398                	c.sd	a4,0(a5)
    end++;
   2116c:	77ca                	c.ldsp	a5,176(sp)
   2116e:	07a1                	c.addi	a5,8
   21170:	f93e                	c.sdsp	a5,176(sp)
      break;
   21172:	a651                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   21174:	8a66                	c.mv	s4,s9
   21176:	bff1                	c.j	21152 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb86>
      throw runtime_error("DW_OP_fbreg not implemented");
   21178:	4541                	c.li	a0,16
   2117a:	d16f50ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2117e:	892a                	c.mv	s2,a0
   21180:	0000d597          	auipc	a1,0xd
   21184:	63858593          	addi	a1,a1,1592 # 2e7b8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x2c0>
   21188:	cd8f50ef          	jal	ra,16660 <std::runtime_error::runtime_error(char const*)@plt>
   2118c:	00019617          	auipc	a2,0x19
   21190:	29463603          	ld	a2,660(a2) # 3a420 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   21194:	00019597          	auipc	a1,0x19
   21198:	47c5b583          	ld	a1,1148(a1) # 3a610 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   2119c:	854a                	c.mv	a0,s2
   2119e:	fc2f50ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   211a2:	842a                	c.mv	s0,a0
   211a4:	5710006f          	jal	zero,21f14 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      tmp1.u = (unsigned)op - (unsigned)DW_OP::breg0;
   211a8:	f909091b          	addiw	s2,s2,-112
      tmp2.s = cur.sleb128();
   211ac:	0888                	c.addi4spn	a0,sp,80
   211ae:	d64fa0ef          	jal	ra,1b712 <dwarf::cursor::sleb128()>
   211b2:	8caa                	c.mv	s9,a0
      stack.push_back((int64_t)ctx->reg(tmp1.u) + tmp2.s);
   211b4:	000b3783          	ld	a5,0(s6)
   211b8:	6b9c                	c.ld	a5,16(a5)
   211ba:	85ca                	c.mv	a1,s2
   211bc:	855a                	c.mv	a0,s6
   211be:	9782                	c.jalr	a5
   211c0:	9caa                	c.add	s9,a0
  size_type size() const { return end - base; }
   211c2:	772a                	c.ldsp	a4,168(sp)
   211c4:	77ca                	c.ldsp	a5,176(sp)
   211c6:	8f99                	c.sub	a5,a4
   211c8:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   211ca:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   211cc:	796a                	c.ldsp	s2,184(sp)
   211ce:	40e90933          	sub	s2,s2,a4
   211d2:	40395913          	srai	s2,s2,0x3
   211d6:	04f97963          	bgeu	s2,a5,21228 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc5c>
   211da:	00091363          	bne	s2,zero,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc14>
   211de:	4905                	c.li	s2,1
    while (target < n)
   211e0:	00f97563          	bgeu	s2,a5,211ea <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc1e>
      target <<= 1;
   211e4:	0906                	c.slli	s2,0x1
    while (target < n)
   211e6:	fef96fe3          	bltu	s2,a5,211e4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc18>
    char *newbuf = new char[sizeof(T[target])];
   211ea:	090e                	c.slli	s2,0x3
   211ec:	854a                	c.mv	a0,s2
   211ee:	ba2f50ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   211f2:	8a2a                	c.mv	s4,a0
    T *src = base, *dest = (T *)newbuf;
   211f4:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   211f6:	774a                	c.ldsp	a4,176(sp)
   211f8:	02e57f63          	bgeu	a0,a4,21236 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc6a>
    T *src = base, *dest = (T *)newbuf;
   211fc:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   211fe:	07a1                	c.addi	a5,8
   21200:	fee7efe3          	bltu	a5,a4,211fe <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc32>
   21204:	fff70793          	addi	a5,a4,-1
   21208:	8f89                	c.sub	a5,a0
   2120a:	9be1                	c.andi	a5,-8
   2120c:	07a1                	c.addi	a5,8
   2120e:	97d2                	c.add	a5,s4
   21210:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   21212:	10bc                	c.addi4spn	a5,sp,104
   21214:	00f50563          	beq	a0,a5,2121e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc52>
      delete[] (char *)base;
   21218:	c119                	c.beqz	a0,2121e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc52>
   2121a:	e36f50ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   2121e:	f552                	c.sdsp	s4,168(sp)
    end = dest;
   21220:	67a2                	c.ldsp	a5,8(sp)
   21222:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   21224:	9a4a                	c.add	s4,s2
   21226:	fd52                	c.sdsp	s4,184(sp)
    new (end) T(std::move(x));
   21228:	77ca                	c.ldsp	a5,176(sp)
   2122a:	0197b023          	sd	s9,0(a5)
    end++;
   2122e:	77ca                	c.ldsp	a5,176(sp)
   21230:	07a1                	c.addi	a5,8
   21232:	f93e                	c.sdsp	a5,176(sp)
      break;
   21234:	a4c9                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   21236:	e452                	c.sdsp	s4,8(sp)
   21238:	bfe9                	c.j	21212 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc46>
   2123a:	4901                	c.li	s2,0
      tmp2.s = cur.sleb128();
   2123c:	0888                	c.addi4spn	a0,sp,80
   2123e:	cd4fa0ef          	jal	ra,1b712 <dwarf::cursor::sleb128()>
   21242:	8caa                	c.mv	s9,a0
      stack.push_back((int64_t)ctx->reg(tmp1.u) + tmp2.s);
   21244:	000b3783          	ld	a5,0(s6)
   21248:	6b9c                	c.ld	a5,16(a5)
   2124a:	0009059b          	addiw	a1,s2,0
   2124e:	855a                	c.mv	a0,s6
   21250:	9782                	c.jalr	a5
   21252:	9caa                	c.add	s9,a0
  size_type size() const { return end - base; }
   21254:	772a                	c.ldsp	a4,168(sp)
   21256:	77ca                	c.ldsp	a5,176(sp)
   21258:	8f99                	c.sub	a5,a4
   2125a:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   2125c:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   2125e:	796a                	c.ldsp	s2,184(sp)
   21260:	40e90933          	sub	s2,s2,a4
   21264:	40395913          	srai	s2,s2,0x3
   21268:	04f97963          	bgeu	s2,a5,212ba <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcee>
   2126c:	00091363          	bne	s2,zero,21272 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xca6>
   21270:	4905                	c.li	s2,1
    while (target < n)
   21272:	00f97563          	bgeu	s2,a5,2127c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcb0>
      target <<= 1;
   21276:	0906                	c.slli	s2,0x1
    while (target < n)
   21278:	fef96fe3          	bltu	s2,a5,21276 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcaa>
    char *newbuf = new char[sizeof(T[target])];
   2127c:	090e                	c.slli	s2,0x3
   2127e:	854a                	c.mv	a0,s2
   21280:	b10f50ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   21284:	8a2a                	c.mv	s4,a0
    T *src = base, *dest = (T *)newbuf;
   21286:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   21288:	774a                	c.ldsp	a4,176(sp)
   2128a:	02e57f63          	bgeu	a0,a4,212c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcfc>
    T *src = base, *dest = (T *)newbuf;
   2128e:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   21290:	07a1                	c.addi	a5,8
   21292:	fee7efe3          	bltu	a5,a4,21290 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcc4>
   21296:	fff70793          	addi	a5,a4,-1
   2129a:	8f89                	c.sub	a5,a0
   2129c:	9be1                	c.andi	a5,-8
   2129e:	07a1                	c.addi	a5,8
   212a0:	97d2                	c.add	a5,s4
   212a2:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   212a4:	10bc                	c.addi4spn	a5,sp,104
   212a6:	00f50563          	beq	a0,a5,212b0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xce4>
      delete[] (char *)base;
   212aa:	c119                	c.beqz	a0,212b0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xce4>
   212ac:	da4f50ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   212b0:	f552                	c.sdsp	s4,168(sp)
    end = dest;
   212b2:	67a2                	c.ldsp	a5,8(sp)
   212b4:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   212b6:	9a4a                	c.add	s4,s2
   212b8:	fd52                	c.sdsp	s4,184(sp)
    new (end) T(std::move(x));
   212ba:	77ca                	c.ldsp	a5,176(sp)
   212bc:	0197b023          	sd	s9,0(a5)
    end++;
   212c0:	77ca                	c.ldsp	a5,176(sp)
   212c2:	07a1                	c.addi	a5,8
   212c4:	f93e                	c.sdsp	a5,176(sp)
      break;
   212c6:	ac05                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   212c8:	e452                	c.sdsp	s4,8(sp)
   212ca:	bfe9                	c.j	212a4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcd8>
  bool empty() const { return base == end; }
   212cc:	772a                	c.ldsp	a4,168(sp)
   212ce:	7cca                	c.ldsp	s9,176(sp)
      CHECK();
   212d0:	2aec85e3          	beq	s9,a4,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
  size_type size() const { return end - base; }
   212d4:	40ec87b3          	sub	a5,s9,a4
   212d8:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   212da:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   212dc:	796a                	c.ldsp	s2,184(sp)
   212de:	40e90933          	sub	s2,s2,a4
   212e2:	40395913          	srai	s2,s2,0x3
   212e6:	04f97963          	bgeu	s2,a5,21338 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd6c>
   212ea:	00091363          	bne	s2,zero,212f0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd24>
   212ee:	4905                	c.li	s2,1
    while (target < n)
   212f0:	00f97563          	bgeu	s2,a5,212fa <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd2e>
      target <<= 1;
   212f4:	0906                	c.slli	s2,0x1
    while (target < n)
   212f6:	fef96fe3          	bltu	s2,a5,212f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd28>
    char *newbuf = new char[sizeof(T[target])];
   212fa:	090e                	c.slli	s2,0x3
   212fc:	854a                	c.mv	a0,s2
   212fe:	a92f50ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   21302:	8a2a                	c.mv	s4,a0
    T *src = base, *dest = (T *)newbuf;
   21304:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   21306:	774a                	c.ldsp	a4,176(sp)
   21308:	04e57063          	bgeu	a0,a4,21348 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd7c>
    T *src = base, *dest = (T *)newbuf;
   2130c:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   2130e:	07a1                	c.addi	a5,8
   21310:	fee7efe3          	bltu	a5,a4,2130e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd42>
   21314:	fff70793          	addi	a5,a4,-1
   21318:	8f89                	c.sub	a5,a0
   2131a:	9be1                	c.andi	a5,-8
   2131c:	07a1                	c.addi	a5,8
   2131e:	97d2                	c.add	a5,s4
   21320:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   21322:	10bc                	c.addi4spn	a5,sp,104
   21324:	00f50563          	beq	a0,a5,2132e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd62>
      delete[] (char *)base;
   21328:	c119                	c.beqz	a0,2132e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd62>
   2132a:	d26f50ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   2132e:	f552                	c.sdsp	s4,168(sp)
    end = dest;
   21330:	67a2                	c.ldsp	a5,8(sp)
   21332:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   21334:	9a4a                	c.add	s4,s2
   21336:	fd52                	c.sdsp	s4,184(sp)
    new (end) T(x);
   21338:	ff8cb703          	ld	a4,-8(s9)
   2133c:	77ca                	c.ldsp	a5,176(sp)
   2133e:	e398                	c.sd	a4,0(a5)
    end++;
   21340:	77ca                	c.ldsp	a5,176(sp)
   21342:	07a1                	c.addi	a5,8
   21344:	f93e                	c.sdsp	a5,176(sp)
  }
   21346:	aa45                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   21348:	e452                	c.sdsp	s4,8(sp)
   2134a:	bfe1                	c.j	21322 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd56>
  bool empty() const { return base == end; }
   2134c:	77ca                	c.ldsp	a5,176(sp)
      CHECK();
   2134e:	772a                	c.ldsp	a4,168(sp)
   21350:	22e785e3          	beq	a5,a4,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
    end--;
   21354:	17e1                	c.addi	a5,-8
   21356:	f93e                	c.sdsp	a5,176(sp)
  }
   21358:	aa79                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2135a:	6a9c                	c.ld	a5,16(a3)
   2135c:	00f76563          	bltu	a4,a5,21366 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd9a>
      underflow();
   21360:	0888                	c.addi4spn	a0,sp,80
   21362:	b70fa0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   21366:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   21368:	6746                	c.ldsp	a4,80(sp)
   2136a:	4f58                	c.lw	a4,28(a4)
   2136c:	560703e3          	beq	a4,zero,220d2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b06>
        val = (val << 8) | (uint64_t)p[i];
   21370:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   21374:	5630006f          	jal	zero,220d6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b0a>
    char *newbuf = new char[sizeof(T[target])];
   21378:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   2137a:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   2137c:	774a                	c.ldsp	a4,176(sp)
   2137e:	04e57063          	bgeu	a0,a4,213be <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdf2>
    T *src = base, *dest = (T *)newbuf;
   21382:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   21384:	07a1                	c.addi	a5,8
   21386:	fee7efe3          	bltu	a5,a4,21384 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdb8>
   2138a:	fff70793          	addi	a5,a4,-1
   2138e:	8f89                	c.sub	a5,a0
   21390:	9be1                	c.andi	a5,-8
   21392:	07a1                	c.addi	a5,8
   21394:	97e6                	c.add	a5,s9
   21396:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   21398:	10bc                	c.addi4spn	a5,sp,104
   2139a:	00f50563          	beq	a0,a5,213a4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdd8>
      delete[] (char *)base;
   2139e:	c119                	c.beqz	a0,213a4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdd8>
   213a0:	cb0f50ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   213a4:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   213a6:	67a2                	c.ldsp	a5,8(sp)
   213a8:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   213aa:	9cca                	c.add	s9,s2
   213ac:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(x);
   213ae:	000a3703          	ld	a4,0(s4)
   213b2:	77ca                	c.ldsp	a5,176(sp)
   213b4:	e398                	c.sd	a4,0(a5)
    end++;
   213b6:	77ca                	c.ldsp	a5,176(sp)
   213b8:	07a1                	c.addi	a5,8
   213ba:	f93e                	c.sdsp	a5,176(sp)
  }
   213bc:	aa2d                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   213be:	e466                	c.sdsp	s9,8(sp)
   213c0:	bfe1                	c.j	21398 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdcc>
  size_type size() const { return end - base; }
   213c2:	7cca                	c.ldsp	s9,176(sp)
   213c4:	772a                	c.ldsp	a4,168(sp)
   213c6:	40ec87b3          	sub	a5,s9,a4
      CHECKN(2);
   213ca:	46a1                	c.li	a3,8
   213cc:	1af6f7e3          	bgeu	a3,a5,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   213d0:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   213d2:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   213d4:	796a                	c.ldsp	s2,184(sp)
   213d6:	40e90933          	sub	s2,s2,a4
   213da:	40395913          	srai	s2,s2,0x3
   213de:	04f97963          	bgeu	s2,a5,21430 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe64>
   213e2:	00091363          	bne	s2,zero,213e8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe1c>
   213e6:	4905                	c.li	s2,1
    while (target < n)
   213e8:	00f97563          	bgeu	s2,a5,213f2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe26>
      target <<= 1;
   213ec:	0906                	c.slli	s2,0x1
    while (target < n)
   213ee:	fef96fe3          	bltu	s2,a5,213ec <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe20>
    char *newbuf = new char[sizeof(T[target])];
   213f2:	090e                	c.slli	s2,0x3
   213f4:	854a                	c.mv	a0,s2
   213f6:	99af50ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   213fa:	8a2a                	c.mv	s4,a0
    T *src = base, *dest = (T *)newbuf;
   213fc:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   213fe:	774a                	c.ldsp	a4,176(sp)
   21400:	04e57063          	bgeu	a0,a4,21440 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe74>
    T *src = base, *dest = (T *)newbuf;
   21404:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   21406:	07a1                	c.addi	a5,8
   21408:	fee7efe3          	bltu	a5,a4,21406 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe3a>
   2140c:	fff70793          	addi	a5,a4,-1
   21410:	8f89                	c.sub	a5,a0
   21412:	9be1                	c.andi	a5,-8
   21414:	07a1                	c.addi	a5,8
   21416:	97d2                	c.add	a5,s4
   21418:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   2141a:	10bc                	c.addi4spn	a5,sp,104
   2141c:	00f50563          	beq	a0,a5,21426 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe5a>
      delete[] (char *)base;
   21420:	c119                	c.beqz	a0,21426 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe5a>
   21422:	c2ef50ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   21426:	f552                	c.sdsp	s4,168(sp)
    end = dest;
   21428:	67a2                	c.ldsp	a5,8(sp)
   2142a:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   2142c:	9a4a                	c.add	s4,s2
   2142e:	fd52                	c.sdsp	s4,184(sp)
    new (end) T(x);
   21430:	ff0cb703          	ld	a4,-16(s9)
   21434:	77ca                	c.ldsp	a5,176(sp)
   21436:	e398                	c.sd	a4,0(a5)
    end++;
   21438:	77ca                	c.ldsp	a5,176(sp)
   2143a:	07a1                	c.addi	a5,8
   2143c:	f93e                	c.sdsp	a5,176(sp)
  }
   2143e:	a865                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   21440:	e452                	c.sdsp	s4,8(sp)
   21442:	bfe1                	c.j	2141a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe4e>
  size_type size() const { return end - base; }
   21444:	77ca                	c.ldsp	a5,176(sp)
   21446:	772a                	c.ldsp	a4,168(sp)
   21448:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   2144c:	46a1                	c.li	a3,8
   2144e:	12e6f6e3          	bgeu	a3,a4,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp1.u = stack.back();
   21452:	ff87b703          	ld	a4,-8(a5)
      stack.back() = stack.revat(1);
   21456:	ff07b683          	ld	a3,-16(a5)
   2145a:	fed7bc23          	sd	a3,-8(a5)
  reference revat(size_type n) { return *(end - 1 - n); }
   2145e:	77ca                	c.ldsp	a5,176(sp)
      stack.revat(1) = tmp1.u;
   21460:	fee7b823          	sd	a4,-16(a5)
      break;
   21464:	a849                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   21466:	77ca                	c.ldsp	a5,176(sp)
   21468:	772a                	c.ldsp	a4,168(sp)
   2146a:	40e78733          	sub	a4,a5,a4
      CHECKN(3);
   2146e:	46c1                	c.li	a3,16
   21470:	10e6f5e3          	bgeu	a3,a4,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp1.u = stack.back();
   21474:	ff87b703          	ld	a4,-8(a5)
      stack.back() = stack.revat(1);
   21478:	ff07b683          	ld	a3,-16(a5)
   2147c:	fed7bc23          	sd	a3,-8(a5)
  reference revat(size_type n) { return *(end - 1 - n); }
   21480:	77ca                	c.ldsp	a5,176(sp)
      stack.revat(1) = stack.revat(2);
   21482:	fe87b683          	ld	a3,-24(a5)
   21486:	fed7b823          	sd	a3,-16(a5)
   2148a:	77ca                	c.ldsp	a5,176(sp)
      stack.revat(2) = tmp1.u;
   2148c:	fee7b423          	sd	a4,-24(a5)
      break;
   21490:	a09d                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
      tmp1.u = subsec->addr_size;
   21492:	0584e603          	lwu	a2,88(s1)
  bool empty() const { return base == end; }
   21496:	794a                	c.ldsp	s2,176(sp)
      CHECK();
   21498:	77aa                	c.ldsp	a5,168(sp)
   2149a:	0f2780e3          	beq	a5,s2,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      stack.back() = ctx->deref_size(stack.back(), tmp1.u);
   2149e:	000b3783          	ld	a5,0(s6)
   214a2:	6f9c                	c.ld	a5,24(a5)
   214a4:	2601                	c.addiw	a2,0
   214a6:	ff893583          	ld	a1,-8(s2)
   214aa:	855a                	c.mv	a0,s6
   214ac:	9782                	c.jalr	a5
   214ae:	a091                	c.j	214f2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf26>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   214b0:	6a9c                	c.ld	a5,16(a3)
   214b2:	00f76563          	bltu	a4,a5,214bc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xef0>
      underflow();
   214b6:	0888                	c.addi4spn	a0,sp,80
   214b8:	a1afa0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   214bc:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   214be:	6746                	c.ldsp	a4,80(sp)
   214c0:	4f58                	c.lw	a4,28(a4)
   214c2:	44070de3          	beq	a4,zero,2211c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b50>
        val = (val << 8) | (uint64_t)p[i];
   214c6:	0007c603          	lbu	a2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   214ca:	4570006f          	jal	zero,22120 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b54>
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   214ce:	00019797          	auipc	a5,0x19
   214d2:	e9a7b783          	ld	a5,-358(a5) # 3a368 <vtable for dwarf::expr_error@@Base+0x8e0>
   214d6:	07c1                	c.addi	a5,16
   214d8:	00f93023          	sd	a5,0(s2)
        throw expr_error("DW_OP_deref_size operand exceeds address size");
   214dc:	00019617          	auipc	a2,0x19
   214e0:	fe463603          	ld	a2,-28(a2) # 3a4c0 <dwarf::expr_error::~expr_error()@@Base+0x182d0>
   214e4:	00019597          	auipc	a1,0x19
   214e8:	0545b583          	ld	a1,84(a1) # 3a538 <typeinfo for dwarf::expr_error@@Base+0xad8>
   214ec:	854a                	c.mv	a0,s2
   214ee:	c72f50ef          	jal	ra,16960 <__cxa_throw@plt>
      stack.back() = ctx->deref_size(stack.back(), tmp1.u);
   214f2:	fea93c23          	sd	a0,-8(s2)
      { return _M_ptr; }
   214f6:	66c6                	c.ldsp	a3,80(sp)
  bool end() const { return pos >= sec->end; }
   214f8:	7706                	c.ldsp	a4,96(sp)
  while (!cur.end()) {
   214fa:	6a9c                	c.ld	a5,16(a3)
   214fc:	0af77be3          	bgeu	a4,a5,21db2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17e6>
    if (sec->ord == byte_order::lsb) {
   21500:	4edc                	c.lw	a5,28(a3)
   21502:	460785e3          	beq	a5,zero,2216c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ba0>
        val = (val << 8) | (uint64_t)p[i];
   21506:	00074783          	lbu	a5,0(a4)
      for (unsigned i = 0; i < sizeof(T); i++)
   2150a:	4670006f          	jal	zero,22170 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ba4>
      tmp1.u = subsec->addr_size;
   2150e:	0584e683          	lwu	a3,88(s1)
  size_type size() const { return end - base; }
   21512:	794a                	c.ldsp	s2,176(sp)
   21514:	77aa                	c.ldsp	a5,168(sp)
   21516:	40f907b3          	sub	a5,s2,a5
      CHECKN(2);
   2151a:	06fdf0e3          	bgeu	s11,a5,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp2.u = stack.back();
   2151e:	ff893583          	ld	a1,-8(s2)
    end--;
   21522:	ff890793          	addi	a5,s2,-8
   21526:	f93e                	c.sdsp	a5,176(sp)
      stack.back() = ctx->xderef_size(tmp2.u, stack.back(), tmp1.u);
   21528:	000b3783          	ld	a5,0(s6)
   2152c:	739c                	c.ld	a5,32(a5)
   2152e:	2681                	c.addiw	a3,0
   21530:	ff093603          	ld	a2,-16(s2)
   21534:	855a                	c.mv	a0,s6
   21536:	9782                	c.jalr	a5
   21538:	a091                	c.j	2157c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfb0>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2153a:	6a9c                	c.ld	a5,16(a3)
   2153c:	00f76563          	bltu	a4,a5,21546 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf7a>
      underflow();
   21540:	0888                	c.addi4spn	a0,sp,80
   21542:	990fa0ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   21546:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   21548:	6746                	c.ldsp	a4,80(sp)
   2154a:	4f58                	c.lw	a4,28(a4)
   2154c:	3e070ce3          	beq	a4,zero,22144 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b78>
        val = (val << 8) | (uint64_t)p[i];
   21550:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   21554:	3f50006f          	jal	zero,22148 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b7c>
   21558:	00019797          	auipc	a5,0x19
   2155c:	e107b783          	ld	a5,-496(a5) # 3a368 <vtable for dwarf::expr_error@@Base+0x8e0>
   21560:	07c1                	c.addi	a5,16
   21562:	00f93023          	sd	a5,0(s2)
        throw expr_error("DW_OP_xderef_size operand exceeds address size");
   21566:	00019617          	auipc	a2,0x19
   2156a:	f5a63603          	ld	a2,-166(a2) # 3a4c0 <dwarf::expr_error::~expr_error()@@Base+0x182d0>
   2156e:	00019597          	auipc	a1,0x19
   21572:	fca5b583          	ld	a1,-54(a1) # 3a538 <typeinfo for dwarf::expr_error@@Base+0xad8>
   21576:	854a                	c.mv	a0,s2
   21578:	be8f50ef          	jal	ra,16960 <__cxa_throw@plt>
      stack.back() = ctx->xderef_size(tmp2.u, stack.back(), tmp1.u);
   2157c:	fea93823          	sd	a0,-16(s2)
      break;
   21580:	bf9d                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
      throw runtime_error("DW_OP_push_object_address not implemented");
   21582:	4541                	c.li	a0,16
   21584:	90cf50ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   21588:	892a                	c.mv	s2,a0
   2158a:	0000d597          	auipc	a1,0xd
   2158e:	2ae58593          	addi	a1,a1,686 # 2e838 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x340>
   21592:	8cef50ef          	jal	ra,16660 <std::runtime_error::runtime_error(char const*)@plt>
   21596:	00019617          	auipc	a2,0x19
   2159a:	e8a63603          	ld	a2,-374(a2) # 3a420 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   2159e:	00019597          	auipc	a1,0x19
   215a2:	0725b583          	ld	a1,114(a1) # 3a610 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   215a6:	854a                	c.mv	a0,s2
   215a8:	bb8f50ef          	jal	ra,16960 <__cxa_throw@plt>
  bool empty() const { return base == end; }
   215ac:	794a                	c.ldsp	s2,176(sp)
      CHECK();
   215ae:	77aa                	c.ldsp	a5,168(sp)
   215b0:	7d278563          	beq	a5,s2,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      stack.back() = ctx->form_tls_address(stack.back());
   215b4:	000b3783          	ld	a5,0(s6)
   215b8:	779c                	c.ld	a5,40(a5)
   215ba:	ff893583          	ld	a1,-8(s2)
   215be:	855a                	c.mv	a0,s6
   215c0:	9782                	c.jalr	a5
   215c2:	fea93c23          	sd	a0,-8(s2)
      break;
   215c6:	bf05                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
      throw runtime_error("DW_OP_call_frame_cfa not implemented");
   215c8:	4541                	c.li	a0,16
   215ca:	8c6f50ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   215ce:	892a                	c.mv	s2,a0
   215d0:	0000d597          	auipc	a1,0xd
   215d4:	29858593          	addi	a1,a1,664 # 2e868 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x370>
   215d8:	888f50ef          	jal	ra,16660 <std::runtime_error::runtime_error(char const*)@plt>
   215dc:	00019617          	auipc	a2,0x19
   215e0:	e4463603          	ld	a2,-444(a2) # 3a420 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   215e4:	00019597          	auipc	a1,0x19
   215e8:	02c5b583          	ld	a1,44(a1) # 3a610 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   215ec:	854a                	c.mv	a0,s2
   215ee:	b72f50ef          	jal	ra,16960 <__cxa_throw@plt>
   215f2:	774a                	c.ldsp	a4,176(sp)
      CHECK();
   215f4:	77aa                	c.ldsp	a5,168(sp)
   215f6:	78f70263          	beq	a4,a5,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      if (tmp1.s < 0)
   215fa:	ff873783          	ld	a5,-8(a4)
   215fe:	43f7d693          	srai	a3,a5,0x3f
   21602:	8fb5                	c.xor	a5,a3
   21604:	8f95                	c.sub	a5,a3
      stack.back() = tmp1.u;
   21606:	fef73c23          	sd	a5,-8(a4)
      break;
   2160a:	b5f5                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   2160c:	77ca                	c.ldsp	a5,176(sp)
   2160e:	772a                	c.ldsp	a4,168(sp)
   21610:	40e78733          	sub	a4,a5,a4
      UBINOP(&);
   21614:	46a1                	c.li	a3,8
   21616:	76e6f263          	bgeu	a3,a4,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   2161a:	ff87b683          	ld	a3,-8(a5)
    end--;
   2161e:	ff878713          	addi	a4,a5,-8
   21622:	f93a                	c.sdsp	a4,176(sp)
   21624:	ff07b703          	ld	a4,-16(a5)
   21628:	8f75                	c.and	a4,a3
   2162a:	fee7b823          	sd	a4,-16(a5)
      break;
   2162e:	b5e1                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   21630:	77ca                	c.ldsp	a5,176(sp)
   21632:	772a                	c.ldsp	a4,168(sp)
   21634:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   21638:	46a1                	c.li	a3,8
   2163a:	74e6f063          	bgeu	a3,a4,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp1.u = stack.back();
   2163e:	ff87b703          	ld	a4,-8(a5)
    end--;
   21642:	ff878693          	addi	a3,a5,-8
   21646:	f936                	c.sdsp	a3,176(sp)
      tmp3.s = tmp1.s / tmp2.s;
   21648:	ff07b683          	ld	a3,-16(a5)
   2164c:	02d74733          	div	a4,a4,a3
      stack.back() = tmp3.u;
   21650:	fee7b823          	sd	a4,-16(a5)
      break;
   21654:	b54d                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   21656:	77ca                	c.ldsp	a5,176(sp)
   21658:	772a                	c.ldsp	a4,168(sp)
   2165a:	40e78733          	sub	a4,a5,a4
      UBINOP(-);
   2165e:	46a1                	c.li	a3,8
   21660:	70e6fd63          	bgeu	a3,a4,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   21664:	ff87b683          	ld	a3,-8(a5)
    end--;
   21668:	ff878713          	addi	a4,a5,-8
   2166c:	f93a                	c.sdsp	a4,176(sp)
   2166e:	ff07b703          	ld	a4,-16(a5)
   21672:	8f15                	c.sub	a4,a3
   21674:	fee7b823          	sd	a4,-16(a5)
      break;
   21678:	bdbd                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   2167a:	77ca                	c.ldsp	a5,176(sp)
   2167c:	772a                	c.ldsp	a4,168(sp)
   2167e:	40e78733          	sub	a4,a5,a4
      UBINOP(%);
   21682:	46a1                	c.li	a3,8
   21684:	6ee6fb63          	bgeu	a3,a4,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   21688:	ff87b683          	ld	a3,-8(a5)
    end--;
   2168c:	ff878713          	addi	a4,a5,-8
   21690:	f93a                	c.sdsp	a4,176(sp)
   21692:	ff07b703          	ld	a4,-16(a5)
   21696:	02d77733          	remu	a4,a4,a3
   2169a:	fee7b823          	sd	a4,-16(a5)
      break;
   2169e:	bda1                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   216a0:	77ca                	c.ldsp	a5,176(sp)
   216a2:	772a                	c.ldsp	a4,168(sp)
   216a4:	40e78733          	sub	a4,a5,a4
      UBINOP(*);
   216a8:	46a1                	c.li	a3,8
   216aa:	6ce6f863          	bgeu	a3,a4,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   216ae:	ff87b683          	ld	a3,-8(a5)
    end--;
   216b2:	ff878713          	addi	a4,a5,-8
   216b6:	f93a                	c.sdsp	a4,176(sp)
   216b8:	ff07b703          	ld	a4,-16(a5)
   216bc:	02d70733          	mul	a4,a4,a3
   216c0:	fee7b823          	sd	a4,-16(a5)
      break;
   216c4:	bd0d                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  bool empty() const { return base == end; }
   216c6:	77ca                	c.ldsp	a5,176(sp)
      CHECK();
   216c8:	772a                	c.ldsp	a4,168(sp)
   216ca:	6af70863          	beq	a4,a5,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp1.s = -tmp1.s;
   216ce:	ff87b703          	ld	a4,-8(a5)
   216d2:	40e00733          	sub	a4,zero,a4
      stack.back() = tmp1.u;
   216d6:	fee7bc23          	sd	a4,-8(a5)
      break;
   216da:	bd31                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
   216dc:	77ca                	c.ldsp	a5,176(sp)
      CHECK();
   216de:	772a                	c.ldsp	a4,168(sp)
   216e0:	68f70d63          	beq	a4,a5,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      stack.back() = ~stack.back();
   216e4:	ff87b703          	ld	a4,-8(a5)
   216e8:	fff74713          	xori	a4,a4,-1
   216ec:	fee7bc23          	sd	a4,-8(a5)
      break;
   216f0:	b519                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   216f2:	77ca                	c.ldsp	a5,176(sp)
   216f4:	772a                	c.ldsp	a4,168(sp)
   216f6:	40e78733          	sub	a4,a5,a4
      UBINOP(|);
   216fa:	46a1                	c.li	a3,8
   216fc:	66e6ff63          	bgeu	a3,a4,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   21700:	ff87b683          	ld	a3,-8(a5)
    end--;
   21704:	ff878713          	addi	a4,a5,-8
   21708:	f93a                	c.sdsp	a4,176(sp)
   2170a:	ff07b703          	ld	a4,-16(a5)
   2170e:	8f55                	c.or	a4,a3
   21710:	fee7b823          	sd	a4,-16(a5)
      break;
   21714:	b3cd                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   21716:	77ca                	c.ldsp	a5,176(sp)
   21718:	772a                	c.ldsp	a4,168(sp)
   2171a:	40e78733          	sub	a4,a5,a4
      UBINOP(+);
   2171e:	46a1                	c.li	a3,8
   21720:	64e6fd63          	bgeu	a3,a4,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   21724:	ff87b683          	ld	a3,-8(a5)
    end--;
   21728:	ff878713          	addi	a4,a5,-8
   2172c:	f93a                	c.sdsp	a4,176(sp)
   2172e:	ff07b703          	ld	a4,-16(a5)
   21732:	9736                	c.add	a4,a3
   21734:	fee7b823          	sd	a4,-16(a5)
      break;
   21738:	bb7d                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    return 0;
   2173a:	4501                	c.li	a0,0
  bool empty() const { return base == end; }
   2173c:	77ca                	c.ldsp	a5,176(sp)
      CHECK();
   2173e:	772a                	c.ldsp	a4,168(sp)
   21740:	62f70d63          	beq	a4,a5,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      stack.back() += tmp1.u;
   21744:	ff87b703          	ld	a4,-8(a5)
   21748:	972a                	c.add	a4,a0
   2174a:	fee7bc23          	sd	a4,-8(a5)
      break;
   2174e:	b365                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   21750:	77ca                	c.ldsp	a5,176(sp)
   21752:	772a                	c.ldsp	a4,168(sp)
   21754:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   21758:	46a1                	c.li	a3,8
   2175a:	62e6f063          	bgeu	a3,a4,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp1.u = stack.back();
   2175e:	ff87b683          	ld	a3,-8(a5)
    end--;
   21762:	ff878713          	addi	a4,a5,-8
   21766:	f93a                	c.sdsp	a4,176(sp)
      tmp2.u = stack.back();
   21768:	ff07b703          	ld	a4,-16(a5)
      if (tmp1.u < sizeof(tmp2.u) * 8)
   2176c:	03f00613          	addi	a2,zero,63
   21770:	00d66763          	bltu	a2,a3,2177e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x11b2>
        stack.back() = tmp2.u << tmp1.u;
   21774:	00d71733          	sll	a4,a4,a3
   21778:	fee7b823          	sd	a4,-16(a5)
   2177c:	bbad                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
        stack.back() = 0;
   2177e:	fe07b823          	sd	zero,-16(a5)
   21782:	bb95                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   21784:	77ca                	c.ldsp	a5,176(sp)
   21786:	772a                	c.ldsp	a4,168(sp)
   21788:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   2178c:	46a1                	c.li	a3,8
   2178e:	5ee6f663          	bgeu	a3,a4,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp1.u = stack.back();
   21792:	ff87b683          	ld	a3,-8(a5)
    end--;
   21796:	ff878713          	addi	a4,a5,-8
   2179a:	f93a                	c.sdsp	a4,176(sp)
      tmp2.u = stack.back();
   2179c:	ff07b703          	ld	a4,-16(a5)
      if (tmp1.u < sizeof(tmp2.u) * 8)
   217a0:	03f00613          	addi	a2,zero,63
   217a4:	00d66763          	bltu	a2,a3,217b2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x11e6>
        stack.back() = tmp2.u >> tmp1.u;
   217a8:	00d75733          	srl	a4,a4,a3
   217ac:	fee7b823          	sd	a4,-16(a5)
   217b0:	b399                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
        stack.back() = 0;
   217b2:	fe07b823          	sd	zero,-16(a5)
   217b6:	b381                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   217b8:	77ca                	c.ldsp	a5,176(sp)
   217ba:	772a                	c.ldsp	a4,168(sp)
   217bc:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   217c0:	46a1                	c.li	a3,8
   217c2:	5ae6fc63          	bgeu	a3,a4,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp1.u = stack.back();
   217c6:	ff87b603          	ld	a2,-8(a5)
    end--;
   217ca:	ff878713          	addi	a4,a5,-8
   217ce:	f93a                	c.sdsp	a4,176(sp)
      tmp2.u = stack.back();
   217d0:	ff07b683          	ld	a3,-16(a5)
      if (tmp1.u < sizeof(tmp2.u) * 8)
   217d4:	03f00593          	addi	a1,zero,63
        tmp2.u = 0;
   217d8:	4701                	c.li	a4,0
      if (tmp1.u < sizeof(tmp2.u) * 8)
   217da:	00c5e963          	bltu	a1,a2,217ec <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1220>
      if (tmp3.u)
   217de:	43f6d593          	srai	a1,a3,0x3f
   217e2:	00d5c733          	xor	a4,a1,a3
   217e6:	8f0d                	c.sub	a4,a1
        tmp2.u >>= tmp1.u;
   217e8:	00c75733          	srl	a4,a4,a2
      if (tmp3.u)
   217ec:	0006d463          	bge	a3,zero,217f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1228>
        tmp2.s = -tmp2.s;
   217f0:	40e00733          	sub	a4,zero,a4
      stack.back() = tmp2.u;
   217f4:	fee7b823          	sd	a4,-16(a5)
      break;
   217f8:	b9fd                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   217fa:	77ca                	c.ldsp	a5,176(sp)
   217fc:	772a                	c.ldsp	a4,168(sp)
   217fe:	40e78733          	sub	a4,a5,a4
      UBINOP(^);
   21802:	46a1                	c.li	a3,8
   21804:	56e6fb63          	bgeu	a3,a4,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   21808:	ff87b683          	ld	a3,-8(a5)
    end--;
   2180c:	ff878713          	addi	a4,a5,-8
   21810:	f93a                	c.sdsp	a4,176(sp)
   21812:	ff07b703          	ld	a4,-16(a5)
   21816:	8f35                	c.xor	a4,a3
   21818:	fee7b823          	sd	a4,-16(a5)
      break;
   2181c:	b9e9                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   2181e:	774a                	c.ldsp	a4,176(sp)
   21820:	77aa                	c.ldsp	a5,168(sp)
   21822:	40f707b3          	sub	a5,a4,a5
      SRELOP(<=);
   21826:	46a1                	c.li	a3,8
   21828:	54f6f963          	bgeu	a3,a5,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   2182c:	ff873783          	ld	a5,-8(a4)
    end--;
   21830:	ff870693          	addi	a3,a4,-8
   21834:	f936                	c.sdsp	a3,176(sp)
   21836:	ff073683          	ld	a3,-16(a4)
   2183a:	00d7a7b3          	slt	a5,a5,a3
   2183e:	0017c793          	xori	a5,a5,1
   21842:	1782                	c.slli	a5,0x20
   21844:	9381                	c.srli	a5,0x20
   21846:	fef73823          	sd	a5,-16(a4)
      break;
   2184a:	b175                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   2184c:	774a                	c.ldsp	a4,176(sp)
   2184e:	77aa                	c.ldsp	a5,168(sp)
   21850:	40f707b3          	sub	a5,a4,a5
      SRELOP(>=);
   21854:	46a1                	c.li	a3,8
   21856:	52f6f263          	bgeu	a3,a5,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   2185a:	ff873783          	ld	a5,-8(a4)
    end--;
   2185e:	ff870693          	addi	a3,a4,-8
   21862:	f936                	c.sdsp	a3,176(sp)
   21864:	ff073683          	ld	a3,-16(a4)
   21868:	00d7a7b3          	slt	a5,a5,a3
   2186c:	0017c793          	xori	a5,a5,1
   21870:	1782                	c.slli	a5,0x20
   21872:	9381                	c.srli	a5,0x20
   21874:	fef73823          	sd	a5,-16(a4)
      break;
   21878:	b9bd                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   2187a:	774a                	c.ldsp	a4,176(sp)
   2187c:	77aa                	c.ldsp	a5,168(sp)
   2187e:	40f707b3          	sub	a5,a4,a5
      SRELOP(==);
   21882:	46a1                	c.li	a3,8
   21884:	4ef6fb63          	bgeu	a3,a5,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   21888:	ff873783          	ld	a5,-8(a4)
    end--;
   2188c:	ff870693          	addi	a3,a4,-8
   21890:	f936                	c.sdsp	a3,176(sp)
   21892:	ff073683          	ld	a3,-16(a4)
   21896:	00d7a7b3          	slt	a5,a5,a3
   2189a:	0017c793          	xori	a5,a5,1
   2189e:	1782                	c.slli	a5,0x20
   218a0:	9381                	c.srli	a5,0x20
   218a2:	fef73823          	sd	a5,-16(a4)
      break;
   218a6:	b981                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   218a8:	774a                	c.ldsp	a4,176(sp)
   218aa:	77aa                	c.ldsp	a5,168(sp)
   218ac:	40f707b3          	sub	a5,a4,a5
      SRELOP(<);
   218b0:	46a1                	c.li	a3,8
   218b2:	4cf6f463          	bgeu	a3,a5,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   218b6:	ff873783          	ld	a5,-8(a4)
    end--;
   218ba:	ff870693          	addi	a3,a4,-8
   218be:	f936                	c.sdsp	a3,176(sp)
   218c0:	ff073683          	ld	a3,-16(a4)
   218c4:	00d7a7b3          	slt	a5,a5,a3
   218c8:	0017c793          	xori	a5,a5,1
   218cc:	1782                	c.slli	a5,0x20
   218ce:	9381                	c.srli	a5,0x20
   218d0:	fef73823          	sd	a5,-16(a4)
      break;
   218d4:	b10d                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   218d6:	774a                	c.ldsp	a4,176(sp)
   218d8:	77aa                	c.ldsp	a5,168(sp)
   218da:	40f707b3          	sub	a5,a4,a5
      SRELOP(>);
   218de:	46a1                	c.li	a3,8
   218e0:	48f6fd63          	bgeu	a3,a5,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   218e4:	ff873783          	ld	a5,-8(a4)
    end--;
   218e8:	ff870693          	addi	a3,a4,-8
   218ec:	f936                	c.sdsp	a3,176(sp)
   218ee:	ff073683          	ld	a3,-16(a4)
   218f2:	00d7a7b3          	slt	a5,a5,a3
   218f6:	0017c793          	xori	a5,a5,1
   218fa:	1782                	c.slli	a5,0x20
   218fc:	9381                	c.srli	a5,0x20
   218fe:	fef73823          	sd	a5,-16(a4)
      break;
   21902:	bed5                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   21904:	774a                	c.ldsp	a4,176(sp)
   21906:	77aa                	c.ldsp	a5,168(sp)
   21908:	40f707b3          	sub	a5,a4,a5
      SRELOP(!=);
   2190c:	46a1                	c.li	a3,8
   2190e:	46f6f663          	bgeu	a3,a5,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   21912:	ff873783          	ld	a5,-8(a4)
    end--;
   21916:	ff870693          	addi	a3,a4,-8
   2191a:	f936                	c.sdsp	a3,176(sp)
   2191c:	ff073683          	ld	a3,-16(a4)
   21920:	00d7a7b3          	slt	a5,a5,a3
   21924:	0017c793          	xori	a5,a5,1
   21928:	1782                	c.slli	a5,0x20
   2192a:	9381                	c.srli	a5,0x20
   2192c:	fef73823          	sd	a5,-16(a4)
      break;
   21930:	b6d9                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   21932:	6a9c                	c.ld	a5,16(a3)
   21934:	40e78633          	sub	a2,a5,a4
   21938:	4685                	c.li	a3,1
   2193a:	00c6f463          	bgeu	a3,a2,21942 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1376>
   2193e:	00f76563          	bltu	a4,a5,21948 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x137c>
      underflow();
   21942:	0888                	c.addi4spn	a0,sp,80
   21944:	d8ff90ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   21948:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   2194a:	6746                	c.ldsp	a4,80(sp)
   2194c:	4f58                	c.lw	a4,28(a4)
   2194e:	eb5d                	c.bnez	a4,21a04 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1438>
        val |= ((uint64_t)p[i]) << (i * 8);
   21950:	0017c903          	lbu	s2,1(a5)
   21954:	0922                	c.slli	s2,0x8
   21956:	0007c703          	lbu	a4,0(a5)
   2195a:	00e96933          	or	s2,s2,a4
    pos += sizeof(T);
   2195e:	0789                	c.addi	a5,2
   21960:	f0be                	c.sdsp	a5,96(sp)
      tmp1.s = cur.fixed<int16_t>();
   21962:	0109191b          	slliw	s2,s2,0x10
   21966:	4109591b          	sraiw	s2,s2,0x10
    if (__is_single_threaded())
   2196a:	000d4783          	lbu	a5,0(s10)
   2196e:	10078263          	beq	a5,zero,21a72 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x14a6>
  { *__mem += __val; }
   21972:	589c                	c.lw	a5,48(s1)
   21974:	2785                	c.addiw	a5,1
   21976:	d89c                	c.sw	a5,48(s1)
  section_offset get_section_offset() const { return pos - sec->begin; }
   21978:	67c6                	c.ldsp	a5,80(sp)
   2197a:	6798                	c.ld	a4,8(a5)
   2197c:	7786                	c.ldsp	a5,96(sp)
   2197e:	8f99                	c.sub	a5,a4
      cur = cursor(subsec, (int64_t)cur.get_section_offset() + tmp1.s);
   21980:	993e                	c.add	s2,a5
   21982:	589c                	c.lw	a5,48(s1)
   21984:	2785                	c.addiw	a5,1
   21986:	d89c                	c.sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   21988:	60bc                	c.ld	a5,64(s1)
   2198a:	993e                	c.add	s2,a5
   2198c:	e8e2                	c.sdsp	s8,80(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   2198e:	6a66                	c.ldsp	s4,88(sp)
	__r._M_pi = _M_pi;
   21990:	eca6                	c.sdsp	s1,88(sp)
	if (_M_pi != nullptr)
   21992:	020a0363          	beq	s4,zero,219b8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13ec>
    if (__is_single_threaded())
   21996:	00019797          	auipc	a5,0x19
   2199a:	b027b783          	ld	a5,-1278(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2199e:	0007c783          	lbu	a5,0(a5)
   219a2:	10078063          	beq	a5,zero,21aa2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x14d6>
    _Atomic_word __result = *__mem;
   219a6:	030a2503          	lw	a0,48(s4)
    *__mem += __val;
   219aa:	fff5079b          	addiw	a5,a0,-1
   219ae:	02fa2823          	sw	a5,48(s4)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   219b2:	4785                	c.li	a5,1
   219b4:	0ef50d63          	beq	a0,a5,21aae <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x14e2>
struct cursor {
   219b8:	f0ca                	c.sdsp	s2,96(sp)
    if (__is_single_threaded())
   219ba:	000d4783          	lbu	a5,0(s10)
   219be:	12078c63          	beq	a5,zero,21af6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x152a>
    _Atomic_word __result = *__mem;
   219c2:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   219c4:	fff5079b          	addiw	a5,a0,-1
   219c8:	d89c                	c.sw	a5,48(s1)
   219ca:	4785                	c.li	a5,1
   219cc:	b2f515e3          	bne	a0,a5,214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
	_M_dispose();
   219d0:	609c                	c.ld	a5,0(s1)
   219d2:	6b9c                	c.ld	a5,16(a5)
   219d4:	8526                	c.mv	a0,s1
   219d6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   219d8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   219dc:	00019797          	auipc	a5,0x19
   219e0:	abc7b783          	ld	a5,-1348(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   219e4:	0007c783          	lbu	a5,0(a5)
   219e8:	10078d63          	beq	a5,zero,21b02 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1536>
    _Atomic_word __result = *__mem;
   219ec:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   219ee:	fff7871b          	addiw	a4,a5,-1
   219f2:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   219f4:	4705                	c.li	a4,1
   219f6:	b0e790e3          	bne	a5,a4,214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
	    _M_destroy();
   219fa:	609c                	c.ld	a5,0(s1)
   219fc:	6f9c                	c.ld	a5,24(a5)
   219fe:	8526                	c.mv	a0,s1
   21a00:	9782                	c.jalr	a5
   21a02:	bcd5                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
        val = (val << 8) | (uint64_t)p[i];
   21a04:	0007c903          	lbu	s2,0(a5)
   21a08:	0922                	c.slli	s2,0x8
   21a0a:	0017c703          	lbu	a4,1(a5)
   21a0e:	00e96933          	or	s2,s2,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   21a12:	b7b1                	c.j	2195e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1392>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   21a14:	6a9c                	c.ld	a5,16(a3)
   21a16:	40e78633          	sub	a2,a5,a4
   21a1a:	4685                	c.li	a3,1
   21a1c:	00c6f463          	bgeu	a3,a2,21a24 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1458>
   21a20:	00f76563          	bltu	a4,a5,21a2a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x145e>
      underflow();
   21a24:	0888                	c.addi4spn	a0,sp,80
   21a26:	cadf90ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   21a2a:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   21a2c:	6746                	c.ldsp	a4,80(sp)
   21a2e:	4f58                	c.lw	a4,28(a4)
   21a30:	eb0d                	c.bnez	a4,21a62 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1496>
        val |= ((uint64_t)p[i]) << (i * 8);
   21a32:	0017c903          	lbu	s2,1(a5)
   21a36:	0922                	c.slli	s2,0x8
   21a38:	0007c703          	lbu	a4,0(a5)
   21a3c:	00e96933          	or	s2,s2,a4
    pos += sizeof(T);
   21a40:	0789                	c.addi	a5,2
   21a42:	f0be                	c.sdsp	a5,96(sp)
  bool empty() const { return base == end; }
   21a44:	77ca                	c.ldsp	a5,176(sp)
      CHECK();
   21a46:	772a                	c.ldsp	a4,168(sp)
   21a48:	32f70963          	beq	a4,a5,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp2.u = stack.back();
   21a4c:	ff87b703          	ld	a4,-8(a5)
    end--;
   21a50:	17e1                	c.addi	a5,-8
   21a52:	f93e                	c.sdsp	a5,176(sp)
      if (tmp2.u == 0)
   21a54:	aa0701e3          	beq	a4,zero,214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
      tmp1.s = cur.fixed<int16_t>();
   21a58:	0109191b          	slliw	s2,s2,0x10
   21a5c:	4109591b          	sraiw	s2,s2,0x10
   21a60:	b729                	c.j	2196a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x139e>
        val = (val << 8) | (uint64_t)p[i];
   21a62:	0007c903          	lbu	s2,0(a5)
   21a66:	0922                	c.slli	s2,0x8
   21a68:	0017c703          	lbu	a4,1(a5)
   21a6c:	00e96933          	or	s2,s2,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   21a70:	bfc1                	c.j	21a40 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1474>
      __atomic_add(__mem, __val);
   21a72:	4585                	c.li	a1,1
   21a74:	03048513          	addi	a0,s1,48
   21a78:	b39f40ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
  section_offset get_section_offset() const { return pos - sec->begin; }
   21a7c:	67c6                	c.ldsp	a5,80(sp)
   21a7e:	6798                	c.ld	a4,8(a5)
   21a80:	7786                	c.ldsp	a5,96(sp)
   21a82:	8f99                	c.sub	a5,a4
      cur = cursor(subsec, (int64_t)cur.get_section_offset() + tmp1.s);
   21a84:	993e                	c.add	s2,a5
    if (__is_single_threaded())
   21a86:	00019797          	auipc	a5,0x19
   21a8a:	a127b783          	ld	a5,-1518(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21a8e:	0007c783          	lbu	a5,0(a5)
   21a92:	ee0798e3          	bne	a5,zero,21982 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13b6>
      __atomic_add(__mem, __val);
   21a96:	4585                	c.li	a1,1
   21a98:	03048513          	addi	a0,s1,48
   21a9c:	b15f40ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   21aa0:	b5e5                	c.j	21988 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13bc>
      return __exchange_and_add(__mem, __val);
   21aa2:	55fd                	c.li	a1,-1
   21aa4:	030a0513          	addi	a0,s4,48
   21aa8:	b49f40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21aac:	b719                	c.j	219b2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13e6>
	_M_dispose();
   21aae:	000a3783          	ld	a5,0(s4)
   21ab2:	6b9c                	c.ld	a5,16(a5)
   21ab4:	8552                	c.mv	a0,s4
   21ab6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21ab8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21abc:	00019797          	auipc	a5,0x19
   21ac0:	9dc7b783          	ld	a5,-1572(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21ac4:	0007c783          	lbu	a5,0(a5)
   21ac8:	c385                	c.beqz	a5,21ae8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x151c>
    _Atomic_word __result = *__mem;
   21aca:	034a2783          	lw	a5,52(s4)
    *__mem += __val;
   21ace:	fff7871b          	addiw	a4,a5,-1
   21ad2:	02ea2a23          	sw	a4,52(s4)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21ad6:	4705                	c.li	a4,1
   21ad8:	eee790e3          	bne	a5,a4,219b8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13ec>
	    _M_destroy();
   21adc:	000a3783          	ld	a5,0(s4)
   21ae0:	6f9c                	c.ld	a5,24(a5)
   21ae2:	8552                	c.mv	a0,s4
   21ae4:	9782                	c.jalr	a5
   21ae6:	bdc9                	c.j	219b8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13ec>
      return __exchange_and_add(__mem, __val);
   21ae8:	55fd                	c.li	a1,-1
   21aea:	034a0513          	addi	a0,s4,52
   21aee:	b03f40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21af2:	87aa                	c.mv	a5,a0
   21af4:	b7cd                	c.j	21ad6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x150a>
   21af6:	55fd                	c.li	a1,-1
   21af8:	03048513          	addi	a0,s1,48
   21afc:	af5f40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21b00:	b5e9                	c.j	219ca <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13fe>
   21b02:	55fd                	c.li	a1,-1
   21b04:	03448513          	addi	a0,s1,52
   21b08:	ae9f40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21b0c:	87aa                	c.mv	a5,a0
   21b0e:	b5dd                	c.j	219f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1428>
      throw runtime_error(to_string(op) + " not implemented");
   21b10:	4541                	c.li	a0,16
   21b12:	b7ff40ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   21b16:	89aa                	c.mv	s3,a0
   21b18:	85ca                	c.mv	a1,s2
   21b1a:	0808                	c.addi4spn	a0,sp,16
   21b1c:	329070ef          	jal	ra,29644 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__lhs.append(__rhs)); }
   21b20:	0000d597          	auipc	a1,0xd
   21b24:	d7058593          	addi	a1,a1,-656 # 2e890 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x398>
   21b28:	0808                	c.addi4spn	a0,sp,16
   21b2a:	f17f40ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   21b2e:	85aa                	c.mv	a1,a0
   21b30:	1800                	c.addi4spn	s0,sp,48
   21b32:	8522                	c.mv	a0,s0
   21b34:	b9df40ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   21b38:	85a2                	c.mv	a1,s0
   21b3a:	854e                	c.mv	a0,s3
   21b3c:	de5f40ef          	jal	ra,16920 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   21b40:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   21b42:	009c                	c.addi4spn	a5,sp,64
   21b44:	00f50463          	beq	a0,a5,21b4c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1580>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   21b48:	c59f40ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21b4c:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   21b4e:	101c                	c.addi4spn	a5,sp,32
   21b50:	00f50463          	beq	a0,a5,21b58 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x158c>
   21b54:	c4df40ef          	jal	ra,167a0 <operator delete(void*)@plt>
   21b58:	00019617          	auipc	a2,0x19
   21b5c:	8c863603          	ld	a2,-1848(a2) # 3a420 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   21b60:	00019597          	auipc	a1,0x19
   21b64:	ab05b583          	ld	a1,-1360(a1) # 3a610 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   21b68:	854e                	c.mv	a0,s3
   21b6a:	df7f40ef          	jal	ra,16960 <__cxa_throw@plt>
      result.location_type = expr_result::type::reg;
   21b6e:	4785                	c.li	a5,1
   21b70:	00faa023          	sw	a5,0(s5)
      result.value = (unsigned)op - (unsigned)DW_OP::reg0;
   21b74:	fb09079b          	addiw	a5,s2,-80
   21b78:	1782                	c.slli	a5,0x20
   21b7a:	9381                	c.srli	a5,0x20
   21b7c:	00fab423          	sd	a5,8(s5)
      break;
   21b80:	ba9d                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
      result.location_type = expr_result::type::reg;
   21b82:	4785                	c.li	a5,1
   21b84:	00faa023          	sw	a5,0(s5)
    while (pos < sec->end) {
   21b88:	6a9c                	c.ld	a5,16(a3)
   21b8a:	02f77763          	bgeu	a4,a5,21bb8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x15ec>
    std::uint64_t result = 0;
   21b8e:	4501                	c.li	a0,0
    int shift = 0;
   21b90:	4581                	c.li	a1,0
      uint8_t byte = *(uint8_t *)(pos++);
   21b92:	0705                	c.addi	a4,1
   21b94:	f0ba                	c.sdsp	a4,96(sp)
   21b96:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   21b9a:	07f7f613          	andi	a2,a5,127
   21b9e:	00b61633          	sll	a2,a2,a1
   21ba2:	8d51                	c.or	a0,a2
      if ((byte & 0x80) == 0)
   21ba4:	0187979b          	slliw	a5,a5,0x18
   21ba8:	4187d79b          	sraiw	a5,a5,0x18
   21bac:	0007da63          	bge	a5,zero,21bc0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x15f4>
      shift += 7;
   21bb0:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   21bb2:	6a9c                	c.ld	a5,16(a3)
   21bb4:	fcf76fe3          	bltu	a4,a5,21b92 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x15c6>
    underflow();
   21bb8:	0888                	c.addi4spn	a0,sp,80
   21bba:	b19f90ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    return 0;
   21bbe:	4501                	c.li	a0,0
      result.value = cur.uleb128();
   21bc0:	00aab423          	sd	a0,8(s5)
      break;
   21bc4:	ba0d                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
      result.location_type = expr_result::type::implicit;
   21bc6:	478d                	c.li	a5,3
   21bc8:	00faa023          	sw	a5,0(s5)
    while (pos < sec->end) {
   21bcc:	6a9c                	c.ld	a5,16(a3)
   21bce:	02f77763          	bgeu	a4,a5,21bfc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1630>
    std::uint64_t result = 0;
   21bd2:	4501                	c.li	a0,0
    int shift = 0;
   21bd4:	4581                	c.li	a1,0
      uint8_t byte = *(uint8_t *)(pos++);
   21bd6:	0705                	c.addi	a4,1
   21bd8:	f0ba                	c.sdsp	a4,96(sp)
   21bda:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   21bde:	07f7f613          	andi	a2,a5,127
   21be2:	00b61633          	sll	a2,a2,a1
   21be6:	8d51                	c.or	a0,a2
      if ((byte & 0x80) == 0)
   21be8:	0187979b          	slliw	a5,a5,0x18
   21bec:	4187d79b          	sraiw	a5,a5,0x18
   21bf0:	0007da63          	bge	a5,zero,21c04 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1638>
      shift += 7;
   21bf4:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   21bf6:	6a9c                	c.ld	a5,16(a3)
   21bf8:	fcf76fe3          	bltu	a4,a5,21bd6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x160a>
    underflow();
   21bfc:	0888                	c.addi4spn	a0,sp,80
   21bfe:	ad5f90ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    return 0;
   21c02:	4501                	c.li	a0,0
      result.implicit_len = cur.uleb128();
   21c04:	00aabc23          	sd	a0,24(s5)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   21c08:	67c6                	c.ldsp	a5,80(sp)
   21c0a:	6b98                	c.ld	a4,16(a5)
   21c0c:	7786                	c.ldsp	a5,96(sp)
   21c0e:	40f706b3          	sub	a3,a4,a5
   21c12:	00a6e463          	bltu	a3,a0,21c1a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x164e>
   21c16:	00e7e563          	bltu	a5,a4,21c20 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1654>
      underflow();
   21c1a:	0888                	c.addi4spn	a0,sp,80
   21c1c:	ab7f90ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
      result.implicit = cur.pos;
   21c20:	7786                	c.ldsp	a5,96(sp)
   21c22:	00fab823          	sd	a5,16(s5)
      break;
   21c26:	b8c1                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  bool empty() const { return base == end; }
   21c28:	77ca                	c.ldsp	a5,176(sp)
      CHECK();
   21c2a:	772a                	c.ldsp	a4,168(sp)
   21c2c:	14f70763          	beq	a4,a5,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      result.location_type = expr_result::type::literal;
   21c30:	4709                	c.li	a4,2
   21c32:	00eaa023          	sw	a4,0(s5)
      result.value = stack.back();
   21c36:	ff87b783          	ld	a5,-8(a5)
   21c3a:	00fab423          	sd	a5,8(s5)
      break;
   21c3e:	b865                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
      throw runtime_error(to_string(op) + " not implemented");
   21c40:	4541                	c.li	a0,16
   21c42:	a4ff40ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   21c46:	89aa                	c.mv	s3,a0
   21c48:	85ca                	c.mv	a1,s2
   21c4a:	0808                	c.addi4spn	a0,sp,16
   21c4c:	1f9070ef          	jal	ra,29644 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__lhs.append(__rhs)); }
   21c50:	0000d597          	auipc	a1,0xd
   21c54:	c4058593          	addi	a1,a1,-960 # 2e890 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x398>
   21c58:	0808                	c.addi4spn	a0,sp,16
   21c5a:	de7f40ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   21c5e:	85aa                	c.mv	a1,a0
   21c60:	1800                	c.addi4spn	s0,sp,48
   21c62:	8522                	c.mv	a0,s0
   21c64:	a6df40ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   21c68:	85a2                	c.mv	a1,s0
   21c6a:	854e                	c.mv	a0,s3
   21c6c:	cb5f40ef          	jal	ra,16920 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   21c70:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   21c72:	009c                	c.addi4spn	a5,sp,64
   21c74:	00f50463          	beq	a0,a5,21c7c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x16b0>
   21c78:	b29f40ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21c7c:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   21c7e:	101c                	c.addi4spn	a5,sp,32
   21c80:	00f50463          	beq	a0,a5,21c88 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x16bc>
   21c84:	b1df40ef          	jal	ra,167a0 <operator delete(void*)@plt>
   21c88:	00018617          	auipc	a2,0x18
   21c8c:	79863603          	ld	a2,1944(a2) # 3a420 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   21c90:	00019597          	auipc	a1,0x19
   21c94:	9805b583          	ld	a1,-1664(a1) # 3a610 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   21c98:	854e                	c.mv	a0,s3
   21c9a:	cc7f40ef          	jal	ra,16960 <__cxa_throw@plt>
      throw expr_error("unknown user op " + to_string(op));
   21c9e:	4541                	c.li	a0,16
   21ca0:	9f1f40ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   21ca4:	89aa                	c.mv	s3,a0
   21ca6:	85ca                	c.mv	a1,s2
   21ca8:	0808                	c.addi4spn	a0,sp,16
   21caa:	19b070ef          	jal	ra,29644 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__rhs.insert(0, __lhs)); }
   21cae:	0000d617          	auipc	a2,0xd
   21cb2:	bfa60613          	addi	a2,a2,-1030 # 2e8a8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x3b0>
   21cb6:	4581                	c.li	a1,0
   21cb8:	0808                	c.addi4spn	a0,sp,16
   21cba:	947f40ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   21cbe:	85aa                	c.mv	a1,a0
   21cc0:	1800                	c.addi4spn	s0,sp,48
   21cc2:	8522                	c.mv	a0,s0
   21cc4:	a0df40ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   21cc8:	85a2                	c.mv	a1,s0
   21cca:	854e                	c.mv	a0,s3
   21ccc:	b65f40ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   21cd0:	00018797          	auipc	a5,0x18
   21cd4:	6987b783          	ld	a5,1688(a5) # 3a368 <vtable for dwarf::expr_error@@Base+0x8e0>
   21cd8:	07c1                	c.addi	a5,16
   21cda:	00f9b023          	sd	a5,0(s3)
      { return _M_dataplus._M_p; }
   21cde:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   21ce0:	009c                	c.addi4spn	a5,sp,64
   21ce2:	00f50463          	beq	a0,a5,21cea <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x171e>
   21ce6:	abbf40ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21cea:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   21cec:	101c                	c.addi4spn	a5,sp,32
   21cee:	00f50463          	beq	a0,a5,21cf6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x172a>
   21cf2:	aaff40ef          	jal	ra,167a0 <operator delete(void*)@plt>
   21cf6:	00018617          	auipc	a2,0x18
   21cfa:	7ca63603          	ld	a2,1994(a2) # 3a4c0 <dwarf::expr_error::~expr_error()@@Base+0x182d0>
   21cfe:	00019597          	auipc	a1,0x19
   21d02:	83a5b583          	ld	a1,-1990(a1) # 3a538 <typeinfo for dwarf::expr_error@@Base+0xad8>
   21d06:	854e                	c.mv	a0,s3
   21d08:	c59f40ef          	jal	ra,16960 <__cxa_throw@plt>
      throw expr_error("bad operation " + to_string(op));
   21d0c:	4541                	c.li	a0,16
   21d0e:	983f40ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   21d12:	89aa                	c.mv	s3,a0
   21d14:	85ca                	c.mv	a1,s2
   21d16:	0808                	c.addi4spn	a0,sp,16
   21d18:	12d070ef          	jal	ra,29644 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__rhs.insert(0, __lhs)); }
   21d1c:	0000d617          	auipc	a2,0xd
   21d20:	ba460613          	addi	a2,a2,-1116 # 2e8c0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x3c8>
   21d24:	4581                	c.li	a1,0
   21d26:	0808                	c.addi4spn	a0,sp,16
   21d28:	8d9f40ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   21d2c:	85aa                	c.mv	a1,a0
   21d2e:	1800                	c.addi4spn	s0,sp,48
   21d30:	8522                	c.mv	a0,s0
   21d32:	99ff40ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   21d36:	85a2                	c.mv	a1,s0
   21d38:	854e                	c.mv	a0,s3
   21d3a:	af7f40ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   21d3e:	00018797          	auipc	a5,0x18
   21d42:	62a7b783          	ld	a5,1578(a5) # 3a368 <vtable for dwarf::expr_error@@Base+0x8e0>
   21d46:	07c1                	c.addi	a5,16
   21d48:	00f9b023          	sd	a5,0(s3)
      { return _M_dataplus._M_p; }
   21d4c:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   21d4e:	009c                	c.addi4spn	a5,sp,64
   21d50:	00f50463          	beq	a0,a5,21d58 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x178c>
   21d54:	a4df40ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21d58:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   21d5a:	101c                	c.addi4spn	a5,sp,32
   21d5c:	00f50463          	beq	a0,a5,21d64 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1798>
   21d60:	a41f40ef          	jal	ra,167a0 <operator delete(void*)@plt>
   21d64:	00018617          	auipc	a2,0x18
   21d68:	75c63603          	ld	a2,1884(a2) # 3a4c0 <dwarf::expr_error::~expr_error()@@Base+0x182d0>
   21d6c:	00018597          	auipc	a1,0x18
   21d70:	7cc5b583          	ld	a1,1996(a1) # 3a538 <typeinfo for dwarf::expr_error@@Base+0xad8>
   21d74:	854e                	c.mv	a0,s3
   21d76:	bebf40ef          	jal	ra,16960 <__cxa_throw@plt>
  throw expr_error("stack underflow evaluating DWARF expression");
   21d7a:	4541                	c.li	a0,16
   21d7c:	915f40ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   21d80:	892a                	c.mv	s2,a0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   21d82:	0000d597          	auipc	a1,0xd
   21d86:	b4e58593          	addi	a1,a1,-1202 # 2e8d0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x3d8>
   21d8a:	c87f40ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   21d8e:	00018797          	auipc	a5,0x18
   21d92:	5da7b783          	ld	a5,1498(a5) # 3a368 <vtable for dwarf::expr_error@@Base+0x8e0>
   21d96:	07c1                	c.addi	a5,16
   21d98:	00f93023          	sd	a5,0(s2)
   21d9c:	00018617          	auipc	a2,0x18
   21da0:	72463603          	ld	a2,1828(a2) # 3a4c0 <dwarf::expr_error::~expr_error()@@Base+0x182d0>
   21da4:	00018597          	auipc	a1,0x18
   21da8:	7945b583          	ld	a1,1940(a1) # 3a538 <typeinfo for dwarf::expr_error@@Base+0xad8>
   21dac:	854a                	c.mv	a0,s2
   21dae:	bb3f40ef          	jal	ra,16960 <__cxa_throw@plt>
  if (result.location_type == expr_result::type::address) {
   21db2:	000aa783          	lw	a5,0(s5)
   21db6:	c399                	c.beqz	a5,21dbc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17f0>
   21db8:	a2ffe06f          	jal	zero,207e6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a>
   21dbc:	77ca                	c.ldsp	a5,176(sp)
    if (stack.empty())
   21dbe:	772a                	c.ldsp	a4,168(sp)
   21dc0:	00f70863          	beq	a4,a5,21dd0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1804>
    result.value = stack.back();
   21dc4:	ff87b783          	ld	a5,-8(a5)
   21dc8:	00fab423          	sd	a5,8(s5)
   21dcc:	a1bfe06f          	jal	zero,207e6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a>
      throw expr_error("final stack is empty; no result given");
   21dd0:	4541                	c.li	a0,16
   21dd2:	8bff40ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   21dd6:	892a                	c.mv	s2,a0
   21dd8:	0000d597          	auipc	a1,0xd
   21ddc:	b2858593          	addi	a1,a1,-1240 # 2e900 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x408>
   21de0:	c31f40ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   21de4:	00018797          	auipc	a5,0x18
   21de8:	5847b783          	ld	a5,1412(a5) # 3a368 <vtable for dwarf::expr_error@@Base+0x8e0>
   21dec:	07c1                	c.addi	a5,16
   21dee:	00f93023          	sd	a5,0(s2)
   21df2:	00018617          	auipc	a2,0x18
   21df6:	6ce63603          	ld	a2,1742(a2) # 3a4c0 <dwarf::expr_error::~expr_error()@@Base+0x182d0>
   21dfa:	00018597          	auipc	a1,0x18
   21dfe:	73e5b583          	ld	a1,1854(a1) # 3a538 <typeinfo for dwarf::expr_error@@Base+0xad8>
   21e02:	854a                	c.mv	a0,s2
   21e04:	b5df40ef          	jal	ra,16960 <__cxa_throw@plt>
   21e08:	55fd                	c.li	a1,-1
   21e0a:	03040513          	addi	a0,s0,48
   21e0e:	fe2f40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21e12:	9f3fe06f          	jal	zero,20804 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x238>
	_M_dispose();
   21e16:	601c                	c.ld	a5,0(s0)
   21e18:	6b9c                	c.ld	a5,16(a5)
   21e1a:	8522                	c.mv	a0,s0
   21e1c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21e1e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21e22:	00018797          	auipc	a5,0x18
   21e26:	6767b783          	ld	a5,1654(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21e2a:	0007c783          	lbu	a5,0(a5)
   21e2e:	c385                	c.beqz	a5,21e4e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1882>
    _Atomic_word __result = *__mem;
   21e30:	585c                	c.lw	a5,52(s0)
    *__mem += __val;
   21e32:	fff7871b          	addiw	a4,a5,-1
   21e36:	d858                	c.sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21e38:	4705                	c.li	a4,1
   21e3a:	00e78463          	beq	a5,a4,21e42 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1876>
   21e3e:	9d1fe06f          	jal	zero,2080e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x242>
	    _M_destroy();
   21e42:	601c                	c.ld	a5,0(s0)
   21e44:	6f9c                	c.ld	a5,24(a5)
   21e46:	8522                	c.mv	a0,s0
   21e48:	9782                	c.jalr	a5
   21e4a:	9c5fe06f          	jal	zero,2080e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x242>
      return __exchange_and_add(__mem, __val);
   21e4e:	55fd                	c.li	a1,-1
   21e50:	03440513          	addi	a0,s0,52
   21e54:	f9cf40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21e58:	87aa                	c.mv	a5,a0
   21e5a:	bff9                	c.j	21e38 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x186c>
   21e5c:	55fd                	c.li	a1,-1
   21e5e:	03048513          	addi	a0,s1,48
   21e62:	f8ef40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21e66:	9c3fe06f          	jal	zero,20828 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x25c>
	_M_dispose();
   21e6a:	609c                	c.ld	a5,0(s1)
   21e6c:	6b9c                	c.ld	a5,16(a5)
   21e6e:	8526                	c.mv	a0,s1
   21e70:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21e72:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21e76:	00018797          	auipc	a5,0x18
   21e7a:	6227b783          	ld	a5,1570(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21e7e:	0007c783          	lbu	a5,0(a5)
   21e82:	c385                	c.beqz	a5,21ea2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x18d6>
    _Atomic_word __result = *__mem;
   21e84:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   21e86:	fff7871b          	addiw	a4,a5,-1
   21e8a:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21e8c:	4705                	c.li	a4,1
   21e8e:	00e78463          	beq	a5,a4,21e96 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x18ca>
   21e92:	9a1fe06f          	jal	zero,20832 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x266>
	    _M_destroy();
   21e96:	609c                	c.ld	a5,0(s1)
   21e98:	6f9c                	c.ld	a5,24(a5)
   21e9a:	8526                	c.mv	a0,s1
   21e9c:	9782                	c.jalr	a5
   21e9e:	995fe06f          	jal	zero,20832 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x266>
      return __exchange_and_add(__mem, __val);
   21ea2:	55fd                	c.li	a1,-1
   21ea4:	03448513          	addi	a0,s1,52
   21ea8:	f48f40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21eac:	87aa                	c.mv	a5,a0
   21eae:	bff9                	c.j	21e8c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x18c0>
   21eb0:	55fd                	c.li	a1,-1
   21eb2:	030b8513          	addi	a0,s7,48
   21eb6:	f3af40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21eba:	99bfe06f          	jal	zero,20854 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x288>
	_M_dispose();
   21ebe:	000bb783          	ld	a5,0(s7)
   21ec2:	6b9c                	c.ld	a5,16(a5)
   21ec4:	855e                	c.mv	a0,s7
   21ec6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21ec8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21ecc:	00018797          	auipc	a5,0x18
   21ed0:	5cc7b783          	ld	a5,1484(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21ed4:	0007c783          	lbu	a5,0(a5)
   21ed8:	c39d                	c.beqz	a5,21efe <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1932>
    _Atomic_word __result = *__mem;
   21eda:	034ba783          	lw	a5,52(s7)
    *__mem += __val;
   21ede:	fff7871b          	addiw	a4,a5,-1
   21ee2:	02ebaa23          	sw	a4,52(s7)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21ee6:	4705                	c.li	a4,1
   21ee8:	00e78463          	beq	a5,a4,21ef0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1924>
   21eec:	973fe06f          	jal	zero,2085e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x292>
	    _M_destroy();
   21ef0:	000bb783          	ld	a5,0(s7)
   21ef4:	6f9c                	c.ld	a5,24(a5)
   21ef6:	855e                	c.mv	a0,s7
   21ef8:	9782                	c.jalr	a5
   21efa:	965fe06f          	jal	zero,2085e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x292>
      return __exchange_and_add(__mem, __val);
   21efe:	55fd                	c.li	a1,-1
   21f00:	034b8513          	addi	a0,s7,52
   21f04:	eecf40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21f08:	87aa                	c.mv	a5,a0
   21f0a:	bff1                	c.j	21ee6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x191a>
      throw runtime_error("DW_OP_fbreg not implemented");
   21f0c:	842a                	c.mv	s0,a0
   21f0e:	854a                	c.mv	a0,s2
   21f10:	841f40ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   21f14:	6566                	c.ldsp	a0,88(sp)
   21f16:	c511                	c.beqz	a0,21f22 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1956>
	  _M_pi->_M_release();
   21f18:	00018317          	auipc	t1,0x18
   21f1c:	4c833303          	ld	t1,1224(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   21f20:	9302                	c.jalr	t1
   21f22:	8526                	c.mv	a0,s1
   21f24:	00018317          	auipc	t1,0x18
   21f28:	4bc33303          	ld	t1,1212(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   21f2c:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   21f2e:	000b8863          	beq	s7,zero,21f3e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1972>
	  _M_pi->_M_release();
   21f32:	855e                	c.mv	a0,s7
   21f34:	00018317          	auipc	t1,0x18
   21f38:	4ac33303          	ld	t1,1196(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   21f3c:	9302                	c.jalr	t1
    for (T *p = base; p < end; ++p)
   21f3e:	752a                	c.ldsp	a0,168(sp)
   21f40:	87aa                	c.mv	a5,a0
   21f42:	774a                	c.ldsp	a4,176(sp)
   21f44:	10e7e163          	bltu	a5,a4,22046 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a7a>
    if ((char *)base != buf)
   21f48:	10bc                	c.addi4spn	a5,sp,104
   21f4a:	00f50563          	beq	a0,a5,21f54 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1988>
      delete[] (char *)base;
   21f4e:	c119                	c.beqz	a0,21f54 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1988>
   21f50:	901f40ef          	jal	ra,16850 <operator delete[](void*)@plt>
   21f54:	8522                	c.mv	a0,s0
   21f56:	a3bf40ef          	jal	ra,16990 <_Unwind_Resume@plt>
        throw expr_error("DW_OP_deref_size operand exceeds address size");
   21f5a:	842a                	c.mv	s0,a0
   21f5c:	854a                	c.mv	a0,s2
   21f5e:	ff2f40ef          	jal	ra,16750 <__cxa_free_exception@plt>
   21f62:	bf4d                	c.j	21f14 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
        throw expr_error("DW_OP_xderef_size operand exceeds address size");
   21f64:	842a                	c.mv	s0,a0
   21f66:	854a                	c.mv	a0,s2
   21f68:	fe8f40ef          	jal	ra,16750 <__cxa_free_exception@plt>
   21f6c:	b765                	c.j	21f14 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      throw runtime_error("DW_OP_push_object_address not implemented");
   21f6e:	842a                	c.mv	s0,a0
   21f70:	854a                	c.mv	a0,s2
   21f72:	fdef40ef          	jal	ra,16750 <__cxa_free_exception@plt>
   21f76:	bf79                	c.j	21f14 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      throw runtime_error("DW_OP_call_frame_cfa not implemented");
   21f78:	842a                	c.mv	s0,a0
   21f7a:	854a                	c.mv	a0,s2
   21f7c:	fd4f40ef          	jal	ra,16750 <__cxa_free_exception@plt>
   21f80:	bf51                	c.j	21f14 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      { return _M_dataplus._M_p; }
   21f82:	842a                	c.mv	s0,a0
   21f84:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   21f86:	009c                	c.addi4spn	a5,sp,64
   21f88:	00f50463          	beq	a0,a5,21f90 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19c4>
   21f8c:	815f40ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21f90:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   21f92:	101c                	c.addi4spn	a5,sp,32
   21f94:	00f50463          	beq	a0,a5,21f9c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19d0>
   21f98:	809f40ef          	jal	ra,167a0 <operator delete(void*)@plt>
      throw runtime_error(to_string(op) + " not implemented");
   21f9c:	854e                	c.mv	a0,s3
   21f9e:	fb2f40ef          	jal	ra,16750 <__cxa_free_exception@plt>
   21fa2:	bf8d                	c.j	21f14 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      { return _M_dataplus._M_p; }
   21fa4:	842a                	c.mv	s0,a0
   21fa6:	b7ed                	c.j	21f90 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19c4>
   21fa8:	842a                	c.mv	s0,a0
   21faa:	bfcd                	c.j	21f9c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19d0>
   21fac:	842a                	c.mv	s0,a0
   21fae:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   21fb0:	009c                	c.addi4spn	a5,sp,64
   21fb2:	00f50463          	beq	a0,a5,21fba <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19ee>
   21fb6:	feaf40ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21fba:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   21fbc:	101c                	c.addi4spn	a5,sp,32
   21fbe:	00f50463          	beq	a0,a5,21fc6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19fa>
   21fc2:	fdef40ef          	jal	ra,167a0 <operator delete(void*)@plt>
      throw runtime_error(to_string(op) + " not implemented");
   21fc6:	854e                	c.mv	a0,s3
   21fc8:	f88f40ef          	jal	ra,16750 <__cxa_free_exception@plt>
   21fcc:	b7a1                	c.j	21f14 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      { return _M_dataplus._M_p; }
   21fce:	842a                	c.mv	s0,a0
   21fd0:	b7ed                	c.j	21fba <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19ee>
   21fd2:	842a                	c.mv	s0,a0
   21fd4:	bfcd                	c.j	21fc6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19fa>
   21fd6:	842a                	c.mv	s0,a0
   21fd8:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   21fda:	009c                	c.addi4spn	a5,sp,64
   21fdc:	00f50463          	beq	a0,a5,21fe4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a18>
   21fe0:	fc0f40ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21fe4:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   21fe6:	101c                	c.addi4spn	a5,sp,32
   21fe8:	00f50463          	beq	a0,a5,21ff0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a24>
   21fec:	fb4f40ef          	jal	ra,167a0 <operator delete(void*)@plt>
      throw expr_error("unknown user op " + to_string(op));
   21ff0:	854e                	c.mv	a0,s3
   21ff2:	f5ef40ef          	jal	ra,16750 <__cxa_free_exception@plt>
   21ff6:	bf39                	c.j	21f14 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      { return _M_dataplus._M_p; }
   21ff8:	842a                	c.mv	s0,a0
   21ffa:	b7ed                	c.j	21fe4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a18>
   21ffc:	842a                	c.mv	s0,a0
   21ffe:	bfcd                	c.j	21ff0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a24>
   22000:	842a                	c.mv	s0,a0
   22002:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   22004:	009c                	c.addi4spn	a5,sp,64
   22006:	00f50463          	beq	a0,a5,2200e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a42>
   2200a:	f96f40ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2200e:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   22010:	101c                	c.addi4spn	a5,sp,32
   22012:	00f50463          	beq	a0,a5,2201a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a4e>
   22016:	f8af40ef          	jal	ra,167a0 <operator delete(void*)@plt>
      throw expr_error("bad operation " + to_string(op));
   2201a:	854e                	c.mv	a0,s3
   2201c:	f34f40ef          	jal	ra,16750 <__cxa_free_exception@plt>
   22020:	bdd5                	c.j	21f14 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      { return _M_dataplus._M_p; }
   22022:	842a                	c.mv	s0,a0
   22024:	b7ed                	c.j	2200e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a42>
   22026:	842a                	c.mv	s0,a0
   22028:	bfcd                	c.j	2201a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a4e>
      throw expr_error("final stack is empty; no result given");
   2202a:	842a                	c.mv	s0,a0
   2202c:	854a                	c.mv	a0,s2
   2202e:	f22f40ef          	jal	ra,16750 <__cxa_free_exception@plt>
   22032:	b5cd                	c.j	21f14 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
  throw expr_error("stack underflow evaluating DWARF expression");
   22034:	842a                	c.mv	s0,a0
   22036:	854a                	c.mv	a0,s2
   22038:	f18f40ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2203c:	bde1                	c.j	21f14 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
	if (_M_pi != nullptr)
   2203e:	842a                	c.mv	s0,a0
   22040:	b5fd                	c.j	21f2e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1962>
    for (T *p = base; p < end; ++p)
   22042:	842a                	c.mv	s0,a0
   22044:	bded                	c.j	21f3e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1972>
   22046:	07a1                	c.addi	a5,8
   22048:	bded                	c.j	21f42 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1976>
        val |= ((uint64_t)p[i]) << (i * 8);
   2204a:	0007cc83          	lbu	s9,0(a5)
    pos += sizeof(T);
   2204e:	0785                	c.addi	a5,1
   22050:	f0be                	c.sdsp	a5,96(sp)
  size_type size() const { return end - base; }
   22052:	772a                	c.ldsp	a4,168(sp)
   22054:	77ca                	c.ldsp	a5,176(sp)
   22056:	8f99                	c.sub	a5,a4
   22058:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   2205a:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   2205c:	796a                	c.ldsp	s2,184(sp)
   2205e:	40e90933          	sub	s2,s2,a4
   22062:	40395913          	srai	s2,s2,0x3
   22066:	00f96463          	bltu	s2,a5,2206e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1aa2>
   2206a:	ac9fe06f          	jal	zero,20b32 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x566>
   2206e:	00091363          	bne	s2,zero,22074 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1aa8>
   22072:	4905                	c.li	s2,1
    while (target < n)
   22074:	00f97563          	bgeu	s2,a5,2207e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ab2>
      target <<= 1;
   22078:	0906                	c.slli	s2,0x1
    while (target < n)
   2207a:	fef96fe3          	bltu	s2,a5,22078 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1aac>
    char *newbuf = new char[sizeof(T[target])];
   2207e:	090e                	c.slli	s2,0x3
   22080:	854a                	c.mv	a0,s2
   22082:	d0ef40ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   22086:	a77fe06f          	jal	zero,20afc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x530>
        val |= ((uint64_t)p[i]) << (i * 8);
   2208a:	0007cc83          	lbu	s9,0(a5)
    pos += sizeof(T);
   2208e:	0785                	c.addi	a5,1
   22090:	f0be                	c.sdsp	a5,96(sp)
      stack.push_back(cur.fixed<int8_t>());
   22092:	018c9c9b          	slliw	s9,s9,0x18
   22096:	418cdc9b          	sraiw	s9,s9,0x18
  size_type size() const { return end - base; }
   2209a:	772a                	c.ldsp	a4,168(sp)
   2209c:	77ca                	c.ldsp	a5,176(sp)
   2209e:	8f99                	c.sub	a5,a4
   220a0:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   220a2:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   220a4:	796a                	c.ldsp	s2,184(sp)
   220a6:	40e90933          	sub	s2,s2,a4
   220aa:	40395913          	srai	s2,s2,0x3
   220ae:	00f96463          	bltu	s2,a5,220b6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1aea>
   220b2:	d53fe06f          	jal	zero,20e04 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x838>
   220b6:	00091363          	bne	s2,zero,220bc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1af0>
   220ba:	4905                	c.li	s2,1
    while (target < n)
   220bc:	00f97563          	bgeu	s2,a5,220c6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1afa>
      target <<= 1;
   220c0:	0906                	c.slli	s2,0x1
    while (target < n)
   220c2:	fef96fe3          	bltu	s2,a5,220c0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1af4>
    char *newbuf = new char[sizeof(T[target])];
   220c6:	090e                	c.slli	s2,0x3
   220c8:	854a                	c.mv	a0,s2
   220ca:	cc6f40ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   220ce:	d01fe06f          	jal	zero,20dce <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x802>
        val |= ((uint64_t)p[i]) << (i * 8);
   220d2:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   220d6:	0785                	c.addi	a5,1
   220d8:	f0be                	c.sdsp	a5,96(sp)
  size_type size() const { return end - base; }
   220da:	774a                	c.ldsp	a4,176(sp)
   220dc:	762a                	c.ldsp	a2,168(sp)
   220de:	40c707b3          	sub	a5,a4,a2
   220e2:	878d                	c.srai	a5,0x3
      CHECKN(tmp1.u);
   220e4:	c8d7ebe3          	bltu	a5,a3,21d7a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
  reference revat(size_type n) { return *(end - 1 - n); }
   220e8:	068e                	c.slli	a3,0x3
   220ea:	8f15                	c.sub	a4,a3
   220ec:	ff870a13          	addi	s4,a4,-8
    reserve(size() + 1);
   220f0:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   220f2:	796a                	c.ldsp	s2,184(sp)
   220f4:	40c90933          	sub	s2,s2,a2
   220f8:	40395913          	srai	s2,s2,0x3
   220fc:	aaf97963          	bgeu	s2,a5,213ae <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xde2>
   22100:	00091363          	bne	s2,zero,22106 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b3a>
   22104:	4905                	c.li	s2,1
    while (target < n)
   22106:	00f97563          	bgeu	s2,a5,22110 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b44>
      target <<= 1;
   2210a:	0906                	c.slli	s2,0x1
    while (target < n)
   2210c:	fef96fe3          	bltu	s2,a5,2210a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b3e>
    char *newbuf = new char[sizeof(T[target])];
   22110:	090e                	c.slli	s2,0x3
   22112:	854a                	c.mv	a0,s2
   22114:	c7cf40ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   22118:	a60ff06f          	jal	zero,21378 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdac>
        val |= ((uint64_t)p[i]) << (i * 8);
   2211c:	0007c603          	lbu	a2,0(a5)
    pos += sizeof(T);
   22120:	0785                	c.addi	a5,1
   22122:	f0be                	c.sdsp	a5,96(sp)
      if (tmp1.u > subsec->addr_size)
   22124:	0584e783          	lwu	a5,88(s1)
   22128:	b6c7f763          	bgeu	a5,a2,21496 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xeca>
        throw expr_error("DW_OP_deref_size operand exceeds address size");
   2212c:	4541                	c.li	a0,16
   2212e:	d62f40ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   22132:	892a                	c.mv	s2,a0
   22134:	0000c597          	auipc	a1,0xc
   22138:	6a458593          	addi	a1,a1,1700 # 2e7d8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x2e0>
   2213c:	8d5f40ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   22140:	b8eff06f          	jal	zero,214ce <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf02>
        val |= ((uint64_t)p[i]) << (i * 8);
   22144:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   22148:	0785                	c.addi	a5,1
   2214a:	f0be                	c.sdsp	a5,96(sp)
      if (tmp1.u > subsec->addr_size)
   2214c:	0584e783          	lwu	a5,88(s1)
   22150:	bcd7f163          	bgeu	a5,a3,21512 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf46>
        throw expr_error("DW_OP_xderef_size operand exceeds address size");
   22154:	4541                	c.li	a0,16
   22156:	d3af40ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2215a:	892a                	c.mv	s2,a0
   2215c:	0000c597          	auipc	a1,0xc
   22160:	6ac58593          	addi	a1,a1,1708 # 2e808 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x310>
   22164:	8adf40ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   22168:	bf0ff06f          	jal	zero,21558 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf8c>
        val |= ((uint64_t)p[i]) << (i * 8);
   2216c:	00074783          	lbu	a5,0(a4)
    pos += sizeof(T);
   22170:	0705                	c.addi	a4,1
   22172:	f0ba                	c.sdsp	a4,96(sp)
    return (T)val;
   22174:	0ff7f913          	andi	s2,a5,255
    switch (op) {
   22178:	37f5                	c.addiw	a5,-3
   2217a:	0ff7f613          	andi	a2,a5,255
   2217e:	b8c9e7e3          	bltu	s3,a2,21d0c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1740>
   22182:	00261793          	slli	a5,a2,0x2
   22186:	97a2                	c.add	a5,s0
   22188:	439c                	c.lw	a5,0(a5)
   2218a:	97a2                	c.add	a5,s0
   2218c:	8782                	c.jr	a5

000000000002218e <dwarf::expr::evaluate(dwarf::expr_context*) const>:
expr_result expr::evaluate(expr_context *ctx) const {
   2218e:	1101                	c.addi	sp,-32
   22190:	ec06                	c.sdsp	ra,24(sp)
   22192:	e822                	c.sdsp	s0,16(sp)
   22194:	842a                	c.mv	s0,a0
  return evaluate(ctx, {});
   22196:	e002                	c.sdsp	zero,0(sp)
   22198:	e402                	c.sdsp	zero,8(sp)
   2219a:	868a                	c.mv	a3,sp
   2219c:	c30fe0ef          	jal	ra,205cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const>
}
   221a0:	8522                	c.mv	a0,s0
   221a2:	60e2                	c.ldsp	ra,24(sp)
   221a4:	6442                	c.ldsp	s0,16(sp)
   221a6:	6105                	c.addi16sp	sp,32
   221a8:	8082                	c.jr	ra

00000000000221aa <dwarf::expr::evaluate(dwarf::expr_context*, unsigned long) const>:
expr_result expr::evaluate(expr_context *ctx, taddr argument) const {
   221aa:	7179                	c.addi16sp	sp,-48
   221ac:	f406                	c.sdsp	ra,40(sp)
   221ae:	f022                	c.sdsp	s0,32(sp)
   221b0:	842a                	c.mv	s0,a0
  return evaluate(ctx, {argument});
   221b2:	ec36                	c.sdsp	a3,24(sp)
   221b4:	083c                	c.addi4spn	a5,sp,24
   221b6:	e43e                	c.sdsp	a5,8(sp)
   221b8:	4785                	c.li	a5,1
   221ba:	e83e                	c.sdsp	a5,16(sp)
   221bc:	0034                	c.addi4spn	a3,sp,8
   221be:	c0efe0ef          	jal	ra,205cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const>
}
   221c2:	8522                	c.mv	a0,s0
   221c4:	70a2                	c.ldsp	ra,40(sp)
   221c6:	7402                	c.ldsp	s0,32(sp)
   221c8:	6145                	c.addi16sp	sp,48
   221ca:	8082                	c.jr	ra

00000000000221cc <_GLOBAL__sub_I_expr.cc>:

DWARFPP_END_NAMESPACE
   221cc:	1141                	c.addi	sp,-16
   221ce:	e406                	c.sdsp	ra,8(sp)
expr_context no_expr_context;
   221d0:	e3018613          	addi	a2,gp,-464 # 3a630 <__dso_handle>
   221d4:	00018597          	auipc	a1,0x18
   221d8:	16c5b583          	ld	a1,364(a1) # 3a340 <dwarf::no_expr_context@@Base+0x338>
   221dc:	00018517          	auipc	a0,0x18
   221e0:	10c53503          	ld	a0,268(a0) # 3a2e8 <dwarf::expr_context::~expr_context()@@Base+0x180fa>
   221e4:	fdcf40ef          	jal	ra,169c0 <__cxa_atexit@plt>
DWARFPP_END_NAMESPACE
   221e8:	60a2                	c.ldsp	ra,8(sp)
   221ea:	0141                	c.addi	sp,16
   221ec:	8082                	c.jr	ra

00000000000221ee <dwarf::expr_context::~expr_context()>:
  virtual ~expr_context() {}
   221ee:	8082                	c.jr	ra

00000000000221f0 <dwarf::expr_error::~expr_error()>:
class expr_error : public std::runtime_error {
   221f0:	1141                	c.addi	sp,-16
   221f2:	e406                	c.sdsp	ra,8(sp)
   221f4:	00018797          	auipc	a5,0x18
   221f8:	1747b783          	ld	a5,372(a5) # 3a368 <vtable for dwarf::expr_error@@Base+0x8e0>
   221fc:	07c1                	c.addi	a5,16
   221fe:	e11c                	c.sd	a5,0(a0)
   22200:	dd0f40ef          	jal	ra,167d0 <std::runtime_error::~runtime_error()@plt>
   22204:	60a2                	c.ldsp	ra,8(sp)
   22206:	0141                	c.addi	sp,16
   22208:	8082                	c.jr	ra

000000000002220a <dwarf::expr_error::~expr_error()>:
   2220a:	1141                	c.addi	sp,-16
   2220c:	e406                	c.sdsp	ra,8(sp)
   2220e:	e022                	c.sdsp	s0,0(sp)
   22210:	842a                	c.mv	s0,a0
   22212:	00018797          	auipc	a5,0x18
   22216:	1567b783          	ld	a5,342(a5) # 3a368 <vtable for dwarf::expr_error@@Base+0x8e0>
   2221a:	07c1                	c.addi	a5,16
   2221c:	e11c                	c.sd	a5,0(a0)
   2221e:	db2f40ef          	jal	ra,167d0 <std::runtime_error::~runtime_error()@plt>
   22222:	8522                	c.mv	a0,s0
   22224:	d7cf40ef          	jal	ra,167a0 <operator delete(void*)@plt>
   22228:	60a2                	c.ldsp	ra,8(sp)
   2222a:	6402                	c.ldsp	s0,0(sp)
   2222c:	0141                	c.addi	sp,16
   2222e:	8082                	c.jr	ra

0000000000022230 <dwarf::expr_context::~expr_context()>:
  virtual ~expr_context() {}
   22230:	1141                	c.addi	sp,-16
   22232:	e406                	c.sdsp	ra,8(sp)
   22234:	d6cf40ef          	jal	ra,167a0 <operator delete(void*)@plt>
   22238:	60a2                	c.ldsp	ra,8(sp)
   2223a:	0141                	c.addi	sp,16
   2223c:	8082                	c.jr	ra

000000000002223e <dwarf::expr_context::form_tls_address(unsigned long)>:
  virtual taddr form_tls_address(taddr address) {
   2223e:	1101                	c.addi	sp,-32
   22240:	ec06                	c.sdsp	ra,24(sp)
   22242:	e822                	c.sdsp	s0,16(sp)
   22244:	e426                	c.sdsp	s1,8(sp)
    throw expr_error("DW_OP_form_tls_address operations not supported");
   22246:	4541                	c.li	a0,16
   22248:	c48f40ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2224c:	842a                	c.mv	s0,a0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   2224e:	0000c597          	auipc	a1,0xc
   22252:	4b258593          	addi	a1,a1,1202 # 2e700 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x208>
   22256:	fbaf40ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   2225a:	00018797          	auipc	a5,0x18
   2225e:	10e7b783          	ld	a5,270(a5) # 3a368 <vtable for dwarf::expr_error@@Base+0x8e0>
   22262:	07c1                	c.addi	a5,16
   22264:	e01c                	c.sd	a5,0(s0)
    throw expr_error("DW_OP_form_tls_address operations not supported");
   22266:	00018617          	auipc	a2,0x18
   2226a:	25a63603          	ld	a2,602(a2) # 3a4c0 <dwarf::expr_error::~expr_error()@@Base+0x182d0>
   2226e:	00018597          	auipc	a1,0x18
   22272:	2ca5b583          	ld	a1,714(a1) # 3a538 <typeinfo for dwarf::expr_error@@Base+0xad8>
   22276:	8522                	c.mv	a0,s0
   22278:	ee8f40ef          	jal	ra,16960 <__cxa_throw@plt>
   2227c:	84aa                	c.mv	s1,a0
   2227e:	8522                	c.mv	a0,s0
   22280:	cd0f40ef          	jal	ra,16750 <__cxa_free_exception@plt>
   22284:	8526                	c.mv	a0,s1
   22286:	f0af40ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002228a <dwarf::expr_context::xderef_size(unsigned long, unsigned long, unsigned int)>:
  virtual taddr xderef_size(taddr address, taddr asid, unsigned size) {
   2228a:	1101                	c.addi	sp,-32
   2228c:	ec06                	c.sdsp	ra,24(sp)
   2228e:	e822                	c.sdsp	s0,16(sp)
   22290:	e426                	c.sdsp	s1,8(sp)
    throw expr_error("DW_OP_xderef_size operations not supported");
   22292:	4541                	c.li	a0,16
   22294:	bfcf40ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   22298:	842a                	c.mv	s0,a0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   2229a:	0000c597          	auipc	a1,0xc
   2229e:	49658593          	addi	a1,a1,1174 # 2e730 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x238>
   222a2:	f6ef40ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   222a6:	00018797          	auipc	a5,0x18
   222aa:	0c27b783          	ld	a5,194(a5) # 3a368 <vtable for dwarf::expr_error@@Base+0x8e0>
   222ae:	07c1                	c.addi	a5,16
   222b0:	e01c                	c.sd	a5,0(s0)
    throw expr_error("DW_OP_xderef_size operations not supported");
   222b2:	00018617          	auipc	a2,0x18
   222b6:	20e63603          	ld	a2,526(a2) # 3a4c0 <dwarf::expr_error::~expr_error()@@Base+0x182d0>
   222ba:	00018597          	auipc	a1,0x18
   222be:	27e5b583          	ld	a1,638(a1) # 3a538 <typeinfo for dwarf::expr_error@@Base+0xad8>
   222c2:	8522                	c.mv	a0,s0
   222c4:	e9cf40ef          	jal	ra,16960 <__cxa_throw@plt>
   222c8:	84aa                	c.mv	s1,a0
   222ca:	8522                	c.mv	a0,s0
   222cc:	c84f40ef          	jal	ra,16750 <__cxa_free_exception@plt>
   222d0:	8526                	c.mv	a0,s1
   222d2:	ebef40ef          	jal	ra,16990 <_Unwind_Resume@plt>

00000000000222d6 <dwarf::expr_context::deref_size(unsigned long, unsigned int)>:
  virtual taddr deref_size(taddr address, unsigned size) {
   222d6:	1101                	c.addi	sp,-32
   222d8:	ec06                	c.sdsp	ra,24(sp)
   222da:	e822                	c.sdsp	s0,16(sp)
   222dc:	e426                	c.sdsp	s1,8(sp)
    throw expr_error("DW_OP_deref_size operations not supported");
   222de:	4541                	c.li	a0,16
   222e0:	bb0f40ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   222e4:	842a                	c.mv	s0,a0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   222e6:	0000c597          	auipc	a1,0xc
   222ea:	47a58593          	addi	a1,a1,1146 # 2e760 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x268>
   222ee:	f22f40ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   222f2:	00018797          	auipc	a5,0x18
   222f6:	0767b783          	ld	a5,118(a5) # 3a368 <vtable for dwarf::expr_error@@Base+0x8e0>
   222fa:	07c1                	c.addi	a5,16
   222fc:	e01c                	c.sd	a5,0(s0)
    throw expr_error("DW_OP_deref_size operations not supported");
   222fe:	00018617          	auipc	a2,0x18
   22302:	1c263603          	ld	a2,450(a2) # 3a4c0 <dwarf::expr_error::~expr_error()@@Base+0x182d0>
   22306:	00018597          	auipc	a1,0x18
   2230a:	2325b583          	ld	a1,562(a1) # 3a538 <typeinfo for dwarf::expr_error@@Base+0xad8>
   2230e:	8522                	c.mv	a0,s0
   22310:	e50f40ef          	jal	ra,16960 <__cxa_throw@plt>
   22314:	84aa                	c.mv	s1,a0
   22316:	8522                	c.mv	a0,s0
   22318:	c38f40ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2231c:	8526                	c.mv	a0,s1
   2231e:	e72f40ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000022322 <dwarf::expr_context::reg(unsigned int)>:
  virtual taddr reg(unsigned regnum) {
   22322:	1101                	c.addi	sp,-32
   22324:	ec06                	c.sdsp	ra,24(sp)
   22326:	e822                	c.sdsp	s0,16(sp)
   22328:	e426                	c.sdsp	s1,8(sp)
    throw expr_error("DW_OP_breg* operations not supported");
   2232a:	4541                	c.li	a0,16
   2232c:	b64f40ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   22330:	842a                	c.mv	s0,a0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   22332:	0000c597          	auipc	a1,0xc
   22336:	45e58593          	addi	a1,a1,1118 # 2e790 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x298>
   2233a:	ed6f40ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   2233e:	00018797          	auipc	a5,0x18
   22342:	02a7b783          	ld	a5,42(a5) # 3a368 <vtable for dwarf::expr_error@@Base+0x8e0>
   22346:	07c1                	c.addi	a5,16
   22348:	e01c                	c.sd	a5,0(s0)
    throw expr_error("DW_OP_breg* operations not supported");
   2234a:	00018617          	auipc	a2,0x18
   2234e:	17663603          	ld	a2,374(a2) # 3a4c0 <dwarf::expr_error::~expr_error()@@Base+0x182d0>
   22352:	00018597          	auipc	a1,0x18
   22356:	1e65b583          	ld	a1,486(a1) # 3a538 <typeinfo for dwarf::expr_error@@Base+0xad8>
   2235a:	8522                	c.mv	a0,s0
   2235c:	e04f40ef          	jal	ra,16960 <__cxa_throw@plt>
   22360:	84aa                	c.mv	s1,a0
   22362:	8522                	c.mv	a0,s0
   22364:	becf40ef          	jal	ra,16750 <__cxa_free_exception@plt>
   22368:	8526                	c.mv	a0,s1
   2236a:	e26f40ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002236e <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)>:

using namespace std;

DWARFPP_BEGIN_NAMESPACE

rangelist::rangelist(const std::shared_ptr<section> &sec, section_offset off,
   2236e:	715d                	c.addi16sp	sp,-80
   22370:	e486                	c.sdsp	ra,72(sp)
   22372:	e0a2                	c.sdsp	s0,64(sp)
   22374:	fc26                	c.sdsp	s1,56(sp)
   22376:	f84a                	c.sdsp	s2,48(sp)
   22378:	f44e                	c.sdsp	s3,40(sp)
   2237a:	f052                	c.sdsp	s4,32(sp)
   2237c:	ec56                	c.sdsp	s5,24(sp)
   2237e:	e85a                	c.sdsp	s6,16(sp)
   22380:	842a                	c.mv	s0,a0
   22382:	89b6                	c.mv	s3,a3
   22384:	8a3a                	c.mv	s4,a4
	: _M_start(), _M_finish(), _M_end_of_storage()
   22386:	00053023          	sd	zero,0(a0)
   2238a:	00053423          	sd	zero,8(a0)
   2238e:	00053823          	sd	zero,16(a0)
      { return _M_ptr; }
   22392:	0005b903          	ld	s2,0(a1)
   22396:	57fd                	c.li	a5,-1
   22398:	e03e                	c.sdsp	a5,0(sp)
      fmt = this->fmt;
   2239a:	01892a83          	lw	s5,24(s2)
    if (addr_size == 0)
   2239e:	e299                	c.bnez	a3,223a4 <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)+0x36>
      addr_size = this->addr_size;
   223a0:	02092983          	lw	s3,32(s2)
        type, begin + start, std::min(len, (section_length)(end - begin)), ord,
   223a4:	00893703          	ld	a4,8(s2)
   223a8:	00c704b3          	add	s1,a4,a2
   223ac:	01093783          	ld	a5,16(s2)
   223b0:	8f99                	c.sub	a5,a4
   223b2:	e43e                	c.sdsp	a5,8(sp)
      if (__b < __a)
   223b4:	577d                	c.li	a4,-1
	return __b;
   223b6:	00810b13          	addi	s6,sp,8
      if (__b < __a)
   223ba:	00e79363          	bne	a5,a4,223c0 <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)+0x52>
      return __a;
   223be:	8b0a                	c.mv	s6,sp
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   223c0:	00043c23          	sd	zero,24(s0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   223c4:	06000513          	addi	a0,zero,96
   223c8:	be8f40ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   223cc:	00052423          	sw	zero,8(a0)
   223d0:	00052623          	sw	zero,12(a0)
   223d4:	00052823          	sw	zero,16(a0)
   223d8:	00052a23          	sw	zero,20(a0)
   223dc:	00052c23          	sw	zero,24(a0)
   223e0:	00052e23          	sw	zero,28(a0)
   223e4:	02053023          	sd	zero,32(a0)
   223e8:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   223ec:	4785                	c.li	a5,1
   223ee:	d91c                	c.sw	a5,48(a0)
   223f0:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   223f2:	00018797          	auipc	a5,0x18
   223f6:	1e67b783          	ld	a5,486(a5) # 3a5d8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   223fa:	07c1                	c.addi	a5,16
   223fc:	e11c                	c.sd	a5,0(a0)
   223fe:	00092683          	lw	a3,0(s2)
   22402:	000b3703          	ld	a4,0(s6)
   22406:	01c92783          	lw	a5,28(s2)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   2240a:	dd14                	c.sw	a3,56(a0)
   2240c:	e124                	c.sd	s1,64(a0)
   2240e:	94ba                	c.add	s1,a4
   22410:	e524                	c.sd	s1,72(a0)
   22412:	05552823          	sw	s5,80(a0)
        ord(ord), addr_size(addr_size) {}
   22416:	c97c                	c.sw	a5,84(a0)
   22418:	05352c23          	sw	s3,88(a0)
	  _M_pi = __pi;
   2241c:	f008                	c.sd	a0,32(s0)
   2241e:	03850793          	addi	a5,a0,56
	  __p = __pi->_M_ptr();
   22422:	ec1c                	c.sd	a5,24(s0)
                     unsigned cu_addr_size, taddr cu_low_pc)
    : sec(sec->slice(off, ~0, format::unknown, cu_addr_size)),
      base_addr(cu_low_pc) {}
   22424:	03443423          	sd	s4,40(s0)
   22428:	60a6                	c.ldsp	ra,72(sp)
   2242a:	6406                	c.ldsp	s0,64(sp)
   2242c:	74e2                	c.ldsp	s1,56(sp)
   2242e:	7942                	c.ldsp	s2,48(sp)
   22430:	79a2                	c.ldsp	s3,40(sp)
   22432:	7a02                	c.ldsp	s4,32(sp)
   22434:	6ae2                	c.ldsp	s5,24(sp)
   22436:	6b42                	c.ldsp	s6,16(sp)
   22438:	6161                	c.addi16sp	sp,80
   2243a:	8082                	c.jr	ra
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   2243c:	84aa                	c.mv	s1,a0
   2243e:	6008                	c.ld	a0,0(s0)
	if (__p)
   22440:	c119                	c.beqz	a0,22446 <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)+0xd8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   22442:	b5ef40ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   22446:	8526                	c.mv	a0,s1
   22448:	d48f40ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002244c <dwarf::rangelist::end() const>:
      : _M_ptr(0), _M_refcount()
   2244c:	00053023          	sd	zero,0(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   22450:	00053423          	sd	zero,8(a0)
  iterator() : sec(nullptr), base_addr(0), pos(0) {}
   22454:	00053823          	sd	zero,16(a0)
   22458:	00053c23          	sd	zero,24(a0)
  if (sec)
    return iterator(sec, base_addr);
  return end();
}

rangelist::iterator rangelist::end() const { return iterator(); }
   2245c:	8082                	c.jr	ra

000000000002245e <dwarf::rangelist::iterator::operator++()>:
    : sec(sec), base_addr(base_addr), pos(0) {
  // Read in the first entry
  ++(*this);
}

rangelist::iterator &rangelist::iterator::operator++() {
   2245e:	715d                	c.addi16sp	sp,-80
   22460:	e486                	c.sdsp	ra,72(sp)
   22462:	e0a2                	c.sdsp	s0,64(sp)
   22464:	fc26                	c.sdsp	s1,56(sp)
   22466:	f84a                	c.sdsp	s2,48(sp)
   22468:	f44e                	c.sdsp	s3,40(sp)
   2246a:	f052                	c.sdsp	s4,32(sp)
   2246c:	842a                	c.mv	s0,a0
      { return _M_ptr; }
   2246e:	6104                	c.ld	s1,0(a0)
  // DWARF4 section 2.17.3
  taddr largest_offset = ~(taddr)0;
  if (sec->addr_size < sizeof(taddr))
   22470:	509c                	c.lw	a5,32(s1)
   22472:	471d                	c.li	a4,7
  taddr largest_offset = ~(taddr)0;
   22474:	5a7d                	c.li	s4,-1
  if (sec->addr_size < sizeof(taddr))
   22476:	00f76863          	bltu	a4,a5,22486 <dwarf::rangelist::iterator::operator++()+0x28>
    largest_offset += 1 << (8 * sec->addr_size);
   2247a:	0037979b          	slliw	a5,a5,0x3
   2247e:	4a05                	c.li	s4,1
   22480:	00fa1a3b          	sllw	s4,s4,a5
   22484:	1a7d                	c.addi	s4,-1
      : _M_pi(__r._M_pi)
   22486:	00843903          	ld	s2,8(s0)
	if (_M_pi != nullptr)
   2248a:	20090963          	beq	s2,zero,2269c <dwarf::rangelist::iterator::operator++()+0x23e>
    if (__is_single_threaded())
   2248e:	00018797          	auipc	a5,0x18
   22492:	00a7b783          	ld	a5,10(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   22496:	0007c783          	lbu	a5,0(a5)
   2249a:	c7d1                	c.beqz	a5,22526 <dwarf::rangelist::iterator::operator++()+0xc8>
  { *__mem += __val; }
   2249c:	03092783          	lw	a5,48(s2)
   224a0:	2785                	c.addiw	a5,1
   224a2:	02f92823          	sw	a5,48(s2)

  // Read in entries until we reach a regular entry of an
  // end-of-list.  Note that pos points to the beginning of the
  // entry *following* the current entry, so that's where we
  // start.
  cursor cur(sec, pos);
   224a6:	01843983          	ld	s3,24(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   224aa:	e426                	c.sdsp	s1,8(sp)
      : _M_pi(__r._M_pi)
   224ac:	e84a                	c.sdsp	s2,16(sp)
    if (__is_single_threaded())
   224ae:	00018797          	auipc	a5,0x18
   224b2:	fea7b783          	ld	a5,-22(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   224b6:	0007c783          	lbu	a5,0(a5)
   224ba:	cfa5                	c.beqz	a5,22532 <dwarf::rangelist::iterator::operator++()+0xd4>
  { *__mem += __val; }
   224bc:	03092783          	lw	a5,48(s2)
   224c0:	2785                	c.addiw	a5,1
   224c2:	02f92823          	sw	a5,48(s2)
      : sec(sec), pos(sec->begin + offset) {}
   224c6:	649c                	c.ld	a5,8(s1)
   224c8:	97ce                	c.add	a5,s3
   224ca:	ec3e                	c.sdsp	a5,24(sp)
    if (__is_single_threaded())
   224cc:	00018797          	auipc	a5,0x18
   224d0:	fcc7b783          	ld	a5,-52(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   224d4:	0007c783          	lbu	a5,0(a5)
   224d8:	c3bd                	c.beqz	a5,2253e <dwarf::rangelist::iterator::operator++()+0xe0>
    _Atomic_word __result = *__mem;
   224da:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   224de:	fff5079b          	addiw	a5,a0,-1
   224e2:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   224e6:	4785                	c.li	a5,1
   224e8:	1cf51063          	bne	a0,a5,226a8 <dwarf::rangelist::iterator::operator++()+0x24a>
	_M_dispose();
   224ec:	00093783          	ld	a5,0(s2)
   224f0:	6b9c                	c.ld	a5,16(a5)
   224f2:	854a                	c.mv	a0,s2
   224f4:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   224f6:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   224fa:	00018797          	auipc	a5,0x18
   224fe:	f9e7b783          	ld	a5,-98(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   22502:	0007c783          	lbu	a5,0(a5)
   22506:	c3b1                	c.beqz	a5,2254a <dwarf::rangelist::iterator::operator++()+0xec>
    _Atomic_word __result = *__mem;
   22508:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   2250c:	fff5079b          	addiw	a5,a0,-1
   22510:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   22514:	4785                	c.li	a5,1
   22516:	18f51963          	bne	a0,a5,226a8 <dwarf::rangelist::iterator::operator++()+0x24a>
	    _M_destroy();
   2251a:	00093783          	ld	a5,0(s2)
   2251e:	6f9c                	c.ld	a5,24(a5)
   22520:	854a                	c.mv	a0,s2
   22522:	9782                	c.jalr	a5
   22524:	a251                	c.j	226a8 <dwarf::rangelist::iterator::operator++()+0x24a>
      __atomic_add(__mem, __val);
   22526:	4585                	c.li	a1,1
   22528:	03090513          	addi	a0,s2,48
   2252c:	884f40ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   22530:	bf9d                	c.j	224a6 <dwarf::rangelist::iterator::operator++()+0x48>
   22532:	4585                	c.li	a1,1
   22534:	03090513          	addi	a0,s2,48
   22538:	878f40ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2253c:	b769                	c.j	224c6 <dwarf::rangelist::iterator::operator++()+0x68>
      return __exchange_and_add(__mem, __val);
   2253e:	55fd                	c.li	a1,-1
   22540:	03090513          	addi	a0,s2,48
   22544:	8acf40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22548:	bf79                	c.j	224e6 <dwarf::rangelist::iterator::operator++()+0x88>
   2254a:	55fd                	c.li	a1,-1
   2254c:	03490513          	addi	a0,s2,52
   22550:	8a0f40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22554:	b7c1                	c.j	22514 <dwarf::rangelist::iterator::operator++()+0xb6>
  while (true) {
    entry.low = cur.address();
   22556:	f008                	c.sd	a0,32(s0)
    entry.high = cur.address();
   22558:	854a                	c.mv	a0,s2
   2255a:	9982                	c.jalr	s3
   2255c:	f408                	c.sd	a0,40(s0)

    if (entry.low == 0 && entry.high == 0) {
   2255e:	701c                	c.ld	a5,32(s0)
   22560:	00a7e4b3          	or	s1,a5,a0
   22564:	e0d9                	c.bnez	s1,225ea <dwarf::rangelist::iterator::operator++()+0x18c>
   22566:	00043023          	sd	zero,0(s0)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   2256a:	00843903          	ld	s2,8(s0)
	__r._M_pi = _M_pi;
   2256e:	00043423          	sd	zero,8(s0)
	if (_M_pi != nullptr)
   22572:	08090b63          	beq	s2,zero,22608 <dwarf::rangelist::iterator::operator++()+0x1aa>
    if (__is_single_threaded())
   22576:	00018797          	auipc	a5,0x18
   2257a:	f227b783          	ld	a5,-222(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2257e:	0007c783          	lbu	a5,0(a5)
   22582:	c7b9                	c.beqz	a5,225d0 <dwarf::rangelist::iterator::operator++()+0x172>
    _Atomic_word __result = *__mem;
   22584:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   22588:	fff5079b          	addiw	a5,a0,-1
   2258c:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   22590:	4785                	c.li	a5,1
   22592:	06f51b63          	bne	a0,a5,22608 <dwarf::rangelist::iterator::operator++()+0x1aa>
	_M_dispose();
   22596:	00093783          	ld	a5,0(s2)
   2259a:	6b9c                	c.ld	a5,16(a5)
   2259c:	854a                	c.mv	a0,s2
   2259e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   225a0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   225a4:	00018797          	auipc	a5,0x18
   225a8:	ef47b783          	ld	a5,-268(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   225ac:	0007c783          	lbu	a5,0(a5)
   225b0:	c795                	c.beqz	a5,225dc <dwarf::rangelist::iterator::operator++()+0x17e>
    _Atomic_word __result = *__mem;
   225b2:	03492783          	lw	a5,52(s2)
    *__mem += __val;
   225b6:	fff7871b          	addiw	a4,a5,-1
   225ba:	02e92a23          	sw	a4,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   225be:	4705                	c.li	a4,1
   225c0:	04e79463          	bne	a5,a4,22608 <dwarf::rangelist::iterator::operator++()+0x1aa>
	    _M_destroy();
   225c4:	00093783          	ld	a5,0(s2)
   225c8:	6f9c                	c.ld	a5,24(a5)
   225ca:	854a                	c.mv	a0,s2
   225cc:	9782                	c.jalr	a5
      // End of list
      sec.reset();
      pos = 0;
      break;
   225ce:	a82d                	c.j	22608 <dwarf::rangelist::iterator::operator++()+0x1aa>
      return __exchange_and_add(__mem, __val);
   225d0:	55fd                	c.li	a1,-1
   225d2:	03090513          	addi	a0,s2,48
   225d6:	81af40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   225da:	bf5d                	c.j	22590 <dwarf::rangelist::iterator::operator++()+0x132>
   225dc:	55fd                	c.li	a1,-1
   225de:	03490513          	addi	a0,s2,52
   225e2:	80ef40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   225e6:	87aa                	c.mv	a5,a0
   225e8:	bfd9                	c.j	225be <dwarf::rangelist::iterator::operator++()+0x160>
    } else if (entry.low == largest_offset) {
   225ea:	01479663          	bne	a5,s4,225f6 <dwarf::rangelist::iterator::operator++()+0x198>
      // Base address change
      base_addr = entry.high;
   225ee:	e808                	c.sd	a0,16(s0)
    entry.low = cur.address();
   225f0:	854a                	c.mv	a0,s2
   225f2:	9982                	c.jalr	s3
   225f4:	b78d                	c.j	22556 <dwarf::rangelist::iterator::operator++()+0xf8>
    } else {
      // Regular entry.  Adjust by base address.
      entry.low += base_addr;
   225f6:	6818                	c.ld	a4,16(s0)
   225f8:	97ba                	c.add	a5,a4
   225fa:	f01c                	c.sd	a5,32(s0)
      entry.high += base_addr;
   225fc:	972a                	c.add	a4,a0
   225fe:	f418                	c.sd	a4,40(s0)
  section_offset get_section_offset() const { return pos - sec->begin; }
   22600:	67a2                	c.ldsp	a5,8(sp)
   22602:	679c                	c.ld	a5,8(a5)
   22604:	64e2                	c.ldsp	s1,24(sp)
   22606:	8c9d                	c.sub	s1,a5
      pos = 0;
   22608:	ec04                	c.sd	s1,24(s0)
	if (_M_pi != nullptr)
   2260a:	64c2                	c.ldsp	s1,16(sp)
   2260c:	cc99                	c.beqz	s1,2262a <dwarf::rangelist::iterator::operator++()+0x1cc>
    if (__is_single_threaded())
   2260e:	00018797          	auipc	a5,0x18
   22612:	e8a7b783          	ld	a5,-374(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   22616:	0007c783          	lbu	a5,0(a5)
   2261a:	c38d                	c.beqz	a5,2263c <dwarf::rangelist::iterator::operator++()+0x1de>
    _Atomic_word __result = *__mem;
   2261c:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   2261e:	fff5079b          	addiw	a5,a0,-1
   22622:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   22624:	4785                	c.li	a5,1
   22626:	02f50163          	beq	a0,a5,22648 <dwarf::rangelist::iterator::operator++()+0x1ea>
      break;
    }
  }

  return *this;
}
   2262a:	8522                	c.mv	a0,s0
   2262c:	60a6                	c.ldsp	ra,72(sp)
   2262e:	6406                	c.ldsp	s0,64(sp)
   22630:	74e2                	c.ldsp	s1,56(sp)
   22632:	7942                	c.ldsp	s2,48(sp)
   22634:	79a2                	c.ldsp	s3,40(sp)
   22636:	7a02                	c.ldsp	s4,32(sp)
   22638:	6161                	c.addi16sp	sp,80
   2263a:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2263c:	55fd                	c.li	a1,-1
   2263e:	03048513          	addi	a0,s1,48
   22642:	faff30ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22646:	bff9                	c.j	22624 <dwarf::rangelist::iterator::operator++()+0x1c6>
	_M_dispose();
   22648:	609c                	c.ld	a5,0(s1)
   2264a:	6b9c                	c.ld	a5,16(a5)
   2264c:	8526                	c.mv	a0,s1
   2264e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   22650:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   22654:	00018797          	auipc	a5,0x18
   22658:	e447b783          	ld	a5,-444(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2265c:	0007c783          	lbu	a5,0(a5)
   22660:	cf89                	c.beqz	a5,2267a <dwarf::rangelist::iterator::operator++()+0x21c>
    _Atomic_word __result = *__mem;
   22662:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   22664:	fff5079b          	addiw	a5,a0,-1
   22668:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2266a:	4785                	c.li	a5,1
   2266c:	faf51fe3          	bne	a0,a5,2262a <dwarf::rangelist::iterator::operator++()+0x1cc>
	    _M_destroy();
   22670:	609c                	c.ld	a5,0(s1)
   22672:	6f9c                	c.ld	a5,24(a5)
   22674:	8526                	c.mv	a0,s1
   22676:	9782                	c.jalr	a5
  return *this;
   22678:	bf4d                	c.j	2262a <dwarf::rangelist::iterator::operator++()+0x1cc>
      return __exchange_and_add(__mem, __val);
   2267a:	55fd                	c.li	a1,-1
   2267c:	03448513          	addi	a0,s1,52
   22680:	f71f30ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22684:	b7dd                	c.j	2266a <dwarf::rangelist::iterator::operator++()+0x20c>
	if (_M_pi != nullptr)
   22686:	842a                	c.mv	s0,a0
   22688:	6542                	c.ldsp	a0,16(sp)
   2268a:	c511                	c.beqz	a0,22696 <dwarf::rangelist::iterator::operator++()+0x238>
	  _M_pi->_M_release();
   2268c:	00018317          	auipc	t1,0x18
   22690:	d5433303          	ld	t1,-684(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   22694:	9302                	c.jalr	t1
   22696:	8522                	c.mv	a0,s0
   22698:	af8f40ef          	jal	ra,16990 <_Unwind_Resume@plt>
  cursor cur(sec, pos);
   2269c:	6c18                	c.ld	a4,24(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2269e:	e426                	c.sdsp	s1,8(sp)
      : _M_pi(__r._M_pi)
   226a0:	e802                	c.sdsp	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   226a2:	649c                	c.ld	a5,8(s1)
   226a4:	97ba                	c.add	a5,a4
   226a6:	ec3e                	c.sdsp	a5,24(sp)
    entry.low = cur.address();
   226a8:	00810913          	addi	s2,sp,8
   226ac:	00018997          	auipc	s3,0x18
   226b0:	ce49b983          	ld	s3,-796(s3) # 3a390 <dwarf::cursor::address()@@Base+0x1a800>
   226b4:	bf35                	c.j	225f0 <dwarf::rangelist::iterator::operator++()+0x192>

00000000000226b6 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)>:
rangelist::iterator::iterator(const std::shared_ptr<section> &sec,
   226b6:	1101                	c.addi	sp,-32
   226b8:	ec06                	c.sdsp	ra,24(sp)
   226ba:	e822                	c.sdsp	s0,16(sp)
   226bc:	e426                	c.sdsp	s1,8(sp)
   226be:	842a                	c.mv	s0,a0
   226c0:	84b2                	c.mv	s1,a2
      __shared_ptr(const __shared_ptr&) noexcept = default;
   226c2:	619c                	c.ld	a5,0(a1)
   226c4:	e11c                	c.sd	a5,0(a0)
      : _M_pi(__r._M_pi)
   226c6:	6588                	c.ld	a0,8(a1)
   226c8:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   226ca:	c919                	c.beqz	a0,226e0 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x2a>
    if (__is_single_threaded())
   226cc:	00018797          	auipc	a5,0x18
   226d0:	dcc7b783          	ld	a5,-564(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   226d4:	0007c783          	lbu	a5,0(a5)
   226d8:	cb99                	c.beqz	a5,226ee <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x38>
  { *__mem += __val; }
   226da:	591c                	c.lw	a5,48(a0)
   226dc:	2785                	c.addiw	a5,1
   226de:	d91c                	c.sw	a5,48(a0)
    : sec(sec), base_addr(base_addr), pos(0) {
   226e0:	e804                	c.sd	s1,16(s0)
   226e2:	00043c23          	sd	zero,24(s0)
  ++(*this);
   226e6:	8522                	c.mv	a0,s0
   226e8:	d77ff0ef          	jal	ra,2245e <dwarf::rangelist::iterator::operator++()>
   226ec:	a015                	c.j	22710 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x5a>
      __atomic_add(__mem, __val);
   226ee:	4585                	c.li	a1,1
   226f0:	03050513          	addi	a0,a0,48
   226f4:	ebdf30ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   226f8:	b7e5                	c.j	226e0 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x2a>
	if (_M_pi != nullptr)
   226fa:	84aa                	c.mv	s1,a0
   226fc:	6408                	c.ld	a0,8(s0)
   226fe:	c511                	c.beqz	a0,2270a <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x54>
	  _M_pi->_M_release();
   22700:	00018317          	auipc	t1,0x18
   22704:	ce033303          	ld	t1,-800(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   22708:	9302                	c.jalr	t1
   2270a:	8526                	c.mv	a0,s1
   2270c:	a84f40ef          	jal	ra,16990 <_Unwind_Resume@plt>
}
   22710:	60e2                	c.ldsp	ra,24(sp)
   22712:	6442                	c.ldsp	s0,16(sp)
   22714:	64a2                	c.ldsp	s1,8(sp)
   22716:	6105                	c.addi16sp	sp,32
   22718:	8082                	c.jr	ra

000000000002271a <dwarf::rangelist::begin() const>:
rangelist::iterator rangelist::begin() const {
   2271a:	1141                	c.addi	sp,-16
   2271c:	e406                	c.sdsp	ra,8(sp)
   2271e:	e022                	c.sdsp	s0,0(sp)
   22720:	842a                	c.mv	s0,a0
  if (sec)
   22722:	6d9c                	c.ld	a5,24(a1)
   22724:	cb91                	c.beqz	a5,22738 <dwarf::rangelist::begin() const+0x1e>
    return iterator(sec, base_addr);
   22726:	7590                	c.ld	a2,40(a1)
   22728:	05e1                	c.addi	a1,24
   2272a:	f8dff0ef          	jal	ra,226b6 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)>
}
   2272e:	8522                	c.mv	a0,s0
   22730:	60a2                	c.ldsp	ra,8(sp)
   22732:	6402                	c.ldsp	s0,0(sp)
   22734:	0141                	c.addi	sp,16
   22736:	8082                	c.jr	ra
  return end();
   22738:	d15ff0ef          	jal	ra,2244c <dwarf::rangelist::end() const>
   2273c:	bfcd                	c.j	2272e <dwarf::rangelist::begin() const+0x14>

000000000002273e <dwarf::rangelist::contains(unsigned long) const>:
bool rangelist::contains(taddr addr) const {
   2273e:	7119                	c.addi16sp	sp,-128
   22740:	fc86                	c.sdsp	ra,120(sp)
   22742:	f8a2                	c.sdsp	s0,112(sp)
   22744:	f4a6                	c.sdsp	s1,104(sp)
   22746:	84aa                	c.mv	s1,a0
   22748:	842e                	c.mv	s0,a1
  for (auto ent : *this)
   2274a:	85aa                	c.mv	a1,a0
   2274c:	850a                	c.mv	a0,sp
   2274e:	fcdff0ef          	jal	ra,2271a <dwarf::rangelist::begin() const>
   22752:	85a6                	c.mv	a1,s1
   22754:	1808                	c.addi4spn	a0,sp,48
   22756:	cf7ff0ef          	jal	ra,2244c <dwarf::rangelist::end() const>
   2275a:	848a                	c.mv	s1,sp
    return sec == o.sec && pos == o.pos;
   2275c:	6702                	c.ldsp	a4,0(sp)
   2275e:	77c2                	c.ldsp	a5,48(sp)
   22760:	0ef70c63          	beq	a4,a5,22858 <dwarf::rangelist::contains(unsigned long) const+0x11a>
   22764:	7722                	c.ldsp	a4,40(sp)
  bool contains(taddr addr) const { return low <= addr && addr < high; }
   22766:	7782                	c.ldsp	a5,32(sp)
   22768:	00f47663          	bgeu	s0,a5,22774 <dwarf::rangelist::contains(unsigned long) const+0x36>
   2276c:	8526                	c.mv	a0,s1
   2276e:	cf1ff0ef          	jal	ra,2245e <dwarf::rangelist::iterator::operator++()>
   22772:	b7ed                	c.j	2275c <dwarf::rangelist::contains(unsigned long) const+0x1e>
   22774:	fee47ce3          	bgeu	s0,a4,2276c <dwarf::rangelist::contains(unsigned long) const+0x2e>
	if (_M_pi != nullptr)
   22778:	7462                	c.ldsp	s0,56(sp)
   2277a:	cc19                	c.beqz	s0,22798 <dwarf::rangelist::contains(unsigned long) const+0x5a>
    if (__is_single_threaded())
   2277c:	00018797          	auipc	a5,0x18
   22780:	d1c7b783          	ld	a5,-740(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   22784:	0007c783          	lbu	a5,0(a5)
   22788:	cf95                	c.beqz	a5,227c4 <dwarf::rangelist::contains(unsigned long) const+0x86>
    _Atomic_word __result = *__mem;
   2278a:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2278c:	fff5079b          	addiw	a5,a0,-1
   22790:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   22792:	4785                	c.li	a5,1
   22794:	02f50e63          	beq	a0,a5,227d0 <dwarf::rangelist::contains(unsigned long) const+0x92>
	if (_M_pi != nullptr)
   22798:	6422                	c.ldsp	s0,8(sp)
   2279a:	cc19                	c.beqz	s0,227b8 <dwarf::rangelist::contains(unsigned long) const+0x7a>
    if (__is_single_threaded())
   2279c:	00018797          	auipc	a5,0x18
   227a0:	cfc7b783          	ld	a5,-772(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   227a4:	0007c783          	lbu	a5,0(a5)
   227a8:	c3bd                	c.beqz	a5,2280e <dwarf::rangelist::contains(unsigned long) const+0xd0>
    _Atomic_word __result = *__mem;
   227aa:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   227ac:	fff5079b          	addiw	a5,a0,-1
   227b0:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   227b2:	4785                	c.li	a5,1
   227b4:	06f50363          	beq	a0,a5,2281a <dwarf::rangelist::contains(unsigned long) const+0xdc>
      return true;
   227b8:	4505                	c.li	a0,1
}
   227ba:	70e6                	c.ldsp	ra,120(sp)
   227bc:	7446                	c.ldsp	s0,112(sp)
   227be:	74a6                	c.ldsp	s1,104(sp)
   227c0:	6109                	c.addi16sp	sp,128
   227c2:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   227c4:	55fd                	c.li	a1,-1
   227c6:	03040513          	addi	a0,s0,48
   227ca:	e27f30ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   227ce:	b7d1                	c.j	22792 <dwarf::rangelist::contains(unsigned long) const+0x54>
	_M_dispose();
   227d0:	601c                	c.ld	a5,0(s0)
   227d2:	6b9c                	c.ld	a5,16(a5)
   227d4:	8522                	c.mv	a0,s0
   227d6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   227d8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   227dc:	00018797          	auipc	a5,0x18
   227e0:	cbc7b783          	ld	a5,-836(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   227e4:	0007c783          	lbu	a5,0(a5)
   227e8:	cf89                	c.beqz	a5,22802 <dwarf::rangelist::contains(unsigned long) const+0xc4>
    _Atomic_word __result = *__mem;
   227ea:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   227ec:	fff5079b          	addiw	a5,a0,-1
   227f0:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   227f2:	4785                	c.li	a5,1
   227f4:	faf512e3          	bne	a0,a5,22798 <dwarf::rangelist::contains(unsigned long) const+0x5a>
	    _M_destroy();
   227f8:	601c                	c.ld	a5,0(s0)
   227fa:	6f9c                	c.ld	a5,24(a5)
   227fc:	8522                	c.mv	a0,s0
   227fe:	9782                	c.jalr	a5
   22800:	bf61                	c.j	22798 <dwarf::rangelist::contains(unsigned long) const+0x5a>
      return __exchange_and_add(__mem, __val);
   22802:	55fd                	c.li	a1,-1
   22804:	03440513          	addi	a0,s0,52
   22808:	de9f30ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2280c:	b7dd                	c.j	227f2 <dwarf::rangelist::contains(unsigned long) const+0xb4>
   2280e:	55fd                	c.li	a1,-1
   22810:	03040513          	addi	a0,s0,48
   22814:	dddf30ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22818:	bf69                	c.j	227b2 <dwarf::rangelist::contains(unsigned long) const+0x74>
	_M_dispose();
   2281a:	601c                	c.ld	a5,0(s0)
   2281c:	6b9c                	c.ld	a5,16(a5)
   2281e:	8522                	c.mv	a0,s0
   22820:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   22822:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   22826:	00018797          	auipc	a5,0x18
   2282a:	c727b783          	ld	a5,-910(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2282e:	0007c783          	lbu	a5,0(a5)
   22832:	cf89                	c.beqz	a5,2284c <dwarf::rangelist::contains(unsigned long) const+0x10e>
    _Atomic_word __result = *__mem;
   22834:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   22836:	fff5079b          	addiw	a5,a0,-1
   2283a:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2283c:	4785                	c.li	a5,1
   2283e:	f6f51de3          	bne	a0,a5,227b8 <dwarf::rangelist::contains(unsigned long) const+0x7a>
	    _M_destroy();
   22842:	601c                	c.ld	a5,0(s0)
   22844:	6f9c                	c.ld	a5,24(a5)
   22846:	8522                	c.mv	a0,s0
   22848:	9782                	c.jalr	a5
   2284a:	b7bd                	c.j	227b8 <dwarf::rangelist::contains(unsigned long) const+0x7a>
      return __exchange_and_add(__mem, __val);
   2284c:	55fd                	c.li	a1,-1
   2284e:	03440513          	addi	a0,s0,52
   22852:	d9ff30ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22856:	b7dd                	c.j	2283c <dwarf::rangelist::contains(unsigned long) const+0xfe>
    return sec == o.sec && pos == o.pos;
   22858:	6762                	c.ldsp	a4,24(sp)
   2285a:	67a6                	c.ldsp	a5,72(sp)
   2285c:	f0f714e3          	bne	a4,a5,22764 <dwarf::rangelist::contains(unsigned long) const+0x26>
	if (_M_pi != nullptr)
   22860:	7462                	c.ldsp	s0,56(sp)
   22862:	cc19                	c.beqz	s0,22880 <dwarf::rangelist::contains(unsigned long) const+0x142>
    if (__is_single_threaded())
   22864:	00018797          	auipc	a5,0x18
   22868:	c347b783          	ld	a5,-972(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2286c:	0007c783          	lbu	a5,0(a5)
   22870:	cb95                	c.beqz	a5,228a4 <dwarf::rangelist::contains(unsigned long) const+0x166>
    _Atomic_word __result = *__mem;
   22872:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   22874:	fff5079b          	addiw	a5,a0,-1
   22878:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2287a:	4785                	c.li	a5,1
   2287c:	02f50a63          	beq	a0,a5,228b0 <dwarf::rangelist::contains(unsigned long) const+0x172>
	if (_M_pi != nullptr)
   22880:	6422                	c.ldsp	s0,8(sp)
   22882:	cc19                	c.beqz	s0,228a0 <dwarf::rangelist::contains(unsigned long) const+0x162>
    if (__is_single_threaded())
   22884:	00018797          	auipc	a5,0x18
   22888:	c147b783          	ld	a5,-1004(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2288c:	0007c783          	lbu	a5,0(a5)
   22890:	cfb9                	c.beqz	a5,228ee <dwarf::rangelist::contains(unsigned long) const+0x1b0>
    _Atomic_word __result = *__mem;
   22892:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   22894:	fff5079b          	addiw	a5,a0,-1
   22898:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2289a:	4785                	c.li	a5,1
   2289c:	04f50f63          	beq	a0,a5,228fa <dwarf::rangelist::contains(unsigned long) const+0x1bc>
  return false;
   228a0:	4501                	c.li	a0,0
   228a2:	bf21                	c.j	227ba <dwarf::rangelist::contains(unsigned long) const+0x7c>
      return __exchange_and_add(__mem, __val);
   228a4:	55fd                	c.li	a1,-1
   228a6:	03040513          	addi	a0,s0,48
   228aa:	d47f30ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   228ae:	b7f1                	c.j	2287a <dwarf::rangelist::contains(unsigned long) const+0x13c>
	_M_dispose();
   228b0:	601c                	c.ld	a5,0(s0)
   228b2:	6b9c                	c.ld	a5,16(a5)
   228b4:	8522                	c.mv	a0,s0
   228b6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   228b8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   228bc:	00018797          	auipc	a5,0x18
   228c0:	bdc7b783          	ld	a5,-1060(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   228c4:	0007c783          	lbu	a5,0(a5)
   228c8:	cf89                	c.beqz	a5,228e2 <dwarf::rangelist::contains(unsigned long) const+0x1a4>
    _Atomic_word __result = *__mem;
   228ca:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   228cc:	fff5079b          	addiw	a5,a0,-1
   228d0:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   228d2:	4785                	c.li	a5,1
   228d4:	faf516e3          	bne	a0,a5,22880 <dwarf::rangelist::contains(unsigned long) const+0x142>
	    _M_destroy();
   228d8:	601c                	c.ld	a5,0(s0)
   228da:	6f9c                	c.ld	a5,24(a5)
   228dc:	8522                	c.mv	a0,s0
   228de:	9782                	c.jalr	a5
   228e0:	b745                	c.j	22880 <dwarf::rangelist::contains(unsigned long) const+0x142>
      return __exchange_and_add(__mem, __val);
   228e2:	55fd                	c.li	a1,-1
   228e4:	03440513          	addi	a0,s0,52
   228e8:	d09f30ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   228ec:	b7dd                	c.j	228d2 <dwarf::rangelist::contains(unsigned long) const+0x194>
   228ee:	55fd                	c.li	a1,-1
   228f0:	03040513          	addi	a0,s0,48
   228f4:	cfdf30ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   228f8:	b74d                	c.j	2289a <dwarf::rangelist::contains(unsigned long) const+0x15c>
	_M_dispose();
   228fa:	601c                	c.ld	a5,0(s0)
   228fc:	6b9c                	c.ld	a5,16(a5)
   228fe:	8522                	c.mv	a0,s0
   22900:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   22902:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   22906:	00018797          	auipc	a5,0x18
   2290a:	b927b783          	ld	a5,-1134(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2290e:	0007c783          	lbu	a5,0(a5)
   22912:	cf89                	c.beqz	a5,2292c <dwarf::rangelist::contains(unsigned long) const+0x1ee>
    _Atomic_word __result = *__mem;
   22914:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   22916:	fff5079b          	addiw	a5,a0,-1
   2291a:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2291c:	4785                	c.li	a5,1
   2291e:	f8f511e3          	bne	a0,a5,228a0 <dwarf::rangelist::contains(unsigned long) const+0x162>
	    _M_destroy();
   22922:	601c                	c.ld	a5,0(s0)
   22924:	6f9c                	c.ld	a5,24(a5)
   22926:	8522                	c.mv	a0,s0
   22928:	9782                	c.jalr	a5
   2292a:	bf9d                	c.j	228a0 <dwarf::rangelist::contains(unsigned long) const+0x162>
      return __exchange_and_add(__mem, __val);
   2292c:	55fd                	c.li	a1,-1
   2292e:	03440513          	addi	a0,s0,52
   22932:	cbff30ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22936:	b7dd                	c.j	2291c <dwarf::rangelist::contains(unsigned long) const+0x1de>
	if (_M_pi != nullptr)
   22938:	842a                	c.mv	s0,a0
   2293a:	7562                	c.ldsp	a0,56(sp)
   2293c:	c511                	c.beqz	a0,22948 <dwarf::rangelist::contains(unsigned long) const+0x20a>
	  _M_pi->_M_release();
   2293e:	00018317          	auipc	t1,0x18
   22942:	aa233303          	ld	t1,-1374(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   22946:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   22948:	6522                	c.ldsp	a0,8(sp)
   2294a:	c511                	c.beqz	a0,22956 <dwarf::rangelist::contains(unsigned long) const+0x218>
	  _M_pi->_M_release();
   2294c:	00018317          	auipc	t1,0x18
   22950:	a9433303          	ld	t1,-1388(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   22954:	9302                	c.jalr	t1
   22956:	8522                	c.mv	a0,s0
   22958:	838f40ef          	jal	ra,16990 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   2295c:	842a                	c.mv	s0,a0
   2295e:	b7ed                	c.j	22948 <dwarf::rangelist::contains(unsigned long) const+0x20a>

0000000000022960 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)>:
rangelist::rangelist(const initializer_list<pair<taddr, taddr>> &ranges) {
   22960:	7139                	c.addi16sp	sp,-64
   22962:	fc06                	c.sdsp	ra,56(sp)
   22964:	f822                	c.sdsp	s0,48(sp)
   22966:	f426                	c.sdsp	s1,40(sp)
   22968:	f04a                	c.sdsp	s2,32(sp)
   2296a:	ec4e                	c.sdsp	s3,24(sp)
   2296c:	e852                	c.sdsp	s4,16(sp)
   2296e:	842a                	c.mv	s0,a0
	: _M_start(), _M_finish(), _M_end_of_storage()
   22970:	00053023          	sd	zero,0(a0)
   22974:	00053423          	sd	zero,8(a0)
   22978:	00053823          	sd	zero,16(a0)
      : _M_ptr(0), _M_refcount()
   2297c:	00053c23          	sd	zero,24(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   22980:	02053023          	sd	zero,32(a0)
  synthetic.reserve(ranges.size() * 2 + 2);
   22984:	659c                	c.ld	a5,8(a1)
   22986:	0785                	c.addi	a5,1
   22988:	00179693          	slli	a3,a5,0x1
      if (__n > this->max_size())
   2298c:	577d                	c.li	a4,-1
   2298e:	8311                	c.srli	a4,0x4
   22990:	00d76a63          	bltu	a4,a3,229a4 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x44>
   22994:	892e                	c.mv	s2,a1
      if (this->capacity() < __n)
   22996:	c6a5                	c.beqz	a3,229fe <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x9e>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   22998:	00479493          	slli	s1,a5,0x4
   2299c:	8526                	c.mv	a0,s1
   2299e:	e13f30ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   229a2:	a035                	c.j	229ce <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x6e>
	__throw_length_error(__N("vector::reserve"));
   229a4:	0000c517          	auipc	a0,0xc
   229a8:	3ac50513          	addi	a0,a0,940 # 2ed50 <typeinfo name for dwarf::expr_context+0x18>
   229ac:	cf5f30ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	if (_M_pi != nullptr)
   229b0:	84aa                	c.mv	s1,a0
   229b2:	7008                	c.ld	a0,32(s0)
   229b4:	c511                	c.beqz	a0,229c0 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x60>
	  _M_pi->_M_release();
   229b6:	00018317          	auipc	t1,0x18
   229ba:	a2a33303          	ld	t1,-1494(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   229be:	9302                	c.jalr	t1
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   229c0:	6008                	c.ld	a0,0(s0)
	if (__p)
   229c2:	c119                	c.beqz	a0,229c8 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x68>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   229c4:	dddf30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   229c8:	8526                	c.mv	a0,s1
   229ca:	fc7f30ef          	jal	ra,16990 <_Unwind_Resume@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   229ce:	89aa                	c.mv	s3,a0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   229d0:	00043a03          	ld	s4,0(s0)
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result,
		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
   229d4:	6410                	c.ld	a2,8(s0)
   229d6:	41460633          	sub	a2,a2,s4
      if (__count > 0)
   229da:	00c04563          	blt	zero,a2,229e4 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x84>
   229de:	000a0963          	beq	s4,zero,229f0 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x90>
   229e2:	a021                	c.j	229ea <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x8a>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   229e4:	85d2                	c.mv	a1,s4
   229e6:	83af40ef          	jal	ra,16a20 <memmove@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   229ea:	8552                	c.mv	a0,s4
   229ec:	db5f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
	  this->_M_impl._M_start = __tmp;
   229f0:	01343023          	sd	s3,0(s0)
	  this->_M_impl._M_finish = __tmp + __old_size;
   229f4:	01343423          	sd	s3,8(s0)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   229f8:	99a6                	c.add	s3,s1
   229fa:	01343823          	sd	s3,16(s0)
      begin() const noexcept { return _M_array; }
   229fe:	00093483          	ld	s1,0(s2)
      end() const noexcept { return begin() + size(); }
   22a02:	00893903          	ld	s2,8(s2)
   22a06:	0912                	c.slli	s2,0x4
   22a08:	9926                	c.add	s2,s1
  for (auto &range : ranges) {
   22a0a:	05248363          	beq	s1,s2,22a50 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xf0>
	  _M_realloc_insert(end(), __x);
   22a0e:	00018997          	auipc	s3,0x18
   22a12:	b229b983          	ld	s3,-1246(s3) # 3a530 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)@@Base+0x179e4>
   22a16:	a821                	c.j	22a2e <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xce>
   22a18:	8626                	c.mv	a2,s1
   22a1a:	8522                	c.mv	a0,s0
   22a1c:	9982                	c.jalr	s3
   22a1e:	a005                	c.j	22a3e <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xde>
   22a20:	00848613          	addi	a2,s1,8
   22a24:	8522                	c.mv	a0,s0
   22a26:	9982                	c.jalr	s3
   22a28:	04c1                	c.addi	s1,16
   22a2a:	02990363          	beq	s2,s1,22a50 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xf0>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   22a2e:	640c                	c.ld	a1,8(s0)
   22a30:	681c                	c.ld	a5,16(s0)
   22a32:	fef583e3          	beq	a1,a5,22a18 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xb8>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   22a36:	609c                	c.ld	a5,0(s1)
   22a38:	e19c                	c.sd	a5,0(a1)
	    ++this->_M_impl._M_finish;
   22a3a:	05a1                	c.addi	a1,8
   22a3c:	e40c                	c.sd	a1,8(s0)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   22a3e:	640c                	c.ld	a1,8(s0)
   22a40:	681c                	c.ld	a5,16(s0)
   22a42:	fcf58fe3          	beq	a1,a5,22a20 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xc0>
   22a46:	649c                	c.ld	a5,8(s1)
   22a48:	e19c                	c.sd	a5,0(a1)
	    ++this->_M_impl._M_finish;
   22a4a:	05a1                	c.addi	a1,8
   22a4c:	e40c                	c.sd	a1,8(s0)
   22a4e:	bfe9                	c.j	22a28 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xc8>
  synthetic.push_back(0);
   22a50:	e002                	c.sdsp	zero,0(sp)
      { emplace_back(std::move(__x)); }
   22a52:	858a                	c.mv	a1,sp
   22a54:	8522                	c.mv	a0,s0
   22a56:	00018317          	auipc	t1,0x18
   22a5a:	9c233303          	ld	t1,-1598(t1) # 3a418 <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)@@Base+0x17704>
   22a5e:	9302                	c.jalr	t1
  synthetic.push_back(0);
   22a60:	e402                	c.sdsp	zero,8(sp)
   22a62:	002c                	c.addi4spn	a1,sp,8
   22a64:	8522                	c.mv	a0,s0
   22a66:	00018317          	auipc	t1,0x18
   22a6a:	9b233303          	ld	t1,-1614(t1) # 3a418 <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)@@Base+0x17704>
   22a6e:	9302                	c.jalr	t1
      { return _M_data_ptr(this->_M_impl._M_start); }
   22a70:	00043903          	ld	s2,0(s0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   22a74:	6404                	c.ld	s1,8(s0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   22a76:	06000513          	addi	a0,zero,96
   22a7a:	d37f30ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   22a7e:	00052423          	sw	zero,8(a0)
   22a82:	00052623          	sw	zero,12(a0)
   22a86:	00052823          	sw	zero,16(a0)
   22a8a:	00052a23          	sw	zero,20(a0)
   22a8e:	00052c23          	sw	zero,24(a0)
   22a92:	00052e23          	sw	zero,28(a0)
   22a96:	02053023          	sd	zero,32(a0)
   22a9a:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   22a9e:	4785                	c.li	a5,1
   22aa0:	d91c                	c.sw	a5,48(a0)
   22aa2:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   22aa4:	00018797          	auipc	a5,0x18
   22aa8:	b347b783          	ld	a5,-1228(a5) # 3a5d8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   22aac:	07c1                	c.addi	a5,16
   22aae:	e11c                	c.sd	a5,0(a0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   22ab0:	47a5                	c.li	a5,9
   22ab2:	dd1c                	c.sw	a5,56(a0)
   22ab4:	05253023          	sd	s2,64(a0)
   22ab8:	e524                	c.sd	s1,72(a0)
   22aba:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   22abe:	04052a23          	sw	zero,84(a0)
   22ac2:	47a1                	c.li	a5,8
   22ac4:	cd3c                	c.sw	a5,88(a0)
   22ac6:	03850793          	addi	a5,a0,56
   22aca:	ec1c                	c.sd	a5,24(s0)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   22acc:	7004                	c.ld	s1,32(s0)
	__r._M_pi = _M_pi;
   22ace:	f008                	c.sd	a0,32(s0)
	if (_M_pi != nullptr)
   22ad0:	cc99                	c.beqz	s1,22aee <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x18e>
    if (__is_single_threaded())
   22ad2:	00018797          	auipc	a5,0x18
   22ad6:	9c67b783          	ld	a5,-1594(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   22ada:	0007c783          	lbu	a5,0(a5)
   22ade:	c395                	c.beqz	a5,22b02 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x1a2>
    _Atomic_word __result = *__mem;
   22ae0:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   22ae2:	fff5079b          	addiw	a5,a0,-1
   22ae6:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   22ae8:	4785                	c.li	a5,1
   22aea:	02f50263          	beq	a0,a5,22b0e <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x1ae>
  base_addr = 0;
   22aee:	02043423          	sd	zero,40(s0)
}
   22af2:	70e2                	c.ldsp	ra,56(sp)
   22af4:	7442                	c.ldsp	s0,48(sp)
   22af6:	74a2                	c.ldsp	s1,40(sp)
   22af8:	7902                	c.ldsp	s2,32(sp)
   22afa:	69e2                	c.ldsp	s3,24(sp)
   22afc:	6a42                	c.ldsp	s4,16(sp)
   22afe:	6121                	c.addi16sp	sp,64
   22b00:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   22b02:	55fd                	c.li	a1,-1
   22b04:	03048513          	addi	a0,s1,48
   22b08:	ae9f30ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22b0c:	bff1                	c.j	22ae8 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x188>
	_M_dispose();
   22b0e:	609c                	c.ld	a5,0(s1)
   22b10:	6b9c                	c.ld	a5,16(a5)
   22b12:	8526                	c.mv	a0,s1
   22b14:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   22b16:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   22b1a:	00018797          	auipc	a5,0x18
   22b1e:	97e7b783          	ld	a5,-1666(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   22b22:	0007c783          	lbu	a5,0(a5)
   22b26:	cf89                	c.beqz	a5,22b40 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x1e0>
    _Atomic_word __result = *__mem;
   22b28:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   22b2a:	fff5079b          	addiw	a5,a0,-1
   22b2e:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   22b30:	4785                	c.li	a5,1
   22b32:	faf51ee3          	bne	a0,a5,22aee <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x18e>
	    _M_destroy();
   22b36:	609c                	c.ld	a5,0(s1)
   22b38:	6f9c                	c.ld	a5,24(a5)
   22b3a:	8526                	c.mv	a0,s1
   22b3c:	9782                	c.jalr	a5
   22b3e:	bf45                	c.j	22aee <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x18e>
      return __exchange_and_add(__mem, __val);
   22b40:	55fd                	c.li	a1,-1
   22b42:	03448513          	addi	a0,s1,52
   22b46:	aabf30ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22b4a:	b7dd                	c.j	22b30 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x1d0>

0000000000022b4c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)>:
      vector<_Tp, _Alloc>::
   22b4c:	715d                	c.addi16sp	sp,-80
   22b4e:	e486                	c.sdsp	ra,72(sp)
   22b50:	e0a2                	c.sdsp	s0,64(sp)
   22b52:	fc26                	c.sdsp	s1,56(sp)
   22b54:	f84a                	c.sdsp	s2,48(sp)
   22b56:	f44e                	c.sdsp	s3,40(sp)
   22b58:	f052                	c.sdsp	s4,32(sp)
   22b5a:	ec56                	c.sdsp	s5,24(sp)
   22b5c:	e85a                	c.sdsp	s6,16(sp)
   22b5e:	e45e                	c.sdsp	s7,8(sp)
   22b60:	00853903          	ld	s2,8(a0)
   22b64:	00053983          	ld	s3,0(a0)
   22b68:	413907b3          	sub	a5,s2,s3
   22b6c:	878d                	c.srai	a5,0x3
	if (max_size() - size() < __n)
   22b6e:	577d                	c.li	a4,-1
   22b70:	8311                	c.srli	a4,0x4
   22b72:	02e78663          	beq	a5,a4,22b9e <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x52>
   22b76:	84aa                	c.mv	s1,a0
   22b78:	8a2e                	c.mv	s4,a1
   22b7a:	8bb2                	c.mv	s7,a2
      return __a;
   22b7c:	873e                	c.mv	a4,a5
      if (__a < __b)
   22b7e:	03390663          	beq	s2,s3,22baa <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x5e>
	const size_type __len = size() + (std::max)(size(), __n);
   22b82:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   22b84:	04f76263          	bltu	a4,a5,22bc8 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x7c>
   22b88:	8aba                	c.mv	s5,a4
   22b8a:	57fd                	c.li	a5,-1
   22b8c:	8391                	c.srli	a5,0x4
   22b8e:	00e7f363          	bgeu	a5,a4,22b94 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x48>
   22b92:	8abe                	c.mv	s5,a5
   22b94:	413a0433          	sub	s0,s4,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   22b98:	4b01                	c.li	s6,0
   22b9a:	c329                	c.beqz	a4,22bdc <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x90>
   22b9c:	a81d                	c.j	22bd2 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x86>
	  __throw_length_error(__N(__s));
   22b9e:	0000b517          	auipc	a0,0xb
   22ba2:	eb250513          	addi	a0,a0,-334 # 2da50 <__libc_csu_fini+0x9e>
   22ba6:	afbf30ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   22baa:	4705                	c.li	a4,1
   22bac:	bfd9                	c.j	22b82 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x36>
   22bae:	8622                	c.mv	a2,s0
   22bb0:	85ce                	c.mv	a1,s3
   22bb2:	855a                	c.mv	a0,s6
   22bb4:	e6df30ef          	jal	ra,16a20 <memmove@plt>
	      ++__new_finish;
   22bb8:	0421                	c.addi	s0,8
   22bba:	945a                	c.add	s0,s6
      ptrdiff_t __count = __last - __first;
   22bbc:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   22bc0:	03204b63          	blt	zero,s2,22bf6 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xaa>
	}
      return __result + __count;
   22bc4:	944a                	c.add	s0,s2
      _M_deallocate(pointer __p, size_t __n)
   22bc6:	a081                	c.j	22c06 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xba>
   22bc8:	413a0433          	sub	s0,s4,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   22bcc:	5afd                	c.li	s5,-1
   22bce:	004ada93          	srli	s5,s5,0x4
   22bd2:	003a9513          	slli	a0,s5,0x3
   22bd6:	bdbf30ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   22bda:	8b2a                	c.mv	s6,a0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   22bdc:	008b07b3          	add	a5,s6,s0
   22be0:	000bb703          	ld	a4,0(s7)
   22be4:	e398                	c.sd	a4,0(a5)
      if (__count > 0)
   22be6:	fc8044e3          	blt	zero,s0,22bae <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x62>
   22bea:	0421                	c.addi	s0,8
   22bec:	945a                	c.add	s0,s6
      ptrdiff_t __count = __last - __first;
   22bee:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   22bf2:	01205763          	bge	zero,s2,22c00 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xb4>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   22bf6:	864a                	c.mv	a2,s2
   22bf8:	85d2                	c.mv	a1,s4
   22bfa:	8522                	c.mv	a0,s0
   22bfc:	c45f30ef          	jal	ra,16840 <memcpy@plt>
      return __result + __count;
   22c00:	944a                	c.add	s0,s2
	if (__p)
   22c02:	00098563          	beq	s3,zero,22c0c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xc0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   22c06:	854e                	c.mv	a0,s3
   22c08:	b99f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   22c0c:	0164b023          	sd	s6,0(s1)
      this->_M_impl._M_finish = __new_finish;
   22c10:	e480                	c.sd	s0,8(s1)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   22c12:	0a8e                	c.slli	s5,0x3
   22c14:	9ada                	c.add	s5,s6
   22c16:	0154b823          	sd	s5,16(s1)
    }
   22c1a:	60a6                	c.ldsp	ra,72(sp)
   22c1c:	6406                	c.ldsp	s0,64(sp)
   22c1e:	74e2                	c.ldsp	s1,56(sp)
   22c20:	7942                	c.ldsp	s2,48(sp)
   22c22:	79a2                	c.ldsp	s3,40(sp)
   22c24:	7a02                	c.ldsp	s4,32(sp)
   22c26:	6ae2                	c.ldsp	s5,24(sp)
   22c28:	6b42                	c.ldsp	s6,16(sp)
   22c2a:	6ba2                	c.ldsp	s7,8(sp)
   22c2c:	6161                	c.addi16sp	sp,80
   22c2e:	8082                	c.jr	ra

0000000000022c30 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)>:
      vector<_Tp, _Alloc>::
   22c30:	715d                	c.addi16sp	sp,-80
   22c32:	e486                	c.sdsp	ra,72(sp)
   22c34:	e0a2                	c.sdsp	s0,64(sp)
   22c36:	fc26                	c.sdsp	s1,56(sp)
   22c38:	f84a                	c.sdsp	s2,48(sp)
   22c3a:	f44e                	c.sdsp	s3,40(sp)
   22c3c:	f052                	c.sdsp	s4,32(sp)
   22c3e:	ec56                	c.sdsp	s5,24(sp)
   22c40:	e85a                	c.sdsp	s6,16(sp)
   22c42:	e45e                	c.sdsp	s7,8(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   22c44:	00853903          	ld	s2,8(a0)
   22c48:	00053983          	ld	s3,0(a0)
   22c4c:	413907b3          	sub	a5,s2,s3
   22c50:	878d                	c.srai	a5,0x3
	if (max_size() - size() < __n)
   22c52:	577d                	c.li	a4,-1
   22c54:	8311                	c.srli	a4,0x4
   22c56:	02e78663          	beq	a5,a4,22c82 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x52>
   22c5a:	84aa                	c.mv	s1,a0
   22c5c:	8a2e                	c.mv	s4,a1
   22c5e:	8bb2                	c.mv	s7,a2
      return __a;
   22c60:	873e                	c.mv	a4,a5
      if (__a < __b)
   22c62:	03390663          	beq	s2,s3,22c8e <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x5e>
	const size_type __len = size() + (std::max)(size(), __n);
   22c66:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   22c68:	04f76263          	bltu	a4,a5,22cac <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x7c>
   22c6c:	8aba                	c.mv	s5,a4
   22c6e:	57fd                	c.li	a5,-1
   22c70:	8391                	c.srli	a5,0x4
   22c72:	00e7f363          	bgeu	a5,a4,22c78 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x48>
   22c76:	8abe                	c.mv	s5,a5
   22c78:	413a0433          	sub	s0,s4,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   22c7c:	4b01                	c.li	s6,0
   22c7e:	c329                	c.beqz	a4,22cc0 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x90>
   22c80:	a81d                	c.j	22cb6 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x86>
	  __throw_length_error(__N(__s));
   22c82:	0000b517          	auipc	a0,0xb
   22c86:	dce50513          	addi	a0,a0,-562 # 2da50 <__libc_csu_fini+0x9e>
   22c8a:	a17f30ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   22c8e:	4705                	c.li	a4,1
   22c90:	bfd9                	c.j	22c66 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x36>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   22c92:	8622                	c.mv	a2,s0
   22c94:	85ce                	c.mv	a1,s3
   22c96:	855a                	c.mv	a0,s6
   22c98:	d89f30ef          	jal	ra,16a20 <memmove@plt>
	      ++__new_finish;
   22c9c:	0421                	c.addi	s0,8
   22c9e:	945a                	c.add	s0,s6
      ptrdiff_t __count = __last - __first;
   22ca0:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   22ca4:	03204b63          	blt	zero,s2,22cda <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xaa>
      return __result + __count;
   22ca8:	944a                	c.add	s0,s2
      _M_deallocate(pointer __p, size_t __n)
   22caa:	a081                	c.j	22cea <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xba>
   22cac:	413a0433          	sub	s0,s4,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   22cb0:	5afd                	c.li	s5,-1
   22cb2:	004ada93          	srli	s5,s5,0x4
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   22cb6:	003a9513          	slli	a0,s5,0x3
   22cba:	af7f30ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   22cbe:	8b2a                	c.mv	s6,a0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   22cc0:	008b07b3          	add	a5,s6,s0
   22cc4:	000bb703          	ld	a4,0(s7)
   22cc8:	e398                	c.sd	a4,0(a5)
      if (__count > 0)
   22cca:	fc8044e3          	blt	zero,s0,22c92 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x62>
   22cce:	0421                	c.addi	s0,8
   22cd0:	945a                	c.add	s0,s6
      ptrdiff_t __count = __last - __first;
   22cd2:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   22cd6:	01205763          	bge	zero,s2,22ce4 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xb4>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   22cda:	864a                	c.mv	a2,s2
   22cdc:	85d2                	c.mv	a1,s4
   22cde:	8522                	c.mv	a0,s0
   22ce0:	b61f30ef          	jal	ra,16840 <memcpy@plt>
      return __result + __count;
   22ce4:	944a                	c.add	s0,s2
	if (__p)
   22ce6:	00098563          	beq	s3,zero,22cf0 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xc0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   22cea:	854e                	c.mv	a0,s3
   22cec:	ab5f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   22cf0:	0164b023          	sd	s6,0(s1)
      this->_M_impl._M_finish = __new_finish;
   22cf4:	e480                	c.sd	s0,8(s1)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   22cf6:	0a8e                	c.slli	s5,0x3
   22cf8:	9ada                	c.add	s5,s6
   22cfa:	0154b823          	sd	s5,16(s1)
    }
   22cfe:	60a6                	c.ldsp	ra,72(sp)
   22d00:	6406                	c.ldsp	s0,64(sp)
   22d02:	74e2                	c.ldsp	s1,56(sp)
   22d04:	7942                	c.ldsp	s2,48(sp)
   22d06:	79a2                	c.ldsp	s3,40(sp)
   22d08:	7a02                	c.ldsp	s4,32(sp)
   22d0a:	6ae2                	c.ldsp	s5,24(sp)
   22d0c:	6b42                	c.ldsp	s6,16(sp)
   22d0e:	6ba2                	c.ldsp	s7,8(sp)
   22d10:	6161                	c.addi16sp	sp,80
   22d12:	8082                	c.jr	ra

0000000000022d14 <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)>:
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   22d14:	651c                	c.ld	a5,8(a0)
   22d16:	6918                	c.ld	a4,16(a0)
   22d18:	00e78863          	beq	a5,a4,22d28 <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)+0x14>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   22d1c:	6198                	c.ld	a4,0(a1)
   22d1e:	e398                	c.sd	a4,0(a5)
	    ++this->_M_impl._M_finish;
   22d20:	651c                	c.ld	a5,8(a0)
   22d22:	07a1                	c.addi	a5,8
   22d24:	e51c                	c.sd	a5,8(a0)
   22d26:	8082                	c.jr	ra
      vector<_Tp, _Alloc>::
   22d28:	1141                	c.addi	sp,-16
   22d2a:	e406                	c.sdsp	ra,8(sp)
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   22d2c:	862e                	c.mv	a2,a1
   22d2e:	85be                	c.mv	a1,a5
   22d30:	00017317          	auipc	t1,0x17
   22d34:	61833303          	ld	t1,1560(t1) # 3a348 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)@@Base+0x17718>
   22d38:	9302                	c.jalr	t1
      }
   22d3a:	60a2                	c.ldsp	ra,8(sp)
   22d3c:	0141                	c.addi	sp,16
   22d3e:	8082                	c.jr	ra

0000000000022d40 <dwarf::line_table::entry::reset(bool)>:

line_table::file::file(string path, uint64_t mtime, uint64_t length)
    : path(path), mtime(mtime), length(length) {}

void line_table::entry::reset(bool is_stmt) {
  address = op_index = 0;
   22d40:	00052423          	sw	zero,8(a0)
   22d44:	00053023          	sd	zero,0(a0)
  file = nullptr;
   22d48:	00053823          	sd	zero,16(a0)
  file_index = line = 1;
   22d4c:	4785                	c.li	a5,1
   22d4e:	cd5c                	c.sw	a5,28(a0)
   22d50:	cd1c                	c.sw	a5,24(a0)
  column = 0;
   22d52:	02052023          	sw	zero,32(a0)
  this->is_stmt = is_stmt;
   22d56:	02b50223          	sb	a1,36(a0)
  basic_block = end_sequence = prologue_end = epilogue_begin = false;
   22d5a:	02050423          	sb	zero,40(a0)
   22d5e:	020503a3          	sb	zero,39(a0)
   22d62:	02050323          	sb	zero,38(a0)
   22d66:	020502a3          	sb	zero,37(a0)
  isa = discriminator = 0;
   22d6a:	02052823          	sw	zero,48(a0)
   22d6e:	02052623          	sw	zero,44(a0)
}
   22d72:	8082                	c.jr	ra

0000000000022d74 <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>:
line_table::file::file(string path, uint64_t mtime, uint64_t length)
   22d74:	1101                	c.addi	sp,-32
   22d76:	ec06                	c.sdsp	ra,24(sp)
   22d78:	e822                	c.sdsp	s0,16(sp)
   22d7a:	e426                	c.sdsp	s1,8(sp)
   22d7c:	e04a                	c.sdsp	s2,0(sp)
   22d7e:	842a                	c.mv	s0,a0
   22d80:	87ae                	c.mv	a5,a1
   22d82:	8932                	c.mv	s2,a2
   22d84:	84b6                	c.mv	s1,a3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   22d86:	01050713          	addi	a4,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22d8a:	e118                	c.sd	a4,0(a0)
      { return _M_dataplus._M_p; }
   22d8c:	618c                	c.ld	a1,0(a1)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   22d8e:	6790                	c.ld	a2,8(a5)
   22d90:	4681                	c.li	a3,0
   22d92:	962e                	c.add	a2,a1
   22d94:	00017317          	auipc	t1,0x17
   22d98:	59433303          	ld	t1,1428(t1) # 3a328 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x15240>
   22d9c:	9302                	c.jalr	t1
    : path(path), mtime(mtime), length(length) {}
   22d9e:	03243023          	sd	s2,32(s0)
   22da2:	f404                	c.sd	s1,40(s0)
   22da4:	60e2                	c.ldsp	ra,24(sp)
   22da6:	6442                	c.ldsp	s0,16(sp)
   22da8:	64a2                	c.ldsp	s1,8(sp)
   22daa:	6902                	c.ldsp	s2,0(sp)
   22dac:	6105                	c.addi16sp	sp,32
   22dae:	8082                	c.jr	ra

0000000000022db0 <dwarf::line_table::entry::get_description[abi:cxx11]() const>:

string line_table::entry::get_description() const {
   22db0:	715d                	c.addi16sp	sp,-80
   22db2:	e486                	c.sdsp	ra,72(sp)
   22db4:	e0a2                	c.sdsp	s0,64(sp)
   22db6:	fc26                	c.sdsp	s1,56(sp)
   22db8:	f84a                	c.sdsp	s2,48(sp)
   22dba:	f44e                	c.sdsp	s3,40(sp)
   22dbc:	f052                	c.sdsp	s4,32(sp)
   22dbe:	842a                	c.mv	s0,a0
   22dc0:	84ae                	c.mv	s1,a1
  string res = file->path;
   22dc2:	699c                	c.ld	a5,16(a1)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   22dc4:	01050913          	addi	s2,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22dc8:	01253023          	sd	s2,0(a0)
      { return _M_dataplus._M_p; }
   22dcc:	638c                	c.ld	a1,0(a5)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   22dce:	6790                	c.ld	a2,8(a5)
   22dd0:	4681                	c.li	a3,0
   22dd2:	962e                	c.add	a2,a1
   22dd4:	00017317          	auipc	t1,0x17
   22dd8:	55433303          	ld	t1,1364(t1) # 3a328 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x15240>
   22ddc:	9302                	c.jalr	t1
  if (line) {
   22dde:	4cdc                	c.lw	a5,28(s1)
   22de0:	eb91                	c.bnez	a5,22df4 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x44>
    res.append(":").append(std::to_string(line));
    if (column)
      res.append(":").append(std::to_string(column));
  }
  return res;
}
   22de2:	8522                	c.mv	a0,s0
   22de4:	60a6                	c.ldsp	ra,72(sp)
   22de6:	6406                	c.ldsp	s0,64(sp)
   22de8:	74e2                	c.ldsp	s1,56(sp)
   22dea:	7942                	c.ldsp	s2,48(sp)
   22dec:	79a2                	c.ldsp	s3,40(sp)
   22dee:	7a02                	c.ldsp	s4,32(sp)
   22df0:	6161                	c.addi16sp	sp,80
   22df2:	8082                	c.jr	ra
	if (this->max_size() - (this->size() - __n1) < __n2)
   22df4:	6418                	c.ld	a4,8(s0)
   22df6:	57fd                	c.li	a5,-1
   22df8:	8389                	c.srli	a5,0x2
   22dfa:	00f70b63          	beq	a4,a5,22e10 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x60>
	return _M_append(__s, __n);
   22dfe:	4605                	c.li	a2,1
   22e00:	0000c597          	auipc	a1,0xc
   22e04:	f6058593          	addi	a1,a1,-160 # 2ed60 <typeinfo name for dwarf::expr_context+0x28>
   22e08:	8522                	c.mv	a0,s0
   22e0a:	827f30ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22e0e:	a809                	c.j	22e20 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x70>
	  __throw_length_error(__N(__s));
   22e10:	0000b517          	auipc	a0,0xb
   22e14:	4c050513          	addi	a0,a0,1216 # 2e2d0 <std::piecewise_construct+0x2b0>
   22e18:	889f30ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   22e1c:	84aa                	c.mv	s1,a0
   22e1e:	a0b5                	c.j	22e8a <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xda>
	return _M_append(__s, __n);
   22e20:	89aa                	c.mv	s3,a0
    res.append(":").append(std::to_string(line));
   22e22:	01c4aa03          	lw	s4,28(s1)
    string __str(__detail::__to_chars_len(__val), '\0');
   22e26:	45a9                	c.li	a1,10
   22e28:	8552                	c.mv	a0,s4
   22e2a:	00017317          	auipc	t1,0x17
   22e2e:	68633303          	ld	t1,1670(t1) # 3a4b0 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x15708>
   22e32:	9302                	c.jalr	t1
	: allocator_type(__a), _M_p(__dat) { }
   22e34:	081c                	c.addi4spn	a5,sp,16
   22e36:	e03e                	c.sdsp	a5,0(sp)
      { _M_construct(__n, __c); }
   22e38:	4601                	c.li	a2,0
   22e3a:	02051593          	slli	a1,a0,0x20
   22e3e:	9181                	c.srli	a1,0x20
   22e40:	850a                	c.mv	a0,sp
   22e42:	9bff30ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   22e46:	8652                	c.mv	a2,s4
   22e48:	45a2                	c.lwsp	a1,8(sp)
   22e4a:	6502                	c.ldsp	a0,0(sp)
   22e4c:	00017317          	auipc	t1,0x17
   22e50:	68433303          	ld	t1,1668(t1) # 3a4d0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x156b6>
   22e54:	9302                	c.jalr	t1
      { return _M_dataplus._M_p; }
   22e56:	6582                	c.ldsp	a1,0(sp)
      { return _M_string_length; }
   22e58:	6622                	c.ldsp	a2,8(sp)
	if (this->max_size() - (this->size() - __n1) < __n2)
   22e5a:	0089b703          	ld	a4,8(s3)
   22e5e:	57fd                	c.li	a5,-1
   22e60:	8389                	c.srli	a5,0x2
   22e62:	8f99                	c.sub	a5,a4
   22e64:	00c7e663          	bltu	a5,a2,22e70 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xc0>
	return _M_append(__s, __n);
   22e68:	854e                	c.mv	a0,s3
   22e6a:	fc6f30ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22e6e:	a035                	c.j	22e9a <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xea>
	  __throw_length_error(__N(__s));
   22e70:	0000b517          	auipc	a0,0xb
   22e74:	46050513          	addi	a0,a0,1120 # 2e2d0 <std::piecewise_construct+0x2b0>
   22e78:	829f30ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   22e7c:	84aa                	c.mv	s1,a0
   22e7e:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   22e80:	081c                	c.addi4spn	a5,sp,16
   22e82:	00f50463          	beq	a0,a5,22e8a <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xda>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   22e86:	91bf30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22e8a:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   22e8c:	01250463          	beq	a0,s2,22e94 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xe4>
   22e90:	911f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   22e94:	8526                	c.mv	a0,s1
   22e96:	afbf30ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   22e9a:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   22e9c:	081c                	c.addi4spn	a5,sp,16
   22e9e:	00f50463          	beq	a0,a5,22ea6 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xf6>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   22ea2:	8fff30ef          	jal	ra,167a0 <operator delete(void*)@plt>
    if (column)
   22ea6:	509c                	c.lw	a5,32(s1)
   22ea8:	df8d                	c.beqz	a5,22de2 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x32>
	if (this->max_size() - (this->size() - __n1) < __n2)
   22eaa:	6418                	c.ld	a4,8(s0)
   22eac:	57fd                	c.li	a5,-1
   22eae:	8389                	c.srli	a5,0x2
   22eb0:	00f70b63          	beq	a4,a5,22ec6 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x116>
	return _M_append(__s, __n);
   22eb4:	4605                	c.li	a2,1
   22eb6:	0000c597          	auipc	a1,0xc
   22eba:	eaa58593          	addi	a1,a1,-342 # 2ed60 <typeinfo name for dwarf::expr_context+0x28>
   22ebe:	8522                	c.mv	a0,s0
   22ec0:	f70f30ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22ec4:	a039                	c.j	22ed2 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x122>
	  __throw_length_error(__N(__s));
   22ec6:	0000b517          	auipc	a0,0xb
   22eca:	40a50513          	addi	a0,a0,1034 # 2e2d0 <std::piecewise_construct+0x2b0>
   22ece:	fd2f30ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return _M_append(__s, __n);
   22ed2:	89aa                	c.mv	s3,a0
      res.append(":").append(std::to_string(column));
   22ed4:	5084                	c.lw	s1,32(s1)
    string __str(__detail::__to_chars_len(__val), '\0');
   22ed6:	45a9                	c.li	a1,10
   22ed8:	8526                	c.mv	a0,s1
   22eda:	00017317          	auipc	t1,0x17
   22ede:	5d633303          	ld	t1,1494(t1) # 3a4b0 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x15708>
   22ee2:	9302                	c.jalr	t1
	: allocator_type(__a), _M_p(__dat) { }
   22ee4:	081c                	c.addi4spn	a5,sp,16
   22ee6:	e03e                	c.sdsp	a5,0(sp)
      { _M_construct(__n, __c); }
   22ee8:	4601                	c.li	a2,0
   22eea:	02051593          	slli	a1,a0,0x20
   22eee:	9181                	c.srli	a1,0x20
   22ef0:	850a                	c.mv	a0,sp
   22ef2:	90ff30ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   22ef6:	8626                	c.mv	a2,s1
   22ef8:	45a2                	c.lwsp	a1,8(sp)
   22efa:	6502                	c.ldsp	a0,0(sp)
   22efc:	00017317          	auipc	t1,0x17
   22f00:	5d433303          	ld	t1,1492(t1) # 3a4d0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x156b6>
   22f04:	9302                	c.jalr	t1
      { return _M_dataplus._M_p; }
   22f06:	6582                	c.ldsp	a1,0(sp)
      { return _M_string_length; }
   22f08:	6622                	c.ldsp	a2,8(sp)
	if (this->max_size() - (this->size() - __n1) < __n2)
   22f0a:	0089b703          	ld	a4,8(s3)
   22f0e:	57fd                	c.li	a5,-1
   22f10:	8389                	c.srli	a5,0x2
   22f12:	8f99                	c.sub	a5,a4
   22f14:	00c7e663          	bltu	a5,a2,22f20 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x170>
	return _M_append(__s, __n);
   22f18:	854e                	c.mv	a0,s3
   22f1a:	f16f30ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22f1e:	a839                	c.j	22f3c <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x18c>
	  __throw_length_error(__N(__s));
   22f20:	0000b517          	auipc	a0,0xb
   22f24:	3b050513          	addi	a0,a0,944 # 2e2d0 <std::piecewise_construct+0x2b0>
   22f28:	f78f30ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   22f2c:	84aa                	c.mv	s1,a0
   22f2e:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   22f30:	081c                	c.addi4spn	a5,sp,16
   22f32:	f4f50ce3          	beq	a0,a5,22e8a <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xda>
   22f36:	86bf30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   22f3a:	bf81                	c.j	22e8a <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xda>
      { return _M_dataplus._M_p; }
   22f3c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   22f3e:	081c                	c.addi4spn	a5,sp,16
   22f40:	eaf501e3          	beq	a0,a5,22de2 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x32>
   22f44:	85df30ef          	jal	ra,167a0 <operator delete(void*)@plt>
  return res;
   22f48:	bd69                	c.j	22de2 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x32>

0000000000022f4a <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)>:
bool line_table::impl::read_file_entry(cursor *cur, bool in_header) {
   22f4a:	7175                	c.addi16sp	sp,-144
   22f4c:	e506                	c.sdsp	ra,136(sp)
   22f4e:	e122                	c.sdsp	s0,128(sp)
   22f50:	fca6                	c.sdsp	s1,120(sp)
   22f52:	f8ca                	c.sdsp	s2,112(sp)
  assert(cur->sec == sec);
   22f54:	6118                	c.ld	a4,0(a0)
   22f56:	619c                	c.ld	a5,0(a1)
   22f58:	00f71f63          	bne	a4,a5,22f76 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x2c>
   22f5c:	892a                	c.mv	s2,a0
   22f5e:	842e                	c.mv	s0,a1
   22f60:	84b2                	c.mv	s1,a2
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22f62:	109c                	c.addi4spn	a5,sp,96
   22f64:	e8be                	c.sdsp	a5,80(sp)
      { _M_string_length = __length; }
   22f66:	ec82                	c.sdsp	zero,88(sp)
	__c1 = __c2;
   22f68:	06010023          	sb	zero,96(sp)
  cur->string(file_name);
   22f6c:	088c                	c.addi4spn	a1,sp,80
   22f6e:	8522                	c.mv	a0,s0
   22f70:	f32f80ef          	jal	ra,1b6a2 <dwarf::cursor::string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   22f74:	a00d                	c.j	22f96 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x4c>
  assert(cur->sec == sec);
   22f76:	0000c697          	auipc	a3,0xc
   22f7a:	df268693          	addi	a3,a3,-526 # 2ed68 <typeinfo name for dwarf::expr_context+0x30>
   22f7e:	0bb00613          	addi	a2,zero,187
   22f82:	0000c597          	auipc	a1,0xc
   22f86:	e2e58593          	addi	a1,a1,-466 # 2edb0 <typeinfo name for dwarf::expr_context+0x78>
   22f8a:	0000c517          	auipc	a0,0xc
   22f8e:	e2e50513          	addi	a0,a0,-466 # 2edb8 <typeinfo name for dwarf::expr_context+0x80>
   22f92:	ffef30ef          	jal	ra,16790 <__assert_fail@plt>
  if (in_header && file_name.empty())
   22f96:	c481                	c.beqz	s1,22f9e <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x54>
   22f98:	67e6                	c.ldsp	a5,88(sp)
   22f9a:	1c078863          	beq	a5,zero,2316a <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x220>
    while (pos < sec->end) {
   22f9e:	681c                	c.ld	a5,16(s0)
      { return _M_ptr; }
   22fa0:	600c                	c.ld	a1,0(s0)
   22fa2:	6998                	c.ld	a4,16(a1)
   22fa4:	02e7f763          	bgeu	a5,a4,22fd2 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x88>
   22fa8:	4481                	c.li	s1,0
   22faa:	4601                	c.li	a2,0
      uint8_t byte = *(uint8_t *)(pos++);
   22fac:	0785                	c.addi	a5,1
   22fae:	e81c                	c.sd	a5,16(s0)
   22fb0:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   22fb4:	07f77693          	andi	a3,a4,127
   22fb8:	00c696b3          	sll	a3,a3,a2
   22fbc:	8cd5                	c.or	s1,a3
      if ((byte & 0x80) == 0)
   22fbe:	0187171b          	slliw	a4,a4,0x18
   22fc2:	4187571b          	sraiw	a4,a4,0x18
   22fc6:	00075a63          	bge	a4,zero,22fda <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x90>
      shift += 7;
   22fca:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   22fcc:	6998                	c.ld	a4,16(a1)
   22fce:	fce7efe3          	bltu	a5,a4,22fac <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x62>
    underflow();
   22fd2:	8522                	c.mv	a0,s0
   22fd4:	efef80ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    return 0;
   22fd8:	4481                	c.li	s1,0
    while (pos < sec->end) {
   22fda:	681c                	c.ld	a5,16(s0)
   22fdc:	6008                	c.ld	a0,0(s0)
   22fde:	6918                	c.ld	a4,16(a0)
   22fe0:	02e7f763          	bgeu	a5,a4,2300e <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0xc4>
    std::uint64_t result = 0;
   22fe4:	4581                	c.li	a1,0
    int shift = 0;
   22fe6:	4601                	c.li	a2,0
      uint8_t byte = *(uint8_t *)(pos++);
   22fe8:	0785                	c.addi	a5,1
   22fea:	e81c                	c.sd	a5,16(s0)
   22fec:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   22ff0:	07f77693          	andi	a3,a4,127
   22ff4:	00c696b3          	sll	a3,a3,a2
   22ff8:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   22ffa:	0187171b          	slliw	a4,a4,0x18
   22ffe:	4187571b          	sraiw	a4,a4,0x18
   23002:	00075a63          	bge	a4,zero,23016 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0xcc>
      shift += 7;
   23006:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   23008:	6918                	c.ld	a4,16(a0)
   2300a:	fce7efe3          	bltu	a5,a4,22fe8 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x9e>
    underflow();
   2300e:	8522                	c.mv	a0,s0
   23010:	ec2f80ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    return 0;
   23014:	4581                	c.li	a1,0
  uint64_t mtime = cur->uleb128();
   23016:	e4ae                	c.sdsp	a1,72(sp)
    while (pos < sec->end) {
   23018:	681c                	c.ld	a5,16(s0)
   2301a:	6008                	c.ld	a0,0(s0)
   2301c:	6918                	c.ld	a4,16(a0)
   2301e:	02e7f763          	bgeu	a5,a4,2304c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x102>
    std::uint64_t result = 0;
   23022:	4581                	c.li	a1,0
    int shift = 0;
   23024:	4601                	c.li	a2,0
      uint8_t byte = *(uint8_t *)(pos++);
   23026:	0785                	c.addi	a5,1
   23028:	e81c                	c.sd	a5,16(s0)
   2302a:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   2302e:	07f77693          	andi	a3,a4,127
   23032:	00c696b3          	sll	a3,a3,a2
   23036:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   23038:	0187171b          	slliw	a4,a4,0x18
   2303c:	4187571b          	sraiw	a4,a4,0x18
   23040:	00075a63          	bge	a4,zero,23054 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x10a>
      shift += 7;
   23044:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   23046:	6918                	c.ld	a4,16(a0)
   23048:	fce7efe3          	bltu	a5,a4,23026 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0xdc>
    underflow();
   2304c:	8522                	c.mv	a0,s0
   2304e:	e84f80ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    return 0;
   23052:	4581                	c.li	a1,0
  uint64_t length = cur->uleb128();
   23054:	e0ae                	c.sdsp	a1,64(sp)
  section_offset get_section_offset() const { return pos - sec->begin; }
   23056:	6018                	c.ld	a4,0(s0)
   23058:	681c                	c.ld	a5,16(s0)
   2305a:	6718                	c.ld	a4,8(a4)
   2305c:	8f99                	c.sub	a5,a4
  if (cur->get_section_offset() <= last_file_name_end)
   2305e:	06893703          	ld	a4,104(s2)
   23062:	10f77663          	bgeu	a4,a5,2316e <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x224>
  last_file_name_end = cur->get_section_offset();
   23066:	06f93423          	sd	a5,104(s2)
  if (file_name[0] == '/')
   2306a:	67c6                	c.ldsp	a5,80(sp)
   2306c:	0007c703          	lbu	a4,0(a5)
   23070:	02f00793          	addi	a5,zero,47
   23074:	02f70763          	beq	a4,a5,230a2 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x158>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   23078:	03893703          	ld	a4,56(s2)
   2307c:	04093783          	ld	a5,64(s2)
   23080:	8f99                	c.sub	a5,a4
   23082:	8795                	c.srai	a5,0x5
  else if (dir_index < include_directories.size())
   23084:	06f4f763          	bgeu	s1,a5,230f2 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x1a8>
    file_names.emplace_back(include_directories[dir_index] + file_name, mtime,
   23088:	05090913          	addi	s2,s2,80
	return *(this->_M_impl._M_start + __n);
   2308c:	00549593          	slli	a1,s1,0x5
   23090:	0890                	c.addi4spn	a2,sp,80
   23092:	95ba                	c.add	a1,a4
   23094:	1008                	c.addi4spn	a0,sp,32
   23096:	00017317          	auipc	t1,0x17
   2309a:	54a33303          	ld	t1,1354(t1) # 3a5e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x1549a>
   2309e:	9302                	c.jalr	t1
   230a0:	a821                	c.j	230b8 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x16e>
    file_names.emplace_back(move(file_name), mtime, length);
   230a2:	0094                	c.addi4spn	a3,sp,64
   230a4:	00b0                	c.addi4spn	a2,sp,72
   230a6:	088c                	c.addi4spn	a1,sp,80
   230a8:	05090513          	addi	a0,s2,80
   230ac:	00017317          	auipc	t1,0x17
   230b0:	45433303          	ld	t1,1108(t1) # 3a500 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)@@Base+0x147da>
   230b4:	9302                	c.jalr	t1
   230b6:	a875                	c.j	23172 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x228>
    file_names.emplace_back(include_directories[dir_index] + file_name, mtime,
   230b8:	0094                	c.addi4spn	a3,sp,64
   230ba:	00b0                	c.addi4spn	a2,sp,72
   230bc:	100c                	c.addi4spn	a1,sp,32
   230be:	854a                	c.mv	a0,s2
   230c0:	00017317          	auipc	t1,0x17
   230c4:	44033303          	ld	t1,1088(t1) # 3a500 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)@@Base+0x147da>
   230c8:	9302                	c.jalr	t1
      { return _M_dataplus._M_p; }
   230ca:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   230cc:	181c                	c.addi4spn	a5,sp,48
   230ce:	00f50463          	beq	a0,a5,230d6 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x18c>
   230d2:	ecef30ef          	jal	ra,167a0 <operator delete(void*)@plt>
  return true;
   230d6:	4405                	c.li	s0,1
      { return _M_dataplus._M_p; }
   230d8:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   230da:	109c                	c.addi4spn	a5,sp,96
   230dc:	00f50463          	beq	a0,a5,230e4 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x19a>
   230e0:	ec0f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
}
   230e4:	8522                	c.mv	a0,s0
   230e6:	60aa                	c.ldsp	ra,136(sp)
   230e8:	640a                	c.ldsp	s0,128(sp)
   230ea:	74e6                	c.ldsp	s1,120(sp)
   230ec:	7946                	c.ldsp	s2,112(sp)
   230ee:	6149                	c.addi16sp	sp,144
   230f0:	8082                	c.jr	ra
                       std::to_string(dir_index));
   230f2:	4541                	c.li	a0,16
   230f4:	d9cf30ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   230f8:	892a                	c.mv	s2,a0
   230fa:	85a6                	c.mv	a1,s1
   230fc:	850a                	c.mv	a0,sp
   230fe:	00017317          	auipc	t1,0x17
   23102:	21a33303          	ld	t1,538(t1) # 3a318 <std::__cxx11::to_string(unsigned long)@@Base+0x156aa>
   23106:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   23108:	0000c617          	auipc	a2,0xc
   2310c:	cc060613          	addi	a2,a2,-832 # 2edc8 <typeinfo name for dwarf::expr_context+0x90>
   23110:	4581                	c.li	a1,0
   23112:	850a                	c.mv	a0,sp
   23114:	cecf30ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   23118:	85aa                	c.mv	a1,a0
   2311a:	1000                	c.addi4spn	s0,sp,32
   2311c:	8522                	c.mv	a0,s0
   2311e:	db2f30ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   23122:	85a2                	c.mv	a1,s0
   23124:	854a                	c.mv	a0,s2
   23126:	f0af30ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2312a:	00017797          	auipc	a5,0x17
   2312e:	4467b783          	ld	a5,1094(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   23132:	07c1                	c.addi	a5,16
   23134:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   23138:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   2313a:	181c                	c.addi4spn	a5,sp,48
   2313c:	00f50463          	beq	a0,a5,23144 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x1fa>
   23140:	e60f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23144:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   23146:	081c                	c.addi4spn	a5,sp,16
   23148:	00f50463          	beq	a0,a5,23150 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x206>
   2314c:	e54f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
   23150:	00017617          	auipc	a2,0x17
   23154:	24863603          	ld	a2,584(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   23158:	00017597          	auipc	a1,0x17
   2315c:	1705b583          	ld	a1,368(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   23160:	854a                	c.mv	a0,s2
   23162:	ffef30ef          	jal	ra,16960 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   23166:	842a                	c.mv	s0,a0
   23168:	a831                	c.j	23184 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x23a>
    return false;
   2316a:	4401                	c.li	s0,0
   2316c:	b7b5                	c.j	230d8 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x18e>
    return true;
   2316e:	4405                	c.li	s0,1
   23170:	b7a5                	c.j	230d8 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x18e>
  return true;
   23172:	4405                	c.li	s0,1
   23174:	b795                	c.j	230d8 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x18e>
   23176:	842a                	c.mv	s0,a0
   23178:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   2317a:	181c                	c.addi4spn	a5,sp,48
   2317c:	00f50463          	beq	a0,a5,23184 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x23a>
   23180:	e20f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23184:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   23186:	109c                	c.addi4spn	a5,sp,96
   23188:	00f50463          	beq	a0,a5,23190 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x246>
   2318c:	e14f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   23190:	8522                	c.mv	a0,s0
   23192:	ffef30ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   23196:	842a                	c.mv	s0,a0
   23198:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   2319a:	181c                	c.addi4spn	a5,sp,48
   2319c:	00f50463          	beq	a0,a5,231a4 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x25a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   231a0:	e00f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   231a4:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   231a6:	081c                	c.addi4spn	a5,sp,16
   231a8:	00f50463          	beq	a0,a5,231b0 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x266>
   231ac:	df4f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
                       std::to_string(dir_index));
   231b0:	854a                	c.mv	a0,s2
   231b2:	d9ef30ef          	jal	ra,16750 <__cxa_free_exception@plt>
   231b6:	b7f9                	c.j	23184 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x23a>
      { return _M_dataplus._M_p; }
   231b8:	842a                	c.mv	s0,a0
   231ba:	b7ed                	c.j	231a4 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x25a>
   231bc:	842a                	c.mv	s0,a0
   231be:	bfcd                	c.j	231b0 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x266>

00000000000231c0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
line_table::line_table(const shared_ptr<section> &sec, section_offset offset,
   231c0:	7105                	c.addi16sp	sp,-480
   231c2:	ef86                	c.sdsp	ra,472(sp)
   231c4:	eba2                	c.sdsp	s0,464(sp)
   231c6:	e7a6                	c.sdsp	s1,456(sp)
   231c8:	e3ca                	c.sdsp	s2,448(sp)
   231ca:	ff4e                	c.sdsp	s3,440(sp)
   231cc:	fb52                	c.sdsp	s4,432(sp)
   231ce:	f756                	c.sdsp	s5,424(sp)
   231d0:	f35a                	c.sdsp	s6,416(sp)
   231d2:	ef5e                	c.sdsp	s7,408(sp)
   231d4:	eb62                	c.sdsp	s8,400(sp)
   231d6:	e766                	c.sdsp	s9,392(sp)
   231d8:	e36a                	c.sdsp	s10,384(sp)
   231da:	feee                	c.sdsp	s11,376(sp)
   231dc:	842a                	c.mv	s0,a0
   231de:	892e                	c.mv	s2,a1
   231e0:	8ab2                	c.mv	s5,a2
   231e2:	8a36                	c.mv	s4,a3
   231e4:	84ba                	c.mv	s1,a4
   231e6:	89be                	c.mv	s3,a5
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   231e8:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   231ec:	0b000513          	addi	a0,zero,176
   231f0:	dc0f30ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   231f4:	00052423          	sw	zero,8(a0)
   231f8:	00052623          	sw	zero,12(a0)
   231fc:	00052823          	sw	zero,16(a0)
   23200:	00052a23          	sw	zero,20(a0)
   23204:	00052c23          	sw	zero,24(a0)
   23208:	00052e23          	sw	zero,28(a0)
   2320c:	02053023          	sd	zero,32(a0)
   23210:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   23214:	4785                	c.li	a5,1
   23216:	d91c                	c.sw	a5,48(a0)
   23218:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   2321a:	00017797          	auipc	a5,0x17
   2321e:	1967b783          	ld	a5,406(a5) # 3a3b0 <vtable for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x8a8>
   23222:	07c1                	c.addi	a5,16
   23224:	e11c                	c.sd	a5,0(a0)
      : _M_ptr(0), _M_refcount()
   23226:	02053c23          	sd	zero,56(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   2322a:	04053023          	sd	zero,64(a0)
	: _M_start(), _M_finish(), _M_end_of_storage()
   2322e:	04053c23          	sd	zero,88(a0)
   23232:	06053023          	sd	zero,96(a0)
   23236:	06053423          	sd	zero,104(a0)
   2323a:	06053823          	sd	zero,112(a0)
   2323e:	06053c23          	sd	zero,120(a0)
   23242:	08053023          	sd	zero,128(a0)
   23246:	08053423          	sd	zero,136(a0)
   2324a:	08053823          	sd	zero,144(a0)
   2324e:	08053c23          	sd	zero,152(a0)
  impl() : last_file_name_end(0), file_names_complete(false){};
   23252:	0a053023          	sd	zero,160(a0)
   23256:	0a050423          	sb	zero,168(a0)
	  _M_pi = __pi;
   2325a:	e408                	c.sd	a0,8(s0)
   2325c:	03850513          	addi	a0,a0,56
	  __p = __pi->_M_ptr();
   23260:	e008                	c.sd	a0,0(s0)
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   23262:	181c                	c.addi4spn	a5,sp,48
   23264:	f03e                	c.sdsp	a5,32(sp)
      { _M_string_length = __length; }
   23266:	f402                	c.sdsp	zero,40(sp)
   23268:	02010823          	sb	zero,48(sp)
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2326c:	089c                	c.addi4spn	a5,sp,80
   2326e:	e0be                	c.sdsp	a5,64(sp)
      { _M_string_length = __length; }
   23270:	e482                	c.sdsp	zero,72(sp)
   23272:	04010823          	sb	zero,80(sp)
      { return _M_string_length; }
   23276:	6490                	c.ld	a2,8(s1)
  if (cu_comp_dir.empty() || cu_comp_dir.back() == '/')
   23278:	ca11                	c.beqz	a2,2328c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc>
      { return _M_dataplus._M_p; }
   2327a:	608c                	c.ld	a1,0(s1)
   2327c:	00c587b3          	add	a5,a1,a2
   23280:	fff7c703          	lbu	a4,-1(a5)
   23284:	02f00793          	addi	a5,zero,47
   23288:	00f71763          	bne	a4,a5,23296 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd6>
	this->_M_assign(__str);
   2328c:	85a6                	c.mv	a1,s1
   2328e:	1008                	c.addi4spn	a0,sp,32
   23290:	c20f30ef          	jal	ra,166b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   23294:	a869                	c.j	2332e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x16e>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   23296:	0a9c                	c.addi4spn	a5,sp,336
   23298:	e2be                	c.sdsp	a5,320(sp)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   2329a:	4681                	c.li	a3,0
   2329c:	962e                	c.add	a2,a1
   2329e:	0288                	c.addi4spn	a0,sp,320
   232a0:	00017317          	auipc	t1,0x17
   232a4:	08833303          	ld	t1,136(t1) # 3a328 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x15240>
   232a8:	9302                	c.jalr	t1
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
   232aa:	02f00713          	addi	a4,zero,47
   232ae:	4685                	c.li	a3,1
   232b0:	4601                	c.li	a2,0
   232b2:	65b6                	c.ldsp	a1,328(sp)
   232b4:	0288                	c.addi4spn	a0,sp,320
   232b6:	f3af30ef          	jal	ra,169f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)@plt>
   232ba:	a835                	c.j	232f6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x136>
      { return _M_dataplus._M_p; }
   232bc:	84aa                	c.mv	s1,a0
   232be:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   232c0:	0a9c                	c.addi4spn	a5,sp,336
   232c2:	00f50463          	beq	a0,a5,232ca <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   232c6:	cdaf30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   232ca:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   232cc:	089c                	c.addi4spn	a5,sp,80
   232ce:	00f50463          	beq	a0,a5,232d6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x116>
   232d2:	ccef30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   232d6:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   232d8:	181c                	c.addi4spn	a5,sp,48
   232da:	00f50463          	beq	a0,a5,232e2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x122>
   232de:	cc2f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   232e2:	6408                	c.ld	a0,8(s0)
   232e4:	c511                	c.beqz	a0,232f0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x130>
	  _M_pi->_M_release();
   232e6:	00017317          	auipc	t1,0x17
   232ea:	0fa33303          	ld	t1,250(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   232ee:	9302                	c.jalr	t1
   232f0:	8526                	c.mv	a0,s1
   232f2:	e9ef30ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   232f6:	7502                	c.ldsp	a0,32(sp)
   232f8:	6796                	c.ldsp	a5,320(sp)
	if (__str._M_is_local())
   232fa:	0a98                	c.addi4spn	a4,sp,336
   232fc:	0ce78163          	beq	a5,a4,233be <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1fe>
	    if (!_M_is_local())
   23300:	1818                	c.addi4spn	a4,sp,48
   23302:	36e50ee3          	beq	a0,a4,23e7e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcbe>
		    __capacity = _M_allocated_capacity;
   23306:	7742                	c.ldsp	a4,48(sp)
      { _M_dataplus._M_p = __p; }
   23308:	f03e                	c.sdsp	a5,32(sp)
      { _M_string_length = __length; }
   2330a:	67b6                	c.ldsp	a5,328(sp)
   2330c:	f43e                	c.sdsp	a5,40(sp)
      { _M_allocated_capacity = __capacity; }
   2330e:	67d6                	c.ldsp	a5,336(sp)
   23310:	f83e                	c.sdsp	a5,48(sp)
	    if (__data)
   23312:	36050be3          	beq	a0,zero,23e88 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc8>
      { _M_dataplus._M_p = __p; }
   23316:	e2aa                	c.sdsp	a0,320(sp)
      { _M_allocated_capacity = __capacity; }
   23318:	eaba                	c.sdsp	a4,336(sp)
      { _M_string_length = __length; }
   2331a:	e682                	c.sdsp	zero,328(sp)
      { return _M_dataplus._M_p; }
   2331c:	6796                	c.ldsp	a5,320(sp)
   2331e:	00078023          	sb	zero,0(a5)
   23322:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   23324:	0a9c                	c.addi4spn	a5,sp,336
   23326:	00f50463          	beq	a0,a5,2332e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x16e>
   2332a:	c76f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2332e:	00093b03          	ld	s6,0(s2)
      : _M_pi(__r._M_pi)
   23332:	00893483          	ld	s1,8(s2)
	if (_M_pi != nullptr)
   23336:	320487e3          	beq	s1,zero,23e64 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xca4>
    if (__is_single_threaded())
   2333a:	00017797          	auipc	a5,0x17
   2333e:	15e7b783          	ld	a5,350(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   23342:	0007c783          	lbu	a5,0(a5)
   23346:	c3cd                	c.beqz	a5,233e8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x228>
  { *__mem += __val; }
   23348:	589c                	c.lw	a5,48(s1)
   2334a:	2785                	c.addiw	a5,1
   2334c:	d89c                	c.sw	a5,48(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2334e:	e45a                	c.sdsp	s6,8(sp)
      : _M_pi(__r._M_pi)
   23350:	e826                	c.sdsp	s1,16(sp)
    if (__is_single_threaded())
   23352:	00017797          	auipc	a5,0x17
   23356:	1467b783          	ld	a5,326(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2335a:	0007c783          	lbu	a5,0(a5)
   2335e:	cbd9                	c.beqz	a5,233f4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x234>
  { *__mem += __val; }
   23360:	589c                	c.lw	a5,48(s1)
   23362:	2785                	c.addiw	a5,1
   23364:	d89c                	c.sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   23366:	008b3783          	ld	a5,8(s6)
   2336a:	97d6                	c.add	a5,s5
   2336c:	ec3e                	c.sdsp	a5,24(sp)
    if (__is_single_threaded())
   2336e:	00017797          	auipc	a5,0x17
   23372:	12a7b783          	ld	a5,298(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   23376:	0007c783          	lbu	a5,0(a5)
   2337a:	c3d9                	c.beqz	a5,23400 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x240>
    _Atomic_word __result = *__mem;
   2337c:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   2337e:	fff5079b          	addiw	a5,a0,-1
   23382:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   23384:	4785                	c.li	a5,1
   23386:	2ef515e3          	bne	a0,a5,23e70 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcb0>
	_M_dispose();
   2338a:	609c                	c.ld	a5,0(s1)
   2338c:	6b9c                	c.ld	a5,16(a5)
   2338e:	8526                	c.mv	a0,s1
   23390:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   23392:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   23396:	00017797          	auipc	a5,0x17
   2339a:	1027b783          	ld	a5,258(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2339e:	0007c783          	lbu	a5,0(a5)
   233a2:	c7ad                	c.beqz	a5,2340c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x24c>
    _Atomic_word __result = *__mem;
   233a4:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   233a6:	fff5079b          	addiw	a5,a0,-1
   233aa:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   233ac:	4785                	c.li	a5,1
   233ae:	2cf511e3          	bne	a0,a5,23e70 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcb0>
	    _M_destroy();
   233b2:	609c                	c.ld	a5,0(s1)
   233b4:	6f9c                	c.ld	a5,24(a5)
   233b6:	8526                	c.mv	a0,s1
   233b8:	9782                	c.jalr	a5
   233ba:	2b70006f          	jal	zero,23e70 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcb0>
      { return _M_string_length; }
   233be:	6636                	c.ldsp	a2,328(sp)
		if (__str.size())
   233c0:	ea01                	c.bnez	a2,233d0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x210>
      { return _M_string_length; }
   233c2:	6736                	c.ldsp	a4,328(sp)
      { _M_string_length = __length; }
   233c4:	f43a                	c.sdsp	a4,40(sp)
   233c6:	7782                	c.ldsp	a5,32(sp)
   233c8:	97ba                	c.add	a5,a4
   233ca:	00078023          	sb	zero,0(a5)
      }
   233ce:	b7b1                	c.j	2331a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x15a>
	if (__n == 1)
   233d0:	4785                	c.li	a5,1
   233d2:	00f60663          	beq	a2,a5,233de <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x21e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   233d6:	0a8c                	c.addi4spn	a1,sp,336
   233d8:	c68f30ef          	jal	ra,16840 <memcpy@plt>
   233dc:	b7dd                	c.j	233c2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x202>
	__c1 = __c2;
   233de:	15014783          	lbu	a5,336(sp)
   233e2:	00f50023          	sb	a5,0(a0)
      }
   233e6:	bff1                	c.j	233c2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x202>
      __atomic_add(__mem, __val);
   233e8:	4585                	c.li	a1,1
   233ea:	03048513          	addi	a0,s1,48
   233ee:	9c2f30ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   233f2:	bfb1                	c.j	2334e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x18e>
   233f4:	4585                	c.li	a1,1
   233f6:	03048513          	addi	a0,s1,48
   233fa:	9b6f30ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   233fe:	b7a5                	c.j	23366 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1a6>
      return __exchange_and_add(__mem, __val);
   23400:	55fd                	c.li	a1,-1
   23402:	03048513          	addi	a0,s1,48
   23406:	9eaf30ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2340a:	bfad                	c.j	23384 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1c4>
   2340c:	55fd                	c.li	a1,-1
   2340e:	03448513          	addi	a0,s1,52
   23412:	9def30ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   23416:	bf59                	c.j	233ac <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1ec>
      : _M_ptr(__r._M_ptr), _M_refcount()
   23418:	7716                	c.ldsp	a4,352(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   2341a:	77b6                	c.ldsp	a5,360(sp)
	__r._M_pi = _M_pi;
   2341c:	f682                	c.sdsp	zero,360(sp)
	__r._M_ptr = nullptr;
   2341e:	f282                	c.sdsp	zero,352(sp)
   23420:	e098                	c.sd	a4,0(s1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   23422:	0084b903          	ld	s2,8(s1)
	__r._M_pi = _M_pi;
   23426:	e49c                	c.sd	a5,8(s1)
	if (_M_pi != nullptr)
   23428:	08090763          	beq	s2,zero,234b6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2f6>
    if (__is_single_threaded())
   2342c:	00017797          	auipc	a5,0x17
   23430:	06c7b783          	ld	a5,108(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   23434:	0007c783          	lbu	a5,0(a5)
   23438:	c7b9                	c.beqz	a5,23486 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2c6>
    _Atomic_word __result = *__mem;
   2343a:	03092783          	lw	a5,48(s2)
    *__mem += __val;
   2343e:	fff7871b          	addiw	a4,a5,-1
   23442:	02e92823          	sw	a4,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   23446:	4705                	c.li	a4,1
   23448:	06e79763          	bne	a5,a4,234b6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2f6>
	_M_dispose();
   2344c:	00093783          	ld	a5,0(s2)
   23450:	6b9c                	c.ld	a5,16(a5)
   23452:	854a                	c.mv	a0,s2
   23454:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   23456:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2345a:	00017797          	auipc	a5,0x17
   2345e:	03e7b783          	ld	a5,62(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   23462:	0007c783          	lbu	a5,0(a5)
   23466:	c7f9                	c.beqz	a5,23534 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x374>
    _Atomic_word __result = *__mem;
   23468:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   2346c:	fff5079b          	addiw	a5,a0,-1
   23470:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   23474:	4785                	c.li	a5,1
   23476:	02f51063          	bne	a0,a5,23496 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2d6>
	    _M_destroy();
   2347a:	00093783          	ld	a5,0(s2)
   2347e:	6f9c                	c.ld	a5,24(a5)
   23480:	854a                	c.mv	a0,s2
   23482:	9782                	c.jalr	a5
   23484:	a809                	c.j	23496 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2d6>
      return __exchange_and_add(__mem, __val);
   23486:	55fd                	c.li	a1,-1
   23488:	03090513          	addi	a0,s2,48
   2348c:	964f30ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   23490:	4785                	c.li	a5,1
   23492:	faf50de3          	beq	a0,a5,2344c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x28c>
	if (_M_pi != nullptr)
   23496:	74b6                	c.ldsp	s1,360(sp)
   23498:	cc99                	c.beqz	s1,234b6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2f6>
    if (__is_single_threaded())
   2349a:	00017797          	auipc	a5,0x17
   2349e:	ffe7b783          	ld	a5,-2(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   234a2:	0007c783          	lbu	a5,0(a5)
   234a6:	cfc9                	c.beqz	a5,23540 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x380>
    _Atomic_word __result = *__mem;
   234a8:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   234aa:	fff5079b          	addiw	a5,a0,-1
   234ae:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   234b0:	4785                	c.li	a5,1
   234b2:	08f50d63          	beq	a0,a5,2354c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x38c>
      { return _M_ptr; }
   234b6:	601c                	c.ld	a5,0(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   234b8:	0007b903          	ld	s2,0(a5)
      : _M_pi(__r._M_pi)
   234bc:	6784                	c.ld	s1,8(a5)
	if (_M_pi != nullptr)
   234be:	180489e3          	beq	s1,zero,23e50 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc90>
    if (__is_single_threaded())
   234c2:	00017797          	auipc	a5,0x17
   234c6:	fd67b783          	ld	a5,-42(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   234ca:	0007c783          	lbu	a5,0(a5)
   234ce:	cfd5                	c.beqz	a5,2358a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3ca>
  { *__mem += __val; }
   234d0:	589c                	c.lw	a5,48(s1)
   234d2:	2785                	c.addiw	a5,1
   234d4:	d89c                	c.sw	a5,48(s1)
   234d6:	589c                	c.lw	a5,48(s1)
   234d8:	2785                	c.addiw	a5,1
   234da:	d89c                	c.sw	a5,48(s1)
   234dc:	00893a83          	ld	s5,8(s2)
   234e0:	e44a                	c.sdsp	s2,8(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   234e2:	6942                	c.ldsp	s2,16(sp)
	__r._M_pi = _M_pi;
   234e4:	e826                	c.sdsp	s1,16(sp)
	if (_M_pi != nullptr)
   234e6:	160902e3          	beq	s2,zero,23e4a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc8a>
    if (__is_single_threaded())
   234ea:	00017797          	auipc	a5,0x17
   234ee:	fae7b783          	ld	a5,-82(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   234f2:	0007c783          	lbu	a5,0(a5)
   234f6:	cfc5                	c.beqz	a5,235ae <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3ee>
    _Atomic_word __result = *__mem;
   234f8:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   234fc:	fff5079b          	addiw	a5,a0,-1
   23500:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   23504:	4785                	c.li	a5,1
   23506:	0af50a63          	beq	a0,a5,235ba <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3fa>
struct cursor {
   2350a:	ec56                	c.sdsp	s5,24(sp)
	if (_M_pi != nullptr)
   2350c:	c085                	c.beqz	s1,2352c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x36c>
    if (__is_single_threaded())
   2350e:	00017797          	auipc	a5,0x17
   23512:	f8a7b783          	ld	a5,-118(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   23516:	0007c783          	lbu	a5,0(a5)
   2351a:	0e078363          	beq	a5,zero,23600 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x440>
    _Atomic_word __result = *__mem;
   2351e:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   23520:	fff5079b          	addiw	a5,a0,-1
   23524:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   23526:	4785                	c.li	a5,1
   23528:	0ef50263          	beq	a0,a5,2360c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x44c>
  cur.skip_initial_length();
   2352c:	0028                	c.addi4spn	a0,sp,8
   2352e:	890f80ef          	jal	ra,1b5be <dwarf::cursor::skip_initial_length()>
   23532:	aa21                	c.j	2364a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x48a>
      return __exchange_and_add(__mem, __val);
   23534:	55fd                	c.li	a1,-1
   23536:	03490513          	addi	a0,s2,52
   2353a:	8b6f30ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2353e:	bf1d                	c.j	23474 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2b4>
   23540:	55fd                	c.li	a1,-1
   23542:	03048513          	addi	a0,s1,48
   23546:	8aaf30ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2354a:	b79d                	c.j	234b0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2f0>
	_M_dispose();
   2354c:	609c                	c.ld	a5,0(s1)
   2354e:	6b9c                	c.ld	a5,16(a5)
   23550:	8526                	c.mv	a0,s1
   23552:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   23554:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   23558:	00017797          	auipc	a5,0x17
   2355c:	f407b783          	ld	a5,-192(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   23560:	0007c783          	lbu	a5,0(a5)
   23564:	cf89                	c.beqz	a5,2357e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3be>
    _Atomic_word __result = *__mem;
   23566:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   23568:	fff5079b          	addiw	a5,a0,-1
   2356c:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2356e:	4785                	c.li	a5,1
   23570:	f4f513e3          	bne	a0,a5,234b6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2f6>
	    _M_destroy();
   23574:	609c                	c.ld	a5,0(s1)
   23576:	6f9c                	c.ld	a5,24(a5)
   23578:	8526                	c.mv	a0,s1
   2357a:	9782                	c.jalr	a5
   2357c:	bf2d                	c.j	234b6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2f6>
      return __exchange_and_add(__mem, __val);
   2357e:	55fd                	c.li	a1,-1
   23580:	03448513          	addi	a0,s1,52
   23584:	86cf30ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   23588:	b7dd                	c.j	2356e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3ae>
      __atomic_add(__mem, __val);
   2358a:	4585                	c.li	a1,1
   2358c:	03048513          	addi	a0,s1,48
   23590:	820f30ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
    if (__is_single_threaded())
   23594:	00017797          	auipc	a5,0x17
   23598:	f047b783          	ld	a5,-252(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2359c:	0007c783          	lbu	a5,0(a5)
   235a0:	fb9d                	c.bnez	a5,234d6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x316>
      __atomic_add(__mem, __val);
   235a2:	4585                	c.li	a1,1
   235a4:	03048513          	addi	a0,s1,48
   235a8:	808f30ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   235ac:	bf05                	c.j	234dc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x31c>
      return __exchange_and_add(__mem, __val);
   235ae:	55fd                	c.li	a1,-1
   235b0:	03090513          	addi	a0,s2,48
   235b4:	83cf30ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   235b8:	b7b1                	c.j	23504 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x344>
	_M_dispose();
   235ba:	00093783          	ld	a5,0(s2)
   235be:	6b9c                	c.ld	a5,16(a5)
   235c0:	854a                	c.mv	a0,s2
   235c2:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   235c4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   235c8:	00017797          	auipc	a5,0x17
   235cc:	ed07b783          	ld	a5,-304(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   235d0:	0007c783          	lbu	a5,0(a5)
   235d4:	c385                	c.beqz	a5,235f4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x434>
    _Atomic_word __result = *__mem;
   235d6:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   235da:	fff5079b          	addiw	a5,a0,-1
   235de:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   235e2:	4785                	c.li	a5,1
   235e4:	f2f513e3          	bne	a0,a5,2350a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x34a>
	    _M_destroy();
   235e8:	00093783          	ld	a5,0(s2)
   235ec:	6f9c                	c.ld	a5,24(a5)
   235ee:	854a                	c.mv	a0,s2
   235f0:	9782                	c.jalr	a5
   235f2:	bf21                	c.j	2350a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x34a>
      return __exchange_and_add(__mem, __val);
   235f4:	55fd                	c.li	a1,-1
   235f6:	03490513          	addi	a0,s2,52
   235fa:	ff7f20ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   235fe:	b7d5                	c.j	235e2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x422>
   23600:	55fd                	c.li	a1,-1
   23602:	03048513          	addi	a0,s1,48
   23606:	febf20ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2360a:	bf31                	c.j	23526 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x366>
	_M_dispose();
   2360c:	609c                	c.ld	a5,0(s1)
   2360e:	6b9c                	c.ld	a5,16(a5)
   23610:	8526                	c.mv	a0,s1
   23612:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   23614:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   23618:	00017797          	auipc	a5,0x17
   2361c:	e807b783          	ld	a5,-384(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   23620:	0007c783          	lbu	a5,0(a5)
   23624:	cf89                	c.beqz	a5,2363e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x47e>
    _Atomic_word __result = *__mem;
   23626:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   23628:	fff5079b          	addiw	a5,a0,-1
   2362c:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2362e:	4785                	c.li	a5,1
   23630:	eef51ee3          	bne	a0,a5,2352c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x36c>
	    _M_destroy();
   23634:	609c                	c.ld	a5,0(s1)
   23636:	6f9c                	c.ld	a5,24(a5)
   23638:	8526                	c.mv	a0,s1
   2363a:	9782                	c.jalr	a5
   2363c:	bdc5                	c.j	2352c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x36c>
      return __exchange_and_add(__mem, __val);
   2363e:	55fd                	c.li	a1,-1
   23640:	03448513          	addi	a0,s1,52
   23644:	fadf20ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   23648:	b7dd                	c.j	2362e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x46e>
      { return _M_ptr; }
   2364a:	601c                	c.ld	a5,0(s0)
   2364c:	639c                	c.ld	a5,0(a5)
  m->sec->addr_size = cu_addr_size;
   2364e:	0347a023          	sw	s4,32(a5)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23652:	67a2                	c.ldsp	a5,8(sp)
   23654:	6b98                	c.ld	a4,16(a5)
   23656:	67e2                	c.ldsp	a5,24(sp)
   23658:	40f70633          	sub	a2,a4,a5
   2365c:	4685                	c.li	a3,1
   2365e:	00c6f463          	bgeu	a3,a2,23666 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4a6>
   23662:	00e7e563          	bltu	a5,a4,2366c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4ac>
      underflow();
   23666:	0028                	c.addi4spn	a0,sp,8
   23668:	86af80ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   2366c:	6762                	c.ldsp	a4,24(sp)
    if (sec->ord == byte_order::lsb) {
   2366e:	67a2                	c.ldsp	a5,8(sp)
   23670:	4fdc                	c.lw	a5,28(a5)
   23672:	e795                	c.bnez	a5,2369e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4de>
        val |= ((uint64_t)p[i]) << (i * 8);
   23674:	00174783          	lbu	a5,1(a4)
   23678:	07a2                	c.slli	a5,0x8
   2367a:	00074683          	lbu	a3,0(a4)
   2367e:	8fd5                	c.or	a5,a3
    pos += sizeof(T);
   23680:	0709                	c.addi	a4,2
   23682:	ec3a                	c.sdsp	a4,24(sp)
    return (T)val;
   23684:	03079493          	slli	s1,a5,0x30
   23688:	90c1                	c.srli	s1,0x30
  if (version < 2 || version > 4)
   2368a:	37f9                	c.addiw	a5,-2
   2368c:	17c2                	c.slli	a5,0x30
   2368e:	93c1                	c.srli	a5,0x30
   23690:	4709                	c.li	a4,2
   23692:	00f76d63          	bltu	a4,a5,236ac <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4ec>
  section_length header_length = cur.offset();
   23696:	0028                	c.addi4spn	a0,sp,8
   23698:	d60f80ef          	jal	ra,1bbf8 <dwarf::cursor::offset()>
   2369c:	a069                	c.j	23726 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x566>
        val = (val << 8) | (uint64_t)p[i];
   2369e:	00074783          	lbu	a5,0(a4)
   236a2:	07a2                	c.slli	a5,0x8
   236a4:	00174683          	lbu	a3,1(a4)
   236a8:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   236aa:	bfd9                	c.j	23680 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4c0>
                       std::to_string(version));
   236ac:	4541                	c.li	a0,16
   236ae:	fe3f20ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   236b2:	892a                	c.mv	s2,a0
   236b4:	85a6                	c.mv	a1,s1
   236b6:	0284                	c.addi4spn	s1,sp,320
   236b8:	8526                	c.mv	a0,s1
   236ba:	00017317          	auipc	t1,0x17
   236be:	dee33303          	ld	t1,-530(t1) # 3a4a8 <std::__cxx11::to_string(int)@@Base+0x2018e>
   236c2:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   236c4:	0000b617          	auipc	a2,0xb
   236c8:	73460613          	addi	a2,a2,1844 # 2edf8 <typeinfo name for dwarf::expr_context+0xc0>
   236cc:	4581                	c.li	a1,0
   236ce:	8526                	c.mv	a0,s1
   236d0:	f31f20ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   236d4:	85aa                	c.mv	a1,a0
   236d6:	1204                	c.addi4spn	s1,sp,288
   236d8:	8526                	c.mv	a0,s1
   236da:	ff7f20ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   236de:	85a6                	c.mv	a1,s1
   236e0:	854a                	c.mv	a0,s2
   236e2:	94ef30ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   236e6:	00017797          	auipc	a5,0x17
   236ea:	e8a7b783          	ld	a5,-374(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   236ee:	07c1                	c.addi	a5,16
   236f0:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   236f4:	7512                	c.ldsp	a0,288(sp)
	if (!_M_is_local())
   236f6:	1a1c                	c.addi4spn	a5,sp,304
   236f8:	00f50463          	beq	a0,a5,23700 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x540>
   236fc:	8a4f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23700:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   23702:	0a9c                	c.addi4spn	a5,sp,336
   23704:	00f50463          	beq	a0,a5,2370c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x54c>
   23708:	898f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2370c:	00017617          	auipc	a2,0x17
   23710:	c8c63603          	ld	a2,-884(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   23714:	00017597          	auipc	a1,0x17
   23718:	bb45b583          	ld	a1,-1100(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   2371c:	854a                	c.mv	a0,s2
   2371e:	a42f30ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   23722:	84aa                	c.mv	s1,a0
   23724:	a9ed                	c.j	23c1e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa5e>
  section_offset get_section_offset() const { return pos - sec->begin; }
   23726:	6762                	c.ldsp	a4,24(sp)
      { return _M_ptr; }
   23728:	66a2                	c.ldsp	a3,8(sp)
   2372a:	00043903          	ld	s2,0(s0)
   2372e:	669c                	c.ld	a5,8(a3)
   23730:	40f707b3          	sub	a5,a4,a5
  m->program_offset = cur.get_section_offset() + header_length;
   23734:	97aa                	c.add	a5,a0
   23736:	00f93823          	sd	a5,16(s2)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2373a:	6a9c                	c.ld	a5,16(a3)
   2373c:	00f76563          	bltu	a4,a5,23746 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x586>
      underflow();
   23740:	0028                	c.addi4spn	a0,sp,8
   23742:	f91f70ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   23746:	67e2                	c.ldsp	a5,24(sp)
   23748:	6722                	c.ldsp	a4,8(sp)
    if (sec->ord == byte_order::lsb) {
   2374a:	4f54                	c.lw	a3,28(a4)
   2374c:	6c068763          	beq	a3,zero,23e1a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc5a>
        val = (val << 8) | (uint64_t)p[i];
   23750:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   23754:	a5e9                	c.j	23e1e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc5e>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23756:	6b18                	c.ld	a4,16(a4)
   23758:	00e7e563          	bltu	a5,a4,23762 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5a2>
      underflow();
   2375c:	0028                	c.addi4spn	a0,sp,8
   2375e:	f75f70ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   23762:	67e2                	c.ldsp	a5,24(sp)
    if (sec->ord == byte_order::lsb) {
   23764:	6722                	c.ldsp	a4,8(sp)
   23766:	4f58                	c.lw	a4,28(a4)
   23768:	68070463          	beq	a4,zero,23df0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc30>
        val = (val << 8) | (uint64_t)p[i];
   2376c:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   23770:	a551                	c.j	23df4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc34>
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   23772:	00017797          	auipc	a5,0x17
   23776:	dfe7b783          	ld	a5,-514(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   2377a:	07c1                	c.addi	a5,16
   2377c:	00f93023          	sd	a5,0(s2)
                       " be 0 in line number table");
   23780:	00017617          	auipc	a2,0x17
   23784:	c1863603          	ld	a2,-1000(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   23788:	00017597          	auipc	a1,0x17
   2378c:	b405b583          	ld	a1,-1216(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   23790:	854a                	c.mv	a0,s2
   23792:	9cef30ef          	jal	ra,16960 <__cxa_throw@plt>
    const unsigned char *p = (const unsigned char *)pos;
   23796:	67e2                	c.ldsp	a5,24(sp)
   23798:	66a2                	c.ldsp	a3,8(sp)
    if (sec->ord == byte_order::lsb) {
   2379a:	4ed8                	c.lw	a4,28(a3)
   2379c:	62070a63          	beq	a4,zero,23dd0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc10>
        val = (val << 8) | (uint64_t)p[i];
   237a0:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   237a4:	ad05                	c.j	23dd4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc14>
    const unsigned char *p = (const unsigned char *)pos;
   237a6:	67e2                	c.ldsp	a5,24(sp)
   237a8:	6722                	c.ldsp	a4,8(sp)
    if (sec->ord == byte_order::lsb) {
   237aa:	4f54                	c.lw	a3,28(a4)
   237ac:	60068463          	beq	a3,zero,23db4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbf4>
        val = (val << 8) | (uint64_t)p[i];
   237b0:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   237b4:	a511                	c.j	23db8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbf8>
    const unsigned char *p = (const unsigned char *)pos;
   237b6:	67e2                	c.ldsp	a5,24(sp)
   237b8:	6722                	c.ldsp	a4,8(sp)
    if (sec->ord == byte_order::lsb) {
   237ba:	4f54                	c.lw	a3,28(a4)
   237bc:	5c068a63          	beq	a3,zero,23d90 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbd0>
        val = (val << 8) | (uint64_t)p[i];
   237c0:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   237c4:	abc1                	c.j	23d94 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbd4>
    throw format_error("line_range cannot be 0 in line number table");
   237c6:	4541                	c.li	a0,16
   237c8:	ec9f20ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   237cc:	892a                	c.mv	s2,a0
   237ce:	0000b597          	auipc	a1,0xb
   237d2:	69a58593          	addi	a1,a1,1690 # 2ee68 <typeinfo name for dwarf::expr_context+0x130>
   237d6:	a3af30ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   237da:	00017797          	auipc	a5,0x17
   237de:	d967b783          	ld	a5,-618(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   237e2:	07c1                	c.addi	a5,16
   237e4:	00f93023          	sd	a5,0(s2)
   237e8:	00017617          	auipc	a2,0x17
   237ec:	bb063603          	ld	a2,-1104(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   237f0:	00017597          	auipc	a1,0x17
   237f4:	ad85b583          	ld	a1,-1320(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   237f8:	854a                	c.mv	a0,s2
   237fa:	966f30ef          	jal	ra,16960 <__cxa_throw@plt>
    const unsigned char *p = (const unsigned char *)pos;
   237fe:	67e2                	c.ldsp	a5,24(sp)
    if (sec->ord == byte_order::lsb) {
   23800:	6722                	c.ldsp	a4,8(sp)
   23802:	4f58                	c.lw	a4,28(a4)
   23804:	54070063          	beq	a4,zero,23d44 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb84>
        val = (val << 8) | (uint64_t)p[i];
   23808:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   2380c:	ab35                	c.j	23d48 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb88>
	  _M_default_append(__new_size - size());
   2380e:	40b785b3          	sub	a1,a5,a1
   23812:	02050513          	addi	a0,a0,32
   23816:	00017317          	auipc	t1,0x17
   2381a:	cd233303          	ld	t1,-814(t1) # 3a4e8 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)@@Base+0x15500>
   2381e:	9302                	c.jalr	t1
   23820:	a3b9                	c.j	23d6e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbae>
    const unsigned char *p = (const unsigned char *)pos;
   23822:	66e2                	c.ldsp	a3,24(sp)
    if (sec->ord == byte_order::lsb) {
   23824:	67a2                	c.ldsp	a5,8(sp)
   23826:	4fdc                	c.lw	a5,28(a5)
   23828:	4c078d63          	beq	a5,zero,23d02 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb42>
        val = (val << 8) | (uint64_t)p[i];
   2382c:	0006c703          	lbu	a4,0(a3)
      for (unsigned i = 0; i < sizeof(T); i++)
   23830:	a9d9                	c.j	23d06 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb46>
                         std::to_string(i) + ", got " + std::to_string(length));
   23832:	4541                	c.li	a0,16
   23834:	e5df20ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   23838:	89aa                	c.mv	s3,a0
      throw format_error("expected " + std::to_string(opcode_lengths[i]) +
   2383a:	85da                	c.mv	a1,s6
   2383c:	10010a13          	addi	s4,sp,256
   23840:	8552                	c.mv	a0,s4
   23842:	00017317          	auipc	t1,0x17
   23846:	c6633303          	ld	t1,-922(t1) # 3a4a8 <std::__cxx11::to_string(int)@@Base+0x2018e>
   2384a:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   2384c:	0000b617          	auipc	a2,0xb
   23850:	64c60613          	addi	a2,a2,1612 # 2ee98 <typeinfo name for dwarf::expr_context+0x160>
   23854:	4581                	c.li	a1,0
   23856:	8552                	c.mv	a0,s4
   23858:	da9f20ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2385c:	85aa                	c.mv	a1,a0
   2385e:	0e010a13          	addi	s4,sp,224
   23862:	8552                	c.mv	a0,s4
   23864:	e6df20ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   23868:	0000b597          	auipc	a1,0xb
   2386c:	64058593          	addi	a1,a1,1600 # 2eea8 <typeinfo name for dwarf::expr_context+0x170>
   23870:	8552                	c.mv	a0,s4
   23872:	9cef30ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   23876:	85aa                	c.mv	a1,a0
   23878:	0c010a13          	addi	s4,sp,192
   2387c:	8552                	c.mv	a0,s4
   2387e:	e53f20ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                         std::to_string(i) + ", got " + std::to_string(length));
   23882:	0009059b          	addiw	a1,s2,0
   23886:	12010913          	addi	s2,sp,288
   2388a:	854a                	c.mv	a0,s2
   2388c:	00017317          	auipc	t1,0x17
   23890:	c7c33303          	ld	t1,-900(t1) # 3a508 <std::__cxx11::to_string(unsigned int)@@Base+0x1564c>
   23894:	9302                	c.jalr	t1
                         " arguments for line number opcode " +
   23896:	864a                	c.mv	a2,s2
   23898:	85d2                	c.mv	a1,s4
   2389a:	1108                	c.addi4spn	a0,sp,160
   2389c:	00017317          	auipc	t1,0x17
   238a0:	b3c33303          	ld	t1,-1220(t1) # 3a3d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x154d2>
   238a4:	9302                	c.jalr	t1
   238a6:	0000b597          	auipc	a1,0xb
   238aa:	62a58593          	addi	a1,a1,1578 # 2eed0 <typeinfo name for dwarf::expr_context+0x198>
   238ae:	1108                	c.addi4spn	a0,sp,160
   238b0:	990f30ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   238b4:	85aa                	c.mv	a1,a0
   238b6:	08010913          	addi	s2,sp,128
   238ba:	854a                	c.mv	a0,s2
   238bc:	e15f20ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                         std::to_string(i) + ", got " + std::to_string(length));
   238c0:	85a6                	c.mv	a1,s1
   238c2:	0284                	c.addi4spn	s1,sp,320
   238c4:	8526                	c.mv	a0,s1
   238c6:	00017317          	auipc	t1,0x17
   238ca:	be233303          	ld	t1,-1054(t1) # 3a4a8 <std::__cxx11::to_string(int)@@Base+0x2018e>
   238ce:	9302                	c.jalr	t1
   238d0:	8626                	c.mv	a2,s1
   238d2:	85ca                	c.mv	a1,s2
   238d4:	1088                	c.addi4spn	a0,sp,96
   238d6:	00017317          	auipc	t1,0x17
   238da:	b0233303          	ld	t1,-1278(t1) # 3a3d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x154d2>
   238de:	9302                	c.jalr	t1
      : std::runtime_error(what_arg) {}
   238e0:	108c                	c.addi4spn	a1,sp,96
   238e2:	854e                	c.mv	a0,s3
   238e4:	f4df20ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   238e8:	00017797          	auipc	a5,0x17
   238ec:	c887b783          	ld	a5,-888(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   238f0:	07c1                	c.addi	a5,16
   238f2:	00f9b023          	sd	a5,0(s3)
      { return _M_dataplus._M_p; }
   238f6:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   238f8:	189c                	c.addi4spn	a5,sp,112
   238fa:	00f50463          	beq	a0,a5,23902 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x742>
   238fe:	ea3f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23902:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   23904:	0a9c                	c.addi4spn	a5,sp,336
   23906:	00f50463          	beq	a0,a5,2390e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x74e>
   2390a:	e97f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2390e:	650a                	c.ldsp	a0,128(sp)
	if (!_M_is_local())
   23910:	091c                	c.addi4spn	a5,sp,144
   23912:	00f50463          	beq	a0,a5,2391a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x75a>
   23916:	e8bf20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2391a:	750a                	c.ldsp	a0,160(sp)
	if (!_M_is_local())
   2391c:	191c                	c.addi4spn	a5,sp,176
   2391e:	00f50463          	beq	a0,a5,23926 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x766>
   23922:	e7ff20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23926:	7512                	c.ldsp	a0,288(sp)
	if (!_M_is_local())
   23928:	1a1c                	c.addi4spn	a5,sp,304
   2392a:	00f50463          	beq	a0,a5,23932 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x772>
   2392e:	e73f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23932:	650e                	c.ldsp	a0,192(sp)
	if (!_M_is_local())
   23934:	099c                	c.addi4spn	a5,sp,208
   23936:	00f50463          	beq	a0,a5,2393e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x77e>
   2393a:	e67f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2393e:	750e                	c.ldsp	a0,224(sp)
	if (!_M_is_local())
   23940:	199c                	c.addi4spn	a5,sp,240
   23942:	00f50463          	beq	a0,a5,2394a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x78a>
   23946:	e5bf20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2394a:	6512                	c.ldsp	a0,256(sp)
	if (!_M_is_local())
   2394c:	0a1c                	c.addi4spn	a5,sp,272
   2394e:	00f50463          	beq	a0,a5,23956 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x796>
   23952:	e4ff20ef          	jal	ra,167a0 <operator delete(void*)@plt>
   23956:	00017617          	auipc	a2,0x17
   2395a:	a4263603          	ld	a2,-1470(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   2395e:	00017597          	auipc	a1,0x17
   23962:	96a5b583          	ld	a1,-1686(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   23966:	854e                	c.mv	a0,s3
   23968:	ff9f20ef          	jal	ra,16960 <__cxa_throw@plt>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2396c:	0a1c                	c.addi4spn	a5,sp,272
   2396e:	e23e                	c.sdsp	a5,256(sp)
      { _M_string_length = __length; }
   23970:	e602                	c.sdsp	zero,264(sp)
	__c1 = __c2;
   23972:	10010823          	sb	zero,272(sp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   23976:	60a8                	c.ld	a0,64(s1)
   23978:	64bc                	c.ld	a5,72(s1)
   2397a:	04f50563          	beq	a0,a5,239c4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x804>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2397e:	01050793          	addi	a5,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   23982:	e11c                	c.sd	a5,0(a0)
      { return _M_dataplus._M_p; }
   23984:	7582                	c.ldsp	a1,32(sp)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   23986:	4681                	c.li	a3,0
   23988:	7622                	c.ldsp	a2,40(sp)
   2398a:	962e                	c.add	a2,a1
   2398c:	00017317          	auipc	t1,0x17
   23990:	99c33303          	ld	t1,-1636(t1) # 3a328 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x15240>
   23994:	9302                	c.jalr	t1
	    ++this->_M_impl._M_finish;
   23996:	60bc                	c.ld	a5,64(s1)
   23998:	02078793          	addi	a5,a5,32
   2399c:	e0bc                	c.sd	a5,64(s1)
    cur.string(incdir);
   2399e:	10010a13          	addi	s4,sp,256
   239a2:	00810b13          	addi	s6,sp,8
    if (incdir.back() != '/')
   239a6:	02f00913          	addi	s2,zero,47
	return _M_is_local() ? size_type(_S_local_capacity)
   239aa:	11010d13          	addi	s10,sp,272
      m->include_directories.push_back(comp_dir + incdir);
   239ae:	14010a93          	addi	s5,sp,320
   239b2:	02010b93          	addi	s7,sp,32
   239b6:	00017c17          	auipc	s8,0x17
   239ba:	c2ac3c03          	ld	s8,-982(s8) # 3a5e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x1549a>
	if (!_M_is_local())
   239be:	15010c93          	addi	s9,sp,336
   239c2:	a055                	c.j	23a66 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8a6>
	  _M_realloc_insert(end(), __x);
   239c4:	1010                	c.addi4spn	a2,sp,32
   239c6:	85aa                	c.mv	a1,a0
   239c8:	03848513          	addi	a0,s1,56
   239cc:	00017317          	auipc	t1,0x17
   239d0:	aa433303          	ld	t1,-1372(t1) # 3a470 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x152bc>
   239d4:	9302                	c.jalr	t1
   239d6:	b7e1                	c.j	2399e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7de>
      { return _M_string_length; }
   239d8:	64b2                	c.ldsp	s1,264(sp)
    if (incdir.empty())
   239da:	c8d9                	c.beqz	s1,23a70 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8b0>
      { return _M_dataplus._M_p; }
   239dc:	6792                	c.ldsp	a5,256(sp)
    if (incdir.back() != '/')
   239de:	00978733          	add	a4,a5,s1
   239e2:	fff74703          	lbu	a4,-1(a4)
   239e6:	01271f63          	bne	a4,s2,23a04 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x844>
    if (incdir[0] == '/')
   239ea:	6792                	c.ldsp	a5,256(sp)
   239ec:	0007c783          	lbu	a5,0(a5)
   239f0:	05278563          	beq	a5,s2,23a3a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x87a>
      m->include_directories.push_back(comp_dir + incdir);
   239f4:	6004                	c.ld	s1,0(s0)
   239f6:	03848493          	addi	s1,s1,56
   239fa:	8652                	c.mv	a2,s4
   239fc:	85de                	c.mv	a1,s7
   239fe:	8556                	c.mv	a0,s5
   23a00:	9c02                	c.jalr	s8
   23a02:	a0b1                	c.j	23a4e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x88e>
	if (__size + 1 > this->capacity())
   23a04:	00148d93          	addi	s11,s1,1
	return _M_is_local() ? size_type(_S_local_capacity)
   23a08:	01a78f63          	beq	a5,s10,23a26 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x866>
   23a0c:	67d2                	c.ldsp	a5,272(sp)
	if (__size + 1 > this->capacity())
   23a0e:	01b7ee63          	bltu	a5,s11,23a2a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x86a>
   23a12:	6792                	c.ldsp	a5,256(sp)
   23a14:	97a6                	c.add	a5,s1
   23a16:	01278023          	sb	s2,0(a5)
      { _M_string_length = __length; }
   23a1a:	e66e                	c.sdsp	s11,264(sp)
   23a1c:	6792                	c.ldsp	a5,256(sp)
   23a1e:	97ee                	c.add	a5,s11
   23a20:	00078023          	sb	zero,0(a5)
      }
   23a24:	b7d9                	c.j	239ea <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x82a>
	return _M_is_local() ? size_type(_S_local_capacity)
   23a26:	47bd                	c.li	a5,15
   23a28:	b7dd                	c.j	23a0e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x84e>
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
   23a2a:	4705                	c.li	a4,1
   23a2c:	4681                	c.li	a3,0
   23a2e:	4601                	c.li	a2,0
   23a30:	85a6                	c.mv	a1,s1
   23a32:	8552                	c.mv	a0,s4
   23a34:	f9df20ef          	jal	ra,169d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@plt>
   23a38:	bfe9                	c.j	23a12 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x852>
      m->include_directories.push_back(move(incdir));
   23a3a:	6008                	c.ld	a0,0(s0)
      { emplace_back(std::move(__x)); }
   23a3c:	85d2                	c.mv	a1,s4
   23a3e:	03850513          	addi	a0,a0,56
   23a42:	00017317          	auipc	t1,0x17
   23a46:	b8e33303          	ld	t1,-1138(t1) # 3a5d0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x150ee>
   23a4a:	9302                	c.jalr	t1
   23a4c:	a829                	c.j	23a66 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8a6>
   23a4e:	85d6                	c.mv	a1,s5
   23a50:	8526                	c.mv	a0,s1
   23a52:	00017317          	auipc	t1,0x17
   23a56:	b7e33303          	ld	t1,-1154(t1) # 3a5d0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x150ee>
   23a5a:	9302                	c.jalr	t1
      { return _M_dataplus._M_p; }
   23a5c:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   23a5e:	01950463          	beq	a0,s9,23a66 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8a6>
   23a62:	d3ff20ef          	jal	ra,167a0 <operator delete(void*)@plt>
    cur.string(incdir);
   23a66:	85d2                	c.mv	a1,s4
   23a68:	855a                	c.mv	a0,s6
   23a6a:	c39f70ef          	jal	ra,1b6a2 <dwarf::cursor::string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   23a6e:	b7ad                	c.j	239d8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x818>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   23a70:	1a1c                	c.addi4spn	a5,sp,304
   23a72:	f23e                	c.sdsp	a5,288(sp)
      { _M_string_length = __length; }
   23a74:	f602                	c.sdsp	zero,296(sp)
   23a76:	12010823          	sb	zero,304(sp)
      { return _M_string_length; }
   23a7a:	0089b603          	ld	a2,8(s3)
  if (!cu_name.empty() && cu_name[0] == '/')
   23a7e:	ca09                	c.beqz	a2,23a90 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8d0>
      { return _M_dataplus._M_p; }
   23a80:	0009b583          	ld	a1,0(s3)
   23a84:	0005c703          	lbu	a4,0(a1)
   23a88:	02f00793          	addi	a5,zero,47
   23a8c:	00f70e63          	beq	a4,a5,23aa8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8e8>
    m->file_names.emplace_back(comp_dir + cu_name);
   23a90:	6004                	c.ld	s1,0(s0)
   23a92:	05048493          	addi	s1,s1,80
   23a96:	864e                	c.mv	a2,s3
   23a98:	100c                	c.addi4spn	a1,sp,32
   23a9a:	0288                	c.addi4spn	a0,sp,320
   23a9c:	00017317          	auipc	t1,0x17
   23aa0:	b4433303          	ld	t1,-1212(t1) # 3a5e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x1549a>
   23aa4:	9302                	c.jalr	t1
   23aa6:	a895                	c.j	23b1a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x95a>
   23aa8:	6004                	c.ld	s1,0(s0)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   23aaa:	0584b903          	ld	s2,88(s1)
   23aae:	70bc                	c.ld	a5,96(s1)
   23ab0:	04f90b63          	beq	s2,a5,23b06 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x946>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   23ab4:	0a9c                	c.addi4spn	a5,sp,336
   23ab6:	e2be                	c.sdsp	a5,320(sp)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   23ab8:	4681                	c.li	a3,0
   23aba:	962e                	c.add	a2,a1
   23abc:	0288                	c.addi4spn	a0,sp,320
   23abe:	00017317          	auipc	t1,0x17
   23ac2:	86a33303          	ld	t1,-1942(t1) # 3a328 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x15240>
   23ac6:	9302                	c.jalr	t1
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   23ac8:	4681                	c.li	a3,0
   23aca:	4601                	c.li	a2,0
   23acc:	028c                	c.addi4spn	a1,sp,320
   23ace:	854a                	c.mv	a0,s2
   23ad0:	aa4ff0ef          	jal	ra,22d74 <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
      { return _M_dataplus._M_p; }
   23ad4:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   23ad6:	0a9c                	c.addi4spn	a5,sp,336
   23ad8:	00f50463          	beq	a0,a5,23ae0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x920>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   23adc:	cc5f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
	    ++this->_M_impl._M_finish;
   23ae0:	6cbc                	c.ld	a5,88(s1)
   23ae2:	03078793          	addi	a5,a5,48
   23ae6:	ecbc                	c.sd	a5,88(s1)
   23ae8:	a0b1                	c.j	23b34 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x974>
      { return _M_dataplus._M_p; }
   23aea:	84aa                	c.mv	s1,a0
   23aec:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   23aee:	0a9c                	c.addi4spn	a5,sp,336
   23af0:	00f50463          	beq	a0,a5,23af8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x938>
   23af4:	cadf20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23af8:	7512                	c.ldsp	a0,288(sp)
	if (!_M_is_local())
   23afa:	1a1c                	c.addi4spn	a5,sp,304
   23afc:	1cf50d63          	beq	a0,a5,23cd6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb16>
   23b00:	ca1f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   23b04:	aac9                	c.j	23cd6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb16>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   23b06:	864e                	c.mv	a2,s3
   23b08:	85ca                	c.mv	a1,s2
   23b0a:	05048513          	addi	a0,s1,80
   23b0e:	00017317          	auipc	t1,0x17
   23b12:	94a33303          	ld	t1,-1718(t1) # 3a458 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x14ec8>
   23b16:	9302                	c.jalr	t1
   23b18:	a831                	c.j	23b34 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x974>
   23b1a:	028c                	c.addi4spn	a1,sp,320
   23b1c:	8526                	c.mv	a0,s1
   23b1e:	00017317          	auipc	t1,0x17
   23b22:	a8a33303          	ld	t1,-1398(t1) # 3a5a8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x14b86>
   23b26:	9302                	c.jalr	t1
      { return _M_dataplus._M_p; }
   23b28:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   23b2a:	0a9c                	c.addi4spn	a5,sp,336
   23b2c:	00f50463          	beq	a0,a5,23b34 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x974>
   23b30:	c71f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
  while (m->read_file_entry(&cur, true))
   23b34:	0024                	c.addi4spn	s1,sp,8
   23b36:	a011                	c.j	23b3a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x97a>
   23b38:	c519                	c.beqz	a0,23b46 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x986>
   23b3a:	4605                	c.li	a2,1
   23b3c:	85a6                	c.mv	a1,s1
   23b3e:	6008                	c.ld	a0,0(s0)
   23b40:	c0aff0ef          	jal	ra,22f4a <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)>
   23b44:	bfd5                	c.j	23b38 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x978>
      { return _M_dataplus._M_p; }
   23b46:	7512                	c.ldsp	a0,288(sp)
	if (!_M_is_local())
   23b48:	1a1c                	c.addi4spn	a5,sp,304
   23b4a:	00f50463          	beq	a0,a5,23b52 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x992>
   23b4e:	c53f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23b52:	6512                	c.ldsp	a0,256(sp)
	if (!_M_is_local())
   23b54:	0a1c                	c.addi4spn	a5,sp,272
   23b56:	00f50463          	beq	a0,a5,23b5e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x99e>
   23b5a:	c47f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   23b5e:	6442                	c.ldsp	s0,16(sp)
   23b60:	cc19                	c.beqz	s0,23b7e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9be>
    if (__is_single_threaded())
   23b62:	00017797          	auipc	a5,0x17
   23b66:	9367b783          	ld	a5,-1738(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   23b6a:	0007c783          	lbu	a5,0(a5)
   23b6e:	c3b9                	c.beqz	a5,23bb4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9f4>
    _Atomic_word __result = *__mem;
   23b70:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   23b72:	fff5079b          	addiw	a5,a0,-1
   23b76:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   23b78:	4785                	c.li	a5,1
   23b7a:	04f50363          	beq	a0,a5,23bc0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa00>
      { return _M_dataplus._M_p; }
   23b7e:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   23b80:	089c                	c.addi4spn	a5,sp,80
   23b82:	00f50463          	beq	a0,a5,23b8a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9ca>
   23b86:	c1bf20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23b8a:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   23b8c:	181c                	c.addi4spn	a5,sp,48
   23b8e:	00f50463          	beq	a0,a5,23b96 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9d6>
   23b92:	c0ff20ef          	jal	ra,167a0 <operator delete(void*)@plt>
}
   23b96:	60fe                	c.ldsp	ra,472(sp)
   23b98:	645e                	c.ldsp	s0,464(sp)
   23b9a:	64be                	c.ldsp	s1,456(sp)
   23b9c:	691e                	c.ldsp	s2,448(sp)
   23b9e:	79fa                	c.ldsp	s3,440(sp)
   23ba0:	7a5a                	c.ldsp	s4,432(sp)
   23ba2:	7aba                	c.ldsp	s5,424(sp)
   23ba4:	7b1a                	c.ldsp	s6,416(sp)
   23ba6:	6bfa                	c.ldsp	s7,408(sp)
   23ba8:	6c5a                	c.ldsp	s8,400(sp)
   23baa:	6cba                	c.ldsp	s9,392(sp)
   23bac:	6d1a                	c.ldsp	s10,384(sp)
   23bae:	7df6                	c.ldsp	s11,376(sp)
   23bb0:	613d                	c.addi16sp	sp,480
   23bb2:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   23bb4:	55fd                	c.li	a1,-1
   23bb6:	03040513          	addi	a0,s0,48
   23bba:	a37f20ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   23bbe:	bf6d                	c.j	23b78 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9b8>
	_M_dispose();
   23bc0:	601c                	c.ld	a5,0(s0)
   23bc2:	6b9c                	c.ld	a5,16(a5)
   23bc4:	8522                	c.mv	a0,s0
   23bc6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   23bc8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   23bcc:	00017797          	auipc	a5,0x17
   23bd0:	8cc7b783          	ld	a5,-1844(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   23bd4:	0007c783          	lbu	a5,0(a5)
   23bd8:	cf89                	c.beqz	a5,23bf2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa32>
    _Atomic_word __result = *__mem;
   23bda:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   23bdc:	fff5079b          	addiw	a5,a0,-1
   23be0:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   23be2:	4785                	c.li	a5,1
   23be4:	f8f51de3          	bne	a0,a5,23b7e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9be>
	    _M_destroy();
   23be8:	601c                	c.ld	a5,0(s0)
   23bea:	6f9c                	c.ld	a5,24(a5)
   23bec:	8522                	c.mv	a0,s0
   23bee:	9782                	c.jalr	a5
   23bf0:	b779                	c.j	23b7e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9be>
      return __exchange_and_add(__mem, __val);
   23bf2:	55fd                	c.li	a1,-1
   23bf4:	03440513          	addi	a0,s0,52
   23bf8:	9f9f20ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   23bfc:	b7dd                	c.j	23be2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa22>
      { return _M_dataplus._M_p; }
   23bfe:	84aa                	c.mv	s1,a0
   23c00:	7512                	c.ldsp	a0,288(sp)
	if (!_M_is_local())
   23c02:	1a1c                	c.addi4spn	a5,sp,304
   23c04:	00f50463          	beq	a0,a5,23c0c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa4c>
   23c08:	b99f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23c0c:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   23c0e:	0a9c                	c.addi4spn	a5,sp,336
   23c10:	00f50463          	beq	a0,a5,23c18 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa58>
   23c14:	b8df20ef          	jal	ra,167a0 <operator delete(void*)@plt>
                       std::to_string(version));
   23c18:	854a                	c.mv	a0,s2
   23c1a:	b37f20ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   23c1e:	6542                	c.ldsp	a0,16(sp)
   23c20:	ea050563          	beq	a0,zero,232ca <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10a>
	  _M_pi->_M_release();
   23c24:	00016317          	auipc	t1,0x16
   23c28:	7bc33303          	ld	t1,1980(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   23c2c:	9302                	c.jalr	t1
   23c2e:	e9cff06f          	jal	zero,232ca <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10a>
      { return _M_dataplus._M_p; }
   23c32:	84aa                	c.mv	s1,a0
   23c34:	bfe1                	c.j	23c0c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa4c>
                       " be 0 in line number table");
   23c36:	84aa                	c.mv	s1,a0
   23c38:	854a                	c.mv	a0,s2
   23c3a:	b17f20ef          	jal	ra,16750 <__cxa_free_exception@plt>
   23c3e:	b7c5                	c.j	23c1e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa5e>
    throw format_error("line_range cannot be 0 in line number table");
   23c40:	84aa                	c.mv	s1,a0
   23c42:	854a                	c.mv	a0,s2
   23c44:	b0df20ef          	jal	ra,16750 <__cxa_free_exception@plt>
   23c48:	bfd9                	c.j	23c1e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa5e>
   23c4a:	84aa                	c.mv	s1,a0
   23c4c:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   23c4e:	189c                	c.addi4spn	a5,sp,112
   23c50:	00f50463          	beq	a0,a5,23c58 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa98>
   23c54:	b4df20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23c58:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   23c5a:	0a9c                	c.addi4spn	a5,sp,336
   23c5c:	00f50463          	beq	a0,a5,23c64 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xaa4>
   23c60:	b41f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23c64:	650a                	c.ldsp	a0,128(sp)
	if (!_M_is_local())
   23c66:	091c                	c.addi4spn	a5,sp,144
   23c68:	00f50463          	beq	a0,a5,23c70 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xab0>
   23c6c:	b35f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23c70:	750a                	c.ldsp	a0,160(sp)
	if (!_M_is_local())
   23c72:	191c                	c.addi4spn	a5,sp,176
   23c74:	00f50463          	beq	a0,a5,23c7c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xabc>
   23c78:	b29f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23c7c:	7512                	c.ldsp	a0,288(sp)
	if (!_M_is_local())
   23c7e:	1a1c                	c.addi4spn	a5,sp,304
   23c80:	00f50463          	beq	a0,a5,23c88 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xac8>
   23c84:	b1df20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23c88:	650e                	c.ldsp	a0,192(sp)
	if (!_M_is_local())
   23c8a:	099c                	c.addi4spn	a5,sp,208
   23c8c:	00f50463          	beq	a0,a5,23c94 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xad4>
   23c90:	b11f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23c94:	750e                	c.ldsp	a0,224(sp)
	if (!_M_is_local())
   23c96:	199c                	c.addi4spn	a5,sp,240
   23c98:	00f50463          	beq	a0,a5,23ca0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xae0>
   23c9c:	b05f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23ca0:	6512                	c.ldsp	a0,256(sp)
	if (!_M_is_local())
   23ca2:	0a1c                	c.addi4spn	a5,sp,272
   23ca4:	00f50463          	beq	a0,a5,23cac <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xaec>
   23ca8:	af9f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
                         std::to_string(i) + ", got " + std::to_string(length));
   23cac:	854e                	c.mv	a0,s3
   23cae:	aa3f20ef          	jal	ra,16750 <__cxa_free_exception@plt>
   23cb2:	b7b5                	c.j	23c1e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa5e>
      { return _M_dataplus._M_p; }
   23cb4:	84aa                	c.mv	s1,a0
   23cb6:	b74d                	c.j	23c58 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa98>
   23cb8:	84aa                	c.mv	s1,a0
   23cba:	bf5d                	c.j	23c70 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xab0>
   23cbc:	84aa                	c.mv	s1,a0
   23cbe:	bf7d                	c.j	23c7c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xabc>
   23cc0:	84aa                	c.mv	s1,a0
   23cc2:	bfc9                	c.j	23c94 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xad4>
   23cc4:	84aa                	c.mv	s1,a0
   23cc6:	bfe9                	c.j	23ca0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xae0>
   23cc8:	84aa                	c.mv	s1,a0
   23cca:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   23ccc:	0a9c                	c.addi4spn	a5,sp,336
   23cce:	00f50463          	beq	a0,a5,23cd6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb16>
   23cd2:	acff20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23cd6:	6512                	c.ldsp	a0,256(sp)
	if (!_M_is_local())
   23cd8:	0a1c                	c.addi4spn	a5,sp,272
   23cda:	f4f502e3          	beq	a0,a5,23c1e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa5e>
   23cde:	ac3f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   23ce2:	bf35                	c.j	23c1e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa5e>
      { return _M_dataplus._M_p; }
   23ce4:	84aa                	c.mv	s1,a0
   23ce6:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   23ce8:	0a9c                	c.addi4spn	a5,sp,336
   23cea:	e0f507e3          	beq	a0,a5,23af8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x938>
   23cee:	ab3f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   23cf2:	b519                	c.j	23af8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x938>
      { return _M_dataplus._M_p; }
   23cf4:	84aa                	c.mv	s1,a0
   23cf6:	b509                	c.j	23af8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x938>
   23cf8:	84aa                	c.mv	s1,a0
   23cfa:	bff1                	c.j	23cd6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb16>
   23cfc:	84aa                	c.mv	s1,a0
   23cfe:	dccff06f          	jal	zero,232ca <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10a>
        val |= ((uint64_t)p[i]) << (i * 8);
   23d02:	0006c703          	lbu	a4,0(a3)
    pos += sizeof(T);
   23d06:	0685                	c.addi	a3,1
   23d08:	ec36                	c.sdsp	a3,24(sp)
    return (T)val;
   23d0a:	0ff77793          	andi	a5,a4,255
    if (length != opcode_lengths[i])
   23d0e:	84ba                	c.mv	s1,a4
   23d10:	000a2b03          	lw	s6,0(s4)
   23d14:	b1671fe3          	bne	a4,s6,23832 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x672>
      { return _M_ptr; }
   23d18:	6004                	c.ld	s1,0(s0)
    m->standard_opcode_lengths[i] = length;
   23d1a:	7098                	c.ld	a4,32(s1)
   23d1c:	974a                	c.add	a4,s2
   23d1e:	00f70023          	sb	a5,0(a4)
  for (unsigned i = 1; i < m->opcode_base; i++) {
   23d22:	0905                	c.addi	s2,1
   23d24:	0a11                	c.addi	s4,4
   23d26:	01d4c703          	lbu	a4,29(s1)
   23d2a:	0009079b          	addiw	a5,s2,0
   23d2e:	c2e7ffe3          	bgeu	a5,a4,2396c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7ac>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23d32:	67a2                	c.ldsp	a5,8(sp)
   23d34:	6b98                	c.ld	a4,16(a5)
   23d36:	67e2                	c.ldsp	a5,24(sp)
   23d38:	aee7e5e3          	bltu	a5,a4,23822 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x662>
      underflow();
   23d3c:	8556                	c.mv	a0,s5
   23d3e:	995f70ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
   23d42:	b4c5                	c.j	23822 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x662>
        val |= ((uint64_t)p[i]) << (i * 8);
   23d44:	0007c703          	lbu	a4,0(a5)
    pos += sizeof(T);
   23d48:	0785                	c.addi	a5,1
   23d4a:	ec3e                	c.sdsp	a5,24(sp)
    return (T)val;
   23d4c:	00e48ea3          	sb	a4,29(s1)
   23d50:	6008                	c.ld	a0,0(s0)
  m->standard_opcode_lengths.resize(m->opcode_base);
   23d52:	01d54783          	lbu	a5,29(a0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   23d56:	7514                	c.ld	a3,40(a0)
   23d58:	7118                	c.ld	a4,32(a0)
   23d5a:	40e685b3          	sub	a1,a3,a4
	if (__new_size > size())
   23d5e:	aaf5e8e3          	bltu	a1,a5,2380e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x64e>
	else if (__new_size < size())
   23d62:	00b7f663          	bgeu	a5,a1,23d6e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbae>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   23d66:	973e                	c.add	a4,a5
	if (size_type __n = this->_M_impl._M_finish - __pos)
   23d68:	00e68363          	beq	a3,a4,23d6e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbae>
	    this->_M_impl._M_finish = __pos;
   23d6c:	f518                	c.sd	a4,40(a0)
   23d6e:	6004                	c.ld	s1,0(s0)
	return *(this->_M_impl._M_start + __n);
   23d70:	709c                	c.ld	a5,32(s1)
  m->standard_opcode_lengths[0] = 0;
   23d72:	00078023          	sb	zero,0(a5)
  for (unsigned i = 1; i < m->opcode_base; i++) {
   23d76:	01d4c703          	lbu	a4,29(s1)
   23d7a:	4785                	c.li	a5,1
   23d7c:	bee7f8e3          	bgeu	a5,a4,2396c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7ac>
   23d80:	0000ba17          	auipc	s4,0xb
   23d84:	27ca0a13          	addi	s4,s4,636 # 2effc <dwarf::opcode_lengths+0x4>
   23d88:	4905                	c.li	s2,1
      underflow();
   23d8a:	00810a93          	addi	s5,sp,8
   23d8e:	b755                	c.j	23d32 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb72>
        val |= ((uint64_t)p[i]) << (i * 8);
   23d90:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   23d94:	0785                	c.addi	a5,1
   23d96:	ec3e                	c.sdsp	a5,24(sp)
    return (T)val;
   23d98:	00d48e23          	sb	a3,28(s1)
   23d9c:	6004                	c.ld	s1,0(s0)
  if (m->line_range == 0)
   23d9e:	01c4c683          	lbu	a3,28(s1)
   23da2:	a20682e3          	beq	a3,zero,237c6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x606>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23da6:	6b18                	c.ld	a4,16(a4)
   23da8:	a4e7ebe3          	bltu	a5,a4,237fe <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x63e>
      underflow();
   23dac:	0028                	c.addi4spn	a0,sp,8
   23dae:	925f70ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
   23db2:	b4b1                	c.j	237fe <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x63e>
        val |= ((uint64_t)p[i]) << (i * 8);
   23db4:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   23db8:	0785                	c.addi	a5,1
   23dba:	ec3e                	c.sdsp	a5,24(sp)
    return (T)val;
   23dbc:	00d48da3          	sb	a3,27(s1)
   23dc0:	6004                	c.ld	s1,0(s0)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23dc2:	6b18                	c.ld	a4,16(a4)
   23dc4:	9ee7e9e3          	bltu	a5,a4,237b6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5f6>
      underflow();
   23dc8:	0028                	c.addi4spn	a0,sp,8
   23dca:	909f70ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
   23dce:	b2e5                	c.j	237b6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5f6>
        val |= ((uint64_t)p[i]) << (i * 8);
   23dd0:	0007c703          	lbu	a4,0(a5)
    pos += sizeof(T);
   23dd4:	0785                	c.addi	a5,1
   23dd6:	ec3e                	c.sdsp	a5,24(sp)
   23dd8:	6004                	c.ld	s1,0(s0)
  m->default_is_stmt = cur.fixed<ubyte>();
   23dda:	00e03733          	sltu	a4,zero,a4
   23dde:	00e48d23          	sb	a4,26(s1)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23de2:	6a98                	c.ld	a4,16(a3)
   23de4:	9ce7e1e3          	bltu	a5,a4,237a6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5e6>
      underflow();
   23de8:	0028                	c.addi4spn	a0,sp,8
   23dea:	8e9f70ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
   23dee:	ba65                	c.j	237a6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5e6>
        val |= ((uint64_t)p[i]) << (i * 8);
   23df0:	0007c703          	lbu	a4,0(a5)
    pos += sizeof(T);
   23df4:	0785                	c.addi	a5,1
   23df6:	ec3e                	c.sdsp	a5,24(sp)
    return (T)val;
   23df8:	00e90ca3          	sb	a4,25(s2)
  if (m->maximum_operations_per_instruction == 0)
   23dfc:	601c                	c.ld	a5,0(s0)
   23dfe:	0197c783          	lbu	a5,25(a5)
   23e02:	eb9d                	c.bnez	a5,23e38 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc78>
                       " be 0 in line number table");
   23e04:	4541                	c.li	a0,16
   23e06:	88bf20ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   23e0a:	892a                	c.mv	s2,a0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   23e0c:	0000b597          	auipc	a1,0xb
   23e10:	01458593          	addi	a1,a1,20 # 2ee20 <typeinfo name for dwarf::expr_context+0xe8>
   23e14:	bfdf20ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   23e18:	baa9                	c.j	23772 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5b2>
        val |= ((uint64_t)p[i]) << (i * 8);
   23e1a:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   23e1e:	0785                	c.addi	a5,1
   23e20:	ec3e                	c.sdsp	a5,24(sp)
    return (T)val;
   23e22:	00d90c23          	sb	a3,24(s2)
   23e26:	00043903          	ld	s2,0(s0)
  m->maximum_operations_per_instruction = 1;
   23e2a:	4685                	c.li	a3,1
   23e2c:	00d90ca3          	sb	a3,25(s2)
  if (version == 4)
   23e30:	2481                	c.addiw	s1,0
   23e32:	4691                	c.li	a3,4
   23e34:	92d481e3          	beq	s1,a3,23756 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x596>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23e38:	67a2                	c.ldsp	a5,8(sp)
   23e3a:	6b98                	c.ld	a4,16(a5)
   23e3c:	67e2                	c.ldsp	a5,24(sp)
   23e3e:	94e7ece3          	bltu	a5,a4,23796 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5d6>
      underflow();
   23e42:	0028                	c.addi4spn	a0,sp,8
   23e44:	88ff70ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
   23e48:	b2b9                	c.j	23796 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5d6>
struct cursor {
   23e4a:	ec56                	c.sdsp	s5,24(sp)
      ~__shared_count() noexcept
   23e4c:	ec2ff06f          	jal	zero,2350e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x34e>
      : sec(sec), pos(sec->begin + offset) {}
   23e50:	00893a83          	ld	s5,8(s2)
   23e54:	e44a                	c.sdsp	s2,8(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   23e56:	6942                	c.ldsp	s2,16(sp)
	__r._M_pi = _M_pi;
   23e58:	e802                	c.sdsp	zero,16(sp)
	if (_M_pi != nullptr)
   23e5a:	e8091863          	bne	s2,zero,234ea <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x32a>
struct cursor {
   23e5e:	ec56                	c.sdsp	s5,24(sp)
      ~__shared_count() noexcept
   23e60:	eccff06f          	jal	zero,2352c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x36c>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   23e64:	e45a                	c.sdsp	s6,8(sp)
      : _M_pi(__r._M_pi)
   23e66:	e802                	c.sdsp	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   23e68:	008b3783          	ld	a5,8(s6)
   23e6c:	97d6                	c.add	a5,s5
   23e6e:	ec3e                	c.sdsp	a5,24(sp)
      { return _M_ptr; }
   23e70:	6004                	c.ld	s1,0(s0)
  m->sec = cur.subsection();
   23e72:	002c                	c.addi4spn	a1,sp,8
   23e74:	1288                	c.addi4spn	a0,sp,352
   23e76:	bedf70ef          	jal	ra,1ba62 <dwarf::cursor::subsection()>
   23e7a:	d9eff06f          	jal	zero,23418 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x258>
      { _M_dataplus._M_p = __p; }
   23e7e:	f03e                	c.sdsp	a5,32(sp)
      { _M_string_length = __length; }
   23e80:	67b6                	c.ldsp	a5,328(sp)
   23e82:	f43e                	c.sdsp	a5,40(sp)
      { _M_allocated_capacity = __capacity; }
   23e84:	67d6                	c.ldsp	a5,336(sp)
   23e86:	f83e                	c.sdsp	a5,48(sp)
      { _M_dataplus._M_p = __p; }
   23e88:	0a9c                	c.addi4spn	a5,sp,336
   23e8a:	e2be                	c.sdsp	a5,320(sp)
   23e8c:	c8eff06f          	jal	zero,2331a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x15a>

0000000000023e90 <dwarf::line_table::iterator::step(dwarf::cursor*)>:

  pos = cur.get_section_offset();
  return *this;
}

bool line_table::iterator::step(cursor *cur) {
   23e90:	7135                	c.addi16sp	sp,-160
   23e92:	ed06                	c.sdsp	ra,152(sp)
   23e94:	e922                	c.sdsp	s0,144(sp)
   23e96:	e526                	c.sdsp	s1,136(sp)
   23e98:	e14a                	c.sdsp	s2,128(sp)
   23e9a:	fcce                	c.sdsp	s3,120(sp)
   23e9c:	f8d2                	c.sdsp	s4,112(sp)
   23e9e:	f4d6                	c.sdsp	s5,104(sp)
   23ea0:	84aa                	c.mv	s1,a0
   23ea2:	842e                	c.mv	s0,a1
   23ea4:	611c                	c.ld	a5,0(a0)
   23ea6:	0007b983          	ld	s3,0(a5)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23eaa:	619c                	c.ld	a5,0(a1)
   23eac:	6b98                	c.ld	a4,16(a5)
   23eae:	699c                	c.ld	a5,16(a1)
   23eb0:	00e7e563          	bltu	a5,a4,23eba <dwarf::line_table::iterator::step(dwarf::cursor*)+0x2a>
      underflow();
   23eb4:	852e                	c.mv	a0,a1
   23eb6:	81df70ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   23eba:	681c                	c.ld	a5,16(s0)
   23ebc:	600c                	c.ld	a1,0(s0)
    if (sec->ord == byte_order::lsb) {
   23ebe:	4dd8                	c.lw	a4,28(a1)
   23ec0:	5e070763          	beq	a4,zero,244ae <dwarf::line_table::iterator::step(dwarf::cursor*)+0x61e>
        val = (val << 8) | (uint64_t)p[i];
   23ec4:	0007c903          	lbu	s2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   23ec8:	a3ed                	c.j	244b2 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x622>

  // Read the opcode (DWARF4 section 6.2.3)
  ubyte opcode = cur->fixed<ubyte>();
  if (opcode >= m->opcode_base) {
    // Special opcode (DWARF4 section 6.2.5.1)
    ubyte adjusted_opcode = opcode - m->opcode_base;
   23eca:	40e907bb          	subw	a5,s2,a4
   23ece:	0ff7f793          	andi	a5,a5,255
    unsigned op_advance = adjusted_opcode / m->line_range;
   23ed2:	01c9c683          	lbu	a3,28(s3)
    signed line_inc = m->line_base + (signed)adjusted_opcode % m->line_range;
   23ed6:	01b98703          	lb	a4,27(s3)
   23eda:	02d7f63b          	remuw	a2,a5,a3
   23ede:	9f31                	c.addw	a4,a2

    regs.line += line_inc;
   23ee0:	4cf0                	c.lw	a2,92(s1)
   23ee2:	9f31                	c.addw	a4,a2
   23ee4:	ccf8                	c.sw	a4,92(s1)
    unsigned op_advance = adjusted_opcode / m->line_range;
   23ee6:	02d7d7bb          	divuw	a5,a5,a3
    regs.address +=
        m->minimum_instruction_length *
        ((regs.op_index + op_advance) / m->maximum_operations_per_instruction);
   23eea:	44b8                	c.lw	a4,72(s1)
   23eec:	9fb9                	c.addw	a5,a4
   23eee:	0199c703          	lbu	a4,25(s3)
   23ef2:	02e7d73b          	divuw	a4,a5,a4
        m->minimum_instruction_length *
   23ef6:	0189c683          	lbu	a3,24(s3)
   23efa:	02d7073b          	mulw	a4,a4,a3
   23efe:	1702                	c.slli	a4,0x20
   23f00:	9301                	c.srli	a4,0x20
    regs.address +=
   23f02:	60b4                	c.ld	a3,64(s1)
   23f04:	9736                	c.add	a4,a3
   23f06:	e0b8                	c.sd	a4,64(s1)
    regs.op_index =
        (regs.op_index + op_advance) % m->maximum_operations_per_instruction;
   23f08:	0199c683          	lbu	a3,25(s3)
   23f0c:	02d7f7bb          	remuw	a5,a5,a3
    regs.op_index =
   23f10:	c4bc                	c.sw	a5,72(s1)
    entry = regs;
   23f12:	0484b803          	ld	a6,72(s1)
   23f16:	68a8                	c.ld	a0,80(s1)
   23f18:	6cac                	c.ld	a1,88(s1)
   23f1a:	70b0                	c.ld	a2,96(s1)
   23f1c:	74b4                	c.ld	a3,104(s1)
   23f1e:	78bc                	c.ld	a5,112(s1)
   23f20:	e498                	c.sd	a4,8(s1)
   23f22:	0104b823          	sd	a6,16(s1)
   23f26:	ec88                	c.sd	a0,24(s1)
   23f28:	f08c                	c.sd	a1,32(s1)
   23f2a:	f490                	c.sd	a2,40(s1)
   23f2c:	f894                	c.sd	a3,48(s1)
   23f2e:	fc9c                	c.sd	a5,56(s1)

    regs.basic_block = regs.prologue_end = regs.epilogue_begin = false;
   23f30:	06048423          	sb	zero,104(s1)
   23f34:	060483a3          	sb	zero,103(s1)
   23f38:	060482a3          	sb	zero,101(s1)
    regs.discriminator = 0;
   23f3c:	0604a823          	sw	zero,112(s1)

    return true;
   23f40:	4505                	c.li	a0,1
   23f42:	a2e5                	c.j	2412a <dwarf::line_table::iterator::step(dwarf::cursor*)+0x29a>
    while (pos < sec->end) {
   23f44:	6998                	c.ld	a4,16(a1)
    std::uint64_t result = 0;
   23f46:	4501                	c.li	a0,0
    int shift = 0;
   23f48:	4601                	c.li	a2,0
    while (pos < sec->end) {
   23f4a:	02e7f563          	bgeu	a5,a4,23f74 <dwarf::line_table::iterator::step(dwarf::cursor*)+0xe4>
      uint8_t byte = *(uint8_t *)(pos++);
   23f4e:	0785                	c.addi	a5,1
   23f50:	e81c                	c.sd	a5,16(s0)
   23f52:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   23f56:	07f77693          	andi	a3,a4,127
   23f5a:	00c696b3          	sll	a3,a3,a2
   23f5e:	8d55                	c.or	a0,a3
      if ((byte & 0x80) == 0)
   23f60:	0187171b          	slliw	a4,a4,0x18
   23f64:	4187571b          	sraiw	a4,a4,0x18
   23f68:	00075a63          	bge	a4,zero,23f7c <dwarf::line_table::iterator::step(dwarf::cursor*)+0xec>
      shift += 7;
   23f6c:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   23f6e:	6998                	c.ld	a4,16(a1)
   23f70:	fce7efe3          	bltu	a5,a4,23f4e <dwarf::line_table::iterator::step(dwarf::cursor*)+0xbe>
    underflow();
   23f74:	8522                	c.mv	a0,s0
   23f76:	f5cf70ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    return 0;
   23f7a:	4501                	c.li	a0,0
  section_offset get_section_offset() const { return pos - sec->begin; }
   23f7c:	681c                	c.ld	a5,16(s0)
   23f7e:	6018                	c.ld	a4,0(s0)
   23f80:	00873a03          	ld	s4,8(a4)
   23f84:	41478a33          	sub	s4,a5,s4
    return ((DW_LNS)opcode == DW_LNS::copy);
  } else { // opcode == 0
    // Extended opcode (DWARF4 sections 6.2.3 and 6.2.5.3)
    assert(opcode == 0);
    uint64_t length = cur->uleb128();
    section_offset end = cur->get_section_offset() + length;
   23f88:	9a2a                	c.add	s4,a0
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23f8a:	6b18                	c.ld	a4,16(a4)
   23f8c:	00e7e563          	bltu	a5,a4,23f96 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x106>
      underflow();
   23f90:	8522                	c.mv	a0,s0
   23f92:	f40f70ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   23f96:	681c                	c.ld	a5,16(s0)
   23f98:	6008                	c.ld	a0,0(s0)
    if (sec->ord == byte_order::lsb) {
   23f9a:	4d58                	c.lw	a4,28(a0)
   23f9c:	4c070d63          	beq	a4,zero,24476 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5e6>
        val = (val << 8) | (uint64_t)p[i];
   23fa0:	0007c583          	lbu	a1,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   23fa4:	a9d9                	c.j	2447a <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5ea>
    while (pos < sec->end) {
   23fa6:	6998                	c.ld	a4,16(a1)
    std::uint64_t result = 0;
   23fa8:	4501                	c.li	a0,0
    int shift = 0;
   23faa:	4601                	c.li	a2,0
    while (pos < sec->end) {
   23fac:	02e7f563          	bgeu	a5,a4,23fd6 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x146>
      uint8_t byte = *(uint8_t *)(pos++);
   23fb0:	0785                	c.addi	a5,1
   23fb2:	e81c                	c.sd	a5,16(s0)
   23fb4:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   23fb8:	07f77693          	andi	a3,a4,127
   23fbc:	00c696b3          	sll	a3,a3,a2
   23fc0:	8d55                	c.or	a0,a3
      if ((byte & 0x80) == 0)
   23fc2:	0187171b          	slliw	a4,a4,0x18
   23fc6:	4187571b          	sraiw	a4,a4,0x18
   23fca:	00075a63          	bge	a4,zero,23fde <dwarf::line_table::iterator::step(dwarf::cursor*)+0x14e>
      shift += 7;
   23fce:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   23fd0:	6998                	c.ld	a4,16(a1)
   23fd2:	fce7efe3          	bltu	a5,a4,23fb0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x120>
    underflow();
   23fd6:	8522                	c.mv	a0,s0
   23fd8:	efaf70ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    return 0;
   23fdc:	4501                	c.li	a0,0
      regs.isa = cur->uleb128();
   23fde:	d4e8                	c.sw	a0,108(s1)
      break;
   23fe0:	a289                	c.j	24122 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
    while (pos < sec->end) {
   23fe2:	6998                	c.ld	a4,16(a1)
    std::uint64_t result = 0;
   23fe4:	4501                	c.li	a0,0
    int shift = 0;
   23fe6:	4601                	c.li	a2,0
    while (pos < sec->end) {
   23fe8:	02e7f563          	bgeu	a5,a4,24012 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x182>
      uint8_t byte = *(uint8_t *)(pos++);
   23fec:	0785                	c.addi	a5,1
   23fee:	e81c                	c.sd	a5,16(s0)
   23ff0:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   23ff4:	07f77693          	andi	a3,a4,127
   23ff8:	00c696b3          	sll	a3,a3,a2
   23ffc:	8d55                	c.or	a0,a3
      if ((byte & 0x80) == 0)
   23ffe:	0187171b          	slliw	a4,a4,0x18
   24002:	4187571b          	sraiw	a4,a4,0x18
   24006:	00075a63          	bge	a4,zero,2401a <dwarf::line_table::iterator::step(dwarf::cursor*)+0x18a>
      shift += 7;
   2400a:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   2400c:	6998                	c.ld	a4,16(a1)
   2400e:	fce7efe3          	bltu	a5,a4,23fec <dwarf::line_table::iterator::step(dwarf::cursor*)+0x15c>
    underflow();
   24012:	8522                	c.mv	a0,s0
   24014:	ebef70ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    return 0;
   24018:	4501                	c.li	a0,0
      regs.column = cur->uleb128();
   2401a:	d0a8                	c.sw	a0,96(s1)
      break;
   2401c:	a219                	c.j	24122 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
    while (pos < sec->end) {
   2401e:	6998                	c.ld	a4,16(a1)
    std::uint64_t result = 0;
   24020:	4501                	c.li	a0,0
    int shift = 0;
   24022:	4601                	c.li	a2,0
    while (pos < sec->end) {
   24024:	02e7f563          	bgeu	a5,a4,2404e <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1be>
      uint8_t byte = *(uint8_t *)(pos++);
   24028:	0785                	c.addi	a5,1
   2402a:	e81c                	c.sd	a5,16(s0)
   2402c:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   24030:	07f77693          	andi	a3,a4,127
   24034:	00c696b3          	sll	a3,a3,a2
   24038:	8d55                	c.or	a0,a3
      if ((byte & 0x80) == 0)
   2403a:	0187171b          	slliw	a4,a4,0x18
   2403e:	4187571b          	sraiw	a4,a4,0x18
   24042:	00075a63          	bge	a4,zero,24056 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1c6>
      shift += 7;
   24046:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   24048:	6998                	c.ld	a4,16(a1)
   2404a:	fce7efe3          	bltu	a5,a4,24028 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x198>
    underflow();
   2404e:	8522                	c.mv	a0,s0
   24050:	e82f70ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    return 0;
   24054:	4501                	c.li	a0,0
      regs.file_index = cur->uleb128();
   24056:	cca8                	c.sw	a0,88(s1)
      break;
   24058:	a0e9                	c.j	24122 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
    while (pos < sec->end) {
   2405a:	6998                	c.ld	a4,16(a1)
    std::uint64_t result = 0;
   2405c:	4501                	c.li	a0,0
    int shift = 0;
   2405e:	4601                	c.li	a2,0
    while (pos < sec->end) {
   24060:	02e7f563          	bgeu	a5,a4,2408a <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1fa>
      uint8_t byte = *(uint8_t *)(pos++);
   24064:	0785                	c.addi	a5,1
   24066:	e81c                	c.sd	a5,16(s0)
   24068:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   2406c:	07f77693          	andi	a3,a4,127
   24070:	00c696b3          	sll	a3,a3,a2
   24074:	8d55                	c.or	a0,a3
      if ((byte & 0x80) == 0)
   24076:	0187171b          	slliw	a4,a4,0x18
   2407a:	4187571b          	sraiw	a4,a4,0x18
   2407e:	06075f63          	bge	a4,zero,240fc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x26c>
      shift += 7;
   24082:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   24084:	6998                	c.ld	a4,16(a1)
   24086:	fce7efe3          	bltu	a5,a4,24064 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1d4>
    underflow();
   2408a:	8522                	c.mv	a0,s0
   2408c:	e46f70ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    return 0;
   24090:	4501                	c.li	a0,0
   24092:	a0ad                	c.j	240fc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x26c>
      entry = regs;
   24094:	0404b803          	ld	a6,64(s1)
   24098:	64a8                	c.ld	a0,72(s1)
   2409a:	68ac                	c.ld	a1,80(s1)
   2409c:	6cb0                	c.ld	a2,88(s1)
   2409e:	70b4                	c.ld	a3,96(s1)
   240a0:	74b8                	c.ld	a4,104(s1)
   240a2:	78bc                	c.ld	a5,112(s1)
   240a4:	0104b423          	sd	a6,8(s1)
   240a8:	e888                	c.sd	a0,16(s1)
   240aa:	ec8c                	c.sd	a1,24(s1)
   240ac:	f090                	c.sd	a2,32(s1)
   240ae:	f494                	c.sd	a3,40(s1)
   240b0:	f898                	c.sd	a4,48(s1)
   240b2:	fc9c                	c.sd	a5,56(s1)
      regs.basic_block = regs.prologue_end = regs.epilogue_begin = false;
   240b4:	06048423          	sb	zero,104(s1)
   240b8:	060483a3          	sb	zero,103(s1)
   240bc:	060482a3          	sb	zero,101(s1)
      regs.discriminator = 0;
   240c0:	0604a823          	sw	zero,112(s1)
      break;
   240c4:	a8b9                	c.j	24122 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
      regs.line = (signed)regs.line + cur->sleb128();
   240c6:	05c4a983          	lw	s3,92(s1)
   240ca:	8522                	c.mv	a0,s0
   240cc:	e46f70ef          	jal	ra,1b712 <dwarf::cursor::sleb128()>
   240d0:	0135053b          	addw	a0,a0,s3
   240d4:	cce8                	c.sw	a0,92(s1)
      break;
   240d6:	a0b1                	c.j	24122 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
      regs.is_stmt = !regs.is_stmt;
   240d8:	0644c783          	lbu	a5,100(s1)
   240dc:	0017c793          	xori	a5,a5,1
   240e0:	06f48223          	sb	a5,100(s1)
      break;
   240e4:	a83d                	c.j	24122 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
      regs.basic_block = true;
   240e6:	4785                	c.li	a5,1
   240e8:	06f482a3          	sb	a5,101(s1)
      break;
   240ec:	a81d                	c.j	24122 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
      uarg = (255 - m->opcode_base) / m->line_range;
   240ee:	0ff00513          	addi	a0,zero,255
   240f2:	9d19                	c.subw	a0,a4
   240f4:	01c9c783          	lbu	a5,28(s3)
   240f8:	02f5453b          	divw	a0,a0,a5
          ((regs.op_index + uarg) / m->maximum_operations_per_instruction);
   240fc:	0484e783          	lwu	a5,72(s1)
   24100:	97aa                	c.add	a5,a0
   24102:	0199c703          	lbu	a4,25(s3)
   24106:	02e7d733          	divu	a4,a5,a4
          m->minimum_instruction_length *
   2410a:	0189c683          	lbu	a3,24(s3)
   2410e:	02d70733          	mul	a4,a4,a3
      regs.address +=
   24112:	60b4                	c.ld	a3,64(s1)
   24114:	9736                	c.add	a4,a3
   24116:	e0b8                	c.sd	a4,64(s1)
          (regs.op_index + uarg) % m->maximum_operations_per_instruction;
   24118:	0199c703          	lbu	a4,25(s3)
   2411c:	02e7f7b3          	remu	a5,a5,a4
      regs.op_index =
   24120:	c4bc                	c.sw	a5,72(s1)
    return ((DW_LNS)opcode == DW_LNS::copy);
   24122:	fff90513          	addi	a0,s2,-1
   24126:	00153513          	sltiu	a0,a0,1
    if (cur->get_section_offset() > end)
      throw format_error("extended line number opcode exceeded its size");
    cur += end - cur->get_section_offset();
    return ((DW_LNE)opcode == DW_LNE::end_sequence);
  }
}
   2412a:	60ea                	c.ldsp	ra,152(sp)
   2412c:	644a                	c.ldsp	s0,144(sp)
   2412e:	64aa                	c.ldsp	s1,136(sp)
   24130:	690a                	c.ldsp	s2,128(sp)
   24132:	79e6                	c.ldsp	s3,120(sp)
   24134:	7a46                	c.ldsp	s4,112(sp)
   24136:	7aa6                	c.ldsp	s5,104(sp)
   24138:	610d                	c.addi16sp	sp,160
   2413a:	8082                	c.jr	ra
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2413c:	6998                	c.ld	a4,16(a1)
   2413e:	40f70633          	sub	a2,a4,a5
   24142:	4685                	c.li	a3,1
   24144:	00c6f463          	bgeu	a3,a2,2414c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x2bc>
   24148:	00e7e563          	bltu	a5,a4,24152 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x2c2>
      underflow();
   2414c:	8522                	c.mv	a0,s0
   2414e:	d84f70ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   24152:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   24154:	601c                	c.ld	a5,0(s0)
   24156:	4fdc                	c.lw	a5,28(a5)
   24158:	ef99                	c.bnez	a5,24176 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x2e6>
        val |= ((uint64_t)p[i]) << (i * 8);
   2415a:	00174783          	lbu	a5,1(a4)
   2415e:	07a2                	c.slli	a5,0x8
   24160:	00074683          	lbu	a3,0(a4)
   24164:	8fd5                	c.or	a5,a3
    pos += sizeof(T);
   24166:	0709                	c.addi	a4,2
   24168:	e818                	c.sd	a4,16(s0)
      regs.address += cur->fixed<uhalf>();
   2416a:	60b8                	c.ld	a4,64(s1)
   2416c:	97ba                	c.add	a5,a4
   2416e:	e0bc                	c.sd	a5,64(s1)
      regs.op_index = 0;
   24170:	0404a423          	sw	zero,72(s1)
      break;
   24174:	b77d                	c.j	24122 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
        val = (val << 8) | (uint64_t)p[i];
   24176:	00074783          	lbu	a5,0(a4)
   2417a:	07a2                	c.slli	a5,0x8
   2417c:	00174683          	lbu	a3,1(a4)
   24180:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   24182:	b7d5                	c.j	24166 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x2d6>
      regs.prologue_end = true;
   24184:	4785                	c.li	a5,1
   24186:	06f483a3          	sb	a5,103(s1)
      break;
   2418a:	bf61                	c.j	24122 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
      regs.epilogue_begin = true;
   2418c:	4785                	c.li	a5,1
   2418e:	06f48423          	sb	a5,104(s1)
      break;
   24192:	bf41                	c.j	24122 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
                         to_string((DW_LNS)opcode));
   24194:	4541                	c.li	a0,16
   24196:	cfaf20ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2419a:	84aa                	c.mv	s1,a0
   2419c:	85ca                	c.mv	a1,s2
   2419e:	1008                	c.addi4spn	a0,sp,32
   241a0:	0f9030ef          	jal	ra,27a98 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)>
    { return std::move(__rhs.insert(0, __lhs)); }
   241a4:	0000b617          	auipc	a2,0xb
   241a8:	d3460613          	addi	a2,a2,-716 # 2eed8 <typeinfo name for dwarf::expr_context+0x1a0>
   241ac:	4581                	c.li	a1,0
   241ae:	1008                	c.addi4spn	a0,sp,32
   241b0:	c50f20ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   241b4:	85aa                	c.mv	a1,a0
   241b6:	0080                	c.addi4spn	s0,sp,64
   241b8:	8522                	c.mv	a0,s0
   241ba:	d16f20ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   241be:	85a2                	c.mv	a1,s0
   241c0:	8526                	c.mv	a0,s1
   241c2:	e6ef20ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   241c6:	00016797          	auipc	a5,0x16
   241ca:	3aa7b783          	ld	a5,938(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   241ce:	07c1                	c.addi	a5,16
   241d0:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   241d2:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   241d4:	089c                	c.addi4spn	a5,sp,80
   241d6:	00f50463          	beq	a0,a5,241de <dwarf::line_table::iterator::step(dwarf::cursor*)+0x34e>
   241da:	dc6f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   241de:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   241e0:	181c                	c.addi4spn	a5,sp,48
   241e2:	00f50463          	beq	a0,a5,241ea <dwarf::line_table::iterator::step(dwarf::cursor*)+0x35a>
   241e6:	dbaf20ef          	jal	ra,167a0 <operator delete(void*)@plt>
   241ea:	00016617          	auipc	a2,0x16
   241ee:	1ae63603          	ld	a2,430(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   241f2:	00016597          	auipc	a1,0x16
   241f6:	0d65b583          	ld	a1,214(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   241fa:	8526                	c.mv	a0,s1
   241fc:	f64f20ef          	jal	ra,16960 <__cxa_throw@plt>
    switch ((DW_LNE)opcode) {
   24200:	4711                	c.li	a4,4
   24202:	04e91063          	bne	s2,a4,24242 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3b2>
    while (pos < sec->end) {
   24206:	6918                	c.ld	a4,16(a0)
    std::uint64_t result = 0;
   24208:	4581                	c.li	a1,0
    int shift = 0;
   2420a:	4601                	c.li	a2,0
    while (pos < sec->end) {
   2420c:	02e7f563          	bgeu	a5,a4,24236 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a6>
      uint8_t byte = *(uint8_t *)(pos++);
   24210:	0785                	c.addi	a5,1
   24212:	e81c                	c.sd	a5,16(s0)
   24214:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   24218:	07f77693          	andi	a3,a4,127
   2421c:	00c696b3          	sll	a3,a3,a2
   24220:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   24222:	0187171b          	slliw	a4,a4,0x18
   24226:	4187571b          	sraiw	a4,a4,0x18
   2422a:	00075a63          	bge	a4,zero,2423e <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3ae>
      shift += 7;
   2422e:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   24230:	6918                	c.ld	a4,16(a0)
   24232:	fce7efe3          	bltu	a5,a4,24210 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x380>
    underflow();
   24236:	8522                	c.mv	a0,s0
   24238:	c9af70ef          	jal	ra,1b6d2 <dwarf::cursor::underflow()>
    return 0;
   2423c:	4581                	c.li	a1,0
      regs.discriminator = cur->uleb128();
   2423e:	d8ac                	c.sw	a1,112(s1)
      break;
   24240:	a899                	c.j	24296 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x406>
    switch ((DW_LNE)opcode) {
   24242:	f809091b          	addiw	s2,s2,-128
   24246:	0189191b          	slliw	s2,s2,0x18
   2424a:	4189591b          	sraiw	s2,s2,0x18
   2424e:	0e094963          	blt	s2,zero,24340 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x4b0>
                          to_string((DW_LNE)opcode) + " not implemented");
   24252:	4541                	c.li	a0,16
   24254:	c3cf20ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   24258:	84aa                	c.mv	s1,a0
   2425a:	85d6                	c.mv	a1,s5
   2425c:	850a                	c.mv	a0,sp
   2425e:	2ba030ef          	jal	ra,27518 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)>
   24262:	a0ad                	c.j	242cc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x43c>
      regs.end_sequence = true;
   24264:	4785                	c.li	a5,1
   24266:	06f48323          	sb	a5,102(s1)
      entry = regs;
   2426a:	0404b803          	ld	a6,64(s1)
   2426e:	64a8                	c.ld	a0,72(s1)
   24270:	68ac                	c.ld	a1,80(s1)
   24272:	6cb0                	c.ld	a2,88(s1)
   24274:	70b4                	c.ld	a3,96(s1)
   24276:	74b8                	c.ld	a4,104(s1)
   24278:	78bc                	c.ld	a5,112(s1)
   2427a:	0104b423          	sd	a6,8(s1)
   2427e:	e888                	c.sd	a0,16(s1)
   24280:	ec8c                	c.sd	a1,24(s1)
   24282:	f090                	c.sd	a2,32(s1)
   24284:	f494                	c.sd	a3,40(s1)
   24286:	f898                	c.sd	a4,48(s1)
   24288:	fc9c                	c.sd	a5,56(s1)
      regs.reset(m->default_is_stmt);
   2428a:	01a9c583          	lbu	a1,26(s3)
   2428e:	04048513          	addi	a0,s1,64
   24292:	aaffe0ef          	jal	ra,22d40 <dwarf::line_table::entry::reset(bool)>
  section_offset get_section_offset() const { return pos - sec->begin; }
   24296:	6018                	c.ld	a4,0(s0)
   24298:	681c                	c.ld	a5,16(s0)
   2429a:	6718                	c.ld	a4,8(a4)
   2429c:	8f99                	c.sub	a5,a4
    return ((DW_LNE)opcode == DW_LNE::end_sequence);
   2429e:	fff90513          	addi	a0,s2,-1
   242a2:	00153513          	sltiu	a0,a0,1
    if (cur->get_section_offset() > end)
   242a6:	e8fa72e3          	bgeu	s4,a5,2412a <dwarf::line_table::iterator::step(dwarf::cursor*)+0x29a>
      throw format_error("extended line number opcode exceeded its size");
   242aa:	4541                	c.li	a0,16
   242ac:	be4f20ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   242b0:	842a                	c.mv	s0,a0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   242b2:	0000b597          	auipc	a1,0xb
   242b6:	c6658593          	addi	a1,a1,-922 # 2ef18 <typeinfo name for dwarf::expr_context+0x1e0>
   242ba:	f56f20ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   242be:	a0fd                	c.j	243ac <dwarf::line_table::iterator::step(dwarf::cursor*)+0x51c>
      m->read_file_entry(cur, false);
   242c0:	4601                	c.li	a2,0
   242c2:	85a2                	c.mv	a1,s0
   242c4:	854e                	c.mv	a0,s3
   242c6:	c85fe0ef          	jal	ra,22f4a <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)>
      break;
   242ca:	b7f1                	c.j	24296 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x406>
    { return std::move(__rhs.insert(0, __lhs)); }
   242cc:	0000b617          	auipc	a2,0xb
   242d0:	c2c60613          	addi	a2,a2,-980 # 2eef8 <typeinfo name for dwarf::expr_context+0x1c0>
   242d4:	4581                	c.li	a1,0
   242d6:	850a                	c.mv	a0,sp
   242d8:	b28f20ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   242dc:	85aa                	c.mv	a1,a0
   242de:	1000                	c.addi4spn	s0,sp,32
   242e0:	8522                	c.mv	a0,s0
   242e2:	beef20ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   242e6:	0000a597          	auipc	a1,0xa
   242ea:	5aa58593          	addi	a1,a1,1450 # 2e890 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x398>
   242ee:	8522                	c.mv	a0,s0
   242f0:	f50f20ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   242f4:	85aa                	c.mv	a1,a0
   242f6:	0080                	c.addi4spn	s0,sp,64
   242f8:	8522                	c.mv	a0,s0
   242fa:	bd6f20ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      throw runtime_error("vendor line number opcode " +
   242fe:	85a2                	c.mv	a1,s0
   24300:	8526                	c.mv	a0,s1
   24302:	e1ef20ef          	jal	ra,16920 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   24306:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   24308:	089c                	c.addi4spn	a5,sp,80
   2430a:	00f50463          	beq	a0,a5,24312 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x482>
   2430e:	c92f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   24312:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   24314:	181c                	c.addi4spn	a5,sp,48
   24316:	00f50463          	beq	a0,a5,2431e <dwarf::line_table::iterator::step(dwarf::cursor*)+0x48e>
   2431a:	c86f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2431e:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   24320:	081c                	c.addi4spn	a5,sp,16
   24322:	00f50463          	beq	a0,a5,2432a <dwarf::line_table::iterator::step(dwarf::cursor*)+0x49a>
   24326:	c7af20ef          	jal	ra,167a0 <operator delete(void*)@plt>
                          to_string((DW_LNE)opcode) + " not implemented");
   2432a:	00016617          	auipc	a2,0x16
   2432e:	0f663603          	ld	a2,246(a2) # 3a420 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   24332:	00016597          	auipc	a1,0x16
   24336:	2de5b583          	ld	a1,734(a1) # 3a610 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   2433a:	8526                	c.mv	a0,s1
   2433c:	e24f20ef          	jal	ra,16960 <__cxa_throw@plt>
                         to_string((DW_LNE)opcode));
   24340:	4541                	c.li	a0,16
   24342:	b4ef20ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   24346:	84aa                	c.mv	s1,a0
   24348:	85d6                	c.mv	a1,s5
   2434a:	1008                	c.addi4spn	a0,sp,32
   2434c:	1cc030ef          	jal	ra,27518 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)>
    { return std::move(__rhs.insert(0, __lhs)); }
   24350:	0000b617          	auipc	a2,0xb
   24354:	b8860613          	addi	a2,a2,-1144 # 2eed8 <typeinfo name for dwarf::expr_context+0x1a0>
   24358:	4581                	c.li	a1,0
   2435a:	1008                	c.addi4spn	a0,sp,32
   2435c:	aa4f20ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   24360:	85aa                	c.mv	a1,a0
   24362:	0080                	c.addi4spn	s0,sp,64
   24364:	8522                	c.mv	a0,s0
   24366:	b6af20ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   2436a:	85a2                	c.mv	a1,s0
   2436c:	8526                	c.mv	a0,s1
   2436e:	cc2f20ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   24372:	00016797          	auipc	a5,0x16
   24376:	1fe7b783          	ld	a5,510(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   2437a:	07c1                	c.addi	a5,16
   2437c:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   2437e:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   24380:	089c                	c.addi4spn	a5,sp,80
   24382:	00f50463          	beq	a0,a5,2438a <dwarf::line_table::iterator::step(dwarf::cursor*)+0x4fa>
   24386:	c1af20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2438a:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   2438c:	181c                	c.addi4spn	a5,sp,48
   2438e:	00f50463          	beq	a0,a5,24396 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x506>
   24392:	c0ef20ef          	jal	ra,167a0 <operator delete(void*)@plt>
   24396:	00016617          	auipc	a2,0x16
   2439a:	00263603          	ld	a2,2(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   2439e:	00016597          	auipc	a1,0x16
   243a2:	f2a5b583          	ld	a1,-214(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   243a6:	8526                	c.mv	a0,s1
   243a8:	db8f20ef          	jal	ra,16960 <__cxa_throw@plt>
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   243ac:	00016797          	auipc	a5,0x16
   243b0:	1c47b783          	ld	a5,452(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   243b4:	07c1                	c.addi	a5,16
   243b6:	e01c                	c.sd	a5,0(s0)
      throw format_error("extended line number opcode exceeded its size");
   243b8:	00016617          	auipc	a2,0x16
   243bc:	fe063603          	ld	a2,-32(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   243c0:	00016597          	auipc	a1,0x16
   243c4:	f085b583          	ld	a1,-248(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   243c8:	8522                	c.mv	a0,s0
   243ca:	d96f20ef          	jal	ra,16960 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   243ce:	842a                	c.mv	s0,a0
   243d0:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   243d2:	089c                	c.addi4spn	a5,sp,80
   243d4:	00f50463          	beq	a0,a5,243dc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x54c>
   243d8:	bc8f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   243dc:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   243de:	181c                	c.addi4spn	a5,sp,48
   243e0:	00f50463          	beq	a0,a5,243e8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x558>
   243e4:	bbcf20ef          	jal	ra,167a0 <operator delete(void*)@plt>
                         to_string((DW_LNS)opcode));
   243e8:	8526                	c.mv	a0,s1
   243ea:	b66f20ef          	jal	ra,16750 <__cxa_free_exception@plt>
   243ee:	8522                	c.mv	a0,s0
   243f0:	da0f20ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   243f4:	842a                	c.mv	s0,a0
   243f6:	b7dd                	c.j	243dc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x54c>
   243f8:	842a                	c.mv	s0,a0
   243fa:	b7fd                	c.j	243e8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x558>
   243fc:	842a                	c.mv	s0,a0
   243fe:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   24400:	089c                	c.addi4spn	a5,sp,80
   24402:	00f50463          	beq	a0,a5,2440a <dwarf::line_table::iterator::step(dwarf::cursor*)+0x57a>
   24406:	b9af20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2440a:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   2440c:	181c                	c.addi4spn	a5,sp,48
   2440e:	00f50463          	beq	a0,a5,24416 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x586>
   24412:	b8ef20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   24416:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   24418:	081c                	c.addi4spn	a5,sp,16
   2441a:	00f50463          	beq	a0,a5,24422 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x592>
   2441e:	b82f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
                          to_string((DW_LNE)opcode) + " not implemented");
   24422:	8526                	c.mv	a0,s1
   24424:	b2cf20ef          	jal	ra,16750 <__cxa_free_exception@plt>
   24428:	8522                	c.mv	a0,s0
   2442a:	d66f20ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2442e:	842a                	c.mv	s0,a0
   24430:	bfe9                	c.j	2440a <dwarf::line_table::iterator::step(dwarf::cursor*)+0x57a>
   24432:	842a                	c.mv	s0,a0
   24434:	b7cd                	c.j	24416 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x586>
   24436:	842a                	c.mv	s0,a0
   24438:	b7ed                	c.j	24422 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x592>
   2443a:	842a                	c.mv	s0,a0
   2443c:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   2443e:	089c                	c.addi4spn	a5,sp,80
   24440:	00f50463          	beq	a0,a5,24448 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5b8>
   24444:	b5cf20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   24448:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   2444a:	181c                	c.addi4spn	a5,sp,48
   2444c:	00f50463          	beq	a0,a5,24454 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5c4>
   24450:	b50f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
                         to_string((DW_LNE)opcode));
   24454:	8526                	c.mv	a0,s1
   24456:	afaf20ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2445a:	8522                	c.mv	a0,s0
   2445c:	d34f20ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   24460:	842a                	c.mv	s0,a0
   24462:	b7dd                	c.j	24448 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5b8>
   24464:	842a                	c.mv	s0,a0
   24466:	b7fd                	c.j	24454 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5c4>
      throw format_error("extended line number opcode exceeded its size");
   24468:	84aa                	c.mv	s1,a0
   2446a:	8522                	c.mv	a0,s0
   2446c:	ae4f20ef          	jal	ra,16750 <__cxa_free_exception@plt>
   24470:	8526                	c.mv	a0,s1
   24472:	d1ef20ef          	jal	ra,16990 <_Unwind_Resume@plt>
        val |= ((uint64_t)p[i]) << (i * 8);
   24476:	0007c583          	lbu	a1,0(a5)
    pos += sizeof(T);
   2447a:	0785                	c.addi	a5,1
   2447c:	e81c                	c.sd	a5,16(s0)
    return (T)val;
   2447e:	0ff5f913          	andi	s2,a1,255
    switch ((DW_LNE)opcode) {
   24482:	8aae                	c.mv	s5,a1
   24484:	470d                	c.li	a4,3
   24486:	e2e90de3          	beq	s2,a4,242c0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x430>
   2448a:	d7276be3          	bltu	a4,s2,24200 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x370>
   2448e:	4785                	c.li	a5,1
   24490:	dcf90ae3          	beq	s2,a5,24264 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3d4>
   24494:	4789                	c.li	a5,2
   24496:	eaf915e3          	bne	s2,a5,24340 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x4b0>
      regs.address = cur->address();
   2449a:	8522                	c.mv	a0,s0
   2449c:	00016317          	auipc	t1,0x16
   244a0:	ef433303          	ld	t1,-268(t1) # 3a390 <dwarf::cursor::address()@@Base+0x1a800>
   244a4:	9302                	c.jalr	t1
   244a6:	e0a8                	c.sd	a0,64(s1)
      regs.op_index = 0;
   244a8:	0404a423          	sw	zero,72(s1)
      break;
   244ac:	b3ed                	c.j	24296 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x406>
        val |= ((uint64_t)p[i]) << (i * 8);
   244ae:	0007c903          	lbu	s2,0(a5)
    pos += sizeof(T);
   244b2:	0785                	c.addi	a5,1
   244b4:	e81c                	c.sd	a5,16(s0)
    return (T)val;
   244b6:	0ff97913          	andi	s2,s2,255
  if (opcode >= m->opcode_base) {
   244ba:	01d9c703          	lbu	a4,29(s3)
   244be:	a0e976e3          	bgeu	s2,a4,23eca <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a>
  } else if (opcode != 0) {
   244c2:	a80901e3          	beq	s2,zero,23f44 <dwarf::line_table::iterator::step(dwarf::cursor*)+0xb4>
    switch ((DW_LNS)opcode) {
   244c6:	46b1                	c.li	a3,12
   244c8:	cd26e6e3          	bltu	a3,s2,24194 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x304>
   244cc:	00291693          	slli	a3,s2,0x2
   244d0:	0000b617          	auipc	a2,0xb
   244d4:	af060613          	addi	a2,a2,-1296 # 2efc0 <typeinfo name for dwarf::expr_context+0x288>
   244d8:	96b2                	c.add	a3,a2
   244da:	4294                	c.lw	a3,0(a3)
   244dc:	96b2                	c.add	a3,a2
   244de:	8682                	c.jr	a3

00000000000244e0 <dwarf::line_table::iterator::operator++()>:
line_table::iterator &line_table::iterator::operator++() {
   244e0:	7171                	c.addi16sp	sp,-176
   244e2:	f506                	c.sdsp	ra,168(sp)
   244e4:	f122                	c.sdsp	s0,160(sp)
   244e6:	ed26                	c.sdsp	s1,152(sp)
   244e8:	e94a                	c.sdsp	s2,144(sp)
   244ea:	e54e                	c.sdsp	s3,136(sp)
   244ec:	842a                	c.mv	s0,a0
   244ee:	611c                	c.ld	a5,0(a0)
   244f0:	639c                	c.ld	a5,0(a5)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   244f2:	0007b903          	ld	s2,0(a5)
      : _M_pi(__r._M_pi)
   244f6:	6784                	c.ld	s1,8(a5)
	if (_M_pi != nullptr)
   244f8:	2a048063          	beq	s1,zero,24798 <dwarf::line_table::iterator::operator++()+0x2b8>
    if (__is_single_threaded())
   244fc:	00016797          	auipc	a5,0x16
   24500:	f9c7b783          	ld	a5,-100(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   24504:	0007c783          	lbu	a5,0(a5)
   24508:	cfad                	c.beqz	a5,24582 <dwarf::line_table::iterator::operator++()+0xa2>
  { *__mem += __val; }
   2450a:	589c                	c.lw	a5,48(s1)
   2450c:	2785                	c.addiw	a5,1
   2450e:	d89c                	c.sw	a5,48(s1)
  cursor cur(table->m->sec, pos);
   24510:	07843983          	ld	s3,120(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   24514:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   24516:	f8a6                	c.sdsp	s1,112(sp)
    if (__is_single_threaded())
   24518:	00016797          	auipc	a5,0x16
   2451c:	f807b783          	ld	a5,-128(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   24520:	0007c783          	lbu	a5,0(a5)
   24524:	c7ad                	c.beqz	a5,2458e <dwarf::line_table::iterator::operator++()+0xae>
  { *__mem += __val; }
   24526:	589c                	c.lw	a5,48(s1)
   24528:	2785                	c.addiw	a5,1
   2452a:	d89c                	c.sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   2452c:	00893783          	ld	a5,8(s2)
   24530:	97ce                	c.add	a5,s3
   24532:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   24534:	00016797          	auipc	a5,0x16
   24538:	f647b783          	ld	a5,-156(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2453c:	0007c783          	lbu	a5,0(a5)
   24540:	cfa9                	c.beqz	a5,2459a <dwarf::line_table::iterator::operator++()+0xba>
    _Atomic_word __result = *__mem;
   24542:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   24544:	fff5079b          	addiw	a5,a0,-1
   24548:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2454a:	4785                	c.li	a5,1
   2454c:	24f51d63          	bne	a0,a5,247a6 <dwarf::line_table::iterator::operator++()+0x2c6>
	_M_dispose();
   24550:	609c                	c.ld	a5,0(s1)
   24552:	6b9c                	c.ld	a5,16(a5)
   24554:	8526                	c.mv	a0,s1
   24556:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   24558:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2455c:	00016797          	auipc	a5,0x16
   24560:	f3c7b783          	ld	a5,-196(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   24564:	0007c783          	lbu	a5,0(a5)
   24568:	cf9d                	c.beqz	a5,245a6 <dwarf::line_table::iterator::operator++()+0xc6>
    _Atomic_word __result = *__mem;
   2456a:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   2456c:	fff5079b          	addiw	a5,a0,-1
   24570:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   24572:	4785                	c.li	a5,1
   24574:	22f51963          	bne	a0,a5,247a6 <dwarf::line_table::iterator::operator++()+0x2c6>
	    _M_destroy();
   24578:	609c                	c.ld	a5,0(s1)
   2457a:	6f9c                	c.ld	a5,24(a5)
   2457c:	8526                	c.mv	a0,s1
   2457e:	9782                	c.jalr	a5
   24580:	a41d                	c.j	247a6 <dwarf::line_table::iterator::operator++()+0x2c6>
      __atomic_add(__mem, __val);
   24582:	4585                	c.li	a1,1
   24584:	03048513          	addi	a0,s1,48
   24588:	828f20ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2458c:	b751                	c.j	24510 <dwarf::line_table::iterator::operator++()+0x30>
   2458e:	4585                	c.li	a1,1
   24590:	03048513          	addi	a0,s1,48
   24594:	81cf20ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   24598:	bf51                	c.j	2452c <dwarf::line_table::iterator::operator++()+0x4c>
      return __exchange_and_add(__mem, __val);
   2459a:	55fd                	c.li	a1,-1
   2459c:	03048513          	addi	a0,s1,48
   245a0:	850f20ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   245a4:	b75d                	c.j	2454a <dwarf::line_table::iterator::operator++()+0x6a>
   245a6:	55fd                	c.li	a1,-1
   245a8:	03448513          	addi	a0,s1,52
   245ac:	844f20ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   245b0:	b7c9                	c.j	24572 <dwarf::line_table::iterator::operator++()+0x92>
  if (stepped && !output)
   245b2:	20048d63          	beq	s1,zero,247cc <dwarf::line_table::iterator::operator++()+0x2ec>
   245b6:	c935                	c.beqz	a0,2462a <dwarf::line_table::iterator::operator++()+0x14a>
  if (stepped && cur.end()) {
   245b8:	00d7e763          	bltu	a5,a3,245c6 <dwarf::line_table::iterator::operator++()+0xe6>
      { return _M_ptr; }
   245bc:	6014                	c.ld	a3,0(s0)
   245be:	6294                	c.ld	a3,0(a3)
    table->m->file_names_complete = true;
   245c0:	4605                	c.li	a2,1
   245c2:	06c68823          	sb	a2,112(a3)
    if (entry.file_index < table->m->file_names.size())
   245c6:	02046583          	lwu	a1,32(s0)
   245ca:	6014                	c.ld	a3,0(s0)
   245cc:	6294                	c.ld	a3,0(a3)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   245ce:	6ab0                	c.ld	a2,80(a3)
   245d0:	6eb4                	c.ld	a3,88(a3)
   245d2:	8e91                	c.sub	a3,a2
   245d4:	8691                	c.srai	a3,0x4
   245d6:	0000a517          	auipc	a0,0xa
   245da:	a3a53503          	ld	a0,-1478(a0) # 2e010 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   245de:	02a686b3          	mul	a3,a3,a0
   245e2:	08d5f163          	bgeu	a1,a3,24664 <dwarf::line_table::iterator::operator++()+0x184>
	return *(this->_M_impl._M_start + __n);
   245e6:	00159693          	slli	a3,a1,0x1
   245ea:	96ae                	c.add	a3,a1
   245ec:	0692                	c.slli	a3,0x4
   245ee:	9636                	c.add	a2,a3
      entry.file = &table->m->file_names[entry.file_index];
   245f0:	ec10                	c.sd	a2,24(s0)
  section_offset get_section_offset() const { return pos - sec->begin; }
   245f2:	6718                	c.ld	a4,8(a4)
   245f4:	8f99                	c.sub	a5,a4
  pos = cur.get_section_offset();
   245f6:	fc3c                	c.sd	a5,120(s0)
	if (_M_pi != nullptr)
   245f8:	74c6                	c.ldsp	s1,112(sp)
   245fa:	c085                	c.beqz	s1,2461a <dwarf::line_table::iterator::operator++()+0x13a>
    if (__is_single_threaded())
   245fc:	00016797          	auipc	a5,0x16
   24600:	e9c7b783          	ld	a5,-356(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   24604:	0007c783          	lbu	a5,0(a5)
   24608:	0e078a63          	beq	a5,zero,246fc <dwarf::line_table::iterator::operator++()+0x21c>
    _Atomic_word __result = *__mem;
   2460c:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   2460e:	fff5079b          	addiw	a5,a0,-1
   24612:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   24614:	4785                	c.li	a5,1
   24616:	0ef50963          	beq	a0,a5,24708 <dwarf::line_table::iterator::operator++()+0x228>
}
   2461a:	8522                	c.mv	a0,s0
   2461c:	70aa                	c.ldsp	ra,168(sp)
   2461e:	740a                	c.ldsp	s0,160(sp)
   24620:	64ea                	c.ldsp	s1,152(sp)
   24622:	694a                	c.ldsp	s2,144(sp)
   24624:	69aa                	c.ldsp	s3,136(sp)
   24626:	614d                	c.addi16sp	sp,176
   24628:	8082                	c.jr	ra
    throw format_error("unexpected end of line table");
   2462a:	4541                	c.li	a0,16
   2462c:	864f20ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   24630:	84aa                	c.mv	s1,a0
   24632:	0000b597          	auipc	a1,0xb
   24636:	91658593          	addi	a1,a1,-1770 # 2ef48 <typeinfo name for dwarf::expr_context+0x210>
   2463a:	bd6f20ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   2463e:	00016797          	auipc	a5,0x16
   24642:	f327b783          	ld	a5,-206(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   24646:	07c1                	c.addi	a5,16
   24648:	e09c                	c.sd	a5,0(s1)
   2464a:	00016617          	auipc	a2,0x16
   2464e:	d4e63603          	ld	a2,-690(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   24652:	00016597          	auipc	a1,0x16
   24656:	c765b583          	ld	a1,-906(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   2465a:	8526                	c.mv	a0,s1
   2465c:	b04f20ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   24660:	842a                	c.mv	s0,a0
   24662:	a0f5                	c.j	2474e <dwarf::line_table::iterator::operator++()+0x26e>
                         " in line table");
   24664:	4541                	c.li	a0,16
   24666:	82af20ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2466a:	84aa                	c.mv	s1,a0
      throw format_error("bad file index " + std::to_string(entry.file_index) +
   2466c:	500c                	c.lw	a1,32(s0)
   2466e:	0020                	c.addi4spn	s0,sp,8
   24670:	8522                	c.mv	a0,s0
   24672:	00016317          	auipc	t1,0x16
   24676:	e9633303          	ld	t1,-362(t1) # 3a508 <std::__cxx11::to_string(unsigned int)@@Base+0x1564c>
   2467a:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   2467c:	0000b617          	auipc	a2,0xb
   24680:	8ec60613          	addi	a2,a2,-1812 # 2ef68 <typeinfo name for dwarf::expr_context+0x230>
   24684:	4581                	c.li	a1,0
   24686:	8522                	c.mv	a0,s0
   24688:	f79f10ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2468c:	85aa                	c.mv	a1,a0
   2468e:	1020                	c.addi4spn	s0,sp,40
   24690:	8522                	c.mv	a0,s0
   24692:	83ef20ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   24696:	0000b597          	auipc	a1,0xb
   2469a:	8e258593          	addi	a1,a1,-1822 # 2ef78 <typeinfo name for dwarf::expr_context+0x240>
   2469e:	8522                	c.mv	a0,s0
   246a0:	ba0f20ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   246a4:	85aa                	c.mv	a1,a0
   246a6:	00a0                	c.addi4spn	s0,sp,72
   246a8:	8522                	c.mv	a0,s0
   246aa:	826f20ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   246ae:	85a2                	c.mv	a1,s0
   246b0:	8526                	c.mv	a0,s1
   246b2:	97ef20ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   246b6:	00016797          	auipc	a5,0x16
   246ba:	eba7b783          	ld	a5,-326(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   246be:	07c1                	c.addi	a5,16
   246c0:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   246c2:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   246c4:	08bc                	c.addi4spn	a5,sp,88
   246c6:	00f50463          	beq	a0,a5,246ce <dwarf::line_table::iterator::operator++()+0x1ee>
   246ca:	8d6f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   246ce:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   246d0:	183c                	c.addi4spn	a5,sp,56
   246d2:	00f50463          	beq	a0,a5,246da <dwarf::line_table::iterator::operator++()+0x1fa>
   246d6:	8caf20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   246da:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   246dc:	083c                	c.addi4spn	a5,sp,24
   246de:	00f50463          	beq	a0,a5,246e6 <dwarf::line_table::iterator::operator++()+0x206>
   246e2:	8bef20ef          	jal	ra,167a0 <operator delete(void*)@plt>
                         " in line table");
   246e6:	00016617          	auipc	a2,0x16
   246ea:	cb263603          	ld	a2,-846(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   246ee:	00016597          	auipc	a1,0x16
   246f2:	bda5b583          	ld	a1,-1062(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   246f6:	8526                	c.mv	a0,s1
   246f8:	a68f20ef          	jal	ra,16960 <__cxa_throw@plt>
      return __exchange_and_add(__mem, __val);
   246fc:	55fd                	c.li	a1,-1
   246fe:	03048513          	addi	a0,s1,48
   24702:	eeff10ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   24706:	b739                	c.j	24614 <dwarf::line_table::iterator::operator++()+0x134>
	_M_dispose();
   24708:	609c                	c.ld	a5,0(s1)
   2470a:	6b9c                	c.ld	a5,16(a5)
   2470c:	8526                	c.mv	a0,s1
   2470e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   24710:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   24714:	00016797          	auipc	a5,0x16
   24718:	d847b783          	ld	a5,-636(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2471c:	0007c783          	lbu	a5,0(a5)
   24720:	cf89                	c.beqz	a5,2473a <dwarf::line_table::iterator::operator++()+0x25a>
    _Atomic_word __result = *__mem;
   24722:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   24724:	fff5079b          	addiw	a5,a0,-1
   24728:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2472a:	4785                	c.li	a5,1
   2472c:	eef517e3          	bne	a0,a5,2461a <dwarf::line_table::iterator::operator++()+0x13a>
	    _M_destroy();
   24730:	609c                	c.ld	a5,0(s1)
   24732:	6f9c                	c.ld	a5,24(a5)
   24734:	8526                	c.mv	a0,s1
   24736:	9782                	c.jalr	a5
  return *this;
   24738:	b5cd                	c.j	2461a <dwarf::line_table::iterator::operator++()+0x13a>
      return __exchange_and_add(__mem, __val);
   2473a:	55fd                	c.li	a1,-1
   2473c:	03448513          	addi	a0,s1,52
   24740:	eb1f10ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   24744:	b7dd                	c.j	2472a <dwarf::line_table::iterator::operator++()+0x24a>
    throw format_error("unexpected end of line table");
   24746:	842a                	c.mv	s0,a0
   24748:	8526                	c.mv	a0,s1
   2474a:	806f20ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   2474e:	7546                	c.ldsp	a0,112(sp)
   24750:	c511                	c.beqz	a0,2475c <dwarf::line_table::iterator::operator++()+0x27c>
	  _M_pi->_M_release();
   24752:	00016317          	auipc	t1,0x16
   24756:	c8e33303          	ld	t1,-882(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   2475a:	9302                	c.jalr	t1
   2475c:	8522                	c.mv	a0,s0
   2475e:	a32f20ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   24762:	842a                	c.mv	s0,a0
   24764:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   24766:	08bc                	c.addi4spn	a5,sp,88
   24768:	00f50463          	beq	a0,a5,24770 <dwarf::line_table::iterator::operator++()+0x290>
   2476c:	834f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   24770:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   24772:	183c                	c.addi4spn	a5,sp,56
   24774:	00f50463          	beq	a0,a5,2477c <dwarf::line_table::iterator::operator++()+0x29c>
   24778:	828f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2477c:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   2477e:	083c                	c.addi4spn	a5,sp,24
   24780:	00f50463          	beq	a0,a5,24788 <dwarf::line_table::iterator::operator++()+0x2a8>
   24784:	81cf20ef          	jal	ra,167a0 <operator delete(void*)@plt>
                         " in line table");
   24788:	8526                	c.mv	a0,s1
   2478a:	fc7f10ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2478e:	b7c1                	c.j	2474e <dwarf::line_table::iterator::operator++()+0x26e>
      { return _M_dataplus._M_p; }
   24790:	842a                	c.mv	s0,a0
   24792:	bff9                	c.j	24770 <dwarf::line_table::iterator::operator++()+0x290>
   24794:	842a                	c.mv	s0,a0
   24796:	b7dd                	c.j	2477c <dwarf::line_table::iterator::operator++()+0x29c>
  cursor cur(table->m->sec, pos);
   24798:	7d38                	c.ld	a4,120(a0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2479a:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   2479c:	f882                	c.sdsp	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   2479e:	00893783          	ld	a5,8(s2)
   247a2:	97ba                	c.add	a5,a4
   247a4:	fcbe                	c.sdsp	a5,120(sp)
line_table::iterator &line_table::iterator::operator++() {
   247a6:	4501                	c.li	a0,0
   247a8:	4481                	c.li	s1,0
    stepped = true;
   247aa:	4905                	c.li	s2,1
    output = step(&cur);
   247ac:	06810993          	addi	s3,sp,104
  bool end() const { return pos >= sec->end; }
   247b0:	77e6                	c.ldsp	a5,120(sp)
      { return _M_ptr; }
   247b2:	7726                	c.ldsp	a4,104(sp)
   247b4:	6b14                	c.ld	a3,16(a4)
  while (!cur.end() && !output) {
   247b6:	ded7fee3          	bgeu	a5,a3,245b2 <dwarf::line_table::iterator::operator++()+0xd2>
   247ba:	e519                	c.bnez	a0,247c8 <dwarf::line_table::iterator::operator++()+0x2e8>
    stepped = true;
   247bc:	84ca                	c.mv	s1,s2
    output = step(&cur);
   247be:	85ce                	c.mv	a1,s3
   247c0:	8522                	c.mv	a0,s0
   247c2:	eceff0ef          	jal	ra,23e90 <dwarf::line_table::iterator::step(dwarf::cursor*)>
   247c6:	b7ed                	c.j	247b0 <dwarf::line_table::iterator::operator++()+0x2d0>
  if (stepped && !output)
   247c8:	de049fe3          	bne	s1,zero,245c6 <dwarf::line_table::iterator::operator++()+0xe6>
  if (output) {
   247cc:	e20503e3          	beq	a0,zero,245f2 <dwarf::line_table::iterator::operator++()+0x112>
   247d0:	bbdd                	c.j	245c6 <dwarf::line_table::iterator::operator++()+0xe6>

00000000000247d2 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>:
    : table(table), pos(pos) {
   247d2:	e10c                	c.sd	a1,0(a0)
   247d4:	fd30                	c.sd	a2,120(a0)
  if (table) {
   247d6:	c19d                	c.beqz	a1,247fc <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)+0x2a>
line_table::iterator::iterator(const line_table *table, section_offset pos)
   247d8:	1141                	c.addi	sp,-16
   247da:	e406                	c.sdsp	ra,8(sp)
   247dc:	e022                	c.sdsp	s0,0(sp)
   247de:	842a                	c.mv	s0,a0
    regs.reset(table->m->default_is_stmt);
   247e0:	619c                	c.ld	a5,0(a1)
   247e2:	01a7c583          	lbu	a1,26(a5)
   247e6:	04050513          	addi	a0,a0,64
   247ea:	d56fe0ef          	jal	ra,22d40 <dwarf::line_table::entry::reset(bool)>
    ++(*this);
   247ee:	8522                	c.mv	a0,s0
   247f0:	cf1ff0ef          	jal	ra,244e0 <dwarf::line_table::iterator::operator++()>
}
   247f4:	60a2                	c.ldsp	ra,8(sp)
   247f6:	6402                	c.ldsp	s0,0(sp)
   247f8:	0141                	c.addi	sp,16
   247fa:	8082                	c.jr	ra
   247fc:	8082                	c.jr	ra

00000000000247fe <dwarf::line_table::begin() const>:
line_table::iterator line_table::begin() const {
   247fe:	1141                	c.addi	sp,-16
   24800:	e406                	c.sdsp	ra,8(sp)
   24802:	e022                	c.sdsp	s0,0(sp)
   24804:	842a                	c.mv	s0,a0
      { return _M_ptr != nullptr; }
   24806:	619c                	c.ld	a5,0(a1)
  if (!valid())
   24808:	cb89                	c.beqz	a5,2481a <dwarf::line_table::begin() const+0x1c>
  return iterator(this, m->program_offset);
   2480a:	6b90                	c.ld	a2,16(a5)
   2480c:	fc7ff0ef          	jal	ra,247d2 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
}
   24810:	8522                	c.mv	a0,s0
   24812:	60a2                	c.ldsp	ra,8(sp)
   24814:	6402                	c.ldsp	s0,0(sp)
   24816:	0141                	c.addi	sp,16
   24818:	8082                	c.jr	ra
    return iterator(nullptr, 0);
   2481a:	4601                	c.li	a2,0
   2481c:	4581                	c.li	a1,0
   2481e:	fb5ff0ef          	jal	ra,247d2 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
   24822:	b7fd                	c.j	24810 <dwarf::line_table::begin() const+0x12>

0000000000024824 <dwarf::line_table::end() const>:
line_table::iterator line_table::end() const {
   24824:	1141                	c.addi	sp,-16
   24826:	e406                	c.sdsp	ra,8(sp)
   24828:	e022                	c.sdsp	s0,0(sp)
   2482a:	842a                	c.mv	s0,a0
   2482c:	619c                	c.ld	a5,0(a1)
  if (!valid())
   2482e:	cf81                	c.beqz	a5,24846 <dwarf::line_table::end() const+0x22>
      { return _M_ptr; }
   24830:	639c                	c.ld	a5,0(a5)
  size_t size() const { return end - begin; }
   24832:	6b90                	c.ld	a2,16(a5)
   24834:	679c                	c.ld	a5,8(a5)
  return iterator(this, m->sec->size());
   24836:	8e1d                	c.sub	a2,a5
   24838:	f9bff0ef          	jal	ra,247d2 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
}
   2483c:	8522                	c.mv	a0,s0
   2483e:	60a2                	c.ldsp	ra,8(sp)
   24840:	6402                	c.ldsp	s0,0(sp)
   24842:	0141                	c.addi	sp,16
   24844:	8082                	c.jr	ra
    return iterator(nullptr, 0);
   24846:	4601                	c.li	a2,0
   24848:	4581                	c.li	a1,0
   2484a:	f89ff0ef          	jal	ra,247d2 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
   2484e:	b7fd                	c.j	2483c <dwarf::line_table::end() const+0x18>

0000000000024850 <dwarf::line_table::find_address(unsigned long) const>:
line_table::iterator line_table::find_address(taddr addr) const {
   24850:	7121                	c.addi16sp	sp,-448
   24852:	ff06                	c.sdsp	ra,440(sp)
   24854:	fb22                	c.sdsp	s0,432(sp)
   24856:	f726                	c.sdsp	s1,424(sp)
   24858:	f34a                	c.sdsp	s2,416(sp)
   2485a:	ef4e                	c.sdsp	s3,408(sp)
   2485c:	eb52                	c.sdsp	s4,400(sp)
   2485e:	e756                	c.sdsp	s5,392(sp)
   24860:	842a                	c.mv	s0,a0
   24862:	84ae                	c.mv	s1,a1
   24864:	8932                	c.mv	s2,a2
  iterator prev = begin(), e = end();
   24866:	f99ff0ef          	jal	ra,247fe <dwarf::line_table::begin() const>
   2486a:	85a6                	c.mv	a1,s1
   2486c:	0208                	c.addi4spn	a0,sp,256
   2486e:	fb7ff0ef          	jal	ra,24824 <dwarf::line_table::end() const>
   24872:	6a12                	c.ldsp	s4,256(sp)
   24874:	79f6                	c.ldsp	s3,376(sp)
    return o.pos == pos && o.table == table;
   24876:	7c3c                	c.ld	a5,120(s0)
   24878:	03378b63          	beq	a5,s3,248ae <dwarf::line_table::find_address(unsigned long) const+0x5e>
  iterator it = prev;
   2487c:	87a2                	c.mv	a5,s0
   2487e:	0118                	c.addi4spn	a4,sp,128
   24880:	08040813          	addi	a6,s0,128
   24884:	6388                	c.ld	a0,0(a5)
   24886:	678c                	c.ld	a1,8(a5)
   24888:	6b90                	c.ld	a2,16(a5)
   2488a:	6f94                	c.ld	a3,24(a5)
   2488c:	e308                	c.sd	a0,0(a4)
   2488e:	e70c                	c.sd	a1,8(a4)
   24890:	eb10                	c.sd	a2,16(a4)
   24892:	ef14                	c.sd	a3,24(a4)
   24894:	02078793          	addi	a5,a5,32
   24898:	02070713          	addi	a4,a4,32
   2489c:	ff0794e3          	bne	a5,a6,24884 <dwarf::line_table::find_address(unsigned long) const+0x34>
  for (++it; it != e; prev = it++) {
   248a0:	0108                	c.addi4spn	a0,sp,128
   248a2:	c3fff0ef          	jal	ra,244e0 <dwarf::line_table::iterator::operator++()>
    iterator tmp(*this);
   248a6:	10010a93          	addi	s5,sp,256
    ++(*this);
   248aa:	0104                	c.addi4spn	s1,sp,128
   248ac:	a881                	c.j	248fc <dwarf::line_table::find_address(unsigned long) const+0xac>
    return o.pos == pos && o.table == table;
   248ae:	601c                	c.ld	a5,0(s0)
   248b0:	fcfa16e3          	bne	s4,a5,2487c <dwarf::line_table::find_address(unsigned long) const+0x2c>
   248b4:	a071                	c.j	24940 <dwarf::line_table::find_address(unsigned long) const+0xf0>
    iterator tmp(*this);
   248b6:	011c                	c.addi4spn	a5,sp,128
   248b8:	870a                	c.mv	a4,sp
   248ba:	6388                	c.ld	a0,0(a5)
   248bc:	678c                	c.ld	a1,8(a5)
   248be:	6b90                	c.ld	a2,16(a5)
   248c0:	6f94                	c.ld	a3,24(a5)
   248c2:	e308                	c.sd	a0,0(a4)
   248c4:	e70c                	c.sd	a1,8(a4)
   248c6:	eb10                	c.sd	a2,16(a4)
   248c8:	ef14                	c.sd	a3,24(a4)
   248ca:	02078793          	addi	a5,a5,32
   248ce:	02070713          	addi	a4,a4,32
   248d2:	ff5794e3          	bne	a5,s5,248ba <dwarf::line_table::find_address(unsigned long) const+0x6a>
    ++(*this);
   248d6:	8526                	c.mv	a0,s1
   248d8:	c09ff0ef          	jal	ra,244e0 <dwarf::line_table::iterator::operator++()>
   248dc:	878a                	c.mv	a5,sp
   248de:	8722                	c.mv	a4,s0
   248e0:	6388                	c.ld	a0,0(a5)
   248e2:	678c                	c.ld	a1,8(a5)
   248e4:	6b90                	c.ld	a2,16(a5)
   248e6:	6f94                	c.ld	a3,24(a5)
   248e8:	e308                	c.sd	a0,0(a4)
   248ea:	e70c                	c.sd	a1,8(a4)
   248ec:	eb10                	c.sd	a2,16(a4)
   248ee:	ef14                	c.sd	a3,24(a4)
   248f0:	02078793          	addi	a5,a5,32
   248f4:	02070713          	addi	a4,a4,32
   248f8:	fe9794e3          	bne	a5,s1,248e0 <dwarf::line_table::find_address(unsigned long) const+0x90>
    return o.pos == pos && o.table == table;
   248fc:	77ee                	c.ldsp	a5,248(sp)
   248fe:	01378c63          	beq	a5,s3,24916 <dwarf::line_table::find_address(unsigned long) const+0xc6>
    if (prev->address <= addr && it->address > addr && !prev->end_sequence)
   24902:	641c                	c.ld	a5,8(s0)
   24904:	faf969e3          	bltu	s2,a5,248b6 <dwarf::line_table::find_address(unsigned long) const+0x66>
   24908:	67aa                	c.ldsp	a5,136(sp)
   2490a:	faf976e3          	bgeu	s2,a5,248b6 <dwarf::line_table::find_address(unsigned long) const+0x66>
   2490e:	02e44783          	lbu	a5,46(s0)
   24912:	f3d5                	c.bnez	a5,248b6 <dwarf::line_table::find_address(unsigned long) const+0x66>
   24914:	a035                	c.j	24940 <dwarf::line_table::find_address(unsigned long) const+0xf0>
   24916:	678a                	c.ldsp	a5,128(sp)
   24918:	fefa15e3          	bne	s4,a5,24902 <dwarf::line_table::find_address(unsigned long) const+0xb2>
  prev = e;
   2491c:	021c                	c.addi4spn	a5,sp,256
   2491e:	8722                	c.mv	a4,s0
   24920:	18010813          	addi	a6,sp,384
   24924:	6388                	c.ld	a0,0(a5)
   24926:	678c                	c.ld	a1,8(a5)
   24928:	6b90                	c.ld	a2,16(a5)
   2492a:	6f94                	c.ld	a3,24(a5)
   2492c:	e308                	c.sd	a0,0(a4)
   2492e:	e70c                	c.sd	a1,8(a4)
   24930:	eb10                	c.sd	a2,16(a4)
   24932:	ef14                	c.sd	a3,24(a4)
   24934:	02078793          	addi	a5,a5,32
   24938:	02070713          	addi	a4,a4,32
   2493c:	ff0794e3          	bne	a5,a6,24924 <dwarf::line_table::find_address(unsigned long) const+0xd4>
}
   24940:	8522                	c.mv	a0,s0
   24942:	70fa                	c.ldsp	ra,440(sp)
   24944:	745a                	c.ldsp	s0,432(sp)
   24946:	74ba                	c.ldsp	s1,424(sp)
   24948:	791a                	c.ldsp	s2,416(sp)
   2494a:	69fa                	c.ldsp	s3,408(sp)
   2494c:	6a5a                	c.ldsp	s4,400(sp)
   2494e:	6aba                	c.ldsp	s5,392(sp)
   24950:	6139                	c.addi16sp	sp,448
   24952:	8082                	c.jr	ra

0000000000024954 <dwarf::line_table::get_file(unsigned int) const>:
const line_table::file *line_table::get_file(unsigned index) const {
   24954:	7165                	c.addi16sp	sp,-400
   24956:	e706                	c.sdsp	ra,392(sp)
   24958:	e322                	c.sdsp	s0,384(sp)
   2495a:	fea6                	c.sdsp	s1,376(sp)
   2495c:	faca                	c.sdsp	s2,368(sp)
   2495e:	f6ce                	c.sdsp	s3,360(sp)
   24960:	842a                	c.mv	s0,a0
  if (index >= m->file_names.size()) {
   24962:	02059493          	slli	s1,a1,0x20
   24966:	9081                	c.srli	s1,0x20
   24968:	6118                	c.ld	a4,0(a0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2496a:	6f3c                	c.ld	a5,88(a4)
   2496c:	6b34                	c.ld	a3,80(a4)
   2496e:	8f95                	c.sub	a5,a3
   24970:	8791                	c.srai	a5,0x4
   24972:	00009697          	auipc	a3,0x9
   24976:	69e6b683          	ld	a3,1694(a3) # 2e010 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   2497a:	02d787b3          	mul	a5,a5,a3
   2497e:	06f4ee63          	bltu	s1,a5,249fa <dwarf::line_table::get_file(unsigned int) const+0xa6>
   24982:	892e                	c.mv	s2,a1
    if (!m->file_names_complete) {
   24984:	07074783          	lbu	a5,112(a4)
   24988:	c795                	c.beqz	a5,249b4 <dwarf::line_table::get_file(unsigned int) const+0x60>
                         std::to_string(m->file_names.size()));
   2498a:	4541                	c.li	a0,16
   2498c:	d05f10ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   24990:	84aa                	c.mv	s1,a0
      throw out_of_range("file name index " + std::to_string(index) +
   24992:	85ca                	c.mv	a1,s2
   24994:	890a                	c.mv	s2,sp
   24996:	854a                	c.mv	a0,s2
   24998:	00016317          	auipc	t1,0x16
   2499c:	b7033303          	ld	t1,-1168(t1) # 3a508 <std::__cxx11::to_string(unsigned int)@@Base+0x1564c>
   249a0:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   249a2:	0000a617          	auipc	a2,0xa
   249a6:	5e660613          	addi	a2,a2,1510 # 2ef88 <typeinfo name for dwarf::expr_context+0x250>
   249aa:	4581                	c.li	a1,0
   249ac:	854a                	c.mv	a0,s2
   249ae:	c53f10ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   249b2:	a095                	c.j	24a16 <dwarf::line_table::get_file(unsigned int) const+0xc2>
      for (auto &ent : *this)
   249b4:	85aa                	c.mv	a1,a0
   249b6:	1088                	c.addi4spn	a0,sp,96
   249b8:	e47ff0ef          	jal	ra,247fe <dwarf::line_table::begin() const>
   249bc:	85a2                	c.mv	a1,s0
   249be:	1188                	c.addi4spn	a0,sp,224
   249c0:	e65ff0ef          	jal	ra,24824 <dwarf::line_table::end() const>
   249c4:	06010993          	addi	s3,sp,96
   249c8:	a021                	c.j	249d0 <dwarf::line_table::get_file(unsigned int) const+0x7c>
   249ca:	854e                	c.mv	a0,s3
   249cc:	b15ff0ef          	jal	ra,244e0 <dwarf::line_table::iterator::operator++()>
   249d0:	676e                	c.ldsp	a4,216(sp)
   249d2:	67f6                	c.ldsp	a5,344(sp)
   249d4:	fef71be3          	bne	a4,a5,249ca <dwarf::line_table::get_file(unsigned int) const+0x76>
   249d8:	770e                	c.ldsp	a4,224(sp)
   249da:	7786                	c.ldsp	a5,96(sp)
   249dc:	fef717e3          	bne	a4,a5,249ca <dwarf::line_table::get_file(unsigned int) const+0x76>
   249e0:	6018                	c.ld	a4,0(s0)
   249e2:	6f3c                	c.ld	a5,88(a4)
   249e4:	6b38                	c.ld	a4,80(a4)
   249e6:	8f99                	c.sub	a5,a4
   249e8:	8791                	c.srai	a5,0x4
   249ea:	00009717          	auipc	a4,0x9
   249ee:	62673703          	ld	a4,1574(a4) # 2e010 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   249f2:	02e787b3          	mul	a5,a5,a4
    if (index >= m->file_names.size())
   249f6:	f8f4fae3          	bgeu	s1,a5,2498a <dwarf::line_table::get_file(unsigned int) const+0x36>
	return *(this->_M_impl._M_start + __n);
   249fa:	6018                	c.ld	a4,0(s0)
   249fc:	00149793          	slli	a5,s1,0x1
   24a00:	97a6                	c.add	a5,s1
   24a02:	0792                	c.slli	a5,0x4
   24a04:	6b28                	c.ld	a0,80(a4)
   24a06:	953e                	c.add	a0,a5
}
   24a08:	60ba                	c.ldsp	ra,392(sp)
   24a0a:	641a                	c.ldsp	s0,384(sp)
   24a0c:	74f6                	c.ldsp	s1,376(sp)
   24a0e:	7956                	c.ldsp	s2,368(sp)
   24a10:	79b6                	c.ldsp	s3,360(sp)
   24a12:	6159                	c.addi16sp	sp,400
   24a14:	8082                	c.jr	ra
   24a16:	85aa                	c.mv	a1,a0
   24a18:	02010913          	addi	s2,sp,32
   24a1c:	854a                	c.mv	a0,s2
   24a1e:	cb3f10ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   24a22:	0000a597          	auipc	a1,0xa
   24a26:	57e58593          	addi	a1,a1,1406 # 2efa0 <typeinfo name for dwarf::expr_context+0x268>
   24a2a:	854a                	c.mv	a0,s2
   24a2c:	814f20ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   24a30:	85aa                	c.mv	a1,a0
   24a32:	0088                	c.addi4spn	a0,sp,64
   24a34:	c9df10ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   24a38:	6018                	c.ld	a4,0(s0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   24a3a:	6f3c                	c.ld	a5,88(a4)
   24a3c:	6b38                	c.ld	a4,80(a4)
   24a3e:	8f99                	c.sub	a5,a4
   24a40:	8791                	c.srai	a5,0x4
                         std::to_string(m->file_names.size()));
   24a42:	00009597          	auipc	a1,0x9
   24a46:	5ce5b583          	ld	a1,1486(a1) # 2e010 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   24a4a:	02b785b3          	mul	a1,a5,a1
   24a4e:	1088                	c.addi4spn	a0,sp,96
   24a50:	00016317          	auipc	t1,0x16
   24a54:	8c833303          	ld	t1,-1848(t1) # 3a318 <std::__cxx11::to_string(unsigned long)@@Base+0x156aa>
   24a58:	9302                	c.jalr	t1
                         " exceeds file table size of " +
   24a5a:	1090                	c.addi4spn	a2,sp,96
   24a5c:	008c                	c.addi4spn	a1,sp,64
   24a5e:	1188                	c.addi4spn	a0,sp,224
   24a60:	00016317          	auipc	t1,0x16
   24a64:	97833303          	ld	t1,-1672(t1) # 3a3d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x154d2>
   24a68:	9302                	c.jalr	t1
      throw out_of_range("file name index " + std::to_string(index) +
   24a6a:	118c                	c.addi4spn	a1,sp,224
   24a6c:	8526                	c.mv	a0,s1
   24a6e:	e83f10ef          	jal	ra,168f0 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   24a72:	750e                	c.ldsp	a0,224(sp)
	if (!_M_is_local())
   24a74:	199c                	c.addi4spn	a5,sp,240
   24a76:	00f50463          	beq	a0,a5,24a7e <dwarf::line_table::get_file(unsigned int) const+0x12a>
   24a7a:	d27f10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   24a7e:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   24a80:	189c                	c.addi4spn	a5,sp,112
   24a82:	00f50463          	beq	a0,a5,24a8a <dwarf::line_table::get_file(unsigned int) const+0x136>
   24a86:	d1bf10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   24a8a:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   24a8c:	089c                	c.addi4spn	a5,sp,80
   24a8e:	00f50463          	beq	a0,a5,24a96 <dwarf::line_table::get_file(unsigned int) const+0x142>
   24a92:	d0ff10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   24a96:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   24a98:	181c                	c.addi4spn	a5,sp,48
   24a9a:	00f50463          	beq	a0,a5,24aa2 <dwarf::line_table::get_file(unsigned int) const+0x14e>
   24a9e:	d03f10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   24aa2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   24aa4:	081c                	c.addi4spn	a5,sp,16
   24aa6:	00f50463          	beq	a0,a5,24aae <dwarf::line_table::get_file(unsigned int) const+0x15a>
   24aaa:	cf7f10ef          	jal	ra,167a0 <operator delete(void*)@plt>
                         std::to_string(m->file_names.size()));
   24aae:	00016617          	auipc	a2,0x16
   24ab2:	a2a63603          	ld	a2,-1494(a2) # 3a4d8 <std::out_of_range::~out_of_range()@GLIBCXX_3.4>
   24ab6:	00016597          	auipc	a1,0x16
   24aba:	ad25b583          	ld	a1,-1326(a1) # 3a588 <typeinfo for std::out_of_range@GLIBCXX_3.4>
   24abe:	8526                	c.mv	a0,s1
   24ac0:	ea1f10ef          	jal	ra,16960 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   24ac4:	842a                	c.mv	s0,a0
   24ac6:	750e                	c.ldsp	a0,224(sp)
	if (!_M_is_local())
   24ac8:	199c                	c.addi4spn	a5,sp,240
   24aca:	00f50463          	beq	a0,a5,24ad2 <dwarf::line_table::get_file(unsigned int) const+0x17e>
   24ace:	cd3f10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   24ad2:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   24ad4:	189c                	c.addi4spn	a5,sp,112
   24ad6:	00f50463          	beq	a0,a5,24ade <dwarf::line_table::get_file(unsigned int) const+0x18a>
   24ada:	cc7f10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   24ade:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   24ae0:	089c                	c.addi4spn	a5,sp,80
   24ae2:	00f50463          	beq	a0,a5,24aea <dwarf::line_table::get_file(unsigned int) const+0x196>
   24ae6:	cbbf10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   24aea:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   24aec:	181c                	c.addi4spn	a5,sp,48
   24aee:	00f50463          	beq	a0,a5,24af6 <dwarf::line_table::get_file(unsigned int) const+0x1a2>
   24af2:	caff10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   24af6:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   24af8:	081c                	c.addi4spn	a5,sp,16
   24afa:	00f50463          	beq	a0,a5,24b02 <dwarf::line_table::get_file(unsigned int) const+0x1ae>
   24afe:	ca3f10ef          	jal	ra,167a0 <operator delete(void*)@plt>
   24b02:	8526                	c.mv	a0,s1
   24b04:	c4df10ef          	jal	ra,16750 <__cxa_free_exception@plt>
   24b08:	8522                	c.mv	a0,s0
   24b0a:	e87f10ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   24b0e:	842a                	c.mv	s0,a0
   24b10:	b7c9                	c.j	24ad2 <dwarf::line_table::get_file(unsigned int) const+0x17e>
   24b12:	842a                	c.mv	s0,a0
   24b14:	b7e9                	c.j	24ade <dwarf::line_table::get_file(unsigned int) const+0x18a>
   24b16:	842a                	c.mv	s0,a0
   24b18:	bfc9                	c.j	24aea <dwarf::line_table::get_file(unsigned int) const+0x196>
   24b1a:	842a                	c.mv	s0,a0
   24b1c:	bfe9                	c.j	24af6 <dwarf::line_table::get_file(unsigned int) const+0x1a2>

0000000000024b1e <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   24b1e:	8082                	c.jr	ra

0000000000024b20 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   24b20:	1141                	c.addi	sp,-16
   24b22:	e406                	c.sdsp	ra,8(sp)
   24b24:	c7df10ef          	jal	ra,167a0 <operator delete(void*)@plt>
   24b28:	60a2                	c.ldsp	ra,8(sp)
   24b2a:	0141                	c.addi	sp,16
   24b2c:	8082                	c.jr	ra

0000000000024b2e <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   24b2e:	1141                	c.addi	sp,-16
   24b30:	e406                	c.sdsp	ra,8(sp)
   24b32:	c6ff10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   24b36:	60a2                	c.ldsp	ra,8(sp)
   24b38:	0141                	c.addi	sp,16
   24b3a:	8082                	c.jr	ra

0000000000024b3c <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   24b3c:	1141                	c.addi	sp,-16
   24b3e:	e406                	c.sdsp	ra,8(sp)
   24b40:	e022                	c.sdsp	s0,0(sp)
   24b42:	03850413          	addi	s0,a0,56
	    ||
   24b46:	00016797          	auipc	a5,0x16
   24b4a:	a0a7b783          	ld	a5,-1526(a5) # 3a550 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc880>
   24b4e:	02f58a63          	beq	a1,a5,24b82 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   24b52:	6588                	c.ld	a0,8(a1)
   24b54:	00016797          	auipc	a5,0x16
   24b58:	8d47b783          	ld	a5,-1836(a5) # 3a428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc948>
   24b5c:	02f50363          	beq	a0,a5,24b82 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   24b60:	00054703          	lbu	a4,0(a0)
   24b64:	02a00793          	addi	a5,zero,42
   24b68:	02f70263          	beq	a4,a5,24b8c <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   24b6c:	00016597          	auipc	a1,0x16
   24b70:	8bc5b583          	ld	a1,-1860(a1) # 3a428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc948>
   24b74:	a5df10ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   24b78:	00153513          	sltiu	a0,a0,1
   24b7c:	40a00533          	sub	a0,zero,a0
   24b80:	8c69                	c.and	s0,a0
      }
   24b82:	8522                	c.mv	a0,s0
   24b84:	60a2                	c.ldsp	ra,8(sp)
   24b86:	6402                	c.ldsp	s0,0(sp)
   24b88:	0141                	c.addi	sp,16
   24b8a:	8082                	c.jr	ra
	return nullptr;
   24b8c:	4401                	c.li	s0,0
   24b8e:	bfd5                	c.j	24b82 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

0000000000024b90 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   24b90:	1101                	c.addi	sp,-32
   24b92:	ec06                	c.sdsp	ra,24(sp)
   24b94:	e822                	c.sdsp	s0,16(sp)
   24b96:	e426                	c.sdsp	s1,8(sp)
   24b98:	e04a                	c.sdsp	s2,0(sp)
   24b9a:	84aa                	c.mv	s1,a0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   24b9c:	6540                	c.ld	s0,136(a0)
   24b9e:	09053903          	ld	s2,144(a0)
	  for (; __first != __last; ++__first)
   24ba2:	05241d63          	bne	s0,s2,24bfc <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
	_M_deallocate(_M_impl._M_start,
   24ba6:	64c8                	c.ld	a0,136(s1)
	if (__p)
   24ba8:	c119                	c.beqz	a0,24bae <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1e>
   24baa:	bf7f10ef          	jal	ra,167a0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   24bae:	78a0                	c.ld	s0,112(s1)
   24bb0:	0784b903          	ld	s2,120(s1)
   24bb4:	07241063          	bne	s0,s2,24c14 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x84>
	_M_deallocate(_M_impl._M_start,
   24bb8:	78a8                	c.ld	a0,112(s1)
	if (__p)
   24bba:	c119                	c.beqz	a0,24bc0 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x30>
   24bbc:	be5f10ef          	jal	ra,167a0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   24bc0:	6ca8                	c.ld	a0,88(s1)
	if (__p)
   24bc2:	c119                	c.beqz	a0,24bc8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
   24bc4:	bddf10ef          	jal	ra,167a0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   24bc8:	60a0                	c.ld	s0,64(s1)
   24bca:	cc19                	c.beqz	s0,24be8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x58>
    if (__is_single_threaded())
   24bcc:	00016797          	auipc	a5,0x16
   24bd0:	8cc7b783          	ld	a5,-1844(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   24bd4:	0007c783          	lbu	a5,0(a5)
   24bd8:	c7b1                	c.beqz	a5,24c24 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x94>
    _Atomic_word __result = *__mem;
   24bda:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   24bdc:	fff5079b          	addiw	a5,a0,-1
   24be0:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   24be2:	4785                	c.li	a5,1
   24be4:	04f50663          	beq	a0,a5,24c30 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa0>
      }
   24be8:	60e2                	c.ldsp	ra,24(sp)
   24bea:	6442                	c.ldsp	s0,16(sp)
   24bec:	64a2                	c.ldsp	s1,8(sp)
   24bee:	6902                	c.ldsp	s2,0(sp)
   24bf0:	6105                	c.addi16sp	sp,32
   24bf2:	8082                	c.jr	ra
   24bf4:	03040413          	addi	s0,s0,48
   24bf8:	fa8907e3          	beq	s2,s0,24ba6 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x16>
   24bfc:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   24bfe:	01040793          	addi	a5,s0,16
   24c02:	fef509e3          	beq	a0,a5,24bf4 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x64>
   24c06:	b9bf10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   24c0a:	b7ed                	c.j	24bf4 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x64>
   24c0c:	02040413          	addi	s0,s0,32
   24c10:	fa8904e3          	beq	s2,s0,24bb8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x28>
      { return _M_dataplus._M_p; }
   24c14:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   24c16:	01040793          	addi	a5,s0,16
   24c1a:	fef509e3          	beq	a0,a5,24c0c <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7c>
   24c1e:	b83f10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   24c22:	b7ed                	c.j	24c0c <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7c>
      return __exchange_and_add(__mem, __val);
   24c24:	55fd                	c.li	a1,-1
   24c26:	03040513          	addi	a0,s0,48
   24c2a:	9c7f10ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   24c2e:	bf55                	c.j	24be2 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x52>
	_M_dispose();
   24c30:	601c                	c.ld	a5,0(s0)
   24c32:	6b9c                	c.ld	a5,16(a5)
   24c34:	8522                	c.mv	a0,s0
   24c36:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   24c38:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   24c3c:	00016797          	auipc	a5,0x16
   24c40:	85c7b783          	ld	a5,-1956(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   24c44:	0007c783          	lbu	a5,0(a5)
   24c48:	cf89                	c.beqz	a5,24c62 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd2>
    _Atomic_word __result = *__mem;
   24c4a:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   24c4c:	fff5079b          	addiw	a5,a0,-1
   24c50:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   24c52:	4785                	c.li	a5,1
   24c54:	f8f51ae3          	bne	a0,a5,24be8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x58>
	    _M_destroy();
   24c58:	601c                	c.ld	a5,0(s0)
   24c5a:	6f9c                	c.ld	a5,24(a5)
   24c5c:	8522                	c.mv	a0,s0
   24c5e:	9782                	c.jalr	a5
      }
   24c60:	b761                	c.j	24be8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x58>
      return __exchange_and_add(__mem, __val);
   24c62:	55fd                	c.li	a1,-1
   24c64:	03440513          	addi	a0,s0,52
   24c68:	989f10ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   24c6c:	b7dd                	c.j	24c52 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xc2>

0000000000024c6e <std::__cxx11::to_string(unsigned long)>:
  {
   24c6e:	1101                	c.addi	sp,-32
   24c70:	ec06                	c.sdsp	ra,24(sp)
   24c72:	e822                	c.sdsp	s0,16(sp)
   24c74:	e426                	c.sdsp	s1,8(sp)
   24c76:	84aa                	c.mv	s1,a0
   24c78:	842e                	c.mv	s0,a1
	  if (__value < (unsigned)__base) return __n;
   24c7a:	47a5                	c.li	a5,9
   24c7c:	10b7ff63          	bgeu	a5,a1,24d9a <std::__cxx11::to_string(unsigned long)+0x12c>
	  if (__value < __b2) return __n + 1;
   24c80:	06300793          	addi	a5,zero,99
   24c84:	04b7fd63          	bgeu	a5,a1,24cde <std::__cxx11::to_string(unsigned long)+0x70>
	  if (__value < __b3) return __n + 2;
   24c88:	3e700793          	addi	a5,zero,999
   24c8c:	06b7fc63          	bgeu	a5,a1,24d04 <std::__cxx11::to_string(unsigned long)+0x96>
	  if (__value < __b4) return __n + 3;
   24c90:	6789                	c.lui	a5,0x2
   24c92:	70f78793          	addi	a5,a5,1807 # 270f <__abi_tag-0xdb85>
   24c96:	10b7f063          	bgeu	a5,a1,24d96 <std::__cxx11::to_string(unsigned long)+0x128>
   24c9a:	872e                	c.mv	a4,a1
      unsigned __n = 1;
   24c9c:	4585                	c.li	a1,1
	  __value /= __b4;
   24c9e:	6609                	c.lui	a2,0x2
   24ca0:	71060613          	addi	a2,a2,1808 # 2710 <__abi_tag-0xdb84>
	  if (__value < (unsigned)__base) return __n;
   24ca4:	66e1                	c.lui	a3,0x18
   24ca6:	69f68693          	addi	a3,a3,1695 # 1869f <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x203>
	  if (__value < __b2) return __n + 1;
   24caa:	000f4537          	lui	a0,0xf4
   24cae:	23f50513          	addi	a0,a0,575 # f423f <__global_pointer$+0xb9a3f>
	  if (__value < __b3) return __n + 2;
   24cb2:	00989837          	lui	a6,0x989
   24cb6:	67f80813          	addi	a6,a6,1663 # 98967f <__global_pointer$+0x94ee7f>
	  if (__value < __b4) return __n + 3;
   24cba:	05f5e8b7          	lui	a7,0x5f5e
   24cbe:	0ff88893          	addi	a7,a7,255 # 5f5e0ff <__global_pointer$+0x5f238ff>
   24cc2:	87ba                	c.mv	a5,a4
	  __value /= __b4;
   24cc4:	02c75733          	divu	a4,a4,a2
	  __n += 4;
   24cc8:	2591                	c.addiw	a1,4
	  if (__value < (unsigned)__base) return __n;
   24cca:	02f6ff63          	bgeu	a3,a5,24d08 <std::__cxx11::to_string(unsigned long)+0x9a>
	  if (__value < __b2) return __n + 1;
   24cce:	00f57963          	bgeu	a0,a5,24ce0 <std::__cxx11::to_string(unsigned long)+0x72>
	  if (__value < __b3) return __n + 2;
   24cd2:	02f87a63          	bgeu	a6,a5,24d06 <std::__cxx11::to_string(unsigned long)+0x98>
	  if (__value < __b4) return __n + 3;
   24cd6:	fef8e6e3          	bltu	a7,a5,24cc2 <std::__cxx11::to_string(unsigned long)+0x54>
   24cda:	258d                	c.addiw	a1,3
   24cdc:	a035                	c.j	24d08 <std::__cxx11::to_string(unsigned long)+0x9a>
      unsigned __n = 1;
   24cde:	4585                	c.li	a1,1
	  if (__value < __b2) return __n + 1;
   24ce0:	2585                	c.addiw	a1,1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24ce2:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   24ce6:	e09c                	c.sd	a5,0(s1)
      { _M_construct(__n, __c); }
   24ce8:	4601                	c.li	a2,0
   24cea:	1582                	c.slli	a1,0x20
   24cec:	9181                	c.srli	a1,0x20
   24cee:	8526                	c.mv	a0,s1
   24cf0:	b11f10ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   24cf4:	6090                	c.ld	a2,0(s1)
      while (__val >= 100)
   24cf6:	06300793          	addi	a5,zero,99
   24cfa:	0687f763          	bgeu	a5,s0,24d68 <std::__cxx11::to_string(unsigned long)+0xfa>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   24cfe:	6494                	c.ld	a3,8(s1)
      unsigned __pos = __len - 1;
   24d00:	36fd                	c.addiw	a3,-1
   24d02:	a839                	c.j	24d20 <std::__cxx11::to_string(unsigned long)+0xb2>
      unsigned __n = 1;
   24d04:	4585                	c.li	a1,1
	  if (__value < __b3) return __n + 2;
   24d06:	2589                	c.addiw	a1,2
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24d08:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   24d0c:	e09c                	c.sd	a5,0(s1)
      { _M_construct(__n, __c); }
   24d0e:	4601                	c.li	a2,0
   24d10:	1582                	c.slli	a1,0x20
   24d12:	9181                	c.srli	a1,0x20
   24d14:	8526                	c.mv	a0,s1
   24d16:	aebf10ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   24d1a:	6090                	c.ld	a2,0(s1)
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   24d1c:	6494                	c.ld	a3,8(s1)
      unsigned __pos = __len - 1;
   24d1e:	36fd                	c.addiw	a3,-1
	  auto const __num = (__val % 100) * 2;
   24d20:	06400593          	addi	a1,zero,100
	  __first[__pos] = __digits[__num + 1];
   24d24:	00015317          	auipc	t1,0x15
   24d28:	75c33303          	ld	t1,1884(t1) # 3a480 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xbf88>
      while (__val >= 100)
   24d2c:	6889                	c.lui	a7,0x2
   24d2e:	70f88893          	addi	a7,a7,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   24d32:	02b477b3          	remu	a5,s0,a1
   24d36:	0786                	c.slli	a5,0x1
   24d38:	8522                	c.mv	a0,s0
	  __val /= 100;
   24d3a:	02b45433          	divu	s0,s0,a1
	  __first[__pos] = __digits[__num + 1];
   24d3e:	02069713          	slli	a4,a3,0x20
   24d42:	9301                	c.srli	a4,0x20
   24d44:	9732                	c.add	a4,a2
   24d46:	979a                	c.add	a5,t1
   24d48:	0017c803          	lbu	a6,1(a5)
   24d4c:	01070023          	sb	a6,0(a4)
	  __first[__pos - 1] = __digits[__num];
   24d50:	fff6871b          	addiw	a4,a3,-1
   24d54:	1702                	c.slli	a4,0x20
   24d56:	9301                	c.srli	a4,0x20
   24d58:	9732                	c.add	a4,a2
   24d5a:	0007c783          	lbu	a5,0(a5)
   24d5e:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   24d62:	36f9                	c.addiw	a3,-2
      while (__val >= 100)
   24d64:	fca8e7e3          	bltu	a7,a0,24d32 <std::__cxx11::to_string(unsigned long)+0xc4>
      if (__val >= 10)
   24d68:	47a5                	c.li	a5,9
   24d6a:	0287fa63          	bgeu	a5,s0,24d9e <std::__cxx11::to_string(unsigned long)+0x130>
	  auto const __num = __val * 2;
   24d6e:	0406                	c.slli	s0,0x1
	  __first[1] = __digits[__num + 1];
   24d70:	00015797          	auipc	a5,0x15
   24d74:	7107b783          	ld	a5,1808(a5) # 3a480 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xbf88>
   24d78:	97a2                	c.add	a5,s0
   24d7a:	0017c703          	lbu	a4,1(a5)
   24d7e:	00e600a3          	sb	a4,1(a2)
	  __first[0] = __digits[__num];
   24d82:	0007c403          	lbu	s0,0(a5)
   24d86:	00860023          	sb	s0,0(a2)
  }
   24d8a:	8526                	c.mv	a0,s1
   24d8c:	60e2                	c.ldsp	ra,24(sp)
   24d8e:	6442                	c.ldsp	s0,16(sp)
   24d90:	64a2                	c.ldsp	s1,8(sp)
   24d92:	6105                	c.addi16sp	sp,32
   24d94:	8082                	c.jr	ra
      unsigned __n = 1;
   24d96:	4585                	c.li	a1,1
   24d98:	b789                	c.j	24cda <std::__cxx11::to_string(unsigned long)+0x6c>
   24d9a:	4585                	c.li	a1,1
   24d9c:	b799                	c.j	24ce2 <std::__cxx11::to_string(unsigned long)+0x74>
	__first[0] = '0' + __val;
   24d9e:	0304041b          	addiw	s0,s0,48
   24da2:	0ff47413          	andi	s0,s0,255
   24da6:	b7c5                	c.j	24d86 <std::__cxx11::to_string(unsigned long)+0x118>

0000000000024da8 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)>:
      const unsigned __b2 = __base  * __base;
   24da8:	02b586bb          	mulw	a3,a1,a1
   24dac:	0006889b          	addiw	a7,a3,0
      const unsigned __b3 = __b2 * __base;
   24db0:	0005881b          	addiw	a6,a1,0
   24db4:	02b686bb          	mulw	a3,a3,a1
   24db8:	0006831b          	addiw	t1,a3,0
      const unsigned long __b4 = __b3 * __base;
   24dbc:	02b686bb          	mulw	a3,a3,a1
   24dc0:	0006859b          	addiw	a1,a3,0
   24dc4:	1682                	c.slli	a3,0x20
   24dc6:	9281                	c.srli	a3,0x20
	  if (__value < (unsigned)__base) return __n;
   24dc8:	05056763          	bltu	a0,a6,24e16 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x6e>
	  if (__value < __b2) return __n + 1;
   24dcc:	03156c63          	bltu	a0,a7,24e04 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x5c>
	  if (__value < __b3) return __n + 2;
   24dd0:	02656d63          	bltu	a0,t1,24e0a <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x62>
	  if (__value < __b4) return __n + 3;
   24dd4:	02051793          	slli	a5,a0,0x20
   24dd8:	9381                	c.srli	a5,0x20
   24dda:	02b56b63          	bltu	a0,a1,24e10 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x68>
      unsigned __n = 1;
   24dde:	4505                	c.li	a0,1
   24de0:	567d                	c.li	a2,-1
   24de2:	9201                	c.srli	a2,0x20
	  __value /= __b4;
   24de4:	02d7d7b3          	divu	a5,a5,a3
   24de8:	0007871b          	addiw	a4,a5,0
	  __n += 4;
   24dec:	2511                	c.addiw	a0,4
	  if (__value < (unsigned)__base) return __n;
   24dee:	03076363          	bltu	a4,a6,24e14 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x6c>
	  if (__value < __b2) return __n + 1;
   24df2:	01176a63          	bltu	a4,a7,24e06 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x5e>
	  if (__value < __b3) return __n + 2;
   24df6:	00676b63          	bltu	a4,t1,24e0c <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x64>
   24dfa:	8ff1                	c.and	a5,a2
	  if (__value < __b4) return __n + 3;
   24dfc:	feb774e3          	bgeu	a4,a1,24de4 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x3c>
   24e00:	250d                	c.addiw	a0,3
   24e02:	8082                	c.jr	ra
      unsigned __n = 1;
   24e04:	4505                	c.li	a0,1
	  if (__value < __b2) return __n + 1;
   24e06:	2505                	c.addiw	a0,1
   24e08:	8082                	c.jr	ra
      unsigned __n = 1;
   24e0a:	4505                	c.li	a0,1
	  if (__value < __b3) return __n + 2;
   24e0c:	2509                	c.addiw	a0,2
   24e0e:	8082                	c.jr	ra
      unsigned __n = 1;
   24e10:	4505                	c.li	a0,1
   24e12:	b7fd                	c.j	24e00 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x58>
   24e14:	8082                	c.jr	ra
   24e16:	4505                	c.li	a0,1
    }
   24e18:	8082                	c.jr	ra

0000000000024e1a <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>:
      unsigned __pos = __len - 1;
   24e1a:	35fd                	c.addiw	a1,-1
      while (__val >= 100)
   24e1c:	06300793          	addi	a5,zero,99
   24e20:	04c7ff63          	bgeu	a5,a2,24e7e <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x64>
	  auto const __num = (__val % 100) * 2;
   24e24:	06400893          	addi	a7,zero,100
	  __first[__pos] = __digits[__num + 1];
   24e28:	00015817          	auipc	a6,0x15
   24e2c:	55083803          	ld	a6,1360(a6) # 3a378 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xc450>
      while (__val >= 100)
   24e30:	6e09                	c.lui	t3,0x2
   24e32:	70fe0e13          	addi	t3,t3,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   24e36:	031677bb          	remuw	a5,a2,a7
   24e3a:	0017979b          	slliw	a5,a5,0x1
   24e3e:	0006031b          	addiw	t1,a2,0
	  __val /= 100;
   24e42:	0316563b          	divuw	a2,a2,a7
	  __first[__pos] = __digits[__num + 1];
   24e46:	02059693          	slli	a3,a1,0x20
   24e4a:	9281                	c.srli	a3,0x20
   24e4c:	96aa                	c.add	a3,a0
   24e4e:	0017871b          	addiw	a4,a5,1
   24e52:	1702                	c.slli	a4,0x20
   24e54:	9301                	c.srli	a4,0x20
   24e56:	9742                	c.add	a4,a6
   24e58:	00074703          	lbu	a4,0(a4)
   24e5c:	00e68023          	sb	a4,0(a3)
	  __first[__pos - 1] = __digits[__num];
   24e60:	fff5871b          	addiw	a4,a1,-1
   24e64:	1702                	c.slli	a4,0x20
   24e66:	9301                	c.srli	a4,0x20
   24e68:	972a                	c.add	a4,a0
   24e6a:	1782                	c.slli	a5,0x20
   24e6c:	9381                	c.srli	a5,0x20
   24e6e:	97c2                	c.add	a5,a6
   24e70:	0007c783          	lbu	a5,0(a5)
   24e74:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   24e78:	35f9                	c.addiw	a1,-2
      while (__val >= 100)
   24e7a:	fa6e6ee3          	bltu	t3,t1,24e36 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x1c>
      if (__val >= 10)
   24e7e:	47a5                	c.li	a5,9
   24e80:	02c7f963          	bgeu	a5,a2,24eb2 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x98>
	  auto const __num = __val * 2;
   24e84:	0016161b          	slliw	a2,a2,0x1
	  __first[1] = __digits[__num + 1];
   24e88:	00015717          	auipc	a4,0x15
   24e8c:	4f073703          	ld	a4,1264(a4) # 3a378 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xc450>
   24e90:	0016079b          	addiw	a5,a2,1
   24e94:	1782                	c.slli	a5,0x20
   24e96:	9381                	c.srli	a5,0x20
   24e98:	97ba                	c.add	a5,a4
   24e9a:	0007c783          	lbu	a5,0(a5)
   24e9e:	00f500a3          	sb	a5,1(a0)
	  __first[0] = __digits[__num];
   24ea2:	1602                	c.slli	a2,0x20
   24ea4:	9201                	c.srli	a2,0x20
   24ea6:	9732                	c.add	a4,a2
   24ea8:	00074603          	lbu	a2,0(a4)
   24eac:	00c50023          	sb	a2,0(a0)
    }
   24eb0:	8082                	c.jr	ra
	__first[0] = '0' + __val;
   24eb2:	0306061b          	addiw	a2,a2,48
   24eb6:	0ff67613          	andi	a2,a2,255
   24eba:	bfcd                	c.j	24eac <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x92>

0000000000024ebc <std::__cxx11::to_string(unsigned int)>:
  {
   24ebc:	1101                	c.addi	sp,-32
   24ebe:	ec06                	c.sdsp	ra,24(sp)
   24ec0:	e822                	c.sdsp	s0,16(sp)
   24ec2:	e426                	c.sdsp	s1,8(sp)
   24ec4:	842a                	c.mv	s0,a0
   24ec6:	84ae                	c.mv	s1,a1
    string __str(__detail::__to_chars_len(__val), '\0');
   24ec8:	45a9                	c.li	a1,10
   24eca:	8526                	c.mv	a0,s1
   24ecc:	00015317          	auipc	t1,0x15
   24ed0:	5e433303          	ld	t1,1508(t1) # 3a4b0 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x15708>
   24ed4:	9302                	c.jalr	t1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24ed6:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   24eda:	e01c                	c.sd	a5,0(s0)
      { _M_construct(__n, __c); }
   24edc:	4601                	c.li	a2,0
   24ede:	02051593          	slli	a1,a0,0x20
   24ee2:	9181                	c.srli	a1,0x20
   24ee4:	8522                	c.mv	a0,s0
   24ee6:	91bf10ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   24eea:	8626                	c.mv	a2,s1
   24eec:	440c                	c.lw	a1,8(s0)
   24eee:	6008                	c.ld	a0,0(s0)
   24ef0:	00015317          	auipc	t1,0x15
   24ef4:	5e033303          	ld	t1,1504(t1) # 3a4d0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x156b6>
   24ef8:	9302                	c.jalr	t1
  }
   24efa:	8522                	c.mv	a0,s0
   24efc:	60e2                	c.ldsp	ra,24(sp)
   24efe:	6442                	c.ldsp	s0,16(sp)
   24f00:	64a2                	c.ldsp	s1,8(sp)
   24f02:	6105                	c.addi16sp	sp,32
   24f04:	8082                	c.jr	ra

0000000000024f06 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
   24f06:	1101                	c.addi	sp,-32
   24f08:	ec06                	c.sdsp	ra,24(sp)
   24f0a:	e822                	c.sdsp	s0,16(sp)
   24f0c:	e426                	c.sdsp	s1,8(sp)
   24f0e:	e04a                	c.sdsp	s2,0(sp)
   24f10:	842a                	c.mv	s0,a0
   24f12:	852e                	c.mv	a0,a1
   24f14:	87b2                	c.mv	a5,a2
      { return _M_string_length; }
   24f16:	6598                	c.ld	a4,8(a1)
   24f18:	6610                	c.ld	a2,8(a2)
	  const auto __size = __lhs.size() + __rhs.size();
   24f1a:	00e60833          	add	a6,a2,a4
      { return _M_dataplus._M_p; }
   24f1e:	6194                	c.ld	a3,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24f20:	05c1                	c.addi	a1,16
	return _M_is_local() ? size_type(_S_local_capacity)
   24f22:	06b68163          	beq	a3,a1,24f84 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x7e>
   24f26:	690c                	c.ld	a1,16(a0)
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
   24f28:	0105fb63          	bgeu	a1,a6,24f3e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x38>
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24f2c:	01078593          	addi	a1,a5,16
	return _M_is_local() ? size_type(_S_local_capacity)
   24f30:	0007b883          	ld	a7,0(a5)
   24f34:	04b88a63          	beq	a7,a1,24f88 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x82>
   24f38:	6b8c                	c.ld	a1,16(a5)
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
   24f3a:	0505f963          	bgeu	a1,a6,24f8c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x86>
      { return _M_dataplus._M_p; }
   24f3e:	638c                	c.ld	a1,0(a5)
	if (this->max_size() - (this->size() - __n1) < __n2)
   24f40:	57fd                	c.li	a5,-1
   24f42:	8389                	c.srli	a5,0x2
   24f44:	8f99                	c.sub	a5,a4
   24f46:	08c7e463          	bltu	a5,a2,24fce <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xc8>
	return _M_append(__s, __n);
   24f4a:	ee6f10ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   24f4e:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24f50:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24f54:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   24f56:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24f58:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   24f5c:	07278f63          	beq	a5,s2,24fda <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xd4>
      { _M_dataplus._M_p = __p; }
   24f60:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   24f62:	689c                	c.ld	a5,16(s1)
   24f64:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   24f66:	649c                	c.ld	a5,8(s1)
   24f68:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   24f6a:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   24f6e:	0004b423          	sd	zero,8(s1)
   24f72:	00048823          	sb	zero,16(s1)
    }
   24f76:	8522                	c.mv	a0,s0
   24f78:	60e2                	c.ldsp	ra,24(sp)
   24f7a:	6442                	c.ldsp	s0,16(sp)
   24f7c:	64a2                	c.ldsp	s1,8(sp)
   24f7e:	6902                	c.ldsp	s2,0(sp)
   24f80:	6105                	c.addi16sp	sp,32
   24f82:	8082                	c.jr	ra
	return _M_is_local() ? size_type(_S_local_capacity)
   24f84:	45bd                	c.li	a1,15
   24f86:	b74d                	c.j	24f28 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x22>
   24f88:	45bd                	c.li	a1,15
   24f8a:	bf45                	c.j	24f3a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x34>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   24f8c:	4601                	c.li	a2,0
   24f8e:	4581                	c.li	a1,0
   24f90:	853e                	c.mv	a0,a5
   24f92:	96ff10ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   24f96:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24f98:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24f9c:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   24f9e:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24fa0:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   24fa4:	01278e63          	beq	a5,s2,24fc0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xba>
      { _M_dataplus._M_p = __p; }
   24fa8:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   24faa:	689c                	c.ld	a5,16(s1)
   24fac:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   24fae:	649c                	c.ld	a5,8(s1)
   24fb0:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   24fb2:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   24fb6:	0004b423          	sd	zero,8(s1)
   24fba:	00048823          	sb	zero,16(s1)
      }
   24fbe:	bf65                	c.j	24f76 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x70>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24fc0:	6490                	c.ld	a2,8(s1)
   24fc2:	0605                	c.addi	a2,1
	if (__n == 0)
   24fc4:	d66d                	c.beqz	a2,24fae <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa8>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   24fc6:	85ca                	c.mv	a1,s2
   24fc8:	879f10ef          	jal	ra,16840 <memcpy@plt>
   24fcc:	b7cd                	c.j	24fae <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa8>
	  __throw_length_error(__N(__s));
   24fce:	00009517          	auipc	a0,0x9
   24fd2:	30250513          	addi	a0,a0,770 # 2e2d0 <std::piecewise_construct+0x2b0>
   24fd6:	ecaf10ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24fda:	6490                	c.ld	a2,8(s1)
   24fdc:	0605                	c.addi	a2,1
	if (__n == 0)
   24fde:	d641                	c.beqz	a2,24f66 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x60>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   24fe0:	85ca                	c.mv	a1,s2
   24fe2:	85ff10ef          	jal	ra,16840 <memcpy@plt>
   24fe6:	b741                	c.j	24f66 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x60>

0000000000024fe8 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)>:
      if (__n != 0)
   24fe8:	0e058f63          	beq	a1,zero,250e6 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xfe>
    vector<_Tp, _Alloc>::
   24fec:	7139                	c.addi16sp	sp,-64
   24fee:	fc06                	c.sdsp	ra,56(sp)
   24ff0:	f822                	c.sdsp	s0,48(sp)
   24ff2:	f426                	c.sdsp	s1,40(sp)
   24ff4:	f04a                	c.sdsp	s2,32(sp)
   24ff6:	ec4e                	c.sdsp	s3,24(sp)
   24ff8:	e852                	c.sdsp	s4,16(sp)
   24ffa:	e456                	c.sdsp	s5,8(sp)
   24ffc:	89aa                	c.mv	s3,a0
   24ffe:	842e                	c.mv	s0,a1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   25000:	6514                	c.ld	a3,8(a0)
   25002:	6104                	c.ld	s1,0(a0)
   25004:	409684b3          	sub	s1,a3,s1
	  if (__size > max_size() || __navail > max_size() - __size)
   25008:	57fd                	c.li	a5,-1
   2500a:	8385                	c.srli	a5,0x1
   2500c:	8f85                	c.sub	a5,s1
					 - this->_M_impl._M_finish);
   2500e:	6918                	c.ld	a4,16(a0)
   25010:	8f15                	c.sub	a4,a3
	  if (__navail >= __n)
   25012:	04b76063          	bltu	a4,a1,25052 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x6a>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   25016:	00068023          	sb	zero,0(a3)
	      ++__first;
   2501a:	00168513          	addi	a0,a3,1
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   2501e:	4785                	c.li	a5,1
   25020:	00f59d63          	bne	a1,a5,2503a <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x52>
	      this->_M_impl._M_finish =
   25024:	00a9b423          	sd	a0,8(s3)
    }
   25028:	70e2                	c.ldsp	ra,56(sp)
   2502a:	7442                	c.ldsp	s0,48(sp)
   2502c:	74a2                	c.ldsp	s1,40(sp)
   2502e:	7902                	c.ldsp	s2,32(sp)
   25030:	69e2                	c.ldsp	s3,24(sp)
   25032:	6a42                	c.ldsp	s4,16(sp)
   25034:	6aa2                	c.ldsp	s5,8(sp)
   25036:	6121                	c.addi16sp	sp,64
   25038:	8082                	c.jr	ra
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   2503a:	00b684b3          	add	s1,a3,a1
      if (const size_t __len = __last - __first)
   2503e:	fff58613          	addi	a2,a1,-1
   25042:	e219                	c.bnez	a2,25048 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x60>
      return __first + __n;
   25044:	8526                	c.mv	a0,s1
   25046:	bff9                	c.j	25024 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x3c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
   25048:	4581                	c.li	a1,0
   2504a:	827f10ef          	jal	ra,16870 <memset@plt>
      return __first + __n;
   2504e:	8526                	c.mv	a0,s1
   25050:	bfd1                	c.j	25024 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x3c>
	if (max_size() - size() < __n)
   25052:	04b7e763          	bltu	a5,a1,250a0 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xb8>
	const size_type __len = size() + (std::max)(size(), __n);
   25056:	87a6                	c.mv	a5,s1
   25058:	00b4f363          	bgeu	s1,a1,2505e <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x76>
   2505c:	87ae                	c.mv	a5,a1
   2505e:	97a6                	c.add	a5,s1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   25060:	0497e663          	bltu	a5,s1,250ac <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xc4>
   25064:	8a3e                	c.mv	s4,a5
   25066:	0007d563          	bge	a5,zero,25070 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x88>
   2506a:	5a7d                	c.li	s4,-1
   2506c:	001a5a13          	srli	s4,s4,0x1
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   25070:	4901                	c.li	s2,0
   25072:	c789                	c.beqz	a5,2507c <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x94>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   25074:	8552                	c.mv	a0,s4
   25076:	f3af10ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   2507a:	892a                	c.mv	s2,a0
		      std::__uninitialized_default_n_a(__new_start + __size,
   2507c:	00990533          	add	a0,s2,s1
   25080:	00050023          	sb	zero,0(a0)
      if (__n <= 0)
   25084:	4785                	c.li	a5,1
   25086:	02f41763          	bne	s0,a5,250b4 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xcc>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   2508a:	0009ba83          	ld	s5,0(s3)
      ptrdiff_t __count = __last - __first;
   2508e:	0089b603          	ld	a2,8(s3)
   25092:	41560633          	sub	a2,a2,s5
      if (__count > 0)
   25096:	02c04763          	blt	zero,a2,250c4 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xdc>
	if (__p)
   2509a:	020a8c63          	beq	s5,zero,250d2 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xea>
   2509e:	a03d                	c.j	250cc <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xe4>
	  __throw_length_error(__N(__s));
   250a0:	00009517          	auipc	a0,0x9
   250a4:	c4050513          	addi	a0,a0,-960 # 2dce0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x10>
   250a8:	df8f10ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   250ac:	5a7d                	c.li	s4,-1
   250ae:	001a5a13          	srli	s4,s4,0x1
   250b2:	b7c9                	c.j	25074 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x8c>
      if (const size_t __len = __last - __first)
   250b4:	fff40613          	addi	a2,s0,-1
   250b8:	da69                	c.beqz	a2,2508a <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xa2>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
   250ba:	4581                	c.li	a1,0
   250bc:	0505                	c.addi	a0,1
   250be:	fb2f10ef          	jal	ra,16870 <memset@plt>
   250c2:	b7e1                	c.j	2508a <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xa2>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   250c4:	85d6                	c.mv	a1,s5
   250c6:	854a                	c.mv	a0,s2
   250c8:	959f10ef          	jal	ra,16a20 <memmove@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   250cc:	8556                	c.mv	a0,s5
   250ce:	ed2f10ef          	jal	ra,167a0 <operator delete(void*)@plt>
	      this->_M_impl._M_start = __new_start;
   250d2:	0129b023          	sd	s2,0(s3)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   250d6:	94a2                	c.add	s1,s0
   250d8:	94ca                	c.add	s1,s2
   250da:	0099b423          	sd	s1,8(s3)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   250de:	9952                	c.add	s2,s4
   250e0:	0129b823          	sd	s2,16(s3)
    }
   250e4:	b791                	c.j	25028 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x40>
   250e6:	8082                	c.jr	ra

00000000000250e8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>:
      basic_string<_CharT, _Traits, _Alloc>::
   250e8:	7179                	c.addi16sp	sp,-48
   250ea:	f406                	c.sdsp	ra,40(sp)
   250ec:	f022                	c.sdsp	s0,32(sp)
   250ee:	ec26                	c.sdsp	s1,24(sp)
   250f0:	e84a                	c.sdsp	s2,16(sp)
   250f2:	842a                	c.mv	s0,a0
   250f4:	892e                	c.mv	s2,a1
   250f6:	40b604b3          	sub	s1,a2,a1
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   250fa:	e426                	c.sdsp	s1,8(sp)
	if (__dnew > size_type(_S_local_capacity))
   250fc:	47bd                	c.li	a5,15
   250fe:	0297e663          	bltu	a5,s1,2512a <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x42>
      { return _M_dataplus._M_p; }
   25102:	6108                	c.ld	a0,0(a0)
	if (__n == 1)
   25104:	4785                	c.li	a5,1
   25106:	02f49e63          	bne	s1,a5,25142 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x5a>
	__c1 = __c2;
   2510a:	0005c783          	lbu	a5,0(a1)
   2510e:	00f50023          	sb	a5,0(a0)
	_M_set_length(__dnew);
   25112:	6722                	c.ldsp	a4,8(sp)
      { _M_string_length = __length; }
   25114:	e418                	c.sd	a4,8(s0)
   25116:	601c                	c.ld	a5,0(s0)
   25118:	97ba                	c.add	a5,a4
   2511a:	00078023          	sb	zero,0(a5)
      }
   2511e:	70a2                	c.ldsp	ra,40(sp)
   25120:	7402                	c.ldsp	s0,32(sp)
   25122:	64e2                	c.ldsp	s1,24(sp)
   25124:	6942                	c.ldsp	s2,16(sp)
   25126:	6145                	c.addi16sp	sp,48
   25128:	8082                	c.jr	ra
	    _M_data(_M_create(__dnew, size_type(0)));
   2512a:	4601                	c.li	a2,0
   2512c:	002c                	c.addi4spn	a1,sp,8
   2512e:	883f10ef          	jal	ra,169b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
   25132:	e008                	c.sd	a0,0(s0)
      { _M_allocated_capacity = __capacity; }
   25134:	67a2                	c.ldsp	a5,8(sp)
   25136:	e81c                	c.sd	a5,16(s0)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   25138:	8626                	c.mv	a2,s1
   2513a:	85ca                	c.mv	a1,s2
   2513c:	f04f10ef          	jal	ra,16840 <memcpy@plt>
   25140:	bfc9                	c.j	25112 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x2a>
	if (__n == 0)
   25142:	d8e1                	c.beqz	s1,25112 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x2a>
   25144:	bfd5                	c.j	25138 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x50>

0000000000025146 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
   25146:	1101                	c.addi	sp,-32
   25148:	ec06                	c.sdsp	ra,24(sp)
   2514a:	e822                	c.sdsp	s0,16(sp)
   2514c:	e426                	c.sdsp	s1,8(sp)
   2514e:	e04a                	c.sdsp	s2,0(sp)
   25150:	842a                	c.mv	s0,a0
   25152:	87ae                	c.mv	a5,a1
   25154:	84b2                	c.mv	s1,a2
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   25156:	01050913          	addi	s2,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2515a:	01253023          	sd	s2,0(a0)
      { return _M_dataplus._M_p; }
   2515e:	618c                	c.ld	a1,0(a1)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   25160:	6790                	c.ld	a2,8(a5)
   25162:	4681                	c.li	a3,0
   25164:	962e                	c.add	a2,a1
   25166:	00015317          	auipc	t1,0x15
   2516a:	1c233303          	ld	t1,450(t1) # 3a328 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x15240>
   2516e:	9302                	c.jalr	t1
      { return _M_dataplus._M_p; }
   25170:	608c                	c.ld	a1,0(s1)
      { return _M_string_length; }
   25172:	6490                	c.ld	a2,8(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   25174:	6418                	c.ld	a4,8(s0)
   25176:	57fd                	c.li	a5,-1
   25178:	8389                	c.srli	a5,0x2
   2517a:	8f99                	c.sub	a5,a4
   2517c:	00c7e663          	bltu	a5,a2,25188 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x42>
	return _M_append(__s, __n);
   25180:	8522                	c.mv	a0,s0
   25182:	caef10ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   25186:	a005                	c.j	251a6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x60>
	  __throw_length_error(__N(__s));
   25188:	00009517          	auipc	a0,0x9
   2518c:	14850513          	addi	a0,a0,328 # 2e2d0 <std::piecewise_construct+0x2b0>
   25190:	d10f10ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   25194:	84aa                	c.mv	s1,a0
   25196:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   25198:	01250463          	beq	a0,s2,251a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5a>
   2519c:	e04f10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   251a0:	8526                	c.mv	a0,s1
   251a2:	feef10ef          	jal	ra,16990 <_Unwind_Resume@plt>
    }
   251a6:	8522                	c.mv	a0,s0
   251a8:	60e2                	c.ldsp	ra,24(sp)
   251aa:	6442                	c.ldsp	s0,16(sp)
   251ac:	64a2                	c.ldsp	s1,8(sp)
   251ae:	6902                	c.ldsp	s2,0(sp)
   251b0:	6105                	c.addi16sp	sp,32
   251b2:	8082                	c.jr	ra

00000000000251b4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
      vector<_Tp, _Alloc>::
   251b4:	711d                	c.addi16sp	sp,-96
   251b6:	ec86                	c.sdsp	ra,88(sp)
   251b8:	e8a2                	c.sdsp	s0,80(sp)
   251ba:	e4a6                	c.sdsp	s1,72(sp)
   251bc:	e0ca                	c.sdsp	s2,64(sp)
   251be:	fc4e                	c.sdsp	s3,56(sp)
   251c0:	f852                	c.sdsp	s4,48(sp)
   251c2:	f456                	c.sdsp	s5,40(sp)
   251c4:	f05a                	c.sdsp	s6,32(sp)
   251c6:	ec5e                	c.sdsp	s7,24(sp)
   251c8:	e862                	c.sdsp	s8,16(sp)
   251ca:	e466                	c.sdsp	s9,8(sp)
   251cc:	e06a                	c.sdsp	s10,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   251ce:	00853b83          	ld	s7,8(a0)
   251d2:	00053983          	ld	s3,0(a0)
   251d6:	413b87b3          	sub	a5,s7,s3
   251da:	8795                	c.srai	a5,0x5
	if (max_size() - size() < __n)
   251dc:	577d                	c.li	a4,-1
   251de:	8319                	c.srli	a4,0x6
   251e0:	02e78863          	beq	a5,a4,25210 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5c>
   251e4:	8aaa                	c.mv	s5,a0
   251e6:	892e                	c.mv	s2,a1
   251e8:	8432                	c.mv	s0,a2
   251ea:	8d2e                	c.mv	s10,a1
      return __a;
   251ec:	873e                	c.mv	a4,a5
      if (__a < __b)
   251ee:	033b8763          	beq	s7,s3,2521c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x68>
	const size_type __len = size() + (std::max)(size(), __n);
   251f2:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   251f4:	12f76663          	bltu	a4,a5,25320 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x16c>
   251f8:	8a3a                	c.mv	s4,a4
   251fa:	57fd                	c.li	a5,-1
   251fc:	8399                	c.srli	a5,0x6
   251fe:	00e7f363          	bgeu	a5,a4,25204 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x50>
   25202:	8a3e                	c.mv	s4,a5
   25204:	413904b3          	sub	s1,s2,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   25208:	4b01                	c.li	s6,0
   2520a:	12070563          	beq	a4,zero,25334 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x180>
   2520e:	aa31                	c.j	2532a <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x176>
	  __throw_length_error(__N(__s));
   25210:	00009517          	auipc	a0,0x9
   25214:	84050513          	addi	a0,a0,-1984 # 2da50 <__libc_csu_fini+0x9e>
   25218:	c88f10ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   2521c:	4705                	c.li	a4,1
   2521e:	bfd1                	c.j	251f2 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3e>
      for (; __first != __last; ++__first, (void)++__cur)
   25220:	053d0663          	beq	s10,s3,2526c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb8>
   25224:	01098493          	addi	s1,s3,16
   25228:	41390c33          	sub	s8,s2,s3
   2522c:	9c5a                	c.add	s8,s6
      _ForwardIterator __cur = __result;
   2522e:	845a                	c.mv	s0,s6
   25230:	a831                	c.j	2524c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   25232:	ff84b603          	ld	a2,-8(s1)
   25236:	0605                	c.addi	a2,1
   25238:	e615                	c.bnez	a2,25264 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb0>
      { _M_string_length = __length; }
   2523a:	ff8cb783          	ld	a5,-8(s9)
   2523e:	e41c                	c.sd	a5,8(s0)
      for (; __first != __last; ++__first, (void)++__cur)
   25240:	02040413          	addi	s0,s0,32
   25244:	02048493          	addi	s1,s1,32
   25248:	03840363          	beq	s0,s8,2526e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xba>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2524c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   25250:	e008                	c.sd	a0,0(s0)
      _M_data() const
   25252:	8ca6                	c.mv	s9,s1
      { return _M_dataplus._M_p; }
   25254:	ff04b783          	ld	a5,-16(s1)
	if (__str._M_is_local())
   25258:	fc978de3          	beq	a5,s1,25232 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7e>
      { _M_dataplus._M_p = __p; }
   2525c:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2525e:	609c                	c.ld	a5,0(s1)
   25260:	e81c                	c.sd	a5,16(s0)
   25262:	bfe1                	c.j	2523a <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x86>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   25264:	85a6                	c.mv	a1,s1
   25266:	ddaf10ef          	jal	ra,16840 <memcpy@plt>
   2526a:	bfc1                	c.j	2523a <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x86>
      _ForwardIterator __cur = __result;
   2526c:	8c5a                	c.mv	s8,s6
	      ++__new_finish;
   2526e:	020c0c13          	addi	s8,s8,32
      for (; __first != __last; ++__first, (void)++__cur)
   25272:	057d0763          	beq	s10,s7,252c0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10c>
   25276:	01090413          	addi	s0,s2,16
   2527a:	010b8d13          	addi	s10,s7,16
      _ForwardIterator __cur = __result;
   2527e:	84e2                	c.mv	s1,s8
   25280:	a831                	c.j	2529c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe8>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   25282:	ff85b603          	ld	a2,-8(a1)
   25286:	0605                	c.addi	a2,1
	if (__n == 0)
   25288:	e615                	c.bnez	a2,252b4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x100>
      { _M_string_length = __length; }
   2528a:	ff8cb783          	ld	a5,-8(s9)
   2528e:	e49c                	c.sd	a5,8(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   25290:	02048493          	addi	s1,s1,32
   25294:	02040413          	addi	s0,s0,32
   25298:	028d0163          	beq	s10,s0,252ba <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x106>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2529c:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   252a0:	e088                	c.sd	a0,0(s1)
      _M_data() const
   252a2:	8ca2                	c.mv	s9,s0
      { return _M_dataplus._M_p; }
   252a4:	ff043583          	ld	a1,-16(s0)
	if (__str._M_is_local())
   252a8:	fcb40de3          	beq	s0,a1,25282 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xce>
      { _M_dataplus._M_p = __p; }
   252ac:	e08c                	c.sd	a1,0(s1)
      { _M_allocated_capacity = __capacity; }
   252ae:	601c                	c.ld	a5,0(s0)
   252b0:	e89c                	c.sd	a5,16(s1)
   252b2:	bfe1                	c.j	2528a <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd6>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   252b4:	d8cf10ef          	jal	ra,16840 <memcpy@plt>
   252b8:	bfc9                	c.j	2528a <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd6>
   252ba:	412b8933          	sub	s2,s7,s2
   252be:	9c4a                	c.add	s8,s2
	if (__p)
   252c0:	00098563          	beq	s3,zero,252ca <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x116>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   252c4:	854e                	c.mv	a0,s3
   252c6:	cdaf10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   252ca:	016ab023          	sd	s6,0(s5)
      this->_M_impl._M_finish = __new_finish;
   252ce:	018ab423          	sd	s8,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   252d2:	0a16                	c.slli	s4,0x5
   252d4:	9a5a                	c.add	s4,s6
   252d6:	014ab823          	sd	s4,16(s5)
    }
   252da:	60e6                	c.ldsp	ra,88(sp)
   252dc:	6446                	c.ldsp	s0,80(sp)
   252de:	64a6                	c.ldsp	s1,72(sp)
   252e0:	6906                	c.ldsp	s2,64(sp)
   252e2:	79e2                	c.ldsp	s3,56(sp)
   252e4:	7a42                	c.ldsp	s4,48(sp)
   252e6:	7aa2                	c.ldsp	s5,40(sp)
   252e8:	7b02                	c.ldsp	s6,32(sp)
   252ea:	6be2                	c.ldsp	s7,24(sp)
   252ec:	6c42                	c.ldsp	s8,16(sp)
   252ee:	6ca2                	c.ldsp	s9,8(sp)
   252f0:	6d02                	c.ldsp	s10,0(sp)
   252f2:	6125                	c.addi16sp	sp,96
   252f4:	8082                	c.jr	ra
      __catch(...)
   252f6:	b7af10ef          	jal	ra,16670 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   252fa:	000b1f63          	bne	s6,zero,25318 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x164>
      { return _M_dataplus._M_p; }
   252fe:	6088                	c.ld	a0,0(s1)
	if (!_M_is_local())
   25300:	01850463          	beq	a0,s8,25308 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x154>
   25304:	c9cf10ef          	jal	ra,167a0 <operator delete(void*)@plt>
	  __throw_exception_again;
   25308:	db8f10ef          	jal	ra,168c0 <__cxa_rethrow@plt>
      __catch(...)
   2530c:	842a                	c.mv	s0,a0
   2530e:	e22f10ef          	jal	ra,16930 <__cxa_end_catch@plt>
   25312:	8522                	c.mv	a0,s0
   25314:	e7cf10ef          	jal	ra,16990 <_Unwind_Resume@plt>
   25318:	855a                	c.mv	a0,s6
   2531a:	c86f10ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2531e:	b7ed                	c.j	25308 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x154>
   25320:	413904b3          	sub	s1,s2,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   25324:	5a7d                	c.li	s4,-1
   25326:	006a5a13          	srli	s4,s4,0x6
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2532a:	005a1513          	slli	a0,s4,0x5
   2532e:	c82f10ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   25332:	8b2a                	c.mv	s6,a0
	  _Alloc_traits::construct(this->_M_impl,
   25334:	94da                	c.add	s1,s6
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   25336:	01048c13          	addi	s8,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2533a:	0184b023          	sd	s8,0(s1)
      { return _M_dataplus._M_p; }
   2533e:	600c                	c.ld	a1,0(s0)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   25340:	6410                	c.ld	a2,8(s0)
   25342:	4681                	c.li	a3,0
   25344:	962e                	c.add	a2,a1
   25346:	8526                	c.mv	a0,s1
   25348:	00015317          	auipc	t1,0x15
   2534c:	fe033303          	ld	t1,-32(t1) # 3a328 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x15240>
   25350:	9302                	c.jalr	t1
      }
   25352:	b5f9                	c.j	25220 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6c>

0000000000025354 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   25354:	711d                	c.addi16sp	sp,-96
   25356:	ec86                	c.sdsp	ra,88(sp)
   25358:	e8a2                	c.sdsp	s0,80(sp)
   2535a:	e4a6                	c.sdsp	s1,72(sp)
   2535c:	e0ca                	c.sdsp	s2,64(sp)
   2535e:	fc4e                	c.sdsp	s3,56(sp)
   25360:	f852                	c.sdsp	s4,48(sp)
   25362:	f456                	c.sdsp	s5,40(sp)
   25364:	f05a                	c.sdsp	s6,32(sp)
   25366:	ec5e                	c.sdsp	s7,24(sp)
   25368:	e862                	c.sdsp	s8,16(sp)
   2536a:	e466                	c.sdsp	s9,8(sp)
   2536c:	e06a                	c.sdsp	s10,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2536e:	00853b83          	ld	s7,8(a0)
   25372:	00053a03          	ld	s4,0(a0)
   25376:	414b87b3          	sub	a5,s7,s4
   2537a:	8795                	c.srai	a5,0x5
	if (max_size() - size() < __n)
   2537c:	577d                	c.li	a4,-1
   2537e:	8319                	c.srli	a4,0x6
   25380:	02e78863          	beq	a5,a4,253b0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x5c>
   25384:	8aaa                	c.mv	s5,a0
   25386:	892e                	c.mv	s2,a1
   25388:	8432                	c.mv	s0,a2
   2538a:	8d2e                	c.mv	s10,a1
      return __a;
   2538c:	873e                	c.mv	a4,a5
      if (__a < __b)
   2538e:	034b8763          	beq	s7,s4,253bc <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x68>
	const size_type __len = size() + (std::max)(size(), __n);
   25392:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   25394:	10f76063          	bltu	a4,a5,25494 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x140>
   25398:	8b3a                	c.mv	s6,a4
   2539a:	57fd                	c.li	a5,-1
   2539c:	8399                	c.srli	a5,0x6
   2539e:	00e7f363          	bgeu	a5,a4,253a4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x50>
   253a2:	8b3e                	c.mv	s6,a5
   253a4:	414904b3          	sub	s1,s2,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   253a8:	4981                	c.li	s3,0
   253aa:	0e070f63          	beq	a4,zero,254a8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x154>
   253ae:	a8c5                	c.j	2549e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x14a>
	  __throw_length_error(__N(__s));
   253b0:	00008517          	auipc	a0,0x8
   253b4:	6a050513          	addi	a0,a0,1696 # 2da50 <__libc_csu_fini+0x9e>
   253b8:	ae8f10ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   253bc:	4705                	c.li	a4,1
   253be:	bfd1                	c.j	25392 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x3e>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   253c0:	6410                	c.ld	a2,8(s0)
   253c2:	0605                	c.addi	a2,1
	if (__n == 0)
   253c4:	0e060e63          	beq	a2,zero,254c0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x16c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   253c8:	85e2                	c.mv	a1,s8
   253ca:	c76f10ef          	jal	ra,16840 <memcpy@plt>
   253ce:	a8cd                	c.j	254c0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x16c>
   253d0:	ff85b603          	ld	a2,-8(a1)
   253d4:	0605                	c.addi	a2,1
	if (__n == 0)
   253d6:	e615                	c.bnez	a2,25402 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xae>
      { _M_string_length = __length; }
   253d8:	ff8c3783          	ld	a5,-8(s8)
   253dc:	e41c                	c.sd	a5,8(s0)
   253de:	02040413          	addi	s0,s0,32
   253e2:	02048493          	addi	s1,s1,32
   253e6:	03940263          	beq	s0,s9,2540a <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xb6>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   253ea:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   253ee:	e008                	c.sd	a0,0(s0)
      _M_data() const
   253f0:	8c26                	c.mv	s8,s1
      { return _M_dataplus._M_p; }
   253f2:	ff04b583          	ld	a1,-16(s1)
	if (__str._M_is_local())
   253f6:	fcb48de3          	beq	s1,a1,253d0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x7c>
      { _M_dataplus._M_p = __p; }
   253fa:	e00c                	c.sd	a1,0(s0)
      { _M_allocated_capacity = __capacity; }
   253fc:	609c                	c.ld	a5,0(s1)
   253fe:	e81c                	c.sd	a5,16(s0)
   25400:	bfe1                	c.j	253d8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x84>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   25402:	c3ef10ef          	jal	ra,16840 <memcpy@plt>
   25406:	bfc9                	c.j	253d8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x84>
      _ForwardIterator __cur = __result;
   25408:	8cce                	c.mv	s9,s3
	      ++__new_finish;
   2540a:	020c8c93          	addi	s9,s9,32
      for (; __first != __last; ++__first, (void)++__cur)
   2540e:	057d0863          	beq	s10,s7,2545e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x10a>
   25412:	01090413          	addi	s0,s2,16
   25416:	010b8d13          	addi	s10,s7,16
      _ForwardIterator __cur = __result;
   2541a:	84e6                	c.mv	s1,s9
   2541c:	a831                	c.j	25438 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xe4>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2541e:	ff843603          	ld	a2,-8(s0)
   25422:	0605                	c.addi	a2,1
	if (__n == 0)
   25424:	e615                	c.bnez	a2,25450 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xfc>
      { _M_string_length = __length; }
   25426:	ff8c3783          	ld	a5,-8(s8)
   2542a:	e49c                	c.sd	a5,8(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   2542c:	02048493          	addi	s1,s1,32
   25430:	02040413          	addi	s0,s0,32
   25434:	03a40263          	beq	s0,s10,25458 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x104>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   25438:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2543c:	e088                	c.sd	a0,0(s1)
      _M_data() const
   2543e:	8c22                	c.mv	s8,s0
      { return _M_dataplus._M_p; }
   25440:	ff043783          	ld	a5,-16(s0)
	if (__str._M_is_local())
   25444:	fc878de3          	beq	a5,s0,2541e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xca>
      { _M_dataplus._M_p = __p; }
   25448:	e09c                	c.sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   2544a:	601c                	c.ld	a5,0(s0)
   2544c:	e89c                	c.sd	a5,16(s1)
   2544e:	bfe1                	c.j	25426 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xd2>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   25450:	85a2                	c.mv	a1,s0
   25452:	beef10ef          	jal	ra,16840 <memcpy@plt>
   25456:	bfc1                	c.j	25426 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xd2>
   25458:	412b8933          	sub	s2,s7,s2
   2545c:	9cca                	c.add	s9,s2
	if (__p)
   2545e:	000a0563          	beq	s4,zero,25468 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x114>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   25462:	8552                	c.mv	a0,s4
   25464:	b3cf10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   25468:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   2546c:	019ab423          	sd	s9,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   25470:	0b16                	c.slli	s6,0x5
   25472:	99da                	c.add	s3,s6
   25474:	013ab823          	sd	s3,16(s5)
    }
   25478:	60e6                	c.ldsp	ra,88(sp)
   2547a:	6446                	c.ldsp	s0,80(sp)
   2547c:	64a6                	c.ldsp	s1,72(sp)
   2547e:	6906                	c.ldsp	s2,64(sp)
   25480:	79e2                	c.ldsp	s3,56(sp)
   25482:	7a42                	c.ldsp	s4,48(sp)
   25484:	7aa2                	c.ldsp	s5,40(sp)
   25486:	7b02                	c.ldsp	s6,32(sp)
   25488:	6be2                	c.ldsp	s7,24(sp)
   2548a:	6c42                	c.ldsp	s8,16(sp)
   2548c:	6ca2                	c.ldsp	s9,8(sp)
   2548e:	6d02                	c.ldsp	s10,0(sp)
   25490:	6125                	c.addi16sp	sp,96
   25492:	8082                	c.jr	ra
   25494:	414904b3          	sub	s1,s2,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   25498:	5b7d                	c.li	s6,-1
   2549a:	006b5b13          	srli	s6,s6,0x6
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2549e:	005b1513          	slli	a0,s6,0x5
   254a2:	b0ef10ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   254a6:	89aa                	c.mv	s3,a0
	  _Alloc_traits::construct(this->_M_impl,
   254a8:	94ce                	c.add	s1,s3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   254aa:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   254ae:	e088                	c.sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   254b0:	601c                	c.ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   254b2:	01040c13          	addi	s8,s0,16
	if (__str._M_is_local())
   254b6:	f18785e3          	beq	a5,s8,253c0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6c>
      { _M_dataplus._M_p = __p; }
   254ba:	e09c                	c.sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   254bc:	681c                	c.ld	a5,16(s0)
   254be:	e89c                	c.sd	a5,16(s1)
      { _M_string_length = __length; }
   254c0:	641c                	c.ld	a5,8(s0)
   254c2:	e49c                	c.sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   254c4:	01843023          	sd	s8,0(s0)
      { _M_string_length = __length; }
   254c8:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   254cc:	00040823          	sb	zero,16(s0)
   254d0:	f34d0ce3          	beq	s10,s4,25408 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xb4>
   254d4:	010a0493          	addi	s1,s4,16
   254d8:	41490cb3          	sub	s9,s2,s4
   254dc:	9cce                	c.add	s9,s3
      _ForwardIterator __cur = __result;
   254de:	844e                	c.mv	s0,s3
   254e0:	b729                	c.j	253ea <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x96>

00000000000254e2 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   254e2:	7179                	c.addi16sp	sp,-48
   254e4:	f406                	c.sdsp	ra,40(sp)
   254e6:	f022                	c.sdsp	s0,32(sp)
   254e8:	ec26                	c.sdsp	s1,24(sp)
   254ea:	e84a                	c.sdsp	s2,16(sp)
   254ec:	e44e                	c.sdsp	s3,8(sp)
   254ee:	84aa                	c.mv	s1,a0
   254f0:	842e                	c.mv	s0,a1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   254f2:	00853903          	ld	s2,8(a0)
   254f6:	691c                	c.ld	a5,16(a0)
   254f8:	04f90b63          	beq	s2,a5,2554e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   254fc:	01090513          	addi	a0,s2,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   25500:	00a93023          	sd	a0,0(s2)
      { return _M_dataplus._M_p; }
   25504:	619c                	c.ld	a5,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   25506:	01058993          	addi	s3,a1,16
	if (__str._M_is_local())
   2550a:	03378b63          	beq	a5,s3,25540 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x5e>
      { _M_dataplus._M_p = __p; }
   2550e:	00f93023          	sd	a5,0(s2)
      { _M_allocated_capacity = __capacity; }
   25512:	699c                	c.ld	a5,16(a1)
   25514:	00f93823          	sd	a5,16(s2)
      { _M_string_length = __length; }
   25518:	641c                	c.ld	a5,8(s0)
   2551a:	00f93423          	sd	a5,8(s2)
      { _M_dataplus._M_p = __p; }
   2551e:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   25522:	00043423          	sd	zero,8(s0)
   25526:	00040823          	sb	zero,16(s0)
	    ++this->_M_impl._M_finish;
   2552a:	649c                	c.ld	a5,8(s1)
   2552c:	02078793          	addi	a5,a5,32
   25530:	e49c                	c.sd	a5,8(s1)
      }
   25532:	70a2                	c.ldsp	ra,40(sp)
   25534:	7402                	c.ldsp	s0,32(sp)
   25536:	64e2                	c.ldsp	s1,24(sp)
   25538:	6942                	c.ldsp	s2,16(sp)
   2553a:	69a2                	c.ldsp	s3,8(sp)
   2553c:	6145                	c.addi16sp	sp,48
   2553e:	8082                	c.jr	ra
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   25540:	6590                	c.ld	a2,8(a1)
   25542:	0605                	c.addi	a2,1
	if (__n == 0)
   25544:	da71                	c.beqz	a2,25518 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x36>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   25546:	85ce                	c.mv	a1,s3
   25548:	af8f10ef          	jal	ra,16840 <memcpy@plt>
   2554c:	b7f1                	c.j	25518 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x36>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2554e:	862e                	c.mv	a2,a1
   25550:	85ca                	c.mv	a1,s2
   25552:	00015317          	auipc	t1,0x15
   25556:	fc633303          	ld	t1,-58(t1) # 3a518 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x151c4>
   2555a:	9302                	c.jalr	t1
      }
   2555c:	bfd9                	c.j	25532 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x50>

000000000002555e <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   2555e:	1101                	c.addi	sp,-32
   25560:	ec06                	c.sdsp	ra,24(sp)
   25562:	e822                	c.sdsp	s0,16(sp)
   25564:	e426                	c.sdsp	s1,8(sp)
   25566:	842a                	c.mv	s0,a0
   25568:	84ae                	c.mv	s1,a1
	  for (; __first != __last; ++__first)
   2556a:	00b51b63          	bne	a0,a1,25580 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x22>
	    std::_Destroy(std::__addressof(*__first));
	}
   2556e:	60e2                	c.ldsp	ra,24(sp)
   25570:	6442                	c.ldsp	s0,16(sp)
   25572:	64a2                	c.ldsp	s1,8(sp)
   25574:	6105                	c.addi16sp	sp,32
   25576:	8082                	c.jr	ra
	  for (; __first != __last; ++__first)
   25578:	03040413          	addi	s0,s0,48
   2557c:	fe8489e3          	beq	s1,s0,2556e <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x10>
      { return _M_dataplus._M_p; }
   25580:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   25582:	01040793          	addi	a5,s0,16
   25586:	fef509e3          	beq	a0,a5,25578 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x1a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2558a:	a16f10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2558e:	b7ed                	c.j	25578 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x1a>

0000000000025590 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
      vector<_Tp, _Alloc>::
   25590:	7119                	c.addi16sp	sp,-128
   25592:	fc86                	c.sdsp	ra,120(sp)
   25594:	f8a2                	c.sdsp	s0,112(sp)
   25596:	f4a6                	c.sdsp	s1,104(sp)
   25598:	f0ca                	c.sdsp	s2,96(sp)
   2559a:	ecce                	c.sdsp	s3,88(sp)
   2559c:	e8d2                	c.sdsp	s4,80(sp)
   2559e:	e4d6                	c.sdsp	s5,72(sp)
   255a0:	e0da                	c.sdsp	s6,64(sp)
   255a2:	fc5e                	c.sdsp	s7,56(sp)
   255a4:	f862                	c.sdsp	s8,48(sp)
   255a6:	f466                	c.sdsp	s9,40(sp)
   255a8:	f06a                	c.sdsp	s10,32(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   255aa:	00853a83          	ld	s5,8(a0)
   255ae:	00053b03          	ld	s6,0(a0)
   255b2:	416a87b3          	sub	a5,s5,s6
   255b6:	8791                	c.srai	a5,0x4
   255b8:	00009717          	auipc	a4,0x9
   255bc:	a5873703          	ld	a4,-1448(a4) # 2e010 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   255c0:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   255c4:	0000a717          	auipc	a4,0xa
   255c8:	acc73703          	ld	a4,-1332(a4) # 2f090 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   255cc:	02e78a63          	beq	a5,a4,25600 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x70>
   255d0:	8baa                	c.mv	s7,a0
   255d2:	8a2e                	c.mv	s4,a1
   255d4:	8432                	c.mv	s0,a2
   255d6:	8d2e                	c.mv	s10,a1
      return __a;
   255d8:	873e                	c.mv	a4,a5
      if (__a < __b)
   255da:	036a8963          	beq	s5,s6,2560c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7c>
	const size_type __len = size() + (std::max)(size(), __n);
   255de:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   255e0:	1af76a63          	bltu	a4,a5,25794 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x204>
   255e4:	8cba                	c.mv	s9,a4
   255e6:	0000a797          	auipc	a5,0xa
   255ea:	aaa7b783          	ld	a5,-1366(a5) # 2f090 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   255ee:	00e7f363          	bgeu	a5,a4,255f4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x64>
   255f2:	8cbe                	c.mv	s9,a5
   255f4:	416a04b3          	sub	s1,s4,s6
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   255f8:	4c01                	c.li	s8,0
   255fa:	1a070a63          	beq	a4,zero,257ae <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x21e>
   255fe:	a24d                	c.j	257a0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x210>
	  __throw_length_error(__N(__s));
   25600:	00008517          	auipc	a0,0x8
   25604:	45050513          	addi	a0,a0,1104 # 2da50 <__libc_csu_fini+0x9e>
   25608:	898f10ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   2560c:	4705                	c.li	a4,1
   2560e:	bfc1                	c.j	255de <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   25610:	4681                	c.li	a3,0
   25612:	4601                	c.li	a2,0
   25614:	858a                	c.mv	a1,sp
   25616:	8526                	c.mv	a0,s1
   25618:	f5cfd0ef          	jal	ra,22d74 <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
      { return _M_dataplus._M_p; }
   2561c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2561e:	081c                	c.addi4spn	a5,sp,16
   25620:	00f50463          	beq	a0,a5,25628 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x98>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   25624:	97cf10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   25628:	010b0913          	addi	s2,s6,16
   2562c:	845a                	c.mv	s0,s6
      _ForwardIterator __cur = __result;
   2562e:	84e2                	c.mv	s1,s8
      for (; __first != __last; ++__first, (void)++__cur)
   25630:	076d1663          	bne	s10,s6,2569c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10c>
	      ++__new_finish;
   25634:	03048493          	addi	s1,s1,48
   25638:	115d0463          	beq	s10,s5,25740 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1b0>
   2563c:	010a0993          	addi	s3,s4,16
   25640:	8952                	c.mv	s2,s4
      _ForwardIterator __cur = __result;
   25642:	8426                	c.mv	s0,s1
   25644:	a85d                	c.j	256fa <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x16a>
      { return _M_dataplus._M_p; }
   25646:	842a                	c.mv	s0,a0
   25648:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2564a:	081c                	c.addi4spn	a5,sp,16
   2564c:	00f50463          	beq	a0,a5,25654 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc4>
   25650:	950f10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   25654:	8522                	c.mv	a0,s0
      __catch(...)
   25656:	81af10ef          	jal	ra,16670 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   2565a:	120c1263          	bne	s8,zero,2577e <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1ee>
      { return _M_dataplus._M_p; }
   2565e:	6088                	c.ld	a0,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   25660:	04c1                	c.addi	s1,16
	if (!_M_is_local())
   25662:	00950463          	beq	a0,s1,2566a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xda>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   25666:	93af10ef          	jal	ra,167a0 <operator delete(void*)@plt>
	  __throw_exception_again;
   2566a:	a56f10ef          	jal	ra,168c0 <__cxa_rethrow@plt>
      __catch(...)
   2566e:	842a                	c.mv	s0,a0
   25670:	ac0f10ef          	jal	ra,16930 <__cxa_end_catch@plt>
   25674:	8522                	c.mv	a0,s0
   25676:	b1af10ef          	jal	ra,16990 <_Unwind_Resume@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2567a:	6410                	c.ld	a2,8(s0)
   2567c:	0605                	c.addi	a2,1
	if (__n == 0)
   2567e:	ca0d                	c.beqz	a2,256b0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x120>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   25680:	85ca                	c.mv	a1,s2
   25682:	9bef10ef          	jal	ra,16840 <memcpy@plt>
   25686:	a02d                	c.j	256b0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x120>
   25688:	918f10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   2568c:	03040413          	addi	s0,s0,48
   25690:	03048493          	addi	s1,s1,48
   25694:	03090913          	addi	s2,s2,48
   25698:	f9a40ee3          	beq	s0,s10,25634 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa4>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2569c:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   256a0:	e088                	c.sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   256a2:	601c                	c.ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   256a4:	89ca                	c.mv	s3,s2
	if (__str._M_is_local())
   256a6:	fd278ae3          	beq	a5,s2,2567a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xea>
      { _M_dataplus._M_p = __p; }
   256aa:	e09c                	c.sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   256ac:	681c                	c.ld	a5,16(s0)
   256ae:	e89c                	c.sd	a5,16(s1)
      { _M_string_length = __length; }
   256b0:	641c                	c.ld	a5,8(s0)
   256b2:	e49c                	c.sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   256b4:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   256b8:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   256bc:	00040823          	sb	zero,16(s0)
class line_table::file {
   256c0:	701c                	c.ld	a5,32(s0)
   256c2:	f09c                	c.sd	a5,32(s1)
   256c4:	741c                	c.ld	a5,40(s0)
   256c6:	f49c                	c.sd	a5,40(s1)
      { return _M_dataplus._M_p; }
   256c8:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   256ca:	fb351fe3          	bne	a0,s3,25688 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf8>
   256ce:	bf7d                	c.j	2568c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xfc>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   256d0:	00893603          	ld	a2,8(s2)
   256d4:	0605                	c.addi	a2,1
	if (__n == 0)
   256d6:	ee1d                	c.bnez	a2,25714 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x184>
      { _M_string_length = __length; }
   256d8:	00893783          	ld	a5,8(s2)
   256dc:	e41c                	c.sd	a5,8(s0)
   256de:	02093783          	ld	a5,32(s2)
   256e2:	f01c                	c.sd	a5,32(s0)
   256e4:	02893783          	ld	a5,40(s2)
   256e8:	f41c                	c.sd	a5,40(s0)
   256ea:	03090913          	addi	s2,s2,48
   256ee:	03040413          	addi	s0,s0,48
   256f2:	03098993          	addi	s3,s3,48
   256f6:	03590263          	beq	s2,s5,2571a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x18a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   256fa:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   256fe:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   25700:	00093783          	ld	a5,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   25704:	85ce                	c.mv	a1,s3
	if (__str._M_is_local())
   25706:	fd3785e3          	beq	a5,s3,256d0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x140>
      { _M_dataplus._M_p = __p; }
   2570a:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2570c:	01093783          	ld	a5,16(s2)
   25710:	e81c                	c.sd	a5,16(s0)
   25712:	b7d9                	c.j	256d8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x148>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   25714:	92cf10ef          	jal	ra,16840 <memcpy@plt>
   25718:	b7c1                	c.j	256d8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x148>
   2571a:	414a87b3          	sub	a5,s5,s4
   2571e:	fd078793          	addi	a5,a5,-48
   25722:	8391                	c.srli	a5,0x4
   25724:	0000a717          	auipc	a4,0xa
   25728:	97473703          	ld	a4,-1676(a4) # 2f098 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68>
   2572c:	02e787b3          	mul	a5,a5,a4
   25730:	0792                	c.slli	a5,0x4
   25732:	8391                	c.srli	a5,0x4
   25734:	0785                	c.addi	a5,1
   25736:	00179713          	slli	a4,a5,0x1
   2573a:	97ba                	c.add	a5,a4
   2573c:	0792                	c.slli	a5,0x4
   2573e:	94be                	c.add	s1,a5
	if (__p)
   25740:	000b0563          	beq	s6,zero,2574a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1ba>
   25744:	855a                	c.mv	a0,s6
   25746:	85af10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2574a:	018bb023          	sd	s8,0(s7)
      this->_M_impl._M_finish = __new_finish;
   2574e:	009bb423          	sd	s1,8(s7)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   25752:	001c9793          	slli	a5,s9,0x1
   25756:	97e6                	c.add	a5,s9
   25758:	0792                	c.slli	a5,0x4
   2575a:	97e2                	c.add	a5,s8
   2575c:	00fbb823          	sd	a5,16(s7)
    }
   25760:	70e6                	c.ldsp	ra,120(sp)
   25762:	7446                	c.ldsp	s0,112(sp)
   25764:	74a6                	c.ldsp	s1,104(sp)
   25766:	7906                	c.ldsp	s2,96(sp)
   25768:	69e6                	c.ldsp	s3,88(sp)
   2576a:	6a46                	c.ldsp	s4,80(sp)
   2576c:	6aa6                	c.ldsp	s5,72(sp)
   2576e:	6b06                	c.ldsp	s6,64(sp)
   25770:	7be2                	c.ldsp	s7,56(sp)
   25772:	7c42                	c.ldsp	s8,48(sp)
   25774:	7ca2                	c.ldsp	s9,40(sp)
   25776:	7d02                	c.ldsp	s10,32(sp)
   25778:	6109                	c.addi16sp	sp,128
   2577a:	8082                	c.jr	ra
   2577c:	bde9                	c.j	25656 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc6>
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   2577e:	85e2                	c.mv	a1,s8
   25780:	8562                	c.mv	a0,s8
   25782:	00015317          	auipc	t1,0x15
   25786:	b5633303          	ld	t1,-1194(t1) # 3a2d8 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)@@Base+0x14d7a>
   2578a:	9302                	c.jalr	t1
   2578c:	8562                	c.mv	a0,s8
   2578e:	812f10ef          	jal	ra,167a0 <operator delete(void*)@plt>
   25792:	bde1                	c.j	2566a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xda>
   25794:	416a04b3          	sub	s1,s4,s6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   25798:	0000ac97          	auipc	s9,0xa
   2579c:	8f8cbc83          	ld	s9,-1800(s9) # 2f090 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   257a0:	001c9513          	slli	a0,s9,0x1
   257a4:	9566                	c.add	a0,s9
   257a6:	0512                	c.slli	a0,0x4
   257a8:	808f10ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   257ac:	8c2a                	c.mv	s8,a0
	  _Alloc_traits::construct(this->_M_impl,
   257ae:	94e2                	c.add	s1,s8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   257b0:	081c                	c.addi4spn	a5,sp,16
   257b2:	e03e                	c.sdsp	a5,0(sp)
      { return _M_dataplus._M_p; }
   257b4:	600c                	c.ld	a1,0(s0)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   257b6:	6410                	c.ld	a2,8(s0)
   257b8:	4681                	c.li	a3,0
   257ba:	962e                	c.add	a2,a1
   257bc:	850a                	c.mv	a0,sp
   257be:	00015317          	auipc	t1,0x15
   257c2:	b6a33303          	ld	t1,-1174(t1) # 3a328 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x15240>
   257c6:	9302                	c.jalr	t1
      }
   257c8:	b5a1                	c.j	25610 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x80>

00000000000257ca <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   257ca:	7119                	c.addi16sp	sp,-128
   257cc:	fc86                	c.sdsp	ra,120(sp)
   257ce:	f8a2                	c.sdsp	s0,112(sp)
   257d0:	f4a6                	c.sdsp	s1,104(sp)
   257d2:	f0ca                	c.sdsp	s2,96(sp)
   257d4:	ecce                	c.sdsp	s3,88(sp)
   257d6:	e8d2                	c.sdsp	s4,80(sp)
   257d8:	e4d6                	c.sdsp	s5,72(sp)
   257da:	e0da                	c.sdsp	s6,64(sp)
   257dc:	fc5e                	c.sdsp	s7,56(sp)
   257de:	f862                	c.sdsp	s8,48(sp)
   257e0:	f466                	c.sdsp	s9,40(sp)
   257e2:	f06a                	c.sdsp	s10,32(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   257e4:	00853a83          	ld	s5,8(a0)
   257e8:	00053b03          	ld	s6,0(a0)
   257ec:	416a87b3          	sub	a5,s5,s6
   257f0:	8791                	c.srai	a5,0x4
   257f2:	00009717          	auipc	a4,0x9
   257f6:	81e73703          	ld	a4,-2018(a4) # 2e010 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   257fa:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   257fe:	0000a717          	auipc	a4,0xa
   25802:	89273703          	ld	a4,-1902(a4) # 2f090 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   25806:	02e78a63          	beq	a5,a4,2583a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x70>
   2580a:	8baa                	c.mv	s7,a0
   2580c:	8a2e                	c.mv	s4,a1
   2580e:	8432                	c.mv	s0,a2
   25810:	8d2e                	c.mv	s10,a1
      return __a;
   25812:	873e                	c.mv	a4,a5
      if (__a < __b)
   25814:	036a8963          	beq	s5,s6,25846 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x7c>
	const size_type __len = size() + (std::max)(size(), __n);
   25818:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2581a:	1af76e63          	bltu	a4,a5,259d6 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x20c>
   2581e:	8cba                	c.mv	s9,a4
   25820:	0000a797          	auipc	a5,0xa
   25824:	8707b783          	ld	a5,-1936(a5) # 2f090 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   25828:	00e7f363          	bgeu	a5,a4,2582e <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x64>
   2582c:	8cbe                	c.mv	s9,a5
   2582e:	416a0933          	sub	s2,s4,s6
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   25832:	4c01                	c.li	s8,0
   25834:	1a070e63          	beq	a4,zero,259f0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x226>
   25838:	a26d                	c.j	259e2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x218>
	  __throw_length_error(__N(__s));
   2583a:	00008517          	auipc	a0,0x8
   2583e:	21650513          	addi	a0,a0,534 # 2da50 <__libc_csu_fini+0x9e>
   25842:	e5ff00ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   25846:	4705                	c.li	a4,1
   25848:	bfc1                	c.j	25818 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4e>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2584a:	6410                	c.ld	a2,8(s0)
   2584c:	0605                	c.addi	a2,1
	if (__n == 0)
   2584e:	1a060c63          	beq	a2,zero,25a06 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x23c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   25852:	85a6                	c.mv	a1,s1
   25854:	0808                	c.addi4spn	a0,sp,16
   25856:	febf00ef          	jal	ra,16840 <memcpy@plt>
   2585a:	a275                	c.j	25a06 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x23c>
      { return _M_dataplus._M_p; }
   2585c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2585e:	081c                	c.addi4spn	a5,sp,16
   25860:	00f50463          	beq	a0,a5,25868 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x9e>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   25864:	f3df00ef          	jal	ra,167a0 <operator delete(void*)@plt>
   25868:	010b0913          	addi	s2,s6,16
   2586c:	845a                	c.mv	s0,s6
      _ForwardIterator __cur = __result;
   2586e:	84e2                	c.mv	s1,s8
      for (; __first != __last; ++__first, (void)++__cur)
   25870:	076d1863          	bne	s10,s6,258e0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x116>
	      ++__new_finish;
   25874:	03048493          	addi	s1,s1,48
   25878:	115d0663          	beq	s10,s5,25984 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1ba>
   2587c:	010a0993          	addi	s3,s4,16
   25880:	8952                	c.mv	s2,s4
      _ForwardIterator __cur = __result;
   25882:	8426                	c.mv	s0,s1
   25884:	a86d                	c.j	2593e <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x174>
      { return _M_dataplus._M_p; }
   25886:	842a                	c.mv	s0,a0
   25888:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2588a:	081c                	c.addi4spn	a5,sp,16
   2588c:	00f50463          	beq	a0,a5,25894 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xca>
   25890:	f11f00ef          	jal	ra,167a0 <operator delete(void*)@plt>
      __catch(...)
   25894:	8522                	c.mv	a0,s0
   25896:	ddbf00ef          	jal	ra,16670 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   2589a:	120c1363          	bne	s8,zero,259c0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1f6>
      { return _M_dataplus._M_p; }
   2589e:	00093503          	ld	a0,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   258a2:	01090493          	addi	s1,s2,16
	if (!_M_is_local())
   258a6:	00950463          	beq	a0,s1,258ae <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xe4>
   258aa:	ef7f00ef          	jal	ra,167a0 <operator delete(void*)@plt>
	  __throw_exception_again;
   258ae:	812f10ef          	jal	ra,168c0 <__cxa_rethrow@plt>
      __catch(...)
   258b2:	842a                	c.mv	s0,a0
   258b4:	87cf10ef          	jal	ra,16930 <__cxa_end_catch@plt>
   258b8:	8522                	c.mv	a0,s0
   258ba:	8d6f10ef          	jal	ra,16990 <_Unwind_Resume@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   258be:	6410                	c.ld	a2,8(s0)
   258c0:	0605                	c.addi	a2,1
	if (__n == 0)
   258c2:	ca0d                	c.beqz	a2,258f4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x12a>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   258c4:	85ca                	c.mv	a1,s2
   258c6:	f7bf00ef          	jal	ra,16840 <memcpy@plt>
   258ca:	a02d                	c.j	258f4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x12a>
   258cc:	ed5f00ef          	jal	ra,167a0 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   258d0:	03040413          	addi	s0,s0,48
   258d4:	03048493          	addi	s1,s1,48
   258d8:	03090913          	addi	s2,s2,48
   258dc:	f9a40ce3          	beq	s0,s10,25874 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xaa>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   258e0:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   258e4:	e088                	c.sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   258e6:	601c                	c.ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   258e8:	89ca                	c.mv	s3,s2
	if (__str._M_is_local())
   258ea:	fd278ae3          	beq	a5,s2,258be <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xf4>
      { _M_dataplus._M_p = __p; }
   258ee:	e09c                	c.sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   258f0:	681c                	c.ld	a5,16(s0)
   258f2:	e89c                	c.sd	a5,16(s1)
      { _M_string_length = __length; }
   258f4:	641c                	c.ld	a5,8(s0)
   258f6:	e49c                	c.sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   258f8:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   258fc:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   25900:	00040823          	sb	zero,16(s0)
   25904:	701c                	c.ld	a5,32(s0)
   25906:	f09c                	c.sd	a5,32(s1)
   25908:	741c                	c.ld	a5,40(s0)
   2590a:	f49c                	c.sd	a5,40(s1)
      { return _M_dataplus._M_p; }
   2590c:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   2590e:	fb351fe3          	bne	a0,s3,258cc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x102>
   25912:	bf7d                	c.j	258d0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x106>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   25914:	00893603          	ld	a2,8(s2)
   25918:	0605                	c.addi	a2,1
	if (__n == 0)
   2591a:	ee1d                	c.bnez	a2,25958 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x18e>
      { _M_string_length = __length; }
   2591c:	00893783          	ld	a5,8(s2)
   25920:	e41c                	c.sd	a5,8(s0)
   25922:	02093783          	ld	a5,32(s2)
   25926:	f01c                	c.sd	a5,32(s0)
   25928:	02893783          	ld	a5,40(s2)
   2592c:	f41c                	c.sd	a5,40(s0)
   2592e:	03090913          	addi	s2,s2,48
   25932:	03040413          	addi	s0,s0,48
   25936:	03098993          	addi	s3,s3,48
   2593a:	03590263          	beq	s2,s5,2595e <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x194>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2593e:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   25942:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   25944:	00093783          	ld	a5,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   25948:	85ce                	c.mv	a1,s3
	if (__str._M_is_local())
   2594a:	fd3785e3          	beq	a5,s3,25914 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x14a>
      { _M_dataplus._M_p = __p; }
   2594e:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   25950:	01093783          	ld	a5,16(s2)
   25954:	e81c                	c.sd	a5,16(s0)
   25956:	b7d9                	c.j	2591c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x152>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   25958:	ee9f00ef          	jal	ra,16840 <memcpy@plt>
   2595c:	b7c1                	c.j	2591c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x152>
   2595e:	414a87b3          	sub	a5,s5,s4
   25962:	fd078793          	addi	a5,a5,-48
   25966:	8391                	c.srli	a5,0x4
   25968:	00009717          	auipc	a4,0x9
   2596c:	73073703          	ld	a4,1840(a4) # 2f098 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68>
   25970:	02e787b3          	mul	a5,a5,a4
   25974:	0792                	c.slli	a5,0x4
   25976:	8391                	c.srli	a5,0x4
   25978:	0785                	c.addi	a5,1
   2597a:	00179713          	slli	a4,a5,0x1
   2597e:	97ba                	c.add	a5,a4
   25980:	0792                	c.slli	a5,0x4
   25982:	94be                	c.add	s1,a5
	if (__p)
   25984:	000b0563          	beq	s6,zero,2598e <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1c4>
   25988:	855a                	c.mv	a0,s6
   2598a:	e17f00ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2598e:	018bb023          	sd	s8,0(s7)
      this->_M_impl._M_finish = __new_finish;
   25992:	009bb423          	sd	s1,8(s7)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   25996:	001c9793          	slli	a5,s9,0x1
   2599a:	97e6                	c.add	a5,s9
   2599c:	0792                	c.slli	a5,0x4
   2599e:	97e2                	c.add	a5,s8
   259a0:	00fbb823          	sd	a5,16(s7)
    }
   259a4:	70e6                	c.ldsp	ra,120(sp)
   259a6:	7446                	c.ldsp	s0,112(sp)
   259a8:	74a6                	c.ldsp	s1,104(sp)
   259aa:	7906                	c.ldsp	s2,96(sp)
   259ac:	69e6                	c.ldsp	s3,88(sp)
   259ae:	6a46                	c.ldsp	s4,80(sp)
   259b0:	6aa6                	c.ldsp	s5,72(sp)
   259b2:	6b06                	c.ldsp	s6,64(sp)
   259b4:	7be2                	c.ldsp	s7,56(sp)
   259b6:	7c42                	c.ldsp	s8,48(sp)
   259b8:	7ca2                	c.ldsp	s9,40(sp)
   259ba:	7d02                	c.ldsp	s10,32(sp)
   259bc:	6109                	c.addi16sp	sp,128
   259be:	8082                	c.jr	ra
   259c0:	85e2                	c.mv	a1,s8
   259c2:	8562                	c.mv	a0,s8
   259c4:	00015317          	auipc	t1,0x15
   259c8:	91433303          	ld	t1,-1772(t1) # 3a2d8 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)@@Base+0x14d7a>
   259cc:	9302                	c.jalr	t1
   259ce:	8562                	c.mv	a0,s8
   259d0:	dd1f00ef          	jal	ra,167a0 <operator delete(void*)@plt>
   259d4:	bde9                	c.j	258ae <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xe4>
   259d6:	416a0933          	sub	s2,s4,s6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   259da:	00009c97          	auipc	s9,0x9
   259de:	6b6cbc83          	ld	s9,1718(s9) # 2f090 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   259e2:	001c9513          	slli	a0,s9,0x1
   259e6:	9566                	c.add	a0,s9
   259e8:	0512                	c.slli	a0,0x4
   259ea:	dc7f00ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   259ee:	8c2a                	c.mv	s8,a0
	  _Alloc_traits::construct(this->_M_impl,
   259f0:	9962                	c.add	s2,s8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   259f2:	081c                	c.addi4spn	a5,sp,16
   259f4:	e03e                	c.sdsp	a5,0(sp)
      { return _M_dataplus._M_p; }
   259f6:	601c                	c.ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   259f8:	01040493          	addi	s1,s0,16
	if (__str._M_is_local())
   259fc:	e49787e3          	beq	a5,s1,2584a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x80>
      { _M_dataplus._M_p = __p; }
   25a00:	e03e                	c.sdsp	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   25a02:	681c                	c.ld	a5,16(s0)
   25a04:	e83e                	c.sdsp	a5,16(sp)
      { _M_string_length = __length; }
   25a06:	641c                	c.ld	a5,8(s0)
   25a08:	e43e                	c.sdsp	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   25a0a:	e004                	c.sd	s1,0(s0)
      { _M_string_length = __length; }
   25a0c:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   25a10:	00040823          	sb	zero,16(s0)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   25a14:	4681                	c.li	a3,0
   25a16:	4601                	c.li	a2,0
   25a18:	858a                	c.mv	a1,sp
   25a1a:	854a                	c.mv	a0,s2
   25a1c:	b58fd0ef          	jal	ra,22d74 <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   25a20:	bd35                	c.j	2585c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x92>

0000000000025a22 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   25a22:	715d                	c.addi16sp	sp,-80
   25a24:	e486                	c.sdsp	ra,72(sp)
   25a26:	e0a2                	c.sdsp	s0,64(sp)
   25a28:	fc26                	c.sdsp	s1,56(sp)
   25a2a:	f84a                	c.sdsp	s2,48(sp)
   25a2c:	f44e                	c.sdsp	s3,40(sp)
   25a2e:	84aa                	c.mv	s1,a0
   25a30:	842e                	c.mv	s0,a1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   25a32:	00853903          	ld	s2,8(a0)
   25a36:	691c                	c.ld	a5,16(a0)
   25a38:	06f90e63          	beq	s2,a5,25ab4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x92>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   25a3c:	081c                	c.addi4spn	a5,sp,16
   25a3e:	e03e                	c.sdsp	a5,0(sp)
      { return _M_dataplus._M_p; }
   25a40:	619c                	c.ld	a5,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   25a42:	01058993          	addi	s3,a1,16
	if (__str._M_is_local())
   25a46:	03378463          	beq	a5,s3,25a6e <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4c>
      { _M_dataplus._M_p = __p; }
   25a4a:	e03e                	c.sdsp	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   25a4c:	699c                	c.ld	a5,16(a1)
   25a4e:	e83e                	c.sdsp	a5,16(sp)
      { _M_string_length = __length; }
   25a50:	641c                	c.ld	a5,8(s0)
   25a52:	e43e                	c.sdsp	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   25a54:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   25a58:	00043423          	sd	zero,8(s0)
   25a5c:	00040823          	sb	zero,16(s0)
   25a60:	4681                	c.li	a3,0
   25a62:	4601                	c.li	a2,0
   25a64:	858a                	c.mv	a1,sp
   25a66:	854a                	c.mv	a0,s2
   25a68:	b0cfd0ef          	jal	ra,22d74 <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   25a6c:	a809                	c.j	25a7e <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x5c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   25a6e:	6590                	c.ld	a2,8(a1)
   25a70:	0605                	c.addi	a2,1
	if (__n == 0)
   25a72:	de79                	c.beqz	a2,25a50 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   25a74:	85ce                	c.mv	a1,s3
   25a76:	0808                	c.addi4spn	a0,sp,16
   25a78:	dc9f00ef          	jal	ra,16840 <memcpy@plt>
   25a7c:	bfd1                	c.j	25a50 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2e>
      { return _M_dataplus._M_p; }
   25a7e:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   25a80:	081c                	c.addi4spn	a5,sp,16
   25a82:	00f50463          	beq	a0,a5,25a8a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x68>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   25a86:	d1bf00ef          	jal	ra,167a0 <operator delete(void*)@plt>
	    ++this->_M_impl._M_finish;
   25a8a:	649c                	c.ld	a5,8(s1)
   25a8c:	03078793          	addi	a5,a5,48
   25a90:	e49c                	c.sd	a5,8(s1)
      }
   25a92:	60a6                	c.ldsp	ra,72(sp)
   25a94:	6406                	c.ldsp	s0,64(sp)
   25a96:	74e2                	c.ldsp	s1,56(sp)
   25a98:	7942                	c.ldsp	s2,48(sp)
   25a9a:	79a2                	c.ldsp	s3,40(sp)
   25a9c:	6161                	c.addi16sp	sp,80
   25a9e:	8082                	c.jr	ra
      { return _M_dataplus._M_p; }
   25aa0:	842a                	c.mv	s0,a0
   25aa2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   25aa4:	081c                	c.addi4spn	a5,sp,16
   25aa6:	00f50463          	beq	a0,a5,25aae <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x8c>
   25aaa:	cf7f00ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   25aae:	8522                	c.mv	a0,s0
   25ab0:	ee1f00ef          	jal	ra,16990 <_Unwind_Resume@plt>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   25ab4:	862e                	c.mv	a2,a1
   25ab6:	85ca                	c.mv	a1,s2
   25ab8:	00015317          	auipc	t1,0x15
   25abc:	a2833303          	ld	t1,-1496(t1) # 3a4e0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x14d16>
   25ac0:	9302                	c.jalr	t1
      }
   25ac2:	bfc1                	c.j	25a92 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x70>

0000000000025ac4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)>:
      vector<_Tp, _Alloc>::
   25ac4:	7175                	c.addi16sp	sp,-144
   25ac6:	e506                	c.sdsp	ra,136(sp)
   25ac8:	e122                	c.sdsp	s0,128(sp)
   25aca:	fca6                	c.sdsp	s1,120(sp)
   25acc:	f8ca                	c.sdsp	s2,112(sp)
   25ace:	f4ce                	c.sdsp	s3,104(sp)
   25ad0:	f0d2                	c.sdsp	s4,96(sp)
   25ad2:	ecd6                	c.sdsp	s5,88(sp)
   25ad4:	e8da                	c.sdsp	s6,80(sp)
   25ad6:	e4de                	c.sdsp	s7,72(sp)
   25ad8:	e0e2                	c.sdsp	s8,64(sp)
   25ada:	fc66                	c.sdsp	s9,56(sp)
   25adc:	f86a                	c.sdsp	s10,48(sp)
   25ade:	f46e                	c.sdsp	s11,40(sp)
   25ae0:	893a                	c.mv	s2,a4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   25ae2:	00853a83          	ld	s5,8(a0)
   25ae6:	00053b03          	ld	s6,0(a0)
   25aea:	416a87b3          	sub	a5,s5,s6
   25aee:	8791                	c.srai	a5,0x4
   25af0:	00008717          	auipc	a4,0x8
   25af4:	52073703          	ld	a4,1312(a4) # 2e010 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   25af8:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   25afc:	00009717          	auipc	a4,0x9
   25b00:	59473703          	ld	a4,1428(a4) # 2f090 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   25b04:	02e78b63          	beq	a5,a4,25b3a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x76>
   25b08:	8baa                	c.mv	s7,a0
   25b0a:	8a2e                	c.mv	s4,a1
   25b0c:	8432                	c.mv	s0,a2
   25b0e:	84b6                	c.mv	s1,a3
   25b10:	8d2e                	c.mv	s10,a1
      return __a;
   25b12:	873e                	c.mv	a4,a5
      if (__a < __b)
   25b14:	036a8963          	beq	s5,s6,25b46 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x82>
	const size_type __len = size() + (std::max)(size(), __n);
   25b18:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   25b1a:	1af76e63          	bltu	a4,a5,25cd6 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x212>
   25b1e:	8cba                	c.mv	s9,a4
   25b20:	00009797          	auipc	a5,0x9
   25b24:	5707b783          	ld	a5,1392(a5) # 2f090 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   25b28:	00e7f363          	bgeu	a5,a4,25b2e <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x6a>
   25b2c:	8cbe                	c.mv	s9,a5
   25b2e:	416a09b3          	sub	s3,s4,s6
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   25b32:	4c01                	c.li	s8,0
   25b34:	1a070e63          	beq	a4,zero,25cf0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x22c>
   25b38:	a26d                	c.j	25ce2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x21e>
	  __throw_length_error(__N(__s));
   25b3a:	00008517          	auipc	a0,0x8
   25b3e:	f1650513          	addi	a0,a0,-234 # 2da50 <__libc_csu_fini+0x9e>
   25b42:	b5ff00ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   25b46:	4705                	c.li	a4,1
   25b48:	bfc1                	c.j	25b18 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x54>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   25b4a:	6410                	c.ld	a2,8(s0)
   25b4c:	0605                	c.addi	a2,1
	if (__n == 0)
   25b4e:	1a060c63          	beq	a2,zero,25d06 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x242>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   25b52:	85ee                	c.mv	a1,s11
   25b54:	0808                	c.addi4spn	a0,sp,16
   25b56:	cebf00ef          	jal	ra,16840 <memcpy@plt>
   25b5a:	a275                	c.j	25d06 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x242>
      { return _M_dataplus._M_p; }
   25b5c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   25b5e:	081c                	c.addi4spn	a5,sp,16
   25b60:	00f50463          	beq	a0,a5,25b68 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xa4>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   25b64:	c3df00ef          	jal	ra,167a0 <operator delete(void*)@plt>
   25b68:	010b0913          	addi	s2,s6,16
   25b6c:	845a                	c.mv	s0,s6
      _ForwardIterator __cur = __result;
   25b6e:	84e2                	c.mv	s1,s8
      for (; __first != __last; ++__first, (void)++__cur)
   25b70:	076d1763          	bne	s10,s6,25bde <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x11a>
	      ++__new_finish;
   25b74:	03048493          	addi	s1,s1,48
   25b78:	115d0563          	beq	s10,s5,25c82 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1be>
   25b7c:	010a0993          	addi	s3,s4,16
   25b80:	8952                	c.mv	s2,s4
      _ForwardIterator __cur = __result;
   25b82:	8426                	c.mv	s0,s1
   25b84:	a865                	c.j	25c3c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x178>
      { return _M_dataplus._M_p; }
   25b86:	842a                	c.mv	s0,a0
   25b88:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   25b8a:	081c                	c.addi4spn	a5,sp,16
   25b8c:	00f50463          	beq	a0,a5,25b94 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xd0>
   25b90:	c11f00ef          	jal	ra,167a0 <operator delete(void*)@plt>
      __catch(...)
   25b94:	8522                	c.mv	a0,s0
   25b96:	adbf00ef          	jal	ra,16670 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   25b9a:	120c1363          	bne	s8,zero,25cc0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1fc>
      { return _M_dataplus._M_p; }
   25b9e:	0009b503          	ld	a0,0(s3)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   25ba2:	09c1                	c.addi	s3,16
	if (!_M_is_local())
   25ba4:	01350463          	beq	a0,s3,25bac <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xe8>
   25ba8:	bf9f00ef          	jal	ra,167a0 <operator delete(void*)@plt>
	  __throw_exception_again;
   25bac:	d15f00ef          	jal	ra,168c0 <__cxa_rethrow@plt>
      __catch(...)
   25bb0:	842a                	c.mv	s0,a0
   25bb2:	d7ff00ef          	jal	ra,16930 <__cxa_end_catch@plt>
   25bb6:	8522                	c.mv	a0,s0
   25bb8:	dd9f00ef          	jal	ra,16990 <_Unwind_Resume@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   25bbc:	6410                	c.ld	a2,8(s0)
   25bbe:	0605                	c.addi	a2,1
	if (__n == 0)
   25bc0:	ca0d                	c.beqz	a2,25bf2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x12e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   25bc2:	85ca                	c.mv	a1,s2
   25bc4:	c7df00ef          	jal	ra,16840 <memcpy@plt>
   25bc8:	a02d                	c.j	25bf2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x12e>
   25bca:	bd7f00ef          	jal	ra,167a0 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   25bce:	03040413          	addi	s0,s0,48
   25bd2:	03048493          	addi	s1,s1,48
   25bd6:	03090913          	addi	s2,s2,48
   25bda:	f9a40de3          	beq	s0,s10,25b74 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xb0>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   25bde:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   25be2:	e088                	c.sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   25be4:	601c                	c.ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   25be6:	89ca                	c.mv	s3,s2
	if (__str._M_is_local())
   25be8:	fd278ae3          	beq	a5,s2,25bbc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xf8>
      { _M_dataplus._M_p = __p; }
   25bec:	e09c                	c.sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   25bee:	681c                	c.ld	a5,16(s0)
   25bf0:	e89c                	c.sd	a5,16(s1)
      { _M_string_length = __length; }
   25bf2:	641c                	c.ld	a5,8(s0)
   25bf4:	e49c                	c.sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   25bf6:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   25bfa:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   25bfe:	00040823          	sb	zero,16(s0)
   25c02:	701c                	c.ld	a5,32(s0)
   25c04:	f09c                	c.sd	a5,32(s1)
   25c06:	741c                	c.ld	a5,40(s0)
   25c08:	f49c                	c.sd	a5,40(s1)
      { return _M_dataplus._M_p; }
   25c0a:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   25c0c:	fb351fe3          	bne	a0,s3,25bca <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x106>
   25c10:	bf7d                	c.j	25bce <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x10a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   25c12:	00893603          	ld	a2,8(s2)
   25c16:	0605                	c.addi	a2,1
	if (__n == 0)
   25c18:	ee1d                	c.bnez	a2,25c56 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x192>
      { _M_string_length = __length; }
   25c1a:	00893783          	ld	a5,8(s2)
   25c1e:	e41c                	c.sd	a5,8(s0)
   25c20:	02093783          	ld	a5,32(s2)
   25c24:	f01c                	c.sd	a5,32(s0)
   25c26:	02893783          	ld	a5,40(s2)
   25c2a:	f41c                	c.sd	a5,40(s0)
   25c2c:	03090913          	addi	s2,s2,48
   25c30:	03040413          	addi	s0,s0,48
   25c34:	03098993          	addi	s3,s3,48
   25c38:	03590263          	beq	s2,s5,25c5c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x198>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   25c3c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   25c40:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   25c42:	00093783          	ld	a5,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   25c46:	85ce                	c.mv	a1,s3
	if (__str._M_is_local())
   25c48:	fd3785e3          	beq	a5,s3,25c12 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x14e>
      { _M_dataplus._M_p = __p; }
   25c4c:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   25c4e:	01093783          	ld	a5,16(s2)
   25c52:	e81c                	c.sd	a5,16(s0)
   25c54:	b7d9                	c.j	25c1a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x156>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   25c56:	bebf00ef          	jal	ra,16840 <memcpy@plt>
   25c5a:	b7c1                	c.j	25c1a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x156>
   25c5c:	414a87b3          	sub	a5,s5,s4
   25c60:	fd078793          	addi	a5,a5,-48
   25c64:	8391                	c.srli	a5,0x4
   25c66:	00009717          	auipc	a4,0x9
   25c6a:	43273703          	ld	a4,1074(a4) # 2f098 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68>
   25c6e:	02e787b3          	mul	a5,a5,a4
   25c72:	0792                	c.slli	a5,0x4
   25c74:	8391                	c.srli	a5,0x4
   25c76:	0785                	c.addi	a5,1
   25c78:	00179713          	slli	a4,a5,0x1
   25c7c:	97ba                	c.add	a5,a4
   25c7e:	0792                	c.slli	a5,0x4
   25c80:	94be                	c.add	s1,a5
	if (__p)
   25c82:	000b0563          	beq	s6,zero,25c8c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1c8>
   25c86:	855a                	c.mv	a0,s6
   25c88:	b19f00ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   25c8c:	018bb023          	sd	s8,0(s7)
      this->_M_impl._M_finish = __new_finish;
   25c90:	009bb423          	sd	s1,8(s7)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   25c94:	001c9793          	slli	a5,s9,0x1
   25c98:	97e6                	c.add	a5,s9
   25c9a:	0792                	c.slli	a5,0x4
   25c9c:	97e2                	c.add	a5,s8
   25c9e:	00fbb823          	sd	a5,16(s7)
    }
   25ca2:	60aa                	c.ldsp	ra,136(sp)
   25ca4:	640a                	c.ldsp	s0,128(sp)
   25ca6:	74e6                	c.ldsp	s1,120(sp)
   25ca8:	7946                	c.ldsp	s2,112(sp)
   25caa:	79a6                	c.ldsp	s3,104(sp)
   25cac:	7a06                	c.ldsp	s4,96(sp)
   25cae:	6ae6                	c.ldsp	s5,88(sp)
   25cb0:	6b46                	c.ldsp	s6,80(sp)
   25cb2:	6ba6                	c.ldsp	s7,72(sp)
   25cb4:	6c06                	c.ldsp	s8,64(sp)
   25cb6:	7ce2                	c.ldsp	s9,56(sp)
   25cb8:	7d42                	c.ldsp	s10,48(sp)
   25cba:	7da2                	c.ldsp	s11,40(sp)
   25cbc:	6149                	c.addi16sp	sp,144
   25cbe:	8082                	c.jr	ra
   25cc0:	85e2                	c.mv	a1,s8
   25cc2:	8562                	c.mv	a0,s8
   25cc4:	00014317          	auipc	t1,0x14
   25cc8:	61433303          	ld	t1,1556(t1) # 3a2d8 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)@@Base+0x14d7a>
   25ccc:	9302                	c.jalr	t1
   25cce:	8562                	c.mv	a0,s8
   25cd0:	ad1f00ef          	jal	ra,167a0 <operator delete(void*)@plt>
   25cd4:	bde1                	c.j	25bac <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xe8>
   25cd6:	416a09b3          	sub	s3,s4,s6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   25cda:	00009c97          	auipc	s9,0x9
   25cde:	3b6cbc83          	ld	s9,950(s9) # 2f090 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   25ce2:	001c9513          	slli	a0,s9,0x1
   25ce6:	9566                	c.add	a0,s9
   25ce8:	0512                	c.slli	a0,0x4
   25cea:	ac7f00ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   25cee:	8c2a                	c.mv	s8,a0
	  _Alloc_traits::construct(this->_M_impl,
   25cf0:	99e2                	c.add	s3,s8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   25cf2:	081c                	c.addi4spn	a5,sp,16
   25cf4:	e03e                	c.sdsp	a5,0(sp)
      { return _M_dataplus._M_p; }
   25cf6:	601c                	c.ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   25cf8:	01040d93          	addi	s11,s0,16
	if (__str._M_is_local())
   25cfc:	e5b787e3          	beq	a5,s11,25b4a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x86>
      { _M_dataplus._M_p = __p; }
   25d00:	e03e                	c.sdsp	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   25d02:	681c                	c.ld	a5,16(s0)
   25d04:	e83e                	c.sdsp	a5,16(sp)
      { _M_string_length = __length; }
   25d06:	641c                	c.ld	a5,8(s0)
   25d08:	e43e                	c.sdsp	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   25d0a:	01b43023          	sd	s11,0(s0)
      { _M_string_length = __length; }
   25d0e:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   25d12:	00040823          	sb	zero,16(s0)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   25d16:	00093683          	ld	a3,0(s2)
   25d1a:	6090                	c.ld	a2,0(s1)
   25d1c:	858a                	c.mv	a1,sp
   25d1e:	854e                	c.mv	a0,s3
   25d20:	854fd0ef          	jal	ra,22d74 <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   25d24:	bd25                	c.j	25b5c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x98>

0000000000025d26 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)>:
      vector<_Tp, _Alloc>::
   25d26:	711d                	c.addi16sp	sp,-96
   25d28:	ec86                	c.sdsp	ra,88(sp)
   25d2a:	e8a2                	c.sdsp	s0,80(sp)
   25d2c:	e4a6                	c.sdsp	s1,72(sp)
   25d2e:	e0ca                	c.sdsp	s2,64(sp)
   25d30:	fc4e                	c.sdsp	s3,56(sp)
   25d32:	f852                	c.sdsp	s4,48(sp)
   25d34:	f456                	c.sdsp	s5,40(sp)
   25d36:	8aaa                	c.mv	s5,a0
   25d38:	842e                	c.mv	s0,a1
   25d3a:	84b2                	c.mv	s1,a2
   25d3c:	8936                	c.mv	s2,a3
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   25d3e:	00853983          	ld	s3,8(a0)
   25d42:	691c                	c.ld	a5,16(a0)
   25d44:	08f98363          	beq	s3,a5,25dca <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xa4>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   25d48:	081c                	c.addi4spn	a5,sp,16
   25d4a:	e03e                	c.sdsp	a5,0(sp)
      { return _M_dataplus._M_p; }
   25d4c:	619c                	c.ld	a5,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   25d4e:	01058a13          	addi	s4,a1,16
	if (__str._M_is_local())
   25d52:	03478563          	beq	a5,s4,25d7c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x56>
      { _M_dataplus._M_p = __p; }
   25d56:	e03e                	c.sdsp	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   25d58:	699c                	c.ld	a5,16(a1)
   25d5a:	e83e                	c.sdsp	a5,16(sp)
      { _M_string_length = __length; }
   25d5c:	641c                	c.ld	a5,8(s0)
   25d5e:	e43e                	c.sdsp	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   25d60:	01443023          	sd	s4,0(s0)
      { _M_string_length = __length; }
   25d64:	00043423          	sd	zero,8(s0)
   25d68:	00040823          	sb	zero,16(s0)
   25d6c:	00093683          	ld	a3,0(s2)
   25d70:	6090                	c.ld	a2,0(s1)
   25d72:	858a                	c.mv	a1,sp
   25d74:	854e                	c.mv	a0,s3
   25d76:	ffffc0ef          	jal	ra,22d74 <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   25d7a:	a809                	c.j	25d8c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x66>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   25d7c:	6590                	c.ld	a2,8(a1)
   25d7e:	0605                	c.addi	a2,1
	if (__n == 0)
   25d80:	de71                	c.beqz	a2,25d5c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x36>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   25d82:	85d2                	c.mv	a1,s4
   25d84:	0808                	c.addi4spn	a0,sp,16
   25d86:	abbf00ef          	jal	ra,16840 <memcpy@plt>
   25d8a:	bfc9                	c.j	25d5c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x36>
      { return _M_dataplus._M_p; }
   25d8c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   25d8e:	081c                	c.addi4spn	a5,sp,16
   25d90:	00f50463          	beq	a0,a5,25d98 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x72>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   25d94:	a0df00ef          	jal	ra,167a0 <operator delete(void*)@plt>
	    ++this->_M_impl._M_finish;
   25d98:	008ab783          	ld	a5,8(s5)
   25d9c:	03078793          	addi	a5,a5,48
   25da0:	00fab423          	sd	a5,8(s5)
      }
   25da4:	60e6                	c.ldsp	ra,88(sp)
   25da6:	6446                	c.ldsp	s0,80(sp)
   25da8:	64a6                	c.ldsp	s1,72(sp)
   25daa:	6906                	c.ldsp	s2,64(sp)
   25dac:	79e2                	c.ldsp	s3,56(sp)
   25dae:	7a42                	c.ldsp	s4,48(sp)
   25db0:	7aa2                	c.ldsp	s5,40(sp)
   25db2:	6125                	c.addi16sp	sp,96
   25db4:	8082                	c.jr	ra
      { return _M_dataplus._M_p; }
   25db6:	842a                	c.mv	s0,a0
   25db8:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   25dba:	081c                	c.addi4spn	a5,sp,16
   25dbc:	00f50463          	beq	a0,a5,25dc4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x9e>
   25dc0:	9e1f00ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   25dc4:	8522                	c.mv	a0,s0
   25dc6:	bcbf00ef          	jal	ra,16990 <_Unwind_Resume@plt>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   25dca:	8736                	c.mv	a4,a3
   25dcc:	86b2                	c.mv	a3,a2
   25dce:	862e                	c.mv	a2,a1
   25dd0:	85ce                	c.mv	a1,s3
   25dd2:	00014317          	auipc	t1,0x14
   25dd6:	71e33303          	ld	t1,1822(t1) # 3a4f0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)@@Base+0x14a2c>
   25dda:	9302                	c.jalr	t1
      }
   25ddc:	b7e1                	c.j	25da4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x7e>

0000000000025dde <dwarf::at_sibling(dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x0X
//

AT_REFERENCE(sibling);
   25dde:	7139                	c.addi16sp	sp,-64
   25de0:	fc06                	c.sdsp	ra,56(sp)
   25de2:	f822                	c.sdsp	s0,48(sp)
   25de4:	f426                	c.sdsp	s1,40(sp)
   25de6:	842a                	c.mv	s0,a0
   25de8:	4605                	c.li	a2,1
   25dea:	0024                	c.addi4spn	s1,sp,8
   25dec:	8526                	c.mv	a0,s1
   25dee:	b04f60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   25df2:	85a6                	c.mv	a1,s1
   25df4:	8522                	c.mv	a0,s0
   25df6:	94df80ef          	jal	ra,1e742 <dwarf::value::as_reference() const>
   25dfa:	8522                	c.mv	a0,s0
   25dfc:	70e2                	c.ldsp	ra,56(sp)
   25dfe:	7442                	c.ldsp	s0,48(sp)
   25e00:	74a2                	c.ldsp	s1,40(sp)
   25e02:	6121                	c.addi16sp	sp,64
   25e04:	8082                	c.jr	ra

0000000000025e06 <dwarf::at_name[abi:cxx11](dwarf::die const&)>:
// XXX location
AT_STRING(name);
   25e06:	7139                	c.addi16sp	sp,-64
   25e08:	fc06                	c.sdsp	ra,56(sp)
   25e0a:	f822                	c.sdsp	s0,48(sp)
   25e0c:	f426                	c.sdsp	s1,40(sp)
   25e0e:	842a                	c.mv	s0,a0
   25e10:	460d                	c.li	a2,3
   25e12:	0024                	c.addi4spn	s1,sp,8
   25e14:	8526                	c.mv	a0,s1
   25e16:	adcf60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   25e1a:	85a6                	c.mv	a1,s1
   25e1c:	8522                	c.mv	a0,s0
   25e1e:	8e1f80ef          	jal	ra,1e6fe <dwarf::value::as_string[abi:cxx11]() const>
   25e22:	8522                	c.mv	a0,s0
   25e24:	70e2                	c.ldsp	ra,56(sp)
   25e26:	7442                	c.ldsp	s0,48(sp)
   25e28:	74a2                	c.ldsp	s1,40(sp)
   25e2a:	6121                	c.addi16sp	sp,64
   25e2c:	8082                	c.jr	ra

0000000000025e2e <dwarf::at_ordering(dwarf::die const&)>:
AT_ENUM(ordering, DW_ORD);
   25e2e:	7179                	c.addi16sp	sp,-48
   25e30:	f406                	c.sdsp	ra,40(sp)
   25e32:	f022                	c.sdsp	s0,32(sp)
   25e34:	85aa                	c.mv	a1,a0
   25e36:	4625                	c.li	a2,9
   25e38:	0020                	c.addi4spn	s0,sp,8
   25e3a:	8522                	c.mv	a0,s0
   25e3c:	ab6f60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   25e40:	8522                	c.mv	a0,s0
   25e42:	fdbf60ef          	jal	ra,1ce1c <dwarf::value::as_uconstant() const>
   25e46:	2501                	c.addiw	a0,0
   25e48:	70a2                	c.ldsp	ra,40(sp)
   25e4a:	7402                	c.ldsp	s0,32(sp)
   25e4c:	6145                	c.addi16sp	sp,48
   25e4e:	8082                	c.jr	ra

0000000000025e50 <dwarf::at_low_pc(dwarf::die const&)>:
//////////////////////////////////////////////////////////////////
// 0x1X
//

// XXX stmt_list
AT_ADDRESS(low_pc);
   25e50:	7179                	c.addi16sp	sp,-48
   25e52:	f406                	c.sdsp	ra,40(sp)
   25e54:	f022                	c.sdsp	s0,32(sp)
   25e56:	85aa                	c.mv	a1,a0
   25e58:	4645                	c.li	a2,17
   25e5a:	0020                	c.addi4spn	s0,sp,8
   25e5c:	8522                	c.mv	a0,s0
   25e5e:	a94f60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   25e62:	8522                	c.mv	a0,s0
   25e64:	9b9f60ef          	jal	ra,1c81c <dwarf::value::as_address() const>
   25e68:	70a2                	c.ldsp	ra,40(sp)
   25e6a:	7402                	c.ldsp	s0,32(sp)
   25e6c:	6145                	c.addi16sp	sp,48
   25e6e:	8082                	c.jr	ra

0000000000025e70 <dwarf::at_language(dwarf::die const&)>:
  default:
    throw format_error(to_string(DW_AT::high_pc) + " has unexpected type " +
                       to_string(v.get_type()));
  }
}
AT_ENUM(language, DW_LANG);
   25e70:	7179                	c.addi16sp	sp,-48
   25e72:	f406                	c.sdsp	ra,40(sp)
   25e74:	f022                	c.sdsp	s0,32(sp)
   25e76:	85aa                	c.mv	a1,a0
   25e78:	464d                	c.li	a2,19
   25e7a:	0020                	c.addi4spn	s0,sp,8
   25e7c:	8522                	c.mv	a0,s0
   25e7e:	a74f60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   25e82:	8522                	c.mv	a0,s0
   25e84:	f99f60ef          	jal	ra,1ce1c <dwarf::value::as_uconstant() const>
   25e88:	2501                	c.addiw	a0,0
   25e8a:	70a2                	c.ldsp	ra,40(sp)
   25e8c:	7402                	c.ldsp	s0,32(sp)
   25e8e:	6145                	c.addi16sp	sp,48
   25e90:	8082                	c.jr	ra

0000000000025e92 <dwarf::at_discr(dwarf::die const&)>:
AT_REFERENCE(discr);
   25e92:	7139                	c.addi16sp	sp,-64
   25e94:	fc06                	c.sdsp	ra,56(sp)
   25e96:	f822                	c.sdsp	s0,48(sp)
   25e98:	f426                	c.sdsp	s1,40(sp)
   25e9a:	842a                	c.mv	s0,a0
   25e9c:	4655                	c.li	a2,21
   25e9e:	0024                	c.addi4spn	s1,sp,8
   25ea0:	8526                	c.mv	a0,s1
   25ea2:	a50f60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   25ea6:	85a6                	c.mv	a1,s1
   25ea8:	8522                	c.mv	a0,s0
   25eaa:	899f80ef          	jal	ra,1e742 <dwarf::value::as_reference() const>
   25eae:	8522                	c.mv	a0,s0
   25eb0:	70e2                	c.ldsp	ra,56(sp)
   25eb2:	7442                	c.ldsp	s0,48(sp)
   25eb4:	74a2                	c.ldsp	s1,40(sp)
   25eb6:	6121                	c.addi16sp	sp,64
   25eb8:	8082                	c.jr	ra

0000000000025eba <dwarf::at_discr_value(dwarf::die const&)>:
AT_ANY(discr_value); // XXX Signed or unsigned
   25eba:	1141                	c.addi	sp,-16
   25ebc:	e406                	c.sdsp	ra,8(sp)
   25ebe:	e022                	c.sdsp	s0,0(sp)
   25ec0:	842a                	c.mv	s0,a0
   25ec2:	4659                	c.li	a2,22
   25ec4:	a2ef60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   25ec8:	8522                	c.mv	a0,s0
   25eca:	60a2                	c.ldsp	ra,8(sp)
   25ecc:	6402                	c.ldsp	s0,0(sp)
   25ece:	0141                	c.addi	sp,16
   25ed0:	8082                	c.jr	ra

0000000000025ed2 <dwarf::at_visibility(dwarf::die const&)>:
AT_ENUM(visibility, DW_VIS);
   25ed2:	7179                	c.addi16sp	sp,-48
   25ed4:	f406                	c.sdsp	ra,40(sp)
   25ed6:	f022                	c.sdsp	s0,32(sp)
   25ed8:	85aa                	c.mv	a1,a0
   25eda:	465d                	c.li	a2,23
   25edc:	0020                	c.addi4spn	s0,sp,8
   25ede:	8522                	c.mv	a0,s0
   25ee0:	a12f60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   25ee4:	8522                	c.mv	a0,s0
   25ee6:	f37f60ef          	jal	ra,1ce1c <dwarf::value::as_uconstant() const>
   25eea:	2501                	c.addiw	a0,0
   25eec:	70a2                	c.ldsp	ra,40(sp)
   25eee:	7402                	c.ldsp	s0,32(sp)
   25ef0:	6145                	c.addi16sp	sp,48
   25ef2:	8082                	c.jr	ra

0000000000025ef4 <dwarf::at_import(dwarf::die const&)>:
AT_REFERENCE(import);
   25ef4:	7139                	c.addi16sp	sp,-64
   25ef6:	fc06                	c.sdsp	ra,56(sp)
   25ef8:	f822                	c.sdsp	s0,48(sp)
   25efa:	f426                	c.sdsp	s1,40(sp)
   25efc:	842a                	c.mv	s0,a0
   25efe:	4661                	c.li	a2,24
   25f00:	0024                	c.addi4spn	s1,sp,8
   25f02:	8526                	c.mv	a0,s1
   25f04:	9eef60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   25f08:	85a6                	c.mv	a1,s1
   25f0a:	8522                	c.mv	a0,s0
   25f0c:	837f80ef          	jal	ra,1e742 <dwarf::value::as_reference() const>
   25f10:	8522                	c.mv	a0,s0
   25f12:	70e2                	c.ldsp	ra,56(sp)
   25f14:	7442                	c.ldsp	s0,48(sp)
   25f16:	74a2                	c.ldsp	s1,40(sp)
   25f18:	6121                	c.addi16sp	sp,64
   25f1a:	8082                	c.jr	ra

0000000000025f1c <dwarf::at_common_reference(dwarf::die const&)>:
// XXX string_length
AT_REFERENCE(common_reference);
   25f1c:	7139                	c.addi16sp	sp,-64
   25f1e:	fc06                	c.sdsp	ra,56(sp)
   25f20:	f822                	c.sdsp	s0,48(sp)
   25f22:	f426                	c.sdsp	s1,40(sp)
   25f24:	842a                	c.mv	s0,a0
   25f26:	4669                	c.li	a2,26
   25f28:	0024                	c.addi4spn	s1,sp,8
   25f2a:	8526                	c.mv	a0,s1
   25f2c:	9c6f60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   25f30:	85a6                	c.mv	a1,s1
   25f32:	8522                	c.mv	a0,s0
   25f34:	80ff80ef          	jal	ra,1e742 <dwarf::value::as_reference() const>
   25f38:	8522                	c.mv	a0,s0
   25f3a:	70e2                	c.ldsp	ra,56(sp)
   25f3c:	7442                	c.ldsp	s0,48(sp)
   25f3e:	74a2                	c.ldsp	s1,40(sp)
   25f40:	6121                	c.addi16sp	sp,64
   25f42:	8082                	c.jr	ra

0000000000025f44 <dwarf::at_comp_dir[abi:cxx11](dwarf::die const&)>:
AT_STRING(comp_dir);
   25f44:	7139                	c.addi16sp	sp,-64
   25f46:	fc06                	c.sdsp	ra,56(sp)
   25f48:	f822                	c.sdsp	s0,48(sp)
   25f4a:	f426                	c.sdsp	s1,40(sp)
   25f4c:	842a                	c.mv	s0,a0
   25f4e:	466d                	c.li	a2,27
   25f50:	0024                	c.addi4spn	s1,sp,8
   25f52:	8526                	c.mv	a0,s1
   25f54:	99ef60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   25f58:	85a6                	c.mv	a1,s1
   25f5a:	8522                	c.mv	a0,s0
   25f5c:	fa2f80ef          	jal	ra,1e6fe <dwarf::value::as_string[abi:cxx11]() const>
   25f60:	8522                	c.mv	a0,s0
   25f62:	70e2                	c.ldsp	ra,56(sp)
   25f64:	7442                	c.ldsp	s0,48(sp)
   25f66:	74a2                	c.ldsp	s1,40(sp)
   25f68:	6121                	c.addi16sp	sp,64
   25f6a:	8082                	c.jr	ra

0000000000025f6c <dwarf::at_const_value(dwarf::die const&)>:
AT_ANY(const_value);
   25f6c:	1141                	c.addi	sp,-16
   25f6e:	e406                	c.sdsp	ra,8(sp)
   25f70:	e022                	c.sdsp	s0,0(sp)
   25f72:	842a                	c.mv	s0,a0
   25f74:	4671                	c.li	a2,28
   25f76:	97cf60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   25f7a:	8522                	c.mv	a0,s0
   25f7c:	60a2                	c.ldsp	ra,8(sp)
   25f7e:	6402                	c.ldsp	s0,0(sp)
   25f80:	0141                	c.addi	sp,16
   25f82:	8082                	c.jr	ra

0000000000025f84 <dwarf::at_containing_type(dwarf::die const&)>:
AT_REFERENCE(containing_type);
   25f84:	7139                	c.addi16sp	sp,-64
   25f86:	fc06                	c.sdsp	ra,56(sp)
   25f88:	f822                	c.sdsp	s0,48(sp)
   25f8a:	f426                	c.sdsp	s1,40(sp)
   25f8c:	842a                	c.mv	s0,a0
   25f8e:	4675                	c.li	a2,29
   25f90:	0024                	c.addi4spn	s1,sp,8
   25f92:	8526                	c.mv	a0,s1
   25f94:	95ef60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   25f98:	85a6                	c.mv	a1,s1
   25f9a:	8522                	c.mv	a0,s0
   25f9c:	fa6f80ef          	jal	ra,1e742 <dwarf::value::as_reference() const>
   25fa0:	8522                	c.mv	a0,s0
   25fa2:	70e2                	c.ldsp	ra,56(sp)
   25fa4:	7442                	c.ldsp	s0,48(sp)
   25fa6:	74a2                	c.ldsp	s1,40(sp)
   25fa8:	6121                	c.addi16sp	sp,64
   25faa:	8082                	c.jr	ra

0000000000025fac <dwarf::at_inline(dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x2X
//

DW_INL at_inline(const die &d) {
   25fac:	7179                	c.addi16sp	sp,-48
   25fae:	f406                	c.sdsp	ra,40(sp)
   25fb0:	f022                	c.sdsp	s0,32(sp)
   25fb2:	85aa                	c.mv	a1,a0
  // XXX Missing attribute is equivalent to DW_INL_not_inlined
  // (DWARF4 section 3.3.8)
  return (DW_INL)d[DW_AT::inline_].as_uconstant();
   25fb4:	02000613          	addi	a2,zero,32
   25fb8:	0020                	c.addi4spn	s0,sp,8
   25fba:	8522                	c.mv	a0,s0
   25fbc:	936f60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   25fc0:	8522                	c.mv	a0,s0
   25fc2:	e5bf60ef          	jal	ra,1ce1c <dwarf::value::as_uconstant() const>
}
   25fc6:	2501                	c.addiw	a0,0
   25fc8:	70a2                	c.ldsp	ra,40(sp)
   25fca:	7402                	c.ldsp	s0,32(sp)
   25fcc:	6145                	c.addi16sp	sp,48
   25fce:	8082                	c.jr	ra

0000000000025fd0 <dwarf::at_is_optional(dwarf::die const&)>:
AT_FLAG(is_optional);
   25fd0:	7179                	c.addi16sp	sp,-48
   25fd2:	f406                	c.sdsp	ra,40(sp)
   25fd4:	f022                	c.sdsp	s0,32(sp)
   25fd6:	85aa                	c.mv	a1,a0
   25fd8:	02100613          	addi	a2,zero,33
   25fdc:	0020                	c.addi4spn	s0,sp,8
   25fde:	8522                	c.mv	a0,s0
   25fe0:	912f60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   25fe4:	8522                	c.mv	a0,s0
   25fe6:	933f70ef          	jal	ra,1d918 <dwarf::value::as_flag() const>
   25fea:	70a2                	c.ldsp	ra,40(sp)
   25fec:	7402                	c.ldsp	s0,32(sp)
   25fee:	6145                	c.addi16sp	sp,48
   25ff0:	8082                	c.jr	ra

0000000000025ff2 <dwarf::at_producer[abi:cxx11](dwarf::die const&)>:
AT_UDYNAMIC(lower_bound); // XXX Language-based default?
AT_STRING(producer);
   25ff2:	7139                	c.addi16sp	sp,-64
   25ff4:	fc06                	c.sdsp	ra,56(sp)
   25ff6:	f822                	c.sdsp	s0,48(sp)
   25ff8:	f426                	c.sdsp	s1,40(sp)
   25ffa:	842a                	c.mv	s0,a0
   25ffc:	02500613          	addi	a2,zero,37
   26000:	0024                	c.addi4spn	s1,sp,8
   26002:	8526                	c.mv	a0,s1
   26004:	8eef60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   26008:	85a6                	c.mv	a1,s1
   2600a:	8522                	c.mv	a0,s0
   2600c:	ef2f80ef          	jal	ra,1e6fe <dwarf::value::as_string[abi:cxx11]() const>
   26010:	8522                	c.mv	a0,s0
   26012:	70e2                	c.ldsp	ra,56(sp)
   26014:	7442                	c.ldsp	s0,48(sp)
   26016:	74a2                	c.ldsp	s1,40(sp)
   26018:	6121                	c.addi16sp	sp,64
   2601a:	8082                	c.jr	ra

000000000002601c <dwarf::at_prototyped(dwarf::die const&)>:
AT_FLAG(prototyped);
   2601c:	7179                	c.addi16sp	sp,-48
   2601e:	f406                	c.sdsp	ra,40(sp)
   26020:	f022                	c.sdsp	s0,32(sp)
   26022:	85aa                	c.mv	a1,a0
   26024:	02700613          	addi	a2,zero,39
   26028:	0020                	c.addi4spn	s0,sp,8
   2602a:	8522                	c.mv	a0,s0
   2602c:	8c6f60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   26030:	8522                	c.mv	a0,s0
   26032:	8e7f70ef          	jal	ra,1d918 <dwarf::value::as_flag() const>
   26036:	70a2                	c.ldsp	ra,40(sp)
   26038:	7402                	c.ldsp	s0,32(sp)
   2603a:	6145                	c.addi16sp	sp,48
   2603c:	8082                	c.jr	ra

000000000002603e <dwarf::at_abstract_origin(dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x3X
//

AT_REFERENCE(abstract_origin);
   2603e:	7139                	c.addi16sp	sp,-64
   26040:	fc06                	c.sdsp	ra,56(sp)
   26042:	f822                	c.sdsp	s0,48(sp)
   26044:	f426                	c.sdsp	s1,40(sp)
   26046:	842a                	c.mv	s0,a0
   26048:	03100613          	addi	a2,zero,49
   2604c:	0024                	c.addi4spn	s1,sp,8
   2604e:	8526                	c.mv	a0,s1
   26050:	8a2f60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   26054:	85a6                	c.mv	a1,s1
   26056:	8522                	c.mv	a0,s0
   26058:	eeaf80ef          	jal	ra,1e742 <dwarf::value::as_reference() const>
   2605c:	8522                	c.mv	a0,s0
   2605e:	70e2                	c.ldsp	ra,56(sp)
   26060:	7442                	c.ldsp	s0,48(sp)
   26062:	74a2                	c.ldsp	s1,40(sp)
   26064:	6121                	c.addi16sp	sp,64
   26066:	8082                	c.jr	ra

0000000000026068 <dwarf::at_accessibility(dwarf::die const&)>:
AT_ENUM(accessibility, DW_ACCESS);
   26068:	7179                	c.addi16sp	sp,-48
   2606a:	f406                	c.sdsp	ra,40(sp)
   2606c:	f022                	c.sdsp	s0,32(sp)
   2606e:	85aa                	c.mv	a1,a0
   26070:	03200613          	addi	a2,zero,50
   26074:	0020                	c.addi4spn	s0,sp,8
   26076:	8522                	c.mv	a0,s0
   26078:	87af60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   2607c:	8522                	c.mv	a0,s0
   2607e:	d9ff60ef          	jal	ra,1ce1c <dwarf::value::as_uconstant() const>
   26082:	2501                	c.addiw	a0,0
   26084:	70a2                	c.ldsp	ra,40(sp)
   26086:	7402                	c.ldsp	s0,32(sp)
   26088:	6145                	c.addi16sp	sp,48
   2608a:	8082                	c.jr	ra

000000000002608c <dwarf::at_artificial(dwarf::die const&)>:
// XXX const address_class
AT_FLAG(artificial);
   2608c:	7179                	c.addi16sp	sp,-48
   2608e:	f406                	c.sdsp	ra,40(sp)
   26090:	f022                	c.sdsp	s0,32(sp)
   26092:	85aa                	c.mv	a1,a0
   26094:	03400613          	addi	a2,zero,52
   26098:	0020                	c.addi4spn	s0,sp,8
   2609a:	8522                	c.mv	a0,s0
   2609c:	856f60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   260a0:	8522                	c.mv	a0,s0
   260a2:	877f70ef          	jal	ra,1d918 <dwarf::value::as_flag() const>
   260a6:	70a2                	c.ldsp	ra,40(sp)
   260a8:	7402                	c.ldsp	s0,32(sp)
   260aa:	6145                	c.addi16sp	sp,48
   260ac:	8082                	c.jr	ra

00000000000260ae <dwarf::at_calling_convention(dwarf::die const&)>:
// XXX base_types
AT_ENUM(calling_convention, DW_CC);
   260ae:	7179                	c.addi16sp	sp,-48
   260b0:	f406                	c.sdsp	ra,40(sp)
   260b2:	f022                	c.sdsp	s0,32(sp)
   260b4:	85aa                	c.mv	a1,a0
   260b6:	03600613          	addi	a2,zero,54
   260ba:	0020                	c.addi4spn	s0,sp,8
   260bc:	8522                	c.mv	a0,s0
   260be:	834f60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   260c2:	8522                	c.mv	a0,s0
   260c4:	d59f60ef          	jal	ra,1ce1c <dwarf::value::as_uconstant() const>
   260c8:	2501                	c.addiw	a0,0
   260ca:	70a2                	c.ldsp	ra,40(sp)
   260cc:	7402                	c.ldsp	s0,32(sp)
   260ce:	6145                	c.addi16sp	sp,48
   260d0:	8082                	c.jr	ra

00000000000260d2 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)>:
AT_UDYNAMIC(count);
expr_result at_data_member_location(const die &d, expr_context *ctx, taddr base,
                                    taddr pc) {
   260d2:	7135                	c.addi16sp	sp,-160
   260d4:	ed06                	c.sdsp	ra,152(sp)
   260d6:	e922                	c.sdsp	s0,144(sp)
   260d8:	e526                	c.sdsp	s1,136(sp)
   260da:	e14a                	c.sdsp	s2,128(sp)
   260dc:	fcce                	c.sdsp	s3,120(sp)
   260de:	842a                	c.mv	s0,a0
   260e0:	8932                	c.mv	s2,a2
   260e2:	84b6                	c.mv	s1,a3
  value v(d[DW_AT::data_member_location]);
   260e4:	03800613          	addi	a2,zero,56
   260e8:	0088                	c.addi4spn	a0,sp,64
   260ea:	808f60ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
  type get_type() const { return typ; }
   260ee:	47b6                	c.lwsp	a5,76(sp)
  switch (v.get_type()) {
   260f0:	4719                	c.li	a4,6
   260f2:	04e78b63          	beq	a5,a4,26148 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x76>
   260f6:	02f74b63          	blt	a4,a5,2612c <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x5a>
   260fa:	37f5                	c.addiw	a5,-3
   260fc:	4705                	c.li	a4,1
   260fe:	06f76d63          	bltu	a4,a5,26178 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xa6>
  case value::type::constant:
  case value::type::uconstant:
    return {expr_result::type::address, base + v.as_uconstant()};
   26102:	00043023          	sd	zero,0(s0)
   26106:	00043423          	sd	zero,8(s0)
   2610a:	00043823          	sd	zero,16(s0)
   2610e:	00043c23          	sd	zero,24(s0)
   26112:	0088                	c.addi4spn	a0,sp,64
   26114:	d09f60ef          	jal	ra,1ce1c <dwarf::value::as_uconstant() const>
   26118:	94aa                	c.add	s1,a0
   2611a:	e404                	c.sd	s1,8(s0)
    throw std::runtime_error("not implemented");
  default:
    throw format_error("DW_AT_data_member_location has unexpected type " +
                       to_string(v.get_type()));
  }
}
   2611c:	8522                	c.mv	a0,s0
   2611e:	60ea                	c.ldsp	ra,152(sp)
   26120:	644a                	c.ldsp	s0,144(sp)
   26122:	64aa                	c.ldsp	s1,136(sp)
   26124:	690a                	c.ldsp	s2,128(sp)
   26126:	79e6                	c.ldsp	s3,120(sp)
   26128:	610d                	c.addi16sp	sp,160
   2612a:	8082                	c.jr	ra
  switch (v.get_type()) {
   2612c:	4725                	c.li	a4,9
   2612e:	04e79563          	bne	a5,a4,26178 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xa6>
    throw std::runtime_error("not implemented");
   26132:	4541                	c.li	a0,16
   26134:	d5cf00ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   26138:	842a                	c.mv	s0,a0
   2613a:	00009597          	auipc	a1,0x9
   2613e:	f6658593          	addi	a1,a1,-154 # 2f0a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x70>
   26142:	d1ef00ef          	jal	ra,16660 <std::runtime_error::runtime_error(char const*)@plt>
   26146:	a831                	c.j	26162 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x90>
    return v.as_exprloc().evaluate(ctx, base);
   26148:	008c                	c.addi4spn	a1,sp,64
   2614a:	05810993          	addi	s3,sp,88
   2614e:	854e                	c.mv	a0,s3
   26150:	c30f70ef          	jal	ra,1d580 <dwarf::value::as_exprloc() const>
   26154:	86a6                	c.mv	a3,s1
   26156:	864a                	c.mv	a2,s2
   26158:	85ce                	c.mv	a1,s3
   2615a:	8522                	c.mv	a0,s0
   2615c:	84efc0ef          	jal	ra,221aa <dwarf::expr::evaluate(dwarf::expr_context*, unsigned long) const>
   26160:	bf75                	c.j	2611c <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x4a>
    throw std::runtime_error("not implemented");
   26162:	00014617          	auipc	a2,0x14
   26166:	2be63603          	ld	a2,702(a2) # 3a420 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   2616a:	00014597          	auipc	a1,0x14
   2616e:	4a65b583          	ld	a1,1190(a1) # 3a610 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   26172:	8522                	c.mv	a0,s0
   26174:	fecf00ef          	jal	ra,16960 <__cxa_throw@plt>
                       to_string(v.get_type()));
   26178:	4541                	c.li	a0,16
   2617a:	d16f00ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2617e:	84aa                	c.mv	s1,a0
   26180:	45b6                	c.lwsp	a1,76(sp)
   26182:	850a                	c.mv	a0,sp
   26184:	615010ef          	jal	ra,27f98 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   26188:	00009617          	auipc	a2,0x9
   2618c:	f2860613          	addi	a2,a2,-216 # 2f0b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x80>
   26190:	4581                	c.li	a1,0
   26192:	850a                	c.mv	a0,sp
   26194:	c6cf00ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   26198:	85aa                	c.mv	a1,a0
   2619a:	1000                	c.addi4spn	s0,sp,32
   2619c:	8522                	c.mv	a0,s0
   2619e:	d32f00ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   261a2:	85a2                	c.mv	a1,s0
   261a4:	8526                	c.mv	a0,s1
   261a6:	e8af00ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   261aa:	00014797          	auipc	a5,0x14
   261ae:	3c67b783          	ld	a5,966(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   261b2:	07c1                	c.addi	a5,16
   261b4:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   261b6:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   261b8:	181c                	c.addi4spn	a5,sp,48
   261ba:	00f50463          	beq	a0,a5,261c2 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xf0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   261be:	de2f00ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   261c2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   261c4:	081c                	c.addi4spn	a5,sp,16
   261c6:	00f50463          	beq	a0,a5,261ce <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xfc>
   261ca:	dd6f00ef          	jal	ra,167a0 <operator delete(void*)@plt>
   261ce:	00014617          	auipc	a2,0x14
   261d2:	1ca63603          	ld	a2,458(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   261d6:	00014597          	auipc	a1,0x14
   261da:	0f25b583          	ld	a1,242(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   261de:	8526                	c.mv	a0,s1
   261e0:	f80f00ef          	jal	ra,16960 <__cxa_throw@plt>
    throw std::runtime_error("not implemented");
   261e4:	84aa                	c.mv	s1,a0
   261e6:	8522                	c.mv	a0,s0
   261e8:	d68f00ef          	jal	ra,16750 <__cxa_free_exception@plt>
   261ec:	8526                	c.mv	a0,s1
   261ee:	fa2f00ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   261f2:	842a                	c.mv	s0,a0
   261f4:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   261f6:	181c                	c.addi4spn	a5,sp,48
   261f8:	00f50463          	beq	a0,a5,26200 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x12e>
   261fc:	da4f00ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26200:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26202:	081c                	c.addi4spn	a5,sp,16
   26204:	00f50463          	beq	a0,a5,2620c <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x13a>
   26208:	d98f00ef          	jal	ra,167a0 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   2620c:	8526                	c.mv	a0,s1
   2620e:	d42f00ef          	jal	ra,16750 <__cxa_free_exception@plt>
   26212:	8522                	c.mv	a0,s0
   26214:	f7cf00ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   26218:	842a                	c.mv	s0,a0
   2621a:	b7dd                	c.j	26200 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x12e>
   2621c:	842a                	c.mv	s0,a0
   2621e:	b7fd                	c.j	2620c <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x13a>

0000000000026220 <dwarf::at_declaration(dwarf::die const&)>:
// XXX decl_column decl_file decl_line
AT_FLAG(declaration);
   26220:	7179                	c.addi16sp	sp,-48
   26222:	f406                	c.sdsp	ra,40(sp)
   26224:	f022                	c.sdsp	s0,32(sp)
   26226:	85aa                	c.mv	a1,a0
   26228:	03c00613          	addi	a2,zero,60
   2622c:	0020                	c.addi4spn	s0,sp,8
   2622e:	8522                	c.mv	a0,s0
   26230:	ec3f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   26234:	8522                	c.mv	a0,s0
   26236:	ee2f70ef          	jal	ra,1d918 <dwarf::value::as_flag() const>
   2623a:	70a2                	c.ldsp	ra,40(sp)
   2623c:	7402                	c.ldsp	s0,32(sp)
   2623e:	6145                	c.addi16sp	sp,48
   26240:	8082                	c.jr	ra

0000000000026242 <dwarf::at_encoding(dwarf::die const&)>:
// XXX discr_list
AT_ENUM(encoding, DW_ATE);
   26242:	7179                	c.addi16sp	sp,-48
   26244:	f406                	c.sdsp	ra,40(sp)
   26246:	f022                	c.sdsp	s0,32(sp)
   26248:	85aa                	c.mv	a1,a0
   2624a:	03e00613          	addi	a2,zero,62
   2624e:	0020                	c.addi4spn	s0,sp,8
   26250:	8522                	c.mv	a0,s0
   26252:	ea1f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   26256:	8522                	c.mv	a0,s0
   26258:	bc5f60ef          	jal	ra,1ce1c <dwarf::value::as_uconstant() const>
   2625c:	2501                	c.addiw	a0,0
   2625e:	70a2                	c.ldsp	ra,40(sp)
   26260:	7402                	c.ldsp	s0,32(sp)
   26262:	6145                	c.addi16sp	sp,48
   26264:	8082                	c.jr	ra

0000000000026266 <dwarf::at_external(dwarf::die const&)>:
AT_FLAG(external);
   26266:	7179                	c.addi16sp	sp,-48
   26268:	f406                	c.sdsp	ra,40(sp)
   2626a:	f022                	c.sdsp	s0,32(sp)
   2626c:	85aa                	c.mv	a1,a0
   2626e:	03f00613          	addi	a2,zero,63
   26272:	0020                	c.addi4spn	s0,sp,8
   26274:	8522                	c.mv	a0,s0
   26276:	e7df50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   2627a:	8522                	c.mv	a0,s0
   2627c:	e9cf70ef          	jal	ra,1d918 <dwarf::value::as_flag() const>
   26280:	70a2                	c.ldsp	ra,40(sp)
   26282:	7402                	c.ldsp	s0,32(sp)
   26284:	6145                	c.addi16sp	sp,48
   26286:	8082                	c.jr	ra

0000000000026288 <dwarf::at_friend(dwarf::die const&)>:
//////////////////////////////////////////////////////////////////
// 0x4X
//

// XXX frame_base
die at_friend(const die &d) { return d[DW_AT::friend_].as_reference(); }
   26288:	7139                	c.addi16sp	sp,-64
   2628a:	fc06                	c.sdsp	ra,56(sp)
   2628c:	f822                	c.sdsp	s0,48(sp)
   2628e:	f426                	c.sdsp	s1,40(sp)
   26290:	842a                	c.mv	s0,a0
   26292:	04100613          	addi	a2,zero,65
   26296:	0024                	c.addi4spn	s1,sp,8
   26298:	8526                	c.mv	a0,s1
   2629a:	e59f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   2629e:	85a6                	c.mv	a1,s1
   262a0:	8522                	c.mv	a0,s0
   262a2:	ca0f80ef          	jal	ra,1e742 <dwarf::value::as_reference() const>
   262a6:	8522                	c.mv	a0,s0
   262a8:	70e2                	c.ldsp	ra,56(sp)
   262aa:	7442                	c.ldsp	s0,48(sp)
   262ac:	74a2                	c.ldsp	s1,40(sp)
   262ae:	6121                	c.addi16sp	sp,64
   262b0:	8082                	c.jr	ra

00000000000262b2 <dwarf::at_identifier_case(dwarf::die const&)>:
AT_ENUM(identifier_case, DW_ID);
   262b2:	7179                	c.addi16sp	sp,-48
   262b4:	f406                	c.sdsp	ra,40(sp)
   262b6:	f022                	c.sdsp	s0,32(sp)
   262b8:	85aa                	c.mv	a1,a0
   262ba:	04200613          	addi	a2,zero,66
   262be:	0020                	c.addi4spn	s0,sp,8
   262c0:	8522                	c.mv	a0,s0
   262c2:	e31f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   262c6:	8522                	c.mv	a0,s0
   262c8:	b55f60ef          	jal	ra,1ce1c <dwarf::value::as_uconstant() const>
   262cc:	2501                	c.addiw	a0,0
   262ce:	70a2                	c.ldsp	ra,40(sp)
   262d0:	7402                	c.ldsp	s0,32(sp)
   262d2:	6145                	c.addi16sp	sp,48
   262d4:	8082                	c.jr	ra

00000000000262d6 <dwarf::at_namelist_item(dwarf::die const&)>:
// XXX macro_info
AT_REFERENCE(namelist_item);
   262d6:	7139                	c.addi16sp	sp,-64
   262d8:	fc06                	c.sdsp	ra,56(sp)
   262da:	f822                	c.sdsp	s0,48(sp)
   262dc:	f426                	c.sdsp	s1,40(sp)
   262de:	842a                	c.mv	s0,a0
   262e0:	04400613          	addi	a2,zero,68
   262e4:	0024                	c.addi4spn	s1,sp,8
   262e6:	8526                	c.mv	a0,s1
   262e8:	e0bf50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   262ec:	85a6                	c.mv	a1,s1
   262ee:	8522                	c.mv	a0,s0
   262f0:	c52f80ef          	jal	ra,1e742 <dwarf::value::as_reference() const>
   262f4:	8522                	c.mv	a0,s0
   262f6:	70e2                	c.ldsp	ra,56(sp)
   262f8:	7442                	c.ldsp	s0,48(sp)
   262fa:	74a2                	c.ldsp	s1,40(sp)
   262fc:	6121                	c.addi16sp	sp,64
   262fe:	8082                	c.jr	ra

0000000000026300 <dwarf::at_priority(dwarf::die const&)>:
AT_REFERENCE(priority); // XXX Computed might be useful
   26300:	7139                	c.addi16sp	sp,-64
   26302:	fc06                	c.sdsp	ra,56(sp)
   26304:	f822                	c.sdsp	s0,48(sp)
   26306:	f426                	c.sdsp	s1,40(sp)
   26308:	842a                	c.mv	s0,a0
   2630a:	04500613          	addi	a2,zero,69
   2630e:	0024                	c.addi4spn	s1,sp,8
   26310:	8526                	c.mv	a0,s1
   26312:	de1f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   26316:	85a6                	c.mv	a1,s1
   26318:	8522                	c.mv	a0,s0
   2631a:	c28f80ef          	jal	ra,1e742 <dwarf::value::as_reference() const>
   2631e:	8522                	c.mv	a0,s0
   26320:	70e2                	c.ldsp	ra,56(sp)
   26322:	7442                	c.ldsp	s0,48(sp)
   26324:	74a2                	c.ldsp	s1,40(sp)
   26326:	6121                	c.addi16sp	sp,64
   26328:	8082                	c.jr	ra

000000000002632a <dwarf::at_specification(dwarf::die const&)>:
// XXX segment
AT_REFERENCE(specification);
   2632a:	7139                	c.addi16sp	sp,-64
   2632c:	fc06                	c.sdsp	ra,56(sp)
   2632e:	f822                	c.sdsp	s0,48(sp)
   26330:	f426                	c.sdsp	s1,40(sp)
   26332:	842a                	c.mv	s0,a0
   26334:	04700613          	addi	a2,zero,71
   26338:	0024                	c.addi4spn	s1,sp,8
   2633a:	8526                	c.mv	a0,s1
   2633c:	db7f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   26340:	85a6                	c.mv	a1,s1
   26342:	8522                	c.mv	a0,s0
   26344:	bfef80ef          	jal	ra,1e742 <dwarf::value::as_reference() const>
   26348:	8522                	c.mv	a0,s0
   2634a:	70e2                	c.ldsp	ra,56(sp)
   2634c:	7442                	c.ldsp	s0,48(sp)
   2634e:	74a2                	c.ldsp	s1,40(sp)
   26350:	6121                	c.addi16sp	sp,64
   26352:	8082                	c.jr	ra

0000000000026354 <dwarf::at_type(dwarf::die const&)>:
// XXX static_link
AT_REFERENCE(type);
   26354:	7139                	c.addi16sp	sp,-64
   26356:	fc06                	c.sdsp	ra,56(sp)
   26358:	f822                	c.sdsp	s0,48(sp)
   2635a:	f426                	c.sdsp	s1,40(sp)
   2635c:	842a                	c.mv	s0,a0
   2635e:	04900613          	addi	a2,zero,73
   26362:	0024                	c.addi4spn	s1,sp,8
   26364:	8526                	c.mv	a0,s1
   26366:	d8df50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   2636a:	85a6                	c.mv	a1,s1
   2636c:	8522                	c.mv	a0,s0
   2636e:	bd4f80ef          	jal	ra,1e742 <dwarf::value::as_reference() const>
   26372:	8522                	c.mv	a0,s0
   26374:	70e2                	c.ldsp	ra,56(sp)
   26376:	7442                	c.ldsp	s0,48(sp)
   26378:	74a2                	c.ldsp	s1,40(sp)
   2637a:	6121                	c.addi16sp	sp,64
   2637c:	8082                	c.jr	ra

000000000002637e <dwarf::at_variable_parameter(dwarf::die const&)>:
// XXX use_location
AT_FLAG(variable_parameter);
   2637e:	7179                	c.addi16sp	sp,-48
   26380:	f406                	c.sdsp	ra,40(sp)
   26382:	f022                	c.sdsp	s0,32(sp)
   26384:	85aa                	c.mv	a1,a0
   26386:	04b00613          	addi	a2,zero,75
   2638a:	0020                	c.addi4spn	s0,sp,8
   2638c:	8522                	c.mv	a0,s0
   2638e:	d65f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   26392:	8522                	c.mv	a0,s0
   26394:	d84f70ef          	jal	ra,1d918 <dwarf::value::as_flag() const>
   26398:	70a2                	c.ldsp	ra,40(sp)
   2639a:	7402                	c.ldsp	s0,32(sp)
   2639c:	6145                	c.addi16sp	sp,48
   2639e:	8082                	c.jr	ra

00000000000263a0 <dwarf::at_virtuality(dwarf::die const&)>:
// XXX 7.11 The value DW_VIRTUALITY_none is equivalent to the absence
// of the DW_AT_virtuality attribute.
AT_ENUM(virtuality, DW_VIRTUALITY);
   263a0:	7179                	c.addi16sp	sp,-48
   263a2:	f406                	c.sdsp	ra,40(sp)
   263a4:	f022                	c.sdsp	s0,32(sp)
   263a6:	85aa                	c.mv	a1,a0
   263a8:	04c00613          	addi	a2,zero,76
   263ac:	0020                	c.addi4spn	s0,sp,8
   263ae:	8522                	c.mv	a0,s0
   263b0:	d43f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   263b4:	8522                	c.mv	a0,s0
   263b6:	a67f60ef          	jal	ra,1ce1c <dwarf::value::as_uconstant() const>
   263ba:	2501                	c.addiw	a0,0
   263bc:	70a2                	c.ldsp	ra,40(sp)
   263be:	7402                	c.ldsp	s0,32(sp)
   263c0:	6145                	c.addi16sp	sp,48
   263c2:	8082                	c.jr	ra

00000000000263c4 <dwarf::at_entry_pc(dwarf::die const&)>:
// 0x5X
//

// XXX data_location
AT_UDYNAMIC(byte_stride);
AT_ADDRESS(entry_pc);
   263c4:	7179                	c.addi16sp	sp,-48
   263c6:	f406                	c.sdsp	ra,40(sp)
   263c8:	f022                	c.sdsp	s0,32(sp)
   263ca:	85aa                	c.mv	a1,a0
   263cc:	05200613          	addi	a2,zero,82
   263d0:	0020                	c.addi4spn	s0,sp,8
   263d2:	8522                	c.mv	a0,s0
   263d4:	d1ff50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   263d8:	8522                	c.mv	a0,s0
   263da:	c42f60ef          	jal	ra,1c81c <dwarf::value::as_address() const>
   263de:	70a2                	c.ldsp	ra,40(sp)
   263e0:	7402                	c.ldsp	s0,32(sp)
   263e2:	6145                	c.addi16sp	sp,48
   263e4:	8082                	c.jr	ra

00000000000263e6 <dwarf::at_use_UTF8(dwarf::die const&)>:
AT_FLAG(use_UTF8);
   263e6:	7179                	c.addi16sp	sp,-48
   263e8:	f406                	c.sdsp	ra,40(sp)
   263ea:	f022                	c.sdsp	s0,32(sp)
   263ec:	85aa                	c.mv	a1,a0
   263ee:	05300613          	addi	a2,zero,83
   263f2:	0020                	c.addi4spn	s0,sp,8
   263f4:	8522                	c.mv	a0,s0
   263f6:	cfdf50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   263fa:	8522                	c.mv	a0,s0
   263fc:	d1cf70ef          	jal	ra,1d918 <dwarf::value::as_flag() const>
   26400:	70a2                	c.ldsp	ra,40(sp)
   26402:	7402                	c.ldsp	s0,32(sp)
   26404:	6145                	c.addi16sp	sp,48
   26406:	8082                	c.jr	ra

0000000000026408 <dwarf::at_extension(dwarf::die const&)>:
AT_REFERENCE(extension);
   26408:	7139                	c.addi16sp	sp,-64
   2640a:	fc06                	c.sdsp	ra,56(sp)
   2640c:	f822                	c.sdsp	s0,48(sp)
   2640e:	f426                	c.sdsp	s1,40(sp)
   26410:	842a                	c.mv	s0,a0
   26412:	05400613          	addi	a2,zero,84
   26416:	0024                	c.addi4spn	s1,sp,8
   26418:	8526                	c.mv	a0,s1
   2641a:	cd9f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   2641e:	85a6                	c.mv	a1,s1
   26420:	8522                	c.mv	a0,s0
   26422:	b20f80ef          	jal	ra,1e742 <dwarf::value::as_reference() const>
   26426:	8522                	c.mv	a0,s0
   26428:	70e2                	c.ldsp	ra,56(sp)
   2642a:	7442                	c.ldsp	s0,48(sp)
   2642c:	74a2                	c.ldsp	s1,40(sp)
   2642e:	6121                	c.addi16sp	sp,64
   26430:	8082                	c.jr	ra

0000000000026432 <dwarf::at_ranges(dwarf::die const&)>:
rangelist at_ranges(const die &d) { return d[DW_AT::ranges].as_rangelist(); }
   26432:	7139                	c.addi16sp	sp,-64
   26434:	fc06                	c.sdsp	ra,56(sp)
   26436:	f822                	c.sdsp	s0,48(sp)
   26438:	f426                	c.sdsp	s1,40(sp)
   2643a:	842a                	c.mv	s0,a0
   2643c:	05500613          	addi	a2,zero,85
   26440:	0024                	c.addi4spn	s1,sp,8
   26442:	8526                	c.mv	a0,s1
   26444:	caff50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   26448:	85a6                	c.mv	a1,s1
   2644a:	8522                	c.mv	a0,s0
   2644c:	834f80ef          	jal	ra,1e480 <dwarf::value::as_rangelist() const>
   26450:	8522                	c.mv	a0,s0
   26452:	70e2                	c.ldsp	ra,56(sp)
   26454:	7442                	c.ldsp	s0,48(sp)
   26456:	74a2                	c.ldsp	s1,40(sp)
   26458:	6121                	c.addi16sp	sp,64
   2645a:	8082                	c.jr	ra

000000000002645c <dwarf::at_description[abi:cxx11](dwarf::die const&)>:
// XXX trampoline
// XXX const call_column, call_file, call_line
AT_STRING(description);
   2645c:	7139                	c.addi16sp	sp,-64
   2645e:	fc06                	c.sdsp	ra,56(sp)
   26460:	f822                	c.sdsp	s0,48(sp)
   26462:	f426                	c.sdsp	s1,40(sp)
   26464:	842a                	c.mv	s0,a0
   26466:	05a00613          	addi	a2,zero,90
   2646a:	0024                	c.addi4spn	s1,sp,8
   2646c:	8526                	c.mv	a0,s1
   2646e:	c85f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   26472:	85a6                	c.mv	a1,s1
   26474:	8522                	c.mv	a0,s0
   26476:	a88f80ef          	jal	ra,1e6fe <dwarf::value::as_string[abi:cxx11]() const>
   2647a:	8522                	c.mv	a0,s0
   2647c:	70e2                	c.ldsp	ra,56(sp)
   2647e:	7442                	c.ldsp	s0,48(sp)
   26480:	74a2                	c.ldsp	s1,40(sp)
   26482:	6121                	c.addi16sp	sp,64
   26484:	8082                	c.jr	ra

0000000000026486 <dwarf::at_small(dwarf::die const&)>:
// XXX const binary_scale
// XXX const decimal_scale
AT_REFERENCE(small);
   26486:	7139                	c.addi16sp	sp,-64
   26488:	fc06                	c.sdsp	ra,56(sp)
   2648a:	f822                	c.sdsp	s0,48(sp)
   2648c:	f426                	c.sdsp	s1,40(sp)
   2648e:	842a                	c.mv	s0,a0
   26490:	05d00613          	addi	a2,zero,93
   26494:	0024                	c.addi4spn	s1,sp,8
   26496:	8526                	c.mv	a0,s1
   26498:	c5bf50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   2649c:	85a6                	c.mv	a1,s1
   2649e:	8522                	c.mv	a0,s0
   264a0:	aa2f80ef          	jal	ra,1e742 <dwarf::value::as_reference() const>
   264a4:	8522                	c.mv	a0,s0
   264a6:	70e2                	c.ldsp	ra,56(sp)
   264a8:	7442                	c.ldsp	s0,48(sp)
   264aa:	74a2                	c.ldsp	s1,40(sp)
   264ac:	6121                	c.addi16sp	sp,64
   264ae:	8082                	c.jr	ra

00000000000264b0 <dwarf::at_picture_string[abi:cxx11](dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x6X
//

AT_STRING(picture_string);
   264b0:	7139                	c.addi16sp	sp,-64
   264b2:	fc06                	c.sdsp	ra,56(sp)
   264b4:	f822                	c.sdsp	s0,48(sp)
   264b6:	f426                	c.sdsp	s1,40(sp)
   264b8:	842a                	c.mv	s0,a0
   264ba:	06000613          	addi	a2,zero,96
   264be:	0024                	c.addi4spn	s1,sp,8
   264c0:	8526                	c.mv	a0,s1
   264c2:	c31f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   264c6:	85a6                	c.mv	a1,s1
   264c8:	8522                	c.mv	a0,s0
   264ca:	a34f80ef          	jal	ra,1e6fe <dwarf::value::as_string[abi:cxx11]() const>
   264ce:	8522                	c.mv	a0,s0
   264d0:	70e2                	c.ldsp	ra,56(sp)
   264d2:	7442                	c.ldsp	s0,48(sp)
   264d4:	74a2                	c.ldsp	s1,40(sp)
   264d6:	6121                	c.addi16sp	sp,64
   264d8:	8082                	c.jr	ra

00000000000264da <dwarf::at_mutable(dwarf::die const&)>:
AT_FLAG_(mutable);
   264da:	7179                	c.addi16sp	sp,-48
   264dc:	f406                	c.sdsp	ra,40(sp)
   264de:	f022                	c.sdsp	s0,32(sp)
   264e0:	85aa                	c.mv	a1,a0
   264e2:	06100613          	addi	a2,zero,97
   264e6:	0020                	c.addi4spn	s0,sp,8
   264e8:	8522                	c.mv	a0,s0
   264ea:	c09f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   264ee:	8522                	c.mv	a0,s0
   264f0:	c28f70ef          	jal	ra,1d918 <dwarf::value::as_flag() const>
   264f4:	70a2                	c.ldsp	ra,40(sp)
   264f6:	7402                	c.ldsp	s0,32(sp)
   264f8:	6145                	c.addi16sp	sp,48
   264fa:	8082                	c.jr	ra

00000000000264fc <dwarf::at_threads_scaled(dwarf::die const&)>:
AT_FLAG(threads_scaled);
   264fc:	7179                	c.addi16sp	sp,-48
   264fe:	f406                	c.sdsp	ra,40(sp)
   26500:	f022                	c.sdsp	s0,32(sp)
   26502:	85aa                	c.mv	a1,a0
   26504:	06200613          	addi	a2,zero,98
   26508:	0020                	c.addi4spn	s0,sp,8
   2650a:	8522                	c.mv	a0,s0
   2650c:	be7f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   26510:	8522                	c.mv	a0,s0
   26512:	c06f70ef          	jal	ra,1d918 <dwarf::value::as_flag() const>
   26516:	70a2                	c.ldsp	ra,40(sp)
   26518:	7402                	c.ldsp	s0,32(sp)
   2651a:	6145                	c.addi16sp	sp,48
   2651c:	8082                	c.jr	ra

000000000002651e <dwarf::at_explicit(dwarf::die const&)>:
AT_FLAG_(explicit);
   2651e:	7179                	c.addi16sp	sp,-48
   26520:	f406                	c.sdsp	ra,40(sp)
   26522:	f022                	c.sdsp	s0,32(sp)
   26524:	85aa                	c.mv	a1,a0
   26526:	06300613          	addi	a2,zero,99
   2652a:	0020                	c.addi4spn	s0,sp,8
   2652c:	8522                	c.mv	a0,s0
   2652e:	bc5f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   26532:	8522                	c.mv	a0,s0
   26534:	be4f70ef          	jal	ra,1d918 <dwarf::value::as_flag() const>
   26538:	70a2                	c.ldsp	ra,40(sp)
   2653a:	7402                	c.ldsp	s0,32(sp)
   2653c:	6145                	c.addi16sp	sp,48
   2653e:	8082                	c.jr	ra

0000000000026540 <dwarf::at_object_pointer(dwarf::die const&)>:
AT_REFERENCE(object_pointer);
   26540:	7139                	c.addi16sp	sp,-64
   26542:	fc06                	c.sdsp	ra,56(sp)
   26544:	f822                	c.sdsp	s0,48(sp)
   26546:	f426                	c.sdsp	s1,40(sp)
   26548:	842a                	c.mv	s0,a0
   2654a:	06400613          	addi	a2,zero,100
   2654e:	0024                	c.addi4spn	s1,sp,8
   26550:	8526                	c.mv	a0,s1
   26552:	ba1f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   26556:	85a6                	c.mv	a1,s1
   26558:	8522                	c.mv	a0,s0
   2655a:	9e8f80ef          	jal	ra,1e742 <dwarf::value::as_reference() const>
   2655e:	8522                	c.mv	a0,s0
   26560:	70e2                	c.ldsp	ra,56(sp)
   26562:	7442                	c.ldsp	s0,48(sp)
   26564:	74a2                	c.ldsp	s1,40(sp)
   26566:	6121                	c.addi16sp	sp,64
   26568:	8082                	c.jr	ra

000000000002656a <dwarf::at_endianity(dwarf::die const&)>:
AT_ENUM(endianity, DW_END);
   2656a:	7179                	c.addi16sp	sp,-48
   2656c:	f406                	c.sdsp	ra,40(sp)
   2656e:	f022                	c.sdsp	s0,32(sp)
   26570:	85aa                	c.mv	a1,a0
   26572:	06500613          	addi	a2,zero,101
   26576:	0020                	c.addi4spn	s0,sp,8
   26578:	8522                	c.mv	a0,s0
   2657a:	b79f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   2657e:	8522                	c.mv	a0,s0
   26580:	89df60ef          	jal	ra,1ce1c <dwarf::value::as_uconstant() const>
   26584:	2501                	c.addiw	a0,0
   26586:	70a2                	c.ldsp	ra,40(sp)
   26588:	7402                	c.ldsp	s0,32(sp)
   2658a:	6145                	c.addi16sp	sp,48
   2658c:	8082                	c.jr	ra

000000000002658e <dwarf::at_elemental(dwarf::die const&)>:
AT_FLAG(elemental);
   2658e:	7179                	c.addi16sp	sp,-48
   26590:	f406                	c.sdsp	ra,40(sp)
   26592:	f022                	c.sdsp	s0,32(sp)
   26594:	85aa                	c.mv	a1,a0
   26596:	06600613          	addi	a2,zero,102
   2659a:	0020                	c.addi4spn	s0,sp,8
   2659c:	8522                	c.mv	a0,s0
   2659e:	b55f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   265a2:	8522                	c.mv	a0,s0
   265a4:	b74f70ef          	jal	ra,1d918 <dwarf::value::as_flag() const>
   265a8:	70a2                	c.ldsp	ra,40(sp)
   265aa:	7402                	c.ldsp	s0,32(sp)
   265ac:	6145                	c.addi16sp	sp,48
   265ae:	8082                	c.jr	ra

00000000000265b0 <dwarf::at_pure(dwarf::die const&)>:
AT_FLAG(pure);
   265b0:	7179                	c.addi16sp	sp,-48
   265b2:	f406                	c.sdsp	ra,40(sp)
   265b4:	f022                	c.sdsp	s0,32(sp)
   265b6:	85aa                	c.mv	a1,a0
   265b8:	06700613          	addi	a2,zero,103
   265bc:	0020                	c.addi4spn	s0,sp,8
   265be:	8522                	c.mv	a0,s0
   265c0:	b33f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   265c4:	8522                	c.mv	a0,s0
   265c6:	b52f70ef          	jal	ra,1d918 <dwarf::value::as_flag() const>
   265ca:	70a2                	c.ldsp	ra,40(sp)
   265cc:	7402                	c.ldsp	s0,32(sp)
   265ce:	6145                	c.addi16sp	sp,48
   265d0:	8082                	c.jr	ra

00000000000265d2 <dwarf::at_recursive(dwarf::die const&)>:
AT_FLAG(recursive);
   265d2:	7179                	c.addi16sp	sp,-48
   265d4:	f406                	c.sdsp	ra,40(sp)
   265d6:	f022                	c.sdsp	s0,32(sp)
   265d8:	85aa                	c.mv	a1,a0
   265da:	06800613          	addi	a2,zero,104
   265de:	0020                	c.addi4spn	s0,sp,8
   265e0:	8522                	c.mv	a0,s0
   265e2:	b11f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   265e6:	8522                	c.mv	a0,s0
   265e8:	b30f70ef          	jal	ra,1d918 <dwarf::value::as_flag() const>
   265ec:	70a2                	c.ldsp	ra,40(sp)
   265ee:	7402                	c.ldsp	s0,32(sp)
   265f0:	6145                	c.addi16sp	sp,48
   265f2:	8082                	c.jr	ra

00000000000265f4 <dwarf::at_signature(dwarf::die const&)>:
AT_REFERENCE(signature); // XXX Computed might be useful
   265f4:	7139                	c.addi16sp	sp,-64
   265f6:	fc06                	c.sdsp	ra,56(sp)
   265f8:	f822                	c.sdsp	s0,48(sp)
   265fa:	f426                	c.sdsp	s1,40(sp)
   265fc:	842a                	c.mv	s0,a0
   265fe:	06900613          	addi	a2,zero,105
   26602:	0024                	c.addi4spn	s1,sp,8
   26604:	8526                	c.mv	a0,s1
   26606:	aedf50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   2660a:	85a6                	c.mv	a1,s1
   2660c:	8522                	c.mv	a0,s0
   2660e:	934f80ef          	jal	ra,1e742 <dwarf::value::as_reference() const>
   26612:	8522                	c.mv	a0,s0
   26614:	70e2                	c.ldsp	ra,56(sp)
   26616:	7442                	c.ldsp	s0,48(sp)
   26618:	74a2                	c.ldsp	s1,40(sp)
   2661a:	6121                	c.addi16sp	sp,64
   2661c:	8082                	c.jr	ra

000000000002661e <dwarf::at_main_subprogram(dwarf::die const&)>:
AT_FLAG(main_subprogram);
   2661e:	7179                	c.addi16sp	sp,-48
   26620:	f406                	c.sdsp	ra,40(sp)
   26622:	f022                	c.sdsp	s0,32(sp)
   26624:	85aa                	c.mv	a1,a0
   26626:	06a00613          	addi	a2,zero,106
   2662a:	0020                	c.addi4spn	s0,sp,8
   2662c:	8522                	c.mv	a0,s0
   2662e:	ac5f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   26632:	8522                	c.mv	a0,s0
   26634:	ae4f70ef          	jal	ra,1d918 <dwarf::value::as_flag() const>
   26638:	70a2                	c.ldsp	ra,40(sp)
   2663a:	7402                	c.ldsp	s0,32(sp)
   2663c:	6145                	c.addi16sp	sp,48
   2663e:	8082                	c.jr	ra

0000000000026640 <dwarf::at_const_expr(dwarf::die const&)>:
// XXX const data_bit_offset
AT_FLAG(const_expr);
   26640:	7179                	c.addi16sp	sp,-48
   26642:	f406                	c.sdsp	ra,40(sp)
   26644:	f022                	c.sdsp	s0,32(sp)
   26646:	85aa                	c.mv	a1,a0
   26648:	06c00613          	addi	a2,zero,108
   2664c:	0020                	c.addi4spn	s0,sp,8
   2664e:	8522                	c.mv	a0,s0
   26650:	aa3f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   26654:	8522                	c.mv	a0,s0
   26656:	ac2f70ef          	jal	ra,1d918 <dwarf::value::as_flag() const>
   2665a:	70a2                	c.ldsp	ra,40(sp)
   2665c:	7402                	c.ldsp	s0,32(sp)
   2665e:	6145                	c.addi16sp	sp,48
   26660:	8082                	c.jr	ra

0000000000026662 <dwarf::at_enum_class(dwarf::die const&)>:
AT_FLAG(enum_class);
   26662:	7179                	c.addi16sp	sp,-48
   26664:	f406                	c.sdsp	ra,40(sp)
   26666:	f022                	c.sdsp	s0,32(sp)
   26668:	85aa                	c.mv	a1,a0
   2666a:	06d00613          	addi	a2,zero,109
   2666e:	0020                	c.addi4spn	s0,sp,8
   26670:	8522                	c.mv	a0,s0
   26672:	a81f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   26676:	8522                	c.mv	a0,s0
   26678:	aa0f70ef          	jal	ra,1d918 <dwarf::value::as_flag() const>
   2667c:	70a2                	c.ldsp	ra,40(sp)
   2667e:	7402                	c.ldsp	s0,32(sp)
   26680:	6145                	c.addi16sp	sp,48
   26682:	8082                	c.jr	ra

0000000000026684 <dwarf::at_linkage_name[abi:cxx11](dwarf::die const&)>:
AT_STRING(linkage_name);
   26684:	7139                	c.addi16sp	sp,-64
   26686:	fc06                	c.sdsp	ra,56(sp)
   26688:	f822                	c.sdsp	s0,48(sp)
   2668a:	f426                	c.sdsp	s1,40(sp)
   2668c:	842a                	c.mv	s0,a0
   2668e:	06e00613          	addi	a2,zero,110
   26692:	0024                	c.addi4spn	s1,sp,8
   26694:	8526                	c.mv	a0,s1
   26696:	a5df50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
   2669a:	85a6                	c.mv	a1,s1
   2669c:	8522                	c.mv	a0,s0
   2669e:	860f80ef          	jal	ra,1e6fe <dwarf::value::as_string[abi:cxx11]() const>
   266a2:	8522                	c.mv	a0,s0
   266a4:	70e2                	c.ldsp	ra,56(sp)
   266a6:	7442                	c.ldsp	s0,48(sp)
   266a8:	74a2                	c.ldsp	s1,40(sp)
   266aa:	6121                	c.addi16sp	sp,64
   266ac:	8082                	c.jr	ra

00000000000266ae <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>:
                             int depth = 0) {
   266ae:	7169                	c.addi16sp	sp,-304
   266b0:	f606                	c.sdsp	ra,296(sp)
   266b2:	f222                	c.sdsp	s0,288(sp)
   266b4:	ee26                	c.sdsp	s1,280(sp)
   266b6:	ea4a                	c.sdsp	s2,272(sp)
   266b8:	e64e                	c.sdsp	s3,264(sp)
   266ba:	842a                	c.mv	s0,a0
  if (depth > 16)
   266bc:	47c1                	c.li	a5,16
   266be:	02d7cf63          	blt	a5,a3,266fc <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x4e>
   266c2:	8932                	c.mv	s2,a2
   266c4:	84b6                	c.mv	s1,a3
  value v(d[attr]);
   266c6:	862a                	c.mv	a2,a0
   266c8:	0988                	c.addi4spn	a0,sp,208
   266ca:	a29f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
  type get_type() const { return typ; }
   266ce:	47fe                	c.lwsp	a5,220(sp)
  switch (v.get_type()) {
   266d0:	4719                	c.li	a4,6
   266d2:	0ce78c63          	beq	a5,a4,267aa <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xfc>
   266d6:	08f75963          	bge	a4,a5,26768 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xba>
   266da:	4731                	c.li	a4,12
   266dc:	0ee79363          	bne	a5,a4,267c2 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x114>
    return _at_udynamic(attr, v.as_reference(), ctx, depth + 1);
   266e0:	098c                	c.addi4spn	a1,sp,208
   266e2:	06010993          	addi	s3,sp,96
   266e6:	854e                	c.mv	a0,s3
   266e8:	85af80ef          	jal	ra,1e742 <dwarf::value::as_reference() const>
   266ec:	0014869b          	addiw	a3,s1,1
   266f0:	864a                	c.mv	a2,s2
   266f2:	85ce                	c.mv	a1,s3
   266f4:	8522                	c.mv	a0,s0
   266f6:	fb9ff0ef          	jal	ra,266ae <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   266fa:	a079                	c.j	26788 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xda>
    throw format_error("reference depth exceeded for " + to_string(attr));
   266fc:	4541                	c.li	a0,16
   266fe:	f93ef0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   26702:	84aa                	c.mv	s1,a0
   26704:	85a2                	c.mv	a1,s0
   26706:	0088                	c.addi4spn	a0,sp,64
   26708:	103030ef          	jal	ra,2a00a <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__rhs.insert(0, __lhs)); }
   2670c:	00009617          	auipc	a2,0x9
   26710:	9d460613          	addi	a2,a2,-1580 # 2f0e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb0>
   26714:	4581                	c.li	a1,0
   26716:	0088                	c.addi4spn	a0,sp,64
   26718:	ee9ef0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2671c:	85aa                	c.mv	a1,a0
   2671e:	1080                	c.addi4spn	s0,sp,96
   26720:	8522                	c.mv	a0,s0
   26722:	fafef0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   26726:	85a2                	c.mv	a1,s0
   26728:	8526                	c.mv	a0,s1
   2672a:	906f00ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2672e:	00014797          	auipc	a5,0x14
   26732:	e427b783          	ld	a5,-446(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   26736:	07c1                	c.addi	a5,16
   26738:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   2673a:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   2673c:	189c                	c.addi4spn	a5,sp,112
   2673e:	00f50463          	beq	a0,a5,26746 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x98>
   26742:	85ef00ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26746:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   26748:	089c                	c.addi4spn	a5,sp,80
   2674a:	00f50463          	beq	a0,a5,26752 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xa4>
   2674e:	852f00ef          	jal	ra,167a0 <operator delete(void*)@plt>
   26752:	00014617          	auipc	a2,0x14
   26756:	c4663603          	ld	a2,-954(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   2675a:	00014597          	auipc	a1,0x14
   2675e:	b6e5b583          	ld	a1,-1170(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   26762:	8526                	c.mv	a0,s1
   26764:	9fcf00ef          	jal	ra,16960 <__cxa_throw@plt>
  switch (v.get_type()) {
   26768:	37f5                	c.addiw	a5,-3
   2676a:	4705                	c.li	a4,1
   2676c:	04f76b63          	bltu	a4,a5,267c2 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x114>
    return v.as_uconstant();
   26770:	0988                	c.addi4spn	a0,sp,208
   26772:	eaaf60ef          	jal	ra,1ce1c <dwarf::value::as_uconstant() const>
   26776:	842a                	c.mv	s0,a0
}
   26778:	8522                	c.mv	a0,s0
   2677a:	70b2                	c.ldsp	ra,296(sp)
   2677c:	7412                	c.ldsp	s0,288(sp)
   2677e:	64f2                	c.ldsp	s1,280(sp)
   26780:	6952                	c.ldsp	s2,272(sp)
   26782:	69b2                	c.ldsp	s3,264(sp)
   26784:	6155                	c.addi16sp	sp,304
   26786:	8082                	c.jr	ra
    return _at_udynamic(attr, v.as_reference(), ctx, depth + 1);
   26788:	842a                	c.mv	s0,a0
    for (T *p = base; p < end; ++p)
   2678a:	754a                	c.ldsp	a0,176(sp)
   2678c:	77ea                	c.ldsp	a5,184(sp)
   2678e:	00f57763          	bgeu	a0,a5,2679c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xee>
   26792:	87aa                	c.mv	a5,a0
   26794:	07a1                	c.addi	a5,8
   26796:	776a                	c.ldsp	a4,184(sp)
   26798:	fee7eee3          	bltu	a5,a4,26794 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xe6>
    if ((char *)base != buf)
   2679c:	011c                	c.addi4spn	a5,sp,128
   2679e:	fcf50de3          	beq	a0,a5,26778 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xca>
      delete[] (char *)base;
   267a2:	d979                	c.beqz	a0,26778 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xca>
   267a4:	8acf00ef          	jal	ra,16850 <operator delete[](void*)@plt>
   267a8:	bfc1                	c.j	26778 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xca>
    return v.as_exprloc().evaluate(ctx).value;
   267aa:	098c                	c.addi4spn	a1,sp,208
   267ac:	11a0                	c.addi4spn	s0,sp,232
   267ae:	8522                	c.mv	a0,s0
   267b0:	dd1f60ef          	jal	ra,1d580 <dwarf::value::as_exprloc() const>
   267b4:	864a                	c.mv	a2,s2
   267b6:	85a2                	c.mv	a1,s0
   267b8:	1088                	c.addi4spn	a0,sp,96
   267ba:	9d5fb0ef          	jal	ra,2218e <dwarf::expr::evaluate(dwarf::expr_context*) const>
   267be:	7426                	c.ldsp	s0,104(sp)
   267c0:	bf65                	c.j	26778 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xca>
                       to_string(v.get_type()));
   267c2:	4541                	c.li	a0,16
   267c4:	ecdef0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   267c8:	84aa                	c.mv	s1,a0
    throw format_error(to_string(attr) + " has unexpected type " +
   267ca:	85a2                	c.mv	a1,s0
   267cc:	850a                	c.mv	a0,sp
   267ce:	03d030ef          	jal	ra,2a00a <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__lhs.append(__rhs)); }
   267d2:	00009597          	auipc	a1,0x9
   267d6:	92e58593          	addi	a1,a1,-1746 # 2f100 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd0>
   267da:	850a                	c.mv	a0,sp
   267dc:	a64f00ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   267e0:	85aa                	c.mv	a1,a0
   267e2:	1008                	c.addi4spn	a0,sp,32
   267e4:	eedef0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                       to_string(v.get_type()));
   267e8:	45fe                	c.lwsp	a1,220(sp)
   267ea:	0088                	c.addi4spn	a0,sp,64
   267ec:	7ac010ef          	jal	ra,27f98 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    throw format_error(to_string(attr) + " has unexpected type " +
   267f0:	0090                	c.addi4spn	a2,sp,64
   267f2:	100c                	c.addi4spn	a1,sp,32
   267f4:	1088                	c.addi4spn	a0,sp,96
   267f6:	00014317          	auipc	t1,0x14
   267fa:	be233303          	ld	t1,-1054(t1) # 3a3d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x154d2>
   267fe:	9302                	c.jalr	t1
   26800:	108c                	c.addi4spn	a1,sp,96
   26802:	8526                	c.mv	a0,s1
   26804:	82cf00ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   26808:	00014797          	auipc	a5,0x14
   2680c:	d687b783          	ld	a5,-664(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   26810:	07c1                	c.addi	a5,16
   26812:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   26814:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   26816:	189c                	c.addi4spn	a5,sp,112
   26818:	00f50463          	beq	a0,a5,26820 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x172>
   2681c:	f85ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26820:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   26822:	089c                	c.addi4spn	a5,sp,80
   26824:	00f50463          	beq	a0,a5,2682c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x17e>
   26828:	f79ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2682c:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   2682e:	181c                	c.addi4spn	a5,sp,48
   26830:	00f50463          	beq	a0,a5,26838 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x18a>
   26834:	f6def0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26838:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2683a:	081c                	c.addi4spn	a5,sp,16
   2683c:	00f50463          	beq	a0,a5,26844 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x196>
   26840:	f61ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   26844:	00014617          	auipc	a2,0x14
   26848:	b5463603          	ld	a2,-1196(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   2684c:	00014597          	auipc	a1,0x14
   26850:	a7c5b583          	ld	a1,-1412(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   26854:	8526                	c.mv	a0,s1
   26856:	90af00ef          	jal	ra,16960 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   2685a:	842a                	c.mv	s0,a0
   2685c:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   2685e:	189c                	c.addi4spn	a5,sp,112
   26860:	00f50463          	beq	a0,a5,26868 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1ba>
   26864:	f3def0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26868:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   2686a:	089c                	c.addi4spn	a5,sp,80
   2686c:	00f50463          	beq	a0,a5,26874 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1c6>
   26870:	f31ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
    throw format_error("reference depth exceeded for " + to_string(attr));
   26874:	8526                	c.mv	a0,s1
   26876:	edbef0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2687a:	8522                	c.mv	a0,s0
   2687c:	914f00ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   26880:	842a                	c.mv	s0,a0
   26882:	b7dd                	c.j	26868 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1ba>
   26884:	842a                	c.mv	s0,a0
   26886:	b7fd                	c.j	26874 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1c6>
    for (T *p = base; p < end; ++p)
   26888:	842a                	c.mv	s0,a0
   2688a:	754a                	c.ldsp	a0,176(sp)
   2688c:	87aa                	c.mv	a5,a0
   2688e:	776a                	c.ldsp	a4,184(sp)
   26890:	00e7eb63          	bltu	a5,a4,268a6 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1f8>
    if ((char *)base != buf)
   26894:	011c                	c.addi4spn	a5,sp,128
   26896:	00f50563          	beq	a0,a5,268a0 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1f2>
      delete[] (char *)base;
   2689a:	c119                	c.beqz	a0,268a0 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1f2>
   2689c:	fb5ef0ef          	jal	ra,16850 <operator delete[](void*)@plt>
   268a0:	8522                	c.mv	a0,s0
   268a2:	8eef00ef          	jal	ra,16990 <_Unwind_Resume@plt>
    for (T *p = base; p < end; ++p)
   268a6:	07a1                	c.addi	a5,8
   268a8:	b7dd                	c.j	2688e <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1e0>
   268aa:	842a                	c.mv	s0,a0
   268ac:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   268ae:	189c                	c.addi4spn	a5,sp,112
   268b0:	00f50463          	beq	a0,a5,268b8 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x20a>
   268b4:	eedef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   268b8:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   268ba:	089c                	c.addi4spn	a5,sp,80
   268bc:	00f50463          	beq	a0,a5,268c4 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x216>
   268c0:	ee1ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   268c4:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   268c6:	181c                	c.addi4spn	a5,sp,48
   268c8:	00f50463          	beq	a0,a5,268d0 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x222>
   268cc:	ed5ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   268d0:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   268d2:	081c                	c.addi4spn	a5,sp,16
   268d4:	00f50463          	beq	a0,a5,268dc <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x22e>
   268d8:	ec9ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   268dc:	8526                	c.mv	a0,s1
   268de:	e73ef0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   268e2:	8522                	c.mv	a0,s0
   268e4:	8acf00ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   268e8:	842a                	c.mv	s0,a0
   268ea:	b7f9                	c.j	268b8 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x20a>
   268ec:	842a                	c.mv	s0,a0
   268ee:	bfd9                	c.j	268c4 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x216>
   268f0:	842a                	c.mv	s0,a0
   268f2:	bff9                	c.j	268d0 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x222>
   268f4:	842a                	c.mv	s0,a0
   268f6:	b7dd                	c.j	268dc <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x22e>

00000000000268f8 <dwarf::at_byte_size(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(byte_size);
   268f8:	1141                	c.addi	sp,-16
   268fa:	e406                	c.sdsp	ra,8(sp)
   268fc:	862e                	c.mv	a2,a1
   268fe:	4681                	c.li	a3,0
   26900:	85aa                	c.mv	a1,a0
   26902:	452d                	c.li	a0,11
   26904:	dabff0ef          	jal	ra,266ae <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   26908:	60a2                	c.ldsp	ra,8(sp)
   2690a:	0141                	c.addi	sp,16
   2690c:	8082                	c.jr	ra

000000000002690e <dwarf::at_bit_offset(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(bit_offset);
   2690e:	1141                	c.addi	sp,-16
   26910:	e406                	c.sdsp	ra,8(sp)
   26912:	862e                	c.mv	a2,a1
   26914:	4681                	c.li	a3,0
   26916:	85aa                	c.mv	a1,a0
   26918:	4531                	c.li	a0,12
   2691a:	d95ff0ef          	jal	ra,266ae <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2691e:	60a2                	c.ldsp	ra,8(sp)
   26920:	0141                	c.addi	sp,16
   26922:	8082                	c.jr	ra

0000000000026924 <dwarf::at_bit_size(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(bit_size);
   26924:	1141                	c.addi	sp,-16
   26926:	e406                	c.sdsp	ra,8(sp)
   26928:	862e                	c.mv	a2,a1
   2692a:	4681                	c.li	a3,0
   2692c:	85aa                	c.mv	a1,a0
   2692e:	4535                	c.li	a0,13
   26930:	d7fff0ef          	jal	ra,266ae <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   26934:	60a2                	c.ldsp	ra,8(sp)
   26936:	0141                	c.addi	sp,16
   26938:	8082                	c.jr	ra

000000000002693a <dwarf::at_lower_bound(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(lower_bound); // XXX Language-based default?
   2693a:	1141                	c.addi	sp,-16
   2693c:	e406                	c.sdsp	ra,8(sp)
   2693e:	862e                	c.mv	a2,a1
   26940:	4681                	c.li	a3,0
   26942:	85aa                	c.mv	a1,a0
   26944:	02200513          	addi	a0,zero,34
   26948:	d67ff0ef          	jal	ra,266ae <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2694c:	60a2                	c.ldsp	ra,8(sp)
   2694e:	0141                	c.addi	sp,16
   26950:	8082                	c.jr	ra

0000000000026952 <dwarf::at_bit_stride(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(bit_stride);
   26952:	1141                	c.addi	sp,-16
   26954:	e406                	c.sdsp	ra,8(sp)
   26956:	862e                	c.mv	a2,a1
   26958:	4681                	c.li	a3,0
   2695a:	85aa                	c.mv	a1,a0
   2695c:	02e00513          	addi	a0,zero,46
   26960:	d4fff0ef          	jal	ra,266ae <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   26964:	60a2                	c.ldsp	ra,8(sp)
   26966:	0141                	c.addi	sp,16
   26968:	8082                	c.jr	ra

000000000002696a <dwarf::at_upper_bound(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(upper_bound);
   2696a:	1141                	c.addi	sp,-16
   2696c:	e406                	c.sdsp	ra,8(sp)
   2696e:	862e                	c.mv	a2,a1
   26970:	4681                	c.li	a3,0
   26972:	85aa                	c.mv	a1,a0
   26974:	02f00513          	addi	a0,zero,47
   26978:	d37ff0ef          	jal	ra,266ae <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2697c:	60a2                	c.ldsp	ra,8(sp)
   2697e:	0141                	c.addi	sp,16
   26980:	8082                	c.jr	ra

0000000000026982 <dwarf::at_count(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(count);
   26982:	1141                	c.addi	sp,-16
   26984:	e406                	c.sdsp	ra,8(sp)
   26986:	862e                	c.mv	a2,a1
   26988:	4681                	c.li	a3,0
   2698a:	85aa                	c.mv	a1,a0
   2698c:	03700513          	addi	a0,zero,55
   26990:	d1fff0ef          	jal	ra,266ae <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   26994:	60a2                	c.ldsp	ra,8(sp)
   26996:	0141                	c.addi	sp,16
   26998:	8082                	c.jr	ra

000000000002699a <dwarf::at_allocated(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(allocated);
   2699a:	1141                	c.addi	sp,-16
   2699c:	e406                	c.sdsp	ra,8(sp)
   2699e:	862e                	c.mv	a2,a1
   269a0:	4681                	c.li	a3,0
   269a2:	85aa                	c.mv	a1,a0
   269a4:	04e00513          	addi	a0,zero,78
   269a8:	d07ff0ef          	jal	ra,266ae <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   269ac:	60a2                	c.ldsp	ra,8(sp)
   269ae:	0141                	c.addi	sp,16
   269b0:	8082                	c.jr	ra

00000000000269b2 <dwarf::at_associated(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(associated);
   269b2:	1141                	c.addi	sp,-16
   269b4:	e406                	c.sdsp	ra,8(sp)
   269b6:	862e                	c.mv	a2,a1
   269b8:	4681                	c.li	a3,0
   269ba:	85aa                	c.mv	a1,a0
   269bc:	04f00513          	addi	a0,zero,79
   269c0:	cefff0ef          	jal	ra,266ae <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   269c4:	60a2                	c.ldsp	ra,8(sp)
   269c6:	0141                	c.addi	sp,16
   269c8:	8082                	c.jr	ra

00000000000269ca <dwarf::at_byte_stride(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(byte_stride);
   269ca:	1141                	c.addi	sp,-16
   269cc:	e406                	c.sdsp	ra,8(sp)
   269ce:	862e                	c.mv	a2,a1
   269d0:	4681                	c.li	a3,0
   269d2:	85aa                	c.mv	a1,a0
   269d4:	05100513          	addi	a0,zero,81
   269d8:	cd7ff0ef          	jal	ra,266ae <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   269dc:	60a2                	c.ldsp	ra,8(sp)
   269de:	0141                	c.addi	sp,16
   269e0:	8082                	c.jr	ra

00000000000269e2 <dwarf::at_high_pc(dwarf::die const&)>:
taddr at_high_pc(const die &d) {
   269e2:	7131                	c.addi16sp	sp,-192
   269e4:	fd06                	c.sdsp	ra,184(sp)
   269e6:	f922                	c.sdsp	s0,176(sp)
   269e8:	f526                	c.sdsp	s1,168(sp)
   269ea:	842a                	c.mv	s0,a0
  value v(d[DW_AT::high_pc]);
   269ec:	4649                	c.li	a2,18
   269ee:	85aa                	c.mv	a1,a0
   269f0:	0128                	c.addi4spn	a0,sp,136
   269f2:	f00f50ef          	jal	ra,1c0f2 <dwarf::die::operator[](dwarf::DW_AT) const>
  type get_type() const { return typ; }
   269f6:	47da                	c.lwsp	a5,148(sp)
  switch (v.get_type()) {
   269f8:	4705                	c.li	a4,1
   269fa:	02e78263          	beq	a5,a4,26a1e <dwarf::at_high_pc(dwarf::die const&)+0x3c>
   269fe:	37f5                	c.addiw	a5,-3
   26a00:	02f76363          	bltu	a4,a5,26a26 <dwarf::at_high_pc(dwarf::die const&)+0x44>
    return at_low_pc(d) + v.as_uconstant();
   26a04:	8522                	c.mv	a0,s0
   26a06:	c4aff0ef          	jal	ra,25e50 <dwarf::at_low_pc(dwarf::die const&)>
   26a0a:	842a                	c.mv	s0,a0
   26a0c:	0128                	c.addi4spn	a0,sp,136
   26a0e:	c0ef60ef          	jal	ra,1ce1c <dwarf::value::as_uconstant() const>
   26a12:	9522                	c.add	a0,s0
}
   26a14:	70ea                	c.ldsp	ra,184(sp)
   26a16:	744a                	c.ldsp	s0,176(sp)
   26a18:	74aa                	c.ldsp	s1,168(sp)
   26a1a:	6129                	c.addi16sp	sp,192
   26a1c:	8082                	c.jr	ra
    return v.as_address();
   26a1e:	0128                	c.addi4spn	a0,sp,136
   26a20:	dfdf50ef          	jal	ra,1c81c <dwarf::value::as_address() const>
   26a24:	bfc5                	c.j	26a14 <dwarf::at_high_pc(dwarf::die const&)+0x32>
                       to_string(v.get_type()));
   26a26:	4541                	c.li	a0,16
   26a28:	c69ef0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   26a2c:	84aa                	c.mv	s1,a0
    throw format_error(to_string(DW_AT::high_pc) + " has unexpected type " +
   26a2e:	45c9                	c.li	a1,18
   26a30:	0028                	c.addi4spn	a0,sp,8
   26a32:	5d8030ef          	jal	ra,2a00a <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__lhs.append(__rhs)); }
   26a36:	00008597          	auipc	a1,0x8
   26a3a:	6ca58593          	addi	a1,a1,1738 # 2f100 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd0>
   26a3e:	0028                	c.addi4spn	a0,sp,8
   26a40:	800f00ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   26a44:	85aa                	c.mv	a1,a0
   26a46:	1028                	c.addi4spn	a0,sp,40
   26a48:	c89ef0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                       to_string(v.get_type()));
   26a4c:	45da                	c.lwsp	a1,148(sp)
   26a4e:	00a8                	c.addi4spn	a0,sp,72
   26a50:	548010ef          	jal	ra,27f98 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    throw format_error(to_string(DW_AT::high_pc) + " has unexpected type " +
   26a54:	00b0                	c.addi4spn	a2,sp,72
   26a56:	102c                	c.addi4spn	a1,sp,40
   26a58:	10a8                	c.addi4spn	a0,sp,104
   26a5a:	00014317          	auipc	t1,0x14
   26a5e:	97e33303          	ld	t1,-1666(t1) # 3a3d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x154d2>
   26a62:	9302                	c.jalr	t1
      : std::runtime_error(what_arg) {}
   26a64:	10ac                	c.addi4spn	a1,sp,104
   26a66:	8526                	c.mv	a0,s1
   26a68:	dc9ef0ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   26a6c:	00014797          	auipc	a5,0x14
   26a70:	b047b783          	ld	a5,-1276(a5) # 3a570 <vtable for dwarf::format_error@@Base+0xc68>
   26a74:	07c1                	c.addi	a5,16
   26a76:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   26a78:	7526                	c.ldsp	a0,104(sp)
	if (!_M_is_local())
   26a7a:	18bc                	c.addi4spn	a5,sp,120
   26a7c:	00f50463          	beq	a0,a5,26a84 <dwarf::at_high_pc(dwarf::die const&)+0xa2>
   26a80:	d21ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26a84:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   26a86:	08bc                	c.addi4spn	a5,sp,88
   26a88:	00f50463          	beq	a0,a5,26a90 <dwarf::at_high_pc(dwarf::die const&)+0xae>
   26a8c:	d15ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26a90:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   26a92:	183c                	c.addi4spn	a5,sp,56
   26a94:	00f50463          	beq	a0,a5,26a9c <dwarf::at_high_pc(dwarf::die const&)+0xba>
   26a98:	d09ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26a9c:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   26a9e:	083c                	c.addi4spn	a5,sp,24
   26aa0:	00f50463          	beq	a0,a5,26aa8 <dwarf::at_high_pc(dwarf::die const&)+0xc6>
   26aa4:	cfdef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   26aa8:	00014617          	auipc	a2,0x14
   26aac:	8f063603          	ld	a2,-1808(a2) # 3a398 <dwarf::format_error::~format_error()@@Base+0x20246>
   26ab0:	00014597          	auipc	a1,0x14
   26ab4:	8185b583          	ld	a1,-2024(a1) # 3a2c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   26ab8:	8526                	c.mv	a0,s1
   26aba:	ea7ef0ef          	jal	ra,16960 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   26abe:	842a                	c.mv	s0,a0
   26ac0:	7526                	c.ldsp	a0,104(sp)
	if (!_M_is_local())
   26ac2:	18bc                	c.addi4spn	a5,sp,120
   26ac4:	00f50463          	beq	a0,a5,26acc <dwarf::at_high_pc(dwarf::die const&)+0xea>
   26ac8:	cd9ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26acc:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   26ace:	08bc                	c.addi4spn	a5,sp,88
   26ad0:	00f50463          	beq	a0,a5,26ad8 <dwarf::at_high_pc(dwarf::die const&)+0xf6>
   26ad4:	ccdef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26ad8:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   26ada:	183c                	c.addi4spn	a5,sp,56
   26adc:	00f50463          	beq	a0,a5,26ae4 <dwarf::at_high_pc(dwarf::die const&)+0x102>
   26ae0:	cc1ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26ae4:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   26ae6:	083c                	c.addi4spn	a5,sp,24
   26ae8:	00f50463          	beq	a0,a5,26af0 <dwarf::at_high_pc(dwarf::die const&)+0x10e>
   26aec:	cb5ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   26af0:	8526                	c.mv	a0,s1
   26af2:	c5fef0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   26af6:	8522                	c.mv	a0,s0
   26af8:	e99ef0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   26afc:	842a                	c.mv	s0,a0
   26afe:	b7f9                	c.j	26acc <dwarf::at_high_pc(dwarf::die const&)+0xea>
   26b00:	842a                	c.mv	s0,a0
   26b02:	bfd9                	c.j	26ad8 <dwarf::at_high_pc(dwarf::die const&)+0xf6>
   26b04:	842a                	c.mv	s0,a0
   26b06:	bff9                	c.j	26ae4 <dwarf::at_high_pc(dwarf::die const&)+0x102>
   26b08:	842a                	c.mv	s0,a0
   26b0a:	b7dd                	c.j	26af0 <dwarf::at_high_pc(dwarf::die const&)+0x10e>

0000000000026b0c <dwarf::die_pc_range(dwarf::die const&)>:

rangelist die_pc_range(const die &d) {
   26b0c:	7139                	c.addi16sp	sp,-64
   26b0e:	fc06                	c.sdsp	ra,56(sp)
   26b10:	f822                	c.sdsp	s0,48(sp)
   26b12:	f426                	c.sdsp	s1,40(sp)
   26b14:	f04a                	c.sdsp	s2,32(sp)
   26b16:	84aa                	c.mv	s1,a0
   26b18:	842e                	c.mv	s0,a1
  // DWARF4 section 2.17
  if (d.has(DW_AT::ranges))
   26b1a:	05500593          	addi	a1,zero,85
   26b1e:	8522                	c.mv	a0,s0
   26b20:	daaf50ef          	jal	ra,1c0ca <dwarf::die::has(dwarf::DW_AT) const>
   26b24:	cd01                	c.beqz	a0,26b3c <dwarf::die_pc_range(dwarf::die const&)+0x30>
    return at_ranges(d);
   26b26:	85a2                	c.mv	a1,s0
   26b28:	8526                	c.mv	a0,s1
   26b2a:	909ff0ef          	jal	ra,26432 <dwarf::at_ranges(dwarf::die const&)>
  taddr low = at_low_pc(d);
  taddr high = d.has(DW_AT::high_pc) ? at_high_pc(d) : (low + 1);
  return rangelist({{low, high}});
}
   26b2e:	8526                	c.mv	a0,s1
   26b30:	70e2                	c.ldsp	ra,56(sp)
   26b32:	7442                	c.ldsp	s0,48(sp)
   26b34:	74a2                	c.ldsp	s1,40(sp)
   26b36:	7902                	c.ldsp	s2,32(sp)
   26b38:	6121                	c.addi16sp	sp,64
   26b3a:	8082                	c.jr	ra
  taddr low = at_low_pc(d);
   26b3c:	8522                	c.mv	a0,s0
   26b3e:	b12ff0ef          	jal	ra,25e50 <dwarf::at_low_pc(dwarf::die const&)>
   26b42:	892a                	c.mv	s2,a0
  taddr high = d.has(DW_AT::high_pc) ? at_high_pc(d) : (low + 1);
   26b44:	45c9                	c.li	a1,18
   26b46:	8522                	c.mv	a0,s0
   26b48:	d82f50ef          	jal	ra,1c0ca <dwarf::die::has(dwarf::DW_AT) const>
   26b4c:	00190793          	addi	a5,s2,1
   26b50:	ed01                	c.bnez	a0,26b68 <dwarf::die_pc_range(dwarf::die const&)+0x5c>
   26b52:	e84a                	c.sdsp	s2,16(sp)
   26b54:	ec3e                	c.sdsp	a5,24(sp)
  return rangelist({{low, high}});
   26b56:	081c                	c.addi4spn	a5,sp,16
   26b58:	e03e                	c.sdsp	a5,0(sp)
   26b5a:	4785                	c.li	a5,1
   26b5c:	e43e                	c.sdsp	a5,8(sp)
   26b5e:	858a                	c.mv	a1,sp
   26b60:	8526                	c.mv	a0,s1
   26b62:	dfffb0ef          	jal	ra,22960 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)>
   26b66:	b7e1                	c.j	26b2e <dwarf::die_pc_range(dwarf::die const&)+0x22>
  taddr high = d.has(DW_AT::high_pc) ? at_high_pc(d) : (low + 1);
   26b68:	8522                	c.mv	a0,s0
   26b6a:	e79ff0ef          	jal	ra,269e2 <dwarf::at_high_pc(dwarf::die const&)>
   26b6e:	87aa                	c.mv	a5,a0
   26b70:	b7cd                	c.j	26b52 <dwarf::die_pc_range(dwarf::die const&)+0x46>

0000000000026b72 <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)>:
    {".debug_ranges", section_type::ranges},
    {".debug_str", section_type::str},
    {".debug_types", section_type::types},
};

bool elf::section_name_to_type(const char *name, section_type *out) {
   26b72:	7179                	c.addi16sp	sp,-48
   26b74:	f406                	c.sdsp	ra,40(sp)
   26b76:	f022                	c.sdsp	s0,32(sp)
   26b78:	ec26                	c.sdsp	s1,24(sp)
   26b7a:	e84a                	c.sdsp	s2,16(sp)
   26b7c:	e44e                	c.sdsp	s3,8(sp)
   26b7e:	84aa                	c.mv	s1,a0
   26b80:	89ae                	c.mv	s3,a1
  for (auto &sec : sections) {
   26b82:	00013417          	auipc	s0,0x13
   26b86:	b0640413          	addi	s0,s0,-1274 # 39688 <dwarf::sections>
   26b8a:	00013917          	auipc	s2,0x13
   26b8e:	bbe90913          	addi	s2,s2,-1090 # 39748 <vtable for __cxxabiv1::__class_type_info@CXXABI_1.3>
    if (strcmp(sec.name, name) == 0) {
   26b92:	85a6                	c.mv	a1,s1
   26b94:	6008                	c.ld	a0,0(s0)
   26b96:	a3bef0ef          	jal	ra,165d0 <strcmp@plt>
   26b9a:	cd01                	c.beqz	a0,26bb2 <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)+0x40>
  for (auto &sec : sections) {
   26b9c:	0441                	c.addi	s0,16
   26b9e:	ff241ae3          	bne	s0,s2,26b92 <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)+0x20>
      *out = sec.type;
      return true;
    }
  }
  return false;
   26ba2:	4501                	c.li	a0,0
}
   26ba4:	70a2                	c.ldsp	ra,40(sp)
   26ba6:	7402                	c.ldsp	s0,32(sp)
   26ba8:	64e2                	c.ldsp	s1,24(sp)
   26baa:	6942                	c.ldsp	s2,16(sp)
   26bac:	69a2                	c.ldsp	s3,8(sp)
   26bae:	6145                	c.addi16sp	sp,48
   26bb0:	8082                	c.jr	ra
      *out = sec.type;
   26bb2:	441c                	c.lw	a5,8(s0)
   26bb4:	00f9a023          	sw	a5,0(s3)
      return true;
   26bb8:	4505                	c.li	a0,1
   26bba:	b7ed                	c.j	26ba4 <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)+0x32>

0000000000026bbc <dwarf::elf::section_type_to_name(dwarf::section_type)>:

const char *elf::section_type_to_name(section_type type) {
  for (auto &sec : sections) {
   26bbc:	00013797          	auipc	a5,0x13
   26bc0:	acc78793          	addi	a5,a5,-1332 # 39688 <dwarf::sections>
   26bc4:	00013697          	auipc	a3,0x13
   26bc8:	b8468693          	addi	a3,a3,-1148 # 39748 <vtable for __cxxabiv1::__class_type_info@CXXABI_1.3>
    if (sec.type == type)
   26bcc:	4798                	c.lw	a4,8(a5)
   26bce:	00a70763          	beq	a4,a0,26bdc <dwarf::elf::section_type_to_name(dwarf::section_type)+0x20>
  for (auto &sec : sections) {
   26bd2:	07c1                	c.addi	a5,16
   26bd4:	fed79ce3          	bne	a5,a3,26bcc <dwarf::elf::section_type_to_name(dwarf::section_type)+0x10>
      return sec.name;
  }
  return nullptr;
   26bd8:	4501                	c.li	a0,0
}
   26bda:	8082                	c.jr	ra
      return sec.name;
   26bdc:	6388                	c.ld	a0,0(a5)
   26bde:	8082                	c.jr	ra

0000000000026be0 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)>:
        return "(DW_ORD)0x" + to_hex((int)v);
}

std::string
to_string(DW_DSC v)
{
   26be0:	7139                	c.addi16sp	sp,-64
   26be2:	fc06                	c.sdsp	ra,56(sp)
   26be4:	f822                	c.sdsp	s0,48(sp)
   26be6:	f426                	c.sdsp	s1,40(sp)
   26be8:	f04a                	c.sdsp	s2,32(sp)
   26bea:	842a                	c.mv	s0,a0
        switch (v) {
   26bec:	c595                	c.beqz	a1,26c18 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x38>
   26bee:	4785                	c.li	a5,1
   26bf0:	04f58c63          	beq	a1,a5,26c48 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x68>
        case DW_DSC::label: return "DW_DSC_label";
        case DW_DSC::range: return "DW_DSC_range";
        }
        return "(DW_DSC)0x" + to_hex((int)v);
   26bf4:	848a                	c.mv	s1,sp
   26bf6:	8526                	c.mv	a0,s1
   26bf8:	00014317          	auipc	t1,0x14
   26bfc:	83833303          	ld	t1,-1992(t1) # 3a430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf640>
   26c00:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26c02:	4729                	c.li	a4,10
   26c04:	00008697          	auipc	a3,0x8
   26c08:	5f468693          	addi	a3,a3,1524 # 2f1f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c8>
   26c0c:	4601                	c.li	a2,0
   26c0e:	4581                	c.li	a1,0
   26c10:	8526                	c.mv	a0,s1
   26c12:	cefef0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26c16:	a899                	c.j	26c6c <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x8c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26c18:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26c1c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26c1e:	4681                	c.li	a3,0
   26c20:	00008617          	auipc	a2,0x8
   26c24:	5c460613          	addi	a2,a2,1476 # 2f1e4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b4>
   26c28:	00008597          	auipc	a1,0x8
   26c2c:	5b058593          	addi	a1,a1,1456 # 2f1d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a8>
   26c30:	00013317          	auipc	t1,0x13
   26c34:	6f033303          	ld	t1,1776(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   26c38:	9302                	c.jalr	t1
}
   26c3a:	8522                	c.mv	a0,s0
   26c3c:	70e2                	c.ldsp	ra,56(sp)
   26c3e:	7442                	c.ldsp	s0,48(sp)
   26c40:	74a2                	c.ldsp	s1,40(sp)
   26c42:	7902                	c.ldsp	s2,32(sp)
   26c44:	6121                	c.addi16sp	sp,64
   26c46:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26c48:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26c4c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26c4e:	4681                	c.li	a3,0
   26c50:	00008617          	auipc	a2,0x8
   26c54:	5a460613          	addi	a2,a2,1444 # 2f1f4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c4>
   26c58:	00008597          	auipc	a1,0x8
   26c5c:	59058593          	addi	a1,a1,1424 # 2f1e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b8>
   26c60:	00013317          	auipc	t1,0x13
   26c64:	6c033303          	ld	t1,1728(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   26c68:	9302                	c.jalr	t1
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   26c6a:	bfc1                	c.j	26c3a <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x5a>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26c6c:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26c6e:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   26c72:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   26c74:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   26c76:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   26c7a:	03278463          	beq	a5,s2,26ca2 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0xc2>
      { _M_dataplus._M_p = __p; }
   26c7e:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   26c80:	689c                	c.ld	a5,16(s1)
   26c82:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   26c84:	649c                	c.ld	a5,8(s1)
   26c86:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   26c88:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   26c8c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   26c90:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   26c94:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26c96:	081c                	c.addi4spn	a5,sp,16
   26c98:	faf501e3          	beq	a0,a5,26c3a <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x5a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   26c9c:	b05ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   26ca0:	bf69                	c.j	26c3a <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x5a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   26ca2:	6490                	c.ld	a2,8(s1)
   26ca4:	0605                	c.addi	a2,1
	if (__n == 0)
   26ca6:	de79                	c.beqz	a2,26c84 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0xa4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   26ca8:	85ca                	c.mv	a1,s2
   26caa:	b97ef0ef          	jal	ra,16840 <memcpy@plt>
   26cae:	bfd9                	c.j	26c84 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0xa4>
      { return _M_dataplus._M_p; }
   26cb0:	842a                	c.mv	s0,a0
   26cb2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26cb4:	081c                	c.addi4spn	a5,sp,16
   26cb6:	00f50463          	beq	a0,a5,26cbe <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0xde>
   26cba:	ae7ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   26cbe:	8522                	c.mv	a0,s0
   26cc0:	cd1ef0ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000026cc4 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)>:
{
   26cc4:	7139                	c.addi16sp	sp,-64
   26cc6:	fc06                	c.sdsp	ra,56(sp)
   26cc8:	f822                	c.sdsp	s0,48(sp)
   26cca:	f426                	c.sdsp	s1,40(sp)
   26ccc:	f04a                	c.sdsp	s2,32(sp)
   26cce:	842a                	c.mv	s0,a0
        switch (v) {
   26cd0:	c595                	c.beqz	a1,26cfc <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x38>
   26cd2:	4785                	c.li	a5,1
   26cd4:	04f58c63          	beq	a1,a5,26d2c <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x68>
        return "(DW_ORD)0x" + to_hex((int)v);
   26cd8:	848a                	c.mv	s1,sp
   26cda:	8526                	c.mv	a0,s1
   26cdc:	00013317          	auipc	t1,0x13
   26ce0:	75433303          	ld	t1,1876(t1) # 3a430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf640>
   26ce4:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26ce6:	4729                	c.li	a4,10
   26ce8:	00008697          	auipc	a3,0x8
   26cec:	55068693          	addi	a3,a3,1360 # 2f238 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x208>
   26cf0:	4601                	c.li	a2,0
   26cf2:	4581                	c.li	a1,0
   26cf4:	8526                	c.mv	a0,s1
   26cf6:	c0bef0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26cfa:	a899                	c.j	26d50 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x8c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26cfc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26d00:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26d02:	4681                	c.li	a3,0
   26d04:	00008617          	auipc	a2,0x8
   26d08:	51460613          	addi	a2,a2,1300 # 2f218 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e8>
   26d0c:	00008597          	auipc	a1,0x8
   26d10:	4fc58593          	addi	a1,a1,1276 # 2f208 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d8>
   26d14:	00013317          	auipc	t1,0x13
   26d18:	60c33303          	ld	t1,1548(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   26d1c:	9302                	c.jalr	t1
}
   26d1e:	8522                	c.mv	a0,s0
   26d20:	70e2                	c.ldsp	ra,56(sp)
   26d22:	7442                	c.ldsp	s0,48(sp)
   26d24:	74a2                	c.ldsp	s1,40(sp)
   26d26:	7902                	c.ldsp	s2,32(sp)
   26d28:	6121                	c.addi16sp	sp,64
   26d2a:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26d2c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26d30:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26d32:	4681                	c.li	a3,0
   26d34:	00008617          	auipc	a2,0x8
   26d38:	4fc60613          	addi	a2,a2,1276 # 2f230 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x200>
   26d3c:	00008597          	auipc	a1,0x8
   26d40:	4e458593          	addi	a1,a1,1252 # 2f220 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f0>
   26d44:	00013317          	auipc	t1,0x13
   26d48:	5dc33303          	ld	t1,1500(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   26d4c:	9302                	c.jalr	t1
   26d4e:	bfc1                	c.j	26d1e <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x5a>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26d50:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26d52:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   26d56:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   26d58:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   26d5a:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   26d5e:	03278463          	beq	a5,s2,26d86 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0xc2>
      { _M_dataplus._M_p = __p; }
   26d62:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   26d64:	689c                	c.ld	a5,16(s1)
   26d66:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   26d68:	649c                	c.ld	a5,8(s1)
   26d6a:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   26d6c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   26d70:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   26d74:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   26d78:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26d7a:	081c                	c.addi4spn	a5,sp,16
   26d7c:	faf501e3          	beq	a0,a5,26d1e <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x5a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   26d80:	a21ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   26d84:	bf69                	c.j	26d1e <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x5a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   26d86:	6490                	c.ld	a2,8(s1)
   26d88:	0605                	c.addi	a2,1
	if (__n == 0)
   26d8a:	de79                	c.beqz	a2,26d68 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0xa4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   26d8c:	85ca                	c.mv	a1,s2
   26d8e:	ab3ef0ef          	jal	ra,16840 <memcpy@plt>
   26d92:	bfd9                	c.j	26d68 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0xa4>
      { return _M_dataplus._M_p; }
   26d94:	842a                	c.mv	s0,a0
   26d96:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26d98:	081c                	c.addi4spn	a5,sp,16
   26d9a:	00f50463          	beq	a0,a5,26da2 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0xde>
   26d9e:	a03ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   26da2:	8522                	c.mv	a0,s0
   26da4:	bedef0ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000026da8 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)>:
{
   26da8:	7139                	c.addi16sp	sp,-64
   26daa:	fc06                	c.sdsp	ra,56(sp)
   26dac:	f822                	c.sdsp	s0,48(sp)
   26dae:	f426                	c.sdsp	s1,40(sp)
   26db0:	f04a                	c.sdsp	s2,32(sp)
   26db2:	842a                	c.mv	s0,a0
        switch (v) {
   26db4:	c595                	c.beqz	a1,26de0 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x38>
   26db6:	4785                	c.li	a5,1
   26db8:	04f58c63          	beq	a1,a5,26e10 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x68>
        return "(DW_CHILDREN)0x" + to_hex((int)v);
   26dbc:	848a                	c.mv	s1,sp
   26dbe:	8526                	c.mv	a0,s1
   26dc0:	00013317          	auipc	t1,0x13
   26dc4:	67033303          	ld	t1,1648(t1) # 3a430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf640>
   26dc8:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26dca:	473d                	c.li	a4,15
   26dcc:	00008697          	auipc	a3,0x8
   26dd0:	49c68693          	addi	a3,a3,1180 # 2f268 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x238>
   26dd4:	4601                	c.li	a2,0
   26dd6:	4581                	c.li	a1,0
   26dd8:	8526                	c.mv	a0,s1
   26dda:	b27ef0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26dde:	a899                	c.j	26e34 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x8c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26de0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26de4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26de6:	4681                	c.li	a3,0
   26de8:	00008617          	auipc	a2,0x8
   26dec:	46e60613          	addi	a2,a2,1134 # 2f256 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x226>
   26df0:	00008597          	auipc	a1,0x8
   26df4:	45858593          	addi	a1,a1,1112 # 2f248 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x218>
   26df8:	00013317          	auipc	t1,0x13
   26dfc:	52833303          	ld	t1,1320(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   26e00:	9302                	c.jalr	t1
}
   26e02:	8522                	c.mv	a0,s0
   26e04:	70e2                	c.ldsp	ra,56(sp)
   26e06:	7442                	c.ldsp	s0,48(sp)
   26e08:	74a2                	c.ldsp	s1,40(sp)
   26e0a:	7902                	c.ldsp	s2,32(sp)
   26e0c:	6121                	c.addi16sp	sp,64
   26e0e:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26e10:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26e14:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26e16:	4681                	c.li	a3,0
   26e18:	00008617          	auipc	a2,0x8
   26e1c:	44f60613          	addi	a2,a2,1103 # 2f267 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x237>
   26e20:	00008597          	auipc	a1,0x8
   26e24:	43858593          	addi	a1,a1,1080 # 2f258 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x228>
   26e28:	00013317          	auipc	t1,0x13
   26e2c:	4f833303          	ld	t1,1272(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   26e30:	9302                	c.jalr	t1
   26e32:	bfc1                	c.j	26e02 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x5a>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26e34:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26e36:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   26e3a:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   26e3c:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   26e3e:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   26e42:	03278463          	beq	a5,s2,26e6a <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0xc2>
      { _M_dataplus._M_p = __p; }
   26e46:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   26e48:	689c                	c.ld	a5,16(s1)
   26e4a:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   26e4c:	649c                	c.ld	a5,8(s1)
   26e4e:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   26e50:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   26e54:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   26e58:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   26e5c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26e5e:	081c                	c.addi4spn	a5,sp,16
   26e60:	faf501e3          	beq	a0,a5,26e02 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x5a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   26e64:	93def0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   26e68:	bf69                	c.j	26e02 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x5a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   26e6a:	6490                	c.ld	a2,8(s1)
   26e6c:	0605                	c.addi	a2,1
	if (__n == 0)
   26e6e:	de79                	c.beqz	a2,26e4c <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0xa4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   26e70:	85ca                	c.mv	a1,s2
   26e72:	9cfef0ef          	jal	ra,16840 <memcpy@plt>
   26e76:	bfd9                	c.j	26e4c <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0xa4>
      { return _M_dataplus._M_p; }
   26e78:	842a                	c.mv	s0,a0
   26e7a:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26e7c:	081c                	c.addi4spn	a5,sp,16
   26e7e:	00f50463          	beq	a0,a5,26e86 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0xde>
   26e82:	91fef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   26e86:	8522                	c.mv	a0,s0
   26e88:	b09ef0ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000026e8c <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)>:
{
   26e8c:	7139                	c.addi16sp	sp,-64
   26e8e:	fc06                	c.sdsp	ra,56(sp)
   26e90:	f822                	c.sdsp	s0,48(sp)
   26e92:	f426                	c.sdsp	s1,40(sp)
   26e94:	f04a                	c.sdsp	s2,32(sp)
   26e96:	842a                	c.mv	s0,a0
        switch (v) {
   26e98:	4789                	c.li	a5,2
   26e9a:	06f58263          	beq	a1,a5,26efe <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x72>
   26e9e:	478d                	c.li	a5,3
   26ea0:	08f58163          	beq	a1,a5,26f22 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x96>
   26ea4:	4785                	c.li	a5,1
   26ea6:	02f58463          	beq	a1,a5,26ece <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x42>
        return "(DW_ACCESS)0x" + to_hex((int)v);
   26eaa:	848a                	c.mv	s1,sp
   26eac:	8526                	c.mv	a0,s1
   26eae:	00013317          	auipc	t1,0x13
   26eb2:	58233303          	ld	t1,1410(t1) # 3a430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf640>
   26eb6:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26eb8:	4735                	c.li	a4,13
   26eba:	00008697          	auipc	a3,0x8
   26ebe:	40668693          	addi	a3,a3,1030 # 2f2c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x290>
   26ec2:	4601                	c.li	a2,0
   26ec4:	4581                	c.li	a1,0
   26ec6:	8526                	c.mv	a0,s1
   26ec8:	a39ef0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26ecc:	a8ad                	c.j	26f46 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0xba>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26ece:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26ed2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26ed4:	4681                	c.li	a3,0
   26ed6:	00008617          	auipc	a2,0x8
   26eda:	3b260613          	addi	a2,a2,946 # 2f288 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x258>
   26ede:	00008597          	auipc	a1,0x8
   26ee2:	39a58593          	addi	a1,a1,922 # 2f278 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x248>
   26ee6:	00013317          	auipc	t1,0x13
   26eea:	43a33303          	ld	t1,1082(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   26eee:	9302                	c.jalr	t1
}
   26ef0:	8522                	c.mv	a0,s0
   26ef2:	70e2                	c.ldsp	ra,56(sp)
   26ef4:	7442                	c.ldsp	s0,48(sp)
   26ef6:	74a2                	c.ldsp	s1,40(sp)
   26ef8:	7902                	c.ldsp	s2,32(sp)
   26efa:	6121                	c.addi16sp	sp,64
   26efc:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26efe:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26f02:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26f04:	4681                	c.li	a3,0
   26f06:	00008617          	auipc	a2,0x8
   26f0a:	39d60613          	addi	a2,a2,925 # 2f2a3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x273>
   26f0e:	00008597          	auipc	a1,0x8
   26f12:	38258593          	addi	a1,a1,898 # 2f290 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x260>
   26f16:	00013317          	auipc	t1,0x13
   26f1a:	40a33303          	ld	t1,1034(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   26f1e:	9302                	c.jalr	t1
   26f20:	bfc1                	c.j	26ef0 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26f22:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26f26:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26f28:	4681                	c.li	a3,0
   26f2a:	00008617          	auipc	a2,0x8
   26f2e:	38f60613          	addi	a2,a2,911 # 2f2b9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x289>
   26f32:	00008597          	auipc	a1,0x8
   26f36:	37658593          	addi	a1,a1,886 # 2f2a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x278>
   26f3a:	00013317          	auipc	t1,0x13
   26f3e:	3e633303          	ld	t1,998(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   26f42:	9302                	c.jalr	t1
   26f44:	b775                	c.j	26ef0 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x64>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26f46:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26f48:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   26f4c:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   26f4e:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   26f50:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   26f54:	03278463          	beq	a5,s2,26f7c <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0xf0>
      { _M_dataplus._M_p = __p; }
   26f58:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   26f5a:	689c                	c.ld	a5,16(s1)
   26f5c:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   26f5e:	649c                	c.ld	a5,8(s1)
   26f60:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   26f62:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   26f66:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   26f6a:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   26f6e:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26f70:	081c                	c.addi4spn	a5,sp,16
   26f72:	f6f50fe3          	beq	a0,a5,26ef0 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   26f76:	82bef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   26f7a:	bf9d                	c.j	26ef0 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   26f7c:	6490                	c.ld	a2,8(s1)
   26f7e:	0605                	c.addi	a2,1
	if (__n == 0)
   26f80:	de79                	c.beqz	a2,26f5e <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0xd2>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   26f82:	85ca                	c.mv	a1,s2
   26f84:	8bdef0ef          	jal	ra,16840 <memcpy@plt>
   26f88:	bfd9                	c.j	26f5e <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0xd2>
      { return _M_dataplus._M_p; }
   26f8a:	842a                	c.mv	s0,a0
   26f8c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26f8e:	081c                	c.addi4spn	a5,sp,16
   26f90:	00f50463          	beq	a0,a5,26f98 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x10c>
   26f94:	80def0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   26f98:	8522                	c.mv	a0,s0
   26f9a:	9f7ef0ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000026f9e <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)>:
{
   26f9e:	7139                	c.addi16sp	sp,-64
   26fa0:	fc06                	c.sdsp	ra,56(sp)
   26fa2:	f822                	c.sdsp	s0,48(sp)
   26fa4:	f426                	c.sdsp	s1,40(sp)
   26fa6:	f04a                	c.sdsp	s2,32(sp)
   26fa8:	842a                	c.mv	s0,a0
        switch (v) {
   26faa:	4785                	c.li	a5,1
   26fac:	06f58063          	beq	a1,a5,2700c <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x6e>
   26fb0:	4789                	c.li	a5,2
   26fb2:	06f58f63          	beq	a1,a5,27030 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x92>
   26fb6:	c19d                	c.beqz	a1,26fdc <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x3e>
        return "(DW_VIRTUALITY)0x" + to_hex((int)v);
   26fb8:	848a                	c.mv	s1,sp
   26fba:	8526                	c.mv	a0,s1
   26fbc:	00013317          	auipc	t1,0x13
   26fc0:	47433303          	ld	t1,1140(t1) # 3a430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf640>
   26fc4:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26fc6:	4745                	c.li	a4,17
   26fc8:	00008697          	auipc	a3,0x8
   26fcc:	35868693          	addi	a3,a3,856 # 2f320 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2f0>
   26fd0:	4601                	c.li	a2,0
   26fd2:	4581                	c.li	a1,0
   26fd4:	8526                	c.mv	a0,s1
   26fd6:	92bef0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26fda:	a8ad                	c.j	27054 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0xb6>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26fdc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26fe0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26fe2:	4681                	c.li	a3,0
   26fe4:	00008617          	auipc	a2,0x8
   26fe8:	2fe60613          	addi	a2,a2,766 # 2f2e2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2b2>
   26fec:	00008597          	auipc	a1,0x8
   26ff0:	2e458593          	addi	a1,a1,740 # 2f2d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2a0>
   26ff4:	00013317          	auipc	t1,0x13
   26ff8:	32c33303          	ld	t1,812(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   26ffc:	9302                	c.jalr	t1
}
   26ffe:	8522                	c.mv	a0,s0
   27000:	70e2                	c.ldsp	ra,56(sp)
   27002:	7442                	c.ldsp	s0,48(sp)
   27004:	74a2                	c.ldsp	s1,40(sp)
   27006:	7902                	c.ldsp	s2,32(sp)
   27008:	6121                	c.addi16sp	sp,64
   2700a:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2700c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27010:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27012:	4681                	c.li	a3,0
   27014:	00008617          	auipc	a2,0x8
   27018:	2e960613          	addi	a2,a2,745 # 2f2fd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2cd>
   2701c:	00008597          	auipc	a1,0x8
   27020:	2cc58593          	addi	a1,a1,716 # 2f2e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2b8>
   27024:	00013317          	auipc	t1,0x13
   27028:	2fc33303          	ld	t1,764(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2702c:	9302                	c.jalr	t1
   2702e:	bfc1                	c.j	26ffe <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x60>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27030:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27034:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27036:	4681                	c.li	a3,0
   27038:	00008617          	auipc	a2,0x8
   2703c:	2e260613          	addi	a2,a2,738 # 2f31a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2ea>
   27040:	00008597          	auipc	a1,0x8
   27044:	2c058593          	addi	a1,a1,704 # 2f300 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2d0>
   27048:	00013317          	auipc	t1,0x13
   2704c:	2d833303          	ld	t1,728(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27050:	9302                	c.jalr	t1
   27052:	b775                	c.j	26ffe <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x60>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   27054:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27056:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2705a:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2705c:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2705e:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   27062:	03278463          	beq	a5,s2,2708a <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0xec>
      { _M_dataplus._M_p = __p; }
   27066:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   27068:	689c                	c.ld	a5,16(s1)
   2706a:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   2706c:	649c                	c.ld	a5,8(s1)
   2706e:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   27070:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   27074:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   27078:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2707c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2707e:	081c                	c.addi4spn	a5,sp,16
   27080:	f6f50fe3          	beq	a0,a5,26ffe <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x60>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   27084:	f1cef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   27088:	bf9d                	c.j	26ffe <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2708a:	6490                	c.ld	a2,8(s1)
   2708c:	0605                	c.addi	a2,1
	if (__n == 0)
   2708e:	de79                	c.beqz	a2,2706c <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0xce>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   27090:	85ca                	c.mv	a1,s2
   27092:	faeef0ef          	jal	ra,16840 <memcpy@plt>
   27096:	bfd9                	c.j	2706c <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0xce>
      { return _M_dataplus._M_p; }
   27098:	842a                	c.mv	s0,a0
   2709a:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2709c:	081c                	c.addi4spn	a5,sp,16
   2709e:	00f50463          	beq	a0,a5,270a6 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x108>
   270a2:	efeef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   270a6:	8522                	c.mv	a0,s0
   270a8:	8e9ef0ef          	jal	ra,16990 <_Unwind_Resume@plt>

00000000000270ac <dwarf::to_string[abi:cxx11](dwarf::DW_CC)>:
{
   270ac:	7139                	c.addi16sp	sp,-64
   270ae:	fc06                	c.sdsp	ra,56(sp)
   270b0:	f822                	c.sdsp	s0,48(sp)
   270b2:	f426                	c.sdsp	s1,40(sp)
   270b4:	f04a                	c.sdsp	s2,32(sp)
   270b6:	842a                	c.mv	s0,a0
        switch (v) {
   270b8:	4789                	c.li	a5,2
   270ba:	06f58263          	beq	a1,a5,2711e <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x72>
   270be:	478d                	c.li	a5,3
   270c0:	08f58163          	beq	a1,a5,27142 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x96>
   270c4:	4785                	c.li	a5,1
   270c6:	02f58463          	beq	a1,a5,270ee <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x42>
        return "(DW_CC)0x" + to_hex((int)v);
   270ca:	848a                	c.mv	s1,sp
   270cc:	8526                	c.mv	a0,s1
   270ce:	00013317          	auipc	t1,0x13
   270d2:	36233303          	ld	t1,866(t1) # 3a430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf640>
   270d6:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   270d8:	4725                	c.li	a4,9
   270da:	00008697          	auipc	a3,0x8
   270de:	28e68693          	addi	a3,a3,654 # 2f368 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x338>
   270e2:	4601                	c.li	a2,0
   270e4:	4581                	c.li	a1,0
   270e6:	8526                	c.mv	a0,s1
   270e8:	819ef0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   270ec:	a8ad                	c.j	27166 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0xba>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   270ee:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   270f2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   270f4:	4681                	c.li	a3,0
   270f6:	00008617          	auipc	a2,0x8
   270fa:	24e60613          	addi	a2,a2,590 # 2f344 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x314>
   270fe:	00008597          	auipc	a1,0x8
   27102:	23a58593          	addi	a1,a1,570 # 2f338 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x308>
   27106:	00013317          	auipc	t1,0x13
   2710a:	21a33303          	ld	t1,538(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2710e:	9302                	c.jalr	t1
}
   27110:	8522                	c.mv	a0,s0
   27112:	70e2                	c.ldsp	ra,56(sp)
   27114:	7442                	c.ldsp	s0,48(sp)
   27116:	74a2                	c.ldsp	s1,40(sp)
   27118:	7902                	c.ldsp	s2,32(sp)
   2711a:	6121                	c.addi16sp	sp,64
   2711c:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2711e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27122:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27124:	4681                	c.li	a3,0
   27126:	00008617          	auipc	a2,0x8
   2712a:	22f60613          	addi	a2,a2,559 # 2f355 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x325>
   2712e:	00008597          	auipc	a1,0x8
   27132:	21a58593          	addi	a1,a1,538 # 2f348 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x318>
   27136:	00013317          	auipc	t1,0x13
   2713a:	1ea33303          	ld	t1,490(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2713e:	9302                	c.jalr	t1
   27140:	bfc1                	c.j	27110 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27142:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27146:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27148:	4681                	c.li	a3,0
   2714a:	00008617          	auipc	a2,0x8
   2714e:	21a60613          	addi	a2,a2,538 # 2f364 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x334>
   27152:	00008597          	auipc	a1,0x8
   27156:	20658593          	addi	a1,a1,518 # 2f358 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x328>
   2715a:	00013317          	auipc	t1,0x13
   2715e:	1c633303          	ld	t1,454(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27162:	9302                	c.jalr	t1
   27164:	b775                	c.j	27110 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x64>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   27166:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27168:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2716c:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2716e:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   27170:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   27174:	03278463          	beq	a5,s2,2719c <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0xf0>
      { _M_dataplus._M_p = __p; }
   27178:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2717a:	689c                	c.ld	a5,16(s1)
   2717c:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   2717e:	649c                	c.ld	a5,8(s1)
   27180:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   27182:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   27186:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2718a:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2718e:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   27190:	081c                	c.addi4spn	a5,sp,16
   27192:	f6f50fe3          	beq	a0,a5,27110 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   27196:	e0aef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2719a:	bf9d                	c.j	27110 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2719c:	6490                	c.ld	a2,8(s1)
   2719e:	0605                	c.addi	a2,1
	if (__n == 0)
   271a0:	de79                	c.beqz	a2,2717e <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0xd2>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   271a2:	85ca                	c.mv	a1,s2
   271a4:	e9cef0ef          	jal	ra,16840 <memcpy@plt>
   271a8:	bfd9                	c.j	2717e <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0xd2>
      { return _M_dataplus._M_p; }
   271aa:	842a                	c.mv	s0,a0
   271ac:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   271ae:	081c                	c.addi4spn	a5,sp,16
   271b0:	00f50463          	beq	a0,a5,271b8 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x10c>
   271b4:	decef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   271b8:	8522                	c.mv	a0,s0
   271ba:	fd6ef0ef          	jal	ra,16990 <_Unwind_Resume@plt>

00000000000271be <dwarf::to_string[abi:cxx11](dwarf::DW_END)>:
{
   271be:	7139                	c.addi16sp	sp,-64
   271c0:	fc06                	c.sdsp	ra,56(sp)
   271c2:	f822                	c.sdsp	s0,48(sp)
   271c4:	f426                	c.sdsp	s1,40(sp)
   271c6:	f04a                	c.sdsp	s2,32(sp)
   271c8:	842a                	c.mv	s0,a0
        switch (v) {
   271ca:	4785                	c.li	a5,1
   271cc:	06f58063          	beq	a1,a5,2722c <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x6e>
   271d0:	4789                	c.li	a5,2
   271d2:	06f58f63          	beq	a1,a5,27250 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x92>
   271d6:	c19d                	c.beqz	a1,271fc <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x3e>
        return "(DW_END)0x" + to_hex((int)v);
   271d8:	848a                	c.mv	s1,sp
   271da:	8526                	c.mv	a0,s1
   271dc:	00013317          	auipc	t1,0x13
   271e0:	25433303          	ld	t1,596(t1) # 3a430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf640>
   271e4:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   271e6:	4729                	c.li	a4,10
   271e8:	00008697          	auipc	a3,0x8
   271ec:	1c068693          	addi	a3,a3,448 # 2f3a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x378>
   271f0:	4601                	c.li	a2,0
   271f2:	4581                	c.li	a1,0
   271f4:	8526                	c.mv	a0,s1
   271f6:	f0aef0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   271fa:	a8ad                	c.j	27274 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0xb6>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   271fc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27200:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27202:	4681                	c.li	a3,0
   27204:	00008617          	auipc	a2,0x8
   27208:	18260613          	addi	a2,a2,386 # 2f386 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x356>
   2720c:	00008597          	auipc	a1,0x8
   27210:	16c58593          	addi	a1,a1,364 # 2f378 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x348>
   27214:	00013317          	auipc	t1,0x13
   27218:	10c33303          	ld	t1,268(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2721c:	9302                	c.jalr	t1
}
   2721e:	8522                	c.mv	a0,s0
   27220:	70e2                	c.ldsp	ra,56(sp)
   27222:	7442                	c.ldsp	s0,48(sp)
   27224:	74a2                	c.ldsp	s1,40(sp)
   27226:	7902                	c.ldsp	s2,32(sp)
   27228:	6121                	c.addi16sp	sp,64
   2722a:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2722c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27230:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27232:	4681                	c.li	a3,0
   27234:	00008617          	auipc	a2,0x8
   27238:	15e60613          	addi	a2,a2,350 # 2f392 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x362>
   2723c:	00008597          	auipc	a1,0x8
   27240:	14c58593          	addi	a1,a1,332 # 2f388 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x358>
   27244:	00013317          	auipc	t1,0x13
   27248:	0dc33303          	ld	t1,220(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2724c:	9302                	c.jalr	t1
   2724e:	bfc1                	c.j	2721e <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x60>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27250:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27254:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27256:	4681                	c.li	a3,0
   27258:	00008617          	auipc	a2,0x8
   2725c:	14d60613          	addi	a2,a2,333 # 2f3a5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x375>
   27260:	00008597          	auipc	a1,0x8
   27264:	13858593          	addi	a1,a1,312 # 2f398 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x368>
   27268:	00013317          	auipc	t1,0x13
   2726c:	0b833303          	ld	t1,184(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27270:	9302                	c.jalr	t1
   27272:	b775                	c.j	2721e <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x60>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   27274:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27276:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2727a:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2727c:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2727e:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   27282:	03278463          	beq	a5,s2,272aa <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0xec>
      { _M_dataplus._M_p = __p; }
   27286:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   27288:	689c                	c.ld	a5,16(s1)
   2728a:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   2728c:	649c                	c.ld	a5,8(s1)
   2728e:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   27290:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   27294:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   27298:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2729c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2729e:	081c                	c.addi4spn	a5,sp,16
   272a0:	f6f50fe3          	beq	a0,a5,2721e <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x60>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   272a4:	cfcef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   272a8:	bf9d                	c.j	2721e <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   272aa:	6490                	c.ld	a2,8(s1)
   272ac:	0605                	c.addi	a2,1
	if (__n == 0)
   272ae:	de79                	c.beqz	a2,2728c <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0xce>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   272b0:	85ca                	c.mv	a1,s2
   272b2:	d8eef0ef          	jal	ra,16840 <memcpy@plt>
   272b6:	bfd9                	c.j	2728c <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0xce>
      { return _M_dataplus._M_p; }
   272b8:	842a                	c.mv	s0,a0
   272ba:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   272bc:	081c                	c.addi4spn	a5,sp,16
   272be:	00f50463          	beq	a0,a5,272c6 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x108>
   272c2:	cdeef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   272c6:	8522                	c.mv	a0,s0
   272c8:	ec8ef0ef          	jal	ra,16990 <_Unwind_Resume@plt>

00000000000272cc <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)>:
{
   272cc:	7139                	c.addi16sp	sp,-64
   272ce:	fc06                	c.sdsp	ra,56(sp)
   272d0:	f822                	c.sdsp	s0,48(sp)
   272d2:	f426                	c.sdsp	s1,40(sp)
   272d4:	f04a                	c.sdsp	s2,32(sp)
   272d6:	842a                	c.mv	s0,a0
        switch (v) {
   272d8:	4789                	c.li	a5,2
   272da:	06f58263          	beq	a1,a5,2733e <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x72>
   272de:	478d                	c.li	a5,3
   272e0:	08f58163          	beq	a1,a5,27362 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x96>
   272e4:	4785                	c.li	a5,1
   272e6:	02f58463          	beq	a1,a5,2730e <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x42>
        return "(DW_VIS)0x" + to_hex((int)v);
   272ea:	848a                	c.mv	s1,sp
   272ec:	8526                	c.mv	a0,s1
   272ee:	00013317          	auipc	t1,0x13
   272f2:	14233303          	ld	t1,322(t1) # 3a430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf640>
   272f6:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   272f8:	4729                	c.li	a4,10
   272fa:	00008697          	auipc	a3,0x8
   272fe:	0f668693          	addi	a3,a3,246 # 2f3f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3c0>
   27302:	4601                	c.li	a2,0
   27304:	4581                	c.li	a1,0
   27306:	8526                	c.mv	a0,s1
   27308:	df8ef0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2730c:	a8ad                	c.j	27386 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0xba>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2730e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27312:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27314:	4681                	c.li	a3,0
   27316:	00008617          	auipc	a2,0x8
   2731a:	0ae60613          	addi	a2,a2,174 # 2f3c4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x394>
   2731e:	00008597          	auipc	a1,0x8
   27322:	09a58593          	addi	a1,a1,154 # 2f3b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x388>
   27326:	00013317          	auipc	t1,0x13
   2732a:	ffa33303          	ld	t1,-6(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2732e:	9302                	c.jalr	t1
}
   27330:	8522                	c.mv	a0,s0
   27332:	70e2                	c.ldsp	ra,56(sp)
   27334:	7442                	c.ldsp	s0,48(sp)
   27336:	74a2                	c.ldsp	s1,40(sp)
   27338:	7902                	c.ldsp	s2,32(sp)
   2733a:	6121                	c.addi16sp	sp,64
   2733c:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2733e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27342:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27344:	4681                	c.li	a3,0
   27346:	00008617          	auipc	a2,0x8
   2734a:	09160613          	addi	a2,a2,145 # 2f3d7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3a7>
   2734e:	00008597          	auipc	a1,0x8
   27352:	07a58593          	addi	a1,a1,122 # 2f3c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x398>
   27356:	00013317          	auipc	t1,0x13
   2735a:	fca33303          	ld	t1,-54(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2735e:	9302                	c.jalr	t1
   27360:	bfc1                	c.j	27330 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27362:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27366:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27368:	4681                	c.li	a3,0
   2736a:	00008617          	auipc	a2,0x8
   2736e:	07e60613          	addi	a2,a2,126 # 2f3e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3b8>
   27372:	00008597          	auipc	a1,0x8
   27376:	06658593          	addi	a1,a1,102 # 2f3d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3a8>
   2737a:	00013317          	auipc	t1,0x13
   2737e:	fa633303          	ld	t1,-90(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27382:	9302                	c.jalr	t1
   27384:	b775                	c.j	27330 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x64>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   27386:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27388:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2738c:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2738e:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   27390:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   27394:	03278463          	beq	a5,s2,273bc <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0xf0>
      { _M_dataplus._M_p = __p; }
   27398:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2739a:	689c                	c.ld	a5,16(s1)
   2739c:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   2739e:	649c                	c.ld	a5,8(s1)
   273a0:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   273a2:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   273a6:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   273aa:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   273ae:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   273b0:	081c                	c.addi4spn	a5,sp,16
   273b2:	f6f50fe3          	beq	a0,a5,27330 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   273b6:	beaef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   273ba:	bf9d                	c.j	27330 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   273bc:	6490                	c.ld	a2,8(s1)
   273be:	0605                	c.addi	a2,1
	if (__n == 0)
   273c0:	de79                	c.beqz	a2,2739e <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0xd2>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   273c2:	85ca                	c.mv	a1,s2
   273c4:	c7cef0ef          	jal	ra,16840 <memcpy@plt>
   273c8:	bfd9                	c.j	2739e <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0xd2>
      { return _M_dataplus._M_p; }
   273ca:	842a                	c.mv	s0,a0
   273cc:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   273ce:	081c                	c.addi4spn	a5,sp,16
   273d0:	00f50463          	beq	a0,a5,273d8 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x10c>
   273d4:	bccef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   273d8:	8522                	c.mv	a0,s0
   273da:	db6ef0ef          	jal	ra,16990 <_Unwind_Resume@plt>

00000000000273de <dwarf::to_string[abi:cxx11](dwarf::DW_INL)>:
{
   273de:	7139                	c.addi16sp	sp,-64
   273e0:	fc06                	c.sdsp	ra,56(sp)
   273e2:	f822                	c.sdsp	s0,48(sp)
   273e4:	f426                	c.sdsp	s1,40(sp)
   273e6:	f04a                	c.sdsp	s2,32(sp)
   273e8:	842a                	c.mv	s0,a0
        switch (v) {
   273ea:	4789                	c.li	a5,2
   273ec:	08f58763          	beq	a1,a5,2747a <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x9c>
   273f0:	02b7c863          	blt	a5,a1,27420 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x42>
   273f4:	c9b9                	c.beqz	a1,2744a <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x6c>
   273f6:	4785                	c.li	a5,1
   273f8:	0af59363          	bne	a1,a5,2749e <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xc0>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   273fc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27400:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27402:	4681                	c.li	a3,0
   27404:	00008617          	auipc	a2,0x8
   27408:	02260613          	addi	a2,a2,34 # 2f426 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3f6>
   2740c:	00008597          	auipc	a1,0x8
   27410:	00c58593          	addi	a1,a1,12 # 2f418 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3e8>
   27414:	00013317          	auipc	t1,0x13
   27418:	f0c33303          	ld	t1,-244(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2741c:	9302                	c.jalr	t1
   2741e:	a0b9                	c.j	2746c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x8e>
   27420:	478d                	c.li	a5,3
   27422:	06f59e63          	bne	a1,a5,2749e <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xc0>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27426:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2742a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2742c:	4681                	c.li	a3,0
   2742e:	00008617          	auipc	a2,0x8
   27432:	03160613          	addi	a2,a2,49 # 2f45f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x42f>
   27436:	00008597          	auipc	a1,0x8
   2743a:	01258593          	addi	a1,a1,18 # 2f448 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x418>
   2743e:	00013317          	auipc	t1,0x13
   27442:	ee233303          	ld	t1,-286(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27446:	9302                	c.jalr	t1
   27448:	a015                	c.j	2746c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x8e>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2744a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2744e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27450:	4681                	c.li	a3,0
   27452:	00008617          	auipc	a2,0x8
   27456:	fc060613          	addi	a2,a2,-64 # 2f412 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3e2>
   2745a:	00008597          	auipc	a1,0x8
   2745e:	fa658593          	addi	a1,a1,-90 # 2f400 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3d0>
   27462:	00013317          	auipc	t1,0x13
   27466:	ebe33303          	ld	t1,-322(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2746a:	9302                	c.jalr	t1
}
   2746c:	8522                	c.mv	a0,s0
   2746e:	70e2                	c.ldsp	ra,56(sp)
   27470:	7442                	c.ldsp	s0,48(sp)
   27472:	74a2                	c.ldsp	s1,40(sp)
   27474:	7902                	c.ldsp	s2,32(sp)
   27476:	6121                	c.addi16sp	sp,64
   27478:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2747a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2747e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27480:	4681                	c.li	a3,0
   27482:	00008617          	auipc	a2,0x8
   27486:	fc160613          	addi	a2,a2,-63 # 2f443 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x413>
   2748a:	00008597          	auipc	a1,0x8
   2748e:	f9e58593          	addi	a1,a1,-98 # 2f428 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3f8>
   27492:	00013317          	auipc	t1,0x13
   27496:	e8e33303          	ld	t1,-370(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2749a:	9302                	c.jalr	t1
   2749c:	bfc1                	c.j	2746c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x8e>
        return "(DW_INL)0x" + to_hex((int)v);
   2749e:	848a                	c.mv	s1,sp
   274a0:	8526                	c.mv	a0,s1
   274a2:	00013317          	auipc	t1,0x13
   274a6:	f8e33303          	ld	t1,-114(t1) # 3a430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf640>
   274aa:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   274ac:	4729                	c.li	a4,10
   274ae:	00008697          	auipc	a3,0x8
   274b2:	fb268693          	addi	a3,a3,-78 # 2f460 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x430>
   274b6:	4601                	c.li	a2,0
   274b8:	4581                	c.li	a1,0
   274ba:	8526                	c.mv	a0,s1
   274bc:	c44ef0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   274c0:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   274c2:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   274c6:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   274c8:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   274ca:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   274ce:	03278463          	beq	a5,s2,274f6 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x118>
      { _M_dataplus._M_p = __p; }
   274d2:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   274d4:	689c                	c.ld	a5,16(s1)
   274d6:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   274d8:	649c                	c.ld	a5,8(s1)
   274da:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   274dc:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   274e0:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   274e4:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   274e8:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   274ea:	081c                	c.addi4spn	a5,sp,16
   274ec:	f8f500e3          	beq	a0,a5,2746c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x8e>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   274f0:	ab0ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   274f4:	bfa5                	c.j	2746c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x8e>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   274f6:	6490                	c.ld	a2,8(s1)
   274f8:	0605                	c.addi	a2,1
	if (__n == 0)
   274fa:	de79                	c.beqz	a2,274d8 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xfa>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   274fc:	85ca                	c.mv	a1,s2
   274fe:	b42ef0ef          	jal	ra,16840 <memcpy@plt>
   27502:	bfd9                	c.j	274d8 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xfa>
      { return _M_dataplus._M_p; }
   27504:	842a                	c.mv	s0,a0
   27506:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   27508:	081c                	c.addi4spn	a5,sp,16
   2750a:	00f50463          	beq	a0,a5,27512 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x134>
   2750e:	a92ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   27512:	8522                	c.mv	a0,s0
   27514:	c7cef0ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000027518 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)>:
        return "(DW_LNS)0x" + to_hex((int)v);
}

std::string
to_string(DW_LNE v)
{
   27518:	7139                	c.addi16sp	sp,-64
   2751a:	fc06                	c.sdsp	ra,56(sp)
   2751c:	f822                	c.sdsp	s0,48(sp)
   2751e:	f426                	c.sdsp	s1,40(sp)
   27520:	f04a                	c.sdsp	s2,32(sp)
   27522:	842a                	c.mv	s0,a0
        switch (v) {
   27524:	478d                	c.li	a5,3
   27526:	08f58963          	beq	a1,a5,275b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xa0>
   2752a:	02b7ca63          	blt	a5,a1,2755e <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x46>
   2752e:	4785                	c.li	a5,1
   27530:	04f58c63          	beq	a1,a5,27588 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x70>
   27534:	4789                	c.li	a5,2
   27536:	0af59363          	bne	a1,a5,275dc <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xc4>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2753a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2753e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27540:	4681                	c.li	a3,0
   27542:	00008617          	auipc	a2,0x8
   27546:	f5860613          	addi	a2,a2,-168 # 2f49a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x46a>
   2754a:	00008597          	auipc	a1,0x8
   2754e:	f3e58593          	addi	a1,a1,-194 # 2f488 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x458>
   27552:	00013317          	auipc	t1,0x13
   27556:	dce33303          	ld	t1,-562(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2755a:	9302                	c.jalr	t1
   2755c:	a0b9                	c.j	275aa <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x92>
   2755e:	4791                	c.li	a5,4
   27560:	06f59e63          	bne	a1,a5,275dc <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xc4>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27564:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27568:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2756a:	4681                	c.li	a3,0
   2756c:	00008617          	auipc	a2,0x8
   27570:	f6460613          	addi	a2,a2,-156 # 2f4d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4a0>
   27574:	00008597          	auipc	a1,0x8
   27578:	f4458593          	addi	a1,a1,-188 # 2f4b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x488>
   2757c:	00013317          	auipc	t1,0x13
   27580:	da433303          	ld	t1,-604(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27584:	9302                	c.jalr	t1
   27586:	a015                	c.j	275aa <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x92>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27588:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2758c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2758e:	4681                	c.li	a3,0
   27590:	00008617          	auipc	a2,0x8
   27594:	ef360613          	addi	a2,a2,-269 # 2f483 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x453>
   27598:	00008597          	auipc	a1,0x8
   2759c:	ed858593          	addi	a1,a1,-296 # 2f470 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x440>
   275a0:	00013317          	auipc	t1,0x13
   275a4:	d8033303          	ld	t1,-640(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   275a8:	9302                	c.jalr	t1
        case DW_LNE::set_discriminator: return "DW_LNE_set_discriminator";
        case DW_LNE::lo_user: break;
        case DW_LNE::hi_user: break;
        }
        return "(DW_LNE)0x" + to_hex((int)v);
}
   275aa:	8522                	c.mv	a0,s0
   275ac:	70e2                	c.ldsp	ra,56(sp)
   275ae:	7442                	c.ldsp	s0,48(sp)
   275b0:	74a2                	c.ldsp	s1,40(sp)
   275b2:	7902                	c.ldsp	s2,32(sp)
   275b4:	6121                	c.addi16sp	sp,64
   275b6:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   275b8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   275bc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   275be:	4681                	c.li	a3,0
   275c0:	00008617          	auipc	a2,0x8
   275c4:	ef260613          	addi	a2,a2,-270 # 2f4b2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x482>
   275c8:	00008597          	auipc	a1,0x8
   275cc:	ed858593          	addi	a1,a1,-296 # 2f4a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x470>
   275d0:	00013317          	auipc	t1,0x13
   275d4:	d5033303          	ld	t1,-688(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   275d8:	9302                	c.jalr	t1
   275da:	bfc1                	c.j	275aa <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x92>
        return "(DW_LNE)0x" + to_hex((int)v);
   275dc:	848a                	c.mv	s1,sp
   275de:	8526                	c.mv	a0,s1
   275e0:	00013317          	auipc	t1,0x13
   275e4:	e5033303          	ld	t1,-432(t1) # 3a430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf640>
   275e8:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   275ea:	4729                	c.li	a4,10
   275ec:	00008697          	auipc	a3,0x8
   275f0:	eec68693          	addi	a3,a3,-276 # 2f4d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4a8>
   275f4:	4601                	c.li	a2,0
   275f6:	4581                	c.li	a1,0
   275f8:	8526                	c.mv	a0,s1
   275fa:	b06ef0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   275fe:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27600:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   27604:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   27606:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   27608:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2760c:	03278463          	beq	a5,s2,27634 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x11c>
      { _M_dataplus._M_p = __p; }
   27610:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   27612:	689c                	c.ld	a5,16(s1)
   27614:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   27616:	649c                	c.ld	a5,8(s1)
   27618:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2761a:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2761e:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   27622:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   27626:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   27628:	081c                	c.addi4spn	a5,sp,16
   2762a:	f8f500e3          	beq	a0,a5,275aa <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x92>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2762e:	972ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   27632:	bfa5                	c.j	275aa <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x92>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   27634:	6490                	c.ld	a2,8(s1)
   27636:	0605                	c.addi	a2,1
	if (__n == 0)
   27638:	de79                	c.beqz	a2,27616 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xfe>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2763a:	85ca                	c.mv	a1,s2
   2763c:	a04ef0ef          	jal	ra,16840 <memcpy@plt>
   27640:	bfd9                	c.j	27616 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xfe>
      { return _M_dataplus._M_p; }
   27642:	842a                	c.mv	s0,a0
   27644:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   27646:	081c                	c.addi4spn	a5,sp,16
   27648:	00f50463          	beq	a0,a5,27650 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x138>
   2764c:	954ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   27650:	8522                	c.mv	a0,s0
   27652:	b3eef0ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000027656 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)>:
{
   27656:	7139                	c.addi16sp	sp,-64
   27658:	fc06                	c.sdsp	ra,56(sp)
   2765a:	f822                	c.sdsp	s0,48(sp)
   2765c:	f426                	c.sdsp	s1,40(sp)
   2765e:	f04a                	c.sdsp	s2,32(sp)
   27660:	842a                	c.mv	s0,a0
        switch (v) {
   27662:	4789                	c.li	a5,2
   27664:	08f58763          	beq	a1,a5,276f2 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x9c>
   27668:	02b7c863          	blt	a5,a1,27698 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x42>
   2766c:	c9b9                	c.beqz	a1,276c2 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x6c>
   2766e:	4785                	c.li	a5,1
   27670:	0af59363          	bne	a1,a5,27716 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xc0>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27674:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27678:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2767a:	4681                	c.li	a3,0
   2767c:	00008617          	auipc	a2,0x8
   27680:	e9160613          	addi	a2,a2,-367 # 2f50d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4dd>
   27684:	00008597          	auipc	a1,0x8
   27688:	e7c58593          	addi	a1,a1,-388 # 2f500 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4d0>
   2768c:	00013317          	auipc	t1,0x13
   27690:	c9433303          	ld	t1,-876(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27694:	9302                	c.jalr	t1
   27696:	a0b9                	c.j	276e4 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x8e>
   27698:	478d                	c.li	a5,3
   2769a:	06f59e63          	bne	a1,a5,27716 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xc0>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2769e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   276a2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   276a4:	4681                	c.li	a3,0
   276a6:	00008617          	auipc	a2,0x8
   276aa:	e9060613          	addi	a2,a2,-368 # 2f536 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x506>
   276ae:	00008597          	auipc	a1,0x8
   276b2:	e7258593          	addi	a1,a1,-398 # 2f520 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4f0>
   276b6:	00013317          	auipc	t1,0x13
   276ba:	c6a33303          	ld	t1,-918(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   276be:	9302                	c.jalr	t1
   276c0:	a015                	c.j	276e4 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x8e>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   276c2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   276c6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   276c8:	4681                	c.li	a3,0
   276ca:	00008617          	auipc	a2,0x8
   276ce:	e3260613          	addi	a2,a2,-462 # 2f4fc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4cc>
   276d2:	00008597          	auipc	a1,0x8
   276d6:	e1658593          	addi	a1,a1,-490 # 2f4e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4b8>
   276da:	00013317          	auipc	t1,0x13
   276de:	c4633303          	ld	t1,-954(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   276e2:	9302                	c.jalr	t1
}
   276e4:	8522                	c.mv	a0,s0
   276e6:	70e2                	c.ldsp	ra,56(sp)
   276e8:	7442                	c.ldsp	s0,48(sp)
   276ea:	74a2                	c.ldsp	s1,40(sp)
   276ec:	7902                	c.ldsp	s2,32(sp)
   276ee:	6121                	c.addi16sp	sp,64
   276f0:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   276f2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   276f6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   276f8:	4681                	c.li	a3,0
   276fa:	00008617          	auipc	a2,0x8
   276fe:	e2560613          	addi	a2,a2,-475 # 2f51f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4ef>
   27702:	00008597          	auipc	a1,0x8
   27706:	e0e58593          	addi	a1,a1,-498 # 2f510 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4e0>
   2770a:	00013317          	auipc	t1,0x13
   2770e:	c1633303          	ld	t1,-1002(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27712:	9302                	c.jalr	t1
   27714:	bfc1                	c.j	276e4 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x8e>
        return "(DW_ID)0x" + to_hex((int)v);
   27716:	848a                	c.mv	s1,sp
   27718:	8526                	c.mv	a0,s1
   2771a:	00013317          	auipc	t1,0x13
   2771e:	d1633303          	ld	t1,-746(t1) # 3a430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf640>
   27722:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   27724:	4725                	c.li	a4,9
   27726:	00008697          	auipc	a3,0x8
   2772a:	e1268693          	addi	a3,a3,-494 # 2f538 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x508>
   2772e:	4601                	c.li	a2,0
   27730:	4581                	c.li	a1,0
   27732:	8526                	c.mv	a0,s1
   27734:	9ccef0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   27738:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2773a:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2773e:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   27740:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   27742:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   27746:	03278463          	beq	a5,s2,2776e <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x118>
      { _M_dataplus._M_p = __p; }
   2774a:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2774c:	689c                	c.ld	a5,16(s1)
   2774e:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   27750:	649c                	c.ld	a5,8(s1)
   27752:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   27754:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   27758:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2775c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   27760:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   27762:	081c                	c.addi4spn	a5,sp,16
   27764:	f8f500e3          	beq	a0,a5,276e4 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x8e>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   27768:	838ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2776c:	bfa5                	c.j	276e4 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x8e>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2776e:	6490                	c.ld	a2,8(s1)
   27770:	0605                	c.addi	a2,1
	if (__n == 0)
   27772:	de79                	c.beqz	a2,27750 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xfa>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   27774:	85ca                	c.mv	a1,s2
   27776:	8caef0ef          	jal	ra,16840 <memcpy@plt>
   2777a:	bfd9                	c.j	27750 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xfa>
      { return _M_dataplus._M_p; }
   2777c:	842a                	c.mv	s0,a0
   2777e:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   27780:	081c                	c.addi4spn	a5,sp,16
   27782:	00f50463          	beq	a0,a5,2778a <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x134>
   27786:	81aef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2778a:	8522                	c.mv	a0,s0
   2778c:	a04ef0ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000027790 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)>:
{
   27790:	7139                	c.addi16sp	sp,-64
   27792:	fc06                	c.sdsp	ra,56(sp)
   27794:	f822                	c.sdsp	s0,48(sp)
   27796:	f426                	c.sdsp	s1,40(sp)
   27798:	f04a                	c.sdsp	s2,32(sp)
   2779a:	842a                	c.mv	s0,a0
        switch (v) {
   2779c:	4795                	c.li	a5,5
   2779e:	0cb7ec63          	bltu	a5,a1,27876 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0xe6>
   277a2:	00259793          	slli	a5,a1,0x2
   277a6:	0000a717          	auipc	a4,0xa
   277aa:	8be70713          	addi	a4,a4,-1858 # 31064 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2034>
   277ae:	97ba                	c.add	a5,a4
   277b0:	439c                	c.lw	a5,0(a5)
   277b2:	97ba                	c.add	a5,a4
   277b4:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   277b6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   277ba:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   277bc:	4681                	c.li	a3,0
   277be:	00008617          	auipc	a2,0x8
   277c2:	d9860613          	addi	a2,a2,-616 # 2f556 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x526>
   277c6:	00008597          	auipc	a1,0x8
   277ca:	d8258593          	addi	a1,a1,-638 # 2f548 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x518>
   277ce:	00013317          	auipc	t1,0x13
   277d2:	b5233303          	ld	t1,-1198(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   277d6:	9302                	c.jalr	t1
}
   277d8:	8522                	c.mv	a0,s0
   277da:	70e2                	c.ldsp	ra,56(sp)
   277dc:	7442                	c.ldsp	s0,48(sp)
   277de:	74a2                	c.ldsp	s1,40(sp)
   277e0:	7902                	c.ldsp	s2,32(sp)
   277e2:	6121                	c.addi16sp	sp,64
   277e4:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   277e6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   277ea:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   277ec:	4681                	c.li	a3,0
   277ee:	00008617          	auipc	a2,0x8
   277f2:	d8160613          	addi	a2,a2,-639 # 2f56f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x53f>
   277f6:	00008597          	auipc	a1,0x8
   277fa:	d6258593          	addi	a1,a1,-670 # 2f558 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x528>
   277fe:	00013317          	auipc	t1,0x13
   27802:	b2233303          	ld	t1,-1246(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27806:	9302                	c.jalr	t1
   27808:	bfc1                	c.j	277d8 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2780a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2780e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27810:	4681                	c.li	a3,0
   27812:	00008617          	auipc	a2,0x8
   27816:	d7660613          	addi	a2,a2,-650 # 2f588 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x558>
   2781a:	00008597          	auipc	a1,0x8
   2781e:	d5658593          	addi	a1,a1,-682 # 2f570 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x540>
   27822:	00013317          	auipc	t1,0x13
   27826:	afe33303          	ld	t1,-1282(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2782a:	9302                	c.jalr	t1
   2782c:	b775                	c.j	277d8 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2782e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27832:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27834:	4681                	c.li	a3,0
   27836:	00008617          	auipc	a2,0x8
   2783a:	d7060613          	addi	a2,a2,-656 # 2f5a6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x576>
   2783e:	00008597          	auipc	a1,0x8
   27842:	d5258593          	addi	a1,a1,-686 # 2f590 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x560>
   27846:	00013317          	auipc	t1,0x13
   2784a:	ada33303          	ld	t1,-1318(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2784e:	9302                	c.jalr	t1
   27850:	b761                	c.j	277d8 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27852:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27856:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27858:	4681                	c.li	a3,0
   2785a:	00008617          	auipc	a2,0x8
   2785e:	d6560613          	addi	a2,a2,-667 # 2f5bf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x58f>
   27862:	00008597          	auipc	a1,0x8
   27866:	d4658593          	addi	a1,a1,-698 # 2f5a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x578>
   2786a:	00013317          	auipc	t1,0x13
   2786e:	ab633303          	ld	t1,-1354(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27872:	9302                	c.jalr	t1
   27874:	b795                	c.j	277d8 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x48>
        return "(DW_DS)0x" + to_hex((int)v);
   27876:	848a                	c.mv	s1,sp
   27878:	8526                	c.mv	a0,s1
   2787a:	00013317          	auipc	t1,0x13
   2787e:	bb633303          	ld	t1,-1098(t1) # 3a430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf640>
   27882:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   27884:	4725                	c.li	a4,9
   27886:	00008697          	auipc	a3,0x8
   2788a:	d3a68693          	addi	a3,a3,-710 # 2f5c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x590>
   2788e:	4601                	c.li	a2,0
   27890:	4581                	c.li	a1,0
   27892:	8526                	c.mv	a0,s1
   27894:	86cef0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   27898:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2789a:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2789e:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   278a0:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   278a2:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   278a6:	03278463          	beq	a5,s2,278ce <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x13e>
      { _M_dataplus._M_p = __p; }
   278aa:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   278ac:	689c                	c.ld	a5,16(s1)
   278ae:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   278b0:	649c                	c.ld	a5,8(s1)
   278b2:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   278b4:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   278b8:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   278bc:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   278c0:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   278c2:	081c                	c.addi4spn	a5,sp,16
   278c4:	f0f50ae3          	beq	a0,a5,277d8 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x48>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   278c8:	ed9ee0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   278cc:	b731                	c.j	277d8 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x48>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   278ce:	6490                	c.ld	a2,8(s1)
   278d0:	0605                	c.addi	a2,1
	if (__n == 0)
   278d2:	de79                	c.beqz	a2,278b0 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x120>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   278d4:	85ca                	c.mv	a1,s2
   278d6:	f6bee0ef          	jal	ra,16840 <memcpy@plt>
   278da:	bfd9                	c.j	278b0 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x120>
      { return _M_dataplus._M_p; }
   278dc:	842a                	c.mv	s0,a0
   278de:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   278e0:	081c                	c.addi4spn	a5,sp,16
   278e2:	00f50463          	beq	a0,a5,278ea <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x15a>
   278e6:	ebbee0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   278ea:	8522                	c.mv	a0,s0
   278ec:	8a4ef0ef          	jal	ra,16990 <_Unwind_Resume@plt>

00000000000278f0 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)>:
{
   278f0:	715d                	c.addi16sp	sp,-80
   278f2:	e486                	c.sdsp	ra,72(sp)
   278f4:	e0a2                	c.sdsp	s0,64(sp)
   278f6:	fc26                	c.sdsp	s1,56(sp)
   278f8:	f84a                	c.sdsp	s2,48(sp)
   278fa:	f44e                	c.sdsp	s3,40(sp)
   278fc:	f052                	c.sdsp	s4,32(sp)
   278fe:	842a                	c.mv	s0,a0
        switch (v) {
   27900:	4791                	c.li	a5,4
   27902:	0cb7ed63          	bltu	a5,a1,279dc <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0xec>
   27906:	058a                	c.slli	a1,0x2
   27908:	00009717          	auipc	a4,0x9
   2790c:	77470713          	addi	a4,a4,1908 # 3107c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x204c>
   27910:	95ba                	c.add	a1,a4
   27912:	419c                	c.lw	a5,0(a1)
   27914:	97ba                	c.add	a5,a4
   27916:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27918:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2791c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2791e:	4681                	c.li	a3,0
   27920:	00008617          	auipc	a2,0x8
   27924:	cca60613          	addi	a2,a2,-822 # 2f5ea <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5ba>
   27928:	00008597          	auipc	a1,0x8
   2792c:	ca858593          	addi	a1,a1,-856 # 2f5d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5a0>
   27930:	00013317          	auipc	t1,0x13
   27934:	9f033303          	ld	t1,-1552(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27938:	9302                	c.jalr	t1
}
   2793a:	8522                	c.mv	a0,s0
   2793c:	60a6                	c.ldsp	ra,72(sp)
   2793e:	6406                	c.ldsp	s0,64(sp)
   27940:	74e2                	c.ldsp	s1,56(sp)
   27942:	7942                	c.ldsp	s2,48(sp)
   27944:	79a2                	c.ldsp	s3,40(sp)
   27946:	7a02                	c.ldsp	s4,32(sp)
   27948:	6161                	c.addi16sp	sp,80
   2794a:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2794c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27950:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27952:	4681                	c.li	a3,0
   27954:	00008617          	auipc	a2,0x8
   27958:	cb260613          	addi	a2,a2,-846 # 2f606 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5d6>
   2795c:	00008597          	auipc	a1,0x8
   27960:	c9458593          	addi	a1,a1,-876 # 2f5f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5c0>
   27964:	00013317          	auipc	t1,0x13
   27968:	9bc33303          	ld	t1,-1604(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2796c:	9302                	c.jalr	t1
   2796e:	b7f1                	c.j	2793a <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27970:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27974:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27976:	4681                	c.li	a3,0
   27978:	00008617          	auipc	a2,0x8
   2797c:	caa60613          	addi	a2,a2,-854 # 2f622 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5f2>
   27980:	00008597          	auipc	a1,0x8
   27984:	c8858593          	addi	a1,a1,-888 # 2f608 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5d8>
   27988:	00013317          	auipc	t1,0x13
   2798c:	99833303          	ld	t1,-1640(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27990:	9302                	c.jalr	t1
   27992:	b765                	c.j	2793a <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27994:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27998:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2799a:	4681                	c.li	a3,0
   2799c:	00008617          	auipc	a2,0x8
   279a0:	ca760613          	addi	a2,a2,-857 # 2f643 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x613>
   279a4:	00008597          	auipc	a1,0x8
   279a8:	c8458593          	addi	a1,a1,-892 # 2f628 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5f8>
   279ac:	00013317          	auipc	t1,0x13
   279b0:	97433303          	ld	t1,-1676(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   279b4:	9302                	c.jalr	t1
   279b6:	b751                	c.j	2793a <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   279b8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   279bc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   279be:	4681                	c.li	a3,0
   279c0:	00008617          	auipc	a2,0x8
   279c4:	ca060613          	addi	a2,a2,-864 # 2f660 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x630>
   279c8:	00008597          	auipc	a1,0x8
   279cc:	c8058593          	addi	a1,a1,-896 # 2f648 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x618>
   279d0:	00013317          	auipc	t1,0x13
   279d4:	95033303          	ld	t1,-1712(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   279d8:	9302                	c.jalr	t1
   279da:	b785                	c.j	2793a <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x4a>
    const bool __neg = __val < 0;
   279dc:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   279e0:	0005891b          	addiw	s2,a1,0
   279e4:	0405cb63          	blt	a1,zero,27a3a <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x14a>
    const auto __len = __detail::__to_chars_len(__uval);
   279e8:	45a9                	c.li	a1,10
   279ea:	854a                	c.mv	a0,s2
   279ec:	00013317          	auipc	t1,0x13
   279f0:	ac433303          	ld	t1,-1340(t1) # 3a4b0 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x15708>
   279f4:	9302                	c.jalr	t1
   279f6:	00050a1b          	addiw	s4,a0,0
	: allocator_type(__a), _M_p(__dat) { }
   279fa:	081c                	c.addi4spn	a5,sp,16
   279fc:	e03e                	c.sdsp	a5,0(sp)
    string __str(__neg + __len, '-');
   279fe:	00a985bb          	addw	a1,s3,a0
      { _M_construct(__n, __c); }
   27a02:	02d00613          	addi	a2,zero,45
   27a06:	1582                	c.slli	a1,0x20
   27a08:	9181                	c.srli	a1,0x20
   27a0a:	848a                	c.mv	s1,sp
   27a0c:	8526                	c.mv	a0,s1
   27a0e:	df3ee0ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   27a12:	864a                	c.mv	a2,s2
   27a14:	85d2                	c.mv	a1,s4
   27a16:	6502                	c.ldsp	a0,0(sp)
   27a18:	954e                	c.add	a0,s3
   27a1a:	00013317          	auipc	t1,0x13
   27a1e:	ab633303          	ld	t1,-1354(t1) # 3a4d0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x156b6>
   27a22:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   27a24:	474d                	c.li	a4,19
   27a26:	00008697          	auipc	a3,0x8
   27a2a:	c4268693          	addi	a3,a3,-958 # 2f668 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x638>
   27a2e:	4601                	c.li	a2,0
   27a30:	4581                	c.li	a1,0
   27a32:	8526                	c.mv	a0,s1
   27a34:	ecdee0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   27a38:	a021                	c.j	27a40 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x150>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   27a3a:	40b0093b          	subw	s2,zero,a1
   27a3e:	b76d                	c.j	279e8 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0xf8>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   27a40:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27a42:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   27a46:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   27a48:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   27a4a:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   27a4e:	03278463          	beq	a5,s2,27a76 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x186>
      { _M_dataplus._M_p = __p; }
   27a52:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   27a54:	689c                	c.ld	a5,16(s1)
   27a56:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   27a58:	649c                	c.ld	a5,8(s1)
   27a5a:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   27a5c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   27a60:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   27a64:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   27a68:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   27a6a:	081c                	c.addi4spn	a5,sp,16
   27a6c:	ecf507e3          	beq	a0,a5,2793a <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x4a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   27a70:	d31ee0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   27a74:	b5d9                	c.j	2793a <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x4a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   27a76:	6490                	c.ld	a2,8(s1)
   27a78:	0605                	c.addi	a2,1
	if (__n == 0)
   27a7a:	de79                	c.beqz	a2,27a58 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x168>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   27a7c:	85ca                	c.mv	a1,s2
   27a7e:	dc3ee0ef          	jal	ra,16840 <memcpy@plt>
   27a82:	bfd9                	c.j	27a58 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x168>
      { return _M_dataplus._M_p; }
   27a84:	842a                	c.mv	s0,a0
   27a86:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   27a88:	081c                	c.addi4spn	a5,sp,16
   27a8a:	00f50463          	beq	a0,a5,27a92 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x1a2>
   27a8e:	d13ee0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   27a92:	8522                	c.mv	a0,s0
   27a94:	efdee0ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000027a98 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)>:
{
   27a98:	7139                	c.addi16sp	sp,-64
   27a9a:	fc06                	c.sdsp	ra,56(sp)
   27a9c:	f822                	c.sdsp	s0,48(sp)
   27a9e:	f426                	c.sdsp	s1,40(sp)
   27aa0:	f04a                	c.sdsp	s2,32(sp)
   27aa2:	842a                	c.mv	s0,a0
        switch (v) {
   27aa4:	47b1                	c.li	a5,12
   27aa6:	1cb7ea63          	bltu	a5,a1,27c7a <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x1e2>
   27aaa:	00259793          	slli	a5,a1,0x2
   27aae:	00009717          	auipc	a4,0x9
   27ab2:	5e270713          	addi	a4,a4,1506 # 31090 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2060>
   27ab6:	97ba                	c.add	a5,a4
   27ab8:	439c                	c.lw	a5,0(a5)
   27aba:	97ba                	c.add	a5,a4
   27abc:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27abe:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27ac2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27ac4:	4681                	c.li	a3,0
   27ac6:	00008617          	auipc	a2,0x8
   27aca:	bc560613          	addi	a2,a2,-1083 # 2f68b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x65b>
   27ace:	00008597          	auipc	a1,0x8
   27ad2:	bb258593          	addi	a1,a1,-1102 # 2f680 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x650>
   27ad6:	00013317          	auipc	t1,0x13
   27ada:	84a33303          	ld	t1,-1974(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27ade:	9302                	c.jalr	t1
}
   27ae0:	8522                	c.mv	a0,s0
   27ae2:	70e2                	c.ldsp	ra,56(sp)
   27ae4:	7442                	c.ldsp	s0,48(sp)
   27ae6:	74a2                	c.ldsp	s1,40(sp)
   27ae8:	7902                	c.ldsp	s2,32(sp)
   27aea:	6121                	c.addi16sp	sp,64
   27aec:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27aee:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27af2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27af4:	4681                	c.li	a3,0
   27af6:	00008617          	auipc	a2,0x8
   27afa:	bab60613          	addi	a2,a2,-1109 # 2f6a1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x671>
   27afe:	00008597          	auipc	a1,0x8
   27b02:	b9258593          	addi	a1,a1,-1134 # 2f690 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x660>
   27b06:	00013317          	auipc	t1,0x13
   27b0a:	81a33303          	ld	t1,-2022(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27b0e:	9302                	c.jalr	t1
   27b10:	bfc1                	c.j	27ae0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27b12:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27b16:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27b18:	4681                	c.li	a3,0
   27b1a:	00008617          	auipc	a2,0x8
   27b1e:	ba160613          	addi	a2,a2,-1119 # 2f6bb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68b>
   27b22:	00008597          	auipc	a1,0x8
   27b26:	b8658593          	addi	a1,a1,-1146 # 2f6a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x678>
   27b2a:	00012317          	auipc	t1,0x12
   27b2e:	7f633303          	ld	t1,2038(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27b32:	9302                	c.jalr	t1
   27b34:	b775                	c.j	27ae0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27b36:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27b3a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27b3c:	4681                	c.li	a3,0
   27b3e:	00008617          	auipc	a2,0x8
   27b42:	b9160613          	addi	a2,a2,-1135 # 2f6cf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x69f>
   27b46:	00008597          	auipc	a1,0x8
   27b4a:	b7a58593          	addi	a1,a1,-1158 # 2f6c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x690>
   27b4e:	00012317          	auipc	t1,0x12
   27b52:	7d233303          	ld	t1,2002(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27b56:	9302                	c.jalr	t1
   27b58:	b761                	c.j	27ae0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27b5a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27b5e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27b60:	4681                	c.li	a3,0
   27b62:	00008617          	auipc	a2,0x8
   27b66:	b7f60613          	addi	a2,a2,-1153 # 2f6e1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6b1>
   27b6a:	00008597          	auipc	a1,0x8
   27b6e:	b6658593          	addi	a1,a1,-1178 # 2f6d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6a0>
   27b72:	00012317          	auipc	t1,0x12
   27b76:	7ae33303          	ld	t1,1966(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27b7a:	9302                	c.jalr	t1
   27b7c:	b795                	c.j	27ae0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27b7e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27b82:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27b84:	4681                	c.li	a3,0
   27b86:	00008617          	auipc	a2,0x8
   27b8a:	b7460613          	addi	a2,a2,-1164 # 2f6fa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6ca>
   27b8e:	00008597          	auipc	a1,0x8
   27b92:	b5a58593          	addi	a1,a1,-1190 # 2f6e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6b8>
   27b96:	00012317          	auipc	t1,0x12
   27b9a:	78a33303          	ld	t1,1930(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27b9e:	9302                	c.jalr	t1
   27ba0:	b781                	c.j	27ae0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27ba2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27ba6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27ba8:	4681                	c.li	a3,0
   27baa:	00008617          	auipc	a2,0x8
   27bae:	b6c60613          	addi	a2,a2,-1172 # 2f716 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6e6>
   27bb2:	00008597          	auipc	a1,0x8
   27bb6:	b4e58593          	addi	a1,a1,-1202 # 2f700 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6d0>
   27bba:	00012317          	auipc	t1,0x12
   27bbe:	76633303          	ld	t1,1894(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27bc2:	9302                	c.jalr	t1
   27bc4:	bf31                	c.j	27ae0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27bc6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27bca:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27bcc:	4681                	c.li	a3,0
   27bce:	00008617          	auipc	a2,0x8
   27bd2:	b5d60613          	addi	a2,a2,-1187 # 2f72b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6fb>
   27bd6:	00008597          	auipc	a1,0x8
   27bda:	b4258593          	addi	a1,a1,-1214 # 2f718 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6e8>
   27bde:	00012317          	auipc	t1,0x12
   27be2:	74233303          	ld	t1,1858(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27be6:	9302                	c.jalr	t1
   27be8:	bde5                	c.j	27ae0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27bea:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27bee:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27bf0:	4681                	c.li	a3,0
   27bf2:	00008617          	auipc	a2,0x8
   27bf6:	b5560613          	addi	a2,a2,-1195 # 2f747 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x717>
   27bfa:	00008597          	auipc	a1,0x8
   27bfe:	b3658593          	addi	a1,a1,-1226 # 2f730 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x700>
   27c02:	00012317          	auipc	t1,0x12
   27c06:	71e33303          	ld	t1,1822(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27c0a:	9302                	c.jalr	t1
   27c0c:	bdd1                	c.j	27ae0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27c0e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27c12:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27c14:	4681                	c.li	a3,0
   27c16:	00008617          	auipc	a2,0x8
   27c1a:	b4960613          	addi	a2,a2,-1207 # 2f75f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x72f>
   27c1e:	00008597          	auipc	a1,0x8
   27c22:	b2a58593          	addi	a1,a1,-1238 # 2f748 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x718>
   27c26:	00012317          	auipc	t1,0x12
   27c2a:	6fa33303          	ld	t1,1786(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27c2e:	9302                	c.jalr	t1
   27c30:	bd45                	c.j	27ae0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27c32:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27c36:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27c38:	4681                	c.li	a3,0
   27c3a:	00008617          	auipc	a2,0x8
   27c3e:	b3f60613          	addi	a2,a2,-1217 # 2f779 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x749>
   27c42:	00008597          	auipc	a1,0x8
   27c46:	b1e58593          	addi	a1,a1,-1250 # 2f760 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x730>
   27c4a:	00012317          	auipc	t1,0x12
   27c4e:	6d633303          	ld	t1,1750(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27c52:	9302                	c.jalr	t1
   27c54:	b571                	c.j	27ae0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27c56:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27c5a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27c5c:	4681                	c.li	a3,0
   27c5e:	00008617          	auipc	a2,0x8
   27c62:	b3060613          	addi	a2,a2,-1232 # 2f78e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x75e>
   27c66:	00008597          	auipc	a1,0x8
   27c6a:	b1a58593          	addi	a1,a1,-1254 # 2f780 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x750>
   27c6e:	00012317          	auipc	t1,0x12
   27c72:	6b233303          	ld	t1,1714(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27c76:	9302                	c.jalr	t1
   27c78:	b5a5                	c.j	27ae0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
        return "(DW_LNS)0x" + to_hex((int)v);
   27c7a:	848a                	c.mv	s1,sp
   27c7c:	8526                	c.mv	a0,s1
   27c7e:	00012317          	auipc	t1,0x12
   27c82:	7b233303          	ld	t1,1970(t1) # 3a430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf640>
   27c86:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   27c88:	4729                	c.li	a4,10
   27c8a:	00008697          	auipc	a3,0x8
   27c8e:	b0668693          	addi	a3,a3,-1274 # 2f790 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x760>
   27c92:	4601                	c.li	a2,0
   27c94:	4581                	c.li	a1,0
   27c96:	8526                	c.mv	a0,s1
   27c98:	c69ee0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   27c9c:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27c9e:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   27ca2:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   27ca4:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   27ca6:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   27caa:	03278463          	beq	a5,s2,27cd2 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x23a>
      { _M_dataplus._M_p = __p; }
   27cae:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   27cb0:	689c                	c.ld	a5,16(s1)
   27cb2:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   27cb4:	649c                	c.ld	a5,8(s1)
   27cb6:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   27cb8:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   27cbc:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   27cc0:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   27cc4:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   27cc6:	081c                	c.addi4spn	a5,sp,16
   27cc8:	e0f50ce3          	beq	a0,a5,27ae0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   27ccc:	ad5ee0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   27cd0:	bd01                	c.j	27ae0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   27cd2:	6490                	c.ld	a2,8(s1)
   27cd4:	0605                	c.addi	a2,1
	if (__n == 0)
   27cd6:	de79                	c.beqz	a2,27cb4 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x21c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   27cd8:	85ca                	c.mv	a1,s2
   27cda:	b67ee0ef          	jal	ra,16840 <memcpy@plt>
   27cde:	bfd9                	c.j	27cb4 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x21c>
      { return _M_dataplus._M_p; }
   27ce0:	842a                	c.mv	s0,a0
   27ce2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   27ce4:	081c                	c.addi4spn	a5,sp,16
   27ce6:	00f50463          	beq	a0,a5,27cee <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x256>
   27cea:	ab7ee0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   27cee:	8522                	c.mv	a0,s0
   27cf0:	ca1ee0ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000027cf4 <dwarf::to_string[abi:cxx11](dwarf::section_type)>:
{
   27cf4:	715d                	c.addi16sp	sp,-80
   27cf6:	e486                	c.sdsp	ra,72(sp)
   27cf8:	e0a2                	c.sdsp	s0,64(sp)
   27cfa:	fc26                	c.sdsp	s1,56(sp)
   27cfc:	f84a                	c.sdsp	s2,48(sp)
   27cfe:	f44e                	c.sdsp	s3,40(sp)
   27d00:	f052                	c.sdsp	s4,32(sp)
   27d02:	842a                	c.mv	s0,a0
        switch (v) {
   27d04:	47ad                	c.li	a5,11
   27d06:	1cb7eb63          	bltu	a5,a1,27edc <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x1e8>
   27d0a:	058a                	c.slli	a1,0x2
   27d0c:	00009717          	auipc	a4,0x9
   27d10:	3b870713          	addi	a4,a4,952 # 310c4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2094>
   27d14:	95ba                	c.add	a1,a4
   27d16:	419c                	c.lw	a5,0(a1)
   27d18:	97ba                	c.add	a5,a4
   27d1a:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27d1c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27d20:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27d22:	4681                	c.li	a3,0
   27d24:	00008617          	auipc	a2,0x8
   27d28:	a9060613          	addi	a2,a2,-1392 # 2f7b4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x784>
   27d2c:	00008597          	auipc	a1,0x8
   27d30:	a7458593          	addi	a1,a1,-1420 # 2f7a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x770>
   27d34:	00012317          	auipc	t1,0x12
   27d38:	5ec33303          	ld	t1,1516(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27d3c:	9302                	c.jalr	t1
}
   27d3e:	8522                	c.mv	a0,s0
   27d40:	60a6                	c.ldsp	ra,72(sp)
   27d42:	6406                	c.ldsp	s0,64(sp)
   27d44:	74e2                	c.ldsp	s1,56(sp)
   27d46:	7942                	c.ldsp	s2,48(sp)
   27d48:	79a2                	c.ldsp	s3,40(sp)
   27d4a:	7a02                	c.ldsp	s4,32(sp)
   27d4c:	6161                	c.addi16sp	sp,80
   27d4e:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27d50:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27d54:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27d56:	4681                	c.li	a3,0
   27d58:	00008617          	auipc	a2,0x8
   27d5c:	a7560613          	addi	a2,a2,-1419 # 2f7cd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x79d>
   27d60:	00008597          	auipc	a1,0x8
   27d64:	a5858593          	addi	a1,a1,-1448 # 2f7b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x788>
   27d68:	00012317          	auipc	t1,0x12
   27d6c:	5b833303          	ld	t1,1464(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27d70:	9302                	c.jalr	t1
   27d72:	b7f1                	c.j	27d3e <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27d74:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27d78:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27d7a:	4681                	c.li	a3,0
   27d7c:	00008617          	auipc	a2,0x8
   27d80:	a6760613          	addi	a2,a2,-1433 # 2f7e3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7b3>
   27d84:	00008597          	auipc	a1,0x8
   27d88:	a4c58593          	addi	a1,a1,-1460 # 2f7d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7a0>
   27d8c:	00012317          	auipc	t1,0x12
   27d90:	59433303          	ld	t1,1428(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27d94:	9302                	c.jalr	t1
   27d96:	b765                	c.j	27d3e <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27d98:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27d9c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27d9e:	4681                	c.li	a3,0
   27da0:	00008617          	auipc	a2,0x8
   27da4:	a5a60613          	addi	a2,a2,-1446 # 2f7fa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7ca>
   27da8:	00008597          	auipc	a1,0x8
   27dac:	a4058593          	addi	a1,a1,-1472 # 2f7e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7b8>
   27db0:	00012317          	auipc	t1,0x12
   27db4:	57033303          	ld	t1,1392(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27db8:	9302                	c.jalr	t1
   27dba:	b751                	c.j	27d3e <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27dbc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27dc0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27dc2:	4681                	c.li	a3,0
   27dc4:	00008617          	auipc	a2,0x8
   27dc8:	a4e60613          	addi	a2,a2,-1458 # 2f812 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7e2>
   27dcc:	00008597          	auipc	a1,0x8
   27dd0:	a3458593          	addi	a1,a1,-1484 # 2f800 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7d0>
   27dd4:	00012317          	auipc	t1,0x12
   27dd8:	54c33303          	ld	t1,1356(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27ddc:	9302                	c.jalr	t1
   27dde:	b785                	c.j	27d3e <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27de0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27de4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27de6:	4681                	c.li	a3,0
   27de8:	00008617          	auipc	a2,0x8
   27dec:	a4160613          	addi	a2,a2,-1471 # 2f829 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7f9>
   27df0:	00008597          	auipc	a1,0x8
   27df4:	a2858593          	addi	a1,a1,-1496 # 2f818 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7e8>
   27df8:	00012317          	auipc	t1,0x12
   27dfc:	52833303          	ld	t1,1320(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27e00:	9302                	c.jalr	t1
   27e02:	bf35                	c.j	27d3e <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27e04:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27e08:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27e0a:	4681                	c.li	a3,0
   27e0c:	00008617          	auipc	a2,0x8
   27e10:	a3960613          	addi	a2,a2,-1479 # 2f845 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x815>
   27e14:	00008597          	auipc	a1,0x8
   27e18:	a1c58593          	addi	a1,a1,-1508 # 2f830 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x800>
   27e1c:	00012317          	auipc	t1,0x12
   27e20:	50433303          	ld	t1,1284(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27e24:	9302                	c.jalr	t1
   27e26:	bf21                	c.j	27d3e <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27e28:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27e2c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27e2e:	4681                	c.li	a3,0
   27e30:	00008617          	auipc	a2,0x8
   27e34:	a2e60613          	addi	a2,a2,-1490 # 2f85e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x82e>
   27e38:	00008597          	auipc	a1,0x8
   27e3c:	a1058593          	addi	a1,a1,-1520 # 2f848 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x818>
   27e40:	00012317          	auipc	t1,0x12
   27e44:	4e033303          	ld	t1,1248(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27e48:	9302                	c.jalr	t1
   27e4a:	bdd5                	c.j	27d3e <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27e4c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27e50:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27e52:	4681                	c.li	a3,0
   27e54:	00008617          	auipc	a2,0x8
   27e58:	a2260613          	addi	a2,a2,-1502 # 2f876 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x846>
   27e5c:	00008597          	auipc	a1,0x8
   27e60:	a0458593          	addi	a1,a1,-1532 # 2f860 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x830>
   27e64:	00012317          	auipc	t1,0x12
   27e68:	4bc33303          	ld	t1,1212(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27e6c:	9302                	c.jalr	t1
   27e6e:	bdc1                	c.j	27d3e <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27e70:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27e74:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27e76:	4681                	c.li	a3,0
   27e78:	00008617          	auipc	a2,0x8
   27e7c:	a1460613          	addi	a2,a2,-1516 # 2f88c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x85c>
   27e80:	00008597          	auipc	a1,0x8
   27e84:	9f858593          	addi	a1,a1,-1544 # 2f878 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x848>
   27e88:	00012317          	auipc	t1,0x12
   27e8c:	49833303          	ld	t1,1176(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27e90:	9302                	c.jalr	t1
   27e92:	b575                	c.j	27d3e <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27e94:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27e98:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27e9a:	4681                	c.li	a3,0
   27e9c:	00008617          	auipc	a2,0x8
   27ea0:	a0560613          	addi	a2,a2,-1531 # 2f8a1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x871>
   27ea4:	00008597          	auipc	a1,0x8
   27ea8:	9ec58593          	addi	a1,a1,-1556 # 2f890 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x860>
   27eac:	00012317          	auipc	t1,0x12
   27eb0:	47433303          	ld	t1,1140(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27eb4:	9302                	c.jalr	t1
   27eb6:	b561                	c.j	27d3e <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27eb8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27ebc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27ebe:	4681                	c.li	a3,0
   27ec0:	00008617          	auipc	a2,0x8
   27ec4:	9fb60613          	addi	a2,a2,-1541 # 2f8bb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x88b>
   27ec8:	00008597          	auipc	a1,0x8
   27ecc:	9e058593          	addi	a1,a1,-1568 # 2f8a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x878>
   27ed0:	00012317          	auipc	t1,0x12
   27ed4:	45033303          	ld	t1,1104(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27ed8:	9302                	c.jalr	t1
   27eda:	b595                	c.j	27d3e <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
    const bool __neg = __val < 0;
   27edc:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   27ee0:	0005891b          	addiw	s2,a1,0
   27ee4:	0405cb63          	blt	a1,zero,27f3a <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x246>
    const auto __len = __detail::__to_chars_len(__uval);
   27ee8:	45a9                	c.li	a1,10
   27eea:	854a                	c.mv	a0,s2
   27eec:	00012317          	auipc	t1,0x12
   27ef0:	5c433303          	ld	t1,1476(t1) # 3a4b0 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x15708>
   27ef4:	9302                	c.jalr	t1
   27ef6:	00050a1b          	addiw	s4,a0,0
	: allocator_type(__a), _M_p(__dat) { }
   27efa:	081c                	c.addi4spn	a5,sp,16
   27efc:	e03e                	c.sdsp	a5,0(sp)
    string __str(__neg + __len, '-');
   27efe:	00a985bb          	addw	a1,s3,a0
      { _M_construct(__n, __c); }
   27f02:	02d00613          	addi	a2,zero,45
   27f06:	1582                	c.slli	a1,0x20
   27f08:	9181                	c.srli	a1,0x20
   27f0a:	848a                	c.mv	s1,sp
   27f0c:	8526                	c.mv	a0,s1
   27f0e:	8f3ee0ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   27f12:	864a                	c.mv	a2,s2
   27f14:	85d2                	c.mv	a1,s4
   27f16:	6502                	c.ldsp	a0,0(sp)
   27f18:	954e                	c.add	a0,s3
   27f1a:	00012317          	auipc	t1,0x12
   27f1e:	5b633303          	ld	t1,1462(t1) # 3a4d0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x156b6>
   27f22:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   27f24:	4739                	c.li	a4,14
   27f26:	00008697          	auipc	a3,0x8
   27f2a:	99a68693          	addi	a3,a3,-1638 # 2f8c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x890>
   27f2e:	4601                	c.li	a2,0
   27f30:	4581                	c.li	a1,0
   27f32:	8526                	c.mv	a0,s1
   27f34:	9cdee0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   27f38:	a021                	c.j	27f40 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x24c>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   27f3a:	40b0093b          	subw	s2,zero,a1
   27f3e:	b76d                	c.j	27ee8 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x1f4>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   27f40:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27f42:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   27f46:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   27f48:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   27f4a:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   27f4e:	03278463          	beq	a5,s2,27f76 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x282>
      { _M_dataplus._M_p = __p; }
   27f52:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   27f54:	689c                	c.ld	a5,16(s1)
   27f56:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   27f58:	649c                	c.ld	a5,8(s1)
   27f5a:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   27f5c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   27f60:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   27f64:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   27f68:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   27f6a:	081c                	c.addi4spn	a5,sp,16
   27f6c:	dcf509e3          	beq	a0,a5,27d3e <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   27f70:	831ee0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   27f74:	b3e9                	c.j	27d3e <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   27f76:	6490                	c.ld	a2,8(s1)
   27f78:	0605                	c.addi	a2,1
	if (__n == 0)
   27f7a:	de79                	c.beqz	a2,27f58 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x264>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   27f7c:	85ca                	c.mv	a1,s2
   27f7e:	8c3ee0ef          	jal	ra,16840 <memcpy@plt>
   27f82:	bfd9                	c.j	27f58 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x264>
      { return _M_dataplus._M_p; }
   27f84:	842a                	c.mv	s0,a0
   27f86:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   27f88:	081c                	c.addi4spn	a5,sp,16
   27f8a:	00f50463          	beq	a0,a5,27f92 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x29e>
   27f8e:	813ee0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   27f92:	8522                	c.mv	a0,s0
   27f94:	9fdee0ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000027f98 <dwarf::to_string[abi:cxx11](dwarf::value::type)>:
{
   27f98:	715d                	c.addi16sp	sp,-80
   27f9a:	e486                	c.sdsp	ra,72(sp)
   27f9c:	e0a2                	c.sdsp	s0,64(sp)
   27f9e:	fc26                	c.sdsp	s1,56(sp)
   27fa0:	f84a                	c.sdsp	s2,48(sp)
   27fa2:	f44e                	c.sdsp	s3,40(sp)
   27fa4:	f052                	c.sdsp	s4,32(sp)
   27fa6:	842a                	c.mv	s0,a0
        switch (v) {
   27fa8:	47b5                	c.li	a5,13
   27faa:	20b7ef63          	bltu	a5,a1,281c8 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x230>
   27fae:	058a                	c.slli	a1,0x2
   27fb0:	00009717          	auipc	a4,0x9
   27fb4:	14470713          	addi	a4,a4,324 # 310f4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x20c4>
   27fb8:	95ba                	c.add	a1,a4
   27fba:	419c                	c.lw	a5,0(a1)
   27fbc:	97ba                	c.add	a5,a4
   27fbe:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27fc0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27fc4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27fc6:	4681                	c.li	a3,0
   27fc8:	00008617          	auipc	a2,0x8
   27fcc:	91c60613          	addi	a2,a2,-1764 # 2f8e4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8b4>
   27fd0:	00008597          	auipc	a1,0x8
   27fd4:	90058593          	addi	a1,a1,-1792 # 2f8d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8a0>
   27fd8:	00012317          	auipc	t1,0x12
   27fdc:	34833303          	ld	t1,840(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   27fe0:	9302                	c.jalr	t1
}
   27fe2:	8522                	c.mv	a0,s0
   27fe4:	60a6                	c.ldsp	ra,72(sp)
   27fe6:	6406                	c.ldsp	s0,64(sp)
   27fe8:	74e2                	c.ldsp	s1,56(sp)
   27fea:	7942                	c.ldsp	s2,48(sp)
   27fec:	79a2                	c.ldsp	s3,40(sp)
   27fee:	7a02                	c.ldsp	s4,32(sp)
   27ff0:	6161                	c.addi16sp	sp,80
   27ff2:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27ff4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27ff8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27ffa:	4681                	c.li	a3,0
   27ffc:	00008617          	auipc	a2,0x8
   28000:	90060613          	addi	a2,a2,-1792 # 2f8fc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8cc>
   28004:	00008597          	auipc	a1,0x8
   28008:	8e458593          	addi	a1,a1,-1820 # 2f8e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8b8>
   2800c:	00012317          	auipc	t1,0x12
   28010:	31433303          	ld	t1,788(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28014:	9302                	c.jalr	t1
   28016:	b7f1                	c.j	27fe2 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28018:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2801c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2801e:	4681                	c.li	a3,0
   28020:	00008617          	auipc	a2,0x8
   28024:	8f260613          	addi	a2,a2,-1806 # 2f912 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8e2>
   28028:	00008597          	auipc	a1,0x8
   2802c:	8d858593          	addi	a1,a1,-1832 # 2f900 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8d0>
   28030:	00012317          	auipc	t1,0x12
   28034:	2f033303          	ld	t1,752(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28038:	9302                	c.jalr	t1
   2803a:	b765                	c.j	27fe2 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2803c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28040:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28042:	4681                	c.li	a3,0
   28044:	00008617          	auipc	a2,0x8
   28048:	8e960613          	addi	a2,a2,-1815 # 2f92d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8fd>
   2804c:	00008597          	auipc	a1,0x8
   28050:	8cc58593          	addi	a1,a1,-1844 # 2f918 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8e8>
   28054:	00012317          	auipc	t1,0x12
   28058:	2cc33303          	ld	t1,716(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2805c:	9302                	c.jalr	t1
   2805e:	b751                	c.j	27fe2 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28060:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28064:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28066:	4681                	c.li	a3,0
   28068:	00008617          	auipc	a2,0x8
   2806c:	8de60613          	addi	a2,a2,-1826 # 2f946 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x916>
   28070:	00008597          	auipc	a1,0x8
   28074:	8c058593          	addi	a1,a1,-1856 # 2f930 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x900>
   28078:	00012317          	auipc	t1,0x12
   2807c:	2a833303          	ld	t1,680(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28080:	9302                	c.jalr	t1
   28082:	b785                	c.j	27fe2 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28084:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28088:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2808a:	4681                	c.li	a3,0
   2808c:	00008617          	auipc	a2,0x8
   28090:	8d260613          	addi	a2,a2,-1838 # 2f95e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x92e>
   28094:	00008597          	auipc	a1,0x8
   28098:	8b458593          	addi	a1,a1,-1868 # 2f948 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x918>
   2809c:	00012317          	auipc	t1,0x12
   280a0:	28433303          	ld	t1,644(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   280a4:	9302                	c.jalr	t1
   280a6:	bf35                	c.j	27fe2 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   280a8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   280ac:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   280ae:	4681                	c.li	a3,0
   280b0:	00008617          	auipc	a2,0x8
   280b4:	8c460613          	addi	a2,a2,-1852 # 2f974 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x944>
   280b8:	00008597          	auipc	a1,0x8
   280bc:	8a858593          	addi	a1,a1,-1880 # 2f960 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x930>
   280c0:	00012317          	auipc	t1,0x12
   280c4:	26033303          	ld	t1,608(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   280c8:	9302                	c.jalr	t1
   280ca:	bf21                	c.j	27fe2 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   280cc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   280d0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   280d2:	4681                	c.li	a3,0
   280d4:	00008617          	auipc	a2,0x8
   280d8:	8b560613          	addi	a2,a2,-1867 # 2f989 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x959>
   280dc:	00008597          	auipc	a1,0x8
   280e0:	89c58593          	addi	a1,a1,-1892 # 2f978 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x948>
   280e4:	00012317          	auipc	t1,0x12
   280e8:	23c33303          	ld	t1,572(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   280ec:	9302                	c.jalr	t1
   280ee:	bdd5                	c.j	27fe2 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   280f0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   280f4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   280f6:	4681                	c.li	a3,0
   280f8:	00008617          	auipc	a2,0x8
   280fc:	8a960613          	addi	a2,a2,-1879 # 2f9a1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x971>
   28100:	00008597          	auipc	a1,0x8
   28104:	89058593          	addi	a1,a1,-1904 # 2f990 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x960>
   28108:	00012317          	auipc	t1,0x12
   2810c:	21833303          	ld	t1,536(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28110:	9302                	c.jalr	t1
   28112:	bdc1                	c.j	27fe2 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28114:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28118:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2811a:	4681                	c.li	a3,0
   2811c:	00008617          	auipc	a2,0x8
   28120:	8a060613          	addi	a2,a2,-1888 # 2f9bc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x98c>
   28124:	00008597          	auipc	a1,0x8
   28128:	88458593          	addi	a1,a1,-1916 # 2f9a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x978>
   2812c:	00012317          	auipc	t1,0x12
   28130:	1f433303          	ld	t1,500(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28134:	9302                	c.jalr	t1
   28136:	b575                	c.j	27fe2 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28138:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2813c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2813e:	4681                	c.li	a3,0
   28140:	00008617          	auipc	a2,0x8
   28144:	89060613          	addi	a2,a2,-1904 # 2f9d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9a0>
   28148:	00008597          	auipc	a1,0x8
   2814c:	87858593          	addi	a1,a1,-1928 # 2f9c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x990>
   28150:	00012317          	auipc	t1,0x12
   28154:	1d033303          	ld	t1,464(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28158:	9302                	c.jalr	t1
   2815a:	b561                	c.j	27fe2 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2815c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28160:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28162:	4681                	c.li	a3,0
   28164:	00008617          	auipc	a2,0x8
   28168:	88a60613          	addi	a2,a2,-1910 # 2f9ee <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9be>
   2816c:	00008597          	auipc	a1,0x8
   28170:	86c58593          	addi	a1,a1,-1940 # 2f9d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9a8>
   28174:	00012317          	auipc	t1,0x12
   28178:	1ac33303          	ld	t1,428(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2817c:	9302                	c.jalr	t1
   2817e:	b595                	c.j	27fe2 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28180:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28184:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28186:	4681                	c.li	a3,0
   28188:	00008617          	auipc	a2,0x8
   2818c:	87e60613          	addi	a2,a2,-1922 # 2fa06 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9d6>
   28190:	00008597          	auipc	a1,0x8
   28194:	86058593          	addi	a1,a1,-1952 # 2f9f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9c0>
   28198:	00012317          	auipc	t1,0x12
   2819c:	18833303          	ld	t1,392(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   281a0:	9302                	c.jalr	t1
   281a2:	b581                	c.j	27fe2 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   281a4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   281a8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   281aa:	4681                	c.li	a3,0
   281ac:	00008617          	auipc	a2,0x8
   281b0:	86f60613          	addi	a2,a2,-1937 # 2fa1b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9eb>
   281b4:	00008597          	auipc	a1,0x8
   281b8:	85458593          	addi	a1,a1,-1964 # 2fa08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9d8>
   281bc:	00012317          	auipc	t1,0x12
   281c0:	16433303          	ld	t1,356(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   281c4:	9302                	c.jalr	t1
   281c6:	bd31                	c.j	27fe2 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
    const bool __neg = __val < 0;
   281c8:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   281cc:	0005891b          	addiw	s2,a1,0
   281d0:	0405cb63          	blt	a1,zero,28226 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x28e>
    const auto __len = __detail::__to_chars_len(__uval);
   281d4:	45a9                	c.li	a1,10
   281d6:	854a                	c.mv	a0,s2
   281d8:	00012317          	auipc	t1,0x12
   281dc:	2d833303          	ld	t1,728(t1) # 3a4b0 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x15708>
   281e0:	9302                	c.jalr	t1
   281e2:	00050a1b          	addiw	s4,a0,0
	: allocator_type(__a), _M_p(__dat) { }
   281e6:	081c                	c.addi4spn	a5,sp,16
   281e8:	e03e                	c.sdsp	a5,0(sp)
    string __str(__neg + __len, '-');
   281ea:	00a985bb          	addw	a1,s3,a0
      { _M_construct(__n, __c); }
   281ee:	02d00613          	addi	a2,zero,45
   281f2:	1582                	c.slli	a1,0x20
   281f4:	9181                	c.srli	a1,0x20
   281f6:	848a                	c.mv	s1,sp
   281f8:	8526                	c.mv	a0,s1
   281fa:	e06ee0ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   281fe:	864a                	c.mv	a2,s2
   28200:	85d2                	c.mv	a1,s4
   28202:	6502                	c.ldsp	a0,0(sp)
   28204:	954e                	c.add	a0,s3
   28206:	00012317          	auipc	t1,0x12
   2820a:	2ca33303          	ld	t1,714(t1) # 3a4d0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x156b6>
   2820e:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   28210:	4735                	c.li	a4,13
   28212:	00008697          	auipc	a3,0x8
   28216:	80e68693          	addi	a3,a3,-2034 # 2fa20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9f0>
   2821a:	4601                	c.li	a2,0
   2821c:	4581                	c.li	a1,0
   2821e:	8526                	c.mv	a0,s1
   28220:	ee0ee0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   28224:	a021                	c.j	2822c <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x294>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   28226:	40b0093b          	subw	s2,zero,a1
   2822a:	b76d                	c.j	281d4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x23c>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2822c:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2822e:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   28232:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   28234:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   28236:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2823a:	03278463          	beq	a5,s2,28262 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x2ca>
      { _M_dataplus._M_p = __p; }
   2823e:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   28240:	689c                	c.ld	a5,16(s1)
   28242:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   28244:	649c                	c.ld	a5,8(s1)
   28246:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   28248:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2824c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   28250:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   28254:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   28256:	081c                	c.addi4spn	a5,sp,16
   28258:	d8f505e3          	beq	a0,a5,27fe2 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2825c:	d44ee0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   28260:	b349                	c.j	27fe2 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   28262:	6490                	c.ld	a2,8(s1)
   28264:	0605                	c.addi	a2,1
	if (__n == 0)
   28266:	de79                	c.beqz	a2,28244 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x2ac>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   28268:	85ca                	c.mv	a1,s2
   2826a:	dd6ee0ef          	jal	ra,16840 <memcpy@plt>
   2826e:	bfd9                	c.j	28244 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x2ac>
      { return _M_dataplus._M_p; }
   28270:	842a                	c.mv	s0,a0
   28272:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   28274:	081c                	c.addi4spn	a5,sp,16
   28276:	00f50463          	beq	a0,a5,2827e <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x2e6>
   2827a:	d26ee0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2827e:	8522                	c.mv	a0,s0
   28280:	f10ee0ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000028284 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)>:
{
   28284:	7139                	c.addi16sp	sp,-64
   28286:	fc06                	c.sdsp	ra,56(sp)
   28288:	f822                	c.sdsp	s0,48(sp)
   2828a:	f426                	c.sdsp	s1,40(sp)
   2828c:	f04a                	c.sdsp	s2,32(sp)
   2828e:	842a                	c.mv	s0,a0
        switch (v) {
   28290:	47c1                	c.li	a5,16
   28292:	26b7e263          	bltu	a5,a1,284f6 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x272>
   28296:	00259793          	slli	a5,a1,0x2
   2829a:	00009717          	auipc	a4,0x9
   2829e:	e9270713          	addi	a4,a4,-366 # 3112c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x20fc>
   282a2:	97ba                	c.add	a5,a4
   282a4:	439c                	c.lw	a5,0(a5)
   282a6:	97ba                	c.add	a5,a4
   282a8:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   282aa:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   282ae:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   282b0:	4681                	c.li	a3,0
   282b2:	00007617          	auipc	a2,0x7
   282b6:	78c60613          	addi	a2,a2,1932 # 2fa3e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa0e>
   282ba:	00007597          	auipc	a1,0x7
   282be:	77658593          	addi	a1,a1,1910 # 2fa30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa00>
   282c2:	00012317          	auipc	t1,0x12
   282c6:	05e33303          	ld	t1,94(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   282ca:	9302                	c.jalr	t1
}
   282cc:	8522                	c.mv	a0,s0
   282ce:	70e2                	c.ldsp	ra,56(sp)
   282d0:	7442                	c.ldsp	s0,48(sp)
   282d2:	74a2                	c.ldsp	s1,40(sp)
   282d4:	7902                	c.ldsp	s2,32(sp)
   282d6:	6121                	c.addi16sp	sp,64
   282d8:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   282da:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   282de:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   282e0:	4681                	c.li	a3,0
   282e2:	00007617          	auipc	a2,0x7
   282e6:	76c60613          	addi	a2,a2,1900 # 2fa4e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa1e>
   282ea:	00007597          	auipc	a1,0x7
   282ee:	75658593          	addi	a1,a1,1878 # 2fa40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa10>
   282f2:	00012317          	auipc	t1,0x12
   282f6:	02e33303          	ld	t1,46(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   282fa:	9302                	c.jalr	t1
   282fc:	bfc1                	c.j	282cc <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   282fe:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28302:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28304:	4681                	c.li	a3,0
   28306:	00007617          	auipc	a2,0x7
   2830a:	75e60613          	addi	a2,a2,1886 # 2fa64 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa34>
   2830e:	00007597          	auipc	a1,0x7
   28312:	74258593          	addi	a1,a1,1858 # 2fa50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa20>
   28316:	00012317          	auipc	t1,0x12
   2831a:	00a33303          	ld	t1,10(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2831e:	9302                	c.jalr	t1
   28320:	b775                	c.j	282cc <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28322:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28326:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28328:	4681                	c.li	a3,0
   2832a:	00007617          	auipc	a2,0x7
   2832e:	74a60613          	addi	a2,a2,1866 # 2fa74 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa44>
   28332:	00007597          	auipc	a1,0x7
   28336:	73658593          	addi	a1,a1,1846 # 2fa68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa38>
   2833a:	00012317          	auipc	t1,0x12
   2833e:	fe633303          	ld	t1,-26(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28342:	9302                	c.jalr	t1
   28344:	b761                	c.j	282cc <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28346:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2834a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2834c:	4681                	c.li	a3,0
   2834e:	00007617          	auipc	a2,0x7
   28352:	73760613          	addi	a2,a2,1847 # 2fa85 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa55>
   28356:	00007597          	auipc	a1,0x7
   2835a:	72258593          	addi	a1,a1,1826 # 2fa78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa48>
   2835e:	00012317          	auipc	t1,0x12
   28362:	fc233303          	ld	t1,-62(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28366:	9302                	c.jalr	t1
   28368:	b795                	c.j	282cc <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2836a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2836e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28370:	4681                	c.li	a3,0
   28372:	00007617          	auipc	a2,0x7
   28376:	72860613          	addi	a2,a2,1832 # 2fa9a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa6a>
   2837a:	00007597          	auipc	a1,0x7
   2837e:	70e58593          	addi	a1,a1,1806 # 2fa88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa58>
   28382:	00012317          	auipc	t1,0x12
   28386:	f9e33303          	ld	t1,-98(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2838a:	9302                	c.jalr	t1
   2838c:	b781                	c.j	282cc <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2838e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28392:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28394:	4681                	c.li	a3,0
   28396:	00007617          	auipc	a2,0x7
   2839a:	71960613          	addi	a2,a2,1817 # 2faaf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa7f>
   2839e:	00007597          	auipc	a1,0x7
   283a2:	70258593          	addi	a1,a1,1794 # 2faa0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa70>
   283a6:	00012317          	auipc	t1,0x12
   283aa:	f7a33303          	ld	t1,-134(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   283ae:	9302                	c.jalr	t1
   283b0:	bf31                	c.j	282cc <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   283b2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   283b6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   283b8:	4681                	c.li	a3,0
   283ba:	00007617          	auipc	a2,0x7
   283be:	70a60613          	addi	a2,a2,1802 # 2fac4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa94>
   283c2:	00007597          	auipc	a1,0x7
   283c6:	6ee58593          	addi	a1,a1,1774 # 2fab0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa80>
   283ca:	00012317          	auipc	t1,0x12
   283ce:	f5633303          	ld	t1,-170(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   283d2:	9302                	c.jalr	t1
   283d4:	bde5                	c.j	282cc <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   283d6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   283da:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   283dc:	4681                	c.li	a3,0
   283de:	00007617          	auipc	a2,0x7
   283e2:	70060613          	addi	a2,a2,1792 # 2fade <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xaae>
   283e6:	00007597          	auipc	a1,0x7
   283ea:	6e258593          	addi	a1,a1,1762 # 2fac8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa98>
   283ee:	00012317          	auipc	t1,0x12
   283f2:	f3233303          	ld	t1,-206(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   283f6:	9302                	c.jalr	t1
   283f8:	bdd1                	c.j	282cc <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   283fa:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   283fe:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28400:	4681                	c.li	a3,0
   28402:	00007617          	auipc	a2,0x7
   28406:	6f360613          	addi	a2,a2,1779 # 2faf5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xac5>
   2840a:	00007597          	auipc	a1,0x7
   2840e:	6d658593          	addi	a1,a1,1750 # 2fae0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xab0>
   28412:	00012317          	auipc	t1,0x12
   28416:	f0e33303          	ld	t1,-242(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2841a:	9302                	c.jalr	t1
   2841c:	bd45                	c.j	282cc <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2841e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28422:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28424:	4681                	c.li	a3,0
   28426:	00007617          	auipc	a2,0x7
   2842a:	6e760613          	addi	a2,a2,1767 # 2fb0d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xadd>
   2842e:	00007597          	auipc	a1,0x7
   28432:	6ca58593          	addi	a1,a1,1738 # 2faf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xac8>
   28436:	00012317          	auipc	t1,0x12
   2843a:	eea33303          	ld	t1,-278(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2843e:	9302                	c.jalr	t1
   28440:	b571                	c.j	282cc <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28442:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28446:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28448:	4681                	c.li	a3,0
   2844a:	00007617          	auipc	a2,0x7
   2844e:	6d360613          	addi	a2,a2,1747 # 2fb1d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xaed>
   28452:	00007597          	auipc	a1,0x7
   28456:	6be58593          	addi	a1,a1,1726 # 2fb10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xae0>
   2845a:	00012317          	auipc	t1,0x12
   2845e:	ec633303          	ld	t1,-314(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28462:	9302                	c.jalr	t1
   28464:	b5a5                	c.j	282cc <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28466:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2846a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2846c:	4681                	c.li	a3,0
   2846e:	00007617          	auipc	a2,0x7
   28472:	6c560613          	addi	a2,a2,1733 # 2fb33 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb03>
   28476:	00007597          	auipc	a1,0x7
   2847a:	6aa58593          	addi	a1,a1,1706 # 2fb20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xaf0>
   2847e:	00012317          	auipc	t1,0x12
   28482:	ea233303          	ld	t1,-350(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28486:	9302                	c.jalr	t1
   28488:	b591                	c.j	282cc <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2848a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2848e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28490:	4681                	c.li	a3,0
   28492:	00007617          	auipc	a2,0x7
   28496:	6bb60613          	addi	a2,a2,1723 # 2fb4d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb1d>
   2849a:	00007597          	auipc	a1,0x7
   2849e:	69e58593          	addi	a1,a1,1694 # 2fb38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb08>
   284a2:	00012317          	auipc	t1,0x12
   284a6:	e7e33303          	ld	t1,-386(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   284aa:	9302                	c.jalr	t1
   284ac:	b505                	c.j	282cc <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   284ae:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   284b2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   284b4:	4681                	c.li	a3,0
   284b6:	00007617          	auipc	a2,0x7
   284ba:	6ae60613          	addi	a2,a2,1710 # 2fb64 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb34>
   284be:	00007597          	auipc	a1,0x7
   284c2:	69258593          	addi	a1,a1,1682 # 2fb50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb20>
   284c6:	00012317          	auipc	t1,0x12
   284ca:	e5a33303          	ld	t1,-422(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   284ce:	9302                	c.jalr	t1
   284d0:	bbf5                	c.j	282cc <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   284d2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   284d6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   284d8:	4681                	c.li	a3,0
   284da:	00007617          	auipc	a2,0x7
   284de:	69860613          	addi	a2,a2,1688 # 2fb72 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb42>
   284e2:	00007597          	auipc	a1,0x7
   284e6:	68658593          	addi	a1,a1,1670 # 2fb68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb38>
   284ea:	00012317          	auipc	t1,0x12
   284ee:	e3633303          	ld	t1,-458(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   284f2:	9302                	c.jalr	t1
   284f4:	bbe1                	c.j	282cc <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
        return "(DW_ATE)0x" + to_hex((int)v);
   284f6:	848a                	c.mv	s1,sp
   284f8:	8526                	c.mv	a0,s1
   284fa:	00012317          	auipc	t1,0x12
   284fe:	f3633303          	ld	t1,-202(t1) # 3a430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf640>
   28502:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   28504:	4729                	c.li	a4,10
   28506:	00007697          	auipc	a3,0x7
   2850a:	67268693          	addi	a3,a3,1650 # 2fb78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb48>
   2850e:	4601                	c.li	a2,0
   28510:	4581                	c.li	a1,0
   28512:	8526                	c.mv	a0,s1
   28514:	becee0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   28518:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2851a:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2851e:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   28520:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   28522:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   28526:	03278463          	beq	a5,s2,2854e <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x2ca>
      { _M_dataplus._M_p = __p; }
   2852a:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2852c:	689c                	c.ld	a5,16(s1)
   2852e:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   28530:	649c                	c.ld	a5,8(s1)
   28532:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   28534:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   28538:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2853c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   28540:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   28542:	081c                	c.addi4spn	a5,sp,16
   28544:	d8f504e3          	beq	a0,a5,282cc <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   28548:	a58ee0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2854c:	b341                	c.j	282cc <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2854e:	6490                	c.ld	a2,8(s1)
   28550:	0605                	c.addi	a2,1
	if (__n == 0)
   28552:	de79                	c.beqz	a2,28530 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x2ac>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   28554:	85ca                	c.mv	a1,s2
   28556:	aeaee0ef          	jal	ra,16840 <memcpy@plt>
   2855a:	bfd9                	c.j	28530 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x2ac>
      { return _M_dataplus._M_p; }
   2855c:	842a                	c.mv	s0,a0
   2855e:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   28560:	081c                	c.addi4spn	a5,sp,16
   28562:	00f50463          	beq	a0,a5,2856a <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x2e6>
   28566:	a3aee0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2856a:	8522                	c.mv	a0,s0
   2856c:	c24ee0ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000028570 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)>:
{
   28570:	7139                	c.addi16sp	sp,-64
   28572:	fc06                	c.sdsp	ra,56(sp)
   28574:	f822                	c.sdsp	s0,48(sp)
   28576:	f426                	c.sdsp	s1,40(sp)
   28578:	f04a                	c.sdsp	s2,32(sp)
   2857a:	842a                	c.mv	s0,a0
        switch (v) {
   2857c:	47d1                	c.li	a5,20
   2857e:	2eb7ea63          	bltu	a5,a1,28872 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x302>
   28582:	00259793          	slli	a5,a1,0x2
   28586:	00009717          	auipc	a4,0x9
   2858a:	bea70713          	addi	a4,a4,-1046 # 31170 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2140>
   2858e:	97ba                	c.add	a5,a4
   28590:	439c                	c.lw	a5,0(a5)
   28592:	97ba                	c.add	a5,a4
   28594:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28596:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2859a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2859c:	4681                	c.li	a3,0
   2859e:	00007617          	auipc	a2,0x7
   285a2:	5f560613          	addi	a2,a2,1525 # 2fb93 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb63>
   285a6:	00007597          	auipc	a1,0x7
   285aa:	5e258593          	addi	a1,a1,1506 # 2fb88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb58>
   285ae:	00012317          	auipc	t1,0x12
   285b2:	d7233303          	ld	t1,-654(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   285b6:	9302                	c.jalr	t1
}
   285b8:	8522                	c.mv	a0,s0
   285ba:	70e2                	c.ldsp	ra,56(sp)
   285bc:	7442                	c.ldsp	s0,48(sp)
   285be:	74a2                	c.ldsp	s1,40(sp)
   285c0:	7902                	c.ldsp	s2,32(sp)
   285c2:	6121                	c.addi16sp	sp,64
   285c4:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   285c6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   285ca:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   285cc:	4681                	c.li	a3,0
   285ce:	00007617          	auipc	a2,0x7
   285d2:	5d360613          	addi	a2,a2,1491 # 2fba1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb71>
   285d6:	00007597          	auipc	a1,0x7
   285da:	5c258593          	addi	a1,a1,1474 # 2fb98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb68>
   285de:	00012317          	auipc	t1,0x12
   285e2:	d4233303          	ld	t1,-702(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   285e6:	9302                	c.jalr	t1
   285e8:	bfc1                	c.j	285b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   285ea:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   285ee:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   285f0:	4681                	c.li	a3,0
   285f2:	00007617          	auipc	a2,0x7
   285f6:	5c360613          	addi	a2,a2,1475 # 2fbb5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb85>
   285fa:	00007597          	auipc	a1,0x7
   285fe:	5ae58593          	addi	a1,a1,1454 # 2fba8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb78>
   28602:	00012317          	auipc	t1,0x12
   28606:	d1e33303          	ld	t1,-738(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2860a:	9302                	c.jalr	t1
   2860c:	b775                	c.j	285b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2860e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28612:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28614:	4681                	c.li	a3,0
   28616:	00007617          	auipc	a2,0x7
   2861a:	5b560613          	addi	a2,a2,1461 # 2fbcb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb9b>
   2861e:	00007597          	auipc	a1,0x7
   28622:	59a58593          	addi	a1,a1,1434 # 2fbb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb88>
   28626:	00012317          	auipc	t1,0x12
   2862a:	cfa33303          	ld	t1,-774(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2862e:	9302                	c.jalr	t1
   28630:	b761                	c.j	285b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28632:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28636:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28638:	4681                	c.li	a3,0
   2863a:	00007617          	auipc	a2,0x7
   2863e:	5a560613          	addi	a2,a2,1445 # 2fbdf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbaf>
   28642:	00007597          	auipc	a1,0x7
   28646:	58e58593          	addi	a1,a1,1422 # 2fbd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xba0>
   2864a:	00012317          	auipc	t1,0x12
   2864e:	cd633303          	ld	t1,-810(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28652:	9302                	c.jalr	t1
   28654:	b795                	c.j	285b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28656:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2865a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2865c:	4681                	c.li	a3,0
   2865e:	00007617          	auipc	a2,0x7
   28662:	59160613          	addi	a2,a2,1425 # 2fbef <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbbf>
   28666:	00007597          	auipc	a1,0x7
   2866a:	57a58593          	addi	a1,a1,1402 # 2fbe0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbb0>
   2866e:	00012317          	auipc	t1,0x12
   28672:	cb233303          	ld	t1,-846(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28676:	9302                	c.jalr	t1
   28678:	b781                	c.j	285b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2867a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2867e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28680:	4681                	c.li	a3,0
   28682:	00007617          	auipc	a2,0x7
   28686:	57f60613          	addi	a2,a2,1407 # 2fc01 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbd1>
   2868a:	00007597          	auipc	a1,0x7
   2868e:	56658593          	addi	a1,a1,1382 # 2fbf0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbc0>
   28692:	00012317          	auipc	t1,0x12
   28696:	c8e33303          	ld	t1,-882(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2869a:	9302                	c.jalr	t1
   2869c:	bf31                	c.j	285b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2869e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   286a2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   286a4:	4681                	c.li	a3,0
   286a6:	00007617          	auipc	a2,0x7
   286aa:	57360613          	addi	a2,a2,1395 # 2fc19 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   286ae:	00007597          	auipc	a1,0x7
   286b2:	55a58593          	addi	a1,a1,1370 # 2fc08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbd8>
   286b6:	00012317          	auipc	t1,0x12
   286ba:	c6a33303          	ld	t1,-918(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   286be:	9302                	c.jalr	t1
   286c0:	bde5                	c.j	285b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   286c2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   286c6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   286c8:	4681                	c.li	a3,0
   286ca:	00007617          	auipc	a2,0x7
   286ce:	56660613          	addi	a2,a2,1382 # 2fc30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc00>
   286d2:	00007597          	auipc	a1,0x7
   286d6:	54e58593          	addi	a1,a1,1358 # 2fc20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbf0>
   286da:	00012317          	auipc	t1,0x12
   286de:	c4633303          	ld	t1,-954(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   286e2:	9302                	c.jalr	t1
   286e4:	bdd1                	c.j	285b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   286e6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   286ea:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   286ec:	4681                	c.li	a3,0
   286ee:	00007617          	auipc	a2,0x7
   286f2:	55960613          	addi	a2,a2,1369 # 2fc47 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc17>
   286f6:	00007597          	auipc	a1,0x7
   286fa:	54258593          	addi	a1,a1,1346 # 2fc38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc08>
   286fe:	00012317          	auipc	t1,0x12
   28702:	c2233303          	ld	t1,-990(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28706:	9302                	c.jalr	t1
   28708:	bd45                	c.j	285b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2870a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2870e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28710:	4681                	c.li	a3,0
   28712:	00007617          	auipc	a2,0x7
   28716:	54260613          	addi	a2,a2,1346 # 2fc54 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc24>
   2871a:	00007597          	auipc	a1,0x7
   2871e:	52e58593          	addi	a1,a1,1326 # 2fc48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc18>
   28722:	00012317          	auipc	t1,0x12
   28726:	bfe33303          	ld	t1,-1026(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2872a:	9302                	c.jalr	t1
   2872c:	b571                	c.j	285b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2872e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28732:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28734:	4681                	c.li	a3,0
   28736:	00007617          	auipc	a2,0x7
   2873a:	52d60613          	addi	a2,a2,1325 # 2fc63 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc33>
   2873e:	00007597          	auipc	a1,0x7
   28742:	51a58593          	addi	a1,a1,1306 # 2fc58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc28>
   28746:	00012317          	auipc	t1,0x12
   2874a:	bda33303          	ld	t1,-1062(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2874e:	9302                	c.jalr	t1
   28750:	b5a5                	c.j	285b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28752:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28756:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28758:	4681                	c.li	a3,0
   2875a:	00007617          	auipc	a2,0x7
   2875e:	51b60613          	addi	a2,a2,1307 # 2fc75 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc45>
   28762:	00007597          	auipc	a1,0x7
   28766:	50658593          	addi	a1,a1,1286 # 2fc68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc38>
   2876a:	00012317          	auipc	t1,0x12
   2876e:	bb633303          	ld	t1,-1098(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28772:	9302                	c.jalr	t1
   28774:	b591                	c.j	285b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28776:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2877a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2877c:	4681                	c.li	a3,0
   2877e:	00007617          	auipc	a2,0x7
   28782:	50b60613          	addi	a2,a2,1291 # 2fc89 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc59>
   28786:	00007597          	auipc	a1,0x7
   2878a:	4f258593          	addi	a1,a1,1266 # 2fc78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc48>
   2878e:	00012317          	auipc	t1,0x12
   28792:	b9233303          	ld	t1,-1134(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28796:	9302                	c.jalr	t1
   28798:	b505                	c.j	285b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2879a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2879e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   287a0:	4681                	c.li	a3,0
   287a2:	00007617          	auipc	a2,0x7
   287a6:	4f960613          	addi	a2,a2,1273 # 2fc9b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc6b>
   287aa:	00007597          	auipc	a1,0x7
   287ae:	4e658593          	addi	a1,a1,1254 # 2fc90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc60>
   287b2:	00012317          	auipc	t1,0x12
   287b6:	b6e33303          	ld	t1,-1170(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   287ba:	9302                	c.jalr	t1
   287bc:	bbf5                	c.j	285b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   287be:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   287c2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   287c4:	4681                	c.li	a3,0
   287c6:	00007617          	auipc	a2,0x7
   287ca:	4e660613          	addi	a2,a2,1254 # 2fcac <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc7c>
   287ce:	00007597          	auipc	a1,0x7
   287d2:	4d258593          	addi	a1,a1,1234 # 2fca0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc70>
   287d6:	00012317          	auipc	t1,0x12
   287da:	b4a33303          	ld	t1,-1206(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   287de:	9302                	c.jalr	t1
   287e0:	bbe1                	c.j	285b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   287e2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   287e6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   287e8:	4681                	c.li	a3,0
   287ea:	00007617          	auipc	a2,0x7
   287ee:	4dc60613          	addi	a2,a2,1244 # 2fcc6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc96>
   287f2:	00007597          	auipc	a1,0x7
   287f6:	4be58593          	addi	a1,a1,1214 # 2fcb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc80>
   287fa:	00012317          	auipc	t1,0x12
   287fe:	b2633303          	ld	t1,-1242(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28802:	9302                	c.jalr	t1
   28804:	bb55                	c.j	285b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28806:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2880a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2880c:	4681                	c.li	a3,0
   2880e:	00007617          	auipc	a2,0x7
   28812:	4c560613          	addi	a2,a2,1221 # 2fcd3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xca3>
   28816:	00007597          	auipc	a1,0x7
   2881a:	4b258593          	addi	a1,a1,1202 # 2fcc8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc98>
   2881e:	00012317          	auipc	t1,0x12
   28822:	b0233303          	ld	t1,-1278(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28826:	9302                	c.jalr	t1
   28828:	bb41                	c.j	285b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2882a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2882e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28830:	4681                	c.li	a3,0
   28832:	00007617          	auipc	a2,0x7
   28836:	4af60613          	addi	a2,a2,1199 # 2fce1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcb1>
   2883a:	00007597          	auipc	a1,0x7
   2883e:	49e58593          	addi	a1,a1,1182 # 2fcd8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xca8>
   28842:	00012317          	auipc	t1,0x12
   28846:	ade33303          	ld	t1,-1314(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2884a:	9302                	c.jalr	t1
   2884c:	b3b5                	c.j	285b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2884e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28852:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28854:	4681                	c.li	a3,0
   28856:	00007617          	auipc	a2,0x7
   2885a:	4a060613          	addi	a2,a2,1184 # 2fcf6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcc6>
   2885e:	00007597          	auipc	a1,0x7
   28862:	48a58593          	addi	a1,a1,1162 # 2fce8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcb8>
   28866:	00012317          	auipc	t1,0x12
   2886a:	aba33303          	ld	t1,-1350(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2886e:	9302                	c.jalr	t1
   28870:	b3a1                	c.j	285b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
        return "(DW_LANG)0x" + to_hex((int)v);
   28872:	848a                	c.mv	s1,sp
   28874:	8526                	c.mv	a0,s1
   28876:	00012317          	auipc	t1,0x12
   2887a:	bba33303          	ld	t1,-1094(t1) # 3a430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf640>
   2887e:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   28880:	472d                	c.li	a4,11
   28882:	00007697          	auipc	a3,0x7
   28886:	47668693          	addi	a3,a3,1142 # 2fcf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcc8>
   2888a:	4601                	c.li	a2,0
   2888c:	4581                	c.li	a1,0
   2888e:	8526                	c.mv	a0,s1
   28890:	870ee0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   28894:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28896:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2889a:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2889c:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2889e:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   288a2:	03278463          	beq	a5,s2,288ca <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x35a>
      { _M_dataplus._M_p = __p; }
   288a6:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   288a8:	689c                	c.ld	a5,16(s1)
   288aa:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   288ac:	649c                	c.ld	a5,8(s1)
   288ae:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   288b0:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   288b4:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   288b8:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   288bc:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   288be:	081c                	c.addi4spn	a5,sp,16
   288c0:	cef50ce3          	beq	a0,a5,285b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   288c4:	edded0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   288c8:	b9c5                	c.j	285b8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   288ca:	6490                	c.ld	a2,8(s1)
   288cc:	0605                	c.addi	a2,1
	if (__n == 0)
   288ce:	de79                	c.beqz	a2,288ac <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x33c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   288d0:	85ca                	c.mv	a1,s2
   288d2:	f6fed0ef          	jal	ra,16840 <memcpy@plt>
   288d6:	bfd9                	c.j	288ac <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x33c>
      { return _M_dataplus._M_p; }
   288d8:	842a                	c.mv	s0,a0
   288da:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   288dc:	081c                	c.addi4spn	a5,sp,16
   288de:	00f50463          	beq	a0,a5,288e6 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x376>
   288e2:	ebfed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   288e6:	8522                	c.mv	a0,s0
   288e8:	8a8ee0ef          	jal	ra,16990 <_Unwind_Resume@plt>

00000000000288ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)>:
{
   288ec:	7139                	c.addi16sp	sp,-64
   288ee:	fc06                	c.sdsp	ra,56(sp)
   288f0:	f822                	c.sdsp	s0,48(sp)
   288f2:	f426                	c.sdsp	s1,40(sp)
   288f4:	f04a                	c.sdsp	s2,32(sp)
   288f6:	842a                	c.mv	s0,a0
        switch (v) {
   288f8:	02000793          	addi	a5,zero,32
   288fc:	3ab7e463          	bltu	a5,a1,28ca4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x3b8>
   28900:	00259793          	slli	a5,a1,0x2
   28904:	00009717          	auipc	a4,0x9
   28908:	8c070713          	addi	a4,a4,-1856 # 311c4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2194>
   2890c:	97ba                	c.add	a5,a4
   2890e:	439c                	c.lw	a5,0(a5)
   28910:	97ba                	c.add	a5,a4
   28912:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28914:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28918:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2891a:	4681                	c.li	a3,0
   2891c:	00007617          	auipc	a2,0x7
   28920:	3f860613          	addi	a2,a2,1016 # 2fd14 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xce4>
   28924:	00007597          	auipc	a1,0x7
   28928:	3e458593          	addi	a1,a1,996 # 2fd08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcd8>
   2892c:	00012317          	auipc	t1,0x12
   28930:	9f433303          	ld	t1,-1548(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28934:	9302                	c.jalr	t1
}
   28936:	8522                	c.mv	a0,s0
   28938:	70e2                	c.ldsp	ra,56(sp)
   2893a:	7442                	c.ldsp	s0,48(sp)
   2893c:	74a2                	c.ldsp	s1,40(sp)
   2893e:	7902                	c.ldsp	s2,32(sp)
   28940:	6121                	c.addi16sp	sp,64
   28942:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28944:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28948:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2894a:	4681                	c.li	a3,0
   2894c:	00007617          	auipc	a2,0x7
   28950:	3da60613          	addi	a2,a2,986 # 2fd26 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcf6>
   28954:	00007597          	auipc	a1,0x7
   28958:	3c458593          	addi	a1,a1,964 # 2fd18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xce8>
   2895c:	00012317          	auipc	t1,0x12
   28960:	9c433303          	ld	t1,-1596(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28964:	9302                	c.jalr	t1
   28966:	bfc1                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28968:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2896c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2896e:	4681                	c.li	a3,0
   28970:	00007617          	auipc	a2,0x7
   28974:	3c660613          	addi	a2,a2,966 # 2fd36 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd06>
   28978:	00007597          	auipc	a1,0x7
   2897c:	3b058593          	addi	a1,a1,944 # 2fd28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcf8>
   28980:	00012317          	auipc	t1,0x12
   28984:	9a033303          	ld	t1,-1632(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28988:	9302                	c.jalr	t1
   2898a:	b775                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2898c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28990:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28992:	4681                	c.li	a3,0
   28994:	00007617          	auipc	a2,0x7
   28998:	3b160613          	addi	a2,a2,945 # 2fd45 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd15>
   2899c:	00007597          	auipc	a1,0x7
   289a0:	39c58593          	addi	a1,a1,924 # 2fd38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd08>
   289a4:	00012317          	auipc	t1,0x12
   289a8:	97c33303          	ld	t1,-1668(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   289ac:	9302                	c.jalr	t1
   289ae:	b761                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   289b0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   289b4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   289b6:	4681                	c.li	a3,0
   289b8:	00007617          	auipc	a2,0x7
   289bc:	39d60613          	addi	a2,a2,925 # 2fd55 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd25>
   289c0:	00007597          	auipc	a1,0x7
   289c4:	38858593          	addi	a1,a1,904 # 2fd48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd18>
   289c8:	00012317          	auipc	t1,0x12
   289cc:	95833303          	ld	t1,-1704(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   289d0:	9302                	c.jalr	t1
   289d2:	b795                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   289d4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   289d8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   289da:	4681                	c.li	a3,0
   289dc:	00007617          	auipc	a2,0x7
   289e0:	38960613          	addi	a2,a2,905 # 2fd65 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd35>
   289e4:	00007597          	auipc	a1,0x7
   289e8:	37458593          	addi	a1,a1,884 # 2fd58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd28>
   289ec:	00012317          	auipc	t1,0x12
   289f0:	93433303          	ld	t1,-1740(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   289f4:	9302                	c.jalr	t1
   289f6:	b781                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   289f8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   289fc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   289fe:	4681                	c.li	a3,0
   28a00:	00007617          	auipc	a2,0x7
   28a04:	37660613          	addi	a2,a2,886 # 2fd76 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd46>
   28a08:	00007597          	auipc	a1,0x7
   28a0c:	36058593          	addi	a1,a1,864 # 2fd68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd38>
   28a10:	00012317          	auipc	t1,0x12
   28a14:	91033303          	ld	t1,-1776(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28a18:	9302                	c.jalr	t1
   28a1a:	bf31                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28a1c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28a20:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28a22:	4681                	c.li	a3,0
   28a24:	00007617          	auipc	a2,0x7
   28a28:	36160613          	addi	a2,a2,865 # 2fd85 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd55>
   28a2c:	00007597          	auipc	a1,0x7
   28a30:	34c58593          	addi	a1,a1,844 # 2fd78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd48>
   28a34:	00012317          	auipc	t1,0x12
   28a38:	8ec33303          	ld	t1,-1812(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28a3c:	9302                	c.jalr	t1
   28a3e:	bde5                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28a40:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28a44:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28a46:	4681                	c.li	a3,0
   28a48:	00007617          	auipc	a2,0x7
   28a4c:	34e60613          	addi	a2,a2,846 # 2fd96 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd66>
   28a50:	00007597          	auipc	a1,0x7
   28a54:	33858593          	addi	a1,a1,824 # 2fd88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd58>
   28a58:	00012317          	auipc	t1,0x12
   28a5c:	8c833303          	ld	t1,-1848(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28a60:	9302                	c.jalr	t1
   28a62:	bdd1                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28a64:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28a68:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28a6a:	4681                	c.li	a3,0
   28a6c:	00007617          	auipc	a2,0x7
   28a70:	33960613          	addi	a2,a2,825 # 2fda5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd75>
   28a74:	00007597          	auipc	a1,0x7
   28a78:	32458593          	addi	a1,a1,804 # 2fd98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd68>
   28a7c:	00012317          	auipc	t1,0x12
   28a80:	8a433303          	ld	t1,-1884(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28a84:	9302                	c.jalr	t1
   28a86:	bd45                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28a88:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28a8c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28a8e:	4681                	c.li	a3,0
   28a90:	00007617          	auipc	a2,0x7
   28a94:	32460613          	addi	a2,a2,804 # 2fdb4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd84>
   28a98:	00007597          	auipc	a1,0x7
   28a9c:	31058593          	addi	a1,a1,784 # 2fda8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd78>
   28aa0:	00012317          	auipc	t1,0x12
   28aa4:	88033303          	ld	t1,-1920(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28aa8:	9302                	c.jalr	t1
   28aaa:	b571                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28aac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28ab0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28ab2:	4681                	c.li	a3,0
   28ab4:	00007617          	auipc	a2,0x7
   28ab8:	31160613          	addi	a2,a2,785 # 2fdc5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd95>
   28abc:	00007597          	auipc	a1,0x7
   28ac0:	2fc58593          	addi	a1,a1,764 # 2fdb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd88>
   28ac4:	00012317          	auipc	t1,0x12
   28ac8:	85c33303          	ld	t1,-1956(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28acc:	9302                	c.jalr	t1
   28ace:	b5a5                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28ad0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28ad4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28ad6:	4681                	c.li	a3,0
   28ad8:	00007617          	auipc	a2,0x7
   28adc:	2fc60613          	addi	a2,a2,764 # 2fdd4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xda4>
   28ae0:	00007597          	auipc	a1,0x7
   28ae4:	2e858593          	addi	a1,a1,744 # 2fdc8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd98>
   28ae8:	00012317          	auipc	t1,0x12
   28aec:	83833303          	ld	t1,-1992(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28af0:	9302                	c.jalr	t1
   28af2:	b591                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28af4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28af8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28afa:	4681                	c.li	a3,0
   28afc:	00007617          	auipc	a2,0x7
   28b00:	2e960613          	addi	a2,a2,745 # 2fde5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdb5>
   28b04:	00007597          	auipc	a1,0x7
   28b08:	2d458593          	addi	a1,a1,724 # 2fdd8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xda8>
   28b0c:	00012317          	auipc	t1,0x12
   28b10:	81433303          	ld	t1,-2028(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28b14:	9302                	c.jalr	t1
   28b16:	b505                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28b18:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28b1c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28b1e:	4681                	c.li	a3,0
   28b20:	00007617          	auipc	a2,0x7
   28b24:	2d860613          	addi	a2,a2,728 # 2fdf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdc8>
   28b28:	00007597          	auipc	a1,0x7
   28b2c:	2c058593          	addi	a1,a1,704 # 2fde8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdb8>
   28b30:	00011317          	auipc	t1,0x11
   28b34:	7f033303          	ld	t1,2032(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28b38:	9302                	c.jalr	t1
   28b3a:	bbf5                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28b3c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28b40:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28b42:	4681                	c.li	a3,0
   28b44:	00007617          	auipc	a2,0x7
   28b48:	2c860613          	addi	a2,a2,712 # 2fe0c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xddc>
   28b4c:	00007597          	auipc	a1,0x7
   28b50:	2b458593          	addi	a1,a1,692 # 2fe00 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdd0>
   28b54:	00011317          	auipc	t1,0x11
   28b58:	7cc33303          	ld	t1,1996(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28b5c:	9302                	c.jalr	t1
   28b5e:	bbe1                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28b60:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28b64:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28b66:	4681                	c.li	a3,0
   28b68:	00007617          	auipc	a2,0x7
   28b6c:	2b460613          	addi	a2,a2,692 # 2fe1c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdec>
   28b70:	00007597          	auipc	a1,0x7
   28b74:	2a058593          	addi	a1,a1,672 # 2fe10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xde0>
   28b78:	00011317          	auipc	t1,0x11
   28b7c:	7a833303          	ld	t1,1960(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28b80:	9302                	c.jalr	t1
   28b82:	bb55                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28b84:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28b88:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28b8a:	4681                	c.li	a3,0
   28b8c:	00007617          	auipc	a2,0x7
   28b90:	2a060613          	addi	a2,a2,672 # 2fe2c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdfc>
   28b94:	00007597          	auipc	a1,0x7
   28b98:	28c58593          	addi	a1,a1,652 # 2fe20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdf0>
   28b9c:	00011317          	auipc	t1,0x11
   28ba0:	78433303          	ld	t1,1924(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28ba4:	9302                	c.jalr	t1
   28ba6:	bb41                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28ba8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28bac:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28bae:	4681                	c.li	a3,0
   28bb0:	00007617          	auipc	a2,0x7
   28bb4:	28c60613          	addi	a2,a2,652 # 2fe3c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe0c>
   28bb8:	00007597          	auipc	a1,0x7
   28bbc:	27858593          	addi	a1,a1,632 # 2fe30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe00>
   28bc0:	00011317          	auipc	t1,0x11
   28bc4:	76033303          	ld	t1,1888(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28bc8:	9302                	c.jalr	t1
   28bca:	b3b5                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28bcc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28bd0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28bd2:	4681                	c.li	a3,0
   28bd4:	00007617          	auipc	a2,0x7
   28bd8:	27d60613          	addi	a2,a2,637 # 2fe51 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe21>
   28bdc:	00007597          	auipc	a1,0x7
   28be0:	26458593          	addi	a1,a1,612 # 2fe40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe10>
   28be4:	00011317          	auipc	t1,0x11
   28be8:	73c33303          	ld	t1,1852(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28bec:	9302                	c.jalr	t1
   28bee:	b3a1                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28bf0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28bf4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28bf6:	4681                	c.li	a3,0
   28bf8:	00007617          	auipc	a2,0x7
   28bfc:	27060613          	addi	a2,a2,624 # 2fe68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe38>
   28c00:	00007597          	auipc	a1,0x7
   28c04:	25858593          	addi	a1,a1,600 # 2fe58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe28>
   28c08:	00011317          	auipc	t1,0x11
   28c0c:	71833303          	ld	t1,1816(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28c10:	9302                	c.jalr	t1
   28c12:	b315                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28c14:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28c18:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28c1a:	4681                	c.li	a3,0
   28c1c:	00007617          	auipc	a2,0x7
   28c20:	26660613          	addi	a2,a2,614 # 2fe82 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe52>
   28c24:	00007597          	auipc	a1,0x7
   28c28:	24c58593          	addi	a1,a1,588 # 2fe70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe40>
   28c2c:	00011317          	auipc	t1,0x11
   28c30:	6f433303          	ld	t1,1780(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28c34:	9302                	c.jalr	t1
   28c36:	b301                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28c38:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28c3c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28c3e:	4681                	c.li	a3,0
   28c40:	00007617          	auipc	a2,0x7
   28c44:	25760613          	addi	a2,a2,599 # 2fe97 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe67>
   28c48:	00007597          	auipc	a1,0x7
   28c4c:	24058593          	addi	a1,a1,576 # 2fe88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe58>
   28c50:	00011317          	auipc	t1,0x11
   28c54:	6d033303          	ld	t1,1744(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28c58:	9302                	c.jalr	t1
   28c5a:	b9f1                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28c5c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28c60:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28c62:	4681                	c.li	a3,0
   28c64:	00007617          	auipc	a2,0x7
   28c68:	24860613          	addi	a2,a2,584 # 2feac <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe7c>
   28c6c:	00007597          	auipc	a1,0x7
   28c70:	22c58593          	addi	a1,a1,556 # 2fe98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe68>
   28c74:	00011317          	auipc	t1,0x11
   28c78:	6ac33303          	ld	t1,1708(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28c7c:	9302                	c.jalr	t1
   28c7e:	b965                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28c80:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28c84:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28c86:	4681                	c.li	a3,0
   28c88:	00007617          	auipc	a2,0x7
   28c8c:	23860613          	addi	a2,a2,568 # 2fec0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe90>
   28c90:	00007597          	auipc	a1,0x7
   28c94:	22058593          	addi	a1,a1,544 # 2feb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe80>
   28c98:	00011317          	auipc	t1,0x11
   28c9c:	68833303          	ld	t1,1672(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28ca0:	9302                	c.jalr	t1
   28ca2:	b951                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
        return "(DW_FORM)0x" + to_hex((int)v);
   28ca4:	848a                	c.mv	s1,sp
   28ca6:	8526                	c.mv	a0,s1
   28ca8:	00011317          	auipc	t1,0x11
   28cac:	78833303          	ld	t1,1928(t1) # 3a430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf640>
   28cb0:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   28cb2:	472d                	c.li	a4,11
   28cb4:	00007697          	auipc	a3,0x7
   28cb8:	21468693          	addi	a3,a3,532 # 2fec8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe98>
   28cbc:	4601                	c.li	a2,0
   28cbe:	4581                	c.li	a1,0
   28cc0:	8526                	c.mv	a0,s1
   28cc2:	c3fed0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   28cc6:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28cc8:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   28ccc:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   28cce:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   28cd0:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   28cd4:	03278463          	beq	a5,s2,28cfc <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x410>
      { _M_dataplus._M_p = __p; }
   28cd8:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   28cda:	689c                	c.ld	a5,16(s1)
   28cdc:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   28cde:	649c                	c.ld	a5,8(s1)
   28ce0:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   28ce2:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   28ce6:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   28cea:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   28cee:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   28cf0:	081c                	c.addi4spn	a5,sp,16
   28cf2:	c4f502e3          	beq	a0,a5,28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   28cf6:	aabed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   28cfa:	b935                	c.j	28936 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   28cfc:	6490                	c.ld	a2,8(s1)
   28cfe:	0605                	c.addi	a2,1
	if (__n == 0)
   28d00:	de79                	c.beqz	a2,28cde <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x3f2>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   28d02:	85ca                	c.mv	a1,s2
   28d04:	b3ded0ef          	jal	ra,16840 <memcpy@plt>
   28d08:	bfd9                	c.j	28cde <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x3f2>
      { return _M_dataplus._M_p; }
   28d0a:	842a                	c.mv	s0,a0
   28d0c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   28d0e:	081c                	c.addi4spn	a5,sp,16
   28d10:	00f50463          	beq	a0,a5,28d18 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x42c>
   28d14:	a8ded0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   28d18:	8522                	c.mv	a0,s0
   28d1a:	c77ed0ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000028d1e <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)>:
{
   28d1e:	7139                	c.addi16sp	sp,-64
   28d20:	fc06                	c.sdsp	ra,56(sp)
   28d22:	f822                	c.sdsp	s0,48(sp)
   28d24:	f426                	c.sdsp	s1,40(sp)
   28d26:	f04a                	c.sdsp	s2,32(sp)
   28d28:	842a                	c.mv	s0,a0
        switch (v) {
   28d2a:	04300793          	addi	a5,zero,67
   28d2e:	08b7ede3          	bltu	a5,a1,295c8 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x8aa>
   28d32:	00259793          	slli	a5,a1,0x2
   28d36:	00008717          	auipc	a4,0x8
   28d3a:	51270713          	addi	a4,a4,1298 # 31248 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2218>
   28d3e:	97ba                	c.add	a5,a4
   28d40:	439c                	c.lw	a5,0(a5)
   28d42:	97ba                	c.add	a5,a4
   28d44:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28d46:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28d4a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28d4c:	4681                	c.li	a3,0
   28d4e:	00007617          	auipc	a2,0x7
   28d52:	19b60613          	addi	a2,a2,411 # 2fee9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xeb9>
   28d56:	00007597          	auipc	a1,0x7
   28d5a:	18258593          	addi	a1,a1,386 # 2fed8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xea8>
   28d5e:	00011317          	auipc	t1,0x11
   28d62:	5c233303          	ld	t1,1474(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28d66:	9302                	c.jalr	t1
}
   28d68:	8522                	c.mv	a0,s0
   28d6a:	70e2                	c.ldsp	ra,56(sp)
   28d6c:	7442                	c.ldsp	s0,48(sp)
   28d6e:	74a2                	c.ldsp	s1,40(sp)
   28d70:	7902                	c.ldsp	s2,32(sp)
   28d72:	6121                	c.addi16sp	sp,64
   28d74:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28d76:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28d7a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28d7c:	4681                	c.li	a3,0
   28d7e:	00007617          	auipc	a2,0x7
   28d82:	18360613          	addi	a2,a2,387 # 2ff01 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xed1>
   28d86:	00007597          	auipc	a1,0x7
   28d8a:	16a58593          	addi	a1,a1,362 # 2fef0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xec0>
   28d8e:	00011317          	auipc	t1,0x11
   28d92:	59233303          	ld	t1,1426(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28d96:	9302                	c.jalr	t1
   28d98:	bfc1                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28d9a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28d9e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28da0:	4681                	c.li	a3,0
   28da2:	00007617          	auipc	a2,0x7
   28da6:	17860613          	addi	a2,a2,376 # 2ff1a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xeea>
   28daa:	00007597          	auipc	a1,0x7
   28dae:	15e58593          	addi	a1,a1,350 # 2ff08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xed8>
   28db2:	00011317          	auipc	t1,0x11
   28db6:	56e33303          	ld	t1,1390(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28dba:	9302                	c.jalr	t1
   28dbc:	b775                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28dbe:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28dc2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28dc4:	4681                	c.li	a3,0
   28dc6:	00007617          	auipc	a2,0x7
   28dca:	17160613          	addi	a2,a2,369 # 2ff37 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf07>
   28dce:	00007597          	auipc	a1,0x7
   28dd2:	15258593          	addi	a1,a1,338 # 2ff20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xef0>
   28dd6:	00011317          	auipc	t1,0x11
   28dda:	54a33303          	ld	t1,1354(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28dde:	9302                	c.jalr	t1
   28de0:	b761                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28de2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28de6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28de8:	4681                	c.li	a3,0
   28dea:	00007617          	auipc	a2,0x7
   28dee:	16560613          	addi	a2,a2,357 # 2ff4f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf1f>
   28df2:	00007597          	auipc	a1,0x7
   28df6:	14658593          	addi	a1,a1,326 # 2ff38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf08>
   28dfa:	00011317          	auipc	t1,0x11
   28dfe:	52633303          	ld	t1,1318(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28e02:	9302                	c.jalr	t1
   28e04:	b795                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28e06:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28e0a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28e0c:	4681                	c.li	a3,0
   28e0e:	00007617          	auipc	a2,0x7
   28e12:	15d60613          	addi	a2,a2,349 # 2ff6b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf3b>
   28e16:	00007597          	auipc	a1,0x7
   28e1a:	13a58593          	addi	a1,a1,314 # 2ff50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf20>
   28e1e:	00011317          	auipc	t1,0x11
   28e22:	50233303          	ld	t1,1282(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28e26:	9302                	c.jalr	t1
   28e28:	b781                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28e2a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28e2e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28e30:	4681                	c.li	a3,0
   28e32:	00007617          	auipc	a2,0x7
   28e36:	14a60613          	addi	a2,a2,330 # 2ff7c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf4c>
   28e3a:	00007597          	auipc	a1,0x7
   28e3e:	13658593          	addi	a1,a1,310 # 2ff70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf40>
   28e42:	00011317          	auipc	t1,0x11
   28e46:	4de33303          	ld	t1,1246(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28e4a:	9302                	c.jalr	t1
   28e4c:	bf31                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28e4e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28e52:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28e54:	4681                	c.li	a3,0
   28e56:	00007617          	auipc	a2,0x7
   28e5a:	13e60613          	addi	a2,a2,318 # 2ff94 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf64>
   28e5e:	00007597          	auipc	a1,0x7
   28e62:	12258593          	addi	a1,a1,290 # 2ff80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf50>
   28e66:	00011317          	auipc	t1,0x11
   28e6a:	4ba33303          	ld	t1,1210(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28e6e:	9302                	c.jalr	t1
   28e70:	bde5                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28e72:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28e76:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28e78:	4681                	c.li	a3,0
   28e7a:	00007617          	auipc	a2,0x7
   28e7e:	12b60613          	addi	a2,a2,299 # 2ffa5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf75>
   28e82:	00007597          	auipc	a1,0x7
   28e86:	11658593          	addi	a1,a1,278 # 2ff98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf68>
   28e8a:	00011317          	auipc	t1,0x11
   28e8e:	49633303          	ld	t1,1174(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28e92:	9302                	c.jalr	t1
   28e94:	bdd1                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28e96:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28e9a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28e9c:	4681                	c.li	a3,0
   28e9e:	00007617          	auipc	a2,0x7
   28ea2:	11d60613          	addi	a2,a2,285 # 2ffbb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf8b>
   28ea6:	00007597          	auipc	a1,0x7
   28eaa:	10258593          	addi	a1,a1,258 # 2ffa8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf78>
   28eae:	00011317          	auipc	t1,0x11
   28eb2:	47233303          	ld	t1,1138(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28eb6:	9302                	c.jalr	t1
   28eb8:	bd45                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28eba:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28ebe:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28ec0:	4681                	c.li	a3,0
   28ec2:	00007617          	auipc	a2,0x7
   28ec6:	11360613          	addi	a2,a2,275 # 2ffd5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfa5>
   28eca:	00007597          	auipc	a1,0x7
   28ece:	0f658593          	addi	a1,a1,246 # 2ffc0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf90>
   28ed2:	00011317          	auipc	t1,0x11
   28ed6:	44e33303          	ld	t1,1102(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28eda:	9302                	c.jalr	t1
   28edc:	b571                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28ede:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28ee2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28ee4:	4681                	c.li	a3,0
   28ee6:	00007617          	auipc	a2,0x7
   28eea:	10560613          	addi	a2,a2,261 # 2ffeb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfbb>
   28eee:	00007597          	auipc	a1,0x7
   28ef2:	0ea58593          	addi	a1,a1,234 # 2ffd8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfa8>
   28ef6:	00011317          	auipc	t1,0x11
   28efa:	42a33303          	ld	t1,1066(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28efe:	9302                	c.jalr	t1
   28f00:	b5a5                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28f02:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28f06:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28f08:	4681                	c.li	a3,0
   28f0a:	00007617          	auipc	a2,0x7
   28f0e:	0f860613          	addi	a2,a2,248 # 30002 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfd2>
   28f12:	00007597          	auipc	a1,0x7
   28f16:	0de58593          	addi	a1,a1,222 # 2fff0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfc0>
   28f1a:	00011317          	auipc	t1,0x11
   28f1e:	40633303          	ld	t1,1030(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28f22:	9302                	c.jalr	t1
   28f24:	b591                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28f26:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28f2a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28f2c:	4681                	c.li	a3,0
   28f2e:	00007617          	auipc	a2,0x7
   28f32:	0ef60613          	addi	a2,a2,239 # 3001d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfed>
   28f36:	00007597          	auipc	a1,0x7
   28f3a:	0d258593          	addi	a1,a1,210 # 30008 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfd8>
   28f3e:	00011317          	auipc	t1,0x11
   28f42:	3e233303          	ld	t1,994(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28f46:	9302                	c.jalr	t1
   28f48:	b505                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28f4a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28f4e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28f50:	4681                	c.li	a3,0
   28f52:	00007617          	auipc	a2,0x7
   28f56:	0e460613          	addi	a2,a2,228 # 30036 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1006>
   28f5a:	00007597          	auipc	a1,0x7
   28f5e:	0c658593          	addi	a1,a1,198 # 30020 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xff0>
   28f62:	00011317          	auipc	t1,0x11
   28f66:	3be33303          	ld	t1,958(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28f6a:	9302                	c.jalr	t1
   28f6c:	bbf5                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28f6e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28f72:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28f74:	4681                	c.li	a3,0
   28f76:	00007617          	auipc	a2,0x7
   28f7a:	0d060613          	addi	a2,a2,208 # 30046 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1016>
   28f7e:	00007597          	auipc	a1,0x7
   28f82:	0ba58593          	addi	a1,a1,186 # 30038 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1008>
   28f86:	00011317          	auipc	t1,0x11
   28f8a:	39a33303          	ld	t1,922(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28f8e:	9302                	c.jalr	t1
   28f90:	bbe1                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28f92:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28f96:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28f98:	4681                	c.li	a3,0
   28f9a:	00007617          	auipc	a2,0x7
   28f9e:	0bf60613          	addi	a2,a2,191 # 30059 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1029>
   28fa2:	00007597          	auipc	a1,0x7
   28fa6:	0a658593          	addi	a1,a1,166 # 30048 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1018>
   28faa:	00011317          	auipc	t1,0x11
   28fae:	37633303          	ld	t1,886(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28fb2:	9302                	c.jalr	t1
   28fb4:	bb55                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28fb6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28fba:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28fbc:	4681                	c.li	a3,0
   28fbe:	00007617          	auipc	a2,0x7
   28fc2:	0bf60613          	addi	a2,a2,191 # 3007d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x104d>
   28fc6:	00007597          	auipc	a1,0x7
   28fca:	09a58593          	addi	a1,a1,154 # 30060 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1030>
   28fce:	00011317          	auipc	t1,0x11
   28fd2:	35233303          	ld	t1,850(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28fd6:	9302                	c.jalr	t1
   28fd8:	bb41                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28fda:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28fde:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28fe0:	4681                	c.li	a3,0
   28fe2:	00007617          	auipc	a2,0x7
   28fe6:	0ac60613          	addi	a2,a2,172 # 3008e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x105e>
   28fea:	00007597          	auipc	a1,0x7
   28fee:	09658593          	addi	a1,a1,150 # 30080 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1050>
   28ff2:	00011317          	auipc	t1,0x11
   28ff6:	32e33303          	ld	t1,814(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   28ffa:	9302                	c.jalr	t1
   28ffc:	b3b5                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28ffe:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29002:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29004:	4681                	c.li	a3,0
   29006:	00007617          	auipc	a2,0x7
   2900a:	09d60613          	addi	a2,a2,157 # 300a3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1073>
   2900e:	00007597          	auipc	a1,0x7
   29012:	08258593          	addi	a1,a1,130 # 30090 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1060>
   29016:	00011317          	auipc	t1,0x11
   2901a:	30a33303          	ld	t1,778(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2901e:	9302                	c.jalr	t1
   29020:	b3a1                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29022:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29026:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29028:	4681                	c.li	a3,0
   2902a:	00007617          	auipc	a2,0x7
   2902e:	09560613          	addi	a2,a2,149 # 300bf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x108f>
   29032:	00007597          	auipc	a1,0x7
   29036:	07658593          	addi	a1,a1,118 # 300a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1078>
   2903a:	00011317          	auipc	t1,0x11
   2903e:	2e633303          	ld	t1,742(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29042:	9302                	c.jalr	t1
   29044:	b315                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29046:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2904a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2904c:	4681                	c.li	a3,0
   2904e:	00007617          	auipc	a2,0x7
   29052:	08460613          	addi	a2,a2,132 # 300d2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10a2>
   29056:	00007597          	auipc	a1,0x7
   2905a:	06a58593          	addi	a1,a1,106 # 300c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1090>
   2905e:	00011317          	auipc	t1,0x11
   29062:	2c233303          	ld	t1,706(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29066:	9302                	c.jalr	t1
   29068:	b301                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2906a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2906e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29070:	4681                	c.li	a3,0
   29072:	00007617          	auipc	a2,0x7
   29076:	07f60613          	addi	a2,a2,127 # 300f1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10c1>
   2907a:	00007597          	auipc	a1,0x7
   2907e:	05e58593          	addi	a1,a1,94 # 300d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10a8>
   29082:	00011317          	auipc	t1,0x11
   29086:	29e33303          	ld	t1,670(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2908a:	9302                	c.jalr	t1
   2908c:	b9f1                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2908e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29092:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29094:	4681                	c.li	a3,0
   29096:	00007617          	auipc	a2,0x7
   2909a:	06f60613          	addi	a2,a2,111 # 30105 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10d5>
   2909e:	00007597          	auipc	a1,0x7
   290a2:	05a58593          	addi	a1,a1,90 # 300f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10c8>
   290a6:	00011317          	auipc	t1,0x11
   290aa:	27a33303          	ld	t1,634(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   290ae:	9302                	c.jalr	t1
   290b0:	b965                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   290b2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   290b6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   290b8:	4681                	c.li	a3,0
   290ba:	00007617          	auipc	a2,0x7
   290be:	06760613          	addi	a2,a2,103 # 30121 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10f1>
   290c2:	00007597          	auipc	a1,0x7
   290c6:	04658593          	addi	a1,a1,70 # 30108 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10d8>
   290ca:	00011317          	auipc	t1,0x11
   290ce:	25633303          	ld	t1,598(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   290d2:	9302                	c.jalr	t1
   290d4:	b951                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   290d6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   290da:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   290dc:	4681                	c.li	a3,0
   290de:	00007617          	auipc	a2,0x7
   290e2:	05960613          	addi	a2,a2,89 # 30137 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1107>
   290e6:	00007597          	auipc	a1,0x7
   290ea:	04258593          	addi	a1,a1,66 # 30128 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10f8>
   290ee:	00011317          	auipc	t1,0x11
   290f2:	23233303          	ld	t1,562(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   290f6:	9302                	c.jalr	t1
   290f8:	b985                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   290fa:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   290fe:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29100:	4681                	c.li	a3,0
   29102:	00007617          	auipc	a2,0x7
   29106:	04a60613          	addi	a2,a2,74 # 3014c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x111c>
   2910a:	00007597          	auipc	a1,0x7
   2910e:	02e58593          	addi	a1,a1,46 # 30138 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1108>
   29112:	00011317          	auipc	t1,0x11
   29116:	20e33303          	ld	t1,526(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2911a:	9302                	c.jalr	t1
   2911c:	b1b1                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2911e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29122:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29124:	4681                	c.li	a3,0
   29126:	00007617          	auipc	a2,0x7
   2912a:	03a60613          	addi	a2,a2,58 # 30160 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1130>
   2912e:	00007597          	auipc	a1,0x7
   29132:	02258593          	addi	a1,a1,34 # 30150 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1120>
   29136:	00011317          	auipc	t1,0x11
   2913a:	1ea33303          	ld	t1,490(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2913e:	9302                	c.jalr	t1
   29140:	b125                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29142:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29146:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29148:	4681                	c.li	a3,0
   2914a:	00007617          	auipc	a2,0x7
   2914e:	03760613          	addi	a2,a2,55 # 30181 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1151>
   29152:	00007597          	auipc	a1,0x7
   29156:	01658593          	addi	a1,a1,22 # 30168 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1138>
   2915a:	00011317          	auipc	t1,0x11
   2915e:	1c633303          	ld	t1,454(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29162:	9302                	c.jalr	t1
   29164:	b111                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29166:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2916a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2916c:	4681                	c.li	a3,0
   2916e:	00007617          	auipc	a2,0x7
   29172:	02a60613          	addi	a2,a2,42 # 30198 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1168>
   29176:	00007597          	auipc	a1,0x7
   2917a:	01258593          	addi	a1,a1,18 # 30188 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1158>
   2917e:	00011317          	auipc	t1,0x11
   29182:	1a233303          	ld	t1,418(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29186:	9302                	c.jalr	t1
   29188:	b6c5                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2918a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2918e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29190:	4681                	c.li	a3,0
   29192:	00007617          	auipc	a2,0x7
   29196:	02060613          	addi	a2,a2,32 # 301b2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1182>
   2919a:	00007597          	auipc	a1,0x7
   2919e:	00658593          	addi	a1,a1,6 # 301a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1170>
   291a2:	00011317          	auipc	t1,0x11
   291a6:	17e33303          	ld	t1,382(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   291aa:	9302                	c.jalr	t1
   291ac:	be75                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   291ae:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   291b2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   291b4:	4681                	c.li	a3,0
   291b6:	00007617          	auipc	a2,0x7
   291ba:	01360613          	addi	a2,a2,19 # 301c9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1199>
   291be:	00007597          	auipc	a1,0x7
   291c2:	ffa58593          	addi	a1,a1,-6 # 301b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1188>
   291c6:	00011317          	auipc	t1,0x11
   291ca:	15a33303          	ld	t1,346(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   291ce:	9302                	c.jalr	t1
   291d0:	be61                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   291d2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   291d6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   291d8:	4681                	c.li	a3,0
   291da:	00007617          	auipc	a2,0x7
   291de:	00560613          	addi	a2,a2,5 # 301df <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11af>
   291e2:	00007597          	auipc	a1,0x7
   291e6:	fee58593          	addi	a1,a1,-18 # 301d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11a0>
   291ea:	00011317          	auipc	t1,0x11
   291ee:	13633303          	ld	t1,310(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   291f2:	9302                	c.jalr	t1
   291f4:	be95                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   291f6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   291fa:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   291fc:	4681                	c.li	a3,0
   291fe:	00007617          	auipc	a2,0x7
   29202:	ff360613          	addi	a2,a2,-13 # 301f1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11c1>
   29206:	00007597          	auipc	a1,0x7
   2920a:	fda58593          	addi	a1,a1,-38 # 301e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11b0>
   2920e:	00011317          	auipc	t1,0x11
   29212:	11233303          	ld	t1,274(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29216:	9302                	c.jalr	t1
   29218:	be81                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2921a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2921e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29220:	4681                	c.li	a3,0
   29222:	00007617          	auipc	a2,0x7
   29226:	fe660613          	addi	a2,a2,-26 # 30208 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11d8>
   2922a:	00007597          	auipc	a1,0x7
   2922e:	fce58593          	addi	a1,a1,-50 # 301f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11c8>
   29232:	00011317          	auipc	t1,0x11
   29236:	0ee33303          	ld	t1,238(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2923a:	9302                	c.jalr	t1
   2923c:	b635                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2923e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29242:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29244:	4681                	c.li	a3,0
   29246:	00007617          	auipc	a2,0x7
   2924a:	fd760613          	addi	a2,a2,-41 # 3021d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11ed>
   2924e:	00007597          	auipc	a1,0x7
   29252:	fc258593          	addi	a1,a1,-62 # 30210 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11e0>
   29256:	00011317          	auipc	t1,0x11
   2925a:	0ca33303          	ld	t1,202(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2925e:	9302                	c.jalr	t1
   29260:	b621                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29262:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29266:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29268:	4681                	c.li	a3,0
   2926a:	00007617          	auipc	a2,0x7
   2926e:	fc560613          	addi	a2,a2,-59 # 3022f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11ff>
   29272:	00007597          	auipc	a1,0x7
   29276:	fae58593          	addi	a1,a1,-82 # 30220 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11f0>
   2927a:	00011317          	auipc	t1,0x11
   2927e:	0a633303          	ld	t1,166(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29282:	9302                	c.jalr	t1
   29284:	b4d5                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29286:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2928a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2928c:	4681                	c.li	a3,0
   2928e:	00007617          	auipc	a2,0x7
   29292:	fb660613          	addi	a2,a2,-74 # 30244 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1214>
   29296:	00007597          	auipc	a1,0x7
   2929a:	f9a58593          	addi	a1,a1,-102 # 30230 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1200>
   2929e:	00011317          	auipc	t1,0x11
   292a2:	08233303          	ld	t1,130(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   292a6:	9302                	c.jalr	t1
   292a8:	b4c1                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   292aa:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   292ae:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   292b0:	4681                	c.li	a3,0
   292b2:	00007617          	auipc	a2,0x7
   292b6:	fa860613          	addi	a2,a2,-88 # 3025a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x122a>
   292ba:	00007597          	auipc	a1,0x7
   292be:	f8e58593          	addi	a1,a1,-114 # 30248 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1218>
   292c2:	00011317          	auipc	t1,0x11
   292c6:	05e33303          	ld	t1,94(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   292ca:	9302                	c.jalr	t1
   292cc:	bc71                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   292ce:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   292d2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   292d4:	4681                	c.li	a3,0
   292d6:	00007617          	auipc	a2,0x7
   292da:	f9b60613          	addi	a2,a2,-101 # 30271 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1241>
   292de:	00007597          	auipc	a1,0x7
   292e2:	f8258593          	addi	a1,a1,-126 # 30260 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1230>
   292e6:	00011317          	auipc	t1,0x11
   292ea:	03a33303          	ld	t1,58(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   292ee:	9302                	c.jalr	t1
   292f0:	bca5                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   292f2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   292f6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   292f8:	4681                	c.li	a3,0
   292fa:	00007617          	auipc	a2,0x7
   292fe:	f9c60613          	addi	a2,a2,-100 # 30296 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1266>
   29302:	00007597          	auipc	a1,0x7
   29306:	f7658593          	addi	a1,a1,-138 # 30278 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1248>
   2930a:	00011317          	auipc	t1,0x11
   2930e:	01633303          	ld	t1,22(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29312:	9302                	c.jalr	t1
   29314:	bc91                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29316:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2931a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2931c:	4681                	c.li	a3,0
   2931e:	00007617          	auipc	a2,0x7
   29322:	f9960613          	addi	a2,a2,-103 # 302b7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1287>
   29326:	00007597          	auipc	a1,0x7
   2932a:	f7258593          	addi	a1,a1,-142 # 30298 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1268>
   2932e:	00011317          	auipc	t1,0x11
   29332:	ff233303          	ld	t1,-14(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29336:	9302                	c.jalr	t1
   29338:	bc05                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2933a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2933e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29340:	4681                	c.li	a3,0
   29342:	00007617          	auipc	a2,0x7
   29346:	f8860613          	addi	a2,a2,-120 # 302ca <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x129a>
   2934a:	00007597          	auipc	a1,0x7
   2934e:	f6e58593          	addi	a1,a1,-146 # 302b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1288>
   29352:	00011317          	auipc	t1,0x11
   29356:	fce33303          	ld	t1,-50(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2935a:	9302                	c.jalr	t1
   2935c:	b431                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2935e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29362:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29364:	4681                	c.li	a3,0
   29366:	00007617          	auipc	a2,0x7
   2936a:	f7a60613          	addi	a2,a2,-134 # 302e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12b0>
   2936e:	00007597          	auipc	a1,0x7
   29372:	f6258593          	addi	a1,a1,-158 # 302d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12a0>
   29376:	00011317          	auipc	t1,0x11
   2937a:	faa33303          	ld	t1,-86(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2937e:	9302                	c.jalr	t1
   29380:	b2e5                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29382:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29386:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29388:	4681                	c.li	a3,0
   2938a:	00007617          	auipc	a2,0x7
   2938e:	f7160613          	addi	a2,a2,-143 # 302fb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12cb>
   29392:	00007597          	auipc	a1,0x7
   29396:	f5658593          	addi	a1,a1,-170 # 302e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12b8>
   2939a:	00011317          	auipc	t1,0x11
   2939e:	f8633303          	ld	t1,-122(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   293a2:	9302                	c.jalr	t1
   293a4:	b2d1                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   293a6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   293aa:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   293ac:	4681                	c.li	a3,0
   293ae:	00007617          	auipc	a2,0x7
   293b2:	f6160613          	addi	a2,a2,-159 # 3030f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12df>
   293b6:	00007597          	auipc	a1,0x7
   293ba:	f4a58593          	addi	a1,a1,-182 # 30300 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12d0>
   293be:	00011317          	auipc	t1,0x11
   293c2:	f6233303          	ld	t1,-158(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   293c6:	9302                	c.jalr	t1
   293c8:	b245                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   293ca:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   293ce:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   293d0:	4681                	c.li	a3,0
   293d2:	00007617          	auipc	a2,0x7
   293d6:	f5260613          	addi	a2,a2,-174 # 30324 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12f4>
   293da:	00007597          	auipc	a1,0x7
   293de:	f3658593          	addi	a1,a1,-202 # 30310 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12e0>
   293e2:	00011317          	auipc	t1,0x11
   293e6:	f3e33303          	ld	t1,-194(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   293ea:	9302                	c.jalr	t1
   293ec:	bab5                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   293ee:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   293f2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   293f4:	4681                	c.li	a3,0
   293f6:	00007617          	auipc	a2,0x7
   293fa:	f4860613          	addi	a2,a2,-184 # 3033e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x130e>
   293fe:	00007597          	auipc	a1,0x7
   29402:	f2a58593          	addi	a1,a1,-214 # 30328 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12f8>
   29406:	00011317          	auipc	t1,0x11
   2940a:	f1a33303          	ld	t1,-230(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2940e:	9302                	c.jalr	t1
   29410:	baa1                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29412:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29416:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29418:	4681                	c.li	a3,0
   2941a:	00007617          	auipc	a2,0x7
   2941e:	f3a60613          	addi	a2,a2,-198 # 30354 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1324>
   29422:	00007597          	auipc	a1,0x7
   29426:	f1e58593          	addi	a1,a1,-226 # 30340 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1310>
   2942a:	00011317          	auipc	t1,0x11
   2942e:	ef633303          	ld	t1,-266(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29432:	9302                	c.jalr	t1
   29434:	ba15                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29436:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2943a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2943c:	4681                	c.li	a3,0
   2943e:	00007617          	auipc	a2,0x7
   29442:	f2f60613          	addi	a2,a2,-209 # 3036d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x133d>
   29446:	00007597          	auipc	a1,0x7
   2944a:	f1258593          	addi	a1,a1,-238 # 30358 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1328>
   2944e:	00011317          	auipc	t1,0x11
   29452:	ed233303          	ld	t1,-302(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29456:	9302                	c.jalr	t1
   29458:	ba01                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2945a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2945e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29460:	4681                	c.li	a3,0
   29462:	00007617          	auipc	a2,0x7
   29466:	f1e60613          	addi	a2,a2,-226 # 30380 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1350>
   2946a:	00007597          	auipc	a1,0x7
   2946e:	f0658593          	addi	a1,a1,-250 # 30370 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1340>
   29472:	00011317          	auipc	t1,0x11
   29476:	eae33303          	ld	t1,-338(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2947a:	9302                	c.jalr	t1
   2947c:	b0f5                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2947e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29482:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29484:	4681                	c.li	a3,0
   29486:	00007617          	auipc	a2,0x7
   2948a:	f1860613          	addi	a2,a2,-232 # 3039e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x136e>
   2948e:	00007597          	auipc	a1,0x7
   29492:	efa58593          	addi	a1,a1,-262 # 30388 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1358>
   29496:	00011317          	auipc	t1,0x11
   2949a:	e8a33303          	ld	t1,-374(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2949e:	9302                	c.jalr	t1
   294a0:	b0e1                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   294a2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   294a6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   294a8:	4681                	c.li	a3,0
   294aa:	00007617          	auipc	a2,0x7
   294ae:	f0d60613          	addi	a2,a2,-243 # 303b7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1387>
   294b2:	00007597          	auipc	a1,0x7
   294b6:	eee58593          	addi	a1,a1,-274 # 303a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1370>
   294ba:	00011317          	auipc	t1,0x11
   294be:	e6633303          	ld	t1,-410(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   294c2:	9302                	c.jalr	t1
   294c4:	b055                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   294c6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   294ca:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   294cc:	4681                	c.li	a3,0
   294ce:	00007617          	auipc	a2,0x7
   294d2:	efd60613          	addi	a2,a2,-259 # 303cb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x139b>
   294d6:	00007597          	auipc	a1,0x7
   294da:	ee258593          	addi	a1,a1,-286 # 303b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1388>
   294de:	00011317          	auipc	t1,0x11
   294e2:	e4233303          	ld	t1,-446(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   294e6:	9302                	c.jalr	t1
   294e8:	b041                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   294ea:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   294ee:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   294f0:	4681                	c.li	a3,0
   294f2:	00007617          	auipc	a2,0x7
   294f6:	ef260613          	addi	a2,a2,-270 # 303e4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13b4>
   294fa:	00007597          	auipc	a1,0x7
   294fe:	ed658593          	addi	a1,a1,-298 # 303d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13a0>
   29502:	00011317          	auipc	t1,0x11
   29506:	e1e33303          	ld	t1,-482(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2950a:	9302                	c.jalr	t1
   2950c:	b8b1                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2950e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29512:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29514:	4681                	c.li	a3,0
   29516:	00007617          	auipc	a2,0x7
   2951a:	ee260613          	addi	a2,a2,-286 # 303f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13c8>
   2951e:	00007597          	auipc	a1,0x7
   29522:	eca58593          	addi	a1,a1,-310 # 303e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13b8>
   29526:	00011317          	auipc	t1,0x11
   2952a:	dfa33303          	ld	t1,-518(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2952e:	9302                	c.jalr	t1
   29530:	b825                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29532:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29536:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29538:	4681                	c.li	a3,0
   2953a:	00007617          	auipc	a2,0x7
   2953e:	ed860613          	addi	a2,a2,-296 # 30412 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13e2>
   29542:	00007597          	auipc	a1,0x7
   29546:	ebe58593          	addi	a1,a1,-322 # 30400 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13d0>
   2954a:	00011317          	auipc	t1,0x11
   2954e:	dd633303          	ld	t1,-554(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29552:	9302                	c.jalr	t1
   29554:	b811                	c.j	28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29556:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2955a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2955c:	4681                	c.li	a3,0
   2955e:	00007617          	auipc	a2,0x7
   29562:	eca60613          	addi	a2,a2,-310 # 30428 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13f8>
   29566:	00007597          	auipc	a1,0x7
   2956a:	eb258593          	addi	a1,a1,-334 # 30418 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13e8>
   2956e:	00011317          	auipc	t1,0x11
   29572:	db233303          	ld	t1,-590(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29576:	9302                	c.jalr	t1
   29578:	ff0ff06f          	jal	zero,28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2957c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29580:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29582:	4681                	c.li	a3,0
   29584:	00007617          	auipc	a2,0x7
   29588:	ec860613          	addi	a2,a2,-312 # 3044c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x141c>
   2958c:	00007597          	auipc	a1,0x7
   29590:	ea458593          	addi	a1,a1,-348 # 30430 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1400>
   29594:	00011317          	auipc	t1,0x11
   29598:	d8c33303          	ld	t1,-628(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2959c:	9302                	c.jalr	t1
   2959e:	fcaff06f          	jal	zero,28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   295a2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   295a6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   295a8:	4681                	c.li	a3,0
   295aa:	00007617          	auipc	a2,0x7
   295ae:	ebb60613          	addi	a2,a2,-325 # 30465 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1435>
   295b2:	00007597          	auipc	a1,0x7
   295b6:	e9e58593          	addi	a1,a1,-354 # 30450 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1420>
   295ba:	00011317          	auipc	t1,0x11
   295be:	d6633303          	ld	t1,-666(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   295c2:	9302                	c.jalr	t1
   295c4:	fa4ff06f          	jal	zero,28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
        return "(DW_TAG)0x" + to_hex((int)v);
   295c8:	848a                	c.mv	s1,sp
   295ca:	8526                	c.mv	a0,s1
   295cc:	00011317          	auipc	t1,0x11
   295d0:	e6433303          	ld	t1,-412(t1) # 3a430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf640>
   295d4:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   295d6:	4729                	c.li	a4,10
   295d8:	00007697          	auipc	a3,0x7
   295dc:	e9068693          	addi	a3,a3,-368 # 30468 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1438>
   295e0:	4601                	c.li	a2,0
   295e2:	4581                	c.li	a1,0
   295e4:	8526                	c.mv	a0,s1
   295e6:	b1aed0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   295ea:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   295ec:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   295f0:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   295f2:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   295f4:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   295f8:	03278563          	beq	a5,s2,29622 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x904>
      { _M_dataplus._M_p = __p; }
   295fc:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   295fe:	689c                	c.ld	a5,16(s1)
   29600:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   29602:	649c                	c.ld	a5,8(s1)
   29604:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   29606:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2960a:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2960e:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   29612:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   29614:	081c                	c.addi4spn	a5,sp,16
   29616:	f4f50963          	beq	a0,a5,28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2961a:	986ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2961e:	f4aff06f          	jal	zero,28d68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   29622:	6490                	c.ld	a2,8(s1)
   29624:	0605                	c.addi	a2,1
	if (__n == 0)
   29626:	de71                	c.beqz	a2,29602 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x8e4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   29628:	85ca                	c.mv	a1,s2
   2962a:	a16ed0ef          	jal	ra,16840 <memcpy@plt>
   2962e:	bfd1                	c.j	29602 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x8e4>
      { return _M_dataplus._M_p; }
   29630:	842a                	c.mv	s0,a0
   29632:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   29634:	081c                	c.addi4spn	a5,sp,16
   29636:	00f50463          	beq	a0,a5,2963e <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x920>
   2963a:	966ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2963e:	8522                	c.mv	a0,s0
   29640:	b50ed0ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000029644 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>:
{
   29644:	7139                	c.addi16sp	sp,-64
   29646:	fc06                	c.sdsp	ra,56(sp)
   29648:	f822                	c.sdsp	s0,48(sp)
   2964a:	f426                	c.sdsp	s1,40(sp)
   2964c:	f04a                	c.sdsp	s2,32(sp)
   2964e:	842a                	c.mv	s0,a0
        switch (v) {
   29650:	ffd5879b          	addiw	a5,a1,-3
   29654:	0ff7f693          	andi	a3,a5,255
   29658:	09c00713          	addi	a4,zero,156
   2965c:	12d769e3          	bltu	a4,a3,29f8e <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x94a>
   29660:	00269793          	slli	a5,a3,0x2
   29664:	00008717          	auipc	a4,0x8
   29668:	cf470713          	addi	a4,a4,-780 # 31358 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2328>
   2966c:	97ba                	c.add	a5,a4
   2966e:	439c                	c.lw	a5,0(a5)
   29670:	97ba                	c.add	a5,a4
   29672:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29674:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29678:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2967a:	4681                	c.li	a3,0
   2967c:	00007617          	auipc	a2,0x7
   29680:	e0660613          	addi	a2,a2,-506 # 30482 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1452>
   29684:	00007597          	auipc	a1,0x7
   29688:	df458593          	addi	a1,a1,-524 # 30478 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1448>
   2968c:	00011317          	auipc	t1,0x11
   29690:	c9433303          	ld	t1,-876(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29694:	9302                	c.jalr	t1
}
   29696:	8522                	c.mv	a0,s0
   29698:	70e2                	c.ldsp	ra,56(sp)
   2969a:	7442                	c.ldsp	s0,48(sp)
   2969c:	74a2                	c.ldsp	s1,40(sp)
   2969e:	7902                	c.ldsp	s2,32(sp)
   296a0:	6121                	c.addi16sp	sp,64
   296a2:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   296a4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   296a8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   296aa:	4681                	c.li	a3,0
   296ac:	00007617          	auipc	a2,0x7
   296b0:	de760613          	addi	a2,a2,-537 # 30493 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1463>
   296b4:	00007597          	auipc	a1,0x7
   296b8:	dd458593          	addi	a1,a1,-556 # 30488 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1458>
   296bc:	00011317          	auipc	t1,0x11
   296c0:	c6433303          	ld	t1,-924(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   296c4:	9302                	c.jalr	t1
   296c6:	bfc1                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   296c8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   296cc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   296ce:	4681                	c.li	a3,0
   296d0:	00007617          	auipc	a2,0x7
   296d4:	dd560613          	addi	a2,a2,-555 # 304a5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1475>
   296d8:	00007597          	auipc	a1,0x7
   296dc:	dc058593          	addi	a1,a1,-576 # 30498 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1468>
   296e0:	00011317          	auipc	t1,0x11
   296e4:	c4033303          	ld	t1,-960(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   296e8:	9302                	c.jalr	t1
   296ea:	b775                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   296ec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   296f0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   296f2:	4681                	c.li	a3,0
   296f4:	00007617          	auipc	a2,0x7
   296f8:	dc160613          	addi	a2,a2,-575 # 304b5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1485>
   296fc:	00007597          	auipc	a1,0x7
   29700:	dac58593          	addi	a1,a1,-596 # 304a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1478>
   29704:	00011317          	auipc	t1,0x11
   29708:	c1c33303          	ld	t1,-996(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2970c:	9302                	c.jalr	t1
   2970e:	b761                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29710:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29714:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29716:	4681                	c.li	a3,0
   29718:	00007617          	auipc	a2,0x7
   2971c:	dad60613          	addi	a2,a2,-595 # 304c5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1495>
   29720:	00007597          	auipc	a1,0x7
   29724:	d9858593          	addi	a1,a1,-616 # 304b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1488>
   29728:	00011317          	auipc	t1,0x11
   2972c:	bf833303          	ld	t1,-1032(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29730:	9302                	c.jalr	t1
   29732:	b795                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29734:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29738:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2973a:	4681                	c.li	a3,0
   2973c:	00007617          	auipc	a2,0x7
   29740:	d9960613          	addi	a2,a2,-615 # 304d5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14a5>
   29744:	00007597          	auipc	a1,0x7
   29748:	d8458593          	addi	a1,a1,-636 # 304c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1498>
   2974c:	00011317          	auipc	t1,0x11
   29750:	bd433303          	ld	t1,-1068(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29754:	9302                	c.jalr	t1
   29756:	b781                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29758:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2975c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2975e:	4681                	c.li	a3,0
   29760:	00007617          	auipc	a2,0x7
   29764:	d8560613          	addi	a2,a2,-635 # 304e5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14b5>
   29768:	00007597          	auipc	a1,0x7
   2976c:	d7058593          	addi	a1,a1,-656 # 304d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14a8>
   29770:	00011317          	auipc	t1,0x11
   29774:	bb033303          	ld	t1,-1104(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29778:	9302                	c.jalr	t1
   2977a:	bf31                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2977c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29780:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29782:	4681                	c.li	a3,0
   29784:	00007617          	auipc	a2,0x7
   29788:	d7160613          	addi	a2,a2,-655 # 304f5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14c5>
   2978c:	00007597          	auipc	a1,0x7
   29790:	d5c58593          	addi	a1,a1,-676 # 304e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14b8>
   29794:	00011317          	auipc	t1,0x11
   29798:	b8c33303          	ld	t1,-1140(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2979c:	9302                	c.jalr	t1
   2979e:	bde5                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   297a0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   297a4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   297a6:	4681                	c.li	a3,0
   297a8:	00007617          	auipc	a2,0x7
   297ac:	d5d60613          	addi	a2,a2,-675 # 30505 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14d5>
   297b0:	00007597          	auipc	a1,0x7
   297b4:	d4858593          	addi	a1,a1,-696 # 304f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14c8>
   297b8:	00011317          	auipc	t1,0x11
   297bc:	b6833303          	ld	t1,-1176(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   297c0:	9302                	c.jalr	t1
   297c2:	bdd1                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   297c4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   297c8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   297ca:	4681                	c.li	a3,0
   297cc:	00007617          	auipc	a2,0x7
   297d0:	d4960613          	addi	a2,a2,-695 # 30515 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14e5>
   297d4:	00007597          	auipc	a1,0x7
   297d8:	d3458593          	addi	a1,a1,-716 # 30508 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14d8>
   297dc:	00011317          	auipc	t1,0x11
   297e0:	b4433303          	ld	t1,-1212(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   297e4:	9302                	c.jalr	t1
   297e6:	bd45                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   297e8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   297ec:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   297ee:	4681                	c.li	a3,0
   297f0:	00007617          	auipc	a2,0x7
   297f4:	d3460613          	addi	a2,a2,-716 # 30524 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14f4>
   297f8:	00007597          	auipc	a1,0x7
   297fc:	d2058593          	addi	a1,a1,-736 # 30518 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14e8>
   29800:	00011317          	auipc	t1,0x11
   29804:	b2033303          	ld	t1,-1248(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29808:	9302                	c.jalr	t1
   2980a:	b571                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2980c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29810:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29812:	4681                	c.li	a3,0
   29814:	00007617          	auipc	a2,0x7
   29818:	d2060613          	addi	a2,a2,-736 # 30534 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1504>
   2981c:	00007597          	auipc	a1,0x7
   29820:	d0c58593          	addi	a1,a1,-756 # 30528 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14f8>
   29824:	00011317          	auipc	t1,0x11
   29828:	afc33303          	ld	t1,-1284(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2982c:	9302                	c.jalr	t1
   2982e:	b5a5                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29830:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29834:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29836:	4681                	c.li	a3,0
   29838:	00007617          	auipc	a2,0x7
   2983c:	d0960613          	addi	a2,a2,-759 # 30541 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1511>
   29840:	00007597          	auipc	a1,0x7
   29844:	cf858593          	addi	a1,a1,-776 # 30538 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1508>
   29848:	00011317          	auipc	t1,0x11
   2984c:	ad833303          	ld	t1,-1320(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29850:	9302                	c.jalr	t1
   29852:	b591                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29854:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29858:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2985a:	4681                	c.li	a3,0
   2985c:	00007617          	auipc	a2,0x7
   29860:	cf660613          	addi	a2,a2,-778 # 30552 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1522>
   29864:	00007597          	auipc	a1,0x7
   29868:	ce458593          	addi	a1,a1,-796 # 30548 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1518>
   2986c:	00011317          	auipc	t1,0x11
   29870:	ab433303          	ld	t1,-1356(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29874:	9302                	c.jalr	t1
   29876:	b505                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29878:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2987c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2987e:	4681                	c.li	a3,0
   29880:	00007617          	auipc	a2,0x7
   29884:	ce260613          	addi	a2,a2,-798 # 30562 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1532>
   29888:	00007597          	auipc	a1,0x7
   2988c:	cd058593          	addi	a1,a1,-816 # 30558 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1528>
   29890:	00011317          	auipc	t1,0x11
   29894:	a9033303          	ld	t1,-1392(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29898:	9302                	c.jalr	t1
   2989a:	bbf5                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2989c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   298a0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   298a2:	4681                	c.li	a3,0
   298a4:	00007617          	auipc	a2,0x7
   298a8:	cce60613          	addi	a2,a2,-818 # 30572 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1542>
   298ac:	00007597          	auipc	a1,0x7
   298b0:	cbc58593          	addi	a1,a1,-836 # 30568 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1538>
   298b4:	00011317          	auipc	t1,0x11
   298b8:	a6c33303          	ld	t1,-1428(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   298bc:	9302                	c.jalr	t1
   298be:	bbe1                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   298c0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   298c4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   298c6:	4681                	c.li	a3,0
   298c8:	00007617          	auipc	a2,0x7
   298cc:	cba60613          	addi	a2,a2,-838 # 30582 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1552>
   298d0:	00007597          	auipc	a1,0x7
   298d4:	ca858593          	addi	a1,a1,-856 # 30578 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1548>
   298d8:	00011317          	auipc	t1,0x11
   298dc:	a4833303          	ld	t1,-1464(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   298e0:	9302                	c.jalr	t1
   298e2:	bb55                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   298e4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   298e8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   298ea:	4681                	c.li	a3,0
   298ec:	00007617          	auipc	a2,0x7
   298f0:	ca560613          	addi	a2,a2,-859 # 30591 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1561>
   298f4:	00007597          	auipc	a1,0x7
   298f8:	c9458593          	addi	a1,a1,-876 # 30588 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1558>
   298fc:	00011317          	auipc	t1,0x11
   29900:	a2433303          	ld	t1,-1500(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29904:	9302                	c.jalr	t1
   29906:	bb41                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29908:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2990c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2990e:	4681                	c.li	a3,0
   29910:	00007617          	auipc	a2,0x7
   29914:	c9460613          	addi	a2,a2,-876 # 305a4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1574>
   29918:	00007597          	auipc	a1,0x7
   2991c:	c8058593          	addi	a1,a1,-896 # 30598 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1568>
   29920:	00011317          	auipc	t1,0x11
   29924:	a0033303          	ld	t1,-1536(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29928:	9302                	c.jalr	t1
   2992a:	b3b5                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2992c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29930:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29932:	4681                	c.li	a3,0
   29934:	00007617          	auipc	a2,0x7
   29938:	c7d60613          	addi	a2,a2,-899 # 305b1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1581>
   2993c:	00007597          	auipc	a1,0x7
   29940:	c6c58593          	addi	a1,a1,-916 # 305a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1578>
   29944:	00011317          	auipc	t1,0x11
   29948:	9dc33303          	ld	t1,-1572(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2994c:	9302                	c.jalr	t1
   2994e:	b3a1                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29950:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29954:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29956:	4681                	c.li	a3,0
   29958:	00007617          	auipc	a2,0x7
   2995c:	c6960613          	addi	a2,a2,-919 # 305c1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1591>
   29960:	00007597          	auipc	a1,0x7
   29964:	c5858593          	addi	a1,a1,-936 # 305b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1588>
   29968:	00011317          	auipc	t1,0x11
   2996c:	9b833303          	ld	t1,-1608(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29970:	9302                	c.jalr	t1
   29972:	b315                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29974:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29978:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2997a:	4681                	c.li	a3,0
   2997c:	00007617          	auipc	a2,0x7
   29980:	c5560613          	addi	a2,a2,-939 # 305d1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15a1>
   29984:	00007597          	auipc	a1,0x7
   29988:	c4458593          	addi	a1,a1,-956 # 305c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1598>
   2998c:	00011317          	auipc	t1,0x11
   29990:	99433303          	ld	t1,-1644(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29994:	9302                	c.jalr	t1
   29996:	b301                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29998:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2999c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2999e:	4681                	c.li	a3,0
   299a0:	00007617          	auipc	a2,0x7
   299a4:	c4360613          	addi	a2,a2,-957 # 305e3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15b3>
   299a8:	00007597          	auipc	a1,0x7
   299ac:	c3058593          	addi	a1,a1,-976 # 305d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15a8>
   299b0:	00011317          	auipc	t1,0x11
   299b4:	97033303          	ld	t1,-1680(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   299b8:	9302                	c.jalr	t1
   299ba:	b9f1                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   299bc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   299c0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   299c2:	4681                	c.li	a3,0
   299c4:	00007617          	auipc	a2,0x7
   299c8:	c2d60613          	addi	a2,a2,-979 # 305f1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15c1>
   299cc:	00007597          	auipc	a1,0x7
   299d0:	c1c58593          	addi	a1,a1,-996 # 305e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15b8>
   299d4:	00011317          	auipc	t1,0x11
   299d8:	94c33303          	ld	t1,-1716(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   299dc:	9302                	c.jalr	t1
   299de:	b965                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   299e0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   299e4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   299e6:	4681                	c.li	a3,0
   299e8:	00007617          	auipc	a2,0x7
   299ec:	c1960613          	addi	a2,a2,-999 # 30601 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15d1>
   299f0:	00007597          	auipc	a1,0x7
   299f4:	c0858593          	addi	a1,a1,-1016 # 305f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15c8>
   299f8:	00011317          	auipc	t1,0x11
   299fc:	92833303          	ld	t1,-1752(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29a00:	9302                	c.jalr	t1
   29a02:	b951                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29a04:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29a08:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29a0a:	4681                	c.li	a3,0
   29a0c:	00007617          	auipc	a2,0x7
   29a10:	c0560613          	addi	a2,a2,-1019 # 30611 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15e1>
   29a14:	00007597          	auipc	a1,0x7
   29a18:	bf458593          	addi	a1,a1,-1036 # 30608 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15d8>
   29a1c:	00011317          	auipc	t1,0x11
   29a20:	90433303          	ld	t1,-1788(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29a24:	9302                	c.jalr	t1
   29a26:	b985                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29a28:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29a2c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29a2e:	4681                	c.li	a3,0
   29a30:	00007617          	auipc	a2,0x7
   29a34:	bf160613          	addi	a2,a2,-1039 # 30621 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15f1>
   29a38:	00007597          	auipc	a1,0x7
   29a3c:	be058593          	addi	a1,a1,-1056 # 30618 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15e8>
   29a40:	00011317          	auipc	t1,0x11
   29a44:	8e033303          	ld	t1,-1824(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29a48:	9302                	c.jalr	t1
   29a4a:	b1b1                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29a4c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29a50:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29a52:	4681                	c.li	a3,0
   29a54:	00007617          	auipc	a2,0x7
   29a58:	bdc60613          	addi	a2,a2,-1060 # 30630 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1600>
   29a5c:	00007597          	auipc	a1,0x7
   29a60:	bcc58593          	addi	a1,a1,-1076 # 30628 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15f8>
   29a64:	00011317          	auipc	t1,0x11
   29a68:	8bc33303          	ld	t1,-1860(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29a6c:	9302                	c.jalr	t1
   29a6e:	b125                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29a70:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29a74:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29a76:	4681                	c.li	a3,0
   29a78:	00007617          	auipc	a2,0x7
   29a7c:	bca60613          	addi	a2,a2,-1078 # 30642 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1612>
   29a80:	00007597          	auipc	a1,0x7
   29a84:	bb858593          	addi	a1,a1,-1096 # 30638 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1608>
   29a88:	00011317          	auipc	t1,0x11
   29a8c:	89833303          	ld	t1,-1896(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29a90:	9302                	c.jalr	t1
   29a92:	b111                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29a94:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29a98:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29a9a:	4681                	c.li	a3,0
   29a9c:	00007617          	auipc	a2,0x7
   29aa0:	bbd60613          	addi	a2,a2,-1091 # 30659 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1629>
   29aa4:	00007597          	auipc	a1,0x7
   29aa8:	ba458593          	addi	a1,a1,-1116 # 30648 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1618>
   29aac:	00011317          	auipc	t1,0x11
   29ab0:	87433303          	ld	t1,-1932(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29ab4:	9302                	c.jalr	t1
   29ab6:	b6c5                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29ab8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29abc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29abe:	4681                	c.li	a3,0
   29ac0:	00007617          	auipc	a2,0x7
   29ac4:	ba960613          	addi	a2,a2,-1111 # 30669 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1639>
   29ac8:	00007597          	auipc	a1,0x7
   29acc:	b9858593          	addi	a1,a1,-1128 # 30660 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1630>
   29ad0:	00011317          	auipc	t1,0x11
   29ad4:	85033303          	ld	t1,-1968(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29ad8:	9302                	c.jalr	t1
   29ada:	be75                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29adc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29ae0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29ae2:	4681                	c.li	a3,0
   29ae4:	00007617          	auipc	a2,0x7
   29ae8:	b9560613          	addi	a2,a2,-1131 # 30679 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1649>
   29aec:	00007597          	auipc	a1,0x7
   29af0:	b8458593          	addi	a1,a1,-1148 # 30670 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1640>
   29af4:	00011317          	auipc	t1,0x11
   29af8:	82c33303          	ld	t1,-2004(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29afc:	9302                	c.jalr	t1
   29afe:	be61                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29b00:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29b04:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29b06:	4681                	c.li	a3,0
   29b08:	00007617          	auipc	a2,0x7
   29b0c:	b8260613          	addi	a2,a2,-1150 # 3068a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x165a>
   29b10:	00007597          	auipc	a1,0x7
   29b14:	b7058593          	addi	a1,a1,-1168 # 30680 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1650>
   29b18:	00011317          	auipc	t1,0x11
   29b1c:	80833303          	ld	t1,-2040(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29b20:	9302                	c.jalr	t1
   29b22:	be95                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29b24:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29b28:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29b2a:	4681                	c.li	a3,0
   29b2c:	00007617          	auipc	a2,0x7
   29b30:	b6d60613          	addi	a2,a2,-1171 # 30699 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1669>
   29b34:	00007597          	auipc	a1,0x7
   29b38:	b5c58593          	addi	a1,a1,-1188 # 30690 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1660>
   29b3c:	00010317          	auipc	t1,0x10
   29b40:	7e433303          	ld	t1,2020(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29b44:	9302                	c.jalr	t1
   29b46:	be81                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29b48:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29b4c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29b4e:	4681                	c.li	a3,0
   29b50:	00007617          	auipc	a2,0x7
   29b54:	b5a60613          	addi	a2,a2,-1190 # 306aa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x167a>
   29b58:	00007597          	auipc	a1,0x7
   29b5c:	b4858593          	addi	a1,a1,-1208 # 306a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1670>
   29b60:	00010317          	auipc	t1,0x10
   29b64:	7c033303          	ld	t1,1984(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29b68:	9302                	c.jalr	t1
   29b6a:	b635                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29b6c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29b70:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29b72:	4681                	c.li	a3,0
   29b74:	00007617          	auipc	a2,0x7
   29b78:	b4560613          	addi	a2,a2,-1211 # 306b9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1689>
   29b7c:	00007597          	auipc	a1,0x7
   29b80:	b3458593          	addi	a1,a1,-1228 # 306b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1680>
   29b84:	00010317          	auipc	t1,0x10
   29b88:	79c33303          	ld	t1,1948(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29b8c:	9302                	c.jalr	t1
   29b8e:	b621                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29b90:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29b94:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29b96:	4681                	c.li	a3,0
   29b98:	00007617          	auipc	a2,0x7
   29b9c:	b3060613          	addi	a2,a2,-1232 # 306c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1698>
   29ba0:	00007597          	auipc	a1,0x7
   29ba4:	b2058593          	addi	a1,a1,-1248 # 306c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1690>
   29ba8:	00010317          	auipc	t1,0x10
   29bac:	77833303          	ld	t1,1912(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29bb0:	9302                	c.jalr	t1
   29bb2:	b4d5                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29bb4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29bb8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29bba:	4681                	c.li	a3,0
   29bbc:	00007617          	auipc	a2,0x7
   29bc0:	b1c60613          	addi	a2,a2,-1252 # 306d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16a8>
   29bc4:	00007597          	auipc	a1,0x7
   29bc8:	b0c58593          	addi	a1,a1,-1268 # 306d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16a0>
   29bcc:	00010317          	auipc	t1,0x10
   29bd0:	75433303          	ld	t1,1876(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29bd4:	9302                	c.jalr	t1
   29bd6:	b4c1                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29bd8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29bdc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29bde:	4681                	c.li	a3,0
   29be0:	00007617          	auipc	a2,0x7
   29be4:	b0860613          	addi	a2,a2,-1272 # 306e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16b8>
   29be8:	00007597          	auipc	a1,0x7
   29bec:	af858593          	addi	a1,a1,-1288 # 306e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16b0>
   29bf0:	00010317          	auipc	t1,0x10
   29bf4:	73033303          	ld	t1,1840(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29bf8:	9302                	c.jalr	t1
   29bfa:	bc71                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29bfc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29c00:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29c02:	4681                	c.li	a3,0
   29c04:	00007617          	auipc	a2,0x7
   29c08:	af460613          	addi	a2,a2,-1292 # 306f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16c8>
   29c0c:	00007597          	auipc	a1,0x7
   29c10:	ae458593          	addi	a1,a1,-1308 # 306f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16c0>
   29c14:	00010317          	auipc	t1,0x10
   29c18:	70c33303          	ld	t1,1804(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29c1c:	9302                	c.jalr	t1
   29c1e:	bca5                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29c20:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29c24:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29c26:	4681                	c.li	a3,0
   29c28:	00007617          	auipc	a2,0x7
   29c2c:	ae060613          	addi	a2,a2,-1312 # 30708 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16d8>
   29c30:	00007597          	auipc	a1,0x7
   29c34:	ad058593          	addi	a1,a1,-1328 # 30700 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16d0>
   29c38:	00010317          	auipc	t1,0x10
   29c3c:	6e833303          	ld	t1,1768(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29c40:	9302                	c.jalr	t1
   29c42:	bc91                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29c44:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29c48:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29c4a:	4681                	c.li	a3,0
   29c4c:	00007617          	auipc	a2,0x7
   29c50:	acc60613          	addi	a2,a2,-1332 # 30718 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16e8>
   29c54:	00007597          	auipc	a1,0x7
   29c58:	abc58593          	addi	a1,a1,-1348 # 30710 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16e0>
   29c5c:	00010317          	auipc	t1,0x10
   29c60:	6c433303          	ld	t1,1732(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29c64:	9302                	c.jalr	t1
   29c66:	bc05                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29c68:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29c6c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29c6e:	4681                	c.li	a3,0
   29c70:	00007617          	auipc	a2,0x7
   29c74:	aba60613          	addi	a2,a2,-1350 # 3072a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16fa>
   29c78:	00007597          	auipc	a1,0x7
   29c7c:	aa858593          	addi	a1,a1,-1368 # 30720 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16f0>
   29c80:	00010317          	auipc	t1,0x10
   29c84:	6a033303          	ld	t1,1696(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29c88:	9302                	c.jalr	t1
   29c8a:	b431                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29c8c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29c90:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29c92:	4681                	c.li	a3,0
   29c94:	00007617          	auipc	a2,0x7
   29c98:	aa760613          	addi	a2,a2,-1369 # 3073b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x170b>
   29c9c:	00007597          	auipc	a1,0x7
   29ca0:	a9458593          	addi	a1,a1,-1388 # 30730 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1700>
   29ca4:	00010317          	auipc	t1,0x10
   29ca8:	67c33303          	ld	t1,1660(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29cac:	9302                	c.jalr	t1
   29cae:	b2e5                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29cb0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29cb4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29cb6:	4681                	c.li	a3,0
   29cb8:	00007617          	auipc	a2,0x7
   29cbc:	a9260613          	addi	a2,a2,-1390 # 3074a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x171a>
   29cc0:	00007597          	auipc	a1,0x7
   29cc4:	a8058593          	addi	a1,a1,-1408 # 30740 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1710>
   29cc8:	00010317          	auipc	t1,0x10
   29ccc:	65833303          	ld	t1,1624(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29cd0:	9302                	c.jalr	t1
   29cd2:	b2d1                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29cd4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29cd8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29cda:	4681                	c.li	a3,0
   29cdc:	00007617          	auipc	a2,0x7
   29ce0:	a7f60613          	addi	a2,a2,-1409 # 3075b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x172b>
   29ce4:	00007597          	auipc	a1,0x7
   29ce8:	a6c58593          	addi	a1,a1,-1428 # 30750 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1720>
   29cec:	00010317          	auipc	t1,0x10
   29cf0:	63433303          	ld	t1,1588(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29cf4:	9302                	c.jalr	t1
   29cf6:	b245                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29cf8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29cfc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29cfe:	4681                	c.li	a3,0
   29d00:	00007617          	auipc	a2,0x7
   29d04:	a6b60613          	addi	a2,a2,-1429 # 3076b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x173b>
   29d08:	00007597          	auipc	a1,0x7
   29d0c:	a5858593          	addi	a1,a1,-1448 # 30760 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1730>
   29d10:	00010317          	auipc	t1,0x10
   29d14:	61033303          	ld	t1,1552(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29d18:	9302                	c.jalr	t1
   29d1a:	bab5                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29d1c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29d20:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29d22:	4681                	c.li	a3,0
   29d24:	00007617          	auipc	a2,0x7
   29d28:	a5860613          	addi	a2,a2,-1448 # 3077c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x174c>
   29d2c:	00007597          	auipc	a1,0x7
   29d30:	a4458593          	addi	a1,a1,-1468 # 30770 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1740>
   29d34:	00010317          	auipc	t1,0x10
   29d38:	5ec33303          	ld	t1,1516(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29d3c:	9302                	c.jalr	t1
   29d3e:	baa1                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29d40:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29d44:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29d46:	4681                	c.li	a3,0
   29d48:	00007617          	auipc	a2,0x7
   29d4c:	a4260613          	addi	a2,a2,-1470 # 3078a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x175a>
   29d50:	00007597          	auipc	a1,0x7
   29d54:	a3058593          	addi	a1,a1,-1488 # 30780 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1750>
   29d58:	00010317          	auipc	t1,0x10
   29d5c:	5c833303          	ld	t1,1480(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29d60:	9302                	c.jalr	t1
   29d62:	ba15                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29d64:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29d68:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29d6a:	4681                	c.li	a3,0
   29d6c:	00007617          	auipc	a2,0x7
   29d70:	a2f60613          	addi	a2,a2,-1489 # 3079b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x176b>
   29d74:	00007597          	auipc	a1,0x7
   29d78:	a1c58593          	addi	a1,a1,-1508 # 30790 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1760>
   29d7c:	00010317          	auipc	t1,0x10
   29d80:	5a433303          	ld	t1,1444(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29d84:	9302                	c.jalr	t1
   29d86:	ba01                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29d88:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29d8c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29d8e:	4681                	c.li	a3,0
   29d90:	00007617          	auipc	a2,0x7
   29d94:	a1b60613          	addi	a2,a2,-1509 # 307ab <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x177b>
   29d98:	00007597          	auipc	a1,0x7
   29d9c:	a0858593          	addi	a1,a1,-1528 # 307a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1770>
   29da0:	00010317          	auipc	t1,0x10
   29da4:	58033303          	ld	t1,1408(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29da8:	9302                	c.jalr	t1
   29daa:	b0f5                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29dac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29db0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29db2:	4681                	c.li	a3,0
   29db4:	00007617          	auipc	a2,0x7
   29db8:	a0760613          	addi	a2,a2,-1529 # 307bb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x178b>
   29dbc:	00007597          	auipc	a1,0x7
   29dc0:	9f458593          	addi	a1,a1,-1548 # 307b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1780>
   29dc4:	00010317          	auipc	t1,0x10
   29dc8:	55c33303          	ld	t1,1372(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29dcc:	9302                	c.jalr	t1
   29dce:	b0e1                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29dd0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29dd4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29dd6:	4681                	c.li	a3,0
   29dd8:	00007617          	auipc	a2,0x7
   29ddc:	9f860613          	addi	a2,a2,-1544 # 307d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17a0>
   29de0:	00007597          	auipc	a1,0x7
   29de4:	9e058593          	addi	a1,a1,-1568 # 307c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1790>
   29de8:	00010317          	auipc	t1,0x10
   29dec:	53833303          	ld	t1,1336(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29df0:	9302                	c.jalr	t1
   29df2:	b055                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29df4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29df8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29dfa:	4681                	c.li	a3,0
   29dfc:	00007617          	auipc	a2,0x7
   29e00:	9ed60613          	addi	a2,a2,-1555 # 307e9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17b9>
   29e04:	00007597          	auipc	a1,0x7
   29e08:	9d458593          	addi	a1,a1,-1580 # 307d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17a8>
   29e0c:	00010317          	auipc	t1,0x10
   29e10:	51433303          	ld	t1,1300(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29e14:	9302                	c.jalr	t1
   29e16:	b041                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29e18:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29e1c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29e1e:	4681                	c.li	a3,0
   29e20:	00007617          	auipc	a2,0x7
   29e24:	9d960613          	addi	a2,a2,-1575 # 307f9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17c9>
   29e28:	00007597          	auipc	a1,0x7
   29e2c:	9c858593          	addi	a1,a1,-1592 # 307f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17c0>
   29e30:	00010317          	auipc	t1,0x10
   29e34:	4f033303          	ld	t1,1264(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29e38:	9302                	c.jalr	t1
   29e3a:	b8b1                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29e3c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29e40:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29e42:	4681                	c.li	a3,0
   29e44:	00007617          	auipc	a2,0x7
   29e48:	9d560613          	addi	a2,a2,-1579 # 30819 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17e9>
   29e4c:	00007597          	auipc	a1,0x7
   29e50:	9b458593          	addi	a1,a1,-1612 # 30800 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17d0>
   29e54:	00010317          	auipc	t1,0x10
   29e58:	4cc33303          	ld	t1,1228(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29e5c:	9302                	c.jalr	t1
   29e5e:	b825                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29e60:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29e64:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29e66:	4681                	c.li	a3,0
   29e68:	00007617          	auipc	a2,0x7
   29e6c:	9c360613          	addi	a2,a2,-1597 # 3082b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17fb>
   29e70:	00007597          	auipc	a1,0x7
   29e74:	9b058593          	addi	a1,a1,-1616 # 30820 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17f0>
   29e78:	00010317          	auipc	t1,0x10
   29e7c:	4a833303          	ld	t1,1192(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29e80:	9302                	c.jalr	t1
   29e82:	b811                	c.j	29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29e84:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29e88:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29e8a:	4681                	c.li	a3,0
   29e8c:	00007617          	auipc	a2,0x7
   29e90:	9af60613          	addi	a2,a2,-1617 # 3083b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x180b>
   29e94:	00007597          	auipc	a1,0x7
   29e98:	99c58593          	addi	a1,a1,-1636 # 30830 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1800>
   29e9c:	00010317          	auipc	t1,0x10
   29ea0:	48433303          	ld	t1,1156(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29ea4:	9302                	c.jalr	t1
   29ea6:	ff0ff06f          	jal	zero,29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29eaa:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29eae:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29eb0:	4681                	c.li	a3,0
   29eb2:	00007617          	auipc	a2,0x7
   29eb6:	99c60613          	addi	a2,a2,-1636 # 3084e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x181e>
   29eba:	00007597          	auipc	a1,0x7
   29ebe:	98658593          	addi	a1,a1,-1658 # 30840 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1810>
   29ec2:	00010317          	auipc	t1,0x10
   29ec6:	45e33303          	ld	t1,1118(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29eca:	9302                	c.jalr	t1
   29ecc:	fcaff06f          	jal	zero,29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29ed0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29ed4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29ed6:	4681                	c.li	a3,0
   29ed8:	00007617          	auipc	a2,0x7
   29edc:	98e60613          	addi	a2,a2,-1650 # 30866 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1836>
   29ee0:	00007597          	auipc	a1,0x7
   29ee4:	97058593          	addi	a1,a1,-1680 # 30850 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1820>
   29ee8:	00010317          	auipc	t1,0x10
   29eec:	43833303          	ld	t1,1080(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29ef0:	9302                	c.jalr	t1
   29ef2:	fa4ff06f          	jal	zero,29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29ef6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29efa:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29efc:	4681                	c.li	a3,0
   29efe:	00007617          	auipc	a2,0x7
   29f02:	97e60613          	addi	a2,a2,-1666 # 3087c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x184c>
   29f06:	00007597          	auipc	a1,0x7
   29f0a:	96258593          	addi	a1,a1,-1694 # 30868 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1838>
   29f0e:	00010317          	auipc	t1,0x10
   29f12:	41233303          	ld	t1,1042(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29f16:	9302                	c.jalr	t1
   29f18:	f7eff06f          	jal	zero,29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29f1c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29f20:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29f22:	4681                	c.li	a3,0
   29f24:	00007617          	auipc	a2,0x7
   29f28:	96b60613          	addi	a2,a2,-1685 # 3088f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x185f>
   29f2c:	00007597          	auipc	a1,0x7
   29f30:	95458593          	addi	a1,a1,-1708 # 30880 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1850>
   29f34:	00010317          	auipc	t1,0x10
   29f38:	3ec33303          	ld	t1,1004(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29f3c:	9302                	c.jalr	t1
   29f3e:	f58ff06f          	jal	zero,29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29f42:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29f46:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29f48:	4681                	c.li	a3,0
   29f4a:	00007617          	auipc	a2,0x7
   29f4e:	95a60613          	addi	a2,a2,-1702 # 308a4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1874>
   29f52:	00007597          	auipc	a1,0x7
   29f56:	93e58593          	addi	a1,a1,-1730 # 30890 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1860>
   29f5a:	00010317          	auipc	t1,0x10
   29f5e:	3c633303          	ld	t1,966(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29f62:	9302                	c.jalr	t1
   29f64:	f32ff06f          	jal	zero,29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29f68:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29f6c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29f6e:	4681                	c.li	a3,0
   29f70:	00007617          	auipc	a2,0x7
   29f74:	94960613          	addi	a2,a2,-1719 # 308b9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1889>
   29f78:	00007597          	auipc	a1,0x7
   29f7c:	93058593          	addi	a1,a1,-1744 # 308a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1878>
   29f80:	00010317          	auipc	t1,0x10
   29f84:	3a033303          	ld	t1,928(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   29f88:	9302                	c.jalr	t1
   29f8a:	f0cff06f          	jal	zero,29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
        return "(DW_OP)0x" + to_hex((int)v);
   29f8e:	848a                	c.mv	s1,sp
   29f90:	8526                	c.mv	a0,s1
   29f92:	00010317          	auipc	t1,0x10
   29f96:	49e33303          	ld	t1,1182(t1) # 3a430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf640>
   29f9a:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   29f9c:	4725                	c.li	a4,9
   29f9e:	00007697          	auipc	a3,0x7
   29fa2:	92268693          	addi	a3,a3,-1758 # 308c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1890>
   29fa6:	4601                	c.li	a2,0
   29fa8:	4581                	c.li	a1,0
   29faa:	8526                	c.mv	a0,s1
   29fac:	955ec0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   29fb0:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29fb2:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   29fb6:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   29fb8:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   29fba:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   29fbe:	03278563          	beq	a5,s2,29fe8 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x9a4>
      { _M_dataplus._M_p = __p; }
   29fc2:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   29fc4:	689c                	c.ld	a5,16(s1)
   29fc6:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   29fc8:	649c                	c.ld	a5,8(s1)
   29fca:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   29fcc:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   29fd0:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   29fd4:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   29fd8:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   29fda:	081c                	c.addi4spn	a5,sp,16
   29fdc:	eaf50d63          	beq	a0,a5,29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   29fe0:	fc0ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   29fe4:	eb2ff06f          	jal	zero,29696 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   29fe8:	6490                	c.ld	a2,8(s1)
   29fea:	0605                	c.addi	a2,1
	if (__n == 0)
   29fec:	de71                	c.beqz	a2,29fc8 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x984>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   29fee:	85ca                	c.mv	a1,s2
   29ff0:	851ec0ef          	jal	ra,16840 <memcpy@plt>
   29ff4:	bfd1                	c.j	29fc8 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x984>
      { return _M_dataplus._M_p; }
   29ff6:	842a                	c.mv	s0,a0
   29ff8:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   29ffa:	081c                	c.addi4spn	a5,sp,16
   29ffc:	00f50463          	beq	a0,a5,2a004 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x9c0>
   2a000:	fa0ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2a004:	8522                	c.mv	a0,s0
   2a006:	98bec0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002a00a <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>:
{
   2a00a:	7139                	c.addi16sp	sp,-64
   2a00c:	fc06                	c.sdsp	ra,56(sp)
   2a00e:	f822                	c.sdsp	s0,48(sp)
   2a010:	f426                	c.sdsp	s1,40(sp)
   2a012:	f04a                	c.sdsp	s2,32(sp)
   2a014:	842a                	c.mv	s0,a0
        switch (v) {
   2a016:	06e00793          	addi	a5,zero,110
   2a01a:	54b7ede3          	bltu	a5,a1,2ad74 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0xd6a>
   2a01e:	00259793          	slli	a5,a1,0x2
   2a022:	00007717          	auipc	a4,0x7
   2a026:	5aa70713          	addi	a4,a4,1450 # 315cc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x259c>
   2a02a:	97ba                	c.add	a5,a4
   2a02c:	439c                	c.lw	a5,0(a5)
   2a02e:	97ba                	c.add	a5,a4
   2a030:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a032:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a036:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a038:	4681                	c.li	a3,0
   2a03a:	00007617          	auipc	a2,0x7
   2a03e:	8a360613          	addi	a2,a2,-1885 # 308dd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18ad>
   2a042:	00007597          	auipc	a1,0x7
   2a046:	88e58593          	addi	a1,a1,-1906 # 308d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18a0>
   2a04a:	00010317          	auipc	t1,0x10
   2a04e:	2d633303          	ld	t1,726(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a052:	9302                	c.jalr	t1
}
   2a054:	8522                	c.mv	a0,s0
   2a056:	70e2                	c.ldsp	ra,56(sp)
   2a058:	7442                	c.ldsp	s0,48(sp)
   2a05a:	74a2                	c.ldsp	s1,40(sp)
   2a05c:	7902                	c.ldsp	s2,32(sp)
   2a05e:	6121                	c.addi16sp	sp,64
   2a060:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a062:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a066:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a068:	4681                	c.li	a3,0
   2a06a:	00007617          	auipc	a2,0x7
   2a06e:	88460613          	addi	a2,a2,-1916 # 308ee <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18be>
   2a072:	00007597          	auipc	a1,0x7
   2a076:	86e58593          	addi	a1,a1,-1938 # 308e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18b0>
   2a07a:	00010317          	auipc	t1,0x10
   2a07e:	2a633303          	ld	t1,678(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a082:	9302                	c.jalr	t1
   2a084:	bfc1                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a086:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a08a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a08c:	4681                	c.li	a3,0
   2a08e:	00007617          	auipc	a2,0x7
   2a092:	86c60613          	addi	a2,a2,-1940 # 308fa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18ca>
   2a096:	00007597          	auipc	a1,0x7
   2a09a:	85a58593          	addi	a1,a1,-1958 # 308f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18c0>
   2a09e:	00010317          	auipc	t1,0x10
   2a0a2:	28233303          	ld	t1,642(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a0a6:	9302                	c.jalr	t1
   2a0a8:	b775                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a0aa:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a0ae:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a0b0:	4681                	c.li	a3,0
   2a0b2:	00007617          	auipc	a2,0x7
   2a0b6:	85c60613          	addi	a2,a2,-1956 # 3090e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18de>
   2a0ba:	00007597          	auipc	a1,0x7
   2a0be:	84658593          	addi	a1,a1,-1978 # 30900 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18d0>
   2a0c2:	00010317          	auipc	t1,0x10
   2a0c6:	25e33303          	ld	t1,606(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a0ca:	9302                	c.jalr	t1
   2a0cc:	b761                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a0ce:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a0d2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a0d4:	4681                	c.li	a3,0
   2a0d6:	00007617          	auipc	a2,0x7
   2a0da:	84960613          	addi	a2,a2,-1975 # 3091f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18ef>
   2a0de:	00007597          	auipc	a1,0x7
   2a0e2:	83258593          	addi	a1,a1,-1998 # 30910 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18e0>
   2a0e6:	00010317          	auipc	t1,0x10
   2a0ea:	23a33303          	ld	t1,570(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a0ee:	9302                	c.jalr	t1
   2a0f0:	b795                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a0f2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a0f6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a0f8:	4681                	c.li	a3,0
   2a0fa:	00007617          	auipc	a2,0x7
   2a0fe:	83660613          	addi	a2,a2,-1994 # 30930 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1900>
   2a102:	00007597          	auipc	a1,0x7
   2a106:	81e58593          	addi	a1,a1,-2018 # 30920 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18f0>
   2a10a:	00010317          	auipc	t1,0x10
   2a10e:	21633303          	ld	t1,534(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a112:	9302                	c.jalr	t1
   2a114:	b781                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a116:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a11a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a11c:	4681                	c.li	a3,0
   2a11e:	00007617          	auipc	a2,0x7
   2a122:	82860613          	addi	a2,a2,-2008 # 30946 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1916>
   2a126:	00007597          	auipc	a1,0x7
   2a12a:	81258593          	addi	a1,a1,-2030 # 30938 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1908>
   2a12e:	00010317          	auipc	t1,0x10
   2a132:	1f233303          	ld	t1,498(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a136:	9302                	c.jalr	t1
   2a138:	bf31                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a13a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a13e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a140:	4681                	c.li	a3,0
   2a142:	00007617          	auipc	a2,0x7
   2a146:	81560613          	addi	a2,a2,-2027 # 30957 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1927>
   2a14a:	00006597          	auipc	a1,0x6
   2a14e:	7fe58593          	addi	a1,a1,2046 # 30948 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1918>
   2a152:	00010317          	auipc	t1,0x10
   2a156:	1ce33303          	ld	t1,462(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a15a:	9302                	c.jalr	t1
   2a15c:	bde5                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a15e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a162:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a164:	4681                	c.li	a3,0
   2a166:	00006617          	auipc	a2,0x6
   2a16a:	7fe60613          	addi	a2,a2,2046 # 30964 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1934>
   2a16e:	00006597          	auipc	a1,0x6
   2a172:	7ea58593          	addi	a1,a1,2026 # 30958 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1928>
   2a176:	00010317          	auipc	t1,0x10
   2a17a:	1aa33303          	ld	t1,426(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a17e:	9302                	c.jalr	t1
   2a180:	bdd1                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a182:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a186:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a188:	4681                	c.li	a3,0
   2a18a:	00006617          	auipc	a2,0x6
   2a18e:	7eb60613          	addi	a2,a2,2027 # 30975 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1945>
   2a192:	00006597          	auipc	a1,0x6
   2a196:	7d658593          	addi	a1,a1,2006 # 30968 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1938>
   2a19a:	00010317          	auipc	t1,0x10
   2a19e:	18633303          	ld	t1,390(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a1a2:	9302                	c.jalr	t1
   2a1a4:	bd45                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a1a6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a1aa:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a1ac:	4681                	c.li	a3,0
   2a1ae:	00006617          	auipc	a2,0x6
   2a1b2:	7d860613          	addi	a2,a2,2008 # 30986 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1956>
   2a1b6:	00006597          	auipc	a1,0x6
   2a1ba:	7c258593          	addi	a1,a1,1986 # 30978 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1948>
   2a1be:	00010317          	auipc	t1,0x10
   2a1c2:	16233303          	ld	t1,354(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a1c6:	9302                	c.jalr	t1
   2a1c8:	b571                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a1ca:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a1ce:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a1d0:	4681                	c.li	a3,0
   2a1d2:	00006617          	auipc	a2,0x6
   2a1d6:	7c160613          	addi	a2,a2,1985 # 30993 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1963>
   2a1da:	00006597          	auipc	a1,0x6
   2a1de:	7ae58593          	addi	a1,a1,1966 # 30988 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1958>
   2a1e2:	00010317          	auipc	t1,0x10
   2a1e6:	13e33303          	ld	t1,318(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a1ea:	9302                	c.jalr	t1
   2a1ec:	b5a5                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a1ee:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a1f2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a1f4:	4681                	c.li	a3,0
   2a1f6:	00006617          	auipc	a2,0x6
   2a1fa:	7b360613          	addi	a2,a2,1971 # 309a9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1979>
   2a1fe:	00006597          	auipc	a1,0x6
   2a202:	79a58593          	addi	a1,a1,1946 # 30998 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1968>
   2a206:	00010317          	auipc	t1,0x10
   2a20a:	11a33303          	ld	t1,282(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a20e:	9302                	c.jalr	t1
   2a210:	b591                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a212:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a216:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a218:	4681                	c.li	a3,0
   2a21a:	00006617          	auipc	a2,0x6
   2a21e:	7a660613          	addi	a2,a2,1958 # 309c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1990>
   2a222:	00006597          	auipc	a1,0x6
   2a226:	78e58593          	addi	a1,a1,1934 # 309b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1980>
   2a22a:	00010317          	auipc	t1,0x10
   2a22e:	0f633303          	ld	t1,246(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a232:	9302                	c.jalr	t1
   2a234:	b505                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a236:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a23a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a23c:	4681                	c.li	a3,0
   2a23e:	00006617          	auipc	a2,0x6
   2a242:	79660613          	addi	a2,a2,1942 # 309d4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19a4>
   2a246:	00006597          	auipc	a1,0x6
   2a24a:	78258593          	addi	a1,a1,1922 # 309c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1998>
   2a24e:	00010317          	auipc	t1,0x10
   2a252:	0d233303          	ld	t1,210(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a256:	9302                	c.jalr	t1
   2a258:	bbf5                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a25a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a25e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a260:	4681                	c.li	a3,0
   2a262:	00006617          	auipc	a2,0x6
   2a266:	78960613          	addi	a2,a2,1929 # 309eb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19bb>
   2a26a:	00006597          	auipc	a1,0x6
   2a26e:	76e58593          	addi	a1,a1,1902 # 309d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19a8>
   2a272:	00010317          	auipc	t1,0x10
   2a276:	0ae33303          	ld	t1,174(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a27a:	9302                	c.jalr	t1
   2a27c:	bbe1                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a27e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a282:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a284:	4681                	c.li	a3,0
   2a286:	00006617          	auipc	a2,0x6
   2a28a:	78060613          	addi	a2,a2,1920 # 30a06 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19d6>
   2a28e:	00006597          	auipc	a1,0x6
   2a292:	76258593          	addi	a1,a1,1890 # 309f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19c0>
   2a296:	00010317          	auipc	t1,0x10
   2a29a:	08a33303          	ld	t1,138(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a29e:	9302                	c.jalr	t1
   2a2a0:	bb55                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a2a2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a2a6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a2a8:	4681                	c.li	a3,0
   2a2aa:	00006617          	auipc	a2,0x6
   2a2ae:	76c60613          	addi	a2,a2,1900 # 30a16 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19e6>
   2a2b2:	00006597          	auipc	a1,0x6
   2a2b6:	75658593          	addi	a1,a1,1878 # 30a08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19d8>
   2a2ba:	00010317          	auipc	t1,0x10
   2a2be:	06633303          	ld	t1,102(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a2c2:	9302                	c.jalr	t1
   2a2c4:	bb41                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a2c6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a2ca:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a2cc:	4681                	c.li	a3,0
   2a2ce:	00006617          	auipc	a2,0x6
   2a2d2:	75b60613          	addi	a2,a2,1883 # 30a29 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19f9>
   2a2d6:	00006597          	auipc	a1,0x6
   2a2da:	74258593          	addi	a1,a1,1858 # 30a18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19e8>
   2a2de:	00010317          	auipc	t1,0x10
   2a2e2:	04233303          	ld	t1,66(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a2e6:	9302                	c.jalr	t1
   2a2e8:	b3b5                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a2ea:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a2ee:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a2f0:	4681                	c.li	a3,0
   2a2f2:	00006617          	auipc	a2,0x6
   2a2f6:	75360613          	addi	a2,a2,1875 # 30a45 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a15>
   2a2fa:	00006597          	auipc	a1,0x6
   2a2fe:	73658593          	addi	a1,a1,1846 # 30a30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a00>
   2a302:	00010317          	auipc	t1,0x10
   2a306:	01e33303          	ld	t1,30(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a30a:	9302                	c.jalr	t1
   2a30c:	b3a1                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a30e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a312:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a314:	4681                	c.li	a3,0
   2a316:	00006617          	auipc	a2,0x6
   2a31a:	74560613          	addi	a2,a2,1861 # 30a5b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a2b>
   2a31e:	00006597          	auipc	a1,0x6
   2a322:	72a58593          	addi	a1,a1,1834 # 30a48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a18>
   2a326:	00010317          	auipc	t1,0x10
   2a32a:	ffa33303          	ld	t1,-6(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a32e:	9302                	c.jalr	t1
   2a330:	b315                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a332:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a336:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a338:	4681                	c.li	a3,0
   2a33a:	00006617          	auipc	a2,0x6
   2a33e:	73260613          	addi	a2,a2,1842 # 30a6c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a3c>
   2a342:	00006597          	auipc	a1,0x6
   2a346:	71e58593          	addi	a1,a1,1822 # 30a60 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a30>
   2a34a:	00010317          	auipc	t1,0x10
   2a34e:	fd633303          	ld	t1,-42(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a352:	9302                	c.jalr	t1
   2a354:	b301                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a356:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a35a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a35c:	4681                	c.li	a3,0
   2a35e:	00006617          	auipc	a2,0x6
   2a362:	72360613          	addi	a2,a2,1827 # 30a81 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a51>
   2a366:	00006597          	auipc	a1,0x6
   2a36a:	70a58593          	addi	a1,a1,1802 # 30a70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a40>
   2a36e:	00010317          	auipc	t1,0x10
   2a372:	fb233303          	ld	t1,-78(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a376:	9302                	c.jalr	t1
   2a378:	b9f1                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a37a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a37e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a380:	4681                	c.li	a3,0
   2a382:	00006617          	auipc	a2,0x6
   2a386:	71760613          	addi	a2,a2,1815 # 30a99 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a69>
   2a38a:	00006597          	auipc	a1,0x6
   2a38e:	6fe58593          	addi	a1,a1,1790 # 30a88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a58>
   2a392:	00010317          	auipc	t1,0x10
   2a396:	f8e33303          	ld	t1,-114(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a39a:	9302                	c.jalr	t1
   2a39c:	b965                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a39e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a3a2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a3a4:	4681                	c.li	a3,0
   2a3a6:	00006617          	auipc	a2,0x6
   2a3aa:	70860613          	addi	a2,a2,1800 # 30aae <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a7e>
   2a3ae:	00006597          	auipc	a1,0x6
   2a3b2:	6f258593          	addi	a1,a1,1778 # 30aa0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a70>
   2a3b6:	00010317          	auipc	t1,0x10
   2a3ba:	f6a33303          	ld	t1,-150(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a3be:	9302                	c.jalr	t1
   2a3c0:	b951                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a3c2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a3c6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a3c8:	4681                	c.li	a3,0
   2a3ca:	00006617          	auipc	a2,0x6
   2a3ce:	6f660613          	addi	a2,a2,1782 # 30ac0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a90>
   2a3d2:	00006597          	auipc	a1,0x6
   2a3d6:	6de58593          	addi	a1,a1,1758 # 30ab0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a80>
   2a3da:	00010317          	auipc	t1,0x10
   2a3de:	f4633303          	ld	t1,-186(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a3e2:	9302                	c.jalr	t1
   2a3e4:	b985                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a3e6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a3ea:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a3ec:	4681                	c.li	a3,0
   2a3ee:	00006617          	auipc	a2,0x6
   2a3f2:	6eb60613          	addi	a2,a2,1771 # 30ad9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1aa9>
   2a3f6:	00006597          	auipc	a1,0x6
   2a3fa:	6d258593          	addi	a1,a1,1746 # 30ac8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a98>
   2a3fe:	00010317          	auipc	t1,0x10
   2a402:	f2233303          	ld	t1,-222(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a406:	9302                	c.jalr	t1
   2a408:	b1b1                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a40a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a40e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a410:	4681                	c.li	a3,0
   2a412:	00006617          	auipc	a2,0x6
   2a416:	6df60613          	addi	a2,a2,1759 # 30af1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ac1>
   2a41a:	00006597          	auipc	a1,0x6
   2a41e:	6c658593          	addi	a1,a1,1734 # 30ae0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ab0>
   2a422:	00010317          	auipc	t1,0x10
   2a426:	efe33303          	ld	t1,-258(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a42a:	9302                	c.jalr	t1
   2a42c:	b125                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a42e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a432:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a434:	4681                	c.li	a3,0
   2a436:	00006617          	auipc	a2,0x6
   2a43a:	6d260613          	addi	a2,a2,1746 # 30b08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ad8>
   2a43e:	00006597          	auipc	a1,0x6
   2a442:	6ba58593          	addi	a1,a1,1722 # 30af8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ac8>
   2a446:	00010317          	auipc	t1,0x10
   2a44a:	eda33303          	ld	t1,-294(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a44e:	9302                	c.jalr	t1
   2a450:	b111                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a452:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a456:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a458:	4681                	c.li	a3,0
   2a45a:	00006617          	auipc	a2,0x6
   2a45e:	6c760613          	addi	a2,a2,1735 # 30b21 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1af1>
   2a462:	00006597          	auipc	a1,0x6
   2a466:	6ae58593          	addi	a1,a1,1710 # 30b10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ae0>
   2a46a:	00010317          	auipc	t1,0x10
   2a46e:	eb633303          	ld	t1,-330(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a472:	9302                	c.jalr	t1
   2a474:	b6c5                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a476:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a47a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a47c:	4681                	c.li	a3,0
   2a47e:	00006617          	auipc	a2,0x6
   2a482:	6bf60613          	addi	a2,a2,1727 # 30b3d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b0d>
   2a486:	00006597          	auipc	a1,0x6
   2a48a:	6a258593          	addi	a1,a1,1698 # 30b28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1af8>
   2a48e:	00010317          	auipc	t1,0x10
   2a492:	e9233303          	ld	t1,-366(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a496:	9302                	c.jalr	t1
   2a498:	be75                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a49a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a49e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a4a0:	4681                	c.li	a3,0
   2a4a2:	00006617          	auipc	a2,0x6
   2a4a6:	6b160613          	addi	a2,a2,1713 # 30b53 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b23>
   2a4aa:	00006597          	auipc	a1,0x6
   2a4ae:	69658593          	addi	a1,a1,1686 # 30b40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b10>
   2a4b2:	00010317          	auipc	t1,0x10
   2a4b6:	e6e33303          	ld	t1,-402(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a4ba:	9302                	c.jalr	t1
   2a4bc:	be61                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a4be:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a4c2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a4c4:	4681                	c.li	a3,0
   2a4c6:	00006617          	auipc	a2,0x6
   2a4ca:	6a560613          	addi	a2,a2,1701 # 30b6b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b3b>
   2a4ce:	00006597          	auipc	a1,0x6
   2a4d2:	68a58593          	addi	a1,a1,1674 # 30b58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b28>
   2a4d6:	00010317          	auipc	t1,0x10
   2a4da:	e4a33303          	ld	t1,-438(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a4de:	9302                	c.jalr	t1
   2a4e0:	be95                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a4e2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a4e6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a4e8:	4681                	c.li	a3,0
   2a4ea:	00006617          	auipc	a2,0x6
   2a4ee:	69660613          	addi	a2,a2,1686 # 30b80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b50>
   2a4f2:	00006597          	auipc	a1,0x6
   2a4f6:	67e58593          	addi	a1,a1,1662 # 30b70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b40>
   2a4fa:	00010317          	auipc	t1,0x10
   2a4fe:	e2633303          	ld	t1,-474(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a502:	9302                	c.jalr	t1
   2a504:	be81                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a506:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a50a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a50c:	4681                	c.li	a3,0
   2a50e:	00006617          	auipc	a2,0x6
   2a512:	68a60613          	addi	a2,a2,1674 # 30b98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b68>
   2a516:	00006597          	auipc	a1,0x6
   2a51a:	67258593          	addi	a1,a1,1650 # 30b88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b58>
   2a51e:	00010317          	auipc	t1,0x10
   2a522:	e0233303          	ld	t1,-510(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a526:	9302                	c.jalr	t1
   2a528:	b635                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a52a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a52e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a530:	4681                	c.li	a3,0
   2a532:	00006617          	auipc	a2,0x6
   2a536:	68660613          	addi	a2,a2,1670 # 30bb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b88>
   2a53a:	00006597          	auipc	a1,0x6
   2a53e:	66658593          	addi	a1,a1,1638 # 30ba0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b70>
   2a542:	00010317          	auipc	t1,0x10
   2a546:	dde33303          	ld	t1,-546(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a54a:	9302                	c.jalr	t1
   2a54c:	b621                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a54e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a552:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a554:	4681                	c.li	a3,0
   2a556:	00006617          	auipc	a2,0x6
   2a55a:	67560613          	addi	a2,a2,1653 # 30bcb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b9b>
   2a55e:	00006597          	auipc	a1,0x6
   2a562:	66258593          	addi	a1,a1,1634 # 30bc0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b90>
   2a566:	00010317          	auipc	t1,0x10
   2a56a:	dba33303          	ld	t1,-582(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a56e:	9302                	c.jalr	t1
   2a570:	b4d5                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a572:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a576:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a578:	4681                	c.li	a3,0
   2a57a:	00006617          	auipc	a2,0x6
   2a57e:	67060613          	addi	a2,a2,1648 # 30bea <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bba>
   2a582:	00006597          	auipc	a1,0x6
   2a586:	64e58593          	addi	a1,a1,1614 # 30bd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ba0>
   2a58a:	00010317          	auipc	t1,0x10
   2a58e:	d9633303          	ld	t1,-618(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a592:	9302                	c.jalr	t1
   2a594:	b4c1                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a596:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a59a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a59c:	4681                	c.li	a3,0
   2a59e:	00006617          	auipc	a2,0x6
   2a5a2:	66360613          	addi	a2,a2,1635 # 30c01 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bd1>
   2a5a6:	00006597          	auipc	a1,0x6
   2a5aa:	64a58593          	addi	a1,a1,1610 # 30bf0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bc0>
   2a5ae:	00010317          	auipc	t1,0x10
   2a5b2:	d7233303          	ld	t1,-654(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a5b6:	9302                	c.jalr	t1
   2a5b8:	bc71                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a5ba:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a5be:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a5c0:	4681                	c.li	a3,0
   2a5c2:	00006617          	auipc	a2,0x6
   2a5c6:	65560613          	addi	a2,a2,1621 # 30c17 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1be7>
   2a5ca:	00006597          	auipc	a1,0x6
   2a5ce:	63e58593          	addi	a1,a1,1598 # 30c08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bd8>
   2a5d2:	00010317          	auipc	t1,0x10
   2a5d6:	d4e33303          	ld	t1,-690(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a5da:	9302                	c.jalr	t1
   2a5dc:	bca5                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a5de:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a5e2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a5e4:	4681                	c.li	a3,0
   2a5e6:	00006617          	auipc	a2,0x6
   2a5ea:	64160613          	addi	a2,a2,1601 # 30c27 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bf7>
   2a5ee:	00006597          	auipc	a1,0x6
   2a5f2:	62a58593          	addi	a1,a1,1578 # 30c18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1be8>
   2a5f6:	00010317          	auipc	t1,0x10
   2a5fa:	d2a33303          	ld	t1,-726(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a5fe:	9302                	c.jalr	t1
   2a600:	bc91                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a602:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a606:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a608:	4681                	c.li	a3,0
   2a60a:	00006617          	auipc	a2,0x6
   2a60e:	62f60613          	addi	a2,a2,1583 # 30c39 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c09>
   2a612:	00006597          	auipc	a1,0x6
   2a616:	61658593          	addi	a1,a1,1558 # 30c28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bf8>
   2a61a:	00010317          	auipc	t1,0x10
   2a61e:	d0633303          	ld	t1,-762(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a622:	9302                	c.jalr	t1
   2a624:	bc05                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a626:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a62a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a62c:	4681                	c.li	a3,0
   2a62e:	00006617          	auipc	a2,0x6
   2a632:	62260613          	addi	a2,a2,1570 # 30c50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c20>
   2a636:	00006597          	auipc	a1,0x6
   2a63a:	60a58593          	addi	a1,a1,1546 # 30c40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c10>
   2a63e:	00010317          	auipc	t1,0x10
   2a642:	ce233303          	ld	t1,-798(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a646:	9302                	c.jalr	t1
   2a648:	b431                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a64a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a64e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a650:	4681                	c.li	a3,0
   2a652:	00006617          	auipc	a2,0x6
   2a656:	61460613          	addi	a2,a2,1556 # 30c66 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c36>
   2a65a:	00006597          	auipc	a1,0x6
   2a65e:	5fe58593          	addi	a1,a1,1534 # 30c58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c28>
   2a662:	00010317          	auipc	t1,0x10
   2a666:	cbe33303          	ld	t1,-834(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a66a:	9302                	c.jalr	t1
   2a66c:	b2e5                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a66e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a672:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a674:	4681                	c.li	a3,0
   2a676:	00006617          	auipc	a2,0x6
   2a67a:	60060613          	addi	a2,a2,1536 # 30c76 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c46>
   2a67e:	00006597          	auipc	a1,0x6
   2a682:	5ea58593          	addi	a1,a1,1514 # 30c68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c38>
   2a686:	00010317          	auipc	t1,0x10
   2a68a:	c9a33303          	ld	t1,-870(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a68e:	9302                	c.jalr	t1
   2a690:	b2d1                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a692:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a696:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a698:	4681                	c.li	a3,0
   2a69a:	00006617          	auipc	a2,0x6
   2a69e:	5ee60613          	addi	a2,a2,1518 # 30c88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c58>
   2a6a2:	00006597          	auipc	a1,0x6
   2a6a6:	5d658593          	addi	a1,a1,1494 # 30c78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c48>
   2a6aa:	00010317          	auipc	t1,0x10
   2a6ae:	c7633303          	ld	t1,-906(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a6b2:	9302                	c.jalr	t1
   2a6b4:	b245                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a6b6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a6ba:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a6bc:	4681                	c.li	a3,0
   2a6be:	00006617          	auipc	a2,0x6
   2a6c2:	5de60613          	addi	a2,a2,1502 # 30c9c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c6c>
   2a6c6:	00006597          	auipc	a1,0x6
   2a6ca:	5ca58593          	addi	a1,a1,1482 # 30c90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c60>
   2a6ce:	00010317          	auipc	t1,0x10
   2a6d2:	c5233303          	ld	t1,-942(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a6d6:	9302                	c.jalr	t1
   2a6d8:	bab5                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a6da:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a6de:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a6e0:	4681                	c.li	a3,0
   2a6e2:	00006617          	auipc	a2,0x6
   2a6e6:	5d360613          	addi	a2,a2,1491 # 30cb5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c85>
   2a6ea:	00006597          	auipc	a1,0x6
   2a6ee:	5b658593          	addi	a1,a1,1462 # 30ca0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c70>
   2a6f2:	00010317          	auipc	t1,0x10
   2a6f6:	c2e33303          	ld	t1,-978(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a6fa:	9302                	c.jalr	t1
   2a6fc:	baa1                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a6fe:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a702:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a704:	4681                	c.li	a3,0
   2a706:	00006617          	auipc	a2,0x6
   2a70a:	5c260613          	addi	a2,a2,1474 # 30cc8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c98>
   2a70e:	00006597          	auipc	a1,0x6
   2a712:	5aa58593          	addi	a1,a1,1450 # 30cb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c88>
   2a716:	00010317          	auipc	t1,0x10
   2a71a:	c0a33303          	ld	t1,-1014(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a71e:	9302                	c.jalr	t1
   2a720:	ba15                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a722:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a726:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a728:	4681                	c.li	a3,0
   2a72a:	00006617          	auipc	a2,0x6
   2a72e:	5b960613          	addi	a2,a2,1465 # 30ce3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cb3>
   2a732:	00006597          	auipc	a1,0x6
   2a736:	59e58593          	addi	a1,a1,1438 # 30cd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ca0>
   2a73a:	00010317          	auipc	t1,0x10
   2a73e:	be633303          	ld	t1,-1050(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a742:	9302                	c.jalr	t1
   2a744:	ba01                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a746:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a74a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a74c:	4681                	c.li	a3,0
   2a74e:	00006617          	auipc	a2,0x6
   2a752:	5a860613          	addi	a2,a2,1448 # 30cf6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cc6>
   2a756:	00006597          	auipc	a1,0x6
   2a75a:	59258593          	addi	a1,a1,1426 # 30ce8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cb8>
   2a75e:	00010317          	auipc	t1,0x10
   2a762:	bc233303          	ld	t1,-1086(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a766:	9302                	c.jalr	t1
   2a768:	b0f5                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a76a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a76e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a770:	4681                	c.li	a3,0
   2a772:	00006617          	auipc	a2,0x6
   2a776:	59360613          	addi	a2,a2,1427 # 30d05 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cd5>
   2a77a:	00006597          	auipc	a1,0x6
   2a77e:	57e58593          	addi	a1,a1,1406 # 30cf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cc8>
   2a782:	00010317          	auipc	t1,0x10
   2a786:	b9e33303          	ld	t1,-1122(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a78a:	9302                	c.jalr	t1
   2a78c:	b0e1                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a78e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a792:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a794:	4681                	c.li	a3,0
   2a796:	00006617          	auipc	a2,0x6
   2a79a:	58560613          	addi	a2,a2,1413 # 30d1b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ceb>
   2a79e:	00006597          	auipc	a1,0x6
   2a7a2:	56a58593          	addi	a1,a1,1386 # 30d08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cd8>
   2a7a6:	00010317          	auipc	t1,0x10
   2a7aa:	b7a33303          	ld	t1,-1158(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a7ae:	9302                	c.jalr	t1
   2a7b0:	b055                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a7b2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a7b6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a7b8:	4681                	c.li	a3,0
   2a7ba:	00006617          	auipc	a2,0x6
   2a7be:	57760613          	addi	a2,a2,1399 # 30d31 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d01>
   2a7c2:	00006597          	auipc	a1,0x6
   2a7c6:	55e58593          	addi	a1,a1,1374 # 30d20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cf0>
   2a7ca:	00010317          	auipc	t1,0x10
   2a7ce:	b5633303          	ld	t1,-1194(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a7d2:	9302                	c.jalr	t1
   2a7d4:	b041                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a7d6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a7da:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a7dc:	4681                	c.li	a3,0
   2a7de:	00006617          	auipc	a2,0x6
   2a7e2:	56460613          	addi	a2,a2,1380 # 30d42 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d12>
   2a7e6:	00006597          	auipc	a1,0x6
   2a7ea:	55258593          	addi	a1,a1,1362 # 30d38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d08>
   2a7ee:	00010317          	auipc	t1,0x10
   2a7f2:	b3233303          	ld	t1,-1230(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a7f6:	9302                	c.jalr	t1
   2a7f8:	b8b1                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a7fa:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a7fe:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a800:	4681                	c.li	a3,0
   2a802:	00006617          	auipc	a2,0x6
   2a806:	55860613          	addi	a2,a2,1368 # 30d5a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d2a>
   2a80a:	00006597          	auipc	a1,0x6
   2a80e:	53e58593          	addi	a1,a1,1342 # 30d48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d18>
   2a812:	00010317          	auipc	t1,0x10
   2a816:	b0e33303          	ld	t1,-1266(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a81a:	9302                	c.jalr	t1
   2a81c:	b825                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a81e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a822:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a824:	4681                	c.li	a3,0
   2a826:	00006617          	auipc	a2,0x6
   2a82a:	55260613          	addi	a2,a2,1362 # 30d78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d48>
   2a82e:	00006597          	auipc	a1,0x6
   2a832:	53258593          	addi	a1,a1,1330 # 30d60 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d30>
   2a836:	00010317          	auipc	t1,0x10
   2a83a:	aea33303          	ld	t1,-1302(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a83e:	9302                	c.jalr	t1
   2a840:	b811                	c.j	2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a842:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a846:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a848:	4681                	c.li	a3,0
   2a84a:	00006617          	auipc	a2,0x6
   2a84e:	54660613          	addi	a2,a2,1350 # 30d90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d60>
   2a852:	00006597          	auipc	a1,0x6
   2a856:	52e58593          	addi	a1,a1,1326 # 30d80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d50>
   2a85a:	00010317          	auipc	t1,0x10
   2a85e:	ac633303          	ld	t1,-1338(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a862:	9302                	c.jalr	t1
   2a864:	ff0ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a868:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a86c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a86e:	4681                	c.li	a3,0
   2a870:	00006617          	auipc	a2,0x6
   2a874:	54260613          	addi	a2,a2,1346 # 30db2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d82>
   2a878:	00006597          	auipc	a1,0x6
   2a87c:	52058593          	addi	a1,a1,1312 # 30d98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d68>
   2a880:	00010317          	auipc	t1,0x10
   2a884:	aa033303          	ld	t1,-1376(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a888:	9302                	c.jalr	t1
   2a88a:	fcaff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a88e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a892:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a894:	4681                	c.li	a3,0
   2a896:	00006617          	auipc	a2,0x6
   2a89a:	53160613          	addi	a2,a2,1329 # 30dc7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d97>
   2a89e:	00006597          	auipc	a1,0x6
   2a8a2:	51a58593          	addi	a1,a1,1306 # 30db8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d88>
   2a8a6:	00010317          	auipc	t1,0x10
   2a8aa:	a7a33303          	ld	t1,-1414(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a8ae:	9302                	c.jalr	t1
   2a8b0:	fa4ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a8b4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a8b8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a8ba:	4681                	c.li	a3,0
   2a8bc:	00006617          	auipc	a2,0x6
   2a8c0:	51c60613          	addi	a2,a2,1308 # 30dd8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1da8>
   2a8c4:	00006597          	auipc	a1,0x6
   2a8c8:	50458593          	addi	a1,a1,1284 # 30dc8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d98>
   2a8cc:	00010317          	auipc	t1,0x10
   2a8d0:	a5433303          	ld	t1,-1452(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a8d4:	9302                	c.jalr	t1
   2a8d6:	f7eff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a8da:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a8de:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a8e0:	4681                	c.li	a3,0
   2a8e2:	00006617          	auipc	a2,0x6
   2a8e6:	51160613          	addi	a2,a2,1297 # 30df3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dc3>
   2a8ea:	00006597          	auipc	a1,0x6
   2a8ee:	4f658593          	addi	a1,a1,1270 # 30de0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1db0>
   2a8f2:	00010317          	auipc	t1,0x10
   2a8f6:	a2e33303          	ld	t1,-1490(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a8fa:	9302                	c.jalr	t1
   2a8fc:	f58ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a900:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a904:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a906:	4681                	c.li	a3,0
   2a908:	00006617          	auipc	a2,0x6
   2a90c:	50160613          	addi	a2,a2,1281 # 30e09 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dd9>
   2a910:	00006597          	auipc	a1,0x6
   2a914:	4e858593          	addi	a1,a1,1256 # 30df8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dc8>
   2a918:	00010317          	auipc	t1,0x10
   2a91c:	a0833303          	ld	t1,-1528(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a920:	9302                	c.jalr	t1
   2a922:	f32ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a926:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a92a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a92c:	4681                	c.li	a3,0
   2a92e:	00006617          	auipc	a2,0x6
   2a932:	4f060613          	addi	a2,a2,1264 # 30e1e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dee>
   2a936:	00006597          	auipc	a1,0x6
   2a93a:	4da58593          	addi	a1,a1,1242 # 30e10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1de0>
   2a93e:	00010317          	auipc	t1,0x10
   2a942:	9e233303          	ld	t1,-1566(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a946:	9302                	c.jalr	t1
   2a948:	f0cff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a94c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a950:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a952:	4681                	c.li	a3,0
   2a954:	00006617          	auipc	a2,0x6
   2a958:	4da60613          	addi	a2,a2,1242 # 30e2e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dfe>
   2a95c:	00006597          	auipc	a1,0x6
   2a960:	4c458593          	addi	a1,a1,1220 # 30e20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1df0>
   2a964:	00010317          	auipc	t1,0x10
   2a968:	9bc33303          	ld	t1,-1604(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a96c:	9302                	c.jalr	t1
   2a96e:	ee6ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a972:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a976:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a978:	4681                	c.li	a3,0
   2a97a:	00006617          	auipc	a2,0x6
   2a97e:	4c560613          	addi	a2,a2,1221 # 30e3f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e0f>
   2a982:	00006597          	auipc	a1,0x6
   2a986:	4ae58593          	addi	a1,a1,1198 # 30e30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e00>
   2a98a:	00010317          	auipc	t1,0x10
   2a98e:	99633303          	ld	t1,-1642(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a992:	9302                	c.jalr	t1
   2a994:	ec0ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a998:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a99c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a99e:	4681                	c.li	a3,0
   2a9a0:	00006617          	auipc	a2,0x6
   2a9a4:	4ac60613          	addi	a2,a2,1196 # 30e4c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e1c>
   2a9a8:	00006597          	auipc	a1,0x6
   2a9ac:	49858593          	addi	a1,a1,1176 # 30e40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e10>
   2a9b0:	00010317          	auipc	t1,0x10
   2a9b4:	97033303          	ld	t1,-1680(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a9b8:	9302                	c.jalr	t1
   2a9ba:	e9aff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a9be:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a9c2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a9c4:	4681                	c.li	a3,0
   2a9c6:	00006617          	auipc	a2,0x6
   2a9ca:	49a60613          	addi	a2,a2,1178 # 30e60 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e30>
   2a9ce:	00006597          	auipc	a1,0x6
   2a9d2:	48258593          	addi	a1,a1,1154 # 30e50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e20>
   2a9d6:	00010317          	auipc	t1,0x10
   2a9da:	94a33303          	ld	t1,-1718(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2a9de:	9302                	c.jalr	t1
   2a9e0:	e74ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a9e4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a9e8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a9ea:	4681                	c.li	a3,0
   2a9ec:	00006617          	auipc	a2,0x6
   2a9f0:	48d60613          	addi	a2,a2,1165 # 30e79 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e49>
   2a9f4:	00006597          	auipc	a1,0x6
   2a9f8:	47458593          	addi	a1,a1,1140 # 30e68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e38>
   2a9fc:	00010317          	auipc	t1,0x10
   2aa00:	92433303          	ld	t1,-1756(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2aa04:	9302                	c.jalr	t1
   2aa06:	e4eff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2aa0a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2aa0e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2aa10:	4681                	c.li	a3,0
   2aa12:	00006617          	auipc	a2,0x6
   2aa16:	47d60613          	addi	a2,a2,1149 # 30e8f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e5f>
   2aa1a:	00006597          	auipc	a1,0x6
   2aa1e:	46658593          	addi	a1,a1,1126 # 30e80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e50>
   2aa22:	00010317          	auipc	t1,0x10
   2aa26:	8fe33303          	ld	t1,-1794(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2aa2a:	9302                	c.jalr	t1
   2aa2c:	e28ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2aa30:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2aa34:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2aa36:	4681                	c.li	a3,0
   2aa38:	00006617          	auipc	a2,0x6
   2aa3c:	46760613          	addi	a2,a2,1127 # 30e9f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e6f>
   2aa40:	00006597          	auipc	a1,0x6
   2aa44:	45058593          	addi	a1,a1,1104 # 30e90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e60>
   2aa48:	00010317          	auipc	t1,0x10
   2aa4c:	8d833303          	ld	t1,-1832(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2aa50:	9302                	c.jalr	t1
   2aa52:	e02ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2aa56:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2aa5a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2aa5c:	4681                	c.li	a3,0
   2aa5e:	00006617          	auipc	a2,0x6
   2aa62:	45360613          	addi	a2,a2,1107 # 30eb1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e81>
   2aa66:	00006597          	auipc	a1,0x6
   2aa6a:	43a58593          	addi	a1,a1,1082 # 30ea0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e70>
   2aa6e:	00010317          	auipc	t1,0x10
   2aa72:	8b233303          	ld	t1,-1870(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2aa76:	9302                	c.jalr	t1
   2aa78:	ddcff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2aa7c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2aa80:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2aa82:	4681                	c.li	a3,0
   2aa84:	00006617          	auipc	a2,0x6
   2aa88:	44660613          	addi	a2,a2,1094 # 30eca <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e9a>
   2aa8c:	00006597          	auipc	a1,0x6
   2aa90:	42c58593          	addi	a1,a1,1068 # 30eb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e88>
   2aa94:	00010317          	auipc	t1,0x10
   2aa98:	88c33303          	ld	t1,-1908(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2aa9c:	9302                	c.jalr	t1
   2aa9e:	db6ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2aaa2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2aaa6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2aaa8:	4681                	c.li	a3,0
   2aaaa:	00006617          	auipc	a2,0x6
   2aaae:	43960613          	addi	a2,a2,1081 # 30ee3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1eb3>
   2aab2:	00006597          	auipc	a1,0x6
   2aab6:	41e58593          	addi	a1,a1,1054 # 30ed0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ea0>
   2aaba:	00010317          	auipc	t1,0x10
   2aabe:	86633303          	ld	t1,-1946(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2aac2:	9302                	c.jalr	t1
   2aac4:	d90ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2aac8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2aacc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2aace:	4681                	c.li	a3,0
   2aad0:	00006617          	auipc	a2,0x6
   2aad4:	42360613          	addi	a2,a2,1059 # 30ef3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ec3>
   2aad8:	00006597          	auipc	a1,0x6
   2aadc:	41058593          	addi	a1,a1,1040 # 30ee8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1eb8>
   2aae0:	00010317          	auipc	t1,0x10
   2aae4:	84033303          	ld	t1,-1984(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2aae8:	9302                	c.jalr	t1
   2aaea:	d6aff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2aaee:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2aaf2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2aaf4:	4681                	c.li	a3,0
   2aaf6:	00006617          	auipc	a2,0x6
   2aafa:	41460613          	addi	a2,a2,1044 # 30f0a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1eda>
   2aafe:	00006597          	auipc	a1,0x6
   2ab02:	3fa58593          	addi	a1,a1,1018 # 30ef8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ec8>
   2ab06:	00010317          	auipc	t1,0x10
   2ab0a:	81a33303          	ld	t1,-2022(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2ab0e:	9302                	c.jalr	t1
   2ab10:	d44ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ab14:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ab18:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ab1a:	4681                	c.li	a3,0
   2ab1c:	00006617          	auipc	a2,0x6
   2ab20:	40560613          	addi	a2,a2,1029 # 30f21 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ef1>
   2ab24:	00006597          	auipc	a1,0x6
   2ab28:	3ec58593          	addi	a1,a1,1004 # 30f10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ee0>
   2ab2c:	0000f317          	auipc	t1,0xf
   2ab30:	7f433303          	ld	t1,2036(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2ab34:	9302                	c.jalr	t1
   2ab36:	d1eff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ab3a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ab3e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ab40:	4681                	c.li	a3,0
   2ab42:	00006617          	auipc	a2,0x6
   2ab46:	3fa60613          	addi	a2,a2,1018 # 30f3c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f0c>
   2ab4a:	00006597          	auipc	a1,0x6
   2ab4e:	3de58593          	addi	a1,a1,990 # 30f28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ef8>
   2ab52:	0000f317          	auipc	t1,0xf
   2ab56:	7ce33303          	ld	t1,1998(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2ab5a:	9302                	c.jalr	t1
   2ab5c:	cf8ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ab60:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ab64:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ab66:	4681                	c.li	a3,0
   2ab68:	00006617          	auipc	a2,0x6
   2ab6c:	3e560613          	addi	a2,a2,997 # 30f4d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f1d>
   2ab70:	00006597          	auipc	a1,0x6
   2ab74:	3d058593          	addi	a1,a1,976 # 30f40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f10>
   2ab78:	0000f317          	auipc	t1,0xf
   2ab7c:	7a833303          	ld	t1,1960(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2ab80:	9302                	c.jalr	t1
   2ab82:	cd2ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ab86:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ab8a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ab8c:	4681                	c.li	a3,0
   2ab8e:	00006617          	auipc	a2,0x6
   2ab92:	3d660613          	addi	a2,a2,982 # 30f64 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f34>
   2ab96:	00006597          	auipc	a1,0x6
   2ab9a:	3ba58593          	addi	a1,a1,954 # 30f50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f20>
   2ab9e:	0000f317          	auipc	t1,0xf
   2aba2:	78233303          	ld	t1,1922(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2aba6:	9302                	c.jalr	t1
   2aba8:	cacff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2abac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2abb0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2abb2:	4681                	c.li	a3,0
   2abb4:	00006617          	auipc	a2,0x6
   2abb8:	3c260613          	addi	a2,a2,962 # 30f76 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f46>
   2abbc:	00006597          	auipc	a1,0x6
   2abc0:	3ac58593          	addi	a1,a1,940 # 30f68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f38>
   2abc4:	0000f317          	auipc	t1,0xf
   2abc8:	75c33303          	ld	t1,1884(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2abcc:	9302                	c.jalr	t1
   2abce:	c86ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2abd2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2abd6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2abd8:	4681                	c.li	a3,0
   2abda:	00006617          	auipc	a2,0x6
   2abde:	3b260613          	addi	a2,a2,946 # 30f8c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f5c>
   2abe2:	00006597          	auipc	a1,0x6
   2abe6:	39658593          	addi	a1,a1,918 # 30f78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f48>
   2abea:	0000f317          	auipc	t1,0xf
   2abee:	73633303          	ld	t1,1846(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2abf2:	9302                	c.jalr	t1
   2abf4:	c60ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2abf8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2abfc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2abfe:	4681                	c.li	a3,0
   2ac00:	00006617          	auipc	a2,0x6
   2ac04:	39f60613          	addi	a2,a2,927 # 30f9f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f6f>
   2ac08:	00006597          	auipc	a1,0x6
   2ac0c:	38858593          	addi	a1,a1,904 # 30f90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f60>
   2ac10:	0000f317          	auipc	t1,0xf
   2ac14:	71033303          	ld	t1,1808(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2ac18:	9302                	c.jalr	t1
   2ac1a:	c3aff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ac1e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ac22:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ac24:	4681                	c.li	a3,0
   2ac26:	00006617          	auipc	a2,0x6
   2ac2a:	38960613          	addi	a2,a2,905 # 30faf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f7f>
   2ac2e:	00006597          	auipc	a1,0x6
   2ac32:	37258593          	addi	a1,a1,882 # 30fa0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f70>
   2ac36:	0000f317          	auipc	t1,0xf
   2ac3a:	6ea33303          	ld	t1,1770(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2ac3e:	9302                	c.jalr	t1
   2ac40:	c14ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ac44:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ac48:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ac4a:	4681                	c.li	a3,0
   2ac4c:	00006617          	auipc	a2,0x6
   2ac50:	36e60613          	addi	a2,a2,878 # 30fba <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f8a>
   2ac54:	00006597          	auipc	a1,0x6
   2ac58:	35c58593          	addi	a1,a1,860 # 30fb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f80>
   2ac5c:	0000f317          	auipc	t1,0xf
   2ac60:	6c433303          	ld	t1,1732(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2ac64:	9302                	c.jalr	t1
   2ac66:	beeff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ac6a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ac6e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ac70:	4681                	c.li	a3,0
   2ac72:	00006617          	auipc	a2,0x6
   2ac76:	35d60613          	addi	a2,a2,861 # 30fcf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f9f>
   2ac7a:	00006597          	auipc	a1,0x6
   2ac7e:	34658593          	addi	a1,a1,838 # 30fc0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f90>
   2ac82:	0000f317          	auipc	t1,0xf
   2ac86:	69e33303          	ld	t1,1694(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2ac8a:	9302                	c.jalr	t1
   2ac8c:	bc8ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ac90:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ac94:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ac96:	4681                	c.li	a3,0
   2ac98:	00006617          	auipc	a2,0x6
   2ac9c:	34760613          	addi	a2,a2,839 # 30fdf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1faf>
   2aca0:	00006597          	auipc	a1,0x6
   2aca4:	33058593          	addi	a1,a1,816 # 30fd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fa0>
   2aca8:	0000f317          	auipc	t1,0xf
   2acac:	67833303          	ld	t1,1656(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2acb0:	9302                	c.jalr	t1
   2acb2:	ba2ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2acb6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2acba:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2acbc:	4681                	c.li	a3,0
   2acbe:	00006617          	auipc	a2,0x6
   2acc2:	33760613          	addi	a2,a2,823 # 30ff5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fc5>
   2acc6:	00006597          	auipc	a1,0x6
   2acca:	31a58593          	addi	a1,a1,794 # 30fe0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fb0>
   2acce:	0000f317          	auipc	t1,0xf
   2acd2:	65233303          	ld	t1,1618(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2acd6:	9302                	c.jalr	t1
   2acd8:	b7cff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2acdc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ace0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ace2:	4681                	c.li	a3,0
   2ace4:	00006617          	auipc	a2,0x6
   2ace8:	32960613          	addi	a2,a2,809 # 3100d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fdd>
   2acec:	00006597          	auipc	a1,0x6
   2acf0:	30c58593          	addi	a1,a1,780 # 30ff8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fc8>
   2acf4:	0000f317          	auipc	t1,0xf
   2acf8:	62c33303          	ld	t1,1580(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2acfc:	9302                	c.jalr	t1
   2acfe:	b56ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ad02:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ad06:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ad08:	4681                	c.li	a3,0
   2ad0a:	00006617          	auipc	a2,0x6
   2ad0e:	31660613          	addi	a2,a2,790 # 31020 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ff0>
   2ad12:	00006597          	auipc	a1,0x6
   2ad16:	2fe58593          	addi	a1,a1,766 # 31010 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fe0>
   2ad1a:	0000f317          	auipc	t1,0xf
   2ad1e:	60633303          	ld	t1,1542(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2ad22:	9302                	c.jalr	t1
   2ad24:	b30ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ad28:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ad2c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ad2e:	4681                	c.li	a3,0
   2ad30:	00006617          	auipc	a2,0x6
   2ad34:	30860613          	addi	a2,a2,776 # 31038 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2008>
   2ad38:	00006597          	auipc	a1,0x6
   2ad3c:	2f058593          	addi	a1,a1,752 # 31028 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ff8>
   2ad40:	0000f317          	auipc	t1,0xf
   2ad44:	5e033303          	ld	t1,1504(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2ad48:	9302                	c.jalr	t1
   2ad4a:	b0aff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ad4e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ad52:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ad54:	4681                	c.li	a3,0
   2ad56:	00006617          	auipc	a2,0x6
   2ad5a:	2fc60613          	addi	a2,a2,764 # 31052 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2022>
   2ad5e:	00006597          	auipc	a1,0x6
   2ad62:	2e258593          	addi	a1,a1,738 # 31040 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2010>
   2ad66:	0000f317          	auipc	t1,0xf
   2ad6a:	5ba33303          	ld	t1,1466(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2ad6e:	9302                	c.jalr	t1
   2ad70:	ae4ff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
        return "(DW_AT)0x" + to_hex((int)v);
   2ad74:	848a                	c.mv	s1,sp
   2ad76:	8526                	c.mv	a0,s1
   2ad78:	0000f317          	auipc	t1,0xf
   2ad7c:	6b833303          	ld	t1,1720(t1) # 3a430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf640>
   2ad80:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2ad82:	4725                	c.li	a4,9
   2ad84:	00006697          	auipc	a3,0x6
   2ad88:	2d468693          	addi	a3,a3,724 # 31058 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2028>
   2ad8c:	4601                	c.li	a2,0
   2ad8e:	4581                	c.li	a1,0
   2ad90:	8526                	c.mv	a0,s1
   2ad92:	b6feb0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2ad96:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ad98:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2ad9c:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2ad9e:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2ada0:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2ada4:	03278563          	beq	a5,s2,2adce <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0xdc4>
      { _M_dataplus._M_p = __p; }
   2ada8:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2adaa:	689c                	c.ld	a5,16(s1)
   2adac:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   2adae:	649c                	c.ld	a5,8(s1)
   2adb0:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2adb2:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2adb6:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2adba:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2adbe:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2adc0:	081c                	c.addi4spn	a5,sp,16
   2adc2:	a8f50963          	beq	a0,a5,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2adc6:	9dbeb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2adca:	a8aff06f          	jal	zero,2a054 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2adce:	6490                	c.ld	a2,8(s1)
   2add0:	0605                	c.addi	a2,1
	if (__n == 0)
   2add2:	de71                	c.beqz	a2,2adae <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0xda4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2add4:	85ca                	c.mv	a1,s2
   2add6:	a6beb0ef          	jal	ra,16840 <memcpy@plt>
   2adda:	bfd1                	c.j	2adae <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0xda4>
      { return _M_dataplus._M_p; }
   2addc:	842a                	c.mv	s0,a0
   2adde:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2ade0:	081c                	c.addi4spn	a5,sp,16
   2ade2:	00f50463          	beq	a0,a5,2adea <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0xde0>
   2ade6:	9bbeb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2adea:	8522                	c.mv	a0,s0
   2adec:	ba5eb0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002adf0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)>:
template <typename T> std::string to_hex(T v) {
   2adf0:	7179                	c.addi16sp	sp,-48
   2adf2:	f406                	c.sdsp	ra,40(sp)
   2adf4:	f022                	c.sdsp	s0,32(sp)
   2adf6:	ec26                	c.sdsp	s1,24(sp)
   2adf8:	84aa                	c.mv	s1,a0
  if (v == 0)
   2adfa:	c989                	c.beqz	a1,2ae0c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x1c>
  *pos-- = '\0';
   2adfc:	00010423          	sb	zero,8(sp)
   2ae00:	00710413          	addi	s0,sp,7
    if (digit < 10)
   2ae04:	46a5                	c.li	a3,9
  while (v && pos >= buf) {
   2ae06:	fff10613          	addi	a2,sp,-1
   2ae0a:	a82d                	c.j	2ae44 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x54>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ae0c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ae10:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ae12:	4681                	c.li	a3,0
   2ae14:	00005617          	auipc	a2,0x5
   2ae18:	e0560613          	addi	a2,a2,-507 # 2fc19 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   2ae1c:	00005597          	auipc	a1,0x5
   2ae20:	dfc58593          	addi	a1,a1,-516 # 2fc18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe8>
   2ae24:	0000f317          	auipc	t1,0xf
   2ae28:	4fc33303          	ld	t1,1276(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2ae2c:	9302                	c.jalr	t1
   2ae2e:	a0a1                	c.j	2ae76 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x86>
   2ae30:	00e40023          	sb	a4,0(s0)
    pos--;
   2ae34:	fff40793          	addi	a5,s0,-1
    v >>= 4;
   2ae38:	4045d59b          	sraiw	a1,a1,0x4
  while (v && pos >= buf) {
   2ae3c:	cd89                	c.beqz	a1,2ae56 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x66>
   2ae3e:	00c78c63          	beq	a5,a2,2ae56 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x66>
    pos--;
   2ae42:	843e                	c.mv	s0,a5
    int digit = v & 0xf;
   2ae44:	00f5f793          	andi	a5,a1,15
      *pos = 'a' + (digit - 10);
   2ae48:	05778713          	addi	a4,a5,87
    if (digit < 10)
   2ae4c:	fef6c2e3          	blt	a3,a5,2ae30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x40>
      *pos = '0' + digit;
   2ae50:	03078713          	addi	a4,a5,48
   2ae54:	bff1                	c.j	2ae30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x40>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ae56:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   2ae5a:	e09c                	c.sd	a5,0(s1)
	return __builtin_strlen(__s);
   2ae5c:	8522                	c.mv	a0,s0
   2ae5e:	823eb0ef          	jal	ra,16680 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   2ae62:	4681                	c.li	a3,0
   2ae64:	00a40633          	add	a2,s0,a0
   2ae68:	85a2                	c.mv	a1,s0
   2ae6a:	8526                	c.mv	a0,s1
   2ae6c:	0000f317          	auipc	t1,0xf
   2ae70:	4b433303          	ld	t1,1204(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2ae74:	9302                	c.jalr	t1
}
   2ae76:	8526                	c.mv	a0,s1
   2ae78:	70a2                	c.ldsp	ra,40(sp)
   2ae7a:	7402                	c.ldsp	s0,32(sp)
   2ae7c:	64e2                	c.ldsp	s1,24(sp)
   2ae7e:	6145                	c.addi16sp	sp,48
   2ae80:	8082                	c.jr	ra

000000000002ae82 <elf::elf::get_hdr() const>:
    // isn't super-cheap.
    m->sections.push_back(section(*this, sec));
  }
}

const Ehdr<> &elf::get_hdr() const { return m->hdr; }
   2ae82:	6108                	c.ld	a0,0(a0)
   2ae84:	0541                	c.addi	a0,16
   2ae86:	8082                	c.jr	ra

000000000002ae88 <elf::elf::get_loader() const>:

shared_ptr<loader> elf::get_loader() const { return m->l; }
   2ae88:	1141                	c.addi	sp,-16
   2ae8a:	e406                	c.sdsp	ra,8(sp)
   2ae8c:	e022                	c.sdsp	s0,0(sp)
   2ae8e:	842a                	c.mv	s0,a0
      { return _M_ptr; }
   2ae90:	619c                	c.ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2ae92:	6398                	c.ld	a4,0(a5)
   2ae94:	e118                	c.sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   2ae96:	6788                	c.ld	a0,8(a5)
   2ae98:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   2ae9a:	c919                	c.beqz	a0,2aeb0 <elf::elf::get_loader() const+0x28>
    if (__is_single_threaded())
   2ae9c:	0000f797          	auipc	a5,0xf
   2aea0:	5fc7b783          	ld	a5,1532(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2aea4:	0007c783          	lbu	a5,0(a5)
   2aea8:	cb89                	c.beqz	a5,2aeba <elf::elf::get_loader() const+0x32>
  { *__mem += __val; }
   2aeaa:	591c                	c.lw	a5,48(a0)
   2aeac:	2785                	c.addiw	a5,1
   2aeae:	d91c                	c.sw	a5,48(a0)
   2aeb0:	8522                	c.mv	a0,s0
   2aeb2:	60a2                	c.ldsp	ra,8(sp)
   2aeb4:	6402                	c.ldsp	s0,0(sp)
   2aeb6:	0141                	c.addi	sp,16
   2aeb8:	8082                	c.jr	ra
      __atomic_add(__mem, __val);
   2aeba:	4585                	c.li	a1,1
   2aebc:	03050513          	addi	a0,a0,48
   2aec0:	ef0eb0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2aec4:	b7f5                	c.j	2aeb0 <elf::elf::get_loader() const+0x28>

000000000002aec6 <elf::elf::sections() const>:

const std::vector<section> &elf::sections() const { return m->sections; }
   2aec6:	6108                	c.ld	a0,0(a0)
   2aec8:	05050513          	addi	a0,a0,80
   2aecc:	8082                	c.jr	ra

000000000002aece <elf::elf::segments() const>:

const std::vector<segment> &elf::segments() const { return m->segments; }
   2aece:	6108                	c.ld	a0,0(a0)
   2aed0:	06850513          	addi	a0,a0,104
   2aed4:	8082                	c.jr	ra

000000000002aed6 <elf::elf::get_section(unsigned int) const>:
    if (name == sec.get_name(nullptr))
      return sec;
  return m->invalid_section;
}

const section &elf::get_section(unsigned index) const {
   2aed6:	1101                	c.addi	sp,-32
   2aed8:	ec06                	c.sdsp	ra,24(sp)
   2aeda:	e822                	c.sdsp	s0,16(sp)
   2aedc:	e426                	c.sdsp	s1,8(sp)
   2aede:	84aa                	c.mv	s1,a0
  if (index >= sections().size())
   2aee0:	02059413          	slli	s0,a1,0x20
   2aee4:	9001                	c.srli	s0,0x20
   2aee6:	fe1ff0ef          	jal	ra,2aec6 <elf::elf::sections() const>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2aeea:	651c                	c.ld	a5,8(a0)
   2aeec:	6118                	c.ld	a4,0(a0)
   2aeee:	8f99                	c.sub	a5,a4
   2aef0:	8791                	c.srai	a5,0x4
   2aef2:	00f46a63          	bltu	s0,a5,2af06 <elf::elf::get_section(unsigned int) const+0x30>
    return m->invalid_section;
   2aef6:	6088                	c.ld	a0,0(s1)
   2aef8:	08050513          	addi	a0,a0,128
  return sections().at(index);
}
   2aefc:	60e2                	c.ldsp	ra,24(sp)
   2aefe:	6442                	c.ldsp	s0,16(sp)
   2af00:	64a2                	c.ldsp	s1,8(sp)
   2af02:	6105                	c.addi16sp	sp,32
   2af04:	8082                	c.jr	ra
  return sections().at(index);
   2af06:	8526                	c.mv	a0,s1
   2af08:	fbfff0ef          	jal	ra,2aec6 <elf::elf::sections() const>
   2af0c:	611c                	c.ld	a5,0(a0)
   2af0e:	6510                	c.ld	a2,8(a0)
   2af10:	8e1d                	c.sub	a2,a5
   2af12:	8611                	c.srai	a2,0x4
	return *(this->_M_impl._M_start + __n);
   2af14:	00441713          	slli	a4,s0,0x4
   2af18:	00e78533          	add	a0,a5,a4
	if (__n >= this->size())
   2af1c:	fec460e3          	bltu	s0,a2,2aefc <elf::elf::get_section(unsigned int) const+0x26>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   2af20:	85a2                	c.mv	a1,s0
   2af22:	00007517          	auipc	a0,0x7
   2af26:	86650513          	addi	a0,a0,-1946 # 31788 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2758>
   2af2a:	9b7eb0ef          	jal	ra,168e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>

000000000002af2e <elf::elf::get_segment(unsigned int) const>:

const segment &elf::get_segment(unsigned index) const {
   2af2e:	1101                	c.addi	sp,-32
   2af30:	ec06                	c.sdsp	ra,24(sp)
   2af32:	e822                	c.sdsp	s0,16(sp)
   2af34:	e426                	c.sdsp	s1,8(sp)
   2af36:	84aa                	c.mv	s1,a0
  if (index >= segments().size())
   2af38:	02059413          	slli	s0,a1,0x20
   2af3c:	9001                	c.srli	s0,0x20
   2af3e:	f91ff0ef          	jal	ra,2aece <elf::elf::segments() const>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2af42:	651c                	c.ld	a5,8(a0)
   2af44:	6118                	c.ld	a4,0(a0)
   2af46:	8f99                	c.sub	a5,a4
   2af48:	8791                	c.srai	a5,0x4
   2af4a:	00f46a63          	bltu	s0,a5,2af5e <elf::elf::get_segment(unsigned int) const+0x30>
    return m->invalid_segment;
   2af4e:	6088                	c.ld	a0,0(s1)
   2af50:	09050513          	addi	a0,a0,144
  return segments().at(index);
}
   2af54:	60e2                	c.ldsp	ra,24(sp)
   2af56:	6442                	c.ldsp	s0,16(sp)
   2af58:	64a2                	c.ldsp	s1,8(sp)
   2af5a:	6105                	c.addi16sp	sp,32
   2af5c:	8082                	c.jr	ra
  return segments().at(index);
   2af5e:	8526                	c.mv	a0,s1
   2af60:	f6fff0ef          	jal	ra,2aece <elf::elf::segments() const>
   2af64:	611c                	c.ld	a5,0(a0)
   2af66:	6510                	c.ld	a2,8(a0)
   2af68:	8e1d                	c.sub	a2,a5
   2af6a:	8611                	c.srai	a2,0x4
	return *(this->_M_impl._M_start + __n);
   2af6c:	00441713          	slli	a4,s0,0x4
   2af70:	00e78533          	add	a0,a5,a4
	if (__n >= this->size())
   2af74:	fec460e3          	bltu	s0,a2,2af54 <elf::elf::get_segment(unsigned int) const+0x26>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   2af78:	85a2                	c.mv	a1,s0
   2af7a:	00007517          	auipc	a0,0x7
   2af7e:	80e50513          	addi	a0,a0,-2034 # 31788 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2758>
   2af82:	95feb0ef          	jal	ra,168e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>

000000000002af86 <elf::segment::get_hdr() const>:

segment::segment(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
}

const Phdr<> &segment::get_hdr() const { return m->hdr; }
   2af86:	6108                	c.ld	a0,0(a0)
   2af88:	0541                	c.addi	a0,16
   2af8a:	8082                	c.jr	ra

000000000002af8c <elf::segment::data() const>:

const void *segment::data() const {
   2af8c:	7179                	c.addi16sp	sp,-48
   2af8e:	f406                	c.sdsp	ra,40(sp)
   2af90:	f022                	c.sdsp	s0,32(sp)
   2af92:	ec26                	c.sdsp	s1,24(sp)
   2af94:	842a                	c.mv	s0,a0
      { return _M_ptr; }
   2af96:	610c                	c.ld	a1,0(a0)
  if (!m->data)
   2af98:	65bc                	c.ld	a5,72(a1)
   2af9a:	cb81                	c.beqz	a5,2afaa <elf::segment::data() const+0x1e>
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.filesz);
  return m->data;
   2af9c:	601c                	c.ld	a5,0(s0)
   2af9e:	67a8                	c.ld	a0,72(a5)
}
   2afa0:	70a2                	c.ldsp	ra,40(sp)
   2afa2:	7402                	c.ldsp	s0,32(sp)
   2afa4:	64e2                	c.ldsp	s1,24(sp)
   2afa6:	6145                	c.addi16sp	sp,48
   2afa8:	8082                	c.jr	ra
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.filesz);
   2afaa:	850a                	c.mv	a0,sp
   2afac:	eddff0ef          	jal	ra,2ae88 <elf::elf::get_loader() const>
   2afb0:	6502                	c.ldsp	a0,0(sp)
   2afb2:	6004                	c.ld	s1,0(s0)
   2afb4:	611c                	c.ld	a5,0(a0)
   2afb6:	6b9c                	c.ld	a5,16(a5)
   2afb8:	7890                	c.ld	a2,48(s1)
   2afba:	6c8c                	c.ld	a1,24(s1)
   2afbc:	9782                	c.jalr	a5
   2afbe:	e4a8                	c.sd	a0,72(s1)
	if (_M_pi != nullptr)
   2afc0:	64a2                	c.ldsp	s1,8(sp)
   2afc2:	dce9                	c.beqz	s1,2af9c <elf::segment::data() const+0x10>
    if (__is_single_threaded())
   2afc4:	0000f797          	auipc	a5,0xf
   2afc8:	4d47b783          	ld	a5,1236(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2afcc:	0007c783          	lbu	a5,0(a5)
   2afd0:	c3a9                	c.beqz	a5,2b012 <elf::segment::data() const+0x86>
    _Atomic_word __result = *__mem;
   2afd2:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   2afd4:	fff5079b          	addiw	a5,a0,-1
   2afd8:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2afda:	4785                	c.li	a5,1
   2afdc:	fcf510e3          	bne	a0,a5,2af9c <elf::segment::data() const+0x10>
	_M_dispose();
   2afe0:	609c                	c.ld	a5,0(s1)
   2afe2:	6b9c                	c.ld	a5,16(a5)
   2afe4:	8526                	c.mv	a0,s1
   2afe6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2afe8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2afec:	0000f797          	auipc	a5,0xf
   2aff0:	4ac7b783          	ld	a5,1196(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2aff4:	0007c783          	lbu	a5,0(a5)
   2aff8:	c39d                	c.beqz	a5,2b01e <elf::segment::data() const+0x92>
    _Atomic_word __result = *__mem;
   2affa:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   2affc:	fff5079b          	addiw	a5,a0,-1
   2b000:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2b002:	4785                	c.li	a5,1
   2b004:	f8f51ce3          	bne	a0,a5,2af9c <elf::segment::data() const+0x10>
	    _M_destroy();
   2b008:	609c                	c.ld	a5,0(s1)
   2b00a:	6f9c                	c.ld	a5,24(a5)
   2b00c:	8526                	c.mv	a0,s1
   2b00e:	9782                	c.jalr	a5
   2b010:	b771                	c.j	2af9c <elf::segment::data() const+0x10>
      return __exchange_and_add(__mem, __val);
   2b012:	55fd                	c.li	a1,-1
   2b014:	03048513          	addi	a0,s1,48
   2b018:	dd8eb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b01c:	bf7d                	c.j	2afda <elf::segment::data() const+0x4e>
   2b01e:	55fd                	c.li	a1,-1
   2b020:	03448513          	addi	a0,s1,52
   2b024:	dcceb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b028:	bfe9                	c.j	2b002 <elf::segment::data() const+0x76>
	if (_M_pi != nullptr)
   2b02a:	842a                	c.mv	s0,a0
   2b02c:	6522                	c.ldsp	a0,8(sp)
   2b02e:	c511                	c.beqz	a0,2b03a <elf::segment::data() const+0xae>
	  _M_pi->_M_release();
   2b030:	0000f317          	auipc	t1,0xf
   2b034:	3b033303          	ld	t1,944(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   2b038:	9302                	c.jalr	t1
   2b03a:	8522                	c.mv	a0,s0
   2b03c:	955eb0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002b040 <elf::segment::file_size() const>:

size_t segment::file_size() const { return m->hdr.filesz; }
   2b040:	611c                	c.ld	a5,0(a0)
   2b042:	7b88                	c.ld	a0,48(a5)
   2b044:	8082                	c.jr	ra

000000000002b046 <elf::segment::mem_size() const>:

size_t segment::mem_size() const { return m->hdr.memsz; }
   2b046:	611c                	c.ld	a5,0(a0)
   2b048:	7f88                	c.ld	a0,56(a5)
   2b04a:	8082                	c.jr	ra

000000000002b04c <elf::section::get_hdr() const>:

section::section(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
}

const Shdr<> &section::get_hdr() const { return m->hdr; }
   2b04c:	6108                	c.ld	a0,0(a0)
   2b04e:	0541                	c.addi	a0,16
   2b050:	8082                	c.jr	ra

000000000002b052 <elf::section::data() const>:
      { return _M_ptr; }
   2b052:	610c                	c.ld	a1,0(a0)
}

string section::get_name() const { return get_name(nullptr); }

const void *section::data() const {
  if (m->hdr.type == sht::nobits)
   2b054:	49d8                	c.lw	a4,20(a1)
   2b056:	47a1                	c.li	a5,8
   2b058:	0af70063          	beq	a4,a5,2b0f8 <elf::section::data() const+0xa6>
const void *section::data() const {
   2b05c:	7179                	c.addi16sp	sp,-48
   2b05e:	f406                	c.sdsp	ra,40(sp)
   2b060:	f022                	c.sdsp	s0,32(sp)
   2b062:	ec26                	c.sdsp	s1,24(sp)
   2b064:	842a                	c.mv	s0,a0
    return nullptr;
  if (!m->data)
   2b066:	71bc                	c.ld	a5,96(a1)
   2b068:	cb81                	c.beqz	a5,2b078 <elf::section::data() const+0x26>
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.size);
  return m->data;
   2b06a:	601c                	c.ld	a5,0(s0)
   2b06c:	73a8                	c.ld	a0,96(a5)
}
   2b06e:	70a2                	c.ldsp	ra,40(sp)
   2b070:	7402                	c.ldsp	s0,32(sp)
   2b072:	64e2                	c.ldsp	s1,24(sp)
   2b074:	6145                	c.addi16sp	sp,48
   2b076:	8082                	c.jr	ra
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.size);
   2b078:	850a                	c.mv	a0,sp
   2b07a:	e0fff0ef          	jal	ra,2ae88 <elf::elf::get_loader() const>
   2b07e:	6502                	c.ldsp	a0,0(sp)
   2b080:	6004                	c.ld	s1,0(s0)
   2b082:	611c                	c.ld	a5,0(a0)
   2b084:	6b9c                	c.ld	a5,16(a5)
   2b086:	7890                	c.ld	a2,48(s1)
   2b088:	748c                	c.ld	a1,40(s1)
   2b08a:	9782                	c.jalr	a5
   2b08c:	f0a8                	c.sd	a0,96(s1)
	if (_M_pi != nullptr)
   2b08e:	64a2                	c.ldsp	s1,8(sp)
   2b090:	dce9                	c.beqz	s1,2b06a <elf::section::data() const+0x18>
    if (__is_single_threaded())
   2b092:	0000f797          	auipc	a5,0xf
   2b096:	4067b783          	ld	a5,1030(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b09a:	0007c783          	lbu	a5,0(a5)
   2b09e:	c3a9                	c.beqz	a5,2b0e0 <elf::section::data() const+0x8e>
    _Atomic_word __result = *__mem;
   2b0a0:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   2b0a2:	fff5079b          	addiw	a5,a0,-1
   2b0a6:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2b0a8:	4785                	c.li	a5,1
   2b0aa:	fcf510e3          	bne	a0,a5,2b06a <elf::section::data() const+0x18>
	_M_dispose();
   2b0ae:	609c                	c.ld	a5,0(s1)
   2b0b0:	6b9c                	c.ld	a5,16(a5)
   2b0b2:	8526                	c.mv	a0,s1
   2b0b4:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2b0b6:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2b0ba:	0000f797          	auipc	a5,0xf
   2b0be:	3de7b783          	ld	a5,990(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b0c2:	0007c783          	lbu	a5,0(a5)
   2b0c6:	c39d                	c.beqz	a5,2b0ec <elf::section::data() const+0x9a>
    _Atomic_word __result = *__mem;
   2b0c8:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   2b0ca:	fff5079b          	addiw	a5,a0,-1
   2b0ce:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2b0d0:	4785                	c.li	a5,1
   2b0d2:	f8f51ce3          	bne	a0,a5,2b06a <elf::section::data() const+0x18>
	    _M_destroy();
   2b0d6:	609c                	c.ld	a5,0(s1)
   2b0d8:	6f9c                	c.ld	a5,24(a5)
   2b0da:	8526                	c.mv	a0,s1
   2b0dc:	9782                	c.jalr	a5
   2b0de:	b771                	c.j	2b06a <elf::section::data() const+0x18>
      return __exchange_and_add(__mem, __val);
   2b0e0:	55fd                	c.li	a1,-1
   2b0e2:	03048513          	addi	a0,s1,48
   2b0e6:	d0aeb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b0ea:	bf7d                	c.j	2b0a8 <elf::section::data() const+0x56>
   2b0ec:	55fd                	c.li	a1,-1
   2b0ee:	03448513          	addi	a0,s1,52
   2b0f2:	cfeeb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b0f6:	bfe9                	c.j	2b0d0 <elf::section::data() const+0x7e>
    return nullptr;
   2b0f8:	4501                	c.li	a0,0
}
   2b0fa:	8082                	c.jr	ra
	if (_M_pi != nullptr)
   2b0fc:	842a                	c.mv	s0,a0
   2b0fe:	6522                	c.ldsp	a0,8(sp)
   2b100:	c511                	c.beqz	a0,2b10c <elf::section::data() const+0xba>
	  _M_pi->_M_release();
   2b102:	0000f317          	auipc	t1,0xf
   2b106:	2de33303          	ld	t1,734(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   2b10a:	9302                	c.jalr	t1
   2b10c:	8522                	c.mv	a0,s0
   2b10e:	883eb0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002b112 <elf::section::size() const>:

size_t section::size() const { return m->hdr.size; }
   2b112:	611c                	c.ld	a5,0(a0)
   2b114:	7b88                	c.ld	a0,48(a5)
   2b116:	8082                	c.jr	ra

000000000002b118 <elf::strtab::strtab(elf::elf, void const*, unsigned long)>:

  const elf f;
  const char *data, *end;
};

strtab::strtab(elf f, const void *data, size_t size)
   2b118:	7179                	c.addi16sp	sp,-48
   2b11a:	f406                	c.sdsp	ra,40(sp)
   2b11c:	f022                	c.sdsp	s0,32(sp)
   2b11e:	ec26                	c.sdsp	s1,24(sp)
   2b120:	e84a                	c.sdsp	s2,16(sp)
   2b122:	e44e                	c.sdsp	s3,8(sp)
   2b124:	e052                	c.sdsp	s4,0(sp)
   2b126:	892a                	c.mv	s2,a0
   2b128:	84ae                	c.mv	s1,a1
   2b12a:	89b2                	c.mv	s3,a2
    : m(make_shared<impl>(f, (const char *)data, (const char *)data + size)) {}
   2b12c:	00d60a33          	add	s4,a2,a3
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   2b130:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2b134:	05800513          	addi	a0,zero,88
   2b138:	e78eb0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   2b13c:	842a                	c.mv	s0,a0
   2b13e:	00052423          	sw	zero,8(a0)
   2b142:	00052623          	sw	zero,12(a0)
   2b146:	00052823          	sw	zero,16(a0)
   2b14a:	00052a23          	sw	zero,20(a0)
   2b14e:	00052c23          	sw	zero,24(a0)
   2b152:	00052e23          	sw	zero,28(a0)
   2b156:	02053023          	sd	zero,32(a0)
   2b15a:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   2b15e:	4785                	c.li	a5,1
   2b160:	d91c                	c.sw	a5,48(a0)
   2b162:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   2b164:	0000f797          	auipc	a5,0xf
   2b168:	4a47b783          	ld	a5,1188(a5) # 3a608 <vtable for std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x928>
   2b16c:	07c1                	c.addi	a5,16
   2b16e:	e11c                	c.sd	a5,0(a0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2b170:	609c                	c.ld	a5,0(s1)
   2b172:	fd1c                	c.sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   2b174:	6488                	c.ld	a0,8(s1)
   2b176:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   2b178:	c919                	c.beqz	a0,2b18e <elf::strtab::strtab(elf::elf, void const*, unsigned long)+0x76>
    if (__is_single_threaded())
   2b17a:	0000f717          	auipc	a4,0xf
   2b17e:	31e73703          	ld	a4,798(a4) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b182:	00074703          	lbu	a4,0(a4)
   2b186:	c715                	c.beqz	a4,2b1b2 <elf::strtab::strtab(elf::elf, void const*, unsigned long)+0x9a>
  { *__mem += __val; }
   2b188:	5918                	c.lw	a4,48(a0)
   2b18a:	2705                	c.addiw	a4,1
   2b18c:	d918                	c.sw	a4,48(a0)
      : f(f), data(data), end(end) {}
   2b18e:	05343423          	sd	s3,72(s0)
   2b192:	05443823          	sd	s4,80(s0)
	  _M_pi = __pi;
   2b196:	00893423          	sd	s0,8(s2)
   2b19a:	03840413          	addi	s0,s0,56
	  __p = __pi->_M_ptr();
   2b19e:	00893023          	sd	s0,0(s2)
    : m(make_shared<impl>(f, (const char *)data, (const char *)data + size)) {}
   2b1a2:	70a2                	c.ldsp	ra,40(sp)
   2b1a4:	7402                	c.ldsp	s0,32(sp)
   2b1a6:	64e2                	c.ldsp	s1,24(sp)
   2b1a8:	6942                	c.ldsp	s2,16(sp)
   2b1aa:	69a2                	c.ldsp	s3,8(sp)
   2b1ac:	6a02                	c.ldsp	s4,0(sp)
   2b1ae:	6145                	c.addi16sp	sp,48
   2b1b0:	8082                	c.jr	ra
      __atomic_add(__mem, __val);
   2b1b2:	4585                	c.li	a1,1
   2b1b4:	03050513          	addi	a0,a0,48
   2b1b8:	bf8eb0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2b1bc:	bfc9                	c.j	2b18e <elf::strtab::strtab(elf::elf, void const*, unsigned long)+0x76>

000000000002b1be <elf::section::as_strtab() const>:
strtab section::as_strtab() const {
   2b1be:	7179                	c.addi16sp	sp,-48
   2b1c0:	f406                	c.sdsp	ra,40(sp)
   2b1c2:	f022                	c.sdsp	s0,32(sp)
   2b1c4:	ec26                	c.sdsp	s1,24(sp)
   2b1c6:	e84a                	c.sdsp	s2,16(sp)
      { return _M_ptr; }
   2b1c8:	619c                	c.ld	a5,0(a1)
  if (m->hdr.type != sht::strtab)
   2b1ca:	4bd4                	c.lw	a3,20(a5)
   2b1cc:	470d                	c.li	a4,3
   2b1ce:	02e69763          	bne	a3,a4,2b1fc <elf::section::as_strtab() const+0x3e>
   2b1d2:	892a                	c.mv	s2,a0
   2b1d4:	842e                	c.mv	s0,a1
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2b1d6:	6398                	c.ld	a4,0(a5)
   2b1d8:	e03a                	c.sdsp	a4,0(sp)
      : _M_pi(__r._M_pi)
   2b1da:	6788                	c.ld	a0,8(a5)
   2b1dc:	e42a                	c.sdsp	a0,8(sp)
	if (_M_pi != nullptr)
   2b1de:	c919                	c.beqz	a0,2b1f4 <elf::section::as_strtab() const+0x36>
    if (__is_single_threaded())
   2b1e0:	0000f717          	auipc	a4,0xf
   2b1e4:	2b873703          	ld	a4,696(a4) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b1e8:	00074703          	lbu	a4,0(a4)
   2b1ec:	c339                	c.beqz	a4,2b232 <elf::section::as_strtab() const+0x74>
  { *__mem += __val; }
   2b1ee:	5918                	c.lw	a4,48(a0)
   2b1f0:	2705                	c.addiw	a4,1
   2b1f2:	d918                	c.sw	a4,48(a0)
  return strtab(m->f, data(), size());
   2b1f4:	8522                	c.mv	a0,s0
   2b1f6:	e5dff0ef          	jal	ra,2b052 <elf::section::data() const>
   2b1fa:	a091                	c.j	2b23e <elf::section::as_strtab() const+0x80>
    throw section_type_mismatch("cannot use section as strtab");
   2b1fc:	4541                	c.li	a0,16
   2b1fe:	c92eb0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2b202:	842a                	c.mv	s0,a0
class section_type_mismatch : public std::logic_error {
public:
  explicit section_type_mismatch(const std::string &what_arg)
      : std::logic_error(what_arg) {}
  explicit section_type_mismatch(const char *what_arg)
      : std::logic_error(what_arg) {}
   2b204:	00006597          	auipc	a1,0x6
   2b208:	5d458593          	addi	a1,a1,1492 # 317d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27a8>
   2b20c:	e04eb0ef          	jal	ra,16810 <std::logic_error::logic_error(char const*)@plt>
   2b210:	0000f797          	auipc	a5,0xf
   2b214:	1c07b783          	ld	a5,448(a5) # 3a3d0 <vtable for elf::section_type_mismatch@@Base+0x7c0>
   2b218:	07c1                	c.addi	a5,16
   2b21a:	e01c                	c.sd	a5,0(s0)
   2b21c:	0000f617          	auipc	a2,0xf
   2b220:	0a463603          	ld	a2,164(a2) # 3a2c0 <elf::section_type_mismatch::~section_type_mismatch()@@Base+0xdd66>
   2b224:	0000f597          	auipc	a1,0xf
   2b228:	0d45b583          	ld	a1,212(a1) # 3a2f8 <typeinfo for elf::section_type_mismatch@@Base+0x7a0>
   2b22c:	8522                	c.mv	a0,s0
   2b22e:	f32eb0ef          	jal	ra,16960 <__cxa_throw@plt>
      __atomic_add(__mem, __val);
   2b232:	4585                	c.li	a1,1
   2b234:	03050513          	addi	a0,a0,48
   2b238:	b78eb0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2b23c:	bf65                	c.j	2b1f4 <elf::section::as_strtab() const+0x36>
  return strtab(m->f, data(), size());
   2b23e:	84aa                	c.mv	s1,a0
   2b240:	8522                	c.mv	a0,s0
   2b242:	ed1ff0ef          	jal	ra,2b112 <elf::section::size() const>
   2b246:	86aa                	c.mv	a3,a0
   2b248:	8626                	c.mv	a2,s1
   2b24a:	858a                	c.mv	a1,sp
   2b24c:	854a                	c.mv	a0,s2
   2b24e:	ecbff0ef          	jal	ra,2b118 <elf::strtab::strtab(elf::elf, void const*, unsigned long)>
	if (_M_pi != nullptr)
   2b252:	6422                	c.ldsp	s0,8(sp)
   2b254:	cc19                	c.beqz	s0,2b272 <elf::section::as_strtab() const+0xb4>
    if (__is_single_threaded())
   2b256:	0000f797          	auipc	a5,0xf
   2b25a:	2427b783          	ld	a5,578(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b25e:	0007c783          	lbu	a5,0(a5)
   2b262:	cf99                	c.beqz	a5,2b280 <elf::section::as_strtab() const+0xc2>
    _Atomic_word __result = *__mem;
   2b264:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2b266:	fff5079b          	addiw	a5,a0,-1
   2b26a:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2b26c:	4785                	c.li	a5,1
   2b26e:	00f50f63          	beq	a0,a5,2b28c <elf::section::as_strtab() const+0xce>
}
   2b272:	854a                	c.mv	a0,s2
   2b274:	70a2                	c.ldsp	ra,40(sp)
   2b276:	7402                	c.ldsp	s0,32(sp)
   2b278:	64e2                	c.ldsp	s1,24(sp)
   2b27a:	6942                	c.ldsp	s2,16(sp)
   2b27c:	6145                	c.addi16sp	sp,48
   2b27e:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2b280:	55fd                	c.li	a1,-1
   2b282:	03040513          	addi	a0,s0,48
   2b286:	b6aeb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b28a:	b7cd                	c.j	2b26c <elf::section::as_strtab() const+0xae>
	_M_dispose();
   2b28c:	601c                	c.ld	a5,0(s0)
   2b28e:	6b9c                	c.ld	a5,16(a5)
   2b290:	8522                	c.mv	a0,s0
   2b292:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2b294:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2b298:	0000f797          	auipc	a5,0xf
   2b29c:	2007b783          	ld	a5,512(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b2a0:	0007c783          	lbu	a5,0(a5)
   2b2a4:	cf89                	c.beqz	a5,2b2be <elf::section::as_strtab() const+0x100>
    _Atomic_word __result = *__mem;
   2b2a6:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2b2a8:	fff5079b          	addiw	a5,a0,-1
   2b2ac:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2b2ae:	4785                	c.li	a5,1
   2b2b0:	fcf511e3          	bne	a0,a5,2b272 <elf::section::as_strtab() const+0xb4>
	    _M_destroy();
   2b2b4:	601c                	c.ld	a5,0(s0)
   2b2b6:	6f9c                	c.ld	a5,24(a5)
   2b2b8:	8522                	c.mv	a0,s0
   2b2ba:	9782                	c.jalr	a5
  return strtab(m->f, data(), size());
   2b2bc:	bf5d                	c.j	2b272 <elf::section::as_strtab() const+0xb4>
      return __exchange_and_add(__mem, __val);
   2b2be:	55fd                	c.li	a1,-1
   2b2c0:	03440513          	addi	a0,s0,52
   2b2c4:	b2ceb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b2c8:	b7dd                	c.j	2b2ae <elf::section::as_strtab() const+0xf0>
    throw section_type_mismatch("cannot use section as strtab");
   2b2ca:	84aa                	c.mv	s1,a0
   2b2cc:	8522                	c.mv	a0,s0
   2b2ce:	c82eb0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2b2d2:	8526                	c.mv	a0,s1
   2b2d4:	ebceb0ef          	jal	ra,16990 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   2b2d8:	842a                	c.mv	s0,a0
   2b2da:	6522                	c.ldsp	a0,8(sp)
   2b2dc:	c511                	c.beqz	a0,2b2e8 <elf::section::as_strtab() const+0x12a>
	  _M_pi->_M_release();
   2b2de:	0000f317          	auipc	t1,0xf
   2b2e2:	10233303          	ld	t1,258(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   2b2e6:	9302                	c.jalr	t1
   2b2e8:	8522                	c.mv	a0,s0
   2b2ea:	ea6eb0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002b2ee <elf::strtab::get(unsigned long, unsigned long*) const>:

const char *strtab::get(Elf64::Off offset, size_t *len_out) const {
   2b2ee:	7119                	c.addi16sp	sp,-128
   2b2f0:	fc86                	c.sdsp	ra,120(sp)
   2b2f2:	f8a2                	c.sdsp	s0,112(sp)
   2b2f4:	f4a6                	c.sdsp	s1,104(sp)
      { return _M_ptr; }
   2b2f6:	611c                	c.ld	a5,0(a0)
  const char *start = m->data + offset;
   2b2f8:	6b88                	c.ld	a0,16(a5)
   2b2fa:	952e                	c.add	a0,a1

  if (start >= m->end)
   2b2fc:	6f94                	c.ld	a3,24(a5)
    throw range_error("string offset " + std::to_string(offset) +
                      " exceeds section size");

  // Find the null terminator
  const char *p = start;
   2b2fe:	87aa                	c.mv	a5,a0
  if (start >= m->end)
   2b300:	02d57463          	bgeu	a0,a3,2b328 <elf::strtab::get(unsigned long, unsigned long*) const+0x3a>
  while (p < m->end && *p)
   2b304:	0007c703          	lbu	a4,0(a5)
   2b308:	16070263          	beq	a4,zero,2b46c <elf::strtab::get(unsigned long, unsigned long*) const+0x17e>
    p++;
   2b30c:	0785                	c.addi	a5,1
  while (p < m->end && *p)
   2b30e:	fef69be3          	bne	a3,a5,2b304 <elf::strtab::get(unsigned long, unsigned long*) const+0x16>
  if (p == m->end)
    throw format_error("unterminated string");
   2b312:	4541                	c.li	a0,16
   2b314:	b7ceb0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2b318:	842a                	c.mv	s0,a0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   2b31a:	00003597          	auipc	a1,0x3
   2b31e:	d3e58593          	addi	a1,a1,-706 # 2e058 <std::piecewise_construct+0x38>
   2b322:	eeeeb0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   2b326:	aaa9                	c.j	2b480 <elf::strtab::get(unsigned long, unsigned long*) const+0x192>
   2b328:	842e                	c.mv	s0,a1
                      " exceeds section size");
   2b32a:	4541                	c.li	a0,16
   2b32c:	b64eb0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2b330:	84aa                	c.mv	s1,a0
   2b332:	87a2                	c.mv	a5,s0
      unsigned __n = 1;
   2b334:	4585                	c.li	a1,1
	  if (__value < (unsigned)__base) return __n;
   2b336:	4825                	c.li	a6,9
	  if (__value < __b2) return __n + 1;
   2b338:	06300513          	addi	a0,zero,99
	  if (__value < __b3) return __n + 2;
   2b33c:	3e700613          	addi	a2,zero,999
	  if (__value < __b4) return __n + 3;
   2b340:	6709                	c.lui	a4,0x2
   2b342:	70f70693          	addi	a3,a4,1807 # 270f <__abi_tag-0xdb85>
	  __value /= __b4;
   2b346:	71070713          	addi	a4,a4,1808
	  if (__value < (unsigned)__base) return __n;
   2b34a:	00f87563          	bgeu	a6,a5,2b354 <elf::strtab::get(unsigned long, unsigned long*) const+0x66>
	  if (__value < __b2) return __n + 1;
   2b34e:	00f56c63          	bltu	a0,a5,2b366 <elf::strtab::get(unsigned long, unsigned long*) const+0x78>
   2b352:	2585                	c.addiw	a1,1
	: allocator_type(__a), _M_p(__dat) { }
   2b354:	081c                	c.addi4spn	a5,sp,16
   2b356:	e03e                	c.sdsp	a5,0(sp)
      { _M_construct(__n, __c); }
   2b358:	4601                	c.li	a2,0
   2b35a:	1582                	c.slli	a1,0x20
   2b35c:	9181                	c.srli	a1,0x20
   2b35e:	850a                	c.mv	a0,sp
   2b360:	ca0eb0ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
   2b364:	a829                	c.j	2b37e <elf::strtab::get(unsigned long, unsigned long*) const+0x90>
	  if (__value < __b3) return __n + 2;
   2b366:	00f66463          	bltu	a2,a5,2b36e <elf::strtab::get(unsigned long, unsigned long*) const+0x80>
   2b36a:	2589                	c.addiw	a1,2
   2b36c:	b7e5                	c.j	2b354 <elf::strtab::get(unsigned long, unsigned long*) const+0x66>
	  if (__value < __b4) return __n + 3;
   2b36e:	00f6e463          	bltu	a3,a5,2b376 <elf::strtab::get(unsigned long, unsigned long*) const+0x88>
   2b372:	258d                	c.addiw	a1,3
   2b374:	b7c5                	c.j	2b354 <elf::strtab::get(unsigned long, unsigned long*) const+0x66>
	  __value /= __b4;
   2b376:	02e7d7b3          	divu	a5,a5,a4
	  __n += 4;
   2b37a:	2591                	c.addiw	a1,4
	  if (__value < (unsigned)__base) return __n;
   2b37c:	b7f9                	c.j	2b34a <elf::strtab::get(unsigned long, unsigned long*) const+0x5c>
      { return _M_dataplus._M_p; }
   2b37e:	6602                	c.ldsp	a2,0(sp)
      unsigned __pos = __len - 1;
   2b380:	67a2                	c.ldsp	a5,8(sp)
   2b382:	37fd                	c.addiw	a5,-1
      while (__val >= 100)
   2b384:	06300813          	addi	a6,zero,99
	  auto const __num = (__val % 100) * 2;
   2b388:	06400593          	addi	a1,zero,100
	  __first[__pos] = __digits[__num + 1];
   2b38c:	0000f517          	auipc	a0,0xf
   2b390:	0f453503          	ld	a0,244(a0) # 3a480 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xbf88>
      while (__val >= 100)
   2b394:	02886c63          	bltu	a6,s0,2b3cc <elf::strtab::get(unsigned long, unsigned long*) const+0xde>
      if (__val >= 10)
   2b398:	47a5                	c.li	a5,9
   2b39a:	0687f263          	bgeu	a5,s0,2b3fe <elf::strtab::get(unsigned long, unsigned long*) const+0x110>
	  auto const __num = __val * 2;
   2b39e:	0406                	c.slli	s0,0x1
	  __first[1] = __digits[__num + 1];
   2b3a0:	0000f797          	auipc	a5,0xf
   2b3a4:	0e07b783          	ld	a5,224(a5) # 3a480 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xbf88>
   2b3a8:	97a2                	c.add	a5,s0
   2b3aa:	0017c703          	lbu	a4,1(a5)
   2b3ae:	00e600a3          	sb	a4,1(a2)
	  __first[0] = __digits[__num];
   2b3b2:	0007c783          	lbu	a5,0(a5)
   2b3b6:	00f60023          	sb	a5,0(a2)
    { return std::move(__rhs.insert(0, __lhs)); }
   2b3ba:	00006617          	auipc	a2,0x6
   2b3be:	43e60613          	addi	a2,a2,1086 # 317f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27c8>
   2b3c2:	4581                	c.li	a1,0
   2b3c4:	850a                	c.mv	a0,sp
   2b3c6:	a3aeb0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2b3ca:	a83d                	c.j	2b408 <elf::strtab::get(unsigned long, unsigned long*) const+0x11a>
	  auto const __num = (__val % 100) * 2;
   2b3cc:	02b47733          	remu	a4,s0,a1
   2b3d0:	0706                	c.slli	a4,0x1
	  __val /= 100;
   2b3d2:	02b45433          	divu	s0,s0,a1
	  __first[__pos] = __digits[__num + 1];
   2b3d6:	02079693          	slli	a3,a5,0x20
   2b3da:	9281                	c.srli	a3,0x20
   2b3dc:	96b2                	c.add	a3,a2
   2b3de:	972a                	c.add	a4,a0
   2b3e0:	00174883          	lbu	a7,1(a4)
   2b3e4:	01168023          	sb	a7,0(a3)
	  __first[__pos - 1] = __digits[__num];
   2b3e8:	fff7869b          	addiw	a3,a5,-1
   2b3ec:	1682                	c.slli	a3,0x20
   2b3ee:	9281                	c.srli	a3,0x20
   2b3f0:	96b2                	c.add	a3,a2
   2b3f2:	00074703          	lbu	a4,0(a4)
   2b3f6:	00e68023          	sb	a4,0(a3)
	  __pos -= 2;
   2b3fa:	37f9                	c.addiw	a5,-2
   2b3fc:	bf61                	c.j	2b394 <elf::strtab::get(unsigned long, unsigned long*) const+0xa6>
	__first[0] = '0' + __val;
   2b3fe:	0304079b          	addiw	a5,s0,48
   2b402:	0ff7f793          	andi	a5,a5,255
   2b406:	bf45                	c.j	2b3b6 <elf::strtab::get(unsigned long, unsigned long*) const+0xc8>
   2b408:	85aa                	c.mv	a1,a0
   2b40a:	1000                	c.addi4spn	s0,sp,32
   2b40c:	8522                	c.mv	a0,s0
   2b40e:	ac2eb0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   2b412:	00006597          	auipc	a1,0x6
   2b416:	3f658593          	addi	a1,a1,1014 # 31808 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27d8>
   2b41a:	8522                	c.mv	a0,s0
   2b41c:	e24eb0ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   2b420:	85aa                	c.mv	a1,a0
   2b422:	0080                	c.addi4spn	s0,sp,64
   2b424:	8522                	c.mv	a0,s0
   2b426:	aaaeb0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    throw range_error("string offset " + std::to_string(offset) +
   2b42a:	85a2                	c.mv	a1,s0
   2b42c:	8526                	c.mv	a0,s1
   2b42e:	e22eb0ef          	jal	ra,16a50 <std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   2b432:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   2b434:	089c                	c.addi4spn	a5,sp,80
   2b436:	00f50463          	beq	a0,a5,2b43e <elf::strtab::get(unsigned long, unsigned long*) const+0x150>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2b43a:	b66eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2b43e:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   2b440:	181c                	c.addi4spn	a5,sp,48
   2b442:	00f50463          	beq	a0,a5,2b44a <elf::strtab::get(unsigned long, unsigned long*) const+0x15c>
   2b446:	b5aeb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2b44a:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2b44c:	081c                	c.addi4spn	a5,sp,16
   2b44e:	00f50463          	beq	a0,a5,2b456 <elf::strtab::get(unsigned long, unsigned long*) const+0x168>
   2b452:	b4eeb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
                      " exceeds section size");
   2b456:	0000f617          	auipc	a2,0xf
   2b45a:	fa263603          	ld	a2,-94(a2) # 3a3f8 <std::range_error::~range_error()@GLIBCXX_3.4>
   2b45e:	0000f597          	auipc	a1,0xf
   2b462:	10a5b583          	ld	a1,266(a1) # 3a568 <typeinfo for std::range_error@GLIBCXX_3.4>
   2b466:	8526                	c.mv	a0,s1
   2b468:	cf8eb0ef          	jal	ra,16960 <__cxa_throw@plt>
  if (p == m->end)
   2b46c:	eaf683e3          	beq	a3,a5,2b312 <elf::strtab::get(unsigned long, unsigned long*) const+0x24>

  if (len_out)
   2b470:	c219                	c.beqz	a2,2b476 <elf::strtab::get(unsigned long, unsigned long*) const+0x188>
    *len_out = p - start;
   2b472:	8f89                	c.sub	a5,a0
   2b474:	e21c                	c.sd	a5,0(a2)
  return start;
}
   2b476:	70e6                	c.ldsp	ra,120(sp)
   2b478:	7446                	c.ldsp	s0,112(sp)
   2b47a:	74a6                	c.ldsp	s1,104(sp)
   2b47c:	6109                	c.addi16sp	sp,128
   2b47e:	8082                	c.jr	ra
   2b480:	0000f797          	auipc	a5,0xf
   2b484:	ed87b783          	ld	a5,-296(a5) # 3a358 <vtable for elf::format_error@@Base+0x770>
   2b488:	07c1                	c.addi	a5,16
   2b48a:	e01c                	c.sd	a5,0(s0)
    throw format_error("unterminated string");
   2b48c:	0000f617          	auipc	a2,0xf
   2b490:	0f463603          	ld	a2,244(a2) # 3a580 <elf::format_error::~format_error()@@Base+0xe146>
   2b494:	0000f597          	auipc	a1,0xf
   2b498:	ea45b583          	ld	a1,-348(a1) # 3a338 <typeinfo for elf::format_error@@Base+0x7f8>
   2b49c:	8522                	c.mv	a0,s0
   2b49e:	cc2eb0ef          	jal	ra,16960 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   2b4a2:	842a                	c.mv	s0,a0
   2b4a4:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   2b4a6:	089c                	c.addi4spn	a5,sp,80
   2b4a8:	00f50463          	beq	a0,a5,2b4b0 <elf::strtab::get(unsigned long, unsigned long*) const+0x1c2>
   2b4ac:	af4eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2b4b0:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   2b4b2:	181c                	c.addi4spn	a5,sp,48
   2b4b4:	00f50463          	beq	a0,a5,2b4bc <elf::strtab::get(unsigned long, unsigned long*) const+0x1ce>
   2b4b8:	ae8eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2b4bc:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2b4be:	081c                	c.addi4spn	a5,sp,16
   2b4c0:	00f50463          	beq	a0,a5,2b4c8 <elf::strtab::get(unsigned long, unsigned long*) const+0x1da>
   2b4c4:	adceb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
                      " exceeds section size");
   2b4c8:	8526                	c.mv	a0,s1
   2b4ca:	a86eb0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2b4ce:	8522                	c.mv	a0,s0
   2b4d0:	cc0eb0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2b4d4:	842a                	c.mv	s0,a0
   2b4d6:	bfe9                	c.j	2b4b0 <elf::strtab::get(unsigned long, unsigned long*) const+0x1c2>
   2b4d8:	842a                	c.mv	s0,a0
   2b4da:	b7cd                	c.j	2b4bc <elf::strtab::get(unsigned long, unsigned long*) const+0x1ce>
   2b4dc:	842a                	c.mv	s0,a0
   2b4de:	b7ed                	c.j	2b4c8 <elf::strtab::get(unsigned long, unsigned long*) const+0x1da>
    throw format_error("unterminated string");
   2b4e0:	84aa                	c.mv	s1,a0
   2b4e2:	8522                	c.mv	a0,s0
   2b4e4:	a6ceb0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2b4e8:	8526                	c.mv	a0,s1
   2b4ea:	ca6eb0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002b4ee <elf::section::get_name(unsigned long*) const>:
const char *section::get_name(size_t *len_out) const {
   2b4ee:	7139                	c.addi16sp	sp,-64
   2b4f0:	fc06                	c.sdsp	ra,56(sp)
   2b4f2:	f822                	c.sdsp	s0,48(sp)
   2b4f4:	f426                	c.sdsp	s1,40(sp)
   2b4f6:	f04a                	c.sdsp	s2,32(sp)
   2b4f8:	ec4e                	c.sdsp	s3,24(sp)
   2b4fa:	842a                	c.mv	s0,a0
   2b4fc:	84ae                	c.mv	s1,a1
   2b4fe:	00053903          	ld	s2,0(a0)
  if (!m->name)
   2b502:	05093783          	ld	a5,80(s2)
   2b506:	cf91                	c.beqz	a5,2b522 <elf::section::get_name(unsigned long*) const+0x34>
  if (len_out)
   2b508:	c481                	c.beqz	s1,2b510 <elf::section::get_name(unsigned long*) const+0x22>
    *len_out = m->name_len;
   2b50a:	601c                	c.ld	a5,0(s0)
   2b50c:	6fbc                	c.ld	a5,88(a5)
   2b50e:	e09c                	c.sd	a5,0(s1)
  return m->name;
   2b510:	601c                	c.ld	a5,0(s0)
   2b512:	6ba8                	c.ld	a0,80(a5)
}
   2b514:	70e2                	c.ldsp	ra,56(sp)
   2b516:	7442                	c.ldsp	s0,48(sp)
   2b518:	74a2                	c.ldsp	s1,40(sp)
   2b51a:	7902                	c.ldsp	s2,32(sp)
   2b51c:	69e2                	c.ldsp	s3,24(sp)
   2b51e:	6121                	c.addi16sp	sp,64
   2b520:	8082                	c.jr	ra
    m->name = m->f.get_section(m->f.get_hdr().shstrndx)
   2b522:	854a                	c.mv	a0,s2
   2b524:	95fff0ef          	jal	ra,2ae82 <elf::elf::get_hdr() const>
   2b528:	03e55583          	lhu	a1,62(a0)
   2b52c:	854a                	c.mv	a0,s2
   2b52e:	9a9ff0ef          	jal	ra,2aed6 <elf::elf::get_section(unsigned int) const>
   2b532:	85aa                	c.mv	a1,a0
                  .as_strtab()
   2b534:	890a                	c.mv	s2,sp
   2b536:	854a                	c.mv	a0,s2
   2b538:	c87ff0ef          	jal	ra,2b1be <elf::section::as_strtab() const>
   2b53c:	00043983          	ld	s3,0(s0)
                  .get(m->hdr.name, &m->name_len);
   2b540:	05898613          	addi	a2,s3,88
   2b544:	0109e583          	lwu	a1,16(s3)
   2b548:	854a                	c.mv	a0,s2
   2b54a:	da5ff0ef          	jal	ra,2b2ee <elf::strtab::get(unsigned long, unsigned long*) const>
    m->name = m->f.get_section(m->f.get_hdr().shstrndx)
   2b54e:	04a9b823          	sd	a0,80(s3)
	if (_M_pi != nullptr)
   2b552:	6922                	c.ldsp	s2,8(sp)
   2b554:	fa090ae3          	beq	s2,zero,2b508 <elf::section::get_name(unsigned long*) const+0x1a>
    if (__is_single_threaded())
   2b558:	0000f797          	auipc	a5,0xf
   2b55c:	f407b783          	ld	a5,-192(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b560:	0007c783          	lbu	a5,0(a5)
   2b564:	c7b9                	c.beqz	a5,2b5b2 <elf::section::get_name(unsigned long*) const+0xc4>
    _Atomic_word __result = *__mem;
   2b566:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   2b56a:	fff5079b          	addiw	a5,a0,-1
   2b56e:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2b572:	4785                	c.li	a5,1
   2b574:	f8f51ae3          	bne	a0,a5,2b508 <elf::section::get_name(unsigned long*) const+0x1a>
	_M_dispose();
   2b578:	00093783          	ld	a5,0(s2)
   2b57c:	6b9c                	c.ld	a5,16(a5)
   2b57e:	854a                	c.mv	a0,s2
   2b580:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2b582:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2b586:	0000f797          	auipc	a5,0xf
   2b58a:	f127b783          	ld	a5,-238(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b58e:	0007c783          	lbu	a5,0(a5)
   2b592:	c795                	c.beqz	a5,2b5be <elf::section::get_name(unsigned long*) const+0xd0>
    _Atomic_word __result = *__mem;
   2b594:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   2b598:	fff5079b          	addiw	a5,a0,-1
   2b59c:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2b5a0:	4785                	c.li	a5,1
   2b5a2:	f6f513e3          	bne	a0,a5,2b508 <elf::section::get_name(unsigned long*) const+0x1a>
	    _M_destroy();
   2b5a6:	00093783          	ld	a5,0(s2)
   2b5aa:	6f9c                	c.ld	a5,24(a5)
   2b5ac:	854a                	c.mv	a0,s2
   2b5ae:	9782                	c.jalr	a5
   2b5b0:	bfa1                	c.j	2b508 <elf::section::get_name(unsigned long*) const+0x1a>
      return __exchange_and_add(__mem, __val);
   2b5b2:	55fd                	c.li	a1,-1
   2b5b4:	03090513          	addi	a0,s2,48
   2b5b8:	838eb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b5bc:	bf5d                	c.j	2b572 <elf::section::get_name(unsigned long*) const+0x84>
   2b5be:	55fd                	c.li	a1,-1
   2b5c0:	03490513          	addi	a0,s2,52
   2b5c4:	82ceb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b5c8:	bfe1                	c.j	2b5a0 <elf::section::get_name(unsigned long*) const+0xb2>
	if (_M_pi != nullptr)
   2b5ca:	842a                	c.mv	s0,a0
   2b5cc:	6522                	c.ldsp	a0,8(sp)
   2b5ce:	c511                	c.beqz	a0,2b5da <elf::section::get_name(unsigned long*) const+0xec>
	  _M_pi->_M_release();
   2b5d0:	0000f317          	auipc	t1,0xf
   2b5d4:	e1033303          	ld	t1,-496(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   2b5d8:	9302                	c.jalr	t1
   2b5da:	8522                	c.mv	a0,s0
   2b5dc:	bb4eb0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002b5e0 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>:
const section &elf::get_section(const std::string &name) const {
   2b5e0:	7179                	c.addi16sp	sp,-48
   2b5e2:	f406                	c.sdsp	ra,40(sp)
   2b5e4:	f022                	c.sdsp	s0,32(sp)
   2b5e6:	ec26                	c.sdsp	s1,24(sp)
   2b5e8:	e84a                	c.sdsp	s2,16(sp)
   2b5ea:	e44e                	c.sdsp	s3,8(sp)
   2b5ec:	e052                	c.sdsp	s4,0(sp)
   2b5ee:	8a2a                	c.mv	s4,a0
   2b5f0:	84ae                	c.mv	s1,a1
  for (auto &sec : sections())
   2b5f2:	8d5ff0ef          	jal	ra,2aec6 <elf::elf::sections() const>
      : _M_current(__i) { }
   2b5f6:	6100                	c.ld	s0,0(a0)
   2b5f8:	00853983          	ld	s3,8(a0)
   2b5fc:	01340f63          	beq	s0,s3,2b61a <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x3a>
   2b600:	8922                	c.mv	s2,s0
    if (name == sec.get_name(nullptr))
   2b602:	4581                	c.li	a1,0
   2b604:	8522                	c.mv	a0,s0
   2b606:	ee9ff0ef          	jal	ra,2b4ee <elf::section::get_name(unsigned long*) const>
    { return __lhs.compare(__rhs) == 0; }
   2b60a:	85aa                	c.mv	a1,a0
   2b60c:	8526                	c.mv	a0,s1
   2b60e:	802eb0ef          	jal	ra,16610 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
   2b612:	c901                	c.beqz	a0,2b622 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x42>
  for (auto &sec : sections())
   2b614:	0441                	c.addi	s0,16
   2b616:	fe8995e3          	bne	s3,s0,2b600 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x20>
  return m->invalid_section;
   2b61a:	000a3903          	ld	s2,0(s4)
   2b61e:	08090913          	addi	s2,s2,128
}
   2b622:	854a                	c.mv	a0,s2
   2b624:	70a2                	c.ldsp	ra,40(sp)
   2b626:	7402                	c.ldsp	s0,32(sp)
   2b628:	64e2                	c.ldsp	s1,24(sp)
   2b62a:	6942                	c.ldsp	s2,16(sp)
   2b62c:	69a2                	c.ldsp	s3,8(sp)
   2b62e:	6a02                	c.ldsp	s4,0(sp)
   2b630:	6145                	c.addi16sp	sp,48
   2b632:	8082                	c.jr	ra

000000000002b634 <elf::sym::get_name(unsigned long*) const>:

sym::sym(elf f, const void *data, strtab strs) : strs(strs) {
  canon_hdr(&this->data, data, f.get_hdr().ei_class, f.get_hdr().ei_data);
}

const char *sym::get_name(size_t *len_out) const {
   2b634:	1141                	c.addi	sp,-16
   2b636:	e406                	c.sdsp	ra,8(sp)
   2b638:	862e                	c.mv	a2,a1
  return strs.get(get_data().name, len_out);
   2b63a:	01056583          	lwu	a1,16(a0)
   2b63e:	cb1ff0ef          	jal	ra,2b2ee <elf::strtab::get(unsigned long, unsigned long*) const>
}
   2b642:	60a2                	c.ldsp	ra,8(sp)
   2b644:	0141                	c.addi	sp,16
   2b646:	8082                	c.jr	ra

000000000002b648 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)>:
  const elf f;
  const char *data, *end;
  const strtab strs;
};

symtab::symtab(elf f, const void *data, size_t size, strtab strs)
   2b648:	715d                	c.addi16sp	sp,-80
   2b64a:	e486                	c.sdsp	ra,72(sp)
   2b64c:	e0a2                	c.sdsp	s0,64(sp)
   2b64e:	fc26                	c.sdsp	s1,56(sp)
   2b650:	f84a                	c.sdsp	s2,48(sp)
   2b652:	f44e                	c.sdsp	s3,40(sp)
   2b654:	f052                	c.sdsp	s4,32(sp)
   2b656:	ec56                	c.sdsp	s5,24(sp)
   2b658:	e85a                	c.sdsp	s6,16(sp)
   2b65a:	e45e                	c.sdsp	s7,8(sp)
   2b65c:	892a                	c.mv	s2,a0
   2b65e:	8a2e                	c.mv	s4,a1
   2b660:	89b2                	c.mv	s3,a2
   2b662:	84ba                	c.mv	s1,a4
    : m(make_shared<impl>(f, (const char *)data, (const char *)data + size,
   2b664:	00d60ab3          	add	s5,a2,a3
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   2b668:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2b66c:	06800513          	addi	a0,zero,104
   2b670:	940eb0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   2b674:	842a                	c.mv	s0,a0
   2b676:	00052423          	sw	zero,8(a0)
   2b67a:	00052623          	sw	zero,12(a0)
   2b67e:	00052823          	sw	zero,16(a0)
   2b682:	00052a23          	sw	zero,20(a0)
   2b686:	00052c23          	sw	zero,24(a0)
   2b68a:	00052e23          	sw	zero,28(a0)
   2b68e:	02053023          	sd	zero,32(a0)
   2b692:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   2b696:	4785                	c.li	a5,1
   2b698:	d91c                	c.sw	a5,48(a0)
   2b69a:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   2b69c:	0000f797          	auipc	a5,0xf
   2b6a0:	cc47b783          	ld	a5,-828(a5) # 3a360 <vtable for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x648>
   2b6a4:	07c1                	c.addi	a5,16
   2b6a6:	e11c                	c.sd	a5,0(a0)
   2b6a8:	03850b13          	addi	s6,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2b6ac:	0004bb83          	ld	s7,0(s1)
      : _M_pi(__r._M_pi)
   2b6b0:	6484                	c.ld	s1,8(s1)
	if (_M_pi != nullptr)
   2b6b2:	c899                	c.beqz	s1,2b6c8 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x80>
    if (__is_single_threaded())
   2b6b4:	0000f797          	auipc	a5,0xf
   2b6b8:	de47b783          	ld	a5,-540(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b6bc:	0007c783          	lbu	a5,0(a5)
   2b6c0:	cfad                	c.beqz	a5,2b73a <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xf2>
  { *__mem += __val; }
   2b6c2:	589c                	c.lw	a5,48(s1)
   2b6c4:	2785                	c.addiw	a5,1
   2b6c6:	d89c                	c.sw	a5,48(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2b6c8:	000a3783          	ld	a5,0(s4)
   2b6cc:	fc1c                	c.sd	a5,56(s0)
      : _M_pi(__r._M_pi)
   2b6ce:	008a3503          	ld	a0,8(s4)
   2b6d2:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   2b6d4:	c919                	c.beqz	a0,2b6ea <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xa2>
    if (__is_single_threaded())
   2b6d6:	0000f717          	auipc	a4,0xf
   2b6da:	dc273703          	ld	a4,-574(a4) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b6de:	00074703          	lbu	a4,0(a4)
   2b6e2:	c335                	c.beqz	a4,2b746 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xfe>
  { *__mem += __val; }
   2b6e4:	5918                	c.lw	a4,48(a0)
   2b6e6:	2705                	c.addiw	a4,1
   2b6e8:	d918                	c.sw	a4,48(a0)
      : f(f), data(data), end(end), strs(strs) {}
   2b6ea:	05343423          	sd	s3,72(s0)
   2b6ee:	05543823          	sd	s5,80(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2b6f2:	05743c23          	sd	s7,88(s0)
      : _M_pi(__r._M_pi)
   2b6f6:	f024                	c.sd	s1,96(s0)
	if (_M_pi != nullptr)
   2b6f8:	c095                	c.beqz	s1,2b71c <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xd4>
    if (__is_single_threaded())
   2b6fa:	0000f797          	auipc	a5,0xf
   2b6fe:	d9e7b783          	ld	a5,-610(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b702:	0007c783          	lbu	a5,0(a5)
   2b706:	c7b1                	c.beqz	a5,2b752 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x10a>
  { *__mem += __val; }
   2b708:	589c                	c.lw	a5,48(s1)
   2b70a:	2785                	c.addiw	a5,1
   2b70c:	d89c                	c.sw	a5,48(s1)
    _Atomic_word __result = *__mem;
   2b70e:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   2b710:	fff5079b          	addiw	a5,a0,-1
   2b714:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2b716:	4785                	c.li	a5,1
   2b718:	04f50f63          	beq	a0,a5,2b776 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x12e>
	  _M_pi = __pi;
   2b71c:	00893423          	sd	s0,8(s2)
	  __p = __pi->_M_ptr();
   2b720:	01693023          	sd	s6,0(s2)
                          strs)) {}
   2b724:	60a6                	c.ldsp	ra,72(sp)
   2b726:	6406                	c.ldsp	s0,64(sp)
   2b728:	74e2                	c.ldsp	s1,56(sp)
   2b72a:	7942                	c.ldsp	s2,48(sp)
   2b72c:	79a2                	c.ldsp	s3,40(sp)
   2b72e:	7a02                	c.ldsp	s4,32(sp)
   2b730:	6ae2                	c.ldsp	s5,24(sp)
   2b732:	6b42                	c.ldsp	s6,16(sp)
   2b734:	6ba2                	c.ldsp	s7,8(sp)
   2b736:	6161                	c.addi16sp	sp,80
   2b738:	8082                	c.jr	ra
      __atomic_add(__mem, __val);
   2b73a:	4585                	c.li	a1,1
   2b73c:	03048513          	addi	a0,s1,48
   2b740:	e71ea0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2b744:	b751                	c.j	2b6c8 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x80>
   2b746:	4585                	c.li	a1,1
   2b748:	03050513          	addi	a0,a0,48
   2b74c:	e65ea0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2b750:	bf69                	c.j	2b6ea <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xa2>
   2b752:	4585                	c.li	a1,1
   2b754:	03048513          	addi	a0,s1,48
   2b758:	e59ea0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
    if (__is_single_threaded())
   2b75c:	0000f797          	auipc	a5,0xf
   2b760:	d3c7b783          	ld	a5,-708(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b764:	0007c783          	lbu	a5,0(a5)
   2b768:	f3dd                	c.bnez	a5,2b70e <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xc6>
      return __exchange_and_add(__mem, __val);
   2b76a:	55fd                	c.li	a1,-1
   2b76c:	03048513          	addi	a0,s1,48
   2b770:	e81ea0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b774:	b74d                	c.j	2b716 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xce>
	_M_dispose();
   2b776:	609c                	c.ld	a5,0(s1)
   2b778:	6b9c                	c.ld	a5,16(a5)
   2b77a:	8526                	c.mv	a0,s1
   2b77c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2b77e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2b782:	0000f797          	auipc	a5,0xf
   2b786:	d167b783          	ld	a5,-746(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b78a:	0007c783          	lbu	a5,0(a5)
   2b78e:	cf89                	c.beqz	a5,2b7a8 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x160>
    _Atomic_word __result = *__mem;
   2b790:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   2b792:	fff5079b          	addiw	a5,a0,-1
   2b796:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2b798:	4785                	c.li	a5,1
   2b79a:	f8f511e3          	bne	a0,a5,2b71c <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xd4>
	    _M_destroy();
   2b79e:	609c                	c.ld	a5,0(s1)
   2b7a0:	6f9c                	c.ld	a5,24(a5)
   2b7a2:	8526                	c.mv	a0,s1
   2b7a4:	9782                	c.jalr	a5
   2b7a6:	bf9d                	c.j	2b71c <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xd4>
      return __exchange_and_add(__mem, __val);
   2b7a8:	55fd                	c.li	a1,-1
   2b7aa:	03448513          	addi	a0,s1,52
   2b7ae:	e43ea0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b7b2:	b7dd                	c.j	2b798 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x150>

000000000002b7b4 <elf::section::as_symtab() const>:
symtab section::as_symtab() const {
   2b7b4:	715d                	c.addi16sp	sp,-80
   2b7b6:	e486                	c.sdsp	ra,72(sp)
   2b7b8:	e0a2                	c.sdsp	s0,64(sp)
   2b7ba:	fc26                	c.sdsp	s1,56(sp)
   2b7bc:	f84a                	c.sdsp	s2,48(sp)
   2b7be:	f44e                	c.sdsp	s3,40(sp)
   2b7c0:	f052                	c.sdsp	s4,32(sp)
   2b7c2:	84aa                	c.mv	s1,a0
   2b7c4:	842e                	c.mv	s0,a1
      { return _M_ptr; }
   2b7c6:	619c                	c.ld	a5,0(a1)
  if (m->hdr.type != sht::symtab && m->hdr.type != sht::dynsym)
   2b7c8:	4bd8                	c.lw	a4,20(a5)
   2b7ca:	4689                	c.li	a3,2
   2b7cc:	00d70563          	beq	a4,a3,2b7d6 <elf::section::as_symtab() const+0x22>
   2b7d0:	46ad                	c.li	a3,11
   2b7d2:	02d71563          	bne	a4,a3,2b7fc <elf::section::as_symtab() const+0x48>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2b7d6:	6398                	c.ld	a4,0(a5)
   2b7d8:	e03a                	c.sdsp	a4,0(sp)
      : _M_pi(__r._M_pi)
   2b7da:	6788                	c.ld	a0,8(a5)
   2b7dc:	e42a                	c.sdsp	a0,8(sp)
	if (_M_pi != nullptr)
   2b7de:	c919                	c.beqz	a0,2b7f4 <elf::section::as_symtab() const+0x40>
    if (__is_single_threaded())
   2b7e0:	0000f797          	auipc	a5,0xf
   2b7e4:	cb87b783          	ld	a5,-840(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b7e8:	0007c783          	lbu	a5,0(a5)
   2b7ec:	c3b9                	c.beqz	a5,2b832 <elf::section::as_symtab() const+0x7e>
  { *__mem += __val; }
   2b7ee:	591c                	c.lw	a5,48(a0)
   2b7f0:	2785                	c.addiw	a5,1
   2b7f2:	d91c                	c.sw	a5,48(a0)
                m->f.get_section(get_hdr().link).as_strtab());
   2b7f4:	8522                	c.mv	a0,s0
   2b7f6:	85dff0ef          	jal	ra,2b052 <elf::section::data() const>
   2b7fa:	a091                	c.j	2b83e <elf::section::as_symtab() const+0x8a>
    throw section_type_mismatch("cannot use section as symtab");
   2b7fc:	4541                	c.li	a0,16
   2b7fe:	e93ea0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2b802:	842a                	c.mv	s0,a0
      : std::logic_error(what_arg) {}
   2b804:	00006597          	auipc	a1,0x6
   2b808:	01c58593          	addi	a1,a1,28 # 31820 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27f0>
   2b80c:	804eb0ef          	jal	ra,16810 <std::logic_error::logic_error(char const*)@plt>
   2b810:	0000f797          	auipc	a5,0xf
   2b814:	bc07b783          	ld	a5,-1088(a5) # 3a3d0 <vtable for elf::section_type_mismatch@@Base+0x7c0>
   2b818:	07c1                	c.addi	a5,16
   2b81a:	e01c                	c.sd	a5,0(s0)
   2b81c:	0000f617          	auipc	a2,0xf
   2b820:	aa463603          	ld	a2,-1372(a2) # 3a2c0 <elf::section_type_mismatch::~section_type_mismatch()@@Base+0xdd66>
   2b824:	0000f597          	auipc	a1,0xf
   2b828:	ad45b583          	ld	a1,-1324(a1) # 3a2f8 <typeinfo for elf::section_type_mismatch@@Base+0x7a0>
   2b82c:	8522                	c.mv	a0,s0
   2b82e:	932eb0ef          	jal	ra,16960 <__cxa_throw@plt>
      __atomic_add(__mem, __val);
   2b832:	4585                	c.li	a1,1
   2b834:	03050513          	addi	a0,a0,48
   2b838:	d79ea0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2b83c:	bf65                	c.j	2b7f4 <elf::section::as_symtab() const+0x40>
                m->f.get_section(get_hdr().link).as_strtab());
   2b83e:	892a                	c.mv	s2,a0
   2b840:	8522                	c.mv	a0,s0
   2b842:	8d1ff0ef          	jal	ra,2b112 <elf::section::size() const>
   2b846:	89aa                	c.mv	s3,a0
   2b848:	00043a03          	ld	s4,0(s0)
   2b84c:	8522                	c.mv	a0,s0
   2b84e:	ffeff0ef          	jal	ra,2b04c <elf::section::get_hdr() const>
   2b852:	02855583          	lhu	a1,40(a0)
   2b856:	8552                	c.mv	a0,s4
   2b858:	e7eff0ef          	jal	ra,2aed6 <elf::elf::get_section(unsigned int) const>
   2b85c:	85aa                	c.mv	a1,a0
   2b85e:	0808                	c.addi4spn	a0,sp,16
   2b860:	95fff0ef          	jal	ra,2b1be <elf::section::as_strtab() const>
   2b864:	0818                	c.addi4spn	a4,sp,16
   2b866:	86ce                	c.mv	a3,s3
   2b868:	864a                	c.mv	a2,s2
   2b86a:	858a                	c.mv	a1,sp
   2b86c:	8526                	c.mv	a0,s1
   2b86e:	ddbff0ef          	jal	ra,2b648 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)>
	if (_M_pi != nullptr)
   2b872:	6462                	c.ldsp	s0,24(sp)
   2b874:	cc19                	c.beqz	s0,2b892 <elf::section::as_symtab() const+0xde>
    if (__is_single_threaded())
   2b876:	0000f797          	auipc	a5,0xf
   2b87a:	c227b783          	ld	a5,-990(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b87e:	0007c783          	lbu	a5,0(a5)
   2b882:	c3a9                	c.beqz	a5,2b8c4 <elf::section::as_symtab() const+0x110>
    _Atomic_word __result = *__mem;
   2b884:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2b886:	fff5079b          	addiw	a5,a0,-1
   2b88a:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2b88c:	4785                	c.li	a5,1
   2b88e:	04f50163          	beq	a0,a5,2b8d0 <elf::section::as_symtab() const+0x11c>
	if (_M_pi != nullptr)
   2b892:	6422                	c.ldsp	s0,8(sp)
   2b894:	cc19                	c.beqz	s0,2b8b2 <elf::section::as_symtab() const+0xfe>
    if (__is_single_threaded())
   2b896:	0000f797          	auipc	a5,0xf
   2b89a:	c027b783          	ld	a5,-1022(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b89e:	0007c783          	lbu	a5,0(a5)
   2b8a2:	c7b5                	c.beqz	a5,2b90e <elf::section::as_symtab() const+0x15a>
    _Atomic_word __result = *__mem;
   2b8a4:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2b8a6:	fff5079b          	addiw	a5,a0,-1
   2b8aa:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2b8ac:	4785                	c.li	a5,1
   2b8ae:	06f50663          	beq	a0,a5,2b91a <elf::section::as_symtab() const+0x166>
}
   2b8b2:	8526                	c.mv	a0,s1
   2b8b4:	60a6                	c.ldsp	ra,72(sp)
   2b8b6:	6406                	c.ldsp	s0,64(sp)
   2b8b8:	74e2                	c.ldsp	s1,56(sp)
   2b8ba:	7942                	c.ldsp	s2,48(sp)
   2b8bc:	79a2                	c.ldsp	s3,40(sp)
   2b8be:	7a02                	c.ldsp	s4,32(sp)
   2b8c0:	6161                	c.addi16sp	sp,80
   2b8c2:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2b8c4:	55fd                	c.li	a1,-1
   2b8c6:	03040513          	addi	a0,s0,48
   2b8ca:	d27ea0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b8ce:	bf7d                	c.j	2b88c <elf::section::as_symtab() const+0xd8>
	_M_dispose();
   2b8d0:	601c                	c.ld	a5,0(s0)
   2b8d2:	6b9c                	c.ld	a5,16(a5)
   2b8d4:	8522                	c.mv	a0,s0
   2b8d6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2b8d8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2b8dc:	0000f797          	auipc	a5,0xf
   2b8e0:	bbc7b783          	ld	a5,-1092(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b8e4:	0007c783          	lbu	a5,0(a5)
   2b8e8:	cf89                	c.beqz	a5,2b902 <elf::section::as_symtab() const+0x14e>
    _Atomic_word __result = *__mem;
   2b8ea:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2b8ec:	fff5079b          	addiw	a5,a0,-1
   2b8f0:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2b8f2:	4785                	c.li	a5,1
   2b8f4:	f8f51fe3          	bne	a0,a5,2b892 <elf::section::as_symtab() const+0xde>
	    _M_destroy();
   2b8f8:	601c                	c.ld	a5,0(s0)
   2b8fa:	6f9c                	c.ld	a5,24(a5)
   2b8fc:	8522                	c.mv	a0,s0
   2b8fe:	9782                	c.jalr	a5
   2b900:	bf49                	c.j	2b892 <elf::section::as_symtab() const+0xde>
      return __exchange_and_add(__mem, __val);
   2b902:	55fd                	c.li	a1,-1
   2b904:	03440513          	addi	a0,s0,52
   2b908:	ce9ea0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b90c:	b7dd                	c.j	2b8f2 <elf::section::as_symtab() const+0x13e>
   2b90e:	55fd                	c.li	a1,-1
   2b910:	03040513          	addi	a0,s0,48
   2b914:	cddea0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b918:	bf51                	c.j	2b8ac <elf::section::as_symtab() const+0xf8>
	_M_dispose();
   2b91a:	601c                	c.ld	a5,0(s0)
   2b91c:	6b9c                	c.ld	a5,16(a5)
   2b91e:	8522                	c.mv	a0,s0
   2b920:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2b922:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2b926:	0000f797          	auipc	a5,0xf
   2b92a:	b727b783          	ld	a5,-1166(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b92e:	0007c783          	lbu	a5,0(a5)
   2b932:	cf89                	c.beqz	a5,2b94c <elf::section::as_symtab() const+0x198>
    _Atomic_word __result = *__mem;
   2b934:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2b936:	fff5079b          	addiw	a5,a0,-1
   2b93a:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2b93c:	4785                	c.li	a5,1
   2b93e:	f6f51ae3          	bne	a0,a5,2b8b2 <elf::section::as_symtab() const+0xfe>
	    _M_destroy();
   2b942:	601c                	c.ld	a5,0(s0)
   2b944:	6f9c                	c.ld	a5,24(a5)
   2b946:	8522                	c.mv	a0,s0
   2b948:	9782                	c.jalr	a5
                m->f.get_section(get_hdr().link).as_strtab());
   2b94a:	b7a5                	c.j	2b8b2 <elf::section::as_symtab() const+0xfe>
      return __exchange_and_add(__mem, __val);
   2b94c:	55fd                	c.li	a1,-1
   2b94e:	03440513          	addi	a0,s0,52
   2b952:	c9fea0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b956:	b7dd                	c.j	2b93c <elf::section::as_symtab() const+0x188>
    throw section_type_mismatch("cannot use section as symtab");
   2b958:	84aa                	c.mv	s1,a0
   2b95a:	8522                	c.mv	a0,s0
   2b95c:	df5ea0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2b960:	8526                	c.mv	a0,s1
   2b962:	82eeb0ef          	jal	ra,16990 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   2b966:	842a                	c.mv	s0,a0
   2b968:	6562                	c.ldsp	a0,24(sp)
   2b96a:	c511                	c.beqz	a0,2b976 <elf::section::as_symtab() const+0x1c2>
	  _M_pi->_M_release();
   2b96c:	0000f317          	auipc	t1,0xf
   2b970:	a7433303          	ld	t1,-1420(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   2b974:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   2b976:	6522                	c.ldsp	a0,8(sp)
   2b978:	c511                	c.beqz	a0,2b984 <elf::section::as_symtab() const+0x1d0>
	  _M_pi->_M_release();
   2b97a:	0000f317          	auipc	t1,0xf
   2b97e:	a6633303          	ld	t1,-1434(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   2b982:	9302                	c.jalr	t1
   2b984:	8522                	c.mv	a0,s0
   2b986:	80aeb0ef          	jal	ra,16990 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   2b98a:	842a                	c.mv	s0,a0
   2b98c:	b7ed                	c.j	2b976 <elf::section::as_symtab() const+0x1c2>

000000000002b98e <elf::symtab::iterator::iterator(elf::symtab const&, char const*)>:

symtab::iterator::iterator(const symtab &tab, const char *pos)
   2b98e:	1101                	c.addi	sp,-32
   2b990:	ec06                	c.sdsp	ra,24(sp)
   2b992:	e822                	c.sdsp	s0,16(sp)
   2b994:	e426                	c.sdsp	s1,8(sp)
   2b996:	e04a                	c.sdsp	s2,0(sp)
   2b998:	842a                	c.mv	s0,a0
   2b99a:	84ae                	c.mv	s1,a1
   2b99c:	8932                	c.mv	s2,a2
      { return _M_ptr; }
   2b99e:	619c                	c.ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2b9a0:	6398                	c.ld	a4,0(a5)
   2b9a2:	e118                	c.sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   2b9a4:	6788                	c.ld	a0,8(a5)
   2b9a6:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   2b9a8:	c919                	c.beqz	a0,2b9be <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x30>
    if (__is_single_threaded())
   2b9aa:	0000f797          	auipc	a5,0xf
   2b9ae:	aee7b783          	ld	a5,-1298(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b9b2:	0007c783          	lbu	a5,0(a5)
   2b9b6:	cb95                	c.beqz	a5,2b9ea <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x5c>
  { *__mem += __val; }
   2b9b8:	591c                	c.lw	a5,48(a0)
   2b9ba:	2785                	c.addiw	a5,1
   2b9bc:	d91c                	c.sw	a5,48(a0)
      { return _M_ptr; }
   2b9be:	609c                	c.ld	a5,0(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2b9c0:	7398                	c.ld	a4,32(a5)
   2b9c2:	e818                	c.sd	a4,16(s0)
      : _M_pi(__r._M_pi)
   2b9c4:	7788                	c.ld	a0,40(a5)
   2b9c6:	ec08                	c.sd	a0,24(s0)
	if (_M_pi != nullptr)
   2b9c8:	c919                	c.beqz	a0,2b9de <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x50>
    if (__is_single_threaded())
   2b9ca:	0000f797          	auipc	a5,0xf
   2b9ce:	ace7b783          	ld	a5,-1330(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b9d2:	0007c783          	lbu	a5,0(a5)
   2b9d6:	c385                	c.beqz	a5,2b9f6 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x68>
  { *__mem += __val; }
   2b9d8:	591c                	c.lw	a5,48(a0)
   2b9da:	2785                	c.addiw	a5,1
   2b9dc:	d91c                	c.sw	a5,48(a0)
    : f(tab.m->f), strs(tab.m->strs), pos(pos) {
   2b9de:	03243023          	sd	s2,32(s0)
  if (f.get_hdr().ei_class == elfclass::_32)
   2b9e2:	8522                	c.mv	a0,s0
   2b9e4:	c9eff0ef          	jal	ra,2ae82 <elf::elf::get_hdr() const>
   2b9e8:	a829                	c.j	2ba02 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x74>
      __atomic_add(__mem, __val);
   2b9ea:	4585                	c.li	a1,1
   2b9ec:	03050513          	addi	a0,a0,48
   2b9f0:	bc1ea0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2b9f4:	b7e9                	c.j	2b9be <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x30>
   2b9f6:	4585                	c.li	a1,1
   2b9f8:	03050513          	addi	a0,a0,48
   2b9fc:	bb5ea0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2ba00:	bff9                	c.j	2b9de <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x50>
   2ba02:	00454683          	lbu	a3,4(a0)
   2ba06:	4705                	c.li	a4,1
    stride = sizeof(Sym<Elf32>);
  else
    stride = sizeof(Sym<Elf64>);
   2ba08:	47e1                	c.li	a5,24
  if (f.get_hdr().ei_class == elfclass::_32)
   2ba0a:	00e68963          	beq	a3,a4,2ba1c <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x8e>
   2ba0e:	f41c                	c.sd	a5,40(s0)
}
   2ba10:	60e2                	c.ldsp	ra,24(sp)
   2ba12:	6442                	c.ldsp	s0,16(sp)
   2ba14:	64a2                	c.ldsp	s1,8(sp)
   2ba16:	6902                	c.ldsp	s2,0(sp)
   2ba18:	6105                	c.addi16sp	sp,32
   2ba1a:	8082                	c.jr	ra
    stride = sizeof(Sym<Elf32>);
   2ba1c:	47c1                	c.li	a5,16
   2ba1e:	bfc5                	c.j	2ba0e <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x80>
	if (_M_pi != nullptr)
   2ba20:	84aa                	c.mv	s1,a0
   2ba22:	6c08                	c.ld	a0,24(s0)
   2ba24:	c511                	c.beqz	a0,2ba30 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0xa2>
	  _M_pi->_M_release();
   2ba26:	0000f317          	auipc	t1,0xf
   2ba2a:	9ba33303          	ld	t1,-1606(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   2ba2e:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   2ba30:	6408                	c.ld	a0,8(s0)
   2ba32:	c511                	c.beqz	a0,2ba3e <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0xb0>
	  _M_pi->_M_release();
   2ba34:	0000f317          	auipc	t1,0xf
   2ba38:	9ac33303          	ld	t1,-1620(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   2ba3c:	9302                	c.jalr	t1
   2ba3e:	8526                	c.mv	a0,s1
   2ba40:	f51ea0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002ba44 <elf::symtab::begin() const>:

symtab::iterator symtab::begin() const { return iterator(*this, m->data); }
   2ba44:	1141                	c.addi	sp,-16
   2ba46:	e406                	c.sdsp	ra,8(sp)
   2ba48:	e022                	c.sdsp	s0,0(sp)
   2ba4a:	842a                	c.mv	s0,a0
   2ba4c:	619c                	c.ld	a5,0(a1)
   2ba4e:	6b90                	c.ld	a2,16(a5)
   2ba50:	f3fff0ef          	jal	ra,2b98e <elf::symtab::iterator::iterator(elf::symtab const&, char const*)>
   2ba54:	8522                	c.mv	a0,s0
   2ba56:	60a2                	c.ldsp	ra,8(sp)
   2ba58:	6402                	c.ldsp	s0,0(sp)
   2ba5a:	0141                	c.addi	sp,16
   2ba5c:	8082                	c.jr	ra

000000000002ba5e <elf::symtab::end() const>:

symtab::iterator symtab::end() const { return iterator(*this, m->end); }
   2ba5e:	1141                	c.addi	sp,-16
   2ba60:	e406                	c.sdsp	ra,8(sp)
   2ba62:	e022                	c.sdsp	s0,0(sp)
   2ba64:	842a                	c.mv	s0,a0
   2ba66:	619c                	c.ld	a5,0(a1)
   2ba68:	6f90                	c.ld	a2,24(a5)
   2ba6a:	f25ff0ef          	jal	ra,2b98e <elf::symtab::iterator::iterator(elf::symtab const&, char const*)>
   2ba6e:	8522                	c.mv	a0,s0
   2ba70:	60a2                	c.ldsp	ra,8(sp)
   2ba72:	6402                	c.ldsp	s0,0(sp)
   2ba74:	0141                	c.addi	sp,16
   2ba76:	8082                	c.jr	ra

000000000002ba78 <elf::segment::segment(elf::elf const&, void const*)>:
segment::segment(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
   2ba78:	7179                	c.addi16sp	sp,-48
   2ba7a:	f406                	c.sdsp	ra,40(sp)
   2ba7c:	f022                	c.sdsp	s0,32(sp)
   2ba7e:	ec26                	c.sdsp	s1,24(sp)
   2ba80:	e84a                	c.sdsp	s2,16(sp)
   2ba82:	e44e                	c.sdsp	s3,8(sp)
   2ba84:	e052                	c.sdsp	s4,0(sp)
   2ba86:	892a                	c.mv	s2,a0
   2ba88:	84ae                	c.mv	s1,a1
   2ba8a:	89b2                	c.mv	s3,a2
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   2ba8c:	00053023          	sd	zero,0(a0)
   2ba90:	08800513          	addi	a0,zero,136
   2ba94:	d1dea0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   2ba98:	842a                	c.mv	s0,a0
   2ba9a:	00052423          	sw	zero,8(a0)
   2ba9e:	00052623          	sw	zero,12(a0)
   2baa2:	00052823          	sw	zero,16(a0)
   2baa6:	00052a23          	sw	zero,20(a0)
   2baaa:	00052c23          	sw	zero,24(a0)
   2baae:	00052e23          	sw	zero,28(a0)
   2bab2:	02053023          	sd	zero,32(a0)
   2bab6:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   2baba:	4785                	c.li	a5,1
   2babc:	d91c                	c.sw	a5,48(a0)
   2babe:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   2bac0:	0000f797          	auipc	a5,0xf
   2bac4:	9d07b783          	ld	a5,-1584(a5) # 3a490 <vtable for std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x820>
   2bac8:	07c1                	c.addi	a5,16
   2baca:	e11c                	c.sd	a5,0(a0)
   2bacc:	03850a13          	addi	s4,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2bad0:	609c                	c.ld	a5,0(s1)
   2bad2:	fd1c                	c.sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   2bad4:	6488                	c.ld	a0,8(s1)
   2bad6:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   2bad8:	c919                	c.beqz	a0,2baee <elf::segment::segment(elf::elf const&, void const*)+0x76>
    if (__is_single_threaded())
   2bada:	0000f717          	auipc	a4,0xf
   2bade:	9be73703          	ld	a4,-1602(a4) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2bae2:	00074703          	lbu	a4,0(a4)
   2bae6:	c305                	c.beqz	a4,2bb06 <elf::segment::segment(elf::elf const&, void const*)+0x8e>
  { *__mem += __val; }
   2bae8:	5918                	c.lw	a4,48(a0)
   2baea:	2705                	c.addiw	a4,1
   2baec:	d918                	c.sw	a4,48(a0)
  impl(const elf &f) : f(f), data(nullptr) {}
   2baee:	08043023          	sd	zero,128(s0)
	  _M_pi = __pi;
   2baf2:	00893423          	sd	s0,8(s2)
	  __p = __pi->_M_ptr();
   2baf6:	01493023          	sd	s4,0(s2)
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
   2bafa:	04840413          	addi	s0,s0,72
   2bafe:	8526                	c.mv	a0,s1
   2bb00:	b82ff0ef          	jal	ra,2ae82 <elf::elf::get_hdr() const>
   2bb04:	a039                	c.j	2bb12 <elf::segment::segment(elf::elf const&, void const*)+0x9a>
      __atomic_add(__mem, __val);
   2bb06:	4585                	c.li	a1,1
   2bb08:	03050513          	addi	a0,a0,48
   2bb0c:	aa5ea0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2bb10:	bff9                	c.j	2baee <elf::segment::segment(elf::elf const&, void const*)+0x76>
   2bb12:	00454a03          	lbu	s4,4(a0)
   2bb16:	8526                	c.mv	a0,s1
   2bb18:	b6aff0ef          	jal	ra,2ae82 <elf::elf::get_hdr() const>
   2bb1c:	00554683          	lbu	a3,5(a0)
   2bb20:	8652                	c.mv	a2,s4
   2bb22:	85ce                	c.mv	a1,s3
   2bb24:	8522                	c.mv	a0,s0
   2bb26:	0000f317          	auipc	t1,0xf
   2bb2a:	ac233303          	ld	t1,-1342(t1) # 3a5e8 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xd5cc>
   2bb2e:	9302                	c.jalr	t1
}
   2bb30:	70a2                	c.ldsp	ra,40(sp)
   2bb32:	7402                	c.ldsp	s0,32(sp)
   2bb34:	64e2                	c.ldsp	s1,24(sp)
   2bb36:	6942                	c.ldsp	s2,16(sp)
   2bb38:	69a2                	c.ldsp	s3,8(sp)
   2bb3a:	6a02                	c.ldsp	s4,0(sp)
   2bb3c:	6145                	c.addi16sp	sp,48
   2bb3e:	8082                	c.jr	ra
	if (_M_pi != nullptr)
   2bb40:	842a                	c.mv	s0,a0
   2bb42:	00893503          	ld	a0,8(s2)
   2bb46:	c511                	c.beqz	a0,2bb52 <elf::segment::segment(elf::elf const&, void const*)+0xda>
	  _M_pi->_M_release();
   2bb48:	0000f317          	auipc	t1,0xf
   2bb4c:	89833303          	ld	t1,-1896(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   2bb50:	9302                	c.jalr	t1
   2bb52:	8522                	c.mv	a0,s0
   2bb54:	e3dea0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002bb58 <elf::section::section(elf::elf const&, void const*)>:
section::section(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
   2bb58:	7179                	c.addi16sp	sp,-48
   2bb5a:	f406                	c.sdsp	ra,40(sp)
   2bb5c:	f022                	c.sdsp	s0,32(sp)
   2bb5e:	ec26                	c.sdsp	s1,24(sp)
   2bb60:	e84a                	c.sdsp	s2,16(sp)
   2bb62:	e44e                	c.sdsp	s3,8(sp)
   2bb64:	e052                	c.sdsp	s4,0(sp)
   2bb66:	892a                	c.mv	s2,a0
   2bb68:	84ae                	c.mv	s1,a1
   2bb6a:	89b2                	c.mv	s3,a2
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   2bb6c:	00053023          	sd	zero,0(a0)
   2bb70:	0a000513          	addi	a0,zero,160
   2bb74:	c3dea0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   2bb78:	842a                	c.mv	s0,a0
   2bb7a:	00052423          	sw	zero,8(a0)
   2bb7e:	00052623          	sw	zero,12(a0)
   2bb82:	00052823          	sw	zero,16(a0)
   2bb86:	00052a23          	sw	zero,20(a0)
   2bb8a:	00052c23          	sw	zero,24(a0)
   2bb8e:	00052e23          	sw	zero,28(a0)
   2bb92:	02053023          	sd	zero,32(a0)
   2bb96:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   2bb9a:	4785                	c.li	a5,1
   2bb9c:	d91c                	c.sw	a5,48(a0)
   2bb9e:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   2bba0:	0000f797          	auipc	a5,0xf
   2bba4:	8a07b783          	ld	a5,-1888(a5) # 3a440 <vtable for std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x798>
   2bba8:	07c1                	c.addi	a5,16
   2bbaa:	e11c                	c.sd	a5,0(a0)
   2bbac:	03850a13          	addi	s4,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2bbb0:	609c                	c.ld	a5,0(s1)
   2bbb2:	fd1c                	c.sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   2bbb4:	6488                	c.ld	a0,8(s1)
   2bbb6:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   2bbb8:	c919                	c.beqz	a0,2bbce <elf::section::section(elf::elf const&, void const*)+0x76>
    if (__is_single_threaded())
   2bbba:	0000f717          	auipc	a4,0xf
   2bbbe:	8de73703          	ld	a4,-1826(a4) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2bbc2:	00074703          	lbu	a4,0(a4)
   2bbc6:	c315                	c.beqz	a4,2bbea <elf::section::section(elf::elf const&, void const*)+0x92>
  { *__mem += __val; }
   2bbc8:	5918                	c.lw	a4,48(a0)
   2bbca:	2705                	c.addiw	a4,1
   2bbcc:	d918                	c.sw	a4,48(a0)
  impl(const elf &f) : f(f), name(nullptr), data(nullptr) {}
   2bbce:	08043423          	sd	zero,136(s0)
   2bbd2:	08043c23          	sd	zero,152(s0)
	  _M_pi = __pi;
   2bbd6:	00893423          	sd	s0,8(s2)
	  __p = __pi->_M_ptr();
   2bbda:	01493023          	sd	s4,0(s2)
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
   2bbde:	04840413          	addi	s0,s0,72
   2bbe2:	8526                	c.mv	a0,s1
   2bbe4:	a9eff0ef          	jal	ra,2ae82 <elf::elf::get_hdr() const>
   2bbe8:	a039                	c.j	2bbf6 <elf::section::section(elf::elf const&, void const*)+0x9e>
      __atomic_add(__mem, __val);
   2bbea:	4585                	c.li	a1,1
   2bbec:	03050513          	addi	a0,a0,48
   2bbf0:	9c1ea0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2bbf4:	bfe9                	c.j	2bbce <elf::section::section(elf::elf const&, void const*)+0x76>
   2bbf6:	00454a03          	lbu	s4,4(a0)
   2bbfa:	8526                	c.mv	a0,s1
   2bbfc:	a86ff0ef          	jal	ra,2ae82 <elf::elf::get_hdr() const>
   2bc00:	00554683          	lbu	a3,5(a0)
   2bc04:	8652                	c.mv	a2,s4
   2bc06:	85ce                	c.mv	a1,s3
   2bc08:	8522                	c.mv	a0,s0
   2bc0a:	0000f317          	auipc	t1,0xf
   2bc0e:	98e33303          	ld	t1,-1650(t1) # 3a598 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xd456>
   2bc12:	9302                	c.jalr	t1
}
   2bc14:	70a2                	c.ldsp	ra,40(sp)
   2bc16:	7402                	c.ldsp	s0,32(sp)
   2bc18:	64e2                	c.ldsp	s1,24(sp)
   2bc1a:	6942                	c.ldsp	s2,16(sp)
   2bc1c:	69a2                	c.ldsp	s3,8(sp)
   2bc1e:	6a02                	c.ldsp	s4,0(sp)
   2bc20:	6145                	c.addi16sp	sp,48
   2bc22:	8082                	c.jr	ra
	if (_M_pi != nullptr)
   2bc24:	842a                	c.mv	s0,a0
   2bc26:	00893503          	ld	a0,8(s2)
   2bc2a:	c511                	c.beqz	a0,2bc36 <elf::section::section(elf::elf const&, void const*)+0xde>
	  _M_pi->_M_release();
   2bc2c:	0000e317          	auipc	t1,0xe
   2bc30:	7b433303          	ld	t1,1972(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   2bc34:	9302                	c.jalr	t1
   2bc36:	8522                	c.mv	a0,s0
   2bc38:	d59ea0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002bc3c <elf::sym::sym(elf::elf, void const*, elf::strtab)>:
sym::sym(elf f, const void *data, strtab strs) : strs(strs) {
   2bc3c:	7179                	c.addi16sp	sp,-48
   2bc3e:	f406                	c.sdsp	ra,40(sp)
   2bc40:	f022                	c.sdsp	s0,32(sp)
   2bc42:	ec26                	c.sdsp	s1,24(sp)
   2bc44:	e84a                	c.sdsp	s2,16(sp)
   2bc46:	e44e                	c.sdsp	s3,8(sp)
   2bc48:	e052                	c.sdsp	s4,0(sp)
   2bc4a:	842a                	c.mv	s0,a0
   2bc4c:	84ae                	c.mv	s1,a1
   2bc4e:	8932                	c.mv	s2,a2
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2bc50:	629c                	c.ld	a5,0(a3)
   2bc52:	e11c                	c.sd	a5,0(a0)
      : _M_pi(__r._M_pi)
   2bc54:	6688                	c.ld	a0,8(a3)
   2bc56:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   2bc58:	c919                	c.beqz	a0,2bc6e <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x32>
    if (__is_single_threaded())
   2bc5a:	0000f797          	auipc	a5,0xf
   2bc5e:	83e7b783          	ld	a5,-1986(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2bc62:	0007c783          	lbu	a5,0(a5)
   2bc66:	cb91                	c.beqz	a5,2bc7a <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x3e>
  { *__mem += __val; }
   2bc68:	591c                	c.lw	a5,48(a0)
   2bc6a:	2785                	c.addiw	a5,1
   2bc6c:	d91c                	c.sw	a5,48(a0)
  canon_hdr(&this->data, data, f.get_hdr().ei_class, f.get_hdr().ei_data);
   2bc6e:	01040993          	addi	s3,s0,16
   2bc72:	8526                	c.mv	a0,s1
   2bc74:	a0eff0ef          	jal	ra,2ae82 <elf::elf::get_hdr() const>
   2bc78:	a039                	c.j	2bc86 <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x4a>
      __atomic_add(__mem, __val);
   2bc7a:	4585                	c.li	a1,1
   2bc7c:	03050513          	addi	a0,a0,48
   2bc80:	931ea0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2bc84:	b7ed                	c.j	2bc6e <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x32>
   2bc86:	00454a03          	lbu	s4,4(a0)
   2bc8a:	8526                	c.mv	a0,s1
   2bc8c:	9f6ff0ef          	jal	ra,2ae82 <elf::elf::get_hdr() const>
   2bc90:	00554683          	lbu	a3,5(a0)
   2bc94:	8652                	c.mv	a2,s4
   2bc96:	85ca                	c.mv	a1,s2
   2bc98:	854e                	c.mv	a0,s3
   2bc9a:	0000f317          	auipc	t1,0xf
   2bc9e:	8be33303          	ld	t1,-1858(t1) # 3a558 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xd2b8>
   2bca2:	9302                	c.jalr	t1
}
   2bca4:	70a2                	c.ldsp	ra,40(sp)
   2bca6:	7402                	c.ldsp	s0,32(sp)
   2bca8:	64e2                	c.ldsp	s1,24(sp)
   2bcaa:	6942                	c.ldsp	s2,16(sp)
   2bcac:	69a2                	c.ldsp	s3,8(sp)
   2bcae:	6a02                	c.ldsp	s4,0(sp)
   2bcb0:	6145                	c.addi16sp	sp,48
   2bcb2:	8082                	c.jr	ra
	if (_M_pi != nullptr)
   2bcb4:	84aa                	c.mv	s1,a0
   2bcb6:	6408                	c.ld	a0,8(s0)
   2bcb8:	c511                	c.beqz	a0,2bcc4 <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x88>
	  _M_pi->_M_release();
   2bcba:	0000e317          	auipc	t1,0xe
   2bcbe:	72633303          	ld	t1,1830(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   2bcc2:	9302                	c.jalr	t1
   2bcc4:	8526                	c.mv	a0,s1
   2bcc6:	ccbea0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002bcca <elf::section::get_name[abi:cxx11]() const>:
string section::get_name() const { return get_name(nullptr); }
   2bcca:	1101                	c.addi	sp,-32
   2bccc:	ec06                	c.sdsp	ra,24(sp)
   2bcce:	e822                	c.sdsp	s0,16(sp)
   2bcd0:	e426                	c.sdsp	s1,8(sp)
   2bcd2:	842a                	c.mv	s0,a0
   2bcd4:	852e                	c.mv	a0,a1
   2bcd6:	4581                	c.li	a1,0
   2bcd8:	817ff0ef          	jal	ra,2b4ee <elf::section::get_name(unsigned long*) const>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2bcdc:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   2bce0:	e01c                	c.sd	a5,0(s0)
	if (__s == 0)
   2bce2:	c505                	c.beqz	a0,2bd0a <elf::section::get_name[abi:cxx11]() const+0x40>
   2bce4:	84aa                	c.mv	s1,a0
   2bce6:	99bea0ef          	jal	ra,16680 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   2bcea:	4681                	c.li	a3,0
   2bcec:	00a48633          	add	a2,s1,a0
   2bcf0:	85a6                	c.mv	a1,s1
   2bcf2:	8522                	c.mv	a0,s0
   2bcf4:	0000e317          	auipc	t1,0xe
   2bcf8:	62c33303          	ld	t1,1580(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2bcfc:	9302                	c.jalr	t1
   2bcfe:	8522                	c.mv	a0,s0
   2bd00:	60e2                	c.ldsp	ra,24(sp)
   2bd02:	6442                	c.ldsp	s0,16(sp)
   2bd04:	64a2                	c.ldsp	s1,8(sp)
   2bd06:	6105                	c.addi16sp	sp,32
   2bd08:	8082                	c.jr	ra
	  std::__throw_logic_error(__N("basic_string: "
   2bd0a:	00002517          	auipc	a0,0x2
   2bd0e:	cae50513          	addi	a0,a0,-850 # 2d9b8 <__libc_csu_fini+0x6>
   2bd12:	a2fea0ef          	jal	ra,16740 <std::__throw_logic_error(char const*)@plt>

000000000002bd16 <elf::strtab::get[abi:cxx11](unsigned long) const>:
std::string strtab::get(Elf64::Off offset) const {
   2bd16:	1101                	c.addi	sp,-32
   2bd18:	ec06                	c.sdsp	ra,24(sp)
   2bd1a:	e822                	c.sdsp	s0,16(sp)
   2bd1c:	e426                	c.sdsp	s1,8(sp)
   2bd1e:	842a                	c.mv	s0,a0
   2bd20:	852e                	c.mv	a0,a1
   2bd22:	85b2                	c.mv	a1,a2
  return get(offset, nullptr);
   2bd24:	4601                	c.li	a2,0
   2bd26:	dc8ff0ef          	jal	ra,2b2ee <elf::strtab::get(unsigned long, unsigned long*) const>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2bd2a:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   2bd2e:	e01c                	c.sd	a5,0(s0)
	if (__s == 0)
   2bd30:	c505                	c.beqz	a0,2bd58 <elf::strtab::get[abi:cxx11](unsigned long) const+0x42>
   2bd32:	84aa                	c.mv	s1,a0
   2bd34:	94dea0ef          	jal	ra,16680 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   2bd38:	4681                	c.li	a3,0
   2bd3a:	00a48633          	add	a2,s1,a0
   2bd3e:	85a6                	c.mv	a1,s1
   2bd40:	8522                	c.mv	a0,s0
   2bd42:	0000e317          	auipc	t1,0xe
   2bd46:	5de33303          	ld	t1,1502(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2bd4a:	9302                	c.jalr	t1
}
   2bd4c:	8522                	c.mv	a0,s0
   2bd4e:	60e2                	c.ldsp	ra,24(sp)
   2bd50:	6442                	c.ldsp	s0,16(sp)
   2bd52:	64a2                	c.ldsp	s1,8(sp)
   2bd54:	6105                	c.addi16sp	sp,32
   2bd56:	8082                	c.jr	ra
	  std::__throw_logic_error(__N("basic_string: "
   2bd58:	00002517          	auipc	a0,0x2
   2bd5c:	c6050513          	addi	a0,a0,-928 # 2d9b8 <__libc_csu_fini+0x6>
   2bd60:	9e1ea0ef          	jal	ra,16740 <std::__throw_logic_error(char const*)@plt>

000000000002bd64 <elf::sym::get_name[abi:cxx11]() const>:
std::string sym::get_name() const { return strs.get(get_data().name); }
   2bd64:	1141                	c.addi	sp,-16
   2bd66:	e406                	c.sdsp	ra,8(sp)
   2bd68:	e022                	c.sdsp	s0,0(sp)
   2bd6a:	842a                	c.mv	s0,a0
   2bd6c:	0105e603          	lwu	a2,16(a1)
   2bd70:	fa7ff0ef          	jal	ra,2bd16 <elf::strtab::get[abi:cxx11](unsigned long) const>
   2bd74:	8522                	c.mv	a0,s0
   2bd76:	60a2                	c.ldsp	ra,8(sp)
   2bd78:	6402                	c.ldsp	s0,0(sp)
   2bd7a:	0141                	c.addi	sp,16
   2bd7c:	8082                	c.jr	ra

000000000002bd7e <elf::enums::to_string[abi:cxx11](elf::enums::shn)>:
std::string enums::to_string(shn v) {
   2bd7e:	1101                	c.addi	sp,-32
   2bd80:	ec06                	c.sdsp	ra,24(sp)
   2bd82:	e822                	c.sdsp	s0,16(sp)
   2bd84:	e426                	c.sdsp	s1,8(sp)
   2bd86:	e04a                	c.sdsp	s2,0(sp)
   2bd88:	84aa                	c.mv	s1,a0
  if (v == shn::undef)
   2bd8a:	cda9                	c.beqz	a1,2bde4 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x66>
  if (v == shn::abs)
   2bd8c:	0005871b          	addiw	a4,a1,0
   2bd90:	67c1                	c.lui	a5,0x10
   2bd92:	17c5                	c.addi	a5,-15 # fff1 <__abi_tag-0x2a3>
   2bd94:	08f70063          	beq	a4,a5,2be14 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x96>
  if (v == shn::common)
   2bd98:	0005871b          	addiw	a4,a1,0
   2bd9c:	67c1                	c.lui	a5,0x10
   2bd9e:	17c9                	c.addi	a5,-14 # fff2 <__abi_tag-0x2a2>
   2bda0:	08f70c63          	beq	a4,a5,2be38 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xba>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2bda4:	0005841b          	addiw	s0,a1,0
	  if (__value < (unsigned)__base) return __n;
   2bda8:	47a5                	c.li	a5,9
   2bdaa:	0a87f963          	bgeu	a5,s0,2be5c <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xde>
	  if (__value < __b2) return __n + 1;
   2bdae:	06300793          	addi	a5,zero,99
   2bdb2:	1487ff63          	bgeu	a5,s0,2bf10 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x192>
	  if (__value < __b3) return __n + 2;
   2bdb6:	3e700793          	addi	a5,zero,999
   2bdba:	1687f563          	bgeu	a5,s0,2bf24 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x1a6>
	  if (__value < __b4) return __n + 3;
   2bdbe:	6689                	c.lui	a3,0x2
   2bdc0:	70f68693          	addi	a3,a3,1807 # 270f <__abi_tag-0xdb85>
	  __n += 4;
   2bdc4:	0086b933          	sltu	s2,a3,s0
   2bdc8:	0911                	c.addi	s2,4
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2bdca:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   2bdce:	e09c                	c.sd	a5,0(s1)
      { _M_construct(__n, __c); }
   2bdd0:	02d00613          	addi	a2,zero,45
   2bdd4:	85ca                	c.mv	a1,s2
   2bdd6:	8526                	c.mv	a0,s1
   2bdd8:	a29ea0ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   2bddc:	608c                	c.ld	a1,0(s1)
      unsigned __pos = __len - 1;
   2bdde:	fff9069b          	addiw	a3,s2,-1
      while (__val >= 100)
   2bde2:	a859                	c.j	2be78 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xfa>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2bde4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2bde8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2bdea:	4681                	c.li	a3,0
   2bdec:	00006617          	auipc	a2,0x6
   2bdf0:	a5960613          	addi	a2,a2,-1447 # 31845 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2815>
   2bdf4:	00006597          	auipc	a1,0x6
   2bdf8:	a4c58593          	addi	a1,a1,-1460 # 31840 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2810>
   2bdfc:	0000e317          	auipc	t1,0xe
   2be00:	52433303          	ld	t1,1316(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2be04:	9302                	c.jalr	t1
}
   2be06:	8526                	c.mv	a0,s1
   2be08:	60e2                	c.ldsp	ra,24(sp)
   2be0a:	6442                	c.ldsp	s0,16(sp)
   2be0c:	64a2                	c.ldsp	s1,8(sp)
   2be0e:	6902                	c.ldsp	s2,0(sp)
   2be10:	6105                	c.addi16sp	sp,32
   2be12:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2be14:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2be18:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2be1a:	4681                	c.li	a3,0
   2be1c:	00006617          	auipc	a2,0x6
   2be20:	a2f60613          	addi	a2,a2,-1489 # 3184b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x281b>
   2be24:	00006597          	auipc	a1,0x6
   2be28:	a2458593          	addi	a1,a1,-1500 # 31848 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2818>
   2be2c:	0000e317          	auipc	t1,0xe
   2be30:	4f433303          	ld	t1,1268(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2be34:	9302                	c.jalr	t1
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2be36:	bfc1                	c.j	2be06 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x88>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2be38:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2be3c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2be3e:	4681                	c.li	a3,0
   2be40:	00006617          	auipc	a2,0x6
   2be44:	a1660613          	addi	a2,a2,-1514 # 31856 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2826>
   2be48:	00006597          	auipc	a1,0x6
   2be4c:	a0858593          	addi	a1,a1,-1528 # 31850 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2820>
   2be50:	0000e317          	auipc	t1,0xe
   2be54:	4d033303          	ld	t1,1232(t1) # 3a320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1fa7e>
   2be58:	9302                	c.jalr	t1
   2be5a:	b775                	c.j	2be06 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x88>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2be5c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2be60:	e11c                	c.sd	a5,0(a0)
      { _M_construct(__n, __c); }
   2be62:	02d00613          	addi	a2,zero,45
   2be66:	4585                	c.li	a1,1
   2be68:	999ea0ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   2be6c:	608c                	c.ld	a1,0(s1)
   2be6e:	06300793          	addi	a5,zero,99
   2be72:	0687f063          	bgeu	a5,s0,2bed2 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x154>
      unsigned __pos = __len - 1;
   2be76:	4681                	c.li	a3,0
	  auto const __num = (__val % 100) * 2;
   2be78:	06400813          	addi	a6,zero,100
	  __first[__pos] = __digits[__num + 1];
   2be7c:	0000e517          	auipc	a0,0xe
   2be80:	4fc53503          	ld	a0,1276(a0) # 3a378 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xc450>
      while (__val >= 100)
   2be84:	6309                	c.lui	t1,0x2
   2be86:	70f30313          	addi	t1,t1,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   2be8a:	030477bb          	remuw	a5,s0,a6
   2be8e:	0017979b          	slliw	a5,a5,0x1
   2be92:	0004089b          	addiw	a7,s0,0
	  __val /= 100;
   2be96:	0304543b          	divuw	s0,s0,a6
	  __first[__pos] = __digits[__num + 1];
   2be9a:	02069613          	slli	a2,a3,0x20
   2be9e:	9201                	c.srli	a2,0x20
   2bea0:	962e                	c.add	a2,a1
   2bea2:	0017871b          	addiw	a4,a5,1
   2bea6:	1702                	c.slli	a4,0x20
   2bea8:	9301                	c.srli	a4,0x20
   2beaa:	972a                	c.add	a4,a0
   2beac:	00074703          	lbu	a4,0(a4)
   2beb0:	00e60023          	sb	a4,0(a2)
	  __first[__pos - 1] = __digits[__num];
   2beb4:	fff6871b          	addiw	a4,a3,-1
   2beb8:	1702                	c.slli	a4,0x20
   2beba:	9301                	c.srli	a4,0x20
   2bebc:	972e                	c.add	a4,a1
   2bebe:	1782                	c.slli	a5,0x20
   2bec0:	9381                	c.srli	a5,0x20
   2bec2:	97aa                	c.add	a5,a0
   2bec4:	0007c783          	lbu	a5,0(a5)
   2bec8:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   2becc:	36f9                	c.addiw	a3,-2
      while (__val >= 100)
   2bece:	fb136ee3          	bltu	t1,a7,2be8a <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x10c>
      if (__val >= 10)
   2bed2:	47a5                	c.li	a5,9
   2bed4:	0287f963          	bgeu	a5,s0,2bf06 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x188>
	  auto const __num = __val * 2;
   2bed8:	0014141b          	slliw	s0,s0,0x1
	  __first[1] = __digits[__num + 1];
   2bedc:	0000e717          	auipc	a4,0xe
   2bee0:	49c73703          	ld	a4,1180(a4) # 3a378 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xc450>
   2bee4:	0014079b          	addiw	a5,s0,1
   2bee8:	1782                	c.slli	a5,0x20
   2beea:	9381                	c.srli	a5,0x20
   2beec:	97ba                	c.add	a5,a4
   2beee:	0007c783          	lbu	a5,0(a5)
   2bef2:	00f580a3          	sb	a5,1(a1)
	  __first[0] = __digits[__num];
   2bef6:	1402                	c.slli	s0,0x20
   2bef8:	9001                	c.srli	s0,0x20
   2befa:	9722                	c.add	a4,s0
   2befc:	00074783          	lbu	a5,0(a4)
   2bf00:	00f58023          	sb	a5,0(a1)
   2bf04:	b709                	c.j	2be06 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x88>
	__first[0] = '0' + __val;
   2bf06:	0304041b          	addiw	s0,s0,48
   2bf0a:	00858023          	sb	s0,0(a1)
   2bf0e:	bde5                	c.j	2be06 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x88>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2bf10:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2bf14:	e11c                	c.sd	a5,0(a0)
      { _M_construct(__n, __c); }
   2bf16:	02d00613          	addi	a2,zero,45
   2bf1a:	4589                	c.li	a1,2
   2bf1c:	8e5ea0ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   2bf20:	608c                	c.ld	a1,0(s1)
      while (__val >= 100)
   2bf22:	bf45                	c.j	2bed2 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x154>
	  if (__value < __b3) return __n + 2;
   2bf24:	490d                	c.li	s2,3
   2bf26:	b555                	c.j	2bdca <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x4c>

000000000002bf28 <elf::elf::elf(std::shared_ptr<elf::loader> const&)>:
elf::elf(const std::shared_ptr<loader> &l) : m(make_shared<impl>(l)) {
   2bf28:	7159                	c.addi16sp	sp,-112
   2bf2a:	f486                	c.sdsp	ra,104(sp)
   2bf2c:	f0a2                	c.sdsp	s0,96(sp)
   2bf2e:	eca6                	c.sdsp	s1,88(sp)
   2bf30:	e8ca                	c.sdsp	s2,80(sp)
   2bf32:	e4ce                	c.sdsp	s3,72(sp)
   2bf34:	e0d2                	c.sdsp	s4,64(sp)
   2bf36:	fc56                	c.sdsp	s5,56(sp)
   2bf38:	f85a                	c.sdsp	s6,48(sp)
   2bf3a:	f45e                	c.sdsp	s7,40(sp)
   2bf3c:	f062                	c.sdsp	s8,32(sp)
   2bf3e:	84aa                	c.mv	s1,a0
   2bf40:	8aae                	c.mv	s5,a1
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   2bf42:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2bf46:	0d800513          	addi	a0,zero,216
   2bf4a:	867ea0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   2bf4e:	842a                	c.mv	s0,a0
   2bf50:	00052423          	sw	zero,8(a0)
   2bf54:	00052623          	sw	zero,12(a0)
   2bf58:	00052823          	sw	zero,16(a0)
   2bf5c:	00052a23          	sw	zero,20(a0)
   2bf60:	00052c23          	sw	zero,24(a0)
   2bf64:	00052e23          	sw	zero,28(a0)
   2bf68:	02053023          	sd	zero,32(a0)
   2bf6c:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   2bf70:	4785                	c.li	a5,1
   2bf72:	d91c                	c.sw	a5,48(a0)
   2bf74:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   2bf76:	0000e797          	auipc	a5,0xe
   2bf7a:	44a7b783          	ld	a5,1098(a5) # 3a3c0 <vtable for std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x788>
   2bf7e:	07c1                	c.addi	a5,16
   2bf80:	e11c                	c.sd	a5,0(a0)
   2bf82:	03850913          	addi	s2,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2bf86:	000ab783          	ld	a5,0(s5)
   2bf8a:	fd1c                	c.sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   2bf8c:	008ab503          	ld	a0,8(s5)
   2bf90:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   2bf92:	c919                	c.beqz	a0,2bfa8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x80>
    if (__is_single_threaded())
   2bf94:	0000e797          	auipc	a5,0xe
   2bf98:	5047b783          	ld	a5,1284(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2bf9c:	0007c783          	lbu	a5,0(a5)
   2bfa0:	c3b9                	c.beqz	a5,2bfe6 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0xbe>
  { *__mem += __val; }
   2bfa2:	591c                	c.lw	a5,48(a0)
   2bfa4:	2785                	c.addiw	a5,1
   2bfa6:	d91c                	c.sw	a5,48(a0)
	: _M_start(), _M_finish(), _M_end_of_storage()
   2bfa8:	08043423          	sd	zero,136(s0)
   2bfac:	08043823          	sd	zero,144(s0)
   2bfb0:	08043c23          	sd	zero,152(s0)
   2bfb4:	0a043023          	sd	zero,160(s0)
   2bfb8:	0a043423          	sd	zero,168(s0)
   2bfbc:	0a043823          	sd	zero,176(s0)
      : _M_ptr(0), _M_refcount()
   2bfc0:	0a043c23          	sd	zero,184(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   2bfc4:	0c043023          	sd	zero,192(s0)
      : _M_ptr(0), _M_refcount()
   2bfc8:	0c043423          	sd	zero,200(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   2bfcc:	0c043823          	sd	zero,208(s0)
	  _M_pi = __pi;
   2bfd0:	e480                	c.sd	s0,8(s1)
	  __p = __pi->_M_ptr();
   2bfd2:	0124b023          	sd	s2,0(s1)
      { return _M_ptr; }
   2bfd6:	000ab503          	ld	a0,0(s5)
  } *core_hdr = (struct core_hdr *)l->load(0, sizeof *core_hdr);
   2bfda:	611c                	c.ld	a5,0(a0)
   2bfdc:	6b9c                	c.ld	a5,16(a5)
   2bfde:	461d                	c.li	a2,7
   2bfe0:	4581                	c.li	a1,0
   2bfe2:	9782                	c.jalr	a5
   2bfe4:	a039                	c.j	2bff2 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0xca>
      __atomic_add(__mem, __val);
   2bfe6:	4585                	c.li	a1,1
   2bfe8:	03050513          	addi	a0,a0,48
   2bfec:	dc4ea0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2bff0:	bf65                	c.j	2bfa8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x80>
   2bff2:	842a                	c.mv	s0,a0
  if (strncmp(core_hdr->ei_magic,
   2bff4:	4611                	c.li	a2,4
   2bff6:	00006597          	auipc	a1,0x6
   2bffa:	86258593          	addi	a1,a1,-1950 # 31858 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2828>
   2bffe:	953ea0ef          	jal	ra,16950 <strncmp@plt>
   2c002:	e139                	c.bnez	a0,2c048 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x120>
  if (core_hdr->ei_version != 1)
   2c004:	00644703          	lbu	a4,6(s0)
   2c008:	4785                	c.li	a5,1
   2c00a:	06f71d63          	bne	a4,a5,2c084 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x15c>
  if (core_hdr->ei_class != elfclass::_32 &&
   2c00e:	00444703          	lbu	a4,4(s0)
   2c012:	fff7079b          	addiw	a5,a4,-1
   2c016:	0ff7f793          	andi	a5,a5,255
   2c01a:	4685                	c.li	a3,1
   2c01c:	0af6e063          	bltu	a3,a5,2c0bc <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x194>
  if (core_hdr->ei_data != elfdata::lsb && core_hdr->ei_data != elfdata::msb)
   2c020:	00544783          	lbu	a5,5(s0)
   2c024:	37fd                	c.addiw	a5,-1
   2c026:	0ff7f793          	andi	a5,a5,255
   2c02a:	4685                	c.li	a3,1
   2c02c:	0cf6e463          	bltu	a3,a5,2c0f4 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x1cc>
  size_t hdr_size = (core_hdr->ei_class == elfclass::_32 ? sizeof(Ehdr<Elf32>)
   2c030:	4785                	c.li	a5,1
   2c032:	04000613          	addi	a2,zero,64
   2c036:	0ef70b63          	beq	a4,a5,2c12c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x204>
   2c03a:	000ab503          	ld	a0,0(s5)
  const void *hdr = l->load(0, hdr_size);
   2c03e:	611c                	c.ld	a5,0(a0)
   2c040:	6b9c                	c.ld	a5,16(a5)
   2c042:	4581                	c.li	a1,0
   2c044:	9782                	c.jalr	a5
   2c046:	a0f5                	c.j	2c132 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x20a>
    throw format_error("bad ELF magic number");
   2c048:	4541                	c.li	a0,16
   2c04a:	e46ea0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2c04e:	892a                	c.mv	s2,a0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   2c050:	00006597          	auipc	a1,0x6
   2c054:	81058593          	addi	a1,a1,-2032 # 31860 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2830>
   2c058:	9b9ea0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   2c05c:	0000e797          	auipc	a5,0xe
   2c060:	2fc7b783          	ld	a5,764(a5) # 3a358 <vtable for elf::format_error@@Base+0x770>
   2c064:	07c1                	c.addi	a5,16
   2c066:	00f93023          	sd	a5,0(s2)
   2c06a:	0000e617          	auipc	a2,0xe
   2c06e:	51663603          	ld	a2,1302(a2) # 3a580 <elf::format_error::~format_error()@@Base+0xe146>
   2c072:	0000e597          	auipc	a1,0xe
   2c076:	2c65b583          	ld	a1,710(a1) # 3a338 <typeinfo for elf::format_error@@Base+0x7f8>
   2c07a:	854a                	c.mv	a0,s2
   2c07c:	8e5ea0ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   2c080:	842a                	c.mv	s0,a0
   2c082:	a635                	c.j	2c3ae <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
    throw format_error("unknown ELF version");
   2c084:	4541                	c.li	a0,16
   2c086:	e0aea0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2c08a:	892a                	c.mv	s2,a0
   2c08c:	00005597          	auipc	a1,0x5
   2c090:	7ec58593          	addi	a1,a1,2028 # 31878 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2848>
   2c094:	97dea0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   2c098:	0000e797          	auipc	a5,0xe
   2c09c:	2c07b783          	ld	a5,704(a5) # 3a358 <vtable for elf::format_error@@Base+0x770>
   2c0a0:	07c1                	c.addi	a5,16
   2c0a2:	00f93023          	sd	a5,0(s2)
   2c0a6:	0000e617          	auipc	a2,0xe
   2c0aa:	4da63603          	ld	a2,1242(a2) # 3a580 <elf::format_error::~format_error()@@Base+0xe146>
   2c0ae:	0000e597          	auipc	a1,0xe
   2c0b2:	28a5b583          	ld	a1,650(a1) # 3a338 <typeinfo for elf::format_error@@Base+0x7f8>
   2c0b6:	854a                	c.mv	a0,s2
   2c0b8:	8a9ea0ef          	jal	ra,16960 <__cxa_throw@plt>
    throw format_error("bad ELF class");
   2c0bc:	4541                	c.li	a0,16
   2c0be:	dd2ea0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2c0c2:	892a                	c.mv	s2,a0
   2c0c4:	00005597          	auipc	a1,0x5
   2c0c8:	7cc58593          	addi	a1,a1,1996 # 31890 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2860>
   2c0cc:	945ea0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   2c0d0:	0000e797          	auipc	a5,0xe
   2c0d4:	2887b783          	ld	a5,648(a5) # 3a358 <vtable for elf::format_error@@Base+0x770>
   2c0d8:	07c1                	c.addi	a5,16
   2c0da:	00f93023          	sd	a5,0(s2)
   2c0de:	0000e617          	auipc	a2,0xe
   2c0e2:	4a263603          	ld	a2,1186(a2) # 3a580 <elf::format_error::~format_error()@@Base+0xe146>
   2c0e6:	0000e597          	auipc	a1,0xe
   2c0ea:	2525b583          	ld	a1,594(a1) # 3a338 <typeinfo for elf::format_error@@Base+0x7f8>
   2c0ee:	854a                	c.mv	a0,s2
   2c0f0:	871ea0ef          	jal	ra,16960 <__cxa_throw@plt>
    throw format_error("bad ELF data order");
   2c0f4:	4541                	c.li	a0,16
   2c0f6:	d9aea0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2c0fa:	892a                	c.mv	s2,a0
   2c0fc:	00005597          	auipc	a1,0x5
   2c100:	7a458593          	addi	a1,a1,1956 # 318a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2870>
   2c104:	90dea0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   2c108:	0000e797          	auipc	a5,0xe
   2c10c:	2507b783          	ld	a5,592(a5) # 3a358 <vtable for elf::format_error@@Base+0x770>
   2c110:	07c1                	c.addi	a5,16
   2c112:	00f93023          	sd	a5,0(s2)
   2c116:	0000e617          	auipc	a2,0xe
   2c11a:	46a63603          	ld	a2,1130(a2) # 3a580 <elf::format_error::~format_error()@@Base+0xe146>
   2c11e:	0000e597          	auipc	a1,0xe
   2c122:	21a5b583          	ld	a1,538(a1) # 3a338 <typeinfo for elf::format_error@@Base+0x7f8>
   2c126:	854a                	c.mv	a0,s2
   2c128:	839ea0ef          	jal	ra,16960 <__cxa_throw@plt>
  size_t hdr_size = (core_hdr->ei_class == elfclass::_32 ? sizeof(Ehdr<Elf32>)
   2c12c:	03400613          	addi	a2,zero,52
   2c130:	b729                	c.j	2c03a <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x112>
  const void *hdr = l->load(0, hdr_size);
   2c132:	85aa                	c.mv	a1,a0
  canon_hdr(&m->hdr, hdr, core_hdr->ei_class, core_hdr->ei_data);
   2c134:	6088                	c.ld	a0,0(s1)
   2c136:	00544683          	lbu	a3,5(s0)
   2c13a:	00444603          	lbu	a2,4(s0)
   2c13e:	0541                	c.addi	a0,16
   2c140:	0000e317          	auipc	t1,0xe
   2c144:	21033303          	ld	t1,528(t1) # 3a350 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xd7a0>
   2c148:	9302                	c.jalr	t1
      { return _M_ptr; }
   2c14a:	609c                	c.ld	a5,0(s1)
  if (m->hdr.version != 1)
   2c14c:	53d4                	c.lw	a3,36(a5)
   2c14e:	4705                	c.li	a4,1
   2c150:	02e69663          	bne	a3,a4,2c17c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x254>
  if (m->hdr.shnum && m->hdr.shstrndx >= m->hdr.shnum)
   2c154:	04c7d703          	lhu	a4,76(a5)
   2c158:	c709                	c.beqz	a4,2c162 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x23a>
   2c15a:	04e7d683          	lhu	a3,78(a5)
   2c15e:	04e6fb63          	bgeu	a3,a4,2c1b4 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x28c>
   2c162:	000ab503          	ld	a0,0(s5)
  const void *seg_data = l->load(m->hdr.phoff, m->hdr.phentsize * m->hdr.phnum);
   2c166:	0467d603          	lhu	a2,70(a5)
   2c16a:	0487d683          	lhu	a3,72(a5)
   2c16e:	6118                	c.ld	a4,0(a0)
   2c170:	6b18                	c.ld	a4,16(a4)
   2c172:	02d6063b          	mulw	a2,a2,a3
   2c176:	7b8c                	c.ld	a1,48(a5)
   2c178:	9702                	c.jalr	a4
   2c17a:	a881                	c.j	2c1ca <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x2a2>
    throw format_error("bad section ELF version");
   2c17c:	4541                	c.li	a0,16
   2c17e:	d12ea0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2c182:	892a                	c.mv	s2,a0
   2c184:	00005597          	auipc	a1,0x5
   2c188:	73458593          	addi	a1,a1,1844 # 318b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2888>
   2c18c:	885ea0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   2c190:	0000e797          	auipc	a5,0xe
   2c194:	1c87b783          	ld	a5,456(a5) # 3a358 <vtable for elf::format_error@@Base+0x770>
   2c198:	07c1                	c.addi	a5,16
   2c19a:	00f93023          	sd	a5,0(s2)
   2c19e:	0000e617          	auipc	a2,0xe
   2c1a2:	3e263603          	ld	a2,994(a2) # 3a580 <elf::format_error::~format_error()@@Base+0xe146>
   2c1a6:	0000e597          	auipc	a1,0xe
   2c1aa:	1925b583          	ld	a1,402(a1) # 3a338 <typeinfo for elf::format_error@@Base+0x7f8>
   2c1ae:	854a                	c.mv	a0,s2
   2c1b0:	fb0ea0ef          	jal	ra,16960 <__cxa_throw@plt>
    throw format_error("bad section name string table index");
   2c1b4:	4541                	c.li	a0,16
   2c1b6:	cdaea0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2c1ba:	892a                	c.mv	s2,a0
   2c1bc:	00005597          	auipc	a1,0x5
   2c1c0:	71458593          	addi	a1,a1,1812 # 318d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x28a0>
   2c1c4:	84dea0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   2c1c8:	a015                	c.j	2c1ec <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x2c4>
  const void *seg_data = l->load(m->hdr.phoff, m->hdr.phentsize * m->hdr.phnum);
   2c1ca:	89aa                	c.mv	s3,a0
   2c1cc:	6080                	c.ld	s0,0(s1)
  for (unsigned i = 0; i < m->hdr.phnum; i++) {
   2c1ce:	04845783          	lhu	a5,72(s0)
   2c1d2:	4901                	c.li	s2,0
   2c1d4:	c7e5                	c.beqz	a5,2c2bc <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x394>
    m->segments.push_back(segment(*this, seg));
   2c1d6:	8a0a                	c.mv	s4,sp
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2c1d8:	0000ec17          	auipc	s8,0xe
   2c1dc:	348c3c03          	ld	s8,840(s8) # 3a520 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)@@Base+0xd176>
    return ::__libc_single_threaded;
   2c1e0:	0000eb17          	auipc	s6,0xe
   2c1e4:	2b8b3b03          	ld	s6,696(s6) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2c1e8:	4b85                	c.li	s7,1
   2c1ea:	a09d                	c.j	2c250 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x328>
   2c1ec:	0000e797          	auipc	a5,0xe
   2c1f0:	16c7b783          	ld	a5,364(a5) # 3a358 <vtable for elf::format_error@@Base+0x770>
   2c1f4:	07c1                	c.addi	a5,16
   2c1f6:	00f93023          	sd	a5,0(s2)
    throw format_error("bad section name string table index");
   2c1fa:	0000e617          	auipc	a2,0xe
   2c1fe:	38663603          	ld	a2,902(a2) # 3a580 <elf::format_error::~format_error()@@Base+0xe146>
   2c202:	0000e597          	auipc	a1,0xe
   2c206:	1365b583          	ld	a1,310(a1) # 3a338 <typeinfo for elf::format_error@@Base+0x7f8>
   2c20a:	854a                	c.mv	a0,s2
   2c20c:	f54ea0ef          	jal	ra,16960 <__cxa_throw@plt>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   2c210:	782c                	c.ld	a1,112(s0)
   2c212:	7c3c                	c.ld	a5,120(s0)
   2c214:	04f58a63          	beq	a1,a5,2c268 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x340>
      : _M_ptr(__r._M_ptr), _M_refcount()
   2c218:	6782                	c.ldsp	a5,0(sp)
   2c21a:	e19c                	c.sd	a5,0(a1)
      constexpr __shared_count() noexcept : _M_pi(0)
   2c21c:	0005b423          	sd	zero,8(a1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   2c220:	67a2                	c.ldsp	a5,8(sp)
	__r._M_pi = _M_pi;
   2c222:	e402                	c.sdsp	zero,8(sp)
	_M_pi = __tmp;
   2c224:	e59c                	c.sd	a5,8(a1)
	__r._M_ptr = nullptr;
   2c226:	e002                	c.sdsp	zero,0(sp)
	    ++this->_M_impl._M_finish;
   2c228:	783c                	c.ld	a5,112(s0)
   2c22a:	07c1                	c.addi	a5,16
   2c22c:	f83c                	c.sd	a5,112(s0)
	if (_M_pi != nullptr)
   2c22e:	6422                	c.ldsp	s0,8(sp)
   2c230:	c811                	c.beqz	s0,2c244 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x31c>
    if (__is_single_threaded())
   2c232:	000b4783          	lbu	a5,0(s6)
   2c236:	cf95                	c.beqz	a5,2c272 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x34a>
    _Atomic_word __result = *__mem;
   2c238:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2c23a:	fff5079b          	addiw	a5,a0,-1
   2c23e:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2c240:	03750f63          	beq	a0,s7,2c27e <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x356>
  for (unsigned i = 0; i < m->hdr.phnum; i++) {
   2c244:	2905                	c.addiw	s2,1
      { return _M_ptr; }
   2c246:	6080                	c.ld	s0,0(s1)
   2c248:	04845783          	lhu	a5,72(s0)
   2c24c:	06f97863          	bgeu	s2,a5,2c2bc <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x394>
    const void *seg = ((const char *)seg_data) + i * m->hdr.phentsize;
   2c250:	04645603          	lhu	a2,70(s0)
   2c254:	0326063b          	mulw	a2,a2,s2
   2c258:	1602                	c.slli	a2,0x20
   2c25a:	9201                	c.srli	a2,0x20
    m->segments.push_back(segment(*this, seg));
   2c25c:	964e                	c.add	a2,s3
   2c25e:	85a6                	c.mv	a1,s1
   2c260:	8552                	c.mv	a0,s4
   2c262:	817ff0ef          	jal	ra,2ba78 <elf::segment::segment(elf::elf const&, void const*)>
   2c266:	b76d                	c.j	2c210 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x2e8>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2c268:	8652                	c.mv	a2,s4
   2c26a:	06840513          	addi	a0,s0,104
   2c26e:	9c02                	c.jalr	s8
   2c270:	bf7d                	c.j	2c22e <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x306>
      return __exchange_and_add(__mem, __val);
   2c272:	55fd                	c.li	a1,-1
   2c274:	03040513          	addi	a0,s0,48
   2c278:	b78ea0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c27c:	b7d1                	c.j	2c240 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x318>
	_M_dispose();
   2c27e:	601c                	c.ld	a5,0(s0)
   2c280:	6b9c                	c.ld	a5,16(a5)
   2c282:	8522                	c.mv	a0,s0
   2c284:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2c286:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2c28a:	0000e797          	auipc	a5,0xe
   2c28e:	20e7b783          	ld	a5,526(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2c292:	0007c783          	lbu	a5,0(a5)
   2c296:	cf89                	c.beqz	a5,2c2b0 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x388>
    _Atomic_word __result = *__mem;
   2c298:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2c29a:	fff5079b          	addiw	a5,a0,-1
   2c29e:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2c2a0:	4785                	c.li	a5,1
   2c2a2:	faf511e3          	bne	a0,a5,2c244 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x31c>
	    _M_destroy();
   2c2a6:	601c                	c.ld	a5,0(s0)
   2c2a8:	6f9c                	c.ld	a5,24(a5)
   2c2aa:	8522                	c.mv	a0,s0
   2c2ac:	9782                	c.jalr	a5
   2c2ae:	bf59                	c.j	2c244 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x31c>
      return __exchange_and_add(__mem, __val);
   2c2b0:	55fd                	c.li	a1,-1
   2c2b2:	03440513          	addi	a0,s0,52
   2c2b6:	b3aea0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c2ba:	b7dd                	c.j	2c2a0 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x378>
      { return _M_ptr; }
   2c2bc:	000ab503          	ld	a0,0(s5)
  const void *sec_data = l->load(m->hdr.shoff, m->hdr.shentsize * m->hdr.shnum);
   2c2c0:	04a45603          	lhu	a2,74(s0)
   2c2c4:	04c45703          	lhu	a4,76(s0)
   2c2c8:	611c                	c.ld	a5,0(a0)
   2c2ca:	6b9c                	c.ld	a5,16(a5)
   2c2cc:	02e6063b          	mulw	a2,a2,a4
   2c2d0:	7c0c                	c.ld	a1,56(s0)
   2c2d2:	9782                	c.jalr	a5
   2c2d4:	89aa                	c.mv	s3,a0
   2c2d6:	6080                	c.ld	s0,0(s1)
  for (unsigned i = 0; i < m->hdr.shnum; i++) {
   2c2d8:	04c45783          	lhu	a5,76(s0)
   2c2dc:	12078e63          	beq	a5,zero,2c418 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x4f0>
   2c2e0:	4901                	c.li	s2,0
    m->sections.push_back(section(*this, sec));
   2c2e2:	01010a13          	addi	s4,sp,16
   2c2e6:	0000eb97          	auipc	s7,0xe
   2c2ea:	ffabbb83          	ld	s7,-6(s7) # 3a2e0 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)@@Base+0xce34>
    return ::__libc_single_threaded;
   2c2ee:	0000ea97          	auipc	s5,0xe
   2c2f2:	1aaaba83          	ld	s5,426(s5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2c2f6:	4b05                	c.li	s6,1
   2c2f8:	a089                	c.j	2c33a <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x412>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   2c2fa:	6c2c                	c.ld	a1,88(s0)
   2c2fc:	703c                	c.ld	a5,96(s0)
   2c2fe:	04f58a63          	beq	a1,a5,2c352 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x42a>
      : _M_ptr(__r._M_ptr), _M_refcount()
   2c302:	67c2                	c.ldsp	a5,16(sp)
   2c304:	e19c                	c.sd	a5,0(a1)
      constexpr __shared_count() noexcept : _M_pi(0)
   2c306:	0005b423          	sd	zero,8(a1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   2c30a:	67e2                	c.ldsp	a5,24(sp)
	__r._M_pi = _M_pi;
   2c30c:	ec02                	c.sdsp	zero,24(sp)
	_M_pi = __tmp;
   2c30e:	e59c                	c.sd	a5,8(a1)
	__r._M_ptr = nullptr;
   2c310:	e802                	c.sdsp	zero,16(sp)
	    ++this->_M_impl._M_finish;
   2c312:	6c3c                	c.ld	a5,88(s0)
   2c314:	07c1                	c.addi	a5,16
   2c316:	ec3c                	c.sd	a5,88(s0)
	if (_M_pi != nullptr)
   2c318:	6462                	c.ldsp	s0,24(sp)
   2c31a:	c811                	c.beqz	s0,2c32e <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x406>
    if (__is_single_threaded())
   2c31c:	000ac783          	lbu	a5,0(s5)
   2c320:	cf95                	c.beqz	a5,2c35c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x434>
    _Atomic_word __result = *__mem;
   2c322:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2c324:	fff5079b          	addiw	a5,a0,-1
   2c328:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2c32a:	03650f63          	beq	a0,s6,2c368 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x440>
  for (unsigned i = 0; i < m->hdr.shnum; i++) {
   2c32e:	2905                	c.addiw	s2,1
      { return _M_ptr; }
   2c330:	6080                	c.ld	s0,0(s1)
   2c332:	04c45783          	lhu	a5,76(s0)
   2c336:	0ef97163          	bgeu	s2,a5,2c418 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x4f0>
    const void *sec = ((const char *)sec_data) + i * m->hdr.shentsize;
   2c33a:	04a45603          	lhu	a2,74(s0)
   2c33e:	0326063b          	mulw	a2,a2,s2
   2c342:	1602                	c.slli	a2,0x20
   2c344:	9201                	c.srli	a2,0x20
    m->sections.push_back(section(*this, sec));
   2c346:	964e                	c.add	a2,s3
   2c348:	85a6                	c.mv	a1,s1
   2c34a:	8552                	c.mv	a0,s4
   2c34c:	80dff0ef          	jal	ra,2bb58 <elf::section::section(elf::elf const&, void const*)>
   2c350:	b76d                	c.j	2c2fa <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3d2>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2c352:	8652                	c.mv	a2,s4
   2c354:	05040513          	addi	a0,s0,80
   2c358:	9b82                	c.jalr	s7
   2c35a:	bf7d                	c.j	2c318 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3f0>
      return __exchange_and_add(__mem, __val);
   2c35c:	55fd                	c.li	a1,-1
   2c35e:	03040513          	addi	a0,s0,48
   2c362:	a8eea0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c366:	b7d1                	c.j	2c32a <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x402>
	_M_dispose();
   2c368:	601c                	c.ld	a5,0(s0)
   2c36a:	6b9c                	c.ld	a5,16(a5)
   2c36c:	8522                	c.mv	a0,s0
   2c36e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2c370:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2c374:	0000e797          	auipc	a5,0xe
   2c378:	1247b783          	ld	a5,292(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2c37c:	0007c783          	lbu	a5,0(a5)
   2c380:	cf89                	c.beqz	a5,2c39a <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x472>
    _Atomic_word __result = *__mem;
   2c382:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2c384:	fff5079b          	addiw	a5,a0,-1
   2c388:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2c38a:	4785                	c.li	a5,1
   2c38c:	faf511e3          	bne	a0,a5,2c32e <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x406>
	    _M_destroy();
   2c390:	601c                	c.ld	a5,0(s0)
   2c392:	6f9c                	c.ld	a5,24(a5)
   2c394:	8522                	c.mv	a0,s0
   2c396:	9782                	c.jalr	a5
   2c398:	bf59                	c.j	2c32e <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x406>
      return __exchange_and_add(__mem, __val);
   2c39a:	55fd                	c.li	a1,-1
   2c39c:	03440513          	addi	a0,s0,52
   2c3a0:	a50ea0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c3a4:	b7dd                	c.j	2c38a <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x462>
    throw format_error("bad ELF magic number");
   2c3a6:	842a                	c.mv	s0,a0
   2c3a8:	854a                	c.mv	a0,s2
   2c3aa:	ba6ea0ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   2c3ae:	6488                	c.ld	a0,8(s1)
   2c3b0:	c511                	c.beqz	a0,2c3bc <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x494>
	  _M_pi->_M_release();
   2c3b2:	0000e317          	auipc	t1,0xe
   2c3b6:	02e33303          	ld	t1,46(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   2c3ba:	9302                	c.jalr	t1
   2c3bc:	8522                	c.mv	a0,s0
   2c3be:	dd2ea0ef          	jal	ra,16990 <_Unwind_Resume@plt>
    throw format_error("unknown ELF version");
   2c3c2:	842a                	c.mv	s0,a0
   2c3c4:	854a                	c.mv	a0,s2
   2c3c6:	b8aea0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2c3ca:	b7d5                	c.j	2c3ae <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
    throw format_error("bad ELF class");
   2c3cc:	842a                	c.mv	s0,a0
   2c3ce:	854a                	c.mv	a0,s2
   2c3d0:	b80ea0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2c3d4:	bfe9                	c.j	2c3ae <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
    throw format_error("bad ELF data order");
   2c3d6:	842a                	c.mv	s0,a0
   2c3d8:	854a                	c.mv	a0,s2
   2c3da:	b76ea0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2c3de:	bfc1                	c.j	2c3ae <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
    throw format_error("bad section ELF version");
   2c3e0:	842a                	c.mv	s0,a0
   2c3e2:	854a                	c.mv	a0,s2
   2c3e4:	b6cea0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2c3e8:	b7d9                	c.j	2c3ae <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
    throw format_error("bad section name string table index");
   2c3ea:	842a                	c.mv	s0,a0
   2c3ec:	854a                	c.mv	a0,s2
   2c3ee:	b62ea0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2c3f2:	bf75                	c.j	2c3ae <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
	if (_M_pi != nullptr)
   2c3f4:	842a                	c.mv	s0,a0
   2c3f6:	6522                	c.ldsp	a0,8(sp)
   2c3f8:	d95d                	c.beqz	a0,2c3ae <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
	  _M_pi->_M_release();
   2c3fa:	0000e317          	auipc	t1,0xe
   2c3fe:	fe633303          	ld	t1,-26(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   2c402:	9302                	c.jalr	t1
   2c404:	b76d                	c.j	2c3ae <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
	if (_M_pi != nullptr)
   2c406:	842a                	c.mv	s0,a0
   2c408:	6562                	c.ldsp	a0,24(sp)
   2c40a:	d155                	c.beqz	a0,2c3ae <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
	  _M_pi->_M_release();
   2c40c:	0000e317          	auipc	t1,0xe
   2c410:	fd433303          	ld	t1,-44(t1) # 3a3e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x23022>
   2c414:	9302                	c.jalr	t1
   2c416:	bf61                	c.j	2c3ae <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
}
   2c418:	70a6                	c.ldsp	ra,104(sp)
   2c41a:	7406                	c.ldsp	s0,96(sp)
   2c41c:	64e6                	c.ldsp	s1,88(sp)
   2c41e:	6946                	c.ldsp	s2,80(sp)
   2c420:	69a6                	c.ldsp	s3,72(sp)
   2c422:	6a06                	c.ldsp	s4,64(sp)
   2c424:	7ae2                	c.ldsp	s5,56(sp)
   2c426:	7b42                	c.ldsp	s6,48(sp)
   2c428:	7ba2                	c.ldsp	s7,40(sp)
   2c42a:	7c02                	c.ldsp	s8,32(sp)
   2c42c:	6165                	c.addi16sp	sp,112
   2c42e:	8082                	c.jr	ra

000000000002c430 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   2c430:	8082                	c.jr	ra

000000000002c432 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2c432:	8082                	c.jr	ra

000000000002c434 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2c434:	8082                	c.jr	ra

000000000002c436 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2c436:	8082                	c.jr	ra

000000000002c438 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2c438:	8082                	c.jr	ra

000000000002c43a <elf::format_error::~format_error()>:
class format_error : public std::runtime_error {
   2c43a:	1141                	c.addi	sp,-16
   2c43c:	e406                	c.sdsp	ra,8(sp)
   2c43e:	0000e797          	auipc	a5,0xe
   2c442:	f1a7b783          	ld	a5,-230(a5) # 3a358 <vtable for elf::format_error@@Base+0x770>
   2c446:	07c1                	c.addi	a5,16
   2c448:	e11c                	c.sd	a5,0(a0)
   2c44a:	b86ea0ef          	jal	ra,167d0 <std::runtime_error::~runtime_error()@plt>
   2c44e:	60a2                	c.ldsp	ra,8(sp)
   2c450:	0141                	c.addi	sp,16
   2c452:	8082                	c.jr	ra

000000000002c454 <elf::format_error::~format_error()>:
   2c454:	1141                	c.addi	sp,-16
   2c456:	e406                	c.sdsp	ra,8(sp)
   2c458:	e022                	c.sdsp	s0,0(sp)
   2c45a:	842a                	c.mv	s0,a0
   2c45c:	0000e797          	auipc	a5,0xe
   2c460:	efc7b783          	ld	a5,-260(a5) # 3a358 <vtable for elf::format_error@@Base+0x770>
   2c464:	07c1                	c.addi	a5,16
   2c466:	e11c                	c.sd	a5,0(a0)
   2c468:	b68ea0ef          	jal	ra,167d0 <std::runtime_error::~runtime_error()@plt>
   2c46c:	8522                	c.mv	a0,s0
   2c46e:	b32ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2c472:	60a2                	c.ldsp	ra,8(sp)
   2c474:	6402                	c.ldsp	s0,0(sp)
   2c476:	0141                	c.addi	sp,16
   2c478:	8082                	c.jr	ra

000000000002c47a <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2c47a:	1141                	c.addi	sp,-16
   2c47c:	e406                	c.sdsp	ra,8(sp)
   2c47e:	b22ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2c482:	60a2                	c.ldsp	ra,8(sp)
   2c484:	0141                	c.addi	sp,16
   2c486:	8082                	c.jr	ra

000000000002c488 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2c488:	1141                	c.addi	sp,-16
   2c48a:	e406                	c.sdsp	ra,8(sp)
   2c48c:	b14ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2c490:	60a2                	c.ldsp	ra,8(sp)
   2c492:	0141                	c.addi	sp,16
   2c494:	8082                	c.jr	ra

000000000002c496 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2c496:	1141                	c.addi	sp,-16
   2c498:	e406                	c.sdsp	ra,8(sp)
   2c49a:	b06ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2c49e:	60a2                	c.ldsp	ra,8(sp)
   2c4a0:	0141                	c.addi	sp,16
   2c4a2:	8082                	c.jr	ra

000000000002c4a4 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2c4a4:	1141                	c.addi	sp,-16
   2c4a6:	e406                	c.sdsp	ra,8(sp)
   2c4a8:	af8ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2c4ac:	60a2                	c.ldsp	ra,8(sp)
   2c4ae:	0141                	c.addi	sp,16
   2c4b0:	8082                	c.jr	ra

000000000002c4b2 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2c4b2:	1141                	c.addi	sp,-16
   2c4b4:	e406                	c.sdsp	ra,8(sp)
   2c4b6:	aeaea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2c4ba:	60a2                	c.ldsp	ra,8(sp)
   2c4bc:	0141                	c.addi	sp,16
   2c4be:	8082                	c.jr	ra

000000000002c4c0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   2c4c0:	1141                	c.addi	sp,-16
   2c4c2:	e406                	c.sdsp	ra,8(sp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2c4c4:	adcea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   2c4c8:	60a2                	c.ldsp	ra,8(sp)
   2c4ca:	0141                	c.addi	sp,16
   2c4cc:	8082                	c.jr	ra

000000000002c4ce <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   2c4ce:	1141                	c.addi	sp,-16
   2c4d0:	e406                	c.sdsp	ra,8(sp)
   2c4d2:	aceea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   2c4d6:	60a2                	c.ldsp	ra,8(sp)
   2c4d8:	0141                	c.addi	sp,16
   2c4da:	8082                	c.jr	ra

000000000002c4dc <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   2c4dc:	1141                	c.addi	sp,-16
   2c4de:	e406                	c.sdsp	ra,8(sp)
   2c4e0:	ac0ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   2c4e4:	60a2                	c.ldsp	ra,8(sp)
   2c4e6:	0141                	c.addi	sp,16
   2c4e8:	8082                	c.jr	ra

000000000002c4ea <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   2c4ea:	1141                	c.addi	sp,-16
   2c4ec:	e406                	c.sdsp	ra,8(sp)
   2c4ee:	ab2ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   2c4f2:	60a2                	c.ldsp	ra,8(sp)
   2c4f4:	0141                	c.addi	sp,16
   2c4f6:	8082                	c.jr	ra

000000000002c4f8 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   2c4f8:	1141                	c.addi	sp,-16
   2c4fa:	e406                	c.sdsp	ra,8(sp)
   2c4fc:	aa4ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   2c500:	60a2                	c.ldsp	ra,8(sp)
   2c502:	0141                	c.addi	sp,16
   2c504:	8082                	c.jr	ra

000000000002c506 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   2c506:	1141                	c.addi	sp,-16
   2c508:	e406                	c.sdsp	ra,8(sp)
   2c50a:	e022                	c.sdsp	s0,0(sp)
   2c50c:	03850413          	addi	s0,a0,56
	    ||
   2c510:	0000e797          	auipc	a5,0xe
   2c514:	0407b783          	ld	a5,64(a5) # 3a550 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc880>
   2c518:	02f58a63          	beq	a1,a5,2c54c <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   2c51c:	6588                	c.ld	a0,8(a1)
   2c51e:	0000e797          	auipc	a5,0xe
   2c522:	f0a7b783          	ld	a5,-246(a5) # 3a428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc948>
   2c526:	02f50363          	beq	a0,a5,2c54c <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   2c52a:	00054703          	lbu	a4,0(a0)
   2c52e:	02a00793          	addi	a5,zero,42
   2c532:	02f70263          	beq	a4,a5,2c556 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   2c536:	0000e597          	auipc	a1,0xe
   2c53a:	ef25b583          	ld	a1,-270(a1) # 3a428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc948>
   2c53e:	892ea0ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   2c542:	00153513          	sltiu	a0,a0,1
   2c546:	40a00533          	sub	a0,zero,a0
   2c54a:	8c69                	c.and	s0,a0
      }
   2c54c:	8522                	c.mv	a0,s0
   2c54e:	60a2                	c.ldsp	ra,8(sp)
   2c550:	6402                	c.ldsp	s0,0(sp)
   2c552:	0141                	c.addi	sp,16
   2c554:	8082                	c.jr	ra
	return nullptr;
   2c556:	4401                	c.li	s0,0
   2c558:	bfd5                	c.j	2c54c <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000002c55a <elf::section_type_mismatch::~section_type_mismatch()>:
class section_type_mismatch : public std::logic_error {
   2c55a:	1141                	c.addi	sp,-16
   2c55c:	e406                	c.sdsp	ra,8(sp)
   2c55e:	0000e797          	auipc	a5,0xe
   2c562:	e727b783          	ld	a5,-398(a5) # 3a3d0 <vtable for elf::section_type_mismatch@@Base+0x7c0>
   2c566:	07c1                	c.addi	a5,16
   2c568:	e11c                	c.sd	a5,0(a0)
   2c56a:	c36ea0ef          	jal	ra,169a0 <std::logic_error::~logic_error()@plt>
   2c56e:	60a2                	c.ldsp	ra,8(sp)
   2c570:	0141                	c.addi	sp,16
   2c572:	8082                	c.jr	ra

000000000002c574 <elf::section_type_mismatch::~section_type_mismatch()>:
   2c574:	1141                	c.addi	sp,-16
   2c576:	e406                	c.sdsp	ra,8(sp)
   2c578:	e022                	c.sdsp	s0,0(sp)
   2c57a:	842a                	c.mv	s0,a0
   2c57c:	0000e797          	auipc	a5,0xe
   2c580:	e547b783          	ld	a5,-428(a5) # 3a3d0 <vtable for elf::section_type_mismatch@@Base+0x7c0>
   2c584:	07c1                	c.addi	a5,16
   2c586:	e11c                	c.sd	a5,0(a0)
   2c588:	c18ea0ef          	jal	ra,169a0 <std::logic_error::~logic_error()@plt>
   2c58c:	8522                	c.mv	a0,s0
   2c58e:	a12ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2c592:	60a2                	c.ldsp	ra,8(sp)
   2c594:	6402                	c.ldsp	s0,0(sp)
   2c596:	0141                	c.addi	sp,16
   2c598:	8082                	c.jr	ra

000000000002c59a <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   2c59a:	1141                	c.addi	sp,-16
   2c59c:	e406                	c.sdsp	ra,8(sp)
   2c59e:	e022                	c.sdsp	s0,0(sp)
   2c5a0:	03850413          	addi	s0,a0,56
	    ||
   2c5a4:	0000e797          	auipc	a5,0xe
   2c5a8:	fac7b783          	ld	a5,-84(a5) # 3a550 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc880>
   2c5ac:	02f58a63          	beq	a1,a5,2c5e0 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   2c5b0:	6588                	c.ld	a0,8(a1)
   2c5b2:	0000e797          	auipc	a5,0xe
   2c5b6:	e767b783          	ld	a5,-394(a5) # 3a428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc948>
   2c5ba:	02f50363          	beq	a0,a5,2c5e0 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   2c5be:	00054703          	lbu	a4,0(a0)
   2c5c2:	02a00793          	addi	a5,zero,42
   2c5c6:	02f70263          	beq	a4,a5,2c5ea <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   2c5ca:	0000e597          	auipc	a1,0xe
   2c5ce:	e5e5b583          	ld	a1,-418(a1) # 3a428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc948>
   2c5d2:	fffe90ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   2c5d6:	00153513          	sltiu	a0,a0,1
   2c5da:	40a00533          	sub	a0,zero,a0
   2c5de:	8c69                	c.and	s0,a0
      }
   2c5e0:	8522                	c.mv	a0,s0
   2c5e2:	60a2                	c.ldsp	ra,8(sp)
   2c5e4:	6402                	c.ldsp	s0,0(sp)
   2c5e6:	0141                	c.addi	sp,16
   2c5e8:	8082                	c.jr	ra
	return nullptr;
   2c5ea:	4401                	c.li	s0,0
   2c5ec:	bfd5                	c.j	2c5e0 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000002c5ee <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   2c5ee:	1141                	c.addi	sp,-16
   2c5f0:	e406                	c.sdsp	ra,8(sp)
   2c5f2:	e022                	c.sdsp	s0,0(sp)
   2c5f4:	03850413          	addi	s0,a0,56
	    ||
   2c5f8:	0000e797          	auipc	a5,0xe
   2c5fc:	f587b783          	ld	a5,-168(a5) # 3a550 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc880>
   2c600:	02f58a63          	beq	a1,a5,2c634 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   2c604:	6588                	c.ld	a0,8(a1)
   2c606:	0000e797          	auipc	a5,0xe
   2c60a:	e227b783          	ld	a5,-478(a5) # 3a428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc948>
   2c60e:	02f50363          	beq	a0,a5,2c634 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   2c612:	00054703          	lbu	a4,0(a0)
   2c616:	02a00793          	addi	a5,zero,42
   2c61a:	02f70263          	beq	a4,a5,2c63e <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   2c61e:	0000e597          	auipc	a1,0xe
   2c622:	e0a5b583          	ld	a1,-502(a1) # 3a428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc948>
   2c626:	fabe90ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   2c62a:	00153513          	sltiu	a0,a0,1
   2c62e:	40a00533          	sub	a0,zero,a0
   2c632:	8c69                	c.and	s0,a0
      }
   2c634:	8522                	c.mv	a0,s0
   2c636:	60a2                	c.ldsp	ra,8(sp)
   2c638:	6402                	c.ldsp	s0,0(sp)
   2c63a:	0141                	c.addi	sp,16
   2c63c:	8082                	c.jr	ra
	return nullptr;
   2c63e:	4401                	c.li	s0,0
   2c640:	bfd5                	c.j	2c634 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000002c642 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   2c642:	1141                	c.addi	sp,-16
   2c644:	e406                	c.sdsp	ra,8(sp)
   2c646:	e022                	c.sdsp	s0,0(sp)
   2c648:	03850413          	addi	s0,a0,56
	    ||
   2c64c:	0000e797          	auipc	a5,0xe
   2c650:	f047b783          	ld	a5,-252(a5) # 3a550 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc880>
   2c654:	02f58a63          	beq	a1,a5,2c688 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   2c658:	6588                	c.ld	a0,8(a1)
   2c65a:	0000e797          	auipc	a5,0xe
   2c65e:	dce7b783          	ld	a5,-562(a5) # 3a428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc948>
   2c662:	02f50363          	beq	a0,a5,2c688 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   2c666:	00054703          	lbu	a4,0(a0)
   2c66a:	02a00793          	addi	a5,zero,42
   2c66e:	02f70263          	beq	a4,a5,2c692 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   2c672:	0000e597          	auipc	a1,0xe
   2c676:	db65b583          	ld	a1,-586(a1) # 3a428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc948>
   2c67a:	f57e90ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   2c67e:	00153513          	sltiu	a0,a0,1
   2c682:	40a00533          	sub	a0,zero,a0
   2c686:	8c69                	c.and	s0,a0
      }
   2c688:	8522                	c.mv	a0,s0
   2c68a:	60a2                	c.ldsp	ra,8(sp)
   2c68c:	6402                	c.ldsp	s0,0(sp)
   2c68e:	0141                	c.addi	sp,16
   2c690:	8082                	c.jr	ra
	return nullptr;
   2c692:	4401                	c.li	s0,0
   2c694:	bfd5                	c.j	2c688 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000002c696 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   2c696:	1141                	c.addi	sp,-16
   2c698:	e406                	c.sdsp	ra,8(sp)
   2c69a:	e022                	c.sdsp	s0,0(sp)
   2c69c:	03850413          	addi	s0,a0,56
	    ||
   2c6a0:	0000e797          	auipc	a5,0xe
   2c6a4:	eb07b783          	ld	a5,-336(a5) # 3a550 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc880>
   2c6a8:	02f58a63          	beq	a1,a5,2c6dc <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   2c6ac:	6588                	c.ld	a0,8(a1)
   2c6ae:	0000e797          	auipc	a5,0xe
   2c6b2:	d7a7b783          	ld	a5,-646(a5) # 3a428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc948>
   2c6b6:	02f50363          	beq	a0,a5,2c6dc <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   2c6ba:	00054703          	lbu	a4,0(a0)
   2c6be:	02a00793          	addi	a5,zero,42
   2c6c2:	02f70263          	beq	a4,a5,2c6e6 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   2c6c6:	0000e597          	auipc	a1,0xe
   2c6ca:	d625b583          	ld	a1,-670(a1) # 3a428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc948>
   2c6ce:	f03e90ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   2c6d2:	00153513          	sltiu	a0,a0,1
   2c6d6:	40a00533          	sub	a0,zero,a0
   2c6da:	8c69                	c.and	s0,a0
      }
   2c6dc:	8522                	c.mv	a0,s0
   2c6de:	60a2                	c.ldsp	ra,8(sp)
   2c6e0:	6402                	c.ldsp	s0,0(sp)
   2c6e2:	0141                	c.addi	sp,16
   2c6e4:	8082                	c.jr	ra
	return nullptr;
   2c6e6:	4401                	c.li	s0,0
   2c6e8:	bfd5                	c.j	2c6dc <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000002c6ea <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   2c6ea:	1141                	c.addi	sp,-16
   2c6ec:	e406                	c.sdsp	ra,8(sp)
   2c6ee:	e022                	c.sdsp	s0,0(sp)
	if (_M_pi != nullptr)
   2c6f0:	6120                	c.ld	s0,64(a0)
   2c6f2:	cc19                	c.beqz	s0,2c710 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
    if (__is_single_threaded())
   2c6f4:	0000e797          	auipc	a5,0xe
   2c6f8:	da47b783          	ld	a5,-604(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2c6fc:	0007c783          	lbu	a5,0(a5)
   2c700:	cf81                	c.beqz	a5,2c718 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2e>
    _Atomic_word __result = *__mem;
   2c702:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2c704:	fff5079b          	addiw	a5,a0,-1
   2c708:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2c70a:	4785                	c.li	a5,1
   2c70c:	00f50c63          	beq	a0,a5,2c724 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x3a>
      }
   2c710:	60a2                	c.ldsp	ra,8(sp)
   2c712:	6402                	c.ldsp	s0,0(sp)
   2c714:	0141                	c.addi	sp,16
   2c716:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2c718:	55fd                	c.li	a1,-1
   2c71a:	03040513          	addi	a0,s0,48
   2c71e:	ed3e90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c722:	b7e5                	c.j	2c70a <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x20>
	_M_dispose();
   2c724:	601c                	c.ld	a5,0(s0)
   2c726:	6b9c                	c.ld	a5,16(a5)
   2c728:	8522                	c.mv	a0,s0
   2c72a:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2c72c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2c730:	0000e797          	auipc	a5,0xe
   2c734:	d687b783          	ld	a5,-664(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2c738:	0007c783          	lbu	a5,0(a5)
   2c73c:	cf89                	c.beqz	a5,2c756 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
    _Atomic_word __result = *__mem;
   2c73e:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2c740:	fff5079b          	addiw	a5,a0,-1
   2c744:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2c746:	4785                	c.li	a5,1
   2c748:	fcf514e3          	bne	a0,a5,2c710 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
	    _M_destroy();
   2c74c:	601c                	c.ld	a5,0(s0)
   2c74e:	6f9c                	c.ld	a5,24(a5)
   2c750:	8522                	c.mv	a0,s0
   2c752:	9782                	c.jalr	a5
      }
   2c754:	bf75                	c.j	2c710 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
      return __exchange_and_add(__mem, __val);
   2c756:	55fd                	c.li	a1,-1
   2c758:	03440513          	addi	a0,s0,52
   2c75c:	e95e90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c760:	b7dd                	c.j	2c746 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x5c>

000000000002c762 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   2c762:	1141                	c.addi	sp,-16
   2c764:	e406                	c.sdsp	ra,8(sp)
   2c766:	e022                	c.sdsp	s0,0(sp)
	if (_M_pi != nullptr)
   2c768:	6120                	c.ld	s0,64(a0)
   2c76a:	cc19                	c.beqz	s0,2c788 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
    if (__is_single_threaded())
   2c76c:	0000e797          	auipc	a5,0xe
   2c770:	d2c7b783          	ld	a5,-724(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2c774:	0007c783          	lbu	a5,0(a5)
   2c778:	cf81                	c.beqz	a5,2c790 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2e>
    _Atomic_word __result = *__mem;
   2c77a:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2c77c:	fff5079b          	addiw	a5,a0,-1
   2c780:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2c782:	4785                	c.li	a5,1
   2c784:	00f50c63          	beq	a0,a5,2c79c <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x3a>
      }
   2c788:	60a2                	c.ldsp	ra,8(sp)
   2c78a:	6402                	c.ldsp	s0,0(sp)
   2c78c:	0141                	c.addi	sp,16
   2c78e:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2c790:	55fd                	c.li	a1,-1
   2c792:	03040513          	addi	a0,s0,48
   2c796:	e5be90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c79a:	b7e5                	c.j	2c782 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x20>
	_M_dispose();
   2c79c:	601c                	c.ld	a5,0(s0)
   2c79e:	6b9c                	c.ld	a5,16(a5)
   2c7a0:	8522                	c.mv	a0,s0
   2c7a2:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2c7a4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2c7a8:	0000e797          	auipc	a5,0xe
   2c7ac:	cf07b783          	ld	a5,-784(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2c7b0:	0007c783          	lbu	a5,0(a5)
   2c7b4:	cf89                	c.beqz	a5,2c7ce <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
    _Atomic_word __result = *__mem;
   2c7b6:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2c7b8:	fff5079b          	addiw	a5,a0,-1
   2c7bc:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2c7be:	4785                	c.li	a5,1
   2c7c0:	fcf514e3          	bne	a0,a5,2c788 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
	    _M_destroy();
   2c7c4:	601c                	c.ld	a5,0(s0)
   2c7c6:	6f9c                	c.ld	a5,24(a5)
   2c7c8:	8522                	c.mv	a0,s0
   2c7ca:	9782                	c.jalr	a5
      }
   2c7cc:	bf75                	c.j	2c788 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
      return __exchange_and_add(__mem, __val);
   2c7ce:	55fd                	c.li	a1,-1
   2c7d0:	03440513          	addi	a0,s0,52
   2c7d4:	e1de90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c7d8:	b7dd                	c.j	2c7be <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x5c>

000000000002c7da <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   2c7da:	1141                	c.addi	sp,-16
   2c7dc:	e406                	c.sdsp	ra,8(sp)
   2c7de:	e022                	c.sdsp	s0,0(sp)
	if (_M_pi != nullptr)
   2c7e0:	6120                	c.ld	s0,64(a0)
   2c7e2:	cc19                	c.beqz	s0,2c800 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
    if (__is_single_threaded())
   2c7e4:	0000e797          	auipc	a5,0xe
   2c7e8:	cb47b783          	ld	a5,-844(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2c7ec:	0007c783          	lbu	a5,0(a5)
   2c7f0:	cf81                	c.beqz	a5,2c808 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2e>
    _Atomic_word __result = *__mem;
   2c7f2:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2c7f4:	fff5079b          	addiw	a5,a0,-1
   2c7f8:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2c7fa:	4785                	c.li	a5,1
   2c7fc:	00f50c63          	beq	a0,a5,2c814 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x3a>
      }
   2c800:	60a2                	c.ldsp	ra,8(sp)
   2c802:	6402                	c.ldsp	s0,0(sp)
   2c804:	0141                	c.addi	sp,16
   2c806:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2c808:	55fd                	c.li	a1,-1
   2c80a:	03040513          	addi	a0,s0,48
   2c80e:	de3e90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c812:	b7e5                	c.j	2c7fa <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x20>
	_M_dispose();
   2c814:	601c                	c.ld	a5,0(s0)
   2c816:	6b9c                	c.ld	a5,16(a5)
   2c818:	8522                	c.mv	a0,s0
   2c81a:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2c81c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2c820:	0000e797          	auipc	a5,0xe
   2c824:	c787b783          	ld	a5,-904(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2c828:	0007c783          	lbu	a5,0(a5)
   2c82c:	cf89                	c.beqz	a5,2c846 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
    _Atomic_word __result = *__mem;
   2c82e:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2c830:	fff5079b          	addiw	a5,a0,-1
   2c834:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2c836:	4785                	c.li	a5,1
   2c838:	fcf514e3          	bne	a0,a5,2c800 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
	    _M_destroy();
   2c83c:	601c                	c.ld	a5,0(s0)
   2c83e:	6f9c                	c.ld	a5,24(a5)
   2c840:	8522                	c.mv	a0,s0
   2c842:	9782                	c.jalr	a5
      }
   2c844:	bf75                	c.j	2c800 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
      return __exchange_and_add(__mem, __val);
   2c846:	55fd                	c.li	a1,-1
   2c848:	03440513          	addi	a0,s0,52
   2c84c:	da5e90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c850:	b7dd                	c.j	2c836 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x5c>

000000000002c852 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   2c852:	1101                	c.addi	sp,-32
   2c854:	ec06                	c.sdsp	ra,24(sp)
   2c856:	e822                	c.sdsp	s0,16(sp)
   2c858:	e426                	c.sdsp	s1,8(sp)
   2c85a:	842a                	c.mv	s0,a0
	if (_M_pi != nullptr)
   2c85c:	7124                	c.ld	s1,96(a0)
   2c85e:	cc99                	c.beqz	s1,2c87c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2a>
    if (__is_single_threaded())
   2c860:	0000e797          	auipc	a5,0xe
   2c864:	c387b783          	ld	a5,-968(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2c868:	0007c783          	lbu	a5,0(a5)
   2c86c:	cf8d                	c.beqz	a5,2c8a6 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x54>
    _Atomic_word __result = *__mem;
   2c86e:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   2c870:	fff5079b          	addiw	a5,a0,-1
   2c874:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2c876:	4785                	c.li	a5,1
   2c878:	02f50d63          	beq	a0,a5,2c8b2 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x60>
	if (_M_pi != nullptr)
   2c87c:	6020                	c.ld	s0,64(s0)
   2c87e:	cc19                	c.beqz	s0,2c89c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x4a>
    if (__is_single_threaded())
   2c880:	0000e797          	auipc	a5,0xe
   2c884:	c187b783          	ld	a5,-1000(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2c888:	0007c783          	lbu	a5,0(a5)
   2c88c:	c3b5                	c.beqz	a5,2c8f0 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x9e>
    _Atomic_word __result = *__mem;
   2c88e:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2c890:	fff5079b          	addiw	a5,a0,-1
   2c894:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2c896:	4785                	c.li	a5,1
   2c898:	06f50263          	beq	a0,a5,2c8fc <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xaa>
      }
   2c89c:	60e2                	c.ldsp	ra,24(sp)
   2c89e:	6442                	c.ldsp	s0,16(sp)
   2c8a0:	64a2                	c.ldsp	s1,8(sp)
   2c8a2:	6105                	c.addi16sp	sp,32
   2c8a4:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2c8a6:	55fd                	c.li	a1,-1
   2c8a8:	03048513          	addi	a0,s1,48
   2c8ac:	d45e90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c8b0:	b7d9                	c.j	2c876 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x24>
	_M_dispose();
   2c8b2:	609c                	c.ld	a5,0(s1)
   2c8b4:	6b9c                	c.ld	a5,16(a5)
   2c8b6:	8526                	c.mv	a0,s1
   2c8b8:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2c8ba:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2c8be:	0000e797          	auipc	a5,0xe
   2c8c2:	bda7b783          	ld	a5,-1062(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2c8c6:	0007c783          	lbu	a5,0(a5)
   2c8ca:	cf89                	c.beqz	a5,2c8e4 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x92>
    _Atomic_word __result = *__mem;
   2c8cc:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   2c8ce:	fff5079b          	addiw	a5,a0,-1
   2c8d2:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2c8d4:	4785                	c.li	a5,1
   2c8d6:	faf513e3          	bne	a0,a5,2c87c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2a>
	    _M_destroy();
   2c8da:	609c                	c.ld	a5,0(s1)
   2c8dc:	6f9c                	c.ld	a5,24(a5)
   2c8de:	8526                	c.mv	a0,s1
   2c8e0:	9782                	c.jalr	a5
   2c8e2:	bf69                	c.j	2c87c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2a>
      return __exchange_and_add(__mem, __val);
   2c8e4:	55fd                	c.li	a1,-1
   2c8e6:	03448513          	addi	a0,s1,52
   2c8ea:	d07e90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c8ee:	b7dd                	c.j	2c8d4 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x82>
   2c8f0:	55fd                	c.li	a1,-1
   2c8f2:	03040513          	addi	a0,s0,48
   2c8f6:	cfbe90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c8fa:	bf71                	c.j	2c896 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x44>
	_M_dispose();
   2c8fc:	601c                	c.ld	a5,0(s0)
   2c8fe:	6b9c                	c.ld	a5,16(a5)
   2c900:	8522                	c.mv	a0,s0
   2c902:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2c904:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2c908:	0000e797          	auipc	a5,0xe
   2c90c:	b907b783          	ld	a5,-1136(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2c910:	0007c783          	lbu	a5,0(a5)
   2c914:	cf89                	c.beqz	a5,2c92e <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xdc>
    _Atomic_word __result = *__mem;
   2c916:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2c918:	fff5079b          	addiw	a5,a0,-1
   2c91c:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2c91e:	4785                	c.li	a5,1
   2c920:	f6f51ee3          	bne	a0,a5,2c89c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x4a>
	    _M_destroy();
   2c924:	601c                	c.ld	a5,0(s0)
   2c926:	6f9c                	c.ld	a5,24(a5)
   2c928:	8522                	c.mv	a0,s0
   2c92a:	9782                	c.jalr	a5
      }
   2c92c:	bf85                	c.j	2c89c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x4a>
      return __exchange_and_add(__mem, __val);
   2c92e:	55fd                	c.li	a1,-1
   2c930:	03440513          	addi	a0,s0,52
   2c934:	cbde90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c938:	b7dd                	c.j	2c91e <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xcc>

000000000002c93a <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   2c93a:	7139                	c.addi16sp	sp,-64
   2c93c:	fc06                	c.sdsp	ra,56(sp)
   2c93e:	f822                	c.sdsp	s0,48(sp)
   2c940:	f426                	c.sdsp	s1,40(sp)
   2c942:	f04a                	c.sdsp	s2,32(sp)
   2c944:	ec4e                	c.sdsp	s3,24(sp)
   2c946:	e852                	c.sdsp	s4,16(sp)
   2c948:	e456                	c.sdsp	s5,8(sp)
   2c94a:	892a                	c.mv	s2,a0
	if (_M_pi != nullptr)
   2c94c:	6960                	c.ld	s0,208(a0)
   2c94e:	cc19                	c.beqz	s0,2c96c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x32>
    if (__is_single_threaded())
   2c950:	0000e797          	auipc	a5,0xe
   2c954:	b487b783          	ld	a5,-1208(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2c958:	0007c783          	lbu	a5,0(a5)
   2c95c:	c7a9                	c.beqz	a5,2c9a6 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
    _Atomic_word __result = *__mem;
   2c95e:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2c960:	fff5079b          	addiw	a5,a0,-1
   2c964:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2c966:	4785                	c.li	a5,1
   2c968:	04f50563          	beq	a0,a5,2c9b2 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x78>
	if (_M_pi != nullptr)
   2c96c:	0c093403          	ld	s0,192(s2)
   2c970:	cc19                	c.beqz	s0,2c98e <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x54>
    if (__is_single_threaded())
   2c972:	0000e797          	auipc	a5,0xe
   2c976:	b267b783          	ld	a5,-1242(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2c97a:	0007c783          	lbu	a5,0(a5)
   2c97e:	cbad                	c.beqz	a5,2c9f0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb6>
    _Atomic_word __result = *__mem;
   2c980:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2c982:	fff5079b          	addiw	a5,a0,-1
   2c986:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2c988:	4785                	c.li	a5,1
   2c98a:	06f50963          	beq	a0,a5,2c9fc <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xc2>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   2c98e:	0a093403          	ld	s0,160(s2)
   2c992:	0a893983          	ld	s3,168(s2)
	  for (; __first != __last; ++__first)
   2c996:	11340563          	beq	s0,s3,2caa0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x166>
    return ::__libc_single_threaded;
   2c99a:	0000ea97          	auipc	s5,0xe
   2c99e:	afeaba83          	ld	s5,-1282(s5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2c9a2:	4a05                	c.li	s4,1
   2c9a4:	a065                	c.j	2ca4c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x112>
      return __exchange_and_add(__mem, __val);
   2c9a6:	55fd                	c.li	a1,-1
   2c9a8:	03040513          	addi	a0,s0,48
   2c9ac:	c45e90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c9b0:	bf5d                	c.j	2c966 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2c>
	_M_dispose();
   2c9b2:	601c                	c.ld	a5,0(s0)
   2c9b4:	6b9c                	c.ld	a5,16(a5)
   2c9b6:	8522                	c.mv	a0,s0
   2c9b8:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2c9ba:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2c9be:	0000e797          	auipc	a5,0xe
   2c9c2:	ada7b783          	ld	a5,-1318(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2c9c6:	0007c783          	lbu	a5,0(a5)
   2c9ca:	cf89                	c.beqz	a5,2c9e4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xaa>
    _Atomic_word __result = *__mem;
   2c9cc:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2c9ce:	fff5079b          	addiw	a5,a0,-1
   2c9d2:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2c9d4:	4785                	c.li	a5,1
   2c9d6:	f8f51be3          	bne	a0,a5,2c96c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x32>
	    _M_destroy();
   2c9da:	601c                	c.ld	a5,0(s0)
   2c9dc:	6f9c                	c.ld	a5,24(a5)
   2c9de:	8522                	c.mv	a0,s0
   2c9e0:	9782                	c.jalr	a5
   2c9e2:	b769                	c.j	2c96c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x32>
      return __exchange_and_add(__mem, __val);
   2c9e4:	55fd                	c.li	a1,-1
   2c9e6:	03440513          	addi	a0,s0,52
   2c9ea:	c07e90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c9ee:	b7dd                	c.j	2c9d4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x9a>
   2c9f0:	55fd                	c.li	a1,-1
   2c9f2:	03040513          	addi	a0,s0,48
   2c9f6:	bfbe90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c9fa:	b779                	c.j	2c988 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x4e>
	_M_dispose();
   2c9fc:	601c                	c.ld	a5,0(s0)
   2c9fe:	6b9c                	c.ld	a5,16(a5)
   2ca00:	8522                	c.mv	a0,s0
   2ca02:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2ca04:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2ca08:	0000e797          	auipc	a5,0xe
   2ca0c:	a907b783          	ld	a5,-1392(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2ca10:	0007c783          	lbu	a5,0(a5)
   2ca14:	cf89                	c.beqz	a5,2ca2e <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xf4>
    _Atomic_word __result = *__mem;
   2ca16:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2ca18:	fff5079b          	addiw	a5,a0,-1
   2ca1c:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2ca1e:	4785                	c.li	a5,1
   2ca20:	f6f517e3          	bne	a0,a5,2c98e <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x54>
	    _M_destroy();
   2ca24:	601c                	c.ld	a5,0(s0)
   2ca26:	6f9c                	c.ld	a5,24(a5)
   2ca28:	8522                	c.mv	a0,s0
   2ca2a:	9782                	c.jalr	a5
   2ca2c:	b78d                	c.j	2c98e <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x54>
      return __exchange_and_add(__mem, __val);
   2ca2e:	55fd                	c.li	a1,-1
   2ca30:	03440513          	addi	a0,s0,52
   2ca34:	bbde90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2ca38:	b7dd                	c.j	2ca1e <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xe4>
    _Atomic_word __result = *__mem;
   2ca3a:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   2ca3c:	fff5079b          	addiw	a5,a0,-1
   2ca40:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2ca42:	03450063          	beq	a0,s4,2ca62 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x128>
   2ca46:	0441                	c.addi	s0,16
   2ca48:	04898c63          	beq	s3,s0,2caa0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x166>
	if (_M_pi != nullptr)
   2ca4c:	6404                	c.ld	s1,8(s0)
   2ca4e:	dce5                	c.beqz	s1,2ca46 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x10c>
    if (__is_single_threaded())
   2ca50:	000ac783          	lbu	a5,0(s5)
   2ca54:	f3fd                	c.bnez	a5,2ca3a <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x100>
      return __exchange_and_add(__mem, __val);
   2ca56:	55fd                	c.li	a1,-1
   2ca58:	03048513          	addi	a0,s1,48
   2ca5c:	b95e90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2ca60:	b7cd                	c.j	2ca42 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x108>
	_M_dispose();
   2ca62:	609c                	c.ld	a5,0(s1)
   2ca64:	6b9c                	c.ld	a5,16(a5)
   2ca66:	8526                	c.mv	a0,s1
   2ca68:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2ca6a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2ca6e:	0000e797          	auipc	a5,0xe
   2ca72:	a2a7b783          	ld	a5,-1494(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2ca76:	0007c783          	lbu	a5,0(a5)
   2ca7a:	cf89                	c.beqz	a5,2ca94 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x15a>
    _Atomic_word __result = *__mem;
   2ca7c:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   2ca7e:	fff5079b          	addiw	a5,a0,-1
   2ca82:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2ca84:	4785                	c.li	a5,1
   2ca86:	fcf510e3          	bne	a0,a5,2ca46 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x10c>
	    _M_destroy();
   2ca8a:	609c                	c.ld	a5,0(s1)
   2ca8c:	6f9c                	c.ld	a5,24(a5)
   2ca8e:	8526                	c.mv	a0,s1
   2ca90:	9782                	c.jalr	a5
   2ca92:	bf55                	c.j	2ca46 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x10c>
      return __exchange_and_add(__mem, __val);
   2ca94:	55fd                	c.li	a1,-1
   2ca96:	03448513          	addi	a0,s1,52
   2ca9a:	b57e90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2ca9e:	b7dd                	c.j	2ca84 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x14a>
	_M_deallocate(_M_impl._M_start,
   2caa0:	0a093503          	ld	a0,160(s2)
	if (__p)
   2caa4:	c119                	c.beqz	a0,2caaa <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x170>
   2caa6:	cfbe90ef          	jal	ra,167a0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   2caaa:	08893403          	ld	s0,136(s2)
   2caae:	09093983          	ld	s3,144(s2)
   2cab2:	07340b63          	beq	s0,s3,2cb28 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1ee>
    return ::__libc_single_threaded;
   2cab6:	0000ea97          	auipc	s5,0xe
   2caba:	9e2aba83          	ld	s5,-1566(s5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2cabe:	4a05                	c.li	s4,1
   2cac0:	a811                	c.j	2cad4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x19a>
    _Atomic_word __result = *__mem;
   2cac2:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   2cac4:	fff5079b          	addiw	a5,a0,-1
   2cac8:	d89c                	c.sw	a5,48(s1)
   2caca:	03450063          	beq	a0,s4,2caea <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1b0>
   2cace:	0441                	c.addi	s0,16
   2cad0:	04898c63          	beq	s3,s0,2cb28 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1ee>
	if (_M_pi != nullptr)
   2cad4:	6404                	c.ld	s1,8(s0)
   2cad6:	dce5                	c.beqz	s1,2cace <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x194>
    if (__is_single_threaded())
   2cad8:	000ac783          	lbu	a5,0(s5)
   2cadc:	f3fd                	c.bnez	a5,2cac2 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x188>
      return __exchange_and_add(__mem, __val);
   2cade:	55fd                	c.li	a1,-1
   2cae0:	03048513          	addi	a0,s1,48
   2cae4:	b0de90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2cae8:	b7cd                	c.j	2caca <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x190>
	_M_dispose();
   2caea:	609c                	c.ld	a5,0(s1)
   2caec:	6b9c                	c.ld	a5,16(a5)
   2caee:	8526                	c.mv	a0,s1
   2caf0:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2caf2:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2caf6:	0000e797          	auipc	a5,0xe
   2cafa:	9a27b783          	ld	a5,-1630(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2cafe:	0007c783          	lbu	a5,0(a5)
   2cb02:	cf89                	c.beqz	a5,2cb1c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1e2>
    _Atomic_word __result = *__mem;
   2cb04:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   2cb06:	fff5079b          	addiw	a5,a0,-1
   2cb0a:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2cb0c:	4785                	c.li	a5,1
   2cb0e:	fcf510e3          	bne	a0,a5,2cace <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x194>
	    _M_destroy();
   2cb12:	609c                	c.ld	a5,0(s1)
   2cb14:	6f9c                	c.ld	a5,24(a5)
   2cb16:	8526                	c.mv	a0,s1
   2cb18:	9782                	c.jalr	a5
   2cb1a:	bf55                	c.j	2cace <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x194>
      return __exchange_and_add(__mem, __val);
   2cb1c:	55fd                	c.li	a1,-1
   2cb1e:	03448513          	addi	a0,s1,52
   2cb22:	acfe90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2cb26:	b7dd                	c.j	2cb0c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1d2>
	_M_deallocate(_M_impl._M_start,
   2cb28:	08893503          	ld	a0,136(s2)
	if (__p)
   2cb2c:	c119                	c.beqz	a0,2cb32 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1f8>
   2cb2e:	c73e90ef          	jal	ra,167a0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   2cb32:	04093403          	ld	s0,64(s2)
   2cb36:	cc19                	c.beqz	s0,2cb54 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x21a>
    if (__is_single_threaded())
   2cb38:	0000e797          	auipc	a5,0xe
   2cb3c:	9607b783          	ld	a5,-1696(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2cb40:	0007c783          	lbu	a5,0(a5)
   2cb44:	c38d                	c.beqz	a5,2cb66 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x22c>
    _Atomic_word __result = *__mem;
   2cb46:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2cb48:	fff5079b          	addiw	a5,a0,-1
   2cb4c:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2cb4e:	4785                	c.li	a5,1
   2cb50:	02f50163          	beq	a0,a5,2cb72 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x238>
      }
   2cb54:	70e2                	c.ldsp	ra,56(sp)
   2cb56:	7442                	c.ldsp	s0,48(sp)
   2cb58:	74a2                	c.ldsp	s1,40(sp)
   2cb5a:	7902                	c.ldsp	s2,32(sp)
   2cb5c:	69e2                	c.ldsp	s3,24(sp)
   2cb5e:	6a42                	c.ldsp	s4,16(sp)
   2cb60:	6aa2                	c.ldsp	s5,8(sp)
   2cb62:	6121                	c.addi16sp	sp,64
   2cb64:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2cb66:	55fd                	c.li	a1,-1
   2cb68:	03040513          	addi	a0,s0,48
   2cb6c:	a85e90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2cb70:	bff9                	c.j	2cb4e <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x214>
	_M_dispose();
   2cb72:	601c                	c.ld	a5,0(s0)
   2cb74:	6b9c                	c.ld	a5,16(a5)
   2cb76:	8522                	c.mv	a0,s0
   2cb78:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2cb7a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2cb7e:	0000e797          	auipc	a5,0xe
   2cb82:	91a7b783          	ld	a5,-1766(a5) # 3a498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2cb86:	0007c783          	lbu	a5,0(a5)
   2cb8a:	cf89                	c.beqz	a5,2cba4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26a>
    _Atomic_word __result = *__mem;
   2cb8c:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2cb8e:	fff5079b          	addiw	a5,a0,-1
   2cb92:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2cb94:	4785                	c.li	a5,1
   2cb96:	faf51fe3          	bne	a0,a5,2cb54 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x21a>
	    _M_destroy();
   2cb9a:	601c                	c.ld	a5,0(s0)
   2cb9c:	6f9c                	c.ld	a5,24(a5)
   2cb9e:	8522                	c.mv	a0,s0
   2cba0:	9782                	c.jalr	a5
      }
   2cba2:	bf4d                	c.j	2cb54 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x21a>
      return __exchange_and_add(__mem, __val);
   2cba4:	55fd                	c.li	a1,-1
   2cba6:	03440513          	addi	a0,s0,52
   2cbaa:	a47e90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2cbae:	b7dd                	c.j	2cb94 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x25a>

000000000002cbb0 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   2cbb0:	1101                	c.addi	sp,-32
   2cbb2:	ec06                	c.sdsp	ra,24(sp)
   2cbb4:	e822                	c.sdsp	s0,16(sp)
   2cbb6:	e426                	c.sdsp	s1,8(sp)
   2cbb8:	84aa                	c.mv	s1,a0
   2cbba:	842e                	c.mv	s0,a1
  switch (ei_class) {
   2cbbc:	4785                	c.li	a5,1
   2cbbe:	00f60a63          	beq	a2,a5,2cbd2 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x22>
   2cbc2:	4789                	c.li	a5,2
   2cbc4:	22f60e63          	beq	a2,a5,2ce00 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x250>
}
   2cbc8:	60e2                	c.ldsp	ra,24(sp)
   2cbca:	6442                	c.ldsp	s0,16(sp)
   2cbcc:	64a2                	c.ldsp	s1,8(sp)
   2cbce:	6105                	c.addi16sp	sp,32
   2cbd0:	8082                	c.jr	ra
   2cbd2:	4785                	c.li	a5,1
   2cbd4:	14f68863          	beq	a3,a5,2cd24 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x174>
   2cbd8:	4789                	c.li	a5,2
   2cbda:	fef697e3          	bne	a3,a5,2cbc8 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
  typename E::Half shentsize; // Size of section header entry
  typename E::Half shnum;     // Number of section header entries
  typename E::Half shstrndx;  // Section name string table index

  template <typename E2> void from(const E2 &o) {
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   2cbde:	0005c603          	lbu	a2,0(a1)
   2cbe2:	0015c683          	lbu	a3,1(a1)
   2cbe6:	0025c703          	lbu	a4,2(a1)
   2cbea:	0035c783          	lbu	a5,3(a1)
   2cbee:	00c50023          	sb	a2,0(a0)
   2cbf2:	00d500a3          	sb	a3,1(a0)
   2cbf6:	00e50123          	sb	a4,2(a0)
   2cbfa:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   2cbfe:	0045c783          	lbu	a5,4(a1)
   2cc02:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   2cc06:	0055c783          	lbu	a5,5(a1)
   2cc0a:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   2cc0e:	0065c783          	lbu	a5,6(a1)
   2cc12:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   2cc16:	0075c783          	lbu	a5,7(a1)
   2cc1a:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   2cc1e:	0085c783          	lbu	a5,8(a1)
   2cc22:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   2cc26:	0095c883          	lbu	a7,9(a1)
   2cc2a:	00a5c803          	lbu	a6,10(a1)
   2cc2e:	00b5c503          	lbu	a0,11(a1)
   2cc32:	00c5c583          	lbu	a1,12(a1)
   2cc36:	00d44603          	lbu	a2,13(s0)
   2cc3a:	00e44683          	lbu	a3,14(s0)
   2cc3e:	00f44703          	lbu	a4,15(s0)
   2cc42:	011484a3          	sb	a7,9(s1)
   2cc46:	01048523          	sb	a6,10(s1)
   2cc4a:	00a485a3          	sb	a0,11(s1)
   2cc4e:	00b48623          	sb	a1,12(s1)
   2cc52:	00c486a3          	sb	a2,13(s1)
   2cc56:	00d48723          	sb	a3,14(s1)
   2cc5a:	00e487a3          	sb	a4,15(s1)

    type = swizzle(o.type, o.order, order);
   2cc5e:	01045783          	lhu	a5,16(s0)
  switch (sizeof(T)) {
  case 1:
    return v;
  case 2: {
    std::uint16_t x = (std::uint16_t)v;
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   2cc62:	0087d71b          	srliw	a4,a5,0x8
   2cc66:	0087979b          	slliw	a5,a5,0x8
   2cc6a:	8fd9                	c.or	a5,a4
   2cc6c:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   2cc70:	01245783          	lhu	a5,18(s0)
   2cc74:	0087d71b          	srliw	a4,a5,0x8
   2cc78:	0087979b          	slliw	a5,a5,0x8
   2cc7c:	8fd9                	c.or	a5,a4
   2cc7e:	00f49923          	sh	a5,18(s1)
  }
  case 4:
    return (T)__builtin_bswap32((std::uint32_t)v);
   2cc82:	4848                	c.lw	a0,20(s0)
   2cc84:	95de90ef          	jal	ra,165e0 <__bswapsi2@plt>
    version = swizzle(o.version, o.order, order);
   2cc88:	c8c8                	c.sw	a0,20(s1)
   2cc8a:	4c08                	c.lw	a0,24(s0)
   2cc8c:	955e90ef          	jal	ra,165e0 <__bswapsi2@plt>
    entry = swizzle(o.entry, o.order, order);
   2cc90:	1502                	c.slli	a0,0x20
   2cc92:	9101                	c.srli	a0,0x20
   2cc94:	ec88                	c.sd	a0,24(s1)
   2cc96:	4c48                	c.lw	a0,28(s0)
   2cc98:	949e90ef          	jal	ra,165e0 <__bswapsi2@plt>
    phoff = swizzle(o.phoff, o.order, order);
   2cc9c:	1502                	c.slli	a0,0x20
   2cc9e:	9101                	c.srli	a0,0x20
   2cca0:	f088                	c.sd	a0,32(s1)
   2cca2:	5008                	c.lw	a0,32(s0)
   2cca4:	93de90ef          	jal	ra,165e0 <__bswapsi2@plt>
    shoff = swizzle(o.shoff, o.order, order);
   2cca8:	1502                	c.slli	a0,0x20
   2ccaa:	9101                	c.srli	a0,0x20
   2ccac:	f488                	c.sd	a0,40(s1)
   2ccae:	5048                	c.lw	a0,36(s0)
   2ccb0:	931e90ef          	jal	ra,165e0 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   2ccb4:	d888                	c.sw	a0,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   2ccb6:	02845783          	lhu	a5,40(s0)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   2ccba:	0087d71b          	srliw	a4,a5,0x8
   2ccbe:	0087979b          	slliw	a5,a5,0x8
   2ccc2:	8fd9                	c.or	a5,a4
   2ccc4:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   2ccc8:	02a45783          	lhu	a5,42(s0)
   2cccc:	0087d71b          	srliw	a4,a5,0x8
   2ccd0:	0087979b          	slliw	a5,a5,0x8
   2ccd4:	8fd9                	c.or	a5,a4
   2ccd6:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   2ccda:	02c45783          	lhu	a5,44(s0)
   2ccde:	0087d71b          	srliw	a4,a5,0x8
   2cce2:	0087979b          	slliw	a5,a5,0x8
   2cce6:	8fd9                	c.or	a5,a4
   2cce8:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   2ccec:	02e45783          	lhu	a5,46(s0)
   2ccf0:	0087d71b          	srliw	a4,a5,0x8
   2ccf4:	0087979b          	slliw	a5,a5,0x8
   2ccf8:	8fd9                	c.or	a5,a4
   2ccfa:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   2ccfe:	03045783          	lhu	a5,48(s0)
   2cd02:	0087d71b          	srliw	a4,a5,0x8
   2cd06:	0087979b          	slliw	a5,a5,0x8
   2cd0a:	8fd9                	c.or	a5,a4
   2cd0c:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   2cd10:	03245783          	lhu	a5,50(s0)
   2cd14:	0087d71b          	srliw	a4,a5,0x8
   2cd18:	0087979b          	slliw	a5,a5,0x8
   2cd1c:	8fd9                	c.or	a5,a4
   2cd1e:	02f49f23          	sh	a5,62(s1)
  }
   2cd22:	b55d                	c.j	2cbc8 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   2cd24:	0005c603          	lbu	a2,0(a1)
   2cd28:	0015c683          	lbu	a3,1(a1)
   2cd2c:	0025c703          	lbu	a4,2(a1)
   2cd30:	0035c783          	lbu	a5,3(a1)
   2cd34:	00c50023          	sb	a2,0(a0)
   2cd38:	00d500a3          	sb	a3,1(a0)
   2cd3c:	00e50123          	sb	a4,2(a0)
   2cd40:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   2cd44:	0045c783          	lbu	a5,4(a1)
   2cd48:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   2cd4c:	0055c783          	lbu	a5,5(a1)
   2cd50:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   2cd54:	0065c783          	lbu	a5,6(a1)
   2cd58:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   2cd5c:	0075c783          	lbu	a5,7(a1)
   2cd60:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   2cd64:	0085c783          	lbu	a5,8(a1)
   2cd68:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   2cd6c:	0095c883          	lbu	a7,9(a1)
   2cd70:	00a5c803          	lbu	a6,10(a1)
   2cd74:	00b5c503          	lbu	a0,11(a1)
   2cd78:	00c5c583          	lbu	a1,12(a1)
   2cd7c:	00d44603          	lbu	a2,13(s0)
   2cd80:	00e44683          	lbu	a3,14(s0)
   2cd84:	00f44703          	lbu	a4,15(s0)
   2cd88:	011484a3          	sb	a7,9(s1)
   2cd8c:	01048523          	sb	a6,10(s1)
   2cd90:	00a485a3          	sb	a0,11(s1)
   2cd94:	00b48623          	sb	a1,12(s1)
   2cd98:	00c486a3          	sb	a2,13(s1)
   2cd9c:	00d48723          	sb	a3,14(s1)
   2cda0:	00e487a3          	sb	a4,15(s1)
    type = swizzle(o.type, o.order, order);
   2cda4:	01045783          	lhu	a5,16(s0)
   2cda8:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   2cdac:	01245783          	lhu	a5,18(s0)
   2cdb0:	00f49923          	sh	a5,18(s1)
    version = swizzle(o.version, o.order, order);
   2cdb4:	485c                	c.lw	a5,20(s0)
   2cdb6:	c8dc                	c.sw	a5,20(s1)
    entry = swizzle(o.entry, o.order, order);
   2cdb8:	01846783          	lwu	a5,24(s0)
   2cdbc:	ec9c                	c.sd	a5,24(s1)
    phoff = swizzle(o.phoff, o.order, order);
   2cdbe:	01c46783          	lwu	a5,28(s0)
   2cdc2:	f09c                	c.sd	a5,32(s1)
    shoff = swizzle(o.shoff, o.order, order);
   2cdc4:	02046783          	lwu	a5,32(s0)
   2cdc8:	f49c                	c.sd	a5,40(s1)
    flags = swizzle(o.flags, o.order, order);
   2cdca:	505c                	c.lw	a5,36(s0)
   2cdcc:	d89c                	c.sw	a5,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   2cdce:	02845783          	lhu	a5,40(s0)
   2cdd2:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   2cdd6:	02a45783          	lhu	a5,42(s0)
   2cdda:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   2cdde:	02c45783          	lhu	a5,44(s0)
   2cde2:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   2cde6:	02e45783          	lhu	a5,46(s0)
   2cdea:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   2cdee:	03045783          	lhu	a5,48(s0)
   2cdf2:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   2cdf6:	03245783          	lhu	a5,50(s0)
   2cdfa:	02f49f23          	sh	a5,62(s1)
  }
   2cdfe:	b3e9                	c.j	2cbc8 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
   2ce00:	4785                	c.li	a5,1
   2ce02:	14f68263          	beq	a3,a5,2cf46 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x396>
   2ce06:	4789                	c.li	a5,2
   2ce08:	dcf690e3          	bne	a3,a5,2cbc8 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   2ce0c:	0005c603          	lbu	a2,0(a1)
   2ce10:	0015c683          	lbu	a3,1(a1)
   2ce14:	0025c703          	lbu	a4,2(a1)
   2ce18:	0035c783          	lbu	a5,3(a1)
   2ce1c:	00c50023          	sb	a2,0(a0)
   2ce20:	00d500a3          	sb	a3,1(a0)
   2ce24:	00e50123          	sb	a4,2(a0)
   2ce28:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   2ce2c:	0045c783          	lbu	a5,4(a1)
   2ce30:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   2ce34:	0055c783          	lbu	a5,5(a1)
   2ce38:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   2ce3c:	0065c783          	lbu	a5,6(a1)
   2ce40:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   2ce44:	0075c783          	lbu	a5,7(a1)
   2ce48:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   2ce4c:	0085c783          	lbu	a5,8(a1)
   2ce50:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   2ce54:	0095c883          	lbu	a7,9(a1)
   2ce58:	00a5c803          	lbu	a6,10(a1)
   2ce5c:	00b5c503          	lbu	a0,11(a1)
   2ce60:	00c5c583          	lbu	a1,12(a1)
   2ce64:	00d44603          	lbu	a2,13(s0)
   2ce68:	00e44683          	lbu	a3,14(s0)
   2ce6c:	00f44703          	lbu	a4,15(s0)
   2ce70:	011484a3          	sb	a7,9(s1)
   2ce74:	01048523          	sb	a6,10(s1)
   2ce78:	00a485a3          	sb	a0,11(s1)
   2ce7c:	00b48623          	sb	a1,12(s1)
   2ce80:	00c486a3          	sb	a2,13(s1)
   2ce84:	00d48723          	sb	a3,14(s1)
   2ce88:	00e487a3          	sb	a4,15(s1)
    type = swizzle(o.type, o.order, order);
   2ce8c:	01045783          	lhu	a5,16(s0)
   2ce90:	0087d71b          	srliw	a4,a5,0x8
   2ce94:	0087979b          	slliw	a5,a5,0x8
   2ce98:	8fd9                	c.or	a5,a4
   2ce9a:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   2ce9e:	01245783          	lhu	a5,18(s0)
   2cea2:	0087d71b          	srliw	a4,a5,0x8
   2cea6:	0087979b          	slliw	a5,a5,0x8
   2ceaa:	8fd9                	c.or	a5,a4
   2ceac:	00f49923          	sh	a5,18(s1)
    return (T)__builtin_bswap32((std::uint32_t)v);
   2ceb0:	4848                	c.lw	a0,20(s0)
   2ceb2:	f2ee90ef          	jal	ra,165e0 <__bswapsi2@plt>
    version = swizzle(o.version, o.order, order);
   2ceb6:	c8c8                	c.sw	a0,20(s1)
  case 8:
    return (T)__builtin_bswap64((std::uint64_t)v);
   2ceb8:	6c08                	c.ld	a0,24(s0)
   2ceba:	927e90ef          	jal	ra,167e0 <__bswapdi2@plt>
    entry = swizzle(o.entry, o.order, order);
   2cebe:	ec88                	c.sd	a0,24(s1)
   2cec0:	7008                	c.ld	a0,32(s0)
   2cec2:	91fe90ef          	jal	ra,167e0 <__bswapdi2@plt>
    phoff = swizzle(o.phoff, o.order, order);
   2cec6:	f088                	c.sd	a0,32(s1)
   2cec8:	7408                	c.ld	a0,40(s0)
   2ceca:	917e90ef          	jal	ra,167e0 <__bswapdi2@plt>
    shoff = swizzle(o.shoff, o.order, order);
   2cece:	f488                	c.sd	a0,40(s1)
    return (T)__builtin_bswap32((std::uint32_t)v);
   2ced0:	5808                	c.lw	a0,48(s0)
   2ced2:	f0ee90ef          	jal	ra,165e0 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   2ced6:	d888                	c.sw	a0,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   2ced8:	03445783          	lhu	a5,52(s0)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   2cedc:	0087d71b          	srliw	a4,a5,0x8
   2cee0:	0087979b          	slliw	a5,a5,0x8
   2cee4:	8fd9                	c.or	a5,a4
   2cee6:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   2ceea:	03645783          	lhu	a5,54(s0)
   2ceee:	0087d71b          	srliw	a4,a5,0x8
   2cef2:	0087979b          	slliw	a5,a5,0x8
   2cef6:	8fd9                	c.or	a5,a4
   2cef8:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   2cefc:	03845783          	lhu	a5,56(s0)
   2cf00:	0087d71b          	srliw	a4,a5,0x8
   2cf04:	0087979b          	slliw	a5,a5,0x8
   2cf08:	8fd9                	c.or	a5,a4
   2cf0a:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   2cf0e:	03a45783          	lhu	a5,58(s0)
   2cf12:	0087d71b          	srliw	a4,a5,0x8
   2cf16:	0087979b          	slliw	a5,a5,0x8
   2cf1a:	8fd9                	c.or	a5,a4
   2cf1c:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   2cf20:	03c45783          	lhu	a5,60(s0)
   2cf24:	0087d71b          	srliw	a4,a5,0x8
   2cf28:	0087979b          	slliw	a5,a5,0x8
   2cf2c:	8fd9                	c.or	a5,a4
   2cf2e:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   2cf32:	03e45783          	lhu	a5,62(s0)
   2cf36:	0087d71b          	srliw	a4,a5,0x8
   2cf3a:	0087979b          	slliw	a5,a5,0x8
   2cf3e:	8fd9                	c.or	a5,a4
   2cf40:	02f49f23          	sh	a5,62(s1)
  }
   2cf44:	b151                	c.j	2cbc8 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   2cf46:	0005c603          	lbu	a2,0(a1)
   2cf4a:	0015c683          	lbu	a3,1(a1)
   2cf4e:	0025c703          	lbu	a4,2(a1)
   2cf52:	0035c783          	lbu	a5,3(a1)
   2cf56:	00c50023          	sb	a2,0(a0)
   2cf5a:	00d500a3          	sb	a3,1(a0)
   2cf5e:	00e50123          	sb	a4,2(a0)
   2cf62:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   2cf66:	0045c783          	lbu	a5,4(a1)
   2cf6a:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   2cf6e:	0055c783          	lbu	a5,5(a1)
   2cf72:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   2cf76:	0065c783          	lbu	a5,6(a1)
   2cf7a:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   2cf7e:	0075c783          	lbu	a5,7(a1)
   2cf82:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   2cf86:	0085c783          	lbu	a5,8(a1)
   2cf8a:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   2cf8e:	0095c883          	lbu	a7,9(a1)
   2cf92:	00a5c803          	lbu	a6,10(a1)
   2cf96:	00b5c503          	lbu	a0,11(a1)
   2cf9a:	00c5c583          	lbu	a1,12(a1)
   2cf9e:	00d44603          	lbu	a2,13(s0)
   2cfa2:	00e44683          	lbu	a3,14(s0)
   2cfa6:	00f44703          	lbu	a4,15(s0)
   2cfaa:	011484a3          	sb	a7,9(s1)
   2cfae:	01048523          	sb	a6,10(s1)
   2cfb2:	00a485a3          	sb	a0,11(s1)
   2cfb6:	00b48623          	sb	a1,12(s1)
   2cfba:	00c486a3          	sb	a2,13(s1)
   2cfbe:	00d48723          	sb	a3,14(s1)
   2cfc2:	00e487a3          	sb	a4,15(s1)
    type = swizzle(o.type, o.order, order);
   2cfc6:	01045783          	lhu	a5,16(s0)
   2cfca:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   2cfce:	01245783          	lhu	a5,18(s0)
   2cfd2:	00f49923          	sh	a5,18(s1)
    version = swizzle(o.version, o.order, order);
   2cfd6:	485c                	c.lw	a5,20(s0)
   2cfd8:	c8dc                	c.sw	a5,20(s1)
    entry = swizzle(o.entry, o.order, order);
   2cfda:	6c1c                	c.ld	a5,24(s0)
   2cfdc:	ec9c                	c.sd	a5,24(s1)
    phoff = swizzle(o.phoff, o.order, order);
   2cfde:	701c                	c.ld	a5,32(s0)
   2cfe0:	f09c                	c.sd	a5,32(s1)
    shoff = swizzle(o.shoff, o.order, order);
   2cfe2:	741c                	c.ld	a5,40(s0)
   2cfe4:	f49c                	c.sd	a5,40(s1)
    flags = swizzle(o.flags, o.order, order);
   2cfe6:	581c                	c.lw	a5,48(s0)
   2cfe8:	d89c                	c.sw	a5,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   2cfea:	03445783          	lhu	a5,52(s0)
   2cfee:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   2cff2:	03645783          	lhu	a5,54(s0)
   2cff6:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   2cffa:	03845783          	lhu	a5,56(s0)
   2cffe:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   2d002:	03a45783          	lhu	a5,58(s0)
   2d006:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   2d00a:	03c45783          	lhu	a5,60(s0)
   2d00e:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   2d012:	03e45783          	lhu	a5,62(s0)
   2d016:	02f49f23          	sh	a5,62(s1)
  }
   2d01a:	b67d                	c.j	2cbc8 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>

000000000002d01c <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   2d01c:	1101                	c.addi	sp,-32
   2d01e:	ec06                	c.sdsp	ra,24(sp)
   2d020:	e822                	c.sdsp	s0,16(sp)
   2d022:	e426                	c.sdsp	s1,8(sp)
   2d024:	842a                	c.mv	s0,a0
   2d026:	84ae                	c.mv	s1,a1
  switch (ei_class) {
   2d028:	4785                	c.li	a5,1
   2d02a:	00f60a63          	beq	a2,a5,2d03e <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x22>
   2d02e:	4789                	c.li	a5,2
   2d030:	0af60163          	beq	a2,a5,2d0d2 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0xb6>
}
   2d034:	60e2                	c.ldsp	ra,24(sp)
   2d036:	6442                	c.ldsp	s0,16(sp)
   2d038:	64a2                	c.ldsp	s1,8(sp)
   2d03a:	6105                	c.addi16sp	sp,32
   2d03c:	8082                	c.jr	ra
   2d03e:	4785                	c.li	a5,1
   2d040:	06f68263          	beq	a3,a5,2d0a4 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x88>
   2d044:	4789                	c.li	a5,2
   2d046:	fef697e3          	bne	a3,a5,2d034 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    return (T)__builtin_bswap32((std::uint32_t)v);
   2d04a:	4188                	c.lw	a0,0(a1)
   2d04c:	d94e90ef          	jal	ra,165e0 <__bswapsi2@plt>
  Elf64::Xword filesz; // Size of segment in file
  Elf64::Xword memsz;  // Size of segment in memory
  Elf64::Xword align;  // Alignment of segment

  template <typename E2> void from(const E2 &o) {
    type = swizzle(o.type, o.order, order);
   2d050:	c008                	c.sw	a0,0(s0)
   2d052:	40c8                	c.lw	a0,4(s1)
   2d054:	d8ce90ef          	jal	ra,165e0 <__bswapsi2@plt>
    offset = swizzle(o.offset, o.order, order);
   2d058:	1502                	c.slli	a0,0x20
   2d05a:	9101                	c.srli	a0,0x20
   2d05c:	e408                	c.sd	a0,8(s0)
   2d05e:	4488                	c.lw	a0,8(s1)
   2d060:	d80e90ef          	jal	ra,165e0 <__bswapsi2@plt>
    vaddr = swizzle(o.vaddr, o.order, order);
   2d064:	1502                	c.slli	a0,0x20
   2d066:	9101                	c.srli	a0,0x20
   2d068:	e808                	c.sd	a0,16(s0)
   2d06a:	44c8                	c.lw	a0,12(s1)
   2d06c:	d74e90ef          	jal	ra,165e0 <__bswapsi2@plt>
    paddr = swizzle(o.paddr, o.order, order);
   2d070:	1502                	c.slli	a0,0x20
   2d072:	9101                	c.srli	a0,0x20
   2d074:	ec08                	c.sd	a0,24(s0)
   2d076:	4888                	c.lw	a0,16(s1)
   2d078:	d68e90ef          	jal	ra,165e0 <__bswapsi2@plt>
    filesz = swizzle(o.filesz, o.order, order);
   2d07c:	1502                	c.slli	a0,0x20
   2d07e:	9101                	c.srli	a0,0x20
   2d080:	f008                	c.sd	a0,32(s0)
   2d082:	48c8                	c.lw	a0,20(s1)
   2d084:	d5ce90ef          	jal	ra,165e0 <__bswapsi2@plt>
    memsz = swizzle(o.memsz, o.order, order);
   2d088:	1502                	c.slli	a0,0x20
   2d08a:	9101                	c.srli	a0,0x20
   2d08c:	f408                	c.sd	a0,40(s0)
   2d08e:	4c88                	c.lw	a0,24(s1)
   2d090:	d50e90ef          	jal	ra,165e0 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   2d094:	c048                	c.sw	a0,4(s0)
   2d096:	4cc8                	c.lw	a0,28(s1)
   2d098:	d48e90ef          	jal	ra,165e0 <__bswapsi2@plt>
    align = swizzle(o.align, o.order, order);
   2d09c:	1502                	c.slli	a0,0x20
   2d09e:	9101                	c.srli	a0,0x20
   2d0a0:	f808                	c.sd	a0,48(s0)
  }
   2d0a2:	bf49                	c.j	2d034 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    type = swizzle(o.type, o.order, order);
   2d0a4:	419c                	c.lw	a5,0(a1)
   2d0a6:	c11c                	c.sw	a5,0(a0)
    offset = swizzle(o.offset, o.order, order);
   2d0a8:	0045e783          	lwu	a5,4(a1)
   2d0ac:	e51c                	c.sd	a5,8(a0)
    vaddr = swizzle(o.vaddr, o.order, order);
   2d0ae:	0085e783          	lwu	a5,8(a1)
   2d0b2:	e91c                	c.sd	a5,16(a0)
    paddr = swizzle(o.paddr, o.order, order);
   2d0b4:	00c5e783          	lwu	a5,12(a1)
   2d0b8:	ed1c                	c.sd	a5,24(a0)
    filesz = swizzle(o.filesz, o.order, order);
   2d0ba:	0105e783          	lwu	a5,16(a1)
   2d0be:	f11c                	c.sd	a5,32(a0)
    memsz = swizzle(o.memsz, o.order, order);
   2d0c0:	0145e783          	lwu	a5,20(a1)
   2d0c4:	f51c                	c.sd	a5,40(a0)
    flags = swizzle(o.flags, o.order, order);
   2d0c6:	4d9c                	c.lw	a5,24(a1)
   2d0c8:	c15c                	c.sw	a5,4(a0)
    align = swizzle(o.align, o.order, order);
   2d0ca:	01c5e783          	lwu	a5,28(a1)
   2d0ce:	f91c                	c.sd	a5,48(a0)
  }
   2d0d0:	b795                	c.j	2d034 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
   2d0d2:	4785                	c.li	a5,1
   2d0d4:	04f68663          	beq	a3,a5,2d120 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x104>
   2d0d8:	4789                	c.li	a5,2
   2d0da:	f4f69de3          	bne	a3,a5,2d034 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
   2d0de:	4188                	c.lw	a0,0(a1)
   2d0e0:	d00e90ef          	jal	ra,165e0 <__bswapsi2@plt>
    type = swizzle(o.type, o.order, order);
   2d0e4:	c008                	c.sw	a0,0(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   2d0e6:	6488                	c.ld	a0,8(s1)
   2d0e8:	ef8e90ef          	jal	ra,167e0 <__bswapdi2@plt>
    offset = swizzle(o.offset, o.order, order);
   2d0ec:	e408                	c.sd	a0,8(s0)
   2d0ee:	6888                	c.ld	a0,16(s1)
   2d0f0:	ef0e90ef          	jal	ra,167e0 <__bswapdi2@plt>
    vaddr = swizzle(o.vaddr, o.order, order);
   2d0f4:	e808                	c.sd	a0,16(s0)
   2d0f6:	6c88                	c.ld	a0,24(s1)
   2d0f8:	ee8e90ef          	jal	ra,167e0 <__bswapdi2@plt>
    paddr = swizzle(o.paddr, o.order, order);
   2d0fc:	ec08                	c.sd	a0,24(s0)
   2d0fe:	7088                	c.ld	a0,32(s1)
   2d100:	ee0e90ef          	jal	ra,167e0 <__bswapdi2@plt>
    filesz = swizzle(o.filesz, o.order, order);
   2d104:	f008                	c.sd	a0,32(s0)
   2d106:	7488                	c.ld	a0,40(s1)
   2d108:	ed8e90ef          	jal	ra,167e0 <__bswapdi2@plt>
    memsz = swizzle(o.memsz, o.order, order);
   2d10c:	f408                	c.sd	a0,40(s0)
    return (T)__builtin_bswap32((std::uint32_t)v);
   2d10e:	40c8                	c.lw	a0,4(s1)
   2d110:	cd0e90ef          	jal	ra,165e0 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   2d114:	c048                	c.sw	a0,4(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   2d116:	7888                	c.ld	a0,48(s1)
   2d118:	ec8e90ef          	jal	ra,167e0 <__bswapdi2@plt>
    align = swizzle(o.align, o.order, order);
   2d11c:	f808                	c.sd	a0,48(s0)
  }
   2d11e:	bf19                	c.j	2d034 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    type = swizzle(o.type, o.order, order);
   2d120:	419c                	c.lw	a5,0(a1)
   2d122:	c11c                	c.sw	a5,0(a0)
    offset = swizzle(o.offset, o.order, order);
   2d124:	659c                	c.ld	a5,8(a1)
   2d126:	e51c                	c.sd	a5,8(a0)
    vaddr = swizzle(o.vaddr, o.order, order);
   2d128:	699c                	c.ld	a5,16(a1)
   2d12a:	e91c                	c.sd	a5,16(a0)
    paddr = swizzle(o.paddr, o.order, order);
   2d12c:	6d9c                	c.ld	a5,24(a1)
   2d12e:	ed1c                	c.sd	a5,24(a0)
    filesz = swizzle(o.filesz, o.order, order);
   2d130:	719c                	c.ld	a5,32(a1)
   2d132:	f11c                	c.sd	a5,32(a0)
    memsz = swizzle(o.memsz, o.order, order);
   2d134:	759c                	c.ld	a5,40(a1)
   2d136:	f51c                	c.sd	a5,40(a0)
    flags = swizzle(o.flags, o.order, order);
   2d138:	41dc                	c.lw	a5,4(a1)
   2d13a:	c15c                	c.sw	a5,4(a0)
    align = swizzle(o.align, o.order, order);
   2d13c:	799c                	c.ld	a5,48(a1)
   2d13e:	f91c                	c.sd	a5,48(a0)
  }
   2d140:	bdd5                	c.j	2d034 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>

000000000002d142 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   2d142:	1101                	c.addi	sp,-32
   2d144:	ec06                	c.sdsp	ra,24(sp)
   2d146:	e822                	c.sdsp	s0,16(sp)
   2d148:	e426                	c.sdsp	s1,8(sp)
   2d14a:	842a                	c.mv	s0,a0
   2d14c:	84ae                	c.mv	s1,a1
  switch (ei_class) {
   2d14e:	4785                	c.li	a5,1
   2d150:	00f60a63          	beq	a2,a5,2d164 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x22>
   2d154:	4789                	c.li	a5,2
   2d156:	0af60f63          	beq	a2,a5,2d214 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0xd2>
}
   2d15a:	60e2                	c.ldsp	ra,24(sp)
   2d15c:	6442                	c.ldsp	s0,16(sp)
   2d15e:	64a2                	c.ldsp	s1,8(sp)
   2d160:	6105                	c.addi16sp	sp,32
   2d162:	8082                	c.jr	ra
   2d164:	4785                	c.li	a5,1
   2d166:	06f68b63          	beq	a3,a5,2d1dc <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x9a>
   2d16a:	4789                	c.li	a5,2
   2d16c:	fef697e3          	bne	a3,a5,2d15a <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    return (T)__builtin_bswap32((std::uint32_t)v);
   2d170:	4188                	c.lw	a0,0(a1)
   2d172:	c6ee90ef          	jal	ra,165e0 <__bswapsi2@plt>
    name = swizzle(o.name, o.order, order);
   2d176:	c008                	c.sw	a0,0(s0)
   2d178:	40c8                	c.lw	a0,4(s1)
   2d17a:	c66e90ef          	jal	ra,165e0 <__bswapsi2@plt>
    type = swizzle(o.type, o.order, order);
   2d17e:	c048                	c.sw	a0,4(s0)
   2d180:	4488                	c.lw	a0,8(s1)
   2d182:	c5ee90ef          	jal	ra,165e0 <__bswapsi2@plt>
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   2d186:	1502                	c.slli	a0,0x20
   2d188:	9101                	c.srli	a0,0x20
   2d18a:	e408                	c.sd	a0,8(s0)
   2d18c:	44c8                	c.lw	a0,12(s1)
   2d18e:	c52e90ef          	jal	ra,165e0 <__bswapsi2@plt>
    addr = swizzle(o.addr, o.order, order);
   2d192:	1502                	c.slli	a0,0x20
   2d194:	9101                	c.srli	a0,0x20
   2d196:	e808                	c.sd	a0,16(s0)
   2d198:	4888                	c.lw	a0,16(s1)
   2d19a:	c46e90ef          	jal	ra,165e0 <__bswapsi2@plt>
    offset = swizzle(o.offset, o.order, order);
   2d19e:	1502                	c.slli	a0,0x20
   2d1a0:	9101                	c.srli	a0,0x20
   2d1a2:	ec08                	c.sd	a0,24(s0)
   2d1a4:	48c8                	c.lw	a0,20(s1)
   2d1a6:	c3ae90ef          	jal	ra,165e0 <__bswapsi2@plt>
    size = swizzle(o.size, o.order, order);
   2d1aa:	1502                	c.slli	a0,0x20
   2d1ac:	9101                	c.srli	a0,0x20
   2d1ae:	f008                	c.sd	a0,32(s0)
   2d1b0:	4c88                	c.lw	a0,24(s1)
   2d1b2:	c2ee90ef          	jal	ra,165e0 <__bswapsi2@plt>
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   2d1b6:	02a41423          	sh	a0,40(s0)
   2d1ba:	4cc8                	c.lw	a0,28(s1)
   2d1bc:	c24e90ef          	jal	ra,165e0 <__bswapsi2@plt>
    info = swizzle(o.info, o.order, order);
   2d1c0:	d448                	c.sw	a0,44(s0)
   2d1c2:	5088                	c.lw	a0,32(s1)
   2d1c4:	c1ce90ef          	jal	ra,165e0 <__bswapsi2@plt>
    addralign = swizzle(o.addralign, o.order, order);
   2d1c8:	1502                	c.slli	a0,0x20
   2d1ca:	9101                	c.srli	a0,0x20
   2d1cc:	f808                	c.sd	a0,48(s0)
   2d1ce:	50c8                	c.lw	a0,36(s1)
   2d1d0:	c10e90ef          	jal	ra,165e0 <__bswapsi2@plt>
    entsize = swizzle(o.entsize, o.order, order);
   2d1d4:	1502                	c.slli	a0,0x20
   2d1d6:	9101                	c.srli	a0,0x20
   2d1d8:	fc08                	c.sd	a0,56(s0)
  }
   2d1da:	b741                	c.j	2d15a <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    name = swizzle(o.name, o.order, order);
   2d1dc:	419c                	c.lw	a5,0(a1)
   2d1de:	c11c                	c.sw	a5,0(a0)
    type = swizzle(o.type, o.order, order);
   2d1e0:	41dc                	c.lw	a5,4(a1)
   2d1e2:	c15c                	c.sw	a5,4(a0)
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   2d1e4:	0085e783          	lwu	a5,8(a1)
   2d1e8:	e51c                	c.sd	a5,8(a0)
    addr = swizzle(o.addr, o.order, order);
   2d1ea:	00c5e783          	lwu	a5,12(a1)
   2d1ee:	e91c                	c.sd	a5,16(a0)
    offset = swizzle(o.offset, o.order, order);
   2d1f0:	0105e783          	lwu	a5,16(a1)
   2d1f4:	ed1c                	c.sd	a5,24(a0)
    size = swizzle(o.size, o.order, order);
   2d1f6:	0145e783          	lwu	a5,20(a1)
   2d1fa:	f11c                	c.sd	a5,32(a0)
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   2d1fc:	4d9c                	c.lw	a5,24(a1)
   2d1fe:	02f51423          	sh	a5,40(a0)
    info = swizzle(o.info, o.order, order);
   2d202:	4ddc                	c.lw	a5,28(a1)
   2d204:	d55c                	c.sw	a5,44(a0)
    addralign = swizzle(o.addralign, o.order, order);
   2d206:	0205e783          	lwu	a5,32(a1)
   2d20a:	f91c                	c.sd	a5,48(a0)
    entsize = swizzle(o.entsize, o.order, order);
   2d20c:	0245e783          	lwu	a5,36(a1)
   2d210:	fd1c                	c.sd	a5,56(a0)
  }
   2d212:	b7a1                	c.j	2d15a <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
   2d214:	4785                	c.li	a5,1
   2d216:	04f68f63          	beq	a3,a5,2d274 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x132>
   2d21a:	4789                	c.li	a5,2
   2d21c:	f2f69fe3          	bne	a3,a5,2d15a <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
   2d220:	4188                	c.lw	a0,0(a1)
   2d222:	bbee90ef          	jal	ra,165e0 <__bswapsi2@plt>
    name = swizzle(o.name, o.order, order);
   2d226:	c008                	c.sw	a0,0(s0)
   2d228:	40c8                	c.lw	a0,4(s1)
   2d22a:	bb6e90ef          	jal	ra,165e0 <__bswapsi2@plt>
    type = swizzle(o.type, o.order, order);
   2d22e:	c048                	c.sw	a0,4(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   2d230:	6488                	c.ld	a0,8(s1)
   2d232:	daee90ef          	jal	ra,167e0 <__bswapdi2@plt>
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   2d236:	e408                	c.sd	a0,8(s0)
   2d238:	6888                	c.ld	a0,16(s1)
   2d23a:	da6e90ef          	jal	ra,167e0 <__bswapdi2@plt>
    addr = swizzle(o.addr, o.order, order);
   2d23e:	e808                	c.sd	a0,16(s0)
   2d240:	6c88                	c.ld	a0,24(s1)
   2d242:	d9ee90ef          	jal	ra,167e0 <__bswapdi2@plt>
    offset = swizzle(o.offset, o.order, order);
   2d246:	ec08                	c.sd	a0,24(s0)
   2d248:	7088                	c.ld	a0,32(s1)
   2d24a:	d96e90ef          	jal	ra,167e0 <__bswapdi2@plt>
    size = swizzle(o.size, o.order, order);
   2d24e:	f008                	c.sd	a0,32(s0)
    return (T)__builtin_bswap32((std::uint32_t)v);
   2d250:	5488                	c.lw	a0,40(s1)
   2d252:	b8ee90ef          	jal	ra,165e0 <__bswapsi2@plt>
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   2d256:	02a41423          	sh	a0,40(s0)
   2d25a:	54c8                	c.lw	a0,44(s1)
   2d25c:	b84e90ef          	jal	ra,165e0 <__bswapsi2@plt>
    info = swizzle(o.info, o.order, order);
   2d260:	d448                	c.sw	a0,44(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   2d262:	7888                	c.ld	a0,48(s1)
   2d264:	d7ce90ef          	jal	ra,167e0 <__bswapdi2@plt>
    addralign = swizzle(o.addralign, o.order, order);
   2d268:	f808                	c.sd	a0,48(s0)
   2d26a:	7c88                	c.ld	a0,56(s1)
   2d26c:	d74e90ef          	jal	ra,167e0 <__bswapdi2@plt>
    entsize = swizzle(o.entsize, o.order, order);
   2d270:	fc08                	c.sd	a0,56(s0)
  }
   2d272:	b5e5                	c.j	2d15a <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    name = swizzle(o.name, o.order, order);
   2d274:	419c                	c.lw	a5,0(a1)
   2d276:	c11c                	c.sw	a5,0(a0)
    type = swizzle(o.type, o.order, order);
   2d278:	41dc                	c.lw	a5,4(a1)
   2d27a:	c15c                	c.sw	a5,4(a0)
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   2d27c:	659c                	c.ld	a5,8(a1)
   2d27e:	e51c                	c.sd	a5,8(a0)
    addr = swizzle(o.addr, o.order, order);
   2d280:	699c                	c.ld	a5,16(a1)
   2d282:	e91c                	c.sd	a5,16(a0)
    offset = swizzle(o.offset, o.order, order);
   2d284:	6d9c                	c.ld	a5,24(a1)
   2d286:	ed1c                	c.sd	a5,24(a0)
    size = swizzle(o.size, o.order, order);
   2d288:	719c                	c.ld	a5,32(a1)
   2d28a:	f11c                	c.sd	a5,32(a0)
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   2d28c:	559c                	c.lw	a5,40(a1)
   2d28e:	02f51423          	sh	a5,40(a0)
    info = swizzle(o.info, o.order, order);
   2d292:	55dc                	c.lw	a5,44(a1)
   2d294:	d55c                	c.sw	a5,44(a0)
    addralign = swizzle(o.addralign, o.order, order);
   2d296:	799c                	c.ld	a5,48(a1)
   2d298:	f91c                	c.sd	a5,48(a0)
    entsize = swizzle(o.entsize, o.order, order);
   2d29a:	7d9c                	c.ld	a5,56(a1)
   2d29c:	fd1c                	c.sd	a5,56(a0)
  }
   2d29e:	bd75                	c.j	2d15a <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>

000000000002d2a0 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   2d2a0:	1101                	c.addi	sp,-32
   2d2a2:	ec06                	c.sdsp	ra,24(sp)
   2d2a4:	e822                	c.sdsp	s0,16(sp)
   2d2a6:	e426                	c.sdsp	s1,8(sp)
   2d2a8:	842a                	c.mv	s0,a0
   2d2aa:	84ae                	c.mv	s1,a1
  switch (ei_class) {
   2d2ac:	4785                	c.li	a5,1
   2d2ae:	00f60a63          	beq	a2,a5,2d2c2 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x22>
   2d2b2:	4789                	c.li	a5,2
   2d2b4:	08f60463          	beq	a2,a5,2d33c <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x9c>
}
   2d2b8:	60e2                	c.ldsp	ra,24(sp)
   2d2ba:	6442                	c.ldsp	s0,16(sp)
   2d2bc:	64a2                	c.ldsp	s1,8(sp)
   2d2be:	6105                	c.addi16sp	sp,32
   2d2c0:	8082                	c.jr	ra
   2d2c2:	4785                	c.li	a5,1
   2d2c4:	04f68763          	beq	a3,a5,2d312 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x72>
   2d2c8:	4789                	c.li	a5,2
   2d2ca:	fef697e3          	bne	a3,a5,2d2b8 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    return (T)__builtin_bswap32((std::uint32_t)v);
   2d2ce:	4188                	c.lw	a0,0(a1)
   2d2d0:	b10e90ef          	jal	ra,165e0 <__bswapsi2@plt>
  shn shnxd;           // Section table index
  Elf64::Addr value;   // Symbol value (address)
  Elf64::Xword size;   // Size of object

  template <typename E2> void from(const E2 &o) {
    name = swizzle(o.name, o.order, order);
   2d2d4:	c008                	c.sw	a0,0(s0)
   2d2d6:	40c8                	c.lw	a0,4(s1)
   2d2d8:	b08e90ef          	jal	ra,165e0 <__bswapsi2@plt>
    value = swizzle(o.value, o.order, order);
   2d2dc:	1502                	c.slli	a0,0x20
   2d2de:	9101                	c.srli	a0,0x20
   2d2e0:	e408                	c.sd	a0,8(s0)
   2d2e2:	4488                	c.lw	a0,8(s1)
   2d2e4:	afce90ef          	jal	ra,165e0 <__bswapsi2@plt>
    size = swizzle(o.size, o.order, order);
   2d2e8:	1502                	c.slli	a0,0x20
   2d2ea:	9101                	c.srli	a0,0x20
   2d2ec:	e808                	c.sd	a0,16(s0)
    info = o.info;
   2d2ee:	00c4c783          	lbu	a5,12(s1)
   2d2f2:	00f40223          	sb	a5,4(s0)
    other = o.other;
   2d2f6:	00d4c783          	lbu	a5,13(s1)
   2d2fa:	00f402a3          	sb	a5,5(s0)
    shnxd = swizzle(o.shnxd, o.order, order);
   2d2fe:	00e4d783          	lhu	a5,14(s1)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   2d302:	0087d71b          	srliw	a4,a5,0x8
   2d306:	0087979b          	slliw	a5,a5,0x8
   2d30a:	8fd9                	c.or	a5,a4
   2d30c:	00f41323          	sh	a5,6(s0)
  }
   2d310:	b765                	c.j	2d2b8 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    name = swizzle(o.name, o.order, order);
   2d312:	419c                	c.lw	a5,0(a1)
   2d314:	c11c                	c.sw	a5,0(a0)
    value = swizzle(o.value, o.order, order);
   2d316:	0045e783          	lwu	a5,4(a1)
   2d31a:	e51c                	c.sd	a5,8(a0)
    size = swizzle(o.size, o.order, order);
   2d31c:	0085e783          	lwu	a5,8(a1)
   2d320:	e91c                	c.sd	a5,16(a0)
    info = o.info;
   2d322:	00c5c783          	lbu	a5,12(a1)
   2d326:	00f50223          	sb	a5,4(a0)
    other = o.other;
   2d32a:	00d5c783          	lbu	a5,13(a1)
   2d32e:	00f502a3          	sb	a5,5(a0)
    shnxd = swizzle(o.shnxd, o.order, order);
   2d332:	00e5d783          	lhu	a5,14(a1)
   2d336:	00f51323          	sh	a5,6(a0)
  }
   2d33a:	bfbd                	c.j	2d2b8 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
   2d33c:	4785                	c.li	a5,1
   2d33e:	04f68363          	beq	a3,a5,2d384 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0xe4>
   2d342:	4789                	c.li	a5,2
   2d344:	f6f69ae3          	bne	a3,a5,2d2b8 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    return (T)__builtin_bswap32((std::uint32_t)v);
   2d348:	4188                	c.lw	a0,0(a1)
   2d34a:	a96e90ef          	jal	ra,165e0 <__bswapsi2@plt>
    name = swizzle(o.name, o.order, order);
   2d34e:	c008                	c.sw	a0,0(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   2d350:	6488                	c.ld	a0,8(s1)
   2d352:	c8ee90ef          	jal	ra,167e0 <__bswapdi2@plt>
    value = swizzle(o.value, o.order, order);
   2d356:	e408                	c.sd	a0,8(s0)
   2d358:	6888                	c.ld	a0,16(s1)
   2d35a:	c86e90ef          	jal	ra,167e0 <__bswapdi2@plt>
    size = swizzle(o.size, o.order, order);
   2d35e:	e808                	c.sd	a0,16(s0)
    info = o.info;
   2d360:	0044c783          	lbu	a5,4(s1)
   2d364:	00f40223          	sb	a5,4(s0)
    other = o.other;
   2d368:	0054c783          	lbu	a5,5(s1)
   2d36c:	00f402a3          	sb	a5,5(s0)
    shnxd = swizzle(o.shnxd, o.order, order);
   2d370:	0064d783          	lhu	a5,6(s1)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   2d374:	0087d71b          	srliw	a4,a5,0x8
   2d378:	0087979b          	slliw	a5,a5,0x8
   2d37c:	8fd9                	c.or	a5,a4
   2d37e:	00f41323          	sh	a5,6(s0)
  }
   2d382:	bf1d                	c.j	2d2b8 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    name = swizzle(o.name, o.order, order);
   2d384:	419c                	c.lw	a5,0(a1)
   2d386:	c11c                	c.sw	a5,0(a0)
    value = swizzle(o.value, o.order, order);
   2d388:	659c                	c.ld	a5,8(a1)
   2d38a:	e51c                	c.sd	a5,8(a0)
    size = swizzle(o.size, o.order, order);
   2d38c:	699c                	c.ld	a5,16(a1)
   2d38e:	e91c                	c.sd	a5,16(a0)
    info = o.info;
   2d390:	0045c783          	lbu	a5,4(a1)
   2d394:	00f50223          	sb	a5,4(a0)
    other = o.other;
   2d398:	0055c783          	lbu	a5,5(a1)
   2d39c:	00f502a3          	sb	a5,5(a0)
    shnxd = swizzle(o.shnxd, o.order, order);
   2d3a0:	0065d783          	lhu	a5,6(a1)
   2d3a4:	00f51323          	sh	a5,6(a0)
  }
   2d3a8:	bf01                	c.j	2d2b8 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>

000000000002d3aa <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)>:
      vector<_Tp, _Alloc>::
   2d3aa:	715d                	c.addi16sp	sp,-80
   2d3ac:	e486                	c.sdsp	ra,72(sp)
   2d3ae:	e0a2                	c.sdsp	s0,64(sp)
   2d3b0:	fc26                	c.sdsp	s1,56(sp)
   2d3b2:	f84a                	c.sdsp	s2,48(sp)
   2d3b4:	f44e                	c.sdsp	s3,40(sp)
   2d3b6:	f052                	c.sdsp	s4,32(sp)
   2d3b8:	ec56                	c.sdsp	s5,24(sp)
   2d3ba:	e85a                	c.sdsp	s6,16(sp)
   2d3bc:	e45e                	c.sdsp	s7,8(sp)
   2d3be:	e062                	c.sdsp	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2d3c0:	00853903          	ld	s2,8(a0)
   2d3c4:	00053a03          	ld	s4,0(a0)
   2d3c8:	414907b3          	sub	a5,s2,s4
   2d3cc:	8791                	c.srai	a5,0x4
	if (max_size() - size() < __n)
   2d3ce:	577d                	c.li	a4,-1
   2d3d0:	8315                	c.srli	a4,0x5
   2d3d2:	02e78763          	beq	a5,a4,2d400 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x56>
   2d3d6:	8aaa                	c.mv	s5,a0
   2d3d8:	8bae                	c.mv	s7,a1
   2d3da:	84b2                	c.mv	s1,a2
   2d3dc:	842e                	c.mv	s0,a1
      return __a;
   2d3de:	873e                	c.mv	a4,a5
      if (__a < __b)
   2d3e0:	03490663          	beq	s2,s4,2d40c <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x62>
	const size_type __len = size() + (std::max)(size(), __n);
   2d3e4:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2d3e6:	02f76763          	bltu	a4,a5,2d414 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x6a>
   2d3ea:	8b3a                	c.mv	s6,a4
   2d3ec:	57fd                	c.li	a5,-1
   2d3ee:	8395                	c.srli	a5,0x5
   2d3f0:	00e7f363          	bgeu	a5,a4,2d3f6 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x4c>
   2d3f4:	8b3e                	c.mv	s6,a5
    { return __lhs.base() - __rhs.base(); }
   2d3f6:	414b8c33          	sub	s8,s7,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2d3fa:	4981                	c.li	s3,0
   2d3fc:	c715                	c.beqz	a4,2d428 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x7e>
   2d3fe:	a005                	c.j	2d41e <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x74>
	  __throw_length_error(__N(__s));
   2d400:	00000517          	auipc	a0,0x0
   2d404:	65050513          	addi	a0,a0,1616 # 2da50 <__libc_csu_fini+0x9e>
   2d408:	a98e90ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   2d40c:	4705                	c.li	a4,1
   2d40e:	bfd9                	c.j	2d3e4 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x3a>
      _ForwardIterator __cur = __result;
   2d410:	86ce                	c.mv	a3,s3
   2d412:	a0a1                	c.j	2d45a <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xb0>
   2d414:	414b8c33          	sub	s8,s7,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2d418:	5b7d                	c.li	s6,-1
   2d41a:	005b5b13          	srli	s6,s6,0x5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2d41e:	004b1513          	slli	a0,s6,0x4
   2d422:	b8ee90ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   2d426:	89aa                	c.mv	s3,a0
	  _Alloc_traits::construct(this->_M_impl,
   2d428:	018987b3          	add	a5,s3,s8
      : _M_ptr(__r._M_ptr), _M_refcount()
   2d42c:	6098                	c.ld	a4,0(s1)
   2d42e:	e398                	c.sd	a4,0(a5)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   2d430:	6498                	c.ld	a4,8(s1)
	__r._M_pi = _M_pi;
   2d432:	0004b423          	sd	zero,8(s1)
	_M_pi = __tmp;
   2d436:	e798                	c.sd	a4,8(a5)
	__r._M_ptr = nullptr;
   2d438:	0004b023          	sd	zero,0(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   2d43c:	fd440ae3          	beq	s0,s4,2d410 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x66>
   2d440:	414b86b3          	sub	a3,s7,s4
   2d444:	96ce                	c.add	a3,s3
   2d446:	8752                	c.mv	a4,s4
      _ForwardIterator __cur = __result;
   2d448:	87ce                	c.mv	a5,s3
      : _M_ptr(__r._M_ptr), _M_refcount()
   2d44a:	6310                	c.ld	a2,0(a4)
   2d44c:	e390                	c.sd	a2,0(a5)
	_M_pi = __tmp;
   2d44e:	6710                	c.ld	a2,8(a4)
   2d450:	e790                	c.sd	a2,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   2d452:	0741                	c.addi	a4,16
   2d454:	07c1                	c.addi	a5,16
   2d456:	fed79ae3          	bne	a5,a3,2d44a <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xa0>
	      ++__new_finish;
   2d45a:	01068493          	addi	s1,a3,16
   2d45e:	01240e63          	beq	s0,s2,2d47a <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xd0>
   2d462:	41790bb3          	sub	s7,s2,s7
      _ForwardIterator __cur = __result;
   2d466:	87a6                	c.mv	a5,s1
      : _M_ptr(__r._M_ptr), _M_refcount()
   2d468:	6018                	c.ld	a4,0(s0)
   2d46a:	e398                	c.sd	a4,0(a5)
	_M_pi = __tmp;
   2d46c:	6418                	c.ld	a4,8(s0)
   2d46e:	e798                	c.sd	a4,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   2d470:	0441                	c.addi	s0,16
   2d472:	07c1                	c.addi	a5,16
   2d474:	ff241ae3          	bne	s0,s2,2d468 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xbe>
   2d478:	94de                	c.add	s1,s7
	if (__p)
   2d47a:	000a0563          	beq	s4,zero,2d484 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xda>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2d47e:	8552                	c.mv	a0,s4
   2d480:	b20e90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2d484:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   2d488:	009ab423          	sd	s1,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2d48c:	0b12                	c.slli	s6,0x4
   2d48e:	99da                	c.add	s3,s6
   2d490:	013ab823          	sd	s3,16(s5)
    }
   2d494:	60a6                	c.ldsp	ra,72(sp)
   2d496:	6406                	c.ldsp	s0,64(sp)
   2d498:	74e2                	c.ldsp	s1,56(sp)
   2d49a:	7942                	c.ldsp	s2,48(sp)
   2d49c:	79a2                	c.ldsp	s3,40(sp)
   2d49e:	7a02                	c.ldsp	s4,32(sp)
   2d4a0:	6ae2                	c.ldsp	s5,24(sp)
   2d4a2:	6b42                	c.ldsp	s6,16(sp)
   2d4a4:	6ba2                	c.ldsp	s7,8(sp)
   2d4a6:	6c02                	c.ldsp	s8,0(sp)
   2d4a8:	6161                	c.addi16sp	sp,80
   2d4aa:	8082                	c.jr	ra

000000000002d4ac <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)>:
      vector<_Tp, _Alloc>::
   2d4ac:	715d                	c.addi16sp	sp,-80
   2d4ae:	e486                	c.sdsp	ra,72(sp)
   2d4b0:	e0a2                	c.sdsp	s0,64(sp)
   2d4b2:	fc26                	c.sdsp	s1,56(sp)
   2d4b4:	f84a                	c.sdsp	s2,48(sp)
   2d4b6:	f44e                	c.sdsp	s3,40(sp)
   2d4b8:	f052                	c.sdsp	s4,32(sp)
   2d4ba:	ec56                	c.sdsp	s5,24(sp)
   2d4bc:	e85a                	c.sdsp	s6,16(sp)
   2d4be:	e45e                	c.sdsp	s7,8(sp)
   2d4c0:	e062                	c.sdsp	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2d4c2:	00853903          	ld	s2,8(a0)
   2d4c6:	00053a03          	ld	s4,0(a0)
   2d4ca:	414907b3          	sub	a5,s2,s4
   2d4ce:	8791                	c.srai	a5,0x4
	if (max_size() - size() < __n)
   2d4d0:	577d                	c.li	a4,-1
   2d4d2:	8315                	c.srli	a4,0x5
   2d4d4:	02e78763          	beq	a5,a4,2d502 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x56>
   2d4d8:	8aaa                	c.mv	s5,a0
   2d4da:	8bae                	c.mv	s7,a1
   2d4dc:	84b2                	c.mv	s1,a2
   2d4de:	842e                	c.mv	s0,a1
      return __a;
   2d4e0:	873e                	c.mv	a4,a5
      if (__a < __b)
   2d4e2:	03490663          	beq	s2,s4,2d50e <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x62>
	const size_type __len = size() + (std::max)(size(), __n);
   2d4e6:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2d4e8:	02f76763          	bltu	a4,a5,2d516 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x6a>
   2d4ec:	8b3a                	c.mv	s6,a4
   2d4ee:	57fd                	c.li	a5,-1
   2d4f0:	8395                	c.srli	a5,0x5
   2d4f2:	00e7f363          	bgeu	a5,a4,2d4f8 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x4c>
   2d4f6:	8b3e                	c.mv	s6,a5
   2d4f8:	414b8c33          	sub	s8,s7,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2d4fc:	4981                	c.li	s3,0
   2d4fe:	c715                	c.beqz	a4,2d52a <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x7e>
   2d500:	a005                	c.j	2d520 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x74>
	  __throw_length_error(__N(__s));
   2d502:	00000517          	auipc	a0,0x0
   2d506:	54e50513          	addi	a0,a0,1358 # 2da50 <__libc_csu_fini+0x9e>
   2d50a:	996e90ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   2d50e:	4705                	c.li	a4,1
   2d510:	bfd9                	c.j	2d4e6 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x3a>
      _ForwardIterator __cur = __result;
   2d512:	86ce                	c.mv	a3,s3
   2d514:	a0a1                	c.j	2d55c <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xb0>
   2d516:	414b8c33          	sub	s8,s7,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2d51a:	5b7d                	c.li	s6,-1
   2d51c:	005b5b13          	srli	s6,s6,0x5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2d520:	004b1513          	slli	a0,s6,0x4
   2d524:	a8ce90ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   2d528:	89aa                	c.mv	s3,a0
	  _Alloc_traits::construct(this->_M_impl,
   2d52a:	018987b3          	add	a5,s3,s8
      : _M_ptr(__r._M_ptr), _M_refcount()
   2d52e:	6098                	c.ld	a4,0(s1)
   2d530:	e398                	c.sd	a4,0(a5)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   2d532:	6498                	c.ld	a4,8(s1)
	__r._M_pi = _M_pi;
   2d534:	0004b423          	sd	zero,8(s1)
	_M_pi = __tmp;
   2d538:	e798                	c.sd	a4,8(a5)
	__r._M_ptr = nullptr;
   2d53a:	0004b023          	sd	zero,0(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   2d53e:	fd440ae3          	beq	s0,s4,2d512 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x66>
   2d542:	414b86b3          	sub	a3,s7,s4
   2d546:	96ce                	c.add	a3,s3
   2d548:	8752                	c.mv	a4,s4
      _ForwardIterator __cur = __result;
   2d54a:	87ce                	c.mv	a5,s3
      : _M_ptr(__r._M_ptr), _M_refcount()
   2d54c:	6310                	c.ld	a2,0(a4)
   2d54e:	e390                	c.sd	a2,0(a5)
	_M_pi = __tmp;
   2d550:	6710                	c.ld	a2,8(a4)
   2d552:	e790                	c.sd	a2,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   2d554:	0741                	c.addi	a4,16
   2d556:	07c1                	c.addi	a5,16
   2d558:	fed79ae3          	bne	a5,a3,2d54c <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xa0>
	      ++__new_finish;
   2d55c:	01068493          	addi	s1,a3,16
   2d560:	01240e63          	beq	s0,s2,2d57c <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xd0>
   2d564:	41790bb3          	sub	s7,s2,s7
      _ForwardIterator __cur = __result;
   2d568:	87a6                	c.mv	a5,s1
      : _M_ptr(__r._M_ptr), _M_refcount()
   2d56a:	6018                	c.ld	a4,0(s0)
   2d56c:	e398                	c.sd	a4,0(a5)
	_M_pi = __tmp;
   2d56e:	6418                	c.ld	a4,8(s0)
   2d570:	e798                	c.sd	a4,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   2d572:	0441                	c.addi	s0,16
   2d574:	07c1                	c.addi	a5,16
   2d576:	ff241ae3          	bne	s0,s2,2d56a <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xbe>
   2d57a:	94de                	c.add	s1,s7
	if (__p)
   2d57c:	000a0563          	beq	s4,zero,2d586 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xda>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2d580:	8552                	c.mv	a0,s4
   2d582:	a1ee90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2d586:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   2d58a:	009ab423          	sd	s1,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2d58e:	0b12                	c.slli	s6,0x4
   2d590:	99da                	c.add	s3,s6
   2d592:	013ab823          	sd	s3,16(s5)
    }
   2d596:	60a6                	c.ldsp	ra,72(sp)
   2d598:	6406                	c.ldsp	s0,64(sp)
   2d59a:	74e2                	c.ldsp	s1,56(sp)
   2d59c:	7942                	c.ldsp	s2,48(sp)
   2d59e:	79a2                	c.ldsp	s3,40(sp)
   2d5a0:	7a02                	c.ldsp	s4,32(sp)
   2d5a2:	6ae2                	c.ldsp	s5,24(sp)
   2d5a4:	6b42                	c.ldsp	s6,16(sp)
   2d5a6:	6ba2                	c.ldsp	s7,8(sp)
   2d5a8:	6c02                	c.ldsp	s8,0(sp)
   2d5aa:	6161                	c.addi16sp	sp,80
   2d5ac:	8082                	c.jr	ra

000000000002d5ae <elf::create_mmap_loader(int)>:
      throw range_error("offset exceeds file size");
    return (const char *)base + offset;
  }
};

std::shared_ptr<loader> create_mmap_loader(int fd) {
   2d5ae:	715d                	c.addi16sp	sp,-80
   2d5b0:	e486                	c.sdsp	ra,72(sp)
   2d5b2:	e0a2                	c.sdsp	s0,64(sp)
   2d5b4:	fc26                	c.sdsp	s1,56(sp)
   2d5b6:	f84a                	c.sdsp	s2,48(sp)
   2d5b8:	f44e                	c.sdsp	s3,40(sp)
   2d5ba:	892a                	c.mv	s2,a0
   2d5bc:	84ae                	c.mv	s1,a1
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2d5be:	05000513          	addi	a0,zero,80
   2d5c2:	9eee90ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   2d5c6:	842a                	c.mv	s0,a0
   2d5c8:	00052423          	sw	zero,8(a0)
   2d5cc:	00052623          	sw	zero,12(a0)
   2d5d0:	00052823          	sw	zero,16(a0)
   2d5d4:	00052a23          	sw	zero,20(a0)
   2d5d8:	00052c23          	sw	zero,24(a0)
   2d5dc:	00052e23          	sw	zero,28(a0)
   2d5e0:	02053023          	sd	zero,32(a0)
   2d5e4:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   2d5e8:	4785                	c.li	a5,1
   2d5ea:	d91c                	c.sw	a5,48(a0)
   2d5ec:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   2d5ee:	0000d797          	auipc	a5,0xd
   2d5f2:	eda7b783          	ld	a5,-294(a5) # 3a4c8 <vtable for std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x710>
   2d5f6:	07c1                	c.addi	a5,16
   2d5f8:	e11c                	c.sd	a5,0(a0)
   2d5fa:	03850993          	addi	s3,a0,56
  mmap_loader(int fd) {
   2d5fe:	0000d797          	auipc	a5,0xd
   2d602:	e7a7b783          	ld	a5,-390(a5) # 3a478 <vtable for elf::mmap_loader@@Base+0x6e8>
   2d606:	07c1                	c.addi	a5,16
   2d608:	fd1c                	c.sd	a5,56(a0)
    off_t end = lseek(fd, 0, SEEK_END);
   2d60a:	4609                	c.li	a2,2
   2d60c:	4581                	c.li	a1,0
   2d60e:	8526                	c.mv	a0,s1
   2d610:	b00e90ef          	jal	ra,16910 <lseek@plt>
    if (end == (off_t)-1)
   2d614:	57fd                	c.li	a5,-1
   2d616:	02f50363          	beq	a0,a5,2d63c <elf::create_mmap_loader(int)+0x8e>
   2d61a:	85aa                	c.mv	a1,a0
    lim = end;
   2d61c:	e428                	c.sd	a0,72(s0)
    base = mmap(nullptr, lim, PROT_READ, MAP_SHARED, fd, 0);
   2d61e:	4781                	c.li	a5,0
   2d620:	8726                	c.mv	a4,s1
   2d622:	4685                	c.li	a3,1
   2d624:	4605                	c.li	a2,1
   2d626:	4501                	c.li	a0,0
   2d628:	8f8e90ef          	jal	ra,16720 <mmap@plt>
   2d62c:	e028                	c.sd	a0,64(s0)
    if (base == MAP_FAILED)
   2d62e:	57fd                	c.li	a5,-1
   2d630:	04f50a63          	beq	a0,a5,2d684 <elf::create_mmap_loader(int)+0xd6>
    close(fd);
   2d634:	8526                	c.mv	a0,s1
   2d636:	c3ae90ef          	jal	ra,16a70 <close@plt>
   2d63a:	a075                	c.j	2d6e6 <elf::create_mmap_loader(int)+0x138>
      throw system_error(errno, system_category(), "finding file length");
   2d63c:	02000513          	addi	a0,zero,32
   2d640:	850e90ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2d644:	892a                	c.mv	s2,a0
   2d646:	c1ae90ef          	jal	ra,16a60 <__errno_location@plt>
   2d64a:	4104                	c.lw	s1,0(a0)
   2d64c:	874e90ef          	jal	ra,166c0 <std::_V2::system_category()@plt>
   2d650:	862a                	c.mv	a2,a0
  public:
    error_code() noexcept
    : _M_value(0), _M_cat(&system_category()) { }

    error_code(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }
   2d652:	c826                	c.swsp	s1,16(sp)

    system_error(error_code __ec, const char* __what)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }

    system_error(int __v, const error_category& __ecat, const char* __what)
    : system_error(error_code(__v, __ecat), __what) { }
   2d654:	00004697          	auipc	a3,0x4
   2d658:	4b468693          	addi	a3,a3,1204 # 31b08 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x80>
   2d65c:	65c2                	c.ldsp	a1,16(sp)
   2d65e:	854a                	c.mv	a0,s2
   2d660:	0000d317          	auipc	t1,0xd
   2d664:	de833303          	ld	t1,-536(t1) # 3a448 <std::system_error::system_error(std::error_code, char const*)@@Base+0xcc2e>
   2d668:	9302                	c.jalr	t1
   2d66a:	0000d617          	auipc	a2,0xd
   2d66e:	dce63603          	ld	a2,-562(a2) # 3a438 <std::system_error::~system_error()@GLIBCXX_3.4.11>
   2d672:	0000d597          	auipc	a1,0xd
   2d676:	c965b583          	ld	a1,-874(a1) # 3a308 <typeinfo for std::system_error@GLIBCXX_3.4.11>
   2d67a:	854a                	c.mv	a0,s2
   2d67c:	ae4e90ef          	jal	ra,16960 <__cxa_throw@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2d680:	84aa                	c.mv	s1,a0
   2d682:	a0b9                	c.j	2d6d0 <elf::create_mmap_loader(int)+0x122>
      throw system_error(errno, system_category(), "mmap'ing file");
   2d684:	02000513          	addi	a0,zero,32
   2d688:	808e90ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2d68c:	892a                	c.mv	s2,a0
   2d68e:	bd2e90ef          	jal	ra,16a60 <__errno_location@plt>
   2d692:	4104                	c.lw	s1,0(a0)
   2d694:	82ce90ef          	jal	ra,166c0 <std::_V2::system_category()@plt>
   2d698:	862a                	c.mv	a2,a0
    : _M_value(__v), _M_cat(&__cat) { }
   2d69a:	c026                	c.swsp	s1,0(sp)
    : system_error(error_code(__v, __ecat), __what) { }
   2d69c:	00004697          	auipc	a3,0x4
   2d6a0:	48468693          	addi	a3,a3,1156 # 31b20 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x98>
   2d6a4:	6582                	c.ldsp	a1,0(sp)
   2d6a6:	854a                	c.mv	a0,s2
   2d6a8:	0000d317          	auipc	t1,0xd
   2d6ac:	da033303          	ld	t1,-608(t1) # 3a448 <std::system_error::system_error(std::error_code, char const*)@@Base+0xcc2e>
   2d6b0:	9302                	c.jalr	t1
   2d6b2:	0000d617          	auipc	a2,0xd
   2d6b6:	d8663603          	ld	a2,-634(a2) # 3a438 <std::system_error::~system_error()@GLIBCXX_3.4.11>
   2d6ba:	0000d597          	auipc	a1,0xd
   2d6be:	c4e5b583          	ld	a1,-946(a1) # 3a308 <typeinfo for std::system_error@GLIBCXX_3.4.11>
   2d6c2:	854a                	c.mv	a0,s2
   2d6c4:	a9ce90ef          	jal	ra,16960 <__cxa_throw@plt>
      throw system_error(errno, system_category(), "finding file length");
   2d6c8:	84aa                	c.mv	s1,a0
   2d6ca:	854a                	c.mv	a0,s2
   2d6cc:	884e90ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2d6d0:	8522                	c.mv	a0,s0
   2d6d2:	8cee90ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2d6d6:	8526                	c.mv	a0,s1
   2d6d8:	ab8e90ef          	jal	ra,16990 <_Unwind_Resume@plt>
      throw system_error(errno, system_category(), "mmap'ing file");
   2d6dc:	84aa                	c.mv	s1,a0
   2d6de:	854a                	c.mv	a0,s2
   2d6e0:	870e90ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2d6e4:	b7f5                	c.j	2d6d0 <elf::create_mmap_loader(int)+0x122>
	: _M_ptr(__r._M_ptr), _M_refcount()
   2d6e6:	01393023          	sd	s3,0(s2)
	_M_pi = __tmp;
   2d6ea:	00893423          	sd	s0,8(s2)
  return make_shared<mmap_loader>(fd);
}
   2d6ee:	854a                	c.mv	a0,s2
   2d6f0:	60a6                	c.ldsp	ra,72(sp)
   2d6f2:	6406                	c.ldsp	s0,64(sp)
   2d6f4:	74e2                	c.ldsp	s1,56(sp)
   2d6f6:	7942                	c.ldsp	s2,48(sp)
   2d6f8:	79a2                	c.ldsp	s3,40(sp)
   2d6fa:	6161                	c.addi16sp	sp,80
   2d6fc:	8082                	c.jr	ra

000000000002d6fe <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   2d6fe:	8082                	c.jr	ra

000000000002d700 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   2d700:	1141                	c.addi	sp,-16
   2d702:	e406                	c.sdsp	ra,8(sp)
      __pointer->~_Tp();
   2d704:	7d1c                	c.ld	a5,56(a0)
   2d706:	639c                	c.ld	a5,0(a5)
   2d708:	03850513          	addi	a0,a0,56
   2d70c:	9782                	c.jalr	a5
      }
   2d70e:	60a2                	c.ldsp	ra,8(sp)
   2d710:	0141                	c.addi	sp,16
   2d712:	8082                	c.jr	ra

000000000002d714 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   2d714:	1141                	c.addi	sp,-16
   2d716:	e406                	c.sdsp	ra,8(sp)
   2d718:	e022                	c.sdsp	s0,0(sp)
   2d71a:	03850413          	addi	s0,a0,56
	    ||
   2d71e:	0000d797          	auipc	a5,0xd
   2d722:	e327b783          	ld	a5,-462(a5) # 3a550 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc880>
   2d726:	02f58a63          	beq	a1,a5,2d75a <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   2d72a:	6588                	c.ld	a0,8(a1)
   2d72c:	0000d797          	auipc	a5,0xd
   2d730:	cfc7b783          	ld	a5,-772(a5) # 3a428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc948>
   2d734:	02f50363          	beq	a0,a5,2d75a <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   2d738:	00054703          	lbu	a4,0(a0)
   2d73c:	02a00793          	addi	a5,zero,42
   2d740:	02f70263          	beq	a4,a5,2d764 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   2d744:	0000d597          	auipc	a1,0xd
   2d748:	ce45b583          	ld	a1,-796(a1) # 3a428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc948>
   2d74c:	e85e80ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   2d750:	00153513          	sltiu	a0,a0,1
   2d754:	40a00533          	sub	a0,zero,a0
   2d758:	8c69                	c.and	s0,a0
      }
   2d75a:	8522                	c.mv	a0,s0
   2d75c:	60a2                	c.ldsp	ra,8(sp)
   2d75e:	6402                	c.ldsp	s0,0(sp)
   2d760:	0141                	c.addi	sp,16
   2d762:	8082                	c.jr	ra
	return nullptr;
   2d764:	4401                	c.li	s0,0
   2d766:	bfd5                	c.j	2d75a <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000002d768 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   2d768:	1141                	c.addi	sp,-16
   2d76a:	e406                	c.sdsp	ra,8(sp)
   2d76c:	834e90ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2d770:	60a2                	c.ldsp	ra,8(sp)
   2d772:	0141                	c.addi	sp,16
   2d774:	8082                	c.jr	ra

000000000002d776 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   2d776:	1141                	c.addi	sp,-16
   2d778:	e406                	c.sdsp	ra,8(sp)
   2d77a:	826e90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   2d77e:	60a2                	c.ldsp	ra,8(sp)
   2d780:	0141                	c.addi	sp,16
   2d782:	8082                	c.jr	ra

000000000002d784 <elf::mmap_loader::load(long, unsigned long)>:
    if (offset + size > lim)
   2d784:	962e                	c.add	a2,a1
   2d786:	691c                	c.ld	a5,16(a0)
   2d788:	00c7e563          	bltu	a5,a2,2d792 <elf::mmap_loader::load(long, unsigned long)+0xe>
    return (const char *)base + offset;
   2d78c:	6508                	c.ld	a0,8(a0)
   2d78e:	952e                	c.add	a0,a1
  }
   2d790:	8082                	c.jr	ra
  const void *load(off_t offset, size_t size) {
   2d792:	1101                	c.addi	sp,-32
   2d794:	ec06                	c.sdsp	ra,24(sp)
   2d796:	e822                	c.sdsp	s0,16(sp)
   2d798:	e426                	c.sdsp	s1,8(sp)
      throw range_error("offset exceeds file size");
   2d79a:	4541                	c.li	a0,16
   2d79c:	ef5e80ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2d7a0:	84aa                	c.mv	s1,a0
   2d7a2:	00004597          	auipc	a1,0x4
   2d7a6:	33e58593          	addi	a1,a1,830 # 31ae0 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x58>
   2d7aa:	9c6e90ef          	jal	ra,16970 <std::range_error::range_error(char const*)@plt>
   2d7ae:	0000d617          	auipc	a2,0xd
   2d7b2:	c4a63603          	ld	a2,-950(a2) # 3a3f8 <std::range_error::~range_error()@GLIBCXX_3.4>
   2d7b6:	0000d597          	auipc	a1,0xd
   2d7ba:	db25b583          	ld	a1,-590(a1) # 3a568 <typeinfo for std::range_error@GLIBCXX_3.4>
   2d7be:	8526                	c.mv	a0,s1
   2d7c0:	9a0e90ef          	jal	ra,16960 <__cxa_throw@plt>
   2d7c4:	842a                	c.mv	s0,a0
   2d7c6:	8526                	c.mv	a0,s1
   2d7c8:	f89e80ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2d7cc:	8522                	c.mv	a0,s0
   2d7ce:	9c2e90ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002d7d2 <elf::mmap_loader::~mmap_loader()>:
  ~mmap_loader() { munmap(base, lim); }
   2d7d2:	1141                	c.addi	sp,-16
   2d7d4:	e406                	c.sdsp	ra,8(sp)
   2d7d6:	0000d797          	auipc	a5,0xd
   2d7da:	ca27b783          	ld	a5,-862(a5) # 3a478 <vtable for elf::mmap_loader@@Base+0x6e8>
   2d7de:	07c1                	c.addi	a5,16
   2d7e0:	e11c                	c.sd	a5,0(a0)
   2d7e2:	690c                	c.ld	a1,16(a0)
   2d7e4:	6508                	c.ld	a0,8(a0)
   2d7e6:	f8be80ef          	jal	ra,16770 <munmap@plt>
   2d7ea:	60a2                	c.ldsp	ra,8(sp)
   2d7ec:	0141                	c.addi	sp,16
   2d7ee:	8082                	c.jr	ra

000000000002d7f0 <elf::mmap_loader::~mmap_loader()>:
   2d7f0:	1141                	c.addi	sp,-16
   2d7f2:	e406                	c.sdsp	ra,8(sp)
   2d7f4:	e022                	c.sdsp	s0,0(sp)
   2d7f6:	842a                	c.mv	s0,a0
   2d7f8:	0000d797          	auipc	a5,0xd
   2d7fc:	c807b783          	ld	a5,-896(a5) # 3a478 <vtable for elf::mmap_loader@@Base+0x6e8>
   2d800:	07c1                	c.addi	a5,16
   2d802:	e11c                	c.sd	a5,0(a0)
   2d804:	690c                	c.ld	a1,16(a0)
   2d806:	6508                	c.ld	a0,8(a0)
   2d808:	f69e80ef          	jal	ra,16770 <munmap@plt>
   2d80c:	8522                	c.mv	a0,s0
   2d80e:	f93e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2d812:	60a2                	c.ldsp	ra,8(sp)
   2d814:	6402                	c.ldsp	s0,0(sp)
   2d816:	0141                	c.addi	sp,16
   2d818:	8082                	c.jr	ra

000000000002d81a <std::system_error::system_error(std::error_code, char const*)>:
    system_error(error_code __ec, const char* __what)
   2d81a:	7135                	c.addi16sp	sp,-160
   2d81c:	ed06                	c.sdsp	ra,152(sp)
   2d81e:	e922                	c.sdsp	s0,144(sp)
   2d820:	e526                	c.sdsp	s1,136(sp)
   2d822:	e14a                	c.sdsp	s2,128(sp)
   2d824:	fcce                	c.sdsp	s3,120(sp)
   2d826:	84aa                	c.mv	s1,a0
   2d828:	872e                	c.mv	a4,a1
   2d82a:	e02e                	c.sdsp	a1,0(sp)
   2d82c:	e432                	c.sdsp	a2,8(sp)
   2d82e:	8936                	c.mv	s2,a3
    category() const noexcept { return *_M_cat; }
   2d830:	85b2                	c.mv	a1,a2
    { return category().message(value()); }
   2d832:	621c                	c.ld	a5,0(a2)
   2d834:	739c                	c.ld	a5,32(a5)
   2d836:	0007061b          	addiw	a2,a4,0
   2d83a:	0880                	c.addi4spn	s0,sp,80
   2d83c:	8522                	c.mv	a0,s0
   2d83e:	9782                	c.jalr	a5
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d840:	4709                	c.li	a4,2
   2d842:	00004697          	auipc	a3,0x4
   2d846:	2be68693          	addi	a3,a3,702 # 31b00 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x78>
   2d84a:	4601                	c.li	a2,0
   2d84c:	4581                	c.li	a1,0
   2d84e:	8522                	c.mv	a0,s0
   2d850:	8b0e90ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2d854:	842a                	c.mv	s0,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2d856:	009c                	c.addi4spn	a5,sp,64
   2d858:	f83e                	c.sdsp	a5,48(sp)
      { return _M_dataplus._M_p; }
   2d85a:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2d85c:	01050993          	addi	s3,a0,16
	if (__str._M_is_local())
   2d860:	03378863          	beq	a5,s3,2d890 <std::system_error::system_error(std::error_code, char const*)+0x76>
      { _M_dataplus._M_p = __p; }
   2d864:	f83e                	c.sdsp	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   2d866:	691c                	c.ld	a5,16(a0)
   2d868:	e0be                	c.sdsp	a5,64(sp)
      { _M_string_length = __length; }
   2d86a:	641c                	c.ld	a5,8(s0)
   2d86c:	fc3e                	c.sdsp	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   2d86e:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   2d872:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2d876:	00040823          	sb	zero,16(s0)
	return __builtin_strlen(__s);
   2d87a:	854a                	c.mv	a0,s2
   2d87c:	e05e80ef          	jal	ra,16680 <strlen@plt>
   2d880:	872a                	c.mv	a4,a0
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d882:	86ca                	c.mv	a3,s2
   2d884:	4601                	c.li	a2,0
   2d886:	4581                	c.li	a1,0
   2d888:	1808                	c.addi4spn	a0,sp,48
   2d88a:	876e90ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2d88e:	a809                	c.j	2d8a0 <std::system_error::system_error(std::error_code, char const*)+0x86>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2d890:	6510                	c.ld	a2,8(a0)
   2d892:	0605                	c.addi	a2,1
	if (__n == 0)
   2d894:	da79                	c.beqz	a2,2d86a <std::system_error::system_error(std::error_code, char const*)+0x50>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2d896:	85ce                	c.mv	a1,s3
   2d898:	0088                	c.addi4spn	a0,sp,64
   2d89a:	fa7e80ef          	jal	ra,16840 <memcpy@plt>
   2d89e:	b7f1                	c.j	2d86a <std::system_error::system_error(std::error_code, char const*)+0x50>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d8a0:	842a                	c.mv	s0,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2d8a2:	101c                	c.addi4spn	a5,sp,32
   2d8a4:	e83e                	c.sdsp	a5,16(sp)
      { return _M_dataplus._M_p; }
   2d8a6:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2d8a8:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   2d8ac:	03278263          	beq	a5,s2,2d8d0 <std::system_error::system_error(std::error_code, char const*)+0xb6>
      { _M_dataplus._M_p = __p; }
   2d8b0:	e83e                	c.sdsp	a5,16(sp)
      { _M_allocated_capacity = __capacity; }
   2d8b2:	691c                	c.ld	a5,16(a0)
   2d8b4:	f03e                	c.sdsp	a5,32(sp)
      { _M_string_length = __length; }
   2d8b6:	641c                	c.ld	a5,8(s0)
   2d8b8:	ec3e                	c.sdsp	a5,24(sp)
      { _M_dataplus._M_p = __p; }
   2d8ba:	01243023          	sd	s2,0(s0)
      { _M_string_length = __length; }
   2d8be:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2d8c2:	00040823          	sb	zero,16(s0)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }
   2d8c6:	080c                	c.addi4spn	a1,sp,16
   2d8c8:	8526                	c.mv	a0,s1
   2d8ca:	f67e80ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2d8ce:	a809                	c.j	2d8e0 <std::system_error::system_error(std::error_code, char const*)+0xc6>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2d8d0:	6510                	c.ld	a2,8(a0)
   2d8d2:	0605                	c.addi	a2,1
	if (__n == 0)
   2d8d4:	d26d                	c.beqz	a2,2d8b6 <std::system_error::system_error(std::error_code, char const*)+0x9c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2d8d6:	85ca                	c.mv	a1,s2
   2d8d8:	1008                	c.addi4spn	a0,sp,32
   2d8da:	f67e80ef          	jal	ra,16840 <memcpy@plt>
   2d8de:	bfe1                	c.j	2d8b6 <std::system_error::system_error(std::error_code, char const*)+0x9c>
      { return _M_dataplus._M_p; }
   2d8e0:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   2d8e2:	101c                	c.addi4spn	a5,sp,32
   2d8e4:	00f50463          	beq	a0,a5,2d8ec <std::system_error::system_error(std::error_code, char const*)+0xd2>
   2d8e8:	eb9e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2d8ec:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   2d8ee:	009c                	c.addi4spn	a5,sp,64
   2d8f0:	00f50463          	beq	a0,a5,2d8f8 <std::system_error::system_error(std::error_code, char const*)+0xde>
   2d8f4:	eade80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2d8f8:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   2d8fa:	109c                	c.addi4spn	a5,sp,96
   2d8fc:	00f50463          	beq	a0,a5,2d904 <std::system_error::system_error(std::error_code, char const*)+0xea>
   2d900:	ea1e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2d904:	0000d797          	auipc	a5,0xd
   2d908:	c9c7b783          	ld	a5,-868(a5) # 3a5a0 <vtable for std::system_error@GLIBCXX_3.4.11>
   2d90c:	07c1                	c.addi	a5,16
   2d90e:	e09c                	c.sd	a5,0(s1)
   2d910:	6782                	c.ldsp	a5,0(sp)
   2d912:	e89c                	c.sd	a5,16(s1)
   2d914:	67a2                	c.ldsp	a5,8(sp)
   2d916:	ec9c                	c.sd	a5,24(s1)
   2d918:	60ea                	c.ldsp	ra,152(sp)
   2d91a:	644a                	c.ldsp	s0,144(sp)
   2d91c:	64aa                	c.ldsp	s1,136(sp)
   2d91e:	690a                	c.ldsp	s2,128(sp)
   2d920:	79e6                	c.ldsp	s3,120(sp)
   2d922:	610d                	c.addi16sp	sp,160
   2d924:	8082                	c.jr	ra
      { return _M_dataplus._M_p; }
   2d926:	842a                	c.mv	s0,a0
   2d928:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   2d92a:	101c                	c.addi4spn	a5,sp,32
   2d92c:	00f50463          	beq	a0,a5,2d934 <std::system_error::system_error(std::error_code, char const*)+0x11a>
   2d930:	e71e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2d934:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   2d936:	009c                	c.addi4spn	a5,sp,64
   2d938:	00f50463          	beq	a0,a5,2d940 <std::system_error::system_error(std::error_code, char const*)+0x126>
   2d93c:	e65e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2d940:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   2d942:	109c                	c.addi4spn	a5,sp,96
   2d944:	00f50463          	beq	a0,a5,2d94c <std::system_error::system_error(std::error_code, char const*)+0x132>
   2d948:	e59e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2d94c:	8522                	c.mv	a0,s0
   2d94e:	842e90ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2d952:	842a                	c.mv	s0,a0
   2d954:	b7c5                	c.j	2d934 <std::system_error::system_error(std::error_code, char const*)+0x11a>
   2d956:	842a                	c.mv	s0,a0
   2d958:	b7e5                	c.j	2d940 <std::system_error::system_error(std::error_code, char const*)+0x126>

000000000002d95a <__libc_csu_init>:
   the libc.a module in that it doesn't call the preinit array.  */


void
__libc_csu_init (int argc, char **argv, char **envp)
{
   2d95a:	7139                	c.addi16sp	sp,-64
   2d95c:	f822                	c.sdsp	s0,48(sp)
   2d95e:	f04a                	c.sdsp	s2,32(sp)

#if ELF_INITFINI
  _init ();
#endif

  const size_t size = __init_array_end - __init_array_start;
   2d960:	0000c797          	auipc	a5,0xc
   2d964:	d2078793          	addi	a5,a5,-736 # 39680 <__do_global_dtors_aux_fini_array_entry>
   2d968:	0000c417          	auipc	s0,0xc
   2d96c:	d0840413          	addi	s0,s0,-760 # 39670 <__frame_dummy_init_array_entry>
{
   2d970:	fc06                	c.sdsp	ra,56(sp)
   2d972:	f426                	c.sdsp	s1,40(sp)
   2d974:	ec4e                	c.sdsp	s3,24(sp)
   2d976:	e852                	c.sdsp	s4,16(sp)
   2d978:	e456                	c.sdsp	s5,8(sp)
  const size_t size = __init_array_end - __init_array_start;
   2d97a:	40878933          	sub	s2,a5,s0
  for (size_t i = 0; i < size; i++)
   2d97e:	02878163          	beq	a5,s0,2d9a0 <__libc_csu_init+0x46>
   2d982:	89aa                	c.mv	s3,a0
   2d984:	8a2e                	c.mv	s4,a1
   2d986:	8ab2                	c.mv	s5,a2
   2d988:	40395913          	srai	s2,s2,0x3
   2d98c:	4481                	c.li	s1,0
      (*__init_array_start [i]) (argc, argv, envp);
   2d98e:	601c                	c.ld	a5,0(s0)
   2d990:	8656                	c.mv	a2,s5
   2d992:	85d2                	c.mv	a1,s4
   2d994:	854e                	c.mv	a0,s3
  for (size_t i = 0; i < size; i++)
   2d996:	0485                	c.addi	s1,1
      (*__init_array_start [i]) (argc, argv, envp);
   2d998:	9782                	c.jalr	a5
  for (size_t i = 0; i < size; i++)
   2d99a:	0421                	c.addi	s0,8
   2d99c:	ff24e9e3          	bltu	s1,s2,2d98e <__libc_csu_init+0x34>
}
   2d9a0:	70e2                	c.ldsp	ra,56(sp)
   2d9a2:	7442                	c.ldsp	s0,48(sp)
   2d9a4:	74a2                	c.ldsp	s1,40(sp)
   2d9a6:	7902                	c.ldsp	s2,32(sp)
   2d9a8:	69e2                	c.ldsp	s3,24(sp)
   2d9aa:	6a42                	c.ldsp	s4,16(sp)
   2d9ac:	6aa2                	c.ldsp	s5,8(sp)
   2d9ae:	6121                	c.addi16sp	sp,64
   2d9b0:	8082                	c.jr	ra

000000000002d9b2 <__libc_csu_fini>:

# if ELF_INITFINI
  _fini ();
# endif
#endif
}
   2d9b2:	8082                	c.jr	ra
