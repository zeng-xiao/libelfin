
find-pc:     file format elf64-littleriscv


Disassembly of section .plt:

0000000000016570 <_PROCEDURE_LINKAGE_TABLE_>:
   16570:	97 d3 02 00 33 03 c3 41 03 be 03 aa 13 03 43 fd     ....3..A......C.
   16580:	93 82 03 aa 13 53 13 00 83 b2 82 00 67 00 0e 00     .....S......g...

0000000000016590 <operator new[](unsigned long)@plt>:
   16590:	0002de17          	auipc	t3,0x2d
   16594:	a90e3e03          	ld	t3,-1392(t3) # 43020 <operator new[](unsigned long)@GLIBCXX_3.4>
   16598:	000e0367          	jalr	t1,0(t3)
   1659c:	00000013          	addi	zero,zero,0

00000000000165a0 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt>:
   165a0:	0002de17          	auipc	t3,0x2d
   165a4:	a88e3e03          	ld	t3,-1400(t3) # 43028 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@GLIBCXX_3.4>
   165a8:	000e0367          	jalr	t1,0(t3)
   165ac:	00000013          	addi	zero,zero,0

00000000000165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>:
   165b0:	0002de17          	auipc	t3,0x2d
   165b4:	a80e3e03          	ld	t3,-1408(t3) # 43030 <__gnu_cxx::__atomic_add(int volatile*, int)@GLIBCXX_3.4>
   165b8:	000e0367          	jalr	t1,0(t3)
   165bc:	00000013          	addi	zero,zero,0

00000000000165c0 <exit@plt>:
   165c0:	0002de17          	auipc	t3,0x2d
   165c4:	a78e3e03          	ld	t3,-1416(t3) # 43038 <exit@GLIBC_2.27>
   165c8:	000e0367          	jalr	t1,0(t3)
   165cc:	00000013          	addi	zero,zero,0

00000000000165d0 <strcmp@plt>:
   165d0:	0002de17          	auipc	t3,0x2d
   165d4:	a70e3e03          	ld	t3,-1424(t3) # 43040 <strcmp@GLIBC_2.27>
   165d8:	000e0367          	jalr	t1,0(t3)
   165dc:	00000013          	addi	zero,zero,0

00000000000165e0 <__bswapsi2@plt>:
   165e0:	0002de17          	auipc	t3,0x2d
   165e4:	a68e3e03          	ld	t3,-1432(t3) # 43048 <__bswapsi2@GCC_4.3.0>
   165e8:	000e0367          	jalr	t1,0(t3)
   165ec:	00000013          	addi	zero,zero,0

00000000000165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>:
   165f0:	0002de17          	auipc	t3,0x2d
   165f4:	a60e3e03          	ld	t3,-1440(t3) # 43050 <__gnu_cxx::__exchange_and_add(int volatile*, int)@GLIBCXX_3.4>
   165f8:	000e0367          	jalr	t1,0(t3)
   165fc:	00000013          	addi	zero,zero,0

0000000000016600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>:
   16600:	0002de17          	auipc	t3,0x2d
   16604:	a58e3e03          	ld	t3,-1448(t3) # 43058 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@GLIBCXX_3.4.21>
   16608:	000e0367          	jalr	t1,0(t3)
   1660c:	00000013          	addi	zero,zero,0

0000000000016610 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>:
   16610:	0002de17          	auipc	t3,0x2d
   16614:	a50e3e03          	ld	t3,-1456(t3) # 43060 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@GLIBCXX_3.4.21>
   16618:	000e0367          	jalr	t1,0(t3)
   1661c:	00000013          	addi	zero,zero,0

0000000000016620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@plt>:
   16620:	0002de17          	auipc	t3,0x2d
   16624:	a48e3e03          	ld	t3,-1464(t3) # 43068 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@GLIBCXX_3.4.21>
   16628:	000e0367          	jalr	t1,0(t3)
   1662c:	00000013          	addi	zero,zero,0

0000000000016630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>:
   16630:	0002de17          	auipc	t3,0x2d
   16634:	a40e3e03          	ld	t3,-1472(t3) # 43070 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@GLIBCXX_3.4.21>
   16638:	000e0367          	jalr	t1,0(t3)
   1663c:	00000013          	addi	zero,zero,0

0000000000016640 <__libc_start_main@plt>:
   16640:	0002de17          	auipc	t3,0x2d
   16644:	a38e3e03          	ld	t3,-1480(t3) # 43078 <__libc_start_main@GLIBC_2.27>
   16648:	000e0367          	jalr	t1,0(t3)
   1664c:	00000013          	addi	zero,zero,0

0000000000016650 <std::__throw_bad_alloc()@plt>:
   16650:	0002de17          	auipc	t3,0x2d
   16654:	a30e3e03          	ld	t3,-1488(t3) # 43080 <std::__throw_bad_alloc()@GLIBCXX_3.4>
   16658:	000e0367          	jalr	t1,0(t3)
   1665c:	00000013          	addi	zero,zero,0

0000000000016660 <std::runtime_error::runtime_error(char const*)@plt>:
   16660:	0002de17          	auipc	t3,0x2d
   16664:	a28e3e03          	ld	t3,-1496(t3) # 43088 <std::runtime_error::runtime_error(char const*)@GLIBCXX_3.4.21>
   16668:	000e0367          	jalr	t1,0(t3)
   1666c:	00000013          	addi	zero,zero,0

0000000000016670 <__cxa_begin_catch@plt>:
   16670:	0002de17          	auipc	t3,0x2d
   16674:	a20e3e03          	ld	t3,-1504(t3) # 43090 <__cxa_begin_catch@CXXABI_1.3>
   16678:	000e0367          	jalr	t1,0(t3)
   1667c:	00000013          	addi	zero,zero,0

0000000000016680 <strlen@plt>:
   16680:	0002de17          	auipc	t3,0x2d
   16684:	a18e3e03          	ld	t3,-1512(t3) # 43098 <strlen@GLIBC_2.27>
   16688:	000e0367          	jalr	t1,0(t3)
   1668c:	00000013          	addi	zero,zero,0

0000000000016690 <__cxa_allocate_exception@plt>:
   16690:	0002de17          	auipc	t3,0x2d
   16694:	a10e3e03          	ld	t3,-1520(t3) # 430a0 <__cxa_allocate_exception@CXXABI_1.3>
   16698:	000e0367          	jalr	t1,0(t3)
   1669c:	00000013          	addi	zero,zero,0

00000000000166a0 <std::__throw_length_error(char const*)@plt>:
   166a0:	0002de17          	auipc	t3,0x2d
   166a4:	a08e3e03          	ld	t3,-1528(t3) # 430a8 <std::__throw_length_error(char const*)@GLIBCXX_3.4>
   166a8:	000e0367          	jalr	t1,0(t3)
   166ac:	00000013          	addi	zero,zero,0

00000000000166b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   166b0:	0002de17          	auipc	t3,0x2d
   166b4:	a00e3e03          	ld	t3,-1536(t3) # 430b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   166b8:	000e0367          	jalr	t1,0(t3)
   166bc:	00000013          	addi	zero,zero,0

00000000000166c0 <std::_V2::system_category()@plt>:
   166c0:	0002de17          	auipc	t3,0x2d
   166c4:	9f8e3e03          	ld	t3,-1544(t3) # 430b8 <std::_V2::system_category()@GLIBCXX_3.4.21>
   166c8:	000e0367          	jalr	t1,0(t3)
   166cc:	00000013          	addi	zero,zero,0

00000000000166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>:
   166d0:	0002de17          	auipc	t3,0x2d
   166d4:	9f0e3e03          	ld	t3,-1552(t3) # 430c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@GLIBCXX_3.4.21>
   166d8:	000e0367          	jalr	t1,0(t3)
   166dc:	00000013          	addi	zero,zero,0

00000000000166e0 <open@plt>:
   166e0:	0002de17          	auipc	t3,0x2d
   166e4:	9e8e3e03          	ld	t3,-1560(t3) # 430c8 <open@GLIBC_2.27>
   166e8:	000e0367          	jalr	t1,0(t3)
   166ec:	00000013          	addi	zero,zero,0

00000000000166f0 <std::__throw_invalid_argument(char const*)@plt>:
   166f0:	0002de17          	auipc	t3,0x2d
   166f4:	9e0e3e03          	ld	t3,-1568(t3) # 430d0 <std::__throw_invalid_argument(char const*)@GLIBCXX_3.4>
   166f8:	000e0367          	jalr	t1,0(t3)
   166fc:	00000013          	addi	zero,zero,0

0000000000016700 <__cxa_guard_release@plt>:
   16700:	0002de17          	auipc	t3,0x2d
   16704:	9d8e3e03          	ld	t3,-1576(t3) # 430d8 <__cxa_guard_release@CXXABI_1.3>
   16708:	000e0367          	jalr	t1,0(t3)
   1670c:	00000013          	addi	zero,zero,0

0000000000016710 <strtoll@plt>:
   16710:	0002de17          	auipc	t3,0x2d
   16714:	9d0e3e03          	ld	t3,-1584(t3) # 430e0 <strtoll@GLIBC_2.27>
   16718:	000e0367          	jalr	t1,0(t3)
   1671c:	00000013          	addi	zero,zero,0

0000000000016720 <mmap@plt>:
   16720:	0002de17          	auipc	t3,0x2d
   16724:	9c8e3e03          	ld	t3,-1592(t3) # 430e8 <mmap@GLIBC_2.27>
   16728:	000e0367          	jalr	t1,0(t3)
   1672c:	00000013          	addi	zero,zero,0

0000000000016730 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@plt>:
   16730:	0002de17          	auipc	t3,0x2d
   16734:	9c0e3e03          	ld	t3,-1600(t3) # 430f0 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@GLIBCXX_3.4>
   16738:	000e0367          	jalr	t1,0(t3)
   1673c:	00000013          	addi	zero,zero,0

0000000000016740 <std::__throw_logic_error(char const*)@plt>:
   16740:	0002de17          	auipc	t3,0x2d
   16744:	9b8e3e03          	ld	t3,-1608(t3) # 430f8 <std::__throw_logic_error(char const*)@GLIBCXX_3.4>
   16748:	000e0367          	jalr	t1,0(t3)
   1674c:	00000013          	addi	zero,zero,0

0000000000016750 <__cxa_free_exception@plt>:
   16750:	0002de17          	auipc	t3,0x2d
   16754:	9b0e3e03          	ld	t3,-1616(t3) # 43100 <__cxa_free_exception@CXXABI_1.3>
   16758:	000e0367          	jalr	t1,0(t3)
   1675c:	00000013          	addi	zero,zero,0

0000000000016760 <puts@plt>:
   16760:	0002de17          	auipc	t3,0x2d
   16764:	9a8e3e03          	ld	t3,-1624(t3) # 43108 <puts@GLIBC_2.27>
   16768:	000e0367          	jalr	t1,0(t3)
   1676c:	00000013          	addi	zero,zero,0

0000000000016770 <munmap@plt>:
   16770:	0002de17          	auipc	t3,0x2d
   16774:	9a0e3e03          	ld	t3,-1632(t3) # 43110 <munmap@GLIBC_2.27>
   16778:	000e0367          	jalr	t1,0(t3)
   1677c:	00000013          	addi	zero,zero,0

0000000000016780 <std::__throw_bad_array_new_length()@plt>:
   16780:	0002de17          	auipc	t3,0x2d
   16784:	998e3e03          	ld	t3,-1640(t3) # 43118 <std::__throw_bad_array_new_length()@GLIBCXX_3.4.29>
   16788:	000e0367          	jalr	t1,0(t3)
   1678c:	00000013          	addi	zero,zero,0

0000000000016790 <__assert_fail@plt>:
   16790:	0002de17          	auipc	t3,0x2d
   16794:	990e3e03          	ld	t3,-1648(t3) # 43120 <__assert_fail@GLIBC_2.27>
   16798:	000e0367          	jalr	t1,0(t3)
   1679c:	00000013          	addi	zero,zero,0

00000000000167a0 <operator delete(void*)@plt>:
   167a0:	0002de17          	auipc	t3,0x2d
   167a4:	988e3e03          	ld	t3,-1656(t3) # 43128 <operator delete(void*)@GLIBCXX_3.4>
   167a8:	000e0367          	jalr	t1,0(t3)
   167ac:	00000013          	addi	zero,zero,0

00000000000167b0 <operator new(unsigned long)@plt>:
   167b0:	0002de17          	auipc	t3,0x2d
   167b4:	980e3e03          	ld	t3,-1664(t3) # 43130 <operator new(unsigned long)@GLIBCXX_3.4>
   167b8:	000e0367          	jalr	t1,0(t3)
   167bc:	00000013          	addi	zero,zero,0

00000000000167c0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>:
   167c0:	0002de17          	auipc	t3,0x2d
   167c4:	978e3e03          	ld	t3,-1672(t3) # 43138 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@GLIBCXX_3.4>
   167c8:	000e0367          	jalr	t1,0(t3)
   167cc:	00000013          	addi	zero,zero,0

00000000000167d0 <std::runtime_error::~runtime_error()@plt>:
   167d0:	0002de17          	auipc	t3,0x2d
   167d4:	970e3e03          	ld	t3,-1680(t3) # 43140 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   167d8:	000e0367          	jalr	t1,0(t3)
   167dc:	00000013          	addi	zero,zero,0

00000000000167e0 <__bswapdi2@plt>:
   167e0:	0002de17          	auipc	t3,0x2d
   167e4:	968e3e03          	ld	t3,-1688(t3) # 43148 <__bswapdi2@GCC_4.3.0>
   167e8:	000e0367          	jalr	t1,0(t3)
   167ec:	00000013          	addi	zero,zero,0

00000000000167f0 <__dynamic_cast@plt>:
   167f0:	0002de17          	auipc	t3,0x2d
   167f4:	960e3e03          	ld	t3,-1696(t3) # 43150 <__dynamic_cast@CXXABI_1.3>
   167f8:	000e0367          	jalr	t1,0(t3)
   167fc:	00000013          	addi	zero,zero,0

0000000000016800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>:
   16800:	0002de17          	auipc	t3,0x2d
   16804:	958e3e03          	ld	t3,-1704(t3) # 43158 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@GLIBCXX_3.4.21>
   16808:	000e0367          	jalr	t1,0(t3)
   1680c:	00000013          	addi	zero,zero,0

0000000000016810 <std::logic_error::logic_error(char const*)@plt>:
   16810:	0002de17          	auipc	t3,0x2d
   16814:	950e3e03          	ld	t3,-1712(t3) # 43160 <std::logic_error::logic_error(char const*)@GLIBCXX_3.4.21>
   16818:	000e0367          	jalr	t1,0(t3)
   1681c:	00000013          	addi	zero,zero,0

0000000000016820 <strerror@plt>:
   16820:	0002de17          	auipc	t3,0x2d
   16824:	948e3e03          	ld	t3,-1720(t3) # 43168 <strerror@GLIBC_2.27>
   16828:	000e0367          	jalr	t1,0(t3)
   1682c:	00000013          	addi	zero,zero,0

0000000000016830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16830:	0002de17          	auipc	t3,0x2d
   16834:	940e3e03          	ld	t3,-1728(t3) # 43170 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16838:	000e0367          	jalr	t1,0(t3)
   1683c:	00000013          	addi	zero,zero,0

0000000000016840 <memcpy@plt>:
   16840:	0002de17          	auipc	t3,0x2d
   16844:	938e3e03          	ld	t3,-1736(t3) # 43178 <memcpy@GLIBC_2.27>
   16848:	000e0367          	jalr	t1,0(t3)
   1684c:	00000013          	addi	zero,zero,0

0000000000016850 <operator delete[](void*)@plt>:
   16850:	0002de17          	auipc	t3,0x2d
   16854:	930e3e03          	ld	t3,-1744(t3) # 43180 <operator delete[](void*)@GLIBCXX_3.4>
   16858:	000e0367          	jalr	t1,0(t3)
   1685c:	00000013          	addi	zero,zero,0

0000000000016860 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>:
   16860:	0002de17          	auipc	t3,0x2d
   16864:	928e3e03          	ld	t3,-1752(t3) # 43188 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@GLIBCXX_3.4.18>
   16868:	000e0367          	jalr	t1,0(t3)
   1686c:	00000013          	addi	zero,zero,0

0000000000016870 <memset@plt>:
   16870:	0002de17          	auipc	t3,0x2d
   16874:	920e3e03          	ld	t3,-1760(t3) # 43190 <memset@GLIBC_2.27>
   16878:	000e0367          	jalr	t1,0(t3)
   1687c:	00000013          	addi	zero,zero,0

0000000000016880 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>:
   16880:	0002de17          	auipc	t3,0x2d
   16884:	918e3e03          	ld	t3,-1768(t3) # 43198 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@GLIBCXX_3.4.21>
   16888:	000e0367          	jalr	t1,0(t3)
   1688c:	00000013          	addi	zero,zero,0

0000000000016890 <std::runtime_error::what() const@plt>:
   16890:	0002de17          	auipc	t3,0x2d
   16894:	910e3e03          	ld	t3,-1776(t3) # 431a0 <std::runtime_error::what() const@GLIBCXX_3.4>
   16898:	000e0367          	jalr	t1,0(t3)
   1689c:	00000013          	addi	zero,zero,0

00000000000168a0 <std::logic_error::logic_error(char const*)@plt>:
   168a0:	0002de17          	auipc	t3,0x2d
   168a4:	908e3e03          	ld	t3,-1784(t3) # 431a8 <std::logic_error::logic_error(char const*)@GLIBCXX_3.4.21>
   168a8:	000e0367          	jalr	t1,0(t3)
   168ac:	00000013          	addi	zero,zero,0

00000000000168b0 <std::__throw_out_of_range(char const*)@plt>:
   168b0:	0002de17          	auipc	t3,0x2d
   168b4:	900e3e03          	ld	t3,-1792(t3) # 431b0 <std::__throw_out_of_range(char const*)@GLIBCXX_3.4>
   168b8:	000e0367          	jalr	t1,0(t3)
   168bc:	00000013          	addi	zero,zero,0

00000000000168c0 <__cxa_rethrow@plt>:
   168c0:	0002de17          	auipc	t3,0x2d
   168c4:	8f8e3e03          	ld	t3,-1800(t3) # 431b8 <__cxa_rethrow@CXXABI_1.3>
   168c8:	000e0367          	jalr	t1,0(t3)
   168cc:	00000013          	addi	zero,zero,0

00000000000168d0 <std::logic_error::what() const@plt>:
   168d0:	0002de17          	auipc	t3,0x2d
   168d4:	8f0e3e03          	ld	t3,-1808(t3) # 431c0 <std::logic_error::what() const@GLIBCXX_3.4>
   168d8:	000e0367          	jalr	t1,0(t3)
   168dc:	00000013          	addi	zero,zero,0

00000000000168e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>:
   168e0:	0002de17          	auipc	t3,0x2d
   168e4:	8e8e3e03          	ld	t3,-1816(t3) # 431c8 <std::__throw_out_of_range_fmt(char const*, ...)@GLIBCXX_3.4.20>
   168e8:	000e0367          	jalr	t1,0(t3)
   168ec:	00000013          	addi	zero,zero,0

00000000000168f0 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   168f0:	0002de17          	auipc	t3,0x2d
   168f4:	8e0e3e03          	ld	t3,-1824(t3) # 431d0 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   168f8:	000e0367          	jalr	t1,0(t3)
   168fc:	00000013          	addi	zero,zero,0

0000000000016900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>:
   16900:	0002de17          	auipc	t3,0x2d
   16904:	8d8e3e03          	ld	t3,-1832(t3) # 431d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@GLIBCXX_3.4.21>
   16908:	000e0367          	jalr	t1,0(t3)
   1690c:	00000013          	addi	zero,zero,0

0000000000016910 <lseek@plt>:
   16910:	0002de17          	auipc	t3,0x2d
   16914:	8d0e3e03          	ld	t3,-1840(t3) # 431e0 <lseek@GLIBC_2.27>
   16918:	000e0367          	jalr	t1,0(t3)
   1691c:	00000013          	addi	zero,zero,0

0000000000016920 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16920:	0002de17          	auipc	t3,0x2d
   16924:	8c8e3e03          	ld	t3,-1848(t3) # 431e8 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16928:	000e0367          	jalr	t1,0(t3)
   1692c:	00000013          	addi	zero,zero,0

0000000000016930 <__cxa_end_catch@plt>:
   16930:	0002de17          	auipc	t3,0x2d
   16934:	8c0e3e03          	ld	t3,-1856(t3) # 431f0 <__cxa_end_catch@CXXABI_1.3>
   16938:	000e0367          	jalr	t1,0(t3)
   1693c:	00000013          	addi	zero,zero,0

0000000000016940 <__gxx_personality_v0@plt>:
   16940:	0002de17          	auipc	t3,0x2d
   16944:	8b8e3e03          	ld	t3,-1864(t3) # 431f8 <__gxx_personality_v0@CXXABI_1.3>
   16948:	000e0367          	jalr	t1,0(t3)
   1694c:	00000013          	addi	zero,zero,0

0000000000016950 <strncmp@plt>:
   16950:	0002de17          	auipc	t3,0x2d
   16954:	8b0e3e03          	ld	t3,-1872(t3) # 43200 <strncmp@GLIBC_2.27>
   16958:	000e0367          	jalr	t1,0(t3)
   1695c:	00000013          	addi	zero,zero,0

0000000000016960 <__cxa_throw@plt>:
   16960:	0002de17          	auipc	t3,0x2d
   16964:	8a8e3e03          	ld	t3,-1880(t3) # 43208 <__cxa_throw@CXXABI_1.3>
   16968:	000e0367          	jalr	t1,0(t3)
   1696c:	00000013          	addi	zero,zero,0

0000000000016970 <std::range_error::range_error(char const*)@plt>:
   16970:	0002de17          	auipc	t3,0x2d
   16974:	8a0e3e03          	ld	t3,-1888(t3) # 43210 <std::range_error::range_error(char const*)@GLIBCXX_3.4.21>
   16978:	000e0367          	jalr	t1,0(t3)
   1697c:	00000013          	addi	zero,zero,0

0000000000016980 <fprintf@plt>:
   16980:	0002de17          	auipc	t3,0x2d
   16984:	898e3e03          	ld	t3,-1896(t3) # 43218 <fprintf@GLIBC_2.27>
   16988:	000e0367          	jalr	t1,0(t3)
   1698c:	00000013          	addi	zero,zero,0

0000000000016990 <_Unwind_Resume@plt>:
   16990:	0002de17          	auipc	t3,0x2d
   16994:	890e3e03          	ld	t3,-1904(t3) # 43220 <_Unwind_Resume@GCC_3.0>
   16998:	000e0367          	jalr	t1,0(t3)
   1699c:	00000013          	addi	zero,zero,0

00000000000169a0 <std::logic_error::~logic_error()@plt>:
   169a0:	0002de17          	auipc	t3,0x2d
   169a4:	888e3e03          	ld	t3,-1912(t3) # 43228 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   169a8:	000e0367          	jalr	t1,0(t3)
   169ac:	00000013          	addi	zero,zero,0

00000000000169b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>:
   169b0:	0002de17          	auipc	t3,0x2d
   169b4:	880e3e03          	ld	t3,-1920(t3) # 43230 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@GLIBCXX_3.4.21>
   169b8:	000e0367          	jalr	t1,0(t3)
   169bc:	00000013          	addi	zero,zero,0

00000000000169c0 <__cxa_atexit@plt>:
   169c0:	0002de17          	auipc	t3,0x2d
   169c4:	878e3e03          	ld	t3,-1928(t3) # 43238 <__cxa_atexit@GLIBC_2.27>
   169c8:	000e0367          	jalr	t1,0(t3)
   169cc:	00000013          	addi	zero,zero,0

00000000000169d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@plt>:
   169d0:	0002de17          	auipc	t3,0x2d
   169d4:	870e3e03          	ld	t3,-1936(t3) # 43240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@GLIBCXX_3.4.21>
   169d8:	000e0367          	jalr	t1,0(t3)
   169dc:	00000013          	addi	zero,zero,0

00000000000169e0 <__cxa_guard_acquire@plt>:
   169e0:	0002de17          	auipc	t3,0x2d
   169e4:	868e3e03          	ld	t3,-1944(t3) # 43248 <__cxa_guard_acquire@CXXABI_1.3>
   169e8:	000e0367          	jalr	t1,0(t3)
   169ec:	00000013          	addi	zero,zero,0

00000000000169f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)@plt>:
   169f0:	0002de17          	auipc	t3,0x2d
   169f4:	860e3e03          	ld	t3,-1952(t3) # 43250 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)@GLIBCXX_3.4.21>
   169f8:	000e0367          	jalr	t1,0(t3)
   169fc:	00000013          	addi	zero,zero,0

0000000000016a00 <printf@plt>:
   16a00:	0002de17          	auipc	t3,0x2d
   16a04:	858e3e03          	ld	t3,-1960(t3) # 43258 <printf@GLIBC_2.27>
   16a08:	000e0367          	jalr	t1,0(t3)
   16a0c:	00000013          	addi	zero,zero,0

0000000000016a10 <std::runtime_error::runtime_error(char const*)@plt>:
   16a10:	0002de17          	auipc	t3,0x2d
   16a14:	850e3e03          	ld	t3,-1968(t3) # 43260 <std::runtime_error::runtime_error(char const*)@GLIBCXX_3.4.21>
   16a18:	000e0367          	jalr	t1,0(t3)
   16a1c:	00000013          	addi	zero,zero,0

0000000000016a20 <memmove@plt>:
   16a20:	0002de17          	auipc	t3,0x2d
   16a24:	848e3e03          	ld	t3,-1976(t3) # 43268 <memmove@GLIBC_2.27>
   16a28:	000e0367          	jalr	t1,0(t3)
   16a2c:	00000013          	addi	zero,zero,0

0000000000016a30 <__cxa_pure_virtual@plt>:
   16a30:	0002de17          	auipc	t3,0x2d
   16a34:	840e3e03          	ld	t3,-1984(t3) # 43270 <__cxa_pure_virtual@CXXABI_1.3>
   16a38:	000e0367          	jalr	t1,0(t3)
   16a3c:	00000013          	addi	zero,zero,0

0000000000016a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>:
   16a40:	0002de17          	auipc	t3,0x2d
   16a44:	838e3e03          	ld	t3,-1992(t3) # 43278 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@GLIBCXX_3.4.21>
   16a48:	000e0367          	jalr	t1,0(t3)
   16a4c:	00000013          	addi	zero,zero,0

0000000000016a50 <std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16a50:	0002de17          	auipc	t3,0x2d
   16a54:	830e3e03          	ld	t3,-2000(t3) # 43280 <std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16a58:	000e0367          	jalr	t1,0(t3)
   16a5c:	00000013          	addi	zero,zero,0

0000000000016a60 <__errno_location@plt>:
   16a60:	0002de17          	auipc	t3,0x2d
   16a64:	828e3e03          	ld	t3,-2008(t3) # 43288 <__errno_location@GLIBC_2.27>
   16a68:	000e0367          	jalr	t1,0(t3)
   16a6c:	00000013          	addi	zero,zero,0

0000000000016a70 <close@plt>:
   16a70:	0002de17          	auipc	t3,0x2d
   16a74:	820e3e03          	ld	t3,-2016(t3) # 43290 <close@GLIBC_2.27>
   16a78:	000e0367          	jalr	t1,0(t3)
   16a7c:	00000013          	addi	zero,zero,0

0000000000016a80 <std::underflow_error::underflow_error(char const*)@plt>:
   16a80:	0002de17          	auipc	t3,0x2d
   16a84:	818e3e03          	ld	t3,-2024(t3) # 43298 <std::underflow_error::underflow_error(char const*)@GLIBCXX_3.4.21>
   16a88:	000e0367          	jalr	t1,0(t3)
   16a8c:	00000013          	addi	zero,zero,0

0000000000016a90 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16a90:	0002de17          	auipc	t3,0x2d
   16a94:	810e3e03          	ld	t3,-2032(t3) # 432a0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16a98:	000e0367          	jalr	t1,0(t3)
   16a9c:	00000013          	addi	zero,zero,0

Disassembly of section .text:

0000000000016aa0 <_start>:
ENTRY (ENTRY_POINT)
	/* Terminate call stack by noting ra is undefined.  Use a dummy
	   .cfi_label to force starting the FDE.  */
	.cfi_label .Ldummy
	cfi_undefined (ra)
	call  load_gp
   16aa0:	02e000ef          	jal	ra,16ace <load_gp>
	mv    a5, a0  /* rtld_fini.  */
   16aa4:	87aa                	c.mv	a5,a0
	/* main may be in a shared library.  */
	la   a0, main
   16aa6:	00000517          	auipc	a0,0x0
   16aaa:	62250513          	addi	a0,a0,1570 # 170c8 <main>
	REG_L a1, 0(sp)      /* argc.  */
   16aae:	6582                	c.ldsp	a1,0(sp)
	addi  a2, sp, SZREG  /* argv.  */
   16ab0:	0030                	c.addi4spn	a2,sp,8
	andi  sp, sp, ALMASK /* Align stack. */
   16ab2:	ff017113          	andi	sp,sp,-16
	lla   a3, __libc_csu_init
   16ab6:	00021697          	auipc	a3,0x21
   16aba:	95268693          	addi	a3,a3,-1710 # 37408 <__libc_csu_init>
	lla   a4, __libc_csu_fini
   16abe:	00021717          	auipc	a4,0x21
   16ac2:	9a270713          	addi	a4,a4,-1630 # 37460 <__libc_csu_fini>
	mv    a6, sp  /* stack_end.  */
   16ac6:	880a                	c.mv	a6,sp

	call  __libc_start_main@plt
   16ac8:	b79ff0ef          	jal	ra,16640 <__libc_start_main@plt>
	ebreak
   16acc:	9002                	c.ebreak

0000000000016ace <load_gp>:
   So we redundantly initialize it at the beginning of _start.  */

load_gp:
.option push
.option norelax
	lla   gp, __global_pointer$
   16ace:	0002d197          	auipc	gp,0x2d
   16ad2:	d3218193          	addi	gp,gp,-718 # 43800 <__global_pointer$>
.option pop
	ret
   16ad6:	8082                	c.jr	ra
	...

0000000000016ada <deregister_tm_clones>:
   16ada:	81018793          	addi	a5,gp,-2032 # 43010 <__TMC_END__>
   16ade:	81018713          	addi	a4,gp,-2032 # 43010 <__TMC_END__>
   16ae2:	00f70863          	beq	a4,a5,16af2 <deregister_tm_clones+0x18>
   16ae6:	00000793          	addi	a5,zero,0
   16aea:	c781                	c.beqz	a5,16af2 <deregister_tm_clones+0x18>
   16aec:	81018513          	addi	a0,gp,-2032 # 43010 <__TMC_END__>
   16af0:	8782                	c.jr	a5
   16af2:	8082                	c.jr	ra

0000000000016af4 <register_tm_clones>:
   16af4:	81018793          	addi	a5,gp,-2032 # 43010 <__TMC_END__>
   16af8:	81018593          	addi	a1,gp,-2032 # 43010 <__TMC_END__>
   16afc:	8d9d                	c.sub	a1,a5
   16afe:	4035d793          	srai	a5,a1,0x3
   16b02:	91fd                	c.srli	a1,0x3f
   16b04:	95be                	c.add	a1,a5
   16b06:	8585                	c.srai	a1,0x1
   16b08:	c599                	c.beqz	a1,16b16 <register_tm_clones+0x22>
   16b0a:	00000793          	addi	a5,zero,0
   16b0e:	c781                	c.beqz	a5,16b16 <register_tm_clones+0x22>
   16b10:	81018513          	addi	a0,gp,-2032 # 43010 <__TMC_END__>
   16b14:	8782                	c.jr	a5
   16b16:	8082                	c.jr	ra

0000000000016b18 <__do_global_dtors_aux>:
   16b18:	1141                	c.addi	sp,-16
   16b1a:	e022                	c.sdsp	s0,0(sp)
   16b1c:	e611c783          	lbu	a5,-415(gp) # 43661 <completed.0>
   16b20:	e406                	c.sdsp	ra,8(sp)
   16b22:	e791                	c.bnez	a5,16b2e <__do_global_dtors_aux+0x16>
   16b24:	fb7ff0ef          	jal	ra,16ada <deregister_tm_clones>
   16b28:	4785                	c.li	a5,1
   16b2a:	e6f180a3          	sb	a5,-415(gp) # 43661 <completed.0>
   16b2e:	60a2                	c.ldsp	ra,8(sp)
   16b30:	6402                	c.ldsp	s0,0(sp)
   16b32:	0141                	c.addi	sp,16
   16b34:	8082                	c.jr	ra

0000000000016b36 <frame_dummy>:
   16b36:	bf7d                	c.j	16af4 <register_tm_clones>

0000000000016b38 <usage(char const*)>:
#include <inttypes.h>
#include <string>

using namespace std;

void usage(const char *cmd) {
   16b38:	ff010113          	addi	sp,sp,-16
   16b3c:	00113423          	sd	ra,8(sp)
   16b40:	00050613          	addi	a2,a0,0
  fprintf(stderr, "usage: %s elf-file pc\n", cmd);
   16b44:	000375b7          	lui	a1,0x37
   16b48:	4a058593          	addi	a1,a1,1184 # 374a0 <__libc_csu_fini+0x40>
   16b4c:	e581b503          	ld	a0,-424(gp) # 43658 <stderr@GLIBC_2.27>
   16b50:	e31ff0ef          	jal	ra,16980 <fprintf@plt>
  exit(2);
   16b54:	00200513          	addi	a0,zero,2
   16b58:	a69ff0ef          	jal	ra,165c0 <exit@plt>

0000000000016b5c <dump_die(dwarf::die const&)>:
    break;
  }
  return found;
}

void dump_die(const dwarf::die &node) {
   16b5c:	f6010113          	addi	sp,sp,-160
   16b60:	08113c23          	sd	ra,152(sp)
   16b64:	08813823          	sd	s0,144(sp)
   16b68:	08913423          	sd	s1,136(sp)
   16b6c:	09213023          	sd	s2,128(sp)
   16b70:	07313c23          	sd	s3,120(sp)
   16b74:	07413823          	sd	s4,112(sp)
   16b78:	07513423          	sd	s5,104(sp)
   16b7c:	00050413          	addi	s0,a0,0
  printf("<%" PRIx64 "> %s\n", node.get_section_offset(),
   16b80:	704070ef          	jal	ra,1e284 <dwarf::die::get_section_offset() const>
   16b84:	00050493          	addi	s1,a0,0
         to_string(node.tag).c_str());
   16b88:	00042583          	lw	a1,0(s0)
   16b8c:	02810513          	addi	a0,sp,40
   16b90:	2401a0ef          	jal	ra,30dd0 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)>
  printf("<%" PRIx64 "> %s\n", node.get_section_offset(),
   16b94:	02813603          	ld	a2,40(sp)
   16b98:	00048593          	addi	a1,s1,0
   16b9c:	00037537          	lui	a0,0x37
   16ba0:	4b850513          	addi	a0,a0,1208 # 374b8 <__libc_csu_fini+0x58>
   16ba4:	e5dff0ef          	jal	ra,16a00 <printf@plt>
      { _M_string_length = __length; }

      _GLIBCXX20_CONSTEXPR
      pointer
      _M_data() const
      { return _M_dataplus._M_p; }
   16ba8:	02813503          	ld	a0,40(sp)

      _GLIBCXX20_CONSTEXPR
      void
      _M_dispose()
      {
	if (!_M_is_local())
   16bac:	03810793          	addi	a5,sp,56
   16bb0:	00f50463          	beq	a0,a5,16bb8 <dump_die(dwarf::die const&)+0x5c>
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   16bb4:	bedff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
  for (auto &attr : node.attributes())
   16bb8:	00040593          	addi	a1,s0,0
   16bbc:	04810513          	addi	a0,sp,72
   16bc0:	450080ef          	jal	ra,1f010 <dwarf::die::attributes() const>
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   16bc4:	04813403          	ld	s0,72(sp)
   16bc8:	05013903          	ld	s2,80(sp)
   16bcc:	07240263          	beq	s0,s2,16c30 <dump_die(dwarf::die const&)+0xd4>
    printf("      %s %s\n", to_string(attr.first).c_str(),
   16bd0:	00037ab7          	lui	s5,0x37
   16bd4:	03810a13          	addi	s4,sp,56
   16bd8:	01810993          	addi	s3,sp,24
   16bdc:	0440006f          	jal	zero,16c20 <dump_die(dwarf::die const&)+0xc4>
      { return _M_dataplus._M_p; }
   16be0:	00813483          	ld	s1,8(sp)
           to_string(attr.second).c_str());
   16be4:	00840593          	addi	a1,s0,8
   16be8:	02810513          	addi	a0,sp,40
   16bec:	0c80c0ef          	jal	ra,22cb4 <dwarf::to_string[abi:cxx11](dwarf::value const&)>
    printf("      %s %s\n", to_string(attr.first).c_str(),
   16bf0:	02813603          	ld	a2,40(sp)
   16bf4:	00048593          	addi	a1,s1,0
   16bf8:	4c8a8513          	addi	a0,s5,1224 # 374c8 <__libc_csu_fini+0x68>
   16bfc:	e05ff0ef          	jal	ra,16a00 <printf@plt>
   16c00:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   16c04:	01450463          	beq	a0,s4,16c0c <dump_die(dwarf::die const&)+0xb0>
   16c08:	b99ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   16c0c:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   16c10:	01350463          	beq	a0,s3,16c18 <dump_die(dwarf::die const&)+0xbc>
   16c14:	b8dff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
  for (auto &attr : node.attributes())
   16c18:	02040413          	addi	s0,s0,32
   16c1c:	00890a63          	beq	s2,s0,16c30 <dump_die(dwarf::die const&)+0xd4>
    printf("      %s %s\n", to_string(attr.first).c_str(),
   16c20:	00042583          	lw	a1,0(s0)
   16c24:	00810513          	addi	a0,sp,8
   16c28:	1091b0ef          	jal	ra,32530 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
   16c2c:	fb5ff06f          	jal	zero,16be0 <dump_die(dwarf::die const&)+0x84>
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   16c30:	04813503          	ld	a0,72(sp)
	if (__p)
   16c34:	00050463          	beq	a0,zero,16c3c <dump_die(dwarf::die const&)+0xe0>
   16c38:	b69ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
}
   16c3c:	09813083          	ld	ra,152(sp)
   16c40:	09013403          	ld	s0,144(sp)
   16c44:	08813483          	ld	s1,136(sp)
   16c48:	08013903          	ld	s2,128(sp)
   16c4c:	07813983          	ld	s3,120(sp)
   16c50:	07013a03          	ld	s4,112(sp)
   16c54:	06813a83          	ld	s5,104(sp)
   16c58:	0a010113          	addi	sp,sp,160
   16c5c:	00008067          	jalr	zero,0(ra)
      { return _M_dataplus._M_p; }
   16c60:	00050413          	addi	s0,a0,0
   16c64:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   16c68:	03810793          	addi	a5,sp,56
   16c6c:	00f50463          	beq	a0,a5,16c74 <dump_die(dwarf::die const&)+0x118>
   16c70:	b31ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   16c74:	00040513          	addi	a0,s0,0
   16c78:	d19ff0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   16c7c:	00050413          	addi	s0,a0,0
   16c80:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   16c84:	03810793          	addi	a5,sp,56
   16c88:	00f50463          	beq	a0,a5,16c90 <dump_die(dwarf::die const&)+0x134>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   16c8c:	b15ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   16c90:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   16c94:	01810793          	addi	a5,sp,24
   16c98:	00f50463          	beq	a0,a5,16ca0 <dump_die(dwarf::die const&)+0x144>
   16c9c:	b05ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   16ca0:	04813503          	ld	a0,72(sp)
	if (__p)
   16ca4:	00050463          	beq	a0,zero,16cac <dump_die(dwarf::die const&)+0x150>
   16ca8:	af9ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   16cac:	00040513          	addi	a0,s0,0
   16cb0:	ce1ff0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   16cb4:	00050413          	addi	s0,a0,0
   16cb8:	fd9ff06f          	jal	zero,16c90 <dump_die(dwarf::die const&)+0x134>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   16cbc:	00050413          	addi	s0,a0,0
   16cc0:	fe1ff06f          	jal	zero,16ca0 <dump_die(dwarf::die const&)+0x144>

0000000000016cc4 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)>:
bool find_pc(const dwarf::die &d, dwarf::taddr pc, vector<dwarf::die> *stack) {
   16cc4:	ed010113          	addi	sp,sp,-304
   16cc8:	12113423          	sd	ra,296(sp)
   16ccc:	12813023          	sd	s0,288(sp)
   16cd0:	10913c23          	sd	s1,280(sp)
   16cd4:	11213823          	sd	s2,272(sp)
   16cd8:	11313423          	sd	s3,264(sp)
   16cdc:	11413023          	sd	s4,256(sp)
   16ce0:	0f513c23          	sd	s5,248(sp)
   16ce4:	0f613823          	sd	s6,240(sp)
   16ce8:	0f713423          	sd	s7,232(sp)
   16cec:	0f813023          	sd	s8,224(sp)
   16cf0:	00050413          	addi	s0,a0,0
   16cf4:	00058993          	addi	s3,a1,0
   16cf8:	00060913          	addi	s2,a2,0
  for (auto &child : d) {
   16cfc:	00050593          	addi	a1,a0,0
   16d00:	00010513          	addi	a0,sp,0
   16d04:	52d070ef          	jal	ra,1ea30 <dwarf::die::begin() const>
  iterator(const unit *cu, section_offset off);

  die d;
};

inline die::iterator die::end() const { return iterator(); }
   16d08:	06013823          	sd	zero,112(sp)
   16d0c:	06013c23          	sd	zero,120(sp)
   16d10:	08013023          	sd	zero,128(sp)
   16d14:	08013423          	sd	zero,136(sp)
   16d18:	08013823          	sd	zero,144(sp)
   16d1c:	08013c23          	sd	zero,152(sp)
   16d20:	0a013023          	sd	zero,160(sp)
   16d24:	0a013423          	sd	zero,168(sp)
   16d28:	0a013823          	sd	zero,176(sp)
   16d2c:	0a013c23          	sd	zero,184(sp)
   16d30:	0c013c23          	sd	zero,216(sp)
  typedef T value_type;
  typedef value_type &reference;
  typedef const value_type &const_reference;
  typedef size_t size_type;

  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   16d34:	09010793          	addi	a5,sp,144
   16d38:	0cf13023          	sd	a5,192(sp)
   16d3c:	0cf13423          	sd	a5,200(sp)
   16d40:	0c010793          	addi	a5,sp,192
   16d44:	0cf13823          	sd	a5,208(sp)
    if (d.abbrev != o.d.abbrev)
   16d48:	01013783          	ld	a5,16(sp)
   16d4c:	08013703          	ld	a4,128(sp)
   16d50:	02e78463          	beq	a5,a4,16d78 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0xb4>
    if ((found = find_pc(child, pc, stack)))
   16d54:	00090613          	addi	a2,s2,0
   16d58:	00098593          	addi	a1,s3,0
   16d5c:	00010513          	addi	a0,sp,0
   16d60:	f65ff0ef          	jal	ra,16cc4 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)>
   16d64:	00050493          	addi	s1,a0,0
   16d68:	02051c63          	bne	a0,zero,16da0 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0xdc>
  for (auto &child : d) {
   16d6c:	00010513          	addi	a0,sp,0
   16d70:	02c080ef          	jal	ra,1ed9c <dwarf::die::iterator::operator++()>
   16d74:	fd5ff06f          	jal	zero,16d48 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x84>
    if (d.abbrev == nullptr)
   16d78:	02078263          	beq	a5,zero,16d9c <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0xd8>
    return d.next != o.d.next || d.cu != o.d.cu;
   16d7c:	06813703          	ld	a4,104(sp)
   16d80:	0d813783          	ld	a5,216(sp)
   16d84:	fcf718e3          	bne	a4,a5,16d54 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x90>
   16d88:	00813703          	ld	a4,8(sp)
   16d8c:	07813783          	ld	a5,120(sp)
   16d90:	fcf712e3          	bne	a4,a5,16d54 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x90>
   16d94:	00000493          	addi	s1,zero,0
   16d98:	0080006f          	jal	zero,16da0 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0xdc>
   16d9c:	00000493          	addi	s1,zero,0
    end--;
    end->~T();
  }

  void clear() {
    for (T *p = base; p < end; ++p)
   16da0:	0c013503          	ld	a0,192(sp)
   16da4:	0c813783          	ld	a5,200(sp)
   16da8:	00f57a63          	bgeu	a0,a5,16dbc <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0xf8>
   16dac:	00050793          	addi	a5,a0,0
   16db0:	00878793          	addi	a5,a5,8
   16db4:	0c813703          	ld	a4,200(sp)
   16db8:	fee7ece3          	bltu	a5,a4,16db0 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0xec>
      p->~T();
    end = base;
   16dbc:	0ca13423          	sd	a0,200(sp)
    if ((char *)base != buf)
   16dc0:	09010793          	addi	a5,sp,144
   16dc4:	00f50663          	beq	a0,a5,16dd0 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x10c>
      delete[] (char *)base;
   16dc8:	00050463          	beq	a0,zero,16dd0 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x10c>
   16dcc:	a85ff0ef          	jal	ra,16850 <operator delete[](void*)@plt>
    for (T *p = base; p < end; ++p)
   16dd0:	05013503          	ld	a0,80(sp)
   16dd4:	05813783          	ld	a5,88(sp)
   16dd8:	00f57a63          	bgeu	a0,a5,16dec <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x128>
   16ddc:	00050793          	addi	a5,a0,0
   16de0:	00878793          	addi	a5,a5,8
   16de4:	05813703          	ld	a4,88(sp)
   16de8:	fee7ece3          	bltu	a5,a4,16de0 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x11c>
    end = base;
   16dec:	04a13c23          	sd	a0,88(sp)
    if ((char *)base != buf)
   16df0:	02010793          	addi	a5,sp,32
   16df4:	00f50663          	beq	a0,a5,16e00 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x13c>
      delete[] (char *)base;
   16df8:	00050463          	beq	a0,zero,16e00 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x13c>
   16dfc:	a55ff0ef          	jal	ra,16850 <operator delete[](void*)@plt>
  switch (d.tag) {
   16e00:	00042783          	lw	a5,0(s0)
   16e04:	01d00713          	addi	a4,zero,29
   16e08:	04e78063          	beq	a5,a4,16e48 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x184>
   16e0c:	02e00713          	addi	a4,zero,46
   16e10:	02e78c63          	beq	a5,a4,16e48 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x184>
}
   16e14:	00048513          	addi	a0,s1,0
   16e18:	12813083          	ld	ra,296(sp)
   16e1c:	12013403          	ld	s0,288(sp)
   16e20:	11813483          	ld	s1,280(sp)
   16e24:	11013903          	ld	s2,272(sp)
   16e28:	10813983          	ld	s3,264(sp)
   16e2c:	10013a03          	ld	s4,256(sp)
   16e30:	0f813a83          	ld	s5,248(sp)
   16e34:	0f013b03          	ld	s6,240(sp)
   16e38:	0e813b83          	ld	s7,232(sp)
   16e3c:	0e013c03          	ld	s8,224(sp)
   16e40:	13010113          	addi	sp,sp,304
   16e44:	00008067          	jalr	zero,0(ra)
      if (found || die_pc_range(d).contains(pc)) {
   16e48:	08048263          	beq	s1,zero,16ecc <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x208>
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   16e4c:	00893483          	ld	s1,8(s2)
   16e50:	01093783          	ld	a5,16(s2)
   16e54:	1ef48a63          	beq	s1,a5,17048 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x384>
  die(const die &o) = default;
   16e58:	00042783          	lw	a5,0(s0)
   16e5c:	00f4a023          	sw	a5,0(s1)
   16e60:	00843783          	ld	a5,8(s0)
   16e64:	00f4b423          	sd	a5,8(s1)
   16e68:	01043783          	ld	a5,16(s0)
   16e6c:	00f4b823          	sd	a5,16(s1)
   16e70:	01843783          	ld	a5,24(s0)
   16e74:	00f4bc23          	sd	a5,24(s1)
   16e78:	02048b93          	addi	s7,s1,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   16e7c:	0574b823          	sd	s7,80(s1)
   16e80:	0574bc23          	sd	s7,88(s1)
   16e84:	05048793          	addi	a5,s1,80
   16e88:	06f4b023          	sd	a5,96(s1)
  size_type size() const { return end - base; }
   16e8c:	05843a03          	ld	s4,88(s0)
   16e90:	05043703          	ld	a4,80(s0)
   16e94:	40ea0a33          	sub	s4,s4,a4
   16e98:	403a5993          	srai	s3,s4,0x3
    if (n <= (size_type)(cap - base))
   16e9c:	417787b3          	sub	a5,a5,s7
   16ea0:	1347f863          	bgeu	a5,s4,16fd0 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x30c>
   16ea4:	4037d793          	srai	a5,a5,0x3
   16ea8:	00079463          	bne	a5,zero,16eb0 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x1ec>
   16eac:	00100793          	addi	a5,zero,1
    while (target < n)
   16eb0:	0137f663          	bgeu	a5,s3,16ebc <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x1f8>
      target <<= 1;
   16eb4:	00179793          	slli	a5,a5,0x1
    while (target < n)
   16eb8:	ff37eee3          	bltu	a5,s3,16eb4 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x1f0>
    char *newbuf = new char[sizeof(T[target])];
   16ebc:	00379a93          	slli	s5,a5,0x3
   16ec0:	000a8513          	addi	a0,s5,0
   16ec4:	eccff0ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   16ec8:	0c40006f          	jal	zero,16f8c <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x2c8>
   16ecc:	00040593          	addi	a1,s0,0
   16ed0:	07010513          	addi	a0,sp,112
   16ed4:	124170ef          	jal	ra,2dff8 <dwarf::die_pc_range(dwarf::die const&)>
   16ed8:	00098593          	addi	a1,s3,0
   16edc:	07010513          	addi	a0,sp,112
   16ee0:	55d100ef          	jal	ra,27c3c <dwarf::rangelist::contains(unsigned long) const>
   16ee4:	00050993          	addi	s3,a0,0
      explicit
      __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t) noexcept;

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   16ee8:	09013483          	ld	s1,144(sp)
   16eec:	02048063          	beq	s1,zero,16f0c <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x248>

  inline _Atomic_word
  __attribute__ ((__always_inline__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {
    if (__is_single_threaded())
   16ef0:	e601c783          	lbu	a5,-416(gp) # 43660 <__libc_single_threaded@GLIBC_2.32>
   16ef4:	02078863          	beq	a5,zero,16f24 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x260>
    _Atomic_word __result = *__mem;
   16ef8:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   16efc:	fff5079b          	addiw	a5,a0,-1
   16f00:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   16f04:	00100793          	addi	a5,zero,1
   16f08:	02f50663          	beq	a0,a5,16f34 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x270>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   16f0c:	07013503          	ld	a0,112(sp)
	if (__p)
   16f10:	00050463          	beq	a0,zero,16f18 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x254>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   16f14:	88dff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   16f18:	00098493          	addi	s1,s3,0
   16f1c:	ee098ce3          	beq	s3,zero,16e14 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x150>
   16f20:	f2dff06f          	jal	zero,16e4c <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x188>
      return __exchange_and_add_single(__mem, __val);
    else
      return __exchange_and_add(__mem, __val);
   16f24:	fff00593          	addi	a1,zero,-1
   16f28:	03048513          	addi	a0,s1,48
   16f2c:	ec4ff0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16f30:	fd5ff06f          	jal	zero,16f04 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x240>
	_M_dispose();
   16f34:	0004b783          	ld	a5,0(s1)
   16f38:	0107b783          	ld	a5,16(a5)
   16f3c:	00048513          	addi	a0,s1,0
   16f40:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   16f44:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   16f48:	e601c783          	lbu	a5,-416(gp) # 43660 <__libc_single_threaded@GLIBC_2.32>
   16f4c:	02078663          	beq	a5,zero,16f78 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x2b4>
    _Atomic_word __result = *__mem;
   16f50:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   16f54:	fff7871b          	addiw	a4,a5,-1
   16f58:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   16f5c:	00100713          	addi	a4,zero,1
   16f60:	fae796e3          	bne	a5,a4,16f0c <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x248>
	    _M_destroy();
   16f64:	0004b783          	ld	a5,0(s1)
   16f68:	0187b783          	ld	a5,24(a5)
   16f6c:	00048513          	addi	a0,s1,0
   16f70:	000780e7          	jalr	ra,0(a5)
   16f74:	f99ff06f          	jal	zero,16f0c <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x248>
      return __exchange_and_add(__mem, __val);
   16f78:	fff00593          	addi	a1,zero,-1
   16f7c:	03448513          	addi	a0,s1,52
   16f80:	e70ff0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16f84:	00050793          	addi	a5,a0,0
   16f88:	fd5ff06f          	jal	zero,16f5c <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x298>
   16f8c:	00050c13          	addi	s8,a0,0
    T *src = base, *dest = (T *)newbuf;
   16f90:	0504b503          	ld	a0,80(s1)
    for (; src < end; src++, dest++) {
   16f94:	0584b783          	ld	a5,88(s1)
   16f98:	0af57463          	bgeu	a0,a5,17040 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x37c>
    T *src = base, *dest = (T *)newbuf;
   16f9c:	00050793          	addi	a5,a0,0
   16fa0:	000c0b13          	addi	s6,s8,0
    for (; src < end; src++, dest++) {
   16fa4:	00878793          	addi	a5,a5,8
   16fa8:	008b0b13          	addi	s6,s6,8
   16fac:	0584b703          	ld	a4,88(s1)
   16fb0:	fee7eae3          	bltu	a5,a4,16fa4 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x2e0>
    if ((char *)base != buf)
   16fb4:	00ab8663          	beq	s7,a0,16fc0 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x2fc>
      delete[] (char *)base;
   16fb8:	00050463          	beq	a0,zero,16fc0 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x2fc>
   16fbc:	895ff0ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   16fc0:	0584b823          	sd	s8,80(s1)
    end = dest;
   16fc4:	0564bc23          	sd	s6,88(s1)
    cap = base + target;
   16fc8:	015c0533          	add	a0,s8,s5
   16fcc:	06a4b023          	sd	a0,96(s1)
    for (size_type i = 0; i < osize; i++)
   16fd0:	00000793          	addi	a5,zero,0
   16fd4:	02098463          	beq	s3,zero,16ffc <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x338>
   16fd8:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   16fdc:	05043703          	ld	a4,80(s0)
   16fe0:	00d70733          	add	a4,a4,a3
   16fe4:	00073603          	ld	a2,0(a4)
   16fe8:	0504b703          	ld	a4,80(s1)
   16fec:	00d70733          	add	a4,a4,a3
   16ff0:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   16ff4:	00178793          	addi	a5,a5,1
   16ff8:	fef990e3          	bne	s3,a5,16fd8 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x314>
    end = base + osize;
   16ffc:	0504b783          	ld	a5,80(s1)
   17000:	014787b3          	add	a5,a5,s4
   17004:	04f4bc23          	sd	a5,88(s1)
   17008:	06843783          	ld	a5,104(s0)
   1700c:	06f4b423          	sd	a5,104(s1)
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     __x);
	    ++this->_M_impl._M_finish;
   17010:	00893783          	ld	a5,8(s2)
   17014:	07078793          	addi	a5,a5,112
   17018:	00f93423          	sd	a5,8(s2)
        found = true;
   1701c:	00100493          	addi	s1,zero,1
   17020:	df5ff06f          	jal	zero,16e14 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x150>
      if (found || die_pc_range(d).contains(pc)) {
   17024:	00058793          	addi	a5,a1,0
   17028:	00100493          	addi	s1,zero,1
    } catch (out_of_range &e) {
   1702c:	00100713          	addi	a4,zero,1
   17030:	08e78063          	beq	a5,a4,170b0 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x3ec>
   17034:	00200713          	addi	a4,zero,2
   17038:	08e78263          	beq	a5,a4,170bc <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x3f8>
   1703c:	955ff0ef          	jal	ra,16990 <_Unwind_Resume@plt>
    T *src = base, *dest = (T *)newbuf;
   17040:	000c0b13          	addi	s6,s8,0
   17044:	f71ff06f          	jal	zero,16fb4 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x2f0>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
   17048:	00040613          	addi	a2,s0,0
   1704c:	00048593          	addi	a1,s1,0
   17050:	00090513          	addi	a0,s2,0
   17054:	59d000ef          	jal	ra,17df0 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)>
   17058:	0100006f          	jal	zero,17068 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x3a4>
      if (found || die_pc_range(d).contains(pc)) {
   1705c:	00058793          	addi	a5,a1,0
   17060:	00100493          	addi	s1,zero,1
   17064:	fc9ff06f          	jal	zero,1702c <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x368>
        found = true;
   17068:	00100493          	addi	s1,zero,1
   1706c:	da9ff06f          	jal	zero,16e14 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x150>
class die {
   17070:	00050413          	addi	s0,a0,0
   17074:	09010513          	addi	a0,sp,144
   17078:	2d9000ef          	jal	ra,17b50 <dwarf::small_vector<unsigned long, 6u>::~small_vector()>
   1707c:	02010513          	addi	a0,sp,32
   17080:	2d1000ef          	jal	ra,17b50 <dwarf::small_vector<unsigned long, 6u>::~small_vector()>
   17084:	00040513          	addi	a0,s0,0
   17088:	909ff0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      if (found || die_pc_range(d).contains(pc)) {
   1708c:	00050913          	addi	s2,a0,0
   17090:	00058413          	addi	s0,a1,0
   17094:	07010513          	addi	a0,sp,112
   17098:	1fd000ef          	jal	ra,17a94 <dwarf::rangelist::~rangelist()>
   1709c:	00090513          	addi	a0,s2,0
   170a0:	00040793          	addi	a5,s0,0
   170a4:	f89ff06f          	jal	zero,1702c <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x368>
    } catch (out_of_range &e) {
   170a8:	00058793          	addi	a5,a1,0
   170ac:	f81ff06f          	jal	zero,1702c <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x368>
   170b0:	dc0ff0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
    } catch (value_type_mismatch &e) {
   170b4:	87dff0ef          	jal	ra,16930 <__cxa_end_catch@plt>
   170b8:	d5dff06f          	jal	zero,16e14 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x150>
   170bc:	db4ff0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
    }
   170c0:	871ff0ef          	jal	ra,16930 <__cxa_end_catch@plt>
  return found;
   170c4:	d51ff06f          	jal	zero,16e14 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)+0x150>

00000000000170c8 <main>:

int main(int argc, char **argv) {
   170c8:	e6010113          	addi	sp,sp,-416
   170cc:	18113c23          	sd	ra,408(sp)
   170d0:	18813823          	sd	s0,400(sp)
   170d4:	18913423          	sd	s1,392(sp)
   170d8:	19213023          	sd	s2,384(sp)
   170dc:	17313c23          	sd	s3,376(sp)
   170e0:	17413823          	sd	s4,368(sp)
   170e4:	17513423          	sd	s5,360(sp)
   170e8:	17613023          	sd	s6,352(sp)
   170ec:	15713c23          	sd	s7,344(sp)
   170f0:	00058493          	addi	s1,a1,0
  if (argc != 3)
   170f4:	00300793          	addi	a5,zero,3
   170f8:	00f51c63          	bne	a0,a5,17110 <main+0x48>
    usage(argv[0]);

  dwarf::taddr pc;
  try {
    pc = stoll(argv[2], nullptr, 0);
   170fc:	12810613          	addi	a2,sp,296
   17100:	0105b583          	ld	a1,16(a1)
   17104:	08810513          	addi	a0,sp,136
   17108:	f78ff0ef          	jal	ra,16880 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
   1710c:	00c0006f          	jal	zero,17118 <main+0x50>
    usage(argv[0]);
   17110:	0005b503          	ld	a0,0(a1)
   17114:	a25ff0ef          	jal	ra,16b38 <usage(char const*)>
   17118:	08813903          	ld	s2,136(sp)
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
   1711c:	945ff0ef          	jal	ra,16a60 <__errno_location@plt>
   17120:	00050413          	addi	s0,a0,0
   17124:	00052a03          	lw	s4,0(a0)
   17128:	00052023          	sw	zero,0(a0)
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   1712c:	00000613          	addi	a2,zero,0
   17130:	00810593          	addi	a1,sp,8
   17134:	00090513          	addi	a0,s2,0
   17138:	dd8ff0ef          	jal	ra,16710 <strtoll@plt>
   1713c:	00050993          	addi	s3,a0,0

      if (__endptr == __str)
   17140:	00813783          	ld	a5,8(sp)
   17144:	04f90a63          	beq	s2,a5,17198 <main+0xd0>
	std::__throw_invalid_argument(__name);
      else if (errno == ERANGE
   17148:	00042783          	lw	a5,0(s0)
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
   1714c:	02200713          	addi	a4,zero,34
   17150:	08e78a63          	beq	a5,a4,171e4 <main+0x11c>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   17154:	00079463          	bne	a5,zero,1715c <main+0x94>
   17158:	01442023          	sw	s4,0(s0)
   1715c:	08813503          	ld	a0,136(sp)
	if (!_M_is_local())
   17160:	09810793          	addi	a5,sp,152
   17164:	00f50463          	beq	a0,a5,1716c <main+0xa4>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   17168:	e38ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
    usage(argv[0]);
  } catch (out_of_range &e) {
    usage(argv[0]);
  }

  int fd = open(argv[1], O_RDONLY);
   1716c:	00000593          	addi	a1,zero,0
   17170:	0084b503          	ld	a0,8(s1)
   17174:	d6cff0ef          	jal	ra,166e0 <open@plt>
   17178:	00050593          	addi	a1,a0,0
  if (fd < 0) {
   1717c:	06054a63          	blt	a0,zero,171f0 <main+0x128>
    fprintf(stderr, "%s: %s\n", argv[1], strerror(errno));
    return 1;
  }

  elf::elf ef(elf::create_mmap_loader(fd));
   17180:	13010513          	addi	a0,sp,304
   17184:	5191f0ef          	jal	ra,36e9c <elf::create_mmap_loader(int)>
   17188:	13010593          	addi	a1,sp,304
   1718c:	11810513          	addi	a0,sp,280
   17190:	5b11d0ef          	jal	ra,34f40 <elf::elf::elf(std::shared_ptr<elf::loader> const&)>
   17194:	08c0006f          	jal	zero,17220 <main+0x158>
	std::__throw_invalid_argument(__name);
   17198:	00037537          	lui	a0,0x37
   1719c:	4d850513          	addi	a0,a0,1240 # 374d8 <__libc_csu_fini+0x78>
   171a0:	d50ff0ef          	jal	ra,166f0 <std::__throw_invalid_argument(char const*)@plt>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   171a4:	00050993          	addi	s3,a0,0
   171a8:	00058913          	addi	s2,a1,0
   171ac:	00042783          	lw	a5,0(s0)
   171b0:	00079463          	bne	a5,zero,171b8 <main+0xf0>
   171b4:	01442023          	sw	s4,0(s0)
      { return _M_dataplus._M_p; }
   171b8:	08813503          	ld	a0,136(sp)
	if (!_M_is_local())
   171bc:	09810793          	addi	a5,sp,152
   171c0:	00f50463          	beq	a0,a5,171c8 <main+0x100>
   171c4:	ddcff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   171c8:	00098513          	addi	a0,s3,0
   171cc:	00090793          	addi	a5,s2,0
  } catch (invalid_argument &e) {
   171d0:	00100713          	addi	a4,zero,1
   171d4:	30e78c63          	beq	a5,a4,174ec <main+0x424>
   171d8:	00200713          	addi	a4,zero,2
   171dc:	32e78663          	beq	a5,a4,17508 <main+0x440>
   171e0:	fb0ff0ef          	jal	ra,16990 <_Unwind_Resume@plt>
	std::__throw_out_of_range(__name);
   171e4:	00037537          	lui	a0,0x37
   171e8:	4d850513          	addi	a0,a0,1240 # 374d8 <__libc_csu_fini+0x78>
   171ec:	ec4ff0ef          	jal	ra,168b0 <std::__throw_out_of_range(char const*)@plt>
    fprintf(stderr, "%s: %s\n", argv[1], strerror(errno));
   171f0:	e581b903          	ld	s2,-424(gp) # 43658 <stderr@GLIBC_2.27>
   171f4:	0084b483          	ld	s1,8(s1)
   171f8:	00042503          	lw	a0,0(s0)
   171fc:	e24ff0ef          	jal	ra,16820 <strerror@plt>
   17200:	00050693          	addi	a3,a0,0
   17204:	00048613          	addi	a2,s1,0
   17208:	000375b7          	lui	a1,0x37
   1720c:	4e058593          	addi	a1,a1,1248 # 374e0 <__libc_csu_fini+0x80>
   17210:	00090513          	addi	a0,s2,0
   17214:	f6cff0ef          	jal	ra,16980 <fprintf@plt>
    return 1;
   17218:	00100513          	addi	a0,zero,1
   1721c:	29c0006f          	jal	zero,174b8 <main+0x3f0>
	if (_M_pi != nullptr)
   17220:	13813503          	ld	a0,312(sp)
   17224:	00050463          	beq	a0,zero,1722c <main+0x164>
	  _M_pi->_M_release();
   17228:	5c0000ef          	jal	ra,177e8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1722c:	05000513          	addi	a0,zero,80
   17230:	d80ff0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   17234:	00050413          	addi	s0,a0,0
    __mutex(const __mutex&);
    __mutex& operator=(const __mutex&);

  public:
    __mutex() 
    { 
   17238:	00052423          	sw	zero,8(a0)
   1723c:	00052623          	sw	zero,12(a0)
   17240:	00052823          	sw	zero,16(a0)
   17244:	00052a23          	sw	zero,20(a0)
   17248:	00052c23          	sw	zero,24(a0)
   1724c:	00052e23          	sw	zero,28(a0)
   17250:	02053023          	sd	zero,32(a0)
   17254:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   17258:	00100793          	addi	a5,zero,1
   1725c:	02f52823          	sw	a5,48(a0)
   17260:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   17264:	000377b7          	lui	a5,0x37
   17268:	75878793          	addi	a5,a5,1880 # 37758 <vtable for std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10>
   1726c:	00f53023          	sd	a5,0(a0)
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   17270:	03850493          	addi	s1,a0,56

template <typename Elf> class elf_loader : public loader {
  Elf f;

public:
  elf_loader(const Elf &file) : f(file) {}
   17274:	000377b7          	lui	a5,0x37
   17278:	73078793          	addi	a5,a5,1840 # 37730 <vtable for dwarf::elf::elf_loader<elf::elf>+0x10>
   1727c:	02f53c23          	sd	a5,56(a0)
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   17280:	11813783          	ld	a5,280(sp)
   17284:	04f53023          	sd	a5,64(a0)
      : _M_pi(__r._M_pi)
   17288:	12013503          	ld	a0,288(sp)
   1728c:	04a43423          	sd	a0,72(s0)
	if (_M_pi != nullptr)
   17290:	00050c63          	beq	a0,zero,172a8 <main+0x1e0>

  inline void
  __attribute__ ((__always_inline__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {
    if (__is_single_threaded())
   17294:	e601c783          	lbu	a5,-416(gp) # 43660 <__libc_single_threaded@GLIBC_2.32>
   17298:	02078463          	beq	a5,zero,172c0 <main+0x1f8>
  { *__mem += __val; }
   1729c:	03052783          	lw	a5,48(a0)
   172a0:	0017879b          	addiw	a5,a5,1
   172a4:	02f52823          	sw	a5,48(a0)
	__r._M_ptr = nullptr;
      }

      template<typename _Yp, typename = _Compatible<_Yp>>
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount()
   172a8:	14913023          	sd	s1,320(sp)
	_M_pi = __tmp;
   172ac:	14813423          	sd	s0,328(sp)
  dwarf::dwarf dw(dwarf::elf::create_loader(ef));
   172b0:	14010593          	addi	a1,sp,320
   172b4:	10810513          	addi	a0,sp,264
   172b8:	5b5010ef          	jal	ra,1906c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)>
   172bc:	0140006f          	jal	zero,172d0 <main+0x208>
      __atomic_add_single(__mem, __val);
    else
      __atomic_add(__mem, __val);
   172c0:	00100593          	addi	a1,zero,1
   172c4:	03050513          	addi	a0,a0,48
   172c8:	ae8ff0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   172cc:	fddff06f          	jal	zero,172a8 <main+0x1e0>
	if (_M_pi != nullptr)
   172d0:	14813503          	ld	a0,328(sp)
   172d4:	00050463          	beq	a0,zero,172dc <main+0x214>
	  _M_pi->_M_release();
   172d8:	510000ef          	jal	ra,177e8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>

  // Find the CU containing pc
  // XXX Use .debug_aranges
  for (auto &cu : dw.compilation_units()) {
   172dc:	10810513          	addi	a0,sp,264
   172e0:	6d1000ef          	jal	ra,181b0 <dwarf::dwarf::compilation_units() const>
   172e4:	00053403          	ld	s0,0(a0)
   172e8:	00853a03          	ld	s4,8(a0)
   172ec:	1b440a63          	beq	s0,s4,174a0 <main+0x3d8>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   172f0:	00100b93          	addi	s7,zero,1
   172f4:	0580006f          	jal	zero,1734c <main+0x284>
    if (die_pc_range(cu.root()).contains(pc)) {
   172f8:	00050593          	addi	a1,a0,0
   172fc:	08810513          	addi	a0,sp,136
   17300:	4f9160ef          	jal	ra,2dff8 <dwarf::die_pc_range(dwarf::die const&)>
   17304:	00098593          	addi	a1,s3,0
   17308:	08810513          	addi	a0,sp,136
   1730c:	131100ef          	jal	ra,27c3c <dwarf::rangelist::contains(unsigned long) const>
   17310:	00050493          	addi	s1,a0,0
	if (_M_pi != nullptr)
   17314:	0a813903          	ld	s2,168(sp)
   17318:	00090e63          	beq	s2,zero,17334 <main+0x26c>
    if (__is_single_threaded())
   1731c:	e601c783          	lbu	a5,-416(gp) # 43660 <__libc_single_threaded@GLIBC_2.32>
   17320:	02078e63          	beq	a5,zero,1735c <main+0x294>
    _Atomic_word __result = *__mem;
   17324:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   17328:	fff5079b          	addiw	a5,a0,-1
   1732c:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17330:	03750e63          	beq	a0,s7,1736c <main+0x2a4>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   17334:	08813503          	ld	a0,136(sp)
	if (__p)
   17338:	00050463          	beq	a0,zero,17340 <main+0x278>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1733c:	c64ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   17340:	06049e63          	bne	s1,zero,173bc <main+0x2f4>
  for (auto &cu : dw.compilation_units()) {
   17344:	01840413          	addi	s0,s0,24
   17348:	148a0c63          	beq	s4,s0,174a0 <main+0x3d8>
   1734c:	00040a93          	addi	s5,s0,0
    if (die_pc_range(cu.root()).contains(pc)) {
   17350:	00040513          	addi	a0,s0,0
   17354:	349030ef          	jal	ra,1ae9c <dwarf::unit::root() const>
   17358:	fa1ff06f          	jal	zero,172f8 <main+0x230>
      return __exchange_and_add(__mem, __val);
   1735c:	fff00593          	addi	a1,zero,-1
   17360:	03090513          	addi	a0,s2,48
   17364:	a8cff0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17368:	fc9ff06f          	jal	zero,17330 <main+0x268>
	_M_dispose();
   1736c:	00093783          	ld	a5,0(s2)
   17370:	0107b783          	ld	a5,16(a5)
   17374:	00090513          	addi	a0,s2,0
   17378:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1737c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17380:	e601c783          	lbu	a5,-416(gp) # 43660 <__libc_single_threaded@GLIBC_2.32>
   17384:	02078463          	beq	a5,zero,173ac <main+0x2e4>
    _Atomic_word __result = *__mem;
   17388:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   1738c:	fff5079b          	addiw	a5,a0,-1
   17390:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17394:	fb7510e3          	bne	a0,s7,17334 <main+0x26c>
	    _M_destroy();
   17398:	00093783          	ld	a5,0(s2)
   1739c:	0187b783          	ld	a5,24(a5)
   173a0:	00090513          	addi	a0,s2,0
   173a4:	000780e7          	jalr	ra,0(a5)
   173a8:	f8dff06f          	jal	zero,17334 <main+0x26c>
      return __exchange_and_add(__mem, __val);
   173ac:	fff00593          	addi	a1,zero,-1
   173b0:	03490513          	addi	a0,s2,52
   173b4:	a3cff0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   173b8:	fddff06f          	jal	zero,17394 <main+0x2cc>
      // Map PC to a line
      auto &lt = cu.get_line_table();
   173bc:	000a8513          	addi	a0,s5,0
   173c0:	4c5030ef          	jal	ra,1b084 <dwarf::compilation_unit::get_line_table() const>
   173c4:	00050413          	addi	s0,a0,0
      auto it = lt.find_address(pc);
   173c8:	00098613          	addi	a2,s3,0
   173cc:	00050593          	addi	a1,a0,0
   173d0:	00810513          	addi	a0,sp,8
   173d4:	7a4130ef          	jal	ra,2ab78 <dwarf::line_table::find_address(unsigned long) const>
      if (it == lt.end())
   173d8:	00040593          	addi	a1,s0,0
   173dc:	08810513          	addi	a0,sp,136
   173e0:	748130ef          	jal	ra,2ab28 <dwarf::line_table::end() const>
    return o.pos == pos && o.table == table;
   173e4:	08013703          	ld	a4,128(sp)
   173e8:	10013783          	ld	a5,256(sp)
   173ec:	00f70a63          	beq	a4,a5,17400 <main+0x338>
        printf("UNKNOWN\n");
      else
        printf("%s\n", it->get_description().c_str());
   173f0:	01010593          	addi	a1,sp,16
   173f4:	08810513          	addi	a0,sp,136
   173f8:	1c4110ef          	jal	ra,285bc <dwarf::line_table::entry::get_description[abi:cxx11]() const>
   173fc:	0200006f          	jal	zero,1741c <main+0x354>
   17400:	08813703          	ld	a4,136(sp)
   17404:	00813783          	ld	a5,8(sp)
   17408:	fef714e3          	bne	a4,a5,173f0 <main+0x328>
        printf("UNKNOWN\n");
   1740c:	00037537          	lui	a0,0x37
   17410:	4e850513          	addi	a0,a0,1256 # 374e8 <__libc_csu_fini+0x88>
   17414:	b4cff0ef          	jal	ra,16760 <puts@plt>
   17418:	01c0006f          	jal	zero,17434 <main+0x36c>
        printf("%s\n", it->get_description().c_str());
   1741c:	08813503          	ld	a0,136(sp)
   17420:	b40ff0ef          	jal	ra,16760 <puts@plt>
      { return _M_dataplus._M_p; }
   17424:	08813503          	ld	a0,136(sp)
	if (!_M_is_local())
   17428:	09810793          	addi	a5,sp,152
   1742c:	00f50463          	beq	a0,a5,17434 <main+0x36c>
   17430:	b70ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	: _M_start(), _M_finish(), _M_end_of_storage()
   17434:	08013423          	sd	zero,136(sp)
   17438:	08013823          	sd	zero,144(sp)
   1743c:	08013c23          	sd	zero,152(sp)

      // Map PC to an object
      // XXX Index/helper/something for looking up PCs
      // XXX DW_AT_specification and DW_AT_abstract_origin
      vector<dwarf::die> stack;
      if (find_pc(cu.root(), pc, &stack)) {
   17440:	000a8513          	addi	a0,s5,0
   17444:	259030ef          	jal	ra,1ae9c <dwarf::unit::root() const>
   17448:	08810613          	addi	a2,sp,136
   1744c:	00098593          	addi	a1,s3,0
   17450:	875ff0ef          	jal	ra,16cc4 <find_pc(dwarf::die const&, unsigned long, std::vector<dwarf::die, std::allocator<dwarf::die> >*)>
   17454:	04050263          	beq	a0,zero,17498 <main+0x3d0>
   17458:	08813403          	ld	s0,136(sp)
   1745c:	09013903          	ld	s2,144(sp)
        bool first = true;
        for (auto &d : stack) {
   17460:	02890c63          	beq	s2,s0,17498 <main+0x3d0>
          if (!first)
            printf("\nInlined in:\n");
   17464:	00037a37          	lui	s4,0x37
          first = false;
   17468:	00000993          	addi	s3,zero,0
   1746c:	0180006f          	jal	zero,17484 <main+0x3bc>
          dump_die(d);
   17470:	00048513          	addi	a0,s1,0
   17474:	ee8ff0ef          	jal	ra,16b5c <dump_die(dwarf::die const&)>
        for (auto &d : stack) {
   17478:	07040413          	addi	s0,s0,112
          first = false;
   1747c:	00098513          	addi	a0,s3,0
        for (auto &d : stack) {
   17480:	00890c63          	beq	s2,s0,17498 <main+0x3d0>
   17484:	00040493          	addi	s1,s0,0
          if (!first)
   17488:	fe0514e3          	bne	a0,zero,17470 <main+0x3a8>
            printf("\nInlined in:\n");
   1748c:	4f0a0513          	addi	a0,s4,1264 # 374f0 <__libc_csu_fini+0x90>
   17490:	ad0ff0ef          	jal	ra,16760 <puts@plt>
   17494:	fddff06f          	jal	zero,17470 <main+0x3a8>
        }
      }
      break;
    }
   17498:	08810513          	addi	a0,sp,136
   1749c:	6fc000ef          	jal	ra,17b98 <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()>
  }

  return 0;
}
   174a0:	10810513          	addi	a0,sp,264
   174a4:	459000ef          	jal	ra,180fc <dwarf::dwarf::~dwarf()>
	if (_M_pi != nullptr)
   174a8:	12013503          	ld	a0,288(sp)
   174ac:	00050463          	beq	a0,zero,174b4 <main+0x3ec>
	  _M_pi->_M_release();
   174b0:	338000ef          	jal	ra,177e8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
  return 0;
   174b4:	00000513          	addi	a0,zero,0
}
   174b8:	19813083          	ld	ra,408(sp)
   174bc:	19013403          	ld	s0,400(sp)
   174c0:	18813483          	ld	s1,392(sp)
   174c4:	18013903          	ld	s2,384(sp)
   174c8:	17813983          	ld	s3,376(sp)
   174cc:	17013a03          	ld	s4,368(sp)
   174d0:	16813a83          	ld	s5,360(sp)
   174d4:	16013b03          	ld	s6,352(sp)
   174d8:	15813b83          	ld	s7,344(sp)
   174dc:	1a010113          	addi	sp,sp,416
   174e0:	00008067          	jalr	zero,0(ra)
  } catch (invalid_argument &e) {
   174e4:	00058793          	addi	a5,a1,0
   174e8:	ce9ff06f          	jal	zero,171d0 <main+0x108>
   174ec:	984ff0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
    usage(argv[0]);
   174f0:	0004b503          	ld	a0,0(s1)
   174f4:	e44ff0ef          	jal	ra,16b38 <usage(char const*)>
  } catch (out_of_range &e) {
   174f8:	00050413          	addi	s0,a0,0
   174fc:	c34ff0ef          	jal	ra,16930 <__cxa_end_catch@plt>
   17500:	00040513          	addi	a0,s0,0
   17504:	c8cff0ef          	jal	ra,16990 <_Unwind_Resume@plt>
   17508:	968ff0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
    usage(argv[0]);
   1750c:	0004b503          	ld	a0,0(s1)
   17510:	e28ff0ef          	jal	ra,16b38 <usage(char const*)>
  }
   17514:	00050413          	addi	s0,a0,0
   17518:	c18ff0ef          	jal	ra,16930 <__cxa_end_catch@plt>
   1751c:	00040513          	addi	a0,s0,0
   17520:	c70ff0ef          	jal	ra,16990 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   17524:	00050413          	addi	s0,a0,0
   17528:	13813503          	ld	a0,312(sp)
   1752c:	00050463          	beq	a0,zero,17534 <main+0x46c>
	  _M_pi->_M_release();
   17530:	2b8000ef          	jal	ra,177e8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
   17534:	00040513          	addi	a0,s0,0
   17538:	c58ff0ef          	jal	ra,16990 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   1753c:	00050413          	addi	s0,a0,0
   17540:	14813503          	ld	a0,328(sp)
   17544:	00050463          	beq	a0,zero,1754c <main+0x484>
	  _M_pi->_M_release();
   17548:	2a0000ef          	jal	ra,177e8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
	if (_M_pi != nullptr)
   1754c:	12013503          	ld	a0,288(sp)
   17550:	00050463          	beq	a0,zero,17558 <main+0x490>
	  _M_pi->_M_release();
   17554:	294000ef          	jal	ra,177e8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
   17558:	00040513          	addi	a0,s0,0
   1755c:	c34ff0ef          	jal	ra,16990 <_Unwind_Resume@plt>
    if (die_pc_range(cu.root()).contains(pc)) {
   17560:	00050413          	addi	s0,a0,0
   17564:	08810513          	addi	a0,sp,136
   17568:	52c000ef          	jal	ra,17a94 <dwarf::rangelist::~rangelist()>
}
   1756c:	10810513          	addi	a0,sp,264
   17570:	38d000ef          	jal	ra,180fc <dwarf::dwarf::~dwarf()>
   17574:	fd9ff06f          	jal	zero,1754c <main+0x484>
      { return _M_dataplus._M_p; }
   17578:	00050413          	addi	s0,a0,0
   1757c:	08813503          	ld	a0,136(sp)
	if (!_M_is_local())
   17580:	09810793          	addi	a5,sp,152
   17584:	fef504e3          	beq	a0,a5,1756c <main+0x4a4>
   17588:	a18ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }

      _GLIBCXX20_CONSTEXPR
      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1758c:	fe1ff06f          	jal	zero,1756c <main+0x4a4>
    }
   17590:	00050413          	addi	s0,a0,0
   17594:	08810513          	addi	a0,sp,136
   17598:	600000ef          	jal	ra,17b98 <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()>
   1759c:	fd1ff06f          	jal	zero,1756c <main+0x4a4>
}
   175a0:	00050413          	addi	s0,a0,0
   175a4:	fc9ff06f          	jal	zero,1756c <main+0x4a4>
	if (_M_pi != nullptr)
   175a8:	00050413          	addi	s0,a0,0
   175ac:	fa1ff06f          	jal	zero,1754c <main+0x484>

00000000000175b0 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   175b0:	00008067          	jalr	zero,0(ra)

00000000000175b4 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   175b4:	ff010113          	addi	sp,sp,-16
   175b8:	00113423          	sd	ra,8(sp)
    _Destroy(_Tp* __pointer)
    {
#if __cplusplus > 201703L
      std::destroy_at(__pointer);
#else
      __pointer->~_Tp();
   175bc:	03853783          	ld	a5,56(a0)
   175c0:	0007b783          	ld	a5,0(a5)
   175c4:	03850513          	addi	a0,a0,56
   175c8:	000780e7          	jalr	ra,0(a5)
      }
   175cc:	00813083          	ld	ra,8(sp)
   175d0:	01010113          	addi	sp,sp,16
   175d4:	00008067          	jalr	zero,0(ra)

00000000000175d8 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   175d8:	ff010113          	addi	sp,sp,-16
   175dc:	00113423          	sd	ra,8(sp)
   175e0:	9c0ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   175e4:	00813083          	ld	ra,8(sp)
   175e8:	01010113          	addi	sp,sp,16
   175ec:	00008067          	jalr	zero,0(ra)

00000000000175f0 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   175f0:	ff010113          	addi	sp,sp,-16
   175f4:	00113423          	sd	ra,8(sp)
   175f8:	9a8ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   175fc:	00813083          	ld	ra,8(sp)
   17600:	01010113          	addi	sp,sp,16
   17604:	00008067          	jalr	zero,0(ra)

0000000000017608 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   17608:	ff010113          	addi	sp,sp,-16
   1760c:	00113423          	sd	ra,8(sp)
   17610:	00813023          	sd	s0,0(sp)
   17614:	03850413          	addi	s0,a0,56
	    ||
   17618:	000377b7          	lui	a5,0x37
   1761c:	78078793          	addi	a5,a5,1920 # 37780 <std::_Sp_make_shared_tag::_S_ti()::__tag>
   17620:	02f58c63          	beq	a1,a5,17658 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
  type_info::operator==(const type_info& __arg) const _GLIBCXX_NOEXCEPT
  {
    if (std::__is_constant_evaluated())
      return this == &__arg;

    if (__name == __arg.__name)
   17624:	0085b503          	ld	a0,8(a1)
   17628:	000377b7          	lui	a5,0x37
   1762c:	59078793          	addi	a5,a5,1424 # 37590 <typeinfo name for std::_Sp_make_shared_tag>
   17630:	02f50463          	beq	a0,a5,17658 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
#if !__GXX_TYPEINFO_EQUALITY_INLINE
    // ABI requires comparisons to be non-inline.
    return __equal(__arg);
#elif !__GXX_MERGED_TYPEINFO_NAMES
    // Need to do string comparison.
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   17634:	00054703          	lbu	a4,0(a0)
   17638:	02a00793          	addi	a5,zero,42
   1763c:	02f70863          	beq	a4,a5,1766c <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   17640:	000375b7          	lui	a1,0x37
   17644:	59058593          	addi	a1,a1,1424 # 37590 <typeinfo name for std::_Sp_make_shared_tag>
   17648:	f89fe0ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   1764c:	00153513          	sltiu	a0,a0,1
   17650:	40a00533          	sub	a0,zero,a0
   17654:	00a47433          	and	s0,s0,a0
      }
   17658:	00040513          	addi	a0,s0,0
   1765c:	00813083          	ld	ra,8(sp)
   17660:	00013403          	ld	s0,0(sp)
   17664:	01010113          	addi	sp,sp,16
   17668:	00008067          	jalr	zero,0(ra)
	return nullptr;
   1766c:	00000413          	addi	s0,zero,0
   17670:	fe9ff06f          	jal	zero,17658 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

0000000000017674 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()>:
template <typename Elf> class elf_loader : public loader {
   17674:	ff010113          	addi	sp,sp,-16
   17678:	00113423          	sd	ra,8(sp)
   1767c:	00813023          	sd	s0,0(sp)
   17680:	000377b7          	lui	a5,0x37
   17684:	73078793          	addi	a5,a5,1840 # 37730 <vtable for dwarf::elf::elf_loader<elf::elf>+0x10>
   17688:	00f53023          	sd	a5,0(a0)
	if (_M_pi != nullptr)
   1768c:	01053403          	ld	s0,16(a0)
   17690:	02040063          	beq	s0,zero,176b0 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x3c>
    if (__is_single_threaded())
   17694:	e601c783          	lbu	a5,-416(gp) # 43660 <__libc_single_threaded@GLIBC_2.32>
   17698:	02078463          	beq	a5,zero,176c0 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x4c>
    _Atomic_word __result = *__mem;
   1769c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   176a0:	fff5079b          	addiw	a5,a0,-1
   176a4:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   176a8:	00100793          	addi	a5,zero,1
   176ac:	02f50263          	beq	a0,a5,176d0 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x5c>
   176b0:	00813083          	ld	ra,8(sp)
   176b4:	00013403          	ld	s0,0(sp)
   176b8:	01010113          	addi	sp,sp,16
   176bc:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   176c0:	fff00593          	addi	a1,zero,-1
   176c4:	03040513          	addi	a0,s0,48
   176c8:	f29fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   176cc:	fddff06f          	jal	zero,176a8 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x34>
	_M_dispose();
   176d0:	00043783          	ld	a5,0(s0)
   176d4:	0107b783          	ld	a5,16(a5)
   176d8:	00040513          	addi	a0,s0,0
   176dc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   176e0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   176e4:	e601c783          	lbu	a5,-416(gp) # 43660 <__libc_single_threaded@GLIBC_2.32>
   176e8:	02078663          	beq	a5,zero,17714 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0xa0>
    _Atomic_word __result = *__mem;
   176ec:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   176f0:	fff5079b          	addiw	a5,a0,-1
   176f4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   176f8:	00100793          	addi	a5,zero,1
   176fc:	faf51ae3          	bne	a0,a5,176b0 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x3c>
	    _M_destroy();
   17700:	00043783          	ld	a5,0(s0)
   17704:	0187b783          	ld	a5,24(a5)
   17708:	00040513          	addi	a0,s0,0
   1770c:	000780e7          	jalr	ra,0(a5)
   17710:	fa1ff06f          	jal	zero,176b0 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x3c>
      return __exchange_and_add(__mem, __val);
   17714:	fff00593          	addi	a1,zero,-1
   17718:	03440513          	addi	a0,s0,52
   1771c:	ed5fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17720:	fd9ff06f          	jal	zero,176f8 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x84>

0000000000017724 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()>:
   17724:	fe010113          	addi	sp,sp,-32
   17728:	00113c23          	sd	ra,24(sp)
   1772c:	00813823          	sd	s0,16(sp)
   17730:	00913423          	sd	s1,8(sp)
   17734:	00050413          	addi	s0,a0,0
   17738:	000377b7          	lui	a5,0x37
   1773c:	73078793          	addi	a5,a5,1840 # 37730 <vtable for dwarf::elf::elf_loader<elf::elf>+0x10>
   17740:	00f53023          	sd	a5,0(a0)
	if (_M_pi != nullptr)
   17744:	01053483          	ld	s1,16(a0)
   17748:	02048063          	beq	s1,zero,17768 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x44>
    if (__is_single_threaded())
   1774c:	e601c783          	lbu	a5,-416(gp) # 43660 <__libc_single_threaded@GLIBC_2.32>
   17750:	02078a63          	beq	a5,zero,17784 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x60>
    _Atomic_word __result = *__mem;
   17754:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   17758:	fff5079b          	addiw	a5,a0,-1
   1775c:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17760:	00100793          	addi	a5,zero,1
   17764:	02f50863          	beq	a0,a5,17794 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x70>
   17768:	00040513          	addi	a0,s0,0
   1776c:	834ff0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   17770:	01813083          	ld	ra,24(sp)
   17774:	01013403          	ld	s0,16(sp)
   17778:	00813483          	ld	s1,8(sp)
   1777c:	02010113          	addi	sp,sp,32
   17780:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   17784:	fff00593          	addi	a1,zero,-1
   17788:	03048513          	addi	a0,s1,48
   1778c:	e65fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17790:	fd1ff06f          	jal	zero,17760 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x3c>
	_M_dispose();
   17794:	0004b783          	ld	a5,0(s1)
   17798:	0107b783          	ld	a5,16(a5)
   1779c:	00048513          	addi	a0,s1,0
   177a0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   177a4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   177a8:	e601c783          	lbu	a5,-416(gp) # 43660 <__libc_single_threaded@GLIBC_2.32>
   177ac:	02078663          	beq	a5,zero,177d8 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0xb4>
    _Atomic_word __result = *__mem;
   177b0:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   177b4:	fff5079b          	addiw	a5,a0,-1
   177b8:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   177bc:	00100793          	addi	a5,zero,1
   177c0:	faf514e3          	bne	a0,a5,17768 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x44>
	    _M_destroy();
   177c4:	0004b783          	ld	a5,0(s1)
   177c8:	0187b783          	ld	a5,24(a5)
   177cc:	00048513          	addi	a0,s1,0
   177d0:	000780e7          	jalr	ra,0(a5)
   177d4:	f95ff06f          	jal	zero,17768 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x44>
      return __exchange_and_add(__mem, __val);
   177d8:	fff00593          	addi	a1,zero,-1
   177dc:	03448513          	addi	a0,s1,52
   177e0:	e11fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   177e4:	fd9ff06f          	jal	zero,177bc <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x98>

00000000000177e8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>:
    {
   177e8:	ff010113          	addi	sp,sp,-16
   177ec:	00113423          	sd	ra,8(sp)
   177f0:	00813023          	sd	s0,0(sp)
   177f4:	00050413          	addi	s0,a0,0
    if (__is_single_threaded())
   177f8:	e601c783          	lbu	a5,-416(gp) # 43660 <__libc_single_threaded@GLIBC_2.32>
   177fc:	02078463          	beq	a5,zero,17824 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x3c>
    _Atomic_word __result = *__mem;
   17800:	03052503          	lw	a0,48(a0)
    *__mem += __val;
   17804:	fff5079b          	addiw	a5,a0,-1
   17808:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1780c:	00100793          	addi	a5,zero,1
   17810:	02f50263          	beq	a0,a5,17834 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x4c>
    }
   17814:	00813083          	ld	ra,8(sp)
   17818:	00013403          	ld	s0,0(sp)
   1781c:	01010113          	addi	sp,sp,16
   17820:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   17824:	fff00593          	addi	a1,zero,-1
   17828:	03050513          	addi	a0,a0,48
   1782c:	dc5fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17830:	fddff06f          	jal	zero,1780c <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x24>
	_M_dispose();
   17834:	00043783          	ld	a5,0(s0)
   17838:	0107b783          	ld	a5,16(a5)
   1783c:	00040513          	addi	a0,s0,0
   17840:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17844:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17848:	e601c783          	lbu	a5,-416(gp) # 43660 <__libc_single_threaded@GLIBC_2.32>
   1784c:	02078663          	beq	a5,zero,17878 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x90>
    _Atomic_word __result = *__mem;
   17850:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   17854:	fff5079b          	addiw	a5,a0,-1
   17858:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1785c:	00100793          	addi	a5,zero,1
   17860:	faf51ae3          	bne	a0,a5,17814 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x2c>
	    _M_destroy();
   17864:	00043783          	ld	a5,0(s0)
   17868:	0187b783          	ld	a5,24(a5)
   1786c:	00040513          	addi	a0,s0,0
   17870:	000780e7          	jalr	ra,0(a5)
    }
   17874:	fa1ff06f          	jal	zero,17814 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x2c>
      return __exchange_and_add(__mem, __val);
   17878:	fff00593          	addi	a1,zero,-1
   1787c:	03440513          	addi	a0,s0,52
   17880:	d71fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17884:	fd9ff06f          	jal	zero,1785c <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x74>

0000000000017888 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)>:

  const void *load(section_type section, size_t *size_out) {
   17888:	f9010113          	addi	sp,sp,-112
   1788c:	06113423          	sd	ra,104(sp)
   17890:	06813023          	sd	s0,96(sp)
   17894:	04913c23          	sd	s1,88(sp)
   17898:	05213823          	sd	s2,80(sp)
   1789c:	05313423          	sd	s3,72(sp)
   178a0:	00060913          	addi	s2,a2,0
    auto sec = f.get_section(section_type_to_name(section));
   178a4:	00850993          	addi	s3,a0,8
   178a8:	00058513          	addi	a0,a1,0
   178ac:	071160ef          	jal	ra,2e11c <dwarf::elf::section_type_to_name(dwarf::section_type)>
	: allocator_type(__a), _M_p(__dat) { }
   178b0:	02010793          	addi	a5,sp,32
   178b4:	00f13823          	sd	a5,16(sp)
      _GLIBCXX20_CONSTEXPR
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {
	// NB: Not required, but considered best practice.
	if (__s == 0)
   178b8:	04050863          	beq	a0,zero,17908 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x80>
   178bc:	00050493          	addi	s1,a0,0
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   178c0:	dc1fe0ef          	jal	ra,16680 <strlen@plt>
   178c4:	00050413          	addi	s0,a0,0
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   178c8:	00a13423          	sd	a0,8(sp)

	if (__dnew > size_type(_S_local_capacity))
   178cc:	00f00793          	addi	a5,zero,15
   178d0:	04a7e263          	bltu	a5,a0,17914 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x8c>
	if (__n == 1)
   178d4:	00100793          	addi	a5,zero,1
   178d8:	06f51463          	bne	a0,a5,17940 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xb8>
	__c1 = __c2;
   178dc:	0004c783          	lbu	a5,0(s1)
   178e0:	02f10023          	sb	a5,32(sp)

	this->_S_copy_chars(_M_data(), __beg, __end);

	__guard._M_guarded = 0;

	_M_set_length(__dnew);
   178e4:	00813703          	ld	a4,8(sp)
      { _M_string_length = __length; }
   178e8:	00e13c23          	sd	a4,24(sp)
   178ec:	01013783          	ld	a5,16(sp)
   178f0:	00e787b3          	add	a5,a5,a4
   178f4:	00078023          	sb	zero,0(a5)
   178f8:	01010593          	addi	a1,sp,16
   178fc:	00098513          	addi	a0,s3,0
   17900:	0b51c0ef          	jal	ra,341b4 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>
   17904:	0480006f          	jal	zero,1794c <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xc4>
	  std::__throw_logic_error(__N("basic_string: "
   17908:	00037537          	lui	a0,0x37
   1790c:	46850513          	addi	a0,a0,1128 # 37468 <__libc_csu_fini+0x8>
   17910:	e31fe0ef          	jal	ra,16740 <std::__throw_logic_error(char const*)@plt>
	    _M_data(_M_create(__dnew, size_type(0)));
   17914:	00000613          	addi	a2,zero,0
   17918:	00810593          	addi	a1,sp,8
   1791c:	01010513          	addi	a0,sp,16
   17920:	890ff0ef          	jal	ra,169b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
   17924:	00a13823          	sd	a0,16(sp)
      { _M_allocated_capacity = __capacity; }
   17928:	00813783          	ld	a5,8(sp)
   1792c:	02f13023          	sd	a5,32(sp)
	  return __s1;
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   17930:	00040613          	addi	a2,s0,0
   17934:	00048593          	addi	a1,s1,0
   17938:	f09fe0ef          	jal	ra,16840 <memcpy@plt>
   1793c:	fa9ff06f          	jal	zero,178e4 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x5c>
	if (__n == 0)
   17940:	fa0502e3          	beq	a0,zero,178e4 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x5c>
      { return _M_dataplus._M_p; }
   17944:	02010513          	addi	a0,sp,32
   17948:	fe9ff06f          	jal	zero,17930 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xa8>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1794c:	00053783          	ld	a5,0(a0)
   17950:	02f13823          	sd	a5,48(sp)
      : _M_pi(__r._M_pi)
   17954:	00853503          	ld	a0,8(a0)
   17958:	02a13c23          	sd	a0,56(sp)
	if (_M_pi != nullptr)
   1795c:	00050c63          	beq	a0,zero,17974 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xec>
    if (__is_single_threaded())
   17960:	e601c783          	lbu	a5,-416(gp) # 43660 <__libc_single_threaded@GLIBC_2.32>
   17964:	02078a63          	beq	a5,zero,17998 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x110>
  { *__mem += __val; }
   17968:	03052783          	lw	a5,48(a0)
   1796c:	0017879b          	addiw	a5,a5,1
   17970:	02f52823          	sw	a5,48(a0)
   17974:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   17978:	02010793          	addi	a5,sp,32
   1797c:	00f50463          	beq	a0,a5,17984 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xfc>
   17980:	e21fe0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const noexcept
      { return _M_ptr != nullptr; }
   17984:	03013403          	ld	s0,48(sp)
    if (!sec.valid())
   17988:	02040863          	beq	s0,zero,179b8 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x130>
      return nullptr;
    *size_out = sec.size();
   1798c:	03010513          	addi	a0,sp,48
   17990:	1541c0ef          	jal	ra,33ae4 <elf::section::size() const>
   17994:	0140006f          	jal	zero,179a8 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x120>
      __atomic_add(__mem, __val);
   17998:	00100593          	addi	a1,zero,1
   1799c:	03050513          	addi	a0,a0,48
   179a0:	c11fe0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   179a4:	fd1ff06f          	jal	zero,17974 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xec>
   179a8:	00a93023          	sd	a0,0(s2)
    return sec.data();
   179ac:	03010513          	addi	a0,sp,48
   179b0:	0041c0ef          	jal	ra,339b4 <elf::section::data() const>
   179b4:	00050413          	addi	s0,a0,0
	if (_M_pi != nullptr)
   179b8:	03813483          	ld	s1,56(sp)
   179bc:	02048063          	beq	s1,zero,179dc <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x154>
    if (__is_single_threaded())
   179c0:	e601c783          	lbu	a5,-416(gp) # 43660 <__libc_single_threaded@GLIBC_2.32>
   179c4:	02078c63          	beq	a5,zero,179fc <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x174>
    _Atomic_word __result = *__mem;
   179c8:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   179cc:	fff5079b          	addiw	a5,a0,-1
   179d0:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   179d4:	00100793          	addi	a5,zero,1
   179d8:	02f50a63          	beq	a0,a5,17a0c <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x184>
  }
   179dc:	00040513          	addi	a0,s0,0
   179e0:	06813083          	ld	ra,104(sp)
   179e4:	06013403          	ld	s0,96(sp)
   179e8:	05813483          	ld	s1,88(sp)
   179ec:	05013903          	ld	s2,80(sp)
   179f0:	04813983          	ld	s3,72(sp)
   179f4:	07010113          	addi	sp,sp,112
   179f8:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   179fc:	fff00593          	addi	a1,zero,-1
   17a00:	03048513          	addi	a0,s1,48
   17a04:	bedfe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17a08:	fcdff06f          	jal	zero,179d4 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x14c>
	_M_dispose();
   17a0c:	0004b783          	ld	a5,0(s1)
   17a10:	0107b783          	ld	a5,16(a5)
   17a14:	00048513          	addi	a0,s1,0
   17a18:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17a1c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17a20:	e601c783          	lbu	a5,-416(gp) # 43660 <__libc_single_threaded@GLIBC_2.32>
   17a24:	02078663          	beq	a5,zero,17a50 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x1c8>
    _Atomic_word __result = *__mem;
   17a28:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   17a2c:	fff5079b          	addiw	a5,a0,-1
   17a30:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17a34:	00100793          	addi	a5,zero,1
   17a38:	faf512e3          	bne	a0,a5,179dc <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x154>
	    _M_destroy();
   17a3c:	0004b783          	ld	a5,0(s1)
   17a40:	0187b783          	ld	a5,24(a5)
   17a44:	00048513          	addi	a0,s1,0
   17a48:	000780e7          	jalr	ra,0(a5)
   17a4c:	f91ff06f          	jal	zero,179dc <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x154>
      return __exchange_and_add(__mem, __val);
   17a50:	fff00593          	addi	a1,zero,-1
   17a54:	03448513          	addi	a0,s1,52
   17a58:	b99fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17a5c:	fd9ff06f          	jal	zero,17a34 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x1ac>
      { return _M_dataplus._M_p; }
   17a60:	00050413          	addi	s0,a0,0
   17a64:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   17a68:	02010793          	addi	a5,sp,32
   17a6c:	00f50463          	beq	a0,a5,17a74 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x1ec>
   17a70:	d31fe0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   17a74:	00040513          	addi	a0,s0,0
   17a78:	f19fe0ef          	jal	ra,16990 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   17a7c:	00050413          	addi	s0,a0,0
   17a80:	03813503          	ld	a0,56(sp)
   17a84:	00050463          	beq	a0,zero,17a8c <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x204>
	  _M_pi->_M_release();
   17a88:	d61ff0ef          	jal	ra,177e8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
   17a8c:	00040513          	addi	a0,s0,0
   17a90:	f01fe0ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000017a94 <dwarf::rangelist::~rangelist()>:
class rangelist {
   17a94:	fe010113          	addi	sp,sp,-32
   17a98:	00113c23          	sd	ra,24(sp)
   17a9c:	00813823          	sd	s0,16(sp)
   17aa0:	00913423          	sd	s1,8(sp)
   17aa4:	00050413          	addi	s0,a0,0
	if (_M_pi != nullptr)
   17aa8:	02053483          	ld	s1,32(a0)
   17aac:	02048063          	beq	s1,zero,17acc <dwarf::rangelist::~rangelist()+0x38>
    if (__is_single_threaded())
   17ab0:	e601c783          	lbu	a5,-416(gp) # 43660 <__libc_single_threaded@GLIBC_2.32>
   17ab4:	02078c63          	beq	a5,zero,17aec <dwarf::rangelist::~rangelist()+0x58>
    _Atomic_word __result = *__mem;
   17ab8:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   17abc:	fff5079b          	addiw	a5,a0,-1
   17ac0:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17ac4:	00100793          	addi	a5,zero,1
   17ac8:	02f50a63          	beq	a0,a5,17afc <dwarf::rangelist::~rangelist()+0x68>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   17acc:	00043503          	ld	a0,0(s0)
	if (__p)
   17ad0:	00050463          	beq	a0,zero,17ad8 <dwarf::rangelist::~rangelist()+0x44>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   17ad4:	ccdfe0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   17ad8:	01813083          	ld	ra,24(sp)
   17adc:	01013403          	ld	s0,16(sp)
   17ae0:	00813483          	ld	s1,8(sp)
   17ae4:	02010113          	addi	sp,sp,32
   17ae8:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   17aec:	fff00593          	addi	a1,zero,-1
   17af0:	03048513          	addi	a0,s1,48
   17af4:	afdfe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17af8:	fcdff06f          	jal	zero,17ac4 <dwarf::rangelist::~rangelist()+0x30>
	_M_dispose();
   17afc:	0004b783          	ld	a5,0(s1)
   17b00:	0107b783          	ld	a5,16(a5)
   17b04:	00048513          	addi	a0,s1,0
   17b08:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17b0c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17b10:	e601c783          	lbu	a5,-416(gp) # 43660 <__libc_single_threaded@GLIBC_2.32>
   17b14:	02078663          	beq	a5,zero,17b40 <dwarf::rangelist::~rangelist()+0xac>
    _Atomic_word __result = *__mem;
   17b18:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   17b1c:	fff5079b          	addiw	a5,a0,-1
   17b20:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17b24:	00100793          	addi	a5,zero,1
   17b28:	faf512e3          	bne	a0,a5,17acc <dwarf::rangelist::~rangelist()+0x38>
	    _M_destroy();
   17b2c:	0004b783          	ld	a5,0(s1)
   17b30:	0187b783          	ld	a5,24(a5)
   17b34:	00048513          	addi	a0,s1,0
   17b38:	000780e7          	jalr	ra,0(a5)
   17b3c:	f91ff06f          	jal	zero,17acc <dwarf::rangelist::~rangelist()+0x38>
      return __exchange_and_add(__mem, __val);
   17b40:	fff00593          	addi	a1,zero,-1
   17b44:	03448513          	addi	a0,s1,52
   17b48:	aa9fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17b4c:	fd9ff06f          	jal	zero,17b24 <dwarf::rangelist::~rangelist()+0x90>

0000000000017b50 <dwarf::small_vector<unsigned long, 6u>::~small_vector()>:
  ~small_vector() {
   17b50:	00050693          	addi	a3,a0,0
    for (T *p = base; p < end; ++p)
   17b54:	03053503          	ld	a0,48(a0)
   17b58:	0386b783          	ld	a5,56(a3)
   17b5c:	00f57a63          	bgeu	a0,a5,17b70 <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0x20>
   17b60:	00050793          	addi	a5,a0,0
   17b64:	00878793          	addi	a5,a5,8
   17b68:	0386b703          	ld	a4,56(a3)
   17b6c:	fee7ece3          	bltu	a5,a4,17b64 <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0x14>
    end = base;
   17b70:	02a6bc23          	sd	a0,56(a3)
    if ((char *)base != buf)
   17b74:	02a68063          	beq	a3,a0,17b94 <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0x44>
      delete[] (char *)base;
   17b78:	00050e63          	beq	a0,zero,17b94 <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0x44>
  ~small_vector() {
   17b7c:	ff010113          	addi	sp,sp,-16
   17b80:	00113423          	sd	ra,8(sp)
      delete[] (char *)base;
   17b84:	ccdfe0ef          	jal	ra,16850 <operator delete[](void*)@plt>
  }
   17b88:	00813083          	ld	ra,8(sp)
   17b8c:	01010113          	addi	sp,sp,16
   17b90:	00008067          	jalr	zero,0(ra)
   17b94:	00008067          	jalr	zero,0(ra)

0000000000017b98 <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()>:
      ~vector() _GLIBCXX_NOEXCEPT
   17b98:	fe010113          	addi	sp,sp,-32
   17b9c:	00113c23          	sd	ra,24(sp)
   17ba0:	00813823          	sd	s0,16(sp)
   17ba4:	00913423          	sd	s1,8(sp)
   17ba8:	01213023          	sd	s2,0(sp)
   17bac:	00050913          	addi	s2,a0,0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   17bb0:	00053403          	ld	s0,0(a0)
   17bb4:	00853483          	ld	s1,8(a0)
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   17bb8:	02941a63          	bne	s0,s1,17bec <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()+0x54>
	_M_deallocate(_M_impl._M_start,
   17bbc:	00093503          	ld	a0,0(s2)
	if (__p)
   17bc0:	00050463          	beq	a0,zero,17bc8 <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()+0x30>
   17bc4:	bddfe0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   17bc8:	01813083          	ld	ra,24(sp)
   17bcc:	01013403          	ld	s0,16(sp)
   17bd0:	00813483          	ld	s1,8(sp)
   17bd4:	00013903          	ld	s2,0(sp)
   17bd8:	02010113          	addi	sp,sp,32
   17bdc:	00008067          	jalr	zero,0(ra)
      delete[] (char *)base;
   17be0:	c71fe0ef          	jal	ra,16850 <operator delete[](void*)@plt>
   17be4:	07040413          	addi	s0,s0,112
   17be8:	fc848ae3          	beq	s1,s0,17bbc <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()+0x24>
    for (T *p = base; p < end; ++p)
   17bec:	05043503          	ld	a0,80(s0)
   17bf0:	05843783          	ld	a5,88(s0)
   17bf4:	00f57a63          	bgeu	a0,a5,17c08 <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()+0x70>
   17bf8:	00050793          	addi	a5,a0,0
   17bfc:	00878793          	addi	a5,a5,8
   17c00:	05843703          	ld	a4,88(s0)
   17c04:	fee7ece3          	bltu	a5,a4,17bfc <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()+0x64>
    end = base;
   17c08:	04a43c23          	sd	a0,88(s0)
    if ((char *)base != buf)
   17c0c:	02040793          	addi	a5,s0,32
   17c10:	fcf50ae3          	beq	a0,a5,17be4 <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()+0x4c>
      delete[] (char *)base;
   17c14:	fc0516e3          	bne	a0,zero,17be0 <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()+0x48>
   17c18:	fcdff06f          	jal	zero,17be4 <std::vector<dwarf::die, std::allocator<dwarf::die> >::~vector()+0x4c>

0000000000017c1c <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)>:
#endif

  template<typename _InputIterator, typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR
    _ForwardIterator
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
   17c1c:	fa010113          	addi	sp,sp,-96
   17c20:	04113c23          	sd	ra,88(sp)
   17c24:	04813823          	sd	s0,80(sp)
   17c28:	04913423          	sd	s1,72(sp)
   17c2c:	05213023          	sd	s2,64(sp)
   17c30:	03313c23          	sd	s3,56(sp)
   17c34:	03413823          	sd	s4,48(sp)
   17c38:	03513423          	sd	s5,40(sp)
   17c3c:	03613023          	sd	s6,32(sp)
   17c40:	01713c23          	sd	s7,24(sp)
   17c44:	01813823          	sd	s8,16(sp)
   17c48:	01913423          	sd	s9,8(sp)
   17c4c:	01a13023          	sd	s10,0(sp)
   17c50:	00060b13          	addi	s6,a2,0
		     _ForwardIterator __result)
    {
      _ForwardIterator __cur = __result;
      __try
	{
	  for (; __first != __last; ++__first, (void)++__cur)
   17c54:	12b50863          	beq	a0,a1,17d84 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x168>
   17c58:	00050493          	addi	s1,a0,0
   17c5c:	00058a93          	addi	s5,a1,0
   17c60:	02060993          	addi	s3,a2,32
      _ForwardIterator __cur = __result;
   17c64:	00060413          	addi	s0,a2,0
   17c68:	0a00006f          	jal	zero,17d08 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0xec>
    char *newbuf = new char[sizeof(T[target])];
   17c6c:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   17c70:	05043503          	ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   17c74:	05843703          	ld	a4,88(s0)
   17c78:	10e57263          	bgeu	a0,a4,17d7c <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x160>
    T *src = base, *dest = (T *)newbuf;
   17c7c:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   17c80:	00878793          	addi	a5,a5,8
   17c84:	fee7eee3          	bltu	a5,a4,17c80 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x64>
   17c88:	fff70d13          	addi	s10,a4,-1
   17c8c:	40ad0d33          	sub	s10,s10,a0
   17c90:	ff8d7d13          	andi	s10,s10,-8
   17c94:	008d0d13          	addi	s10,s10,8
   17c98:	01ac8d33          	add	s10,s9,s10
    if ((char *)base != buf)
   17c9c:	00ac0663          	beq	s8,a0,17ca8 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x8c>
      delete[] (char *)base;
   17ca0:	00050463          	beq	a0,zero,17ca8 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x8c>
   17ca4:	badfe0ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   17ca8:	05943823          	sd	s9,80(s0)
    end = dest;
   17cac:	05a43c23          	sd	s10,88(s0)
    cap = base + target;
   17cb0:	017c8cb3          	add	s9,s9,s7
   17cb4:	07943023          	sd	s9,96(s0)
    for (size_type i = 0; i < osize; i++)
   17cb8:	02090663          	beq	s2,zero,17ce4 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0xc8>
   17cbc:	00000793          	addi	a5,zero,0
   17cc0:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   17cc4:	0504b703          	ld	a4,80(s1)
   17cc8:	00d70733          	add	a4,a4,a3
   17ccc:	00073603          	ld	a2,0(a4)
   17cd0:	05043703          	ld	a4,80(s0)
   17cd4:	00d70733          	add	a4,a4,a3
   17cd8:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   17cdc:	00178793          	addi	a5,a5,1
   17ce0:	fef910e3          	bne	s2,a5,17cc0 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0xa4>
    end = base + osize;
   17ce4:	05043783          	ld	a5,80(s0)
   17ce8:	014787b3          	add	a5,a5,s4
   17cec:	04f43c23          	sd	a5,88(s0)
  die(const die &o) = default;
   17cf0:	0684b783          	ld	a5,104(s1)
   17cf4:	06f43423          	sd	a5,104(s0)
	  for (; __first != __last; ++__first, (void)++__cur)
   17cf8:	07048493          	addi	s1,s1,112
   17cfc:	07040413          	addi	s0,s0,112
   17d00:	07098993          	addi	s3,s3,112
   17d04:	089a8263          	beq	s5,s1,17d88 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x16c>
   17d08:	0004a783          	lw	a5,0(s1)
   17d0c:	00f42023          	sw	a5,0(s0)
   17d10:	0084b783          	ld	a5,8(s1)
   17d14:	00f43423          	sd	a5,8(s0)
   17d18:	0104b783          	ld	a5,16(s1)
   17d1c:	00f43823          	sd	a5,16(s0)
   17d20:	0184b783          	ld	a5,24(s1)
   17d24:	00f43c23          	sd	a5,24(s0)
   17d28:	00098c13          	addi	s8,s3,0
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   17d2c:	05343823          	sd	s3,80(s0)
   17d30:	05343c23          	sd	s3,88(s0)
   17d34:	05040513          	addi	a0,s0,80
   17d38:	06a43023          	sd	a0,96(s0)
  size_type size() const { return end - base; }
   17d3c:	0584ba03          	ld	s4,88(s1)
   17d40:	0504b783          	ld	a5,80(s1)
   17d44:	40fa0a33          	sub	s4,s4,a5
   17d48:	403a5913          	srai	s2,s4,0x3
    if (n <= (size_type)(cap - base))
   17d4c:	41350533          	sub	a0,a0,s3
   17d50:	f74574e3          	bgeu	a0,s4,17cb8 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x9c>
   17d54:	40355513          	srai	a0,a0,0x3
   17d58:	00051463          	bne	a0,zero,17d60 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x144>
   17d5c:	00100513          	addi	a0,zero,1
    while (target < n)
   17d60:	01257663          	bgeu	a0,s2,17d6c <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x150>
      target <<= 1;
   17d64:	00151513          	slli	a0,a0,0x1
    while (target < n)
   17d68:	ff256ee3          	bltu	a0,s2,17d64 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x148>
    char *newbuf = new char[sizeof(T[target])];
   17d6c:	00351b93          	slli	s7,a0,0x3
   17d70:	000b8513          	addi	a0,s7,0
   17d74:	81dfe0ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   17d78:	ef5ff06f          	jal	zero,17c6c <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x50>
    T *src = base, *dest = (T *)newbuf;
   17d7c:	000c8d13          	addi	s10,s9,0
   17d80:	f1dff06f          	jal	zero,17c9c <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x80>
      _ForwardIterator __cur = __result;
   17d84:	00060413          	addi	s0,a2,0
      __catch(...)
	{
	  std::_Destroy(__result, __cur);
	  __throw_exception_again;
	}
    }
   17d88:	00040513          	addi	a0,s0,0
   17d8c:	05813083          	ld	ra,88(sp)
   17d90:	05013403          	ld	s0,80(sp)
   17d94:	04813483          	ld	s1,72(sp)
   17d98:	04013903          	ld	s2,64(sp)
   17d9c:	03813983          	ld	s3,56(sp)
   17da0:	03013a03          	ld	s4,48(sp)
   17da4:	02813a83          	ld	s5,40(sp)
   17da8:	02013b03          	ld	s6,32(sp)
   17dac:	01813b83          	ld	s7,24(sp)
   17db0:	01013c03          	ld	s8,16(sp)
   17db4:	00813c83          	ld	s9,8(sp)
   17db8:	00013d03          	ld	s10,0(sp)
   17dbc:	06010113          	addi	sp,sp,96
   17dc0:	00008067          	jalr	zero,0(ra)
      __catch(...)
   17dc4:	8adfe0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
   17dc8:	008b1c63          	bne	s6,s0,17de0 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x1c4>
	  __throw_exception_again;
   17dcc:	af5fe0ef          	jal	ra,168c0 <__cxa_rethrow@plt>
      __catch(...)
   17dd0:	00050413          	addi	s0,a0,0
   17dd4:	b5dfe0ef          	jal	ra,16930 <__cxa_end_catch@plt>
   17dd8:	00040513          	addi	a0,s0,0
   17ddc:	bb5fe0ef          	jal	ra,16990 <_Unwind_Resume@plt>
class die {
   17de0:	020b0513          	addi	a0,s6,32
   17de4:	d6dff0ef          	jal	ra,17b50 <dwarf::small_vector<unsigned long, 6u>::~small_vector()>
   17de8:	070b0b13          	addi	s6,s6,112
   17dec:	fddff06f          	jal	zero,17dc8 <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)+0x1ac>

0000000000017df0 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
   17df0:	f8010113          	addi	sp,sp,-128
   17df4:	06113c23          	sd	ra,120(sp)
   17df8:	06813823          	sd	s0,112(sp)
   17dfc:	06913423          	sd	s1,104(sp)
   17e00:	07213023          	sd	s2,96(sp)
   17e04:	05313c23          	sd	s3,88(sp)
   17e08:	05413823          	sd	s4,80(sp)
   17e0c:	05513423          	sd	s5,72(sp)
   17e10:	05613023          	sd	s6,64(sp)
   17e14:	03713c23          	sd	s7,56(sp)
   17e18:	03813823          	sd	s8,48(sp)
   17e1c:	03913423          	sd	s9,40(sp)
   17e20:	03a13023          	sd	s10,32(sp)
   17e24:	01b13c23          	sd	s11,24(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   17e28:	00853a03          	ld	s4,8(a0)
   17e2c:	00053a83          	ld	s5,0(a0)
   17e30:	415a07b3          	sub	a5,s4,s5
   17e34:	4047d793          	srai	a5,a5,0x4
   17e38:	e201b703          	ld	a4,-480(gp) # 43620 <__SDATA_BEGIN__+0x8>
   17e3c:	02e787b3          	mul	a5,a5,a4
      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   17e40:	e181b703          	ld	a4,-488(gp) # 43618 <__SDATA_BEGIN__>
   17e44:	04e78063          	beq	a5,a4,17e84 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x94>
   17e48:	00050b13          	addi	s6,a0,0
   17e4c:	00058c13          	addi	s8,a1,0
   17e50:	00060493          	addi	s1,a2,0
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
      return __a;
   17e54:	00078713          	addi	a4,a5,0
      if (__a < __b)
   17e58:	035a0c63          	beq	s4,s5,17e90 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0xa0>
	  __throw_length_error(__N(__s));

	const size_type __len = size() + (std::max)(size(), __n);
   17e5c:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   17e60:	20f76263          	bltu	a4,a5,18064 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x274>
   17e64:	00070d93          	addi	s11,a4,0
   17e68:	e181b783          	ld	a5,-488(gp) # 43618 <__SDATA_BEGIN__>
   17e6c:	00e7f463          	bgeu	a5,a4,17e74 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x84>
   17e70:	e181bd83          	ld	s11,-488(gp) # 43618 <__SDATA_BEGIN__>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   17e74:	415c0433          	sub	s0,s8,s5
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   17e78:	00000b93          	addi	s7,zero,0
   17e7c:	20070263          	beq	a4,zero,18080 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x290>
   17e80:	1ec0006f          	jal	zero,1806c <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x27c>
	  __throw_length_error(__N(__s));
   17e84:	00037537          	lui	a0,0x37
   17e88:	50050513          	addi	a0,a0,1280 # 37500 <__libc_csu_fini+0xa0>
   17e8c:	815fe0ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   17e90:	00100713          	addi	a4,zero,1
   17e94:	fc9ff06f          	jal	zero,17e5c <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x6c>
    char *newbuf = new char[sizeof(T[target])];
   17e98:	00a13023          	sd	a0,0(sp)
    T *src = base, *dest = (T *)newbuf;
   17e9c:	05043503          	ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   17ea0:	05843703          	ld	a4,88(s0)
   17ea4:	0ae57063          	bgeu	a0,a4,17f44 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x154>
    T *src = base, *dest = (T *)newbuf;
   17ea8:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   17eac:	00878793          	addi	a5,a5,8
   17eb0:	fee7eee3          	bltu	a5,a4,17eac <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0xbc>
   17eb4:	fff70993          	addi	s3,a4,-1
   17eb8:	40a989b3          	sub	s3,s3,a0
   17ebc:	ff89f993          	andi	s3,s3,-8
   17ec0:	00898993          	addi	s3,s3,8
   17ec4:	00013783          	ld	a5,0(sp)
   17ec8:	013789b3          	add	s3,a5,s3
    if ((char *)base != buf)
   17ecc:	00ad0663          	beq	s10,a0,17ed8 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0xe8>
      delete[] (char *)base;
   17ed0:	00050463          	beq	a0,zero,17ed8 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0xe8>
   17ed4:	97dfe0ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   17ed8:	00013783          	ld	a5,0(sp)
   17edc:	04f43823          	sd	a5,80(s0)
    end = dest;
   17ee0:	05343c23          	sd	s3,88(s0)
    cap = base + target;
   17ee4:	00813703          	ld	a4,8(sp)
   17ee8:	00e787b3          	add	a5,a5,a4
   17eec:	06f43023          	sd	a5,96(s0)
    for (size_type i = 0; i < osize; i++)
   17ef0:	02090663          	beq	s2,zero,17f1c <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x12c>
   17ef4:	00000793          	addi	a5,zero,0
   17ef8:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   17efc:	0504b703          	ld	a4,80(s1)
   17f00:	00d70733          	add	a4,a4,a3
   17f04:	00073603          	ld	a2,0(a4)
   17f08:	05043703          	ld	a4,80(s0)
   17f0c:	00d70733          	add	a4,a4,a3
   17f10:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   17f14:	00178793          	addi	a5,a5,1
   17f18:	fef910e3          	bne	s2,a5,17ef8 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x108>
    end = base + osize;
   17f1c:	05043783          	ld	a5,80(s0)
   17f20:	019787b3          	add	a5,a5,s9
   17f24:	04f43c23          	sd	a5,88(s0)
  die(const die &o) = default;
   17f28:	0684b783          	ld	a5,104(s1)
   17f2c:	06f43423          	sd	a5,104(s0)
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
	{ return std::__do_uninit_copy(__first, __last, __result); }
   17f30:	000b8613          	addi	a2,s7,0
   17f34:	000c0593          	addi	a1,s8,0
   17f38:	000a8513          	addi	a0,s5,0
   17f3c:	ce1ff0ef          	jal	ra,17c1c <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)>
   17f40:	00c0006f          	jal	zero,17f4c <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x15c>
    T *src = base, *dest = (T *)newbuf;
   17f44:	00013983          	ld	s3,0(sp)
   17f48:	f85ff06f          	jal	zero,17ecc <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0xdc>
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
		 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   17f4c:	07050413          	addi	s0,a0,112
   17f50:	00040613          	addi	a2,s0,0
   17f54:	000a0593          	addi	a1,s4,0
   17f58:	000c0513          	addi	a0,s8,0
   17f5c:	cc1ff0ef          	jal	ra,17c1c <dwarf::die* std::__do_uninit_copy<dwarf::die const*, dwarf::die*>(dwarf::die const*, dwarf::die const*, dwarf::die*)>
   17f60:	0140006f          	jal	zero,17f74 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x184>
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
		 __new_finish, _M_get_Tp_allocator());
	    }
	}
      __catch(...)
   17f64:	f0cfe0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
class die {
   17f68:	000d0513          	addi	a0,s10,0
   17f6c:	be5ff0ef          	jal	ra,17b50 <dwarf::small_vector<unsigned long, 6u>::~small_vector()>
#if __cplusplus <= 201703L
	  __a.destroy(__p);
#else
	  std::destroy_at(__p);
#endif
	}
   17f70:	0d40006f          	jal	zero,18044 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x254>
   17f74:	00050493          	addi	s1,a0,0
   17f78:	000a8413          	addi	s0,s5,0
   17f7c:	095a1863          	bne	s4,s5,1800c <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x21c>
	if (__p)
   17f80:	000a8663          	beq	s5,zero,17f8c <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x19c>
   17f84:	000a8513          	addi	a0,s5,0
   17f88:	819fe0ef          	jal	ra,167a0 <operator delete(void*)@plt>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
   17f8c:	017b3023          	sd	s7,0(s6)
      this->_M_impl._M_finish = __new_finish;
   17f90:	009b3423          	sd	s1,8(s6)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   17f94:	003d9793          	slli	a5,s11,0x3
   17f98:	41b787b3          	sub	a5,a5,s11
   17f9c:	00479793          	slli	a5,a5,0x4
   17fa0:	00fb87b3          	add	a5,s7,a5
   17fa4:	00fb3823          	sd	a5,16(s6)
    }
   17fa8:	07813083          	ld	ra,120(sp)
   17fac:	07013403          	ld	s0,112(sp)
   17fb0:	06813483          	ld	s1,104(sp)
   17fb4:	06013903          	ld	s2,96(sp)
   17fb8:	05813983          	ld	s3,88(sp)
   17fbc:	05013a03          	ld	s4,80(sp)
   17fc0:	04813a83          	ld	s5,72(sp)
   17fc4:	04013b03          	ld	s6,64(sp)
   17fc8:	03813b83          	ld	s7,56(sp)
   17fcc:	03013c03          	ld	s8,48(sp)
   17fd0:	02813c83          	ld	s9,40(sp)
   17fd4:	02013d03          	ld	s10,32(sp)
   17fd8:	01813d83          	ld	s11,24(sp)
   17fdc:	08010113          	addi	sp,sp,128
   17fe0:	00008067          	jalr	zero,0(ra)
      __catch(...)
   17fe4:	e8cfe0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
   17fe8:	000b8493          	addi	s1,s7,0
   17fec:	04940c63          	beq	s0,s1,18044 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x254>
   17ff0:	02048513          	addi	a0,s1,32
   17ff4:	b5dff0ef          	jal	ra,17b50 <dwarf::small_vector<unsigned long, 6u>::~small_vector()>
   17ff8:	07048493          	addi	s1,s1,112
   17ffc:	ff1ff06f          	jal	zero,17fec <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x1fc>
      delete[] (char *)base;
   18000:	851fe0ef          	jal	ra,16850 <operator delete[](void*)@plt>
   18004:	07040413          	addi	s0,s0,112
   18008:	f7440ce3          	beq	s0,s4,17f80 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x190>
    for (T *p = base; p < end; ++p)
   1800c:	05043503          	ld	a0,80(s0)
   18010:	05843783          	ld	a5,88(s0)
   18014:	00f57a63          	bgeu	a0,a5,18028 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x238>
   18018:	00050793          	addi	a5,a0,0
   1801c:	00878793          	addi	a5,a5,8
   18020:	05843703          	ld	a4,88(s0)
   18024:	fee7ece3          	bltu	a5,a4,1801c <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x22c>
    end = base;
   18028:	04a43c23          	sd	a0,88(s0)
    if ((char *)base != buf)
   1802c:	02040793          	addi	a5,s0,32
   18030:	fcf50ae3          	beq	a0,a5,18004 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x214>
      delete[] (char *)base;
   18034:	fc0516e3          	bne	a0,zero,18000 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x210>
   18038:	fcdff06f          	jal	zero,18004 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x214>
   1803c:	e34fe0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   18040:	f20b84e3          	beq	s7,zero,17f68 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x178>
   18044:	000b8663          	beq	s7,zero,18050 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x260>
   18048:	000b8513          	addi	a0,s7,0
   1804c:	f54fe0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	  __throw_exception_again;
   18050:	871fe0ef          	jal	ra,168c0 <__cxa_rethrow@plt>
      __catch(...)
   18054:	00050413          	addi	s0,a0,0
   18058:	8d9fe0ef          	jal	ra,16930 <__cxa_end_catch@plt>
   1805c:	00040513          	addi	a0,s0,0
   18060:	931fe0ef          	jal	ra,16990 <_Unwind_Resume@plt>
   18064:	415c0433          	sub	s0,s8,s5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   18068:	e181bd83          	ld	s11,-488(gp) # 43618 <__SDATA_BEGIN__>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1806c:	003d9513          	slli	a0,s11,0x3
   18070:	41b50533          	sub	a0,a0,s11
   18074:	00451513          	slli	a0,a0,0x4
   18078:	f38fe0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1807c:	00050b93          	addi	s7,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   18080:	008b8433          	add	s0,s7,s0
  die(const die &o) = default;
   18084:	0004a783          	lw	a5,0(s1)
   18088:	00f42023          	sw	a5,0(s0)
   1808c:	0084b783          	ld	a5,8(s1)
   18090:	00f43423          	sd	a5,8(s0)
   18094:	0104b783          	ld	a5,16(s1)
   18098:	00f43823          	sd	a5,16(s0)
   1809c:	0184b783          	ld	a5,24(s1)
   180a0:	00f43c23          	sd	a5,24(s0)
   180a4:	02040d13          	addi	s10,s0,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   180a8:	05a43823          	sd	s10,80(s0)
   180ac:	05040793          	addi	a5,s0,80
   180b0:	06f43023          	sd	a5,96(s0)
  size_type size() const { return end - base; }
   180b4:	0584bc83          	ld	s9,88(s1)
   180b8:	0504b703          	ld	a4,80(s1)
   180bc:	40ec8cb3          	sub	s9,s9,a4
   180c0:	403cd913          	srai	s2,s9,0x3
    end = base;
   180c4:	05a43c23          	sd	s10,88(s0)
    if (n <= (size_type)(cap - base))
   180c8:	41a787b3          	sub	a5,a5,s10
   180cc:	e397f2e3          	bgeu	a5,s9,17ef0 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x100>
   180d0:	4037d793          	srai	a5,a5,0x3
   180d4:	00079463          	bne	a5,zero,180dc <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x2ec>
   180d8:	00100793          	addi	a5,zero,1
    while (target < n)
   180dc:	0127f663          	bgeu	a5,s2,180e8 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x2f8>
      target <<= 1;
   180e0:	00179793          	slli	a5,a5,0x1
    while (target < n)
   180e4:	ff27eee3          	bltu	a5,s2,180e0 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0x2f0>
    char *newbuf = new char[sizeof(T[target])];
   180e8:	00379793          	slli	a5,a5,0x3
   180ec:	00f13423          	sd	a5,8(sp)
   180f0:	00078513          	addi	a0,a5,0
   180f4:	c9cfe0ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   180f8:	da1ff06f          	jal	zero,17e98 <void std::vector<dwarf::die, std::allocator<dwarf::die> >::_M_realloc_insert<dwarf::die const&>(__gnu_cxx::__normal_iterator<dwarf::die*, std::vector<dwarf::die, std::allocator<dwarf::die> > >, dwarf::die const&)+0xa8>

00000000000180fc <dwarf::dwarf::~dwarf()>:
    m->compilation_units.emplace_back(*this, infocur.get_section_offset());
    infocur.subsection();
  }
}

dwarf::~dwarf() {}
   180fc:	ff010113          	addi	sp,sp,-16
   18100:	00113423          	sd	ra,8(sp)
   18104:	00813023          	sd	s0,0(sp)
	if (_M_pi != nullptr)
   18108:	00853403          	ld	s0,8(a0)
   1810c:	02040463          	beq	s0,zero,18134 <dwarf::dwarf::~dwarf()+0x38>
    if (__is_single_threaded())
   18110:	0002b797          	auipc	a5,0x2b
   18114:	3887b783          	ld	a5,904(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18118:	0007c783          	lbu	a5,0(a5)
   1811c:	02078463          	beq	a5,zero,18144 <dwarf::dwarf::~dwarf()+0x48>
    _Atomic_word __result = *__mem;
   18120:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   18124:	fff5079b          	addiw	a5,a0,-1
   18128:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1812c:	00100793          	addi	a5,zero,1
   18130:	02f50263          	beq	a0,a5,18154 <dwarf::dwarf::~dwarf()+0x58>
   18134:	00813083          	ld	ra,8(sp)
   18138:	00013403          	ld	s0,0(sp)
   1813c:	01010113          	addi	sp,sp,16
   18140:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   18144:	fff00593          	addi	a1,zero,-1
   18148:	03040513          	addi	a0,s0,48
   1814c:	ca4fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18150:	fddff06f          	jal	zero,1812c <dwarf::dwarf::~dwarf()+0x30>
	_M_dispose();
   18154:	00043783          	ld	a5,0(s0)
   18158:	0107b783          	ld	a5,16(a5)
   1815c:	00040513          	addi	a0,s0,0
   18160:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18164:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18168:	0002b797          	auipc	a5,0x2b
   1816c:	3307b783          	ld	a5,816(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18170:	0007c783          	lbu	a5,0(a5)
   18174:	02078663          	beq	a5,zero,181a0 <dwarf::dwarf::~dwarf()+0xa4>
    _Atomic_word __result = *__mem;
   18178:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1817c:	fff5079b          	addiw	a5,a0,-1
   18180:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18184:	00100793          	addi	a5,zero,1
   18188:	faf516e3          	bne	a0,a5,18134 <dwarf::dwarf::~dwarf()+0x38>
	    _M_destroy();
   1818c:	00043783          	ld	a5,0(s0)
   18190:	0187b783          	ld	a5,24(a5)
   18194:	00040513          	addi	a0,s0,0
   18198:	000780e7          	jalr	ra,0(a5)
   1819c:	f99ff06f          	jal	zero,18134 <dwarf::dwarf::~dwarf()+0x38>
      return __exchange_and_add(__mem, __val);
   181a0:	fff00593          	addi	a1,zero,-1
   181a4:	03440513          	addi	a0,s0,52
   181a8:	c48fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   181ac:	fd9ff06f          	jal	zero,18184 <dwarf::dwarf::~dwarf()+0x88>

00000000000181b0 <dwarf::dwarf::compilation_units() const>:

const std::vector<compilation_unit> &dwarf::compilation_units() const {
   181b0:	ff010113          	addi	sp,sp,-16
   181b4:	00113423          	sd	ra,8(sp)
   181b8:	00813023          	sd	s0,0(sp)
   181bc:	00050413          	addi	s0,a0,0
  static std::vector<compilation_unit> empty;
   181c0:	e8018513          	addi	a0,gp,-384 # 43680 <guard variable for dwarf::dwarf::compilation_units() const::empty>
   181c4:	81dfe0ef          	jal	ra,169e0 <__cxa_guard_acquire@plt>
   181c8:	02051063          	bne	a0,zero,181e8 <dwarf::dwarf::compilation_units() const+0x38>
      { return _M_ptr != nullptr; }
   181cc:	00043503          	ld	a0,0(s0)
  if (!m)
   181d0:	04050263          	beq	a0,zero,18214 <dwarf::dwarf::compilation_units() const+0x64>
    return empty;
  return m->compilation_units;
   181d4:	03050513          	addi	a0,a0,48
}
   181d8:	00813083          	ld	ra,8(sp)
   181dc:	00013403          	ld	s0,0(sp)
   181e0:	01010113          	addi	sp,sp,16
   181e4:	00008067          	jalr	zero,0(ra)
	: _M_start(), _M_finish(), _M_end_of_storage()
   181e8:	e6818593          	addi	a1,gp,-408 # 43668 <dwarf::dwarf::compilation_units() const::empty>
   181ec:	0005b023          	sd	zero,0(a1)
   181f0:	0005b423          	sd	zero,8(a1)
   181f4:	0005b823          	sd	zero,16(a1)
  static std::vector<compilation_unit> empty;
   181f8:	e3018613          	addi	a2,gp,-464 # 43630 <__dso_handle>
   181fc:	0002b517          	auipc	a0,0x2b
   18200:	18c53503          	ld	a0,396(a0) # 43388 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()@@Base+0x2798c>
   18204:	fbcfe0ef          	jal	ra,169c0 <__cxa_atexit@plt>
   18208:	e8018513          	addi	a0,gp,-384 # 43680 <guard variable for dwarf::dwarf::compilation_units() const::empty>
   1820c:	cf4fe0ef          	jal	ra,16700 <__cxa_guard_release@plt>
   18210:	fbdff06f          	jal	zero,181cc <dwarf::dwarf::compilation_units() const+0x1c>
    return empty;
   18214:	e6818513          	addi	a0,gp,-408 # 43668 <dwarf::dwarf::compilation_units() const::empty>
   18218:	fc1ff06f          	jal	zero,181d8 <dwarf::dwarf::compilation_units() const+0x28>

000000000001821c <dwarf::unit::~unit()>:
        have_abbrevs(false) {}

  void force_abbrevs();
};

unit::~unit() {}
   1821c:	ff010113          	addi	sp,sp,-16
   18220:	00113423          	sd	ra,8(sp)
   18224:	00813023          	sd	s0,0(sp)
   18228:	0002b797          	auipc	a5,0x2b
   1822c:	3a07b783          	ld	a5,928(a5) # 435c8 <vtable for dwarf::unit@@Base+0xc98>
   18230:	01078793          	addi	a5,a5,16
   18234:	00f53023          	sd	a5,0(a0)
	if (_M_pi != nullptr)
   18238:	01053403          	ld	s0,16(a0)
   1823c:	02040463          	beq	s0,zero,18264 <dwarf::unit::~unit()+0x48>
    if (__is_single_threaded())
   18240:	0002b797          	auipc	a5,0x2b
   18244:	2587b783          	ld	a5,600(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18248:	0007c783          	lbu	a5,0(a5)
   1824c:	02078463          	beq	a5,zero,18274 <dwarf::unit::~unit()+0x58>
    _Atomic_word __result = *__mem;
   18250:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   18254:	fff5079b          	addiw	a5,a0,-1
   18258:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1825c:	00100793          	addi	a5,zero,1
   18260:	02f50263          	beq	a0,a5,18284 <dwarf::unit::~unit()+0x68>
   18264:	00813083          	ld	ra,8(sp)
   18268:	00013403          	ld	s0,0(sp)
   1826c:	01010113          	addi	sp,sp,16
   18270:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   18274:	fff00593          	addi	a1,zero,-1
   18278:	03040513          	addi	a0,s0,48
   1827c:	b74fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18280:	fddff06f          	jal	zero,1825c <dwarf::unit::~unit()+0x40>
	_M_dispose();
   18284:	00043783          	ld	a5,0(s0)
   18288:	0107b783          	ld	a5,16(a5)
   1828c:	00040513          	addi	a0,s0,0
   18290:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18294:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18298:	0002b797          	auipc	a5,0x2b
   1829c:	2007b783          	ld	a5,512(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   182a0:	0007c783          	lbu	a5,0(a5)
   182a4:	02078663          	beq	a5,zero,182d0 <dwarf::unit::~unit()+0xb4>
    _Atomic_word __result = *__mem;
   182a8:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   182ac:	fff5079b          	addiw	a5,a0,-1
   182b0:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   182b4:	00100793          	addi	a5,zero,1
   182b8:	faf516e3          	bne	a0,a5,18264 <dwarf::unit::~unit()+0x48>
	    _M_destroy();
   182bc:	00043783          	ld	a5,0(s0)
   182c0:	0187b783          	ld	a5,24(a5)
   182c4:	00040513          	addi	a0,s0,0
   182c8:	000780e7          	jalr	ra,0(a5)
   182cc:	f99ff06f          	jal	zero,18264 <dwarf::unit::~unit()+0x48>
      return __exchange_and_add(__mem, __val);
   182d0:	fff00593          	addi	a1,zero,-1
   182d4:	03440513          	addi	a0,s0,52
   182d8:	b18fe0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   182dc:	fd9ff06f          	jal	zero,182b4 <dwarf::unit::~unit()+0x98>

00000000000182e0 <dwarf::unit::~unit()>:
   182e0:	ff010113          	addi	sp,sp,-16
   182e4:	00113423          	sd	ra,8(sp)
   182e8:	00813023          	sd	s0,0(sp)
   182ec:	00050413          	addi	s0,a0,0
   182f0:	f2dff0ef          	jal	ra,1821c <dwarf::unit::~unit()>
   182f4:	00040513          	addi	a0,s0,0
   182f8:	ca8fe0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   182fc:	00813083          	ld	ra,8(sp)
   18300:	00013403          	ld	s0,0(sp)
   18304:	01010113          	addi	sp,sp,16
   18308:	00008067          	jalr	zero,0(ra)

000000000001830c <dwarf::unit::get_dwarf() const>:

const dwarf &unit::get_dwarf() const { return m->file; }
   1830c:	00853503          	ld	a0,8(a0)
   18310:	00008067          	jalr	zero,0(ra)

0000000000018314 <dwarf::unit::get_section_offset() const>:

section_offset unit::get_section_offset() const { return m->offset; }
   18314:	00853783          	ld	a5,8(a0)
   18318:	0107b503          	ld	a0,16(a5)
   1831c:	00008067          	jalr	zero,0(ra)

0000000000018320 <dwarf::unit::data() const>:
    m->root.read(m->root_offset);
  }
  return m->root;
}

const std::shared_ptr<section> &unit::data() const { return m->subsec; }
   18320:	00853503          	ld	a0,8(a0)
   18324:	01850513          	addi	a0,a0,24
   18328:	00008067          	jalr	zero,0(ra)

000000000001832c <dwarf::type_unit::get_type_signature() const>:

  m = make_shared<impl>(file, offset, subsec, debug_abbrev_offset,
                        sub.get_section_offset(), type_signature, type_offset);
}

uint64_t type_unit::get_type_signature() const { return m->type_signature; }
   1832c:	00853783          	ld	a5,8(a0)
   18330:	0387b503          	ld	a0,56(a5)
   18334:	00008067          	jalr	zero,0(ra)

0000000000018338 <dwarf::dwarf::get_section(dwarf::section_type) const>:
std::shared_ptr<section> dwarf::get_section(section_type type) const {
   18338:	f5010113          	addi	sp,sp,-176
   1833c:	0a113423          	sd	ra,168(sp)
   18340:	0a813023          	sd	s0,160(sp)
   18344:	08913c23          	sd	s1,152(sp)
   18348:	09213823          	sd	s2,144(sp)
   1834c:	09313423          	sd	s3,136(sp)
   18350:	09413023          	sd	s4,128(sp)
   18354:	00050413          	addi	s0,a0,0
   18358:	00058493          	addi	s1,a1,0
   1835c:	00c12623          	sw	a2,12(sp)
  if (type == section_type::info)
   18360:	00300713          	addi	a4,zero,3
   18364:	06e60263          	beq	a2,a4,183c8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x90>
   18368:	00060793          	addi	a5,a2,0
  if (type == section_type::abbrev)
   1836c:	0a061a63          	bne	a2,zero,18420 <dwarf::dwarf::get_section(dwarf::section_type) const+0xe8>
      { return _M_ptr; }
   18370:	0005b783          	ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18374:	0207b703          	ld	a4,32(a5)
   18378:	00e53023          	sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   1837c:	0287b503          	ld	a0,40(a5)
   18380:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   18384:	02050063          	beq	a0,zero,183a4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
    if (__is_single_threaded())
   18388:	0002b797          	auipc	a5,0x2b
   1838c:	1107b783          	ld	a5,272(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18390:	0007c783          	lbu	a5,0(a5)
   18394:	06078e63          	beq	a5,zero,18410 <dwarf::dwarf::get_section(dwarf::section_type) const+0xd8>
  { *__mem += __val; }
   18398:	03052783          	lw	a5,48(a0)
   1839c:	0017879b          	addiw	a5,a5,1
   183a0:	02f52823          	sw	a5,48(a0)
}
   183a4:	00040513          	addi	a0,s0,0
   183a8:	0a813083          	ld	ra,168(sp)
   183ac:	0a013403          	ld	s0,160(sp)
   183b0:	09813483          	ld	s1,152(sp)
   183b4:	09013903          	ld	s2,144(sp)
   183b8:	08813983          	ld	s3,136(sp)
   183bc:	08013a03          	ld	s4,128(sp)
   183c0:	0b010113          	addi	sp,sp,176
   183c4:	00008067          	jalr	zero,0(ra)
      { return _M_ptr; }
   183c8:	0005b783          	ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   183cc:	0107b703          	ld	a4,16(a5)
   183d0:	00e53023          	sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   183d4:	0187b503          	ld	a0,24(a5)
   183d8:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   183dc:	fc0504e3          	beq	a0,zero,183a4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
    if (__is_single_threaded())
   183e0:	0002b797          	auipc	a5,0x2b
   183e4:	0b87b783          	ld	a5,184(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   183e8:	0007c783          	lbu	a5,0(a5)
   183ec:	00078a63          	beq	a5,zero,18400 <dwarf::dwarf::get_section(dwarf::section_type) const+0xc8>
  { *__mem += __val; }
   183f0:	03052783          	lw	a5,48(a0)
   183f4:	0017879b          	addiw	a5,a5,1
   183f8:	02f52823          	sw	a5,48(a0)
   183fc:	fa9ff06f          	jal	zero,183a4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
      __atomic_add(__mem, __val);
   18400:	00100593          	addi	a1,zero,1
   18404:	03050513          	addi	a0,a0,48
   18408:	9a8fe0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1840c:	f99ff06f          	jal	zero,183a4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
   18410:	00100593          	addi	a1,zero,1
   18414:	03050513          	addi	a0,a0,48
   18418:	998fe0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1841c:	f89ff06f          	jal	zero,183a4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
      { return _M_ptr; }
   18420:	0005b583          	ld	a1,0(a1)
      _M_rightmost() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_header._M_right; }

      _Link_type
      _M_mbegin() const _GLIBCXX_NOEXCEPT
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   18424:	0985b703          	ld	a4,152(a1)
	  (this->_M_impl._M_header._M_parent);
      }

      _Base_ptr
      _M_end() _GLIBCXX_NOEXCEPT
      { return &this->_M_impl._M_header; }
   18428:	09058513          	addi	a0,a1,144
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Base_ptr __y,
		   const _Key& __k)
    {
      while (__x != 0)
   1842c:	38070e63          	beq	a4,zero,187c8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x490>
   18430:	00050613          	addi	a2,a0,0
   18434:	00c0006f          	jal	zero,18440 <dwarf::dwarf::get_section(dwarf::section_type) const+0x108>
      { return static_cast<_Link_type>(__x->_M_right); }
   18438:	01873703          	ld	a4,24(a4)
      while (__x != 0)
   1843c:	00070c63          	beq	a4,zero,18454 <dwarf::dwarf::get_section(dwarf::section_type) const+0x11c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   18440:	02072683          	lw	a3,32(a4)
   18444:	fef6cae3          	blt	a3,a5,18438 <dwarf::dwarf::get_section(dwarf::section_type) const+0x100>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   18448:	00070613          	addi	a2,a4,0
	  __y = __x, __x = _S_left(__x);
   1844c:	01073703          	ld	a4,16(a4)
   18450:	fedff06f          	jal	zero,1843c <dwarf::dwarf::get_section(dwarf::section_type) const+0x104>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   18454:	36c50a63          	beq	a0,a2,187c8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x490>
	      || _M_impl._M_key_compare(__k,
   18458:	02062703          	lw	a4,32(a2)
   1845c:	36e7c663          	blt	a5,a4,187c8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x490>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18460:	02863783          	ld	a5,40(a2)
   18464:	00f43023          	sd	a5,0(s0)
      : _M_pi(__r._M_pi)
   18468:	03063503          	ld	a0,48(a2)
   1846c:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   18470:	f2050ae3          	beq	a0,zero,183a4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
    if (__is_single_threaded())
   18474:	0002b797          	auipc	a5,0x2b
   18478:	0247b783          	ld	a5,36(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1847c:	0007c783          	lbu	a5,0(a5)
   18480:	00078a63          	beq	a5,zero,18494 <dwarf::dwarf::get_section(dwarf::section_type) const+0x15c>
  { *__mem += __val; }
   18484:	03052783          	lw	a5,48(a0)
   18488:	0017879b          	addiw	a5,a5,1
   1848c:	02f52823          	sw	a5,48(a0)
   18490:	f15ff06f          	jal	zero,183a4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
      __atomic_add(__mem, __val);
   18494:	00100593          	addi	a1,zero,1
   18498:	03050513          	addi	a0,a0,48
   1849c:	914fe0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   184a0:	f05ff06f          	jal	zero,183a4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
                       " section missing");
   184a4:	01000513          	addi	a0,zero,16
   184a8:	9e8fe0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   184ac:	00050493          	addi	s1,a0,0
    throw format_error(std::string(elf::section_type_to_name(type)) +
   184b0:	00c12503          	lw	a0,12(sp)
   184b4:	469150ef          	jal	ra,2e11c <dwarf::elf::section_type_to_name(dwarf::section_type)>
   184b8:	00050593          	addi	a1,a0,0
   184bc:	05810613          	addi	a2,sp,88
   184c0:	01010513          	addi	a0,sp,16
   184c4:	bbcfe0ef          	jal	ra,16880 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
	      const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }
   184c8:	0001f597          	auipc	a1,0x1f
   184cc:	2e858593          	addi	a1,a1,744 # 377b0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x30>
   184d0:	01010513          	addi	a0,sp,16
   184d4:	d6cfe0ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   184d8:	00050593          	addi	a1,a0,0
   184dc:	03010413          	addi	s0,sp,48
   184e0:	00040513          	addi	a0,s0,0
   184e4:	9ecfe0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   184e8:	00040593          	addi	a1,s0,0
   184ec:	00048513          	addi	a0,s1,0
   184f0:	b40fe0ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   184f4:	0002b797          	auipc	a5,0x2b
   184f8:	07c7b783          	ld	a5,124(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   184fc:	01078793          	addi	a5,a5,16
   18500:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   18504:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   18508:	04010793          	addi	a5,sp,64
   1850c:	00f50463          	beq	a0,a5,18514 <dwarf::dwarf::get_section(dwarf::section_type) const+0x1dc>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   18510:	a90fe0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   18514:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   18518:	02010793          	addi	a5,sp,32
   1851c:	00f50463          	beq	a0,a5,18524 <dwarf::dwarf::get_section(dwarf::section_type) const+0x1ec>
   18520:	a80fe0ef          	jal	ra,167a0 <operator delete(void*)@plt>
                       " section missing");
   18524:	0002b617          	auipc	a2,0x2b
   18528:	e7463603          	ld	a2,-396(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   1852c:	0002b597          	auipc	a1,0x2b
   18530:	d9c5b583          	ld	a1,-612(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   18534:	00048513          	addi	a0,s1,0
   18538:	c28fe0ef          	jal	ra,16960 <__cxa_throw@plt>
      { return static_cast<_Link_type>(__x->_M_right); }
   1853c:	0187b783          	ld	a5,24(a5)
      while (__x != 0)
   18540:	00078c63          	beq	a5,zero,18558 <dwarf::dwarf::get_section(dwarf::section_type) const+0x220>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   18544:	0207a703          	lw	a4,32(a5)
   18548:	fed74ae3          	blt	a4,a3,1853c <dwarf::dwarf::get_section(dwarf::section_type) const+0x204>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1854c:	00078913          	addi	s2,a5,0
	  __y = __x, __x = _S_left(__x);
   18550:	0107b783          	ld	a5,16(a5)
   18554:	fedff06f          	jal	zero,18540 <dwarf::dwarf::get_section(dwarf::section_type) const+0x208>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   18558:	10c90663          	beq	s2,a2,18664 <dwarf::dwarf::get_section(dwarf::section_type) const+0x32c>
   1855c:	02092783          	lw	a5,32(s2)
   18560:	02f6da63          	bge	a3,a5,18594 <dwarf::dwarf::get_section(dwarf::section_type) const+0x25c>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }
   18564:	00c10793          	addi	a5,sp,12
   18568:	06f13423          	sd	a5,104(sp)
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   1856c:	06010713          	addi	a4,sp,96
   18570:	06810693          	addi	a3,sp,104
   18574:	0001f617          	auipc	a2,0x1f
   18578:	55c60613          	addi	a2,a2,1372 # 37ad0 <std::piecewise_construct>
   1857c:	00090593          	addi	a1,s2,0
   18580:	08850513          	addi	a0,a0,136
   18584:	0002b317          	auipc	t1,0x2b
   18588:	e3433303          	ld	t1,-460(t1) # 433b8 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)@@Base+0x26744>
   1858c:	000300e7          	jalr	ra,0(t1)
   18590:	00050913          	addi	s2,a0,0
      { return _M_ptr; }
   18594:	0004b783          	ld	a5,0(s1)
   18598:	0107ba03          	ld	s4,16(a5)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1859c:	06000513          	addi	a0,zero,96
   185a0:	a10fe0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   185a4:	00052423          	sw	zero,8(a0)
   185a8:	00052623          	sw	zero,12(a0)
   185ac:	00052823          	sw	zero,16(a0)
   185b0:	00052a23          	sw	zero,20(a0)
   185b4:	00052c23          	sw	zero,24(a0)
   185b8:	00052e23          	sw	zero,28(a0)
   185bc:	02053023          	sd	zero,32(a0)
   185c0:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   185c4:	00100793          	addi	a5,zero,1
   185c8:	02f52823          	sw	a5,48(a0)
   185cc:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   185d0:	0002b797          	auipc	a5,0x2b
   185d4:	0087b783          	ld	a5,8(a5) # 435d8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   185d8:	01078793          	addi	a5,a5,16
   185dc:	00f53023          	sd	a5,0(a0)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   185e0:	01ca2703          	lw	a4,28(s4)
  const byte_order ord;
  unsigned addr_size;

  section(section_type type, const void *begin, section_length length,
          byte_order ord, format fmt = format::unknown, unsigned addr_size = 0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   185e4:	00a00793          	addi	a5,zero,10
   185e8:	02f52c23          	sw	a5,56(a0)
   185ec:	05353023          	sd	s3,64(a0)
   185f0:	05013783          	ld	a5,80(sp)
   185f4:	00f987b3          	add	a5,s3,a5
   185f8:	04f53423          	sd	a5,72(a0)
   185fc:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   18600:	04e52a23          	sw	a4,84(a0)
   18604:	04052c23          	sw	zero,88(a0)
   18608:	03850793          	addi	a5,a0,56
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   1860c:	02f93423          	sd	a5,40(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   18610:	03093983          	ld	s3,48(s2)
	__r._M_pi = _M_pi;
   18614:	02a93823          	sd	a0,48(s2)
	if (_M_pi != nullptr)
   18618:	02098463          	beq	s3,zero,18640 <dwarf::dwarf::get_section(dwarf::section_type) const+0x308>
    if (__is_single_threaded())
   1861c:	0002b797          	auipc	a5,0x2b
   18620:	e7c7b783          	ld	a5,-388(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18624:	0007c783          	lbu	a5,0(a5)
   18628:	04078263          	beq	a5,zero,1866c <dwarf::dwarf::get_section(dwarf::section_type) const+0x334>
    _Atomic_word __result = *__mem;
   1862c:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   18630:	fff5079b          	addiw	a5,a0,-1
   18634:	02f9a823          	sw	a5,48(s3)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18638:	00100793          	addi	a5,zero,1
   1863c:	04f50063          	beq	a0,a5,1867c <dwarf::dwarf::get_section(dwarf::section_type) const+0x344>
      { return _M_ptr; }
   18640:	0004b503          	ld	a0,0(s1)
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   18644:	09853783          	ld	a5,152(a0)
      { return &this->_M_impl._M_header; }
   18648:	09050613          	addi	a2,a0,144
      while (__x != 0)
   1864c:	10078c63          	beq	a5,zero,18764 <dwarf::dwarf::get_section(dwarf::section_type) const+0x42c>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
   18650:	00c12683          	lw	a3,12(sp)
   18654:	00060593          	addi	a1,a2,0
   18658:	08c0006f          	jal	zero,186e4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3ac>
   1865c:	00060913          	addi	s2,a2,0
   18660:	f05ff06f          	jal	zero,18564 <dwarf::dwarf::get_section(dwarf::section_type) const+0x22c>
   18664:	00060913          	addi	s2,a2,0
   18668:	efdff06f          	jal	zero,18564 <dwarf::dwarf::get_section(dwarf::section_type) const+0x22c>
      return __exchange_and_add(__mem, __val);
   1866c:	fff00593          	addi	a1,zero,-1
   18670:	03098513          	addi	a0,s3,48
   18674:	f7dfd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18678:	fc1ff06f          	jal	zero,18638 <dwarf::dwarf::get_section(dwarf::section_type) const+0x300>
	_M_dispose();
   1867c:	0009b783          	ld	a5,0(s3)
   18680:	0107b783          	ld	a5,16(a5)
   18684:	00098513          	addi	a0,s3,0
   18688:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1868c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18690:	0002b797          	auipc	a5,0x2b
   18694:	e087b783          	ld	a5,-504(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18698:	0007c783          	lbu	a5,0(a5)
   1869c:	02078663          	beq	a5,zero,186c8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x390>
    _Atomic_word __result = *__mem;
   186a0:	0349a783          	lw	a5,52(s3)
    *__mem += __val;
   186a4:	fff7871b          	addiw	a4,a5,-1
   186a8:	02e9aa23          	sw	a4,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   186ac:	00100713          	addi	a4,zero,1
   186b0:	f8e798e3          	bne	a5,a4,18640 <dwarf::dwarf::get_section(dwarf::section_type) const+0x308>
	    _M_destroy();
   186b4:	0009b783          	ld	a5,0(s3)
   186b8:	0187b783          	ld	a5,24(a5)
   186bc:	00098513          	addi	a0,s3,0
   186c0:	000780e7          	jalr	ra,0(a5)
   186c4:	f7dff06f          	jal	zero,18640 <dwarf::dwarf::get_section(dwarf::section_type) const+0x308>
      return __exchange_and_add(__mem, __val);
   186c8:	fff00593          	addi	a1,zero,-1
   186cc:	03498513          	addi	a0,s3,52
   186d0:	f21fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   186d4:	00050793          	addi	a5,a0,0
   186d8:	fd5ff06f          	jal	zero,186ac <dwarf::dwarf::get_section(dwarf::section_type) const+0x374>
      { return static_cast<_Link_type>(__x->_M_right); }
   186dc:	0187b783          	ld	a5,24(a5)
      while (__x != 0)
   186e0:	00078c63          	beq	a5,zero,186f8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3c0>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   186e4:	0207a703          	lw	a4,32(a5)
   186e8:	fed74ae3          	blt	a4,a3,186dc <dwarf::dwarf::get_section(dwarf::section_type) const+0x3a4>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   186ec:	00078593          	addi	a1,a5,0
	  __y = __x, __x = _S_left(__x);
   186f0:	0107b783          	ld	a5,16(a5)
   186f4:	fedff06f          	jal	zero,186e0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3a8>
	if (__i == end() || key_comp()(__k, (*__i).first))
   186f8:	06c58a63          	beq	a1,a2,1876c <dwarf::dwarf::get_section(dwarf::section_type) const+0x434>
   186fc:	0205a783          	lw	a5,32(a1)
   18700:	02f6d863          	bge	a3,a5,18730 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3f8>
   18704:	00c10793          	addi	a5,sp,12
   18708:	06f13c23          	sd	a5,120(sp)
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   1870c:	07010713          	addi	a4,sp,112
   18710:	07810693          	addi	a3,sp,120
   18714:	0001f617          	auipc	a2,0x1f
   18718:	3bc60613          	addi	a2,a2,956 # 37ad0 <std::piecewise_construct>
   1871c:	08850513          	addi	a0,a0,136
   18720:	0002b317          	auipc	t1,0x2b
   18724:	c9833303          	ld	t1,-872(t1) # 433b8 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)@@Base+0x26744>
   18728:	000300e7          	jalr	ra,0(t1)
   1872c:	00050593          	addi	a1,a0,0
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18730:	0285b783          	ld	a5,40(a1)
   18734:	00f43023          	sd	a5,0(s0)
      : _M_pi(__r._M_pi)
   18738:	0305b503          	ld	a0,48(a1)
   1873c:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   18740:	c60502e3          	beq	a0,zero,183a4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
    if (__is_single_threaded())
   18744:	0002b797          	auipc	a5,0x2b
   18748:	d547b783          	ld	a5,-684(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1874c:	0007c783          	lbu	a5,0(a5)
   18750:	02078263          	beq	a5,zero,18774 <dwarf::dwarf::get_section(dwarf::section_type) const+0x43c>
  { *__mem += __val; }
   18754:	03052783          	lw	a5,48(a0)
   18758:	0017879b          	addiw	a5,a5,1
   1875c:	02f52823          	sw	a5,48(a0)
   18760:	c45ff06f          	jal	zero,183a4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
      while (__x != 0)
   18764:	00060593          	addi	a1,a2,0
   18768:	f9dff06f          	jal	zero,18704 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3cc>
   1876c:	00060593          	addi	a1,a2,0
   18770:	f95ff06f          	jal	zero,18704 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3cc>
      __atomic_add(__mem, __val);
   18774:	00100593          	addi	a1,zero,1
   18778:	03050513          	addi	a0,a0,48
   1877c:	e35fd0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18780:	c25ff06f          	jal	zero,183a4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
      { return _M_dataplus._M_p; }
   18784:	00050413          	addi	s0,a0,0
   18788:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   1878c:	04010793          	addi	a5,sp,64
   18790:	00f50463          	beq	a0,a5,18798 <dwarf::dwarf::get_section(dwarf::section_type) const+0x460>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   18794:	80cfe0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   18798:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   1879c:	02010793          	addi	a5,sp,32
   187a0:	00f50463          	beq	a0,a5,187a8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x470>
   187a4:	ffdfd0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   187a8:	00048513          	addi	a0,s1,0
   187ac:	fa5fd0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   187b0:	00040513          	addi	a0,s0,0
   187b4:	9dcfe0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   187b8:	00050413          	addi	s0,a0,0
   187bc:	fddff06f          	jal	zero,18798 <dwarf::dwarf::get_section(dwarf::section_type) const+0x460>
   187c0:	00050413          	addi	s0,a0,0
   187c4:	fe5ff06f          	jal	zero,187a8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x470>
      { return _M_ptr; }
   187c8:	0005b503          	ld	a0,0(a1)
  const void *data = m->l->load(type, &size);
   187cc:	00053703          	ld	a4,0(a0)
   187d0:	01073703          	ld	a4,16(a4)
   187d4:	05010613          	addi	a2,sp,80
   187d8:	00078593          	addi	a1,a5,0
   187dc:	000700e7          	jalr	ra,0(a4)
   187e0:	00050993          	addi	s3,a0,0
  if (!data)
   187e4:	cc0500e3          	beq	a0,zero,184a4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x16c>
   187e8:	0004b503          	ld	a0,0(s1)
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   187ec:	09853783          	ld	a5,152(a0)
      { return &this->_M_impl._M_header; }
   187f0:	09050613          	addi	a2,a0,144
      while (__x != 0)
   187f4:	e60784e3          	beq	a5,zero,1865c <dwarf::dwarf::get_section(dwarf::section_type) const+0x324>
   187f8:	00c12683          	lw	a3,12(sp)
   187fc:	00060913          	addi	s2,a2,0
   18800:	d45ff06f          	jal	zero,18544 <dwarf::dwarf::get_section(dwarf::section_type) const+0x20c>

0000000000018804 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)>:
compilation_unit::compilation_unit(const dwarf &file, section_offset offset) {
   18804:	f3010113          	addi	sp,sp,-208
   18808:	0c113423          	sd	ra,200(sp)
   1880c:	0c813023          	sd	s0,192(sp)
   18810:	0a913c23          	sd	s1,184(sp)
   18814:	0b213823          	sd	s2,176(sp)
   18818:	0b313423          	sd	s3,168(sp)
   1881c:	0b413023          	sd	s4,160(sp)
   18820:	09513c23          	sd	s5,152(sp)
   18824:	09613823          	sd	s6,144(sp)
   18828:	00050493          	addi	s1,a0,0
   1882c:	00058913          	addi	s2,a1,0
   18830:	00060993          	addi	s3,a2,0
      : _M_ptr(0), _M_refcount()
   18834:	00053423          	sd	zero,8(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   18838:	00053823          	sd	zero,16(a0)
   1883c:	0002b797          	auipc	a5,0x2b
   18840:	a947b783          	ld	a5,-1388(a5) # 432d0 <vtable for dwarf::compilation_unit@@Base+0x980>
   18844:	01078793          	addi	a5,a5,16
   18848:	00f53023          	sd	a5,0(a0)
  cursor cur(file.get_section(section_type::info), offset);
   1884c:	00300613          	addi	a2,zero,3
   18850:	08010513          	addi	a0,sp,128
   18854:	ae5ff0ef          	jal	ra,18338 <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18858:	08013783          	ld	a5,128(sp)
   1885c:	00f13823          	sd	a5,16(sp)
      : _M_pi(__r._M_pi)
   18860:	08813503          	ld	a0,136(sp)
   18864:	00a13c23          	sd	a0,24(sp)
	if (_M_pi != nullptr)
   18868:	02050063          	beq	a0,zero,18888 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x84>
    if (__is_single_threaded())
   1886c:	0002b797          	auipc	a5,0x2b
   18870:	c2c7b783          	ld	a5,-980(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18874:	0007c783          	lbu	a5,0(a5)
   18878:	04078e63          	beq	a5,zero,188d4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xd0>
  { *__mem += __val; }
   1887c:	03052783          	lw	a5,48(a0)
   18880:	0017879b          	addiw	a5,a5,1
   18884:	02f52823          	sw	a5,48(a0)
  std::shared_ptr<section> sec;
  const char *pos;

  cursor() : pos(nullptr) {}
  cursor(const std::shared_ptr<section> sec, section_offset offset = 0)
      : sec(sec), pos(sec->begin + offset) {}
   18888:	08013783          	ld	a5,128(sp)
   1888c:	0087b783          	ld	a5,8(a5)
   18890:	013787b3          	add	a5,a5,s3
   18894:	02f13023          	sd	a5,32(sp)
	if (_M_pi != nullptr)
   18898:	08813403          	ld	s0,136(sp)
   1889c:	02040463          	beq	s0,zero,188c4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xc0>
    if (__is_single_threaded())
   188a0:	0002b797          	auipc	a5,0x2b
   188a4:	bf87b783          	ld	a5,-1032(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   188a8:	0007c783          	lbu	a5,0(a5)
   188ac:	02078c63          	beq	a5,zero,188e4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xe0>
    _Atomic_word __result = *__mem;
   188b0:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   188b4:	fff5079b          	addiw	a5,a0,-1
   188b8:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   188bc:	00100793          	addi	a5,zero,1
   188c0:	02f50a63          	beq	a0,a5,188f4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xf0>
  std::shared_ptr<section> subsec = cur.subsection();
   188c4:	01010593          	addi	a1,sp,16
   188c8:	00010513          	addi	a0,sp,0
   188cc:	5bc050ef          	jal	ra,1de88 <dwarf::cursor::subsection()>
   188d0:	0800006f          	jal	zero,18950 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x14c>
      __atomic_add(__mem, __val);
   188d4:	00100593          	addi	a1,zero,1
   188d8:	03050513          	addi	a0,a0,48
   188dc:	cd5fd0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   188e0:	fa9ff06f          	jal	zero,18888 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x84>
      return __exchange_and_add(__mem, __val);
   188e4:	fff00593          	addi	a1,zero,-1
   188e8:	03040513          	addi	a0,s0,48
   188ec:	d05fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   188f0:	fcdff06f          	jal	zero,188bc <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xb8>
	_M_dispose();
   188f4:	00043783          	ld	a5,0(s0)
   188f8:	0107b783          	ld	a5,16(a5)
   188fc:	00040513          	addi	a0,s0,0
   18900:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18904:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18908:	0002b797          	auipc	a5,0x2b
   1890c:	b907b783          	ld	a5,-1136(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18910:	0007c783          	lbu	a5,0(a5)
   18914:	02078663          	beq	a5,zero,18940 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x13c>
    _Atomic_word __result = *__mem;
   18918:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1891c:	fff5079b          	addiw	a5,a0,-1
   18920:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18924:	00100793          	addi	a5,zero,1
   18928:	f8f51ee3          	bne	a0,a5,188c4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xc0>
	    _M_destroy();
   1892c:	00043783          	ld	a5,0(s0)
   18930:	0187b783          	ld	a5,24(a5)
   18934:	00040513          	addi	a0,s0,0
   18938:	000780e7          	jalr	ra,0(a5)
   1893c:	f89ff06f          	jal	zero,188c4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xc0>
      return __exchange_and_add(__mem, __val);
   18940:	fff00593          	addi	a1,zero,-1
   18944:	03440513          	addi	a0,s0,52
   18948:	ca9fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1894c:	fd9ff06f          	jal	zero,18924 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x120>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18950:	00013a03          	ld	s4,0(sp)
      : _M_pi(__r._M_pi)
   18954:	00813403          	ld	s0,8(sp)
	if (_M_pi != nullptr)
   18958:	6e040c63          	beq	s0,zero,19050 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x84c>
    if (__is_single_threaded())
   1895c:	0002b797          	auipc	a5,0x2b
   18960:	b3c7b783          	ld	a5,-1220(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18964:	0007c783          	lbu	a5,0(a5)
   18968:	0a078663          	beq	a5,zero,18a14 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x210>
  { *__mem += __val; }
   1896c:	03042783          	lw	a5,48(s0)
   18970:	0017879b          	addiw	a5,a5,1
   18974:	02f42823          	sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18978:	03413423          	sd	s4,40(sp)
      : _M_pi(__r._M_pi)
   1897c:	02813823          	sd	s0,48(sp)
    if (__is_single_threaded())
   18980:	0002b797          	auipc	a5,0x2b
   18984:	b187b783          	ld	a5,-1256(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18988:	0007c783          	lbu	a5,0(a5)
   1898c:	08078c63          	beq	a5,zero,18a24 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x220>
  { *__mem += __val; }
   18990:	03042783          	lw	a5,48(s0)
   18994:	0017879b          	addiw	a5,a5,1
   18998:	02f42823          	sw	a5,48(s0)
   1899c:	008a3783          	ld	a5,8(s4)
   189a0:	02f13c23          	sd	a5,56(sp)
    if (__is_single_threaded())
   189a4:	0002b797          	auipc	a5,0x2b
   189a8:	af47b783          	ld	a5,-1292(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   189ac:	0007c783          	lbu	a5,0(a5)
   189b0:	08078263          	beq	a5,zero,18a34 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x230>
    _Atomic_word __result = *__mem;
   189b4:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   189b8:	fff5079b          	addiw	a5,a0,-1
   189bc:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   189c0:	00100793          	addi	a5,zero,1
   189c4:	68f51e63          	bne	a0,a5,19060 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x85c>
	_M_dispose();
   189c8:	00043783          	ld	a5,0(s0)
   189cc:	0107b783          	ld	a5,16(a5)
   189d0:	00040513          	addi	a0,s0,0
   189d4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   189d8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   189dc:	0002b797          	auipc	a5,0x2b
   189e0:	abc7b783          	ld	a5,-1348(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   189e4:	0007c783          	lbu	a5,0(a5)
   189e8:	04078e63          	beq	a5,zero,18a44 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x240>
    _Atomic_word __result = *__mem;
   189ec:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   189f0:	fff5079b          	addiw	a5,a0,-1
   189f4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   189f8:	00100793          	addi	a5,zero,1
   189fc:	66f51263          	bne	a0,a5,19060 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x85c>
	    _M_destroy();
   18a00:	00043783          	ld	a5,0(s0)
   18a04:	0187b783          	ld	a5,24(a5)
   18a08:	00040513          	addi	a0,s0,0
   18a0c:	000780e7          	jalr	ra,0(a5)
   18a10:	6500006f          	jal	zero,19060 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x85c>
      __atomic_add(__mem, __val);
   18a14:	00100593          	addi	a1,zero,1
   18a18:	03040513          	addi	a0,s0,48
   18a1c:	b95fd0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18a20:	f59ff06f          	jal	zero,18978 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x174>
   18a24:	00100593          	addi	a1,zero,1
   18a28:	03040513          	addi	a0,s0,48
   18a2c:	b85fd0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18a30:	f6dff06f          	jal	zero,1899c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x198>
      return __exchange_and_add(__mem, __val);
   18a34:	fff00593          	addi	a1,zero,-1
   18a38:	03040513          	addi	a0,s0,48
   18a3c:	bb5fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18a40:	f81ff06f          	jal	zero,189c0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x1bc>
   18a44:	fff00593          	addi	a1,zero,-1
   18a48:	03440513          	addi	a0,s0,52
   18a4c:	ba5fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18a50:	fa9ff06f          	jal	zero,189f8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x1f4>
  section_offset offset();
  void string(std::string &out);
  const char *cstr(size_t *size_out = nullptr);

  void ensure(section_offset bytes) {
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   18a54:	02813783          	ld	a5,40(sp)
   18a58:	0107b703          	ld	a4,16(a5)
   18a5c:	03813783          	ld	a5,56(sp)
   18a60:	40f70633          	sub	a2,a4,a5
   18a64:	00100693          	addi	a3,zero,1
   18a68:	00c6f463          	bgeu	a3,a2,18a70 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x26c>
   18a6c:	00e7e663          	bltu	a5,a4,18a78 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x274>
      underflow();
   18a70:	02810513          	addi	a0,sp,40
   18a74:	6d1040ef          	jal	ra,1d944 <dwarf::cursor::underflow()>

  template <typename T> T fixed() {
    ensure(sizeof(T));
    static_assert(sizeof(T) <= 8, "T too big");
    uint64_t val = 0;
    const unsigned char *p = (const unsigned char *)pos;
   18a78:	03813703          	ld	a4,56(sp)
    if (sec->ord == byte_order::lsb) {
   18a7c:	02813783          	ld	a5,40(sp)
   18a80:	01c7a783          	lw	a5,28(a5)
   18a84:	04079263          	bne	a5,zero,18ac8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x2c4>
      for (unsigned i = 0; i < sizeof(T); i++)
        val |= ((uint64_t)p[i]) << (i * 8);
   18a88:	00174783          	lbu	a5,1(a4)
   18a8c:	00879793          	slli	a5,a5,0x8
   18a90:	00074683          	lbu	a3,0(a4)
   18a94:	00d7e7b3          	or	a5,a5,a3
    } else {
      for (unsigned i = 0; i < sizeof(T); i++)
        val = (val << 8) | (uint64_t)p[i];
    }
    pos += sizeof(T);
   18a98:	00270713          	addi	a4,a4,2
   18a9c:	02e13c23          	sd	a4,56(sp)
    return (T)val;
   18aa0:	03079413          	slli	s0,a5,0x30
   18aa4:	03045413          	srli	s0,s0,0x30
  if (version < 2 || version > 4)
   18aa8:	ffe7879b          	addiw	a5,a5,-2
   18aac:	03079793          	slli	a5,a5,0x30
   18ab0:	0307d793          	srli	a5,a5,0x30
   18ab4:	00200713          	addi	a4,zero,2
   18ab8:	02f76263          	bltu	a4,a5,18adc <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x2d8>
  section_offset debug_abbrev_offset = sub.offset();
   18abc:	02810513          	addi	a0,sp,40
   18ac0:	610050ef          	jal	ra,1e0d0 <dwarf::cursor::offset()>
   18ac4:	0bc0006f          	jal	zero,18b80 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x37c>
        val = (val << 8) | (uint64_t)p[i];
   18ac8:	00074783          	lbu	a5,0(a4)
   18acc:	00879793          	slli	a5,a5,0x8
   18ad0:	00174683          	lbu	a3,1(a4)
   18ad4:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   18ad8:	fc1ff06f          	jal	zero,18a98 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x294>
                       std::to_string(version));
   18adc:	01000513          	addi	a0,zero,16
   18ae0:	bb1fd0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   18ae4:	00050913          	addi	s2,a0,0
   18ae8:	00040593          	addi	a1,s0,0
   18aec:	06010413          	addi	s0,sp,96
   18af0:	00040513          	addi	a0,s0,0
   18af4:	0002b317          	auipc	t1,0x2b
   18af8:	9b433303          	ld	t1,-1612(t1) # 434a8 <std::__cxx11::to_string(int)@@Base+0x278c0>
   18afc:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   18b00:	0001f617          	auipc	a2,0x1f
   18b04:	cc860613          	addi	a2,a2,-824 # 377c8 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x48>
   18b08:	00000593          	addi	a1,zero,0
   18b0c:	00040513          	addi	a0,s0,0
   18b10:	af1fd0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   18b14:	00050593          	addi	a1,a0,0
   18b18:	04010413          	addi	s0,sp,64
   18b1c:	00040513          	addi	a0,s0,0
   18b20:	bb1fd0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   18b24:	00040593          	addi	a1,s0,0
   18b28:	00090513          	addi	a0,s2,0
   18b2c:	d05fd0ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   18b30:	0002b797          	auipc	a5,0x2b
   18b34:	a407b783          	ld	a5,-1472(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   18b38:	01078793          	addi	a5,a5,16
   18b3c:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   18b40:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   18b44:	05010793          	addi	a5,sp,80
   18b48:	00f50463          	beq	a0,a5,18b50 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x34c>
   18b4c:	c55fd0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   18b50:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   18b54:	07010793          	addi	a5,sp,112
   18b58:	00f50463          	beq	a0,a5,18b60 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x35c>
   18b5c:	c45fd0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   18b60:	0002b617          	auipc	a2,0x2b
   18b64:	83863603          	ld	a2,-1992(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   18b68:	0002a597          	auipc	a1,0x2a
   18b6c:	7605b583          	ld	a1,1888(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   18b70:	00090513          	addi	a0,s2,0
   18b74:	dedfd0ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   18b78:	00050413          	addi	s0,a0,0
   18b7c:	4480006f          	jal	zero,18fc4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7c0>
  section_offset debug_abbrev_offset = sub.offset();
   18b80:	00050a93          	addi	s5,a0,0
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   18b84:	02813783          	ld	a5,40(sp)
   18b88:	0107b703          	ld	a4,16(a5)
   18b8c:	03813783          	ld	a5,56(sp)
   18b90:	00e7e663          	bltu	a5,a4,18b9c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x398>
      underflow();
   18b94:	02810513          	addi	a0,sp,40
   18b98:	5ad040ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   18b9c:	03813783          	ld	a5,56(sp)
      { return _M_ptr; }
   18ba0:	02813703          	ld	a4,40(sp)
    if (sec->ord == byte_order::lsb) {
   18ba4:	01c72683          	lw	a3,28(a4)
   18ba8:	48068063          	beq	a3,zero,19028 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x824>
        val = (val << 8) | (uint64_t)p[i];
   18bac:	0007c603          	lbu	a2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   18bb0:	47c0006f          	jal	zero,1902c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x828>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   18bb4:	00050413          	addi	s0,a0,0
   18bb8:	00052423          	sw	zero,8(a0)
   18bbc:	00052623          	sw	zero,12(a0)
   18bc0:	00052823          	sw	zero,16(a0)
   18bc4:	00052a23          	sw	zero,20(a0)
   18bc8:	00052c23          	sw	zero,24(a0)
   18bcc:	00052e23          	sw	zero,28(a0)
   18bd0:	02053023          	sd	zero,32(a0)
   18bd4:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   18bd8:	00100793          	addi	a5,zero,1
   18bdc:	02f52823          	sw	a5,48(a0)
   18be0:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   18be4:	0002b797          	auipc	a5,0x2b
   18be8:	86c7b783          	ld	a5,-1940(a5) # 43450 <vtable for std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xa50>
   18bec:	01078793          	addi	a5,a5,16
   18bf0:	00f53023          	sd	a5,0(a0)
   18bf4:	03850b13          	addi	s6,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18bf8:	00093783          	ld	a5,0(s2)
   18bfc:	02f53c23          	sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   18c00:	00893503          	ld	a0,8(s2)
   18c04:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   18c08:	02050063          	beq	a0,zero,18c28 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x424>
    if (__is_single_threaded())
   18c0c:	0002b797          	auipc	a5,0x2b
   18c10:	88c7b783          	ld	a5,-1908(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18c14:	0007c783          	lbu	a5,0(a5)
   18c18:	1a078863          	beq	a5,zero,18dc8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5c4>
  { *__mem += __val; }
   18c1c:	03052783          	lw	a5,48(a0)
   18c20:	0017879b          	addiw	a5,a5,1
   18c24:	02f52823          	sw	a5,48(a0)
      : file(file), offset(offset), subsec(subsec),
   18c28:	05343423          	sd	s3,72(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18c2c:	00013783          	ld	a5,0(sp)
   18c30:	04f43823          	sd	a5,80(s0)
      : _M_pi(__r._M_pi)
   18c34:	00813503          	ld	a0,8(sp)
   18c38:	04a43c23          	sd	a0,88(s0)
	if (_M_pi != nullptr)
   18c3c:	02050063          	beq	a0,zero,18c5c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x458>
    if (__is_single_threaded())
   18c40:	0002b797          	auipc	a5,0x2b
   18c44:	8587b783          	ld	a5,-1960(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18c48:	0007c783          	lbu	a5,0(a5)
   18c4c:	18078663          	beq	a5,zero,18dd8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5d4>
  { *__mem += __val; }
   18c50:	03052783          	lw	a5,48(a0)
   18c54:	0017879b          	addiw	a5,a5,1
   18c58:	02f52823          	sw	a5,48(a0)
        debug_abbrev_offset(debug_abbrev_offset), root_offset(root_offset),
   18c5c:	07543023          	sd	s5,96(s0)
   18c60:	07443423          	sd	s4,104(s0)
        type_signature(type_signature), type_offset(type_offset),
   18c64:	06043823          	sd	zero,112(s0)
   18c68:	06043c23          	sd	zero,120(s0)
  die() : cu(nullptr), abbrev(nullptr) {}
   18c6c:	08043423          	sd	zero,136(s0)
   18c70:	08043823          	sd	zero,144(s0)
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   18c74:	0a040793          	addi	a5,s0,160
   18c78:	0cf43823          	sd	a5,208(s0)
   18c7c:	0cf43c23          	sd	a5,216(s0)
   18c80:	0d040793          	addi	a5,s0,208
   18c84:	0ef43023          	sd	a5,224(s0)
   18c88:	0e043c23          	sd	zero,248(s0)
   18c8c:	10043023          	sd	zero,256(s0)
   18c90:	11040793          	addi	a5,s0,272
   18c94:	14f43023          	sd	a5,320(s0)
   18c98:	14f43423          	sd	a5,328(s0)
   18c9c:	14040793          	addi	a5,s0,320
   18ca0:	14f43823          	sd	a5,336(s0)
      : _M_ptr(0), _M_refcount()
   18ca4:	16043023          	sd	zero,352(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   18ca8:	16043423          	sd	zero,360(s0)
        have_abbrevs(false) {}
   18cac:	16040823          	sb	zero,368(s0)
   18cb0:	16043c23          	sd	zero,376(s0)
   18cb4:	18043023          	sd	zero,384(s0)
   18cb8:	18043423          	sd	zero,392(s0)
		   const _Hash&, const _Equal&, const allocator_type&,
		   false_type __uks);

    public:
      // Constructor, destructor, assignment, swap
      _Hashtable() = default;
   18cbc:	1c040793          	addi	a5,s0,448
   18cc0:	18f43823          	sd	a5,400(s0)
   18cc4:	00100793          	addi	a5,zero,1
   18cc8:	18f43c23          	sd	a5,408(s0)
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
   18ccc:	1a043023          	sd	zero,416(s0)
   18cd0:	1a043423          	sd	zero,424(s0)
  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
    : _M_max_load_factor(__z), _M_next_resize(0) { }
   18cd4:	0001f797          	auipc	a5,0x1f
   18cd8:	df47a787          	flw	fa5,-524(a5) # 37ac8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xf0>
   18cdc:	1af42827          	fsw	fa5,432(s0)
   18ce0:	1a043c23          	sd	zero,440(s0)
   18ce4:	1c043023          	sd	zero,448(s0)
   18ce8:	0164b423          	sd	s6,8(s1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   18cec:	0104b903          	ld	s2,16(s1)
	__r._M_pi = _M_pi;
   18cf0:	0084b823          	sd	s0,16(s1)
	if (_M_pi != nullptr)
   18cf4:	02090463          	beq	s2,zero,18d1c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x518>
    if (__is_single_threaded())
   18cf8:	0002a797          	auipc	a5,0x2a
   18cfc:	7a07b783          	ld	a5,1952(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18d00:	0007c783          	lbu	a5,0(a5)
   18d04:	0e078263          	beq	a5,zero,18de8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5e4>
    _Atomic_word __result = *__mem;
   18d08:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   18d0c:	fff5079b          	addiw	a5,a0,-1
   18d10:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18d14:	00100793          	addi	a5,zero,1
   18d18:	0ef50063          	beq	a0,a5,18df8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5f4>
	if (_M_pi != nullptr)
   18d1c:	03013403          	ld	s0,48(sp)
   18d20:	02040463          	beq	s0,zero,18d48 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x544>
    if (__is_single_threaded())
   18d24:	0002a797          	auipc	a5,0x2a
   18d28:	7747b783          	ld	a5,1908(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18d2c:	0007c783          	lbu	a5,0(a5)
   18d30:	12078263          	beq	a5,zero,18e54 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x650>
    _Atomic_word __result = *__mem;
   18d34:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   18d38:	fff5079b          	addiw	a5,a0,-1
   18d3c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18d40:	00100793          	addi	a5,zero,1
   18d44:	12f50063          	beq	a0,a5,18e64 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x660>
	if (_M_pi != nullptr)
   18d48:	00813403          	ld	s0,8(sp)
   18d4c:	02040463          	beq	s0,zero,18d74 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x570>
    if (__is_single_threaded())
   18d50:	0002a797          	auipc	a5,0x2a
   18d54:	7487b783          	ld	a5,1864(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18d58:	0007c783          	lbu	a5,0(a5)
   18d5c:	16078263          	beq	a5,zero,18ec0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x6bc>
    _Atomic_word __result = *__mem;
   18d60:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   18d64:	fff5079b          	addiw	a5,a0,-1
   18d68:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18d6c:	00100793          	addi	a5,zero,1
   18d70:	16f50063          	beq	a0,a5,18ed0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x6cc>
	if (_M_pi != nullptr)
   18d74:	01813403          	ld	s0,24(sp)
   18d78:	02040463          	beq	s0,zero,18da0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x59c>
    if (__is_single_threaded())
   18d7c:	0002a797          	auipc	a5,0x2a
   18d80:	71c7b783          	ld	a5,1820(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18d84:	0007c783          	lbu	a5,0(a5)
   18d88:	1a078263          	beq	a5,zero,18f2c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x728>
    _Atomic_word __result = *__mem;
   18d8c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   18d90:	fff5079b          	addiw	a5,a0,-1
   18d94:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18d98:	00100793          	addi	a5,zero,1
   18d9c:	1af50063          	beq	a0,a5,18f3c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x738>
}
   18da0:	0c813083          	ld	ra,200(sp)
   18da4:	0c013403          	ld	s0,192(sp)
   18da8:	0b813483          	ld	s1,184(sp)
   18dac:	0b013903          	ld	s2,176(sp)
   18db0:	0a813983          	ld	s3,168(sp)
   18db4:	0a013a03          	ld	s4,160(sp)
   18db8:	09813a83          	ld	s5,152(sp)
   18dbc:	09013b03          	ld	s6,144(sp)
   18dc0:	0d010113          	addi	sp,sp,208
   18dc4:	00008067          	jalr	zero,0(ra)
      __atomic_add(__mem, __val);
   18dc8:	00100593          	addi	a1,zero,1
   18dcc:	03050513          	addi	a0,a0,48
   18dd0:	fe0fd0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18dd4:	e55ff06f          	jal	zero,18c28 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x424>
   18dd8:	00100593          	addi	a1,zero,1
   18ddc:	03050513          	addi	a0,a0,48
   18de0:	fd0fd0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18de4:	e79ff06f          	jal	zero,18c5c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x458>
      return __exchange_and_add(__mem, __val);
   18de8:	fff00593          	addi	a1,zero,-1
   18dec:	03090513          	addi	a0,s2,48
   18df0:	801fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18df4:	f21ff06f          	jal	zero,18d14 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x510>
	_M_dispose();
   18df8:	00093783          	ld	a5,0(s2)
   18dfc:	0107b783          	ld	a5,16(a5)
   18e00:	00090513          	addi	a0,s2,0
   18e04:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18e08:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18e0c:	0002a797          	auipc	a5,0x2a
   18e10:	68c7b783          	ld	a5,1676(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18e14:	0007c783          	lbu	a5,0(a5)
   18e18:	02078663          	beq	a5,zero,18e44 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x640>
    _Atomic_word __result = *__mem;
   18e1c:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   18e20:	fff5079b          	addiw	a5,a0,-1
   18e24:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18e28:	00100793          	addi	a5,zero,1
   18e2c:	eef518e3          	bne	a0,a5,18d1c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x518>
	    _M_destroy();
   18e30:	00093783          	ld	a5,0(s2)
   18e34:	0187b783          	ld	a5,24(a5)
   18e38:	00090513          	addi	a0,s2,0
   18e3c:	000780e7          	jalr	ra,0(a5)
   18e40:	eddff06f          	jal	zero,18d1c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x518>
      return __exchange_and_add(__mem, __val);
   18e44:	fff00593          	addi	a1,zero,-1
   18e48:	03490513          	addi	a0,s2,52
   18e4c:	fa4fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18e50:	fd9ff06f          	jal	zero,18e28 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x624>
   18e54:	fff00593          	addi	a1,zero,-1
   18e58:	03040513          	addi	a0,s0,48
   18e5c:	f94fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18e60:	ee1ff06f          	jal	zero,18d40 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x53c>
	_M_dispose();
   18e64:	00043783          	ld	a5,0(s0)
   18e68:	0107b783          	ld	a5,16(a5)
   18e6c:	00040513          	addi	a0,s0,0
   18e70:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18e74:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18e78:	0002a797          	auipc	a5,0x2a
   18e7c:	6207b783          	ld	a5,1568(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18e80:	0007c783          	lbu	a5,0(a5)
   18e84:	02078663          	beq	a5,zero,18eb0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x6ac>
    _Atomic_word __result = *__mem;
   18e88:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   18e8c:	fff5079b          	addiw	a5,a0,-1
   18e90:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18e94:	00100793          	addi	a5,zero,1
   18e98:	eaf518e3          	bne	a0,a5,18d48 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x544>
	    _M_destroy();
   18e9c:	00043783          	ld	a5,0(s0)
   18ea0:	0187b783          	ld	a5,24(a5)
   18ea4:	00040513          	addi	a0,s0,0
   18ea8:	000780e7          	jalr	ra,0(a5)
   18eac:	e9dff06f          	jal	zero,18d48 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x544>
      return __exchange_and_add(__mem, __val);
   18eb0:	fff00593          	addi	a1,zero,-1
   18eb4:	03440513          	addi	a0,s0,52
   18eb8:	f38fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18ebc:	fd9ff06f          	jal	zero,18e94 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x690>
   18ec0:	fff00593          	addi	a1,zero,-1
   18ec4:	03040513          	addi	a0,s0,48
   18ec8:	f28fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18ecc:	ea1ff06f          	jal	zero,18d6c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x568>
	_M_dispose();
   18ed0:	00043783          	ld	a5,0(s0)
   18ed4:	0107b783          	ld	a5,16(a5)
   18ed8:	00040513          	addi	a0,s0,0
   18edc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18ee0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18ee4:	0002a797          	auipc	a5,0x2a
   18ee8:	5b47b783          	ld	a5,1460(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18eec:	0007c783          	lbu	a5,0(a5)
   18ef0:	02078663          	beq	a5,zero,18f1c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x718>
    _Atomic_word __result = *__mem;
   18ef4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   18ef8:	fff5079b          	addiw	a5,a0,-1
   18efc:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18f00:	00100793          	addi	a5,zero,1
   18f04:	e6f518e3          	bne	a0,a5,18d74 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x570>
	    _M_destroy();
   18f08:	00043783          	ld	a5,0(s0)
   18f0c:	0187b783          	ld	a5,24(a5)
   18f10:	00040513          	addi	a0,s0,0
   18f14:	000780e7          	jalr	ra,0(a5)
   18f18:	e5dff06f          	jal	zero,18d74 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x570>
      return __exchange_and_add(__mem, __val);
   18f1c:	fff00593          	addi	a1,zero,-1
   18f20:	03440513          	addi	a0,s0,52
   18f24:	eccfd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18f28:	fd9ff06f          	jal	zero,18f00 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x6fc>
   18f2c:	fff00593          	addi	a1,zero,-1
   18f30:	03040513          	addi	a0,s0,48
   18f34:	ebcfd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18f38:	e61ff06f          	jal	zero,18d98 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x594>
	_M_dispose();
   18f3c:	00043783          	ld	a5,0(s0)
   18f40:	0107b783          	ld	a5,16(a5)
   18f44:	00040513          	addi	a0,s0,0
   18f48:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18f4c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18f50:	0002a797          	auipc	a5,0x2a
   18f54:	5487b783          	ld	a5,1352(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   18f58:	0007c783          	lbu	a5,0(a5)
   18f5c:	02078663          	beq	a5,zero,18f88 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x784>
    _Atomic_word __result = *__mem;
   18f60:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   18f64:	fff5079b          	addiw	a5,a0,-1
   18f68:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18f6c:	00100793          	addi	a5,zero,1
   18f70:	e2f518e3          	bne	a0,a5,18da0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x59c>
	    _M_destroy();
   18f74:	00043783          	ld	a5,0(s0)
   18f78:	0187b783          	ld	a5,24(a5)
   18f7c:	00040513          	addi	a0,s0,0
   18f80:	000780e7          	jalr	ra,0(a5)
   18f84:	e1dff06f          	jal	zero,18da0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x59c>
      return __exchange_and_add(__mem, __val);
   18f88:	fff00593          	addi	a1,zero,-1
   18f8c:	03440513          	addi	a0,s0,52
   18f90:	e60fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18f94:	fd9ff06f          	jal	zero,18f6c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x768>
      { return _M_dataplus._M_p; }
   18f98:	00050413          	addi	s0,a0,0
   18f9c:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   18fa0:	05010793          	addi	a5,sp,80
   18fa4:	00f50463          	beq	a0,a5,18fac <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7a8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   18fa8:	ff8fd0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   18fac:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   18fb0:	07010793          	addi	a5,sp,112
   18fb4:	00f50463          	beq	a0,a5,18fbc <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7b8>
   18fb8:	fe8fd0ef          	jal	ra,167a0 <operator delete(void*)@plt>
                       std::to_string(version));
   18fbc:	00090513          	addi	a0,s2,0
   18fc0:	f90fd0ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   18fc4:	03013503          	ld	a0,48(sp)
   18fc8:	00050863          	beq	a0,zero,18fd8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7d4>
	  _M_pi->_M_release();
   18fcc:	0002a317          	auipc	t1,0x2a
   18fd0:	41433303          	ld	t1,1044(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   18fd4:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   18fd8:	00813503          	ld	a0,8(sp)
   18fdc:	00050863          	beq	a0,zero,18fec <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7e8>
	  _M_pi->_M_release();
   18fe0:	0002a317          	auipc	t1,0x2a
   18fe4:	40033303          	ld	t1,1024(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   18fe8:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   18fec:	01813503          	ld	a0,24(sp)
   18ff0:	00050863          	beq	a0,zero,19000 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7fc>
	  _M_pi->_M_release();
   18ff4:	0002a317          	auipc	t1,0x2a
   18ff8:	3ec33303          	ld	t1,1004(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   18ffc:	000300e7          	jalr	ra,0(t1)
}
   19000:	00048513          	addi	a0,s1,0
   19004:	a18ff0ef          	jal	ra,1821c <dwarf::unit::~unit()>
   19008:	00040513          	addi	a0,s0,0
   1900c:	985fd0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   19010:	00050413          	addi	s0,a0,0
   19014:	f99ff06f          	jal	zero,18fac <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7a8>
	if (_M_pi != nullptr)
   19018:	00050413          	addi	s0,a0,0
   1901c:	fd1ff06f          	jal	zero,18fec <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7e8>
   19020:	00050413          	addi	s0,a0,0
   19024:	fddff06f          	jal	zero,19000 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7fc>
        val |= ((uint64_t)p[i]) << (i * 8);
   19028:	0007c603          	lbu	a2,0(a5)
    pos += sizeof(T);
   1902c:	00178793          	addi	a5,a5,1
   19030:	02f13c23          	sd	a5,56(sp)
  subsec->addr_size = address_size;
   19034:	00013683          	ld	a3,0(sp)
   19038:	02c6a023          	sw	a2,32(a3)

  bool end() const { return pos >= sec->end; }

  bool valid() const { return !!pos; }

  section_offset get_section_offset() const { return pos - sec->begin; }
   1903c:	00873703          	ld	a4,8(a4)
   19040:	40e78a33          	sub	s4,a5,a4
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   19044:	1c800513          	addi	a0,zero,456
   19048:	f68fd0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1904c:	b69ff06f          	jal	zero,18bb4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3b0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   19050:	03413423          	sd	s4,40(sp)
      : _M_pi(__r._M_pi)
   19054:	02013823          	sd	zero,48(sp)
      : sec(sec), pos(sec->begin + offset) {}
   19058:	008a3783          	ld	a5,8(s4)
   1905c:	02f13c23          	sd	a5,56(sp)
  sub.skip_initial_length();
   19060:	02810513          	addi	a0,sp,40
   19064:	748040ef          	jal	ra,1d7ac <dwarf::cursor::skip_initial_length()>
   19068:	9edff06f          	jal	zero,18a54 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x250>

000000000001906c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)>:
dwarf::dwarf(const std::shared_ptr<loader> &l) : m(make_shared<impl>(l)) {
   1906c:	f6010113          	addi	sp,sp,-160
   19070:	08113c23          	sd	ra,152(sp)
   19074:	08813823          	sd	s0,144(sp)
   19078:	08913423          	sd	s1,136(sp)
   1907c:	09213023          	sd	s2,128(sp)
   19080:	07313c23          	sd	s3,120(sp)
   19084:	07413823          	sd	s4,112(sp)
   19088:	07513423          	sd	s5,104(sp)
   1908c:	07613023          	sd	s6,96(sp)
   19090:	05713c23          	sd	s7,88(sp)
   19094:	00050493          	addi	s1,a0,0
   19098:	00058913          	addi	s2,a1,0

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   1909c:	00053023          	sd	zero,0(a0)
   190a0:	0f000513          	addi	a0,zero,240
   190a4:	f0cfd0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   190a8:	00050413          	addi	s0,a0,0
   190ac:	00052423          	sw	zero,8(a0)
   190b0:	00052623          	sw	zero,12(a0)
   190b4:	00052823          	sw	zero,16(a0)
   190b8:	00052a23          	sw	zero,20(a0)
   190bc:	00052c23          	sw	zero,24(a0)
   190c0:	00052e23          	sw	zero,28(a0)
   190c4:	02053023          	sd	zero,32(a0)
   190c8:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   190cc:	00100793          	addi	a5,zero,1
   190d0:	02f52823          	sw	a5,48(a0)
   190d4:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   190d8:	0002a797          	auipc	a5,0x2a
   190dc:	4707b783          	ld	a5,1136(a5) # 43548 <vtable for std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xb80>
   190e0:	01078793          	addi	a5,a5,16
   190e4:	00f53023          	sd	a5,0(a0)
   190e8:	03850993          	addi	s3,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   190ec:	00093783          	ld	a5,0(s2)
   190f0:	02f53c23          	sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   190f4:	00893503          	ld	a0,8(s2)
   190f8:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   190fc:	02050063          	beq	a0,zero,1911c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb0>
    if (__is_single_threaded())
   19100:	0002a797          	auipc	a5,0x2a
   19104:	3987b783          	ld	a5,920(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19108:	0007c783          	lbu	a5,0(a5)
   1910c:	08078c63          	beq	a5,zero,191a4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x138>
  { *__mem += __val; }
   19110:	03052783          	lw	a5,48(a0)
   19114:	0017879b          	addiw	a5,a5,1
   19118:	02f52823          	sw	a5,48(a0)
      : _M_ptr(0), _M_refcount()
   1911c:	04043423          	sd	zero,72(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   19120:	04043823          	sd	zero,80(s0)
      : _M_ptr(0), _M_refcount()
   19124:	04043c23          	sd	zero,88(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   19128:	06043023          	sd	zero,96(s0)
   1912c:	06043423          	sd	zero,104(s0)
   19130:	06043823          	sd	zero,112(s0)
   19134:	06043c23          	sd	zero,120(s0)
   19138:	0b040793          	addi	a5,s0,176
   1913c:	08f43023          	sd	a5,128(s0)
   19140:	00100793          	addi	a5,zero,1
   19144:	08f43423          	sd	a5,136(s0)
    _Hash_node_base() noexcept : _M_nxt() { }
   19148:	08043823          	sd	zero,144(s0)
   1914c:	08043c23          	sd	zero,152(s0)
    : _M_max_load_factor(__z), _M_next_resize(0) { }
   19150:	0001f797          	auipc	a5,0x1f
   19154:	9787a787          	flw	fa5,-1672(a5) # 37ac8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xf0>
   19158:	0af42027          	fsw	fa5,160(s0)
   1915c:	0a043423          	sd	zero,168(s0)
   19160:	0a043823          	sd	zero,176(s0)
  impl(const std::shared_ptr<loader> &l) : l(l), have_type_units(false) {}
   19164:	0a040c23          	sb	zero,184(s0)
      _M_header._M_color = _S_red;
   19168:	0c042423          	sw	zero,200(s0)
      _M_header._M_parent = 0;
   1916c:	0c043823          	sd	zero,208(s0)
      _M_header._M_left = &_M_header;
   19170:	0c840793          	addi	a5,s0,200
   19174:	0cf43c23          	sd	a5,216(s0)
      _M_header._M_right = &_M_header;
   19178:	0ef43023          	sd	a5,224(s0)
      _M_node_count = 0;
   1917c:	0e043423          	sd	zero,232(s0)
	  _M_pi = __pi;
   19180:	0084b423          	sd	s0,8(s1)
	  __p = __pi->_M_ptr();
   19184:	0134b023          	sd	s3,0(s1)
      { return _M_ptr; }
   19188:	00093503          	ld	a0,0(s2)
  data = l->load(section_type::info, &size);
   1918c:	00053783          	ld	a5,0(a0)
   19190:	0107b783          	ld	a5,16(a5)
   19194:	00010613          	addi	a2,sp,0
   19198:	00300593          	addi	a1,zero,3
   1919c:	000780e7          	jalr	ra,0(a5)
   191a0:	0140006f          	jal	zero,191b4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x148>
      __atomic_add(__mem, __val);
   191a4:	00100593          	addi	a1,zero,1
   191a8:	03050513          	addi	a0,a0,48
   191ac:	c04fd0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   191b0:	f6dff06f          	jal	zero,1911c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb0>
   191b4:	00050413          	addi	s0,a0,0
  if (!data)
   191b8:	00050a63          	beq	a0,zero,191cc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x160>
   191bc:	0004ba03          	ld	s4,0(s1)
   191c0:	06000513          	addi	a0,zero,96
   191c4:	decfd0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   191c8:	04c0006f          	jal	zero,19214 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x1a8>
    throw format_error("required .debug_info section missing");
   191cc:	01000513          	addi	a0,zero,16
   191d0:	cc0fd0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   191d4:	00050913          	addi	s2,a0,0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   191d8:	0001e597          	auipc	a1,0x1e
   191dc:	61858593          	addi	a1,a1,1560 # 377f0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x70>
   191e0:	831fd0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   191e4:	0002a797          	auipc	a5,0x2a
   191e8:	38c7b783          	ld	a5,908(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   191ec:	01078793          	addi	a5,a5,16
   191f0:	00f93023          	sd	a5,0(s2)
   191f4:	0002a617          	auipc	a2,0x2a
   191f8:	1a463603          	ld	a2,420(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   191fc:	0002a597          	auipc	a1,0x2a
   19200:	0cc5b583          	ld	a1,204(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   19204:	00090513          	addi	a0,s2,0
   19208:	f58fd0ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1920c:	00050413          	addi	s0,a0,0
   19210:	1610006f          	jal	zero,19b70 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb04>
   19214:	00052423          	sw	zero,8(a0)
   19218:	00052623          	sw	zero,12(a0)
   1921c:	00052823          	sw	zero,16(a0)
   19220:	00052a23          	sw	zero,20(a0)
   19224:	00052c23          	sw	zero,24(a0)
   19228:	00052e23          	sw	zero,28(a0)
   1922c:	02053023          	sd	zero,32(a0)
   19230:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   19234:	00100793          	addi	a5,zero,1
   19238:	02f52823          	sw	a5,48(a0)
   1923c:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   19240:	0002a797          	auipc	a5,0x2a
   19244:	3987b783          	ld	a5,920(a5) # 435d8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   19248:	01078793          	addi	a5,a5,16
   1924c:	00f53023          	sd	a5,0(a0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   19250:	00300793          	addi	a5,zero,3
   19254:	02f52c23          	sw	a5,56(a0)
   19258:	04853023          	sd	s0,64(a0)
   1925c:	00013783          	ld	a5,0(sp)
   19260:	00f407b3          	add	a5,s0,a5
   19264:	04f53423          	sd	a5,72(a0)
   19268:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   1926c:	04052a23          	sw	zero,84(a0)
   19270:	04052c23          	sw	zero,88(a0)
   19274:	03850793          	addi	a5,a0,56
   19278:	00fa3823          	sd	a5,16(s4)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1927c:	018a3983          	ld	s3,24(s4)
	__r._M_pi = _M_pi;
   19280:	00aa3c23          	sd	a0,24(s4)
	if (_M_pi != nullptr)
   19284:	02098463          	beq	s3,zero,192ac <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x240>
    if (__is_single_threaded())
   19288:	0002a797          	auipc	a5,0x2a
   1928c:	2107b783          	ld	a5,528(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19290:	0007c783          	lbu	a5,0(a5)
   19294:	0e078063          	beq	a5,zero,19374 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x308>
    _Atomic_word __result = *__mem;
   19298:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   1929c:	fff5079b          	addiw	a5,a0,-1
   192a0:	02f9a823          	sw	a5,48(s3)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   192a4:	00100793          	addi	a5,zero,1
   192a8:	0cf50e63          	beq	a0,a5,19384 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x318>
      { return _M_ptr; }
   192ac:	0004b783          	ld	a5,0(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   192b0:	0107ba03          	ld	s4,16(a5)
      : _M_pi(__r._M_pi)
   192b4:	0187b983          	ld	s3,24(a5)
	if (_M_pi != nullptr)
   192b8:	12098ae3          	beq	s3,zero,19bec <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb80>
    if (__is_single_threaded())
   192bc:	0002a797          	auipc	a5,0x2a
   192c0:	1dc7b783          	ld	a5,476(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   192c4:	0007c783          	lbu	a5,0(a5)
   192c8:	10078c63          	beq	a5,zero,193e0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x374>
  { *__mem += __val; }
   192cc:	0309a783          	lw	a5,48(s3)
   192d0:	0017879b          	addiw	a5,a5,1
   192d4:	02f9a823          	sw	a5,48(s3)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   192d8:	01413423          	sd	s4,8(sp)
      : _M_pi(__r._M_pi)
   192dc:	01313823          	sd	s3,16(sp)
    if (__is_single_threaded())
   192e0:	0002a797          	auipc	a5,0x2a
   192e4:	1b87b783          	ld	a5,440(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   192e8:	0007c783          	lbu	a5,0(a5)
   192ec:	10078263          	beq	a5,zero,193f0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x384>
  { *__mem += __val; }
   192f0:	0309a783          	lw	a5,48(s3)
   192f4:	0017879b          	addiw	a5,a5,1
   192f8:	02f9a823          	sw	a5,48(s3)
      : sec(sec), pos(sec->begin + offset) {}
   192fc:	008a3783          	ld	a5,8(s4)
   19300:	00f13c23          	sd	a5,24(sp)
    if (__is_single_threaded())
   19304:	0002a797          	auipc	a5,0x2a
   19308:	1947b783          	ld	a5,404(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1930c:	0007c783          	lbu	a5,0(a5)
   19310:	0e078863          	beq	a5,zero,19400 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x394>
    _Atomic_word __result = *__mem;
   19314:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   19318:	fff5079b          	addiw	a5,a0,-1
   1931c:	02f9a823          	sw	a5,48(s3)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19320:	00100793          	addi	a5,zero,1
   19324:	0cf51ce3          	bne	a0,a5,19bfc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb90>
	_M_dispose();
   19328:	0009b783          	ld	a5,0(s3)
   1932c:	0107b783          	ld	a5,16(a5)
   19330:	00098513          	addi	a0,s3,0
   19334:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19338:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1933c:	0002a797          	auipc	a5,0x2a
   19340:	15c7b783          	ld	a5,348(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19344:	0007c783          	lbu	a5,0(a5)
   19348:	0c078463          	beq	a5,zero,19410 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3a4>
    _Atomic_word __result = *__mem;
   1934c:	0349a503          	lw	a0,52(s3)
    *__mem += __val;
   19350:	fff5079b          	addiw	a5,a0,-1
   19354:	02f9aa23          	sw	a5,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19358:	00100793          	addi	a5,zero,1
   1935c:	0af510e3          	bne	a0,a5,19bfc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb90>
	    _M_destroy();
   19360:	0009b783          	ld	a5,0(s3)
   19364:	0187b783          	ld	a5,24(a5)
   19368:	00098513          	addi	a0,s3,0
   1936c:	000780e7          	jalr	ra,0(a5)
   19370:	08d0006f          	jal	zero,19bfc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb90>
      return __exchange_and_add(__mem, __val);
   19374:	fff00593          	addi	a1,zero,-1
   19378:	03098513          	addi	a0,s3,48
   1937c:	a74fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19380:	f25ff06f          	jal	zero,192a4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x238>
	_M_dispose();
   19384:	0009b783          	ld	a5,0(s3)
   19388:	0107b783          	ld	a5,16(a5)
   1938c:	00098513          	addi	a0,s3,0
   19390:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19394:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19398:	0002a797          	auipc	a5,0x2a
   1939c:	1007b783          	ld	a5,256(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   193a0:	0007c783          	lbu	a5,0(a5)
   193a4:	02078663          	beq	a5,zero,193d0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x364>
    _Atomic_word __result = *__mem;
   193a8:	0349a503          	lw	a0,52(s3)
    *__mem += __val;
   193ac:	fff5079b          	addiw	a5,a0,-1
   193b0:	02f9aa23          	sw	a5,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   193b4:	00100793          	addi	a5,zero,1
   193b8:	eef51ae3          	bne	a0,a5,192ac <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x240>
	    _M_destroy();
   193bc:	0009b783          	ld	a5,0(s3)
   193c0:	0187b783          	ld	a5,24(a5)
   193c4:	00098513          	addi	a0,s3,0
   193c8:	000780e7          	jalr	ra,0(a5)
   193cc:	ee1ff06f          	jal	zero,192ac <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x240>
      return __exchange_and_add(__mem, __val);
   193d0:	fff00593          	addi	a1,zero,-1
   193d4:	03498513          	addi	a0,s3,52
   193d8:	a18fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   193dc:	fd9ff06f          	jal	zero,193b4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x348>
      __atomic_add(__mem, __val);
   193e0:	00100593          	addi	a1,zero,1
   193e4:	03098513          	addi	a0,s3,48
   193e8:	9c8fd0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   193ec:	eedff06f          	jal	zero,192d8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x26c>
   193f0:	00100593          	addi	a1,zero,1
   193f4:	03098513          	addi	a0,s3,48
   193f8:	9b8fd0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   193fc:	f01ff06f          	jal	zero,192fc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x290>
      return __exchange_and_add(__mem, __val);
   19400:	fff00593          	addi	a1,zero,-1
   19404:	03098513          	addi	a0,s3,48
   19408:	9e8fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1940c:	f15ff06f          	jal	zero,19320 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2b4>
   19410:	fff00593          	addi	a1,zero,-1
   19414:	03498513          	addi	a0,s3,52
   19418:	9d8fd0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1941c:	f3dff06f          	jal	zero,19358 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2ec>
    const unsigned char *p = (const unsigned char *)pos;
   19420:	01813583          	ld	a1,24(sp)
      { return _M_ptr; }
   19424:	00813803          	ld	a6,8(sp)
    if (sec->ord == byte_order::lsb) {
   19428:	01c82783          	lw	a5,28(a6)
   1942c:	06079263          	bne	a5,zero,19490 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x424>
   19430:	00058613          	addi	a2,a1,0
   19434:	00000713          	addi	a4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   19438:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1943c:	00064683          	lbu	a3,0(a2)
   19440:	00e696b3          	sll	a3,a3,a4
   19444:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   19448:	00160613          	addi	a2,a2,1
   1944c:	0087071b          	addiw	a4,a4,8
   19450:	fea716e3          	bne	a4,a0,1943c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3d0>
    pos += sizeof(T);
   19454:	00458593          	addi	a1,a1,4
   19458:	00b13c23          	sd	a1,24(sp)
  if (length == 0xffffffff)
   1945c:	0007879b          	addiw	a5,a5,0
   19460:	fff00713          	addi	a4,zero,-1
   19464:	04e78863          	beq	a5,a4,194b4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x448>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   19468:	00813783          	ld	a5,8(sp)
   1946c:	0107b703          	ld	a4,16(a5)
   19470:	01813783          	ld	a5,24(sp)
   19474:	40f70633          	sub	a2,a4,a5
   19478:	00100693          	addi	a3,zero,1
   1947c:	00c6f463          	bgeu	a3,a2,19484 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x418>
   19480:	06e7e063          	bltu	a5,a4,194e0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x474>
      underflow();
   19484:	00810513          	addi	a0,sp,8
   19488:	4bc040ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
   1948c:	0540006f          	jal	zero,194e0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x474>
   19490:	00058713          	addi	a4,a1,0
   19494:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   19498:	00000793          	addi	a5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1949c:	00879793          	slli	a5,a5,0x8
   194a0:	00074683          	lbu	a3,0(a4)
   194a4:	00f6e7b3          	or	a5,a3,a5
      for (unsigned i = 0; i < sizeof(T); i++)
   194a8:	00170713          	addi	a4,a4,1
   194ac:	fec718e3          	bne	a4,a2,1949c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x430>
   194b0:	fa5ff06f          	jal	zero,19454 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3e8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   194b4:	01083783          	ld	a5,16(a6)
   194b8:	40b786b3          	sub	a3,a5,a1
   194bc:	00700713          	addi	a4,zero,7
   194c0:	00d77463          	bgeu	a4,a3,194c8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x45c>
   194c4:	00f5e663          	bltu	a1,a5,194d0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x464>
      underflow();
   194c8:	00810513          	addi	a0,sp,8
   194cc:	478040ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    pos += sizeof(T);
   194d0:	01813783          	ld	a5,24(sp)
   194d4:	00878793          	addi	a5,a5,8
   194d8:	00f13c23          	sd	a5,24(sp)
    return (T)val;
   194dc:	f8dff06f          	jal	zero,19468 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3fc>
    const unsigned char *p = (const unsigned char *)pos;
   194e0:	01813703          	ld	a4,24(sp)
    if (sec->ord == byte_order::lsb) {
   194e4:	00813783          	ld	a5,8(sp)
   194e8:	01c7a783          	lw	a5,28(a5)
   194ec:	04079c63          	bne	a5,zero,19544 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x4d8>
        val |= ((uint64_t)p[i]) << (i * 8);
   194f0:	00174783          	lbu	a5,1(a4)
   194f4:	00879793          	slli	a5,a5,0x8
   194f8:	00074683          	lbu	a3,0(a4)
   194fc:	00d7e7b3          	or	a5,a5,a3
    pos += sizeof(T);
   19500:	00270713          	addi	a4,a4,2
   19504:	00e13c23          	sd	a4,24(sp)
    return (T)val;
   19508:	03079793          	slli	a5,a5,0x30
   1950c:	0307d793          	srli	a5,a5,0x30
  uhalf versionbe = (version >> 8) | ((version & 0xFF) << 8);
   19510:	0087d71b          	srliw	a4,a5,0x8
   19514:	0087969b          	slliw	a3,a5,0x8
   19518:	00d76733          	or	a4,a4,a3
  if (versionbe < version) {
   1951c:	03071713          	slli	a4,a4,0x30
   19520:	03075713          	srli	a4,a4,0x30
   19524:	02f76a63          	bltu	a4,a5,19558 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x4ec>
   19528:	00093503          	ld	a0,0(s2)
  data = l->load(section_type::abbrev, &size);
   1952c:	00053783          	ld	a5,0(a0)
   19530:	0107b783          	ld	a5,16(a5)
   19534:	00010613          	addi	a2,sp,0
   19538:	00000593          	addi	a1,zero,0
   1953c:	000780e7          	jalr	ra,0(a5)
   19540:	12c0006f          	jal	zero,1966c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x600>
        val = (val << 8) | (uint64_t)p[i];
   19544:	00074783          	lbu	a5,0(a4)
   19548:	00879793          	slli	a5,a5,0x8
   1954c:	00174683          	lbu	a3,1(a4)
   19550:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   19554:	fadff06f          	jal	zero,19500 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x494>
   19558:	0004b983          	ld	s3,0(s1)
   1955c:	06000513          	addi	a0,zero,96
   19560:	a50fd0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   19564:	00052423          	sw	zero,8(a0)
   19568:	00052623          	sw	zero,12(a0)
   1956c:	00052823          	sw	zero,16(a0)
   19570:	00052a23          	sw	zero,20(a0)
   19574:	00052c23          	sw	zero,24(a0)
   19578:	00052e23          	sw	zero,28(a0)
   1957c:	02053023          	sd	zero,32(a0)
   19580:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   19584:	00100793          	addi	a5,zero,1
   19588:	02f52823          	sw	a5,48(a0)
   1958c:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   19590:	0002a717          	auipc	a4,0x2a
   19594:	04873703          	ld	a4,72(a4) # 435d8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   19598:	01070713          	addi	a4,a4,16
   1959c:	00e53023          	sd	a4,0(a0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   195a0:	00300713          	addi	a4,zero,3
   195a4:	02e52c23          	sw	a4,56(a0)
   195a8:	04853023          	sd	s0,64(a0)
   195ac:	00013703          	ld	a4,0(sp)
   195b0:	00e40733          	add	a4,s0,a4
   195b4:	04e53423          	sd	a4,72(a0)
   195b8:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   195bc:	04f52a23          	sw	a5,84(a0)
   195c0:	04052c23          	sw	zero,88(a0)
   195c4:	03850793          	addi	a5,a0,56
   195c8:	00f9b823          	sd	a5,16(s3)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   195cc:	0189b403          	ld	s0,24(s3)
	__r._M_pi = _M_pi;
   195d0:	00a9bc23          	sd	a0,24(s3)
	if (_M_pi != nullptr)
   195d4:	f4040ae3          	beq	s0,zero,19528 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x4bc>
    if (__is_single_threaded())
   195d8:	0002a797          	auipc	a5,0x2a
   195dc:	ec07b783          	ld	a5,-320(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   195e0:	0007c783          	lbu	a5,0(a5)
   195e4:	06078263          	beq	a5,zero,19648 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5dc>
    _Atomic_word __result = *__mem;
   195e8:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   195ec:	fff5079b          	addiw	a5,a0,-1
   195f0:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   195f4:	00100793          	addi	a5,zero,1
   195f8:	f2f518e3          	bne	a0,a5,19528 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x4bc>
	_M_dispose();
   195fc:	00043783          	ld	a5,0(s0)
   19600:	0107b783          	ld	a5,16(a5)
   19604:	00040513          	addi	a0,s0,0
   19608:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1960c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19610:	0002a797          	auipc	a5,0x2a
   19614:	e887b783          	ld	a5,-376(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19618:	0007c783          	lbu	a5,0(a5)
   1961c:	02078e63          	beq	a5,zero,19658 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5ec>
    _Atomic_word __result = *__mem;
   19620:	03442783          	lw	a5,52(s0)
    *__mem += __val;
   19624:	fff7871b          	addiw	a4,a5,-1
   19628:	02e42a23          	sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1962c:	00100713          	addi	a4,zero,1
   19630:	eee79ce3          	bne	a5,a4,19528 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x4bc>
	    _M_destroy();
   19634:	00043783          	ld	a5,0(s0)
   19638:	0187b783          	ld	a5,24(a5)
   1963c:	00040513          	addi	a0,s0,0
   19640:	000780e7          	jalr	ra,0(a5)
   19644:	ee5ff06f          	jal	zero,19528 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x4bc>
      return __exchange_and_add(__mem, __val);
   19648:	fff00593          	addi	a1,zero,-1
   1964c:	03040513          	addi	a0,s0,48
   19650:	fa1fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19654:	fa1ff06f          	jal	zero,195f4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x588>
   19658:	fff00593          	addi	a1,zero,-1
   1965c:	03440513          	addi	a0,s0,52
   19660:	f91fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19664:	00050793          	addi	a5,a0,0
   19668:	fc5ff06f          	jal	zero,1962c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5c0>
   1966c:	00050413          	addi	s0,a0,0
  if (!data)
   19670:	00050c63          	beq	a0,zero,19688 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x61c>
      { return _M_ptr; }
   19674:	0004b903          	ld	s2,0(s1)
   19678:	01093983          	ld	s3,16(s2)
   1967c:	06000513          	addi	a0,zero,96
   19680:	930fd0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   19684:	04c0006f          	jal	zero,196d0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x664>
    throw format_error("required .debug_abbrev section missing");
   19688:	01000513          	addi	a0,zero,16
   1968c:	804fd0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   19690:	00050913          	addi	s2,a0,0
   19694:	0001e597          	auipc	a1,0x1e
   19698:	18458593          	addi	a1,a1,388 # 37818 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x98>
   1969c:	b74fd0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   196a0:	0002a797          	auipc	a5,0x2a
   196a4:	ed07b783          	ld	a5,-304(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   196a8:	01078793          	addi	a5,a5,16
   196ac:	00f93023          	sd	a5,0(s2)
   196b0:	0002a617          	auipc	a2,0x2a
   196b4:	ce863603          	ld	a2,-792(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   196b8:	0002a597          	auipc	a1,0x2a
   196bc:	c105b583          	ld	a1,-1008(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   196c0:	00090513          	addi	a0,s2,0
   196c4:	a9cfd0ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   196c8:	00050413          	addi	s0,a0,0
   196cc:	4cc0006f          	jal	zero,19b98 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb2c>
   196d0:	00052423          	sw	zero,8(a0)
   196d4:	00052623          	sw	zero,12(a0)
   196d8:	00052823          	sw	zero,16(a0)
   196dc:	00052a23          	sw	zero,20(a0)
   196e0:	00052c23          	sw	zero,24(a0)
   196e4:	00052e23          	sw	zero,28(a0)
   196e8:	02053023          	sd	zero,32(a0)
   196ec:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   196f0:	00100793          	addi	a5,zero,1
   196f4:	02f52823          	sw	a5,48(a0)
   196f8:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   196fc:	0002a797          	auipc	a5,0x2a
   19700:	edc7b783          	ld	a5,-292(a5) # 435d8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   19704:	01078793          	addi	a5,a5,16
   19708:	00f53023          	sd	a5,0(a0)
   1970c:	01c9a783          	lw	a5,28(s3)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   19710:	02052c23          	sw	zero,56(a0)
   19714:	04853023          	sd	s0,64(a0)
   19718:	00013703          	ld	a4,0(sp)
   1971c:	00e40433          	add	s0,s0,a4
   19720:	04853423          	sd	s0,72(a0)
   19724:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   19728:	04f52a23          	sw	a5,84(a0)
   1972c:	04052c23          	sw	zero,88(a0)
   19730:	03850793          	addi	a5,a0,56
   19734:	02f93023          	sd	a5,32(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   19738:	02893403          	ld	s0,40(s2)
	__r._M_pi = _M_pi;
   1973c:	02a93423          	sd	a0,40(s2)
	if (_M_pi != nullptr)
   19740:	02040463          	beq	s0,zero,19768 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6fc>
    if (__is_single_threaded())
   19744:	0002a797          	auipc	a5,0x2a
   19748:	d547b783          	ld	a5,-684(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1974c:	0007c783          	lbu	a5,0(a5)
   19750:	0c078463          	beq	a5,zero,19818 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7ac>
    _Atomic_word __result = *__mem;
   19754:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   19758:	fff5079b          	addiw	a5,a0,-1
   1975c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19760:	00100793          	addi	a5,zero,1
   19764:	0cf50263          	beq	a0,a5,19828 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7bc>
      { return _M_ptr; }
   19768:	0004b783          	ld	a5,0(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1976c:	0107b903          	ld	s2,16(a5)
      : _M_pi(__r._M_pi)
   19770:	0187b403          	ld	s0,24(a5)
	if (_M_pi != nullptr)
   19774:	44040c63          	beq	s0,zero,19bcc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb60>
    if (__is_single_threaded())
   19778:	0002a797          	auipc	a5,0x2a
   1977c:	d207b783          	ld	a5,-736(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19780:	0007c783          	lbu	a5,0(a5)
   19784:	10078063          	beq	a5,zero,19884 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x818>
  { *__mem += __val; }
   19788:	03042783          	lw	a5,48(s0)
   1978c:	0017879b          	addiw	a5,a5,1
   19790:	02f42823          	sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   19794:	03213023          	sd	s2,32(sp)
      : _M_pi(__r._M_pi)
   19798:	02813423          	sd	s0,40(sp)
    if (__is_single_threaded())
   1979c:	0002a797          	auipc	a5,0x2a
   197a0:	cfc7b783          	ld	a5,-772(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   197a4:	0007c783          	lbu	a5,0(a5)
   197a8:	0e078663          	beq	a5,zero,19894 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x828>
  { *__mem += __val; }
   197ac:	03042783          	lw	a5,48(s0)
   197b0:	0017879b          	addiw	a5,a5,1
   197b4:	02f42823          	sw	a5,48(s0)
      : sec(sec), pos(sec->begin + offset) {}
   197b8:	00893783          	ld	a5,8(s2)
   197bc:	02f13823          	sd	a5,48(sp)
    if (__is_single_threaded())
   197c0:	0002a797          	auipc	a5,0x2a
   197c4:	cd87b783          	ld	a5,-808(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   197c8:	0007c783          	lbu	a5,0(a5)
   197cc:	0c078c63          	beq	a5,zero,198a4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x838>
    _Atomic_word __result = *__mem;
   197d0:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   197d4:	fff5079b          	addiw	a5,a0,-1
   197d8:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   197dc:	00100793          	addi	a5,zero,1
   197e0:	0cf50a63          	beq	a0,a5,198b4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x848>
  bool end() const { return pos >= sec->end; }
   197e4:	03013603          	ld	a2,48(sp)
      { return _M_ptr; }
   197e8:	02013783          	ld	a5,32(sp)
  while (!infocur.end()) {
   197ec:	0107b703          	ld	a4,16(a5)
   197f0:	20e67c63          	bgeu	a2,a4,19a08 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x99c>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   197f4:	03810b13          	addi	s6,sp,56
   197f8:	0002ab97          	auipc	s7,0x2a
   197fc:	b08bbb83          	ld	s7,-1272(s7) # 43300 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)@@Base+0x265b4>
    infocur.subsection();
   19800:	04010913          	addi	s2,sp,64
   19804:	02010993          	addi	s3,sp,32
    return ::__libc_single_threaded;
   19808:	0002aa17          	auipc	s4,0x2a
   1980c:	c90a3a03          	ld	s4,-880(s4) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19810:	00100a93          	addi	s5,zero,1
   19814:	1600006f          	jal	zero,19974 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x908>
      return __exchange_and_add(__mem, __val);
   19818:	fff00593          	addi	a1,zero,-1
   1981c:	03040513          	addi	a0,s0,48
   19820:	dd1fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19824:	f3dff06f          	jal	zero,19760 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6f4>
	_M_dispose();
   19828:	00043783          	ld	a5,0(s0)
   1982c:	0107b783          	ld	a5,16(a5)
   19830:	00040513          	addi	a0,s0,0
   19834:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19838:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1983c:	0002a797          	auipc	a5,0x2a
   19840:	c5c7b783          	ld	a5,-932(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19844:	0007c783          	lbu	a5,0(a5)
   19848:	02078663          	beq	a5,zero,19874 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x808>
    _Atomic_word __result = *__mem;
   1984c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   19850:	fff5079b          	addiw	a5,a0,-1
   19854:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19858:	00100793          	addi	a5,zero,1
   1985c:	f0f516e3          	bne	a0,a5,19768 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6fc>
	    _M_destroy();
   19860:	00043783          	ld	a5,0(s0)
   19864:	0187b783          	ld	a5,24(a5)
   19868:	00040513          	addi	a0,s0,0
   1986c:	000780e7          	jalr	ra,0(a5)
   19870:	ef9ff06f          	jal	zero,19768 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6fc>
      return __exchange_and_add(__mem, __val);
   19874:	fff00593          	addi	a1,zero,-1
   19878:	03440513          	addi	a0,s0,52
   1987c:	d75fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19880:	fd9ff06f          	jal	zero,19858 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7ec>
      __atomic_add(__mem, __val);
   19884:	00100593          	addi	a1,zero,1
   19888:	03040513          	addi	a0,s0,48
   1988c:	d25fc0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   19890:	f05ff06f          	jal	zero,19794 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x728>
   19894:	00100593          	addi	a1,zero,1
   19898:	03040513          	addi	a0,s0,48
   1989c:	d15fc0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   198a0:	f19ff06f          	jal	zero,197b8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x74c>
      return __exchange_and_add(__mem, __val);
   198a4:	fff00593          	addi	a1,zero,-1
   198a8:	03040513          	addi	a0,s0,48
   198ac:	d45fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   198b0:	f2dff06f          	jal	zero,197dc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x770>
	_M_dispose();
   198b4:	00043783          	ld	a5,0(s0)
   198b8:	0107b783          	ld	a5,16(a5)
   198bc:	00040513          	addi	a0,s0,0
   198c0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   198c4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   198c8:	0002a797          	auipc	a5,0x2a
   198cc:	bd07b783          	ld	a5,-1072(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   198d0:	0007c783          	lbu	a5,0(a5)
   198d4:	02078663          	beq	a5,zero,19900 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x894>
    _Atomic_word __result = *__mem;
   198d8:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   198dc:	fff5079b          	addiw	a5,a0,-1
   198e0:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   198e4:	00100793          	addi	a5,zero,1
   198e8:	eef51ee3          	bne	a0,a5,197e4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x778>
	    _M_destroy();
   198ec:	00043783          	ld	a5,0(s0)
   198f0:	0187b783          	ld	a5,24(a5)
   198f4:	00040513          	addi	a0,s0,0
   198f8:	000780e7          	jalr	ra,0(a5)
   198fc:	ee9ff06f          	jal	zero,197e4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x778>
      return __exchange_and_add(__mem, __val);
   19900:	fff00593          	addi	a1,zero,-1
   19904:	03440513          	addi	a0,s0,52
   19908:	ce9fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1990c:	fd9ff06f          	jal	zero,198e4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x878>
	    ++this->_M_impl._M_finish;
   19910:	03843783          	ld	a5,56(s0)
   19914:	01878793          	addi	a5,a5,24
   19918:	02f43c23          	sd	a5,56(s0)
   1991c:	00098593          	addi	a1,s3,0
   19920:	00090513          	addi	a0,s2,0
   19924:	564040ef          	jal	ra,1de88 <dwarf::cursor::subsection()>
   19928:	01c0006f          	jal	zero,19944 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8d8>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   1992c:	000b0693          	addi	a3,s6,0
   19930:	00048613          	addi	a2,s1,0
   19934:	00050593          	addi	a1,a0,0
   19938:	03040513          	addi	a0,s0,48
   1993c:	000b80e7          	jalr	ra,0(s7)
   19940:	fddff06f          	jal	zero,1991c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8b0>
	if (_M_pi != nullptr)
   19944:	04813403          	ld	s0,72(sp)
   19948:	00040e63          	beq	s0,zero,19964 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8f8>
    if (__is_single_threaded())
   1994c:	000a4783          	lbu	a5,0(s4)
   19950:	04078663          	beq	a5,zero,1999c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x930>
    _Atomic_word __result = *__mem;
   19954:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   19958:	fff5079b          	addiw	a5,a0,-1
   1995c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19960:	05550663          	beq	a0,s5,199ac <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x940>
   19964:	03013603          	ld	a2,48(sp)
      { return _M_ptr; }
   19968:	02013783          	ld	a5,32(sp)
  while (!infocur.end()) {
   1996c:	0107b703          	ld	a4,16(a5)
   19970:	08e67c63          	bgeu	a2,a4,19a08 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x99c>
   19974:	0004b403          	ld	s0,0(s1)
  section_offset get_section_offset() const { return pos - sec->begin; }
   19978:	0087b783          	ld	a5,8(a5)
   1997c:	40f60633          	sub	a2,a2,a5
    m->compilation_units.emplace_back(*this, infocur.get_section_offset());
   19980:	02c13c23          	sd	a2,56(sp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   19984:	03843503          	ld	a0,56(s0)
   19988:	04043783          	ld	a5,64(s0)
   1998c:	faf500e3          	beq	a0,a5,1992c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8c0>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   19990:	00048593          	addi	a1,s1,0
   19994:	e71fe0ef          	jal	ra,18804 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)>
   19998:	f79ff06f          	jal	zero,19910 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8a4>
      return __exchange_and_add(__mem, __val);
   1999c:	fff00593          	addi	a1,zero,-1
   199a0:	03040513          	addi	a0,s0,48
   199a4:	c4dfc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   199a8:	fb9ff06f          	jal	zero,19960 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8f4>
	_M_dispose();
   199ac:	00043783          	ld	a5,0(s0)
   199b0:	0107b783          	ld	a5,16(a5)
   199b4:	00040513          	addi	a0,s0,0
   199b8:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   199bc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   199c0:	0002a797          	auipc	a5,0x2a
   199c4:	ad87b783          	ld	a5,-1320(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   199c8:	0007c783          	lbu	a5,0(a5)
   199cc:	02078663          	beq	a5,zero,199f8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x98c>
    _Atomic_word __result = *__mem;
   199d0:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   199d4:	fff5079b          	addiw	a5,a0,-1
   199d8:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   199dc:	00100793          	addi	a5,zero,1
   199e0:	f8f512e3          	bne	a0,a5,19964 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8f8>
	    _M_destroy();
   199e4:	00043783          	ld	a5,0(s0)
   199e8:	0187b783          	ld	a5,24(a5)
   199ec:	00040513          	addi	a0,s0,0
   199f0:	000780e7          	jalr	ra,0(a5)
   199f4:	f71ff06f          	jal	zero,19964 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8f8>
      return __exchange_and_add(__mem, __val);
   199f8:	fff00593          	addi	a1,zero,-1
   199fc:	03440513          	addi	a0,s0,52
   19a00:	bf1fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19a04:	fd9ff06f          	jal	zero,199dc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x970>
	if (_M_pi != nullptr)
   19a08:	02813403          	ld	s0,40(sp)
   19a0c:	02040463          	beq	s0,zero,19a34 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9c8>
    if (__is_single_threaded())
   19a10:	0002a797          	auipc	a5,0x2a
   19a14:	a887b783          	ld	a5,-1400(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19a18:	0007c783          	lbu	a5,0(a5)
   19a1c:	06078863          	beq	a5,zero,19a8c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xa20>
    _Atomic_word __result = *__mem;
   19a20:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   19a24:	fff5079b          	addiw	a5,a0,-1
   19a28:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19a2c:	00100793          	addi	a5,zero,1
   19a30:	06f50663          	beq	a0,a5,19a9c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xa30>
	if (_M_pi != nullptr)
   19a34:	01013403          	ld	s0,16(sp)
   19a38:	02040463          	beq	s0,zero,19a60 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9f4>
    if (__is_single_threaded())
   19a3c:	0002a797          	auipc	a5,0x2a
   19a40:	a5c7b783          	ld	a5,-1444(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19a44:	0007c783          	lbu	a5,0(a5)
   19a48:	0a078863          	beq	a5,zero,19af8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xa8c>
    _Atomic_word __result = *__mem;
   19a4c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   19a50:	fff5079b          	addiw	a5,a0,-1
   19a54:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19a58:	00100793          	addi	a5,zero,1
   19a5c:	0af50663          	beq	a0,a5,19b08 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xa9c>
}
   19a60:	09813083          	ld	ra,152(sp)
   19a64:	09013403          	ld	s0,144(sp)
   19a68:	08813483          	ld	s1,136(sp)
   19a6c:	08013903          	ld	s2,128(sp)
   19a70:	07813983          	ld	s3,120(sp)
   19a74:	07013a03          	ld	s4,112(sp)
   19a78:	06813a83          	ld	s5,104(sp)
   19a7c:	06013b03          	ld	s6,96(sp)
   19a80:	05813b83          	ld	s7,88(sp)
   19a84:	0a010113          	addi	sp,sp,160
   19a88:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   19a8c:	fff00593          	addi	a1,zero,-1
   19a90:	03040513          	addi	a0,s0,48
   19a94:	b5dfc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19a98:	f95ff06f          	jal	zero,19a2c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9c0>
	_M_dispose();
   19a9c:	00043783          	ld	a5,0(s0)
   19aa0:	0107b783          	ld	a5,16(a5)
   19aa4:	00040513          	addi	a0,s0,0
   19aa8:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19aac:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19ab0:	0002a797          	auipc	a5,0x2a
   19ab4:	9e87b783          	ld	a5,-1560(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19ab8:	0007c783          	lbu	a5,0(a5)
   19abc:	02078663          	beq	a5,zero,19ae8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xa7c>
    _Atomic_word __result = *__mem;
   19ac0:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   19ac4:	fff5079b          	addiw	a5,a0,-1
   19ac8:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19acc:	00100793          	addi	a5,zero,1
   19ad0:	f6f512e3          	bne	a0,a5,19a34 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9c8>
	    _M_destroy();
   19ad4:	00043783          	ld	a5,0(s0)
   19ad8:	0187b783          	ld	a5,24(a5)
   19adc:	00040513          	addi	a0,s0,0
   19ae0:	000780e7          	jalr	ra,0(a5)
   19ae4:	f51ff06f          	jal	zero,19a34 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9c8>
      return __exchange_and_add(__mem, __val);
   19ae8:	fff00593          	addi	a1,zero,-1
   19aec:	03440513          	addi	a0,s0,52
   19af0:	b01fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19af4:	fd9ff06f          	jal	zero,19acc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xa60>
   19af8:	fff00593          	addi	a1,zero,-1
   19afc:	03040513          	addi	a0,s0,48
   19b00:	af1fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19b04:	f55ff06f          	jal	zero,19a58 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9ec>
	_M_dispose();
   19b08:	00043783          	ld	a5,0(s0)
   19b0c:	0107b783          	ld	a5,16(a5)
   19b10:	00040513          	addi	a0,s0,0
   19b14:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19b18:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19b1c:	0002a797          	auipc	a5,0x2a
   19b20:	97c7b783          	ld	a5,-1668(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19b24:	0007c783          	lbu	a5,0(a5)
   19b28:	02078663          	beq	a5,zero,19b54 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xae8>
    _Atomic_word __result = *__mem;
   19b2c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   19b30:	fff5079b          	addiw	a5,a0,-1
   19b34:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19b38:	00100793          	addi	a5,zero,1
   19b3c:	f2f512e3          	bne	a0,a5,19a60 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9f4>
	    _M_destroy();
   19b40:	00043783          	ld	a5,0(s0)
   19b44:	0187b783          	ld	a5,24(a5)
   19b48:	00040513          	addi	a0,s0,0
   19b4c:	000780e7          	jalr	ra,0(a5)
   19b50:	f11ff06f          	jal	zero,19a60 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9f4>
      return __exchange_and_add(__mem, __val);
   19b54:	fff00593          	addi	a1,zero,-1
   19b58:	03440513          	addi	a0,s0,52
   19b5c:	a95fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19b60:	fd9ff06f          	jal	zero,19b38 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xacc>
    throw format_error("required .debug_info section missing");
   19b64:	00050413          	addi	s0,a0,0
   19b68:	00090513          	addi	a0,s2,0
   19b6c:	be5fc0ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   19b70:	0084b503          	ld	a0,8(s1)
   19b74:	00050863          	beq	a0,zero,19b84 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb18>
	  _M_pi->_M_release();
   19b78:	0002a317          	auipc	t1,0x2a
   19b7c:	86833303          	ld	t1,-1944(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   19b80:	000300e7          	jalr	ra,0(t1)
   19b84:	00040513          	addi	a0,s0,0
   19b88:	e09fc0ef          	jal	ra,16990 <_Unwind_Resume@plt>
    throw format_error("required .debug_abbrev section missing");
   19b8c:	00050413          	addi	s0,a0,0
   19b90:	00090513          	addi	a0,s2,0
   19b94:	bbdfc0ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   19b98:	01013503          	ld	a0,16(sp)
   19b9c:	fc050ae3          	beq	a0,zero,19b70 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb04>
	  _M_pi->_M_release();
   19ba0:	0002a317          	auipc	t1,0x2a
   19ba4:	84033303          	ld	t1,-1984(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   19ba8:	000300e7          	jalr	ra,0(t1)
   19bac:	fc5ff06f          	jal	zero,19b70 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb04>
	if (_M_pi != nullptr)
   19bb0:	00050413          	addi	s0,a0,0
   19bb4:	02813503          	ld	a0,40(sp)
   19bb8:	fe0500e3          	beq	a0,zero,19b98 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb2c>
	  _M_pi->_M_release();
   19bbc:	0002a317          	auipc	t1,0x2a
   19bc0:	82433303          	ld	t1,-2012(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   19bc4:	000300e7          	jalr	ra,0(t1)
   19bc8:	fd1ff06f          	jal	zero,19b98 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb2c>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   19bcc:	03213023          	sd	s2,32(sp)
      : _M_pi(__r._M_pi)
   19bd0:	02013423          	sd	zero,40(sp)
      : sec(sec), pos(sec->begin + offset) {}
   19bd4:	00893603          	ld	a2,8(s2)
   19bd8:	02c13823          	sd	a2,48(sp)
      { return _M_ptr; }
   19bdc:	00090793          	addi	a5,s2,0
  while (!infocur.end()) {
   19be0:	01093703          	ld	a4,16(s2)
   19be4:	c0e668e3          	bltu	a2,a4,197f4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x788>
   19be8:	e4dff06f          	jal	zero,19a34 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9c8>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   19bec:	01413423          	sd	s4,8(sp)
      : _M_pi(__r._M_pi)
   19bf0:	00013823          	sd	zero,16(sp)
   19bf4:	008a3783          	ld	a5,8(s4)
   19bf8:	00f13c23          	sd	a5,24(sp)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   19bfc:	00813783          	ld	a5,8(sp)
   19c00:	0107b703          	ld	a4,16(a5)
   19c04:	01813783          	ld	a5,24(sp)
   19c08:	40f70633          	sub	a2,a4,a5
   19c0c:	00300693          	addi	a3,zero,3
   19c10:	00c6f463          	bgeu	a3,a2,19c18 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xbac>
   19c14:	80e7e6e3          	bltu	a5,a4,19420 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3b4>
      underflow();
   19c18:	00810513          	addi	a0,sp,8
   19c1c:	529030ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
   19c20:	801ff06f          	jal	zero,19420 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3b4>

0000000000019c24 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)>:
type_unit::type_unit(const dwarf &file, section_offset offset) {
   19c24:	f2010113          	addi	sp,sp,-224
   19c28:	0c113c23          	sd	ra,216(sp)
   19c2c:	0c813823          	sd	s0,208(sp)
   19c30:	0c913423          	sd	s1,200(sp)
   19c34:	0d213023          	sd	s2,192(sp)
   19c38:	0b313c23          	sd	s3,184(sp)
   19c3c:	0b413823          	sd	s4,176(sp)
   19c40:	0b513423          	sd	s5,168(sp)
   19c44:	0b613023          	sd	s6,160(sp)
   19c48:	09713c23          	sd	s7,152(sp)
   19c4c:	09813823          	sd	s8,144(sp)
   19c50:	00050913          	addi	s2,a0,0
   19c54:	00058993          	addi	s3,a1,0
   19c58:	00060a13          	addi	s4,a2,0
      : _M_ptr(0), _M_refcount()
   19c5c:	00053423          	sd	zero,8(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   19c60:	00053823          	sd	zero,16(a0)
   19c64:	00029797          	auipc	a5,0x29
   19c68:	70c7b783          	ld	a5,1804(a5) # 43370 <vtable for dwarf::type_unit@@Base+0xa00>
   19c6c:	01078793          	addi	a5,a5,16
   19c70:	00f53023          	sd	a5,0(a0)
  cursor cur(file.get_section(section_type::types), offset);
   19c74:	00b00613          	addi	a2,zero,11
   19c78:	08010513          	addi	a0,sp,128
   19c7c:	ebcfe0ef          	jal	ra,18338 <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   19c80:	08013783          	ld	a5,128(sp)
   19c84:	00f13823          	sd	a5,16(sp)
      : _M_pi(__r._M_pi)
   19c88:	08813503          	ld	a0,136(sp)
   19c8c:	00a13c23          	sd	a0,24(sp)
	if (_M_pi != nullptr)
   19c90:	02050063          	beq	a0,zero,19cb0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8c>
    if (__is_single_threaded())
   19c94:	0002a797          	auipc	a5,0x2a
   19c98:	8047b783          	ld	a5,-2044(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19c9c:	0007c783          	lbu	a5,0(a5)
   19ca0:	04078e63          	beq	a5,zero,19cfc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xd8>
  { *__mem += __val; }
   19ca4:	03052783          	lw	a5,48(a0)
   19ca8:	0017879b          	addiw	a5,a5,1
   19cac:	02f52823          	sw	a5,48(a0)
      : sec(sec), pos(sec->begin + offset) {}
   19cb0:	08013783          	ld	a5,128(sp)
   19cb4:	0087b783          	ld	a5,8(a5)
   19cb8:	014787b3          	add	a5,a5,s4
   19cbc:	02f13023          	sd	a5,32(sp)
	if (_M_pi != nullptr)
   19cc0:	08813403          	ld	s0,136(sp)
   19cc4:	02040463          	beq	s0,zero,19cec <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xc8>
    if (__is_single_threaded())
   19cc8:	00029797          	auipc	a5,0x29
   19ccc:	7d07b783          	ld	a5,2000(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19cd0:	0007c783          	lbu	a5,0(a5)
   19cd4:	02078c63          	beq	a5,zero,19d0c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xe8>
    _Atomic_word __result = *__mem;
   19cd8:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   19cdc:	fff5079b          	addiw	a5,a0,-1
   19ce0:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19ce4:	00100793          	addi	a5,zero,1
   19ce8:	02f50a63          	beq	a0,a5,19d1c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xf8>
  std::shared_ptr<section> subsec = cur.subsection();
   19cec:	01010593          	addi	a1,sp,16
   19cf0:	00010513          	addi	a0,sp,0
   19cf4:	194040ef          	jal	ra,1de88 <dwarf::cursor::subsection()>
   19cf8:	0800006f          	jal	zero,19d78 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x154>
      __atomic_add(__mem, __val);
   19cfc:	00100593          	addi	a1,zero,1
   19d00:	03050513          	addi	a0,a0,48
   19d04:	8adfc0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   19d08:	fa9ff06f          	jal	zero,19cb0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8c>
      return __exchange_and_add(__mem, __val);
   19d0c:	fff00593          	addi	a1,zero,-1
   19d10:	03040513          	addi	a0,s0,48
   19d14:	8ddfc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19d18:	fcdff06f          	jal	zero,19ce4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xc0>
	_M_dispose();
   19d1c:	00043783          	ld	a5,0(s0)
   19d20:	0107b783          	ld	a5,16(a5)
   19d24:	00040513          	addi	a0,s0,0
   19d28:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19d2c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19d30:	00029797          	auipc	a5,0x29
   19d34:	7687b783          	ld	a5,1896(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19d38:	0007c783          	lbu	a5,0(a5)
   19d3c:	02078663          	beq	a5,zero,19d68 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x144>
    _Atomic_word __result = *__mem;
   19d40:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   19d44:	fff5079b          	addiw	a5,a0,-1
   19d48:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19d4c:	00100793          	addi	a5,zero,1
   19d50:	f8f51ee3          	bne	a0,a5,19cec <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xc8>
	    _M_destroy();
   19d54:	00043783          	ld	a5,0(s0)
   19d58:	0187b783          	ld	a5,24(a5)
   19d5c:	00040513          	addi	a0,s0,0
   19d60:	000780e7          	jalr	ra,0(a5)
   19d64:	f89ff06f          	jal	zero,19cec <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xc8>
      return __exchange_and_add(__mem, __val);
   19d68:	fff00593          	addi	a1,zero,-1
   19d6c:	03440513          	addi	a0,s0,52
   19d70:	881fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19d74:	fd9ff06f          	jal	zero,19d4c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x128>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   19d78:	00013483          	ld	s1,0(sp)
      : _M_pi(__r._M_pi)
   19d7c:	00813403          	ld	s0,8(sp)
	if (_M_pi != nullptr)
   19d80:	78040463          	beq	s0,zero,1a508 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8e4>
    if (__is_single_threaded())
   19d84:	00029797          	auipc	a5,0x29
   19d88:	7147b783          	ld	a5,1812(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19d8c:	0007c783          	lbu	a5,0(a5)
   19d90:	0a078663          	beq	a5,zero,19e3c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x218>
  { *__mem += __val; }
   19d94:	03042783          	lw	a5,48(s0)
   19d98:	0017879b          	addiw	a5,a5,1
   19d9c:	02f42823          	sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   19da0:	02913423          	sd	s1,40(sp)
      : _M_pi(__r._M_pi)
   19da4:	02813823          	sd	s0,48(sp)
    if (__is_single_threaded())
   19da8:	00029797          	auipc	a5,0x29
   19dac:	6f07b783          	ld	a5,1776(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19db0:	0007c783          	lbu	a5,0(a5)
   19db4:	08078c63          	beq	a5,zero,19e4c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x228>
  { *__mem += __val; }
   19db8:	03042783          	lw	a5,48(s0)
   19dbc:	0017879b          	addiw	a5,a5,1
   19dc0:	02f42823          	sw	a5,48(s0)
   19dc4:	0084b783          	ld	a5,8(s1)
   19dc8:	02f13c23          	sd	a5,56(sp)
    if (__is_single_threaded())
   19dcc:	00029797          	auipc	a5,0x29
   19dd0:	6cc7b783          	ld	a5,1740(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19dd4:	0007c783          	lbu	a5,0(a5)
   19dd8:	08078263          	beq	a5,zero,19e5c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x238>
    _Atomic_word __result = *__mem;
   19ddc:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   19de0:	fff5079b          	addiw	a5,a0,-1
   19de4:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19de8:	00100793          	addi	a5,zero,1
   19dec:	72f51663          	bne	a0,a5,1a518 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8f4>
	_M_dispose();
   19df0:	00043783          	ld	a5,0(s0)
   19df4:	0107b783          	ld	a5,16(a5)
   19df8:	00040513          	addi	a0,s0,0
   19dfc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19e00:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19e04:	00029797          	auipc	a5,0x29
   19e08:	6947b783          	ld	a5,1684(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   19e0c:	0007c783          	lbu	a5,0(a5)
   19e10:	04078e63          	beq	a5,zero,19e6c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x248>
    _Atomic_word __result = *__mem;
   19e14:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   19e18:	fff5079b          	addiw	a5,a0,-1
   19e1c:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19e20:	00100793          	addi	a5,zero,1
   19e24:	6ef51a63          	bne	a0,a5,1a518 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8f4>
	    _M_destroy();
   19e28:	00043783          	ld	a5,0(s0)
   19e2c:	0187b783          	ld	a5,24(a5)
   19e30:	00040513          	addi	a0,s0,0
   19e34:	000780e7          	jalr	ra,0(a5)
   19e38:	6e00006f          	jal	zero,1a518 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8f4>
      __atomic_add(__mem, __val);
   19e3c:	00100593          	addi	a1,zero,1
   19e40:	03040513          	addi	a0,s0,48
   19e44:	f6cfc0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   19e48:	f59ff06f          	jal	zero,19da0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x17c>
   19e4c:	00100593          	addi	a1,zero,1
   19e50:	03040513          	addi	a0,s0,48
   19e54:	f5cfc0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   19e58:	f6dff06f          	jal	zero,19dc4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1a0>
      return __exchange_and_add(__mem, __val);
   19e5c:	fff00593          	addi	a1,zero,-1
   19e60:	03040513          	addi	a0,s0,48
   19e64:	f8cfc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19e68:	f81ff06f          	jal	zero,19de8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1c4>
   19e6c:	fff00593          	addi	a1,zero,-1
   19e70:	03440513          	addi	a0,s0,52
   19e74:	f7cfc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19e78:	fa9ff06f          	jal	zero,19e20 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1fc>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   19e7c:	02813783          	ld	a5,40(sp)
   19e80:	0107b703          	ld	a4,16(a5)
   19e84:	03813783          	ld	a5,56(sp)
   19e88:	40f70633          	sub	a2,a4,a5
   19e8c:	00100693          	addi	a3,zero,1
   19e90:	00c6f463          	bgeu	a3,a2,19e98 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x274>
   19e94:	00e7e663          	bltu	a5,a4,19ea0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x27c>
      underflow();
   19e98:	02810513          	addi	a0,sp,40
   19e9c:	2a9030ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   19ea0:	03813703          	ld	a4,56(sp)
    if (sec->ord == byte_order::lsb) {
   19ea4:	02813783          	ld	a5,40(sp)
   19ea8:	01c7a783          	lw	a5,28(a5)
   19eac:	02079c63          	bne	a5,zero,19ee4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x2c0>
        val |= ((uint64_t)p[i]) << (i * 8);
   19eb0:	00174783          	lbu	a5,1(a4)
   19eb4:	00879793          	slli	a5,a5,0x8
   19eb8:	00074683          	lbu	a3,0(a4)
   19ebc:	00d7e7b3          	or	a5,a5,a3
    pos += sizeof(T);
   19ec0:	00270713          	addi	a4,a4,2
   19ec4:	02e13c23          	sd	a4,56(sp)
    return (T)val;
   19ec8:	03079413          	slli	s0,a5,0x30
   19ecc:	03045413          	srli	s0,s0,0x30
  if (version != 4)
   19ed0:	00400713          	addi	a4,zero,4
   19ed4:	02e79263          	bne	a5,a4,19ef8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x2d4>
  section_offset debug_abbrev_offset = sub.offset();
   19ed8:	02810513          	addi	a0,sp,40
   19edc:	1f4040ef          	jal	ra,1e0d0 <dwarf::cursor::offset()>
   19ee0:	0bc0006f          	jal	zero,19f9c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x378>
        val = (val << 8) | (uint64_t)p[i];
   19ee4:	00074783          	lbu	a5,0(a4)
   19ee8:	00879793          	slli	a5,a5,0x8
   19eec:	00174683          	lbu	a3,1(a4)
   19ef0:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   19ef4:	fcdff06f          	jal	zero,19ec0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x29c>
    throw format_error("unknown type unit version " + std::to_string(version));
   19ef8:	01000513          	addi	a0,zero,16
   19efc:	f94fc0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   19f00:	00050493          	addi	s1,a0,0
   19f04:	00040593          	addi	a1,s0,0
   19f08:	06010413          	addi	s0,sp,96
   19f0c:	00040513          	addi	a0,s0,0
   19f10:	00029317          	auipc	t1,0x29
   19f14:	59833303          	ld	t1,1432(t1) # 434a8 <std::__cxx11::to_string(int)@@Base+0x278c0>
   19f18:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   19f1c:	0001e617          	auipc	a2,0x1e
   19f20:	92460613          	addi	a2,a2,-1756 # 37840 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xc0>
   19f24:	00000593          	addi	a1,zero,0
   19f28:	00040513          	addi	a0,s0,0
   19f2c:	ed4fc0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   19f30:	00050593          	addi	a1,a0,0
   19f34:	04010413          	addi	s0,sp,64
   19f38:	00040513          	addi	a0,s0,0
   19f3c:	f94fc0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   19f40:	00040593          	addi	a1,s0,0
   19f44:	00048513          	addi	a0,s1,0
   19f48:	8e9fc0ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   19f4c:	00029797          	auipc	a5,0x29
   19f50:	6247b783          	ld	a5,1572(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   19f54:	01078793          	addi	a5,a5,16
   19f58:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   19f5c:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   19f60:	05010793          	addi	a5,sp,80
   19f64:	00f50463          	beq	a0,a5,19f6c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x348>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   19f68:	839fc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   19f6c:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   19f70:	07010793          	addi	a5,sp,112
   19f74:	00f50463          	beq	a0,a5,19f7c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x358>
   19f78:	829fc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   19f7c:	00029617          	auipc	a2,0x29
   19f80:	41c63603          	ld	a2,1052(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   19f84:	00029597          	auipc	a1,0x29
   19f88:	3445b583          	ld	a1,836(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   19f8c:	00048513          	addi	a0,s1,0
   19f90:	9d1fc0ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   19f94:	00050413          	addi	s0,a0,0
   19f98:	4d80006f          	jal	zero,1a470 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x84c>
  section_offset debug_abbrev_offset = sub.offset();
   19f9c:	00050a93          	addi	s5,a0,0
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   19fa0:	02813783          	ld	a5,40(sp)
   19fa4:	0107b703          	ld	a4,16(a5)
   19fa8:	03813783          	ld	a5,56(sp)
   19fac:	00e7e663          	bltu	a5,a4,19fb8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x394>
      underflow();
   19fb0:	02810513          	addi	a0,sp,40
   19fb4:	191030ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   19fb8:	03813783          	ld	a5,56(sp)
      { return _M_ptr; }
   19fbc:	02813703          	ld	a4,40(sp)
    if (sec->ord == byte_order::lsb) {
   19fc0:	01c72683          	lw	a3,28(a4)
   19fc4:	50068863          	beq	a3,zero,1a4d4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8b0>
        val = (val << 8) | (uint64_t)p[i];
   19fc8:	0007c603          	lbu	a2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   19fcc:	50c0006f          	jal	zero,1a4d8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8b4>
    const unsigned char *p = (const unsigned char *)pos;
   19fd0:	03813603          	ld	a2,56(sp)
    if (sec->ord == byte_order::lsb) {
   19fd4:	02813783          	ld	a5,40(sp)
   19fd8:	01c7a783          	lw	a5,28(a5)
   19fdc:	02079e63          	bne	a5,zero,1a018 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x3f4>
   19fe0:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   19fe4:	00000493          	addi	s1,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   19fe8:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   19fec:	0006c703          	lbu	a4,0(a3)
   19ff0:	00f71733          	sll	a4,a4,a5
   19ff4:	00e4e4b3          	or	s1,s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   19ff8:	00168693          	addi	a3,a3,1
   19ffc:	0087879b          	addiw	a5,a5,8
   1a000:	feb796e3          	bne	a5,a1,19fec <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x3c8>
    pos += sizeof(T);
   1a004:	00860613          	addi	a2,a2,8
   1a008:	02c13c23          	sd	a2,56(sp)
  section_offset type_offset = sub.offset();
   1a00c:	02810513          	addi	a0,sp,40
   1a010:	0c0040ef          	jal	ra,1e0d0 <dwarf::cursor::offset()>
   1a014:	0280006f          	jal	zero,1a03c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x418>
   1a018:	00060793          	addi	a5,a2,0
   1a01c:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1a020:	00000493          	addi	s1,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1a024:	00849493          	slli	s1,s1,0x8
   1a028:	0007c703          	lbu	a4,0(a5)
   1a02c:	009764b3          	or	s1,a4,s1
      for (unsigned i = 0; i < sizeof(T); i++)
   1a030:	00178793          	addi	a5,a5,1
   1a034:	fef698e3          	bne	a3,a5,1a024 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x400>
   1a038:	fcdff06f          	jal	zero,1a004 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x3e0>
   1a03c:	00050b13          	addi	s6,a0,0
  section_offset get_section_offset() const { return pos - sec->begin; }
   1a040:	02813783          	ld	a5,40(sp)
   1a044:	0087b783          	ld	a5,8(a5)
   1a048:	03813b83          	ld	s7,56(sp)
   1a04c:	40fb8bb3          	sub	s7,s7,a5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1a050:	1c800513          	addi	a0,zero,456
   1a054:	f5cfc0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1a058:	00050413          	addi	s0,a0,0
   1a05c:	00052423          	sw	zero,8(a0)
   1a060:	00052623          	sw	zero,12(a0)
   1a064:	00052823          	sw	zero,16(a0)
   1a068:	00052a23          	sw	zero,20(a0)
   1a06c:	00052c23          	sw	zero,24(a0)
   1a070:	00052e23          	sw	zero,28(a0)
   1a074:	02053023          	sd	zero,32(a0)
   1a078:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   1a07c:	00100793          	addi	a5,zero,1
   1a080:	02f52823          	sw	a5,48(a0)
   1a084:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   1a088:	00029797          	auipc	a5,0x29
   1a08c:	3c87b783          	ld	a5,968(a5) # 43450 <vtable for std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xa50>
   1a090:	01078793          	addi	a5,a5,16
   1a094:	00f53023          	sd	a5,0(a0)
   1a098:	03850c13          	addi	s8,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1a09c:	0009b783          	ld	a5,0(s3)
   1a0a0:	02f53c23          	sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   1a0a4:	0089b503          	ld	a0,8(s3)
   1a0a8:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   1a0ac:	02050063          	beq	a0,zero,1a0cc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4a8>
    if (__is_single_threaded())
   1a0b0:	00029797          	auipc	a5,0x29
   1a0b4:	3e87b783          	ld	a5,1000(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a0b8:	0007c783          	lbu	a5,0(a5)
   1a0bc:	1a078c63          	beq	a5,zero,1a274 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x650>
  { *__mem += __val; }
   1a0c0:	03052783          	lw	a5,48(a0)
   1a0c4:	0017879b          	addiw	a5,a5,1
   1a0c8:	02f52823          	sw	a5,48(a0)
      : file(file), offset(offset), subsec(subsec),
   1a0cc:	05443423          	sd	s4,72(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1a0d0:	00013783          	ld	a5,0(sp)
   1a0d4:	04f43823          	sd	a5,80(s0)
      : _M_pi(__r._M_pi)
   1a0d8:	00813503          	ld	a0,8(sp)
   1a0dc:	04a43c23          	sd	a0,88(s0)
	if (_M_pi != nullptr)
   1a0e0:	02050063          	beq	a0,zero,1a100 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4dc>
    if (__is_single_threaded())
   1a0e4:	00029797          	auipc	a5,0x29
   1a0e8:	3b47b783          	ld	a5,948(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a0ec:	0007c783          	lbu	a5,0(a5)
   1a0f0:	18078a63          	beq	a5,zero,1a284 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x660>
  { *__mem += __val; }
   1a0f4:	03052783          	lw	a5,48(a0)
   1a0f8:	0017879b          	addiw	a5,a5,1
   1a0fc:	02f52823          	sw	a5,48(a0)
        debug_abbrev_offset(debug_abbrev_offset), root_offset(root_offset),
   1a100:	07543023          	sd	s5,96(s0)
   1a104:	07743423          	sd	s7,104(s0)
        type_signature(type_signature), type_offset(type_offset),
   1a108:	06943823          	sd	s1,112(s0)
   1a10c:	07643c23          	sd	s6,120(s0)
  die() : cu(nullptr), abbrev(nullptr) {}
   1a110:	08043423          	sd	zero,136(s0)
   1a114:	08043823          	sd	zero,144(s0)
   1a118:	0a040793          	addi	a5,s0,160
   1a11c:	0cf43823          	sd	a5,208(s0)
   1a120:	0cf43c23          	sd	a5,216(s0)
   1a124:	0d040793          	addi	a5,s0,208
   1a128:	0ef43023          	sd	a5,224(s0)
   1a12c:	0e043c23          	sd	zero,248(s0)
   1a130:	10043023          	sd	zero,256(s0)
   1a134:	11040793          	addi	a5,s0,272
   1a138:	14f43023          	sd	a5,320(s0)
   1a13c:	14f43423          	sd	a5,328(s0)
   1a140:	14040793          	addi	a5,s0,320
   1a144:	14f43823          	sd	a5,336(s0)
      : _M_ptr(0), _M_refcount()
   1a148:	16043023          	sd	zero,352(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1a14c:	16043423          	sd	zero,360(s0)
        have_abbrevs(false) {}
   1a150:	16040823          	sb	zero,368(s0)
   1a154:	16043c23          	sd	zero,376(s0)
   1a158:	18043023          	sd	zero,384(s0)
   1a15c:	18043423          	sd	zero,392(s0)
   1a160:	1c040793          	addi	a5,s0,448
   1a164:	18f43823          	sd	a5,400(s0)
   1a168:	00100793          	addi	a5,zero,1
   1a16c:	18f43c23          	sd	a5,408(s0)
    _Hash_node_base() noexcept : _M_nxt() { }
   1a170:	1a043023          	sd	zero,416(s0)
   1a174:	1a043423          	sd	zero,424(s0)
    : _M_max_load_factor(__z), _M_next_resize(0) { }
   1a178:	0001e797          	auipc	a5,0x1e
   1a17c:	9507a787          	flw	fa5,-1712(a5) # 37ac8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xf0>
   1a180:	1af42827          	fsw	fa5,432(s0)
   1a184:	1a043c23          	sd	zero,440(s0)
   1a188:	1c043023          	sd	zero,448(s0)
   1a18c:	01893423          	sd	s8,8(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1a190:	01093483          	ld	s1,16(s2)
	__r._M_pi = _M_pi;
   1a194:	00893823          	sd	s0,16(s2)
	if (_M_pi != nullptr)
   1a198:	02048463          	beq	s1,zero,1a1c0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x59c>
    if (__is_single_threaded())
   1a19c:	00029797          	auipc	a5,0x29
   1a1a0:	2fc7b783          	ld	a5,764(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a1a4:	0007c783          	lbu	a5,0(a5)
   1a1a8:	0e078663          	beq	a5,zero,1a294 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x670>
    _Atomic_word __result = *__mem;
   1a1ac:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1a1b0:	fff5079b          	addiw	a5,a0,-1
   1a1b4:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a1b8:	00100793          	addi	a5,zero,1
   1a1bc:	0ef50463          	beq	a0,a5,1a2a4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x680>
	if (_M_pi != nullptr)
   1a1c0:	03013403          	ld	s0,48(sp)
   1a1c4:	02040463          	beq	s0,zero,1a1ec <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5c8>
    if (__is_single_threaded())
   1a1c8:	00029797          	auipc	a5,0x29
   1a1cc:	2d07b783          	ld	a5,720(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a1d0:	0007c783          	lbu	a5,0(a5)
   1a1d4:	12078663          	beq	a5,zero,1a300 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x6dc>
    _Atomic_word __result = *__mem;
   1a1d8:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1a1dc:	fff5079b          	addiw	a5,a0,-1
   1a1e0:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a1e4:	00100793          	addi	a5,zero,1
   1a1e8:	12f50463          	beq	a0,a5,1a310 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x6ec>
	if (_M_pi != nullptr)
   1a1ec:	00813403          	ld	s0,8(sp)
   1a1f0:	02040463          	beq	s0,zero,1a218 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5f4>
    if (__is_single_threaded())
   1a1f4:	00029797          	auipc	a5,0x29
   1a1f8:	2a47b783          	ld	a5,676(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a1fc:	0007c783          	lbu	a5,0(a5)
   1a200:	16078663          	beq	a5,zero,1a36c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x748>
    _Atomic_word __result = *__mem;
   1a204:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1a208:	fff5079b          	addiw	a5,a0,-1
   1a20c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a210:	00100793          	addi	a5,zero,1
   1a214:	16f50463          	beq	a0,a5,1a37c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x758>
	if (_M_pi != nullptr)
   1a218:	01813403          	ld	s0,24(sp)
   1a21c:	02040463          	beq	s0,zero,1a244 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x620>
    if (__is_single_threaded())
   1a220:	00029797          	auipc	a5,0x29
   1a224:	2787b783          	ld	a5,632(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a228:	0007c783          	lbu	a5,0(a5)
   1a22c:	1a078663          	beq	a5,zero,1a3d8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x7b4>
    _Atomic_word __result = *__mem;
   1a230:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1a234:	fff5079b          	addiw	a5,a0,-1
   1a238:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a23c:	00100793          	addi	a5,zero,1
   1a240:	1af50463          	beq	a0,a5,1a3e8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x7c4>
}
   1a244:	0d813083          	ld	ra,216(sp)
   1a248:	0d013403          	ld	s0,208(sp)
   1a24c:	0c813483          	ld	s1,200(sp)
   1a250:	0c013903          	ld	s2,192(sp)
   1a254:	0b813983          	ld	s3,184(sp)
   1a258:	0b013a03          	ld	s4,176(sp)
   1a25c:	0a813a83          	ld	s5,168(sp)
   1a260:	0a013b03          	ld	s6,160(sp)
   1a264:	09813b83          	ld	s7,152(sp)
   1a268:	09013c03          	ld	s8,144(sp)
   1a26c:	0e010113          	addi	sp,sp,224
   1a270:	00008067          	jalr	zero,0(ra)
      __atomic_add(__mem, __val);
   1a274:	00100593          	addi	a1,zero,1
   1a278:	03050513          	addi	a0,a0,48
   1a27c:	b34fc0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1a280:	e4dff06f          	jal	zero,1a0cc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4a8>
   1a284:	00100593          	addi	a1,zero,1
   1a288:	03050513          	addi	a0,a0,48
   1a28c:	b24fc0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1a290:	e71ff06f          	jal	zero,1a100 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4dc>
      return __exchange_and_add(__mem, __val);
   1a294:	fff00593          	addi	a1,zero,-1
   1a298:	03048513          	addi	a0,s1,48
   1a29c:	b54fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a2a0:	f19ff06f          	jal	zero,1a1b8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x594>
	_M_dispose();
   1a2a4:	0004b783          	ld	a5,0(s1)
   1a2a8:	0107b783          	ld	a5,16(a5)
   1a2ac:	00048513          	addi	a0,s1,0
   1a2b0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a2b4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a2b8:	00029797          	auipc	a5,0x29
   1a2bc:	1e07b783          	ld	a5,480(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a2c0:	0007c783          	lbu	a5,0(a5)
   1a2c4:	02078663          	beq	a5,zero,1a2f0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x6cc>
    _Atomic_word __result = *__mem;
   1a2c8:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   1a2cc:	fff5079b          	addiw	a5,a0,-1
   1a2d0:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a2d4:	00100793          	addi	a5,zero,1
   1a2d8:	eef514e3          	bne	a0,a5,1a1c0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x59c>
	    _M_destroy();
   1a2dc:	0004b783          	ld	a5,0(s1)
   1a2e0:	0187b783          	ld	a5,24(a5)
   1a2e4:	00048513          	addi	a0,s1,0
   1a2e8:	000780e7          	jalr	ra,0(a5)
   1a2ec:	ed5ff06f          	jal	zero,1a1c0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x59c>
      return __exchange_and_add(__mem, __val);
   1a2f0:	fff00593          	addi	a1,zero,-1
   1a2f4:	03448513          	addi	a0,s1,52
   1a2f8:	af8fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a2fc:	fd9ff06f          	jal	zero,1a2d4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x6b0>
   1a300:	fff00593          	addi	a1,zero,-1
   1a304:	03040513          	addi	a0,s0,48
   1a308:	ae8fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a30c:	ed9ff06f          	jal	zero,1a1e4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5c0>
	_M_dispose();
   1a310:	00043783          	ld	a5,0(s0)
   1a314:	0107b783          	ld	a5,16(a5)
   1a318:	00040513          	addi	a0,s0,0
   1a31c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a320:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a324:	00029797          	auipc	a5,0x29
   1a328:	1747b783          	ld	a5,372(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a32c:	0007c783          	lbu	a5,0(a5)
   1a330:	02078663          	beq	a5,zero,1a35c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x738>
    _Atomic_word __result = *__mem;
   1a334:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1a338:	fff5079b          	addiw	a5,a0,-1
   1a33c:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a340:	00100793          	addi	a5,zero,1
   1a344:	eaf514e3          	bne	a0,a5,1a1ec <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5c8>
	    _M_destroy();
   1a348:	00043783          	ld	a5,0(s0)
   1a34c:	0187b783          	ld	a5,24(a5)
   1a350:	00040513          	addi	a0,s0,0
   1a354:	000780e7          	jalr	ra,0(a5)
   1a358:	e95ff06f          	jal	zero,1a1ec <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5c8>
      return __exchange_and_add(__mem, __val);
   1a35c:	fff00593          	addi	a1,zero,-1
   1a360:	03440513          	addi	a0,s0,52
   1a364:	a8cfc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a368:	fd9ff06f          	jal	zero,1a340 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x71c>
   1a36c:	fff00593          	addi	a1,zero,-1
   1a370:	03040513          	addi	a0,s0,48
   1a374:	a7cfc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a378:	e99ff06f          	jal	zero,1a210 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5ec>
	_M_dispose();
   1a37c:	00043783          	ld	a5,0(s0)
   1a380:	0107b783          	ld	a5,16(a5)
   1a384:	00040513          	addi	a0,s0,0
   1a388:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a38c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a390:	00029797          	auipc	a5,0x29
   1a394:	1087b783          	ld	a5,264(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a398:	0007c783          	lbu	a5,0(a5)
   1a39c:	02078663          	beq	a5,zero,1a3c8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x7a4>
    _Atomic_word __result = *__mem;
   1a3a0:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1a3a4:	fff5079b          	addiw	a5,a0,-1
   1a3a8:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a3ac:	00100793          	addi	a5,zero,1
   1a3b0:	e6f514e3          	bne	a0,a5,1a218 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5f4>
	    _M_destroy();
   1a3b4:	00043783          	ld	a5,0(s0)
   1a3b8:	0187b783          	ld	a5,24(a5)
   1a3bc:	00040513          	addi	a0,s0,0
   1a3c0:	000780e7          	jalr	ra,0(a5)
   1a3c4:	e55ff06f          	jal	zero,1a218 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5f4>
      return __exchange_and_add(__mem, __val);
   1a3c8:	fff00593          	addi	a1,zero,-1
   1a3cc:	03440513          	addi	a0,s0,52
   1a3d0:	a20fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a3d4:	fd9ff06f          	jal	zero,1a3ac <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x788>
   1a3d8:	fff00593          	addi	a1,zero,-1
   1a3dc:	03040513          	addi	a0,s0,48
   1a3e0:	a10fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a3e4:	e59ff06f          	jal	zero,1a23c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x618>
	_M_dispose();
   1a3e8:	00043783          	ld	a5,0(s0)
   1a3ec:	0107b783          	ld	a5,16(a5)
   1a3f0:	00040513          	addi	a0,s0,0
   1a3f4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a3f8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a3fc:	00029797          	auipc	a5,0x29
   1a400:	09c7b783          	ld	a5,156(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a404:	0007c783          	lbu	a5,0(a5)
   1a408:	02078663          	beq	a5,zero,1a434 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x810>
    _Atomic_word __result = *__mem;
   1a40c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1a410:	fff5079b          	addiw	a5,a0,-1
   1a414:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a418:	00100793          	addi	a5,zero,1
   1a41c:	e2f514e3          	bne	a0,a5,1a244 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x620>
	    _M_destroy();
   1a420:	00043783          	ld	a5,0(s0)
   1a424:	0187b783          	ld	a5,24(a5)
   1a428:	00040513          	addi	a0,s0,0
   1a42c:	000780e7          	jalr	ra,0(a5)
   1a430:	e15ff06f          	jal	zero,1a244 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x620>
      return __exchange_and_add(__mem, __val);
   1a434:	fff00593          	addi	a1,zero,-1
   1a438:	03440513          	addi	a0,s0,52
   1a43c:	9b4fc0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a440:	fd9ff06f          	jal	zero,1a418 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x7f4>
      { return _M_dataplus._M_p; }
   1a444:	00050413          	addi	s0,a0,0
   1a448:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   1a44c:	05010793          	addi	a5,sp,80
   1a450:	00f50463          	beq	a0,a5,1a458 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x834>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1a454:	b4cfc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1a458:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   1a45c:	07010793          	addi	a5,sp,112
   1a460:	00f50463          	beq	a0,a5,1a468 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x844>
   1a464:	b3cfc0ef          	jal	ra,167a0 <operator delete(void*)@plt>
    throw format_error("unknown type unit version " + std::to_string(version));
   1a468:	00048513          	addi	a0,s1,0
   1a46c:	ae4fc0ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1a470:	03013503          	ld	a0,48(sp)
   1a474:	00050863          	beq	a0,zero,1a484 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x860>
	  _M_pi->_M_release();
   1a478:	00029317          	auipc	t1,0x29
   1a47c:	f6833303          	ld	t1,-152(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   1a480:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   1a484:	00813503          	ld	a0,8(sp)
   1a488:	00050863          	beq	a0,zero,1a498 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x874>
	  _M_pi->_M_release();
   1a48c:	00029317          	auipc	t1,0x29
   1a490:	f5433303          	ld	t1,-172(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   1a494:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   1a498:	01813503          	ld	a0,24(sp)
   1a49c:	00050863          	beq	a0,zero,1a4ac <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x888>
	  _M_pi->_M_release();
   1a4a0:	00029317          	auipc	t1,0x29
   1a4a4:	f4033303          	ld	t1,-192(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   1a4a8:	000300e7          	jalr	ra,0(t1)
}
   1a4ac:	00090513          	addi	a0,s2,0
   1a4b0:	d6dfd0ef          	jal	ra,1821c <dwarf::unit::~unit()>
   1a4b4:	00040513          	addi	a0,s0,0
   1a4b8:	cd8fc0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1a4bc:	00050413          	addi	s0,a0,0
   1a4c0:	f99ff06f          	jal	zero,1a458 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x834>
	if (_M_pi != nullptr)
   1a4c4:	00050413          	addi	s0,a0,0
   1a4c8:	fd1ff06f          	jal	zero,1a498 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x874>
   1a4cc:	00050413          	addi	s0,a0,0
   1a4d0:	fddff06f          	jal	zero,1a4ac <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x888>
        val |= ((uint64_t)p[i]) << (i * 8);
   1a4d4:	0007c603          	lbu	a2,0(a5)
    pos += sizeof(T);
   1a4d8:	00178793          	addi	a5,a5,1
   1a4dc:	02f13c23          	sd	a5,56(sp)
  subsec->addr_size = address_size;
   1a4e0:	00013683          	ld	a3,0(sp)
   1a4e4:	02c6a023          	sw	a2,32(a3)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1a4e8:	01073703          	ld	a4,16(a4)
   1a4ec:	40f70633          	sub	a2,a4,a5
   1a4f0:	00700693          	addi	a3,zero,7
   1a4f4:	00c6f463          	bgeu	a3,a2,1a4fc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8d8>
   1a4f8:	ace7ece3          	bltu	a5,a4,19fd0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x3ac>
      underflow();
   1a4fc:	02810513          	addi	a0,sp,40
   1a500:	444030ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
   1a504:	acdff06f          	jal	zero,19fd0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x3ac>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1a508:	02913423          	sd	s1,40(sp)
      : _M_pi(__r._M_pi)
   1a50c:	02013823          	sd	zero,48(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1a510:	0084b783          	ld	a5,8(s1)
   1a514:	02f13c23          	sd	a5,56(sp)
  sub.skip_initial_length();
   1a518:	02810513          	addi	a0,sp,40
   1a51c:	290030ef          	jal	ra,1d7ac <dwarf::cursor::skip_initial_length()>
   1a520:	95dff06f          	jal	zero,19e7c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x258>

000000000001a524 <dwarf::dwarf::get_type_unit(unsigned long) const>:
const type_unit &dwarf::get_type_unit(uint64_t type_signature) const {
   1a524:	f2010113          	addi	sp,sp,-224
   1a528:	0c113c23          	sd	ra,216(sp)
   1a52c:	0c813823          	sd	s0,208(sp)
   1a530:	0c913423          	sd	s1,200(sp)
   1a534:	0d213023          	sd	s2,192(sp)
   1a538:	0b313c23          	sd	s3,184(sp)
   1a53c:	0b413823          	sd	s4,176(sp)
   1a540:	0b513423          	sd	s5,168(sp)
   1a544:	0b613023          	sd	s6,160(sp)
   1a548:	09713c23          	sd	s7,152(sp)
   1a54c:	09813823          	sd	s8,144(sp)
   1a550:	09913423          	sd	s9,136(sp)
   1a554:	09a13023          	sd	s10,128(sp)
   1a558:	00050913          	addi	s2,a0,0
   1a55c:	00b13423          	sd	a1,8(sp)
  if (!m->have_type_units) {
   1a560:	00053783          	ld	a5,0(a0)
   1a564:	0807c783          	lbu	a5,128(a5)
   1a568:	32079c63          	bne	a5,zero,1a8a0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x37c>
    cursor tucur(get_section(section_type::types));
   1a56c:	00b00613          	addi	a2,zero,11
   1a570:	00050593          	addi	a1,a0,0
   1a574:	05810513          	addi	a0,sp,88
   1a578:	dc1fd0ef          	jal	ra,18338 <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1a57c:	05813783          	ld	a5,88(sp)
   1a580:	00f13c23          	sd	a5,24(sp)
      : _M_pi(__r._M_pi)
   1a584:	06013503          	ld	a0,96(sp)
   1a588:	02a13023          	sd	a0,32(sp)
	if (_M_pi != nullptr)
   1a58c:	02050063          	beq	a0,zero,1a5ac <dwarf::dwarf::get_type_unit(unsigned long) const+0x88>
    if (__is_single_threaded())
   1a590:	00029797          	auipc	a5,0x29
   1a594:	f087b783          	ld	a5,-248(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a598:	0007c783          	lbu	a5,0(a5)
   1a59c:	08078463          	beq	a5,zero,1a624 <dwarf::dwarf::get_type_unit(unsigned long) const+0x100>
  { *__mem += __val; }
   1a5a0:	03052783          	lw	a5,48(a0)
   1a5a4:	0017879b          	addiw	a5,a5,1
   1a5a8:	02f52823          	sw	a5,48(a0)
   1a5ac:	05813783          	ld	a5,88(sp)
   1a5b0:	0087b783          	ld	a5,8(a5)
   1a5b4:	02f13423          	sd	a5,40(sp)
	if (_M_pi != nullptr)
   1a5b8:	06013403          	ld	s0,96(sp)
   1a5bc:	02040463          	beq	s0,zero,1a5e4 <dwarf::dwarf::get_type_unit(unsigned long) const+0xc0>
    if (__is_single_threaded())
   1a5c0:	00029797          	auipc	a5,0x29
   1a5c4:	ed87b783          	ld	a5,-296(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a5c8:	0007c783          	lbu	a5,0(a5)
   1a5cc:	06078463          	beq	a5,zero,1a634 <dwarf::dwarf::get_type_unit(unsigned long) const+0x110>
    _Atomic_word __result = *__mem;
   1a5d0:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1a5d4:	fff5079b          	addiw	a5,a0,-1
   1a5d8:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a5dc:	00100793          	addi	a5,zero,1
   1a5e0:	06f50263          	beq	a0,a5,1a644 <dwarf::dwarf::get_type_unit(unsigned long) const+0x120>
  bool end() const { return pos >= sec->end; }
   1a5e4:	02813783          	ld	a5,40(sp)
      { return _M_ptr; }
   1a5e8:	01813703          	ld	a4,24(sp)
    while (!tucur.end()) {
   1a5ec:	01073683          	ld	a3,16(a4)
   1a5f0:	26d7fc63          	bgeu	a5,a3,1a868 <dwarf::dwarf::get_type_unit(unsigned long) const+0x344>
      type_unit tu(*this, tucur.get_section_offset());
   1a5f4:	03810993          	addi	s3,sp,56
      operator[](const key_type& __k)
      { return _M_h[__k]; }

      mapped_type&
      operator[](key_type&& __k)
      { return _M_h[std::move(__k)]; }
   1a5f8:	06810b13          	addi	s6,sp,104
   1a5fc:	00029b97          	auipc	s7,0x29
   1a600:	ea4bbb83          	ld	s7,-348(s7) # 434a0 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)@@Base+0x26204>
    return ::__libc_single_threaded;
   1a604:	00029a97          	auipc	s5,0x29
   1a608:	e94aba83          	ld	s5,-364(s5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
      tucur.subsection();
   1a60c:	07010c13          	addi	s8,sp,112
   1a610:	01810c93          	addi	s9,sp,24
class type_unit : public unit {
   1a614:	00029a17          	auipc	s4,0x29
   1a618:	d5ca3a03          	ld	s4,-676(s4) # 43370 <vtable for dwarf::type_unit@@Base+0xa00>
   1a61c:	010a0a13          	addi	s4,s4,16
   1a620:	1c40006f          	jal	zero,1a7e4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2c0>
      __atomic_add(__mem, __val);
   1a624:	00100593          	addi	a1,zero,1
   1a628:	03050513          	addi	a0,a0,48
   1a62c:	f85fb0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1a630:	f7dff06f          	jal	zero,1a5ac <dwarf::dwarf::get_type_unit(unsigned long) const+0x88>
      return __exchange_and_add(__mem, __val);
   1a634:	fff00593          	addi	a1,zero,-1
   1a638:	03040513          	addi	a0,s0,48
   1a63c:	fb5fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a640:	f9dff06f          	jal	zero,1a5dc <dwarf::dwarf::get_type_unit(unsigned long) const+0xb8>
	_M_dispose();
   1a644:	00043783          	ld	a5,0(s0)
   1a648:	0107b783          	ld	a5,16(a5)
   1a64c:	00040513          	addi	a0,s0,0
   1a650:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a654:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a658:	00029797          	auipc	a5,0x29
   1a65c:	e407b783          	ld	a5,-448(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a660:	0007c783          	lbu	a5,0(a5)
   1a664:	02078663          	beq	a5,zero,1a690 <dwarf::dwarf::get_type_unit(unsigned long) const+0x16c>
    _Atomic_word __result = *__mem;
   1a668:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1a66c:	fff5079b          	addiw	a5,a0,-1
   1a670:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a674:	00100793          	addi	a5,zero,1
   1a678:	f6f516e3          	bne	a0,a5,1a5e4 <dwarf::dwarf::get_type_unit(unsigned long) const+0xc0>
	    _M_destroy();
   1a67c:	00043783          	ld	a5,0(s0)
   1a680:	0187b783          	ld	a5,24(a5)
   1a684:	00040513          	addi	a0,s0,0
   1a688:	000780e7          	jalr	ra,0(a5)
   1a68c:	f59ff06f          	jal	zero,1a5e4 <dwarf::dwarf::get_type_unit(unsigned long) const+0xc0>
      return __exchange_and_add(__mem, __val);
   1a690:	fff00593          	addi	a1,zero,-1
   1a694:	03440513          	addi	a0,s0,52
   1a698:	f59fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a69c:	fd9ff06f          	jal	zero,1a674 <dwarf::dwarf::get_type_unit(unsigned long) const+0x150>
      { return _M_ptr; }
   1a6a0:	00093403          	ld	s0,0(s2)
      m->type_units[tu.get_type_signature()] = tu;
   1a6a4:	00098513          	addi	a0,s3,0
   1a6a8:	c85fd0ef          	jal	ra,1832c <dwarf::type_unit::get_type_signature() const>
   1a6ac:	06a13423          	sd	a0,104(sp)
   1a6b0:	000b0593          	addi	a1,s6,0
   1a6b4:	04840513          	addi	a0,s0,72
   1a6b8:	000b80e7          	jalr	ra,0(s7)
   1a6bc:	00050413          	addi	s0,a0,0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   1a6c0:	04013783          	ld	a5,64(sp)
   1a6c4:	00f53423          	sd	a5,8(a0)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1a6c8:	04813483          	ld	s1,72(sp)
	if (__tmp != _M_pi)
   1a6cc:	01053783          	ld	a5,16(a0)
   1a6d0:	02f48e63          	beq	s1,a5,1a70c <dwarf::dwarf::get_type_unit(unsigned long) const+0x1e8>
	    if (__tmp != nullptr)
   1a6d4:	04048a63          	beq	s1,zero,1a728 <dwarf::dwarf::get_type_unit(unsigned long) const+0x204>
    if (__is_single_threaded())
   1a6d8:	000ac783          	lbu	a5,0(s5)
   1a6dc:	04078063          	beq	a5,zero,1a71c <dwarf::dwarf::get_type_unit(unsigned long) const+0x1f8>
  { *__mem += __val; }
   1a6e0:	0304a783          	lw	a5,48(s1)
   1a6e4:	0017879b          	addiw	a5,a5,1
   1a6e8:	02f4a823          	sw	a5,48(s1)
	    if (_M_pi != nullptr)
   1a6ec:	01053d03          	ld	s10,16(a0)
   1a6f0:	000d0c63          	beq	s10,zero,1a708 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1e4>
    _Atomic_word __result = *__mem;
   1a6f4:	030d2503          	lw	a0,48(s10)
    *__mem += __val;
   1a6f8:	fff5079b          	addiw	a5,a0,-1
   1a6fc:	02fd2823          	sw	a5,48(s10)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a700:	00100793          	addi	a5,zero,1
   1a704:	04f50263          	beq	a0,a5,1a748 <dwarf::dwarf::get_type_unit(unsigned long) const+0x224>
	    _M_pi = __tmp;
   1a708:	00943823          	sd	s1,16(s0)
      tucur.subsection();
   1a70c:	000c8593          	addi	a1,s9,0
   1a710:	000c0513          	addi	a0,s8,0
   1a714:	774030ef          	jal	ra,1de88 <dwarf::cursor::subsection()>
   1a718:	08c0006f          	jal	zero,1a7a4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x280>
      __atomic_add(__mem, __val);
   1a71c:	00100593          	addi	a1,zero,1
   1a720:	03048513          	addi	a0,s1,48
   1a724:	e8dfb0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
	    if (_M_pi != nullptr)
   1a728:	01043d03          	ld	s10,16(s0)
   1a72c:	fc0d0ee3          	beq	s10,zero,1a708 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1e4>
    if (__is_single_threaded())
   1a730:	000ac783          	lbu	a5,0(s5)
   1a734:	fc0790e3          	bne	a5,zero,1a6f4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1d0>
      return __exchange_and_add(__mem, __val);
   1a738:	fff00593          	addi	a1,zero,-1
   1a73c:	030d0513          	addi	a0,s10,48
   1a740:	eb1fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a744:	fbdff06f          	jal	zero,1a700 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1dc>
	_M_dispose();
   1a748:	000d3783          	ld	a5,0(s10)
   1a74c:	0107b783          	ld	a5,16(a5)
   1a750:	000d0513          	addi	a0,s10,0
   1a754:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a758:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a75c:	00029797          	auipc	a5,0x29
   1a760:	d3c7b783          	ld	a5,-708(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a764:	0007c783          	lbu	a5,0(a5)
   1a768:	02078663          	beq	a5,zero,1a794 <dwarf::dwarf::get_type_unit(unsigned long) const+0x270>
    _Atomic_word __result = *__mem;
   1a76c:	034d2503          	lw	a0,52(s10)
    *__mem += __val;
   1a770:	fff5079b          	addiw	a5,a0,-1
   1a774:	02fd2a23          	sw	a5,52(s10)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a778:	00100793          	addi	a5,zero,1
   1a77c:	f8f516e3          	bne	a0,a5,1a708 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1e4>
	    _M_destroy();
   1a780:	000d3783          	ld	a5,0(s10)
   1a784:	0187b783          	ld	a5,24(a5)
   1a788:	000d0513          	addi	a0,s10,0
   1a78c:	000780e7          	jalr	ra,0(a5)
   1a790:	f79ff06f          	jal	zero,1a708 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1e4>
      return __exchange_and_add(__mem, __val);
   1a794:	fff00593          	addi	a1,zero,-1
   1a798:	034d0513          	addi	a0,s10,52
   1a79c:	e55fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a7a0:	fd9ff06f          	jal	zero,1a778 <dwarf::dwarf::get_type_unit(unsigned long) const+0x254>
	if (_M_pi != nullptr)
   1a7a4:	07813403          	ld	s0,120(sp)
   1a7a8:	02040063          	beq	s0,zero,1a7c8 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2a4>
    if (__is_single_threaded())
   1a7ac:	000ac783          	lbu	a5,0(s5)
   1a7b0:	04078663          	beq	a5,zero,1a7fc <dwarf::dwarf::get_type_unit(unsigned long) const+0x2d8>
    _Atomic_word __result = *__mem;
   1a7b4:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1a7b8:	fff5079b          	addiw	a5,a0,-1
   1a7bc:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a7c0:	00100793          	addi	a5,zero,1
   1a7c4:	04f50463          	beq	a0,a5,1a80c <dwarf::dwarf::get_type_unit(unsigned long) const+0x2e8>
   1a7c8:	03413c23          	sd	s4,56(sp)
   1a7cc:	00098513          	addi	a0,s3,0
   1a7d0:	a4dfd0ef          	jal	ra,1821c <dwarf::unit::~unit()>
   1a7d4:	02813783          	ld	a5,40(sp)
      { return _M_ptr; }
   1a7d8:	01813703          	ld	a4,24(sp)
    while (!tucur.end()) {
   1a7dc:	01073683          	ld	a3,16(a4)
   1a7e0:	08d7f463          	bgeu	a5,a3,1a868 <dwarf::dwarf::get_type_unit(unsigned long) const+0x344>
  section_offset get_section_offset() const { return pos - sec->begin; }
   1a7e4:	00873603          	ld	a2,8(a4)
      type_unit tu(*this, tucur.get_section_offset());
   1a7e8:	40c78633          	sub	a2,a5,a2
   1a7ec:	00090593          	addi	a1,s2,0
   1a7f0:	00098513          	addi	a0,s3,0
   1a7f4:	c30ff0ef          	jal	ra,19c24 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)>
   1a7f8:	ea9ff06f          	jal	zero,1a6a0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x17c>
      return __exchange_and_add(__mem, __val);
   1a7fc:	fff00593          	addi	a1,zero,-1
   1a800:	03040513          	addi	a0,s0,48
   1a804:	dedfb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a808:	fb9ff06f          	jal	zero,1a7c0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x29c>
	_M_dispose();
   1a80c:	00043783          	ld	a5,0(s0)
   1a810:	0107b783          	ld	a5,16(a5)
   1a814:	00040513          	addi	a0,s0,0
   1a818:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a81c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a820:	00029797          	auipc	a5,0x29
   1a824:	c787b783          	ld	a5,-904(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a828:	0007c783          	lbu	a5,0(a5)
   1a82c:	02078663          	beq	a5,zero,1a858 <dwarf::dwarf::get_type_unit(unsigned long) const+0x334>
    _Atomic_word __result = *__mem;
   1a830:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1a834:	fff5079b          	addiw	a5,a0,-1
   1a838:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a83c:	00100793          	addi	a5,zero,1
   1a840:	f8f514e3          	bne	a0,a5,1a7c8 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2a4>
	    _M_destroy();
   1a844:	00043783          	ld	a5,0(s0)
   1a848:	0187b783          	ld	a5,24(a5)
   1a84c:	00040513          	addi	a0,s0,0
   1a850:	000780e7          	jalr	ra,0(a5)
   1a854:	f75ff06f          	jal	zero,1a7c8 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2a4>
      return __exchange_and_add(__mem, __val);
   1a858:	fff00593          	addi	a1,zero,-1
   1a85c:	03440513          	addi	a0,s0,52
   1a860:	d91fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a864:	fd9ff06f          	jal	zero,1a83c <dwarf::dwarf::get_type_unit(unsigned long) const+0x318>
      { return _M_ptr; }
   1a868:	00093783          	ld	a5,0(s2)
    m->have_type_units = true;
   1a86c:	00100713          	addi	a4,zero,1
   1a870:	08e78023          	sb	a4,128(a5)
	if (_M_pi != nullptr)
   1a874:	02013403          	ld	s0,32(sp)
   1a878:	02040463          	beq	s0,zero,1a8a0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x37c>
    if (__is_single_threaded())
   1a87c:	00029797          	auipc	a5,0x29
   1a880:	c1c7b783          	ld	a5,-996(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a884:	0007c783          	lbu	a5,0(a5)
   1a888:	06078463          	beq	a5,zero,1a8f0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x3cc>
    _Atomic_word __result = *__mem;
   1a88c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1a890:	fff5079b          	addiw	a5,a0,-1
   1a894:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a898:	00100793          	addi	a5,zero,1
   1a89c:	06f50263          	beq	a0,a5,1a900 <dwarf::dwarf::get_type_unit(unsigned long) const+0x3dc>
      { return _M_ptr; }
   1a8a0:	00093783          	ld	a5,0(s2)
      { return _M_h.count(__x); }
   1a8a4:	04878413          	addi	s0,a5,72
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    find(const key_type& __k) const
    -> const_iterator
    {
      if (size() <= __small_size_threshold())
   1a8a8:	0607b703          	ld	a4,96(a5)
   1a8ac:	0a071863          	bne	a4,zero,1a95c <dwarf::dwarf::get_type_unit(unsigned long) const+0x438>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1a8b0:	0587b783          	ld	a5,88(a5)
	{
	  for (auto __it = begin(); __it != end(); ++__it)
   1a8b4:	00078c63          	beq	a5,zero,1a8cc <dwarf::dwarf::get_type_unit(unsigned long) const+0x3a8>
      { return __x == __y; }
   1a8b8:	00813683          	ld	a3,8(sp)
	    if (this->_M_key_equals(__k, *__it._M_cur))
   1a8bc:	0087b703          	ld	a4,8(a5)
   1a8c0:	0ce68463          	beq	a3,a4,1a988 <dwarf::dwarf::get_type_unit(unsigned long) const+0x464>
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1a8c4:	0007b783          	ld	a5,0(a5)
	  for (auto __it = begin(); __it != end(); ++__it)
   1a8c8:	fe079ae3          	bne	a5,zero,1a8bc <dwarf::dwarf::get_type_unit(unsigned long) const+0x398>
    throw out_of_range("type signature 0x" + to_hex(type_signature));
   1a8cc:	01000513          	addi	a0,zero,16
   1a8d0:	dc1fb0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1a8d4:	00050493          	addi	s1,a0,0
   1a8d8:	00813583          	ld	a1,8(sp)
   1a8dc:	01810513          	addi	a0,sp,24
   1a8e0:	00029317          	auipc	t1,0x29
   1a8e4:	a3033303          	ld	t1,-1488(t1) # 43310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26ea0>
   1a8e8:	000300e7          	jalr	ra,0(t1)
   1a8ec:	0e80006f          	jal	zero,1a9d4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x4b0>
      return __exchange_and_add(__mem, __val);
   1a8f0:	fff00593          	addi	a1,zero,-1
   1a8f4:	03040513          	addi	a0,s0,48
   1a8f8:	cf9fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a8fc:	f9dff06f          	jal	zero,1a898 <dwarf::dwarf::get_type_unit(unsigned long) const+0x374>
	_M_dispose();
   1a900:	00043783          	ld	a5,0(s0)
   1a904:	0107b783          	ld	a5,16(a5)
   1a908:	00040513          	addi	a0,s0,0
   1a90c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a910:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a914:	00029797          	auipc	a5,0x29
   1a918:	b847b783          	ld	a5,-1148(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1a91c:	0007c783          	lbu	a5,0(a5)
   1a920:	02078663          	beq	a5,zero,1a94c <dwarf::dwarf::get_type_unit(unsigned long) const+0x428>
    _Atomic_word __result = *__mem;
   1a924:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1a928:	fff5079b          	addiw	a5,a0,-1
   1a92c:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a930:	00100793          	addi	a5,zero,1
   1a934:	f6f516e3          	bne	a0,a5,1a8a0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x37c>
	    _M_destroy();
   1a938:	00043783          	ld	a5,0(s0)
   1a93c:	0187b783          	ld	a5,24(a5)
   1a940:	00040513          	addi	a0,s0,0
   1a944:	000780e7          	jalr	ra,0(a5)
   1a948:	f59ff06f          	jal	zero,1a8a0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x37c>
      return __exchange_and_add(__mem, __val);
   1a94c:	fff00593          	addi	a1,zero,-1
   1a950:	03440513          	addi	a0,s0,52
   1a954:	c9dfb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a958:	fd9ff06f          	jal	zero,1a930 <dwarf::dwarf::get_type_unit(unsigned long) const+0x40c>
      __hash_code
      _M_hash_code(const _Key& __k) const
      {
	static_assert(__is_invocable<const _Hash&, const _Key&>{},
	    "hash function must be invocable with an argument of key type");
	return _M_hash()(__k);
   1a95c:	00813683          	ld	a3,8(sp)
    { return __num % __den; }
   1a960:	0507b583          	ld	a1,80(a5)
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1a964:	00810613          	addi	a2,sp,8
   1a968:	02b6f5b3          	remu	a1,a3,a1
   1a96c:	00040513          	addi	a0,s0,0
   1a970:	00029317          	auipc	t1,0x29
   1a974:	9c033303          	ld	t1,-1600(t1) # 43330 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x26940>
   1a978:	000300e7          	jalr	ra,0(t1)
	if (__before_n)
   1a97c:	f40508e3          	beq	a0,zero,1a8cc <dwarf::dwarf::get_type_unit(unsigned long) const+0x3a8>
  if (!m->type_units.count(type_signature))
   1a980:	00053783          	ld	a5,0(a0)
   1a984:	f40784e3          	beq	a5,zero,1a8cc <dwarf::dwarf::get_type_unit(unsigned long) const+0x3a8>
      { return _M_h[__k]; }
   1a988:	00810593          	addi	a1,sp,8
   1a98c:	00040513          	addi	a0,s0,0
   1a990:	00029317          	auipc	t1,0x29
   1a994:	b9833303          	ld	t1,-1128(t1) # 43528 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)@@Base+0x261a4>
   1a998:	000300e7          	jalr	ra,0(t1)
}
   1a99c:	0d813083          	ld	ra,216(sp)
   1a9a0:	0d013403          	ld	s0,208(sp)
   1a9a4:	0c813483          	ld	s1,200(sp)
   1a9a8:	0c013903          	ld	s2,192(sp)
   1a9ac:	0b813983          	ld	s3,184(sp)
   1a9b0:	0b013a03          	ld	s4,176(sp)
   1a9b4:	0a813a83          	ld	s5,168(sp)
   1a9b8:	0a013b03          	ld	s6,160(sp)
   1a9bc:	09813b83          	ld	s7,152(sp)
   1a9c0:	09013c03          	ld	s8,144(sp)
   1a9c4:	08813c83          	ld	s9,136(sp)
   1a9c8:	08013d03          	ld	s10,128(sp)
   1a9cc:	0e010113          	addi	sp,sp,224
   1a9d0:	00008067          	jalr	zero,0(ra)
    { return std::move(__rhs.insert(0, __lhs)); }
   1a9d4:	0001d617          	auipc	a2,0x1d
   1a9d8:	36c60613          	addi	a2,a2,876 # 37d40 <std::piecewise_construct+0x270>
   1a9dc:	00000593          	addi	a1,zero,0
   1a9e0:	01810513          	addi	a0,sp,24
   1a9e4:	c1dfb0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1a9e8:	00050593          	addi	a1,a0,0
   1a9ec:	03810413          	addi	s0,sp,56
   1a9f0:	00040513          	addi	a0,s0,0
   1a9f4:	cddfb0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    throw out_of_range("type signature 0x" + to_hex(type_signature));
   1a9f8:	00040593          	addi	a1,s0,0
   1a9fc:	00048513          	addi	a0,s1,0
   1aa00:	ef1fb0ef          	jal	ra,168f0 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   1aa04:	03813503          	ld	a0,56(sp)
	if (!_M_is_local())
   1aa08:	04810793          	addi	a5,sp,72
   1aa0c:	00f50463          	beq	a0,a5,1aa14 <dwarf::dwarf::get_type_unit(unsigned long) const+0x4f0>
   1aa10:	d91fb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1aa14:	01813503          	ld	a0,24(sp)
	if (!_M_is_local())
   1aa18:	02810793          	addi	a5,sp,40
   1aa1c:	00f50463          	beq	a0,a5,1aa24 <dwarf::dwarf::get_type_unit(unsigned long) const+0x500>
   1aa20:	d81fb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1aa24:	00029617          	auipc	a2,0x29
   1aa28:	ab463603          	ld	a2,-1356(a2) # 434d8 <std::out_of_range::~out_of_range()@GLIBCXX_3.4>
   1aa2c:	00029597          	auipc	a1,0x29
   1aa30:	b5c5b583          	ld	a1,-1188(a1) # 43588 <typeinfo for std::out_of_range@GLIBCXX_3.4>
   1aa34:	00048513          	addi	a0,s1,0
   1aa38:	f29fb0ef          	jal	ra,16960 <__cxa_throw@plt>
   1aa3c:	00050413          	addi	s0,a0,0
   1aa40:	00029797          	auipc	a5,0x29
   1aa44:	9307b783          	ld	a5,-1744(a5) # 43370 <vtable for dwarf::type_unit@@Base+0xa00>
   1aa48:	01078793          	addi	a5,a5,16
   1aa4c:	02f13c23          	sd	a5,56(sp)
   1aa50:	03810513          	addi	a0,sp,56
   1aa54:	fc8fd0ef          	jal	ra,1821c <dwarf::unit::~unit()>
	if (_M_pi != nullptr)
   1aa58:	02013503          	ld	a0,32(sp)
   1aa5c:	00050863          	beq	a0,zero,1aa6c <dwarf::dwarf::get_type_unit(unsigned long) const+0x548>
	  _M_pi->_M_release();
   1aa60:	00029317          	auipc	t1,0x29
   1aa64:	98033303          	ld	t1,-1664(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   1aa68:	000300e7          	jalr	ra,0(t1)
   1aa6c:	00040513          	addi	a0,s0,0
   1aa70:	f21fb0ef          	jal	ra,16990 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   1aa74:	00050413          	addi	s0,a0,0
   1aa78:	fe1ff06f          	jal	zero,1aa58 <dwarf::dwarf::get_type_unit(unsigned long) const+0x534>
      { return _M_dataplus._M_p; }
   1aa7c:	00050413          	addi	s0,a0,0
   1aa80:	03813503          	ld	a0,56(sp)
	if (!_M_is_local())
   1aa84:	04810793          	addi	a5,sp,72
   1aa88:	00f50463          	beq	a0,a5,1aa90 <dwarf::dwarf::get_type_unit(unsigned long) const+0x56c>
   1aa8c:	d15fb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1aa90:	01813503          	ld	a0,24(sp)
	if (!_M_is_local())
   1aa94:	02810793          	addi	a5,sp,40
   1aa98:	00f50463          	beq	a0,a5,1aaa0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x57c>
   1aa9c:	d05fb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1aaa0:	00048513          	addi	a0,s1,0
   1aaa4:	cadfb0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1aaa8:	00040513          	addi	a0,s0,0
   1aaac:	ee5fb0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1aab0:	00050413          	addi	s0,a0,0
   1aab4:	fddff06f          	jal	zero,1aa90 <dwarf::dwarf::get_type_unit(unsigned long) const+0x56c>
   1aab8:	00050413          	addi	s0,a0,0
   1aabc:	fe5ff06f          	jal	zero,1aaa0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x57c>

000000000001aac0 <dwarf::unit::impl::force_abbrevs()>:
  if (have_abbrevs)
   1aac0:	13854783          	lbu	a5,312(a0)
   1aac4:	00078463          	beq	a5,zero,1aacc <dwarf::unit::impl::force_abbrevs()+0xc>
   1aac8:	00008067          	jalr	zero,0(ra)
void unit::impl::force_abbrevs() {
   1aacc:	f6010113          	addi	sp,sp,-160
   1aad0:	08113c23          	sd	ra,152(sp)
   1aad4:	08813823          	sd	s0,144(sp)
   1aad8:	08913423          	sd	s1,136(sp)
   1aadc:	09213023          	sd	s2,128(sp)
   1aae0:	07313c23          	sd	s3,120(sp)
   1aae4:	07413823          	sd	s4,112(sp)
   1aae8:	07513423          	sd	s5,104(sp)
   1aaec:	07613023          	sd	s6,96(sp)
   1aaf0:	05713c23          	sd	s7,88(sp)
   1aaf4:	00050493          	addi	s1,a0,0
  cursor c(file.get_section(section_type::abbrev), debug_abbrev_offset);
   1aaf8:	00000613          	addi	a2,zero,0
   1aafc:	00050593          	addi	a1,a0,0
   1ab00:	04010513          	addi	a0,sp,64
   1ab04:	835fd0ef          	jal	ra,18338 <dwarf::dwarf::get_section(dwarf::section_type) const>
   1ab08:	0284b403          	ld	s0,40(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1ab0c:	04013783          	ld	a5,64(sp)
   1ab10:	02f13423          	sd	a5,40(sp)
      : _M_pi(__r._M_pi)
   1ab14:	04813503          	ld	a0,72(sp)
   1ab18:	02a13823          	sd	a0,48(sp)
	if (_M_pi != nullptr)
   1ab1c:	02050063          	beq	a0,zero,1ab3c <dwarf::unit::impl::force_abbrevs()+0x7c>
    if (__is_single_threaded())
   1ab20:	00029797          	auipc	a5,0x29
   1ab24:	9787b783          	ld	a5,-1672(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1ab28:	0007c783          	lbu	a5,0(a5)
   1ab2c:	08078263          	beq	a5,zero,1abb0 <dwarf::unit::impl::force_abbrevs()+0xf0>
  { *__mem += __val; }
   1ab30:	03052783          	lw	a5,48(a0)
   1ab34:	0017879b          	addiw	a5,a5,1
   1ab38:	02f52823          	sw	a5,48(a0)
      : sec(sec), pos(sec->begin + offset) {}
   1ab3c:	04013783          	ld	a5,64(sp)
   1ab40:	0087b783          	ld	a5,8(a5)
   1ab44:	008787b3          	add	a5,a5,s0
   1ab48:	02f13c23          	sd	a5,56(sp)
	if (_M_pi != nullptr)
   1ab4c:	04813403          	ld	s0,72(sp)
   1ab50:	02040463          	beq	s0,zero,1ab78 <dwarf::unit::impl::force_abbrevs()+0xb8>
    if (__is_single_threaded())
   1ab54:	00029797          	auipc	a5,0x29
   1ab58:	9447b783          	ld	a5,-1724(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1ab5c:	0007c783          	lbu	a5,0(a5)
   1ab60:	06078063          	beq	a5,zero,1abc0 <dwarf::unit::impl::force_abbrevs()+0x100>
    _Atomic_word __result = *__mem;
   1ab64:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1ab68:	fff5079b          	addiw	a5,a0,-1
   1ab6c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1ab70:	00100793          	addi	a5,zero,1
   1ab74:	04f50e63          	beq	a0,a5,1abd0 <dwarf::unit::impl::force_abbrevs()+0x110>
  abbrev_code code;
  DW_TAG tag;
  bool children;
  std::vector<attribute_spec> attributes;

  abbrev_entry() : code(0) {}
   1ab78:	00013023          	sd	zero,0(sp)
   1ab7c:	00013823          	sd	zero,16(sp)
   1ab80:	00013c23          	sd	zero,24(sp)
   1ab84:	02013023          	sd	zero,32(sp)
  abbrev_code highest = 0;
   1ab88:	00000913          	addi	s2,zero,0
  while (entry.read(&c)) {
   1ab8c:	02810993          	addi	s3,sp,40
   1ab90:	00010413          	addi	s0,sp,0
   1ab94:	15848a13          	addi	s4,s1,344
   1ab98:	00029a97          	auipc	s5,0x29
   1ab9c:	960aba83          	ld	s5,-1696(s5) # 434f8 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)@@Base+0x25e34>
struct abbrev_entry {
   1aba0:	01010b13          	addi	s6,sp,16
   1aba4:	00029b97          	auipc	s7,0x29
   1aba8:	a5cbbb83          	ld	s7,-1444(s7) # 43600 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)@@Base+0x27750>
   1abac:	0b00006f          	jal	zero,1ac5c <dwarf::unit::impl::force_abbrevs()+0x19c>
      __atomic_add(__mem, __val);
   1abb0:	00100593          	addi	a1,zero,1
   1abb4:	03050513          	addi	a0,a0,48
   1abb8:	9f9fb0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1abbc:	f81ff06f          	jal	zero,1ab3c <dwarf::unit::impl::force_abbrevs()+0x7c>
      return __exchange_and_add(__mem, __val);
   1abc0:	fff00593          	addi	a1,zero,-1
   1abc4:	03040513          	addi	a0,s0,48
   1abc8:	a29fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1abcc:	fa5ff06f          	jal	zero,1ab70 <dwarf::unit::impl::force_abbrevs()+0xb0>
	_M_dispose();
   1abd0:	00043783          	ld	a5,0(s0)
   1abd4:	0107b783          	ld	a5,16(a5)
   1abd8:	00040513          	addi	a0,s0,0
   1abdc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1abe0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1abe4:	00029797          	auipc	a5,0x29
   1abe8:	8b47b783          	ld	a5,-1868(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1abec:	0007c783          	lbu	a5,0(a5)
   1abf0:	02078663          	beq	a5,zero,1ac1c <dwarf::unit::impl::force_abbrevs()+0x15c>
    _Atomic_word __result = *__mem;
   1abf4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1abf8:	fff5079b          	addiw	a5,a0,-1
   1abfc:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1ac00:	00100793          	addi	a5,zero,1
   1ac04:	f6f51ae3          	bne	a0,a5,1ab78 <dwarf::unit::impl::force_abbrevs()+0xb8>
	    _M_destroy();
   1ac08:	00043783          	ld	a5,0(s0)
   1ac0c:	0187b783          	ld	a5,24(a5)
   1ac10:	00040513          	addi	a0,s0,0
   1ac14:	000780e7          	jalr	ra,0(a5)
   1ac18:	f61ff06f          	jal	zero,1ab78 <dwarf::unit::impl::force_abbrevs()+0xb8>
      return __exchange_and_add(__mem, __val);
   1ac1c:	fff00593          	addi	a1,zero,-1
   1ac20:	03440513          	addi	a0,s0,52
   1ac24:	9cdfb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ac28:	fd9ff06f          	jal	zero,1ac00 <dwarf::unit::impl::force_abbrevs()+0x140>
   1ac2c:	00013783          	ld	a5,0(sp)
   1ac30:	00f53023          	sd	a5,0(a0)
   1ac34:	00812783          	lw	a5,8(sp)
   1ac38:	00f52423          	sw	a5,8(a0)
   1ac3c:	00c14783          	lbu	a5,12(sp)
   1ac40:	00f50623          	sb	a5,12(a0)
   1ac44:	000b0593          	addi	a1,s6,0
   1ac48:	01050513          	addi	a0,a0,16
   1ac4c:	000b80e7          	jalr	ra,0(s7)
    if (entry.code > highest)
   1ac50:	00013783          	ld	a5,0(sp)
   1ac54:	00f97463          	bgeu	s2,a5,1ac5c <dwarf::unit::impl::force_abbrevs()+0x19c>
   1ac58:	00078913          	addi	s2,a5,0
  while (entry.read(&c)) {
   1ac5c:	00098593          	addi	a1,s3,0
   1ac60:	00040513          	addi	a0,s0,0
   1ac64:	27d090ef          	jal	ra,246e0 <dwarf::abbrev_entry::read(dwarf::cursor*)>
   1ac68:	00050a63          	beq	a0,zero,1ac7c <dwarf::unit::impl::force_abbrevs()+0x1bc>
   1ac6c:	00040593          	addi	a1,s0,0
   1ac70:	000a0513          	addi	a0,s4,0
   1ac74:	000a80e7          	jalr	ra,0(s5)
   1ac78:	fb5ff06f          	jal	zero,1ac2c <dwarf::unit::impl::force_abbrevs()+0x16c>
  if (highest * 10 < abbrevs_map.size() * 15) {
   1ac7c:	00291793          	slli	a5,s2,0x2
   1ac80:	012787b3          	add	a5,a5,s2
   1ac84:	00179793          	slli	a5,a5,0x1
   1ac88:	1704b683          	ld	a3,368(s1)
   1ac8c:	00469713          	slli	a4,a3,0x4
   1ac90:	40d70733          	sub	a4,a4,a3
   1ac94:	06e7e863          	bltu	a5,a4,1ad04 <dwarf::unit::impl::force_abbrevs()+0x244>
  have_abbrevs = true;
   1ac98:	00100793          	addi	a5,zero,1
   1ac9c:	12f48c23          	sb	a5,312(s1)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1aca0:	01013503          	ld	a0,16(sp)
	if (__p)
   1aca4:	00050463          	beq	a0,zero,1acac <dwarf::unit::impl::force_abbrevs()+0x1ec>
   1aca8:	af9fb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   1acac:	03013403          	ld	s0,48(sp)
   1acb0:	02040463          	beq	s0,zero,1acd8 <dwarf::unit::impl::force_abbrevs()+0x218>
    if (__is_single_threaded())
   1acb4:	00028797          	auipc	a5,0x28
   1acb8:	7e47b783          	ld	a5,2020(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1acbc:	0007c783          	lbu	a5,0(a5)
   1acc0:	14078263          	beq	a5,zero,1ae04 <dwarf::unit::impl::force_abbrevs()+0x344>
    _Atomic_word __result = *__mem;
   1acc4:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1acc8:	fff5079b          	addiw	a5,a0,-1
   1accc:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1acd0:	00100793          	addi	a5,zero,1
   1acd4:	14f50063          	beq	a0,a5,1ae14 <dwarf::unit::impl::force_abbrevs()+0x354>
}
   1acd8:	09813083          	ld	ra,152(sp)
   1acdc:	09013403          	ld	s0,144(sp)
   1ace0:	08813483          	ld	s1,136(sp)
   1ace4:	08013903          	ld	s2,128(sp)
   1ace8:	07813983          	ld	s3,120(sp)
   1acec:	07013a03          	ld	s4,112(sp)
   1acf0:	06813a83          	ld	s5,104(sp)
   1acf4:	06013b03          	ld	s6,96(sp)
   1acf8:	05813b83          	ld	s7,88(sp)
   1acfc:	0a010113          	addi	sp,sp,160
   1ad00:	00008067          	jalr	zero,0(ra)
    abbrevs_vec.resize(highest + 1);
   1ad04:	00190913          	addi	s2,s2,1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1ad08:	1484b983          	ld	s3,328(s1)
   1ad0c:	1404b783          	ld	a5,320(s1)
   1ad10:	40f985b3          	sub	a1,s3,a5
   1ad14:	4035d593          	srai	a1,a1,0x3
   1ad18:	0001d717          	auipc	a4,0x1d
   1ad1c:	d9873703          	ld	a4,-616(a4) # 37ab0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd8>
   1ad20:	02e585b3          	mul	a1,a1,a4
	if (__new_size > size())
   1ad24:	0325e263          	bltu	a1,s2,1ad48 <dwarf::unit::impl::force_abbrevs()+0x288>
	else if (__new_size < size())
   1ad28:	04b97a63          	bgeu	s2,a1,1ad7c <dwarf::unit::impl::force_abbrevs()+0x2bc>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   1ad2c:	00291713          	slli	a4,s2,0x2
   1ad30:	01270733          	add	a4,a4,s2
   1ad34:	00371713          	slli	a4,a4,0x3
   1ad38:	00e78933          	add	s2,a5,a4
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   1ad3c:	05298063          	beq	s3,s2,1ad7c <dwarf::unit::impl::force_abbrevs()+0x2bc>
   1ad40:	00090413          	addi	s0,s2,0
   1ad44:	0240006f          	jal	zero,1ad68 <dwarf::unit::impl::force_abbrevs()+0x2a8>
	  _M_default_append(__new_size - size());
   1ad48:	40b905b3          	sub	a1,s2,a1
   1ad4c:	14048513          	addi	a0,s1,320
   1ad50:	00028317          	auipc	t1,0x28
   1ad54:	65833303          	ld	t1,1624(t1) # 433a8 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)@@Base+0x26bd4>
   1ad58:	000300e7          	jalr	ra,0(t1)
   1ad5c:	0200006f          	jal	zero,1ad7c <dwarf::unit::impl::force_abbrevs()+0x2bc>
	  for (; __first != __last; ++__first)
   1ad60:	02840413          	addi	s0,s0,40
   1ad64:	00898a63          	beq	s3,s0,1ad78 <dwarf::unit::impl::force_abbrevs()+0x2b8>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1ad68:	01043503          	ld	a0,16(s0)
	if (__p)
   1ad6c:	fe050ae3          	beq	a0,zero,1ad60 <dwarf::unit::impl::force_abbrevs()+0x2a0>
   1ad70:	a31fb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { __a.deallocate(__p, __n); }
   1ad74:	fedff06f          	jal	zero,1ad60 <dwarf::unit::impl::force_abbrevs()+0x2a0>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   1ad78:	1524b423          	sd	s2,328(s1)
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1ad7c:	1684b403          	ld	s0,360(s1)
    for (auto &entry : abbrevs_map)
   1ad80:	02041263          	bne	s0,zero,1ada4 <dwarf::unit::impl::force_abbrevs()+0x2e4>
      { _M_h.clear(); }
   1ad84:	15848513          	addi	a0,s1,344
   1ad88:	00028317          	auipc	t1,0x28
   1ad8c:	56833303          	ld	t1,1384(t1) # 432f0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()@@Base+0x26db8>
   1ad90:	000300e7          	jalr	ra,0(t1)
   1ad94:	f05ff06f          	jal	zero,1ac98 <dwarf::unit::impl::force_abbrevs()+0x1d8>
   1ad98:	a09fb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1ad9c:	00043403          	ld	s0,0(s0)
   1ada0:	fe0402e3          	beq	s0,zero,1ad84 <dwarf::unit::impl::force_abbrevs()+0x2c4>
	return *(this->_M_impl._M_start + __n);
   1ada4:	00843783          	ld	a5,8(s0)
   1ada8:	00279713          	slli	a4,a5,0x2
   1adac:	00f70733          	add	a4,a4,a5
   1adb0:	00371713          	slli	a4,a4,0x3
   1adb4:	1404b783          	ld	a5,320(s1)
   1adb8:	00e787b3          	add	a5,a5,a4
   1adbc:	01043703          	ld	a4,16(s0)
   1adc0:	00e7b023          	sd	a4,0(a5)
   1adc4:	01842703          	lw	a4,24(s0)
   1adc8:	00e7a423          	sw	a4,8(a5)
   1adcc:	01c44703          	lbu	a4,28(s0)
   1add0:	00e78623          	sb	a4,12(a5)
	  _M_start = __x._M_start;
   1add4:	0107b503          	ld	a0,16(a5)
   1add8:	02043703          	ld	a4,32(s0)
   1addc:	00e7b823          	sd	a4,16(a5)
	  _M_finish = __x._M_finish;
   1ade0:	02843703          	ld	a4,40(s0)
   1ade4:	00e7bc23          	sd	a4,24(a5)
	  _M_end_of_storage = __x._M_end_of_storage;
   1ade8:	03043703          	ld	a4,48(s0)
   1adec:	02e7b023          	sd	a4,32(a5)
	  _M_start = __x._M_start;
   1adf0:	02043023          	sd	zero,32(s0)
	  _M_finish = __x._M_finish;
   1adf4:	02043423          	sd	zero,40(s0)
	  _M_end_of_storage = __x._M_end_of_storage;
   1adf8:	02043823          	sd	zero,48(s0)
	if (__p)
   1adfc:	f8051ee3          	bne	a0,zero,1ad98 <dwarf::unit::impl::force_abbrevs()+0x2d8>
   1ae00:	f9dff06f          	jal	zero,1ad9c <dwarf::unit::impl::force_abbrevs()+0x2dc>
      return __exchange_and_add(__mem, __val);
   1ae04:	fff00593          	addi	a1,zero,-1
   1ae08:	03040513          	addi	a0,s0,48
   1ae0c:	fe4fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ae10:	ec1ff06f          	jal	zero,1acd0 <dwarf::unit::impl::force_abbrevs()+0x210>
	_M_dispose();
   1ae14:	00043783          	ld	a5,0(s0)
   1ae18:	0107b783          	ld	a5,16(a5)
   1ae1c:	00040513          	addi	a0,s0,0
   1ae20:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1ae24:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1ae28:	00028797          	auipc	a5,0x28
   1ae2c:	6707b783          	ld	a5,1648(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1ae30:	0007c783          	lbu	a5,0(a5)
   1ae34:	02078663          	beq	a5,zero,1ae60 <dwarf::unit::impl::force_abbrevs()+0x3a0>
    _Atomic_word __result = *__mem;
   1ae38:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1ae3c:	fff5079b          	addiw	a5,a0,-1
   1ae40:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1ae44:	00100793          	addi	a5,zero,1
   1ae48:	e8f518e3          	bne	a0,a5,1acd8 <dwarf::unit::impl::force_abbrevs()+0x218>
	    _M_destroy();
   1ae4c:	00043783          	ld	a5,0(s0)
   1ae50:	0187b783          	ld	a5,24(a5)
   1ae54:	00040513          	addi	a0,s0,0
   1ae58:	000780e7          	jalr	ra,0(a5)
   1ae5c:	e7dff06f          	jal	zero,1acd8 <dwarf::unit::impl::force_abbrevs()+0x218>
      return __exchange_and_add(__mem, __val);
   1ae60:	fff00593          	addi	a1,zero,-1
   1ae64:	03440513          	addi	a0,s0,52
   1ae68:	f88fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ae6c:	fd9ff06f          	jal	zero,1ae44 <dwarf::unit::impl::force_abbrevs()+0x384>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1ae70:	00050413          	addi	s0,a0,0
   1ae74:	01013503          	ld	a0,16(sp)
	if (__p)
   1ae78:	00050463          	beq	a0,zero,1ae80 <dwarf::unit::impl::force_abbrevs()+0x3c0>
   1ae7c:	925fb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   1ae80:	03013503          	ld	a0,48(sp)
   1ae84:	00050863          	beq	a0,zero,1ae94 <dwarf::unit::impl::force_abbrevs()+0x3d4>
	  _M_pi->_M_release();
   1ae88:	00028317          	auipc	t1,0x28
   1ae8c:	55833303          	ld	t1,1368(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   1ae90:	000300e7          	jalr	ra,0(t1)
   1ae94:	00040513          	addi	a0,s0,0
   1ae98:	af9fb0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001ae9c <dwarf::unit::root() const>:
const die &unit::root() const {
   1ae9c:	f5010113          	addi	sp,sp,-176
   1aea0:	0a113423          	sd	ra,168(sp)
   1aea4:	0a813023          	sd	s0,160(sp)
   1aea8:	08913c23          	sd	s1,152(sp)
   1aeac:	09213823          	sd	s2,144(sp)
   1aeb0:	09313423          	sd	s3,136(sp)
   1aeb4:	09413023          	sd	s4,128(sp)
   1aeb8:	07513c23          	sd	s5,120(sp)
   1aebc:	07613823          	sd	s6,112(sp)
   1aec0:	00050493          	addi	s1,a0,0
      { return _M_ptr; }
   1aec4:	00853503          	ld	a0,8(a0)
  if (!m->root.valid()) {
   1aec8:	05853783          	ld	a5,88(a0)
   1aecc:	02078a63          	beq	a5,zero,1af00 <dwarf::unit::root() const+0x64>
  return m->root;
   1aed0:	0084b503          	ld	a0,8(s1)
   1aed4:	04850513          	addi	a0,a0,72
}
   1aed8:	0a813083          	ld	ra,168(sp)
   1aedc:	0a013403          	ld	s0,160(sp)
   1aee0:	09813483          	ld	s1,152(sp)
   1aee4:	09013903          	ld	s2,144(sp)
   1aee8:	08813983          	ld	s3,136(sp)
   1aeec:	08013a03          	ld	s4,128(sp)
   1aef0:	07813a83          	ld	s5,120(sp)
   1aef4:	07013b03          	ld	s6,112(sp)
   1aef8:	0b010113          	addi	sp,sp,176
   1aefc:	00008067          	jalr	zero,0(ra)
    m->force_abbrevs();
   1af00:	bc1ff0ef          	jal	ra,1aac0 <dwarf::unit::impl::force_abbrevs()>
   1af04:	0084b403          	ld	s0,8(s1)
    m->root = die(this);
   1af08:	00048593          	addi	a1,s1,0
   1af0c:	00010513          	addi	a0,sp,0
   1af10:	34c030ef          	jal	ra,1e25c <dwarf::die::die(dwarf::unit const*)>
  die &operator=(die &&o) = default;
   1af14:	00012783          	lw	a5,0(sp)
   1af18:	04f42423          	sw	a5,72(s0)
   1af1c:	00813783          	ld	a5,8(sp)
   1af20:	04f43823          	sd	a5,80(s0)
   1af24:	01013783          	ld	a5,16(sp)
   1af28:	04f43c23          	sd	a5,88(s0)
   1af2c:	01813783          	ld	a5,24(sp)
   1af30:	06f43023          	sd	a5,96(s0)
  size_type size() const { return end - base; }
   1af34:	05813983          	ld	s3,88(sp)
   1af38:	05013783          	ld	a5,80(sp)
   1af3c:	40f989b3          	sub	s3,s3,a5
   1af40:	4039d913          	srai	s2,s3,0x3
    for (T *p = base; p < end; ++p)
   1af44:	09843683          	ld	a3,152(s0)
   1af48:	0a043783          	ld	a5,160(s0)
   1af4c:	00f6fa63          	bgeu	a3,a5,1af60 <dwarf::unit::root() const+0xc4>
   1af50:	00068793          	addi	a5,a3,0
   1af54:	00878793          	addi	a5,a5,8
   1af58:	0a043703          	ld	a4,160(s0)
   1af5c:	fee7ece3          	bltu	a5,a4,1af54 <dwarf::unit::root() const+0xb8>
    end = base;
   1af60:	0ad43023          	sd	a3,160(s0)
    if (n <= (size_type)(cap - base))
   1af64:	0a843503          	ld	a0,168(s0)
   1af68:	40d50533          	sub	a0,a0,a3
   1af6c:	07357863          	bgeu	a0,s3,1afdc <dwarf::unit::root() const+0x140>
   1af70:	40355513          	srai	a0,a0,0x3
   1af74:	00051463          	bne	a0,zero,1af7c <dwarf::unit::root() const+0xe0>
   1af78:	00100513          	addi	a0,zero,1
    while (target < n)
   1af7c:	01257663          	bgeu	a0,s2,1af88 <dwarf::unit::root() const+0xec>
      target <<= 1;
   1af80:	00151513          	slli	a0,a0,0x1
    while (target < n)
   1af84:	ff256ee3          	bltu	a0,s2,1af80 <dwarf::unit::root() const+0xe4>
    char *newbuf = new char[sizeof(T[target])];
   1af88:	00351a13          	slli	s4,a0,0x3
   1af8c:	000a0513          	addi	a0,s4,0
   1af90:	e00fb0ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   1af94:	00050b13          	addi	s6,a0,0
    T *src = base, *dest = (T *)newbuf;
   1af98:	09843503          	ld	a0,152(s0)
    for (; src < end; src++, dest++) {
   1af9c:	0a043783          	ld	a5,160(s0)
   1afa0:	0cf57063          	bgeu	a0,a5,1b060 <dwarf::unit::root() const+0x1c4>
    T *src = base, *dest = (T *)newbuf;
   1afa4:	00050793          	addi	a5,a0,0
   1afa8:	000b0a93          	addi	s5,s6,0
    for (; src < end; src++, dest++) {
   1afac:	00878793          	addi	a5,a5,8
   1afb0:	008a8a93          	addi	s5,s5,8
   1afb4:	0a043703          	ld	a4,160(s0)
   1afb8:	fee7eae3          	bltu	a5,a4,1afac <dwarf::unit::root() const+0x110>
   1afbc:	06840793          	addi	a5,s0,104
    if ((char *)base != buf)
   1afc0:	00f50663          	beq	a0,a5,1afcc <dwarf::unit::root() const+0x130>
      delete[] (char *)base;
   1afc4:	00050463          	beq	a0,zero,1afcc <dwarf::unit::root() const+0x130>
   1afc8:	889fb0ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1afcc:	09643c23          	sd	s6,152(s0)
    end = dest;
   1afd0:	0b543023          	sd	s5,160(s0)
    cap = base + target;
   1afd4:	014b0b33          	add	s6,s6,s4
   1afd8:	0b643423          	sd	s6,168(s0)
    for (size_type i = 0; i < osize; i++)
   1afdc:	02090663          	beq	s2,zero,1b008 <dwarf::unit::root() const+0x16c>
   1afe0:	00000793          	addi	a5,zero,0
   1afe4:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1afe8:	05013703          	ld	a4,80(sp)
   1afec:	00d70733          	add	a4,a4,a3
   1aff0:	00073603          	ld	a2,0(a4)
   1aff4:	09843703          	ld	a4,152(s0)
   1aff8:	00d70733          	add	a4,a4,a3
   1affc:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1b000:	00178793          	addi	a5,a5,1
   1b004:	fef910e3          	bne	s2,a5,1afe4 <dwarf::unit::root() const+0x148>
    end = base + osize;
   1b008:	09843783          	ld	a5,152(s0)
   1b00c:	013787b3          	add	a5,a5,s3
   1b010:	0af43023          	sd	a5,160(s0)
   1b014:	06813783          	ld	a5,104(sp)
   1b018:	0af43823          	sd	a5,176(s0)
    for (T *p = base; p < end; ++p)
   1b01c:	05013503          	ld	a0,80(sp)
   1b020:	05813783          	ld	a5,88(sp)
   1b024:	00f57a63          	bgeu	a0,a5,1b038 <dwarf::unit::root() const+0x19c>
   1b028:	00050793          	addi	a5,a0,0
   1b02c:	00878793          	addi	a5,a5,8
   1b030:	05813703          	ld	a4,88(sp)
   1b034:	fee7ece3          	bltu	a5,a4,1b02c <dwarf::unit::root() const+0x190>
    end = base;
   1b038:	04a13c23          	sd	a0,88(sp)
    if ((char *)base != buf)
   1b03c:	02010793          	addi	a5,sp,32
   1b040:	00f50663          	beq	a0,a5,1b04c <dwarf::unit::root() const+0x1b0>
      delete[] (char *)base;
   1b044:	00050463          	beq	a0,zero,1b04c <dwarf::unit::root() const+0x1b0>
   1b048:	809fb0ef          	jal	ra,16850 <operator delete[](void*)@plt>
   1b04c:	0084b503          	ld	a0,8(s1)
    m->root.read(m->root_offset);
   1b050:	03053583          	ld	a1,48(a0)
   1b054:	04850513          	addi	a0,a0,72
   1b058:	25c030ef          	jal	ra,1e2b4 <dwarf::die::read(unsigned long)>
   1b05c:	e75ff06f          	jal	zero,1aed0 <dwarf::unit::root() const+0x34>
    T *src = base, *dest = (T *)newbuf;
   1b060:	000b0a93          	addi	s5,s6,0
   1b064:	f59ff06f          	jal	zero,1afbc <dwarf::unit::root() const+0x120>
class die {
   1b068:	00050413          	addi	s0,a0,0
   1b06c:	02010513          	addi	a0,sp,32
   1b070:	00028317          	auipc	t1,0x28
   1b074:	39033303          	ld	t1,912(t1) # 43400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b8b0>
   1b078:	000300e7          	jalr	ra,0(t1)
   1b07c:	00040513          	addi	a0,s0,0
   1b080:	911fb0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001b084 <dwarf::compilation_unit::get_line_table() const>:
const line_table &compilation_unit::get_line_table() const {
   1b084:	f4010113          	addi	sp,sp,-192
   1b088:	0a113c23          	sd	ra,184(sp)
   1b08c:	0a813823          	sd	s0,176(sp)
   1b090:	0a913423          	sd	s1,168(sp)
   1b094:	0b213023          	sd	s2,160(sp)
   1b098:	09313c23          	sd	s3,152(sp)
   1b09c:	09413823          	sd	s4,144(sp)
   1b0a0:	00050413          	addi	s0,a0,0
      { return _M_ptr != nullptr; }
   1b0a4:	00853783          	ld	a5,8(a0)
  if (!m->lt.valid()) {
   1b0a8:	1287b783          	ld	a5,296(a5)
   1b0ac:	02078663          	beq	a5,zero,1b0d8 <dwarf::compilation_unit::get_line_table() const+0x54>
  return m->lt;
   1b0b0:	00843503          	ld	a0,8(s0)
   1b0b4:	12850513          	addi	a0,a0,296
}
   1b0b8:	0b813083          	ld	ra,184(sp)
   1b0bc:	0b013403          	ld	s0,176(sp)
   1b0c0:	0a813483          	ld	s1,168(sp)
   1b0c4:	0a013903          	ld	s2,160(sp)
   1b0c8:	09813983          	ld	s3,152(sp)
   1b0cc:	09013a03          	ld	s4,144(sp)
   1b0d0:	0c010113          	addi	sp,sp,192
   1b0d4:	00008067          	jalr	zero,0(ra)
    const die &d = root();
   1b0d8:	dc5ff0ef          	jal	ra,1ae9c <dwarf::unit::root() const>
   1b0dc:	00050493          	addi	s1,a0,0
    if (!d.has(DW_AT::stmt_list) || !d.has(DW_AT::name))
   1b0e0:	01000593          	addi	a1,zero,16
   1b0e4:	708030ef          	jal	ra,1e7ec <dwarf::die::has(dwarf::DW_AT) const>
   1b0e8:	fc0504e3          	beq	a0,zero,1b0b0 <dwarf::compilation_unit::get_line_table() const+0x2c>
   1b0ec:	00300593          	addi	a1,zero,3
   1b0f0:	00048513          	addi	a0,s1,0
   1b0f4:	6f8030ef          	jal	ra,1e7ec <dwarf::die::has(dwarf::DW_AT) const>
   1b0f8:	fa050ce3          	beq	a0,zero,1b0b0 <dwarf::compilation_unit::get_line_table() const+0x2c>
    shared_ptr<section> sec;
   1b0fc:	00013423          	sd	zero,8(sp)
   1b100:	00013823          	sd	zero,16(sp)
      sec = m->file.get_section(section_type::line);
   1b104:	00400613          	addi	a2,zero,4
   1b108:	00843583          	ld	a1,8(s0)
   1b10c:	05810513          	addi	a0,sp,88
   1b110:	a28fd0ef          	jal	ra,18338 <dwarf::dwarf::get_section(dwarf::section_type) const>
      : _M_ptr(__r._M_ptr), _M_refcount()
   1b114:	05813703          	ld	a4,88(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1b118:	06013783          	ld	a5,96(sp)
	__r._M_pi = _M_pi;
   1b11c:	06013023          	sd	zero,96(sp)
	__r._M_ptr = nullptr;
   1b120:	04013c23          	sd	zero,88(sp)
   1b124:	00e13423          	sd	a4,8(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1b128:	01013903          	ld	s2,16(sp)
	__r._M_pi = _M_pi;
   1b12c:	00f13823          	sd	a5,16(sp)
	if (_M_pi != nullptr)
   1b130:	0a090a63          	beq	s2,zero,1b1e4 <dwarf::compilation_unit::get_line_table() const+0x160>
    if (__is_single_threaded())
   1b134:	00028797          	auipc	a5,0x28
   1b138:	3647b783          	ld	a5,868(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1b13c:	0007c783          	lbu	a5,0(a5)
   1b140:	06078263          	beq	a5,zero,1b1a4 <dwarf::compilation_unit::get_line_table() const+0x120>
    _Atomic_word __result = *__mem;
   1b144:	03092783          	lw	a5,48(s2)
    *__mem += __val;
   1b148:	fff7871b          	addiw	a4,a5,-1
   1b14c:	02e92823          	sw	a4,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b150:	00100713          	addi	a4,zero,1
   1b154:	08e79863          	bne	a5,a4,1b1e4 <dwarf::compilation_unit::get_line_table() const+0x160>
	_M_dispose();
   1b158:	00093783          	ld	a5,0(s2)
   1b15c:	0107b783          	ld	a5,16(a5)
   1b160:	00090513          	addi	a0,s2,0
   1b164:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b168:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b16c:	00028797          	auipc	a5,0x28
   1b170:	32c7b783          	ld	a5,812(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1b174:	0007c783          	lbu	a5,0(a5)
   1b178:	06078e63          	beq	a5,zero,1b1f4 <dwarf::compilation_unit::get_line_table() const+0x170>
    _Atomic_word __result = *__mem;
   1b17c:	03492783          	lw	a5,52(s2)
    *__mem += __val;
   1b180:	fff7871b          	addiw	a4,a5,-1
   1b184:	02e92a23          	sw	a4,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b188:	00100713          	addi	a4,zero,1
   1b18c:	02e79663          	bne	a5,a4,1b1b8 <dwarf::compilation_unit::get_line_table() const+0x134>
	    _M_destroy();
   1b190:	00093783          	ld	a5,0(s2)
   1b194:	0187b783          	ld	a5,24(a5)
   1b198:	00090513          	addi	a0,s2,0
   1b19c:	000780e7          	jalr	ra,0(a5)
   1b1a0:	0180006f          	jal	zero,1b1b8 <dwarf::compilation_unit::get_line_table() const+0x134>
      return __exchange_and_add(__mem, __val);
   1b1a4:	fff00593          	addi	a1,zero,-1
   1b1a8:	03090513          	addi	a0,s2,48
   1b1ac:	c44fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b1b0:	00100793          	addi	a5,zero,1
   1b1b4:	faf502e3          	beq	a0,a5,1b158 <dwarf::compilation_unit::get_line_table() const+0xd4>
	if (_M_pi != nullptr)
   1b1b8:	06013903          	ld	s2,96(sp)
   1b1bc:	02090463          	beq	s2,zero,1b1e4 <dwarf::compilation_unit::get_line_table() const+0x160>
    if (__is_single_threaded())
   1b1c0:	00028797          	auipc	a5,0x28
   1b1c4:	2d87b783          	ld	a5,728(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1b1c8:	0007c783          	lbu	a5,0(a5)
   1b1cc:	02078e63          	beq	a5,zero,1b208 <dwarf::compilation_unit::get_line_table() const+0x184>
    _Atomic_word __result = *__mem;
   1b1d0:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   1b1d4:	fff5079b          	addiw	a5,a0,-1
   1b1d8:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b1dc:	00100793          	addi	a5,zero,1
   1b1e0:	02f50c63          	beq	a0,a5,1b218 <dwarf::compilation_unit::get_line_table() const+0x194>
    auto comp_dir = d.has(DW_AT::comp_dir) ? at_comp_dir(d) : "";
   1b1e4:	01b00593          	addi	a1,zero,27
   1b1e8:	00048513          	addi	a0,s1,0
   1b1ec:	600030ef          	jal	ra,1e7ec <dwarf::die::has(dwarf::DW_AT) const>
   1b1f0:	0880006f          	jal	zero,1b278 <dwarf::compilation_unit::get_line_table() const+0x1f4>
      return __exchange_and_add(__mem, __val);
   1b1f4:	fff00593          	addi	a1,zero,-1
   1b1f8:	03490513          	addi	a0,s2,52
   1b1fc:	bf4fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b200:	00050793          	addi	a5,a0,0
   1b204:	f85ff06f          	jal	zero,1b188 <dwarf::compilation_unit::get_line_table() const+0x104>
   1b208:	fff00593          	addi	a1,zero,-1
   1b20c:	03090513          	addi	a0,s2,48
   1b210:	be0fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b214:	fc9ff06f          	jal	zero,1b1dc <dwarf::compilation_unit::get_line_table() const+0x158>
	_M_dispose();
   1b218:	00093783          	ld	a5,0(s2)
   1b21c:	0107b783          	ld	a5,16(a5)
   1b220:	00090513          	addi	a0,s2,0
   1b224:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b228:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b22c:	00028797          	auipc	a5,0x28
   1b230:	26c7b783          	ld	a5,620(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1b234:	0007c783          	lbu	a5,0(a5)
   1b238:	02078663          	beq	a5,zero,1b264 <dwarf::compilation_unit::get_line_table() const+0x1e0>
    _Atomic_word __result = *__mem;
   1b23c:	03492783          	lw	a5,52(s2)
    *__mem += __val;
   1b240:	fff7871b          	addiw	a4,a5,-1
   1b244:	02e92a23          	sw	a4,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b248:	00100713          	addi	a4,zero,1
   1b24c:	f8e79ce3          	bne	a5,a4,1b1e4 <dwarf::compilation_unit::get_line_table() const+0x160>
	    _M_destroy();
   1b250:	00093783          	ld	a5,0(s2)
   1b254:	0187b783          	ld	a5,24(a5)
   1b258:	00090513          	addi	a0,s2,0
   1b25c:	000780e7          	jalr	ra,0(a5)
   1b260:	f85ff06f          	jal	zero,1b1e4 <dwarf::compilation_unit::get_line_table() const+0x160>
      return __exchange_and_add(__mem, __val);
   1b264:	fff00593          	addi	a1,zero,-1
   1b268:	03490513          	addi	a0,s2,52
   1b26c:	b84fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b270:	00050793          	addi	a5,a0,0
   1b274:	fd5ff06f          	jal	zero,1b248 <dwarf::compilation_unit::get_line_table() const+0x1c4>
   1b278:	00050a63          	beq	a0,zero,1b28c <dwarf::compilation_unit::get_line_table() const+0x208>
   1b27c:	00048593          	addi	a1,s1,0
   1b280:	01810513          	addi	a0,sp,24
   1b284:	2b9110ef          	jal	ra,2cd3c <dwarf::at_comp_dir[abi:cxx11](dwarf::die const&)>
   1b288:	02c0006f          	jal	zero,1b2b4 <dwarf::compilation_unit::get_line_table() const+0x230>
	: allocator_type(__a), _M_p(__dat) { }
   1b28c:	02810793          	addi	a5,sp,40
   1b290:	00f13c23          	sd	a5,24(sp)
	_M_construct(__s, __end, forward_iterator_tag());
   1b294:	00000693          	addi	a3,zero,0
   1b298:	0001d617          	auipc	a2,0x1d
   1b29c:	60860613          	addi	a2,a2,1544 # 388a0 <typeinfo name for dwarf::expr_context+0xb8>
   1b2a0:	00060593          	addi	a1,a2,0
   1b2a4:	01810513          	addi	a0,sp,24
   1b2a8:	00028317          	auipc	t1,0x28
   1b2ac:	07833303          	ld	t1,120(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   1b2b0:	000300e7          	jalr	ra,0(t1)
      { return _M_ptr; }
   1b2b4:	00843903          	ld	s2,8(s0)
    m->lt = line_table(sec, d[DW_AT::stmt_list].as_sec_offset(),
   1b2b8:	01000613          	addi	a2,zero,16
   1b2bc:	00048593          	addi	a1,s1,0
   1b2c0:	07810513          	addi	a0,sp,120
   1b2c4:	56c030ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   1b2c8:	07810513          	addi	a0,sp,120
   1b2cc:	208060ef          	jal	ra,214d4 <dwarf::value::as_sec_offset() const>
   1b2d0:	00050993          	addi	s3,a0,0
   1b2d4:	00843783          	ld	a5,8(s0)
   1b2d8:	0187b783          	ld	a5,24(a5)
   1b2dc:	0207aa03          	lw	s4,32(a5)
                       m->subsec->addr_size, comp_dir, at_name(d));
   1b2e0:	00048593          	addi	a1,s1,0
   1b2e4:	03810513          	addi	a0,sp,56
   1b2e8:	01d110ef          	jal	ra,2cb04 <dwarf::at_name[abi:cxx11](dwarf::die const&)>
    m->lt = line_table(sec, d[DW_AT::stmt_list].as_sec_offset(),
   1b2ec:	03810793          	addi	a5,sp,56
   1b2f0:	01810713          	addi	a4,sp,24
   1b2f4:	000a0693          	addi	a3,s4,0
   1b2f8:	00098613          	addi	a2,s3,0
   1b2fc:	00810593          	addi	a1,sp,8
   1b300:	06810513          	addi	a0,sp,104
   1b304:	0950d0ef          	jal	ra,28b98 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
      : _M_ptr(__r._M_ptr), _M_refcount()
   1b308:	06813703          	ld	a4,104(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1b30c:	07013783          	ld	a5,112(sp)
	__r._M_pi = _M_pi;
   1b310:	06013823          	sd	zero,112(sp)
	__r._M_ptr = nullptr;
   1b314:	06013423          	sd	zero,104(sp)
   1b318:	12e93423          	sd	a4,296(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1b31c:	13093483          	ld	s1,304(s2)
	__r._M_pi = _M_pi;
   1b320:	12f93823          	sd	a5,304(s2)
	if (_M_pi != nullptr)
   1b324:	0a048a63          	beq	s1,zero,1b3d8 <dwarf::compilation_unit::get_line_table() const+0x354>
    if (__is_single_threaded())
   1b328:	00028797          	auipc	a5,0x28
   1b32c:	1707b783          	ld	a5,368(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1b330:	0007c783          	lbu	a5,0(a5)
   1b334:	06078263          	beq	a5,zero,1b398 <dwarf::compilation_unit::get_line_table() const+0x314>
    _Atomic_word __result = *__mem;
   1b338:	0304a783          	lw	a5,48(s1)
    *__mem += __val;
   1b33c:	fff7871b          	addiw	a4,a5,-1
   1b340:	02e4a823          	sw	a4,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b344:	00100713          	addi	a4,zero,1
   1b348:	08e79863          	bne	a5,a4,1b3d8 <dwarf::compilation_unit::get_line_table() const+0x354>
	_M_dispose();
   1b34c:	0004b783          	ld	a5,0(s1)
   1b350:	0107b783          	ld	a5,16(a5)
   1b354:	00048513          	addi	a0,s1,0
   1b358:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b35c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b360:	00028797          	auipc	a5,0x28
   1b364:	1387b783          	ld	a5,312(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1b368:	0007c783          	lbu	a5,0(a5)
   1b36c:	10078263          	beq	a5,zero,1b470 <dwarf::compilation_unit::get_line_table() const+0x3ec>
    _Atomic_word __result = *__mem;
   1b370:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   1b374:	fff7871b          	addiw	a4,a5,-1
   1b378:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b37c:	00100713          	addi	a4,zero,1
   1b380:	02e79663          	bne	a5,a4,1b3ac <dwarf::compilation_unit::get_line_table() const+0x328>
	    _M_destroy();
   1b384:	0004b783          	ld	a5,0(s1)
   1b388:	0187b783          	ld	a5,24(a5)
   1b38c:	00048513          	addi	a0,s1,0
   1b390:	000780e7          	jalr	ra,0(a5)
   1b394:	0180006f          	jal	zero,1b3ac <dwarf::compilation_unit::get_line_table() const+0x328>
      return __exchange_and_add(__mem, __val);
   1b398:	fff00593          	addi	a1,zero,-1
   1b39c:	03048513          	addi	a0,s1,48
   1b3a0:	a50fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b3a4:	00100793          	addi	a5,zero,1
   1b3a8:	faf502e3          	beq	a0,a5,1b34c <dwarf::compilation_unit::get_line_table() const+0x2c8>
	if (_M_pi != nullptr)
   1b3ac:	07013483          	ld	s1,112(sp)
   1b3b0:	02048463          	beq	s1,zero,1b3d8 <dwarf::compilation_unit::get_line_table() const+0x354>
    if (__is_single_threaded())
   1b3b4:	00028797          	auipc	a5,0x28
   1b3b8:	0e47b783          	ld	a5,228(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1b3bc:	0007c783          	lbu	a5,0(a5)
   1b3c0:	0c078263          	beq	a5,zero,1b484 <dwarf::compilation_unit::get_line_table() const+0x400>
    _Atomic_word __result = *__mem;
   1b3c4:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1b3c8:	fff5079b          	addiw	a5,a0,-1
   1b3cc:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b3d0:	00100793          	addi	a5,zero,1
   1b3d4:	0cf50063          	beq	a0,a5,1b494 <dwarf::compilation_unit::get_line_table() const+0x410>
      { return _M_dataplus._M_p; }
   1b3d8:	03813503          	ld	a0,56(sp)
	if (!_M_is_local())
   1b3dc:	04810793          	addi	a5,sp,72
   1b3e0:	00f50463          	beq	a0,a5,1b3e8 <dwarf::compilation_unit::get_line_table() const+0x364>
   1b3e4:	bbcfb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1b3e8:	01813503          	ld	a0,24(sp)
	if (!_M_is_local())
   1b3ec:	02810793          	addi	a5,sp,40
   1b3f0:	00f50463          	beq	a0,a5,1b3f8 <dwarf::compilation_unit::get_line_table() const+0x374>
   1b3f4:	bacfb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   1b3f8:	01013483          	ld	s1,16(sp)
   1b3fc:	ca048ae3          	beq	s1,zero,1b0b0 <dwarf::compilation_unit::get_line_table() const+0x2c>
    if (__is_single_threaded())
   1b400:	00028797          	auipc	a5,0x28
   1b404:	0987b783          	ld	a5,152(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1b408:	0007c783          	lbu	a5,0(a5)
   1b40c:	0e078463          	beq	a5,zero,1b4f4 <dwarf::compilation_unit::get_line_table() const+0x470>
    _Atomic_word __result = *__mem;
   1b410:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1b414:	fff5079b          	addiw	a5,a0,-1
   1b418:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b41c:	00100793          	addi	a5,zero,1
   1b420:	c8f518e3          	bne	a0,a5,1b0b0 <dwarf::compilation_unit::get_line_table() const+0x2c>
	_M_dispose();
   1b424:	0004b783          	ld	a5,0(s1)
   1b428:	0107b783          	ld	a5,16(a5)
   1b42c:	00048513          	addi	a0,s1,0
   1b430:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b434:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b438:	00028797          	auipc	a5,0x28
   1b43c:	0607b783          	ld	a5,96(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1b440:	0007c783          	lbu	a5,0(a5)
   1b444:	0c078063          	beq	a5,zero,1b504 <dwarf::compilation_unit::get_line_table() const+0x480>
    _Atomic_word __result = *__mem;
   1b448:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   1b44c:	fff7871b          	addiw	a4,a5,-1
   1b450:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b454:	00100713          	addi	a4,zero,1
   1b458:	c4e79ce3          	bne	a5,a4,1b0b0 <dwarf::compilation_unit::get_line_table() const+0x2c>
	    _M_destroy();
   1b45c:	0004b783          	ld	a5,0(s1)
   1b460:	0187b783          	ld	a5,24(a5)
   1b464:	00048513          	addi	a0,s1,0
   1b468:	000780e7          	jalr	ra,0(a5)
   1b46c:	c45ff06f          	jal	zero,1b0b0 <dwarf::compilation_unit::get_line_table() const+0x2c>
      return __exchange_and_add(__mem, __val);
   1b470:	fff00593          	addi	a1,zero,-1
   1b474:	03448513          	addi	a0,s1,52
   1b478:	978fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b47c:	00050793          	addi	a5,a0,0
   1b480:	efdff06f          	jal	zero,1b37c <dwarf::compilation_unit::get_line_table() const+0x2f8>
   1b484:	fff00593          	addi	a1,zero,-1
   1b488:	03048513          	addi	a0,s1,48
   1b48c:	964fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b490:	f41ff06f          	jal	zero,1b3d0 <dwarf::compilation_unit::get_line_table() const+0x34c>
	_M_dispose();
   1b494:	0004b783          	ld	a5,0(s1)
   1b498:	0107b783          	ld	a5,16(a5)
   1b49c:	00048513          	addi	a0,s1,0
   1b4a0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b4a4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b4a8:	00028797          	auipc	a5,0x28
   1b4ac:	ff07b783          	ld	a5,-16(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1b4b0:	0007c783          	lbu	a5,0(a5)
   1b4b4:	02078663          	beq	a5,zero,1b4e0 <dwarf::compilation_unit::get_line_table() const+0x45c>
    _Atomic_word __result = *__mem;
   1b4b8:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   1b4bc:	fff7871b          	addiw	a4,a5,-1
   1b4c0:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b4c4:	00100713          	addi	a4,zero,1
   1b4c8:	f0e798e3          	bne	a5,a4,1b3d8 <dwarf::compilation_unit::get_line_table() const+0x354>
	    _M_destroy();
   1b4cc:	0004b783          	ld	a5,0(s1)
   1b4d0:	0187b783          	ld	a5,24(a5)
   1b4d4:	00048513          	addi	a0,s1,0
   1b4d8:	000780e7          	jalr	ra,0(a5)
   1b4dc:	efdff06f          	jal	zero,1b3d8 <dwarf::compilation_unit::get_line_table() const+0x354>
      return __exchange_and_add(__mem, __val);
   1b4e0:	fff00593          	addi	a1,zero,-1
   1b4e4:	03448513          	addi	a0,s1,52
   1b4e8:	908fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b4ec:	00050793          	addi	a5,a0,0
   1b4f0:	fd5ff06f          	jal	zero,1b4c4 <dwarf::compilation_unit::get_line_table() const+0x440>
   1b4f4:	fff00593          	addi	a1,zero,-1
   1b4f8:	03048513          	addi	a0,s1,48
   1b4fc:	8f4fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b500:	f1dff06f          	jal	zero,1b41c <dwarf::compilation_unit::get_line_table() const+0x398>
   1b504:	fff00593          	addi	a1,zero,-1
   1b508:	03448513          	addi	a0,s1,52
   1b50c:	8e4fb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b510:	00050793          	addi	a5,a0,0
   1b514:	f41ff06f          	jal	zero,1b454 <dwarf::compilation_unit::get_line_table() const+0x3d0>
	if (_M_pi != nullptr)
   1b518:	01013503          	ld	a0,16(sp)
   1b51c:	b8050ae3          	beq	a0,zero,1b0b0 <dwarf::compilation_unit::get_line_table() const+0x2c>
	  _M_pi->_M_release();
   1b520:	00028317          	auipc	t1,0x28
   1b524:	ec033303          	ld	t1,-320(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   1b528:	000300e7          	jalr	ra,0(t1)
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   1b52c:	b85ff06f          	jal	zero,1b0b0 <dwarf::compilation_unit::get_line_table() const+0x2c>
    } catch (format_error &e) {
   1b530:	00100793          	addi	a5,zero,1
   1b534:	02f58263          	beq	a1,a5,1b558 <dwarf::compilation_unit::get_line_table() const+0x4d4>
   1b538:	00050413          	addi	s0,a0,0
	if (_M_pi != nullptr)
   1b53c:	01013503          	ld	a0,16(sp)
   1b540:	00050863          	beq	a0,zero,1b550 <dwarf::compilation_unit::get_line_table() const+0x4cc>
	  _M_pi->_M_release();
   1b544:	00028317          	auipc	t1,0x28
   1b548:	e9c33303          	ld	t1,-356(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   1b54c:	000300e7          	jalr	ra,0(t1)
   1b550:	00040513          	addi	a0,s0,0
   1b554:	c3cfb0ef          	jal	ra,16990 <_Unwind_Resume@plt>
   1b558:	918fb0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
    }
   1b55c:	bd4fb0ef          	jal	ra,16930 <__cxa_end_catch@plt>
   1b560:	fb9ff06f          	jal	zero,1b518 <dwarf::compilation_unit::get_line_table() const+0x494>
      { return _M_dataplus._M_p; }
   1b564:	00050413          	addi	s0,a0,0
   1b568:	03813503          	ld	a0,56(sp)
	if (!_M_is_local())
   1b56c:	04810793          	addi	a5,sp,72
   1b570:	00f50463          	beq	a0,a5,1b578 <dwarf::compilation_unit::get_line_table() const+0x4f4>
   1b574:	a2cfb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1b578:	01813503          	ld	a0,24(sp)
	if (!_M_is_local())
   1b57c:	02810793          	addi	a5,sp,40
   1b580:	faf50ee3          	beq	a0,a5,1b53c <dwarf::compilation_unit::get_line_table() const+0x4b8>
   1b584:	a1cfb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1b588:	fb5ff06f          	jal	zero,1b53c <dwarf::compilation_unit::get_line_table() const+0x4b8>
      { return _M_dataplus._M_p; }
   1b58c:	00050413          	addi	s0,a0,0
   1b590:	fe9ff06f          	jal	zero,1b578 <dwarf::compilation_unit::get_line_table() const+0x4f4>
	if (_M_pi != nullptr)
   1b594:	00050413          	addi	s0,a0,0
   1b598:	fa5ff06f          	jal	zero,1b53c <dwarf::compilation_unit::get_line_table() const+0x4b8>

000000000001b59c <dwarf::unit::get_abbrev(unsigned long) const>:
const abbrev_entry &unit::get_abbrev(abbrev_code acode) const {
   1b59c:	f9010113          	addi	sp,sp,-112
   1b5a0:	06113423          	sd	ra,104(sp)
   1b5a4:	06813023          	sd	s0,96(sp)
   1b5a8:	04913c23          	sd	s1,88(sp)
   1b5ac:	00050413          	addi	s0,a0,0
   1b5b0:	00b13423          	sd	a1,8(sp)
      { return _M_ptr; }
   1b5b4:	00853503          	ld	a0,8(a0)
  if (!m->have_abbrevs)
   1b5b8:	13854783          	lbu	a5,312(a0)
   1b5bc:	04078e63          	beq	a5,zero,1b618 <dwarf::unit::get_abbrev(unsigned long) const+0x7c>
   1b5c0:	00843703          	ld	a4,8(s0)
      : _M_current(__i) { }
   1b5c4:	14073503          	ld	a0,320(a4)
   1b5c8:	14873783          	ld	a5,328(a4)
  if (!m->abbrevs_vec.empty()) {
   1b5cc:	04a78a63          	beq	a5,a0,1b620 <dwarf::unit::get_abbrev(unsigned long) const+0x84>
    if (acode >= m->abbrevs_vec.size())
   1b5d0:	00813703          	ld	a4,8(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1b5d4:	40a787b3          	sub	a5,a5,a0
   1b5d8:	4037d793          	srai	a5,a5,0x3
   1b5dc:	0001c697          	auipc	a3,0x1c
   1b5e0:	4d46b683          	ld	a3,1236(a3) # 37ab0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd8>
   1b5e4:	02d787b3          	mul	a5,a5,a3
   1b5e8:	04f77e63          	bgeu	a4,a5,1b644 <dwarf::unit::get_abbrev(unsigned long) const+0xa8>
	return *(this->_M_impl._M_start + __n);
   1b5ec:	00271793          	slli	a5,a4,0x2
   1b5f0:	00e787b3          	add	a5,a5,a4
   1b5f4:	00379793          	slli	a5,a5,0x3
   1b5f8:	00f50533          	add	a0,a0,a5
    if (entry.code == 0)
   1b5fc:	00053783          	ld	a5,0(a0)
   1b600:	04078263          	beq	a5,zero,1b644 <dwarf::unit::get_abbrev(unsigned long) const+0xa8>
}
   1b604:	06813083          	ld	ra,104(sp)
   1b608:	06013403          	ld	s0,96(sp)
   1b60c:	05813483          	ld	s1,88(sp)
   1b610:	07010113          	addi	sp,sp,112
   1b614:	00008067          	jalr	zero,0(ra)
    m->force_abbrevs();
   1b618:	ca8ff0ef          	jal	ra,1aac0 <dwarf::unit::impl::force_abbrevs()>
   1b61c:	fa5ff06f          	jal	zero,1b5c0 <dwarf::unit::get_abbrev(unsigned long) const+0x24>
      if (size() <= __small_size_threshold())
   1b620:	17073783          	ld	a5,368(a4)
   1b624:	04079263          	bne	a5,zero,1b668 <dwarf::unit::get_abbrev(unsigned long) const+0xcc>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1b628:	16873503          	ld	a0,360(a4)
	  for (auto __it = begin(); __it != end(); ++__it)
   1b62c:	00050c63          	beq	a0,zero,1b644 <dwarf::unit::get_abbrev(unsigned long) const+0xa8>
   1b630:	00813703          	ld	a4,8(sp)
	    if (this->_M_key_equals(__k, *__it._M_cur))
   1b634:	00853783          	ld	a5,8(a0)
   1b638:	04f70e63          	beq	a4,a5,1b694 <dwarf::unit::get_abbrev(unsigned long) const+0xf8>
   1b63c:	00053503          	ld	a0,0(a0)
	  for (auto __it = begin(); __it != end(); ++__it)
   1b640:	fe051ae3          	bne	a0,zero,1b634 <dwarf::unit::get_abbrev(unsigned long) const+0x98>
  throw format_error("unknown abbrev code 0x" + to_hex(acode));
   1b644:	01000513          	addi	a0,zero,16
   1b648:	848fb0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1b64c:	00050493          	addi	s1,a0,0
   1b650:	00813583          	ld	a1,8(sp)
   1b654:	01010513          	addi	a0,sp,16
   1b658:	00028317          	auipc	t1,0x28
   1b65c:	cb833303          	ld	t1,-840(t1) # 43310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26ea0>
   1b660:	000300e7          	jalr	ra,0(t1)
   1b664:	0380006f          	jal	zero,1b69c <dwarf::unit::get_abbrev(unsigned long) const+0x100>
	return _M_hash()(__k);
   1b668:	00813683          	ld	a3,8(sp)
    { return __num % __den; }
   1b66c:	16073583          	ld	a1,352(a4)
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1b670:	00810613          	addi	a2,sp,8
   1b674:	02b6f5b3          	remu	a1,a3,a1
   1b678:	15870513          	addi	a0,a4,344
   1b67c:	00028317          	auipc	t1,0x28
   1b680:	ee433303          	ld	t1,-284(t1) # 43560 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x26578>
   1b684:	000300e7          	jalr	ra,0(t1)
	if (__before_n)
   1b688:	fa050ee3          	beq	a0,zero,1b644 <dwarf::unit::get_abbrev(unsigned long) const+0xa8>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   1b68c:	00053503          	ld	a0,0(a0)
    if (it == m->abbrevs_map.end())
   1b690:	fa050ae3          	beq	a0,zero,1b644 <dwarf::unit::get_abbrev(unsigned long) const+0xa8>
    return it->second;
   1b694:	01050513          	addi	a0,a0,16
   1b698:	f6dff06f          	jal	zero,1b604 <dwarf::unit::get_abbrev(unsigned long) const+0x68>
    { return std::move(__rhs.insert(0, __lhs)); }
   1b69c:	0001c617          	auipc	a2,0x1c
   1b6a0:	1c460613          	addi	a2,a2,452 # 37860 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xe0>
   1b6a4:	00000593          	addi	a1,zero,0
   1b6a8:	01010513          	addi	a0,sp,16
   1b6ac:	f55fa0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1b6b0:	00050593          	addi	a1,a0,0
   1b6b4:	03010413          	addi	s0,sp,48
   1b6b8:	00040513          	addi	a0,s0,0
   1b6bc:	814fb0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   1b6c0:	00040593          	addi	a1,s0,0
   1b6c4:	00048513          	addi	a0,s1,0
   1b6c8:	968fb0ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1b6cc:	00028797          	auipc	a5,0x28
   1b6d0:	ea47b783          	ld	a5,-348(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   1b6d4:	01078793          	addi	a5,a5,16
   1b6d8:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1b6dc:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   1b6e0:	04010793          	addi	a5,sp,64
   1b6e4:	00f50463          	beq	a0,a5,1b6ec <dwarf::unit::get_abbrev(unsigned long) const+0x150>
   1b6e8:	8b8fb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1b6ec:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   1b6f0:	02010793          	addi	a5,sp,32
   1b6f4:	00f50463          	beq	a0,a5,1b6fc <dwarf::unit::get_abbrev(unsigned long) const+0x160>
   1b6f8:	8a8fb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
  throw format_error("unknown abbrev code 0x" + to_hex(acode));
   1b6fc:	00028617          	auipc	a2,0x28
   1b700:	c9c63603          	ld	a2,-868(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   1b704:	00028597          	auipc	a1,0x28
   1b708:	bc45b583          	ld	a1,-1084(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   1b70c:	00048513          	addi	a0,s1,0
   1b710:	a50fb0ef          	jal	ra,16960 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   1b714:	00050413          	addi	s0,a0,0
   1b718:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   1b71c:	04010793          	addi	a5,sp,64
   1b720:	00f50463          	beq	a0,a5,1b728 <dwarf::unit::get_abbrev(unsigned long) const+0x18c>
   1b724:	87cfb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1b728:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   1b72c:	02010793          	addi	a5,sp,32
   1b730:	00f50463          	beq	a0,a5,1b738 <dwarf::unit::get_abbrev(unsigned long) const+0x19c>
   1b734:	86cfb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1b738:	00048513          	addi	a0,s1,0
   1b73c:	814fb0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1b740:	00040513          	addi	a0,s0,0
   1b744:	a4cfb0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1b748:	00050413          	addi	s0,a0,0
   1b74c:	fddff06f          	jal	zero,1b728 <dwarf::unit::get_abbrev(unsigned long) const+0x18c>
   1b750:	00050413          	addi	s0,a0,0
   1b754:	fe5ff06f          	jal	zero,1b738 <dwarf::unit::get_abbrev(unsigned long) const+0x19c>

000000000001b758 <dwarf::type_unit::type() const>:

const die &type_unit::type() const {
   1b758:	f5010113          	addi	sp,sp,-176
   1b75c:	0a113423          	sd	ra,168(sp)
   1b760:	0a813023          	sd	s0,160(sp)
   1b764:	08913c23          	sd	s1,152(sp)
   1b768:	09213823          	sd	s2,144(sp)
   1b76c:	09313423          	sd	s3,136(sp)
   1b770:	09413023          	sd	s4,128(sp)
   1b774:	07513c23          	sd	s5,120(sp)
   1b778:	07613823          	sd	s6,112(sp)
   1b77c:	00050493          	addi	s1,a0,0
   1b780:	00853503          	ld	a0,8(a0)
  if (!m->type.valid()) {
   1b784:	0c853783          	ld	a5,200(a0)
   1b788:	02078a63          	beq	a5,zero,1b7bc <dwarf::type_unit::type() const+0x64>
    m->force_abbrevs();
    m->type = die(this);
    m->type.read(m->type_offset);
  }
  return m->type;
   1b78c:	0084b503          	ld	a0,8(s1)
   1b790:	0b850513          	addi	a0,a0,184
}
   1b794:	0a813083          	ld	ra,168(sp)
   1b798:	0a013403          	ld	s0,160(sp)
   1b79c:	09813483          	ld	s1,152(sp)
   1b7a0:	09013903          	ld	s2,144(sp)
   1b7a4:	08813983          	ld	s3,136(sp)
   1b7a8:	08013a03          	ld	s4,128(sp)
   1b7ac:	07813a83          	ld	s5,120(sp)
   1b7b0:	07013b03          	ld	s6,112(sp)
   1b7b4:	0b010113          	addi	sp,sp,176
   1b7b8:	00008067          	jalr	zero,0(ra)
    m->force_abbrevs();
   1b7bc:	b04ff0ef          	jal	ra,1aac0 <dwarf::unit::impl::force_abbrevs()>
   1b7c0:	0084b403          	ld	s0,8(s1)
    m->type = die(this);
   1b7c4:	00048593          	addi	a1,s1,0
   1b7c8:	00010513          	addi	a0,sp,0
   1b7cc:	291020ef          	jal	ra,1e25c <dwarf::die::die(dwarf::unit const*)>
  die &operator=(die &&o) = default;
   1b7d0:	00012783          	lw	a5,0(sp)
   1b7d4:	0af42c23          	sw	a5,184(s0)
   1b7d8:	00813783          	ld	a5,8(sp)
   1b7dc:	0cf43023          	sd	a5,192(s0)
   1b7e0:	01013783          	ld	a5,16(sp)
   1b7e4:	0cf43423          	sd	a5,200(s0)
   1b7e8:	01813783          	ld	a5,24(sp)
   1b7ec:	0cf43823          	sd	a5,208(s0)
  size_type size() const { return end - base; }
   1b7f0:	05813983          	ld	s3,88(sp)
   1b7f4:	05013783          	ld	a5,80(sp)
   1b7f8:	40f989b3          	sub	s3,s3,a5
   1b7fc:	4039d913          	srai	s2,s3,0x3
    for (T *p = base; p < end; ++p)
   1b800:	10843683          	ld	a3,264(s0)
   1b804:	11043783          	ld	a5,272(s0)
   1b808:	00f6fa63          	bgeu	a3,a5,1b81c <dwarf::type_unit::type() const+0xc4>
   1b80c:	00068793          	addi	a5,a3,0
   1b810:	00878793          	addi	a5,a5,8
   1b814:	11043703          	ld	a4,272(s0)
   1b818:	fee7ece3          	bltu	a5,a4,1b810 <dwarf::type_unit::type() const+0xb8>
    end = base;
   1b81c:	10d43823          	sd	a3,272(s0)
    if (n <= (size_type)(cap - base))
   1b820:	11843503          	ld	a0,280(s0)
   1b824:	40d50533          	sub	a0,a0,a3
   1b828:	07357863          	bgeu	a0,s3,1b898 <dwarf::type_unit::type() const+0x140>
   1b82c:	40355513          	srai	a0,a0,0x3
   1b830:	00051463          	bne	a0,zero,1b838 <dwarf::type_unit::type() const+0xe0>
   1b834:	00100513          	addi	a0,zero,1
    while (target < n)
   1b838:	01257663          	bgeu	a0,s2,1b844 <dwarf::type_unit::type() const+0xec>
      target <<= 1;
   1b83c:	00151513          	slli	a0,a0,0x1
    while (target < n)
   1b840:	ff256ee3          	bltu	a0,s2,1b83c <dwarf::type_unit::type() const+0xe4>
    char *newbuf = new char[sizeof(T[target])];
   1b844:	00351a13          	slli	s4,a0,0x3
   1b848:	000a0513          	addi	a0,s4,0
   1b84c:	d45fa0ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   1b850:	00050b13          	addi	s6,a0,0
    T *src = base, *dest = (T *)newbuf;
   1b854:	10843503          	ld	a0,264(s0)
    for (; src < end; src++, dest++) {
   1b858:	11043783          	ld	a5,272(s0)
   1b85c:	0cf57063          	bgeu	a0,a5,1b91c <dwarf::type_unit::type() const+0x1c4>
    T *src = base, *dest = (T *)newbuf;
   1b860:	00050793          	addi	a5,a0,0
   1b864:	000b0a93          	addi	s5,s6,0
    for (; src < end; src++, dest++) {
   1b868:	00878793          	addi	a5,a5,8
   1b86c:	008a8a93          	addi	s5,s5,8
   1b870:	11043703          	ld	a4,272(s0)
   1b874:	fee7eae3          	bltu	a5,a4,1b868 <dwarf::type_unit::type() const+0x110>
   1b878:	0d840793          	addi	a5,s0,216
    if ((char *)base != buf)
   1b87c:	00f50663          	beq	a0,a5,1b888 <dwarf::type_unit::type() const+0x130>
      delete[] (char *)base;
   1b880:	00050463          	beq	a0,zero,1b888 <dwarf::type_unit::type() const+0x130>
   1b884:	fcdfa0ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1b888:	11643423          	sd	s6,264(s0)
    end = dest;
   1b88c:	11543823          	sd	s5,272(s0)
    cap = base + target;
   1b890:	014b0b33          	add	s6,s6,s4
   1b894:	11643c23          	sd	s6,280(s0)
    for (size_type i = 0; i < osize; i++)
   1b898:	02090663          	beq	s2,zero,1b8c4 <dwarf::type_unit::type() const+0x16c>
   1b89c:	00000793          	addi	a5,zero,0
   1b8a0:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1b8a4:	05013703          	ld	a4,80(sp)
   1b8a8:	00d70733          	add	a4,a4,a3
   1b8ac:	00073603          	ld	a2,0(a4)
   1b8b0:	10843703          	ld	a4,264(s0)
   1b8b4:	00d70733          	add	a4,a4,a3
   1b8b8:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1b8bc:	00178793          	addi	a5,a5,1
   1b8c0:	fef910e3          	bne	s2,a5,1b8a0 <dwarf::type_unit::type() const+0x148>
    end = base + osize;
   1b8c4:	10843783          	ld	a5,264(s0)
   1b8c8:	013787b3          	add	a5,a5,s3
   1b8cc:	10f43823          	sd	a5,272(s0)
   1b8d0:	06813783          	ld	a5,104(sp)
   1b8d4:	12f43023          	sd	a5,288(s0)
    for (T *p = base; p < end; ++p)
   1b8d8:	05013503          	ld	a0,80(sp)
   1b8dc:	05813783          	ld	a5,88(sp)
   1b8e0:	00f57a63          	bgeu	a0,a5,1b8f4 <dwarf::type_unit::type() const+0x19c>
   1b8e4:	00050793          	addi	a5,a0,0
   1b8e8:	00878793          	addi	a5,a5,8
   1b8ec:	05813703          	ld	a4,88(sp)
   1b8f0:	fee7ece3          	bltu	a5,a4,1b8e8 <dwarf::type_unit::type() const+0x190>
    end = base;
   1b8f4:	04a13c23          	sd	a0,88(sp)
    if ((char *)base != buf)
   1b8f8:	02010793          	addi	a5,sp,32
   1b8fc:	00f50663          	beq	a0,a5,1b908 <dwarf::type_unit::type() const+0x1b0>
      delete[] (char *)base;
   1b900:	00050463          	beq	a0,zero,1b908 <dwarf::type_unit::type() const+0x1b0>
   1b904:	f4dfa0ef          	jal	ra,16850 <operator delete[](void*)@plt>
   1b908:	0084b503          	ld	a0,8(s1)
    m->type.read(m->type_offset);
   1b90c:	04053583          	ld	a1,64(a0)
   1b910:	0b850513          	addi	a0,a0,184
   1b914:	1a1020ef          	jal	ra,1e2b4 <dwarf::die::read(unsigned long)>
   1b918:	e75ff06f          	jal	zero,1b78c <dwarf::type_unit::type() const+0x34>
    T *src = base, *dest = (T *)newbuf;
   1b91c:	000b0a93          	addi	s5,s6,0
   1b920:	f59ff06f          	jal	zero,1b878 <dwarf::type_unit::type() const+0x120>
class die {
   1b924:	00050413          	addi	s0,a0,0
   1b928:	02010513          	addi	a0,sp,32
   1b92c:	00028317          	auipc	t1,0x28
   1b930:	ad433303          	ld	t1,-1324(t1) # 43400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b8b0>
   1b934:	000300e7          	jalr	ra,0(t1)
   1b938:	00040513          	addi	a0,s0,0
   1b93c:	854fb0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001b940 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   1b940:	00008067          	jalr	zero,0(ra)

000000000001b944 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   1b944:	00008067          	jalr	zero,0(ra)

000000000001b948 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   1b948:	00008067          	jalr	zero,0(ra)

000000000001b94c <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      }
   1b94c:	00008067          	jalr	zero,0(ra)

000000000001b950 <dwarf::format_error::~format_error()>:
class format_error : public std::runtime_error {
   1b950:	ff010113          	addi	sp,sp,-16
   1b954:	00113423          	sd	ra,8(sp)
   1b958:	00028797          	auipc	a5,0x28
   1b95c:	c187b783          	ld	a5,-1000(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   1b960:	01078793          	addi	a5,a5,16
   1b964:	00f53023          	sd	a5,0(a0)
   1b968:	e69fa0ef          	jal	ra,167d0 <std::runtime_error::~runtime_error()@plt>
   1b96c:	00813083          	ld	ra,8(sp)
   1b970:	01010113          	addi	sp,sp,16
   1b974:	00008067          	jalr	zero,0(ra)

000000000001b978 <dwarf::format_error::~format_error()>:
   1b978:	ff010113          	addi	sp,sp,-16
   1b97c:	00113423          	sd	ra,8(sp)
   1b980:	00813023          	sd	s0,0(sp)
   1b984:	00050413          	addi	s0,a0,0
   1b988:	00028797          	auipc	a5,0x28
   1b98c:	be87b783          	ld	a5,-1048(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   1b990:	01078793          	addi	a5,a5,16
   1b994:	00f53023          	sd	a5,0(a0)
   1b998:	e39fa0ef          	jal	ra,167d0 <std::runtime_error::~runtime_error()@plt>
   1b99c:	00040513          	addi	a0,s0,0
   1b9a0:	e01fa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1b9a4:	00813083          	ld	ra,8(sp)
   1b9a8:	00013403          	ld	s0,0(sp)
   1b9ac:	01010113          	addi	sp,sp,16
   1b9b0:	00008067          	jalr	zero,0(ra)

000000000001b9b4 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   1b9b4:	ff010113          	addi	sp,sp,-16
   1b9b8:	00113423          	sd	ra,8(sp)
   1b9bc:	de5fa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1b9c0:	00813083          	ld	ra,8(sp)
   1b9c4:	01010113          	addi	sp,sp,16
   1b9c8:	00008067          	jalr	zero,0(ra)

000000000001b9cc <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   1b9cc:	ff010113          	addi	sp,sp,-16
   1b9d0:	00113423          	sd	ra,8(sp)
   1b9d4:	dcdfa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1b9d8:	00813083          	ld	ra,8(sp)
   1b9dc:	01010113          	addi	sp,sp,16
   1b9e0:	00008067          	jalr	zero,0(ra)

000000000001b9e4 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   1b9e4:	ff010113          	addi	sp,sp,-16
   1b9e8:	00113423          	sd	ra,8(sp)
   1b9ec:	db5fa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1b9f0:	00813083          	ld	ra,8(sp)
   1b9f4:	01010113          	addi	sp,sp,16
   1b9f8:	00008067          	jalr	zero,0(ra)

000000000001b9fc <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()>:
      ~vector() _GLIBCXX_NOEXCEPT
   1b9fc:	fe010113          	addi	sp,sp,-32
   1ba00:	00113c23          	sd	ra,24(sp)
   1ba04:	00813823          	sd	s0,16(sp)
   1ba08:	00913423          	sd	s1,8(sp)
   1ba0c:	01213023          	sd	s2,0(sp)
   1ba10:	00050913          	addi	s2,a0,0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1ba14:	00053403          	ld	s0,0(a0)
   1ba18:	00853483          	ld	s1,8(a0)
   1ba1c:	00940e63          	beq	s0,s1,1ba38 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()+0x3c>
      __pointer->~_Tp();
   1ba20:	00043783          	ld	a5,0(s0)
   1ba24:	0007b783          	ld	a5,0(a5)
   1ba28:	00040513          	addi	a0,s0,0
   1ba2c:	000780e7          	jalr	ra,0(a5)
	  for (; __first != __last; ++__first)
   1ba30:	01840413          	addi	s0,s0,24
   1ba34:	fe8496e3          	bne	s1,s0,1ba20 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()+0x24>
	_M_deallocate(_M_impl._M_start,
   1ba38:	00093503          	ld	a0,0(s2)
	if (__p)
   1ba3c:	00050463          	beq	a0,zero,1ba44 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()+0x48>
   1ba40:	d61fa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   1ba44:	01813083          	ld	ra,24(sp)
   1ba48:	01013403          	ld	s0,16(sp)
   1ba4c:	00813483          	ld	s1,8(sp)
   1ba50:	00013903          	ld	s2,0(sp)
   1ba54:	02010113          	addi	sp,sp,32
   1ba58:	00008067          	jalr	zero,0(ra)

000000000001ba5c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   1ba5c:	ff010113          	addi	sp,sp,-16
   1ba60:	00113423          	sd	ra,8(sp)
   1ba64:	d3dfa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   1ba68:	00813083          	ld	ra,8(sp)
   1ba6c:	01010113          	addi	sp,sp,16
   1ba70:	00008067          	jalr	zero,0(ra)

000000000001ba74 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   1ba74:	ff010113          	addi	sp,sp,-16
   1ba78:	00113423          	sd	ra,8(sp)
   1ba7c:	d25fa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   1ba80:	00813083          	ld	ra,8(sp)
   1ba84:	01010113          	addi	sp,sp,16
   1ba88:	00008067          	jalr	zero,0(ra)

000000000001ba8c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   1ba8c:	ff010113          	addi	sp,sp,-16
   1ba90:	00113423          	sd	ra,8(sp)
   1ba94:	d0dfa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   1ba98:	00813083          	ld	ra,8(sp)
   1ba9c:	01010113          	addi	sp,sp,16
   1baa0:	00008067          	jalr	zero,0(ra)

000000000001baa4 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   1baa4:	ff010113          	addi	sp,sp,-16
   1baa8:	00113423          	sd	ra,8(sp)
   1baac:	00813023          	sd	s0,0(sp)
   1bab0:	03850413          	addi	s0,a0,56
	    ||
   1bab4:	00028797          	auipc	a5,0x28
   1bab8:	a9c7b783          	ld	a5,-1380(a5) # 43550 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbdd0>
   1babc:	02f58c63          	beq	a1,a5,1baf4 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   1bac0:	0085b503          	ld	a0,8(a1)
   1bac4:	00028797          	auipc	a5,0x28
   1bac8:	9647b783          	ld	a5,-1692(a5) # 43428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbe98>
   1bacc:	02f50463          	beq	a0,a5,1baf4 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   1bad0:	00054703          	lbu	a4,0(a0)
   1bad4:	02a00793          	addi	a5,zero,42
   1bad8:	02f70863          	beq	a4,a5,1bb08 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   1badc:	00028597          	auipc	a1,0x28
   1bae0:	94c5b583          	ld	a1,-1716(a1) # 43428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbe98>
   1bae4:	aedfa0ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   1bae8:	00153513          	sltiu	a0,a0,1
   1baec:	40a00533          	sub	a0,zero,a0
   1baf0:	00a47433          	and	s0,s0,a0
      }
   1baf4:	00040513          	addi	a0,s0,0
   1baf8:	00813083          	ld	ra,8(sp)
   1bafc:	00013403          	ld	s0,0(sp)
   1bb00:	01010113          	addi	sp,sp,16
   1bb04:	00008067          	jalr	zero,0(ra)
	return nullptr;
   1bb08:	00000413          	addi	s0,zero,0
   1bb0c:	fe9ff06f          	jal	zero,1baf4 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

000000000001bb10 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   1bb10:	ff010113          	addi	sp,sp,-16
   1bb14:	00113423          	sd	ra,8(sp)
   1bb18:	00813023          	sd	s0,0(sp)
   1bb1c:	03850413          	addi	s0,a0,56
	    ||
   1bb20:	00028797          	auipc	a5,0x28
   1bb24:	a307b783          	ld	a5,-1488(a5) # 43550 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbdd0>
   1bb28:	02f58c63          	beq	a1,a5,1bb60 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   1bb2c:	0085b503          	ld	a0,8(a1)
   1bb30:	00028797          	auipc	a5,0x28
   1bb34:	8f87b783          	ld	a5,-1800(a5) # 43428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbe98>
   1bb38:	02f50463          	beq	a0,a5,1bb60 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   1bb3c:	00054703          	lbu	a4,0(a0)
   1bb40:	02a00793          	addi	a5,zero,42
   1bb44:	02f70863          	beq	a4,a5,1bb74 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   1bb48:	00028597          	auipc	a1,0x28
   1bb4c:	8e05b583          	ld	a1,-1824(a1) # 43428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbe98>
   1bb50:	a81fa0ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   1bb54:	00153513          	sltiu	a0,a0,1
   1bb58:	40a00533          	sub	a0,zero,a0
   1bb5c:	00a47433          	and	s0,s0,a0
      }
   1bb60:	00040513          	addi	a0,s0,0
   1bb64:	00813083          	ld	ra,8(sp)
   1bb68:	00013403          	ld	s0,0(sp)
   1bb6c:	01010113          	addi	sp,sp,16
   1bb70:	00008067          	jalr	zero,0(ra)
	return nullptr;
   1bb74:	00000413          	addi	s0,zero,0
   1bb78:	fe9ff06f          	jal	zero,1bb60 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

000000000001bb7c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   1bb7c:	ff010113          	addi	sp,sp,-16
   1bb80:	00113423          	sd	ra,8(sp)
   1bb84:	00813023          	sd	s0,0(sp)
   1bb88:	03850413          	addi	s0,a0,56
	    ||
   1bb8c:	00028797          	auipc	a5,0x28
   1bb90:	9c47b783          	ld	a5,-1596(a5) # 43550 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbdd0>
   1bb94:	02f58c63          	beq	a1,a5,1bbcc <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   1bb98:	0085b503          	ld	a0,8(a1)
   1bb9c:	00028797          	auipc	a5,0x28
   1bba0:	88c7b783          	ld	a5,-1908(a5) # 43428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbe98>
   1bba4:	02f50463          	beq	a0,a5,1bbcc <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   1bba8:	00054703          	lbu	a4,0(a0)
   1bbac:	02a00793          	addi	a5,zero,42
   1bbb0:	02f70863          	beq	a4,a5,1bbe0 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   1bbb4:	00028597          	auipc	a1,0x28
   1bbb8:	8745b583          	ld	a1,-1932(a1) # 43428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbe98>
   1bbbc:	a15fa0ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   1bbc0:	00153513          	sltiu	a0,a0,1
   1bbc4:	40a00533          	sub	a0,zero,a0
   1bbc8:	00a47433          	and	s0,s0,a0
      }
   1bbcc:	00040513          	addi	a0,s0,0
   1bbd0:	00813083          	ld	ra,8(sp)
   1bbd4:	00013403          	ld	s0,0(sp)
   1bbd8:	01010113          	addi	sp,sp,16
   1bbdc:	00008067          	jalr	zero,0(ra)
	return nullptr;
   1bbe0:	00000413          	addi	s0,zero,0
   1bbe4:	fe9ff06f          	jal	zero,1bbcc <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

000000000001bbe8 <std::__cxx11::to_string(int)>:
  inline string
  to_string(int __val)
#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_INT__) <= 32
  noexcept // any 32-bit value fits in the SSO buffer
#endif
  {
   1bbe8:	fd010113          	addi	sp,sp,-48
   1bbec:	02113423          	sd	ra,40(sp)
   1bbf0:	02813023          	sd	s0,32(sp)
   1bbf4:	00913c23          	sd	s1,24(sp)
   1bbf8:	01213823          	sd	s2,16(sp)
   1bbfc:	01313423          	sd	s3,8(sp)
   1bc00:	00050913          	addi	s2,a0,0
    const bool __neg = __val < 0;
   1bc04:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   1bc08:	0005849b          	addiw	s1,a1,0
   1bc0c:	0605c863          	blt	a1,zero,1bc7c <std::__cxx11::to_string(int)+0x94>
      const unsigned __b2 = __base  * __base;
      const unsigned __b3 = __b2 * __base;
      const unsigned long __b4 = __b3 * __base;
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
   1bc10:	00900793          	addi	a5,zero,9
   1bc14:	1c97f063          	bgeu	a5,s1,1bdd4 <std::__cxx11::to_string(int)+0x1ec>
	  if (__value < __b2) return __n + 1;
   1bc18:	06300793          	addi	a5,zero,99
   1bc1c:	0697f463          	bgeu	a5,s1,1bc84 <std::__cxx11::to_string(int)+0x9c>
	  if (__value < __b3) return __n + 2;
   1bc20:	3e700793          	addi	a5,zero,999
   1bc24:	0a97f063          	bgeu	a5,s1,1bcc4 <std::__cxx11::to_string(int)+0xdc>
	  if (__value < __b4) return __n + 3;
   1bc28:	02049713          	slli	a4,s1,0x20
   1bc2c:	02075713          	srli	a4,a4,0x20
   1bc30:	000027b7          	lui	a5,0x2
   1bc34:	70f78793          	addi	a5,a5,1807 # 270f <__abi_tag-0xdb85>
   1bc38:	1897fa63          	bgeu	a5,s1,1bdcc <std::__cxx11::to_string(int)+0x1e4>
      unsigned __n = 1;
   1bc3c:	00100413          	addi	s0,zero,1
	  __value /= __b4;
   1bc40:	000026b7          	lui	a3,0x2
   1bc44:	71068593          	addi	a1,a3,1808 # 2710 <__abi_tag-0xdb84>
	  if (__value < (unsigned)__base) return __n;
   1bc48:	00900613          	addi	a2,zero,9
	  if (__value < __b2) return __n + 1;
   1bc4c:	06300513          	addi	a0,zero,99
	  if (__value < __b3) return __n + 2;
   1bc50:	3e700813          	addi	a6,zero,999
	  if (__value < __b4) return __n + 3;
   1bc54:	00078693          	addi	a3,a5,0
	  __value /= __b4;
   1bc58:	02b75733          	divu	a4,a4,a1
   1bc5c:	0007079b          	addiw	a5,a4,0
	  __n += 4;
   1bc60:	0044041b          	addiw	s0,s0,4
	  if (__value < (unsigned)__base) return __n;
   1bc64:	06f67463          	bgeu	a2,a5,1bccc <std::__cxx11::to_string(int)+0xe4>
	  if (__value < __b2) return __n + 1;
   1bc68:	02f57063          	bgeu	a0,a5,1bc88 <std::__cxx11::to_string(int)+0xa0>
	  if (__value < __b3) return __n + 2;
   1bc6c:	04f87e63          	bgeu	a6,a5,1bcc8 <std::__cxx11::to_string(int)+0xe0>
	  if (__value < __b4) return __n + 3;
   1bc70:	fef6e4e3          	bltu	a3,a5,1bc58 <std::__cxx11::to_string(int)+0x70>
   1bc74:	0034041b          	addiw	s0,s0,3
   1bc78:	0540006f          	jal	zero,1bccc <std::__cxx11::to_string(int)+0xe4>
   1bc7c:	40b004bb          	subw	s1,zero,a1
   1bc80:	f91ff06f          	jal	zero,1bc10 <std::__cxx11::to_string(int)+0x28>
      unsigned __n = 1;
   1bc84:	00100413          	addi	s0,zero,1
	  if (__value < __b2) return __n + 1;
   1bc88:	0014041b          	addiw	s0,s0,1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1bc8c:	01090793          	addi	a5,s2,16
	: allocator_type(__a), _M_p(__dat) { }
   1bc90:	00f93023          	sd	a5,0(s2)
    const auto __len = __detail::__to_chars_len(__uval);
    string __str(__neg + __len, '-');
   1bc94:	008985bb          	addw	a1,s3,s0
      { _M_construct(__n, __c); }
   1bc98:	02d00613          	addi	a2,zero,45
   1bc9c:	02059593          	slli	a1,a1,0x20
   1bca0:	0205d593          	srli	a1,a1,0x20
   1bca4:	00090513          	addi	a0,s2,0
   1bca8:	b59fa0ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
	return _M_data()[__pos];
   1bcac:	00093583          	ld	a1,0(s2)
   1bcb0:	013585b3          	add	a1,a1,s3
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
      while (__val >= 100)
   1bcb4:	06300793          	addi	a5,zero,99
   1bcb8:	0a97fa63          	bgeu	a5,s1,1bd6c <std::__cxx11::to_string(int)+0x184>
      unsigned __pos = __len - 1;
   1bcbc:	fff4071b          	addiw	a4,s0,-1
   1bcc0:	0380006f          	jal	zero,1bcf8 <std::__cxx11::to_string(int)+0x110>
      unsigned __n = 1;
   1bcc4:	00100413          	addi	s0,zero,1
	  if (__value < __b3) return __n + 2;
   1bcc8:	0024041b          	addiw	s0,s0,2
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1bccc:	01090793          	addi	a5,s2,16
	: allocator_type(__a), _M_p(__dat) { }
   1bcd0:	00f93023          	sd	a5,0(s2)
    string __str(__neg + __len, '-');
   1bcd4:	008985bb          	addw	a1,s3,s0
      { _M_construct(__n, __c); }
   1bcd8:	02d00613          	addi	a2,zero,45
   1bcdc:	02059593          	slli	a1,a1,0x20
   1bce0:	0205d593          	srli	a1,a1,0x20
   1bce4:	00090513          	addi	a0,s2,0
   1bce8:	b19fa0ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
	return _M_data()[__pos];
   1bcec:	00093583          	ld	a1,0(s2)
   1bcf0:	013585b3          	add	a1,a1,s3
      unsigned __pos = __len - 1;
   1bcf4:	fff4071b          	addiw	a4,s0,-1
	{
	  auto const __num = (__val % 100) * 2;
   1bcf8:	06400813          	addi	a6,zero,100
	  __val /= 100;
	  __first[__pos] = __digits[__num + 1];
   1bcfc:	00027517          	auipc	a0,0x27
   1bd00:	67c53503          	ld	a0,1660(a0) # 43378 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb9a0>
      while (__val >= 100)
   1bd04:	00002337          	lui	t1,0x2
   1bd08:	70f30313          	addi	t1,t1,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   1bd0c:	0304f7bb          	remuw	a5,s1,a6
   1bd10:	0017979b          	slliw	a5,a5,0x1
   1bd14:	0004889b          	addiw	a7,s1,0
	  __val /= 100;
   1bd18:	0304d4bb          	divuw	s1,s1,a6
	  __first[__pos] = __digits[__num + 1];
   1bd1c:	02071613          	slli	a2,a4,0x20
   1bd20:	02065613          	srli	a2,a2,0x20
   1bd24:	00c58633          	add	a2,a1,a2
   1bd28:	0017869b          	addiw	a3,a5,1
   1bd2c:	02069693          	slli	a3,a3,0x20
   1bd30:	0206d693          	srli	a3,a3,0x20
   1bd34:	00d506b3          	add	a3,a0,a3
   1bd38:	0006c683          	lbu	a3,0(a3)
   1bd3c:	00d60023          	sb	a3,0(a2)
	  __first[__pos - 1] = __digits[__num];
   1bd40:	fff7069b          	addiw	a3,a4,-1
   1bd44:	02069693          	slli	a3,a3,0x20
   1bd48:	0206d693          	srli	a3,a3,0x20
   1bd4c:	00d586b3          	add	a3,a1,a3
   1bd50:	02079793          	slli	a5,a5,0x20
   1bd54:	0207d793          	srli	a5,a5,0x20
   1bd58:	00f507b3          	add	a5,a0,a5
   1bd5c:	0007c783          	lbu	a5,0(a5)
   1bd60:	00f68023          	sb	a5,0(a3)
	  __pos -= 2;
   1bd64:	ffe7071b          	addiw	a4,a4,-2
      while (__val >= 100)
   1bd68:	fb1362e3          	bltu	t1,a7,1bd0c <std::__cxx11::to_string(int)+0x124>
	}
      if (__val >= 10)
   1bd6c:	00900793          	addi	a5,zero,9
   1bd70:	0697f663          	bgeu	a5,s1,1bddc <std::__cxx11::to_string(int)+0x1f4>
	{
	  auto const __num = __val * 2;
   1bd74:	0014949b          	slliw	s1,s1,0x1
	  __first[1] = __digits[__num + 1];
   1bd78:	00027717          	auipc	a4,0x27
   1bd7c:	60073703          	ld	a4,1536(a4) # 43378 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb9a0>
   1bd80:	0014879b          	addiw	a5,s1,1
   1bd84:	02079793          	slli	a5,a5,0x20
   1bd88:	0207d793          	srli	a5,a5,0x20
   1bd8c:	00f707b3          	add	a5,a4,a5
   1bd90:	0007c783          	lbu	a5,0(a5)
   1bd94:	00f580a3          	sb	a5,1(a1)
	  __first[0] = __digits[__num];
   1bd98:	02049493          	slli	s1,s1,0x20
   1bd9c:	0204d493          	srli	s1,s1,0x20
   1bda0:	00970733          	add	a4,a4,s1
   1bda4:	00074483          	lbu	s1,0(a4)
   1bda8:	00958023          	sb	s1,0(a1)
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
    return __str;
  }
   1bdac:	00090513          	addi	a0,s2,0
   1bdb0:	02813083          	ld	ra,40(sp)
   1bdb4:	02013403          	ld	s0,32(sp)
   1bdb8:	01813483          	ld	s1,24(sp)
   1bdbc:	01013903          	ld	s2,16(sp)
   1bdc0:	00813983          	ld	s3,8(sp)
   1bdc4:	03010113          	addi	sp,sp,48
   1bdc8:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   1bdcc:	00100413          	addi	s0,zero,1
   1bdd0:	ea5ff06f          	jal	zero,1bc74 <std::__cxx11::to_string(int)+0x8c>
   1bdd4:	00100413          	addi	s0,zero,1
   1bdd8:	eb5ff06f          	jal	zero,1bc8c <std::__cxx11::to_string(int)+0xa4>
	}
      else
	__first[0] = '0' + __val;
   1bddc:	0304849b          	addiw	s1,s1,48
   1bde0:	0ff4f493          	andi	s1,s1,255
   1bde4:	fc5ff06f          	jal	zero,1bda8 <std::__cxx11::to_string(int)+0x1c0>

000000000001bde8 <dwarf::type_unit::~type_unit()>:
class type_unit : public unit {
   1bde8:	ff010113          	addi	sp,sp,-16
   1bdec:	00113423          	sd	ra,8(sp)
   1bdf0:	00027797          	auipc	a5,0x27
   1bdf4:	5807b783          	ld	a5,1408(a5) # 43370 <vtable for dwarf::type_unit@@Base+0xa00>
   1bdf8:	01078793          	addi	a5,a5,16
   1bdfc:	00f53023          	sd	a5,0(a0)
   1be00:	c1cfc0ef          	jal	ra,1821c <dwarf::unit::~unit()>
   1be04:	00813083          	ld	ra,8(sp)
   1be08:	01010113          	addi	sp,sp,16
   1be0c:	00008067          	jalr	zero,0(ra)

000000000001be10 <dwarf::type_unit::~type_unit()>:
   1be10:	ff010113          	addi	sp,sp,-16
   1be14:	00113423          	sd	ra,8(sp)
   1be18:	00813023          	sd	s0,0(sp)
   1be1c:	00050413          	addi	s0,a0,0
   1be20:	00027797          	auipc	a5,0x27
   1be24:	5507b783          	ld	a5,1360(a5) # 43370 <vtable for dwarf::type_unit@@Base+0xa00>
   1be28:	01078793          	addi	a5,a5,16
   1be2c:	00f53023          	sd	a5,0(a0)
   1be30:	becfc0ef          	jal	ra,1821c <dwarf::unit::~unit()>
   1be34:	00040513          	addi	a0,s0,0
   1be38:	969fa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1be3c:	00813083          	ld	ra,8(sp)
   1be40:	00013403          	ld	s0,0(sp)
   1be44:	01010113          	addi	sp,sp,16
   1be48:	00008067          	jalr	zero,0(ra)

000000000001be4c <dwarf::compilation_unit::~compilation_unit()>:
class compilation_unit : public unit {
   1be4c:	ff010113          	addi	sp,sp,-16
   1be50:	00113423          	sd	ra,8(sp)
   1be54:	00027797          	auipc	a5,0x27
   1be58:	47c7b783          	ld	a5,1148(a5) # 432d0 <vtable for dwarf::compilation_unit@@Base+0x980>
   1be5c:	01078793          	addi	a5,a5,16
   1be60:	00f53023          	sd	a5,0(a0)
   1be64:	bb8fc0ef          	jal	ra,1821c <dwarf::unit::~unit()>
   1be68:	00813083          	ld	ra,8(sp)
   1be6c:	01010113          	addi	sp,sp,16
   1be70:	00008067          	jalr	zero,0(ra)

000000000001be74 <dwarf::compilation_unit::~compilation_unit()>:
   1be74:	ff010113          	addi	sp,sp,-16
   1be78:	00113423          	sd	ra,8(sp)
   1be7c:	00813023          	sd	s0,0(sp)
   1be80:	00050413          	addi	s0,a0,0
   1be84:	00027797          	auipc	a5,0x27
   1be88:	44c7b783          	ld	a5,1100(a5) # 432d0 <vtable for dwarf::compilation_unit@@Base+0x980>
   1be8c:	01078793          	addi	a5,a5,16
   1be90:	00f53023          	sd	a5,0(a0)
   1be94:	b88fc0ef          	jal	ra,1821c <dwarf::unit::~unit()>
   1be98:	00040513          	addi	a0,s0,0
   1be9c:	905fa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1bea0:	00813083          	ld	ra,8(sp)
   1bea4:	00013403          	ld	s0,0(sp)
   1bea8:	01010113          	addi	sp,sp,16
   1beac:	00008067          	jalr	zero,0(ra)

000000000001beb0 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)>:
    vector<_Tp, _Alloc>::
   1beb0:	fd010113          	addi	sp,sp,-48
   1beb4:	02113423          	sd	ra,40(sp)
   1beb8:	02813023          	sd	s0,32(sp)
   1bebc:	00913c23          	sd	s1,24(sp)
   1bec0:	01213823          	sd	s2,16(sp)
   1bec4:	01313423          	sd	s3,8(sp)
   1bec8:	01413023          	sd	s4,0(sp)
   1becc:	00050493          	addi	s1,a0,0
      if (std::__addressof(__x) != this)
   1bed0:	0aa58a63          	beq	a1,a0,1bf84 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xd4>
   1bed4:	00058913          	addi	s2,a1,0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1bed8:	0085ba03          	ld	s4,8(a1)
   1bedc:	0005b403          	ld	s0,0(a1)
   1bee0:	408a09b3          	sub	s3,s4,s0
			 - this->_M_impl._M_start); }
   1bee4:	00053503          	ld	a0,0(a0)
   1bee8:	0104b783          	ld	a5,16(s1)
   1beec:	40a787b3          	sub	a5,a5,a0
	  if (__xlen > capacity())
   1bef0:	0337e263          	bltu	a5,s3,1bf14 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x64>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1bef4:	0084b603          	ld	a2,8(s1)
   1bef8:	40a60633          	sub	a2,a2,a0
	  else if (size() >= __xlen)
   1befc:	0d366063          	bltu	a2,s3,1bfbc <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x10c>
					       is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::value, "type must be assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   1bf00:	068a0c63          	beq	s4,s0,1bf78 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xc8>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   1bf04:	00098613          	addi	a2,s3,0
   1bf08:	00040593          	addi	a1,s0,0
   1bf0c:	b15fa0ef          	jal	ra,16a20 <memmove@plt>
   1bf10:	0680006f          	jal	zero,1bf78 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xc8>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1bf14:	0a098063          	beq	s3,zero,1bfb4 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x104>
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1bf18:	ff100793          	addi	a5,zero,-15
   1bf1c:	0017d793          	srli	a5,a5,0x1
   1bf20:	0937e463          	bltu	a5,s3,1bfa8 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xf8>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1bf24:	00098513          	addi	a0,s3,0
   1bf28:	889fa0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1bf2c:	00050913          	addi	s2,a0,0
	  for (; __first != __last; ++__first, (void)++__cur)
   1bf30:	028a0863          	beq	s4,s0,1bf60 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xb0>
   1bf34:	00040593          	addi	a1,s0,0
      _ForwardIterator __cur = __result;
   1bf38:	00090793          	addi	a5,s2,0
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1bf3c:	0005a703          	lw	a4,0(a1)
   1bf40:	00e7a023          	sw	a4,0(a5)
   1bf44:	0045a703          	lw	a4,4(a1)
   1bf48:	00e7a223          	sw	a4,4(a5)
   1bf4c:	0085a703          	lw	a4,8(a1)
   1bf50:	00e7a423          	sw	a4,8(a5)
	  for (; __first != __last; ++__first, (void)++__cur)
   1bf54:	00c78793          	addi	a5,a5,12
   1bf58:	00c58593          	addi	a1,a1,12
   1bf5c:	feba10e3          	bne	s4,a1,1bf3c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x8c>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1bf60:	0004b503          	ld	a0,0(s1)
	if (__p)
   1bf64:	00050463          	beq	a0,zero,1bf6c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xbc>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1bf68:	839fa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	      this->_M_impl._M_start = __tmp;
   1bf6c:	0124b023          	sd	s2,0(s1)
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   1bf70:	01390933          	add	s2,s2,s3
   1bf74:	0124b823          	sd	s2,16(s1)
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   1bf78:	0004b783          	ld	a5,0(s1)
   1bf7c:	013787b3          	add	a5,a5,s3
   1bf80:	00f4b423          	sd	a5,8(s1)
    }
   1bf84:	00048513          	addi	a0,s1,0
   1bf88:	02813083          	ld	ra,40(sp)
   1bf8c:	02013403          	ld	s0,32(sp)
   1bf90:	01813483          	ld	s1,24(sp)
   1bf94:	01013903          	ld	s2,16(sp)
   1bf98:	00813983          	ld	s3,8(sp)
   1bf9c:	00013a03          	ld	s4,0(sp)
   1bfa0:	03010113          	addi	sp,sp,48
   1bfa4:	00008067          	jalr	zero,0(ra)
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1bfa8:	0009d463          	bge	s3,zero,1bfb0 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x100>
	      std::__throw_bad_array_new_length();
   1bfac:	fd4fa0ef          	jal	ra,16780 <std::__throw_bad_array_new_length()@plt>
	    std::__throw_bad_alloc();
   1bfb0:	ea0fa0ef          	jal	ra,16650 <std::__throw_bad_alloc()@plt>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1bfb4:	00000913          	addi	s2,zero,0
   1bfb8:	f79ff06f          	jal	zero,1bf30 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x80>
	  if (_Num)
   1bfbc:	00060663          	beq	a2,zero,1bfc8 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x118>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   1bfc0:	00040593          	addi	a1,s0,0
   1bfc4:	a5dfa0ef          	jal	ra,16a20 <memmove@plt>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1bfc8:	0084b703          	ld	a4,8(s1)
   1bfcc:	0004b683          	ld	a3,0(s1)
   1bfd0:	40d706b3          	sub	a3,a4,a3
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   1bfd4:	00093783          	ld	a5,0(s2)
   1bfd8:	00d787b3          	add	a5,a5,a3
					  __x._M_impl._M_finish,
   1bfdc:	00893603          	ld	a2,8(s2)
   1bfe0:	f8c78ce3          	beq	a5,a2,1bf78 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xc8>
   1bfe4:	0007a683          	lw	a3,0(a5)
   1bfe8:	00d72023          	sw	a3,0(a4)
   1bfec:	0047a683          	lw	a3,4(a5)
   1bff0:	00d72223          	sw	a3,4(a4)
   1bff4:	0087a683          	lw	a3,8(a5)
   1bff8:	00d72423          	sw	a3,8(a4)
   1bffc:	00c78793          	addi	a5,a5,12
   1c000:	00c70713          	addi	a4,a4,12
   1c004:	fef610e3          	bne	a2,a5,1bfe4 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x134>
   1c008:	f71ff06f          	jal	zero,1bf78 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xc8>

000000000001c00c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)>:
      while (__x != 0)
   1c00c:	12058063          	beq	a1,zero,1c12c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x120>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1c010:	fc010113          	addi	sp,sp,-64
   1c014:	02113c23          	sd	ra,56(sp)
   1c018:	02813823          	sd	s0,48(sp)
   1c01c:	02913423          	sd	s1,40(sp)
   1c020:	03213023          	sd	s2,32(sp)
   1c024:	01313c23          	sd	s3,24(sp)
   1c028:	01413823          	sd	s4,16(sp)
   1c02c:	01513423          	sd	s5,8(sp)
   1c030:	01613023          	sd	s6,0(sp)
   1c034:	00050a93          	addi	s5,a0,0
   1c038:	00058413          	addi	s0,a1,0
	  _M_erase(_S_right(__x));
   1c03c:	00027b17          	auipc	s6,0x27
   1c040:	38cb3b03          	ld	s6,908(s6) # 433c8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)@@Base+0x273bc>
    return ::__libc_single_threaded;
   1c044:	00027917          	auipc	s2,0x27
   1c048:	45493903          	ld	s2,1108(s2) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1c04c:	00100493          	addi	s1,zero,1
   1c050:	0280006f          	jal	zero,1c078 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x6c>
    if (__is_single_threaded())
   1c054:	00094783          	lbu	a5,0(s2)
   1c058:	04078063          	beq	a5,zero,1c098 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x8c>
    _Atomic_word __result = *__mem;
   1c05c:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   1c060:	fff5079b          	addiw	a5,a0,-1
   1c064:	02f9a823          	sw	a5,48(s3)
   1c068:	04950063          	beq	a0,s1,1c0a8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x9c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1c06c:	000a0513          	addi	a0,s4,0
   1c070:	f30fa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      while (__x != 0)
   1c074:	08040863          	beq	s0,zero,1c104 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0xf8>
	  _M_erase(_S_right(__x));
   1c078:	01843583          	ld	a1,24(s0)
   1c07c:	000a8513          	addi	a0,s5,0
   1c080:	000b00e7          	jalr	ra,0(s6)
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1c084:	00040a13          	addi	s4,s0,0
      { return static_cast<_Link_type>(__x->_M_left); }
   1c088:	01043403          	ld	s0,16(s0)
	if (_M_pi != nullptr)
   1c08c:	030a3983          	ld	s3,48(s4)
   1c090:	fc0992e3          	bne	s3,zero,1c054 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x48>
   1c094:	fd9ff06f          	jal	zero,1c06c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x60>
      return __exchange_and_add(__mem, __val);
   1c098:	fff00593          	addi	a1,zero,-1
   1c09c:	03098513          	addi	a0,s3,48
   1c0a0:	d50fa0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c0a4:	fc5ff06f          	jal	zero,1c068 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x5c>
	_M_dispose();
   1c0a8:	0009b783          	ld	a5,0(s3)
   1c0ac:	0107b783          	ld	a5,16(a5)
   1c0b0:	00098513          	addi	a0,s3,0
   1c0b4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1c0b8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1c0bc:	00027797          	auipc	a5,0x27
   1c0c0:	3dc7b783          	ld	a5,988(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1c0c4:	0007c783          	lbu	a5,0(a5)
   1c0c8:	02078663          	beq	a5,zero,1c0f4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0xe8>
    _Atomic_word __result = *__mem;
   1c0cc:	0349a503          	lw	a0,52(s3)
    *__mem += __val;
   1c0d0:	fff5079b          	addiw	a5,a0,-1
   1c0d4:	02f9aa23          	sw	a5,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1c0d8:	00100793          	addi	a5,zero,1
   1c0dc:	f8f518e3          	bne	a0,a5,1c06c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x60>
	    _M_destroy();
   1c0e0:	0009b783          	ld	a5,0(s3)
   1c0e4:	0187b783          	ld	a5,24(a5)
   1c0e8:	00098513          	addi	a0,s3,0
   1c0ec:	000780e7          	jalr	ra,0(a5)
   1c0f0:	f7dff06f          	jal	zero,1c06c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x60>
      return __exchange_and_add(__mem, __val);
   1c0f4:	fff00593          	addi	a1,zero,-1
   1c0f8:	03498513          	addi	a0,s3,52
   1c0fc:	cf4fa0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c100:	fd9ff06f          	jal	zero,1c0d8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0xcc>
    }
   1c104:	03813083          	ld	ra,56(sp)
   1c108:	03013403          	ld	s0,48(sp)
   1c10c:	02813483          	ld	s1,40(sp)
   1c110:	02013903          	ld	s2,32(sp)
   1c114:	01813983          	ld	s3,24(sp)
   1c118:	01013a03          	ld	s4,16(sp)
   1c11c:	00813a83          	ld	s5,8(sp)
   1c120:	00013b03          	ld	s6,0(sp)
   1c124:	04010113          	addi	sp,sp,64
   1c128:	00008067          	jalr	zero,0(ra)
   1c12c:	00008067          	jalr	zero,0(ra)

000000000001c130 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   1c130:	fd010113          	addi	sp,sp,-48
   1c134:	02113423          	sd	ra,40(sp)
   1c138:	02813023          	sd	s0,32(sp)
   1c13c:	00913c23          	sd	s1,24(sp)
   1c140:	01213823          	sd	s2,16(sp)
   1c144:	01313423          	sd	s3,8(sp)
   1c148:	00050913          	addi	s2,a0,0
      { _M_erase(_M_begin()); }
   1c14c:	0d053583          	ld	a1,208(a0)
   1c150:	0c050513          	addi	a0,a0,192
   1c154:	00027317          	auipc	t1,0x27
   1c158:	27433303          	ld	t1,628(t1) # 433c8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)@@Base+0x273bc>
   1c15c:	000300e7          	jalr	ra,0(t1)
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1c160:	09093403          	ld	s0,144(s2)

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
    {
      while (__n)
   1c164:	02040863          	beq	s0,zero,1c194 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x64>
class type_unit : public unit {
   1c168:	00027997          	auipc	s3,0x27
   1c16c:	2089b983          	ld	s3,520(s3) # 43370 <vtable for dwarf::type_unit@@Base+0xa00>
   1c170:	01098993          	addi	s3,s3,16
      _M_next() const noexcept
   1c174:	00040493          	addi	s1,s0,0
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1c178:	00043403          	ld	s0,0(s0)
   1c17c:	0134b823          	sd	s3,16(s1)
   1c180:	01048513          	addi	a0,s1,16
   1c184:	898fc0ef          	jal	ra,1821c <dwarf::unit::~unit()>
   1c188:	00048513          	addi	a0,s1,0
   1c18c:	e14fa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      while (__n)
   1c190:	fe0412e3          	bne	s0,zero,1c174 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x44>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
      __builtin_memset(_M_buckets, 0,
   1c194:	08893603          	ld	a2,136(s2)
   1c198:	00361613          	slli	a2,a2,0x3
   1c19c:	00000593          	addi	a1,zero,0
   1c1a0:	08093503          	ld	a0,128(s2)
   1c1a4:	eccfa0ef          	jal	ra,16870 <memset@plt>
		       _M_bucket_count * sizeof(__node_base_ptr));
      _M_element_count = 0;
   1c1a8:	08093c23          	sd	zero,152(s2)
      _M_before_begin._M_nxt = nullptr;
   1c1ac:	08093823          	sd	zero,144(s2)
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   1c1b0:	08093503          	ld	a0,128(s2)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   1c1b4:	0b090793          	addi	a5,s2,176
	if (_M_uses_single_bucket(__bkts))
   1c1b8:	00f50463          	beq	a0,a5,1c1c0 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x90>
   1c1bc:	de4fa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1c1c0:	06893403          	ld	s0,104(s2)
   1c1c4:	07093483          	ld	s1,112(s2)
	  for (; __first != __last; ++__first)
   1c1c8:	00940e63          	beq	s0,s1,1c1e4 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
      __pointer->~_Tp();
   1c1cc:	00043783          	ld	a5,0(s0)
   1c1d0:	0007b783          	ld	a5,0(a5)
   1c1d4:	00040513          	addi	a0,s0,0
   1c1d8:	000780e7          	jalr	ra,0(a5)
	  for (; __first != __last; ++__first)
   1c1dc:	01840413          	addi	s0,s0,24
   1c1e0:	fe8496e3          	bne	s1,s0,1c1cc <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x9c>
	_M_deallocate(_M_impl._M_start,
   1c1e4:	06893503          	ld	a0,104(s2)
	if (__p)
   1c1e8:	00050463          	beq	a0,zero,1c1f0 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xc0>
   1c1ec:	db4fa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   1c1f0:	06093403          	ld	s0,96(s2)
   1c1f4:	02040463          	beq	s0,zero,1c21c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xec>
    if (__is_single_threaded())
   1c1f8:	00027797          	auipc	a5,0x27
   1c1fc:	2a07b783          	ld	a5,672(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1c200:	0007c783          	lbu	a5,0(a5)
   1c204:	08078663          	beq	a5,zero,1c290 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x160>
    _Atomic_word __result = *__mem;
   1c208:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1c20c:	fff5079b          	addiw	a5,a0,-1
   1c210:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1c214:	00100793          	addi	a5,zero,1
   1c218:	08f50463          	beq	a0,a5,1c2a0 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x170>
	if (_M_pi != nullptr)
   1c21c:	05093403          	ld	s0,80(s2)
   1c220:	02040463          	beq	s0,zero,1c248 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x118>
    if (__is_single_threaded())
   1c224:	00027797          	auipc	a5,0x27
   1c228:	2747b783          	ld	a5,628(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1c22c:	0007c783          	lbu	a5,0(a5)
   1c230:	0c078663          	beq	a5,zero,1c2fc <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1cc>
    _Atomic_word __result = *__mem;
   1c234:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1c238:	fff5079b          	addiw	a5,a0,-1
   1c23c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1c240:	00100793          	addi	a5,zero,1
   1c244:	0cf50463          	beq	a0,a5,1c30c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1dc>
	if (_M_pi != nullptr)
   1c248:	04093403          	ld	s0,64(s2)
   1c24c:	02040463          	beq	s0,zero,1c274 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x144>
    if (__is_single_threaded())
   1c250:	00027797          	auipc	a5,0x27
   1c254:	2487b783          	ld	a5,584(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1c258:	0007c783          	lbu	a5,0(a5)
   1c25c:	10078663          	beq	a5,zero,1c368 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x238>
    _Atomic_word __result = *__mem;
   1c260:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1c264:	fff5079b          	addiw	a5,a0,-1
   1c268:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1c26c:	00100793          	addi	a5,zero,1
   1c270:	10f50463          	beq	a0,a5,1c378 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x248>
      }
   1c274:	02813083          	ld	ra,40(sp)
   1c278:	02013403          	ld	s0,32(sp)
   1c27c:	01813483          	ld	s1,24(sp)
   1c280:	01013903          	ld	s2,16(sp)
   1c284:	00813983          	ld	s3,8(sp)
   1c288:	03010113          	addi	sp,sp,48
   1c28c:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   1c290:	fff00593          	addi	a1,zero,-1
   1c294:	03040513          	addi	a0,s0,48
   1c298:	b58fa0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c29c:	f79ff06f          	jal	zero,1c214 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xe4>
	_M_dispose();
   1c2a0:	00043783          	ld	a5,0(s0)
   1c2a4:	0107b783          	ld	a5,16(a5)
   1c2a8:	00040513          	addi	a0,s0,0
   1c2ac:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1c2b0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1c2b4:	00027797          	auipc	a5,0x27
   1c2b8:	1e47b783          	ld	a5,484(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1c2bc:	0007c783          	lbu	a5,0(a5)
   1c2c0:	02078663          	beq	a5,zero,1c2ec <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1bc>
    _Atomic_word __result = *__mem;
   1c2c4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1c2c8:	fff5079b          	addiw	a5,a0,-1
   1c2cc:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1c2d0:	00100793          	addi	a5,zero,1
   1c2d4:	f4f514e3          	bne	a0,a5,1c21c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xec>
	    _M_destroy();
   1c2d8:	00043783          	ld	a5,0(s0)
   1c2dc:	0187b783          	ld	a5,24(a5)
   1c2e0:	00040513          	addi	a0,s0,0
   1c2e4:	000780e7          	jalr	ra,0(a5)
   1c2e8:	f35ff06f          	jal	zero,1c21c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xec>
      return __exchange_and_add(__mem, __val);
   1c2ec:	fff00593          	addi	a1,zero,-1
   1c2f0:	03440513          	addi	a0,s0,52
   1c2f4:	afcfa0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c2f8:	fd9ff06f          	jal	zero,1c2d0 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1a0>
   1c2fc:	fff00593          	addi	a1,zero,-1
   1c300:	03040513          	addi	a0,s0,48
   1c304:	aecfa0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c308:	f39ff06f          	jal	zero,1c240 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x110>
	_M_dispose();
   1c30c:	00043783          	ld	a5,0(s0)
   1c310:	0107b783          	ld	a5,16(a5)
   1c314:	00040513          	addi	a0,s0,0
   1c318:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1c31c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1c320:	00027797          	auipc	a5,0x27
   1c324:	1787b783          	ld	a5,376(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1c328:	0007c783          	lbu	a5,0(a5)
   1c32c:	02078663          	beq	a5,zero,1c358 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x228>
    _Atomic_word __result = *__mem;
   1c330:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1c334:	fff5079b          	addiw	a5,a0,-1
   1c338:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1c33c:	00100793          	addi	a5,zero,1
   1c340:	f0f514e3          	bne	a0,a5,1c248 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x118>
	    _M_destroy();
   1c344:	00043783          	ld	a5,0(s0)
   1c348:	0187b783          	ld	a5,24(a5)
   1c34c:	00040513          	addi	a0,s0,0
   1c350:	000780e7          	jalr	ra,0(a5)
   1c354:	ef5ff06f          	jal	zero,1c248 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x118>
      return __exchange_and_add(__mem, __val);
   1c358:	fff00593          	addi	a1,zero,-1
   1c35c:	03440513          	addi	a0,s0,52
   1c360:	a90fa0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c364:	fd9ff06f          	jal	zero,1c33c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x20c>
   1c368:	fff00593          	addi	a1,zero,-1
   1c36c:	03040513          	addi	a0,s0,48
   1c370:	a80fa0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c374:	ef9ff06f          	jal	zero,1c26c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x13c>
	_M_dispose();
   1c378:	00043783          	ld	a5,0(s0)
   1c37c:	0107b783          	ld	a5,16(a5)
   1c380:	00040513          	addi	a0,s0,0
   1c384:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1c388:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1c38c:	00027797          	auipc	a5,0x27
   1c390:	10c7b783          	ld	a5,268(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1c394:	0007c783          	lbu	a5,0(a5)
   1c398:	02078663          	beq	a5,zero,1c3c4 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x294>
    _Atomic_word __result = *__mem;
   1c39c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1c3a0:	fff5079b          	addiw	a5,a0,-1
   1c3a4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1c3a8:	00100793          	addi	a5,zero,1
   1c3ac:	ecf514e3          	bne	a0,a5,1c274 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x144>
	    _M_destroy();
   1c3b0:	00043783          	ld	a5,0(s0)
   1c3b4:	0187b783          	ld	a5,24(a5)
   1c3b8:	00040513          	addi	a0,s0,0
   1c3bc:	000780e7          	jalr	ra,0(a5)
      }
   1c3c0:	eb5ff06f          	jal	zero,1c274 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x144>
      return __exchange_and_add(__mem, __val);
   1c3c4:	fff00593          	addi	a1,zero,-1
   1c3c8:	03440513          	addi	a0,s0,52
   1c3cc:	a24fa0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c3d0:	fd9ff06f          	jal	zero,1c3a8 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x278>

000000000001c3d4 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>:
      basic_string<_CharT, _Traits, _Alloc>::
   1c3d4:	fd010113          	addi	sp,sp,-48
   1c3d8:	02113423          	sd	ra,40(sp)
   1c3dc:	02813023          	sd	s0,32(sp)
   1c3e0:	00913c23          	sd	s1,24(sp)
   1c3e4:	01213823          	sd	s2,16(sp)
   1c3e8:	00050413          	addi	s0,a0,0
   1c3ec:	00058913          	addi	s2,a1,0
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   1c3f0:	40b604b3          	sub	s1,a2,a1
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   1c3f4:	00913423          	sd	s1,8(sp)
	if (__dnew > size_type(_S_local_capacity))
   1c3f8:	00f00793          	addi	a5,zero,15
   1c3fc:	0497e263          	bltu	a5,s1,1c440 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x6c>
      { return _M_dataplus._M_p; }
   1c400:	00053503          	ld	a0,0(a0)
	if (__n == 1)
   1c404:	00100793          	addi	a5,zero,1
   1c408:	06f49063          	bne	s1,a5,1c468 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x94>
	__c1 = __c2;
   1c40c:	0005c783          	lbu	a5,0(a1)
   1c410:	00f50023          	sb	a5,0(a0)
	_M_set_length(__dnew);
   1c414:	00813703          	ld	a4,8(sp)
      { _M_string_length = __length; }
   1c418:	00e43423          	sd	a4,8(s0)
   1c41c:	00043783          	ld	a5,0(s0)
   1c420:	00e787b3          	add	a5,a5,a4
   1c424:	00078023          	sb	zero,0(a5)
      }
   1c428:	02813083          	ld	ra,40(sp)
   1c42c:	02013403          	ld	s0,32(sp)
   1c430:	01813483          	ld	s1,24(sp)
   1c434:	01013903          	ld	s2,16(sp)
   1c438:	03010113          	addi	sp,sp,48
   1c43c:	00008067          	jalr	zero,0(ra)
	    _M_data(_M_create(__dnew, size_type(0)));
   1c440:	00000613          	addi	a2,zero,0
   1c444:	00810593          	addi	a1,sp,8
   1c448:	d68fa0ef          	jal	ra,169b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
   1c44c:	00a43023          	sd	a0,0(s0)
      { _M_allocated_capacity = __capacity; }
   1c450:	00813783          	ld	a5,8(sp)
   1c454:	00f43823          	sd	a5,16(s0)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1c458:	00048613          	addi	a2,s1,0
   1c45c:	00090593          	addi	a1,s2,0
   1c460:	be0fa0ef          	jal	ra,16840 <memcpy@plt>
   1c464:	fb1ff06f          	jal	zero,1c414 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x40>
	if (__n == 0)
   1c468:	fa0486e3          	beq	s1,zero,1c414 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x40>
   1c46c:	fedff06f          	jal	zero,1c458 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x84>

000000000001c470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)>:
#define _ELFPP_TO_HEX_HH_

#include <string>
#include <type_traits>

template <typename T> std::string to_hex(T v) {
   1c470:	fc010113          	addi	sp,sp,-64
   1c474:	02113c23          	sd	ra,56(sp)
   1c478:	02813823          	sd	s0,48(sp)
   1c47c:	02913423          	sd	s1,40(sp)
   1c480:	00050493          	addi	s1,a0,0
  static_assert(std::is_integral<T>::value,
                "to_hex applied to non-integral type");
  if (v == 0)
   1c484:	00058c63          	beq	a1,zero,1c49c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x2c>
    return std::string("0");
  char buf[sizeof(T) * 2 + 1];
  char *pos = &buf[sizeof(buf) - 1];
  *pos-- = '\0';
   1c488:	00010c23          	sb	zero,24(sp)
   1c48c:	01710413          	addi	s0,sp,23
  while (v && pos >= buf) {
    int digit = v & 0xf;
    if (digit < 10)
   1c490:	00900693          	addi	a3,zero,9
  while (v && pos >= buf) {
   1c494:	00710613          	addi	a2,sp,7
   1c498:	0480006f          	jal	zero,1c4e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x70>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1c49c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   1c4a0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   1c4a4:	00000693          	addi	a3,zero,0
   1c4a8:	0001d617          	auipc	a2,0x1d
   1c4ac:	22160613          	addi	a2,a2,545 # 396c9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   1c4b0:	0001d597          	auipc	a1,0x1d
   1c4b4:	21858593          	addi	a1,a1,536 # 396c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe8>
   1c4b8:	00027317          	auipc	t1,0x27
   1c4bc:	e6833303          	ld	t1,-408(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   1c4c0:	000300e7          	jalr	ra,0(t1)
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1c4c4:	05c0006f          	jal	zero,1c520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0xb0>
   1c4c8:	00e40023          	sb	a4,0(s0)
      *pos = '0' + digit;
    else
      *pos = 'a' + (digit - 10);
    pos--;
   1c4cc:	fff40793          	addi	a5,s0,-1
    v >>= 4;
   1c4d0:	0045d593          	srli	a1,a1,0x4
  while (v && pos >= buf) {
   1c4d4:	02058063          	beq	a1,zero,1c4f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x84>
   1c4d8:	00c78e63          	beq	a5,a2,1c4f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x84>
    pos--;
   1c4dc:	00078413          	addi	s0,a5,0
    int digit = v & 0xf;
   1c4e0:	00f5f793          	andi	a5,a1,15
      *pos = 'a' + (digit - 10);
   1c4e4:	05778713          	addi	a4,a5,87
    if (digit < 10)
   1c4e8:	fef6c0e3          	blt	a3,a5,1c4c8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x58>
      *pos = '0' + digit;
   1c4ec:	03078713          	addi	a4,a5,48
   1c4f0:	fd9ff06f          	jal	zero,1c4c8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x58>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1c4f4:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   1c4f8:	00f4b023          	sd	a5,0(s1)
	return __builtin_strlen(__s);
   1c4fc:	00040513          	addi	a0,s0,0
   1c500:	980fa0ef          	jal	ra,16680 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   1c504:	00000693          	addi	a3,zero,0
   1c508:	00a40633          	add	a2,s0,a0
   1c50c:	00040593          	addi	a1,s0,0
   1c510:	00048513          	addi	a0,s1,0
   1c514:	00027317          	auipc	t1,0x27
   1c518:	e0c33303          	ld	t1,-500(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   1c51c:	000300e7          	jalr	ra,0(t1)
  }
  return std::string(pos + 1);
}
   1c520:	00048513          	addi	a0,s1,0
   1c524:	03813083          	ld	ra,56(sp)
   1c528:	03013403          	ld	s0,48(sp)
   1c52c:	02813483          	ld	s1,40(sp)
   1c530:	04010113          	addi	sp,sp,64
   1c534:	00008067          	jalr	zero,0(ra)

000000000001c538 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1c538:	fe010113          	addi	sp,sp,-32
   1c53c:	00113c23          	sd	ra,24(sp)
   1c540:	00813823          	sd	s0,16(sp)
   1c544:	00913423          	sd	s1,8(sp)
   1c548:	01213023          	sd	s2,0(sp)
   1c54c:	00050913          	addi	s2,a0,0
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1c550:	01053403          	ld	s0,16(a0)
   1c554:	04041263          	bne	s0,zero,1c598 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x60>
      __builtin_memset(_M_buckets, 0,
   1c558:	00893603          	ld	a2,8(s2)
   1c55c:	00361613          	slli	a2,a2,0x3
   1c560:	00000593          	addi	a1,zero,0
   1c564:	00093503          	ld	a0,0(s2)
   1c568:	b08fa0ef          	jal	ra,16870 <memset@plt>
      _M_element_count = 0;
   1c56c:	00093c23          	sd	zero,24(s2)
      _M_before_begin._M_nxt = nullptr;
   1c570:	00093823          	sd	zero,16(s2)
    }
   1c574:	01813083          	ld	ra,24(sp)
   1c578:	01013403          	ld	s0,16(sp)
   1c57c:	00813483          	ld	s1,8(sp)
   1c580:	00013903          	ld	s2,0(sp)
   1c584:	02010113          	addi	sp,sp,32
   1c588:	00008067          	jalr	zero,0(ra)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1c58c:	00048513          	addi	a0,s1,0
   1c590:	a10fa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1c594:	fc0402e3          	beq	s0,zero,1c558 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x20>
      _M_next() const noexcept
   1c598:	00040493          	addi	s1,s0,0
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1c59c:	00043403          	ld	s0,0(s0)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1c5a0:	0204b503          	ld	a0,32(s1)
	if (__p)
   1c5a4:	fe0504e3          	beq	a0,zero,1c58c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x54>
   1c5a8:	9f8fa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1c5ac:	fe1ff06f          	jal	zero,1c58c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x54>

000000000001c5b0 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   1c5b0:	fd010113          	addi	sp,sp,-48
   1c5b4:	02113423          	sd	ra,40(sp)
   1c5b8:	02813023          	sd	s0,32(sp)
   1c5bc:	00913c23          	sd	s1,24(sp)
   1c5c0:	01213823          	sd	s2,16(sp)
   1c5c4:	01313423          	sd	s3,8(sp)
   1c5c8:	00050413          	addi	s0,a0,0
   1c5cc:	03850993          	addi	s3,a0,56
      clear();
   1c5d0:	19050513          	addi	a0,a0,400
   1c5d4:	00027317          	auipc	t1,0x27
   1c5d8:	d1c33303          	ld	t1,-740(t1) # 432f0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()@@Base+0x26db8>
   1c5dc:	000300e7          	jalr	ra,0(t1)
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   1c5e0:	19043503          	ld	a0,400(s0)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   1c5e4:	1c040793          	addi	a5,s0,448
	if (_M_uses_single_bucket(__bkts))
   1c5e8:	00f50463          	beq	a0,a5,1c5f0 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x40>
   1c5ec:	9b4fa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1c5f0:	17843483          	ld	s1,376(s0)
   1c5f4:	18043903          	ld	s2,384(s0)
   1c5f8:	0f249a63          	bne	s1,s2,1c6ec <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x13c>
	_M_deallocate(_M_impl._M_start,
   1c5fc:	17843503          	ld	a0,376(s0)
	if (__p)
   1c600:	00050463          	beq	a0,zero,1c608 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x58>
   1c604:	99cfa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   1c608:	16843483          	ld	s1,360(s0)
   1c60c:	02048463          	beq	s1,zero,1c634 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x84>
    if (__is_single_threaded())
   1c610:	00027797          	auipc	a5,0x27
   1c614:	e887b783          	ld	a5,-376(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1c618:	0007c783          	lbu	a5,0(a5)
   1c61c:	0e078063          	beq	a5,zero,1c6fc <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x14c>
    _Atomic_word __result = *__mem;
   1c620:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1c624:	fff5079b          	addiw	a5,a0,-1
   1c628:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1c62c:	00100793          	addi	a5,zero,1
   1c630:	0cf50e63          	beq	a0,a5,1c70c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x15c>
class die {
   1c634:	11040693          	addi	a3,s0,272
    for (T *p = base; p < end; ++p)
   1c638:	14043503          	ld	a0,320(s0)
   1c63c:	14843783          	ld	a5,328(s0)
   1c640:	00f57a63          	bgeu	a0,a5,1c654 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa4>
   1c644:	00050793          	addi	a5,a0,0
   1c648:	00878793          	addi	a5,a5,8
   1c64c:	14843703          	ld	a4,328(s0)
   1c650:	fee7ece3          	bltu	a5,a4,1c648 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x98>
    end = base;
   1c654:	14a43423          	sd	a0,328(s0)
    if ((char *)base != buf)
   1c658:	00a68663          	beq	a3,a0,1c664 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
      delete[] (char *)base;
   1c65c:	00050463          	beq	a0,zero,1c664 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
   1c660:	9f0fa0ef          	jal	ra,16850 <operator delete[](void*)@plt>
   1c664:	0a040693          	addi	a3,s0,160
    for (T *p = base; p < end; ++p)
   1c668:	0d043503          	ld	a0,208(s0)
   1c66c:	0d843783          	ld	a5,216(s0)
   1c670:	00f57a63          	bgeu	a0,a5,1c684 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd4>
   1c674:	00050793          	addi	a5,a0,0
   1c678:	00878793          	addi	a5,a5,8
   1c67c:	0d843703          	ld	a4,216(s0)
   1c680:	fee7ece3          	bltu	a5,a4,1c678 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xc8>
    end = base;
   1c684:	0ca43c23          	sd	a0,216(s0)
    if ((char *)base != buf)
   1c688:	00a68663          	beq	a3,a0,1c694 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xe4>
      delete[] (char *)base;
   1c68c:	00050463          	beq	a0,zero,1c694 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xe4>
   1c690:	9c0fa0ef          	jal	ra,16850 <operator delete[](void*)@plt>
	if (_M_pi != nullptr)
   1c694:	05843403          	ld	s0,88(s0)
   1c698:	02040463          	beq	s0,zero,1c6c0 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x110>
    if (__is_single_threaded())
   1c69c:	00027797          	auipc	a5,0x27
   1c6a0:	dfc7b783          	ld	a5,-516(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1c6a4:	0007c783          	lbu	a5,0(a5)
   1c6a8:	0c078063          	beq	a5,zero,1c768 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1b8>
    _Atomic_word __result = *__mem;
   1c6ac:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1c6b0:	fff5079b          	addiw	a5,a0,-1
   1c6b4:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1c6b8:	00100793          	addi	a5,zero,1
   1c6bc:	0af50e63          	beq	a0,a5,1c778 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1c8>
struct unit::impl {
   1c6c0:	00098513          	addi	a0,s3,0
   1c6c4:	a39fb0ef          	jal	ra,180fc <dwarf::dwarf::~dwarf()>
      }
   1c6c8:	02813083          	ld	ra,40(sp)
   1c6cc:	02013403          	ld	s0,32(sp)
   1c6d0:	01813483          	ld	s1,24(sp)
   1c6d4:	01013903          	ld	s2,16(sp)
   1c6d8:	00813983          	ld	s3,8(sp)
   1c6dc:	03010113          	addi	sp,sp,48
   1c6e0:	00008067          	jalr	zero,0(ra)
   1c6e4:	02848493          	addi	s1,s1,40
   1c6e8:	f0990ae3          	beq	s2,s1,1c5fc <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x4c>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1c6ec:	0104b503          	ld	a0,16(s1)
	if (__p)
   1c6f0:	fe050ae3          	beq	a0,zero,1c6e4 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x134>
   1c6f4:	8acfa0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1c6f8:	fedff06f          	jal	zero,1c6e4 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x134>
      return __exchange_and_add(__mem, __val);
   1c6fc:	fff00593          	addi	a1,zero,-1
   1c700:	03048513          	addi	a0,s1,48
   1c704:	eedf90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c708:	f25ff06f          	jal	zero,1c62c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7c>
	_M_dispose();
   1c70c:	0004b783          	ld	a5,0(s1)
   1c710:	0107b783          	ld	a5,16(a5)
   1c714:	00048513          	addi	a0,s1,0
   1c718:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1c71c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1c720:	00027797          	auipc	a5,0x27
   1c724:	d787b783          	ld	a5,-648(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1c728:	0007c783          	lbu	a5,0(a5)
   1c72c:	02078663          	beq	a5,zero,1c758 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1a8>
    _Atomic_word __result = *__mem;
   1c730:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   1c734:	fff5079b          	addiw	a5,a0,-1
   1c738:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1c73c:	00100793          	addi	a5,zero,1
   1c740:	eef51ae3          	bne	a0,a5,1c634 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x84>
	    _M_destroy();
   1c744:	0004b783          	ld	a5,0(s1)
   1c748:	0187b783          	ld	a5,24(a5)
   1c74c:	00048513          	addi	a0,s1,0
   1c750:	000780e7          	jalr	ra,0(a5)
   1c754:	ee1ff06f          	jal	zero,1c634 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x84>
      return __exchange_and_add(__mem, __val);
   1c758:	fff00593          	addi	a1,zero,-1
   1c75c:	03448513          	addi	a0,s1,52
   1c760:	e91f90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c764:	fd9ff06f          	jal	zero,1c73c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x18c>
   1c768:	fff00593          	addi	a1,zero,-1
   1c76c:	03040513          	addi	a0,s0,48
   1c770:	e81f90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c774:	f45ff06f          	jal	zero,1c6b8 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x108>
	_M_dispose();
   1c778:	00043783          	ld	a5,0(s0)
   1c77c:	0107b783          	ld	a5,16(a5)
   1c780:	00040513          	addi	a0,s0,0
   1c784:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1c788:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1c78c:	00027797          	auipc	a5,0x27
   1c790:	d0c7b783          	ld	a5,-756(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1c794:	0007c783          	lbu	a5,0(a5)
   1c798:	02078663          	beq	a5,zero,1c7c4 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x214>
    _Atomic_word __result = *__mem;
   1c79c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1c7a0:	fff5079b          	addiw	a5,a0,-1
   1c7a4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1c7a8:	00100793          	addi	a5,zero,1
   1c7ac:	f0f51ae3          	bne	a0,a5,1c6c0 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x110>
	    _M_destroy();
   1c7b0:	00043783          	ld	a5,0(s0)
   1c7b4:	0187b783          	ld	a5,24(a5)
   1c7b8:	00040513          	addi	a0,s0,0
   1c7bc:	000780e7          	jalr	ra,0(a5)
   1c7c0:	f01ff06f          	jal	zero,1c6c0 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x110>
      return __exchange_and_add(__mem, __val);
   1c7c4:	fff00593          	addi	a1,zero,-1
   1c7c8:	03440513          	addi	a0,s0,52
   1c7cc:	e25f90ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c7d0:	fd9ff06f          	jal	zero,1c7a8 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1f8>

000000000001c7d4 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)>:
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
   1c7d4:	1c058a63          	beq	a1,zero,1c9a8 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x1d4>
    vector<_Tp, _Alloc>::
   1c7d8:	fc010113          	addi	sp,sp,-64
   1c7dc:	02113c23          	sd	ra,56(sp)
   1c7e0:	02813823          	sd	s0,48(sp)
   1c7e4:	02913423          	sd	s1,40(sp)
   1c7e8:	03213023          	sd	s2,32(sp)
   1c7ec:	01313c23          	sd	s3,24(sp)
   1c7f0:	01413823          	sd	s4,16(sp)
   1c7f4:	01513423          	sd	s5,8(sp)
   1c7f8:	00050913          	addi	s2,a0,0
   1c7fc:	00058493          	addi	s1,a1,0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1c800:	00853683          	ld	a3,8(a0)
   1c804:	00053783          	ld	a5,0(a0)
   1c808:	40f68433          	sub	s0,a3,a5
   1c80c:	40345993          	srai	s3,s0,0x3
   1c810:	0001b617          	auipc	a2,0x1b
   1c814:	2a063603          	ld	a2,672(a2) # 37ab0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd8>
   1c818:	02c989b3          	mul	s3,s3,a2
	{
	  const size_type __size = size();
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
					 - this->_M_impl._M_finish);

	  if (__size > max_size() || __navail > max_size() - __size)
   1c81c:	0001b797          	auipc	a5,0x1b
   1c820:	28c7b783          	ld	a5,652(a5) # 37aa8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd0>
   1c824:	41378733          	sub	a4,a5,s3
					 - this->_M_impl._M_finish);
   1c828:	01053783          	ld	a5,16(a0)
   1c82c:	40d787b3          	sub	a5,a5,a3
   1c830:	4037d793          	srai	a5,a5,0x3
   1c834:	02c787b3          	mul	a5,a5,a2
	    __builtin_unreachable();

	  if (__navail >= __n)
   1c838:	06b7e063          	bltu	a5,a1,1c898 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xc4>
   1c83c:	00058713          	addi	a4,a1,0
      template<typename _ForwardIterator, typename _Size>
	_GLIBCXX20_CONSTEXPR
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
	  _ForwardIterator __cur = __first;
   1c840:	00068793          	addi	a5,a3,0
  abbrev_entry() : code(0) {}
   1c844:	0007b023          	sd	zero,0(a5)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1c848:	0007b823          	sd	zero,16(a5)
   1c84c:	0007bc23          	sd	zero,24(a5)
   1c850:	0207b023          	sd	zero,32(a5)
	  __try
	    {
	      for (; __n > 0; --__n, (void) ++__cur)
   1c854:	fff70713          	addi	a4,a4,-1
   1c858:	02878793          	addi	a5,a5,40
   1c85c:	fe0714e3          	bne	a4,zero,1c844 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x70>
   1c860:	00249793          	slli	a5,s1,0x2
   1c864:	009787b3          	add	a5,a5,s1
   1c868:	00379793          	slli	a5,a5,0x3
   1c86c:	00f686b3          	add	a3,a3,a5
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
   1c870:	00d93423          	sd	a3,8(s2)
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
   1c874:	03813083          	ld	ra,56(sp)
   1c878:	03013403          	ld	s0,48(sp)
   1c87c:	02813483          	ld	s1,40(sp)
   1c880:	02013903          	ld	s2,32(sp)
   1c884:	01813983          	ld	s3,24(sp)
   1c888:	01013a03          	ld	s4,16(sp)
   1c88c:	00813a83          	ld	s5,8(sp)
   1c890:	04010113          	addi	sp,sp,64
   1c894:	00008067          	jalr	zero,0(ra)
	if (max_size() - size() < __n)
   1c898:	02b76c63          	bltu	a4,a1,1c8d0 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xfc>
	const size_type __len = size() + (std::max)(size(), __n);
   1c89c:	00058793          	addi	a5,a1,0
   1c8a0:	0135f463          	bgeu	a1,s3,1c8a8 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xd4>
   1c8a4:	00098793          	addi	a5,s3,0
   1c8a8:	013787b3          	add	a5,a5,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1c8ac:	0337e863          	bltu	a5,s3,1c8dc <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x108>
   1c8b0:	00078a93          	addi	s5,a5,0
   1c8b4:	0001b717          	auipc	a4,0x1b
   1c8b8:	1f473703          	ld	a4,500(a4) # 37aa8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd0>
   1c8bc:	00f77463          	bgeu	a4,a5,1c8c4 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xf0>
   1c8c0:	00070a93          	addi	s5,a4,0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1c8c4:	00000a13          	addi	s4,zero,0
   1c8c8:	02078863          	beq	a5,zero,1c8f8 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x124>
   1c8cc:	0180006f          	jal	zero,1c8e4 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x110>
	  __throw_length_error(__N(__s));
   1c8d0:	0001b517          	auipc	a0,0x1b
   1c8d4:	ec050513          	addi	a0,a0,-320 # 37790 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x10>
   1c8d8:	dc9f90ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1c8dc:	0001ba97          	auipc	s5,0x1b
   1c8e0:	1ccaba83          	ld	s5,460(s5) # 37aa8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd0>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1c8e4:	002a9513          	slli	a0,s5,0x2
   1c8e8:	01550533          	add	a0,a0,s5
   1c8ec:	00351513          	slli	a0,a0,0x3
   1c8f0:	ec1f90ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1c8f4:	00050a13          	addi	s4,a0,0
		      std::__uninitialized_default_n_a(__new_start + __size,
   1c8f8:	008a07b3          	add	a5,s4,s0
   1c8fc:	00048713          	addi	a4,s1,0
   1c900:	0007b023          	sd	zero,0(a5)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1c904:	0007b823          	sd	zero,16(a5)
   1c908:	0007bc23          	sd	zero,24(a5)
   1c90c:	0207b023          	sd	zero,32(a5)
   1c910:	fff70713          	addi	a4,a4,-1
   1c914:	02878793          	addi	a5,a5,40
   1c918:	fe0714e3          	bne	a4,zero,1c900 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x12c>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   1c91c:	00093503          	ld	a0,0(s2)
   1c920:	00893603          	ld	a2,8(s2)
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
   1c924:	04c50463          	beq	a0,a2,1c96c <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x198>
   1c928:	00050793          	addi	a5,a0,0
      _ForwardIterator __cur = __result;
   1c92c:	000a0713          	addi	a4,s4,0
struct abbrev_entry {
   1c930:	0007b683          	ld	a3,0(a5)
   1c934:	00d73023          	sd	a3,0(a4)
   1c938:	0087a683          	lw	a3,8(a5)
   1c93c:	00d72423          	sw	a3,8(a4)
   1c940:	00c7c683          	lbu	a3,12(a5)
   1c944:	00d70623          	sb	a3,12(a4)
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   1c948:	0107b683          	ld	a3,16(a5)
   1c94c:	00d73823          	sd	a3,16(a4)
   1c950:	0187b683          	ld	a3,24(a5)
   1c954:	00d73c23          	sd	a3,24(a4)
	  _M_end_of_storage(__x._M_end_of_storage)
   1c958:	0207b683          	ld	a3,32(a5)
   1c95c:	02d73023          	sd	a3,32(a4)
      for (; __first != __last; ++__first, (void)++__cur)
   1c960:	02878793          	addi	a5,a5,40
   1c964:	02870713          	addi	a4,a4,40
   1c968:	fcf614e3          	bne	a2,a5,1c930 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x15c>
	if (__p)
   1c96c:	00050463          	beq	a0,zero,1c974 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x1a0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1c970:	e31f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
	      this->_M_impl._M_start = __new_start;
   1c974:	01493023          	sd	s4,0(s2)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   1c978:	013484b3          	add	s1,s1,s3
   1c97c:	00249793          	slli	a5,s1,0x2
   1c980:	009787b3          	add	a5,a5,s1
   1c984:	00379793          	slli	a5,a5,0x3
   1c988:	00fa07b3          	add	a5,s4,a5
   1c98c:	00f93423          	sd	a5,8(s2)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1c990:	002a9793          	slli	a5,s5,0x2
   1c994:	015787b3          	add	a5,a5,s5
   1c998:	00379793          	slli	a5,a5,0x3
   1c99c:	00fa0a33          	add	s4,s4,a5
   1c9a0:	01493823          	sd	s4,16(s2)
    }
   1c9a4:	ed1ff06f          	jal	zero,1c874 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xa0>
   1c9a8:	00008067          	jalr	zero,0(ra)

000000000001c9ac <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1c9ac:	ff010113          	addi	sp,sp,-16
   1c9b0:	00113423          	sd	ra,8(sp)
   1c9b4:	00813023          	sd	s0,0(sp)
   1c9b8:	00853403          	ld	s0,8(a0)
   1c9bc:	02040263          	beq	s0,zero,1c9e0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()+0x34>
class type_unit : public unit {
   1c9c0:	00027797          	auipc	a5,0x27
   1c9c4:	9b07b783          	ld	a5,-1616(a5) # 43370 <vtable for dwarf::type_unit@@Base+0xa00>
   1c9c8:	01078793          	addi	a5,a5,16
   1c9cc:	00f43823          	sd	a5,16(s0)
   1c9d0:	01040513          	addi	a0,s0,16
   1c9d4:	849fb0ef          	jal	ra,1821c <dwarf::unit::~unit()>
   1c9d8:	00040513          	addi	a0,s0,0
   1c9dc:	dc5f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1c9e0:	00813083          	ld	ra,8(sp)
   1c9e4:	00013403          	ld	s0,0(sp)
   1c9e8:	01010113          	addi	sp,sp,16
   1c9ec:	00008067          	jalr	zero,0(ra)

000000000001c9f0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1c9f0:	00050693          	addi	a3,a0,0
      __node_base_ptr __prev_p = _M_buckets[__bkt];
   1c9f4:	00053783          	ld	a5,0(a0)
   1c9f8:	00359713          	slli	a4,a1,0x3
   1c9fc:	00e787b3          	add	a5,a5,a4
   1ca00:	0007b503          	ld	a0,0(a5)
      if (!__prev_p)
   1ca04:	04050263          	beq	a0,zero,1ca48 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x58>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
   1ca08:	00053783          	ld	a5,0(a0)
   1ca0c:	00063603          	ld	a2,0(a2)
   1ca10:	0080006f          	jal	zero,1ca18 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x28>
	   __p = __p->_M_next())
   1ca14:	00070793          	addi	a5,a4,0
      { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
   1ca18:	0087b703          	ld	a4,8(a5)
   1ca1c:	02c70663          	beq	a4,a2,1ca48 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x58>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1ca20:	0007b703          	ld	a4,0(a5)
   1ca24:	02070063          	beq	a4,zero,1ca44 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x54>
	  __prev_p = __p;
   1ca28:	00078513          	addi	a0,a5,0
    { return __num % __den; }
   1ca2c:	00873783          	ld	a5,8(a4)
   1ca30:	0086b803          	ld	a6,8(a3)
   1ca34:	0307f7b3          	remu	a5,a5,a6
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1ca38:	fcf58ee3          	beq	a1,a5,1ca14 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x24>
      return nullptr;
   1ca3c:	00000513          	addi	a0,zero,0
   1ca40:	00008067          	jalr	zero,0(ra)
   1ca44:	00070513          	addi	a0,a4,0
    }
   1ca48:	00008067          	jalr	zero,0(ra)

000000000001ca4c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1ca4c:	fd010113          	addi	sp,sp,-48
   1ca50:	02113423          	sd	ra,40(sp)
   1ca54:	02813023          	sd	s0,32(sp)
   1ca58:	00913c23          	sd	s1,24(sp)
   1ca5c:	00058493          	addi	s1,a1,0
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   1ca60:	01053403          	ld	s0,16(a0)
      while (__x != 0)
   1ca64:	00040a63          	beq	s0,zero,1ca78 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x2c>
      { return __x < __y; }
   1ca68:	0005a683          	lw	a3,0(a1)
      { return static_cast<_Link_type>(__x->_M_right); }
   1ca6c:	00000813          	addi	a6,zero,0
   1ca70:	00100613          	addi	a2,zero,1
   1ca74:	0340006f          	jal	zero,1caa8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x5c>
      { return &this->_M_impl._M_header; }
   1ca78:	00850413          	addi	s0,a0,8
	  if (__j == begin())
   1ca7c:	01853783          	ld	a5,24(a0)
   1ca80:	06878663          	beq	a5,s0,1caec <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0xa0>
	_M_node = _Rb_tree_decrement(_M_node);
   1ca84:	00040513          	addi	a0,s0,0
   1ca88:	d39f90ef          	jal	ra,167c0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>
	return *this;
   1ca8c:	00040593          	addi	a1,s0,0
	_M_node = _Rb_tree_decrement(_M_node);
   1ca90:	00050413          	addi	s0,a0,0
	return *this;
   1ca94:	0300006f          	jal	zero,1cac4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x78>
      { return static_cast<_Link_type>(__x->_M_right); }
   1ca98:	01843783          	ld	a5,24(s0)
   1ca9c:	00080713          	addi	a4,a6,0
      while (__x != 0)
   1caa0:	00078e63          	beq	a5,zero,1cabc <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x70>
   1caa4:	00078413          	addi	s0,a5,0
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   1caa8:	02042783          	lw	a5,32(s0)
   1caac:	fef6d6e3          	bge	a3,a5,1ca98 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x4c>
      { return static_cast<_Link_type>(__x->_M_left); }
   1cab0:	01043783          	ld	a5,16(s0)
   1cab4:	00060713          	addi	a4,a2,0
   1cab8:	fe9ff06f          	jal	zero,1caa0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x54>
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1cabc:	00040593          	addi	a1,s0,0
      if (__comp)
   1cac0:	fa071ee3          	bne	a4,zero,1ca7c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x30>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   1cac4:	02042703          	lw	a4,32(s0)
   1cac8:	0004a783          	lw	a5,0(s1)
   1cacc:	02f74663          	blt	a4,a5,1caf8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0xac>
   1cad0:	00000593          	addi	a1,zero,0
    }
   1cad4:	00040513          	addi	a0,s0,0
   1cad8:	02813083          	ld	ra,40(sp)
   1cadc:	02013403          	ld	s0,32(sp)
   1cae0:	01813483          	ld	s1,24(sp)
   1cae4:	03010113          	addi	sp,sp,48
   1cae8:	00008067          	jalr	zero,0(ra)
   1caec:	00040593          	addi	a1,s0,0
   1caf0:	00000413          	addi	s0,zero,0
   1caf4:	fe1ff06f          	jal	zero,1cad4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x88>
   1caf8:	00000413          	addi	s0,zero,0
   1cafc:	fd9ff06f          	jal	zero,1cad4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x88>

000000000001cb00 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1cb00:	fc010113          	addi	sp,sp,-64
   1cb04:	02113c23          	sd	ra,56(sp)
   1cb08:	02813823          	sd	s0,48(sp)
   1cb0c:	02913423          	sd	s1,40(sp)
   1cb10:	03213023          	sd	s2,32(sp)
   1cb14:	01313c23          	sd	s3,24(sp)
   1cb18:	00050993          	addi	s3,a0,0
   1cb1c:	00060493          	addi	s1,a2,0
      { return &this->_M_impl._M_header; }
   1cb20:	00850713          	addi	a4,a0,8
      if (__pos._M_node == _M_end())
   1cb24:	04e58063          	beq	a1,a4,1cb64 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x64>
   1cb28:	00058413          	addi	s0,a1,0
   1cb2c:	00062903          	lw	s2,0(a2)
   1cb30:	0205a703          	lw	a4,32(a1)
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   1cb34:	0ce95663          	bge	s2,a4,1cc00 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x100>
	  if (__pos._M_node == _M_leftmost()) // begin()
   1cb38:	01853703          	ld	a4,24(a0)
   1cb3c:	08b70663          	beq	a4,a1,1cbc8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xc8>
	_M_node = _Rb_tree_decrement(_M_node);
   1cb40:	00058513          	addi	a0,a1,0
   1cb44:	c7df90ef          	jal	ra,167c0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   1cb48:	02052783          	lw	a5,32(a0)
   1cb4c:	0927da63          	bge	a5,s2,1cbe0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xe0>
	      if (_S_right(__before._M_node) == 0)
   1cb50:	01853783          	ld	a5,24(a0)
   1cb54:	08078063          	beq	a5,zero,1cbd4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xd4>
		return _Res(__pos._M_node, __pos._M_node);
   1cb58:	00813023          	sd	s0,0(sp)
   1cb5c:	00813423          	sd	s0,8(sp)
   1cb60:	0440006f          	jal	zero,1cba4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   1cb64:	02853783          	ld	a5,40(a0)
   1cb68:	02078063          	beq	a5,zero,1cb88 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x88>
   1cb6c:	02053783          	ld	a5,32(a0)
   1cb70:	00062683          	lw	a3,0(a2)
   1cb74:	0207a703          	lw	a4,32(a5)
   1cb78:	00d75863          	bge	a4,a3,1cb88 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x88>
	    return _Res(0, _M_rightmost());
   1cb7c:	00013023          	sd	zero,0(sp)
   1cb80:	00f13423          	sd	a5,8(sp)
   1cb84:	0200006f          	jal	zero,1cba4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
	    return _M_get_insert_unique_pos(__k);
   1cb88:	00048593          	addi	a1,s1,0
   1cb8c:	00098513          	addi	a0,s3,0
   1cb90:	00027317          	auipc	t1,0x27
   1cb94:	8d833303          	ld	t1,-1832(t1) # 43468 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)@@Base+0x26a1c>
   1cb98:	000300e7          	jalr	ra,0(t1)
   1cb9c:	00a13023          	sd	a0,0(sp)
   1cba0:	00b13423          	sd	a1,8(sp)
    }
   1cba4:	00013503          	ld	a0,0(sp)
   1cba8:	00813583          	ld	a1,8(sp)
   1cbac:	03813083          	ld	ra,56(sp)
   1cbb0:	03013403          	ld	s0,48(sp)
   1cbb4:	02813483          	ld	s1,40(sp)
   1cbb8:	02013903          	ld	s2,32(sp)
   1cbbc:	01813983          	ld	s3,24(sp)
   1cbc0:	04010113          	addi	sp,sp,64
   1cbc4:	00008067          	jalr	zero,0(ra)
	    return _Res(_M_leftmost(), _M_leftmost());
   1cbc8:	00e13023          	sd	a4,0(sp)
   1cbcc:	00e13423          	sd	a4,8(sp)
   1cbd0:	fd5ff06f          	jal	zero,1cba4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
		return _Res(0, __before._M_node);
   1cbd4:	00013023          	sd	zero,0(sp)
   1cbd8:	00a13423          	sd	a0,8(sp)
   1cbdc:	fc9ff06f          	jal	zero,1cba4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
	    return _M_get_insert_unique_pos(__k);
   1cbe0:	00048593          	addi	a1,s1,0
   1cbe4:	00098513          	addi	a0,s3,0
   1cbe8:	00027317          	auipc	t1,0x27
   1cbec:	88033303          	ld	t1,-1920(t1) # 43468 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)@@Base+0x26a1c>
   1cbf0:	000300e7          	jalr	ra,0(t1)
   1cbf4:	00a13023          	sd	a0,0(sp)
   1cbf8:	00b13423          	sd	a1,8(sp)
   1cbfc:	fa9ff06f          	jal	zero,1cba4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   1cc00:	07275463          	bge	a4,s2,1cc68 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x168>
	  if (__pos._M_node == _M_rightmost())
   1cc04:	02053703          	ld	a4,32(a0)
   1cc08:	02b70463          	beq	a4,a1,1cc30 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x130>
	_M_node = _Rb_tree_increment(_M_node);
   1cc0c:	00058513          	addi	a0,a1,0
   1cc10:	b21f90ef          	jal	ra,16730 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@plt>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   1cc14:	02052783          	lw	a5,32(a0)
   1cc18:	02f95863          	bge	s2,a5,1cc48 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x148>
	      if (_S_right(__pos._M_node) == 0)
   1cc1c:	01843783          	ld	a5,24(s0)
   1cc20:	00078e63          	beq	a5,zero,1cc3c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x13c>
		return _Res(__after._M_node, __after._M_node);
   1cc24:	00a13023          	sd	a0,0(sp)
   1cc28:	00a13423          	sd	a0,8(sp)
   1cc2c:	f79ff06f          	jal	zero,1cba4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
	    return _Res(0, _M_rightmost());
   1cc30:	00013023          	sd	zero,0(sp)
   1cc34:	00e13423          	sd	a4,8(sp)
   1cc38:	f6dff06f          	jal	zero,1cba4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
		return _Res(0, __pos._M_node);
   1cc3c:	00013023          	sd	zero,0(sp)
   1cc40:	00813423          	sd	s0,8(sp)
   1cc44:	f61ff06f          	jal	zero,1cba4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
	    return _M_get_insert_unique_pos(__k);
   1cc48:	00048593          	addi	a1,s1,0
   1cc4c:	00098513          	addi	a0,s3,0
   1cc50:	00027317          	auipc	t1,0x27
   1cc54:	81833303          	ld	t1,-2024(t1) # 43468 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)@@Base+0x26a1c>
   1cc58:	000300e7          	jalr	ra,0(t1)
   1cc5c:	00a13023          	sd	a0,0(sp)
   1cc60:	00b13423          	sd	a1,8(sp)
   1cc64:	f41ff06f          	jal	zero,1cba4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
	return _Res(__pos._M_node, 0);
   1cc68:	00b13023          	sd	a1,0(sp)
   1cc6c:	00013423          	sd	zero,8(sp)
   1cc70:	f35ff06f          	jal	zero,1cba4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>

000000000001cc74 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1cc74:	fc010113          	addi	sp,sp,-64
   1cc78:	02113c23          	sd	ra,56(sp)
   1cc7c:	02813823          	sd	s0,48(sp)
   1cc80:	02913423          	sd	s1,40(sp)
   1cc84:	03213023          	sd	s2,32(sp)
   1cc88:	01313c23          	sd	s3,24(sp)
   1cc8c:	00050493          	addi	s1,a0,0
   1cc90:	00058913          	addi	s2,a1,0
   1cc94:	00068993          	addi	s3,a3,0
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1cc98:	03800513          	addi	a0,zero,56
   1cc9c:	b15f90ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1cca0:	00050413          	addi	s0,a0,0
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
   1cca4:	0009b783          	ld	a5,0(s3)
   1cca8:	0007a983          	lw	s3,0(a5)
   1ccac:	03352023          	sw	s3,32(a0)
      : _M_ptr(0), _M_refcount()
   1ccb0:	02053423          	sd	zero,40(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1ccb4:	02053823          	sd	zero,48(a0)
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
   1ccb8:	02050613          	addi	a2,a0,32
   1ccbc:	00090593          	addi	a1,s2,0
   1ccc0:	00048513          	addi	a0,s1,0
   1ccc4:	00026317          	auipc	t1,0x26
   1ccc8:	6bc33303          	ld	t1,1724(t1) # 43380 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)@@Base+0x26880>
   1cccc:	000300e7          	jalr	ra,0(t1)
   1ccd0:	00a13023          	sd	a0,0(sp)
   1ccd4:	00b13423          	sd	a1,8(sp)
	if (__res.second)
   1ccd8:	06058263          	beq	a1,zero,1cd3c <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0xc8>
   1ccdc:	00050713          	addi	a4,a0,0
			    || _M_impl._M_key_compare(_S_key(__z),
   1cce0:	00100513          	addi	a0,zero,1
   1cce4:	04070263          	beq	a4,zero,1cd28 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0xb4>
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   1cce8:	00848693          	addi	a3,s1,8
   1ccec:	00058613          	addi	a2,a1,0
   1ccf0:	00040593          	addi	a1,s0,0
   1ccf4:	8adf90ef          	jal	ra,165a0 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt>
      ++_M_impl._M_node_count;
   1ccf8:	0284b783          	ld	a5,40(s1)
   1ccfc:	00178793          	addi	a5,a5,1
   1cd00:	02f4b423          	sd	a5,40(s1)
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1cd04:	00040493          	addi	s1,s0,0
      }
   1cd08:	00048513          	addi	a0,s1,0
   1cd0c:	03813083          	ld	ra,56(sp)
   1cd10:	03013403          	ld	s0,48(sp)
   1cd14:	02813483          	ld	s1,40(sp)
   1cd18:	02013903          	ld	s2,32(sp)
   1cd1c:	01813983          	ld	s3,24(sp)
   1cd20:	04010113          	addi	sp,sp,64
   1cd24:	00008067          	jalr	zero,0(ra)
      { return &this->_M_impl._M_header; }
   1cd28:	00848713          	addi	a4,s1,8
      bool __insert_left = (__x != 0 || __p == _M_end()
   1cd2c:	fae58ee3          	beq	a1,a4,1cce8 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x74>
			    || _M_impl._M_key_compare(_S_key(__z),
   1cd30:	0205a503          	lw	a0,32(a1)
   1cd34:	00a9a533          	slt	a0,s3,a0
   1cd38:	fb1ff06f          	jal	zero,1cce8 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x74>
	return iterator(__res.first);
   1cd3c:	00050493          	addi	s1,a0,0
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1cd40:	00040513          	addi	a0,s0,0
   1cd44:	a5df90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   1cd48:	fc1ff06f          	jal	zero,1cd08 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x94>

000000000001cd4c <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)>:
      vector<_Tp, _Alloc>::
   1cd4c:	fa010113          	addi	sp,sp,-96
   1cd50:	04113c23          	sd	ra,88(sp)
   1cd54:	04813823          	sd	s0,80(sp)
   1cd58:	04913423          	sd	s1,72(sp)
   1cd5c:	05213023          	sd	s2,64(sp)
   1cd60:	03313c23          	sd	s3,56(sp)
   1cd64:	03413823          	sd	s4,48(sp)
   1cd68:	03513423          	sd	s5,40(sp)
   1cd6c:	03613023          	sd	s6,32(sp)
   1cd70:	01713c23          	sd	s7,24(sp)
   1cd74:	01813823          	sd	s8,16(sp)
   1cd78:	01913423          	sd	s9,8(sp)
   1cd7c:	01a13023          	sd	s10,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1cd80:	00853983          	ld	s3,8(a0)
   1cd84:	00053a83          	ld	s5,0(a0)
   1cd88:	415987b3          	sub	a5,s3,s5
   1cd8c:	4037d793          	srai	a5,a5,0x3
   1cd90:	0001b717          	auipc	a4,0x1b
   1cd94:	d3073703          	ld	a4,-720(a4) # 37ac0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   1cd98:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   1cd9c:	0001b717          	auipc	a4,0x1b
   1cda0:	d1c73703          	ld	a4,-740(a4) # 37ab8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe0>
   1cda4:	04e78463          	beq	a5,a4,1cdec <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xa0>
   1cda8:	00050a13          	addi	s4,a0,0
   1cdac:	00060413          	addi	s0,a2,0
   1cdb0:	00068493          	addi	s1,a3,0
   1cdb4:	00058913          	addi	s2,a1,0
      return __a;
   1cdb8:	00078713          	addi	a4,a5,0
      if (__a < __b)
   1cdbc:	03598e63          	beq	s3,s5,1cdf8 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xac>
	const size_type __len = size() + (std::max)(size(), __n);
   1cdc0:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1cdc4:	1ef76663          	bltu	a4,a5,1cfb0 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x264>
   1cdc8:	00070b93          	addi	s7,a4,0
   1cdcc:	0001b797          	auipc	a5,0x1b
   1cdd0:	cec7b783          	ld	a5,-788(a5) # 37ab8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe0>
   1cdd4:	00e7f463          	bgeu	a5,a4,1cddc <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x90>
   1cdd8:	00078b93          	addi	s7,a5,0
    { return __lhs.base() - __rhs.base(); }
   1cddc:	41558c33          	sub	s8,a1,s5
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1cde0:	00000b13          	addi	s6,zero,0
   1cde4:	1e070663          	beq	a4,zero,1cfd0 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x284>
   1cde8:	1d40006f          	jal	zero,1cfbc <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x270>
	  __throw_length_error(__N(__s));
   1cdec:	0001a517          	auipc	a0,0x1a
   1cdf0:	71450513          	addi	a0,a0,1812 # 37500 <__libc_csu_fini+0xa0>
   1cdf4:	8adf90ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   1cdf8:	00100713          	addi	a4,zero,1
   1cdfc:	fc5ff06f          	jal	zero,1cdc0 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x74>
   1ce00:	09590663          	beq	s2,s5,1ce8c <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x140>
   1ce04:	000a8493          	addi	s1,s5,0
      _ForwardIterator __cur = __result;
   1ce08:	000b0413          	addi	s0,s6,0
class unit {
   1ce0c:	00026c97          	auipc	s9,0x26
   1ce10:	7bccbc83          	ld	s9,1980(s9) # 435c8 <vtable for dwarf::unit@@Base+0xc98>
   1ce14:	010c8c93          	addi	s9,s9,16
    return ::__libc_single_threaded;
   1ce18:	00026d17          	auipc	s10,0x26
   1ce1c:	680d3d03          	ld	s10,1664(s10) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
  compilation_unit(compilation_unit &&o) = default;
   1ce20:	00026c17          	auipc	s8,0x26
   1ce24:	4b0c3c03          	ld	s8,1200(s8) # 432d0 <vtable for dwarf::compilation_unit@@Base+0x980>
   1ce28:	010c0c13          	addi	s8,s8,16
   1ce2c:	0300006f          	jal	zero,1ce5c <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x110>
      __atomic_add(__mem, __val);
   1ce30:	00100593          	addi	a1,zero,1
   1ce34:	03050513          	addi	a0,a0,48
   1ce38:	f78f90ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1ce3c:	01843023          	sd	s8,0(s0)

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   1ce40:	0004b783          	ld	a5,0(s1)
   1ce44:	0007b783          	ld	a5,0(a5)
   1ce48:	00048513          	addi	a0,s1,0
   1ce4c:	000780e7          	jalr	ra,0(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   1ce50:	01848493          	addi	s1,s1,24
   1ce54:	01840413          	addi	s0,s0,24
   1ce58:	02990c63          	beq	s2,s1,1ce90 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x144>
class unit {
   1ce5c:	01943023          	sd	s9,0(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1ce60:	0084b783          	ld	a5,8(s1)
   1ce64:	00f43423          	sd	a5,8(s0)
      : _M_pi(__r._M_pi)
   1ce68:	0104b503          	ld	a0,16(s1)
   1ce6c:	00a43823          	sd	a0,16(s0)
	if (_M_pi != nullptr)
   1ce70:	fc0506e3          	beq	a0,zero,1ce3c <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xf0>
    if (__is_single_threaded())
   1ce74:	000d4703          	lbu	a4,0(s10)
   1ce78:	fa070ce3          	beq	a4,zero,1ce30 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xe4>
  { *__mem += __val; }
   1ce7c:	03052703          	lw	a4,48(a0)
   1ce80:	0017071b          	addiw	a4,a4,1
   1ce84:	02e52823          	sw	a4,48(a0)
   1ce88:	fb5ff06f          	jal	zero,1ce3c <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xf0>
      _ForwardIterator __cur = __result;
   1ce8c:	000b0413          	addi	s0,s6,0
	      ++__new_finish;
   1ce90:	01840413          	addi	s0,s0,24
      for (; __first != __last; ++__first, (void)++__cur)
   1ce94:	09390263          	beq	s2,s3,1cf18 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x1cc>
   1ce98:	00026c17          	auipc	s8,0x26
   1ce9c:	730c3c03          	ld	s8,1840(s8) # 435c8 <vtable for dwarf::unit@@Base+0xc98>
   1cea0:	010c0c13          	addi	s8,s8,16
    return ::__libc_single_threaded;
   1cea4:	00026c97          	auipc	s9,0x26
   1cea8:	5f4cbc83          	ld	s9,1524(s9) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
  compilation_unit(compilation_unit &&o) = default;
   1ceac:	00026497          	auipc	s1,0x26
   1ceb0:	4244b483          	ld	s1,1060(s1) # 432d0 <vtable for dwarf::compilation_unit@@Base+0x980>
   1ceb4:	01048493          	addi	s1,s1,16
   1ceb8:	0300006f          	jal	zero,1cee8 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x19c>
      __atomic_add(__mem, __val);
   1cebc:	00100593          	addi	a1,zero,1
   1cec0:	03050513          	addi	a0,a0,48
   1cec4:	eecf90ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1cec8:	00943023          	sd	s1,0(s0)
   1cecc:	00093783          	ld	a5,0(s2)
   1ced0:	0007b783          	ld	a5,0(a5)
   1ced4:	00090513          	addi	a0,s2,0
   1ced8:	000780e7          	jalr	ra,0(a5)
   1cedc:	01890913          	addi	s2,s2,24
   1cee0:	01840413          	addi	s0,s0,24
   1cee4:	03390a63          	beq	s2,s3,1cf18 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x1cc>
class unit {
   1cee8:	01843023          	sd	s8,0(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1ceec:	00893783          	ld	a5,8(s2)
   1cef0:	00f43423          	sd	a5,8(s0)
      : _M_pi(__r._M_pi)
   1cef4:	01093503          	ld	a0,16(s2)
   1cef8:	00a43823          	sd	a0,16(s0)
	if (_M_pi != nullptr)
   1cefc:	fc0506e3          	beq	a0,zero,1cec8 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x17c>
    if (__is_single_threaded())
   1cf00:	000cc703          	lbu	a4,0(s9)
   1cf04:	fa070ce3          	beq	a4,zero,1cebc <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x170>
  { *__mem += __val; }
   1cf08:	03052703          	lw	a4,48(a0)
   1cf0c:	0017071b          	addiw	a4,a4,1
   1cf10:	02e52823          	sw	a4,48(a0)
   1cf14:	fb5ff06f          	jal	zero,1cec8 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x17c>
	if (__p)
   1cf18:	000a8663          	beq	s5,zero,1cf24 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x1d8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1cf1c:	000a8513          	addi	a0,s5,0
   1cf20:	881f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   1cf24:	016a3023          	sd	s6,0(s4)
      this->_M_impl._M_finish = __new_finish;
   1cf28:	008a3423          	sd	s0,8(s4)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1cf2c:	001b9793          	slli	a5,s7,0x1
   1cf30:	017787b3          	add	a5,a5,s7
   1cf34:	00379793          	slli	a5,a5,0x3
   1cf38:	00fb07b3          	add	a5,s6,a5
   1cf3c:	00fa3823          	sd	a5,16(s4)
    }
   1cf40:	05813083          	ld	ra,88(sp)
   1cf44:	05013403          	ld	s0,80(sp)
   1cf48:	04813483          	ld	s1,72(sp)
   1cf4c:	04013903          	ld	s2,64(sp)
   1cf50:	03813983          	ld	s3,56(sp)
   1cf54:	03013a03          	ld	s4,48(sp)
   1cf58:	02813a83          	ld	s5,40(sp)
   1cf5c:	02013b03          	ld	s6,32(sp)
   1cf60:	01813b83          	ld	s7,24(sp)
   1cf64:	01013c03          	ld	s8,16(sp)
   1cf68:	00813c83          	ld	s9,8(sp)
   1cf6c:	00013d03          	ld	s10,0(sp)
   1cf70:	06010113          	addi	sp,sp,96
   1cf74:	00008067          	jalr	zero,0(ra)
      __catch(...)
   1cf78:	ef8f90ef          	jal	ra,16670 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   1cf7c:	020b1463          	bne	s6,zero,1cfa4 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x258>
	{ __p->~_Up(); }
   1cf80:	000c3783          	ld	a5,0(s8)
   1cf84:	0007b783          	ld	a5,0(a5)
   1cf88:	000c0513          	addi	a0,s8,0
   1cf8c:	000780e7          	jalr	ra,0(a5)
	  __throw_exception_again;
   1cf90:	931f90ef          	jal	ra,168c0 <__cxa_rethrow@plt>
      __catch(...)
   1cf94:	00050413          	addi	s0,a0,0
   1cf98:	999f90ef          	jal	ra,16930 <__cxa_end_catch@plt>
   1cf9c:	00040513          	addi	a0,s0,0
   1cfa0:	9f1f90ef          	jal	ra,16990 <_Unwind_Resume@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1cfa4:	000b0513          	addi	a0,s6,0
   1cfa8:	ff8f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1cfac:	fe5ff06f          	jal	zero,1cf90 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x244>
   1cfb0:	41558c33          	sub	s8,a1,s5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1cfb4:	0001bb97          	auipc	s7,0x1b
   1cfb8:	b04bbb83          	ld	s7,-1276(s7) # 37ab8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe0>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1cfbc:	001b9513          	slli	a0,s7,0x1
   1cfc0:	01750533          	add	a0,a0,s7
   1cfc4:	00351513          	slli	a0,a0,0x3
   1cfc8:	fe8f90ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1cfcc:	00050b13          	addi	s6,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   1cfd0:	018b0c33          	add	s8,s6,s8
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1cfd4:	0004b603          	ld	a2,0(s1)
   1cfd8:	00040593          	addi	a1,s0,0
   1cfdc:	000c0513          	addi	a0,s8,0
   1cfe0:	825fb0ef          	jal	ra,18804 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)>
	}
   1cfe4:	e1dff06f          	jal	zero,1ce00 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xb4>

000000000001cfe8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1cfe8:	00050693          	addi	a3,a0,0
      __node_base_ptr __prev_p = _M_buckets[__bkt];
   1cfec:	00053783          	ld	a5,0(a0)
   1cff0:	00359713          	slli	a4,a1,0x3
   1cff4:	00e787b3          	add	a5,a5,a4
   1cff8:	0007b503          	ld	a0,0(a5)
      if (!__prev_p)
   1cffc:	04050263          	beq	a0,zero,1d040 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x58>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
   1d000:	00053783          	ld	a5,0(a0)
      { return __x == __y; }
   1d004:	00063603          	ld	a2,0(a2)
   1d008:	0080006f          	jal	zero,1d010 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x28>
	   __p = __p->_M_next())
   1d00c:	00070793          	addi	a5,a4,0
      { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
   1d010:	0087b703          	ld	a4,8(a5)
   1d014:	02c70663          	beq	a4,a2,1d040 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x58>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1d018:	0007b703          	ld	a4,0(a5)
   1d01c:	02070063          	beq	a4,zero,1d03c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x54>
	  __prev_p = __p;
   1d020:	00078513          	addi	a0,a5,0
    { return __num % __den; }
   1d024:	00873783          	ld	a5,8(a4)
   1d028:	0086b803          	ld	a6,8(a3)
   1d02c:	0307f7b3          	remu	a5,a5,a6
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1d030:	fcf58ee3          	beq	a1,a5,1d00c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x24>
      return nullptr;
   1d034:	00000513          	addi	a0,zero,0
   1d038:	00008067          	jalr	zero,0(ra)
   1d03c:	00070513          	addi	a0,a4,0
    }
   1d040:	00008067          	jalr	zero,0(ra)

000000000001d044 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1d044:	fd010113          	addi	sp,sp,-48
   1d048:	02113423          	sd	ra,40(sp)
   1d04c:	02813023          	sd	s0,32(sp)
   1d050:	00913c23          	sd	s1,24(sp)
   1d054:	01213823          	sd	s2,16(sp)
   1d058:	01313423          	sd	s3,8(sp)
   1d05c:	00050493          	addi	s1,a0,0
   1d060:	00058413          	addi	s0,a1,0
	if (__builtin_expect(__bkt_count == 1, false))
   1d064:	00100793          	addi	a5,zero,1
   1d068:	04f58263          	beq	a1,a5,1d0ac <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x68>
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1d06c:	fff00793          	addi	a5,zero,-1
   1d070:	0047d793          	srli	a5,a5,0x4
   1d074:	04b7e263          	bltu	a5,a1,1d0b8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x74>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1d078:	00359993          	slli	s3,a1,0x3
   1d07c:	00098513          	addi	a0,s3,0
   1d080:	f30f90ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1d084:	00050913          	addi	s2,a0,0
    {
      __buckets_alloc_type __alloc(_M_node_allocator());

      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
      __buckets_ptr __p = std::__to_address(__ptr);
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
   1d088:	00098613          	addi	a2,s3,0
   1d08c:	00000593          	addi	a1,zero,0
   1d090:	fe0f90ef          	jal	ra,16870 <memset@plt>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1d094:	0104b603          	ld	a2,16(s1)
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
      __node_ptr __p = _M_begin();
      _M_before_begin._M_nxt = nullptr;
   1d098:	0004b823          	sd	zero,16(s1)
      std::size_t __bbegin_bkt = 0;
      while (__p)
   1d09c:	08060c63          	beq	a2,zero,1d134 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xf0>
      std::size_t __bbegin_bkt = 0;
   1d0a0:	00000593          	addi	a1,zero,0
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
	  if (!__new_buckets[__bkt])
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
	      _M_before_begin._M_nxt = __p;
	      __new_buckets[__bkt] = &_M_before_begin;
   1d0a4:	01048893          	addi	a7,s1,16
   1d0a8:	0380006f          	jal	zero,1d0e0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x9c>
	    _M_single_bucket = nullptr;
   1d0ac:	02053823          	sd	zero,48(a0)
	    return &_M_single_bucket;
   1d0b0:	03050913          	addi	s2,a0,48
   1d0b4:	fe1ff06f          	jal	zero,1d094 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x50>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1d0b8:	fff00793          	addi	a5,zero,-1
   1d0bc:	0037d793          	srli	a5,a5,0x3
   1d0c0:	00b7f463          	bgeu	a5,a1,1d0c8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x84>
	      std::__throw_bad_array_new_length();
   1d0c4:	ebcf90ef          	jal	ra,16780 <std::__throw_bad_array_new_length()@plt>
	    std::__throw_bad_alloc();
   1d0c8:	d88f90ef          	jal	ra,16650 <std::__throw_bad_alloc()@plt>
		__new_buckets[__bbegin_bkt] = __p;
	      __bbegin_bkt = __bkt;
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
   1d0cc:	00083683          	ld	a3,0(a6)
   1d0d0:	00d73023          	sd	a3,0(a4)
	      __new_buckets[__bkt]->_M_nxt = __p;
   1d0d4:	0007b783          	ld	a5,0(a5)
   1d0d8:	00e7b023          	sd	a4,0(a5)
      while (__p)
   1d0dc:	04060c63          	beq	a2,zero,1d134 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xf0>
      _M_next() const noexcept
   1d0e0:	00060713          	addi	a4,a2,0
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1d0e4:	00063603          	ld	a2,0(a2)
    { return __num % __den; }
   1d0e8:	00873683          	ld	a3,8(a4)
   1d0ec:	0286f6b3          	remu	a3,a3,s0
	  if (!__new_buckets[__bkt])
   1d0f0:	00369793          	slli	a5,a3,0x3
   1d0f4:	00f907b3          	add	a5,s2,a5
   1d0f8:	0007b803          	ld	a6,0(a5)
   1d0fc:	fc0818e3          	bne	a6,zero,1d0cc <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x88>
	      __p->_M_nxt = _M_before_begin._M_nxt;
   1d100:	0104b503          	ld	a0,16(s1)
   1d104:	00a73023          	sd	a0,0(a4)
	      _M_before_begin._M_nxt = __p;
   1d108:	00e4b823          	sd	a4,16(s1)
	      __new_buckets[__bkt] = &_M_before_begin;
   1d10c:	0117b023          	sd	a7,0(a5)
	      if (__p->_M_nxt)
   1d110:	00073783          	ld	a5,0(a4)
   1d114:	00078c63          	beq	a5,zero,1d12c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xe8>
		__new_buckets[__bbegin_bkt] = __p;
   1d118:	00359593          	slli	a1,a1,0x3
   1d11c:	00b905b3          	add	a1,s2,a1
   1d120:	00e5b023          	sd	a4,0(a1)
	      __bbegin_bkt = __bkt;
   1d124:	00068593          	addi	a1,a3,0
   1d128:	fb5ff06f          	jal	zero,1d0dc <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x98>
   1d12c:	00068593          	addi	a1,a3,0
   1d130:	fadff06f          	jal	zero,1d0dc <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x98>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   1d134:	0004b503          	ld	a0,0(s1)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   1d138:	03048793          	addi	a5,s1,48
	if (_M_uses_single_bucket(__bkts))
   1d13c:	00f50463          	beq	a0,a5,1d144 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x100>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1d140:	e60f90ef          	jal	ra,167a0 <operator delete(void*)@plt>

	  __p = __next;
	}

      _M_deallocate_buckets();
      _M_bucket_count = __bkt_count;
   1d144:	0084b423          	sd	s0,8(s1)
      _M_buckets = __new_buckets;
   1d148:	0124b023          	sd	s2,0(s1)
    }
   1d14c:	02813083          	ld	ra,40(sp)
   1d150:	02013403          	ld	s0,32(sp)
   1d154:	01813483          	ld	s1,24(sp)
   1d158:	01013903          	ld	s2,16(sp)
   1d15c:	00813983          	ld	s3,8(sp)
   1d160:	03010113          	addi	sp,sp,48
   1d164:	00008067          	jalr	zero,0(ra)

000000000001d168 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1d168:	fc010113          	addi	sp,sp,-64
   1d16c:	02113c23          	sd	ra,56(sp)
   1d170:	02813823          	sd	s0,48(sp)
   1d174:	02913423          	sd	s1,40(sp)
   1d178:	03213023          	sd	s2,32(sp)
   1d17c:	01313c23          	sd	s3,24(sp)
   1d180:	01413823          	sd	s4,16(sp)
   1d184:	00050413          	addi	s0,a0,0
   1d188:	00058493          	addi	s1,a1,0
   1d18c:	00060993          	addi	s3,a2,0
   1d190:	00068913          	addi	s2,a3,0
    { return _M_next_resize; }
   1d194:	02853a03          	ld	s4,40(a0)
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
   1d198:	00070693          	addi	a3,a4,0
   1d19c:	01853603          	ld	a2,24(a0)
   1d1a0:	00853583          	ld	a1,8(a0)
   1d1a4:	02050513          	addi	a0,a0,32
   1d1a8:	eb8f90ef          	jal	ra,16860 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>
   1d1ac:	00a13023          	sd	a0,0(sp)
   1d1b0:	00b13423          	sd	a1,8(sp)
      if (__do_rehash.first)
   1d1b4:	0ff57513          	andi	a0,a0,255
   1d1b8:	06051063          	bne	a0,zero,1d218 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0xb0>
      if (_M_buckets[__bkt])
   1d1bc:	00349593          	slli	a1,s1,0x3
   1d1c0:	00043783          	ld	a5,0(s0)
   1d1c4:	00b787b3          	add	a5,a5,a1
   1d1c8:	0007b783          	ld	a5,0(a5)
   1d1cc:	08078663          	beq	a5,zero,1d258 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0xf0>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
   1d1d0:	0007b783          	ld	a5,0(a5)
   1d1d4:	00f93023          	sd	a5,0(s2)
	  _M_buckets[__bkt]->_M_nxt = __node;
   1d1d8:	00043783          	ld	a5,0(s0)
   1d1dc:	00b787b3          	add	a5,a5,a1
   1d1e0:	0007b783          	ld	a5,0(a5)
   1d1e4:	0127b023          	sd	s2,0(a5)
      ++_M_element_count;
   1d1e8:	01843783          	ld	a5,24(s0)
   1d1ec:	00178793          	addi	a5,a5,1
   1d1f0:	00f43c23          	sd	a5,24(s0)
    }
   1d1f4:	00090513          	addi	a0,s2,0
   1d1f8:	03813083          	ld	ra,56(sp)
   1d1fc:	03013403          	ld	s0,48(sp)
   1d200:	02813483          	ld	s1,40(sp)
   1d204:	02013903          	ld	s2,32(sp)
   1d208:	01813983          	ld	s3,24(sp)
   1d20c:	01013a03          	ld	s4,16(sp)
   1d210:	04010113          	addi	sp,sp,64
   1d214:	00008067          	jalr	zero,0(ra)
	  _M_rehash_aux(__bkt_count, __unique_keys{});
   1d218:	00000613          	addi	a2,zero,0
   1d21c:	00040513          	addi	a0,s0,0
   1d220:	00026317          	auipc	t1,0x26
   1d224:	1d033303          	ld	t1,464(t1) # 433f0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)@@Base+0x263ac>
   1d228:	000300e7          	jalr	ra,0(t1)
   1d22c:	0200006f          	jal	zero,1d24c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0xe4>
      __catch(...)
   1d230:	c40f90ef          	jal	ra,16670 <__cxa_begin_catch@plt>
    { _M_next_resize = __state; }
   1d234:	03443423          	sd	s4,40(s0)
	  __throw_exception_again;
   1d238:	e88f90ef          	jal	ra,168c0 <__cxa_rethrow@plt>
      __catch(...)
   1d23c:	00050413          	addi	s0,a0,0
   1d240:	ef0f90ef          	jal	ra,16930 <__cxa_end_catch@plt>
   1d244:	00040513          	addi	a0,s0,0
   1d248:	f48f90ef          	jal	ra,16990 <_Unwind_Resume@plt>
    { return __num % __den; }
   1d24c:	00843583          	ld	a1,8(s0)
   1d250:	02b9f4b3          	remu	s1,s3,a1
   1d254:	f69ff06f          	jal	zero,1d1bc <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x54>
	  __node->_M_nxt = _M_before_begin._M_nxt;
   1d258:	01043783          	ld	a5,16(s0)
   1d25c:	00f93023          	sd	a5,0(s2)
	  _M_before_begin._M_nxt = __node;
   1d260:	01243823          	sd	s2,16(s0)
	  if (__node->_M_nxt)
   1d264:	00093783          	ld	a5,0(s2)
   1d268:	02078063          	beq	a5,zero,1d288 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x120>
   1d26c:	0087b783          	ld	a5,8(a5)
   1d270:	00843703          	ld	a4,8(s0)
   1d274:	02e7f7b3          	remu	a5,a5,a4
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
   1d278:	00043703          	ld	a4,0(s0)
   1d27c:	00379793          	slli	a5,a5,0x3
   1d280:	00f707b3          	add	a5,a4,a5
   1d284:	0127b023          	sd	s2,0(a5)
	  _M_buckets[__bkt] = &_M_before_begin;
   1d288:	00043783          	ld	a5,0(s0)
   1d28c:	00b787b3          	add	a5,a5,a1
   1d290:	01040713          	addi	a4,s0,16
   1d294:	00e7b023          	sd	a4,0(a5)
   1d298:	f51ff06f          	jal	zero,1d1e8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x80>

000000000001d29c <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)>:
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
   1d29c:	fc010113          	addi	sp,sp,-64
   1d2a0:	02113c23          	sd	ra,56(sp)
   1d2a4:	02813823          	sd	s0,48(sp)
   1d2a8:	02913423          	sd	s1,40(sp)
   1d2ac:	03213023          	sd	s2,32(sp)
   1d2b0:	01313c23          	sd	s3,24(sp)
   1d2b4:	00050493          	addi	s1,a0,0
   1d2b8:	00058413          	addi	s0,a1,0
	return _M_hash()(__k);
   1d2bc:	0005b983          	ld	s3,0(a1)
    { return __num % __den; }
   1d2c0:	00853903          	ld	s2,8(a0)
   1d2c4:	0329f933          	remu	s2,s3,s2
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1d2c8:	00098693          	addi	a3,s3,0
   1d2cc:	00058613          	addi	a2,a1,0
   1d2d0:	00090593          	addi	a1,s2,0
   1d2d4:	00026317          	auipc	t1,0x26
   1d2d8:	05c33303          	ld	t1,92(t1) # 43330 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x26940>
   1d2dc:	000300e7          	jalr	ra,0(t1)
	if (__before_n)
   1d2e0:	02050663          	beq	a0,zero,1d30c <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)+0x70>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   1d2e4:	00053503          	ld	a0,0(a0)
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
   1d2e8:	02050263          	beq	a0,zero,1d30c <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)+0x70>
	return __node->_M_v().second;
   1d2ec:	01050513          	addi	a0,a0,16
    }
   1d2f0:	03813083          	ld	ra,56(sp)
   1d2f4:	03013403          	ld	s0,48(sp)
   1d2f8:	02813483          	ld	s1,40(sp)
   1d2fc:	02013903          	ld	s2,32(sp)
   1d300:	01813983          	ld	s3,24(sp)
   1d304:	04010113          	addi	sp,sp,64
   1d308:	00008067          	jalr	zero,0(ra)
	  : _M_h(__h),
   1d30c:	00913023          	sd	s1,0(sp)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1d310:	02800513          	addi	a0,zero,40
   1d314:	c9cf90ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1d318:	00050693          	addi	a3,a0,0
    _Hash_node_base() noexcept : _M_nxt() { }
   1d31c:	00053023          	sd	zero,0(a0)
   1d320:	00043783          	ld	a5,0(s0)
   1d324:	00f53423          	sd	a5,8(a0)
      : _M_ptr(0), _M_refcount()
   1d328:	00053c23          	sd	zero,24(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1d32c:	02053023          	sd	zero,32(a0)
  type_unit() = default;
   1d330:	00026797          	auipc	a5,0x26
   1d334:	0407b783          	ld	a5,64(a5) # 43370 <vtable for dwarf::type_unit@@Base+0xa00>
   1d338:	01078793          	addi	a5,a5,16
   1d33c:	00f53823          	sd	a5,16(a0)
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
   1d340:	00a13423          	sd	a0,8(sp)
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
   1d344:	00100713          	addi	a4,zero,1
   1d348:	00098613          	addi	a2,s3,0
   1d34c:	00090593          	addi	a1,s2,0
   1d350:	00048513          	addi	a0,s1,0
   1d354:	00026317          	auipc	t1,0x26
   1d358:	09433303          	ld	t1,148(t1) # 433e8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)@@Base+0x26280>
   1d35c:	000300e7          	jalr	ra,0(t1)
      return __pos->second;
   1d360:	01050513          	addi	a0,a0,16
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1d364:	f8dff06f          	jal	zero,1d2f0 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)+0x54>
    }
   1d368:	00050413          	addi	s0,a0,0
   1d36c:	00010513          	addi	a0,sp,0
   1d370:	00026317          	auipc	t1,0x26
   1d374:	03033303          	ld	t1,48(t1) # 433a0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()@@Base+0x269f4>
   1d378:	000300e7          	jalr	ra,0(t1)
   1d37c:	00040513          	addi	a0,s0,0
   1d380:	e10f90ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001d384 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)>:
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
   1d384:	fc010113          	addi	sp,sp,-64
   1d388:	02113c23          	sd	ra,56(sp)
   1d38c:	02813823          	sd	s0,48(sp)
   1d390:	02913423          	sd	s1,40(sp)
   1d394:	03213023          	sd	s2,32(sp)
   1d398:	01313c23          	sd	s3,24(sp)
   1d39c:	00050493          	addi	s1,a0,0
   1d3a0:	00058413          	addi	s0,a1,0
	return _M_hash()(__k);
   1d3a4:	0005b983          	ld	s3,0(a1)
    { return __num % __den; }
   1d3a8:	00853903          	ld	s2,8(a0)
   1d3ac:	0329f933          	remu	s2,s3,s2
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1d3b0:	00098693          	addi	a3,s3,0
   1d3b4:	00058613          	addi	a2,a1,0
   1d3b8:	00090593          	addi	a1,s2,0
   1d3bc:	00026317          	auipc	t1,0x26
   1d3c0:	f7433303          	ld	t1,-140(t1) # 43330 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x26940>
   1d3c4:	000300e7          	jalr	ra,0(t1)
	if (__before_n)
   1d3c8:	02050663          	beq	a0,zero,1d3f4 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x70>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   1d3cc:	00053503          	ld	a0,0(a0)
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
   1d3d0:	02050263          	beq	a0,zero,1d3f4 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x70>
	return __node->_M_v().second;
   1d3d4:	01050513          	addi	a0,a0,16
    }
   1d3d8:	03813083          	ld	ra,56(sp)
   1d3dc:	03013403          	ld	s0,48(sp)
   1d3e0:	02813483          	ld	s1,40(sp)
   1d3e4:	02013903          	ld	s2,32(sp)
   1d3e8:	01813983          	ld	s3,24(sp)
   1d3ec:	04010113          	addi	sp,sp,64
   1d3f0:	00008067          	jalr	zero,0(ra)
	  : _M_h(__h),
   1d3f4:	00913023          	sd	s1,0(sp)
   1d3f8:	02800513          	addi	a0,zero,40
   1d3fc:	bb4f90ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1d400:	00050693          	addi	a3,a0,0
    _Hash_node_base() noexcept : _M_nxt() { }
   1d404:	00053023          	sd	zero,0(a0)
   1d408:	00043783          	ld	a5,0(s0)
   1d40c:	00f53423          	sd	a5,8(a0)
      : _M_ptr(0), _M_refcount()
   1d410:	00053c23          	sd	zero,24(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1d414:	02053023          	sd	zero,32(a0)
   1d418:	00026797          	auipc	a5,0x26
   1d41c:	f587b783          	ld	a5,-168(a5) # 43370 <vtable for dwarf::type_unit@@Base+0xa00>
   1d420:	01078793          	addi	a5,a5,16
   1d424:	00f53823          	sd	a5,16(a0)
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
   1d428:	00a13423          	sd	a0,8(sp)
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
   1d42c:	00100713          	addi	a4,zero,1
   1d430:	00098613          	addi	a2,s3,0
   1d434:	00090593          	addi	a1,s2,0
   1d438:	00048513          	addi	a0,s1,0
   1d43c:	00026317          	auipc	t1,0x26
   1d440:	fac33303          	ld	t1,-84(t1) # 433e8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)@@Base+0x26280>
   1d444:	000300e7          	jalr	ra,0(t1)
      return __pos->second;
   1d448:	01050513          	addi	a0,a0,16
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1d44c:	f8dff06f          	jal	zero,1d3d8 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x54>
    }
   1d450:	00050413          	addi	s0,a0,0
   1d454:	00010513          	addi	a0,sp,0
   1d458:	00026317          	auipc	t1,0x26
   1d45c:	f4833303          	ld	t1,-184(t1) # 433a0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()@@Base+0x269f4>
   1d460:	000300e7          	jalr	ra,0(t1)
   1d464:	00040513          	addi	a0,s0,0
   1d468:	d28f90ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001d46c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1d46c:	fd010113          	addi	sp,sp,-48
   1d470:	02113423          	sd	ra,40(sp)
   1d474:	02813023          	sd	s0,32(sp)
   1d478:	00913c23          	sd	s1,24(sp)
   1d47c:	01213823          	sd	s2,16(sp)
   1d480:	01313423          	sd	s3,8(sp)
   1d484:	00050493          	addi	s1,a0,0
   1d488:	00058413          	addi	s0,a1,0
	if (__builtin_expect(__bkt_count == 1, false))
   1d48c:	00100793          	addi	a5,zero,1
   1d490:	04f58263          	beq	a1,a5,1d4d4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x68>
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1d494:	fff00793          	addi	a5,zero,-1
   1d498:	0047d793          	srli	a5,a5,0x4
   1d49c:	04b7e263          	bltu	a5,a1,1d4e0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x74>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1d4a0:	00359993          	slli	s3,a1,0x3
   1d4a4:	00098513          	addi	a0,s3,0
   1d4a8:	b08f90ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1d4ac:	00050913          	addi	s2,a0,0
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
   1d4b0:	00098613          	addi	a2,s3,0
   1d4b4:	00000593          	addi	a1,zero,0
   1d4b8:	bb8f90ef          	jal	ra,16870 <memset@plt>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1d4bc:	0104b603          	ld	a2,16(s1)
      _M_before_begin._M_nxt = nullptr;
   1d4c0:	0004b823          	sd	zero,16(s1)
      while (__p)
   1d4c4:	08060c63          	beq	a2,zero,1d55c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xf0>
      std::size_t __bbegin_bkt = 0;
   1d4c8:	00000593          	addi	a1,zero,0
	      __new_buckets[__bkt] = &_M_before_begin;
   1d4cc:	01048893          	addi	a7,s1,16
   1d4d0:	0380006f          	jal	zero,1d508 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x9c>
	    _M_single_bucket = nullptr;
   1d4d4:	02053823          	sd	zero,48(a0)
	    return &_M_single_bucket;
   1d4d8:	03050913          	addi	s2,a0,48
   1d4dc:	fe1ff06f          	jal	zero,1d4bc <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x50>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1d4e0:	fff00793          	addi	a5,zero,-1
   1d4e4:	0037d793          	srli	a5,a5,0x3
   1d4e8:	00b7f463          	bgeu	a5,a1,1d4f0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x84>
	      std::__throw_bad_array_new_length();
   1d4ec:	a94f90ef          	jal	ra,16780 <std::__throw_bad_array_new_length()@plt>
	    std::__throw_bad_alloc();
   1d4f0:	960f90ef          	jal	ra,16650 <std::__throw_bad_alloc()@plt>
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
   1d4f4:	00083683          	ld	a3,0(a6)
   1d4f8:	00d73023          	sd	a3,0(a4)
	      __new_buckets[__bkt]->_M_nxt = __p;
   1d4fc:	0007b783          	ld	a5,0(a5)
   1d500:	00e7b023          	sd	a4,0(a5)
      while (__p)
   1d504:	04060c63          	beq	a2,zero,1d55c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xf0>
      _M_next() const noexcept
   1d508:	00060713          	addi	a4,a2,0
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1d50c:	00063603          	ld	a2,0(a2)
    { return __num % __den; }
   1d510:	00873683          	ld	a3,8(a4)
   1d514:	0286f6b3          	remu	a3,a3,s0
	  if (!__new_buckets[__bkt])
   1d518:	00369793          	slli	a5,a3,0x3
   1d51c:	00f907b3          	add	a5,s2,a5
   1d520:	0007b803          	ld	a6,0(a5)
   1d524:	fc0818e3          	bne	a6,zero,1d4f4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x88>
	      __p->_M_nxt = _M_before_begin._M_nxt;
   1d528:	0104b503          	ld	a0,16(s1)
   1d52c:	00a73023          	sd	a0,0(a4)
	      _M_before_begin._M_nxt = __p;
   1d530:	00e4b823          	sd	a4,16(s1)
	      __new_buckets[__bkt] = &_M_before_begin;
   1d534:	0117b023          	sd	a7,0(a5)
	      if (__p->_M_nxt)
   1d538:	00073783          	ld	a5,0(a4)
   1d53c:	00078c63          	beq	a5,zero,1d554 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xe8>
		__new_buckets[__bbegin_bkt] = __p;
   1d540:	00359593          	slli	a1,a1,0x3
   1d544:	00b905b3          	add	a1,s2,a1
   1d548:	00e5b023          	sd	a4,0(a1)
	      __bbegin_bkt = __bkt;
   1d54c:	00068593          	addi	a1,a3,0
   1d550:	fb5ff06f          	jal	zero,1d504 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x98>
   1d554:	00068593          	addi	a1,a3,0
   1d558:	fadff06f          	jal	zero,1d504 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x98>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   1d55c:	0004b503          	ld	a0,0(s1)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   1d560:	03048793          	addi	a5,s1,48
	if (_M_uses_single_bucket(__bkts))
   1d564:	00f50463          	beq	a0,a5,1d56c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x100>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1d568:	a38f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      _M_bucket_count = __bkt_count;
   1d56c:	0084b423          	sd	s0,8(s1)
      _M_buckets = __new_buckets;
   1d570:	0124b023          	sd	s2,0(s1)
    }
   1d574:	02813083          	ld	ra,40(sp)
   1d578:	02013403          	ld	s0,32(sp)
   1d57c:	01813483          	ld	s1,24(sp)
   1d580:	01013903          	ld	s2,16(sp)
   1d584:	00813983          	ld	s3,8(sp)
   1d588:	03010113          	addi	sp,sp,48
   1d58c:	00008067          	jalr	zero,0(ra)

000000000001d590 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1d590:	fc010113          	addi	sp,sp,-64
   1d594:	02113c23          	sd	ra,56(sp)
   1d598:	02813823          	sd	s0,48(sp)
   1d59c:	02913423          	sd	s1,40(sp)
   1d5a0:	03213023          	sd	s2,32(sp)
   1d5a4:	01313c23          	sd	s3,24(sp)
   1d5a8:	01413823          	sd	s4,16(sp)
   1d5ac:	00050413          	addi	s0,a0,0
   1d5b0:	00058493          	addi	s1,a1,0
   1d5b4:	00060993          	addi	s3,a2,0
   1d5b8:	00068913          	addi	s2,a3,0
    { return _M_next_resize; }
   1d5bc:	02853a03          	ld	s4,40(a0)
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
   1d5c0:	00070693          	addi	a3,a4,0
   1d5c4:	01853603          	ld	a2,24(a0)
   1d5c8:	00853583          	ld	a1,8(a0)
   1d5cc:	02050513          	addi	a0,a0,32
   1d5d0:	a90f90ef          	jal	ra,16860 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>
   1d5d4:	00a13023          	sd	a0,0(sp)
   1d5d8:	00b13423          	sd	a1,8(sp)
      if (__do_rehash.first)
   1d5dc:	0ff57513          	andi	a0,a0,255
   1d5e0:	06051063          	bne	a0,zero,1d640 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0xb0>
      if (_M_buckets[__bkt])
   1d5e4:	00349593          	slli	a1,s1,0x3
   1d5e8:	00043783          	ld	a5,0(s0)
   1d5ec:	00b787b3          	add	a5,a5,a1
   1d5f0:	0007b783          	ld	a5,0(a5)
   1d5f4:	08078663          	beq	a5,zero,1d680 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0xf0>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
   1d5f8:	0007b783          	ld	a5,0(a5)
   1d5fc:	00f93023          	sd	a5,0(s2)
	  _M_buckets[__bkt]->_M_nxt = __node;
   1d600:	00043783          	ld	a5,0(s0)
   1d604:	00b787b3          	add	a5,a5,a1
   1d608:	0007b783          	ld	a5,0(a5)
   1d60c:	0127b023          	sd	s2,0(a5)
      ++_M_element_count;
   1d610:	01843783          	ld	a5,24(s0)
   1d614:	00178793          	addi	a5,a5,1
   1d618:	00f43c23          	sd	a5,24(s0)
    }
   1d61c:	00090513          	addi	a0,s2,0
   1d620:	03813083          	ld	ra,56(sp)
   1d624:	03013403          	ld	s0,48(sp)
   1d628:	02813483          	ld	s1,40(sp)
   1d62c:	02013903          	ld	s2,32(sp)
   1d630:	01813983          	ld	s3,24(sp)
   1d634:	01013a03          	ld	s4,16(sp)
   1d638:	04010113          	addi	sp,sp,64
   1d63c:	00008067          	jalr	zero,0(ra)
	  _M_rehash_aux(__bkt_count, __unique_keys{});
   1d640:	00000613          	addi	a2,zero,0
   1d644:	00040513          	addi	a0,s0,0
   1d648:	00026317          	auipc	t1,0x26
   1d64c:	c6833303          	ld	t1,-920(t1) # 432b0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)@@Base+0x25e44>
   1d650:	000300e7          	jalr	ra,0(t1)
   1d654:	0200006f          	jal	zero,1d674 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0xe4>
      __catch(...)
   1d658:	818f90ef          	jal	ra,16670 <__cxa_begin_catch@plt>
    { _M_next_resize = __state; }
   1d65c:	03443423          	sd	s4,40(s0)
	  __throw_exception_again;
   1d660:	a60f90ef          	jal	ra,168c0 <__cxa_rethrow@plt>
      __catch(...)
   1d664:	00050413          	addi	s0,a0,0
   1d668:	ac8f90ef          	jal	ra,16930 <__cxa_end_catch@plt>
   1d66c:	00040513          	addi	a0,s0,0
   1d670:	b20f90ef          	jal	ra,16990 <_Unwind_Resume@plt>
    { return __num % __den; }
   1d674:	00843583          	ld	a1,8(s0)
   1d678:	02b9f4b3          	remu	s1,s3,a1
   1d67c:	f69ff06f          	jal	zero,1d5e4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x54>
	  __node->_M_nxt = _M_before_begin._M_nxt;
   1d680:	01043783          	ld	a5,16(s0)
   1d684:	00f93023          	sd	a5,0(s2)
	  _M_before_begin._M_nxt = __node;
   1d688:	01243823          	sd	s2,16(s0)
	  if (__node->_M_nxt)
   1d68c:	00093783          	ld	a5,0(s2)
   1d690:	02078063          	beq	a5,zero,1d6b0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x120>
   1d694:	0087b783          	ld	a5,8(a5)
   1d698:	00843703          	ld	a4,8(s0)
   1d69c:	02e7f7b3          	remu	a5,a5,a4
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
   1d6a0:	00043703          	ld	a4,0(s0)
   1d6a4:	00379793          	slli	a5,a5,0x3
   1d6a8:	00f707b3          	add	a5,a4,a5
   1d6ac:	0127b023          	sd	s2,0(a5)
	  _M_buckets[__bkt] = &_M_before_begin;
   1d6b0:	00043783          	ld	a5,0(s0)
   1d6b4:	00b787b3          	add	a5,a5,a1
   1d6b8:	01040713          	addi	a4,s0,16
   1d6bc:	00e7b023          	sd	a4,0(a5)
   1d6c0:	f51ff06f          	jal	zero,1d610 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x80>

000000000001d6c4 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)>:
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
   1d6c4:	fd010113          	addi	sp,sp,-48
   1d6c8:	02113423          	sd	ra,40(sp)
   1d6cc:	02813023          	sd	s0,32(sp)
   1d6d0:	00913c23          	sd	s1,24(sp)
   1d6d4:	01213823          	sd	s2,16(sp)
   1d6d8:	01313423          	sd	s3,8(sp)
   1d6dc:	01413023          	sd	s4,0(sp)
   1d6e0:	00050913          	addi	s2,a0,0
   1d6e4:	00058413          	addi	s0,a1,0
	return _M_hash()(__k);
   1d6e8:	0005ba03          	ld	s4,0(a1)
    { return __num % __den; }
   1d6ec:	00853983          	ld	s3,8(a0)
   1d6f0:	033a79b3          	remu	s3,s4,s3
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1d6f4:	000a0693          	addi	a3,s4,0
   1d6f8:	00058613          	addi	a2,a1,0
   1d6fc:	00098593          	addi	a1,s3,0
   1d700:	00026317          	auipc	t1,0x26
   1d704:	e6033303          	ld	t1,-416(t1) # 43560 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x26578>
   1d708:	000300e7          	jalr	ra,0(t1)
	if (__before_n)
   1d70c:	02050863          	beq	a0,zero,1d73c <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x78>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   1d710:	00053783          	ld	a5,0(a0)
	return __node->_M_v().second;
   1d714:	01078513          	addi	a0,a5,16
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
   1d718:	02078263          	beq	a5,zero,1d73c <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x78>
    }
   1d71c:	02813083          	ld	ra,40(sp)
   1d720:	02013403          	ld	s0,32(sp)
   1d724:	01813483          	ld	s1,24(sp)
   1d728:	01013903          	ld	s2,16(sp)
   1d72c:	00813983          	ld	s3,8(sp)
   1d730:	00013a03          	ld	s4,0(sp)
   1d734:	03010113          	addi	sp,sp,48
   1d738:	00008067          	jalr	zero,0(ra)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1d73c:	03800513          	addi	a0,zero,56
   1d740:	870f90ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1d744:	00050493          	addi	s1,a0,0
    _Hash_node_base() noexcept : _M_nxt() { }
   1d748:	00053023          	sd	zero,0(a0)
   1d74c:	00043783          	ld	a5,0(s0)
   1d750:	00f53423          	sd	a5,8(a0)
  abbrev_entry() : code(0) {}
   1d754:	00053823          	sd	zero,16(a0)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1d758:	02053023          	sd	zero,32(a0)
   1d75c:	02053423          	sd	zero,40(a0)
   1d760:	02053823          	sd	zero,48(a0)
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
   1d764:	00100713          	addi	a4,zero,1
   1d768:	00050693          	addi	a3,a0,0
   1d76c:	000a0613          	addi	a2,s4,0
   1d770:	00098593          	addi	a1,s3,0
   1d774:	00090513          	addi	a0,s2,0
   1d778:	00026317          	auipc	t1,0x26
   1d77c:	e0033303          	ld	t1,-512(t1) # 43578 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)@@Base+0x25fe8>
   1d780:	000300e7          	jalr	ra,0(t1)
      return __pos->second;
   1d784:	01050513          	addi	a0,a0,16
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1d788:	f95ff06f          	jal	zero,1d71c <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x58>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1d78c:	00050413          	addi	s0,a0,0
   1d790:	0204b503          	ld	a0,32(s1)
	if (__p)
   1d794:	00050463          	beq	a0,zero,1d79c <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0xd8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1d798:	808f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1d79c:	00048513          	addi	a0,s1,0
   1d7a0:	800f90ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1d7a4:	00040513          	addi	a0,s0,0
   1d7a8:	9e8f90ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001d7ac <dwarf::cursor::skip_initial_length()>:
  pos = begin + length;
  return make_shared<section>(sec->type, begin, length, sec->ord, fmt);
}

void cursor::skip_initial_length() {
  switch (sec->fmt) {
   1d7ac:	00053783          	ld	a5,0(a0)
   1d7b0:	0187a783          	lw	a5,24(a5)
   1d7b4:	00100713          	addi	a4,zero,1
   1d7b8:	00e79a63          	bne	a5,a4,1d7cc <dwarf::cursor::skip_initial_length()+0x20>
  case format::dwarf32:
    pos += sizeof(uword);
   1d7bc:	01053783          	ld	a5,16(a0)
   1d7c0:	00478793          	addi	a5,a5,4
   1d7c4:	00f53823          	sd	a5,16(a0)
   1d7c8:	00008067          	jalr	zero,0(ra)
  switch (sec->fmt) {
   1d7cc:	00200713          	addi	a4,zero,2
   1d7d0:	00e79863          	bne	a5,a4,1d7e0 <dwarf::cursor::skip_initial_length()+0x34>
    break;
  case format::dwarf64:
    pos += sizeof(uword) + sizeof(uint64_t);
   1d7d4:	01053783          	ld	a5,16(a0)
   1d7d8:	00c78793          	addi	a5,a5,12
    break;
   1d7dc:	fe9ff06f          	jal	zero,1d7c4 <dwarf::cursor::skip_initial_length()+0x18>
void cursor::skip_initial_length() {
   1d7e0:	fe010113          	addi	sp,sp,-32
   1d7e4:	00113c23          	sd	ra,24(sp)
   1d7e8:	00813823          	sd	s0,16(sp)
   1d7ec:	00913423          	sd	s1,8(sp)
  default:
    throw logic_error("cannot skip initial length with unknown format");
   1d7f0:	01000513          	addi	a0,zero,16
   1d7f4:	e9df80ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1d7f8:	00050493          	addi	s1,a0,0
   1d7fc:	0001a597          	auipc	a1,0x1a
   1d800:	2dc58593          	addi	a1,a1,732 # 37ad8 <std::piecewise_construct+0x8>
   1d804:	89cf90ef          	jal	ra,168a0 <std::logic_error::logic_error(char const*)@plt>
   1d808:	00026617          	auipc	a2,0x26
   1d80c:	c8063603          	ld	a2,-896(a2) # 43488 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   1d810:	00026597          	auipc	a1,0x26
   1d814:	d805b583          	ld	a1,-640(a1) # 43590 <typeinfo for std::logic_error@GLIBCXX_3.4+0xd40>
   1d818:	00048513          	addi	a0,s1,0
   1d81c:	944f90ef          	jal	ra,16960 <__cxa_throw@plt>
   1d820:	00050413          	addi	s0,a0,0
   1d824:	00048513          	addi	a0,s1,0
   1d828:	f29f80ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1d82c:	00040513          	addi	a0,s0,0
   1d830:	960f90ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001d834 <dwarf::cursor::cstr(unsigned long*)>:
  const char *p = this->cstr(&size);
  out.resize(size);
  memmove(&out.front(), p, size);
}

const char *cursor::cstr(size_t *size_out) {
   1d834:	00050613          	addi	a2,a0,0
  // Scan string size
  const char *p = pos;
   1d838:	01053503          	ld	a0,16(a0)
      { return _M_ptr; }
   1d83c:	00063803          	ld	a6,0(a2)
  while (pos < sec->end && *pos)
   1d840:	01083703          	ld	a4,16(a6)
   1d844:	04e57063          	bgeu	a0,a4,1d884 <dwarf::cursor::cstr(unsigned long*)+0x50>
   1d848:	00050793          	addi	a5,a0,0
   1d84c:	0007c683          	lbu	a3,0(a5)
   1d850:	00068a63          	beq	a3,zero,1d864 <dwarf::cursor::cstr(unsigned long*)+0x30>
    pos++;
   1d854:	00178793          	addi	a5,a5,1
   1d858:	00f63823          	sd	a5,16(a2)
  while (pos < sec->end && *pos)
   1d85c:	01083703          	ld	a4,16(a6)
   1d860:	fee7e6e3          	bltu	a5,a4,1d84c <dwarf::cursor::cstr(unsigned long*)+0x18>
  if (pos == sec->end)
   1d864:	02e78463          	beq	a5,a4,1d88c <dwarf::cursor::cstr(unsigned long*)+0x58>
    throw format_error("unterminated string");
  if (size_out)
   1d868:	00058663          	beq	a1,zero,1d874 <dwarf::cursor::cstr(unsigned long*)+0x40>
    *size_out = pos - p;
   1d86c:	40a787b3          	sub	a5,a5,a0
   1d870:	00f5b023          	sd	a5,0(a1)
  pos++;
   1d874:	01063783          	ld	a5,16(a2)
   1d878:	00178793          	addi	a5,a5,1
   1d87c:	00f63823          	sd	a5,16(a2)
  return p;
}
   1d880:	00008067          	jalr	zero,0(ra)
  while (pos < sec->end && *pos)
   1d884:	00050793          	addi	a5,a0,0
   1d888:	fddff06f          	jal	zero,1d864 <dwarf::cursor::cstr(unsigned long*)+0x30>
const char *cursor::cstr(size_t *size_out) {
   1d88c:	fe010113          	addi	sp,sp,-32
   1d890:	00113c23          	sd	ra,24(sp)
   1d894:	00813823          	sd	s0,16(sp)
   1d898:	00913423          	sd	s1,8(sp)
    throw format_error("unterminated string");
   1d89c:	01000513          	addi	a0,zero,16
   1d8a0:	df1f80ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1d8a4:	00050413          	addi	s0,a0,0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   1d8a8:	0001a597          	auipc	a1,0x1a
   1d8ac:	26058593          	addi	a1,a1,608 # 37b08 <std::piecewise_construct+0x38>
   1d8b0:	960f90ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   1d8b4:	00026797          	auipc	a5,0x26
   1d8b8:	cbc7b783          	ld	a5,-836(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   1d8bc:	01078793          	addi	a5,a5,16
   1d8c0:	00f43023          	sd	a5,0(s0)
   1d8c4:	00026617          	auipc	a2,0x26
   1d8c8:	ad463603          	ld	a2,-1324(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   1d8cc:	00026597          	auipc	a1,0x26
   1d8d0:	9fc5b583          	ld	a1,-1540(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   1d8d4:	00040513          	addi	a0,s0,0
   1d8d8:	888f90ef          	jal	ra,16960 <__cxa_throw@plt>
   1d8dc:	00050493          	addi	s1,a0,0
   1d8e0:	00040513          	addi	a0,s0,0
   1d8e4:	e6df80ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1d8e8:	00048513          	addi	a0,s1,0
   1d8ec:	8a4f90ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001d8f0 <dwarf::cursor::string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
void cursor::string(std::string &out) {
   1d8f0:	fd010113          	addi	sp,sp,-48
   1d8f4:	02113423          	sd	ra,40(sp)
   1d8f8:	02813023          	sd	s0,32(sp)
   1d8fc:	00913c23          	sd	s1,24(sp)
   1d900:	00058413          	addi	s0,a1,0
  const char *p = this->cstr(&size);
   1d904:	00810593          	addi	a1,sp,8
   1d908:	f2dff0ef          	jal	ra,1d834 <dwarf::cursor::cstr(unsigned long*)>
   1d90c:	00050493          	addi	s1,a0,0
      { this->resize(__n, _CharT()); }
   1d910:	00000613          	addi	a2,zero,0
   1d914:	00813583          	ld	a1,8(sp)
   1d918:	00040513          	addi	a0,s0,0
   1d91c:	d05f80ef          	jal	ra,16620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@plt>
  memmove(&out.front(), p, size);
   1d920:	00813603          	ld	a2,8(sp)
   1d924:	00048593          	addi	a1,s1,0
   1d928:	00043503          	ld	a0,0(s0)
   1d92c:	8f4f90ef          	jal	ra,16a20 <memmove@plt>
}
   1d930:	02813083          	ld	ra,40(sp)
   1d934:	02013403          	ld	s0,32(sp)
   1d938:	01813483          	ld	s1,24(sp)
   1d93c:	03010113          	addi	sp,sp,48
   1d940:	00008067          	jalr	zero,0(ra)

000000000001d944 <dwarf::cursor::underflow()>:
  default:
    throw format_error("unknown form " + to_string(form));
  }
}

void cursor::underflow() {
   1d944:	fe010113          	addi	sp,sp,-32
   1d948:	00113c23          	sd	ra,24(sp)
   1d94c:	00813823          	sd	s0,16(sp)
   1d950:	00913423          	sd	s1,8(sp)
  throw underflow_error("cannot read past end of DWARF section");
   1d954:	01000513          	addi	a0,zero,16
   1d958:	d39f80ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1d95c:	00050413          	addi	s0,a0,0
   1d960:	0001a597          	auipc	a1,0x1a
   1d964:	1c058593          	addi	a1,a1,448 # 37b20 <std::piecewise_construct+0x50>
   1d968:	918f90ef          	jal	ra,16a80 <std::underflow_error::underflow_error(char const*)@plt>
   1d96c:	00026617          	auipc	a2,0x26
   1d970:	c8c63603          	ld	a2,-884(a2) # 435f8 <std::underflow_error::~underflow_error()@GLIBCXX_3.4>
   1d974:	00026597          	auipc	a1,0x26
   1d978:	a9c5b583          	ld	a1,-1380(a1) # 43410 <typeinfo for std::underflow_error@GLIBCXX_3.4>
   1d97c:	00040513          	addi	a0,s0,0
   1d980:	fe1f80ef          	jal	ra,16960 <__cxa_throw@plt>
   1d984:	00050493          	addi	s1,a0,0
   1d988:	00040513          	addi	a0,s0,0
   1d98c:	dc5f80ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1d990:	00048513          	addi	a0,s1,0
   1d994:	ffdf80ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001d998 <dwarf::cursor::sleb128()>:
   1d998:	00053583          	ld	a1,0(a0)
  unsigned shift = 0;
   1d99c:	00000713          	addi	a4,zero,0
  uint64_t result = 0;
   1d9a0:	00000613          	addi	a2,zero,0
  while (pos < sec->end) {
   1d9a4:	01053783          	ld	a5,16(a0)
   1d9a8:	0105b683          	ld	a3,16(a1)
   1d9ac:	04d7f863          	bgeu	a5,a3,1d9fc <dwarf::cursor::sleb128()+0x64>
    uint8_t byte = *(uint8_t *)(pos++);
   1d9b0:	00178693          	addi	a3,a5,1
   1d9b4:	00d53823          	sd	a3,16(a0)
   1d9b8:	0007c683          	lbu	a3,0(a5)
    result |= (uint64_t)(byte & 0x7f) << shift;
   1d9bc:	07f6f793          	andi	a5,a3,127
   1d9c0:	00e797b3          	sll	a5,a5,a4
   1d9c4:	00f66633          	or	a2,a2,a5
    shift += 7;
   1d9c8:	0077071b          	addiw	a4,a4,7
    if ((byte & 0x80) == 0) {
   1d9cc:	0186979b          	slliw	a5,a3,0x18
   1d9d0:	4187d79b          	sraiw	a5,a5,0x18
   1d9d4:	fc07c8e3          	blt	a5,zero,1d9a4 <dwarf::cursor::sleb128()+0xc>
      if (shift < sizeof(result) * 8 && (byte & 0x40))
   1d9d8:	03f00793          	addi	a5,zero,63
   1d9dc:	00e7ec63          	bltu	a5,a4,1d9f4 <dwarf::cursor::sleb128()+0x5c>
   1d9e0:	0406f693          	andi	a3,a3,64
   1d9e4:	00068863          	beq	a3,zero,1d9f4 <dwarf::cursor::sleb128()+0x5c>
        result |= -((uint64_t)1 << shift);
   1d9e8:	fff00793          	addi	a5,zero,-1
   1d9ec:	00e797b3          	sll	a5,a5,a4
   1d9f0:	00f66633          	or	a2,a2,a5
      return result;
   1d9f4:	00060513          	addi	a0,a2,0
}
   1d9f8:	00008067          	jalr	zero,0(ra)
int64_t cursor::sleb128() {
   1d9fc:	ff010113          	addi	sp,sp,-16
   1da00:	00113423          	sd	ra,8(sp)
  underflow();
   1da04:	f41ff0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
  return 0;
   1da08:	00000513          	addi	a0,zero,0
}
   1da0c:	00813083          	ld	ra,8(sp)
   1da10:	01010113          	addi	sp,sp,16
   1da14:	00008067          	jalr	zero,0(ra)

000000000001da18 <dwarf::cursor::skip_form(dwarf::DW_FORM)>:
void cursor::skip_form(DW_FORM form) {
   1da18:	fa010113          	addi	sp,sp,-96
   1da1c:	04113c23          	sd	ra,88(sp)
   1da20:	04813823          	sd	s0,80(sp)
   1da24:	04913423          	sd	s1,72(sp)
   1da28:	05213023          	sd	s2,64(sp)
   1da2c:	00058493          	addi	s1,a1,0
  switch (form) {
   1da30:	02000793          	addi	a5,zero,32
   1da34:	34b7ec63          	bltu	a5,a1,1dd8c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x374>
   1da38:	00050413          	addi	s0,a0,0
   1da3c:	00259793          	slli	a5,a1,0x2
   1da40:	0001a717          	auipc	a4,0x1a
   1da44:	19070713          	addi	a4,a4,400 # 37bd0 <std::piecewise_construct+0x100>
   1da48:	00e787b3          	add	a5,a5,a4
   1da4c:	0007a783          	lw	a5,0(a5)
   1da50:	00e787b3          	add	a5,a5,a4
   1da54:	00078067          	jalr	zero,0(a5)
    while (pos < sec->end) {
   1da58:	01053783          	ld	a5,16(a0)
   1da5c:	00053503          	ld	a0,0(a0)
   1da60:	01053703          	ld	a4,16(a0)
    std::uint64_t result = 0;
   1da64:	00000593          	addi	a1,zero,0
    int shift = 0;
   1da68:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   1da6c:	02e7fa63          	bgeu	a5,a4,1daa0 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x88>
      uint8_t byte = *(uint8_t *)(pos++);
   1da70:	00178793          	addi	a5,a5,1
   1da74:	00f43823          	sd	a5,16(s0)
   1da78:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1da7c:	07f77693          	andi	a3,a4,127
   1da80:	00c696b3          	sll	a3,a3,a2
   1da84:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   1da88:	0187171b          	slliw	a4,a4,0x18
   1da8c:	4187571b          	sraiw	a4,a4,0x18
   1da90:	00075e63          	bge	a4,zero,1daac <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x94>
      shift += 7;
   1da94:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   1da98:	01053703          	ld	a4,16(a0)
   1da9c:	fce7eae3          	bltu	a5,a4,1da70 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x58>
    underflow();
   1daa0:	00040513          	addi	a0,s0,0
   1daa4:	ea1ff0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    return 0;
   1daa8:	00000593          	addi	a1,zero,0
    skip_form((DW_FORM)uleb128());
   1daac:	0005859b          	addiw	a1,a1,0
   1dab0:	00040513          	addi	a0,s0,0
   1dab4:	f65ff0ef          	jal	ra,1da18 <dwarf::cursor::skip_form(dwarf::DW_FORM)>
    break;
   1dab8:	0640006f          	jal	zero,1db1c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    while (pos < sec->end) {
   1dabc:	01053783          	ld	a5,16(a0)
   1dac0:	00053503          	ld	a0,0(a0)
   1dac4:	01053703          	ld	a4,16(a0)
    std::uint64_t result = 0;
   1dac8:	00000593          	addi	a1,zero,0
    int shift = 0;
   1dacc:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   1dad0:	02e7fa63          	bgeu	a5,a4,1db04 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xec>
      uint8_t byte = *(uint8_t *)(pos++);
   1dad4:	00178793          	addi	a5,a5,1
   1dad8:	00f43823          	sd	a5,16(s0)
   1dadc:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1dae0:	07f77693          	andi	a3,a4,127
   1dae4:	00c696b3          	sll	a3,a3,a2
   1dae8:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   1daec:	0187171b          	slliw	a4,a4,0x18
   1daf0:	4187571b          	sraiw	a4,a4,0x18
   1daf4:	00075e63          	bge	a4,zero,1db10 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xf8>
      shift += 7;
   1daf8:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   1dafc:	01053703          	ld	a4,16(a0)
   1db00:	fce7eae3          	bltu	a5,a4,1dad4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xbc>
    underflow();
   1db04:	00040513          	addi	a0,s0,0
   1db08:	e3dff0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    return 0;
   1db0c:	00000593          	addi	a1,zero,0
    pos += tmp;
   1db10:	01043783          	ld	a5,16(s0)
   1db14:	00b787b3          	add	a5,a5,a1
   1db18:	00f43823          	sd	a5,16(s0)
}
   1db1c:	05813083          	ld	ra,88(sp)
   1db20:	05013403          	ld	s0,80(sp)
   1db24:	04813483          	ld	s1,72(sp)
   1db28:	04013903          	ld	s2,64(sp)
   1db2c:	06010113          	addi	sp,sp,96
   1db30:	00008067          	jalr	zero,0(ra)
    pos += sec->addr_size;
   1db34:	00053783          	ld	a5,0(a0)
   1db38:	0207e703          	lwu	a4,32(a5)
   1db3c:	01053783          	ld	a5,16(a0)
   1db40:	00e787b3          	add	a5,a5,a4
   1db44:	00f53823          	sd	a5,16(a0)
    break;
   1db48:	fd5ff06f          	jal	zero,1db1c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    switch (sec->fmt) {
   1db4c:	00053783          	ld	a5,0(a0)
   1db50:	0187a783          	lw	a5,24(a5)
   1db54:	00200713          	addi	a4,zero,2
   1db58:	02e78263          	beq	a5,a4,1db7c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x164>
   1db5c:	fcf740e3          	blt	a4,a5,1db1c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
   1db60:	02078663          	beq	a5,zero,1db8c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x174>
   1db64:	00100713          	addi	a4,zero,1
   1db68:	fae79ae3          	bne	a5,a4,1db1c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
      pos += 4;
   1db6c:	01053783          	ld	a5,16(a0)
   1db70:	00478793          	addi	a5,a5,4
   1db74:	00f53823          	sd	a5,16(a0)
      break;
   1db78:	fa5ff06f          	jal	zero,1db1c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
      pos += 8;
   1db7c:	01053783          	ld	a5,16(a0)
   1db80:	00878793          	addi	a5,a5,8
   1db84:	00f53823          	sd	a5,16(a0)
      break;
   1db88:	f95ff06f          	jal	zero,1db1c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
      throw logic_error("cannot read form with unknown format");
   1db8c:	01000513          	addi	a0,zero,16
   1db90:	b01f80ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1db94:	00050413          	addi	s0,a0,0
   1db98:	0001a597          	auipc	a1,0x1a
   1db9c:	fb058593          	addi	a1,a1,-80 # 37b48 <std::piecewise_construct+0x78>
   1dba0:	d01f80ef          	jal	ra,168a0 <std::logic_error::logic_error(char const*)@plt>
   1dba4:	00026617          	auipc	a2,0x26
   1dba8:	8e463603          	ld	a2,-1820(a2) # 43488 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   1dbac:	00026597          	auipc	a1,0x26
   1dbb0:	9e45b583          	ld	a1,-1564(a1) # 43590 <typeinfo for std::logic_error@GLIBCXX_3.4+0xd40>
   1dbb4:	00040513          	addi	a0,s0,0
   1dbb8:	da9f80ef          	jal	ra,16960 <__cxa_throw@plt>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1dbbc:	00053783          	ld	a5,0(a0)
   1dbc0:	0107b703          	ld	a4,16(a5)
   1dbc4:	01053783          	ld	a5,16(a0)
   1dbc8:	00e7e463          	bltu	a5,a4,1dbd0 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x1b8>
      underflow();
   1dbcc:	d79ff0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1dbd0:	01043783          	ld	a5,16(s0)
    if (sec->ord == byte_order::lsb) {
   1dbd4:	00043703          	ld	a4,0(s0)
   1dbd8:	01c72703          	lw	a4,28(a4)
   1dbdc:	28070c63          	beq	a4,zero,1de74 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x45c>
        val = (val << 8) | (uint64_t)p[i];
   1dbe0:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1dbe4:	2940006f          	jal	zero,1de78 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x460>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1dbe8:	00053783          	ld	a5,0(a0)
   1dbec:	0107b703          	ld	a4,16(a5)
   1dbf0:	01053783          	ld	a5,16(a0)
   1dbf4:	40f70633          	sub	a2,a4,a5
   1dbf8:	00100693          	addi	a3,zero,1
   1dbfc:	00c6f463          	bgeu	a3,a2,1dc04 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x1ec>
   1dc00:	00e7e663          	bltu	a5,a4,1dc0c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x1f4>
      underflow();
   1dc04:	00040513          	addi	a0,s0,0
   1dc08:	d3dff0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1dc0c:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1dc10:	00043783          	ld	a5,0(s0)
   1dc14:	01c7a783          	lw	a5,28(a5)
   1dc18:	02079263          	bne	a5,zero,1dc3c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x224>
        val |= ((uint64_t)p[i]) << (i * 8);
   1dc1c:	00174783          	lbu	a5,1(a4)
   1dc20:	00879793          	slli	a5,a5,0x8
   1dc24:	00074683          	lbu	a3,0(a4)
   1dc28:	00d7e7b3          	or	a5,a5,a3
    pos += tmp;
   1dc2c:	00278793          	addi	a5,a5,2
   1dc30:	00f70733          	add	a4,a4,a5
   1dc34:	00e43823          	sd	a4,16(s0)
    break;
   1dc38:	ee5ff06f          	jal	zero,1db1c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
        val = (val << 8) | (uint64_t)p[i];
   1dc3c:	00074783          	lbu	a5,0(a4)
   1dc40:	00879793          	slli	a5,a5,0x8
   1dc44:	00174683          	lbu	a3,1(a4)
   1dc48:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1dc4c:	fe1ff06f          	jal	zero,1dc2c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x214>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1dc50:	00053783          	ld	a5,0(a0)
   1dc54:	0107b703          	ld	a4,16(a5)
   1dc58:	01053783          	ld	a5,16(a0)
   1dc5c:	40f70633          	sub	a2,a4,a5
   1dc60:	00300693          	addi	a3,zero,3
   1dc64:	00c6f463          	bgeu	a3,a2,1dc6c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x254>
   1dc68:	00e7e663          	bltu	a5,a4,1dc74 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x25c>
      underflow();
   1dc6c:	00040513          	addi	a0,s0,0
   1dc70:	cd5ff0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1dc74:	01043583          	ld	a1,16(s0)
    if (sec->ord == byte_order::lsb) {
   1dc78:	00043783          	ld	a5,0(s0)
   1dc7c:	01c7a783          	lw	a5,28(a5)
   1dc80:	04079063          	bne	a5,zero,1dcc0 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2a8>
   1dc84:	00058613          	addi	a2,a1,0
   1dc88:	00000713          	addi	a4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1dc8c:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1dc90:	00064683          	lbu	a3,0(a2)
   1dc94:	00e696b3          	sll	a3,a3,a4
   1dc98:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1dc9c:	00160613          	addi	a2,a2,1
   1dca0:	0087071b          	addiw	a4,a4,8
   1dca4:	fea716e3          	bne	a4,a0,1dc90 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x278>
    pos += tmp;
   1dca8:	02079793          	slli	a5,a5,0x20
   1dcac:	0207d793          	srli	a5,a5,0x20
   1dcb0:	00478793          	addi	a5,a5,4
   1dcb4:	00f585b3          	add	a1,a1,a5
   1dcb8:	00b43823          	sd	a1,16(s0)
    break;
   1dcbc:	e61ff06f          	jal	zero,1db1c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
   1dcc0:	00058713          	addi	a4,a1,0
   1dcc4:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1dcc8:	00000793          	addi	a5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1dccc:	00879793          	slli	a5,a5,0x8
   1dcd0:	00074683          	lbu	a3,0(a4)
   1dcd4:	00f6e7b3          	or	a5,a3,a5
      for (unsigned i = 0; i < sizeof(T); i++)
   1dcd8:	00170713          	addi	a4,a4,1
   1dcdc:	fee618e3          	bne	a2,a4,1dccc <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2b4>
   1dce0:	fc9ff06f          	jal	zero,1dca8 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x290>
    pos += 1;
   1dce4:	01053783          	ld	a5,16(a0)
   1dce8:	00178793          	addi	a5,a5,1
   1dcec:	00f53823          	sd	a5,16(a0)
    break;
   1dcf0:	e2dff06f          	jal	zero,1db1c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    pos += 2;
   1dcf4:	01053783          	ld	a5,16(a0)
   1dcf8:	00278793          	addi	a5,a5,2
   1dcfc:	00f53823          	sd	a5,16(a0)
    break;
   1dd00:	e1dff06f          	jal	zero,1db1c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    pos += 4;
   1dd04:	01053783          	ld	a5,16(a0)
   1dd08:	00478793          	addi	a5,a5,4
   1dd0c:	00f53823          	sd	a5,16(a0)
    break;
   1dd10:	e0dff06f          	jal	zero,1db1c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    pos += 8;
   1dd14:	01053783          	ld	a5,16(a0)
   1dd18:	00878793          	addi	a5,a5,8
   1dd1c:	00f53823          	sd	a5,16(a0)
    break;
   1dd20:	dfdff06f          	jal	zero,1db1c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    while (pos < sec->end && (*(uint8_t *)pos & 0x80))
   1dd24:	01053783          	ld	a5,16(a0)
   1dd28:	00053683          	ld	a3,0(a0)
   1dd2c:	0106b703          	ld	a4,16(a3)
   1dd30:	00e7fe63          	bgeu	a5,a4,1dd4c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x334>
   1dd34:	00078703          	lb	a4,0(a5)
   1dd38:	00075a63          	bge	a4,zero,1dd4c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x334>
      pos++;
   1dd3c:	00178793          	addi	a5,a5,1
   1dd40:	00f43823          	sd	a5,16(s0)
    while (pos < sec->end && (*(uint8_t *)pos & 0x80))
   1dd44:	0106b703          	ld	a4,16(a3)
   1dd48:	fee7e6e3          	bltu	a5,a4,1dd34 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x31c>
    pos++;
   1dd4c:	00178793          	addi	a5,a5,1
   1dd50:	00f43823          	sd	a5,16(s0)
    break;
   1dd54:	dc9ff06f          	jal	zero,1db1c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    while (pos < sec->end && *pos)
   1dd58:	01053783          	ld	a5,16(a0)
   1dd5c:	00053683          	ld	a3,0(a0)
   1dd60:	0106b703          	ld	a4,16(a3)
   1dd64:	00e7fe63          	bgeu	a5,a4,1dd80 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x368>
   1dd68:	0007c703          	lbu	a4,0(a5)
   1dd6c:	00070a63          	beq	a4,zero,1dd80 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x368>
      pos++;
   1dd70:	00178793          	addi	a5,a5,1
   1dd74:	00f43823          	sd	a5,16(s0)
    while (pos < sec->end && *pos)
   1dd78:	0106b703          	ld	a4,16(a3)
   1dd7c:	fee7e6e3          	bltu	a5,a4,1dd68 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x350>
    pos++;
   1dd80:	00178793          	addi	a5,a5,1
   1dd84:	00f43823          	sd	a5,16(s0)
    break;
   1dd88:	d95ff06f          	jal	zero,1db1c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    throw format_error("unknown form " + to_string(form));
   1dd8c:	01000513          	addi	a0,zero,16
   1dd90:	901f80ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1dd94:	00050913          	addi	s2,a0,0
   1dd98:	00048593          	addi	a1,s1,0
   1dd9c:	00010513          	addi	a0,sp,0
   1dda0:	2e1120ef          	jal	ra,30880 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1dda4:	0001a617          	auipc	a2,0x1a
   1dda8:	dcc60613          	addi	a2,a2,-564 # 37b70 <std::piecewise_construct+0xa0>
   1ddac:	00000593          	addi	a1,zero,0
   1ddb0:	00010513          	addi	a0,sp,0
   1ddb4:	84df80ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1ddb8:	00050593          	addi	a1,a0,0
   1ddbc:	02010413          	addi	s0,sp,32
   1ddc0:	00040513          	addi	a0,s0,0
   1ddc4:	90df80ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   1ddc8:	00040593          	addi	a1,s0,0
   1ddcc:	00090513          	addi	a0,s2,0
   1ddd0:	a61f80ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1ddd4:	00025797          	auipc	a5,0x25
   1ddd8:	79c7b783          	ld	a5,1948(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   1dddc:	01078793          	addi	a5,a5,16
   1dde0:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   1dde4:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   1dde8:	03010793          	addi	a5,sp,48
   1ddec:	00f50463          	beq	a0,a5,1ddf4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x3dc>
   1ddf0:	9b1f80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ddf4:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   1ddf8:	01010793          	addi	a5,sp,16
   1ddfc:	00f50463          	beq	a0,a5,1de04 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x3ec>
   1de00:	9a1f80ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1de04:	00025617          	auipc	a2,0x25
   1de08:	59463603          	ld	a2,1428(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   1de0c:	00025597          	auipc	a1,0x25
   1de10:	4bc5b583          	ld	a1,1212(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   1de14:	00090513          	addi	a0,s2,0
   1de18:	b49f80ef          	jal	ra,16960 <__cxa_throw@plt>
      throw logic_error("cannot read form with unknown format");
   1de1c:	00050493          	addi	s1,a0,0
   1de20:	00040513          	addi	a0,s0,0
   1de24:	92df80ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1de28:	00048513          	addi	a0,s1,0
   1de2c:	b65f80ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1de30:	00050413          	addi	s0,a0,0
   1de34:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   1de38:	03010793          	addi	a5,sp,48
   1de3c:	00f50463          	beq	a0,a5,1de44 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x42c>
   1de40:	961f80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1de44:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   1de48:	01010793          	addi	a5,sp,16
   1de4c:	00f50463          	beq	a0,a5,1de54 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x43c>
   1de50:	951f80ef          	jal	ra,167a0 <operator delete(void*)@plt>
    throw format_error("unknown form " + to_string(form));
   1de54:	00090513          	addi	a0,s2,0
   1de58:	8f9f80ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1de5c:	00040513          	addi	a0,s0,0
   1de60:	b31f80ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1de64:	00050413          	addi	s0,a0,0
   1de68:	fddff06f          	jal	zero,1de44 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x42c>
   1de6c:	00050413          	addi	s0,a0,0
   1de70:	fe5ff06f          	jal	zero,1de54 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x43c>
        val |= ((uint64_t)p[i]) << (i * 8);
   1de74:	0007c703          	lbu	a4,0(a5)
    pos += tmp;
   1de78:	00170713          	addi	a4,a4,1
   1de7c:	00e787b3          	add	a5,a5,a4
   1de80:	00f43823          	sd	a5,16(s0)
    break;
   1de84:	c99ff06f          	jal	zero,1db1c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>

000000000001de88 <dwarf::cursor::subsection()>:
shared_ptr<section> cursor::subsection() {
   1de88:	fd010113          	addi	sp,sp,-48
   1de8c:	02113423          	sd	ra,40(sp)
   1de90:	02813023          	sd	s0,32(sp)
   1de94:	00913c23          	sd	s1,24(sp)
   1de98:	01213823          	sd	s2,16(sp)
   1de9c:	01313423          	sd	s3,8(sp)
   1dea0:	01413023          	sd	s4,0(sp)
   1dea4:	00050913          	addi	s2,a0,0
   1dea8:	00058493          	addi	s1,a1,0
  const char *begin = pos;
   1deac:	0105b983          	ld	s3,16(a1)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1deb0:	0005b783          	ld	a5,0(a1)
   1deb4:	0107b783          	ld	a5,16(a5)
   1deb8:	413786b3          	sub	a3,a5,s3
   1debc:	00300713          	addi	a4,zero,3
   1dec0:	00d77463          	bgeu	a4,a3,1dec8 <dwarf::cursor::subsection()+0x40>
   1dec4:	00f9e663          	bltu	s3,a5,1ded0 <dwarf::cursor::subsection()+0x48>
      underflow();
   1dec8:	00048513          	addi	a0,s1,0
   1decc:	a79ff0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1ded0:	0104b583          	ld	a1,16(s1)
   1ded4:	0004b503          	ld	a0,0(s1)
    if (sec->ord == byte_order::lsb) {
   1ded8:	01c52783          	lw	a5,28(a0)
   1dedc:	0e079a63          	bne	a5,zero,1dfd0 <dwarf::cursor::subsection()+0x148>
   1dee0:	00058613          	addi	a2,a1,0
   1dee4:	00000713          	addi	a4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1dee8:	02000813          	addi	a6,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1deec:	00064683          	lbu	a3,0(a2)
   1def0:	00e696b3          	sll	a3,a3,a4
   1def4:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1def8:	00160613          	addi	a2,a2,1
   1defc:	0087071b          	addiw	a4,a4,8
   1df00:	ff0716e3          	bne	a4,a6,1deec <dwarf::cursor::subsection()+0x64>
    pos += sizeof(T);
   1df04:	00458593          	addi	a1,a1,4
   1df08:	00b4b823          	sd	a1,16(s1)
   1df0c:	02079793          	slli	a5,a5,0x20
   1df10:	0207d793          	srli	a5,a5,0x20
  if (length < 0xfffffff0) {
   1df14:	00100713          	addi	a4,zero,1
   1df18:	02071713          	slli	a4,a4,0x20
   1df1c:	fef70713          	addi	a4,a4,-17
   1df20:	0cf76a63          	bltu	a4,a5,1dff4 <dwarf::cursor::subsection()+0x16c>
    length += sizeof(uword);
   1df24:	00478793          	addi	a5,a5,4
    fmt = format::dwarf32;
   1df28:	00100a13          	addi	s4,zero,1
  pos = begin + length;
   1df2c:	00f98433          	add	s0,s3,a5
   1df30:	0084b823          	sd	s0,16(s1)
   1df34:	0004b483          	ld	s1,0(s1)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   1df38:	00093023          	sd	zero,0(s2)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1df3c:	06000513          	addi	a0,zero,96
   1df40:	871f80ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1df44:	00052423          	sw	zero,8(a0)
   1df48:	00052623          	sw	zero,12(a0)
   1df4c:	00052823          	sw	zero,16(a0)
   1df50:	00052a23          	sw	zero,20(a0)
   1df54:	00052c23          	sw	zero,24(a0)
   1df58:	00052e23          	sw	zero,28(a0)
   1df5c:	02053023          	sd	zero,32(a0)
   1df60:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   1df64:	00100793          	addi	a5,zero,1
   1df68:	02f52823          	sw	a5,48(a0)
   1df6c:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   1df70:	00025797          	auipc	a5,0x25
   1df74:	6687b783          	ld	a5,1640(a5) # 435d8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   1df78:	01078793          	addi	a5,a5,16
   1df7c:	00f53023          	sd	a5,0(a0)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1df80:	0004a703          	lw	a4,0(s1)
   1df84:	01c4a783          	lw	a5,28(s1)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   1df88:	02e52c23          	sw	a4,56(a0)
   1df8c:	05353023          	sd	s3,64(a0)
   1df90:	04853423          	sd	s0,72(a0)
   1df94:	05452823          	sw	s4,80(a0)
        ord(ord), addr_size(addr_size) {}
   1df98:	04f52a23          	sw	a5,84(a0)
   1df9c:	04052c23          	sw	zero,88(a0)
	  _M_pi = __pi;
   1dfa0:	00a93423          	sd	a0,8(s2)
   1dfa4:	03850793          	addi	a5,a0,56
	  __p = __pi->_M_ptr();
   1dfa8:	00f93023          	sd	a5,0(s2)
}
   1dfac:	00090513          	addi	a0,s2,0
   1dfb0:	02813083          	ld	ra,40(sp)
   1dfb4:	02013403          	ld	s0,32(sp)
   1dfb8:	01813483          	ld	s1,24(sp)
   1dfbc:	01013903          	ld	s2,16(sp)
   1dfc0:	00813983          	ld	s3,8(sp)
   1dfc4:	00013a03          	ld	s4,0(sp)
   1dfc8:	03010113          	addi	sp,sp,48
   1dfcc:	00008067          	jalr	zero,0(ra)
   1dfd0:	00058713          	addi	a4,a1,0
   1dfd4:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1dfd8:	00000793          	addi	a5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1dfdc:	00879793          	slli	a5,a5,0x8
   1dfe0:	00074683          	lbu	a3,0(a4)
   1dfe4:	00f6e7b3          	or	a5,a3,a5
      for (unsigned i = 0; i < sizeof(T); i++)
   1dfe8:	00170713          	addi	a4,a4,1
   1dfec:	fec718e3          	bne	a4,a2,1dfdc <dwarf::cursor::subsection()+0x154>
   1dff0:	f15ff06f          	jal	zero,1df04 <dwarf::cursor::subsection()+0x7c>
  } else if (length == 0xffffffff) {
   1dff4:	fff00713          	addi	a4,zero,-1
   1dff8:	02075713          	srli	a4,a4,0x20
   1dffc:	08e79063          	bne	a5,a4,1e07c <dwarf::cursor::subsection()+0x1f4>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1e000:	01053783          	ld	a5,16(a0)
   1e004:	40b786b3          	sub	a3,a5,a1
   1e008:	00700713          	addi	a4,zero,7
   1e00c:	00d77463          	bgeu	a4,a3,1e014 <dwarf::cursor::subsection()+0x18c>
   1e010:	00f5e663          	bltu	a1,a5,1e01c <dwarf::cursor::subsection()+0x194>
      underflow();
   1e014:	00048513          	addi	a0,s1,0
   1e018:	92dff0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1e01c:	0104b703          	ld	a4,16(s1)
    if (sec->ord == byte_order::lsb) {
   1e020:	0004b783          	ld	a5,0(s1)
   1e024:	01c7a783          	lw	a5,28(a5)
   1e028:	02079863          	bne	a5,zero,1e058 <dwarf::cursor::subsection()+0x1d0>
   1e02c:	00000693          	addi	a3,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1e030:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1e034:	00074603          	lbu	a2,0(a4)
   1e038:	00d61633          	sll	a2,a2,a3
   1e03c:	00c7e7b3          	or	a5,a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1e040:	00170713          	addi	a4,a4,1
   1e044:	0086869b          	addiw	a3,a3,8
   1e048:	feb696e3          	bne	a3,a1,1e034 <dwarf::cursor::subsection()+0x1ac>
    length += sizeof(uword) + sizeof(uint64_t);
   1e04c:	00c78793          	addi	a5,a5,12
    fmt = format::dwarf64;
   1e050:	00200a13          	addi	s4,zero,2
   1e054:	ed9ff06f          	jal	zero,1df2c <dwarf::cursor::subsection()+0xa4>
   1e058:	00070693          	addi	a3,a4,0
   1e05c:	00870713          	addi	a4,a4,8
    uint64_t val = 0;
   1e060:	00000793          	addi	a5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1e064:	00879793          	slli	a5,a5,0x8
   1e068:	0006c603          	lbu	a2,0(a3)
   1e06c:	00f667b3          	or	a5,a2,a5
      for (unsigned i = 0; i < sizeof(T); i++)
   1e070:	00168693          	addi	a3,a3,1
   1e074:	fee698e3          	bne	a3,a4,1e064 <dwarf::cursor::subsection()+0x1dc>
   1e078:	fd5ff06f          	jal	zero,1e04c <dwarf::cursor::subsection()+0x1c4>
    throw format_error("initial length has reserved value");
   1e07c:	01000513          	addi	a0,zero,16
   1e080:	e10f80ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1e084:	00050413          	addi	s0,a0,0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   1e088:	0001a597          	auipc	a1,0x1a
   1e08c:	af858593          	addi	a1,a1,-1288 # 37b80 <std::piecewise_construct+0xb0>
   1e090:	981f80ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   1e094:	00025797          	auipc	a5,0x25
   1e098:	4dc7b783          	ld	a5,1244(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   1e09c:	01078793          	addi	a5,a5,16
   1e0a0:	00f43023          	sd	a5,0(s0)
   1e0a4:	00025617          	auipc	a2,0x25
   1e0a8:	2f463603          	ld	a2,756(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   1e0ac:	00025597          	auipc	a1,0x25
   1e0b0:	21c5b583          	ld	a1,540(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   1e0b4:	00040513          	addi	a0,s0,0
   1e0b8:	8a9f80ef          	jal	ra,16960 <__cxa_throw@plt>
   1e0bc:	00050493          	addi	s1,a0,0
   1e0c0:	00040513          	addi	a0,s0,0
   1e0c4:	e8cf80ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1e0c8:	00048513          	addi	a0,s1,0
   1e0cc:	8c5f80ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001e0d0 <dwarf::cursor::offset()>:
section_offset cursor::offset() {
   1e0d0:	fe010113          	addi	sp,sp,-32
   1e0d4:	00113c23          	sd	ra,24(sp)
   1e0d8:	00813823          	sd	s0,16(sp)
   1e0dc:	00913423          	sd	s1,8(sp)
   1e0e0:	00050413          	addi	s0,a0,0
      { return _M_ptr; }
   1e0e4:	00053783          	ld	a5,0(a0)
  switch (sec->fmt) {
   1e0e8:	0187a703          	lw	a4,24(a5)
   1e0ec:	00100693          	addi	a3,zero,1
   1e0f0:	06d70463          	beq	a4,a3,1e158 <dwarf::cursor::offset()+0x88>
   1e0f4:	00200693          	addi	a3,zero,2
   1e0f8:	12d71063          	bne	a4,a3,1e218 <dwarf::cursor::offset()+0x148>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1e0fc:	0107b703          	ld	a4,16(a5)
   1e100:	01053783          	ld	a5,16(a0)
   1e104:	40f70633          	sub	a2,a4,a5
   1e108:	00700693          	addi	a3,zero,7
   1e10c:	00c6f463          	bgeu	a3,a2,1e114 <dwarf::cursor::offset()+0x44>
   1e110:	00e7e663          	bltu	a5,a4,1e11c <dwarf::cursor::offset()+0x4c>
      underflow();
   1e114:	00040513          	addi	a0,s0,0
   1e118:	82dff0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1e11c:	01043603          	ld	a2,16(s0)
    if (sec->ord == byte_order::lsb) {
   1e120:	00043783          	ld	a5,0(s0)
   1e124:	01c7a783          	lw	a5,28(a5)
   1e128:	0c079663          	bne	a5,zero,1e1f4 <dwarf::cursor::offset()+0x124>
   1e12c:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   1e130:	00000513          	addi	a0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1e134:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1e138:	0006c703          	lbu	a4,0(a3)
   1e13c:	00f71733          	sll	a4,a4,a5
   1e140:	00e56533          	or	a0,a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1e144:	00168693          	addi	a3,a3,1
   1e148:	0087879b          	addiw	a5,a5,8
   1e14c:	feb796e3          	bne	a5,a1,1e138 <dwarf::cursor::offset()+0x68>
    pos += sizeof(T);
   1e150:	00860713          	addi	a4,a2,8
    return fixed<uint64_t>();
   1e154:	0640006f          	jal	zero,1e1b8 <dwarf::cursor::offset()+0xe8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1e158:	0107b703          	ld	a4,16(a5)
   1e15c:	01053783          	ld	a5,16(a0)
   1e160:	40f70633          	sub	a2,a4,a5
   1e164:	00300693          	addi	a3,zero,3
   1e168:	00c6f463          	bgeu	a3,a2,1e170 <dwarf::cursor::offset()+0xa0>
   1e16c:	00e7e663          	bltu	a5,a4,1e178 <dwarf::cursor::offset()+0xa8>
      underflow();
   1e170:	00040513          	addi	a0,s0,0
   1e174:	fd0ff0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1e178:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1e17c:	00043783          	ld	a5,0(s0)
   1e180:	01c7a783          	lw	a5,28(a5)
   1e184:	04079663          	bne	a5,zero,1e1d0 <dwarf::cursor::offset()+0x100>
   1e188:	00070593          	addi	a1,a4,0
   1e18c:	00000693          	addi	a3,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1e190:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1e194:	0005c603          	lbu	a2,0(a1)
   1e198:	00d61633          	sll	a2,a2,a3
   1e19c:	00c7e7b3          	or	a5,a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1e1a0:	00158593          	addi	a1,a1,1
   1e1a4:	0086869b          	addiw	a3,a3,8
   1e1a8:	fea696e3          	bne	a3,a0,1e194 <dwarf::cursor::offset()+0xc4>
    pos += sizeof(T);
   1e1ac:	00470713          	addi	a4,a4,4
   1e1b0:	02079513          	slli	a0,a5,0x20
   1e1b4:	02055513          	srli	a0,a0,0x20
   1e1b8:	00e43823          	sd	a4,16(s0)
}
   1e1bc:	01813083          	ld	ra,24(sp)
   1e1c0:	01013403          	ld	s0,16(sp)
   1e1c4:	00813483          	ld	s1,8(sp)
   1e1c8:	02010113          	addi	sp,sp,32
   1e1cc:	00008067          	jalr	zero,0(ra)
   1e1d0:	00070693          	addi	a3,a4,0
   1e1d4:	00470593          	addi	a1,a4,4
    uint64_t val = 0;
   1e1d8:	00000793          	addi	a5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1e1dc:	00879793          	slli	a5,a5,0x8
   1e1e0:	0006c603          	lbu	a2,0(a3)
   1e1e4:	00f667b3          	or	a5,a2,a5
      for (unsigned i = 0; i < sizeof(T); i++)
   1e1e8:	00168693          	addi	a3,a3,1
   1e1ec:	feb698e3          	bne	a3,a1,1e1dc <dwarf::cursor::offset()+0x10c>
   1e1f0:	fbdff06f          	jal	zero,1e1ac <dwarf::cursor::offset()+0xdc>
   1e1f4:	00060793          	addi	a5,a2,0
   1e1f8:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1e1fc:	00000513          	addi	a0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1e200:	00851513          	slli	a0,a0,0x8
   1e204:	0007c703          	lbu	a4,0(a5)
   1e208:	00a76533          	or	a0,a4,a0
      for (unsigned i = 0; i < sizeof(T); i++)
   1e20c:	00178793          	addi	a5,a5,1
   1e210:	fed798e3          	bne	a5,a3,1e200 <dwarf::cursor::offset()+0x130>
   1e214:	f3dff06f          	jal	zero,1e150 <dwarf::cursor::offset()+0x80>
    throw logic_error("cannot read offset with unknown format");
   1e218:	01000513          	addi	a0,zero,16
   1e21c:	c74f80ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1e220:	00050413          	addi	s0,a0,0
   1e224:	0001a597          	auipc	a1,0x1a
   1e228:	98458593          	addi	a1,a1,-1660 # 37ba8 <std::piecewise_construct+0xd8>
   1e22c:	e74f80ef          	jal	ra,168a0 <std::logic_error::logic_error(char const*)@plt>
   1e230:	00025617          	auipc	a2,0x25
   1e234:	25863603          	ld	a2,600(a2) # 43488 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   1e238:	00025597          	auipc	a1,0x25
   1e23c:	3585b583          	ld	a1,856(a1) # 43590 <typeinfo for std::logic_error@GLIBCXX_3.4+0xd40>
   1e240:	00040513          	addi	a0,s0,0
   1e244:	f1cf80ef          	jal	ra,16960 <__cxa_throw@plt>
   1e248:	00050493          	addi	s1,a0,0
   1e24c:	00040513          	addi	a0,s0,0
   1e250:	d00f80ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1e254:	00048513          	addi	a0,s1,0
   1e258:	f38f80ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001e25c <dwarf::die::die(dwarf::unit const*)>:

using namespace std;

DWARFPP_BEGIN_NAMESPACE

die::die(const unit *cu) : cu(cu), abbrev(nullptr) {}
   1e25c:	00b53423          	sd	a1,8(a0)
   1e260:	00053823          	sd	zero,16(a0)
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   1e264:	02050793          	addi	a5,a0,32
   1e268:	04f53823          	sd	a5,80(a0)
   1e26c:	04f53c23          	sd	a5,88(a0)
   1e270:	05050793          	addi	a5,a0,80
   1e274:	06f53023          	sd	a5,96(a0)
   1e278:	00008067          	jalr	zero,0(ra)

000000000001e27c <dwarf::die::get_unit() const>:

const unit &die::get_unit() const { return *cu; }
   1e27c:	00853503          	ld	a0,8(a0)
   1e280:	00008067          	jalr	zero,0(ra)

000000000001e284 <dwarf::die::get_section_offset() const>:

section_offset die::get_section_offset() const {
   1e284:	ff010113          	addi	sp,sp,-16
   1e288:	00113423          	sd	ra,8(sp)
   1e28c:	00813023          	sd	s0,0(sp)
   1e290:	00050413          	addi	s0,a0,0
  return cu->get_section_offset() + offset;
   1e294:	00853503          	ld	a0,8(a0)
   1e298:	87cfa0ef          	jal	ra,18314 <dwarf::unit::get_section_offset() const>
   1e29c:	01843783          	ld	a5,24(s0)
}
   1e2a0:	00f50533          	add	a0,a0,a5
   1e2a4:	00813083          	ld	ra,8(sp)
   1e2a8:	00013403          	ld	s0,0(sp)
   1e2ac:	01010113          	addi	sp,sp,16
   1e2b0:	00008067          	jalr	zero,0(ra)

000000000001e2b4 <dwarf::die::read(unsigned long)>:

void die::read(section_offset off) {
   1e2b4:	f9010113          	addi	sp,sp,-112
   1e2b8:	06113423          	sd	ra,104(sp)
   1e2bc:	06813023          	sd	s0,96(sp)
   1e2c0:	04913c23          	sd	s1,88(sp)
   1e2c4:	05213823          	sd	s2,80(sp)
   1e2c8:	05313423          	sd	s3,72(sp)
   1e2cc:	05413023          	sd	s4,64(sp)
   1e2d0:	03513c23          	sd	s5,56(sp)
   1e2d4:	03613823          	sd	s6,48(sp)
   1e2d8:	03713423          	sd	s7,40(sp)
   1e2dc:	03813023          	sd	s8,32(sp)
   1e2e0:	00050493          	addi	s1,a0,0
   1e2e4:	00058913          	addi	s2,a1,0
  cursor cur(cu->data(), off);
   1e2e8:	00853503          	ld	a0,8(a0)
   1e2ec:	834fa0ef          	jal	ra,18320 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e2f0:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1e2f4:	00853403          	ld	s0,8(a0)
	if (_M_pi != nullptr)
   1e2f8:	48040463          	beq	s0,zero,1e780 <dwarf::die::read(unsigned long)+0x4cc>
    if (__is_single_threaded())
   1e2fc:	00025797          	auipc	a5,0x25
   1e300:	19c7b783          	ld	a5,412(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e304:	0007c783          	lbu	a5,0(a5)
   1e308:	0a078863          	beq	a5,zero,1e3b8 <dwarf::die::read(unsigned long)+0x104>
  { *__mem += __val; }
   1e30c:	03042783          	lw	a5,48(s0)
   1e310:	0017879b          	addiw	a5,a5,1
   1e314:	02f42823          	sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e318:	01313423          	sd	s3,8(sp)
      : _M_pi(__r._M_pi)
   1e31c:	00813823          	sd	s0,16(sp)
    if (__is_single_threaded())
   1e320:	00025797          	auipc	a5,0x25
   1e324:	1787b783          	ld	a5,376(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e328:	0007c783          	lbu	a5,0(a5)
   1e32c:	08078e63          	beq	a5,zero,1e3c8 <dwarf::die::read(unsigned long)+0x114>
  { *__mem += __val; }
   1e330:	03042783          	lw	a5,48(s0)
   1e334:	0017879b          	addiw	a5,a5,1
   1e338:	02f42823          	sw	a5,48(s0)
      : sec(sec), pos(sec->begin + offset) {}
   1e33c:	0089b783          	ld	a5,8(s3)
   1e340:	012787b3          	add	a5,a5,s2
   1e344:	00f13c23          	sd	a5,24(sp)
    if (__is_single_threaded())
   1e348:	00025797          	auipc	a5,0x25
   1e34c:	1507b783          	ld	a5,336(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e350:	0007c783          	lbu	a5,0(a5)
   1e354:	08078263          	beq	a5,zero,1e3d8 <dwarf::die::read(unsigned long)+0x124>
    _Atomic_word __result = *__mem;
   1e358:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1e35c:	fff5079b          	addiw	a5,a0,-1
   1e360:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1e364:	00100793          	addi	a5,zero,1
   1e368:	42f51663          	bne	a0,a5,1e794 <dwarf::die::read(unsigned long)+0x4e0>
	_M_dispose();
   1e36c:	00043783          	ld	a5,0(s0)
   1e370:	0107b783          	ld	a5,16(a5)
   1e374:	00040513          	addi	a0,s0,0
   1e378:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1e37c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1e380:	00025797          	auipc	a5,0x25
   1e384:	1187b783          	ld	a5,280(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e388:	0007c783          	lbu	a5,0(a5)
   1e38c:	04078e63          	beq	a5,zero,1e3e8 <dwarf::die::read(unsigned long)+0x134>
    _Atomic_word __result = *__mem;
   1e390:	03442783          	lw	a5,52(s0)
    *__mem += __val;
   1e394:	fff7871b          	addiw	a4,a5,-1
   1e398:	02e42a23          	sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1e39c:	00100713          	addi	a4,zero,1
   1e3a0:	3ee79a63          	bne	a5,a4,1e794 <dwarf::die::read(unsigned long)+0x4e0>
	    _M_destroy();
   1e3a4:	00043783          	ld	a5,0(s0)
   1e3a8:	0187b783          	ld	a5,24(a5)
   1e3ac:	00040513          	addi	a0,s0,0
   1e3b0:	000780e7          	jalr	ra,0(a5)
   1e3b4:	3e00006f          	jal	zero,1e794 <dwarf::die::read(unsigned long)+0x4e0>
      __atomic_add(__mem, __val);
   1e3b8:	00100593          	addi	a1,zero,1
   1e3bc:	03040513          	addi	a0,s0,48
   1e3c0:	9f0f80ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1e3c4:	f55ff06f          	jal	zero,1e318 <dwarf::die::read(unsigned long)+0x64>
   1e3c8:	00100593          	addi	a1,zero,1
   1e3cc:	03040513          	addi	a0,s0,48
   1e3d0:	9e0f80ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1e3d4:	f69ff06f          	jal	zero,1e33c <dwarf::die::read(unsigned long)+0x88>
      return __exchange_and_add(__mem, __val);
   1e3d8:	fff00593          	addi	a1,zero,-1
   1e3dc:	03040513          	addi	a0,s0,48
   1e3e0:	a10f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e3e4:	f81ff06f          	jal	zero,1e364 <dwarf::die::read(unsigned long)+0xb0>
   1e3e8:	fff00593          	addi	a1,zero,-1
   1e3ec:	03440513          	addi	a0,s0,52
   1e3f0:	a00f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e3f4:	00050793          	addi	a5,a0,0
   1e3f8:	fa5ff06f          	jal	zero,1e39c <dwarf::die::read(unsigned long)+0xe8>
    return 0;
   1e3fc:	00000593          	addi	a1,zero,0

  offset = off;

  abbrev_code acode = cur.uleb128();
  if (acode == 0) {
   1e400:	0e059463          	bne	a1,zero,1e4e8 <dwarf::die::read(unsigned long)+0x234>
    abbrev = nullptr;
   1e404:	0004b823          	sd	zero,16(s1)
  section_offset get_section_offset() const { return pos - sec->begin; }
   1e408:	00813783          	ld	a5,8(sp)
   1e40c:	0087b703          	ld	a4,8(a5)
   1e410:	01813783          	ld	a5,24(sp)
   1e414:	40e787b3          	sub	a5,a5,a4
    next = cur.get_section_offset();
   1e418:	06f4b423          	sd	a5,104(s1)
	if (_M_pi != nullptr)
   1e41c:	01013403          	ld	s0,16(sp)
   1e420:	02040463          	beq	s0,zero,1e448 <dwarf::die::read(unsigned long)+0x194>
    if (__is_single_threaded())
   1e424:	00025797          	auipc	a5,0x25
   1e428:	0747b783          	ld	a5,116(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e42c:	0007c783          	lbu	a5,0(a5)
   1e430:	04078463          	beq	a5,zero,1e478 <dwarf::die::read(unsigned long)+0x1c4>
    _Atomic_word __result = *__mem;
   1e434:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1e438:	fff5079b          	addiw	a5,a0,-1
   1e43c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1e440:	00100793          	addi	a5,zero,1
   1e444:	04f50263          	beq	a0,a5,1e488 <dwarf::die::read(unsigned long)+0x1d4>
  for (auto &attr : abbrev->attributes) {
    attrs.push_back(cur.get_section_offset());
    cur.skip_form(attr.form);
  }
  next = cur.get_section_offset();
}
   1e448:	06813083          	ld	ra,104(sp)
   1e44c:	06013403          	ld	s0,96(sp)
   1e450:	05813483          	ld	s1,88(sp)
   1e454:	05013903          	ld	s2,80(sp)
   1e458:	04813983          	ld	s3,72(sp)
   1e45c:	04013a03          	ld	s4,64(sp)
   1e460:	03813a83          	ld	s5,56(sp)
   1e464:	03013b03          	ld	s6,48(sp)
   1e468:	02813b83          	ld	s7,40(sp)
   1e46c:	02013c03          	ld	s8,32(sp)
   1e470:	07010113          	addi	sp,sp,112
   1e474:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   1e478:	fff00593          	addi	a1,zero,-1
   1e47c:	03040513          	addi	a0,s0,48
   1e480:	970f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e484:	fbdff06f          	jal	zero,1e440 <dwarf::die::read(unsigned long)+0x18c>
	_M_dispose();
   1e488:	00043783          	ld	a5,0(s0)
   1e48c:	0107b783          	ld	a5,16(a5)
   1e490:	00040513          	addi	a0,s0,0
   1e494:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1e498:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1e49c:	00025797          	auipc	a5,0x25
   1e4a0:	ffc7b783          	ld	a5,-4(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e4a4:	0007c783          	lbu	a5,0(a5)
   1e4a8:	02078663          	beq	a5,zero,1e4d4 <dwarf::die::read(unsigned long)+0x220>
    _Atomic_word __result = *__mem;
   1e4ac:	03442783          	lw	a5,52(s0)
    *__mem += __val;
   1e4b0:	fff7871b          	addiw	a4,a5,-1
   1e4b4:	02e42a23          	sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1e4b8:	00100713          	addi	a4,zero,1
   1e4bc:	f8e796e3          	bne	a5,a4,1e448 <dwarf::die::read(unsigned long)+0x194>
	    _M_destroy();
   1e4c0:	00043783          	ld	a5,0(s0)
   1e4c4:	0187b783          	ld	a5,24(a5)
   1e4c8:	00040513          	addi	a0,s0,0
   1e4cc:	000780e7          	jalr	ra,0(a5)
   1e4d0:	f79ff06f          	jal	zero,1e448 <dwarf::die::read(unsigned long)+0x194>
      return __exchange_and_add(__mem, __val);
   1e4d4:	fff00593          	addi	a1,zero,-1
   1e4d8:	03440513          	addi	a0,s0,52
   1e4dc:	914f80ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e4e0:	00050793          	addi	a5,a0,0
   1e4e4:	fd5ff06f          	jal	zero,1e4b8 <dwarf::die::read(unsigned long)+0x204>
  abbrev = &cu->get_abbrev(acode);
   1e4e8:	0084b503          	ld	a0,8(s1)
   1e4ec:	8b0fd0ef          	jal	ra,1b59c <dwarf::unit::get_abbrev(unsigned long) const>
   1e4f0:	00a4b823          	sd	a0,16(s1)
  tag = abbrev->tag;
   1e4f4:	00852783          	lw	a5,8(a0)
   1e4f8:	00f4a023          	sw	a5,0(s1)
  attrs.clear();
   1e4fc:	02048b13          	addi	s6,s1,32
    for (T *p = base; p < end; ++p)
   1e500:	0504b683          	ld	a3,80(s1)
   1e504:	0584b783          	ld	a5,88(s1)
   1e508:	00f6fa63          	bgeu	a3,a5,1e51c <dwarf::die::read(unsigned long)+0x268>
   1e50c:	00068793          	addi	a5,a3,0
   1e510:	00878793          	addi	a5,a5,8
   1e514:	0584b703          	ld	a4,88(s1)
   1e518:	fee7ece3          	bltu	a5,a4,1e510 <dwarf::die::read(unsigned long)+0x25c>
    end = base;
   1e51c:	04d4bc23          	sd	a3,88(s1)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1e520:	01853703          	ld	a4,24(a0)
   1e524:	01053783          	ld	a5,16(a0)
   1e528:	40f70733          	sub	a4,a4,a5
   1e52c:	40275713          	srai	a4,a4,0x2
   1e530:	00019797          	auipc	a5,0x19
   1e534:	5907b783          	ld	a5,1424(a5) # 37ac0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   1e538:	02f70733          	mul	a4,a4,a5
    if (n <= (size_type)(cap - base))
   1e53c:	0604b783          	ld	a5,96(s1)
   1e540:	40d787b3          	sub	a5,a5,a3
   1e544:	4037d793          	srai	a5,a5,0x3
   1e548:	06e7f863          	bgeu	a5,a4,1e5b8 <dwarf::die::read(unsigned long)+0x304>
   1e54c:	00079463          	bne	a5,zero,1e554 <dwarf::die::read(unsigned long)+0x2a0>
   1e550:	00100793          	addi	a5,zero,1
    while (target < n)
   1e554:	00e7f663          	bgeu	a5,a4,1e560 <dwarf::die::read(unsigned long)+0x2ac>
      target <<= 1;
   1e558:	00179793          	slli	a5,a5,0x1
    while (target < n)
   1e55c:	fee7eee3          	bltu	a5,a4,1e558 <dwarf::die::read(unsigned long)+0x2a4>
    char *newbuf = new char[sizeof(T[target])];
   1e560:	00379413          	slli	s0,a5,0x3
   1e564:	00040513          	addi	a0,s0,0
   1e568:	828f80ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   1e56c:	00050993          	addi	s3,a0,0
    T *src = base, *dest = (T *)newbuf;
   1e570:	0504b503          	ld	a0,80(s1)
    for (; src < end; src++, dest++) {
   1e574:	0584b703          	ld	a4,88(s1)
   1e578:	04e57c63          	bgeu	a0,a4,1e5d0 <dwarf::die::read(unsigned long)+0x31c>
    T *src = base, *dest = (T *)newbuf;
   1e57c:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   1e580:	00878793          	addi	a5,a5,8
   1e584:	fee7eee3          	bltu	a5,a4,1e580 <dwarf::die::read(unsigned long)+0x2cc>
   1e588:	fff70913          	addi	s2,a4,-1
   1e58c:	40a90933          	sub	s2,s2,a0
   1e590:	ff897913          	andi	s2,s2,-8
   1e594:	00890913          	addi	s2,s2,8
   1e598:	01298933          	add	s2,s3,s2
    if ((char *)base != buf)
   1e59c:	00ab0663          	beq	s6,a0,1e5a8 <dwarf::die::read(unsigned long)+0x2f4>
      delete[] (char *)base;
   1e5a0:	00050463          	beq	a0,zero,1e5a8 <dwarf::die::read(unsigned long)+0x2f4>
   1e5a4:	aacf80ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1e5a8:	0534b823          	sd	s3,80(s1)
    end = dest;
   1e5ac:	0524bc23          	sd	s2,88(s1)
    cap = base + target;
   1e5b0:	008989b3          	add	s3,s3,s0
   1e5b4:	0734b023          	sd	s3,96(s1)
  for (auto &attr : abbrev->attributes) {
   1e5b8:	0104b783          	ld	a5,16(s1)
      : _M_current(__i) { }
   1e5bc:	0107b903          	ld	s2,16(a5)
   1e5c0:	0187ba03          	ld	s4,24(a5)
   1e5c4:	0f2a0663          	beq	s4,s2,1e6b0 <dwarf::die::read(unsigned long)+0x3fc>
    cur.skip_form(attr.form);
   1e5c8:	00810a93          	addi	s5,sp,8
   1e5cc:	08c0006f          	jal	zero,1e658 <dwarf::die::read(unsigned long)+0x3a4>
    T *src = base, *dest = (T *)newbuf;
   1e5d0:	00098913          	addi	s2,s3,0
   1e5d4:	fc9ff06f          	jal	zero,1e59c <dwarf::die::read(unsigned long)+0x2e8>
    char *newbuf = new char[sizeof(T[target])];
   1e5d8:	00050c13          	addi	s8,a0,0
    T *src = base, *dest = (T *)newbuf;
   1e5dc:	0504b503          	ld	a0,80(s1)
    for (; src < end; src++, dest++) {
   1e5e0:	0584b703          	ld	a4,88(s1)
   1e5e4:	06e57263          	bgeu	a0,a4,1e648 <dwarf::die::read(unsigned long)+0x394>
    T *src = base, *dest = (T *)newbuf;
   1e5e8:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   1e5ec:	00878793          	addi	a5,a5,8
   1e5f0:	fee7eee3          	bltu	a5,a4,1e5ec <dwarf::die::read(unsigned long)+0x338>
   1e5f4:	fff70b93          	addi	s7,a4,-1
   1e5f8:	40ab8bb3          	sub	s7,s7,a0
   1e5fc:	ff8bfb93          	andi	s7,s7,-8
   1e600:	008b8b93          	addi	s7,s7,8
   1e604:	017c0bb3          	add	s7,s8,s7
    if ((char *)base != buf)
   1e608:	00ab0663          	beq	s6,a0,1e614 <dwarf::die::read(unsigned long)+0x360>
      delete[] (char *)base;
   1e60c:	00050463          	beq	a0,zero,1e614 <dwarf::die::read(unsigned long)+0x360>
   1e610:	a40f80ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1e614:	0584b823          	sd	s8,80(s1)
    end = dest;
   1e618:	0574bc23          	sd	s7,88(s1)
    cap = base + target;
   1e61c:	008c0c33          	add	s8,s8,s0
   1e620:	0784b023          	sd	s8,96(s1)
    new (end) T(std::move(x));
   1e624:	0584b783          	ld	a5,88(s1)
   1e628:	0137b023          	sd	s3,0(a5)
    end++;
   1e62c:	0584b783          	ld	a5,88(s1)
   1e630:	00878793          	addi	a5,a5,8
   1e634:	04f4bc23          	sd	a5,88(s1)
   1e638:	00492583          	lw	a1,4(s2)
   1e63c:	000a8513          	addi	a0,s5,0
   1e640:	bd8ff0ef          	jal	ra,1da18 <dwarf::cursor::skip_form(dwarf::DW_FORM)>
   1e644:	00c0006f          	jal	zero,1e650 <dwarf::die::read(unsigned long)+0x39c>
    T *src = base, *dest = (T *)newbuf;
   1e648:	000c0b93          	addi	s7,s8,0
   1e64c:	fbdff06f          	jal	zero,1e608 <dwarf::die::read(unsigned long)+0x354>
  for (auto &attr : abbrev->attributes) {
   1e650:	00c90913          	addi	s2,s2,12
   1e654:	052a0e63          	beq	s4,s2,1e6b0 <dwarf::die::read(unsigned long)+0x3fc>
   1e658:	00813783          	ld	a5,8(sp)
   1e65c:	0087b783          	ld	a5,8(a5)
   1e660:	01813983          	ld	s3,24(sp)
   1e664:	40f989b3          	sub	s3,s3,a5
  size_type size() const { return end - base; }
   1e668:	0504b683          	ld	a3,80(s1)
   1e66c:	0584b703          	ld	a4,88(s1)
   1e670:	40d70733          	sub	a4,a4,a3
   1e674:	40375713          	srai	a4,a4,0x3
    reserve(size() + 1);
   1e678:	00170713          	addi	a4,a4,1
    if (n <= (size_type)(cap - base))
   1e67c:	0604b783          	ld	a5,96(s1)
   1e680:	40d787b3          	sub	a5,a5,a3
   1e684:	4037d793          	srai	a5,a5,0x3
   1e688:	f8e7fee3          	bgeu	a5,a4,1e624 <dwarf::die::read(unsigned long)+0x370>
   1e68c:	00079463          	bne	a5,zero,1e694 <dwarf::die::read(unsigned long)+0x3e0>
   1e690:	00100793          	addi	a5,zero,1
    while (target < n)
   1e694:	00e7f663          	bgeu	a5,a4,1e6a0 <dwarf::die::read(unsigned long)+0x3ec>
      target <<= 1;
   1e698:	00179793          	slli	a5,a5,0x1
    while (target < n)
   1e69c:	fee7eee3          	bltu	a5,a4,1e698 <dwarf::die::read(unsigned long)+0x3e4>
    char *newbuf = new char[sizeof(T[target])];
   1e6a0:	00379413          	slli	s0,a5,0x3
   1e6a4:	00040513          	addi	a0,s0,0
   1e6a8:	ee9f70ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   1e6ac:	f2dff06f          	jal	zero,1e5d8 <dwarf::die::read(unsigned long)+0x324>
   1e6b0:	00813783          	ld	a5,8(sp)
   1e6b4:	0087b703          	ld	a4,8(a5)
   1e6b8:	01813783          	ld	a5,24(sp)
   1e6bc:	40e787b3          	sub	a5,a5,a4
  next = cur.get_section_offset();
   1e6c0:	06f4b423          	sd	a5,104(s1)
	if (_M_pi != nullptr)
   1e6c4:	01013403          	ld	s0,16(sp)
   1e6c8:	d80400e3          	beq	s0,zero,1e448 <dwarf::die::read(unsigned long)+0x194>
    if (__is_single_threaded())
   1e6cc:	00025797          	auipc	a5,0x25
   1e6d0:	dcc7b783          	ld	a5,-564(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e6d4:	0007c783          	lbu	a5,0(a5)
   1e6d8:	06078263          	beq	a5,zero,1e73c <dwarf::die::read(unsigned long)+0x488>
    _Atomic_word __result = *__mem;
   1e6dc:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1e6e0:	fff5079b          	addiw	a5,a0,-1
   1e6e4:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1e6e8:	00100793          	addi	a5,zero,1
   1e6ec:	d4f51ee3          	bne	a0,a5,1e448 <dwarf::die::read(unsigned long)+0x194>
	_M_dispose();
   1e6f0:	00043783          	ld	a5,0(s0)
   1e6f4:	0107b783          	ld	a5,16(a5)
   1e6f8:	00040513          	addi	a0,s0,0
   1e6fc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1e700:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1e704:	00025797          	auipc	a5,0x25
   1e708:	d947b783          	ld	a5,-620(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1e70c:	0007c783          	lbu	a5,0(a5)
   1e710:	02078e63          	beq	a5,zero,1e74c <dwarf::die::read(unsigned long)+0x498>
    _Atomic_word __result = *__mem;
   1e714:	03442783          	lw	a5,52(s0)
    *__mem += __val;
   1e718:	fff7871b          	addiw	a4,a5,-1
   1e71c:	02e42a23          	sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1e720:	00100713          	addi	a4,zero,1
   1e724:	d2e792e3          	bne	a5,a4,1e448 <dwarf::die::read(unsigned long)+0x194>
	    _M_destroy();
   1e728:	00043783          	ld	a5,0(s0)
   1e72c:	0187b783          	ld	a5,24(a5)
   1e730:	00040513          	addi	a0,s0,0
   1e734:	000780e7          	jalr	ra,0(a5)
   1e738:	d11ff06f          	jal	zero,1e448 <dwarf::die::read(unsigned long)+0x194>
      return __exchange_and_add(__mem, __val);
   1e73c:	fff00593          	addi	a1,zero,-1
   1e740:	03040513          	addi	a0,s0,48
   1e744:	eadf70ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e748:	fa1ff06f          	jal	zero,1e6e8 <dwarf::die::read(unsigned long)+0x434>
   1e74c:	fff00593          	addi	a1,zero,-1
   1e750:	03440513          	addi	a0,s0,52
   1e754:	e9df70ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e758:	00050793          	addi	a5,a0,0
   1e75c:	fc5ff06f          	jal	zero,1e720 <dwarf::die::read(unsigned long)+0x46c>
	if (_M_pi != nullptr)
   1e760:	00050413          	addi	s0,a0,0
   1e764:	01013503          	ld	a0,16(sp)
   1e768:	00050863          	beq	a0,zero,1e778 <dwarf::die::read(unsigned long)+0x4c4>
	  _M_pi->_M_release();
   1e76c:	00025317          	auipc	t1,0x25
   1e770:	c7433303          	ld	t1,-908(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   1e774:	000300e7          	jalr	ra,0(t1)
   1e778:	00040513          	addi	a0,s0,0
   1e77c:	a14f80ef          	jal	ra,16990 <_Unwind_Resume@plt>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e780:	01313423          	sd	s3,8(sp)
      : _M_pi(__r._M_pi)
   1e784:	00013823          	sd	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1e788:	0089b783          	ld	a5,8(s3)
   1e78c:	012787b3          	add	a5,a5,s2
   1e790:	00f13c23          	sd	a5,24(sp)
  offset = off;
   1e794:	0124bc23          	sd	s2,24(s1)
    while (pos < sec->end) {
   1e798:	01813783          	ld	a5,24(sp)
      { return _M_ptr; }
   1e79c:	00813503          	ld	a0,8(sp)
   1e7a0:	01053703          	ld	a4,16(a0)
   1e7a4:	02e7fe63          	bgeu	a5,a4,1e7e0 <dwarf::die::read(unsigned long)+0x52c>
    std::uint64_t result = 0;
   1e7a8:	00000593          	addi	a1,zero,0
    int shift = 0;
   1e7ac:	00000613          	addi	a2,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   1e7b0:	00178793          	addi	a5,a5,1
   1e7b4:	00f13c23          	sd	a5,24(sp)
   1e7b8:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1e7bc:	07f77693          	andi	a3,a4,127
   1e7c0:	00c696b3          	sll	a3,a3,a2
   1e7c4:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   1e7c8:	0187171b          	slliw	a4,a4,0x18
   1e7cc:	4187571b          	sraiw	a4,a4,0x18
   1e7d0:	c20758e3          	bge	a4,zero,1e400 <dwarf::die::read(unsigned long)+0x14c>
      shift += 7;
   1e7d4:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   1e7d8:	01053703          	ld	a4,16(a0)
   1e7dc:	fce7eae3          	bltu	a5,a4,1e7b0 <dwarf::die::read(unsigned long)+0x4fc>
    underflow();
   1e7e0:	00810513          	addi	a0,sp,8
   1e7e4:	960ff0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    return 0;
   1e7e8:	c15ff06f          	jal	zero,1e3fc <dwarf::die::read(unsigned long)+0x148>

000000000001e7ec <dwarf::die::has(dwarf::DW_AT) const>:

bool die::has(DW_AT attr) const {
  if (!abbrev)
   1e7ec:	01053703          	ld	a4,16(a0)
   1e7f0:	02070463          	beq	a4,zero,1e818 <dwarf::die::has(dwarf::DW_AT) const+0x2c>
   1e7f4:	01073783          	ld	a5,16(a4)
   1e7f8:	01873683          	ld	a3,24(a4)
    return false;
  // XXX Totally lame
  for (auto &a : abbrev->attributes)
   1e7fc:	02f68263          	beq	a3,a5,1e820 <dwarf::die::has(dwarf::DW_AT) const+0x34>
    if (a.name == attr)
   1e800:	0007a703          	lw	a4,0(a5)
   1e804:	02b70263          	beq	a4,a1,1e828 <dwarf::die::has(dwarf::DW_AT) const+0x3c>
  for (auto &a : abbrev->attributes)
   1e808:	00c78793          	addi	a5,a5,12
   1e80c:	fef69ae3          	bne	a3,a5,1e800 <dwarf::die::has(dwarf::DW_AT) const+0x14>
      return true;
  return false;
   1e810:	00000513          	addi	a0,zero,0
   1e814:	00008067          	jalr	zero,0(ra)
    return false;
   1e818:	00000513          	addi	a0,zero,0
   1e81c:	00008067          	jalr	zero,0(ra)
  return false;
   1e820:	00000513          	addi	a0,zero,0
   1e824:	00008067          	jalr	zero,0(ra)
      return true;
   1e828:	00100513          	addi	a0,zero,1
}
   1e82c:	00008067          	jalr	zero,0(ra)

000000000001e830 <dwarf::die::operator[](dwarf::DW_AT) const>:

value die::operator[](DW_AT attr) const {
   1e830:	fa010113          	addi	sp,sp,-96
   1e834:	04113c23          	sd	ra,88(sp)
   1e838:	04813823          	sd	s0,80(sp)
   1e83c:	04913423          	sd	s1,72(sp)
   1e840:	00060413          	addi	s0,a2,0
  // XXX We can pre-compute almost all of this work in the
  // abbrev_entry.
  if (abbrev) {
   1e844:	0105b783          	ld	a5,16(a1)
   1e848:	06078863          	beq	a5,zero,1e8b8 <dwarf::die::operator[](dwarf::DW_AT) const+0x88>
   1e84c:	00050493          	addi	s1,a0,0
   1e850:	0107b683          	ld	a3,16(a5)
   1e854:	0187b603          	ld	a2,24(a5)
    int i = 0;
    for (auto &a : abbrev->attributes) {
   1e858:	06d60063          	beq	a2,a3,1e8b8 <dwarf::die::operator[](dwarf::DW_AT) const+0x88>
    int i = 0;
   1e85c:	00000793          	addi	a5,zero,0
   1e860:	0100006f          	jal	zero,1e870 <dwarf::die::operator[](dwarf::DW_AT) const+0x40>
      if (a.name == attr)
        return value(cu, a.name, a.form, a.type, attrs[i]);
      i++;
   1e864:	0017879b          	addiw	a5,a5,1
    for (auto &a : abbrev->attributes) {
   1e868:	00c68693          	addi	a3,a3,12
   1e86c:	04d60663          	beq	a2,a3,1e8b8 <dwarf::die::operator[](dwarf::DW_AT) const+0x88>
      if (a.name == attr)
   1e870:	0006a703          	lw	a4,0(a3)
   1e874:	fe8718e3          	bne	a4,s0,1e864 <dwarf::die::operator[](dwarf::DW_AT) const+0x34>
        return value(cu, a.name, a.form, a.type, attrs[i]);
   1e878:	0505b703          	ld	a4,80(a1)
   1e87c:	00379793          	slli	a5,a5,0x3
   1e880:	00f707b3          	add	a5,a4,a5
   1e884:	0007b783          	ld	a5,0(a5)
   1e888:	0086a703          	lw	a4,8(a3)
   1e88c:	0046a683          	lw	a3,4(a3)
   1e890:	00040613          	addi	a2,s0,0
   1e894:	0085b583          	ld	a1,8(a1)
   1e898:	00048513          	addi	a0,s1,0
   1e89c:	38c030ef          	jal	ra,21c28 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)>
    }
  }
  throw out_of_range("DIE does not have attribute " + to_string(attr));
}
   1e8a0:	00048513          	addi	a0,s1,0
   1e8a4:	05813083          	ld	ra,88(sp)
   1e8a8:	05013403          	ld	s0,80(sp)
   1e8ac:	04813483          	ld	s1,72(sp)
   1e8b0:	06010113          	addi	sp,sp,96
   1e8b4:	00008067          	jalr	zero,0(ra)
  throw out_of_range("DIE does not have attribute " + to_string(attr));
   1e8b8:	01000513          	addi	a0,zero,16
   1e8bc:	dd5f70ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1e8c0:	00050493          	addi	s1,a0,0
   1e8c4:	00040593          	addi	a1,s0,0
   1e8c8:	00010513          	addi	a0,sp,0
   1e8cc:	465130ef          	jal	ra,32530 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1e8d0:	00019617          	auipc	a2,0x19
   1e8d4:	38860613          	addi	a2,a2,904 # 37c58 <std::piecewise_construct+0x188>
   1e8d8:	00000593          	addi	a1,zero,0
   1e8dc:	00010513          	addi	a0,sp,0
   1e8e0:	d21f70ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1e8e4:	00050593          	addi	a1,a0,0
   1e8e8:	02010413          	addi	s0,sp,32
   1e8ec:	00040513          	addi	a0,s0,0
   1e8f0:	de1f70ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1e8f4:	00040593          	addi	a1,s0,0
   1e8f8:	00048513          	addi	a0,s1,0
   1e8fc:	ff5f70ef          	jal	ra,168f0 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   1e900:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   1e904:	03010793          	addi	a5,sp,48
   1e908:	00f50463          	beq	a0,a5,1e910 <dwarf::die::operator[](dwarf::DW_AT) const+0xe0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e90c:	e95f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e910:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   1e914:	01010793          	addi	a5,sp,16
   1e918:	00f50463          	beq	a0,a5,1e920 <dwarf::die::operator[](dwarf::DW_AT) const+0xf0>
   1e91c:	e85f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1e920:	00025617          	auipc	a2,0x25
   1e924:	bb863603          	ld	a2,-1096(a2) # 434d8 <std::out_of_range::~out_of_range()@GLIBCXX_3.4>
   1e928:	00025597          	auipc	a1,0x25
   1e92c:	c605b583          	ld	a1,-928(a1) # 43588 <typeinfo for std::out_of_range@GLIBCXX_3.4>
   1e930:	00048513          	addi	a0,s1,0
   1e934:	82cf80ef          	jal	ra,16960 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   1e938:	00050413          	addi	s0,a0,0
   1e93c:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   1e940:	03010793          	addi	a5,sp,48
   1e944:	00f50463          	beq	a0,a5,1e94c <dwarf::die::operator[](dwarf::DW_AT) const+0x11c>
   1e948:	e59f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e94c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   1e950:	01010793          	addi	a5,sp,16
   1e954:	00f50463          	beq	a0,a5,1e95c <dwarf::die::operator[](dwarf::DW_AT) const+0x12c>
   1e958:	e49f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1e95c:	00048513          	addi	a0,s1,0
   1e960:	df1f70ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1e964:	00040513          	addi	a0,s0,0
   1e968:	828f80ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1e96c:	00050413          	addi	s0,a0,0
   1e970:	fddff06f          	jal	zero,1e94c <dwarf::die::operator[](dwarf::DW_AT) const+0x11c>
   1e974:	00050413          	addi	s0,a0,0
   1e978:	fe5ff06f          	jal	zero,1e95c <dwarf::die::operator[](dwarf::DW_AT) const+0x12c>

000000000001e97c <dwarf::die::operator==(dwarf::die const&) const>:
  }
  return res;
}

bool die::operator==(const die &o) const {
  return cu == o.cu && offset == o.offset;
   1e97c:	00853703          	ld	a4,8(a0)
   1e980:	0085b783          	ld	a5,8(a1)
   1e984:	00f70663          	beq	a4,a5,1e990 <dwarf::die::operator==(dwarf::die const&) const+0x14>
   1e988:	00000513          	addi	a0,zero,0
}
   1e98c:	00008067          	jalr	zero,0(ra)
  return cu == o.cu && offset == o.offset;
   1e990:	01853503          	ld	a0,24(a0)
   1e994:	0185b783          	ld	a5,24(a1)
   1e998:	40f50533          	sub	a0,a0,a5
   1e99c:	00153513          	sltiu	a0,a0,1
   1e9a0:	00008067          	jalr	zero,0(ra)

000000000001e9a4 <dwarf::die::operator!=(dwarf::die const&) const>:

bool die::operator!=(const die &o) const { return !(*this == o); }
   1e9a4:	ff010113          	addi	sp,sp,-16
   1e9a8:	00113423          	sd	ra,8(sp)
   1e9ac:	fd1ff0ef          	jal	ra,1e97c <dwarf::die::operator==(dwarf::die const&) const>
   1e9b0:	00154513          	xori	a0,a0,1
   1e9b4:	0ff57513          	andi	a0,a0,255
   1e9b8:	00813083          	ld	ra,8(sp)
   1e9bc:	01010113          	addi	sp,sp,16
   1e9c0:	00008067          	jalr	zero,0(ra)

000000000001e9c4 <std::hash<dwarf::die>::operator()(dwarf::die const&) const>:

DWARFPP_END_NAMESPACE

size_t std::hash<dwarf::die>::operator()(const dwarf::die &a) const {
  return hash<decltype(a.cu)>()(a.cu) ^
         hash<decltype(a.get_unit_offset())>()(a.get_unit_offset());
   1e9c4:	0085b503          	ld	a0,8(a1)
   1e9c8:	0185b783          	ld	a5,24(a1)
}
   1e9cc:	00f54533          	xor	a0,a0,a5
   1e9d0:	00008067          	jalr	zero,0(ra)

000000000001e9d4 <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)>:
die::iterator::iterator(const unit *cu, section_offset off) : d(cu) {
   1e9d4:	fe010113          	addi	sp,sp,-32
   1e9d8:	00113c23          	sd	ra,24(sp)
   1e9dc:	00813823          	sd	s0,16(sp)
   1e9e0:	00913423          	sd	s1,8(sp)
   1e9e4:	00050413          	addi	s0,a0,0
   1e9e8:	00060493          	addi	s1,a2,0
   1e9ec:	871ff0ef          	jal	ra,1e25c <dwarf::die::die(dwarf::unit const*)>
  d.read(off);
   1e9f0:	00048593          	addi	a1,s1,0
   1e9f4:	00040513          	addi	a0,s0,0
   1e9f8:	8bdff0ef          	jal	ra,1e2b4 <dwarf::die::read(unsigned long)>
   1e9fc:	0200006f          	jal	zero,1ea1c <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)+0x48>
class die {
   1ea00:	00050493          	addi	s1,a0,0
   1ea04:	02040513          	addi	a0,s0,32
   1ea08:	00025317          	auipc	t1,0x25
   1ea0c:	9f833303          	ld	t1,-1544(t1) # 43400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b8b0>
   1ea10:	000300e7          	jalr	ra,0(t1)
   1ea14:	00048513          	addi	a0,s1,0
   1ea18:	f79f70ef          	jal	ra,16990 <_Unwind_Resume@plt>
}
   1ea1c:	01813083          	ld	ra,24(sp)
   1ea20:	01013403          	ld	s0,16(sp)
   1ea24:	00813483          	ld	s1,8(sp)
   1ea28:	02010113          	addi	sp,sp,32
   1ea2c:	00008067          	jalr	zero,0(ra)

000000000001ea30 <dwarf::die::begin() const>:
die::iterator die::begin() const {
   1ea30:	ff010113          	addi	sp,sp,-16
   1ea34:	00113423          	sd	ra,8(sp)
   1ea38:	00813023          	sd	s0,0(sp)
   1ea3c:	00050413          	addi	s0,a0,0
  if (!abbrev || !abbrev->children)
   1ea40:	0105b783          	ld	a5,16(a1)
   1ea44:	00078663          	beq	a5,zero,1ea50 <dwarf::die::begin() const+0x20>
   1ea48:	00c7c783          	lbu	a5,12(a5)
   1ea4c:	04079c63          	bne	a5,zero,1eaa4 <dwarf::die::begin() const+0x74>
inline die::iterator die::end() const { return iterator(); }
   1ea50:	00043023          	sd	zero,0(s0)
   1ea54:	00043423          	sd	zero,8(s0)
   1ea58:	00043823          	sd	zero,16(s0)
   1ea5c:	00043c23          	sd	zero,24(s0)
   1ea60:	02043023          	sd	zero,32(s0)
   1ea64:	02043423          	sd	zero,40(s0)
   1ea68:	02043823          	sd	zero,48(s0)
   1ea6c:	02043c23          	sd	zero,56(s0)
   1ea70:	04043023          	sd	zero,64(s0)
   1ea74:	04043423          	sd	zero,72(s0)
   1ea78:	06043423          	sd	zero,104(s0)
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   1ea7c:	02040793          	addi	a5,s0,32
   1ea80:	04f43823          	sd	a5,80(s0)
   1ea84:	04f43c23          	sd	a5,88(s0)
   1ea88:	05040793          	addi	a5,s0,80
   1ea8c:	06f43023          	sd	a5,96(s0)
}
   1ea90:	00040513          	addi	a0,s0,0
   1ea94:	00813083          	ld	ra,8(sp)
   1ea98:	00013403          	ld	s0,0(sp)
   1ea9c:	01010113          	addi	sp,sp,16
   1eaa0:	00008067          	jalr	zero,0(ra)
  return iterator(cu, next);
   1eaa4:	0685b603          	ld	a2,104(a1)
   1eaa8:	0085b583          	ld	a1,8(a1)
   1eaac:	f29ff0ef          	jal	ra,1e9d4 <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)>
   1eab0:	fe1ff06f          	jal	zero,1ea90 <dwarf::die::begin() const+0x60>

000000000001eab4 <dwarf::die::resolve(dwarf::DW_AT) const>:
value die::resolve(DW_AT attr) const {
   1eab4:	eb010113          	addi	sp,sp,-336
   1eab8:	14113423          	sd	ra,328(sp)
   1eabc:	14813023          	sd	s0,320(sp)
   1eac0:	12913c23          	sd	s1,312(sp)
   1eac4:	13213823          	sd	s2,304(sp)
   1eac8:	00050493          	addi	s1,a0,0
   1eacc:	00058413          	addi	s0,a1,0
   1ead0:	00060913          	addi	s2,a2,0
  if (has(attr))
   1ead4:	00060593          	addi	a1,a2,0
   1ead8:	00040513          	addi	a0,s0,0
   1eadc:	d11ff0ef          	jal	ra,1e7ec <dwarf::die::has(dwarf::DW_AT) const>
   1eae0:	02050863          	beq	a0,zero,1eb10 <dwarf::die::resolve(dwarf::DW_AT) const+0x5c>
    return (*this)[attr];
   1eae4:	00090613          	addi	a2,s2,0
   1eae8:	00040593          	addi	a1,s0,0
   1eaec:	00048513          	addi	a0,s1,0
   1eaf0:	d41ff0ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
}
   1eaf4:	00048513          	addi	a0,s1,0
   1eaf8:	14813083          	ld	ra,328(sp)
   1eafc:	14013403          	ld	s0,320(sp)
   1eb00:	13813483          	ld	s1,312(sp)
   1eb04:	13013903          	ld	s2,304(sp)
   1eb08:	15010113          	addi	sp,sp,336
   1eb0c:	00008067          	jalr	zero,0(ra)
  if (has(DW_AT::abstract_origin)) {
   1eb10:	03100593          	addi	a1,zero,49
   1eb14:	00040513          	addi	a0,s0,0
   1eb18:	cd5ff0ef          	jal	ra,1e7ec <dwarf::die::has(dwarf::DW_AT) const>
   1eb1c:	16050263          	beq	a0,zero,1ec80 <dwarf::die::resolve(dwarf::DW_AT) const+0x1cc>
    die ao = (*this)[DW_AT::abstract_origin].as_reference();
   1eb20:	03100613          	addi	a2,zero,49
   1eb24:	00040593          	addi	a1,s0,0
   1eb28:	0e810413          	addi	s0,sp,232
   1eb2c:	00040513          	addi	a0,s0,0
   1eb30:	d01ff0ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   1eb34:	00040593          	addi	a1,s0,0
   1eb38:	00810413          	addi	s0,sp,8
   1eb3c:	00040513          	addi	a0,s0,0
   1eb40:	558030ef          	jal	ra,22098 <dwarf::value::as_reference() const>
    if (ao.has(attr))
   1eb44:	00090593          	addi	a1,s2,0
   1eb48:	00040513          	addi	a0,s0,0
   1eb4c:	ca1ff0ef          	jal	ra,1e7ec <dwarf::die::has(dwarf::DW_AT) const>
   1eb50:	00050c63          	beq	a0,zero,1eb68 <dwarf::die::resolve(dwarf::DW_AT) const+0xb4>
      return ao[attr];
   1eb54:	00090613          	addi	a2,s2,0
   1eb58:	00040593          	addi	a1,s0,0
   1eb5c:	00048513          	addi	a0,s1,0
   1eb60:	cd1ff0ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   1eb64:	0e80006f          	jal	zero,1ec4c <dwarf::die::resolve(dwarf::DW_AT) const+0x198>
    if (ao.has(DW_AT::specification)) {
   1eb68:	04700593          	addi	a1,zero,71
   1eb6c:	00810513          	addi	a0,sp,8
   1eb70:	c7dff0ef          	jal	ra,1e7ec <dwarf::die::has(dwarf::DW_AT) const>
   1eb74:	06050a63          	beq	a0,zero,1ebe8 <dwarf::die::resolve(dwarf::DW_AT) const+0x134>
      die s = ao[DW_AT::specification].as_reference();
   1eb78:	04700613          	addi	a2,zero,71
   1eb7c:	00810593          	addi	a1,sp,8
   1eb80:	10010513          	addi	a0,sp,256
   1eb84:	cadff0ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   1eb88:	10010593          	addi	a1,sp,256
   1eb8c:	07810513          	addi	a0,sp,120
   1eb90:	508030ef          	jal	ra,22098 <dwarf::value::as_reference() const>
      if (s.has(attr))
   1eb94:	00090593          	addi	a1,s2,0
   1eb98:	07810513          	addi	a0,sp,120
   1eb9c:	c51ff0ef          	jal	ra,1e7ec <dwarf::die::has(dwarf::DW_AT) const>
   1eba0:	00050c63          	beq	a0,zero,1ebb8 <dwarf::die::resolve(dwarf::DW_AT) const+0x104>
        return s[attr];
   1eba4:	00090613          	addi	a2,s2,0
   1eba8:	07810593          	addi	a1,sp,120
   1ebac:	00048513          	addi	a0,s1,0
   1ebb0:	c81ff0ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   1ebb4:	0680006f          	jal	zero,1ec1c <dwarf::die::resolve(dwarf::DW_AT) const+0x168>
    for (T *p = base; p < end; ++p)
   1ebb8:	0c813503          	ld	a0,200(sp)
   1ebbc:	0d013783          	ld	a5,208(sp)
   1ebc0:	00f57a63          	bgeu	a0,a5,1ebd4 <dwarf::die::resolve(dwarf::DW_AT) const+0x120>
   1ebc4:	00050793          	addi	a5,a0,0
   1ebc8:	00878793          	addi	a5,a5,8
   1ebcc:	0d013703          	ld	a4,208(sp)
   1ebd0:	fee7ece3          	bltu	a5,a4,1ebc8 <dwarf::die::resolve(dwarf::DW_AT) const+0x114>
    end = base;
   1ebd4:	0ca13823          	sd	a0,208(sp)
    if ((char *)base != buf)
   1ebd8:	09810793          	addi	a5,sp,152
   1ebdc:	00f50663          	beq	a0,a5,1ebe8 <dwarf::die::resolve(dwarf::DW_AT) const+0x134>
      delete[] (char *)base;
   1ebe0:	00050463          	beq	a0,zero,1ebe8 <dwarf::die::resolve(dwarf::DW_AT) const+0x134>
   1ebe4:	c6df70ef          	jal	ra,16850 <operator delete[](void*)@plt>
    for (T *p = base; p < end; ++p)
   1ebe8:	05813503          	ld	a0,88(sp)
   1ebec:	06013783          	ld	a5,96(sp)
   1ebf0:	00f57a63          	bgeu	a0,a5,1ec04 <dwarf::die::resolve(dwarf::DW_AT) const+0x150>
   1ebf4:	00050793          	addi	a5,a0,0
   1ebf8:	00878793          	addi	a5,a5,8
   1ebfc:	06013703          	ld	a4,96(sp)
   1ec00:	fee7ece3          	bltu	a5,a4,1ebf8 <dwarf::die::resolve(dwarf::DW_AT) const+0x144>
    end = base;
   1ec04:	06a13023          	sd	a0,96(sp)
    if ((char *)base != buf)
   1ec08:	02810793          	addi	a5,sp,40
   1ec0c:	08f50263          	beq	a0,a5,1ec90 <dwarf::die::resolve(dwarf::DW_AT) const+0x1dc>
      delete[] (char *)base;
   1ec10:	08050063          	beq	a0,zero,1ec90 <dwarf::die::resolve(dwarf::DW_AT) const+0x1dc>
   1ec14:	c3df70ef          	jal	ra,16850 <operator delete[](void*)@plt>
   1ec18:	0780006f          	jal	zero,1ec90 <dwarf::die::resolve(dwarf::DW_AT) const+0x1dc>
    for (T *p = base; p < end; ++p)
   1ec1c:	0c813503          	ld	a0,200(sp)
   1ec20:	0d013783          	ld	a5,208(sp)
   1ec24:	00f57a63          	bgeu	a0,a5,1ec38 <dwarf::die::resolve(dwarf::DW_AT) const+0x184>
   1ec28:	00050793          	addi	a5,a0,0
   1ec2c:	00878793          	addi	a5,a5,8
   1ec30:	0d013703          	ld	a4,208(sp)
   1ec34:	fee7ece3          	bltu	a5,a4,1ec2c <dwarf::die::resolve(dwarf::DW_AT) const+0x178>
    end = base;
   1ec38:	0ca13823          	sd	a0,208(sp)
    if ((char *)base != buf)
   1ec3c:	09810793          	addi	a5,sp,152
   1ec40:	00f50663          	beq	a0,a5,1ec4c <dwarf::die::resolve(dwarf::DW_AT) const+0x198>
      delete[] (char *)base;
   1ec44:	00050463          	beq	a0,zero,1ec4c <dwarf::die::resolve(dwarf::DW_AT) const+0x198>
   1ec48:	c09f70ef          	jal	ra,16850 <operator delete[](void*)@plt>
    for (T *p = base; p < end; ++p)
   1ec4c:	05813503          	ld	a0,88(sp)
   1ec50:	06013783          	ld	a5,96(sp)
   1ec54:	00f57a63          	bgeu	a0,a5,1ec68 <dwarf::die::resolve(dwarf::DW_AT) const+0x1b4>
   1ec58:	00050793          	addi	a5,a0,0
   1ec5c:	00878793          	addi	a5,a5,8
   1ec60:	06013703          	ld	a4,96(sp)
   1ec64:	fee7ece3          	bltu	a5,a4,1ec5c <dwarf::die::resolve(dwarf::DW_AT) const+0x1a8>
    end = base;
   1ec68:	06a13023          	sd	a0,96(sp)
    if ((char *)base != buf)
   1ec6c:	02810793          	addi	a5,sp,40
   1ec70:	e8f502e3          	beq	a0,a5,1eaf4 <dwarf::die::resolve(dwarf::DW_AT) const+0x40>
      delete[] (char *)base;
   1ec74:	e80500e3          	beq	a0,zero,1eaf4 <dwarf::die::resolve(dwarf::DW_AT) const+0x40>
   1ec78:	bd9f70ef          	jal	ra,16850 <operator delete[](void*)@plt>
   1ec7c:	e79ff06f          	jal	zero,1eaf4 <dwarf::die::resolve(dwarf::DW_AT) const+0x40>
  } else if (has(DW_AT::specification)) {
   1ec80:	04700593          	addi	a1,zero,71
   1ec84:	00040513          	addi	a0,s0,0
   1ec88:	b65ff0ef          	jal	ra,1e7ec <dwarf::die::has(dwarf::DW_AT) const>
   1ec8c:	00051863          	bne	a0,zero,1ec9c <dwarf::die::resolve(dwarf::DW_AT) const+0x1e8>
  value() : cu(nullptr), typ(type::invalid) {}
   1ec90:	0004b023          	sd	zero,0(s1)
   1ec94:	0004a623          	sw	zero,12(s1)
   1ec98:	e5dff06f          	jal	zero,1eaf4 <dwarf::die::resolve(dwarf::DW_AT) const+0x40>
    die s = (*this)[DW_AT::specification].as_reference();
   1ec9c:	04700613          	addi	a2,zero,71
   1eca0:	00040593          	addi	a1,s0,0
   1eca4:	11810413          	addi	s0,sp,280
   1eca8:	00040513          	addi	a0,s0,0
   1ecac:	b85ff0ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   1ecb0:	00040593          	addi	a1,s0,0
   1ecb4:	07810413          	addi	s0,sp,120
   1ecb8:	00040513          	addi	a0,s0,0
   1ecbc:	3dc030ef          	jal	ra,22098 <dwarf::value::as_reference() const>
    if (s.has(attr))
   1ecc0:	00090593          	addi	a1,s2,0
   1ecc4:	00040513          	addi	a0,s0,0
   1ecc8:	b25ff0ef          	jal	ra,1e7ec <dwarf::die::has(dwarf::DW_AT) const>
   1eccc:	00050c63          	beq	a0,zero,1ece4 <dwarf::die::resolve(dwarf::DW_AT) const+0x230>
      return s[attr];
   1ecd0:	00090613          	addi	a2,s2,0
   1ecd4:	00040593          	addi	a1,s0,0
   1ecd8:	00048513          	addi	a0,s1,0
   1ecdc:	b55ff0ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   1ece0:	0380006f          	jal	zero,1ed18 <dwarf::die::resolve(dwarf::DW_AT) const+0x264>
    for (T *p = base; p < end; ++p)
   1ece4:	0c813503          	ld	a0,200(sp)
   1ece8:	0d013783          	ld	a5,208(sp)
   1ecec:	00f57a63          	bgeu	a0,a5,1ed00 <dwarf::die::resolve(dwarf::DW_AT) const+0x24c>
   1ecf0:	00050793          	addi	a5,a0,0
   1ecf4:	00878793          	addi	a5,a5,8
   1ecf8:	0d013703          	ld	a4,208(sp)
   1ecfc:	fee7ece3          	bltu	a5,a4,1ecf4 <dwarf::die::resolve(dwarf::DW_AT) const+0x240>
    end = base;
   1ed00:	0ca13823          	sd	a0,208(sp)
    if ((char *)base != buf)
   1ed04:	09810793          	addi	a5,sp,152
   1ed08:	f8f504e3          	beq	a0,a5,1ec90 <dwarf::die::resolve(dwarf::DW_AT) const+0x1dc>
      delete[] (char *)base;
   1ed0c:	f80502e3          	beq	a0,zero,1ec90 <dwarf::die::resolve(dwarf::DW_AT) const+0x1dc>
   1ed10:	b41f70ef          	jal	ra,16850 <operator delete[](void*)@plt>
   1ed14:	f7dff06f          	jal	zero,1ec90 <dwarf::die::resolve(dwarf::DW_AT) const+0x1dc>
    for (T *p = base; p < end; ++p)
   1ed18:	0c813503          	ld	a0,200(sp)
   1ed1c:	0d013783          	ld	a5,208(sp)
   1ed20:	00f57a63          	bgeu	a0,a5,1ed34 <dwarf::die::resolve(dwarf::DW_AT) const+0x280>
   1ed24:	00050793          	addi	a5,a0,0
   1ed28:	00878793          	addi	a5,a5,8
   1ed2c:	0d013703          	ld	a4,208(sp)
   1ed30:	fee7ece3          	bltu	a5,a4,1ed28 <dwarf::die::resolve(dwarf::DW_AT) const+0x274>
    end = base;
   1ed34:	0ca13823          	sd	a0,208(sp)
    if ((char *)base != buf)
   1ed38:	09810793          	addi	a5,sp,152
   1ed3c:	daf50ce3          	beq	a0,a5,1eaf4 <dwarf::die::resolve(dwarf::DW_AT) const+0x40>
      delete[] (char *)base;
   1ed40:	da050ae3          	beq	a0,zero,1eaf4 <dwarf::die::resolve(dwarf::DW_AT) const+0x40>
   1ed44:	b0df70ef          	jal	ra,16850 <operator delete[](void*)@plt>
   1ed48:	dadff06f          	jal	zero,1eaf4 <dwarf::die::resolve(dwarf::DW_AT) const+0x40>
class die {
   1ed4c:	00050413          	addi	s0,a0,0
   1ed50:	09810513          	addi	a0,sp,152
   1ed54:	00024317          	auipc	t1,0x24
   1ed58:	6ac33303          	ld	t1,1708(t1) # 43400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b8b0>
   1ed5c:	000300e7          	jalr	ra,0(t1)
   1ed60:	02810513          	addi	a0,sp,40
   1ed64:	00024317          	auipc	t1,0x24
   1ed68:	69c33303          	ld	t1,1692(t1) # 43400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b8b0>
   1ed6c:	000300e7          	jalr	ra,0(t1)
   1ed70:	00040513          	addi	a0,s0,0
   1ed74:	c1df70ef          	jal	ra,16990 <_Unwind_Resume@plt>
   1ed78:	00050413          	addi	s0,a0,0
   1ed7c:	fe5ff06f          	jal	zero,1ed60 <dwarf::die::resolve(dwarf::DW_AT) const+0x2ac>
   1ed80:	00050413          	addi	s0,a0,0
   1ed84:	09810513          	addi	a0,sp,152
   1ed88:	00024317          	auipc	t1,0x24
   1ed8c:	67833303          	ld	t1,1656(t1) # 43400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b8b0>
   1ed90:	000300e7          	jalr	ra,0(t1)
   1ed94:	00040513          	addi	a0,s0,0
   1ed98:	bf9f70ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001ed9c <dwarf::die::iterator::operator++()>:
die::iterator &die::iterator::operator++() {
   1ed9c:	f3010113          	addi	sp,sp,-208
   1eda0:	0c113423          	sd	ra,200(sp)
   1eda4:	0c813023          	sd	s0,192(sp)
   1eda8:	0a913c23          	sd	s1,184(sp)
   1edac:	0b213823          	sd	s2,176(sp)
   1edb0:	0b313423          	sd	s3,168(sp)
   1edb4:	0b413023          	sd	s4,160(sp)
   1edb8:	09513c23          	sd	s5,152(sp)
   1edbc:	00050413          	addi	s0,a0,0
  if (!d.abbrev)
   1edc0:	01053783          	ld	a5,16(a0)
   1edc4:	00078a63          	beq	a5,zero,1edd8 <dwarf::die::iterator::operator++()+0x3c>
  if (!d.abbrev->children) {
   1edc8:	00c7c783          	lbu	a5,12(a5)
   1edcc:	02079a63          	bne	a5,zero,1ee00 <dwarf::die::iterator::operator++()+0x64>
    d.read(d.next);
   1edd0:	06853583          	ld	a1,104(a0)
   1edd4:	ce0ff0ef          	jal	ra,1e2b4 <dwarf::die::read(unsigned long)>
}
   1edd8:	00040513          	addi	a0,s0,0
   1eddc:	0c813083          	ld	ra,200(sp)
   1ede0:	0c013403          	ld	s0,192(sp)
   1ede4:	0b813483          	ld	s1,184(sp)
   1ede8:	0b013903          	ld	s2,176(sp)
   1edec:	0a813983          	ld	s3,168(sp)
   1edf0:	0a013a03          	ld	s4,160(sp)
   1edf4:	09813a83          	ld	s5,152(sp)
   1edf8:	0d010113          	addi	sp,sp,208
   1edfc:	00008067          	jalr	zero,0(ra)
  } else if (d.has(DW_AT::sibling)) {
   1ee00:	00100593          	addi	a1,zero,1
   1ee04:	9e9ff0ef          	jal	ra,1e7ec <dwarf::die::has(dwarf::DW_AT) const>
   1ee08:	16050663          	beq	a0,zero,1ef74 <dwarf::die::iterator::operator++()+0x1d8>
    d = d[DW_AT::sibling].as_reference();
   1ee0c:	00100613          	addi	a2,zero,1
   1ee10:	00040593          	addi	a1,s0,0
   1ee14:	07810493          	addi	s1,sp,120
   1ee18:	00048513          	addi	a0,s1,0
   1ee1c:	a15ff0ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   1ee20:	00048593          	addi	a1,s1,0
   1ee24:	00810513          	addi	a0,sp,8
   1ee28:	270030ef          	jal	ra,22098 <dwarf::value::as_reference() const>
  die &operator=(die &&o) = default;
   1ee2c:	00812783          	lw	a5,8(sp)
   1ee30:	00f42023          	sw	a5,0(s0)
   1ee34:	01013783          	ld	a5,16(sp)
   1ee38:	00f43423          	sd	a5,8(s0)
   1ee3c:	01813783          	ld	a5,24(sp)
   1ee40:	00f43823          	sd	a5,16(s0)
   1ee44:	02013783          	ld	a5,32(sp)
   1ee48:	00f43c23          	sd	a5,24(s0)
  size_type size() const { return end - base; }
   1ee4c:	06013903          	ld	s2,96(sp)
   1ee50:	05813783          	ld	a5,88(sp)
   1ee54:	40f90933          	sub	s2,s2,a5
   1ee58:	40395493          	srai	s1,s2,0x3
    for (T *p = base; p < end; ++p)
   1ee5c:	05043683          	ld	a3,80(s0)
   1ee60:	05843783          	ld	a5,88(s0)
   1ee64:	00f6fa63          	bgeu	a3,a5,1ee78 <dwarf::die::iterator::operator++()+0xdc>
   1ee68:	00068793          	addi	a5,a3,0
   1ee6c:	00878793          	addi	a5,a5,8
   1ee70:	05843703          	ld	a4,88(s0)
   1ee74:	fee7ece3          	bltu	a5,a4,1ee6c <dwarf::die::iterator::operator++()+0xd0>
    end = base;
   1ee78:	04d43c23          	sd	a3,88(s0)
    if (n <= (size_type)(cap - base))
   1ee7c:	06043503          	ld	a0,96(s0)
   1ee80:	40d50533          	sub	a0,a0,a3
   1ee84:	07257c63          	bgeu	a0,s2,1eefc <dwarf::die::iterator::operator++()+0x160>
   1ee88:	40355513          	srai	a0,a0,0x3
   1ee8c:	00051463          	bne	a0,zero,1ee94 <dwarf::die::iterator::operator++()+0xf8>
   1ee90:	00100513          	addi	a0,zero,1
    while (target < n)
   1ee94:	00957663          	bgeu	a0,s1,1eea0 <dwarf::die::iterator::operator++()+0x104>
      target <<= 1;
   1ee98:	00151513          	slli	a0,a0,0x1
    while (target < n)
   1ee9c:	fe956ee3          	bltu	a0,s1,1ee98 <dwarf::die::iterator::operator++()+0xfc>
    char *newbuf = new char[sizeof(T[target])];
   1eea0:	00351993          	slli	s3,a0,0x3
   1eea4:	00098513          	addi	a0,s3,0
   1eea8:	ee8f70ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   1eeac:	00050a93          	addi	s5,a0,0
    T *src = base, *dest = (T *)newbuf;
   1eeb0:	05043503          	ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   1eeb4:	05843703          	ld	a4,88(s0)
   1eeb8:	0ae57a63          	bgeu	a0,a4,1ef6c <dwarf::die::iterator::operator++()+0x1d0>
    T *src = base, *dest = (T *)newbuf;
   1eebc:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   1eec0:	00878793          	addi	a5,a5,8
   1eec4:	fee7eee3          	bltu	a5,a4,1eec0 <dwarf::die::iterator::operator++()+0x124>
   1eec8:	fff70a13          	addi	s4,a4,-1
   1eecc:	40aa0a33          	sub	s4,s4,a0
   1eed0:	ff8a7a13          	andi	s4,s4,-8
   1eed4:	008a0a13          	addi	s4,s4,8
   1eed8:	014a8a33          	add	s4,s5,s4
   1eedc:	02040793          	addi	a5,s0,32
    if ((char *)base != buf)
   1eee0:	00f50663          	beq	a0,a5,1eeec <dwarf::die::iterator::operator++()+0x150>
      delete[] (char *)base;
   1eee4:	00050463          	beq	a0,zero,1eeec <dwarf::die::iterator::operator++()+0x150>
   1eee8:	969f70ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1eeec:	05543823          	sd	s5,80(s0)
    end = dest;
   1eef0:	05443c23          	sd	s4,88(s0)
    cap = base + target;
   1eef4:	013a8ab3          	add	s5,s5,s3
   1eef8:	07543023          	sd	s5,96(s0)
    for (size_type i = 0; i < osize; i++)
   1eefc:	02048663          	beq	s1,zero,1ef28 <dwarf::die::iterator::operator++()+0x18c>
   1ef00:	00000793          	addi	a5,zero,0
   1ef04:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1ef08:	05813703          	ld	a4,88(sp)
   1ef0c:	00d70733          	add	a4,a4,a3
   1ef10:	00073603          	ld	a2,0(a4)
   1ef14:	05043703          	ld	a4,80(s0)
   1ef18:	00d70733          	add	a4,a4,a3
   1ef1c:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1ef20:	00178793          	addi	a5,a5,1
   1ef24:	fef490e3          	bne	s1,a5,1ef04 <dwarf::die::iterator::operator++()+0x168>
    end = base + osize;
   1ef28:	05043783          	ld	a5,80(s0)
   1ef2c:	012787b3          	add	a5,a5,s2
   1ef30:	04f43c23          	sd	a5,88(s0)
   1ef34:	07013783          	ld	a5,112(sp)
   1ef38:	06f43423          	sd	a5,104(s0)
    for (T *p = base; p < end; ++p)
   1ef3c:	05813503          	ld	a0,88(sp)
   1ef40:	06013783          	ld	a5,96(sp)
   1ef44:	00f57a63          	bgeu	a0,a5,1ef58 <dwarf::die::iterator::operator++()+0x1bc>
   1ef48:	00050793          	addi	a5,a0,0
   1ef4c:	00878793          	addi	a5,a5,8
   1ef50:	06013703          	ld	a4,96(sp)
   1ef54:	fee7ece3          	bltu	a5,a4,1ef4c <dwarf::die::iterator::operator++()+0x1b0>
    if ((char *)base != buf)
   1ef58:	02810793          	addi	a5,sp,40
   1ef5c:	e6f50ee3          	beq	a0,a5,1edd8 <dwarf::die::iterator::operator++()+0x3c>
      delete[] (char *)base;
   1ef60:	e6050ce3          	beq	a0,zero,1edd8 <dwarf::die::iterator::operator++()+0x3c>
   1ef64:	8edf70ef          	jal	ra,16850 <operator delete[](void*)@plt>
   1ef68:	e71ff06f          	jal	zero,1edd8 <dwarf::die::iterator::operator++()+0x3c>
    T *src = base, *dest = (T *)newbuf;
   1ef6c:	000a8a13          	addi	s4,s5,0
   1ef70:	f6dff06f          	jal	zero,1eedc <dwarf::die::iterator::operator++()+0x140>
    iterator sub(d.cu, d.next);
   1ef74:	06843603          	ld	a2,104(s0)
   1ef78:	00843583          	ld	a1,8(s0)
   1ef7c:	00810513          	addi	a0,sp,8
   1ef80:	a55ff0ef          	jal	ra,1e9d4 <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)>
      ++sub;
   1ef84:	00810493          	addi	s1,sp,8
    while (sub->abbrev)
   1ef88:	01813783          	ld	a5,24(sp)
   1ef8c:	00078863          	beq	a5,zero,1ef9c <dwarf::die::iterator::operator++()+0x200>
      ++sub;
   1ef90:	00048513          	addi	a0,s1,0
   1ef94:	e09ff0ef          	jal	ra,1ed9c <dwarf::die::iterator::operator++()>
   1ef98:	ff1ff06f          	jal	zero,1ef88 <dwarf::die::iterator::operator++()+0x1ec>
    d.read(sub->next);
   1ef9c:	07013583          	ld	a1,112(sp)
   1efa0:	00040513          	addi	a0,s0,0
   1efa4:	b10ff0ef          	jal	ra,1e2b4 <dwarf::die::read(unsigned long)>
    for (T *p = base; p < end; ++p)
   1efa8:	05813503          	ld	a0,88(sp)
   1efac:	06013783          	ld	a5,96(sp)
   1efb0:	00f57a63          	bgeu	a0,a5,1efc4 <dwarf::die::iterator::operator++()+0x228>
   1efb4:	00050793          	addi	a5,a0,0
   1efb8:	00878793          	addi	a5,a5,8
   1efbc:	06013703          	ld	a4,96(sp)
   1efc0:	fee7ece3          	bltu	a5,a4,1efb8 <dwarf::die::iterator::operator++()+0x21c>
    if ((char *)base != buf)
   1efc4:	02810793          	addi	a5,sp,40
   1efc8:	e0f508e3          	beq	a0,a5,1edd8 <dwarf::die::iterator::operator++()+0x3c>
      delete[] (char *)base;
   1efcc:	e00506e3          	beq	a0,zero,1edd8 <dwarf::die::iterator::operator++()+0x3c>
   1efd0:	881f70ef          	jal	ra,16850 <operator delete[](void*)@plt>
   1efd4:	e05ff06f          	jal	zero,1edd8 <dwarf::die::iterator::operator++()+0x3c>
class die {
   1efd8:	00050413          	addi	s0,a0,0
   1efdc:	02810513          	addi	a0,sp,40
   1efe0:	00024317          	auipc	t1,0x24
   1efe4:	42033303          	ld	t1,1056(t1) # 43400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b8b0>
   1efe8:	000300e7          	jalr	ra,0(t1)
   1efec:	00040513          	addi	a0,s0,0
   1eff0:	9a1f70ef          	jal	ra,16990 <_Unwind_Resume@plt>
   1eff4:	00050413          	addi	s0,a0,0
   1eff8:	02810513          	addi	a0,sp,40
   1effc:	00024317          	auipc	t1,0x24
   1f000:	40433303          	ld	t1,1028(t1) # 43400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b8b0>
   1f004:	000300e7          	jalr	ra,0(t1)
   1f008:	00040513          	addi	a0,s0,0
   1f00c:	985f70ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000001f010 <dwarf::die::attributes() const>:
const vector<pair<DW_AT, value>> die::attributes() const {
   1f010:	f7010113          	addi	sp,sp,-144
   1f014:	08113423          	sd	ra,136(sp)
   1f018:	08813023          	sd	s0,128(sp)
   1f01c:	06913c23          	sd	s1,120(sp)
   1f020:	07213823          	sd	s2,112(sp)
   1f024:	07313423          	sd	s3,104(sp)
   1f028:	07413023          	sd	s4,96(sp)
   1f02c:	05513c23          	sd	s5,88(sp)
   1f030:	05613823          	sd	s6,80(sp)
   1f034:	05713423          	sd	s7,72(sp)
   1f038:	00050493          	addi	s1,a0,0
	: _M_start(), _M_finish(), _M_end_of_storage()
   1f03c:	00053023          	sd	zero,0(a0)
   1f040:	00053423          	sd	zero,8(a0)
   1f044:	00053823          	sd	zero,16(a0)
  if (!abbrev)
   1f048:	0105b783          	ld	a5,16(a1)
   1f04c:	0e078063          	beq	a5,zero,1f12c <dwarf::die::attributes() const+0x11c>
   1f050:	00058993          	addi	s3,a1,0
   1f054:	0107b403          	ld	s0,16(a5)
   1f058:	0187ba03          	ld	s4,24(a5)
  for (auto &a : abbrev->attributes) {
   1f05c:	0c8a0863          	beq	s4,s0,1f12c <dwarf::die::attributes() const+0x11c>
   1f060:	00000913          	addi	s2,zero,0
        make_pair(a.name, value(cu, a.name, a.form, a.type, attrs[i])));
   1f064:	02810a93          	addi	s5,sp,40
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   1f068:	00810b13          	addi	s6,sp,8
   1f06c:	00024b97          	auipc	s7,0x24
   1f070:	4a4bbb83          	ld	s7,1188(s7) # 43510 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)@@Base+0x243b4>
   1f074:	0680006f          	jal	zero,1f0dc <dwarf::die::attributes() const+0xcc>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   1f078:	00042783          	lw	a5,0(s0)
   1f07c:	00f12423          	sw	a5,8(sp)
   1f080:	02813783          	ld	a5,40(sp)
   1f084:	00f13823          	sd	a5,16(sp)
   1f088:	03013783          	ld	a5,48(sp)
   1f08c:	00f13c23          	sd	a5,24(sp)
   1f090:	03813783          	ld	a5,56(sp)
   1f094:	02f13023          	sd	a5,32(sp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   1f098:	0084b583          	ld	a1,8(s1)
   1f09c:	0104b783          	ld	a5,16(s1)
   1f0a0:	06f58263          	beq	a1,a5,1f104 <dwarf::die::attributes() const+0xf4>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1f0a4:	00813783          	ld	a5,8(sp)
   1f0a8:	00f5b023          	sd	a5,0(a1)
   1f0ac:	01013783          	ld	a5,16(sp)
   1f0b0:	00f5b423          	sd	a5,8(a1)
   1f0b4:	01813783          	ld	a5,24(sp)
   1f0b8:	00f5b823          	sd	a5,16(a1)
   1f0bc:	02013783          	ld	a5,32(sp)
   1f0c0:	00f5bc23          	sd	a5,24(a1)
	    ++this->_M_impl._M_finish;
   1f0c4:	0084b783          	ld	a5,8(s1)
   1f0c8:	02078793          	addi	a5,a5,32
   1f0cc:	00f4b423          	sd	a5,8(s1)
  for (auto &a : abbrev->attributes) {
   1f0d0:	00c40413          	addi	s0,s0,12
   1f0d4:	00890913          	addi	s2,s2,8
   1f0d8:	048a0a63          	beq	s4,s0,1f12c <dwarf::die::attributes() const+0x11c>
        make_pair(a.name, value(cu, a.name, a.form, a.type, attrs[i])));
   1f0dc:	0509b783          	ld	a5,80(s3)
   1f0e0:	012787b3          	add	a5,a5,s2
   1f0e4:	0007b783          	ld	a5,0(a5)
   1f0e8:	00842703          	lw	a4,8(s0)
   1f0ec:	00442683          	lw	a3,4(s0)
   1f0f0:	00042603          	lw	a2,0(s0)
   1f0f4:	0089b583          	ld	a1,8(s3)
   1f0f8:	000a8513          	addi	a0,s5,0
   1f0fc:	32d020ef          	jal	ra,21c28 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)>
   1f100:	f79ff06f          	jal	zero,1f078 <dwarf::die::attributes() const+0x68>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   1f104:	000b0613          	addi	a2,s6,0
   1f108:	00048513          	addi	a0,s1,0
   1f10c:	000b80e7          	jalr	ra,0(s7)
   1f110:	fc1ff06f          	jal	zero,1f0d0 <dwarf::die::attributes() const+0xc0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1f114:	00050413          	addi	s0,a0,0
   1f118:	0004b503          	ld	a0,0(s1)
	if (__p)
   1f11c:	00050463          	beq	a0,zero,1f124 <dwarf::die::attributes() const+0x114>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f120:	e80f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1f124:	00040513          	addi	a0,s0,0
   1f128:	869f70ef          	jal	ra,16990 <_Unwind_Resume@plt>
}
   1f12c:	00048513          	addi	a0,s1,0
   1f130:	08813083          	ld	ra,136(sp)
   1f134:	08013403          	ld	s0,128(sp)
   1f138:	07813483          	ld	s1,120(sp)
   1f13c:	07013903          	ld	s2,112(sp)
   1f140:	06813983          	ld	s3,104(sp)
   1f144:	06013a03          	ld	s4,96(sp)
   1f148:	05813a83          	ld	s5,88(sp)
   1f14c:	05013b03          	ld	s6,80(sp)
   1f150:	04813b83          	ld	s7,72(sp)
   1f154:	09010113          	addi	sp,sp,144
   1f158:	00008067          	jalr	zero,0(ra)

000000000001f15c <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)>:
      vector<_Tp, _Alloc>::
   1f15c:	fb010113          	addi	sp,sp,-80
   1f160:	04113423          	sd	ra,72(sp)
   1f164:	04813023          	sd	s0,64(sp)
   1f168:	02913c23          	sd	s1,56(sp)
   1f16c:	03213823          	sd	s2,48(sp)
   1f170:	03313423          	sd	s3,40(sp)
   1f174:	03413023          	sd	s4,32(sp)
   1f178:	01513c23          	sd	s5,24(sp)
   1f17c:	01613823          	sd	s6,16(sp)
   1f180:	01713423          	sd	s7,8(sp)
   1f184:	01813023          	sd	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1f188:	00853903          	ld	s2,8(a0)
   1f18c:	00053a03          	ld	s4,0(a0)
   1f190:	414907b3          	sub	a5,s2,s4
   1f194:	4057d793          	srai	a5,a5,0x5
	if (max_size() - size() < __n)
   1f198:	fff00713          	addi	a4,zero,-1
   1f19c:	00675713          	srli	a4,a4,0x6
   1f1a0:	04e78463          	beq	a5,a4,1f1e8 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x8c>
   1f1a4:	00050a93          	addi	s5,a0,0
   1f1a8:	00058b93          	addi	s7,a1,0
   1f1ac:	00060493          	addi	s1,a2,0
   1f1b0:	00058413          	addi	s0,a1,0
      return __a;
   1f1b4:	00078713          	addi	a4,a5,0
      if (__a < __b)
   1f1b8:	03490e63          	beq	s2,s4,1f1f4 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x98>
	const size_type __len = size() + (std::max)(size(), __n);
   1f1bc:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1f1c0:	04f76263          	bltu	a4,a5,1f204 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xa8>
   1f1c4:	00070b13          	addi	s6,a4,0
   1f1c8:	fff00793          	addi	a5,zero,-1
   1f1cc:	0067d793          	srli	a5,a5,0x6
   1f1d0:	00e7f463          	bgeu	a5,a4,1f1d8 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x7c>
   1f1d4:	00078b13          	addi	s6,a5,0
    { return __lhs.base() - __rhs.base(); }
   1f1d8:	414b8c33          	sub	s8,s7,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1f1dc:	00000993          	addi	s3,zero,0
   1f1e0:	02070e63          	beq	a4,zero,1f21c <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xc0>
   1f1e4:	02c0006f          	jal	zero,1f210 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xb4>
	  __throw_length_error(__N(__s));
   1f1e8:	00018517          	auipc	a0,0x18
   1f1ec:	31850513          	addi	a0,a0,792 # 37500 <__libc_csu_fini+0xa0>
   1f1f0:	cb0f70ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   1f1f4:	00100713          	addi	a4,zero,1
   1f1f8:	fc5ff06f          	jal	zero,1f1bc <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x60>
      _ForwardIterator __cur = __result;
   1f1fc:	00098493          	addi	s1,s3,0
   1f200:	0800006f          	jal	zero,1f280 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x124>
   1f204:	414b8c33          	sub	s8,s7,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1f208:	fff00b13          	addi	s6,zero,-1
   1f20c:	006b5b13          	srli	s6,s6,0x6
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1f210:	005b1513          	slli	a0,s6,0x5
   1f214:	d9cf70ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   1f218:	00050993          	addi	s3,a0,0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1f21c:	018987b3          	add	a5,s3,s8
   1f220:	0004b583          	ld	a1,0(s1)
   1f224:	0084b603          	ld	a2,8(s1)
   1f228:	0104b683          	ld	a3,16(s1)
   1f22c:	0184b703          	ld	a4,24(s1)
   1f230:	00b7b023          	sd	a1,0(a5)
   1f234:	00c7b423          	sd	a2,8(a5)
   1f238:	00d7b823          	sd	a3,16(a5)
   1f23c:	00e7bc23          	sd	a4,24(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   1f240:	fb440ee3          	beq	s0,s4,1f1fc <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xa0>
   1f244:	414b84b3          	sub	s1,s7,s4
   1f248:	009984b3          	add	s1,s3,s1
      _ForwardIterator __cur = __result;
   1f24c:	00098793          	addi	a5,s3,0
      for (; __first != __last; ++__first, (void)++__cur)
   1f250:	000a0713          	addi	a4,s4,0
   1f254:	00073503          	ld	a0,0(a4)
   1f258:	00873583          	ld	a1,8(a4)
   1f25c:	01073603          	ld	a2,16(a4)
   1f260:	01873683          	ld	a3,24(a4)
   1f264:	00a7b023          	sd	a0,0(a5)
   1f268:	00b7b423          	sd	a1,8(a5)
   1f26c:	00c7b823          	sd	a2,16(a5)
   1f270:	00d7bc23          	sd	a3,24(a5)
   1f274:	02070713          	addi	a4,a4,32
   1f278:	02078793          	addi	a5,a5,32
   1f27c:	fc979ce3          	bne	a5,s1,1f254 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xf8>
	      ++__new_finish;
   1f280:	02048493          	addi	s1,s1,32
   1f284:	03240e63          	beq	s0,s2,1f2c0 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x164>
   1f288:	41790bb3          	sub	s7,s2,s7
      _ForwardIterator __cur = __result;
   1f28c:	00048793          	addi	a5,s1,0
   1f290:	00043503          	ld	a0,0(s0)
   1f294:	00843603          	ld	a2,8(s0)
   1f298:	01043683          	ld	a3,16(s0)
   1f29c:	01843703          	ld	a4,24(s0)
   1f2a0:	00a7b023          	sd	a0,0(a5)
   1f2a4:	00c7b423          	sd	a2,8(a5)
   1f2a8:	00d7b823          	sd	a3,16(a5)
   1f2ac:	00e7bc23          	sd	a4,24(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   1f2b0:	02040413          	addi	s0,s0,32
   1f2b4:	02078793          	addi	a5,a5,32
   1f2b8:	fd241ce3          	bne	s0,s2,1f290 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x134>
   1f2bc:	017484b3          	add	s1,s1,s7
	if (__p)
   1f2c0:	000a0663          	beq	s4,zero,1f2cc <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x170>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f2c4:	000a0513          	addi	a0,s4,0
   1f2c8:	cd8f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   1f2cc:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   1f2d0:	009ab423          	sd	s1,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1f2d4:	005b1b13          	slli	s6,s6,0x5
   1f2d8:	016989b3          	add	s3,s3,s6
   1f2dc:	013ab823          	sd	s3,16(s5)
    }
   1f2e0:	04813083          	ld	ra,72(sp)
   1f2e4:	04013403          	ld	s0,64(sp)
   1f2e8:	03813483          	ld	s1,56(sp)
   1f2ec:	03013903          	ld	s2,48(sp)
   1f2f0:	02813983          	ld	s3,40(sp)
   1f2f4:	02013a03          	ld	s4,32(sp)
   1f2f8:	01813a83          	ld	s5,24(sp)
   1f2fc:	01013b03          	ld	s6,16(sp)
   1f300:	00813b83          	ld	s7,8(sp)
   1f304:	00013c03          	ld	s8,0(sp)
   1f308:	05010113          	addi	sp,sp,80
   1f30c:	00008067          	jalr	zero,0(ra)

000000000001f310 <dwarf::value::get_section_offset() const>:
    : cu(cu), form(form), typ(typ), offset(offset) {
  if (form == DW_FORM::indirect)
    resolve_indirect(name);
}

section_offset value::get_section_offset() const {
   1f310:	ff010113          	addi	sp,sp,-16
   1f314:	00113423          	sd	ra,8(sp)
   1f318:	00813023          	sd	s0,0(sp)
   1f31c:	00050413          	addi	s0,a0,0
  return cu->get_section_offset() + offset;
   1f320:	00053503          	ld	a0,0(a0)
   1f324:	ff1f80ef          	jal	ra,18314 <dwarf::unit::get_section_offset() const>
   1f328:	01043783          	ld	a5,16(s0)
}
   1f32c:	00f50533          	add	a0,a0,a5
   1f330:	00813083          	ld	ra,8(sp)
   1f334:	00013403          	ld	s0,0(sp)
   1f338:	01010113          	addi	sp,sp,16
   1f33c:	00008067          	jalr	zero,0(ra)

000000000001f340 <dwarf::value::as_address() const>:

taddr value::as_address() const {
   1f340:	f6010113          	addi	sp,sp,-160
   1f344:	08113c23          	sd	ra,152(sp)
   1f348:	08813823          	sd	s0,144(sp)
   1f34c:	08913423          	sd	s1,136(sp)
   1f350:	09213023          	sd	s2,128(sp)
   1f354:	00050413          	addi	s0,a0,0
  if (form != DW_FORM::addr)
   1f358:	00852703          	lw	a4,8(a0)
   1f35c:	00100793          	addi	a5,zero,1
   1f360:	0cf71c63          	bne	a4,a5,1f438 <dwarf::value::as_address() const+0xf8>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as address");

  cursor cur(cu->data(), offset);
   1f364:	00053503          	ld	a0,0(a0)
   1f368:	fb9f80ef          	jal	ra,18320 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1f36c:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1f370:	00853483          	ld	s1,8(a0)
	if (_M_pi != nullptr)
   1f374:	2e048c63          	beq	s1,zero,1f66c <dwarf::value::as_address() const+0x32c>
    if (__is_single_threaded())
   1f378:	00024797          	auipc	a5,0x24
   1f37c:	1207b783          	ld	a5,288(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1f380:	0007c783          	lbu	a5,0(a5)
   1f384:	16078a63          	beq	a5,zero,1f4f8 <dwarf::value::as_address() const+0x1b8>
  { *__mem += __val; }
   1f388:	0304a783          	lw	a5,48(s1)
   1f38c:	0017879b          	addiw	a5,a5,1
   1f390:	02f4a823          	sw	a5,48(s1)
   1f394:	01043403          	ld	s0,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1f398:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   1f39c:	06913823          	sd	s1,112(sp)
    if (__is_single_threaded())
   1f3a0:	00024797          	auipc	a5,0x24
   1f3a4:	0f87b783          	ld	a5,248(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1f3a8:	0007c783          	lbu	a5,0(a5)
   1f3ac:	14078e63          	beq	a5,zero,1f508 <dwarf::value::as_address() const+0x1c8>
  { *__mem += __val; }
   1f3b0:	0304a783          	lw	a5,48(s1)
   1f3b4:	0017879b          	addiw	a5,a5,1
   1f3b8:	02f4a823          	sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   1f3bc:	00893783          	ld	a5,8(s2)
   1f3c0:	008787b3          	add	a5,a5,s0
   1f3c4:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   1f3c8:	00024797          	auipc	a5,0x24
   1f3cc:	0d07b783          	ld	a5,208(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1f3d0:	0007c783          	lbu	a5,0(a5)
   1f3d4:	14078263          	beq	a5,zero,1f518 <dwarf::value::as_address() const+0x1d8>
    _Atomic_word __result = *__mem;
   1f3d8:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1f3dc:	fff5079b          	addiw	a5,a0,-1
   1f3e0:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1f3e4:	00100793          	addi	a5,zero,1
   1f3e8:	28f51e63          	bne	a0,a5,1f684 <dwarf::value::as_address() const+0x344>
	_M_dispose();
   1f3ec:	0004b783          	ld	a5,0(s1)
   1f3f0:	0107b783          	ld	a5,16(a5)
   1f3f4:	00048513          	addi	a0,s1,0
   1f3f8:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1f3fc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1f400:	00024797          	auipc	a5,0x24
   1f404:	0987b783          	ld	a5,152(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1f408:	0007c783          	lbu	a5,0(a5)
   1f40c:	10078e63          	beq	a5,zero,1f528 <dwarf::value::as_address() const+0x1e8>
    _Atomic_word __result = *__mem;
   1f410:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   1f414:	fff5079b          	addiw	a5,a0,-1
   1f418:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1f41c:	00100793          	addi	a5,zero,1
   1f420:	26f51263          	bne	a0,a5,1f684 <dwarf::value::as_address() const+0x344>
	    _M_destroy();
   1f424:	0004b783          	ld	a5,0(s1)
   1f428:	0187b783          	ld	a5,24(a5)
   1f42c:	00048513          	addi	a0,s1,0
   1f430:	000780e7          	jalr	ra,0(a5)
   1f434:	2500006f          	jal	zero,1f684 <dwarf::value::as_address() const+0x344>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as address");
   1f438:	01000513          	addi	a0,zero,16
   1f43c:	a54f70ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1f440:	00050493          	addi	s1,a0,0
   1f444:	00c42583          	lw	a1,12(s0)
   1f448:	00810513          	addi	a0,sp,8
   1f44c:	025100ef          	jal	ra,2fc70 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1f450:	00019617          	auipc	a2,0x19
   1f454:	84860613          	addi	a2,a2,-1976 # 37c98 <std::piecewise_construct+0x1c8>
   1f458:	00000593          	addi	a1,zero,0
   1f45c:	00810513          	addi	a0,sp,8
   1f460:	9a0f70ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1f464:	00050593          	addi	a1,a0,0
   1f468:	02810413          	addi	s0,sp,40
   1f46c:	00040513          	addi	a0,s0,0
   1f470:	a60f70ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1f474:	00019597          	auipc	a1,0x19
   1f478:	83458593          	addi	a1,a1,-1996 # 37ca8 <std::piecewise_construct+0x1d8>
   1f47c:	00040513          	addi	a0,s0,0
   1f480:	dc0f70ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1f484:	00050593          	addi	a1,a0,0
   1f488:	04810413          	addi	s0,sp,72
   1f48c:	00040513          	addi	a0,s0,0
   1f490:	a40f70ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::logic_error(what_arg) {}
   1f494:	00040593          	addi	a1,s0,0
   1f498:	00048513          	addi	a0,s1,0
   1f49c:	df4f70ef          	jal	ra,16a90 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1f4a0:	00024797          	auipc	a5,0x24
   1f4a4:	fc07b783          	ld	a5,-64(a5) # 43460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   1f4a8:	01078793          	addi	a5,a5,16
   1f4ac:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1f4b0:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1f4b4:	05810793          	addi	a5,sp,88
   1f4b8:	00f50463          	beq	a0,a5,1f4c0 <dwarf::value::as_address() const+0x180>
   1f4bc:	ae4f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f4c0:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1f4c4:	03810793          	addi	a5,sp,56
   1f4c8:	00f50463          	beq	a0,a5,1f4d0 <dwarf::value::as_address() const+0x190>
   1f4cc:	ad4f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f4d0:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1f4d4:	01810793          	addi	a5,sp,24
   1f4d8:	00f50463          	beq	a0,a5,1f4e0 <dwarf::value::as_address() const+0x1a0>
   1f4dc:	ac4f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1f4e0:	00024617          	auipc	a2,0x24
   1f4e4:	11063603          	ld	a2,272(a2) # 435f0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f868>
   1f4e8:	00024597          	auipc	a1,0x24
   1f4ec:	0c85b583          	ld	a1,200(a1) # 435b0 <typeinfo for dwarf::value_type_mismatch@@Base+0xbf68>
   1f4f0:	00048513          	addi	a0,s1,0
   1f4f4:	c6cf70ef          	jal	ra,16960 <__cxa_throw@plt>
      __atomic_add(__mem, __val);
   1f4f8:	00100593          	addi	a1,zero,1
   1f4fc:	03048513          	addi	a0,s1,48
   1f500:	8b0f70ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1f504:	e91ff06f          	jal	zero,1f394 <dwarf::value::as_address() const+0x54>
   1f508:	00100593          	addi	a1,zero,1
   1f50c:	03048513          	addi	a0,s1,48
   1f510:	8a0f70ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1f514:	ea9ff06f          	jal	zero,1f3bc <dwarf::value::as_address() const+0x7c>
      return __exchange_and_add(__mem, __val);
   1f518:	fff00593          	addi	a1,zero,-1
   1f51c:	03048513          	addi	a0,s1,48
   1f520:	8d0f70ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1f524:	ec1ff06f          	jal	zero,1f3e4 <dwarf::value::as_address() const+0xa4>
   1f528:	fff00593          	addi	a1,zero,-1
   1f52c:	03448513          	addi	a0,s1,52
   1f530:	8c0f70ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1f534:	ee9ff06f          	jal	zero,1f41c <dwarf::value::as_address() const+0xdc>
  return cur.address();
   1f538:	00050413          	addi	s0,a0,0
	if (_M_pi != nullptr)
   1f53c:	07013483          	ld	s1,112(sp)
   1f540:	02048463          	beq	s1,zero,1f568 <dwarf::value::as_address() const+0x228>
    if (__is_single_threaded())
   1f544:	00024797          	auipc	a5,0x24
   1f548:	f547b783          	ld	a5,-172(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1f54c:	0007c783          	lbu	a5,0(a5)
   1f550:	02078a63          	beq	a5,zero,1f584 <dwarf::value::as_address() const+0x244>
    _Atomic_word __result = *__mem;
   1f554:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1f558:	fff5079b          	addiw	a5,a0,-1
   1f55c:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1f560:	00100793          	addi	a5,zero,1
   1f564:	02f50863          	beq	a0,a5,1f594 <dwarf::value::as_address() const+0x254>
}
   1f568:	00040513          	addi	a0,s0,0
   1f56c:	09813083          	ld	ra,152(sp)
   1f570:	09013403          	ld	s0,144(sp)
   1f574:	08813483          	ld	s1,136(sp)
   1f578:	08013903          	ld	s2,128(sp)
   1f57c:	0a010113          	addi	sp,sp,160
   1f580:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   1f584:	fff00593          	addi	a1,zero,-1
   1f588:	03048513          	addi	a0,s1,48
   1f58c:	864f70ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1f590:	fd1ff06f          	jal	zero,1f560 <dwarf::value::as_address() const+0x220>
	_M_dispose();
   1f594:	0004b783          	ld	a5,0(s1)
   1f598:	0107b783          	ld	a5,16(a5)
   1f59c:	00048513          	addi	a0,s1,0
   1f5a0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1f5a4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1f5a8:	00024797          	auipc	a5,0x24
   1f5ac:	ef07b783          	ld	a5,-272(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1f5b0:	0007c783          	lbu	a5,0(a5)
   1f5b4:	02078663          	beq	a5,zero,1f5e0 <dwarf::value::as_address() const+0x2a0>
    _Atomic_word __result = *__mem;
   1f5b8:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   1f5bc:	fff5079b          	addiw	a5,a0,-1
   1f5c0:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1f5c4:	00100793          	addi	a5,zero,1
   1f5c8:	faf510e3          	bne	a0,a5,1f568 <dwarf::value::as_address() const+0x228>
	    _M_destroy();
   1f5cc:	0004b783          	ld	a5,0(s1)
   1f5d0:	0187b783          	ld	a5,24(a5)
   1f5d4:	00048513          	addi	a0,s1,0
   1f5d8:	000780e7          	jalr	ra,0(a5)
  return cur.address();
   1f5dc:	f8dff06f          	jal	zero,1f568 <dwarf::value::as_address() const+0x228>
      return __exchange_and_add(__mem, __val);
   1f5e0:	fff00593          	addi	a1,zero,-1
   1f5e4:	03448513          	addi	a0,s1,52
   1f5e8:	808f70ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1f5ec:	fd9ff06f          	jal	zero,1f5c4 <dwarf::value::as_address() const+0x284>
      { return _M_dataplus._M_p; }
   1f5f0:	00050413          	addi	s0,a0,0
   1f5f4:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1f5f8:	05810793          	addi	a5,sp,88
   1f5fc:	00f50463          	beq	a0,a5,1f604 <dwarf::value::as_address() const+0x2c4>
   1f600:	9a0f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f604:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1f608:	03810793          	addi	a5,sp,56
   1f60c:	00f50463          	beq	a0,a5,1f614 <dwarf::value::as_address() const+0x2d4>
   1f610:	990f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f614:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1f618:	01810793          	addi	a5,sp,24
   1f61c:	00f50463          	beq	a0,a5,1f624 <dwarf::value::as_address() const+0x2e4>
   1f620:	980f70ef          	jal	ra,167a0 <operator delete(void*)@plt>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as address");
   1f624:	00048513          	addi	a0,s1,0
   1f628:	928f70ef          	jal	ra,16750 <__cxa_free_exception@plt>
   1f62c:	00040513          	addi	a0,s0,0
   1f630:	b60f70ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1f634:	00050413          	addi	s0,a0,0
   1f638:	fcdff06f          	jal	zero,1f604 <dwarf::value::as_address() const+0x2c4>
   1f63c:	00050413          	addi	s0,a0,0
   1f640:	fd5ff06f          	jal	zero,1f614 <dwarf::value::as_address() const+0x2d4>
   1f644:	00050413          	addi	s0,a0,0
   1f648:	fddff06f          	jal	zero,1f624 <dwarf::value::as_address() const+0x2e4>
	if (_M_pi != nullptr)
   1f64c:	00050413          	addi	s0,a0,0
   1f650:	07013503          	ld	a0,112(sp)
   1f654:	00050863          	beq	a0,zero,1f664 <dwarf::value::as_address() const+0x324>
	  _M_pi->_M_release();
   1f658:	00024317          	auipc	t1,0x24
   1f65c:	d8833303          	ld	t1,-632(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   1f660:	000300e7          	jalr	ra,0(t1)
   1f664:	00040513          	addi	a0,s0,0
   1f668:	b28f70ef          	jal	ra,16990 <_Unwind_Resume@plt>
  cursor cur(cu->data(), offset);
   1f66c:	01043703          	ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1f670:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   1f674:	06013823          	sd	zero,112(sp)
   1f678:	00893783          	ld	a5,8(s2)
   1f67c:	00e787b3          	add	a5,a5,a4
   1f680:	06f13c23          	sd	a5,120(sp)
  return cur.address();
   1f684:	06810513          	addi	a0,sp,104
   1f688:	00024317          	auipc	t1,0x24
   1f68c:	d0833303          	ld	t1,-760(t1) # 43390 <dwarf::cursor::address()@@Base+0x1f5a4>
   1f690:	000300e7          	jalr	ra,0(t1)
   1f694:	ea5ff06f          	jal	zero,1f538 <dwarf::value::as_address() const+0x1f8>

000000000001f698 <dwarf::value::as_block(unsigned long*) const>:

const void *value::as_block(size_t *size_out) const {
   1f698:	f5010113          	addi	sp,sp,-176
   1f69c:	0a113423          	sd	ra,168(sp)
   1f6a0:	0a813023          	sd	s0,160(sp)
   1f6a4:	08913c23          	sd	s1,152(sp)
   1f6a8:	09213823          	sd	s2,144(sp)
   1f6ac:	09313423          	sd	s3,136(sp)
   1f6b0:	09413023          	sd	s4,128(sp)
   1f6b4:	00050493          	addi	s1,a0,0
   1f6b8:	00058413          	addi	s0,a1,0
  // XXX Blocks can contain all sorts of things, including
  // references, which couldn't be resolved by callers in the
  // current minimal API.
  cursor cur(cu->data(), offset);
   1f6bc:	00053503          	ld	a0,0(a0)
   1f6c0:	c61f80ef          	jal	ra,18320 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1f6c4:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1f6c8:	00853903          	ld	s2,8(a0)
	if (_M_pi != nullptr)
   1f6cc:	4a090863          	beq	s2,zero,1fb7c <dwarf::value::as_block(unsigned long*) const+0x4e4>
    if (__is_single_threaded())
   1f6d0:	00024797          	auipc	a5,0x24
   1f6d4:	dc87b783          	ld	a5,-568(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1f6d8:	0007c783          	lbu	a5,0(a5)
   1f6dc:	0a078a63          	beq	a5,zero,1f790 <dwarf::value::as_block(unsigned long*) const+0xf8>
  { *__mem += __val; }
   1f6e0:	03092783          	lw	a5,48(s2)
   1f6e4:	0017879b          	addiw	a5,a5,1
   1f6e8:	02f92823          	sw	a5,48(s2)
   1f6ec:	0104ba03          	ld	s4,16(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1f6f0:	07313423          	sd	s3,104(sp)
      : _M_pi(__r._M_pi)
   1f6f4:	07213823          	sd	s2,112(sp)
    if (__is_single_threaded())
   1f6f8:	00024797          	auipc	a5,0x24
   1f6fc:	da07b783          	ld	a5,-608(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1f700:	0007c783          	lbu	a5,0(a5)
   1f704:	08078e63          	beq	a5,zero,1f7a0 <dwarf::value::as_block(unsigned long*) const+0x108>
  { *__mem += __val; }
   1f708:	03092783          	lw	a5,48(s2)
   1f70c:	0017879b          	addiw	a5,a5,1
   1f710:	02f92823          	sw	a5,48(s2)
   1f714:	0089b783          	ld	a5,8(s3)
   1f718:	014787b3          	add	a5,a5,s4
   1f71c:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   1f720:	00024797          	auipc	a5,0x24
   1f724:	d787b783          	ld	a5,-648(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1f728:	0007c783          	lbu	a5,0(a5)
   1f72c:	08078263          	beq	a5,zero,1f7b0 <dwarf::value::as_block(unsigned long*) const+0x118>
    _Atomic_word __result = *__mem;
   1f730:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   1f734:	fff5079b          	addiw	a5,a0,-1
   1f738:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1f73c:	00100793          	addi	a5,zero,1
   1f740:	44f51a63          	bne	a0,a5,1fb94 <dwarf::value::as_block(unsigned long*) const+0x4fc>
	_M_dispose();
   1f744:	00093783          	ld	a5,0(s2)
   1f748:	0107b783          	ld	a5,16(a5)
   1f74c:	00090513          	addi	a0,s2,0
   1f750:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1f754:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1f758:	00024797          	auipc	a5,0x24
   1f75c:	d407b783          	ld	a5,-704(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1f760:	0007c783          	lbu	a5,0(a5)
   1f764:	04078e63          	beq	a5,zero,1f7c0 <dwarf::value::as_block(unsigned long*) const+0x128>
    _Atomic_word __result = *__mem;
   1f768:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   1f76c:	fff5079b          	addiw	a5,a0,-1
   1f770:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1f774:	00100793          	addi	a5,zero,1
   1f778:	40f51e63          	bne	a0,a5,1fb94 <dwarf::value::as_block(unsigned long*) const+0x4fc>
	    _M_destroy();
   1f77c:	00093783          	ld	a5,0(s2)
   1f780:	0187b783          	ld	a5,24(a5)
   1f784:	00090513          	addi	a0,s2,0
   1f788:	000780e7          	jalr	ra,0(a5)
   1f78c:	4080006f          	jal	zero,1fb94 <dwarf::value::as_block(unsigned long*) const+0x4fc>
      __atomic_add(__mem, __val);
   1f790:	00100593          	addi	a1,zero,1
   1f794:	03090513          	addi	a0,s2,48
   1f798:	e19f60ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1f79c:	f51ff06f          	jal	zero,1f6ec <dwarf::value::as_block(unsigned long*) const+0x54>
   1f7a0:	00100593          	addi	a1,zero,1
   1f7a4:	03090513          	addi	a0,s2,48
   1f7a8:	e09f60ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1f7ac:	f69ff06f          	jal	zero,1f714 <dwarf::value::as_block(unsigned long*) const+0x7c>
      return __exchange_and_add(__mem, __val);
   1f7b0:	fff00593          	addi	a1,zero,-1
   1f7b4:	03090513          	addi	a0,s2,48
   1f7b8:	e39f60ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1f7bc:	f81ff06f          	jal	zero,1f73c <dwarf::value::as_block(unsigned long*) const+0xa4>
   1f7c0:	fff00593          	addi	a1,zero,-1
   1f7c4:	03490513          	addi	a0,s2,52
   1f7c8:	e29f60ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1f7cc:	fa9ff06f          	jal	zero,1f774 <dwarf::value::as_block(unsigned long*) const+0xdc>
    while (pos < sec->end) {
   1f7d0:	07813703          	ld	a4,120(sp)
      { return _M_ptr; }
   1f7d4:	06813503          	ld	a0,104(sp)
   1f7d8:	01053683          	ld	a3,16(a0)
    std::uint64_t result = 0;
   1f7dc:	00000793          	addi	a5,zero,0
    int shift = 0;
   1f7e0:	00000593          	addi	a1,zero,0
    while (pos < sec->end) {
   1f7e4:	02d77a63          	bgeu	a4,a3,1f818 <dwarf::value::as_block(unsigned long*) const+0x180>
      uint8_t byte = *(uint8_t *)(pos++);
   1f7e8:	00170713          	addi	a4,a4,1
   1f7ec:	06e13c23          	sd	a4,120(sp)
   1f7f0:	fff74683          	lbu	a3,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1f7f4:	07f6f613          	andi	a2,a3,127
   1f7f8:	00b61633          	sll	a2,a2,a1
   1f7fc:	00c7e7b3          	or	a5,a5,a2
      if ((byte & 0x80) == 0)
   1f800:	0186969b          	slliw	a3,a3,0x18
   1f804:	4186d69b          	sraiw	a3,a3,0x18
   1f808:	3406d663          	bge	a3,zero,1fb54 <dwarf::value::as_block(unsigned long*) const+0x4bc>
      shift += 7;
   1f80c:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   1f810:	01053683          	ld	a3,16(a0)
   1f814:	fcd76ae3          	bltu	a4,a3,1f7e8 <dwarf::value::as_block(unsigned long*) const+0x150>
    underflow();
   1f818:	06810513          	addi	a0,sp,104
   1f81c:	928fe0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    return 0;
   1f820:	1280006f          	jal	zero,1f948 <dwarf::value::as_block(unsigned long*) const+0x2b0>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f824:	06813783          	ld	a5,104(sp)
   1f828:	0107b703          	ld	a4,16(a5)
   1f82c:	07813783          	ld	a5,120(sp)
   1f830:	00e7e663          	bltu	a5,a4,1f83c <dwarf::value::as_block(unsigned long*) const+0x1a4>
      underflow();
   1f834:	06810513          	addi	a0,sp,104
   1f838:	90cfe0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f83c:	07813703          	ld	a4,120(sp)
    if (sec->ord == byte_order::lsb) {
   1f840:	06813783          	ld	a5,104(sp)
   1f844:	01c7a783          	lw	a5,28(a5)
   1f848:	30078063          	beq	a5,zero,1fb48 <dwarf::value::as_block(unsigned long*) const+0x4b0>
        val = (val << 8) | (uint64_t)p[i];
   1f84c:	00074783          	lbu	a5,0(a4)
      for (unsigned i = 0; i < sizeof(T); i++)
   1f850:	2fc0006f          	jal	zero,1fb4c <dwarf::value::as_block(unsigned long*) const+0x4b4>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f854:	06813783          	ld	a5,104(sp)
   1f858:	0107b703          	ld	a4,16(a5)
   1f85c:	07813783          	ld	a5,120(sp)
   1f860:	40f70633          	sub	a2,a4,a5
   1f864:	00100693          	addi	a3,zero,1
   1f868:	00c6f463          	bgeu	a3,a2,1f870 <dwarf::value::as_block(unsigned long*) const+0x1d8>
   1f86c:	00e7e663          	bltu	a5,a4,1f878 <dwarf::value::as_block(unsigned long*) const+0x1e0>
      underflow();
   1f870:	06810513          	addi	a0,sp,104
   1f874:	8d0fe0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f878:	07813703          	ld	a4,120(sp)
    if (sec->ord == byte_order::lsb) {
   1f87c:	06813783          	ld	a5,104(sp)
   1f880:	01c7a783          	lw	a5,28(a5)
   1f884:	02079063          	bne	a5,zero,1f8a4 <dwarf::value::as_block(unsigned long*) const+0x20c>
        val |= ((uint64_t)p[i]) << (i * 8);
   1f888:	00174783          	lbu	a5,1(a4)
   1f88c:	00879793          	slli	a5,a5,0x8
   1f890:	00074683          	lbu	a3,0(a4)
   1f894:	00d7e7b3          	or	a5,a5,a3
    pos += sizeof(T);
   1f898:	00270713          	addi	a4,a4,2
   1f89c:	06e13c23          	sd	a4,120(sp)
  case DW_FORM::block1:
    *size_out = cur.fixed<uint8_t>();
    break;
  case DW_FORM::block2:
    *size_out = cur.fixed<uint16_t>();
    break;
   1f8a0:	2b40006f          	jal	zero,1fb54 <dwarf::value::as_block(unsigned long*) const+0x4bc>
        val = (val << 8) | (uint64_t)p[i];
   1f8a4:	00074783          	lbu	a5,0(a4)
   1f8a8:	00879793          	slli	a5,a5,0x8
   1f8ac:	00174683          	lbu	a3,1(a4)
   1f8b0:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1f8b4:	fe5ff06f          	jal	zero,1f898 <dwarf::value::as_block(unsigned long*) const+0x200>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f8b8:	06813783          	ld	a5,104(sp)
   1f8bc:	0107b703          	ld	a4,16(a5)
   1f8c0:	07813783          	ld	a5,120(sp)
   1f8c4:	40f70633          	sub	a2,a4,a5
   1f8c8:	00300693          	addi	a3,zero,3
   1f8cc:	00c6f463          	bgeu	a3,a2,1f8d4 <dwarf::value::as_block(unsigned long*) const+0x23c>
   1f8d0:	00e7e663          	bltu	a5,a4,1f8dc <dwarf::value::as_block(unsigned long*) const+0x244>
      underflow();
   1f8d4:	06810513          	addi	a0,sp,104
   1f8d8:	86cfe0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f8dc:	07813583          	ld	a1,120(sp)
    if (sec->ord == byte_order::lsb) {
   1f8e0:	06813783          	ld	a5,104(sp)
   1f8e4:	01c7a783          	lw	a5,28(a5)
   1f8e8:	02079e63          	bne	a5,zero,1f924 <dwarf::value::as_block(unsigned long*) const+0x28c>
   1f8ec:	00058613          	addi	a2,a1,0
   1f8f0:	00000713          	addi	a4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1f8f4:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1f8f8:	00064683          	lbu	a3,0(a2)
   1f8fc:	00e696b3          	sll	a3,a3,a4
   1f900:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1f904:	00160613          	addi	a2,a2,1
   1f908:	0087071b          	addiw	a4,a4,8
   1f90c:	fea716e3          	bne	a4,a0,1f8f8 <dwarf::value::as_block(unsigned long*) const+0x260>
    pos += sizeof(T);
   1f910:	00458593          	addi	a1,a1,4
   1f914:	06b13c23          	sd	a1,120(sp)
   1f918:	02079793          	slli	a5,a5,0x20
   1f91c:	0207d793          	srli	a5,a5,0x20
  case DW_FORM::block4:
    *size_out = cur.fixed<uint32_t>();
    break;
   1f920:	2340006f          	jal	zero,1fb54 <dwarf::value::as_block(unsigned long*) const+0x4bc>
   1f924:	00058713          	addi	a4,a1,0
   1f928:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1f92c:	00000793          	addi	a5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1f930:	00879793          	slli	a5,a5,0x8
   1f934:	00074683          	lbu	a3,0(a4)
   1f938:	00f6e7b3          	or	a5,a3,a5
      for (unsigned i = 0; i < sizeof(T); i++)
   1f93c:	00170713          	addi	a4,a4,1
   1f940:	fec718e3          	bne	a4,a2,1f930 <dwarf::value::as_block(unsigned long*) const+0x298>
   1f944:	fcdff06f          	jal	zero,1f910 <dwarf::value::as_block(unsigned long*) const+0x278>
    return 0;
   1f948:	00000793          	addi	a5,zero,0
  case DW_FORM::block:
  case DW_FORM::exprloc:
    *size_out = cur.uleb128();
    break;
   1f94c:	2080006f          	jal	zero,1fb54 <dwarf::value::as_block(unsigned long*) const+0x4bc>
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as block");
   1f950:	01000513          	addi	a0,zero,16
   1f954:	d3df60ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1f958:	00050913          	addi	s2,a0,0
   1f95c:	00c4a583          	lw	a1,12(s1)
   1f960:	00810513          	addi	a0,sp,8
   1f964:	30c100ef          	jal	ra,2fc70 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1f968:	00018617          	auipc	a2,0x18
   1f96c:	33060613          	addi	a2,a2,816 # 37c98 <std::piecewise_construct+0x1c8>
   1f970:	00000593          	addi	a1,zero,0
   1f974:	00810513          	addi	a0,sp,8
   1f978:	c89f60ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1f97c:	00050593          	addi	a1,a0,0
   1f980:	02810413          	addi	s0,sp,40
   1f984:	00040513          	addi	a0,s0,0
   1f988:	d49f60ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1f98c:	00018597          	auipc	a1,0x18
   1f990:	32c58593          	addi	a1,a1,812 # 37cb8 <std::piecewise_construct+0x1e8>
   1f994:	00040513          	addi	a0,s0,0
   1f998:	8a8f70ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1f99c:	00050593          	addi	a1,a0,0
   1f9a0:	04810413          	addi	s0,sp,72
   1f9a4:	00040513          	addi	a0,s0,0
   1f9a8:	d29f60ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1f9ac:	00040593          	addi	a1,s0,0
   1f9b0:	00090513          	addi	a0,s2,0
   1f9b4:	8dcf70ef          	jal	ra,16a90 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1f9b8:	00024797          	auipc	a5,0x24
   1f9bc:	aa87b783          	ld	a5,-1368(a5) # 43460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   1f9c0:	01078793          	addi	a5,a5,16
   1f9c4:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   1f9c8:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1f9cc:	05810793          	addi	a5,sp,88
   1f9d0:	00f50463          	beq	a0,a5,1f9d8 <dwarf::value::as_block(unsigned long*) const+0x340>
   1f9d4:	dcdf60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f9d8:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1f9dc:	03810793          	addi	a5,sp,56
   1f9e0:	00f50463          	beq	a0,a5,1f9e8 <dwarf::value::as_block(unsigned long*) const+0x350>
   1f9e4:	dbdf60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f9e8:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1f9ec:	01810793          	addi	a5,sp,24
   1f9f0:	00f50463          	beq	a0,a5,1f9f8 <dwarf::value::as_block(unsigned long*) const+0x360>
   1f9f4:	dadf60ef          	jal	ra,167a0 <operator delete(void*)@plt>
   1f9f8:	00024617          	auipc	a2,0x24
   1f9fc:	bf863603          	ld	a2,-1032(a2) # 435f0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f868>
   1fa00:	00024597          	auipc	a1,0x24
   1fa04:	bb05b583          	ld	a1,-1104(a1) # 435b0 <typeinfo for dwarf::value_type_mismatch@@Base+0xbf68>
   1fa08:	00090513          	addi	a0,s2,0
   1fa0c:	f55f60ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1fa10:	00050413          	addi	s0,a0,0
   1fa14:	1000006f          	jal	zero,1fb14 <dwarf::value::as_block(unsigned long*) const+0x47c>
  }
  cur.ensure(*size_out);
  return cur.pos;
   1fa18:	07813483          	ld	s1,120(sp)
   1fa1c:	07013403          	ld	s0,112(sp)
   1fa20:	02040463          	beq	s0,zero,1fa48 <dwarf::value::as_block(unsigned long*) const+0x3b0>
    if (__is_single_threaded())
   1fa24:	00024797          	auipc	a5,0x24
   1fa28:	a747b783          	ld	a5,-1420(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1fa2c:	0007c783          	lbu	a5,0(a5)
   1fa30:	02078e63          	beq	a5,zero,1fa6c <dwarf::value::as_block(unsigned long*) const+0x3d4>
    _Atomic_word __result = *__mem;
   1fa34:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1fa38:	fff5079b          	addiw	a5,a0,-1
   1fa3c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1fa40:	00100793          	addi	a5,zero,1
   1fa44:	02f50c63          	beq	a0,a5,1fa7c <dwarf::value::as_block(unsigned long*) const+0x3e4>
}
   1fa48:	00048513          	addi	a0,s1,0
   1fa4c:	0a813083          	ld	ra,168(sp)
   1fa50:	0a013403          	ld	s0,160(sp)
   1fa54:	09813483          	ld	s1,152(sp)
   1fa58:	09013903          	ld	s2,144(sp)
   1fa5c:	08813983          	ld	s3,136(sp)
   1fa60:	08013a03          	ld	s4,128(sp)
   1fa64:	0b010113          	addi	sp,sp,176
   1fa68:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   1fa6c:	fff00593          	addi	a1,zero,-1
   1fa70:	03040513          	addi	a0,s0,48
   1fa74:	b7df60ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1fa78:	fc9ff06f          	jal	zero,1fa40 <dwarf::value::as_block(unsigned long*) const+0x3a8>
	_M_dispose();
   1fa7c:	00043783          	ld	a5,0(s0)
   1fa80:	0107b783          	ld	a5,16(a5)
   1fa84:	00040513          	addi	a0,s0,0
   1fa88:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1fa8c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1fa90:	00024797          	auipc	a5,0x24
   1fa94:	a087b783          	ld	a5,-1528(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1fa98:	0007c783          	lbu	a5,0(a5)
   1fa9c:	02078663          	beq	a5,zero,1fac8 <dwarf::value::as_block(unsigned long*) const+0x430>
    _Atomic_word __result = *__mem;
   1faa0:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1faa4:	fff5079b          	addiw	a5,a0,-1
   1faa8:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1faac:	00100793          	addi	a5,zero,1
   1fab0:	f8f51ce3          	bne	a0,a5,1fa48 <dwarf::value::as_block(unsigned long*) const+0x3b0>
	    _M_destroy();
   1fab4:	00043783          	ld	a5,0(s0)
   1fab8:	0187b783          	ld	a5,24(a5)
   1fabc:	00040513          	addi	a0,s0,0
   1fac0:	000780e7          	jalr	ra,0(a5)
  return cur.pos;
   1fac4:	f85ff06f          	jal	zero,1fa48 <dwarf::value::as_block(unsigned long*) const+0x3b0>
      return __exchange_and_add(__mem, __val);
   1fac8:	fff00593          	addi	a1,zero,-1
   1facc:	03440513          	addi	a0,s0,52
   1fad0:	b21f60ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1fad4:	fd9ff06f          	jal	zero,1faac <dwarf::value::as_block(unsigned long*) const+0x414>
      { return _M_dataplus._M_p; }
   1fad8:	00050413          	addi	s0,a0,0
   1fadc:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1fae0:	05810793          	addi	a5,sp,88
   1fae4:	00f50463          	beq	a0,a5,1faec <dwarf::value::as_block(unsigned long*) const+0x454>
   1fae8:	cb9f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1faec:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1faf0:	03810793          	addi	a5,sp,56
   1faf4:	00f50463          	beq	a0,a5,1fafc <dwarf::value::as_block(unsigned long*) const+0x464>
   1faf8:	ca9f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1fafc:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1fb00:	01810793          	addi	a5,sp,24
   1fb04:	00f50463          	beq	a0,a5,1fb0c <dwarf::value::as_block(unsigned long*) const+0x474>
   1fb08:	c99f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as block");
   1fb0c:	00090513          	addi	a0,s2,0
   1fb10:	c41f60ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1fb14:	07013503          	ld	a0,112(sp)
   1fb18:	00050863          	beq	a0,zero,1fb28 <dwarf::value::as_block(unsigned long*) const+0x490>
	  _M_pi->_M_release();
   1fb1c:	00024317          	auipc	t1,0x24
   1fb20:	8c433303          	ld	t1,-1852(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   1fb24:	000300e7          	jalr	ra,0(t1)
   1fb28:	00040513          	addi	a0,s0,0
   1fb2c:	e65f60ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1fb30:	00050413          	addi	s0,a0,0
   1fb34:	fb9ff06f          	jal	zero,1faec <dwarf::value::as_block(unsigned long*) const+0x454>
   1fb38:	00050413          	addi	s0,a0,0
   1fb3c:	fc1ff06f          	jal	zero,1fafc <dwarf::value::as_block(unsigned long*) const+0x464>
   1fb40:	00050413          	addi	s0,a0,0
   1fb44:	fc9ff06f          	jal	zero,1fb0c <dwarf::value::as_block(unsigned long*) const+0x474>
        val |= ((uint64_t)p[i]) << (i * 8);
   1fb48:	00074783          	lbu	a5,0(a4)
    pos += sizeof(T);
   1fb4c:	00170713          	addi	a4,a4,1
   1fb50:	06e13c23          	sd	a4,120(sp)
    *size_out = cur.fixed<uint8_t>();
   1fb54:	00f43023          	sd	a5,0(s0)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1fb58:	06813703          	ld	a4,104(sp)
   1fb5c:	01073683          	ld	a3,16(a4)
   1fb60:	07813703          	ld	a4,120(sp)
   1fb64:	40e68633          	sub	a2,a3,a4
   1fb68:	00f66463          	bltu	a2,a5,1fb70 <dwarf::value::as_block(unsigned long*) const+0x4d8>
   1fb6c:	ead766e3          	bltu	a4,a3,1fa18 <dwarf::value::as_block(unsigned long*) const+0x380>
      underflow();
   1fb70:	06810513          	addi	a0,sp,104
   1fb74:	dd1fd0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
   1fb78:	ea1ff06f          	jal	zero,1fa18 <dwarf::value::as_block(unsigned long*) const+0x380>
  cursor cur(cu->data(), offset);
   1fb7c:	0104b703          	ld	a4,16(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1fb80:	07313423          	sd	s3,104(sp)
      : _M_pi(__r._M_pi)
   1fb84:	06013823          	sd	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1fb88:	0089b783          	ld	a5,8(s3)
   1fb8c:	00e787b3          	add	a5,a5,a4
   1fb90:	06f13c23          	sd	a5,120(sp)
  switch (form) {
   1fb94:	0084a783          	lw	a5,8(s1)
   1fb98:	ffd7879b          	addiw	a5,a5,-3
   1fb9c:	0007869b          	addiw	a3,a5,0
   1fba0:	01500713          	addi	a4,zero,21
   1fba4:	dad766e3          	bltu	a4,a3,1f950 <dwarf::value::as_block(unsigned long*) const+0x2b8>
   1fba8:	02079713          	slli	a4,a5,0x20
   1fbac:	01e75793          	srli	a5,a4,0x1e
   1fbb0:	00018717          	auipc	a4,0x18
   1fbb4:	27870713          	addi	a4,a4,632 # 37e28 <std::piecewise_construct+0x358>
   1fbb8:	00e787b3          	add	a5,a5,a4
   1fbbc:	0007a783          	lw	a5,0(a5)
   1fbc0:	00e787b3          	add	a5,a5,a4
   1fbc4:	00078067          	jalr	zero,0(a5)

000000000001fbc8 <dwarf::value::as_uconstant() const>:

uint64_t value::as_uconstant() const {
   1fbc8:	f5010113          	addi	sp,sp,-176
   1fbcc:	0a113423          	sd	ra,168(sp)
   1fbd0:	0a813023          	sd	s0,160(sp)
   1fbd4:	08913c23          	sd	s1,152(sp)
   1fbd8:	09213823          	sd	s2,144(sp)
   1fbdc:	09313423          	sd	s3,136(sp)
   1fbe0:	00050413          	addi	s0,a0,0
  cursor cur(cu->data(), offset);
   1fbe4:	00053503          	ld	a0,0(a0)
   1fbe8:	f38f80ef          	jal	ra,18320 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1fbec:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1fbf0:	00853483          	ld	s1,8(a0)
	if (_M_pi != nullptr)
   1fbf4:	50048463          	beq	s1,zero,200fc <dwarf::value::as_uconstant() const+0x534>
    if (__is_single_threaded())
   1fbf8:	00024797          	auipc	a5,0x24
   1fbfc:	8a07b783          	ld	a5,-1888(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1fc00:	0007c783          	lbu	a5,0(a5)
   1fc04:	0a078a63          	beq	a5,zero,1fcb8 <dwarf::value::as_uconstant() const+0xf0>
  { *__mem += __val; }
   1fc08:	0304a783          	lw	a5,48(s1)
   1fc0c:	0017879b          	addiw	a5,a5,1
   1fc10:	02f4a823          	sw	a5,48(s1)
   1fc14:	01043983          	ld	s3,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1fc18:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   1fc1c:	06913823          	sd	s1,112(sp)
    if (__is_single_threaded())
   1fc20:	00024797          	auipc	a5,0x24
   1fc24:	8787b783          	ld	a5,-1928(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1fc28:	0007c783          	lbu	a5,0(a5)
   1fc2c:	08078e63          	beq	a5,zero,1fcc8 <dwarf::value::as_uconstant() const+0x100>
  { *__mem += __val; }
   1fc30:	0304a783          	lw	a5,48(s1)
   1fc34:	0017879b          	addiw	a5,a5,1
   1fc38:	02f4a823          	sw	a5,48(s1)
   1fc3c:	00893783          	ld	a5,8(s2)
   1fc40:	013787b3          	add	a5,a5,s3
   1fc44:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   1fc48:	00024797          	auipc	a5,0x24
   1fc4c:	8507b783          	ld	a5,-1968(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1fc50:	0007c783          	lbu	a5,0(a5)
   1fc54:	08078263          	beq	a5,zero,1fcd8 <dwarf::value::as_uconstant() const+0x110>
    _Atomic_word __result = *__mem;
   1fc58:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1fc5c:	fff5079b          	addiw	a5,a0,-1
   1fc60:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1fc64:	00100793          	addi	a5,zero,1
   1fc68:	4af51663          	bne	a0,a5,20114 <dwarf::value::as_uconstant() const+0x54c>
	_M_dispose();
   1fc6c:	0004b783          	ld	a5,0(s1)
   1fc70:	0107b783          	ld	a5,16(a5)
   1fc74:	00048513          	addi	a0,s1,0
   1fc78:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1fc7c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1fc80:	00024797          	auipc	a5,0x24
   1fc84:	8187b783          	ld	a5,-2024(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1fc88:	0007c783          	lbu	a5,0(a5)
   1fc8c:	04078e63          	beq	a5,zero,1fce8 <dwarf::value::as_uconstant() const+0x120>
    _Atomic_word __result = *__mem;
   1fc90:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   1fc94:	fff5079b          	addiw	a5,a0,-1
   1fc98:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1fc9c:	00100793          	addi	a5,zero,1
   1fca0:	46f51a63          	bne	a0,a5,20114 <dwarf::value::as_uconstant() const+0x54c>
	    _M_destroy();
   1fca4:	0004b783          	ld	a5,0(s1)
   1fca8:	0187b783          	ld	a5,24(a5)
   1fcac:	00048513          	addi	a0,s1,0
   1fcb0:	000780e7          	jalr	ra,0(a5)
   1fcb4:	4600006f          	jal	zero,20114 <dwarf::value::as_uconstant() const+0x54c>
      __atomic_add(__mem, __val);
   1fcb8:	00100593          	addi	a1,zero,1
   1fcbc:	03048513          	addi	a0,s1,48
   1fcc0:	8f1f60ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1fcc4:	f51ff06f          	jal	zero,1fc14 <dwarf::value::as_uconstant() const+0x4c>
   1fcc8:	00100593          	addi	a1,zero,1
   1fccc:	03048513          	addi	a0,s1,48
   1fcd0:	8e1f60ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1fcd4:	f69ff06f          	jal	zero,1fc3c <dwarf::value::as_uconstant() const+0x74>
      return __exchange_and_add(__mem, __val);
   1fcd8:	fff00593          	addi	a1,zero,-1
   1fcdc:	03048513          	addi	a0,s1,48
   1fce0:	911f60ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1fce4:	f81ff06f          	jal	zero,1fc64 <dwarf::value::as_uconstant() const+0x9c>
   1fce8:	fff00593          	addi	a1,zero,-1
   1fcec:	03448513          	addi	a0,s1,52
   1fcf0:	901f60ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1fcf4:	fa9ff06f          	jal	zero,1fc9c <dwarf::value::as_uconstant() const+0xd4>
    while (pos < sec->end) {
   1fcf8:	07813783          	ld	a5,120(sp)
      { return _M_ptr; }
   1fcfc:	06813583          	ld	a1,104(sp)
   1fd00:	0105b703          	ld	a4,16(a1)
    std::uint64_t result = 0;
   1fd04:	00000413          	addi	s0,zero,0
    int shift = 0;
   1fd08:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   1fd0c:	02e7fa63          	bgeu	a5,a4,1fd40 <dwarf::value::as_uconstant() const+0x178>
      uint8_t byte = *(uint8_t *)(pos++);
   1fd10:	00178793          	addi	a5,a5,1
   1fd14:	06f13c23          	sd	a5,120(sp)
   1fd18:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1fd1c:	07f77693          	andi	a3,a4,127
   1fd20:	00c696b3          	sll	a3,a3,a2
   1fd24:	00d46433          	or	s0,s0,a3
      if ((byte & 0x80) == 0)
   1fd28:	0187171b          	slliw	a4,a4,0x18
   1fd2c:	4187571b          	sraiw	a4,a4,0x18
   1fd30:	38075063          	bge	a4,zero,200b0 <dwarf::value::as_uconstant() const+0x4e8>
      shift += 7;
   1fd34:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   1fd38:	0105b703          	ld	a4,16(a1)
   1fd3c:	fce7eae3          	bltu	a5,a4,1fd10 <dwarf::value::as_uconstant() const+0x148>
    underflow();
   1fd40:	06810513          	addi	a0,sp,104
   1fd44:	c01fd0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
   1fd48:	2780006f          	jal	zero,1ffc0 <dwarf::value::as_uconstant() const+0x3f8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1fd4c:	06813783          	ld	a5,104(sp)
   1fd50:	0107b703          	ld	a4,16(a5)
   1fd54:	07813783          	ld	a5,120(sp)
   1fd58:	00e7e663          	bltu	a5,a4,1fd64 <dwarf::value::as_uconstant() const+0x19c>
      underflow();
   1fd5c:	06810513          	addi	a0,sp,104
   1fd60:	be5fd0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1fd64:	07813783          	ld	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1fd68:	06813703          	ld	a4,104(sp)
   1fd6c:	01c72703          	lw	a4,28(a4)
   1fd70:	32070a63          	beq	a4,zero,200a4 <dwarf::value::as_uconstant() const+0x4dc>
        val = (val << 8) | (uint64_t)p[i];
   1fd74:	0007c403          	lbu	s0,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1fd78:	3300006f          	jal	zero,200a8 <dwarf::value::as_uconstant() const+0x4e0>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1fd7c:	06813783          	ld	a5,104(sp)
   1fd80:	0107b703          	ld	a4,16(a5)
   1fd84:	07813783          	ld	a5,120(sp)
   1fd88:	40f70633          	sub	a2,a4,a5
   1fd8c:	00100693          	addi	a3,zero,1
   1fd90:	00c6f463          	bgeu	a3,a2,1fd98 <dwarf::value::as_uconstant() const+0x1d0>
   1fd94:	00e7e663          	bltu	a5,a4,1fda0 <dwarf::value::as_uconstant() const+0x1d8>
      underflow();
   1fd98:	06810513          	addi	a0,sp,104
   1fd9c:	ba9fd0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1fda0:	07813783          	ld	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1fda4:	06813703          	ld	a4,104(sp)
   1fda8:	01c72703          	lw	a4,28(a4)
   1fdac:	02071063          	bne	a4,zero,1fdcc <dwarf::value::as_uconstant() const+0x204>
        val |= ((uint64_t)p[i]) << (i * 8);
   1fdb0:	0017c403          	lbu	s0,1(a5)
   1fdb4:	00841413          	slli	s0,s0,0x8
   1fdb8:	0007c703          	lbu	a4,0(a5)
   1fdbc:	00e46433          	or	s0,s0,a4
    pos += sizeof(T);
   1fdc0:	00278793          	addi	a5,a5,2
   1fdc4:	06f13c23          	sd	a5,120(sp)
  switch (form) {
  case DW_FORM::data1:
    return cur.fixed<uint8_t>();
  case DW_FORM::data2:
    return cur.fixed<uint16_t>();
   1fdc8:	2e80006f          	jal	zero,200b0 <dwarf::value::as_uconstant() const+0x4e8>
        val = (val << 8) | (uint64_t)p[i];
   1fdcc:	0007c403          	lbu	s0,0(a5)
   1fdd0:	00841413          	slli	s0,s0,0x8
   1fdd4:	0017c703          	lbu	a4,1(a5)
   1fdd8:	00e46433          	or	s0,s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1fddc:	fe5ff06f          	jal	zero,1fdc0 <dwarf::value::as_uconstant() const+0x1f8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1fde0:	06813783          	ld	a5,104(sp)
   1fde4:	0107b703          	ld	a4,16(a5)
   1fde8:	07813783          	ld	a5,120(sp)
   1fdec:	40f70633          	sub	a2,a4,a5
   1fdf0:	00300693          	addi	a3,zero,3
   1fdf4:	00c6f463          	bgeu	a3,a2,1fdfc <dwarf::value::as_uconstant() const+0x234>
   1fdf8:	00e7e663          	bltu	a5,a4,1fe04 <dwarf::value::as_uconstant() const+0x23c>
      underflow();
   1fdfc:	06810513          	addi	a0,sp,104
   1fe00:	b45fd0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1fe04:	07813603          	ld	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1fe08:	06813783          	ld	a5,104(sp)
   1fe0c:	01c7a783          	lw	a5,28(a5)
   1fe10:	02079e63          	bne	a5,zero,1fe4c <dwarf::value::as_uconstant() const+0x284>
   1fe14:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   1fe18:	00000413          	addi	s0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1fe1c:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1fe20:	0006c703          	lbu	a4,0(a3)
   1fe24:	00f71733          	sll	a4,a4,a5
   1fe28:	00e46433          	or	s0,s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1fe2c:	00168693          	addi	a3,a3,1
   1fe30:	0087879b          	addiw	a5,a5,8
   1fe34:	feb796e3          	bne	a5,a1,1fe20 <dwarf::value::as_uconstant() const+0x258>
    pos += sizeof(T);
   1fe38:	00460613          	addi	a2,a2,4
   1fe3c:	06c13c23          	sd	a2,120(sp)
   1fe40:	02041413          	slli	s0,s0,0x20
   1fe44:	02045413          	srli	s0,s0,0x20
  case DW_FORM::data4:
    return cur.fixed<uint32_t>();
   1fe48:	2680006f          	jal	zero,200b0 <dwarf::value::as_uconstant() const+0x4e8>
   1fe4c:	00060793          	addi	a5,a2,0
   1fe50:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   1fe54:	00000413          	addi	s0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1fe58:	00841413          	slli	s0,s0,0x8
   1fe5c:	0007c703          	lbu	a4,0(a5)
   1fe60:	00876433          	or	s0,a4,s0
      for (unsigned i = 0; i < sizeof(T); i++)
   1fe64:	00178793          	addi	a5,a5,1
   1fe68:	fef698e3          	bne	a3,a5,1fe58 <dwarf::value::as_uconstant() const+0x290>
   1fe6c:	fcdff06f          	jal	zero,1fe38 <dwarf::value::as_uconstant() const+0x270>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1fe70:	06813783          	ld	a5,104(sp)
   1fe74:	0107b703          	ld	a4,16(a5)
   1fe78:	07813783          	ld	a5,120(sp)
   1fe7c:	40f70633          	sub	a2,a4,a5
   1fe80:	00700693          	addi	a3,zero,7
   1fe84:	00c6f463          	bgeu	a3,a2,1fe8c <dwarf::value::as_uconstant() const+0x2c4>
   1fe88:	00e7e663          	bltu	a5,a4,1fe94 <dwarf::value::as_uconstant() const+0x2cc>
      underflow();
   1fe8c:	06810513          	addi	a0,sp,104
   1fe90:	ab5fd0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1fe94:	07813603          	ld	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1fe98:	06813783          	ld	a5,104(sp)
   1fe9c:	01c7a783          	lw	a5,28(a5)
   1fea0:	02079a63          	bne	a5,zero,1fed4 <dwarf::value::as_uconstant() const+0x30c>
   1fea4:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   1fea8:	00000413          	addi	s0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1feac:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1feb0:	0006c703          	lbu	a4,0(a3)
   1feb4:	00f71733          	sll	a4,a4,a5
   1feb8:	00e46433          	or	s0,s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1febc:	00168693          	addi	a3,a3,1
   1fec0:	0087879b          	addiw	a5,a5,8
   1fec4:	feb796e3          	bne	a5,a1,1feb0 <dwarf::value::as_uconstant() const+0x2e8>
    pos += sizeof(T);
   1fec8:	00860613          	addi	a2,a2,8
   1fecc:	06c13c23          	sd	a2,120(sp)
   1fed0:	1e00006f          	jal	zero,200b0 <dwarf::value::as_uconstant() const+0x4e8>
   1fed4:	00060793          	addi	a5,a2,0
   1fed8:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1fedc:	00000413          	addi	s0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1fee0:	00841413          	slli	s0,s0,0x8
   1fee4:	0007c703          	lbu	a4,0(a5)
   1fee8:	00876433          	or	s0,a4,s0
      for (unsigned i = 0; i < sizeof(T); i++)
   1feec:	00178793          	addi	a5,a5,1
   1fef0:	fed798e3          	bne	a5,a3,1fee0 <dwarf::value::as_uconstant() const+0x318>
   1fef4:	fd5ff06f          	jal	zero,1fec8 <dwarf::value::as_uconstant() const+0x300>
    return cur.fixed<uint64_t>();
  case DW_FORM::udata:
    return cur.uleb128();
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) +
                              " as uconstant");
   1fef8:	01000513          	addi	a0,zero,16
   1fefc:	f94f60ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   1ff00:	00050493          	addi	s1,a0,0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   1ff04:	00c42583          	lw	a1,12(s0)
   1ff08:	00810513          	addi	a0,sp,8
   1ff0c:	5650f0ef          	jal	ra,2fc70 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1ff10:	00018617          	auipc	a2,0x18
   1ff14:	d8860613          	addi	a2,a2,-632 # 37c98 <std::piecewise_construct+0x1c8>
   1ff18:	00000593          	addi	a1,zero,0
   1ff1c:	00810513          	addi	a0,sp,8
   1ff20:	ee0f60ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1ff24:	00050593          	addi	a1,a0,0
   1ff28:	02810413          	addi	s0,sp,40
   1ff2c:	00040513          	addi	a0,s0,0
   1ff30:	fa0f60ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1ff34:	00018597          	auipc	a1,0x18
   1ff38:	d9458593          	addi	a1,a1,-620 # 37cc8 <std::piecewise_construct+0x1f8>
   1ff3c:	00040513          	addi	a0,s0,0
   1ff40:	b01f60ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1ff44:	00050593          	addi	a1,a0,0
   1ff48:	04810413          	addi	s0,sp,72
   1ff4c:	00040513          	addi	a0,s0,0
   1ff50:	f80f60ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1ff54:	00040593          	addi	a1,s0,0
   1ff58:	00048513          	addi	a0,s1,0
   1ff5c:	b35f60ef          	jal	ra,16a90 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1ff60:	00023797          	auipc	a5,0x23
   1ff64:	5007b783          	ld	a5,1280(a5) # 43460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   1ff68:	01078793          	addi	a5,a5,16
   1ff6c:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1ff70:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1ff74:	05810793          	addi	a5,sp,88
   1ff78:	00f50463          	beq	a0,a5,1ff80 <dwarf::value::as_uconstant() const+0x3b8>
   1ff7c:	825f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ff80:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1ff84:	03810793          	addi	a5,sp,56
   1ff88:	00f50463          	beq	a0,a5,1ff90 <dwarf::value::as_uconstant() const+0x3c8>
   1ff8c:	815f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ff90:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1ff94:	01810793          	addi	a5,sp,24
   1ff98:	00f50463          	beq	a0,a5,1ffa0 <dwarf::value::as_uconstant() const+0x3d8>
   1ff9c:	805f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
                              " as uconstant");
   1ffa0:	00023617          	auipc	a2,0x23
   1ffa4:	65063603          	ld	a2,1616(a2) # 435f0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f868>
   1ffa8:	00023597          	auipc	a1,0x23
   1ffac:	6085b583          	ld	a1,1544(a1) # 435b0 <typeinfo for dwarf::value_type_mismatch@@Base+0xbf68>
   1ffb0:	00048513          	addi	a0,s1,0
   1ffb4:	9adf60ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1ffb8:	00050413          	addi	s0,a0,0
   1ffbc:	0b40006f          	jal	zero,20070 <dwarf::value::as_uconstant() const+0x4a8>
    return 0;
   1ffc0:	00000413          	addi	s0,zero,0
   1ffc4:	0ec0006f          	jal	zero,200b0 <dwarf::value::as_uconstant() const+0x4e8>
   1ffc8:	fff00593          	addi	a1,zero,-1
   1ffcc:	03048513          	addi	a0,s1,48
   1ffd0:	e20f60ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ffd4:	1000006f          	jal	zero,200d4 <dwarf::value::as_uconstant() const+0x50c>
	_M_dispose();
   1ffd8:	0004b783          	ld	a5,0(s1)
   1ffdc:	0107b783          	ld	a5,16(a5)
   1ffe0:	00048513          	addi	a0,s1,0
   1ffe4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1ffe8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1ffec:	00023797          	auipc	a5,0x23
   1fff0:	4ac7b783          	ld	a5,1196(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   1fff4:	0007c783          	lbu	a5,0(a5)
   1fff8:	02078663          	beq	a5,zero,20024 <dwarf::value::as_uconstant() const+0x45c>
    _Atomic_word __result = *__mem;
   1fffc:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   20000:	fff5079b          	addiw	a5,a0,-1
   20004:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20008:	00100793          	addi	a5,zero,1
   2000c:	0cf51863          	bne	a0,a5,200dc <dwarf::value::as_uconstant() const+0x514>
	    _M_destroy();
   20010:	0004b783          	ld	a5,0(s1)
   20014:	0187b783          	ld	a5,24(a5)
   20018:	00048513          	addi	a0,s1,0
   2001c:	000780e7          	jalr	ra,0(a5)
   20020:	0bc0006f          	jal	zero,200dc <dwarf::value::as_uconstant() const+0x514>
      return __exchange_and_add(__mem, __val);
   20024:	fff00593          	addi	a1,zero,-1
   20028:	03448513          	addi	a0,s1,52
   2002c:	dc4f60ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20030:	fd9ff06f          	jal	zero,20008 <dwarf::value::as_uconstant() const+0x440>
      { return _M_dataplus._M_p; }
   20034:	00050413          	addi	s0,a0,0
   20038:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   2003c:	05810793          	addi	a5,sp,88
   20040:	00f50463          	beq	a0,a5,20048 <dwarf::value::as_uconstant() const+0x480>
   20044:	f5cf60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   20048:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   2004c:	03810793          	addi	a5,sp,56
   20050:	00f50463          	beq	a0,a5,20058 <dwarf::value::as_uconstant() const+0x490>
   20054:	f4cf60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   20058:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   2005c:	01810793          	addi	a5,sp,24
   20060:	00f50463          	beq	a0,a5,20068 <dwarf::value::as_uconstant() const+0x4a0>
   20064:	f3cf60ef          	jal	ra,167a0 <operator delete(void*)@plt>
   20068:	00048513          	addi	a0,s1,0
   2006c:	ee4f60ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   20070:	07013503          	ld	a0,112(sp)
   20074:	00050863          	beq	a0,zero,20084 <dwarf::value::as_uconstant() const+0x4bc>
	  _M_pi->_M_release();
   20078:	00023317          	auipc	t1,0x23
   2007c:	36833303          	ld	t1,872(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   20080:	000300e7          	jalr	ra,0(t1)
   20084:	00040513          	addi	a0,s0,0
   20088:	909f60ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2008c:	00050413          	addi	s0,a0,0
   20090:	fb9ff06f          	jal	zero,20048 <dwarf::value::as_uconstant() const+0x480>
   20094:	00050413          	addi	s0,a0,0
   20098:	fc1ff06f          	jal	zero,20058 <dwarf::value::as_uconstant() const+0x490>
   2009c:	00050413          	addi	s0,a0,0
   200a0:	fc9ff06f          	jal	zero,20068 <dwarf::value::as_uconstant() const+0x4a0>
        val |= ((uint64_t)p[i]) << (i * 8);
   200a4:	0007c403          	lbu	s0,0(a5)
    pos += sizeof(T);
   200a8:	00178793          	addi	a5,a5,1
   200ac:	06f13c23          	sd	a5,120(sp)
	if (_M_pi != nullptr)
   200b0:	07013483          	ld	s1,112(sp)
   200b4:	02048463          	beq	s1,zero,200dc <dwarf::value::as_uconstant() const+0x514>
    if (__is_single_threaded())
   200b8:	00023797          	auipc	a5,0x23
   200bc:	3e07b783          	ld	a5,992(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   200c0:	0007c783          	lbu	a5,0(a5)
   200c4:	f00782e3          	beq	a5,zero,1ffc8 <dwarf::value::as_uconstant() const+0x400>
    _Atomic_word __result = *__mem;
   200c8:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   200cc:	fff5079b          	addiw	a5,a0,-1
   200d0:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   200d4:	00100793          	addi	a5,zero,1
   200d8:	f0f500e3          	beq	a0,a5,1ffd8 <dwarf::value::as_uconstant() const+0x410>
  }
}
   200dc:	00040513          	addi	a0,s0,0
   200e0:	0a813083          	ld	ra,168(sp)
   200e4:	0a013403          	ld	s0,160(sp)
   200e8:	09813483          	ld	s1,152(sp)
   200ec:	09013903          	ld	s2,144(sp)
   200f0:	08813983          	ld	s3,136(sp)
   200f4:	0b010113          	addi	sp,sp,176
   200f8:	00008067          	jalr	zero,0(ra)
  cursor cur(cu->data(), offset);
   200fc:	01043703          	ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20100:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   20104:	06013823          	sd	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   20108:	00893783          	ld	a5,8(s2)
   2010c:	00e787b3          	add	a5,a5,a4
   20110:	06f13c23          	sd	a5,120(sp)
  switch (form) {
   20114:	00842783          	lw	a5,8(s0)
   20118:	ffb7879b          	addiw	a5,a5,-5
   2011c:	0007869b          	addiw	a3,a5,0
   20120:	00a00713          	addi	a4,zero,10
   20124:	dcd76ae3          	bltu	a4,a3,1fef8 <dwarf::value::as_uconstant() const+0x330>
   20128:	02079713          	slli	a4,a5,0x20
   2012c:	01e75793          	srli	a5,a4,0x1e
   20130:	00018717          	auipc	a4,0x18
   20134:	d5070713          	addi	a4,a4,-688 # 37e80 <std::piecewise_construct+0x3b0>
   20138:	00e787b3          	add	a5,a5,a4
   2013c:	0007a783          	lw	a5,0(a5)
   20140:	00e787b3          	add	a5,a5,a4
   20144:	00078067          	jalr	zero,0(a5)

0000000000020148 <dwarf::value::as_sconstant() const>:

int64_t value::as_sconstant() const {
   20148:	f5010113          	addi	sp,sp,-176
   2014c:	0a113423          	sd	ra,168(sp)
   20150:	0a813023          	sd	s0,160(sp)
   20154:	08913c23          	sd	s1,152(sp)
   20158:	09213823          	sd	s2,144(sp)
   2015c:	09313423          	sd	s3,136(sp)
   20160:	00050413          	addi	s0,a0,0
  cursor cur(cu->data(), offset);
   20164:	00053503          	ld	a0,0(a0)
   20168:	9b8f80ef          	jal	ra,18320 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2016c:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   20170:	00853483          	ld	s1,8(a0)
	if (_M_pi != nullptr)
   20174:	4c048663          	beq	s1,zero,20640 <dwarf::value::as_sconstant() const+0x4f8>
    if (__is_single_threaded())
   20178:	00023797          	auipc	a5,0x23
   2017c:	3207b783          	ld	a5,800(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   20180:	0007c783          	lbu	a5,0(a5)
   20184:	0a078a63          	beq	a5,zero,20238 <dwarf::value::as_sconstant() const+0xf0>
  { *__mem += __val; }
   20188:	0304a783          	lw	a5,48(s1)
   2018c:	0017879b          	addiw	a5,a5,1
   20190:	02f4a823          	sw	a5,48(s1)
   20194:	01043983          	ld	s3,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20198:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   2019c:	06913823          	sd	s1,112(sp)
    if (__is_single_threaded())
   201a0:	00023797          	auipc	a5,0x23
   201a4:	2f87b783          	ld	a5,760(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   201a8:	0007c783          	lbu	a5,0(a5)
   201ac:	08078e63          	beq	a5,zero,20248 <dwarf::value::as_sconstant() const+0x100>
  { *__mem += __val; }
   201b0:	0304a783          	lw	a5,48(s1)
   201b4:	0017879b          	addiw	a5,a5,1
   201b8:	02f4a823          	sw	a5,48(s1)
   201bc:	00893783          	ld	a5,8(s2)
   201c0:	013787b3          	add	a5,a5,s3
   201c4:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   201c8:	00023797          	auipc	a5,0x23
   201cc:	2d07b783          	ld	a5,720(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   201d0:	0007c783          	lbu	a5,0(a5)
   201d4:	08078263          	beq	a5,zero,20258 <dwarf::value::as_sconstant() const+0x110>
    _Atomic_word __result = *__mem;
   201d8:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   201dc:	fff5079b          	addiw	a5,a0,-1
   201e0:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   201e4:	00100793          	addi	a5,zero,1
   201e8:	46f51863          	bne	a0,a5,20658 <dwarf::value::as_sconstant() const+0x510>
	_M_dispose();
   201ec:	0004b783          	ld	a5,0(s1)
   201f0:	0107b783          	ld	a5,16(a5)
   201f4:	00048513          	addi	a0,s1,0
   201f8:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   201fc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   20200:	00023797          	auipc	a5,0x23
   20204:	2987b783          	ld	a5,664(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   20208:	0007c783          	lbu	a5,0(a5)
   2020c:	04078e63          	beq	a5,zero,20268 <dwarf::value::as_sconstant() const+0x120>
    _Atomic_word __result = *__mem;
   20210:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   20214:	fff5079b          	addiw	a5,a0,-1
   20218:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2021c:	00100793          	addi	a5,zero,1
   20220:	42f51c63          	bne	a0,a5,20658 <dwarf::value::as_sconstant() const+0x510>
	    _M_destroy();
   20224:	0004b783          	ld	a5,0(s1)
   20228:	0187b783          	ld	a5,24(a5)
   2022c:	00048513          	addi	a0,s1,0
   20230:	000780e7          	jalr	ra,0(a5)
   20234:	4240006f          	jal	zero,20658 <dwarf::value::as_sconstant() const+0x510>
      __atomic_add(__mem, __val);
   20238:	00100593          	addi	a1,zero,1
   2023c:	03048513          	addi	a0,s1,48
   20240:	b70f60ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   20244:	f51ff06f          	jal	zero,20194 <dwarf::value::as_sconstant() const+0x4c>
   20248:	00100593          	addi	a1,zero,1
   2024c:	03048513          	addi	a0,s1,48
   20250:	b60f60ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   20254:	f69ff06f          	jal	zero,201bc <dwarf::value::as_sconstant() const+0x74>
      return __exchange_and_add(__mem, __val);
   20258:	fff00593          	addi	a1,zero,-1
   2025c:	03048513          	addi	a0,s1,48
   20260:	b90f60ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20264:	f81ff06f          	jal	zero,201e4 <dwarf::value::as_sconstant() const+0x9c>
   20268:	fff00593          	addi	a1,zero,-1
   2026c:	03448513          	addi	a0,s1,52
   20270:	b80f60ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20274:	fa9ff06f          	jal	zero,2021c <dwarf::value::as_sconstant() const+0xd4>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20278:	06813783          	ld	a5,104(sp)
   2027c:	0107b703          	ld	a4,16(a5)
   20280:	07813783          	ld	a5,120(sp)
   20284:	00e7e663          	bltu	a5,a4,20290 <dwarf::value::as_sconstant() const+0x148>
      underflow();
   20288:	06810513          	addi	a0,sp,104
   2028c:	eb8fd0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20290:	07813783          	ld	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   20294:	06813703          	ld	a4,104(sp)
   20298:	01c72703          	lw	a4,28(a4)
   2029c:	34070263          	beq	a4,zero,205e0 <dwarf::value::as_sconstant() const+0x498>
        val = (val << 8) | (uint64_t)p[i];
   202a0:	0007c503          	lbu	a0,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   202a4:	3400006f          	jal	zero,205e4 <dwarf::value::as_sconstant() const+0x49c>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   202a8:	06813783          	ld	a5,104(sp)
   202ac:	0107b703          	ld	a4,16(a5)
   202b0:	07813783          	ld	a5,120(sp)
   202b4:	40f70633          	sub	a2,a4,a5
   202b8:	00100693          	addi	a3,zero,1
   202bc:	00c6f463          	bgeu	a3,a2,202c4 <dwarf::value::as_sconstant() const+0x17c>
   202c0:	00e7e663          	bltu	a5,a4,202cc <dwarf::value::as_sconstant() const+0x184>
      underflow();
   202c4:	06810513          	addi	a0,sp,104
   202c8:	e7cfd0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   202cc:	07813783          	ld	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   202d0:	06813703          	ld	a4,104(sp)
   202d4:	01c72703          	lw	a4,28(a4)
   202d8:	02071463          	bne	a4,zero,20300 <dwarf::value::as_sconstant() const+0x1b8>
        val |= ((uint64_t)p[i]) << (i * 8);
   202dc:	0017c503          	lbu	a0,1(a5)
   202e0:	00851513          	slli	a0,a0,0x8
   202e4:	0007c703          	lbu	a4,0(a5)
   202e8:	00e56533          	or	a0,a0,a4
    pos += sizeof(T);
   202ec:	00278793          	addi	a5,a5,2
   202f0:	06f13c23          	sd	a5,120(sp)
  switch (form) {
  case DW_FORM::data1:
    return cur.fixed<int8_t>();
  case DW_FORM::data2:
    return cur.fixed<int16_t>();
   202f4:	0105141b          	slliw	s0,a0,0x10
   202f8:	4104541b          	sraiw	s0,s0,0x10
   202fc:	2f80006f          	jal	zero,205f4 <dwarf::value::as_sconstant() const+0x4ac>
        val = (val << 8) | (uint64_t)p[i];
   20300:	0007c503          	lbu	a0,0(a5)
   20304:	00851513          	slli	a0,a0,0x8
   20308:	0017c703          	lbu	a4,1(a5)
   2030c:	00e56533          	or	a0,a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   20310:	fddff06f          	jal	zero,202ec <dwarf::value::as_sconstant() const+0x1a4>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20314:	06813783          	ld	a5,104(sp)
   20318:	0107b703          	ld	a4,16(a5)
   2031c:	07813783          	ld	a5,120(sp)
   20320:	40f70633          	sub	a2,a4,a5
   20324:	00300693          	addi	a3,zero,3
   20328:	00c6f463          	bgeu	a3,a2,20330 <dwarf::value::as_sconstant() const+0x1e8>
   2032c:	00e7e663          	bltu	a5,a4,20338 <dwarf::value::as_sconstant() const+0x1f0>
      underflow();
   20330:	06810513          	addi	a0,sp,104
   20334:	e10fd0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20338:	07813603          	ld	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   2033c:	06813783          	ld	a5,104(sp)
   20340:	01c7a783          	lw	a5,28(a5)
   20344:	02079c63          	bne	a5,zero,2037c <dwarf::value::as_sconstant() const+0x234>
   20348:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   2034c:	00000513          	addi	a0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   20350:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   20354:	0006c703          	lbu	a4,0(a3)
   20358:	00f71733          	sll	a4,a4,a5
   2035c:	00e56533          	or	a0,a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   20360:	00168693          	addi	a3,a3,1
   20364:	0087879b          	addiw	a5,a5,8
   20368:	feb796e3          	bne	a5,a1,20354 <dwarf::value::as_sconstant() const+0x20c>
    pos += sizeof(T);
   2036c:	00460613          	addi	a2,a2,4
   20370:	06c13c23          	sd	a2,120(sp)
  case DW_FORM::data4:
    return cur.fixed<int32_t>();
   20374:	0005041b          	addiw	s0,a0,0
   20378:	27c0006f          	jal	zero,205f4 <dwarf::value::as_sconstant() const+0x4ac>
   2037c:	00060793          	addi	a5,a2,0
   20380:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   20384:	00000513          	addi	a0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   20388:	00851513          	slli	a0,a0,0x8
   2038c:	0007c703          	lbu	a4,0(a5)
   20390:	00a76533          	or	a0,a4,a0
      for (unsigned i = 0; i < sizeof(T); i++)
   20394:	00178793          	addi	a5,a5,1
   20398:	fef698e3          	bne	a3,a5,20388 <dwarf::value::as_sconstant() const+0x240>
   2039c:	fd1ff06f          	jal	zero,2036c <dwarf::value::as_sconstant() const+0x224>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   203a0:	06813783          	ld	a5,104(sp)
   203a4:	0107b703          	ld	a4,16(a5)
   203a8:	07813783          	ld	a5,120(sp)
   203ac:	40f70633          	sub	a2,a4,a5
   203b0:	00700693          	addi	a3,zero,7
   203b4:	00c6f463          	bgeu	a3,a2,203bc <dwarf::value::as_sconstant() const+0x274>
   203b8:	00e7e663          	bltu	a5,a4,203c4 <dwarf::value::as_sconstant() const+0x27c>
      underflow();
   203bc:	06810513          	addi	a0,sp,104
   203c0:	d84fd0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   203c4:	07813603          	ld	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   203c8:	06813783          	ld	a5,104(sp)
   203cc:	01c7a783          	lw	a5,28(a5)
   203d0:	02079c63          	bne	a5,zero,20408 <dwarf::value::as_sconstant() const+0x2c0>
   203d4:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   203d8:	00000513          	addi	a0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   203dc:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   203e0:	0006c703          	lbu	a4,0(a3)
   203e4:	00f71733          	sll	a4,a4,a5
   203e8:	00e56533          	or	a0,a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   203ec:	00168693          	addi	a3,a3,1
   203f0:	0087879b          	addiw	a5,a5,8
   203f4:	feb796e3          	bne	a5,a1,203e0 <dwarf::value::as_sconstant() const+0x298>
    pos += sizeof(T);
   203f8:	00860613          	addi	a2,a2,8
   203fc:	06c13c23          	sd	a2,120(sp)
    return (T)val;
   20400:	00050413          	addi	s0,a0,0
   20404:	1f00006f          	jal	zero,205f4 <dwarf::value::as_sconstant() const+0x4ac>
   20408:	00060793          	addi	a5,a2,0
   2040c:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   20410:	00000513          	addi	a0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   20414:	00851513          	slli	a0,a0,0x8
   20418:	0007c703          	lbu	a4,0(a5)
   2041c:	00a76533          	or	a0,a4,a0
      for (unsigned i = 0; i < sizeof(T); i++)
   20420:	00178793          	addi	a5,a5,1
   20424:	fed798e3          	bne	a5,a3,20414 <dwarf::value::as_sconstant() const+0x2cc>
   20428:	fd1ff06f          	jal	zero,203f8 <dwarf::value::as_sconstant() const+0x2b0>
  case DW_FORM::data8:
    return cur.fixed<int64_t>();
  case DW_FORM::sdata:
    return cur.sleb128();
   2042c:	06810513          	addi	a0,sp,104
   20430:	d68fd0ef          	jal	ra,1d998 <dwarf::cursor::sleb128()>
   20434:	00050413          	addi	s0,a0,0
   20438:	1bc0006f          	jal	zero,205f4 <dwarf::value::as_sconstant() const+0x4ac>
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) +
                              " as sconstant");
   2043c:	01000513          	addi	a0,zero,16
   20440:	a50f60ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   20444:	00050493          	addi	s1,a0,0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   20448:	00c42583          	lw	a1,12(s0)
   2044c:	00810513          	addi	a0,sp,8
   20450:	0210f0ef          	jal	ra,2fc70 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   20454:	00018617          	auipc	a2,0x18
   20458:	84460613          	addi	a2,a2,-1980 # 37c98 <std::piecewise_construct+0x1c8>
   2045c:	00000593          	addi	a1,zero,0
   20460:	00810513          	addi	a0,sp,8
   20464:	99cf60ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   20468:	00050593          	addi	a1,a0,0
   2046c:	02810413          	addi	s0,sp,40
   20470:	00040513          	addi	a0,s0,0
   20474:	a5cf60ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   20478:	00018597          	auipc	a1,0x18
   2047c:	86058593          	addi	a1,a1,-1952 # 37cd8 <std::piecewise_construct+0x208>
   20480:	00040513          	addi	a0,s0,0
   20484:	dbcf60ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   20488:	00050593          	addi	a1,a0,0
   2048c:	04810413          	addi	s0,sp,72
   20490:	00040513          	addi	a0,s0,0
   20494:	a3cf60ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   20498:	00040593          	addi	a1,s0,0
   2049c:	00048513          	addi	a0,s1,0
   204a0:	df0f60ef          	jal	ra,16a90 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   204a4:	00023797          	auipc	a5,0x23
   204a8:	fbc7b783          	ld	a5,-68(a5) # 43460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   204ac:	01078793          	addi	a5,a5,16
   204b0:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   204b4:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   204b8:	05810793          	addi	a5,sp,88
   204bc:	00f50463          	beq	a0,a5,204c4 <dwarf::value::as_sconstant() const+0x37c>
   204c0:	ae0f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   204c4:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   204c8:	03810793          	addi	a5,sp,56
   204cc:	00f50463          	beq	a0,a5,204d4 <dwarf::value::as_sconstant() const+0x38c>
   204d0:	ad0f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   204d4:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   204d8:	01810793          	addi	a5,sp,24
   204dc:	00f50463          	beq	a0,a5,204e4 <dwarf::value::as_sconstant() const+0x39c>
   204e0:	ac0f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
                              " as sconstant");
   204e4:	00023617          	auipc	a2,0x23
   204e8:	10c63603          	ld	a2,268(a2) # 435f0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f868>
   204ec:	00023597          	auipc	a1,0x23
   204f0:	0c45b583          	ld	a1,196(a1) # 435b0 <typeinfo for dwarf::value_type_mismatch@@Base+0xbf68>
   204f4:	00048513          	addi	a0,s1,0
   204f8:	c68f60ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   204fc:	00050413          	addi	s0,a0,0
   20500:	0ac0006f          	jal	zero,205ac <dwarf::value::as_sconstant() const+0x464>
   20504:	fff00593          	addi	a1,zero,-1
   20508:	03048513          	addi	a0,s1,48
   2050c:	8e4f60ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20510:	1080006f          	jal	zero,20618 <dwarf::value::as_sconstant() const+0x4d0>
	_M_dispose();
   20514:	0004b783          	ld	a5,0(s1)
   20518:	0107b783          	ld	a5,16(a5)
   2051c:	00048513          	addi	a0,s1,0
   20520:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20524:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   20528:	00023797          	auipc	a5,0x23
   2052c:	f707b783          	ld	a5,-144(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   20530:	0007c783          	lbu	a5,0(a5)
   20534:	02078663          	beq	a5,zero,20560 <dwarf::value::as_sconstant() const+0x418>
    _Atomic_word __result = *__mem;
   20538:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   2053c:	fff5079b          	addiw	a5,a0,-1
   20540:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20544:	00100793          	addi	a5,zero,1
   20548:	0cf51c63          	bne	a0,a5,20620 <dwarf::value::as_sconstant() const+0x4d8>
	    _M_destroy();
   2054c:	0004b783          	ld	a5,0(s1)
   20550:	0187b783          	ld	a5,24(a5)
   20554:	00048513          	addi	a0,s1,0
   20558:	000780e7          	jalr	ra,0(a5)
   2055c:	0c40006f          	jal	zero,20620 <dwarf::value::as_sconstant() const+0x4d8>
      return __exchange_and_add(__mem, __val);
   20560:	fff00593          	addi	a1,zero,-1
   20564:	03448513          	addi	a0,s1,52
   20568:	888f60ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2056c:	fd9ff06f          	jal	zero,20544 <dwarf::value::as_sconstant() const+0x3fc>
      { return _M_dataplus._M_p; }
   20570:	00050413          	addi	s0,a0,0
   20574:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   20578:	05810793          	addi	a5,sp,88
   2057c:	00f50463          	beq	a0,a5,20584 <dwarf::value::as_sconstant() const+0x43c>
   20580:	a20f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   20584:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   20588:	03810793          	addi	a5,sp,56
   2058c:	00f50463          	beq	a0,a5,20594 <dwarf::value::as_sconstant() const+0x44c>
   20590:	a10f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   20594:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   20598:	01810793          	addi	a5,sp,24
   2059c:	00f50463          	beq	a0,a5,205a4 <dwarf::value::as_sconstant() const+0x45c>
   205a0:	a00f60ef          	jal	ra,167a0 <operator delete(void*)@plt>
   205a4:	00048513          	addi	a0,s1,0
   205a8:	9a8f60ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   205ac:	07013503          	ld	a0,112(sp)
   205b0:	00050863          	beq	a0,zero,205c0 <dwarf::value::as_sconstant() const+0x478>
	  _M_pi->_M_release();
   205b4:	00023317          	auipc	t1,0x23
   205b8:	e2c33303          	ld	t1,-468(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   205bc:	000300e7          	jalr	ra,0(t1)
   205c0:	00040513          	addi	a0,s0,0
   205c4:	bccf60ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   205c8:	00050413          	addi	s0,a0,0
   205cc:	fb9ff06f          	jal	zero,20584 <dwarf::value::as_sconstant() const+0x43c>
   205d0:	00050413          	addi	s0,a0,0
   205d4:	fc1ff06f          	jal	zero,20594 <dwarf::value::as_sconstant() const+0x44c>
   205d8:	00050413          	addi	s0,a0,0
   205dc:	fc9ff06f          	jal	zero,205a4 <dwarf::value::as_sconstant() const+0x45c>
        val |= ((uint64_t)p[i]) << (i * 8);
   205e0:	0007c503          	lbu	a0,0(a5)
    pos += sizeof(T);
   205e4:	00178793          	addi	a5,a5,1
   205e8:	06f13c23          	sd	a5,120(sp)
    return cur.fixed<int8_t>();
   205ec:	0185141b          	slliw	s0,a0,0x18
   205f0:	4184541b          	sraiw	s0,s0,0x18
	if (_M_pi != nullptr)
   205f4:	07013483          	ld	s1,112(sp)
   205f8:	02048463          	beq	s1,zero,20620 <dwarf::value::as_sconstant() const+0x4d8>
    if (__is_single_threaded())
   205fc:	00023797          	auipc	a5,0x23
   20600:	e9c7b783          	ld	a5,-356(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   20604:	0007c783          	lbu	a5,0(a5)
   20608:	ee078ee3          	beq	a5,zero,20504 <dwarf::value::as_sconstant() const+0x3bc>
    _Atomic_word __result = *__mem;
   2060c:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   20610:	fff5079b          	addiw	a5,a0,-1
   20614:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20618:	00100793          	addi	a5,zero,1
   2061c:	eef50ce3          	beq	a0,a5,20514 <dwarf::value::as_sconstant() const+0x3cc>
  }
}
   20620:	00040513          	addi	a0,s0,0
   20624:	0a813083          	ld	ra,168(sp)
   20628:	0a013403          	ld	s0,160(sp)
   2062c:	09813483          	ld	s1,152(sp)
   20630:	09013903          	ld	s2,144(sp)
   20634:	08813983          	ld	s3,136(sp)
   20638:	0b010113          	addi	sp,sp,176
   2063c:	00008067          	jalr	zero,0(ra)
  cursor cur(cu->data(), offset);
   20640:	01043703          	ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20644:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   20648:	06013823          	sd	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   2064c:	00893783          	ld	a5,8(s2)
   20650:	00e787b3          	add	a5,a5,a4
   20654:	06f13c23          	sd	a5,120(sp)
  switch (form) {
   20658:	00842783          	lw	a5,8(s0)
   2065c:	ffb7879b          	addiw	a5,a5,-5
   20660:	0007869b          	addiw	a3,a5,0
   20664:	00800713          	addi	a4,zero,8
   20668:	dcd76ae3          	bltu	a4,a3,2043c <dwarf::value::as_sconstant() const+0x2f4>
   2066c:	02079713          	slli	a4,a5,0x20
   20670:	01e75793          	srli	a5,a4,0x1e
   20674:	00018717          	auipc	a4,0x18
   20678:	83870713          	addi	a4,a4,-1992 # 37eac <std::piecewise_construct+0x3dc>
   2067c:	00e787b3          	add	a5,a5,a4
   20680:	0007a783          	lw	a5,0(a5)
   20684:	00e787b3          	add	a5,a5,a4
   20688:	00078067          	jalr	zero,0(a5)

000000000002068c <dwarf::value::as_exprloc() const>:

expr value::as_exprloc() const {
   2068c:	f5010113          	addi	sp,sp,-176
   20690:	0a113423          	sd	ra,168(sp)
   20694:	0a813023          	sd	s0,160(sp)
   20698:	08913c23          	sd	s1,152(sp)
   2069c:	09213823          	sd	s2,144(sp)
   206a0:	09313423          	sd	s3,136(sp)
   206a4:	09413023          	sd	s4,128(sp)
   206a8:	00050493          	addi	s1,a0,0
   206ac:	00058413          	addi	s0,a1,0
  cursor cur(cu->data(), offset);
   206b0:	0005b503          	ld	a0,0(a1)
   206b4:	c6df70ef          	jal	ra,18320 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   206b8:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   206bc:	00853903          	ld	s2,8(a0)
	if (_M_pi != nullptr)
   206c0:	4a090263          	beq	s2,zero,20b64 <dwarf::value::as_exprloc() const+0x4d8>
    if (__is_single_threaded())
   206c4:	00023797          	auipc	a5,0x23
   206c8:	dd47b783          	ld	a5,-556(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   206cc:	0007c783          	lbu	a5,0(a5)
   206d0:	0a078a63          	beq	a5,zero,20784 <dwarf::value::as_exprloc() const+0xf8>
  { *__mem += __val; }
   206d4:	03092783          	lw	a5,48(s2)
   206d8:	0017879b          	addiw	a5,a5,1
   206dc:	02f92823          	sw	a5,48(s2)
   206e0:	01043a03          	ld	s4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   206e4:	07313423          	sd	s3,104(sp)
      : _M_pi(__r._M_pi)
   206e8:	07213823          	sd	s2,112(sp)
    if (__is_single_threaded())
   206ec:	00023797          	auipc	a5,0x23
   206f0:	dac7b783          	ld	a5,-596(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   206f4:	0007c783          	lbu	a5,0(a5)
   206f8:	08078e63          	beq	a5,zero,20794 <dwarf::value::as_exprloc() const+0x108>
  { *__mem += __val; }
   206fc:	03092783          	lw	a5,48(s2)
   20700:	0017879b          	addiw	a5,a5,1
   20704:	02f92823          	sw	a5,48(s2)
   20708:	0089b783          	ld	a5,8(s3)
   2070c:	014787b3          	add	a5,a5,s4
   20710:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   20714:	00023797          	auipc	a5,0x23
   20718:	d847b783          	ld	a5,-636(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2071c:	0007c783          	lbu	a5,0(a5)
   20720:	08078263          	beq	a5,zero,207a4 <dwarf::value::as_exprloc() const+0x118>
    _Atomic_word __result = *__mem;
   20724:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   20728:	fff5079b          	addiw	a5,a0,-1
   2072c:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20730:	00100793          	addi	a5,zero,1
   20734:	44f51463          	bne	a0,a5,20b7c <dwarf::value::as_exprloc() const+0x4f0>
	_M_dispose();
   20738:	00093783          	ld	a5,0(s2)
   2073c:	0107b783          	ld	a5,16(a5)
   20740:	00090513          	addi	a0,s2,0
   20744:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20748:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2074c:	00023797          	auipc	a5,0x23
   20750:	d4c7b783          	ld	a5,-692(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   20754:	0007c783          	lbu	a5,0(a5)
   20758:	04078e63          	beq	a5,zero,207b4 <dwarf::value::as_exprloc() const+0x128>
    _Atomic_word __result = *__mem;
   2075c:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   20760:	fff5079b          	addiw	a5,a0,-1
   20764:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20768:	00100793          	addi	a5,zero,1
   2076c:	40f51863          	bne	a0,a5,20b7c <dwarf::value::as_exprloc() const+0x4f0>
	    _M_destroy();
   20770:	00093783          	ld	a5,0(s2)
   20774:	0187b783          	ld	a5,24(a5)
   20778:	00090513          	addi	a0,s2,0
   2077c:	000780e7          	jalr	ra,0(a5)
   20780:	3fc0006f          	jal	zero,20b7c <dwarf::value::as_exprloc() const+0x4f0>
      __atomic_add(__mem, __val);
   20784:	00100593          	addi	a1,zero,1
   20788:	03090513          	addi	a0,s2,48
   2078c:	e25f50ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   20790:	f51ff06f          	jal	zero,206e0 <dwarf::value::as_exprloc() const+0x54>
   20794:	00100593          	addi	a1,zero,1
   20798:	03090513          	addi	a0,s2,48
   2079c:	e15f50ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   207a0:	f69ff06f          	jal	zero,20708 <dwarf::value::as_exprloc() const+0x7c>
      return __exchange_and_add(__mem, __val);
   207a4:	fff00593          	addi	a1,zero,-1
   207a8:	03090513          	addi	a0,s2,48
   207ac:	e45f50ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   207b0:	f81ff06f          	jal	zero,20730 <dwarf::value::as_exprloc() const+0xa4>
   207b4:	fff00593          	addi	a1,zero,-1
   207b8:	03490513          	addi	a0,s2,52
   207bc:	e35f50ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   207c0:	fa9ff06f          	jal	zero,20768 <dwarf::value::as_exprloc() const+0xdc>
    while (pos < sec->end) {
   207c4:	07813783          	ld	a5,120(sp)
      { return _M_ptr; }
   207c8:	06813503          	ld	a0,104(sp)
   207cc:	01053703          	ld	a4,16(a0)
   207d0:	02e7fe63          	bgeu	a5,a4,2080c <dwarf::value::as_exprloc() const+0x180>
    std::uint64_t result = 0;
   207d4:	00000693          	addi	a3,zero,0
    int shift = 0;
   207d8:	00000593          	addi	a1,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   207dc:	00178793          	addi	a5,a5,1
   207e0:	06f13c23          	sd	a5,120(sp)
   207e4:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   207e8:	07f77613          	andi	a2,a4,127
   207ec:	00b61633          	sll	a2,a2,a1
   207f0:	00c6e6b3          	or	a3,a3,a2
      if ((byte & 0x80) == 0)
   207f4:	0187171b          	slliw	a4,a4,0x18
   207f8:	4187571b          	sraiw	a4,a4,0x18
   207fc:	34075463          	bge	a4,zero,20b44 <dwarf::value::as_exprloc() const+0x4b8>
      shift += 7;
   20800:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   20804:	01053703          	ld	a4,16(a0)
   20808:	fce7eae3          	bltu	a5,a4,207dc <dwarf::value::as_exprloc() const+0x150>
    underflow();
   2080c:	06810513          	addi	a0,sp,104
   20810:	934fd0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
   20814:	1f00006f          	jal	zero,20a04 <dwarf::value::as_exprloc() const+0x378>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20818:	06813783          	ld	a5,104(sp)
   2081c:	0107b703          	ld	a4,16(a5)
   20820:	07813783          	ld	a5,120(sp)
   20824:	00e7e663          	bltu	a5,a4,20830 <dwarf::value::as_exprloc() const+0x1a4>
      underflow();
   20828:	06810513          	addi	a0,sp,104
   2082c:	918fd0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20830:	07813783          	ld	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   20834:	06813703          	ld	a4,104(sp)
   20838:	01c72703          	lw	a4,28(a4)
   2083c:	2e070e63          	beq	a4,zero,20b38 <dwarf::value::as_exprloc() const+0x4ac>
        val = (val << 8) | (uint64_t)p[i];
   20840:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   20844:	2f80006f          	jal	zero,20b3c <dwarf::value::as_exprloc() const+0x4b0>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20848:	06813783          	ld	a5,104(sp)
   2084c:	0107b703          	ld	a4,16(a5)
   20850:	07813783          	ld	a5,120(sp)
   20854:	40f70633          	sub	a2,a4,a5
   20858:	00100693          	addi	a3,zero,1
   2085c:	00c6f463          	bgeu	a3,a2,20864 <dwarf::value::as_exprloc() const+0x1d8>
   20860:	00e7e663          	bltu	a5,a4,2086c <dwarf::value::as_exprloc() const+0x1e0>
      underflow();
   20864:	06810513          	addi	a0,sp,104
   20868:	8dcfd0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   2086c:	07813783          	ld	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   20870:	06813703          	ld	a4,104(sp)
   20874:	01c72703          	lw	a4,28(a4)
   20878:	02071063          	bne	a4,zero,20898 <dwarf::value::as_exprloc() const+0x20c>
        val |= ((uint64_t)p[i]) << (i * 8);
   2087c:	0017c683          	lbu	a3,1(a5)
   20880:	00869693          	slli	a3,a3,0x8
   20884:	0007c703          	lbu	a4,0(a5)
   20888:	00e6e6b3          	or	a3,a3,a4
    pos += sizeof(T);
   2088c:	00278793          	addi	a5,a5,2
   20890:	06f13c23          	sd	a5,120(sp)
  case DW_FORM::block1:
    size = cur.fixed<uint8_t>();
    break;
  case DW_FORM::block2:
    size = cur.fixed<uint16_t>();
    break;
   20894:	2b00006f          	jal	zero,20b44 <dwarf::value::as_exprloc() const+0x4b8>
        val = (val << 8) | (uint64_t)p[i];
   20898:	0007c683          	lbu	a3,0(a5)
   2089c:	00869693          	slli	a3,a3,0x8
   208a0:	0017c703          	lbu	a4,1(a5)
   208a4:	00e6e6b3          	or	a3,a3,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   208a8:	fe5ff06f          	jal	zero,2088c <dwarf::value::as_exprloc() const+0x200>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   208ac:	06813783          	ld	a5,104(sp)
   208b0:	0107b703          	ld	a4,16(a5)
   208b4:	07813783          	ld	a5,120(sp)
   208b8:	40f70633          	sub	a2,a4,a5
   208bc:	00300693          	addi	a3,zero,3
   208c0:	00c6f463          	bgeu	a3,a2,208c8 <dwarf::value::as_exprloc() const+0x23c>
   208c4:	00e7e663          	bltu	a5,a4,208d0 <dwarf::value::as_exprloc() const+0x244>
      underflow();
   208c8:	06810513          	addi	a0,sp,104
   208cc:	878fd0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   208d0:	07813583          	ld	a1,120(sp)
    if (sec->ord == byte_order::lsb) {
   208d4:	06813783          	ld	a5,104(sp)
   208d8:	01c7a783          	lw	a5,28(a5)
   208dc:	02079e63          	bne	a5,zero,20918 <dwarf::value::as_exprloc() const+0x28c>
   208e0:	00058613          	addi	a2,a1,0
    uint64_t val = 0;
   208e4:	00000693          	addi	a3,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   208e8:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   208ec:	00064703          	lbu	a4,0(a2)
   208f0:	00f71733          	sll	a4,a4,a5
   208f4:	00e6e6b3          	or	a3,a3,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   208f8:	00160613          	addi	a2,a2,1
   208fc:	0087879b          	addiw	a5,a5,8
   20900:	fea796e3          	bne	a5,a0,208ec <dwarf::value::as_exprloc() const+0x260>
    pos += sizeof(T);
   20904:	00458593          	addi	a1,a1,4
   20908:	06b13c23          	sd	a1,120(sp)
   2090c:	02069693          	slli	a3,a3,0x20
   20910:	0206d693          	srli	a3,a3,0x20
  case DW_FORM::block4:
    size = cur.fixed<uint32_t>();
    break;
   20914:	2300006f          	jal	zero,20b44 <dwarf::value::as_exprloc() const+0x4b8>
   20918:	00058793          	addi	a5,a1,0
   2091c:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   20920:	00000693          	addi	a3,zero,0
        val = (val << 8) | (uint64_t)p[i];
   20924:	00869693          	slli	a3,a3,0x8
   20928:	0007c703          	lbu	a4,0(a5)
   2092c:	00d766b3          	or	a3,a4,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   20930:	00178793          	addi	a5,a5,1
   20934:	fec798e3          	bne	a5,a2,20924 <dwarf::value::as_exprloc() const+0x298>
   20938:	fcdff06f          	jal	zero,20904 <dwarf::value::as_exprloc() const+0x278>
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as exprloc");
   2093c:	01000513          	addi	a0,zero,16
   20940:	d51f50ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   20944:	00050493          	addi	s1,a0,0
   20948:	00c42583          	lw	a1,12(s0)
   2094c:	00810513          	addi	a0,sp,8
   20950:	3200f0ef          	jal	ra,2fc70 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   20954:	00017617          	auipc	a2,0x17
   20958:	34460613          	addi	a2,a2,836 # 37c98 <std::piecewise_construct+0x1c8>
   2095c:	00000593          	addi	a1,zero,0
   20960:	00810513          	addi	a0,sp,8
   20964:	c9df50ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   20968:	00050593          	addi	a1,a0,0
   2096c:	02810413          	addi	s0,sp,40
   20970:	00040513          	addi	a0,s0,0
   20974:	d5df50ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   20978:	00017597          	auipc	a1,0x17
   2097c:	37058593          	addi	a1,a1,880 # 37ce8 <std::piecewise_construct+0x218>
   20980:	00040513          	addi	a0,s0,0
   20984:	8bcf60ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   20988:	00050593          	addi	a1,a0,0
   2098c:	04810413          	addi	s0,sp,72
   20990:	00040513          	addi	a0,s0,0
   20994:	d3df50ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   20998:	00040593          	addi	a1,s0,0
   2099c:	00048513          	addi	a0,s1,0
   209a0:	8f0f60ef          	jal	ra,16a90 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   209a4:	00023797          	auipc	a5,0x23
   209a8:	abc7b783          	ld	a5,-1348(a5) # 43460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   209ac:	01078793          	addi	a5,a5,16
   209b0:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   209b4:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   209b8:	05810793          	addi	a5,sp,88
   209bc:	00f50463          	beq	a0,a5,209c4 <dwarf::value::as_exprloc() const+0x338>
   209c0:	de1f50ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   209c4:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   209c8:	03810793          	addi	a5,sp,56
   209cc:	00f50463          	beq	a0,a5,209d4 <dwarf::value::as_exprloc() const+0x348>
   209d0:	dd1f50ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   209d4:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   209d8:	01810793          	addi	a5,sp,24
   209dc:	00f50463          	beq	a0,a5,209e4 <dwarf::value::as_exprloc() const+0x358>
   209e0:	dc1f50ef          	jal	ra,167a0 <operator delete(void*)@plt>
   209e4:	00023617          	auipc	a2,0x23
   209e8:	c0c63603          	ld	a2,-1012(a2) # 435f0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f868>
   209ec:	00023597          	auipc	a1,0x23
   209f0:	bc45b583          	ld	a1,-1084(a1) # 435b0 <typeinfo for dwarf::value_type_mismatch@@Base+0xbf68>
   209f4:	00048513          	addi	a0,s1,0
   209f8:	f69f50ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   209fc:	00050413          	addi	s0,a0,0
   20a00:	1040006f          	jal	zero,20b04 <dwarf::value::as_exprloc() const+0x478>
    return 0;
   20a04:	00000693          	addi	a3,zero,0
   20a08:	13c0006f          	jal	zero,20b44 <dwarf::value::as_exprloc() const+0x4b8>
   20a0c:	07013403          	ld	s0,112(sp)
   20a10:	02040463          	beq	s0,zero,20a38 <dwarf::value::as_exprloc() const+0x3ac>
    if (__is_single_threaded())
   20a14:	00023797          	auipc	a5,0x23
   20a18:	a847b783          	ld	a5,-1404(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   20a1c:	0007c783          	lbu	a5,0(a5)
   20a20:	02078e63          	beq	a5,zero,20a5c <dwarf::value::as_exprloc() const+0x3d0>
    _Atomic_word __result = *__mem;
   20a24:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   20a28:	fff5079b          	addiw	a5,a0,-1
   20a2c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20a30:	00100793          	addi	a5,zero,1
   20a34:	02f50c63          	beq	a0,a5,20a6c <dwarf::value::as_exprloc() const+0x3e0>
  }
  return expr(cu, cur.get_section_offset(), size);
}
   20a38:	00048513          	addi	a0,s1,0
   20a3c:	0a813083          	ld	ra,168(sp)
   20a40:	0a013403          	ld	s0,160(sp)
   20a44:	09813483          	ld	s1,152(sp)
   20a48:	09013903          	ld	s2,144(sp)
   20a4c:	08813983          	ld	s3,136(sp)
   20a50:	08013a03          	ld	s4,128(sp)
   20a54:	0b010113          	addi	sp,sp,176
   20a58:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   20a5c:	fff00593          	addi	a1,zero,-1
   20a60:	03040513          	addi	a0,s0,48
   20a64:	b8df50ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20a68:	fc9ff06f          	jal	zero,20a30 <dwarf::value::as_exprloc() const+0x3a4>
	_M_dispose();
   20a6c:	00043783          	ld	a5,0(s0)
   20a70:	0107b783          	ld	a5,16(a5)
   20a74:	00040513          	addi	a0,s0,0
   20a78:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20a7c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   20a80:	00023797          	auipc	a5,0x23
   20a84:	a187b783          	ld	a5,-1512(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   20a88:	0007c783          	lbu	a5,0(a5)
   20a8c:	02078663          	beq	a5,zero,20ab8 <dwarf::value::as_exprloc() const+0x42c>
    _Atomic_word __result = *__mem;
   20a90:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   20a94:	fff5079b          	addiw	a5,a0,-1
   20a98:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20a9c:	00100793          	addi	a5,zero,1
   20aa0:	f8f51ce3          	bne	a0,a5,20a38 <dwarf::value::as_exprloc() const+0x3ac>
	    _M_destroy();
   20aa4:	00043783          	ld	a5,0(s0)
   20aa8:	0187b783          	ld	a5,24(a5)
   20aac:	00040513          	addi	a0,s0,0
   20ab0:	000780e7          	jalr	ra,0(a5)
  return expr(cu, cur.get_section_offset(), size);
   20ab4:	f85ff06f          	jal	zero,20a38 <dwarf::value::as_exprloc() const+0x3ac>
      return __exchange_and_add(__mem, __val);
   20ab8:	fff00593          	addi	a1,zero,-1
   20abc:	03440513          	addi	a0,s0,52
   20ac0:	b31f50ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20ac4:	fd9ff06f          	jal	zero,20a9c <dwarf::value::as_exprloc() const+0x410>
      { return _M_dataplus._M_p; }
   20ac8:	00050413          	addi	s0,a0,0
   20acc:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   20ad0:	05810793          	addi	a5,sp,88
   20ad4:	00f50463          	beq	a0,a5,20adc <dwarf::value::as_exprloc() const+0x450>
   20ad8:	cc9f50ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   20adc:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   20ae0:	03810793          	addi	a5,sp,56
   20ae4:	00f50463          	beq	a0,a5,20aec <dwarf::value::as_exprloc() const+0x460>
   20ae8:	cb9f50ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   20aec:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   20af0:	01810793          	addi	a5,sp,24
   20af4:	00f50463          	beq	a0,a5,20afc <dwarf::value::as_exprloc() const+0x470>
   20af8:	ca9f50ef          	jal	ra,167a0 <operator delete(void*)@plt>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as exprloc");
   20afc:	00048513          	addi	a0,s1,0
   20b00:	c51f50ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   20b04:	07013503          	ld	a0,112(sp)
   20b08:	00050863          	beq	a0,zero,20b18 <dwarf::value::as_exprloc() const+0x48c>
	  _M_pi->_M_release();
   20b0c:	00023317          	auipc	t1,0x23
   20b10:	8d433303          	ld	t1,-1836(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   20b14:	000300e7          	jalr	ra,0(t1)
   20b18:	00040513          	addi	a0,s0,0
   20b1c:	e75f50ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   20b20:	00050413          	addi	s0,a0,0
   20b24:	fb9ff06f          	jal	zero,20adc <dwarf::value::as_exprloc() const+0x450>
   20b28:	00050413          	addi	s0,a0,0
   20b2c:	fc1ff06f          	jal	zero,20aec <dwarf::value::as_exprloc() const+0x460>
   20b30:	00050413          	addi	s0,a0,0
   20b34:	fc9ff06f          	jal	zero,20afc <dwarf::value::as_exprloc() const+0x470>
        val |= ((uint64_t)p[i]) << (i * 8);
   20b38:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   20b3c:	00178793          	addi	a5,a5,1
   20b40:	06f13c23          	sd	a5,120(sp)
  section_offset get_section_offset() const { return pos - sec->begin; }
   20b44:	06813783          	ld	a5,104(sp)
   20b48:	0087b783          	ld	a5,8(a5)
  return expr(cu, cur.get_section_offset(), size);
   20b4c:	07813603          	ld	a2,120(sp)
   20b50:	40f60633          	sub	a2,a2,a5
   20b54:	00043583          	ld	a1,0(s0)
   20b58:	00048513          	addi	a0,s1,0
   20b5c:	16c040ef          	jal	ra,24cc8 <dwarf::expr::expr(dwarf::unit const*, unsigned long, unsigned long)>
   20b60:	eadff06f          	jal	zero,20a0c <dwarf::value::as_exprloc() const+0x380>
  cursor cur(cu->data(), offset);
   20b64:	01043703          	ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20b68:	07313423          	sd	s3,104(sp)
      : _M_pi(__r._M_pi)
   20b6c:	06013823          	sd	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   20b70:	0089b783          	ld	a5,8(s3)
   20b74:	00e787b3          	add	a5,a5,a4
   20b78:	06f13c23          	sd	a5,120(sp)
  switch (form) {
   20b7c:	00842783          	lw	a5,8(s0)
   20b80:	ffd7879b          	addiw	a5,a5,-3
   20b84:	0007869b          	addiw	a3,a5,0
   20b88:	01500713          	addi	a4,zero,21
   20b8c:	dad768e3          	bltu	a4,a3,2093c <dwarf::value::as_exprloc() const+0x2b0>
   20b90:	02079713          	slli	a4,a5,0x20
   20b94:	01e75793          	srli	a5,a4,0x1e
   20b98:	00017717          	auipc	a4,0x17
   20b9c:	33870713          	addi	a4,a4,824 # 37ed0 <std::piecewise_construct+0x400>
   20ba0:	00e787b3          	add	a5,a5,a4
   20ba4:	0007a783          	lw	a5,0(a5)
   20ba8:	00e787b3          	add	a5,a5,a4
   20bac:	00078067          	jalr	zero,0(a5)

0000000000020bb0 <dwarf::value::as_flag() const>:

bool value::as_flag() const {
   20bb0:	f8010113          	addi	sp,sp,-128
   20bb4:	06113c23          	sd	ra,120(sp)
   20bb8:	06813823          	sd	s0,112(sp)
   20bbc:	06913423          	sd	s1,104(sp)
   20bc0:	07213023          	sd	s2,96(sp)
   20bc4:	00050413          	addi	s0,a0,0
  switch (form) {
   20bc8:	00852783          	lw	a5,8(a0)
   20bcc:	00c00713          	addi	a4,zero,12
   20bd0:	02e78663          	beq	a5,a4,20bfc <dwarf::value::as_flag() const+0x4c>
   20bd4:	01900713          	addi	a4,zero,25
   20bd8:	00100493          	addi	s1,zero,1
   20bdc:	16e79663          	bne	a5,a4,20d48 <dwarf::value::as_flag() const+0x198>
  case DW_FORM::flag_present:
    return true;
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as flag");
  }
}
   20be0:	00048513          	addi	a0,s1,0
   20be4:	07813083          	ld	ra,120(sp)
   20be8:	07013403          	ld	s0,112(sp)
   20bec:	06813483          	ld	s1,104(sp)
   20bf0:	06013903          	ld	s2,96(sp)
   20bf4:	08010113          	addi	sp,sp,128
   20bf8:	00008067          	jalr	zero,0(ra)
    cursor cur(cu->data(), offset);
   20bfc:	00053503          	ld	a0,0(a0)
   20c00:	f20f70ef          	jal	ra,18320 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20c04:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   20c08:	00853483          	ld	s1,8(a0)
	if (_M_pi != nullptr)
   20c0c:	30048063          	beq	s1,zero,20f0c <dwarf::value::as_flag() const+0x35c>
    if (__is_single_threaded())
   20c10:	00023797          	auipc	a5,0x23
   20c14:	8887b783          	ld	a5,-1912(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   20c18:	0007c783          	lbu	a5,0(a5)
   20c1c:	0a078a63          	beq	a5,zero,20cd0 <dwarf::value::as_flag() const+0x120>
  { *__mem += __val; }
   20c20:	0304a783          	lw	a5,48(s1)
   20c24:	0017879b          	addiw	a5,a5,1
   20c28:	02f4a823          	sw	a5,48(s1)
   20c2c:	01043403          	ld	s0,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20c30:	05213023          	sd	s2,64(sp)
      : _M_pi(__r._M_pi)
   20c34:	04913423          	sd	s1,72(sp)
    if (__is_single_threaded())
   20c38:	00023797          	auipc	a5,0x23
   20c3c:	8607b783          	ld	a5,-1952(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   20c40:	0007c783          	lbu	a5,0(a5)
   20c44:	08078e63          	beq	a5,zero,20ce0 <dwarf::value::as_flag() const+0x130>
  { *__mem += __val; }
   20c48:	0304a783          	lw	a5,48(s1)
   20c4c:	0017879b          	addiw	a5,a5,1
   20c50:	02f4a823          	sw	a5,48(s1)
   20c54:	00893783          	ld	a5,8(s2)
   20c58:	008787b3          	add	a5,a5,s0
   20c5c:	04f13823          	sd	a5,80(sp)
    if (__is_single_threaded())
   20c60:	00023797          	auipc	a5,0x23
   20c64:	8387b783          	ld	a5,-1992(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   20c68:	0007c783          	lbu	a5,0(a5)
   20c6c:	08078263          	beq	a5,zero,20cf0 <dwarf::value::as_flag() const+0x140>
    _Atomic_word __result = *__mem;
   20c70:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   20c74:	fff5079b          	addiw	a5,a0,-1
   20c78:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20c7c:	00100793          	addi	a5,zero,1
   20c80:	2af51263          	bne	a0,a5,20f24 <dwarf::value::as_flag() const+0x374>
	_M_dispose();
   20c84:	0004b783          	ld	a5,0(s1)
   20c88:	0107b783          	ld	a5,16(a5)
   20c8c:	00048513          	addi	a0,s1,0
   20c90:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20c94:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   20c98:	00023797          	auipc	a5,0x23
   20c9c:	8007b783          	ld	a5,-2048(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   20ca0:	0007c783          	lbu	a5,0(a5)
   20ca4:	04078e63          	beq	a5,zero,20d00 <dwarf::value::as_flag() const+0x150>
    _Atomic_word __result = *__mem;
   20ca8:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   20cac:	fff5079b          	addiw	a5,a0,-1
   20cb0:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20cb4:	00100793          	addi	a5,zero,1
   20cb8:	26f51663          	bne	a0,a5,20f24 <dwarf::value::as_flag() const+0x374>
	    _M_destroy();
   20cbc:	0004b783          	ld	a5,0(s1)
   20cc0:	0187b783          	ld	a5,24(a5)
   20cc4:	00048513          	addi	a0,s1,0
   20cc8:	000780e7          	jalr	ra,0(a5)
   20ccc:	2580006f          	jal	zero,20f24 <dwarf::value::as_flag() const+0x374>
      __atomic_add(__mem, __val);
   20cd0:	00100593          	addi	a1,zero,1
   20cd4:	03048513          	addi	a0,s1,48
   20cd8:	8d9f50ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   20cdc:	f51ff06f          	jal	zero,20c2c <dwarf::value::as_flag() const+0x7c>
   20ce0:	00100593          	addi	a1,zero,1
   20ce4:	03048513          	addi	a0,s1,48
   20ce8:	8c9f50ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   20cec:	f69ff06f          	jal	zero,20c54 <dwarf::value::as_flag() const+0xa4>
      return __exchange_and_add(__mem, __val);
   20cf0:	fff00593          	addi	a1,zero,-1
   20cf4:	03048513          	addi	a0,s1,48
   20cf8:	8f9f50ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20cfc:	f81ff06f          	jal	zero,20c7c <dwarf::value::as_flag() const+0xcc>
   20d00:	fff00593          	addi	a1,zero,-1
   20d04:	03448513          	addi	a0,s1,52
   20d08:	8e9f50ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20d0c:	fa9ff06f          	jal	zero,20cb4 <dwarf::value::as_flag() const+0x104>
    const unsigned char *p = (const unsigned char *)pos;
   20d10:	05013783          	ld	a5,80(sp)
    if (sec->ord == byte_order::lsb) {
   20d14:	04013703          	ld	a4,64(sp)
   20d18:	01c72703          	lw	a4,28(a4)
   20d1c:	16070463          	beq	a4,zero,20e84 <dwarf::value::as_flag() const+0x2d4>
        val = (val << 8) | (uint64_t)p[i];
   20d20:	0007c483          	lbu	s1,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   20d24:	1640006f          	jal	zero,20e88 <dwarf::value::as_flag() const+0x2d8>
   20d28:	fff00593          	addi	a1,zero,-1
   20d2c:	03040513          	addi	a0,s0,48
   20d30:	8c1f50ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20d34:	1840006f          	jal	zero,20eb8 <dwarf::value::as_flag() const+0x308>
   20d38:	fff00593          	addi	a1,zero,-1
   20d3c:	03440513          	addi	a0,s0,52
   20d40:	8b1f50ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20d44:	1ac0006f          	jal	zero,20ef0 <dwarf::value::as_flag() const+0x340>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as flag");
   20d48:	01000513          	addi	a0,zero,16
   20d4c:	945f50ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   20d50:	00050493          	addi	s1,a0,0
   20d54:	00c42583          	lw	a1,12(s0)
   20d58:	00010513          	addi	a0,sp,0
   20d5c:	7150e0ef          	jal	ra,2fc70 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   20d60:	00017617          	auipc	a2,0x17
   20d64:	f3860613          	addi	a2,a2,-200 # 37c98 <std::piecewise_construct+0x1c8>
   20d68:	00000593          	addi	a1,zero,0
   20d6c:	00010513          	addi	a0,sp,0
   20d70:	891f50ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   20d74:	00050593          	addi	a1,a0,0
   20d78:	02010413          	addi	s0,sp,32
   20d7c:	00040513          	addi	a0,s0,0
   20d80:	951f50ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   20d84:	00017597          	auipc	a1,0x17
   20d88:	f7458593          	addi	a1,a1,-140 # 37cf8 <std::piecewise_construct+0x228>
   20d8c:	00040513          	addi	a0,s0,0
   20d90:	cb1f50ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   20d94:	00050593          	addi	a1,a0,0
   20d98:	04010413          	addi	s0,sp,64
   20d9c:	00040513          	addi	a0,s0,0
   20da0:	931f50ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   20da4:	00040593          	addi	a1,s0,0
   20da8:	00048513          	addi	a0,s1,0
   20dac:	ce5f50ef          	jal	ra,16a90 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   20db0:	00022797          	auipc	a5,0x22
   20db4:	6b07b783          	ld	a5,1712(a5) # 43460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   20db8:	01078793          	addi	a5,a5,16
   20dbc:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   20dc0:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   20dc4:	05010793          	addi	a5,sp,80
   20dc8:	00f50463          	beq	a0,a5,20dd0 <dwarf::value::as_flag() const+0x220>
   20dcc:	9d5f50ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   20dd0:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   20dd4:	03010793          	addi	a5,sp,48
   20dd8:	00f50463          	beq	a0,a5,20de0 <dwarf::value::as_flag() const+0x230>
   20ddc:	9c5f50ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   20de0:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   20de4:	01010793          	addi	a5,sp,16
   20de8:	00f50463          	beq	a0,a5,20df0 <dwarf::value::as_flag() const+0x240>
   20dec:	9b5f50ef          	jal	ra,167a0 <operator delete(void*)@plt>
   20df0:	00023617          	auipc	a2,0x23
   20df4:	80063603          	ld	a2,-2048(a2) # 435f0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f868>
   20df8:	00022597          	auipc	a1,0x22
   20dfc:	7b85b583          	ld	a1,1976(a1) # 435b0 <typeinfo for dwarf::value_type_mismatch@@Base+0xbf68>
   20e00:	00048513          	addi	a0,s1,0
   20e04:	b5df50ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   20e08:	00050413          	addi	s0,a0,0
   20e0c:	04813503          	ld	a0,72(sp)
   20e10:	00050863          	beq	a0,zero,20e20 <dwarf::value::as_flag() const+0x270>
	  _M_pi->_M_release();
   20e14:	00022317          	auipc	t1,0x22
   20e18:	5cc33303          	ld	t1,1484(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   20e1c:	000300e7          	jalr	ra,0(t1)
   20e20:	00040513          	addi	a0,s0,0
   20e24:	b6df50ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   20e28:	00050413          	addi	s0,a0,0
   20e2c:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   20e30:	05010793          	addi	a5,sp,80
   20e34:	00f50463          	beq	a0,a5,20e3c <dwarf::value::as_flag() const+0x28c>
   20e38:	969f50ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   20e3c:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   20e40:	03010793          	addi	a5,sp,48
   20e44:	00f50463          	beq	a0,a5,20e4c <dwarf::value::as_flag() const+0x29c>
   20e48:	959f50ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   20e4c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   20e50:	01010793          	addi	a5,sp,16
   20e54:	00f50463          	beq	a0,a5,20e5c <dwarf::value::as_flag() const+0x2ac>
   20e58:	949f50ef          	jal	ra,167a0 <operator delete(void*)@plt>
   20e5c:	00048513          	addi	a0,s1,0
   20e60:	8f1f50ef          	jal	ra,16750 <__cxa_free_exception@plt>
   20e64:	00040513          	addi	a0,s0,0
   20e68:	b29f50ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   20e6c:	00050413          	addi	s0,a0,0
   20e70:	fcdff06f          	jal	zero,20e3c <dwarf::value::as_flag() const+0x28c>
   20e74:	00050413          	addi	s0,a0,0
   20e78:	fd5ff06f          	jal	zero,20e4c <dwarf::value::as_flag() const+0x29c>
   20e7c:	00050413          	addi	s0,a0,0
   20e80:	fddff06f          	jal	zero,20e5c <dwarf::value::as_flag() const+0x2ac>
        val |= ((uint64_t)p[i]) << (i * 8);
   20e84:	0007c483          	lbu	s1,0(a5)
    pos += sizeof(T);
   20e88:	00178793          	addi	a5,a5,1
   20e8c:	04f13823          	sd	a5,80(sp)
    return cur.fixed<ubyte>() != 0;
   20e90:	009034b3          	sltu	s1,zero,s1
	if (_M_pi != nullptr)
   20e94:	04813403          	ld	s0,72(sp)
   20e98:	d40404e3          	beq	s0,zero,20be0 <dwarf::value::as_flag() const+0x30>
    if (__is_single_threaded())
   20e9c:	00022797          	auipc	a5,0x22
   20ea0:	5fc7b783          	ld	a5,1532(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   20ea4:	0007c783          	lbu	a5,0(a5)
   20ea8:	e80780e3          	beq	a5,zero,20d28 <dwarf::value::as_flag() const+0x178>
    _Atomic_word __result = *__mem;
   20eac:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   20eb0:	fff5079b          	addiw	a5,a0,-1
   20eb4:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20eb8:	00100793          	addi	a5,zero,1
   20ebc:	d2f512e3          	bne	a0,a5,20be0 <dwarf::value::as_flag() const+0x30>
	_M_dispose();
   20ec0:	00043783          	ld	a5,0(s0)
   20ec4:	0107b783          	ld	a5,16(a5)
   20ec8:	00040513          	addi	a0,s0,0
   20ecc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20ed0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   20ed4:	00022797          	auipc	a5,0x22
   20ed8:	5c47b783          	ld	a5,1476(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   20edc:	0007c783          	lbu	a5,0(a5)
   20ee0:	e4078ce3          	beq	a5,zero,20d38 <dwarf::value::as_flag() const+0x188>
    _Atomic_word __result = *__mem;
   20ee4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   20ee8:	fff5079b          	addiw	a5,a0,-1
   20eec:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20ef0:	00100793          	addi	a5,zero,1
   20ef4:	cef516e3          	bne	a0,a5,20be0 <dwarf::value::as_flag() const+0x30>
	    _M_destroy();
   20ef8:	00043783          	ld	a5,0(s0)
   20efc:	0187b783          	ld	a5,24(a5)
   20f00:	00040513          	addi	a0,s0,0
   20f04:	000780e7          	jalr	ra,0(a5)
   20f08:	cd9ff06f          	jal	zero,20be0 <dwarf::value::as_flag() const+0x30>
    cursor cur(cu->data(), offset);
   20f0c:	01043703          	ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20f10:	05213023          	sd	s2,64(sp)
      : _M_pi(__r._M_pi)
   20f14:	04013423          	sd	zero,72(sp)
      : sec(sec), pos(sec->begin + offset) {}
   20f18:	00893783          	ld	a5,8(s2)
   20f1c:	00e787b3          	add	a5,a5,a4
   20f20:	04f13823          	sd	a5,80(sp)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20f24:	04013783          	ld	a5,64(sp)
   20f28:	0107b703          	ld	a4,16(a5)
   20f2c:	05013783          	ld	a5,80(sp)
   20f30:	dee7e0e3          	bltu	a5,a4,20d10 <dwarf::value::as_flag() const+0x160>
      underflow();
   20f34:	04010513          	addi	a0,sp,64
   20f38:	a0dfc0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
   20f3c:	dd5ff06f          	jal	zero,20d10 <dwarf::value::as_flag() const+0x160>

0000000000020f40 <dwarf::value::as_cstr(unsigned long*) const>:
  size_t size;
  const char *s = as_cstr(&size);
  return string(s, size);
}

const char *value::as_cstr(size_t *size_out) const {
   20f40:	f4010113          	addi	sp,sp,-192
   20f44:	0a113c23          	sd	ra,184(sp)
   20f48:	0a813823          	sd	s0,176(sp)
   20f4c:	0a913423          	sd	s1,168(sp)
   20f50:	0b213023          	sd	s2,160(sp)
   20f54:	09313c23          	sd	s3,152(sp)
   20f58:	09413823          	sd	s4,144(sp)
   20f5c:	00050413          	addi	s0,a0,0
   20f60:	00058913          	addi	s2,a1,0
  cursor cur(cu->data(), offset);
   20f64:	00053503          	ld	a0,0(a0)
   20f68:	bb8f70ef          	jal	ra,18320 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20f6c:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   20f70:	00853483          	ld	s1,8(a0)
	if (_M_pi != nullptr)
   20f74:	4c048a63          	beq	s1,zero,21448 <dwarf::value::as_cstr(unsigned long*) const+0x508>
    if (__is_single_threaded())
   20f78:	00022797          	auipc	a5,0x22
   20f7c:	5207b783          	ld	a5,1312(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   20f80:	0007c783          	lbu	a5,0(a5)
   20f84:	0a078a63          	beq	a5,zero,21038 <dwarf::value::as_cstr(unsigned long*) const+0xf8>
  { *__mem += __val; }
   20f88:	0304a783          	lw	a5,48(s1)
   20f8c:	0017879b          	addiw	a5,a5,1
   20f90:	02f4a823          	sw	a5,48(s1)
   20f94:	01043a03          	ld	s4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20f98:	07313423          	sd	s3,104(sp)
      : _M_pi(__r._M_pi)
   20f9c:	06913823          	sd	s1,112(sp)
    if (__is_single_threaded())
   20fa0:	00022797          	auipc	a5,0x22
   20fa4:	4f87b783          	ld	a5,1272(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   20fa8:	0007c783          	lbu	a5,0(a5)
   20fac:	08078e63          	beq	a5,zero,21048 <dwarf::value::as_cstr(unsigned long*) const+0x108>
  { *__mem += __val; }
   20fb0:	0304a783          	lw	a5,48(s1)
   20fb4:	0017879b          	addiw	a5,a5,1
   20fb8:	02f4a823          	sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   20fbc:	0089b783          	ld	a5,8(s3)
   20fc0:	014787b3          	add	a5,a5,s4
   20fc4:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   20fc8:	00022797          	auipc	a5,0x22
   20fcc:	4d07b783          	ld	a5,1232(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   20fd0:	0007c783          	lbu	a5,0(a5)
   20fd4:	08078263          	beq	a5,zero,21058 <dwarf::value::as_cstr(unsigned long*) const+0x118>
    _Atomic_word __result = *__mem;
   20fd8:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   20fdc:	fff5079b          	addiw	a5,a0,-1
   20fe0:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20fe4:	00100793          	addi	a5,zero,1
   20fe8:	46f51c63          	bne	a0,a5,21460 <dwarf::value::as_cstr(unsigned long*) const+0x520>
	_M_dispose();
   20fec:	0004b783          	ld	a5,0(s1)
   20ff0:	0107b783          	ld	a5,16(a5)
   20ff4:	00048513          	addi	a0,s1,0
   20ff8:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20ffc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21000:	00022797          	auipc	a5,0x22
   21004:	4987b783          	ld	a5,1176(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21008:	0007c783          	lbu	a5,0(a5)
   2100c:	04078e63          	beq	a5,zero,21068 <dwarf::value::as_cstr(unsigned long*) const+0x128>
    _Atomic_word __result = *__mem;
   21010:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   21014:	fff5079b          	addiw	a5,a0,-1
   21018:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2101c:	00100793          	addi	a5,zero,1
   21020:	44f51063          	bne	a0,a5,21460 <dwarf::value::as_cstr(unsigned long*) const+0x520>
	    _M_destroy();
   21024:	0004b783          	ld	a5,0(s1)
   21028:	0187b783          	ld	a5,24(a5)
   2102c:	00048513          	addi	a0,s1,0
   21030:	000780e7          	jalr	ra,0(a5)
   21034:	42c0006f          	jal	zero,21460 <dwarf::value::as_cstr(unsigned long*) const+0x520>
      __atomic_add(__mem, __val);
   21038:	00100593          	addi	a1,zero,1
   2103c:	03048513          	addi	a0,s1,48
   21040:	d70f50ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   21044:	f51ff06f          	jal	zero,20f94 <dwarf::value::as_cstr(unsigned long*) const+0x54>
   21048:	00100593          	addi	a1,zero,1
   2104c:	03048513          	addi	a0,s1,48
   21050:	d60f50ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   21054:	f69ff06f          	jal	zero,20fbc <dwarf::value::as_cstr(unsigned long*) const+0x7c>
      return __exchange_and_add(__mem, __val);
   21058:	fff00593          	addi	a1,zero,-1
   2105c:	03048513          	addi	a0,s1,48
   21060:	d90f50ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21064:	f81ff06f          	jal	zero,20fe4 <dwarf::value::as_cstr(unsigned long*) const+0xa4>
   21068:	fff00593          	addi	a1,zero,-1
   2106c:	03448513          	addi	a0,s1,52
   21070:	d80f50ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21074:	fa9ff06f          	jal	zero,2101c <dwarf::value::as_cstr(unsigned long*) const+0xdc>
  switch (form) {
  case DW_FORM::string:
    return cur.cstr(size_out);
   21078:	00090593          	addi	a1,s2,0
   2107c:	06810513          	addi	a0,sp,104
   21080:	fb4fc0ef          	jal	ra,1d834 <dwarf::cursor::cstr(unsigned long*)>
   21084:	00050413          	addi	s0,a0,0
	if (_M_pi != nullptr)
   21088:	07013483          	ld	s1,112(sp)
   2108c:	02048463          	beq	s1,zero,210b4 <dwarf::value::as_cstr(unsigned long*) const+0x174>
    if (__is_single_threaded())
   21090:	00022797          	auipc	a5,0x22
   21094:	4087b783          	ld	a5,1032(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21098:	0007c783          	lbu	a5,0(a5)
   2109c:	2a078a63          	beq	a5,zero,21350 <dwarf::value::as_cstr(unsigned long*) const+0x410>
    _Atomic_word __result = *__mem;
   210a0:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   210a4:	fff5079b          	addiw	a5,a0,-1
   210a8:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   210ac:	00100793          	addi	a5,zero,1
   210b0:	2af50863          	beq	a0,a5,21360 <dwarf::value::as_cstr(unsigned long*) const+0x420>
    return scur.cstr(size_out);
  }
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as string");
  }
}
   210b4:	00040513          	addi	a0,s0,0
   210b8:	0b813083          	ld	ra,184(sp)
   210bc:	0b013403          	ld	s0,176(sp)
   210c0:	0a813483          	ld	s1,168(sp)
   210c4:	0a013903          	ld	s2,160(sp)
   210c8:	09813983          	ld	s3,152(sp)
   210cc:	09013a03          	ld	s4,144(sp)
   210d0:	0c010113          	addi	sp,sp,192
   210d4:	00008067          	jalr	zero,0(ra)
    section_offset off = cur.offset();
   210d8:	00050493          	addi	s1,a0,0
    cursor scur(cu->get_dwarf().get_section(section_type::str), off);
   210dc:	00043503          	ld	a0,0(s0)
   210e0:	a2cf70ef          	jal	ra,1830c <dwarf::unit::get_dwarf() const>
   210e4:	00050593          	addi	a1,a0,0
   210e8:	00a00613          	addi	a2,zero,10
   210ec:	08010513          	addi	a0,sp,128
   210f0:	a48f70ef          	jal	ra,18338 <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   210f4:	08013783          	ld	a5,128(sp)
   210f8:	04f13423          	sd	a5,72(sp)
      : _M_pi(__r._M_pi)
   210fc:	08813503          	ld	a0,136(sp)
   21100:	04a13823          	sd	a0,80(sp)
	if (_M_pi != nullptr)
   21104:	02050063          	beq	a0,zero,21124 <dwarf::value::as_cstr(unsigned long*) const+0x1e4>
    if (__is_single_threaded())
   21108:	00022797          	auipc	a5,0x22
   2110c:	3907b783          	ld	a5,912(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21110:	0007c783          	lbu	a5,0(a5)
   21114:	04078e63          	beq	a5,zero,21170 <dwarf::value::as_cstr(unsigned long*) const+0x230>
  { *__mem += __val; }
   21118:	03052783          	lw	a5,48(a0)
   2111c:	0017879b          	addiw	a5,a5,1
   21120:	02f52823          	sw	a5,48(a0)
   21124:	08013783          	ld	a5,128(sp)
   21128:	0087b783          	ld	a5,8(a5)
   2112c:	00978533          	add	a0,a5,s1
   21130:	04a13c23          	sd	a0,88(sp)
	if (_M_pi != nullptr)
   21134:	08813403          	ld	s0,136(sp)
   21138:	02040463          	beq	s0,zero,21160 <dwarf::value::as_cstr(unsigned long*) const+0x220>
    if (__is_single_threaded())
   2113c:	00022797          	auipc	a5,0x22
   21140:	35c7b783          	ld	a5,860(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21144:	0007c783          	lbu	a5,0(a5)
   21148:	02078c63          	beq	a5,zero,21180 <dwarf::value::as_cstr(unsigned long*) const+0x240>
    _Atomic_word __result = *__mem;
   2114c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   21150:	fff5079b          	addiw	a5,a0,-1
   21154:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21158:	00100793          	addi	a5,zero,1
   2115c:	02f50a63          	beq	a0,a5,21190 <dwarf::value::as_cstr(unsigned long*) const+0x250>
    return scur.cstr(size_out);
   21160:	00090593          	addi	a1,s2,0
   21164:	04810513          	addi	a0,sp,72
   21168:	eccfc0ef          	jal	ra,1d834 <dwarf::cursor::cstr(unsigned long*)>
   2116c:	0800006f          	jal	zero,211ec <dwarf::value::as_cstr(unsigned long*) const+0x2ac>
      __atomic_add(__mem, __val);
   21170:	00100593          	addi	a1,zero,1
   21174:	03050513          	addi	a0,a0,48
   21178:	c38f50ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2117c:	fa9ff06f          	jal	zero,21124 <dwarf::value::as_cstr(unsigned long*) const+0x1e4>
      return __exchange_and_add(__mem, __val);
   21180:	fff00593          	addi	a1,zero,-1
   21184:	03040513          	addi	a0,s0,48
   21188:	c68f50ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2118c:	fcdff06f          	jal	zero,21158 <dwarf::value::as_cstr(unsigned long*) const+0x218>
	_M_dispose();
   21190:	00043783          	ld	a5,0(s0)
   21194:	0107b783          	ld	a5,16(a5)
   21198:	00040513          	addi	a0,s0,0
   2119c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   211a0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   211a4:	00022797          	auipc	a5,0x22
   211a8:	2f47b783          	ld	a5,756(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   211ac:	0007c783          	lbu	a5,0(a5)
   211b0:	02078663          	beq	a5,zero,211dc <dwarf::value::as_cstr(unsigned long*) const+0x29c>
    _Atomic_word __result = *__mem;
   211b4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   211b8:	fff5079b          	addiw	a5,a0,-1
   211bc:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   211c0:	00100793          	addi	a5,zero,1
   211c4:	f8f51ee3          	bne	a0,a5,21160 <dwarf::value::as_cstr(unsigned long*) const+0x220>
	    _M_destroy();
   211c8:	00043783          	ld	a5,0(s0)
   211cc:	0187b783          	ld	a5,24(a5)
   211d0:	00040513          	addi	a0,s0,0
   211d4:	000780e7          	jalr	ra,0(a5)
   211d8:	f89ff06f          	jal	zero,21160 <dwarf::value::as_cstr(unsigned long*) const+0x220>
      return __exchange_and_add(__mem, __val);
   211dc:	fff00593          	addi	a1,zero,-1
   211e0:	03440513          	addi	a0,s0,52
   211e4:	c0cf50ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   211e8:	fd9ff06f          	jal	zero,211c0 <dwarf::value::as_cstr(unsigned long*) const+0x280>
   211ec:	00050413          	addi	s0,a0,0
	if (_M_pi != nullptr)
   211f0:	05013483          	ld	s1,80(sp)
   211f4:	e8048ae3          	beq	s1,zero,21088 <dwarf::value::as_cstr(unsigned long*) const+0x148>
    if (__is_single_threaded())
   211f8:	00022797          	auipc	a5,0x22
   211fc:	2a07b783          	ld	a5,672(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21200:	0007c783          	lbu	a5,0(a5)
   21204:	06078263          	beq	a5,zero,21268 <dwarf::value::as_cstr(unsigned long*) const+0x328>
    _Atomic_word __result = *__mem;
   21208:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   2120c:	fff5079b          	addiw	a5,a0,-1
   21210:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21214:	00100793          	addi	a5,zero,1
   21218:	e6f518e3          	bne	a0,a5,21088 <dwarf::value::as_cstr(unsigned long*) const+0x148>
	_M_dispose();
   2121c:	0004b783          	ld	a5,0(s1)
   21220:	0107b783          	ld	a5,16(a5)
   21224:	00048513          	addi	a0,s1,0
   21228:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2122c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21230:	00022797          	auipc	a5,0x22
   21234:	2687b783          	ld	a5,616(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21238:	0007c783          	lbu	a5,0(a5)
   2123c:	02078e63          	beq	a5,zero,21278 <dwarf::value::as_cstr(unsigned long*) const+0x338>
    _Atomic_word __result = *__mem;
   21240:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   21244:	fff5079b          	addiw	a5,a0,-1
   21248:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2124c:	00100793          	addi	a5,zero,1
   21250:	e2f51ce3          	bne	a0,a5,21088 <dwarf::value::as_cstr(unsigned long*) const+0x148>
	    _M_destroy();
   21254:	0004b783          	ld	a5,0(s1)
   21258:	0187b783          	ld	a5,24(a5)
   2125c:	00048513          	addi	a0,s1,0
   21260:	000780e7          	jalr	ra,0(a5)
   21264:	e25ff06f          	jal	zero,21088 <dwarf::value::as_cstr(unsigned long*) const+0x148>
      return __exchange_and_add(__mem, __val);
   21268:	fff00593          	addi	a1,zero,-1
   2126c:	03048513          	addi	a0,s1,48
   21270:	b80f50ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21274:	fa1ff06f          	jal	zero,21214 <dwarf::value::as_cstr(unsigned long*) const+0x2d4>
   21278:	fff00593          	addi	a1,zero,-1
   2127c:	03448513          	addi	a0,s1,52
   21280:	b70f50ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21284:	fc9ff06f          	jal	zero,2124c <dwarf::value::as_cstr(unsigned long*) const+0x30c>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as string");
   21288:	01000513          	addi	a0,zero,16
   2128c:	c04f50ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   21290:	00050493          	addi	s1,a0,0
   21294:	00c42583          	lw	a1,12(s0)
   21298:	00810513          	addi	a0,sp,8
   2129c:	1d50e0ef          	jal	ra,2fc70 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   212a0:	00017617          	auipc	a2,0x17
   212a4:	9f860613          	addi	a2,a2,-1544 # 37c98 <std::piecewise_construct+0x1c8>
   212a8:	00000593          	addi	a1,zero,0
   212ac:	00810513          	addi	a0,sp,8
   212b0:	b50f50ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   212b4:	00050593          	addi	a1,a0,0
   212b8:	02810413          	addi	s0,sp,40
   212bc:	00040513          	addi	a0,s0,0
   212c0:	c10f50ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   212c4:	00017597          	auipc	a1,0x17
   212c8:	a4458593          	addi	a1,a1,-1468 # 37d08 <std::piecewise_construct+0x238>
   212cc:	00040513          	addi	a0,s0,0
   212d0:	f70f50ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   212d4:	00050593          	addi	a1,a0,0
   212d8:	04810413          	addi	s0,sp,72
   212dc:	00040513          	addi	a0,s0,0
   212e0:	bf0f50ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   212e4:	00040593          	addi	a1,s0,0
   212e8:	00048513          	addi	a0,s1,0
   212ec:	fa4f50ef          	jal	ra,16a90 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   212f0:	00022797          	auipc	a5,0x22
   212f4:	1707b783          	ld	a5,368(a5) # 43460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   212f8:	01078793          	addi	a5,a5,16
   212fc:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   21300:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   21304:	05810793          	addi	a5,sp,88
   21308:	00f50463          	beq	a0,a5,21310 <dwarf::value::as_cstr(unsigned long*) const+0x3d0>
   2130c:	c94f50ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21310:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   21314:	03810793          	addi	a5,sp,56
   21318:	00f50463          	beq	a0,a5,21320 <dwarf::value::as_cstr(unsigned long*) const+0x3e0>
   2131c:	c84f50ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21320:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   21324:	01810793          	addi	a5,sp,24
   21328:	00f50463          	beq	a0,a5,21330 <dwarf::value::as_cstr(unsigned long*) const+0x3f0>
   2132c:	c74f50ef          	jal	ra,167a0 <operator delete(void*)@plt>
   21330:	00022617          	auipc	a2,0x22
   21334:	2c063603          	ld	a2,704(a2) # 435f0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f868>
   21338:	00022597          	auipc	a1,0x22
   2133c:	2785b583          	ld	a1,632(a1) # 435b0 <typeinfo for dwarf::value_type_mismatch@@Base+0xbf68>
   21340:	00048513          	addi	a0,s1,0
   21344:	e1cf50ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   21348:	00050413          	addi	s0,a0,0
   2134c:	0880006f          	jal	zero,213d4 <dwarf::value::as_cstr(unsigned long*) const+0x494>
   21350:	fff00593          	addi	a1,zero,-1
   21354:	03048513          	addi	a0,s1,48
   21358:	a98f50ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2135c:	d51ff06f          	jal	zero,210ac <dwarf::value::as_cstr(unsigned long*) const+0x16c>
	_M_dispose();
   21360:	0004b783          	ld	a5,0(s1)
   21364:	0107b783          	ld	a5,16(a5)
   21368:	00048513          	addi	a0,s1,0
   2136c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21370:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21374:	00022797          	auipc	a5,0x22
   21378:	1247b783          	ld	a5,292(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2137c:	0007c783          	lbu	a5,0(a5)
   21380:	02078663          	beq	a5,zero,213ac <dwarf::value::as_cstr(unsigned long*) const+0x46c>
    _Atomic_word __result = *__mem;
   21384:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   21388:	fff5079b          	addiw	a5,a0,-1
   2138c:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21390:	00100793          	addi	a5,zero,1
   21394:	d2f510e3          	bne	a0,a5,210b4 <dwarf::value::as_cstr(unsigned long*) const+0x174>
	    _M_destroy();
   21398:	0004b783          	ld	a5,0(s1)
   2139c:	0187b783          	ld	a5,24(a5)
   213a0:	00048513          	addi	a0,s1,0
   213a4:	000780e7          	jalr	ra,0(a5)
   213a8:	d0dff06f          	jal	zero,210b4 <dwarf::value::as_cstr(unsigned long*) const+0x174>
      return __exchange_and_add(__mem, __val);
   213ac:	fff00593          	addi	a1,zero,-1
   213b0:	03448513          	addi	a0,s1,52
   213b4:	a3cf50ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   213b8:	fd9ff06f          	jal	zero,21390 <dwarf::value::as_cstr(unsigned long*) const+0x450>
	if (_M_pi != nullptr)
   213bc:	00050413          	addi	s0,a0,0
   213c0:	05013503          	ld	a0,80(sp)
   213c4:	00050863          	beq	a0,zero,213d4 <dwarf::value::as_cstr(unsigned long*) const+0x494>
	  _M_pi->_M_release();
   213c8:	00022317          	auipc	t1,0x22
   213cc:	01833303          	ld	t1,24(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   213d0:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   213d4:	07013503          	ld	a0,112(sp)
   213d8:	00050863          	beq	a0,zero,213e8 <dwarf::value::as_cstr(unsigned long*) const+0x4a8>
	  _M_pi->_M_release();
   213dc:	00022317          	auipc	t1,0x22
   213e0:	00433303          	ld	t1,4(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   213e4:	000300e7          	jalr	ra,0(t1)
   213e8:	00040513          	addi	a0,s0,0
   213ec:	da4f50ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   213f0:	00050413          	addi	s0,a0,0
   213f4:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   213f8:	05810793          	addi	a5,sp,88
   213fc:	00f50463          	beq	a0,a5,21404 <dwarf::value::as_cstr(unsigned long*) const+0x4c4>
   21400:	ba0f50ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21404:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   21408:	03810793          	addi	a5,sp,56
   2140c:	00f50463          	beq	a0,a5,21414 <dwarf::value::as_cstr(unsigned long*) const+0x4d4>
   21410:	b90f50ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21414:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   21418:	01810793          	addi	a5,sp,24
   2141c:	00f50463          	beq	a0,a5,21424 <dwarf::value::as_cstr(unsigned long*) const+0x4e4>
   21420:	b80f50ef          	jal	ra,167a0 <operator delete(void*)@plt>
   21424:	00048513          	addi	a0,s1,0
   21428:	b28f50ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2142c:	fa9ff06f          	jal	zero,213d4 <dwarf::value::as_cstr(unsigned long*) const+0x494>
      { return _M_dataplus._M_p; }
   21430:	00050413          	addi	s0,a0,0
   21434:	fd1ff06f          	jal	zero,21404 <dwarf::value::as_cstr(unsigned long*) const+0x4c4>
   21438:	00050413          	addi	s0,a0,0
   2143c:	fd9ff06f          	jal	zero,21414 <dwarf::value::as_cstr(unsigned long*) const+0x4d4>
   21440:	00050413          	addi	s0,a0,0
   21444:	fe1ff06f          	jal	zero,21424 <dwarf::value::as_cstr(unsigned long*) const+0x4e4>
  cursor cur(cu->data(), offset);
   21448:	01043703          	ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2144c:	07313423          	sd	s3,104(sp)
      : _M_pi(__r._M_pi)
   21450:	06013823          	sd	zero,112(sp)
   21454:	0089b783          	ld	a5,8(s3)
   21458:	00e787b3          	add	a5,a5,a4
   2145c:	06f13c23          	sd	a5,120(sp)
  switch (form) {
   21460:	00842783          	lw	a5,8(s0)
   21464:	00800713          	addi	a4,zero,8
   21468:	c0e788e3          	beq	a5,a4,21078 <dwarf::value::as_cstr(unsigned long*) const+0x138>
   2146c:	00e00713          	addi	a4,zero,14
   21470:	e0e79ce3          	bne	a5,a4,21288 <dwarf::value::as_cstr(unsigned long*) const+0x348>
    section_offset off = cur.offset();
   21474:	06810513          	addi	a0,sp,104
   21478:	c59fc0ef          	jal	ra,1e0d0 <dwarf::cursor::offset()>
   2147c:	c5dff06f          	jal	zero,210d8 <dwarf::value::as_cstr(unsigned long*) const+0x198>

0000000000021480 <dwarf::value::as_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) const>:
void value::as_string(string &buf) const {
   21480:	fd010113          	addi	sp,sp,-48
   21484:	02113423          	sd	ra,40(sp)
   21488:	02813023          	sd	s0,32(sp)
   2148c:	00913c23          	sd	s1,24(sp)
   21490:	00058413          	addi	s0,a1,0
  const char *p = as_cstr(&size);
   21494:	00810593          	addi	a1,sp,8
   21498:	aa9ff0ef          	jal	ra,20f40 <dwarf::value::as_cstr(unsigned long*) const>
   2149c:	00050493          	addi	s1,a0,0
      { this->resize(__n, _CharT()); }
   214a0:	00000613          	addi	a2,zero,0
   214a4:	00813583          	ld	a1,8(sp)
   214a8:	00040513          	addi	a0,s0,0
   214ac:	974f50ef          	jal	ra,16620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@plt>
  memmove(&buf.front(), p, size);
   214b0:	00813603          	ld	a2,8(sp)
   214b4:	00048593          	addi	a1,s1,0
   214b8:	00043503          	ld	a0,0(s0)
   214bc:	d64f50ef          	jal	ra,16a20 <memmove@plt>
}
   214c0:	02813083          	ld	ra,40(sp)
   214c4:	02013403          	ld	s0,32(sp)
   214c8:	01813483          	ld	s1,24(sp)
   214cc:	03010113          	addi	sp,sp,48
   214d0:	00008067          	jalr	zero,0(ra)

00000000000214d4 <dwarf::value::as_sec_offset() const>:

section_offset value::as_sec_offset() const {
   214d4:	f5010113          	addi	sp,sp,-176
   214d8:	0a113423          	sd	ra,168(sp)
   214dc:	0a813023          	sd	s0,160(sp)
   214e0:	08913c23          	sd	s1,152(sp)
   214e4:	09213823          	sd	s2,144(sp)
   214e8:	09313423          	sd	s3,136(sp)
   214ec:	00050913          	addi	s2,a0,0
  // Prior to DWARF 4, sec_offsets were encoded as data4 or
  // data8.
  cursor cur(cu->data(), offset);
   214f0:	00053503          	ld	a0,0(a0)
   214f4:	e2df60ef          	jal	ra,18320 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   214f8:	00053483          	ld	s1,0(a0)
      : _M_pi(__r._M_pi)
   214fc:	00853403          	ld	s0,8(a0)
	if (_M_pi != nullptr)
   21500:	40040c63          	beq	s0,zero,21918 <dwarf::value::as_sec_offset() const+0x444>
    if (__is_single_threaded())
   21504:	00022797          	auipc	a5,0x22
   21508:	f947b783          	ld	a5,-108(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2150c:	0007c783          	lbu	a5,0(a5)
   21510:	0a078a63          	beq	a5,zero,215c4 <dwarf::value::as_sec_offset() const+0xf0>
  { *__mem += __val; }
   21514:	03042783          	lw	a5,48(s0)
   21518:	0017879b          	addiw	a5,a5,1
   2151c:	02f42823          	sw	a5,48(s0)
   21520:	01093983          	ld	s3,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   21524:	06913423          	sd	s1,104(sp)
      : _M_pi(__r._M_pi)
   21528:	06813823          	sd	s0,112(sp)
    if (__is_single_threaded())
   2152c:	00022797          	auipc	a5,0x22
   21530:	f6c7b783          	ld	a5,-148(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21534:	0007c783          	lbu	a5,0(a5)
   21538:	08078e63          	beq	a5,zero,215d4 <dwarf::value::as_sec_offset() const+0x100>
  { *__mem += __val; }
   2153c:	03042783          	lw	a5,48(s0)
   21540:	0017879b          	addiw	a5,a5,1
   21544:	02f42823          	sw	a5,48(s0)
   21548:	0084b783          	ld	a5,8(s1)
   2154c:	013787b3          	add	a5,a5,s3
   21550:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   21554:	00022797          	auipc	a5,0x22
   21558:	f447b783          	ld	a5,-188(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2155c:	0007c783          	lbu	a5,0(a5)
   21560:	08078263          	beq	a5,zero,215e4 <dwarf::value::as_sec_offset() const+0x110>
    _Atomic_word __result = *__mem;
   21564:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   21568:	fff5079b          	addiw	a5,a0,-1
   2156c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21570:	00100793          	addi	a5,zero,1
   21574:	3af51e63          	bne	a0,a5,21930 <dwarf::value::as_sec_offset() const+0x45c>
	_M_dispose();
   21578:	00043783          	ld	a5,0(s0)
   2157c:	0107b783          	ld	a5,16(a5)
   21580:	00040513          	addi	a0,s0,0
   21584:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21588:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2158c:	00022797          	auipc	a5,0x22
   21590:	f0c7b783          	ld	a5,-244(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21594:	0007c783          	lbu	a5,0(a5)
   21598:	04078e63          	beq	a5,zero,215f4 <dwarf::value::as_sec_offset() const+0x120>
    _Atomic_word __result = *__mem;
   2159c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   215a0:	fff5079b          	addiw	a5,a0,-1
   215a4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   215a8:	00100793          	addi	a5,zero,1
   215ac:	38f51263          	bne	a0,a5,21930 <dwarf::value::as_sec_offset() const+0x45c>
	    _M_destroy();
   215b0:	00043783          	ld	a5,0(s0)
   215b4:	0187b783          	ld	a5,24(a5)
   215b8:	00040513          	addi	a0,s0,0
   215bc:	000780e7          	jalr	ra,0(a5)
   215c0:	3700006f          	jal	zero,21930 <dwarf::value::as_sec_offset() const+0x45c>
      __atomic_add(__mem, __val);
   215c4:	00100593          	addi	a1,zero,1
   215c8:	03040513          	addi	a0,s0,48
   215cc:	fe5f40ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   215d0:	f51ff06f          	jal	zero,21520 <dwarf::value::as_sec_offset() const+0x4c>
   215d4:	00100593          	addi	a1,zero,1
   215d8:	03040513          	addi	a0,s0,48
   215dc:	fd5f40ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   215e0:	f69ff06f          	jal	zero,21548 <dwarf::value::as_sec_offset() const+0x74>
      return __exchange_and_add(__mem, __val);
   215e4:	fff00593          	addi	a1,zero,-1
   215e8:	03040513          	addi	a0,s0,48
   215ec:	804f50ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   215f0:	f81ff06f          	jal	zero,21570 <dwarf::value::as_sec_offset() const+0x9c>
   215f4:	fff00593          	addi	a1,zero,-1
   215f8:	03440513          	addi	a0,s0,52
   215fc:	ff5f40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21600:	fa9ff06f          	jal	zero,215a8 <dwarf::value::as_sec_offset() const+0xd4>
  switch (form) {
   21604:	00600713          	addi	a4,zero,6
   21608:	16e79663          	bne	a5,a4,21774 <dwarf::value::as_sec_offset() const+0x2a0>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2160c:	06813783          	ld	a5,104(sp)
   21610:	0107b703          	ld	a4,16(a5)
   21614:	07813783          	ld	a5,120(sp)
   21618:	40f70633          	sub	a2,a4,a5
   2161c:	00300693          	addi	a3,zero,3
   21620:	00c6f463          	bgeu	a3,a2,21628 <dwarf::value::as_sec_offset() const+0x154>
   21624:	00e7e663          	bltu	a5,a4,21630 <dwarf::value::as_sec_offset() const+0x15c>
      underflow();
   21628:	06810513          	addi	a0,sp,104
   2162c:	b18fc0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   21630:	07813603          	ld	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   21634:	06813783          	ld	a5,104(sp)
   21638:	01c7a783          	lw	a5,28(a5)
   2163c:	08079263          	bne	a5,zero,216c0 <dwarf::value::as_sec_offset() const+0x1ec>
   21640:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   21644:	00000413          	addi	s0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   21648:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   2164c:	0006c703          	lbu	a4,0(a3)
   21650:	00f71733          	sll	a4,a4,a5
   21654:	00e46433          	or	s0,s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   21658:	00168693          	addi	a3,a3,1
   2165c:	0087879b          	addiw	a5,a5,8
   21660:	feb796e3          	bne	a5,a1,2164c <dwarf::value::as_sec_offset() const+0x178>
    pos += sizeof(T);
   21664:	00460613          	addi	a2,a2,4
   21668:	06c13c23          	sd	a2,120(sp)
   2166c:	02041413          	slli	s0,s0,0x20
   21670:	02045413          	srli	s0,s0,0x20
	if (_M_pi != nullptr)
   21674:	07013483          	ld	s1,112(sp)
   21678:	02048463          	beq	s1,zero,216a0 <dwarf::value::as_sec_offset() const+0x1cc>
    if (__is_single_threaded())
   2167c:	00022797          	auipc	a5,0x22
   21680:	e1c7b783          	ld	a5,-484(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21684:	0007c783          	lbu	a5,0(a5)
   21688:	1a078a63          	beq	a5,zero,2183c <dwarf::value::as_sec_offset() const+0x368>
    _Atomic_word __result = *__mem;
   2168c:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   21690:	fff5079b          	addiw	a5,a0,-1
   21694:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21698:	00100793          	addi	a5,zero,1
   2169c:	1af50863          	beq	a0,a5,2184c <dwarf::value::as_sec_offset() const+0x378>
    return cur.offset();
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) +
                              " as sec_offset");
  }
}
   216a0:	00040513          	addi	a0,s0,0
   216a4:	0a813083          	ld	ra,168(sp)
   216a8:	0a013403          	ld	s0,160(sp)
   216ac:	09813483          	ld	s1,152(sp)
   216b0:	09013903          	ld	s2,144(sp)
   216b4:	08813983          	ld	s3,136(sp)
   216b8:	0b010113          	addi	sp,sp,176
   216bc:	00008067          	jalr	zero,0(ra)
   216c0:	00060793          	addi	a5,a2,0
   216c4:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   216c8:	00000413          	addi	s0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   216cc:	00841413          	slli	s0,s0,0x8
   216d0:	0007c703          	lbu	a4,0(a5)
   216d4:	00876433          	or	s0,a4,s0
      for (unsigned i = 0; i < sizeof(T); i++)
   216d8:	00178793          	addi	a5,a5,1
   216dc:	fed798e3          	bne	a5,a3,216cc <dwarf::value::as_sec_offset() const+0x1f8>
   216e0:	f85ff06f          	jal	zero,21664 <dwarf::value::as_sec_offset() const+0x190>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   216e4:	06813783          	ld	a5,104(sp)
   216e8:	0107b703          	ld	a4,16(a5)
   216ec:	07813783          	ld	a5,120(sp)
   216f0:	40f70633          	sub	a2,a4,a5
   216f4:	00700693          	addi	a3,zero,7
   216f8:	00c6f463          	bgeu	a3,a2,21700 <dwarf::value::as_sec_offset() const+0x22c>
   216fc:	00e7e663          	bltu	a5,a4,21708 <dwarf::value::as_sec_offset() const+0x234>
      underflow();
   21700:	06810513          	addi	a0,sp,104
   21704:	a40fc0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   21708:	07813603          	ld	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   2170c:	06813783          	ld	a5,104(sp)
   21710:	01c7a783          	lw	a5,28(a5)
   21714:	02079a63          	bne	a5,zero,21748 <dwarf::value::as_sec_offset() const+0x274>
   21718:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   2171c:	00000413          	addi	s0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   21720:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   21724:	0006c703          	lbu	a4,0(a3)
   21728:	00f71733          	sll	a4,a4,a5
   2172c:	00e46433          	or	s0,s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   21730:	00168693          	addi	a3,a3,1
   21734:	0087879b          	addiw	a5,a5,8
   21738:	feb796e3          	bne	a5,a1,21724 <dwarf::value::as_sec_offset() const+0x250>
    pos += sizeof(T);
   2173c:	00860613          	addi	a2,a2,8
   21740:	06c13c23          	sd	a2,120(sp)
   21744:	f31ff06f          	jal	zero,21674 <dwarf::value::as_sec_offset() const+0x1a0>
   21748:	00060793          	addi	a5,a2,0
   2174c:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   21750:	00000413          	addi	s0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   21754:	00841413          	slli	s0,s0,0x8
   21758:	0007c703          	lbu	a4,0(a5)
   2175c:	00876433          	or	s0,a4,s0
      for (unsigned i = 0; i < sizeof(T); i++)
   21760:	00178793          	addi	a5,a5,1
   21764:	fed798e3          	bne	a5,a3,21754 <dwarf::value::as_sec_offset() const+0x280>
   21768:	fd5ff06f          	jal	zero,2173c <dwarf::value::as_sec_offset() const+0x268>
    return cur.offset();
   2176c:	00050413          	addi	s0,a0,0
   21770:	f05ff06f          	jal	zero,21674 <dwarf::value::as_sec_offset() const+0x1a0>
                              " as sec_offset");
   21774:	01000513          	addi	a0,zero,16
   21778:	f19f40ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2177c:	00050493          	addi	s1,a0,0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   21780:	00c92583          	lw	a1,12(s2)
   21784:	00810513          	addi	a0,sp,8
   21788:	4e80e0ef          	jal	ra,2fc70 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   2178c:	00016617          	auipc	a2,0x16
   21790:	50c60613          	addi	a2,a2,1292 # 37c98 <std::piecewise_construct+0x1c8>
   21794:	00000593          	addi	a1,zero,0
   21798:	00810513          	addi	a0,sp,8
   2179c:	e65f40ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   217a0:	00050593          	addi	a1,a0,0
   217a4:	02810413          	addi	s0,sp,40
   217a8:	00040513          	addi	a0,s0,0
   217ac:	f25f40ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   217b0:	00016597          	auipc	a1,0x16
   217b4:	56858593          	addi	a1,a1,1384 # 37d18 <std::piecewise_construct+0x248>
   217b8:	00040513          	addi	a0,s0,0
   217bc:	a84f50ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   217c0:	00050593          	addi	a1,a0,0
   217c4:	04810413          	addi	s0,sp,72
   217c8:	00040513          	addi	a0,s0,0
   217cc:	f05f40ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   217d0:	00040593          	addi	a1,s0,0
   217d4:	00048513          	addi	a0,s1,0
   217d8:	ab8f50ef          	jal	ra,16a90 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   217dc:	00022797          	auipc	a5,0x22
   217e0:	c847b783          	ld	a5,-892(a5) # 43460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   217e4:	01078793          	addi	a5,a5,16
   217e8:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   217ec:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   217f0:	05810793          	addi	a5,sp,88
   217f4:	00f50463          	beq	a0,a5,217fc <dwarf::value::as_sec_offset() const+0x328>
   217f8:	fa9f40ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   217fc:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   21800:	03810793          	addi	a5,sp,56
   21804:	00f50463          	beq	a0,a5,2180c <dwarf::value::as_sec_offset() const+0x338>
   21808:	f99f40ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2180c:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   21810:	01810793          	addi	a5,sp,24
   21814:	00f50463          	beq	a0,a5,2181c <dwarf::value::as_sec_offset() const+0x348>
   21818:	f89f40ef          	jal	ra,167a0 <operator delete(void*)@plt>
                              " as sec_offset");
   2181c:	00022617          	auipc	a2,0x22
   21820:	dd463603          	ld	a2,-556(a2) # 435f0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f868>
   21824:	00022597          	auipc	a1,0x22
   21828:	d8c5b583          	ld	a1,-628(a1) # 435b0 <typeinfo for dwarf::value_type_mismatch@@Base+0xbf68>
   2182c:	00048513          	addi	a0,s1,0
   21830:	930f50ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   21834:	00050413          	addi	s0,a0,0
   21838:	0ac0006f          	jal	zero,218e4 <dwarf::value::as_sec_offset() const+0x410>
      return __exchange_and_add(__mem, __val);
   2183c:	fff00593          	addi	a1,zero,-1
   21840:	03048513          	addi	a0,s1,48
   21844:	dadf40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21848:	e51ff06f          	jal	zero,21698 <dwarf::value::as_sec_offset() const+0x1c4>
	_M_dispose();
   2184c:	0004b783          	ld	a5,0(s1)
   21850:	0107b783          	ld	a5,16(a5)
   21854:	00048513          	addi	a0,s1,0
   21858:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2185c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21860:	00022797          	auipc	a5,0x22
   21864:	c387b783          	ld	a5,-968(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21868:	0007c783          	lbu	a5,0(a5)
   2186c:	02078663          	beq	a5,zero,21898 <dwarf::value::as_sec_offset() const+0x3c4>
    _Atomic_word __result = *__mem;
   21870:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   21874:	fff5079b          	addiw	a5,a0,-1
   21878:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2187c:	00100793          	addi	a5,zero,1
   21880:	e2f510e3          	bne	a0,a5,216a0 <dwarf::value::as_sec_offset() const+0x1cc>
	    _M_destroy();
   21884:	0004b783          	ld	a5,0(s1)
   21888:	0187b783          	ld	a5,24(a5)
   2188c:	00048513          	addi	a0,s1,0
   21890:	000780e7          	jalr	ra,0(a5)
   21894:	e0dff06f          	jal	zero,216a0 <dwarf::value::as_sec_offset() const+0x1cc>
      return __exchange_and_add(__mem, __val);
   21898:	fff00593          	addi	a1,zero,-1
   2189c:	03448513          	addi	a0,s1,52
   218a0:	d51f40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   218a4:	fd9ff06f          	jal	zero,2187c <dwarf::value::as_sec_offset() const+0x3a8>
      { return _M_dataplus._M_p; }
   218a8:	00050413          	addi	s0,a0,0
   218ac:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   218b0:	05810793          	addi	a5,sp,88
   218b4:	00f50463          	beq	a0,a5,218bc <dwarf::value::as_sec_offset() const+0x3e8>
   218b8:	ee9f40ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   218bc:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   218c0:	03810793          	addi	a5,sp,56
   218c4:	00f50463          	beq	a0,a5,218cc <dwarf::value::as_sec_offset() const+0x3f8>
   218c8:	ed9f40ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   218cc:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   218d0:	01810793          	addi	a5,sp,24
   218d4:	00f50463          	beq	a0,a5,218dc <dwarf::value::as_sec_offset() const+0x408>
   218d8:	ec9f40ef          	jal	ra,167a0 <operator delete(void*)@plt>
   218dc:	00048513          	addi	a0,s1,0
   218e0:	e71f40ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   218e4:	07013503          	ld	a0,112(sp)
   218e8:	00050863          	beq	a0,zero,218f8 <dwarf::value::as_sec_offset() const+0x424>
	  _M_pi->_M_release();
   218ec:	00022317          	auipc	t1,0x22
   218f0:	af433303          	ld	t1,-1292(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   218f4:	000300e7          	jalr	ra,0(t1)
   218f8:	00040513          	addi	a0,s0,0
   218fc:	894f50ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   21900:	00050413          	addi	s0,a0,0
   21904:	fb9ff06f          	jal	zero,218bc <dwarf::value::as_sec_offset() const+0x3e8>
   21908:	00050413          	addi	s0,a0,0
   2190c:	fc1ff06f          	jal	zero,218cc <dwarf::value::as_sec_offset() const+0x3f8>
   21910:	00050413          	addi	s0,a0,0
   21914:	fc9ff06f          	jal	zero,218dc <dwarf::value::as_sec_offset() const+0x408>
  cursor cur(cu->data(), offset);
   21918:	01093703          	ld	a4,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2191c:	06913423          	sd	s1,104(sp)
      : _M_pi(__r._M_pi)
   21920:	06013823          	sd	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   21924:	0084b783          	ld	a5,8(s1)
   21928:	00e787b3          	add	a5,a5,a4
   2192c:	06f13c23          	sd	a5,120(sp)
  switch (form) {
   21930:	00892783          	lw	a5,8(s2)
   21934:	00700713          	addi	a4,zero,7
   21938:	dae786e3          	beq	a5,a4,216e4 <dwarf::value::as_sec_offset() const+0x210>
   2193c:	01700713          	addi	a4,zero,23
   21940:	cce792e3          	bne	a5,a4,21604 <dwarf::value::as_sec_offset() const+0x130>
    return cur.offset();
   21944:	06810513          	addi	a0,sp,104
   21948:	f88fc0ef          	jal	ra,1e0d0 <dwarf::cursor::offset()>
   2194c:	e21ff06f          	jal	zero,2176c <dwarf::value::as_sec_offset() const+0x298>

0000000000021950 <dwarf::value::resolve_indirect(dwarf::DW_AT)>:

void value::resolve_indirect(DW_AT name) {
  if (form != DW_FORM::indirect)
   21950:	00852703          	lw	a4,8(a0)
   21954:	01600793          	addi	a5,zero,22
   21958:	00f70463          	beq	a4,a5,21960 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x10>
   2195c:	00008067          	jalr	zero,0(ra)
void value::resolve_indirect(DW_AT name) {
   21960:	fa010113          	addi	sp,sp,-96
   21964:	04113c23          	sd	ra,88(sp)
   21968:	04813823          	sd	s0,80(sp)
   2196c:	04913423          	sd	s1,72(sp)
   21970:	05213023          	sd	s2,64(sp)
   21974:	03313c23          	sd	s3,56(sp)
   21978:	03413823          	sd	s4,48(sp)
   2197c:	00050413          	addi	s0,a0,0
   21980:	00058913          	addi	s2,a1,0
    return;

  cursor c(cu->data(), offset);
   21984:	00053503          	ld	a0,0(a0)
   21988:	999f60ef          	jal	ra,18320 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2198c:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   21990:	00853483          	ld	s1,8(a0)
	if (_M_pi != nullptr)
   21994:	26048663          	beq	s1,zero,21c00 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x2b0>
    if (__is_single_threaded())
   21998:	00022797          	auipc	a5,0x22
   2199c:	b007b783          	ld	a5,-1280(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   219a0:	0007c783          	lbu	a5,0(a5)
   219a4:	0a078a63          	beq	a5,zero,21a58 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x108>
  { *__mem += __val; }
   219a8:	0304a783          	lw	a5,48(s1)
   219ac:	0017879b          	addiw	a5,a5,1
   219b0:	02f4a823          	sw	a5,48(s1)
   219b4:	01043a03          	ld	s4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   219b8:	01313423          	sd	s3,8(sp)
      : _M_pi(__r._M_pi)
   219bc:	00913823          	sd	s1,16(sp)
    if (__is_single_threaded())
   219c0:	00022797          	auipc	a5,0x22
   219c4:	ad87b783          	ld	a5,-1320(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   219c8:	0007c783          	lbu	a5,0(a5)
   219cc:	08078e63          	beq	a5,zero,21a68 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x118>
  { *__mem += __val; }
   219d0:	0304a783          	lw	a5,48(s1)
   219d4:	0017879b          	addiw	a5,a5,1
   219d8:	02f4a823          	sw	a5,48(s1)
   219dc:	0089b783          	ld	a5,8(s3)
   219e0:	014787b3          	add	a5,a5,s4
   219e4:	00f13c23          	sd	a5,24(sp)
    if (__is_single_threaded())
   219e8:	00022797          	auipc	a5,0x22
   219ec:	ab07b783          	ld	a5,-1360(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   219f0:	0007c783          	lbu	a5,0(a5)
   219f4:	08078263          	beq	a5,zero,21a78 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x128>
    _Atomic_word __result = *__mem;
   219f8:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   219fc:	fff5079b          	addiw	a5,a0,-1
   21a00:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21a04:	00100793          	addi	a5,zero,1
   21a08:	20f51863          	bne	a0,a5,21c18 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x2c8>
	_M_dispose();
   21a0c:	0004b783          	ld	a5,0(s1)
   21a10:	0107b783          	ld	a5,16(a5)
   21a14:	00048513          	addi	a0,s1,0
   21a18:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21a1c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21a20:	00022797          	auipc	a5,0x22
   21a24:	a787b783          	ld	a5,-1416(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21a28:	0007c783          	lbu	a5,0(a5)
   21a2c:	04078e63          	beq	a5,zero,21a88 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x138>
    _Atomic_word __result = *__mem;
   21a30:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   21a34:	fff7871b          	addiw	a4,a5,-1
   21a38:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21a3c:	00100713          	addi	a4,zero,1
   21a40:	1ce79c63          	bne	a5,a4,21c18 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x2c8>
	    _M_destroy();
   21a44:	0004b783          	ld	a5,0(s1)
   21a48:	0187b783          	ld	a5,24(a5)
   21a4c:	00048513          	addi	a0,s1,0
   21a50:	000780e7          	jalr	ra,0(a5)
   21a54:	1c40006f          	jal	zero,21c18 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x2c8>
      __atomic_add(__mem, __val);
   21a58:	00100593          	addi	a1,zero,1
   21a5c:	03048513          	addi	a0,s1,48
   21a60:	b51f40ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   21a64:	f51ff06f          	jal	zero,219b4 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x64>
   21a68:	00100593          	addi	a1,zero,1
   21a6c:	03048513          	addi	a0,s1,48
   21a70:	b41f40ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   21a74:	f69ff06f          	jal	zero,219dc <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x8c>
      return __exchange_and_add(__mem, __val);
   21a78:	fff00593          	addi	a1,zero,-1
   21a7c:	03048513          	addi	a0,s1,48
   21a80:	b71f40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21a84:	f81ff06f          	jal	zero,21a04 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xb4>
   21a88:	fff00593          	addi	a1,zero,-1
   21a8c:	03448513          	addi	a0,s1,52
   21a90:	b61f40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21a94:	00050793          	addi	a5,a0,0
   21a98:	fa5ff06f          	jal	zero,21a3c <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xec>
    return 0;
   21a9c:	00000613          	addi	a2,zero,0
  DW_FORM form;
  do {
    form = (DW_FORM)c.uleb128();
   21aa0:	0006061b          	addiw	a2,a2,0
  } while (form == DW_FORM::indirect);
   21aa4:	04961c63          	bne	a2,s1,21afc <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1ac>
    while (pos < sec->end) {
   21aa8:	01813783          	ld	a5,24(sp)
      { return _M_ptr; }
   21aac:	00813583          	ld	a1,8(sp)
   21ab0:	0105b703          	ld	a4,16(a1)
   21ab4:	02e7fe63          	bgeu	a5,a4,21af0 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1a0>
    std::uint64_t result = 0;
   21ab8:	00000613          	addi	a2,zero,0
    int shift = 0;
   21abc:	00098813          	addi	a6,s3,0
      uint8_t byte = *(uint8_t *)(pos++);
   21ac0:	00178793          	addi	a5,a5,1
   21ac4:	00f13c23          	sd	a5,24(sp)
   21ac8:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   21acc:	07f77693          	andi	a3,a4,127
   21ad0:	010696b3          	sll	a3,a3,a6
   21ad4:	00d66633          	or	a2,a2,a3
      if ((byte & 0x80) == 0)
   21ad8:	0187171b          	slliw	a4,a4,0x18
   21adc:	4187571b          	sraiw	a4,a4,0x18
   21ae0:	fc0750e3          	bge	a4,zero,21aa0 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x150>
      shift += 7;
   21ae4:	0078081b          	addiw	a6,a6,7
    while (pos < sec->end) {
   21ae8:	0105b703          	ld	a4,16(a1)
   21aec:	fce7eae3          	bltu	a5,a4,21ac0 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x170>
    underflow();
   21af0:	000a0513          	addi	a0,s4,0
   21af4:	e51fb0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    return 0;
   21af8:	fa5ff06f          	jal	zero,21a9c <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x14c>
  typ = attribute_spec(name, form).type;
   21afc:	00090593          	addi	a1,s2,0
   21b00:	02010513          	addi	a0,sp,32
   21b04:	049020ef          	jal	ra,2434c <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)>
   21b08:	02812783          	lw	a5,40(sp)
   21b0c:	00f42623          	sw	a5,12(s0)
  section_offset get_section_offset() const { return pos - sec->begin; }
   21b10:	00813783          	ld	a5,8(sp)
   21b14:	0087b703          	ld	a4,8(a5)
   21b18:	01813783          	ld	a5,24(sp)
   21b1c:	40e787b3          	sub	a5,a5,a4
  offset = c.get_section_offset();
   21b20:	00f43823          	sd	a5,16(s0)
	if (_M_pi != nullptr)
   21b24:	01013403          	ld	s0,16(sp)
   21b28:	02040463          	beq	s0,zero,21b50 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x200>
    if (__is_single_threaded())
   21b2c:	00022797          	auipc	a5,0x22
   21b30:	96c7b783          	ld	a5,-1684(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21b34:	0007c783          	lbu	a5,0(a5)
   21b38:	02078c63          	beq	a5,zero,21b70 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x220>
    _Atomic_word __result = *__mem;
   21b3c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   21b40:	fff5079b          	addiw	a5,a0,-1
   21b44:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21b48:	00100793          	addi	a5,zero,1
   21b4c:	02f50a63          	beq	a0,a5,21b80 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x230>
}
   21b50:	05813083          	ld	ra,88(sp)
   21b54:	05013403          	ld	s0,80(sp)
   21b58:	04813483          	ld	s1,72(sp)
   21b5c:	04013903          	ld	s2,64(sp)
   21b60:	03813983          	ld	s3,56(sp)
   21b64:	03013a03          	ld	s4,48(sp)
   21b68:	06010113          	addi	sp,sp,96
   21b6c:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   21b70:	fff00593          	addi	a1,zero,-1
   21b74:	03040513          	addi	a0,s0,48
   21b78:	a79f40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21b7c:	fcdff06f          	jal	zero,21b48 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1f8>
	_M_dispose();
   21b80:	00043783          	ld	a5,0(s0)
   21b84:	0107b783          	ld	a5,16(a5)
   21b88:	00040513          	addi	a0,s0,0
   21b8c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21b90:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21b94:	00022797          	auipc	a5,0x22
   21b98:	9047b783          	ld	a5,-1788(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21b9c:	0007c783          	lbu	a5,0(a5)
   21ba0:	02078663          	beq	a5,zero,21bcc <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x27c>
    _Atomic_word __result = *__mem;
   21ba4:	03442783          	lw	a5,52(s0)
    *__mem += __val;
   21ba8:	fff7871b          	addiw	a4,a5,-1
   21bac:	02e42a23          	sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21bb0:	00100713          	addi	a4,zero,1
   21bb4:	f8e79ee3          	bne	a5,a4,21b50 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x200>
	    _M_destroy();
   21bb8:	00043783          	ld	a5,0(s0)
   21bbc:	0187b783          	ld	a5,24(a5)
   21bc0:	00040513          	addi	a0,s0,0
   21bc4:	000780e7          	jalr	ra,0(a5)
   21bc8:	f89ff06f          	jal	zero,21b50 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x200>
      return __exchange_and_add(__mem, __val);
   21bcc:	fff00593          	addi	a1,zero,-1
   21bd0:	03440513          	addi	a0,s0,52
   21bd4:	a1df40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21bd8:	00050793          	addi	a5,a0,0
   21bdc:	fd5ff06f          	jal	zero,21bb0 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x260>
	if (_M_pi != nullptr)
   21be0:	00050413          	addi	s0,a0,0
   21be4:	01013503          	ld	a0,16(sp)
   21be8:	00050863          	beq	a0,zero,21bf8 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x2a8>
	  _M_pi->_M_release();
   21bec:	00021317          	auipc	t1,0x21
   21bf0:	7f433303          	ld	t1,2036(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   21bf4:	000300e7          	jalr	ra,0(t1)
   21bf8:	00040513          	addi	a0,s0,0
   21bfc:	d95f40ef          	jal	ra,16990 <_Unwind_Resume@plt>
  cursor c(cu->data(), offset);
   21c00:	01043703          	ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   21c04:	01313423          	sd	s3,8(sp)
      : _M_pi(__r._M_pi)
   21c08:	00013823          	sd	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   21c0c:	0089b783          	ld	a5,8(s3)
   21c10:	00e787b3          	add	a5,a5,a4
   21c14:	00f13c23          	sd	a5,24(sp)
    underflow();
   21c18:	00810a13          	addi	s4,sp,8
    int shift = 0;
   21c1c:	00000993          	addi	s3,zero,0
  } while (form == DW_FORM::indirect);
   21c20:	01600493          	addi	s1,zero,22
   21c24:	e85ff06f          	jal	zero,21aa8 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x158>

0000000000021c28 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)>:
    : cu(cu), form(form), typ(typ), offset(offset) {
   21c28:	00b53023          	sd	a1,0(a0)
   21c2c:	00d52423          	sw	a3,8(a0)
   21c30:	00e52623          	sw	a4,12(a0)
   21c34:	00f53823          	sd	a5,16(a0)
  if (form == DW_FORM::indirect)
   21c38:	01600793          	addi	a5,zero,22
   21c3c:	00f68463          	beq	a3,a5,21c44 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)+0x1c>
   21c40:	00008067          	jalr	zero,0(ra)
value::value(const unit *cu, DW_AT name, DW_FORM form, type typ,
   21c44:	ff010113          	addi	sp,sp,-16
   21c48:	00113423          	sd	ra,8(sp)
    resolve_indirect(name);
   21c4c:	00060593          	addi	a1,a2,0
   21c50:	d01ff0ef          	jal	ra,21950 <dwarf::value::resolve_indirect(dwarf::DW_AT)>
}
   21c54:	00813083          	ld	ra,8(sp)
   21c58:	01010113          	addi	sp,sp,16
   21c5c:	00008067          	jalr	zero,0(ra)

0000000000021c60 <dwarf::value::as_rangelist() const>:
rangelist value::as_rangelist() const {
   21c60:	f3010113          	addi	sp,sp,-208
   21c64:	0c113423          	sd	ra,200(sp)
   21c68:	0c813023          	sd	s0,192(sp)
   21c6c:	0a913c23          	sd	s1,184(sp)
   21c70:	0b213823          	sd	s2,176(sp)
   21c74:	0b313423          	sd	s3,168(sp)
   21c78:	0b413023          	sd	s4,160(sp)
   21c7c:	09513c23          	sd	s5,152(sp)
   21c80:	09613823          	sd	s6,144(sp)
   21c84:	09713423          	sd	s7,136(sp)
   21c88:	09813023          	sd	s8,128(sp)
   21c8c:	00050a13          	addi	s4,a0,0
   21c90:	00058913          	addi	s2,a1,0
  section_offset off = as_sec_offset();
   21c94:	00058513          	addi	a0,a1,0
   21c98:	83dff0ef          	jal	ra,214d4 <dwarf::value::as_sec_offset() const>
   21c9c:	00050a93          	addi	s5,a0,0
  die cudie = cu->root();
   21ca0:	00093503          	ld	a0,0(s2)
   21ca4:	9f8f90ef          	jal	ra,1ae9c <dwarf::unit::root() const>
   21ca8:	00050413          	addi	s0,a0,0
  die(const die &o) = default;
   21cac:	00052783          	lw	a5,0(a0)
   21cb0:	00f12823          	sw	a5,16(sp)
   21cb4:	00853783          	ld	a5,8(a0)
   21cb8:	00f13c23          	sd	a5,24(sp)
   21cbc:	01053783          	ld	a5,16(a0)
   21cc0:	02f13023          	sd	a5,32(sp)
   21cc4:	01853783          	ld	a5,24(a0)
   21cc8:	02f13423          	sd	a5,40(sp)
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   21ccc:	03010793          	addi	a5,sp,48
   21cd0:	06f13023          	sd	a5,96(sp)
   21cd4:	06f13423          	sd	a5,104(sp)
   21cd8:	06010793          	addi	a5,sp,96
   21cdc:	06f13823          	sd	a5,112(sp)
  size_type size() const { return end - base; }
   21ce0:	05853983          	ld	s3,88(a0)
   21ce4:	05053783          	ld	a5,80(a0)
   21ce8:	40f989b3          	sub	s3,s3,a5
   21cec:	4039d493          	srai	s1,s3,0x3
    if (n <= (size_type)(cap - base))
   21cf0:	03000793          	addi	a5,zero,48
   21cf4:	0737f663          	bgeu	a5,s3,21d60 <dwarf::value::as_rangelist() const+0x100>
    size_type target = cap - base;
   21cf8:	00600513          	addi	a0,zero,6
      target <<= 1;
   21cfc:	00151513          	slli	a0,a0,0x1
    while (target < n)
   21d00:	fe956ee3          	bltu	a0,s1,21cfc <dwarf::value::as_rangelist() const+0x9c>
    char *newbuf = new char[sizeof(T[target])];
   21d04:	00351b13          	slli	s6,a0,0x3
   21d08:	000b0513          	addi	a0,s6,0
   21d0c:	885f40ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   21d10:	00050c13          	addi	s8,a0,0
    T *src = base, *dest = (T *)newbuf;
   21d14:	06013503          	ld	a0,96(sp)
    for (; src < end; src++, dest++) {
   21d18:	06813703          	ld	a4,104(sp)
   21d1c:	08e57a63          	bgeu	a0,a4,21db0 <dwarf::value::as_rangelist() const+0x150>
    T *src = base, *dest = (T *)newbuf;
   21d20:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   21d24:	00878793          	addi	a5,a5,8
   21d28:	fee7eee3          	bltu	a5,a4,21d24 <dwarf::value::as_rangelist() const+0xc4>
   21d2c:	fff70b93          	addi	s7,a4,-1
   21d30:	40ab8bb3          	sub	s7,s7,a0
   21d34:	ff8bfb93          	andi	s7,s7,-8
   21d38:	008b8b93          	addi	s7,s7,8
   21d3c:	017c0bb3          	add	s7,s8,s7
    if ((char *)base != buf)
   21d40:	03010793          	addi	a5,sp,48
   21d44:	00f50663          	beq	a0,a5,21d50 <dwarf::value::as_rangelist() const+0xf0>
      delete[] (char *)base;
   21d48:	00050463          	beq	a0,zero,21d50 <dwarf::value::as_rangelist() const+0xf0>
   21d4c:	b05f40ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   21d50:	07813023          	sd	s8,96(sp)
    end = dest;
   21d54:	07713423          	sd	s7,104(sp)
    cap = base + target;
   21d58:	016c0c33          	add	s8,s8,s6
   21d5c:	07813823          	sd	s8,112(sp)
    for (size_type i = 0; i < osize; i++)
   21d60:	02048663          	beq	s1,zero,21d8c <dwarf::value::as_rangelist() const+0x12c>
   21d64:	00000793          	addi	a5,zero,0
   21d68:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   21d6c:	05043703          	ld	a4,80(s0)
   21d70:	00d70733          	add	a4,a4,a3
   21d74:	00073603          	ld	a2,0(a4)
   21d78:	06013703          	ld	a4,96(sp)
   21d7c:	00d70733          	add	a4,a4,a3
   21d80:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   21d84:	00178793          	addi	a5,a5,1
   21d88:	fef490e3          	bne	s1,a5,21d68 <dwarf::value::as_rangelist() const+0x108>
    end = base + osize;
   21d8c:	06013783          	ld	a5,96(sp)
   21d90:	013787b3          	add	a5,a5,s3
   21d94:	06f13423          	sd	a5,104(sp)
   21d98:	06843783          	ld	a5,104(s0)
   21d9c:	06f13c23          	sd	a5,120(sp)
  taddr cu_low_pc = cudie.has(DW_AT::low_pc) ? at_low_pc(cudie) : 0;
   21da0:	01100593          	addi	a1,zero,17
   21da4:	01010513          	addi	a0,sp,16
   21da8:	a45fc0ef          	jal	ra,1e7ec <dwarf::die::has(dwarf::DW_AT) const>
   21dac:	00c0006f          	jal	zero,21db8 <dwarf::value::as_rangelist() const+0x158>
    T *src = base, *dest = (T *)newbuf;
   21db0:	000c0b93          	addi	s7,s8,0
   21db4:	f8dff06f          	jal	zero,21d40 <dwarf::value::as_rangelist() const+0xe0>
   21db8:	00050e63          	beq	a0,zero,21dd4 <dwarf::value::as_rangelist() const+0x174>
   21dbc:	01010513          	addi	a0,sp,16
   21dc0:	5c90a0ef          	jal	ra,2cb88 <dwarf::at_low_pc(dwarf::die const&)>
   21dc4:	00050493          	addi	s1,a0,0
  auto sec = cu->get_dwarf().get_section(section_type::ranges);
   21dc8:	00093503          	ld	a0,0(s2)
   21dcc:	d40f60ef          	jal	ra,1830c <dwarf::unit::get_dwarf() const>
   21dd0:	00c0006f          	jal	zero,21ddc <dwarf::value::as_rangelist() const+0x17c>
  taddr cu_low_pc = cudie.has(DW_AT::low_pc) ? at_low_pc(cudie) : 0;
   21dd4:	00000493          	addi	s1,zero,0
   21dd8:	ff1ff06f          	jal	zero,21dc8 <dwarf::value::as_rangelist() const+0x168>
  auto sec = cu->get_dwarf().get_section(section_type::ranges);
   21ddc:	00050593          	addi	a1,a0,0
   21de0:	00900613          	addi	a2,zero,9
   21de4:	00010513          	addi	a0,sp,0
   21de8:	d50f60ef          	jal	ra,18338 <dwarf::dwarf::get_section(dwarf::section_type) const>
  auto cusec = cu->data();
   21dec:	00093503          	ld	a0,0(s2)
   21df0:	d30f60ef          	jal	ra,18320 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   21df4:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   21df8:	00853403          	ld	s0,8(a0)
	if (_M_pi != nullptr)
   21dfc:	02040063          	beq	s0,zero,21e1c <dwarf::value::as_rangelist() const+0x1bc>
    if (__is_single_threaded())
   21e00:	00021797          	auipc	a5,0x21
   21e04:	6987b783          	ld	a5,1688(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21e08:	0007c783          	lbu	a5,0(a5)
   21e0c:	02078663          	beq	a5,zero,21e38 <dwarf::value::as_rangelist() const+0x1d8>
  { *__mem += __val; }
   21e10:	03042783          	lw	a5,48(s0)
   21e14:	0017879b          	addiw	a5,a5,1
   21e18:	02f42823          	sw	a5,48(s0)
  return rangelist(sec, off, cusec->addr_size, cu_low_pc);
   21e1c:	00048713          	addi	a4,s1,0
   21e20:	02092683          	lw	a3,32(s2)
   21e24:	000a8613          	addi	a2,s5,0
   21e28:	00010593          	addi	a1,sp,0
   21e2c:	000a0513          	addi	a0,s4,0
   21e30:	095050ef          	jal	ra,276c4 <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)>
   21e34:	0140006f          	jal	zero,21e48 <dwarf::value::as_rangelist() const+0x1e8>
      __atomic_add(__mem, __val);
   21e38:	00100593          	addi	a1,zero,1
   21e3c:	03040513          	addi	a0,s0,48
   21e40:	f70f40ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   21e44:	fd9ff06f          	jal	zero,21e1c <dwarf::value::as_rangelist() const+0x1bc>
	if (_M_pi != nullptr)
   21e48:	02040463          	beq	s0,zero,21e70 <dwarf::value::as_rangelist() const+0x210>
    if (__is_single_threaded())
   21e4c:	00021797          	auipc	a5,0x21
   21e50:	64c7b783          	ld	a5,1612(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21e54:	0007c783          	lbu	a5,0(a5)
   21e58:	0a078263          	beq	a5,zero,21efc <dwarf::value::as_rangelist() const+0x29c>
    _Atomic_word __result = *__mem;
   21e5c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   21e60:	fff5079b          	addiw	a5,a0,-1
   21e64:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21e68:	00100793          	addi	a5,zero,1
   21e6c:	0af50063          	beq	a0,a5,21f0c <dwarf::value::as_rangelist() const+0x2ac>
	if (_M_pi != nullptr)
   21e70:	00813403          	ld	s0,8(sp)
   21e74:	02040463          	beq	s0,zero,21e9c <dwarf::value::as_rangelist() const+0x23c>
    if (__is_single_threaded())
   21e78:	00021797          	auipc	a5,0x21
   21e7c:	6207b783          	ld	a5,1568(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21e80:	0007c783          	lbu	a5,0(a5)
   21e84:	0e078263          	beq	a5,zero,21f68 <dwarf::value::as_rangelist() const+0x308>
    _Atomic_word __result = *__mem;
   21e88:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   21e8c:	fff5079b          	addiw	a5,a0,-1
   21e90:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21e94:	00100793          	addi	a5,zero,1
   21e98:	0ef50063          	beq	a0,a5,21f78 <dwarf::value::as_rangelist() const+0x318>
    for (T *p = base; p < end; ++p)
   21e9c:	06013503          	ld	a0,96(sp)
   21ea0:	06813783          	ld	a5,104(sp)
   21ea4:	00f57a63          	bgeu	a0,a5,21eb8 <dwarf::value::as_rangelist() const+0x258>
   21ea8:	00050793          	addi	a5,a0,0
   21eac:	00878793          	addi	a5,a5,8
   21eb0:	06813703          	ld	a4,104(sp)
   21eb4:	fee7ece3          	bltu	a5,a4,21eac <dwarf::value::as_rangelist() const+0x24c>
    if ((char *)base != buf)
   21eb8:	03010793          	addi	a5,sp,48
   21ebc:	00f50663          	beq	a0,a5,21ec8 <dwarf::value::as_rangelist() const+0x268>
      delete[] (char *)base;
   21ec0:	00050463          	beq	a0,zero,21ec8 <dwarf::value::as_rangelist() const+0x268>
   21ec4:	98df40ef          	jal	ra,16850 <operator delete[](void*)@plt>
}
   21ec8:	000a0513          	addi	a0,s4,0
   21ecc:	0c813083          	ld	ra,200(sp)
   21ed0:	0c013403          	ld	s0,192(sp)
   21ed4:	0b813483          	ld	s1,184(sp)
   21ed8:	0b013903          	ld	s2,176(sp)
   21edc:	0a813983          	ld	s3,168(sp)
   21ee0:	0a013a03          	ld	s4,160(sp)
   21ee4:	09813a83          	ld	s5,152(sp)
   21ee8:	09013b03          	ld	s6,144(sp)
   21eec:	08813b83          	ld	s7,136(sp)
   21ef0:	08013c03          	ld	s8,128(sp)
   21ef4:	0d010113          	addi	sp,sp,208
   21ef8:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   21efc:	fff00593          	addi	a1,zero,-1
   21f00:	03040513          	addi	a0,s0,48
   21f04:	eecf40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21f08:	f61ff06f          	jal	zero,21e68 <dwarf::value::as_rangelist() const+0x208>
	_M_dispose();
   21f0c:	00043783          	ld	a5,0(s0)
   21f10:	0107b783          	ld	a5,16(a5)
   21f14:	00040513          	addi	a0,s0,0
   21f18:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21f1c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21f20:	00021797          	auipc	a5,0x21
   21f24:	5787b783          	ld	a5,1400(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21f28:	0007c783          	lbu	a5,0(a5)
   21f2c:	02078663          	beq	a5,zero,21f58 <dwarf::value::as_rangelist() const+0x2f8>
    _Atomic_word __result = *__mem;
   21f30:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   21f34:	fff5079b          	addiw	a5,a0,-1
   21f38:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21f3c:	00100793          	addi	a5,zero,1
   21f40:	f2f518e3          	bne	a0,a5,21e70 <dwarf::value::as_rangelist() const+0x210>
	    _M_destroy();
   21f44:	00043783          	ld	a5,0(s0)
   21f48:	0187b783          	ld	a5,24(a5)
   21f4c:	00040513          	addi	a0,s0,0
   21f50:	000780e7          	jalr	ra,0(a5)
   21f54:	f1dff06f          	jal	zero,21e70 <dwarf::value::as_rangelist() const+0x210>
      return __exchange_and_add(__mem, __val);
   21f58:	fff00593          	addi	a1,zero,-1
   21f5c:	03440513          	addi	a0,s0,52
   21f60:	e90f40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21f64:	fd9ff06f          	jal	zero,21f3c <dwarf::value::as_rangelist() const+0x2dc>
   21f68:	fff00593          	addi	a1,zero,-1
   21f6c:	03040513          	addi	a0,s0,48
   21f70:	e80f40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21f74:	f21ff06f          	jal	zero,21e94 <dwarf::value::as_rangelist() const+0x234>
	_M_dispose();
   21f78:	00043783          	ld	a5,0(s0)
   21f7c:	0107b783          	ld	a5,16(a5)
   21f80:	00040513          	addi	a0,s0,0
   21f84:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21f88:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21f8c:	00021797          	auipc	a5,0x21
   21f90:	50c7b783          	ld	a5,1292(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   21f94:	0007c783          	lbu	a5,0(a5)
   21f98:	02078663          	beq	a5,zero,21fc4 <dwarf::value::as_rangelist() const+0x364>
    _Atomic_word __result = *__mem;
   21f9c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   21fa0:	fff5079b          	addiw	a5,a0,-1
   21fa4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21fa8:	00100793          	addi	a5,zero,1
   21fac:	eef518e3          	bne	a0,a5,21e9c <dwarf::value::as_rangelist() const+0x23c>
	    _M_destroy();
   21fb0:	00043783          	ld	a5,0(s0)
   21fb4:	0187b783          	ld	a5,24(a5)
   21fb8:	00040513          	addi	a0,s0,0
   21fbc:	000780e7          	jalr	ra,0(a5)
   21fc0:	eddff06f          	jal	zero,21e9c <dwarf::value::as_rangelist() const+0x23c>
      return __exchange_and_add(__mem, __val);
   21fc4:	fff00593          	addi	a1,zero,-1
   21fc8:	03440513          	addi	a0,s0,52
   21fcc:	e24f40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21fd0:	fd9ff06f          	jal	zero,21fa8 <dwarf::value::as_rangelist() const+0x348>
	if (_M_pi != nullptr)
   21fd4:	00050493          	addi	s1,a0,0
   21fd8:	00040a63          	beq	s0,zero,21fec <dwarf::value::as_rangelist() const+0x38c>
	  _M_pi->_M_release();
   21fdc:	00040513          	addi	a0,s0,0
   21fe0:	00021317          	auipc	t1,0x21
   21fe4:	40033303          	ld	t1,1024(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   21fe8:	000300e7          	jalr	ra,0(t1)
   21fec:	00048413          	addi	s0,s1,0
	if (_M_pi != nullptr)
   21ff0:	00813503          	ld	a0,8(sp)
   21ff4:	00050863          	beq	a0,zero,22004 <dwarf::value::as_rangelist() const+0x3a4>
	  _M_pi->_M_release();
   21ff8:	00021317          	auipc	t1,0x21
   21ffc:	3e833303          	ld	t1,1000(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   22000:	000300e7          	jalr	ra,0(t1)
class die {
   22004:	03010513          	addi	a0,sp,48
   22008:	00021317          	auipc	t1,0x21
   2200c:	3f833303          	ld	t1,1016(t1) # 43400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b8b0>
   22010:	000300e7          	jalr	ra,0(t1)
   22014:	00040513          	addi	a0,s0,0
   22018:	979f40ef          	jal	ra,16990 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   2201c:	00050413          	addi	s0,a0,0
   22020:	fd1ff06f          	jal	zero,21ff0 <dwarf::value::as_rangelist() const+0x390>
   22024:	00050413          	addi	s0,a0,0
   22028:	fddff06f          	jal	zero,22004 <dwarf::value::as_rangelist() const+0x3a4>

000000000002202c <dwarf::value::as_string[abi:cxx11]() const>:
string value::as_string() const {
   2202c:	fe010113          	addi	sp,sp,-32
   22030:	00113c23          	sd	ra,24(sp)
   22034:	00813823          	sd	s0,16(sp)
   22038:	00050413          	addi	s0,a0,0
   2203c:	00058513          	addi	a0,a1,0
  const char *s = as_cstr(&size);
   22040:	00810593          	addi	a1,sp,8
   22044:	efdfe0ef          	jal	ra,20f40 <dwarf::value::as_cstr(unsigned long*) const>
   22048:	00050593          	addi	a1,a0,0
  return string(s, size);
   2204c:	00813603          	ld	a2,8(sp)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   22050:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   22054:	00f43023          	sd	a5,0(s0)
	if (__s == 0 && __n > 0)
   22058:	02050863          	beq	a0,zero,22088 <dwarf::value::as_string[abi:cxx11]() const+0x5c>
	_M_construct(__s, __s + __n, std::forward_iterator_tag());
   2205c:	00000693          	addi	a3,zero,0
   22060:	00c58633          	add	a2,a1,a2
   22064:	00040513          	addi	a0,s0,0
   22068:	00021317          	auipc	t1,0x21
   2206c:	2b833303          	ld	t1,696(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   22070:	000300e7          	jalr	ra,0(t1)
}
   22074:	00040513          	addi	a0,s0,0
   22078:	01813083          	ld	ra,24(sp)
   2207c:	01013403          	ld	s0,16(sp)
   22080:	02010113          	addi	sp,sp,32
   22084:	00008067          	jalr	zero,0(ra)
	if (__s == 0 && __n > 0)
   22088:	fc060ae3          	beq	a2,zero,2205c <dwarf::value::as_string[abi:cxx11]() const+0x30>
	  std::__throw_logic_error(__N("basic_string: "
   2208c:	00015517          	auipc	a0,0x15
   22090:	3dc50513          	addi	a0,a0,988 # 37468 <__libc_csu_fini+0x8>
   22094:	eacf40ef          	jal	ra,16740 <std::__throw_logic_error(char const*)@plt>

0000000000022098 <dwarf::value::as_reference() const>:
die value::as_reference() const {
   22098:	e7010113          	addi	sp,sp,-400
   2209c:	18113423          	sd	ra,392(sp)
   220a0:	18813023          	sd	s0,384(sp)
   220a4:	16913c23          	sd	s1,376(sp)
   220a8:	17213823          	sd	s2,368(sp)
   220ac:	17313423          	sd	s3,360(sp)
   220b0:	17413023          	sd	s4,352(sp)
   220b4:	15513c23          	sd	s5,344(sp)
   220b8:	15613823          	sd	s6,336(sp)
   220bc:	15713423          	sd	s7,328(sp)
   220c0:	00050413          	addi	s0,a0,0
   220c4:	00058913          	addi	s2,a1,0
  cursor cur(cu->data(), offset);
   220c8:	0005b503          	ld	a0,0(a1)
   220cc:	a54f60ef          	jal	ra,18320 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   220d0:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   220d4:	00853483          	ld	s1,8(a0)
	if (_M_pi != nullptr)
   220d8:	380488e3          	beq	s1,zero,22c68 <dwarf::value::as_reference() const+0xbd0>
    if (__is_single_threaded())
   220dc:	00021797          	auipc	a5,0x21
   220e0:	3bc7b783          	ld	a5,956(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   220e4:	0007c783          	lbu	a5,0(a5)
   220e8:	0a078a63          	beq	a5,zero,2219c <dwarf::value::as_reference() const+0x104>
  { *__mem += __val; }
   220ec:	0304a783          	lw	a5,48(s1)
   220f0:	0017879b          	addiw	a5,a5,1
   220f4:	02f4a823          	sw	a5,48(s1)
   220f8:	01093a03          	ld	s4,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   220fc:	13313423          	sd	s3,296(sp)
      : _M_pi(__r._M_pi)
   22100:	12913823          	sd	s1,304(sp)
    if (__is_single_threaded())
   22104:	00021797          	auipc	a5,0x21
   22108:	3947b783          	ld	a5,916(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2210c:	0007c783          	lbu	a5,0(a5)
   22110:	08078e63          	beq	a5,zero,221ac <dwarf::value::as_reference() const+0x114>
  { *__mem += __val; }
   22114:	0304a783          	lw	a5,48(s1)
   22118:	0017879b          	addiw	a5,a5,1
   2211c:	02f4a823          	sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   22120:	0089b783          	ld	a5,8(s3)
   22124:	014787b3          	add	a5,a5,s4
   22128:	12f13c23          	sd	a5,312(sp)
    if (__is_single_threaded())
   2212c:	00021797          	auipc	a5,0x21
   22130:	36c7b783          	ld	a5,876(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   22134:	0007c783          	lbu	a5,0(a5)
   22138:	08078263          	beq	a5,zero,221bc <dwarf::value::as_reference() const+0x124>
    _Atomic_word __result = *__mem;
   2213c:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   22140:	fff5079b          	addiw	a5,a0,-1
   22144:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   22148:	00100793          	addi	a5,zero,1
   2214c:	32f51ae3          	bne	a0,a5,22c80 <dwarf::value::as_reference() const+0xbe8>
	_M_dispose();
   22150:	0004b783          	ld	a5,0(s1)
   22154:	0107b783          	ld	a5,16(a5)
   22158:	00048513          	addi	a0,s1,0
   2215c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   22160:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   22164:	00021797          	auipc	a5,0x21
   22168:	3347b783          	ld	a5,820(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2216c:	0007c783          	lbu	a5,0(a5)
   22170:	04078e63          	beq	a5,zero,221cc <dwarf::value::as_reference() const+0x134>
    _Atomic_word __result = *__mem;
   22174:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   22178:	fff5079b          	addiw	a5,a0,-1
   2217c:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   22180:	00100793          	addi	a5,zero,1
   22184:	2ef51ee3          	bne	a0,a5,22c80 <dwarf::value::as_reference() const+0xbe8>
	    _M_destroy();
   22188:	0004b783          	ld	a5,0(s1)
   2218c:	0187b783          	ld	a5,24(a5)
   22190:	00048513          	addi	a0,s1,0
   22194:	000780e7          	jalr	ra,0(a5)
   22198:	2e90006f          	jal	zero,22c80 <dwarf::value::as_reference() const+0xbe8>
      __atomic_add(__mem, __val);
   2219c:	00100593          	addi	a1,zero,1
   221a0:	03048513          	addi	a0,s1,48
   221a4:	c0cf40ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   221a8:	f51ff06f          	jal	zero,220f8 <dwarf::value::as_reference() const+0x60>
   221ac:	00100593          	addi	a1,zero,1
   221b0:	03048513          	addi	a0,s1,48
   221b4:	bfcf40ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   221b8:	f69ff06f          	jal	zero,22120 <dwarf::value::as_reference() const+0x88>
      return __exchange_and_add(__mem, __val);
   221bc:	fff00593          	addi	a1,zero,-1
   221c0:	03048513          	addi	a0,s1,48
   221c4:	c2cf40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   221c8:	f81ff06f          	jal	zero,22148 <dwarf::value::as_reference() const+0xb0>
   221cc:	fff00593          	addi	a1,zero,-1
   221d0:	03448513          	addi	a0,s1,52
   221d4:	c1cf40ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   221d8:	fa9ff06f          	jal	zero,22180 <dwarf::value::as_reference() const+0xe8>
    while (pos < sec->end) {
   221dc:	13813783          	ld	a5,312(sp)
      { return _M_ptr; }
   221e0:	12813583          	ld	a1,296(sp)
   221e4:	0105b703          	ld	a4,16(a1)
    std::uint64_t result = 0;
   221e8:	00000493          	addi	s1,zero,0
    int shift = 0;
   221ec:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   221f0:	02e7fa63          	bgeu	a5,a4,22224 <dwarf::value::as_reference() const+0x18c>
      uint8_t byte = *(uint8_t *)(pos++);
   221f4:	00178793          	addi	a5,a5,1
   221f8:	12f13c23          	sd	a5,312(sp)
   221fc:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   22200:	07f77693          	andi	a3,a4,127
   22204:	00c696b3          	sll	a3,a3,a2
   22208:	00d4e4b3          	or	s1,s1,a3
      if ((byte & 0x80) == 0)
   2220c:	0187171b          	slliw	a4,a4,0x18
   22210:	4187571b          	sraiw	a4,a4,0x18
   22214:	240752e3          	bge	a4,zero,22c58 <dwarf::value::as_reference() const+0xbc0>
      shift += 7;
   22218:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   2221c:	0105b703          	ld	a4,16(a1)
   22220:	fce7eae3          	bltu	a5,a4,221f4 <dwarf::value::as_reference() const+0x15c>
    underflow();
   22224:	12810513          	addi	a0,sp,296
   22228:	f1cfb0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
   2222c:	6280006f          	jal	zero,22854 <dwarf::value::as_reference() const+0x7bc>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   22230:	12813783          	ld	a5,296(sp)
   22234:	0107b703          	ld	a4,16(a5)
   22238:	13813783          	ld	a5,312(sp)
   2223c:	00e7e663          	bltu	a5,a4,22248 <dwarf::value::as_reference() const+0x1b0>
      underflow();
   22240:	12810513          	addi	a0,sp,296
   22244:	f00fb0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   22248:	13813783          	ld	a5,312(sp)
    if (sec->ord == byte_order::lsb) {
   2224c:	12813703          	ld	a4,296(sp)
   22250:	01c72703          	lw	a4,28(a4)
   22254:	1e070ce3          	beq	a4,zero,22c4c <dwarf::value::as_reference() const+0xbb4>
        val = (val << 8) | (uint64_t)p[i];
   22258:	0007c483          	lbu	s1,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   2225c:	1f50006f          	jal	zero,22c50 <dwarf::value::as_reference() const+0xbb8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   22260:	12813783          	ld	a5,296(sp)
   22264:	0107b703          	ld	a4,16(a5)
   22268:	13813783          	ld	a5,312(sp)
   2226c:	40f70633          	sub	a2,a4,a5
   22270:	00100693          	addi	a3,zero,1
   22274:	00c6f463          	bgeu	a3,a2,2227c <dwarf::value::as_reference() const+0x1e4>
   22278:	00e7e663          	bltu	a5,a4,22284 <dwarf::value::as_reference() const+0x1ec>
      underflow();
   2227c:	12810513          	addi	a0,sp,296
   22280:	ec4fb0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   22284:	13813783          	ld	a5,312(sp)
    if (sec->ord == byte_order::lsb) {
   22288:	12813703          	ld	a4,296(sp)
   2228c:	01c72703          	lw	a4,28(a4)
   22290:	02071063          	bne	a4,zero,222b0 <dwarf::value::as_reference() const+0x218>
        val |= ((uint64_t)p[i]) << (i * 8);
   22294:	0017c483          	lbu	s1,1(a5)
   22298:	00849493          	slli	s1,s1,0x8
   2229c:	0007c703          	lbu	a4,0(a5)
   222a0:	00e4e4b3          	or	s1,s1,a4
    pos += sizeof(T);
   222a4:	00278793          	addi	a5,a5,2
   222a8:	12f13c23          	sd	a5,312(sp)
    break;
   222ac:	1ad0006f          	jal	zero,22c58 <dwarf::value::as_reference() const+0xbc0>
        val = (val << 8) | (uint64_t)p[i];
   222b0:	0007c483          	lbu	s1,0(a5)
   222b4:	00849493          	slli	s1,s1,0x8
   222b8:	0017c703          	lbu	a4,1(a5)
   222bc:	00e4e4b3          	or	s1,s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   222c0:	fe5ff06f          	jal	zero,222a4 <dwarf::value::as_reference() const+0x20c>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   222c4:	12813783          	ld	a5,296(sp)
   222c8:	0107b703          	ld	a4,16(a5)
   222cc:	13813783          	ld	a5,312(sp)
   222d0:	40f70633          	sub	a2,a4,a5
   222d4:	00300693          	addi	a3,zero,3
   222d8:	00c6f463          	bgeu	a3,a2,222e0 <dwarf::value::as_reference() const+0x248>
   222dc:	00e7e663          	bltu	a5,a4,222e8 <dwarf::value::as_reference() const+0x250>
      underflow();
   222e0:	12810513          	addi	a0,sp,296
   222e4:	e60fb0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   222e8:	13813603          	ld	a2,312(sp)
    if (sec->ord == byte_order::lsb) {
   222ec:	12813783          	ld	a5,296(sp)
   222f0:	01c7a783          	lw	a5,28(a5)
   222f4:	02079e63          	bne	a5,zero,22330 <dwarf::value::as_reference() const+0x298>
   222f8:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   222fc:	00000493          	addi	s1,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   22300:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   22304:	0006c703          	lbu	a4,0(a3)
   22308:	00f71733          	sll	a4,a4,a5
   2230c:	00e4e4b3          	or	s1,s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   22310:	00168693          	addi	a3,a3,1
   22314:	0087879b          	addiw	a5,a5,8
   22318:	feb796e3          	bne	a5,a1,22304 <dwarf::value::as_reference() const+0x26c>
    pos += sizeof(T);
   2231c:	00460613          	addi	a2,a2,4
   22320:	12c13c23          	sd	a2,312(sp)
   22324:	02049493          	slli	s1,s1,0x20
   22328:	0204d493          	srli	s1,s1,0x20
    break;
   2232c:	12d0006f          	jal	zero,22c58 <dwarf::value::as_reference() const+0xbc0>
   22330:	00060793          	addi	a5,a2,0
   22334:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   22338:	00000493          	addi	s1,zero,0
        val = (val << 8) | (uint64_t)p[i];
   2233c:	00849493          	slli	s1,s1,0x8
   22340:	0007c703          	lbu	a4,0(a5)
   22344:	009764b3          	or	s1,a4,s1
      for (unsigned i = 0; i < sizeof(T); i++)
   22348:	00178793          	addi	a5,a5,1
   2234c:	fef698e3          	bne	a3,a5,2233c <dwarf::value::as_reference() const+0x2a4>
   22350:	fcdff06f          	jal	zero,2231c <dwarf::value::as_reference() const+0x284>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   22354:	12813783          	ld	a5,296(sp)
   22358:	0107b703          	ld	a4,16(a5)
   2235c:	13813783          	ld	a5,312(sp)
   22360:	40f70633          	sub	a2,a4,a5
   22364:	00700693          	addi	a3,zero,7
   22368:	00c6f463          	bgeu	a3,a2,22370 <dwarf::value::as_reference() const+0x2d8>
   2236c:	00e7e663          	bltu	a5,a4,22378 <dwarf::value::as_reference() const+0x2e0>
      underflow();
   22370:	12810513          	addi	a0,sp,296
   22374:	dd0fb0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   22378:	13813603          	ld	a2,312(sp)
    if (sec->ord == byte_order::lsb) {
   2237c:	12813783          	ld	a5,296(sp)
   22380:	01c7a783          	lw	a5,28(a5)
   22384:	02079a63          	bne	a5,zero,223b8 <dwarf::value::as_reference() const+0x320>
   22388:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   2238c:	00000493          	addi	s1,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   22390:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   22394:	0006c703          	lbu	a4,0(a3)
   22398:	00f71733          	sll	a4,a4,a5
   2239c:	00e4e4b3          	or	s1,s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   223a0:	00168693          	addi	a3,a3,1
   223a4:	0087879b          	addiw	a5,a5,8
   223a8:	feb796e3          	bne	a5,a1,22394 <dwarf::value::as_reference() const+0x2fc>
    pos += sizeof(T);
   223ac:	00860613          	addi	a2,a2,8
   223b0:	12c13c23          	sd	a2,312(sp)
   223b4:	0a50006f          	jal	zero,22c58 <dwarf::value::as_reference() const+0xbc0>
   223b8:	00060793          	addi	a5,a2,0
   223bc:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   223c0:	00000493          	addi	s1,zero,0
        val = (val << 8) | (uint64_t)p[i];
   223c4:	00849493          	slli	s1,s1,0x8
   223c8:	0007c703          	lbu	a4,0(a5)
   223cc:	009764b3          	or	s1,a4,s1
      for (unsigned i = 0; i < sizeof(T); i++)
   223d0:	00178793          	addi	a5,a5,1
   223d4:	fef698e3          	bne	a3,a5,223c4 <dwarf::value::as_reference() const+0x32c>
   223d8:	fd5ff06f          	jal	zero,223ac <dwarf::value::as_reference() const+0x314>
    off = cur.offset();
   223dc:	12810513          	addi	a0,sp,296
   223e0:	cf1fb0ef          	jal	ra,1e0d0 <dwarf::cursor::offset()>
   223e4:	00050993          	addi	s3,a0,0
    for (auto &file_cu : cu->get_dwarf().compilation_units()) {
   223e8:	00093503          	ld	a0,0(s2)
   223ec:	f21f50ef          	jal	ra,1830c <dwarf::unit::get_dwarf() const>
   223f0:	dc1f50ef          	jal	ra,181b0 <dwarf::dwarf::compilation_units() const>
      : _M_current(__i) { }
   223f4:	00053483          	ld	s1,0(a0)
   223f8:	00853a83          	ld	s5,8(a0)
   223fc:	049a8063          	beq	s5,s1,2243c <dwarf::value::as_reference() const+0x3a4>
    const compilation_unit *base_cu = nullptr;
   22400:	00000913          	addi	s2,zero,0
   22404:	0100006f          	jal	zero,22414 <dwarf::value::as_reference() const+0x37c>
      if (file_cu.get_section_offset() > off)
   22408:	02a9e263          	bltu	s3,a0,2242c <dwarf::value::as_reference() const+0x394>
    for (auto &file_cu : cu->get_dwarf().compilation_units()) {
   2240c:	01848493          	addi	s1,s1,24
   22410:	009a8c63          	beq	s5,s1,22428 <dwarf::value::as_reference() const+0x390>
   22414:	00090a13          	addi	s4,s2,0
   22418:	00048913          	addi	s2,s1,0
      if (file_cu.get_section_offset() > off)
   2241c:	00048513          	addi	a0,s1,0
   22420:	ef5f50ef          	jal	ra,18314 <dwarf::unit::get_section_offset() const>
   22424:	fe5ff06f          	jal	zero,22408 <dwarf::value::as_reference() const+0x370>
   22428:	00090a13          	addi	s4,s2,0
    die d(base_cu);
   2242c:	000a0593          	addi	a1,s4,0
   22430:	04810513          	addi	a0,sp,72
   22434:	e29fb0ef          	jal	ra,1e25c <dwarf::die::die(dwarf::unit const*)>
   22438:	00c0006f          	jal	zero,22444 <dwarf::value::as_reference() const+0x3ac>
    const compilation_unit *base_cu = nullptr;
   2243c:	00000a13          	addi	s4,zero,0
   22440:	fedff06f          	jal	zero,2242c <dwarf::value::as_reference() const+0x394>
    d.read(off - base_cu->get_section_offset());
   22444:	000a0513          	addi	a0,s4,0
   22448:	ecdf50ef          	jal	ra,18314 <dwarf::unit::get_section_offset() const>
   2244c:	40a985b3          	sub	a1,s3,a0
   22450:	04810513          	addi	a0,sp,72
   22454:	e61fb0ef          	jal	ra,1e2b4 <dwarf::die::read(unsigned long)>
  die(die &&o) = default;
   22458:	04812783          	lw	a5,72(sp)
   2245c:	00f42023          	sw	a5,0(s0)
   22460:	05013783          	ld	a5,80(sp)
   22464:	00f43423          	sd	a5,8(s0)
   22468:	05813783          	ld	a5,88(sp)
   2246c:	00f43823          	sd	a5,16(s0)
   22470:	06013783          	ld	a5,96(sp)
   22474:	00f43c23          	sd	a5,24(s0)
   22478:	02040a13          	addi	s4,s0,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   2247c:	05443823          	sd	s4,80(s0)
   22480:	05443c23          	sd	s4,88(s0)
   22484:	05040793          	addi	a5,s0,80
   22488:	06f43023          	sd	a5,96(s0)
    if ((char *)o.base == o.buf) {
   2248c:	09813703          	ld	a4,152(sp)
   22490:	06810693          	addi	a3,sp,104
   22494:	06d70463          	beq	a4,a3,224fc <dwarf::value::as_reference() const+0x464>
      base = o.base;
   22498:	04e43823          	sd	a4,80(s0)
      end = o.end;
   2249c:	0a013783          	ld	a5,160(sp)
   224a0:	04f43c23          	sd	a5,88(s0)
      cap = o.cap;
   224a4:	0a813783          	ld	a5,168(sp)
   224a8:	06f43023          	sd	a5,96(s0)
      o.base = (T *)o.buf;
   224ac:	06810793          	addi	a5,sp,104
   224b0:	08f13c23          	sd	a5,152(sp)
      o.end = o.base;
   224b4:	0af13023          	sd	a5,160(sp)
      o.cap = (T *)&o.buf[sizeof(T[Min])];
   224b8:	09810793          	addi	a5,sp,152
   224bc:	0af13423          	sd	a5,168(sp)
   224c0:	0b013783          	ld	a5,176(sp)
   224c4:	06f43423          	sd	a5,104(s0)
    for (T *p = base; p < end; ++p)
   224c8:	09813503          	ld	a0,152(sp)
   224cc:	0a013783          	ld	a5,160(sp)
   224d0:	00f57a63          	bgeu	a0,a5,224e4 <dwarf::value::as_reference() const+0x44c>
   224d4:	00050793          	addi	a5,a0,0
   224d8:	00878793          	addi	a5,a5,8
   224dc:	0a013703          	ld	a4,160(sp)
   224e0:	fee7ece3          	bltu	a5,a4,224d8 <dwarf::value::as_reference() const+0x440>
    end = base;
   224e4:	0aa13023          	sd	a0,160(sp)
    if ((char *)base != buf)
   224e8:	06810793          	addi	a5,sp,104
   224ec:	40f50e63          	beq	a0,a5,22908 <dwarf::value::as_reference() const+0x870>
      delete[] (char *)base;
   224f0:	40050c63          	beq	a0,zero,22908 <dwarf::value::as_reference() const+0x870>
   224f4:	b5cf40ef          	jal	ra,16850 <operator delete[](void*)@plt>
   224f8:	4100006f          	jal	zero,22908 <dwarf::value::as_reference() const+0x870>
  size_type size() const { return end - base; }
   224fc:	0a013983          	ld	s3,160(sp)
   22500:	40d989b3          	sub	s3,s3,a3
   22504:	4039d913          	srai	s2,s3,0x3
    if (n <= (size_type)(cap - base))
   22508:	414787b3          	sub	a5,a5,s4
   2250c:	0737fa63          	bgeu	a5,s3,22580 <dwarf::value::as_reference() const+0x4e8>
   22510:	4037d793          	srai	a5,a5,0x3
   22514:	00079463          	bne	a5,zero,2251c <dwarf::value::as_reference() const+0x484>
   22518:	00100793          	addi	a5,zero,1
    while (target < n)
   2251c:	0127f663          	bgeu	a5,s2,22528 <dwarf::value::as_reference() const+0x490>
      target <<= 1;
   22520:	00179793          	slli	a5,a5,0x1
    while (target < n)
   22524:	ff27eee3          	bltu	a5,s2,22520 <dwarf::value::as_reference() const+0x488>
    char *newbuf = new char[sizeof(T[target])];
   22528:	00379493          	slli	s1,a5,0x3
   2252c:	00048513          	addi	a0,s1,0
   22530:	860f40ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   22534:	00050b13          	addi	s6,a0,0
    T *src = base, *dest = (T *)newbuf;
   22538:	05043503          	ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   2253c:	05843703          	ld	a4,88(s0)
   22540:	08e57e63          	bgeu	a0,a4,225dc <dwarf::value::as_reference() const+0x544>
    T *src = base, *dest = (T *)newbuf;
   22544:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   22548:	00878793          	addi	a5,a5,8
   2254c:	fee7eee3          	bltu	a5,a4,22548 <dwarf::value::as_reference() const+0x4b0>
   22550:	fff70a93          	addi	s5,a4,-1
   22554:	40aa8ab3          	sub	s5,s5,a0
   22558:	ff8afa93          	andi	s5,s5,-8
   2255c:	008a8a93          	addi	s5,s5,8
   22560:	015b0ab3          	add	s5,s6,s5
    if ((char *)base != buf)
   22564:	00aa0663          	beq	s4,a0,22570 <dwarf::value::as_reference() const+0x4d8>
      delete[] (char *)base;
   22568:	00050463          	beq	a0,zero,22570 <dwarf::value::as_reference() const+0x4d8>
   2256c:	ae4f40ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   22570:	05643823          	sd	s6,80(s0)
    end = dest;
   22574:	05543c23          	sd	s5,88(s0)
    cap = base + target;
   22578:	009b0b33          	add	s6,s6,s1
   2257c:	07643023          	sd	s6,96(s0)
    for (size_type i = 0; i < osize; i++)
   22580:	02090663          	beq	s2,zero,225ac <dwarf::value::as_reference() const+0x514>
   22584:	00000793          	addi	a5,zero,0
   22588:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   2258c:	09813703          	ld	a4,152(sp)
   22590:	00d70733          	add	a4,a4,a3
   22594:	00073603          	ld	a2,0(a4)
   22598:	05043703          	ld	a4,80(s0)
   2259c:	00d70733          	add	a4,a4,a3
   225a0:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   225a4:	00178793          	addi	a5,a5,1
   225a8:	fef910e3          	bne	s2,a5,22588 <dwarf::value::as_reference() const+0x4f0>
    end = base + osize;
   225ac:	05043783          	ld	a5,80(s0)
   225b0:	013787b3          	add	a5,a5,s3
   225b4:	04f43c23          	sd	a5,88(s0)
    for (T *p = base; p < end; ++p)
   225b8:	09813683          	ld	a3,152(sp)
   225bc:	0a013783          	ld	a5,160(sp)
   225c0:	00f6fa63          	bgeu	a3,a5,225d4 <dwarf::value::as_reference() const+0x53c>
   225c4:	00068793          	addi	a5,a3,0
   225c8:	00878793          	addi	a5,a5,8
   225cc:	0a013703          	ld	a4,160(sp)
   225d0:	fee7ece3          	bltu	a5,a4,225c8 <dwarf::value::as_reference() const+0x530>
    end = base;
   225d4:	0ad13023          	sd	a3,160(sp)
  }
   225d8:	ee9ff06f          	jal	zero,224c0 <dwarf::value::as_reference() const+0x428>
    T *src = base, *dest = (T *)newbuf;
   225dc:	000b0a93          	addi	s5,s6,0
   225e0:	f85ff06f          	jal	zero,22564 <dwarf::value::as_reference() const+0x4cc>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   225e4:	12813783          	ld	a5,296(sp)
   225e8:	0107b703          	ld	a4,16(a5)
   225ec:	13813783          	ld	a5,312(sp)
   225f0:	40f70633          	sub	a2,a4,a5
   225f4:	00700693          	addi	a3,zero,7
   225f8:	00c6f463          	bgeu	a3,a2,22600 <dwarf::value::as_reference() const+0x568>
   225fc:	00e7e663          	bltu	a5,a4,22608 <dwarf::value::as_reference() const+0x570>
      underflow();
   22600:	12810513          	addi	a0,sp,296
   22604:	b40fb0ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   22608:	13813603          	ld	a2,312(sp)
    if (sec->ord == byte_order::lsb) {
   2260c:	12813783          	ld	a5,296(sp)
   22610:	01c7a783          	lw	a5,28(a5)
   22614:	02079e63          	bne	a5,zero,22650 <dwarf::value::as_reference() const+0x5b8>
   22618:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   2261c:	00000a93          	addi	s5,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   22620:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   22624:	0006c703          	lbu	a4,0(a3)
   22628:	00f71733          	sll	a4,a4,a5
   2262c:	00eaeab3          	or	s5,s5,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   22630:	00168693          	addi	a3,a3,1
   22634:	0087879b          	addiw	a5,a5,8
   22638:	feb796e3          	bne	a5,a1,22624 <dwarf::value::as_reference() const+0x58c>
    pos += sizeof(T);
   2263c:	00860613          	addi	a2,a2,8
   22640:	12c13c23          	sd	a2,312(sp)
      return cu->get_dwarf().get_type_unit(sig).type();
   22644:	00093503          	ld	a0,0(s2)
   22648:	cc5f50ef          	jal	ra,1830c <dwarf::unit::get_dwarf() const>
   2264c:	0280006f          	jal	zero,22674 <dwarf::value::as_reference() const+0x5dc>
   22650:	00060793          	addi	a5,a2,0
   22654:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   22658:	00000a93          	addi	s5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   2265c:	008a9a93          	slli	s5,s5,0x8
   22660:	0007c703          	lbu	a4,0(a5)
   22664:	01576ab3          	or	s5,a4,s5
      for (unsigned i = 0; i < sizeof(T); i++)
   22668:	00178793          	addi	a5,a5,1
   2266c:	fef698e3          	bne	a3,a5,2265c <dwarf::value::as_reference() const+0x5c4>
   22670:	fcdff06f          	jal	zero,2263c <dwarf::value::as_reference() const+0x5a4>
   22674:	000a8593          	addi	a1,s5,0
   22678:	eadf70ef          	jal	ra,1a524 <dwarf::dwarf::get_type_unit(unsigned long) const>
   2267c:	8dcf90ef          	jal	ra,1b758 <dwarf::type_unit::type() const>
   22680:	00050493          	addi	s1,a0,0
  die(const die &o) = default;
   22684:	00052783          	lw	a5,0(a0)
   22688:	00f42023          	sw	a5,0(s0)
   2268c:	00853783          	ld	a5,8(a0)
   22690:	00f43423          	sd	a5,8(s0)
   22694:	01053783          	ld	a5,16(a0)
   22698:	00f43823          	sd	a5,16(s0)
   2269c:	01853783          	ld	a5,24(a0)
   226a0:	00f43c23          	sd	a5,24(s0)
   226a4:	02040b13          	addi	s6,s0,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   226a8:	05643823          	sd	s6,80(s0)
   226ac:	05643c23          	sd	s6,88(s0)
   226b0:	05040793          	addi	a5,s0,80
   226b4:	06f43023          	sd	a5,96(s0)
  size_type size() const { return end - base; }
   226b8:	05853983          	ld	s3,88(a0)
   226bc:	05053703          	ld	a4,80(a0)
   226c0:	40e989b3          	sub	s3,s3,a4
   226c4:	4039d913          	srai	s2,s3,0x3
    if (n <= (size_type)(cap - base))
   226c8:	416787b3          	sub	a5,a5,s6
   226cc:	0737fa63          	bgeu	a5,s3,22740 <dwarf::value::as_reference() const+0x6a8>
   226d0:	4037d793          	srai	a5,a5,0x3
   226d4:	00079463          	bne	a5,zero,226dc <dwarf::value::as_reference() const+0x644>
   226d8:	00100793          	addi	a5,zero,1
    while (target < n)
   226dc:	0127f663          	bgeu	a5,s2,226e8 <dwarf::value::as_reference() const+0x650>
      target <<= 1;
   226e0:	00179793          	slli	a5,a5,0x1
    while (target < n)
   226e4:	ff27eee3          	bltu	a5,s2,226e0 <dwarf::value::as_reference() const+0x648>
    char *newbuf = new char[sizeof(T[target])];
   226e8:	00379a13          	slli	s4,a5,0x3
   226ec:	000a0513          	addi	a0,s4,0
   226f0:	ea1f30ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   226f4:	00050b93          	addi	s7,a0,0
    T *src = base, *dest = (T *)newbuf;
   226f8:	05043503          	ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   226fc:	05843703          	ld	a4,88(s0)
   22700:	08e57263          	bgeu	a0,a4,22784 <dwarf::value::as_reference() const+0x6ec>
    T *src = base, *dest = (T *)newbuf;
   22704:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   22708:	00878793          	addi	a5,a5,8
   2270c:	fee7eee3          	bltu	a5,a4,22708 <dwarf::value::as_reference() const+0x670>
   22710:	fff70a93          	addi	s5,a4,-1
   22714:	40aa8ab3          	sub	s5,s5,a0
   22718:	ff8afa93          	andi	s5,s5,-8
   2271c:	008a8a93          	addi	s5,s5,8
   22720:	015b8ab3          	add	s5,s7,s5
    if ((char *)base != buf)
   22724:	00ab0663          	beq	s6,a0,22730 <dwarf::value::as_reference() const+0x698>
      delete[] (char *)base;
   22728:	00050463          	beq	a0,zero,22730 <dwarf::value::as_reference() const+0x698>
   2272c:	924f40ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   22730:	05743823          	sd	s7,80(s0)
    end = dest;
   22734:	05543c23          	sd	s5,88(s0)
    cap = base + target;
   22738:	014b8bb3          	add	s7,s7,s4
   2273c:	07743023          	sd	s7,96(s0)
    for (size_type i = 0; i < osize; i++)
   22740:	02090663          	beq	s2,zero,2276c <dwarf::value::as_reference() const+0x6d4>
   22744:	00000793          	addi	a5,zero,0
   22748:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   2274c:	0504b703          	ld	a4,80(s1)
   22750:	00d70733          	add	a4,a4,a3
   22754:	00073603          	ld	a2,0(a4)
   22758:	05043703          	ld	a4,80(s0)
   2275c:	00d70733          	add	a4,a4,a3
   22760:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   22764:	00178793          	addi	a5,a5,1
   22768:	fef910e3          	bne	s2,a5,22748 <dwarf::value::as_reference() const+0x6b0>
    end = base + osize;
   2276c:	05043783          	ld	a5,80(s0)
   22770:	013787b3          	add	a5,a5,s3
   22774:	04f43c23          	sd	a5,88(s0)
   22778:	0684b783          	ld	a5,104(s1)
   2277c:	06f43423          	sd	a5,104(s0)
   22780:	1880006f          	jal	zero,22908 <dwarf::value::as_reference() const+0x870>
    T *src = base, *dest = (T *)newbuf;
   22784:	000b8a93          	addi	s5,s7,0
   22788:	f9dff06f          	jal	zero,22724 <dwarf::value::as_reference() const+0x68c>
                              " as reference");
   2278c:	01000513          	addi	a0,zero,16
   22790:	f01f30ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   22794:	00050493          	addi	s1,a0,0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   22798:	00c92583          	lw	a1,12(s2)
   2279c:	00810513          	addi	a0,sp,8
   227a0:	4d00d0ef          	jal	ra,2fc70 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   227a4:	00015617          	auipc	a2,0x15
   227a8:	4f460613          	addi	a2,a2,1268 # 37c98 <std::piecewise_construct+0x1c8>
   227ac:	00000593          	addi	a1,zero,0
   227b0:	00810513          	addi	a0,sp,8
   227b4:	e4df30ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   227b8:	00050593          	addi	a1,a0,0
   227bc:	02810413          	addi	s0,sp,40
   227c0:	00040513          	addi	a0,s0,0
   227c4:	f0df30ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   227c8:	00015597          	auipc	a1,0x15
   227cc:	56058593          	addi	a1,a1,1376 # 37d28 <std::piecewise_construct+0x258>
   227d0:	00040513          	addi	a0,s0,0
   227d4:	a6cf40ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   227d8:	00050593          	addi	a1,a0,0
   227dc:	04810413          	addi	s0,sp,72
   227e0:	00040513          	addi	a0,s0,0
   227e4:	eedf30ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::logic_error(what_arg) {}
   227e8:	00040593          	addi	a1,s0,0
   227ec:	00048513          	addi	a0,s1,0
   227f0:	aa0f40ef          	jal	ra,16a90 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   227f4:	00021797          	auipc	a5,0x21
   227f8:	c6c7b783          	ld	a5,-916(a5) # 43460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   227fc:	01078793          	addi	a5,a5,16
   22800:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   22804:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   22808:	05810793          	addi	a5,sp,88
   2280c:	00f50463          	beq	a0,a5,22814 <dwarf::value::as_reference() const+0x77c>
   22810:	f91f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22814:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   22818:	03810793          	addi	a5,sp,56
   2281c:	00f50463          	beq	a0,a5,22824 <dwarf::value::as_reference() const+0x78c>
   22820:	f81f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22824:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   22828:	01810793          	addi	a5,sp,24
   2282c:	00f50463          	beq	a0,a5,22834 <dwarf::value::as_reference() const+0x79c>
   22830:	f71f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
                              " as reference");
   22834:	00021617          	auipc	a2,0x21
   22838:	dbc63603          	ld	a2,-580(a2) # 435f0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f868>
   2283c:	00021597          	auipc	a1,0x21
   22840:	d745b583          	ld	a1,-652(a1) # 435b0 <typeinfo for dwarf::value_type_mismatch@@Base+0xbf68>
   22844:	00048513          	addi	a0,s1,0
   22848:	918f40ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   2284c:	00050413          	addi	s0,a0,0
   22850:	27c0006f          	jal	zero,22acc <dwarf::value::as_reference() const+0xa34>
    return 0;
   22854:	00000493          	addi	s1,zero,0
   22858:	4000006f          	jal	zero,22c58 <dwarf::value::as_reference() const+0xbc0>
  d.read(off);
   2285c:	00048593          	addi	a1,s1,0
   22860:	0b810513          	addi	a0,sp,184
   22864:	a51fb0ef          	jal	ra,1e2b4 <dwarf::die::read(unsigned long)>
  die(die &&o) = default;
   22868:	0b812783          	lw	a5,184(sp)
   2286c:	00f42023          	sw	a5,0(s0)
   22870:	0c013783          	ld	a5,192(sp)
   22874:	00f43423          	sd	a5,8(s0)
   22878:	0c813783          	ld	a5,200(sp)
   2287c:	00f43823          	sd	a5,16(s0)
   22880:	0d013783          	ld	a5,208(sp)
   22884:	00f43c23          	sd	a5,24(s0)
   22888:	02040a13          	addi	s4,s0,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   2288c:	05443823          	sd	s4,80(s0)
   22890:	05443c23          	sd	s4,88(s0)
   22894:	05040793          	addi	a5,s0,80
   22898:	06f43023          	sd	a5,96(s0)
    if ((char *)o.base == o.buf) {
   2289c:	10813703          	ld	a4,264(sp)
   228a0:	0d810693          	addi	a3,sp,216
   228a4:	0cd70063          	beq	a4,a3,22964 <dwarf::value::as_reference() const+0x8cc>
      base = o.base;
   228a8:	04e43823          	sd	a4,80(s0)
      end = o.end;
   228ac:	11013783          	ld	a5,272(sp)
   228b0:	04f43c23          	sd	a5,88(s0)
      cap = o.cap;
   228b4:	11813783          	ld	a5,280(sp)
   228b8:	06f43023          	sd	a5,96(s0)
      o.base = (T *)o.buf;
   228bc:	0d810793          	addi	a5,sp,216
   228c0:	10f13423          	sd	a5,264(sp)
      o.end = o.base;
   228c4:	10f13823          	sd	a5,272(sp)
      o.cap = (T *)&o.buf[sizeof(T[Min])];
   228c8:	10810793          	addi	a5,sp,264
   228cc:	10f13c23          	sd	a5,280(sp)
   228d0:	12013783          	ld	a5,288(sp)
   228d4:	06f43423          	sd	a5,104(s0)
    for (T *p = base; p < end; ++p)
   228d8:	10813503          	ld	a0,264(sp)
   228dc:	11013783          	ld	a5,272(sp)
   228e0:	00f57a63          	bgeu	a0,a5,228f4 <dwarf::value::as_reference() const+0x85c>
   228e4:	00050793          	addi	a5,a0,0
   228e8:	00878793          	addi	a5,a5,8
   228ec:	11013703          	ld	a4,272(sp)
   228f0:	fee7ece3          	bltu	a5,a4,228e8 <dwarf::value::as_reference() const+0x850>
    end = base;
   228f4:	10a13823          	sd	a0,272(sp)
    if ((char *)base != buf)
   228f8:	0d810793          	addi	a5,sp,216
   228fc:	00f50663          	beq	a0,a5,22908 <dwarf::value::as_reference() const+0x870>
      delete[] (char *)base;
   22900:	00050463          	beq	a0,zero,22908 <dwarf::value::as_reference() const+0x870>
   22904:	f4df30ef          	jal	ra,16850 <operator delete[](void*)@plt>
   22908:	13013483          	ld	s1,304(sp)
   2290c:	02048463          	beq	s1,zero,22934 <dwarf::value::as_reference() const+0x89c>
    if (__is_single_threaded())
   22910:	00021797          	auipc	a5,0x21
   22914:	b887b783          	ld	a5,-1144(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   22918:	0007c783          	lbu	a5,0(a5)
   2291c:	12078863          	beq	a5,zero,22a4c <dwarf::value::as_reference() const+0x9b4>
    _Atomic_word __result = *__mem;
   22920:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   22924:	fff5079b          	addiw	a5,a0,-1
   22928:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2292c:	00100793          	addi	a5,zero,1
   22930:	12f50663          	beq	a0,a5,22a5c <dwarf::value::as_reference() const+0x9c4>
}
   22934:	00040513          	addi	a0,s0,0
   22938:	18813083          	ld	ra,392(sp)
   2293c:	18013403          	ld	s0,384(sp)
   22940:	17813483          	ld	s1,376(sp)
   22944:	17013903          	ld	s2,368(sp)
   22948:	16813983          	ld	s3,360(sp)
   2294c:	16013a03          	ld	s4,352(sp)
   22950:	15813a83          	ld	s5,344(sp)
   22954:	15013b03          	ld	s6,336(sp)
   22958:	14813b83          	ld	s7,328(sp)
   2295c:	19010113          	addi	sp,sp,400
   22960:	00008067          	jalr	zero,0(ra)
  size_type size() const { return end - base; }
   22964:	11013983          	ld	s3,272(sp)
   22968:	40d989b3          	sub	s3,s3,a3
   2296c:	4039d913          	srai	s2,s3,0x3
    if (n <= (size_type)(cap - base))
   22970:	414787b3          	sub	a5,a5,s4
   22974:	0737fa63          	bgeu	a5,s3,229e8 <dwarf::value::as_reference() const+0x950>
   22978:	4037d793          	srai	a5,a5,0x3
   2297c:	00079463          	bne	a5,zero,22984 <dwarf::value::as_reference() const+0x8ec>
   22980:	00100793          	addi	a5,zero,1
    while (target < n)
   22984:	0127f663          	bgeu	a5,s2,22990 <dwarf::value::as_reference() const+0x8f8>
      target <<= 1;
   22988:	00179793          	slli	a5,a5,0x1
    while (target < n)
   2298c:	ff27eee3          	bltu	a5,s2,22988 <dwarf::value::as_reference() const+0x8f0>
    char *newbuf = new char[sizeof(T[target])];
   22990:	00379493          	slli	s1,a5,0x3
   22994:	00048513          	addi	a0,s1,0
   22998:	bf9f30ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   2299c:	00050b13          	addi	s6,a0,0
    T *src = base, *dest = (T *)newbuf;
   229a0:	05043503          	ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   229a4:	05843703          	ld	a4,88(s0)
   229a8:	08e57e63          	bgeu	a0,a4,22a44 <dwarf::value::as_reference() const+0x9ac>
    T *src = base, *dest = (T *)newbuf;
   229ac:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   229b0:	00878793          	addi	a5,a5,8
   229b4:	fee7eee3          	bltu	a5,a4,229b0 <dwarf::value::as_reference() const+0x918>
   229b8:	fff70a93          	addi	s5,a4,-1
   229bc:	40aa8ab3          	sub	s5,s5,a0
   229c0:	ff8afa93          	andi	s5,s5,-8
   229c4:	008a8a93          	addi	s5,s5,8
   229c8:	015b0ab3          	add	s5,s6,s5
    if ((char *)base != buf)
   229cc:	00aa0663          	beq	s4,a0,229d8 <dwarf::value::as_reference() const+0x940>
      delete[] (char *)base;
   229d0:	00050463          	beq	a0,zero,229d8 <dwarf::value::as_reference() const+0x940>
   229d4:	e7df30ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   229d8:	05643823          	sd	s6,80(s0)
    end = dest;
   229dc:	05543c23          	sd	s5,88(s0)
    cap = base + target;
   229e0:	009b0b33          	add	s6,s6,s1
   229e4:	07643023          	sd	s6,96(s0)
    for (size_type i = 0; i < osize; i++)
   229e8:	02090663          	beq	s2,zero,22a14 <dwarf::value::as_reference() const+0x97c>
   229ec:	00000793          	addi	a5,zero,0
   229f0:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   229f4:	10813703          	ld	a4,264(sp)
   229f8:	00d70733          	add	a4,a4,a3
   229fc:	00073603          	ld	a2,0(a4)
   22a00:	05043703          	ld	a4,80(s0)
   22a04:	00d70733          	add	a4,a4,a3
   22a08:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   22a0c:	00178793          	addi	a5,a5,1
   22a10:	fef910e3          	bne	s2,a5,229f0 <dwarf::value::as_reference() const+0x958>
    end = base + osize;
   22a14:	05043783          	ld	a5,80(s0)
   22a18:	013787b3          	add	a5,a5,s3
   22a1c:	04f43c23          	sd	a5,88(s0)
    for (T *p = base; p < end; ++p)
   22a20:	10813683          	ld	a3,264(sp)
   22a24:	11013783          	ld	a5,272(sp)
   22a28:	00f6fa63          	bgeu	a3,a5,22a3c <dwarf::value::as_reference() const+0x9a4>
   22a2c:	00068793          	addi	a5,a3,0
   22a30:	00878793          	addi	a5,a5,8
   22a34:	11013703          	ld	a4,272(sp)
   22a38:	fee7ece3          	bltu	a5,a4,22a30 <dwarf::value::as_reference() const+0x998>
    end = base;
   22a3c:	10d13823          	sd	a3,272(sp)
  }
   22a40:	e91ff06f          	jal	zero,228d0 <dwarf::value::as_reference() const+0x838>
    T *src = base, *dest = (T *)newbuf;
   22a44:	000b0a93          	addi	s5,s6,0
   22a48:	f85ff06f          	jal	zero,229cc <dwarf::value::as_reference() const+0x934>
      return __exchange_and_add(__mem, __val);
   22a4c:	fff00593          	addi	a1,zero,-1
   22a50:	03048513          	addi	a0,s1,48
   22a54:	b9df30ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22a58:	ed5ff06f          	jal	zero,2292c <dwarf::value::as_reference() const+0x894>
	_M_dispose();
   22a5c:	0004b783          	ld	a5,0(s1)
   22a60:	0107b783          	ld	a5,16(a5)
   22a64:	00048513          	addi	a0,s1,0
   22a68:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   22a6c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   22a70:	00021797          	auipc	a5,0x21
   22a74:	a287b783          	ld	a5,-1496(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   22a78:	0007c783          	lbu	a5,0(a5)
   22a7c:	02078663          	beq	a5,zero,22aa8 <dwarf::value::as_reference() const+0xa10>
    _Atomic_word __result = *__mem;
   22a80:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   22a84:	fff5079b          	addiw	a5,a0,-1
   22a88:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   22a8c:	00100793          	addi	a5,zero,1
   22a90:	eaf512e3          	bne	a0,a5,22934 <dwarf::value::as_reference() const+0x89c>
	    _M_destroy();
   22a94:	0004b783          	ld	a5,0(s1)
   22a98:	0187b783          	ld	a5,24(a5)
   22a9c:	00048513          	addi	a0,s1,0
   22aa0:	000780e7          	jalr	ra,0(a5)
   22aa4:	e91ff06f          	jal	zero,22934 <dwarf::value::as_reference() const+0x89c>
      return __exchange_and_add(__mem, __val);
   22aa8:	fff00593          	addi	a1,zero,-1
   22aac:	03448513          	addi	a0,s1,52
   22ab0:	b41f30ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22ab4:	fd9ff06f          	jal	zero,22a8c <dwarf::value::as_reference() const+0x9f4>
class die {
   22ab8:	00050413          	addi	s0,a0,0
   22abc:	06810513          	addi	a0,sp,104
   22ac0:	00021317          	auipc	t1,0x21
   22ac4:	94033303          	ld	t1,-1728(t1) # 43400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b8b0>
   22ac8:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   22acc:	13013503          	ld	a0,304(sp)
   22ad0:	00050863          	beq	a0,zero,22ae0 <dwarf::value::as_reference() const+0xa48>
	  _M_pi->_M_release();
   22ad4:	00021317          	auipc	t1,0x21
   22ad8:	90c33303          	ld	t1,-1780(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   22adc:	000300e7          	jalr	ra,0(t1)
   22ae0:	00040513          	addi	a0,s0,0
   22ae4:	eadf30ef          	jal	ra,16990 <_Unwind_Resume@plt>
    } catch (std::out_of_range &e) {
   22ae8:	00100793          	addi	a5,zero,1
   22aec:	00050413          	addi	s0,a0,0
   22af0:	fcf59ee3          	bne	a1,a5,22acc <dwarf::value::as_reference() const+0xa34>
   22af4:	b7df30ef          	jal	ra,16670 <__cxa_begin_catch@plt>
      throw format_error("unknown type signature 0x" + to_hex(sig));
   22af8:	01000513          	addi	a0,zero,16
   22afc:	b95f30ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   22b00:	00050493          	addi	s1,a0,0
   22b04:	000a8593          	addi	a1,s5,0
   22b08:	02810513          	addi	a0,sp,40
   22b0c:	00021317          	auipc	t1,0x21
   22b10:	80433303          	ld	t1,-2044(t1) # 43310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26ea0>
   22b14:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   22b18:	00015617          	auipc	a2,0x15
   22b1c:	22060613          	addi	a2,a2,544 # 37d38 <std::piecewise_construct+0x268>
   22b20:	00000593          	addi	a1,zero,0
   22b24:	02810513          	addi	a0,sp,40
   22b28:	ad9f30ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   22b2c:	00050593          	addi	a1,a0,0
   22b30:	04810413          	addi	s0,sp,72
   22b34:	00040513          	addi	a0,s0,0
   22b38:	b99f30ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   22b3c:	00040593          	addi	a1,s0,0
   22b40:	00048513          	addi	a0,s1,0
   22b44:	cedf30ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   22b48:	00021797          	auipc	a5,0x21
   22b4c:	a287b783          	ld	a5,-1496(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   22b50:	01078793          	addi	a5,a5,16
   22b54:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   22b58:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   22b5c:	05810793          	addi	a5,sp,88
   22b60:	00f50463          	beq	a0,a5,22b68 <dwarf::value::as_reference() const+0xad0>
   22b64:	c3df30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22b68:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   22b6c:	03810793          	addi	a5,sp,56
   22b70:	00f50463          	beq	a0,a5,22b78 <dwarf::value::as_reference() const+0xae0>
   22b74:	c2df30ef          	jal	ra,167a0 <operator delete(void*)@plt>
   22b78:	00021617          	auipc	a2,0x21
   22b7c:	82063603          	ld	a2,-2016(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   22b80:	00020597          	auipc	a1,0x20
   22b84:	7485b583          	ld	a1,1864(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   22b88:	00048513          	addi	a0,s1,0
   22b8c:	dd5f30ef          	jal	ra,16960 <__cxa_throw@plt>
    }
   22b90:	00050413          	addi	s0,a0,0
   22b94:	0300006f          	jal	zero,22bc4 <dwarf::value::as_reference() const+0xb2c>
      { return _M_dataplus._M_p; }
   22b98:	00050413          	addi	s0,a0,0
   22b9c:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   22ba0:	05810793          	addi	a5,sp,88
   22ba4:	00f50463          	beq	a0,a5,22bac <dwarf::value::as_reference() const+0xb14>
   22ba8:	bf9f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22bac:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   22bb0:	03810793          	addi	a5,sp,56
   22bb4:	00f50463          	beq	a0,a5,22bbc <dwarf::value::as_reference() const+0xb24>
   22bb8:	be9f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      throw format_error("unknown type signature 0x" + to_hex(sig));
   22bbc:	00048513          	addi	a0,s1,0
   22bc0:	b91f30ef          	jal	ra,16750 <__cxa_free_exception@plt>
    }
   22bc4:	d6df30ef          	jal	ra,16930 <__cxa_end_catch@plt>
   22bc8:	f05ff06f          	jal	zero,22acc <dwarf::value::as_reference() const+0xa34>
      { return _M_dataplus._M_p; }
   22bcc:	00050413          	addi	s0,a0,0
   22bd0:	fddff06f          	jal	zero,22bac <dwarf::value::as_reference() const+0xb14>
      throw format_error("unknown type signature 0x" + to_hex(sig));
   22bd4:	00050413          	addi	s0,a0,0
   22bd8:	fe5ff06f          	jal	zero,22bbc <dwarf::value::as_reference() const+0xb24>
   22bdc:	00050413          	addi	s0,a0,0
   22be0:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   22be4:	05810793          	addi	a5,sp,88
   22be8:	00f50463          	beq	a0,a5,22bf0 <dwarf::value::as_reference() const+0xb58>
   22bec:	bb5f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22bf0:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   22bf4:	03810793          	addi	a5,sp,56
   22bf8:	00f50463          	beq	a0,a5,22c00 <dwarf::value::as_reference() const+0xb68>
   22bfc:	ba5f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22c00:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   22c04:	01810793          	addi	a5,sp,24
   22c08:	00f50463          	beq	a0,a5,22c10 <dwarf::value::as_reference() const+0xb78>
   22c0c:	b95f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
                              " as reference");
   22c10:	00048513          	addi	a0,s1,0
   22c14:	b3df30ef          	jal	ra,16750 <__cxa_free_exception@plt>
   22c18:	eb5ff06f          	jal	zero,22acc <dwarf::value::as_reference() const+0xa34>
      { return _M_dataplus._M_p; }
   22c1c:	00050413          	addi	s0,a0,0
   22c20:	fd1ff06f          	jal	zero,22bf0 <dwarf::value::as_reference() const+0xb58>
   22c24:	00050413          	addi	s0,a0,0
   22c28:	fd9ff06f          	jal	zero,22c00 <dwarf::value::as_reference() const+0xb68>
   22c2c:	00050413          	addi	s0,a0,0
   22c30:	fe1ff06f          	jal	zero,22c10 <dwarf::value::as_reference() const+0xb78>
class die {
   22c34:	00050413          	addi	s0,a0,0
   22c38:	0d810513          	addi	a0,sp,216
   22c3c:	00020317          	auipc	t1,0x20
   22c40:	7c433303          	ld	t1,1988(t1) # 43400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b8b0>
   22c44:	000300e7          	jalr	ra,0(t1)
   22c48:	e85ff06f          	jal	zero,22acc <dwarf::value::as_reference() const+0xa34>
        val |= ((uint64_t)p[i]) << (i * 8);
   22c4c:	0007c483          	lbu	s1,0(a5)
    pos += sizeof(T);
   22c50:	00178793          	addi	a5,a5,1
   22c54:	12f13c23          	sd	a5,312(sp)
  die d(cu);
   22c58:	00093583          	ld	a1,0(s2)
   22c5c:	0b810513          	addi	a0,sp,184
   22c60:	dfcfb0ef          	jal	ra,1e25c <dwarf::die::die(dwarf::unit const*)>
   22c64:	bf9ff06f          	jal	zero,2285c <dwarf::value::as_reference() const+0x7c4>
  cursor cur(cu->data(), offset);
   22c68:	01093703          	ld	a4,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   22c6c:	13313423          	sd	s3,296(sp)
      : _M_pi(__r._M_pi)
   22c70:	12013823          	sd	zero,304(sp)
      : sec(sec), pos(sec->begin + offset) {}
   22c74:	0089b783          	ld	a5,8(s3)
   22c78:	00e787b3          	add	a5,a5,a4
   22c7c:	12f13c23          	sd	a5,312(sp)
  switch (form) {
   22c80:	00892783          	lw	a5,8(s2)
   22c84:	ff07879b          	addiw	a5,a5,-16
   22c88:	0007869b          	addiw	a3,a5,0
   22c8c:	01000713          	addi	a4,zero,16
   22c90:	aed76ee3          	bltu	a4,a3,2278c <dwarf::value::as_reference() const+0x6f4>
   22c94:	02079713          	slli	a4,a5,0x20
   22c98:	01e75793          	srli	a5,a4,0x1e
   22c9c:	00015717          	auipc	a4,0x15
   22ca0:	28c70713          	addi	a4,a4,652 # 37f28 <std::piecewise_construct+0x458>
   22ca4:	00e787b3          	add	a5,a5,a4
   22ca8:	0007a783          	lw	a5,0(a5)
   22cac:	00e787b3          	add	a5,a5,a4
   22cb0:	00078067          	jalr	zero,0(a5)

0000000000022cb4 <dwarf::to_string[abi:cxx11](dwarf::value const&)>:

string to_string(const value &v) {
   22cb4:	ed010113          	addi	sp,sp,-304
   22cb8:	12113423          	sd	ra,296(sp)
   22cbc:	12813023          	sd	s0,288(sp)
   22cc0:	10913c23          	sd	s1,280(sp)
   22cc4:	11213823          	sd	s2,272(sp)
   22cc8:	11313423          	sd	s3,264(sp)
   22ccc:	11413023          	sd	s4,256(sp)
   22cd0:	0f513c23          	sd	s5,248(sp)
   22cd4:	0f613823          	sd	s6,240(sp)
   22cd8:	0f713423          	sd	s7,232(sp)
   22cdc:	0f813023          	sd	s8,224(sp)
   22ce0:	0d913c23          	sd	s9,216(sp)
   22ce4:	0da13823          	sd	s10,208(sp)
   22ce8:	0db13423          	sd	s11,200(sp)
   22cec:	00050413          	addi	s0,a0,0
   22cf0:	00058513          	addi	a0,a1,0
  type get_type() const { return typ; }
   22cf4:	00c5a583          	lw	a1,12(a1)
  switch (v.get_type()) {
   22cf8:	00d00713          	addi	a4,zero,13
   22cfc:	00b77463          	bgeu	a4,a1,22d04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x50>
   22d00:	6b50006f          	jal	zero,23bb4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xf00>
   22d04:	00259793          	slli	a5,a1,0x2
   22d08:	00015717          	auipc	a4,0x15
   22d0c:	26470713          	addi	a4,a4,612 # 37f6c <std::piecewise_construct+0x49c>
   22d10:	00e787b3          	add	a5,a5,a4
   22d14:	0007a783          	lw	a5,0(a5)
   22d18:	00e787b3          	add	a5,a5,a4
   22d1c:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   22d20:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   22d24:	00f43023          	sd	a5,0(s0)
	_M_construct(__s, __end, forward_iterator_tag());
   22d28:	00000693          	addi	a3,zero,0
   22d2c:	00015617          	auipc	a2,0x15
   22d30:	05060613          	addi	a2,a2,80 # 37d7c <std::piecewise_construct+0x2ac>
   22d34:	00015597          	auipc	a1,0x15
   22d38:	03458593          	addi	a1,a1,52 # 37d68 <std::piecewise_construct+0x298>
   22d3c:	00040513          	addi	a0,s0,0
   22d40:	00020317          	auipc	t1,0x20
   22d44:	5e033303          	ld	t1,1504(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   22d48:	000300e7          	jalr	ra,0(t1)
  }
  case value::type::string:
    return v.as_string();
  }
  return "<unexpected value type " + to_string(v.get_type()) + ">";
}
   22d4c:	00040513          	addi	a0,s0,0
   22d50:	12813083          	ld	ra,296(sp)
   22d54:	12013403          	ld	s0,288(sp)
   22d58:	11813483          	ld	s1,280(sp)
   22d5c:	11013903          	ld	s2,272(sp)
   22d60:	10813983          	ld	s3,264(sp)
   22d64:	10013a03          	ld	s4,256(sp)
   22d68:	0f813a83          	ld	s5,248(sp)
   22d6c:	0f013b03          	ld	s6,240(sp)
   22d70:	0e813b83          	ld	s7,232(sp)
   22d74:	0e013c03          	ld	s8,224(sp)
   22d78:	0d813c83          	ld	s9,216(sp)
   22d7c:	0d013d03          	ld	s10,208(sp)
   22d80:	0c813d83          	ld	s11,200(sp)
   22d84:	13010113          	addi	sp,sp,304
   22d88:	00008067          	jalr	zero,0(ra)
    return "0x" + to_hex(v.as_address());
   22d8c:	db4fc0ef          	jal	ra,1f340 <dwarf::value::as_address() const>
   22d90:	00050593          	addi	a1,a0,0
   22d94:	05010493          	addi	s1,sp,80
   22d98:	00048513          	addi	a0,s1,0
   22d9c:	00020317          	auipc	t1,0x20
   22da0:	57433303          	ld	t1,1396(t1) # 43310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26ea0>
   22da4:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   22da8:	00200713          	addi	a4,zero,2
   22dac:	00016697          	auipc	a3,0x16
   22db0:	f0468693          	addi	a3,a3,-252 # 38cb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d0>
   22db4:	00000613          	addi	a2,zero,0
   22db8:	00000593          	addi	a1,zero,0
   22dbc:	00048513          	addi	a0,s1,0
   22dc0:	b41f30ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   22dc4:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   22dc8:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22dcc:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   22dd0:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22dd4:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   22dd8:	03278c63          	beq	a5,s2,22e10 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x15c>
      { _M_dataplus._M_p = __p; }
   22ddc:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   22de0:	0104b783          	ld	a5,16(s1)
   22de4:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   22de8:	0084b783          	ld	a5,8(s1)
   22dec:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   22df0:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22df4:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   22df8:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   22dfc:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22e00:	06010793          	addi	a5,sp,96
   22e04:	f4f504e3          	beq	a0,a5,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
   22e08:	999f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   22e0c:	f41ff06f          	jal	zero,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22e10:	0084b603          	ld	a2,8(s1)
   22e14:	00160613          	addi	a2,a2,1
	if (__n == 0)
   22e18:	fc0608e3          	beq	a2,zero,22de8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x134>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22e1c:	00090593          	addi	a1,s2,0
   22e20:	a21f30ef          	jal	ra,16840 <memcpy@plt>
   22e24:	fc5ff06f          	jal	zero,22de8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x134>
    const char *b = (const char *)v.as_block(&size);
   22e28:	01010593          	addi	a1,sp,16
   22e2c:	86dfc0ef          	jal	ra,1f698 <dwarf::value::as_block(unsigned long*) const>
   22e30:	00050a13          	addi	s4,a0,0
    string res = ::to_string(size) + " byte block:";
   22e34:	01013483          	ld	s1,16(sp)
  to_string(unsigned long __val)
#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_LONG__) <= 32
  noexcept // any 32-bit value fits in the SSO buffer
#endif
  {
    string __str(__detail::__to_chars_len(__val), '\0');
   22e38:	00a00593          	addi	a1,zero,10
   22e3c:	00048513          	addi	a0,s1,0
   22e40:	00020317          	auipc	t1,0x20
   22e44:	70033303          	ld	t1,1792(t1) # 43540 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)@@Base+0x1f324>
   22e48:	000300e7          	jalr	ra,0(t1)
	: allocator_type(__a), _M_p(__dat) { }
   22e4c:	06010793          	addi	a5,sp,96
   22e50:	04f13823          	sd	a5,80(sp)
      { _M_construct(__n, __c); }
   22e54:	00000613          	addi	a2,zero,0
   22e58:	02051593          	slli	a1,a0,0x20
   22e5c:	0205d593          	srli	a1,a1,0x20
   22e60:	05010513          	addi	a0,sp,80
   22e64:	99df30ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   22e68:	00048613          	addi	a2,s1,0
   22e6c:	05812583          	lw	a1,88(sp)
   22e70:	05013503          	ld	a0,80(sp)
   22e74:	00020317          	auipc	t1,0x20
   22e78:	59433303          	ld	t1,1428(t1) # 43408 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)@@Base+0x1f15c>
   22e7c:	000300e7          	jalr	ra,0(t1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   22e80:	fff00793          	addi	a5,zero,-1
   22e84:	0027d793          	srli	a5,a5,0x2
   22e88:	05813703          	ld	a4,88(sp)
   22e8c:	40e787b3          	sub	a5,a5,a4
   22e90:	00b00713          	addi	a4,zero,11
   22e94:	00f77e63          	bgeu	a4,a5,22eb0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1fc>
	return _M_append(__s, __n);
   22e98:	00c00613          	addi	a2,zero,12
   22e9c:	00015597          	auipc	a1,0x15
   22ea0:	efc58593          	addi	a1,a1,-260 # 37d98 <std::piecewise_construct+0x2c8>
   22ea4:	05010513          	addi	a0,sp,80
   22ea8:	f88f30ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22eac:	02c0006f          	jal	zero,22ed8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x224>
	  __throw_length_error(__N(__s));
   22eb0:	00015517          	auipc	a0,0x15
   22eb4:	ed050513          	addi	a0,a0,-304 # 37d80 <std::piecewise_construct+0x2b0>
   22eb8:	fe8f30ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   22ebc:	00050413          	addi	s0,a0,0
   22ec0:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22ec4:	06010793          	addi	a5,sp,96
   22ec8:	00f50463          	beq	a0,a5,22ed0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x21c>
   22ecc:	8d5f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   22ed0:	00040513          	addi	a0,s0,0
   22ed4:	abdf30ef          	jal	ra,16990 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   22ed8:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22edc:	04010793          	addi	a5,sp,64
   22ee0:	02f13823          	sd	a5,48(sp)
      { return _M_dataplus._M_p; }
   22ee4:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22ee8:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   22eec:	07278263          	beq	a5,s2,22f50 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x29c>
      { _M_dataplus._M_p = __p; }
   22ef0:	02f13823          	sd	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   22ef4:	01053783          	ld	a5,16(a0)
   22ef8:	04f13023          	sd	a5,64(sp)
      { _M_string_length = __length; }
   22efc:	0084b783          	ld	a5,8(s1)
   22f00:	02f13c23          	sd	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   22f04:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22f08:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   22f0c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   22f10:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22f14:	06010793          	addi	a5,sp,96
   22f18:	00f50463          	beq	a0,a5,22f20 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x26c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   22f1c:	885f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
    for (size_t pos = 0; pos < size; ++pos) {
   22f20:	01013783          	ld	a5,16(sp)
   22f24:	1a078e63          	beq	a5,zero,230e0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x42c>
   22f28:	00000493          	addi	s1,zero,0
	return _M_is_local() ? size_type(_S_local_capacity)
   22f2c:	04010b13          	addi	s6,sp,64
   22f30:	00f00c93          	addi	s9,zero,15
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
   22f34:	03010993          	addi	s3,sp,48
	: allocator_type(__a), _M_p(__dat) { }
   22f38:	05010b93          	addi	s7,sp,80
   22f3c:	06010913          	addi	s2,sp,96
    pos--;
   22f40:	00810c13          	addi	s8,sp,8
	if (this->max_size() - (this->size() - __n1) < __n2)
   22f44:	fff00a93          	addi	s5,zero,-1
   22f48:	002ada93          	srli	s5,s5,0x2
   22f4c:	0e80006f          	jal	zero,23034 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x380>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22f50:	00853603          	ld	a2,8(a0)
   22f54:	00160613          	addi	a2,a2,1
	if (__n == 0)
   22f58:	fa0602e3          	beq	a2,zero,22efc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x248>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22f5c:	00090593          	addi	a1,s2,0
   22f60:	04010513          	addi	a0,sp,64
   22f64:	8ddf30ef          	jal	ra,16840 <memcpy@plt>
   22f68:	f95ff06f          	jal	zero,22efc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x248>
	return _M_is_local() ? size_type(_S_local_capacity)
   22f6c:	000c8793          	addi	a5,s9,0
   22f70:	0d80006f          	jal	zero,23048 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x394>
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
   22f74:	00100713          	addi	a4,zero,1
   22f78:	00000693          	addi	a3,zero,0
   22f7c:	00000613          	addi	a2,zero,0
   22f80:	000d8593          	addi	a1,s11,0
   22f84:	00098513          	addi	a0,s3,0
   22f88:	a49f30ef          	jal	ra,169d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@plt>
   22f8c:	0c00006f          	jal	zero,2304c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x398>
	: allocator_type(__a), _M_p(__dat) { }
   22f90:	05213823          	sd	s2,80(sp)
	_M_construct(__s, __end, forward_iterator_tag());
   22f94:	00000693          	addi	a3,zero,0
   22f98:	00016617          	auipc	a2,0x16
   22f9c:	73160613          	addi	a2,a2,1841 # 396c9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   22fa0:	00016597          	auipc	a1,0x16
   22fa4:	72858593          	addi	a1,a1,1832 # 396c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe8>
   22fa8:	000b8513          	addi	a0,s7,0
   22fac:	00020317          	auipc	t1,0x20
   22fb0:	37433303          	ld	t1,884(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   22fb4:	000300e7          	jalr	ra,0(t1)
   22fb8:	00c0006f          	jal	zero,22fc4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x310>
  *pos-- = '\0';
   22fbc:	00910d13          	addi	s10,sp,9
   22fc0:	0f40006f          	jal	zero,230b4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x400>
      { return _M_dataplus._M_p; }
   22fc4:	05013583          	ld	a1,80(sp)
      { return _M_string_length; }
   22fc8:	05813603          	ld	a2,88(sp)
	if (this->max_size() - (this->size() - __n1) < __n2)
   22fcc:	03813783          	ld	a5,56(sp)
   22fd0:	40fa87b3          	sub	a5,s5,a5
   22fd4:	00c7e863          	bltu	a5,a2,22fe4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x330>
	return _M_append(__s, __n);
   22fd8:	00098513          	addi	a0,s3,0
   22fdc:	e54f30ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22fe0:	03c0006f          	jal	zero,2301c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x368>
	  __throw_length_error(__N(__s));
   22fe4:	00015517          	auipc	a0,0x15
   22fe8:	d9c50513          	addi	a0,a0,-612 # 37d80 <std::piecewise_construct+0x2b0>
   22fec:	eb4f30ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   22ff0:	00050413          	addi	s0,a0,0
   22ff4:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22ff8:	06010793          	addi	a5,sp,96
   22ffc:	00f50463          	beq	a0,a5,23004 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x350>
   23000:	fa0f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23004:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   23008:	04010793          	addi	a5,sp,64
   2300c:	00f50463          	beq	a0,a5,23014 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x360>
   23010:	f90f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   23014:	00040513          	addi	a0,s0,0
   23018:	979f30ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2301c:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   23020:	01250463          	beq	a0,s2,23028 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x374>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   23024:	f7cf30ef          	jal	ra,167a0 <operator delete(void*)@plt>
   23028:	00148493          	addi	s1,s1,1
   2302c:	01013783          	ld	a5,16(sp)
   23030:	0af4f863          	bgeu	s1,a5,230e0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x42c>
      { return _M_string_length; }
   23034:	03813d83          	ld	s11,56(sp)
	if (__size + 1 > this->capacity())
   23038:	001d8d13          	addi	s10,s11,1
	return _M_is_local() ? size_type(_S_local_capacity)
   2303c:	03013783          	ld	a5,48(sp)
   23040:	f36786e3          	beq	a5,s6,22f6c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2b8>
   23044:	04013783          	ld	a5,64(sp)
	if (__size + 1 > this->capacity())
   23048:	f3a7e6e3          	bltu	a5,s10,22f74 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2c0>
	__c1 = __c2;
   2304c:	03013583          	ld	a1,48(sp)
   23050:	01b585b3          	add	a1,a1,s11
   23054:	02000793          	addi	a5,zero,32
   23058:	00f58023          	sb	a5,0(a1)
      { _M_string_length = __length; }
   2305c:	03a13c23          	sd	s10,56(sp)
   23060:	03013783          	ld	a5,48(sp)
   23064:	01a787b3          	add	a5,a5,s10
   23068:	00078023          	sb	zero,0(a5)
      res += to_hex(b[pos]);
   2306c:	009a07b3          	add	a5,s4,s1
   23070:	0007c783          	lbu	a5,0(a5)
  if (v == 0)
   23074:	f0078ee3          	beq	a5,zero,22f90 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2dc>
  *pos-- = '\0';
   23078:	00010523          	sb	zero,10(sp)
  while (v && pos >= buf) {
   2307c:	00f7f713          	andi	a4,a5,15
    if (digit < 10)
   23080:	00900613          	addi	a2,zero,9
      *pos = '0' + digit;
   23084:	03070693          	addi	a3,a4,48
    if (digit < 10)
   23088:	00e67463          	bgeu	a2,a4,23090 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x3dc>
      *pos = 'a' + (digit - 10);
   2308c:	05770693          	addi	a3,a4,87
   23090:	00d104a3          	sb	a3,9(sp)
    v >>= 4;
   23094:	0047d793          	srli	a5,a5,0x4
  while (v && pos >= buf) {
   23098:	f20782e3          	beq	a5,zero,22fbc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x308>
    if (digit < 10)
   2309c:	00900693          	addi	a3,zero,9
      *pos = 'a' + (digit - 10);
   230a0:	05778713          	addi	a4,a5,87
    if (digit < 10)
   230a4:	00f6e463          	bltu	a3,a5,230ac <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x3f8>
      *pos = '0' + digit;
   230a8:	03078713          	addi	a4,a5,48
   230ac:	00e10423          	sb	a4,8(sp)
    pos--;
   230b0:	000c0d13          	addi	s10,s8,0
	: allocator_type(__a), _M_p(__dat) { }
   230b4:	05213823          	sd	s2,80(sp)
	return __builtin_strlen(__s);
   230b8:	000d0513          	addi	a0,s10,0
   230bc:	dc4f30ef          	jal	ra,16680 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   230c0:	00000693          	addi	a3,zero,0
   230c4:	00ad0633          	add	a2,s10,a0
   230c8:	000d0593          	addi	a1,s10,0
   230cc:	000b8513          	addi	a0,s7,0
   230d0:	00020317          	auipc	t1,0x20
   230d4:	25033303          	ld	t1,592(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   230d8:	000300e7          	jalr	ra,0(t1)
      }
   230dc:	ee9ff06f          	jal	zero,22fc4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x310>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   230e0:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   230e4:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   230e8:	03013783          	ld	a5,48(sp)
	if (__str._M_is_local())
   230ec:	04010713          	addi	a4,sp,64
   230f0:	00e78e63          	beq	a5,a4,2310c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x458>
      { _M_dataplus._M_p = __p; }
   230f4:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   230f8:	04013783          	ld	a5,64(sp)
   230fc:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   23100:	03813783          	ld	a5,56(sp)
   23104:	00f43423          	sd	a5,8(s0)
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   23108:	c45ff06f          	jal	zero,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2310c:	03813603          	ld	a2,56(sp)
   23110:	00160613          	addi	a2,a2,1
	if (__n == 0)
   23114:	fe0606e3          	beq	a2,zero,23100 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x44c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   23118:	00070593          	addi	a1,a4,0
   2311c:	f24f30ef          	jal	ra,16840 <memcpy@plt>
   23120:	fe1ff06f          	jal	zero,23100 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x44c>
    return "0x" + to_hex(v.as_uconstant());
   23124:	aa5fc0ef          	jal	ra,1fbc8 <dwarf::value::as_uconstant() const>
   23128:	00050593          	addi	a1,a0,0
   2312c:	05010493          	addi	s1,sp,80
   23130:	00048513          	addi	a0,s1,0
   23134:	00020317          	auipc	t1,0x20
   23138:	1dc33303          	ld	t1,476(t1) # 43310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26ea0>
   2313c:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   23140:	00200713          	addi	a4,zero,2
   23144:	00016697          	auipc	a3,0x16
   23148:	b6c68693          	addi	a3,a3,-1172 # 38cb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d0>
   2314c:	00000613          	addi	a2,zero,0
   23150:	00000593          	addi	a1,zero,0
   23154:	00048513          	addi	a0,s1,0
   23158:	fa8f30ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2315c:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   23160:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   23164:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   23168:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2316c:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   23170:	03278c63          	beq	a5,s2,231a8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4f4>
      { _M_dataplus._M_p = __p; }
   23174:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   23178:	0104b783          	ld	a5,16(s1)
   2317c:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   23180:	0084b783          	ld	a5,8(s1)
   23184:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   23188:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2318c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   23190:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   23194:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   23198:	06010793          	addi	a5,sp,96
   2319c:	baf508e3          	beq	a0,a5,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   231a0:	e00f30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   231a4:	ba9ff06f          	jal	zero,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   231a8:	0084b603          	ld	a2,8(s1)
   231ac:	00160613          	addi	a2,a2,1
	if (__n == 0)
   231b0:	fc0608e3          	beq	a2,zero,23180 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4cc>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   231b4:	00090593          	addi	a1,s2,0
   231b8:	e88f30ef          	jal	ra,16840 <memcpy@plt>
   231bc:	fc5ff06f          	jal	zero,23180 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4cc>
    return ::to_string(v.as_uconstant());
   231c0:	a09fc0ef          	jal	ra,1fbc8 <dwarf::value::as_uconstant() const>
   231c4:	00050493          	addi	s1,a0,0
    string __str(__detail::__to_chars_len(__val), '\0');
   231c8:	00a00593          	addi	a1,zero,10
   231cc:	00020317          	auipc	t1,0x20
   231d0:	37433303          	ld	t1,884(t1) # 43540 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)@@Base+0x1f324>
   231d4:	000300e7          	jalr	ra,0(t1)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   231d8:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   231dc:	00f43023          	sd	a5,0(s0)
      { _M_construct(__n, __c); }
   231e0:	00000613          	addi	a2,zero,0
   231e4:	02051593          	slli	a1,a0,0x20
   231e8:	0205d593          	srli	a1,a1,0x20
   231ec:	00040513          	addi	a0,s0,0
   231f0:	e10f30ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   231f4:	00048613          	addi	a2,s1,0
   231f8:	00842583          	lw	a1,8(s0)
   231fc:	00043503          	ld	a0,0(s0)
   23200:	00020317          	auipc	t1,0x20
   23204:	20833303          	ld	t1,520(t1) # 43408 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)@@Base+0x1f15c>
   23208:	000300e7          	jalr	ra,0(t1)
    return __str;
   2320c:	b41ff06f          	jal	zero,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
    return ::to_string(v.as_sconstant());
   23210:	f39fc0ef          	jal	ra,20148 <dwarf::value::as_sconstant() const>
    const bool __neg = __val < 0;
   23214:	03f55913          	srli	s2,a0,0x3f
    const unsigned long __uval = __neg ? (unsigned long)~__val + 1ul : __val;
   23218:	43f55793          	srai	a5,a0,0x3f
   2321c:	00a7c4b3          	xor	s1,a5,a0
   23220:	40f484b3          	sub	s1,s1,a5
    const auto __len = __detail::__to_chars_len(__uval);
   23224:	00a00593          	addi	a1,zero,10
   23228:	00048513          	addi	a0,s1,0
   2322c:	00020317          	auipc	t1,0x20
   23230:	31433303          	ld	t1,788(t1) # 43540 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)@@Base+0x1f324>
   23234:	000300e7          	jalr	ra,0(t1)
   23238:	0005099b          	addiw	s3,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2323c:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   23240:	00f43023          	sd	a5,0(s0)
    string __str(__neg + __len, '-');
   23244:	00a905bb          	addw	a1,s2,a0
      { _M_construct(__n, __c); }
   23248:	02d00613          	addi	a2,zero,45
   2324c:	02059593          	slli	a1,a1,0x20
   23250:	0205d593          	srli	a1,a1,0x20
   23254:	00040513          	addi	a0,s0,0
   23258:	da8f30ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
	return _M_data()[__pos];
   2325c:	00043503          	ld	a0,0(s0)
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   23260:	00048613          	addi	a2,s1,0
   23264:	00098593          	addi	a1,s3,0
   23268:	01250533          	add	a0,a0,s2
   2326c:	00020317          	auipc	t1,0x20
   23270:	19c33303          	ld	t1,412(t1) # 43408 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)@@Base+0x1f15c>
   23274:	000300e7          	jalr	ra,0(t1)
    return __str;
   23278:	ad5ff06f          	jal	zero,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2327c:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   23280:	00f43023          	sd	a5,0(s0)
	_M_construct(__s, __end, forward_iterator_tag());
   23284:	00000693          	addi	a3,zero,0
   23288:	00015617          	auipc	a2,0x15
   2328c:	b2960613          	addi	a2,a2,-1239 # 37db1 <std::piecewise_construct+0x2e1>
   23290:	00015597          	auipc	a1,0x15
   23294:	b1858593          	addi	a1,a1,-1256 # 37da8 <std::piecewise_construct+0x2d8>
   23298:	00040513          	addi	a0,s0,0
   2329c:	00020317          	auipc	t1,0x20
   232a0:	08433303          	ld	t1,132(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   232a4:	000300e7          	jalr	ra,0(t1)
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   232a8:	aa5ff06f          	jal	zero,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
    return v.as_flag() ? "true" : "false";
   232ac:	905fd0ef          	jal	ra,20bb0 <dwarf::value::as_flag() const>
   232b0:	00015497          	auipc	s1,0x15
   232b4:	ab048493          	addi	s1,s1,-1360 # 37d60 <std::piecewise_construct+0x290>
   232b8:	00050663          	beq	a0,zero,232c4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x610>
   232bc:	00015497          	auipc	s1,0x15
   232c0:	a9c48493          	addi	s1,s1,-1380 # 37d58 <std::piecewise_construct+0x288>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   232c4:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   232c8:	00f43023          	sd	a5,0(s0)
	return __builtin_strlen(__s);
   232cc:	00048513          	addi	a0,s1,0
   232d0:	bb0f30ef          	jal	ra,16680 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   232d4:	00000693          	addi	a3,zero,0
   232d8:	00a48633          	add	a2,s1,a0
   232dc:	00048593          	addi	a1,s1,0
   232e0:	00040513          	addi	a0,s0,0
   232e4:	00020317          	auipc	t1,0x20
   232e8:	03c33303          	ld	t1,60(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   232ec:	000300e7          	jalr	ra,0(t1)
   232f0:	a5dff06f          	jal	zero,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
    return "<line 0x" + to_hex(v.as_sec_offset()) + ">";
   232f4:	9e0fe0ef          	jal	ra,214d4 <dwarf::value::as_sec_offset() const>
   232f8:	00050593          	addi	a1,a0,0
   232fc:	03010493          	addi	s1,sp,48
   23300:	00048513          	addi	a0,s1,0
   23304:	00020317          	auipc	t1,0x20
   23308:	00c33303          	ld	t1,12(t1) # 43310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26ea0>
   2330c:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   23310:	00800713          	addi	a4,zero,8
   23314:	00015697          	auipc	a3,0x15
   23318:	aa468693          	addi	a3,a3,-1372 # 37db8 <std::piecewise_construct+0x2e8>
   2331c:	00000613          	addi	a2,zero,0
   23320:	00000593          	addi	a1,zero,0
   23324:	00048513          	addi	a0,s1,0
   23328:	dd8f30ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2332c:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   23330:	06010793          	addi	a5,sp,96
   23334:	04f13823          	sd	a5,80(sp)
      { return _M_dataplus._M_p; }
   23338:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2333c:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   23340:	05278663          	beq	a5,s2,2338c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6d8>
      { _M_dataplus._M_p = __p; }
   23344:	04f13823          	sd	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   23348:	01053783          	ld	a5,16(a0)
   2334c:	06f13023          	sd	a5,96(sp)
      { _M_string_length = __length; }
   23350:	0084b783          	ld	a5,8(s1)
   23354:	04f13c23          	sd	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   23358:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2335c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   23360:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   23364:	05813703          	ld	a4,88(sp)
   23368:	fff00793          	addi	a5,zero,-1
   2336c:	0027d793          	srli	a5,a5,0x2
   23370:	02f70c63          	beq	a4,a5,233a8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6f4>
	return _M_append(__s, __n);
   23374:	00100613          	addi	a2,zero,1
   23378:	00015597          	auipc	a1,0x15
   2337c:	a3858593          	addi	a1,a1,-1480 # 37db0 <std::piecewise_construct+0x2e0>
   23380:	05010513          	addi	a0,sp,80
   23384:	aacf30ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   23388:	0580006f          	jal	zero,233e0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x72c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2338c:	00853603          	ld	a2,8(a0)
   23390:	00160613          	addi	a2,a2,1
	if (__n == 0)
   23394:	fa060ee3          	beq	a2,zero,23350 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x69c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   23398:	00090593          	addi	a1,s2,0
   2339c:	06010513          	addi	a0,sp,96
   233a0:	ca0f30ef          	jal	ra,16840 <memcpy@plt>
   233a4:	fadff06f          	jal	zero,23350 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x69c>
	  __throw_length_error(__N(__s));
   233a8:	00015517          	auipc	a0,0x15
   233ac:	9d850513          	addi	a0,a0,-1576 # 37d80 <std::piecewise_construct+0x2b0>
   233b0:	af0f30ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   233b4:	00050413          	addi	s0,a0,0
   233b8:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   233bc:	06010793          	addi	a5,sp,96
   233c0:	00f50463          	beq	a0,a5,233c8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x714>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   233c4:	bdcf30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   233c8:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   233cc:	04010793          	addi	a5,sp,64
   233d0:	00f50463          	beq	a0,a5,233d8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x724>
   233d4:	bccf30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   233d8:	00040513          	addi	a0,s0,0
   233dc:	db4f30ef          	jal	ra,16990 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   233e0:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   233e4:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   233e8:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   233ec:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   233f0:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   233f4:	05278463          	beq	a5,s2,2343c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x788>
      { _M_dataplus._M_p = __p; }
   233f8:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   233fc:	0104b783          	ld	a5,16(s1)
   23400:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   23404:	0084b783          	ld	a5,8(s1)
   23408:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2340c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   23410:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   23414:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   23418:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   2341c:	06010793          	addi	a5,sp,96
   23420:	00f50463          	beq	a0,a5,23428 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x774>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   23424:	b7cf30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23428:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   2342c:	04010793          	addi	a5,sp,64
   23430:	90f50ee3          	beq	a0,a5,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
   23434:	b6cf30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   23438:	915ff06f          	jal	zero,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2343c:	0084b603          	ld	a2,8(s1)
   23440:	00160613          	addi	a2,a2,1
	if (__n == 0)
   23444:	fc0600e3          	beq	a2,zero,23404 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x750>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   23448:	00090593          	addi	a1,s2,0
   2344c:	bf4f30ef          	jal	ra,16840 <memcpy@plt>
   23450:	fb5ff06f          	jal	zero,23404 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x750>
    return "<loclist 0x" + to_hex(v.as_sec_offset()) + ">";
   23454:	880fe0ef          	jal	ra,214d4 <dwarf::value::as_sec_offset() const>
   23458:	00050593          	addi	a1,a0,0
   2345c:	03010493          	addi	s1,sp,48
   23460:	00048513          	addi	a0,s1,0
   23464:	00020317          	auipc	t1,0x20
   23468:	eac33303          	ld	t1,-340(t1) # 43310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26ea0>
   2346c:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   23470:	00b00713          	addi	a4,zero,11
   23474:	00015697          	auipc	a3,0x15
   23478:	95468693          	addi	a3,a3,-1708 # 37dc8 <std::piecewise_construct+0x2f8>
   2347c:	00000613          	addi	a2,zero,0
   23480:	00000593          	addi	a1,zero,0
   23484:	00048513          	addi	a0,s1,0
   23488:	c78f30ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2348c:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   23490:	06010793          	addi	a5,sp,96
   23494:	04f13823          	sd	a5,80(sp)
      { return _M_dataplus._M_p; }
   23498:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2349c:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   234a0:	05278663          	beq	a5,s2,234ec <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x838>
      { _M_dataplus._M_p = __p; }
   234a4:	04f13823          	sd	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   234a8:	01053783          	ld	a5,16(a0)
   234ac:	06f13023          	sd	a5,96(sp)
      { _M_string_length = __length; }
   234b0:	0084b783          	ld	a5,8(s1)
   234b4:	04f13c23          	sd	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   234b8:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   234bc:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   234c0:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   234c4:	05813703          	ld	a4,88(sp)
   234c8:	fff00793          	addi	a5,zero,-1
   234cc:	0027d793          	srli	a5,a5,0x2
   234d0:	02f70c63          	beq	a4,a5,23508 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x854>
	return _M_append(__s, __n);
   234d4:	00100613          	addi	a2,zero,1
   234d8:	00015597          	auipc	a1,0x15
   234dc:	8d858593          	addi	a1,a1,-1832 # 37db0 <std::piecewise_construct+0x2e0>
   234e0:	05010513          	addi	a0,sp,80
   234e4:	94cf30ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   234e8:	0580006f          	jal	zero,23540 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x88c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   234ec:	00853603          	ld	a2,8(a0)
   234f0:	00160613          	addi	a2,a2,1
	if (__n == 0)
   234f4:	fa060ee3          	beq	a2,zero,234b0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7fc>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   234f8:	00090593          	addi	a1,s2,0
   234fc:	06010513          	addi	a0,sp,96
   23500:	b40f30ef          	jal	ra,16840 <memcpy@plt>
   23504:	fadff06f          	jal	zero,234b0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7fc>
	  __throw_length_error(__N(__s));
   23508:	00015517          	auipc	a0,0x15
   2350c:	87850513          	addi	a0,a0,-1928 # 37d80 <std::piecewise_construct+0x2b0>
   23510:	990f30ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   23514:	00050413          	addi	s0,a0,0
   23518:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   2351c:	06010793          	addi	a5,sp,96
   23520:	00f50463          	beq	a0,a5,23528 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x874>
   23524:	a7cf30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23528:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   2352c:	04010793          	addi	a5,sp,64
   23530:	00f50463          	beq	a0,a5,23538 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x884>
   23534:	a6cf30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   23538:	00040513          	addi	a0,s0,0
   2353c:	c54f30ef          	jal	ra,16990 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   23540:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   23544:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   23548:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2354c:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   23550:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   23554:	05278463          	beq	a5,s2,2359c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8e8>
      { _M_dataplus._M_p = __p; }
   23558:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2355c:	0104b783          	ld	a5,16(s1)
   23560:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   23564:	0084b783          	ld	a5,8(s1)
   23568:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2356c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   23570:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   23574:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   23578:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   2357c:	06010793          	addi	a5,sp,96
   23580:	00f50463          	beq	a0,a5,23588 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8d4>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   23584:	a1cf30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23588:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   2358c:	04010793          	addi	a5,sp,64
   23590:	faf50e63          	beq	a0,a5,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
   23594:	a0cf30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   23598:	fb4ff06f          	jal	zero,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2359c:	0084b603          	ld	a2,8(s1)
   235a0:	00160613          	addi	a2,a2,1
	if (__n == 0)
   235a4:	fc0600e3          	beq	a2,zero,23564 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8b0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   235a8:	00090593          	addi	a1,s2,0
   235ac:	a94f30ef          	jal	ra,16840 <memcpy@plt>
   235b0:	fb5ff06f          	jal	zero,23564 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8b0>
    return "<mac 0x" + to_hex(v.as_sec_offset()) + ">";
   235b4:	f21fd0ef          	jal	ra,214d4 <dwarf::value::as_sec_offset() const>
   235b8:	00050593          	addi	a1,a0,0
   235bc:	03010493          	addi	s1,sp,48
   235c0:	00048513          	addi	a0,s1,0
   235c4:	00020317          	auipc	t1,0x20
   235c8:	d4c33303          	ld	t1,-692(t1) # 43310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26ea0>
   235cc:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   235d0:	00700713          	addi	a4,zero,7
   235d4:	00015697          	auipc	a3,0x15
   235d8:	80468693          	addi	a3,a3,-2044 # 37dd8 <std::piecewise_construct+0x308>
   235dc:	00000613          	addi	a2,zero,0
   235e0:	00000593          	addi	a1,zero,0
   235e4:	00048513          	addi	a0,s1,0
   235e8:	b18f30ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   235ec:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   235f0:	06010793          	addi	a5,sp,96
   235f4:	04f13823          	sd	a5,80(sp)
      { return _M_dataplus._M_p; }
   235f8:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   235fc:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   23600:	05278663          	beq	a5,s2,2364c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x998>
      { _M_dataplus._M_p = __p; }
   23604:	04f13823          	sd	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   23608:	01053783          	ld	a5,16(a0)
   2360c:	06f13023          	sd	a5,96(sp)
      { _M_string_length = __length; }
   23610:	0084b783          	ld	a5,8(s1)
   23614:	04f13c23          	sd	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   23618:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2361c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   23620:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   23624:	05813703          	ld	a4,88(sp)
   23628:	fff00793          	addi	a5,zero,-1
   2362c:	0027d793          	srli	a5,a5,0x2
   23630:	02f70c63          	beq	a4,a5,23668 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9b4>
	return _M_append(__s, __n);
   23634:	00100613          	addi	a2,zero,1
   23638:	00014597          	auipc	a1,0x14
   2363c:	77858593          	addi	a1,a1,1912 # 37db0 <std::piecewise_construct+0x2e0>
   23640:	05010513          	addi	a0,sp,80
   23644:	fedf20ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   23648:	0580006f          	jal	zero,236a0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9ec>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2364c:	00853603          	ld	a2,8(a0)
   23650:	00160613          	addi	a2,a2,1
	if (__n == 0)
   23654:	fa060ee3          	beq	a2,zero,23610 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x95c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   23658:	00090593          	addi	a1,s2,0
   2365c:	06010513          	addi	a0,sp,96
   23660:	9e0f30ef          	jal	ra,16840 <memcpy@plt>
   23664:	fadff06f          	jal	zero,23610 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x95c>
	  __throw_length_error(__N(__s));
   23668:	00014517          	auipc	a0,0x14
   2366c:	71850513          	addi	a0,a0,1816 # 37d80 <std::piecewise_construct+0x2b0>
   23670:	830f30ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   23674:	00050413          	addi	s0,a0,0
   23678:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   2367c:	06010793          	addi	a5,sp,96
   23680:	00f50463          	beq	a0,a5,23688 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9d4>
   23684:	91cf30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23688:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   2368c:	04010793          	addi	a5,sp,64
   23690:	00f50463          	beq	a0,a5,23698 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9e4>
   23694:	90cf30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   23698:	00040513          	addi	a0,s0,0
   2369c:	af4f30ef          	jal	ra,16990 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   236a0:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   236a4:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   236a8:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   236ac:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   236b0:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   236b4:	05278463          	beq	a5,s2,236fc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa48>
      { _M_dataplus._M_p = __p; }
   236b8:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   236bc:	0104b783          	ld	a5,16(s1)
   236c0:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   236c4:	0084b783          	ld	a5,8(s1)
   236c8:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   236cc:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   236d0:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   236d4:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   236d8:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   236dc:	06010793          	addi	a5,sp,96
   236e0:	00f50463          	beq	a0,a5,236e8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa34>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   236e4:	8bcf30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   236e8:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   236ec:	04010793          	addi	a5,sp,64
   236f0:	e4f50e63          	beq	a0,a5,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
   236f4:	8acf30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   236f8:	e54ff06f          	jal	zero,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   236fc:	0084b603          	ld	a2,8(s1)
   23700:	00160613          	addi	a2,a2,1
	if (__n == 0)
   23704:	fc0600e3          	beq	a2,zero,236c4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa10>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   23708:	00090593          	addi	a1,s2,0
   2370c:	934f30ef          	jal	ra,16840 <memcpy@plt>
   23710:	fb5ff06f          	jal	zero,236c4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa10>
    return "<rangelist 0x" + to_hex(v.as_sec_offset()) + ">";
   23714:	dc1fd0ef          	jal	ra,214d4 <dwarf::value::as_sec_offset() const>
   23718:	00050593          	addi	a1,a0,0
   2371c:	03010493          	addi	s1,sp,48
   23720:	00048513          	addi	a0,s1,0
   23724:	00020317          	auipc	t1,0x20
   23728:	bec33303          	ld	t1,-1044(t1) # 43310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26ea0>
   2372c:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   23730:	00d00713          	addi	a4,zero,13
   23734:	00014697          	auipc	a3,0x14
   23738:	6ac68693          	addi	a3,a3,1708 # 37de0 <std::piecewise_construct+0x310>
   2373c:	00000613          	addi	a2,zero,0
   23740:	00000593          	addi	a1,zero,0
   23744:	00048513          	addi	a0,s1,0
   23748:	9b8f30ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2374c:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   23750:	06010793          	addi	a5,sp,96
   23754:	04f13823          	sd	a5,80(sp)
      { return _M_dataplus._M_p; }
   23758:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2375c:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   23760:	05278663          	beq	a5,s2,237ac <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xaf8>
      { _M_dataplus._M_p = __p; }
   23764:	04f13823          	sd	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   23768:	01053783          	ld	a5,16(a0)
   2376c:	06f13023          	sd	a5,96(sp)
      { _M_string_length = __length; }
   23770:	0084b783          	ld	a5,8(s1)
   23774:	04f13c23          	sd	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   23778:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2377c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   23780:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   23784:	05813703          	ld	a4,88(sp)
   23788:	fff00793          	addi	a5,zero,-1
   2378c:	0027d793          	srli	a5,a5,0x2
   23790:	02f70c63          	beq	a4,a5,237c8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb14>
	return _M_append(__s, __n);
   23794:	00100613          	addi	a2,zero,1
   23798:	00014597          	auipc	a1,0x14
   2379c:	61858593          	addi	a1,a1,1560 # 37db0 <std::piecewise_construct+0x2e0>
   237a0:	05010513          	addi	a0,sp,80
   237a4:	e8df20ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   237a8:	0580006f          	jal	zero,23800 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb4c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   237ac:	00853603          	ld	a2,8(a0)
   237b0:	00160613          	addi	a2,a2,1
	if (__n == 0)
   237b4:	fa060ee3          	beq	a2,zero,23770 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xabc>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   237b8:	00090593          	addi	a1,s2,0
   237bc:	06010513          	addi	a0,sp,96
   237c0:	880f30ef          	jal	ra,16840 <memcpy@plt>
   237c4:	fadff06f          	jal	zero,23770 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xabc>
	  __throw_length_error(__N(__s));
   237c8:	00014517          	auipc	a0,0x14
   237cc:	5b850513          	addi	a0,a0,1464 # 37d80 <std::piecewise_construct+0x2b0>
   237d0:	ed1f20ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   237d4:	00050413          	addi	s0,a0,0
   237d8:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   237dc:	06010793          	addi	a5,sp,96
   237e0:	00f50463          	beq	a0,a5,237e8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb34>
   237e4:	fbdf20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   237e8:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   237ec:	04010793          	addi	a5,sp,64
   237f0:	00f50463          	beq	a0,a5,237f8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb44>
   237f4:	fadf20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   237f8:	00040513          	addi	a0,s0,0
   237fc:	994f30ef          	jal	ra,16990 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   23800:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   23804:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   23808:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2380c:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   23810:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   23814:	05278463          	beq	a5,s2,2385c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xba8>
      { _M_dataplus._M_p = __p; }
   23818:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2381c:	0104b783          	ld	a5,16(s1)
   23820:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   23824:	0084b783          	ld	a5,8(s1)
   23828:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2382c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   23830:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   23834:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   23838:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   2383c:	06010793          	addi	a5,sp,96
   23840:	00f50463          	beq	a0,a5,23848 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb94>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   23844:	f5df20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23848:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   2384c:	04010793          	addi	a5,sp,64
   23850:	cef50e63          	beq	a0,a5,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
   23854:	f4df20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   23858:	cf4ff06f          	jal	zero,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2385c:	0084b603          	ld	a2,8(s1)
   23860:	00160613          	addi	a2,a2,1
	if (__n == 0)
   23864:	fc0600e3          	beq	a2,zero,23824 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb70>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   23868:	00090593          	addi	a1,s2,0
   2386c:	fd5f20ef          	jal	ra,16840 <memcpy@plt>
   23870:	fb5ff06f          	jal	zero,23824 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb70>
    die d = v.as_reference();
   23874:	00050593          	addi	a1,a0,0
   23878:	05010493          	addi	s1,sp,80
   2387c:	00048513          	addi	a0,s1,0
   23880:	819fe0ef          	jal	ra,22098 <dwarf::value::as_reference() const>
    auto tu = dynamic_cast<const type_unit *>(&d.get_unit());
   23884:	00048513          	addi	a0,s1,0
   23888:	9f5fa0ef          	jal	ra,1e27c <dwarf::die::get_unit() const>
   2388c:	18050863          	beq	a0,zero,23a1c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xd68>
   23890:	00000693          	addi	a3,zero,0
   23894:	00020617          	auipc	a2,0x20
   23898:	d2c63603          	ld	a2,-724(a2) # 435c0 <typeinfo for dwarf::type_unit@@Base+0xd18>
   2389c:	00020597          	auipc	a1,0x20
   238a0:	a1c5b583          	ld	a1,-1508(a1) # 432b8 <typeinfo for dwarf::unit@@Base+0xa38>
   238a4:	f4df20ef          	jal	ra,167f0 <__dynamic_cast@plt>
    if (tu)
   238a8:	16050a63          	beq	a0,zero,23a1c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xd68>
      return "<.debug_types+0x" + to_hex(d.get_section_offset()) + ">";
   238ac:	00048513          	addi	a0,s1,0
   238b0:	9d5fa0ef          	jal	ra,1e284 <dwarf::die::get_section_offset() const>
   238b4:	00050593          	addi	a1,a0,0
   238b8:	01010513          	addi	a0,sp,16
   238bc:	00020317          	auipc	t1,0x20
   238c0:	a5433303          	ld	t1,-1452(t1) # 43310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26ea0>
   238c4:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   238c8:	01000713          	addi	a4,zero,16
   238cc:	00014697          	auipc	a3,0x14
   238d0:	52468693          	addi	a3,a3,1316 # 37df0 <std::piecewise_construct+0x320>
   238d4:	00000613          	addi	a2,zero,0
   238d8:	00000593          	addi	a1,zero,0
   238dc:	01010513          	addi	a0,sp,16
   238e0:	820f30ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   238e4:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   238e8:	04010793          	addi	a5,sp,64
   238ec:	02f13823          	sd	a5,48(sp)
      { return _M_dataplus._M_p; }
   238f0:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   238f4:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   238f8:	05278663          	beq	a5,s2,23944 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xc90>
      { _M_dataplus._M_p = __p; }
   238fc:	02f13823          	sd	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   23900:	01053783          	ld	a5,16(a0)
   23904:	04f13023          	sd	a5,64(sp)
      { _M_string_length = __length; }
   23908:	0084b783          	ld	a5,8(s1)
   2390c:	02f13c23          	sd	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   23910:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   23914:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   23918:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   2391c:	03813703          	ld	a4,56(sp)
   23920:	fff00793          	addi	a5,zero,-1
   23924:	0027d793          	srli	a5,a5,0x2
   23928:	02f70c63          	beq	a4,a5,23960 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xcac>
	return _M_append(__s, __n);
   2392c:	00100613          	addi	a2,zero,1
   23930:	00014597          	auipc	a1,0x14
   23934:	48058593          	addi	a1,a1,1152 # 37db0 <std::piecewise_construct+0x2e0>
   23938:	03010513          	addi	a0,sp,48
   2393c:	cf5f20ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   23940:	0680006f          	jal	zero,239a8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xcf4>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   23944:	00853603          	ld	a2,8(a0)
   23948:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2394c:	fa060ee3          	beq	a2,zero,23908 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xc54>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   23950:	00090593          	addi	a1,s2,0
   23954:	04010513          	addi	a0,sp,64
   23958:	ee9f20ef          	jal	ra,16840 <memcpy@plt>
   2395c:	fadff06f          	jal	zero,23908 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xc54>
	  __throw_length_error(__N(__s));
   23960:	00014517          	auipc	a0,0x14
   23964:	42050513          	addi	a0,a0,1056 # 37d80 <std::piecewise_construct+0x2b0>
   23968:	d39f20ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   2396c:	00050413          	addi	s0,a0,0
   23970:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   23974:	04010793          	addi	a5,sp,64
   23978:	00f50463          	beq	a0,a5,23980 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xccc>
   2397c:	e25f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23980:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   23984:	02010793          	addi	a5,sp,32
   23988:	00f50463          	beq	a0,a5,23990 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xcdc>
   2398c:	e15f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
class die {
   23990:	07010513          	addi	a0,sp,112
   23994:	00020317          	auipc	t1,0x20
   23998:	a6c33303          	ld	t1,-1428(t1) # 43400 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b8b0>
   2399c:	000300e7          	jalr	ra,0(t1)
   239a0:	00040513          	addi	a0,s0,0
   239a4:	fedf20ef          	jal	ra,16990 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   239a8:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   239ac:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   239b0:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   239b4:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   239b8:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   239bc:	05278463          	beq	a5,s2,23a04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xd50>
      { _M_dataplus._M_p = __p; }
   239c0:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   239c4:	0104b783          	ld	a5,16(s1)
   239c8:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   239cc:	0084b783          	ld	a5,8(s1)
   239d0:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   239d4:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   239d8:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   239dc:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   239e0:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   239e4:	04010793          	addi	a5,sp,64
   239e8:	00f50463          	beq	a0,a5,239f0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xd3c>
   239ec:	db5f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   239f0:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   239f4:	02010793          	addi	a5,sp,32
   239f8:	16f50263          	beq	a0,a5,23b5c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xea8>
   239fc:	da5f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   23a00:	15c0006f          	jal	zero,23b5c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xea8>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   23a04:	0084b603          	ld	a2,8(s1)
   23a08:	00160613          	addi	a2,a2,1
	if (__n == 0)
   23a0c:	fc0600e3          	beq	a2,zero,239cc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xd18>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   23a10:	00090593          	addi	a1,s2,0
   23a14:	e2df20ef          	jal	ra,16840 <memcpy@plt>
   23a18:	fb5ff06f          	jal	zero,239cc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xd18>
    return "<0x" + to_hex(d.get_section_offset()) + ">";
   23a1c:	05010513          	addi	a0,sp,80
   23a20:	865fa0ef          	jal	ra,1e284 <dwarf::die::get_section_offset() const>
   23a24:	00050593          	addi	a1,a0,0
   23a28:	01010513          	addi	a0,sp,16
   23a2c:	00020317          	auipc	t1,0x20
   23a30:	8e433303          	ld	t1,-1820(t1) # 43310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26ea0>
   23a34:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   23a38:	00300713          	addi	a4,zero,3
   23a3c:	00014697          	auipc	a3,0x14
   23a40:	3cc68693          	addi	a3,a3,972 # 37e08 <std::piecewise_construct+0x338>
   23a44:	00000613          	addi	a2,zero,0
   23a48:	00000593          	addi	a1,zero,0
   23a4c:	01010513          	addi	a0,sp,16
   23a50:	eb1f20ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   23a54:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   23a58:	04010793          	addi	a5,sp,64
   23a5c:	02f13823          	sd	a5,48(sp)
      { return _M_dataplus._M_p; }
   23a60:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   23a64:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   23a68:	05278663          	beq	a5,s2,23ab4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe00>
      { _M_dataplus._M_p = __p; }
   23a6c:	02f13823          	sd	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   23a70:	01053783          	ld	a5,16(a0)
   23a74:	04f13023          	sd	a5,64(sp)
      { _M_string_length = __length; }
   23a78:	0084b783          	ld	a5,8(s1)
   23a7c:	02f13c23          	sd	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   23a80:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   23a84:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   23a88:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   23a8c:	03813703          	ld	a4,56(sp)
   23a90:	fff00793          	addi	a5,zero,-1
   23a94:	0027d793          	srli	a5,a5,0x2
   23a98:	02f70c63          	beq	a4,a5,23ad0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe1c>
	return _M_append(__s, __n);
   23a9c:	00100613          	addi	a2,zero,1
   23aa0:	00014597          	auipc	a1,0x14
   23aa4:	31058593          	addi	a1,a1,784 # 37db0 <std::piecewise_construct+0x2e0>
   23aa8:	03010513          	addi	a0,sp,48
   23aac:	b85f20ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   23ab0:	0540006f          	jal	zero,23b04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe50>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   23ab4:	00853603          	ld	a2,8(a0)
   23ab8:	00160613          	addi	a2,a2,1
	if (__n == 0)
   23abc:	fa060ee3          	beq	a2,zero,23a78 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xdc4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   23ac0:	00090593          	addi	a1,s2,0
   23ac4:	04010513          	addi	a0,sp,64
   23ac8:	d79f20ef          	jal	ra,16840 <memcpy@plt>
   23acc:	fadff06f          	jal	zero,23a78 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xdc4>
	  __throw_length_error(__N(__s));
   23ad0:	00014517          	auipc	a0,0x14
   23ad4:	2b050513          	addi	a0,a0,688 # 37d80 <std::piecewise_construct+0x2b0>
   23ad8:	bc9f20ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   23adc:	00050413          	addi	s0,a0,0
   23ae0:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   23ae4:	04010793          	addi	a5,sp,64
   23ae8:	00f50463          	beq	a0,a5,23af0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe3c>
   23aec:	cb5f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23af0:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   23af4:	02010793          	addi	a5,sp,32
   23af8:	e8f50ce3          	beq	a0,a5,23990 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xcdc>
   23afc:	ca5f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   23b00:	e91ff06f          	jal	zero,23990 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xcdc>
	return _M_append(__s, __n);
   23b04:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   23b08:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   23b0c:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   23b10:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   23b14:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   23b18:	07278a63          	beq	a5,s2,23b8c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xed8>
      { _M_dataplus._M_p = __p; }
   23b1c:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   23b20:	0104b783          	ld	a5,16(s1)
   23b24:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   23b28:	0084b783          	ld	a5,8(s1)
   23b2c:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   23b30:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   23b34:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   23b38:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   23b3c:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   23b40:	04010793          	addi	a5,sp,64
   23b44:	00f50463          	beq	a0,a5,23b4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe98>
   23b48:	c59f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23b4c:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   23b50:	02010793          	addi	a5,sp,32
   23b54:	00f50463          	beq	a0,a5,23b5c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xea8>
   23b58:	c49f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
    for (T *p = base; p < end; ++p)
   23b5c:	0a013503          	ld	a0,160(sp)
   23b60:	0a813783          	ld	a5,168(sp)
   23b64:	00f57a63          	bgeu	a0,a5,23b78 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xec4>
   23b68:	00050793          	addi	a5,a0,0
   23b6c:	00878793          	addi	a5,a5,8
   23b70:	0a813703          	ld	a4,168(sp)
   23b74:	fee7ece3          	bltu	a5,a4,23b6c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xeb8>
    if ((char *)base != buf)
   23b78:	07010793          	addi	a5,sp,112
   23b7c:	9cf50863          	beq	a0,a5,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
      delete[] (char *)base;
   23b80:	9c050663          	beq	a0,zero,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
   23b84:	ccdf20ef          	jal	ra,16850 <operator delete[](void*)@plt>
   23b88:	9c4ff06f          	jal	zero,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   23b8c:	0084b603          	ld	a2,8(s1)
   23b90:	00160613          	addi	a2,a2,1
	if (__n == 0)
   23b94:	f8060ae3          	beq	a2,zero,23b28 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe74>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   23b98:	00090593          	addi	a1,s2,0
   23b9c:	ca5f20ef          	jal	ra,16840 <memcpy@plt>
   23ba0:	f89ff06f          	jal	zero,23b28 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe74>
    return v.as_string();
   23ba4:	00050593          	addi	a1,a0,0
   23ba8:	00040513          	addi	a0,s0,0
   23bac:	c80fe0ef          	jal	ra,2202c <dwarf::value::as_string[abi:cxx11]() const>
   23bb0:	99cff06f          	jal	zero,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
  return "<unexpected value type " + to_string(v.get_type()) + ">";
   23bb4:	03010493          	addi	s1,sp,48
   23bb8:	00048513          	addi	a0,s1,0
   23bbc:	0b40c0ef          	jal	ra,2fc70 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   23bc0:	01700713          	addi	a4,zero,23
   23bc4:	00014697          	auipc	a3,0x14
   23bc8:	24c68693          	addi	a3,a3,588 # 37e10 <std::piecewise_construct+0x340>
   23bcc:	00000613          	addi	a2,zero,0
   23bd0:	00000593          	addi	a1,zero,0
   23bd4:	00048513          	addi	a0,s1,0
   23bd8:	d29f20ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   23bdc:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   23be0:	06010793          	addi	a5,sp,96
   23be4:	04f13823          	sd	a5,80(sp)
      { return _M_dataplus._M_p; }
   23be8:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   23bec:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   23bf0:	05278663          	beq	a5,s2,23c3c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xf88>
      { _M_dataplus._M_p = __p; }
   23bf4:	04f13823          	sd	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   23bf8:	01053783          	ld	a5,16(a0)
   23bfc:	06f13023          	sd	a5,96(sp)
      { _M_string_length = __length; }
   23c00:	0084b783          	ld	a5,8(s1)
   23c04:	04f13c23          	sd	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   23c08:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   23c0c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   23c10:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   23c14:	05813703          	ld	a4,88(sp)
   23c18:	fff00793          	addi	a5,zero,-1
   23c1c:	0027d793          	srli	a5,a5,0x2
   23c20:	02f70c63          	beq	a4,a5,23c58 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xfa4>
	return _M_append(__s, __n);
   23c24:	00100613          	addi	a2,zero,1
   23c28:	00014597          	auipc	a1,0x14
   23c2c:	18858593          	addi	a1,a1,392 # 37db0 <std::piecewise_construct+0x2e0>
   23c30:	05010513          	addi	a0,sp,80
   23c34:	9fdf20ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   23c38:	0580006f          	jal	zero,23c90 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xfdc>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   23c3c:	00853603          	ld	a2,8(a0)
   23c40:	00160613          	addi	a2,a2,1
	if (__n == 0)
   23c44:	fa060ee3          	beq	a2,zero,23c00 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xf4c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   23c48:	00090593          	addi	a1,s2,0
   23c4c:	06010513          	addi	a0,sp,96
   23c50:	bf1f20ef          	jal	ra,16840 <memcpy@plt>
   23c54:	fadff06f          	jal	zero,23c00 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xf4c>
	  __throw_length_error(__N(__s));
   23c58:	00014517          	auipc	a0,0x14
   23c5c:	12850513          	addi	a0,a0,296 # 37d80 <std::piecewise_construct+0x2b0>
   23c60:	a41f20ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   23c64:	00050413          	addi	s0,a0,0
   23c68:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   23c6c:	06010793          	addi	a5,sp,96
   23c70:	00f50463          	beq	a0,a5,23c78 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xfc4>
   23c74:	b2df20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23c78:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   23c7c:	04010793          	addi	a5,sp,64
   23c80:	00f50463          	beq	a0,a5,23c88 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xfd4>
   23c84:	b1df20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   23c88:	00040513          	addi	a0,s0,0
   23c8c:	d05f20ef          	jal	ra,16990 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   23c90:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   23c94:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   23c98:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   23c9c:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   23ca0:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   23ca4:	05278663          	beq	a5,s2,23cf0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x103c>
      { _M_dataplus._M_p = __p; }
   23ca8:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   23cac:	0104b783          	ld	a5,16(s1)
   23cb0:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   23cb4:	0084b783          	ld	a5,8(s1)
   23cb8:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   23cbc:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   23cc0:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   23cc4:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   23cc8:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   23ccc:	06010793          	addi	a5,sp,96
   23cd0:	00f50463          	beq	a0,a5,23cd8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1024>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   23cd4:	acdf20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23cd8:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   23cdc:	04010793          	addi	a5,sp,64
   23ce0:	00f51463          	bne	a0,a5,23ce8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1034>
   23ce4:	868ff06f          	jal	zero,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
   23ce8:	ab9f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   23cec:	860ff06f          	jal	zero,22d4c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   23cf0:	0084b603          	ld	a2,8(s1)
   23cf4:	00160613          	addi	a2,a2,1
	if (__n == 0)
   23cf8:	fa060ee3          	beq	a2,zero,23cb4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1000>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   23cfc:	00090593          	addi	a1,s2,0
   23d00:	b41f20ef          	jal	ra,16840 <memcpy@plt>
   23d04:	fb1ff06f          	jal	zero,23cb4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1000>
      { return _M_dataplus._M_p; }
   23d08:	00050413          	addi	s0,a0,0
   23d0c:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   23d10:	06010793          	addi	a5,sp,96
   23d14:	00f50463          	beq	a0,a5,23d1c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1068>
   23d18:	a89f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   23d1c:	00040513          	addi	a0,s0,0
   23d20:	c71f20ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   23d24:	00050413          	addi	s0,a0,0
   23d28:	adcff06f          	jal	zero,23004 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x350>
   23d2c:	00050413          	addi	s0,a0,0
   23d30:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   23d34:	06010793          	addi	a5,sp,96
   23d38:	00f50463          	beq	a0,a5,23d40 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x108c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   23d3c:	a65f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   23d40:	00040513          	addi	a0,s0,0
   23d44:	c4df20ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   23d48:	00050413          	addi	s0,a0,0
   23d4c:	e7cff06f          	jal	zero,233c8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x714>
   23d50:	00050413          	addi	s0,a0,0
   23d54:	fd4ff06f          	jal	zero,23528 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x874>
   23d58:	00050413          	addi	s0,a0,0
   23d5c:	92dff06f          	jal	zero,23688 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9d4>
   23d60:	00050413          	addi	s0,a0,0
   23d64:	a85ff06f          	jal	zero,237e8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb34>
   23d68:	00050413          	addi	s0,a0,0
   23d6c:	c15ff06f          	jal	zero,23980 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xccc>
   23d70:	00050413          	addi	s0,a0,0
   23d74:	d7dff06f          	jal	zero,23af0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe3c>
   23d78:	00050413          	addi	s0,a0,0
   23d7c:	c15ff06f          	jal	zero,23990 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xcdc>
   23d80:	00050413          	addi	s0,a0,0
   23d84:	ef5ff06f          	jal	zero,23c78 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xfc4>

0000000000023d88 <dwarf::value_type_mismatch::~value_type_mismatch()>:
class value_type_mismatch : public std::logic_error {
   23d88:	ff010113          	addi	sp,sp,-16
   23d8c:	00113423          	sd	ra,8(sp)
   23d90:	0001f797          	auipc	a5,0x1f
   23d94:	6d07b783          	ld	a5,1744(a5) # 43460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   23d98:	01078793          	addi	a5,a5,16
   23d9c:	00f53023          	sd	a5,0(a0)
   23da0:	c01f20ef          	jal	ra,169a0 <std::logic_error::~logic_error()@plt>
   23da4:	00813083          	ld	ra,8(sp)
   23da8:	01010113          	addi	sp,sp,16
   23dac:	00008067          	jalr	zero,0(ra)

0000000000023db0 <dwarf::value_type_mismatch::~value_type_mismatch()>:
   23db0:	ff010113          	addi	sp,sp,-16
   23db4:	00113423          	sd	ra,8(sp)
   23db8:	00813023          	sd	s0,0(sp)
   23dbc:	00050413          	addi	s0,a0,0
   23dc0:	0001f797          	auipc	a5,0x1f
   23dc4:	6a07b783          	ld	a5,1696(a5) # 43460 <vtable for dwarf::value_type_mismatch@@Base+0xa28>
   23dc8:	01078793          	addi	a5,a5,16
   23dcc:	00f53023          	sd	a5,0(a0)
   23dd0:	bd1f20ef          	jal	ra,169a0 <std::logic_error::~logic_error()@plt>
   23dd4:	00040513          	addi	a0,s0,0
   23dd8:	9c9f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
   23ddc:	00813083          	ld	ra,8(sp)
   23de0:	00013403          	ld	s0,0(sp)
   23de4:	01010113          	addi	sp,sp,16
   23de8:	00008067          	jalr	zero,0(ra)

0000000000023dec <dwarf::cursor::address()>:
  taddr address() {
   23dec:	f8010113          	addi	sp,sp,-128
   23df0:	06113c23          	sd	ra,120(sp)
   23df4:	06813823          	sd	s0,112(sp)
   23df8:	06913423          	sd	s1,104(sp)
   23dfc:	00050413          	addi	s0,a0,0
      { return _M_ptr; }
   23e00:	00053703          	ld	a4,0(a0)
    switch (sec->addr_size) {
   23e04:	02072783          	lw	a5,32(a4)
   23e08:	00400693          	addi	a3,zero,4
   23e0c:	10d78063          	beq	a5,a3,23f0c <dwarf::cursor::address()+0x120>
   23e10:	04f6ee63          	bltu	a3,a5,23e6c <dwarf::cursor::address()+0x80>
   23e14:	00100693          	addi	a3,zero,1
   23e18:	0ad78c63          	beq	a5,a3,23ed0 <dwarf::cursor::address()+0xe4>
   23e1c:	00200693          	addi	a3,zero,2
   23e20:	18d79c63          	bne	a5,a3,23fb8 <dwarf::cursor::address()+0x1cc>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23e24:	01073703          	ld	a4,16(a4)
   23e28:	01053783          	ld	a5,16(a0)
   23e2c:	40f70633          	sub	a2,a4,a5
   23e30:	00100693          	addi	a3,zero,1
   23e34:	00c6f463          	bgeu	a3,a2,23e3c <dwarf::cursor::address()+0x50>
   23e38:	00e7e663          	bltu	a5,a4,23e44 <dwarf::cursor::address()+0x58>
      underflow();
   23e3c:	00040513          	addi	a0,s0,0
   23e40:	b05f90ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   23e44:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   23e48:	00043783          	ld	a5,0(s0)
   23e4c:	01c7a783          	lw	a5,28(a5)
   23e50:	0a079463          	bne	a5,zero,23ef8 <dwarf::cursor::address()+0x10c>
        val |= ((uint64_t)p[i]) << (i * 8);
   23e54:	00174783          	lbu	a5,1(a4)
   23e58:	00879793          	slli	a5,a5,0x8
   23e5c:	00074683          	lbu	a3,0(a4)
   23e60:	00d7e533          	or	a0,a5,a3
    pos += sizeof(T);
   23e64:	00270713          	addi	a4,a4,2
      return fixed<uint16_t>();
   23e68:	39c0006f          	jal	zero,24204 <dwarf::cursor::address()+0x418>
    switch (sec->addr_size) {
   23e6c:	00800693          	addi	a3,zero,8
   23e70:	14d79463          	bne	a5,a3,23fb8 <dwarf::cursor::address()+0x1cc>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23e74:	01073703          	ld	a4,16(a4)
   23e78:	01053783          	ld	a5,16(a0)
   23e7c:	40f70633          	sub	a2,a4,a5
   23e80:	00700693          	addi	a3,zero,7
   23e84:	00c6f463          	bgeu	a3,a2,23e8c <dwarf::cursor::address()+0xa0>
   23e88:	00e7e663          	bltu	a5,a4,23e94 <dwarf::cursor::address()+0xa8>
      underflow();
   23e8c:	00040513          	addi	a0,s0,0
   23e90:	ab5f90ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   23e94:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   23e98:	00043783          	ld	a5,0(s0)
   23e9c:	01c7a783          	lw	a5,28(a5)
   23ea0:	0e079a63          	bne	a5,zero,23f94 <dwarf::cursor::address()+0x1a8>
   23ea4:	00070613          	addi	a2,a4,0
    uint64_t val = 0;
   23ea8:	00000513          	addi	a0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   23eac:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   23eb0:	00064683          	lbu	a3,0(a2)
   23eb4:	00f696b3          	sll	a3,a3,a5
   23eb8:	00d56533          	or	a0,a0,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   23ebc:	00160613          	addi	a2,a2,1
   23ec0:	0087879b          	addiw	a5,a5,8
   23ec4:	feb796e3          	bne	a5,a1,23eb0 <dwarf::cursor::address()+0xc4>
    pos += sizeof(T);
   23ec8:	00870713          	addi	a4,a4,8
      return fixed<uint64_t>();
   23ecc:	3380006f          	jal	zero,24204 <dwarf::cursor::address()+0x418>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23ed0:	01073703          	ld	a4,16(a4)
   23ed4:	01053783          	ld	a5,16(a0)
   23ed8:	00e7e463          	bltu	a5,a4,23ee0 <dwarf::cursor::address()+0xf4>
      underflow();
   23edc:	a69f90ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   23ee0:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   23ee4:	00043783          	ld	a5,0(s0)
   23ee8:	01c7a783          	lw	a5,28(a5)
   23eec:	30078863          	beq	a5,zero,241fc <dwarf::cursor::address()+0x410>
        val = (val << 8) | (uint64_t)p[i];
   23ef0:	00074503          	lbu	a0,0(a4)
      for (unsigned i = 0; i < sizeof(T); i++)
   23ef4:	30c0006f          	jal	zero,24200 <dwarf::cursor::address()+0x414>
        val = (val << 8) | (uint64_t)p[i];
   23ef8:	00074783          	lbu	a5,0(a4)
   23efc:	00879793          	slli	a5,a5,0x8
   23f00:	00174683          	lbu	a3,1(a4)
   23f04:	00d7e533          	or	a0,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   23f08:	f5dff06f          	jal	zero,23e64 <dwarf::cursor::address()+0x78>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23f0c:	01073703          	ld	a4,16(a4)
   23f10:	01053783          	ld	a5,16(a0)
   23f14:	40f70633          	sub	a2,a4,a5
   23f18:	00300693          	addi	a3,zero,3
   23f1c:	00c6f463          	bgeu	a3,a2,23f24 <dwarf::cursor::address()+0x138>
   23f20:	00e7e663          	bltu	a5,a4,23f2c <dwarf::cursor::address()+0x140>
      underflow();
   23f24:	00040513          	addi	a0,s0,0
   23f28:	a1df90ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   23f2c:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   23f30:	00043783          	ld	a5,0(s0)
   23f34:	01c7a783          	lw	a5,28(a5)
   23f38:	02079c63          	bne	a5,zero,23f70 <dwarf::cursor::address()+0x184>
   23f3c:	00070593          	addi	a1,a4,0
   23f40:	00000693          	addi	a3,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   23f44:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   23f48:	0005c603          	lbu	a2,0(a1)
   23f4c:	00d61633          	sll	a2,a2,a3
   23f50:	00c7e7b3          	or	a5,a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   23f54:	00158593          	addi	a1,a1,1
   23f58:	0086869b          	addiw	a3,a3,8
   23f5c:	fea696e3          	bne	a3,a0,23f48 <dwarf::cursor::address()+0x15c>
    pos += sizeof(T);
   23f60:	00470713          	addi	a4,a4,4
   23f64:	02079513          	slli	a0,a5,0x20
   23f68:	02055513          	srli	a0,a0,0x20
      return fixed<uint32_t>();
   23f6c:	2980006f          	jal	zero,24204 <dwarf::cursor::address()+0x418>
   23f70:	00070693          	addi	a3,a4,0
   23f74:	00470593          	addi	a1,a4,4
    uint64_t val = 0;
   23f78:	00000793          	addi	a5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   23f7c:	00879793          	slli	a5,a5,0x8
   23f80:	0006c603          	lbu	a2,0(a3)
   23f84:	00f667b3          	or	a5,a2,a5
      for (unsigned i = 0; i < sizeof(T); i++)
   23f88:	00168693          	addi	a3,a3,1
   23f8c:	fed598e3          	bne	a1,a3,23f7c <dwarf::cursor::address()+0x190>
   23f90:	fd1ff06f          	jal	zero,23f60 <dwarf::cursor::address()+0x174>
   23f94:	00070793          	addi	a5,a4,0
   23f98:	00870613          	addi	a2,a4,8
    uint64_t val = 0;
   23f9c:	00000513          	addi	a0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   23fa0:	00851513          	slli	a0,a0,0x8
   23fa4:	0007c683          	lbu	a3,0(a5)
   23fa8:	00a6e533          	or	a0,a3,a0
      for (unsigned i = 0; i < sizeof(T); i++)
   23fac:	00178793          	addi	a5,a5,1
   23fb0:	fec798e3          	bne	a5,a2,23fa0 <dwarf::cursor::address()+0x1b4>
   23fb4:	f15ff06f          	jal	zero,23ec8 <dwarf::cursor::address()+0xdc>
          "address size " + std::to_string(sec->addr_size) + " not supported");
   23fb8:	01000513          	addi	a0,zero,16
   23fbc:	ed4f20ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   23fc0:	00050493          	addi	s1,a0,0
   23fc4:	00043783          	ld	a5,0(s0)
   23fc8:	0207a403          	lw	s0,32(a5)
   23fcc:	00040793          	addi	a5,s0,0
      unsigned __n = 1;
   23fd0:	00100593          	addi	a1,zero,1
	  if (__value < (unsigned)__base) return __n;
   23fd4:	00900893          	addi	a7,zero,9
	  if (__value < __b2) return __n + 1;
   23fd8:	06300813          	addi	a6,zero,99
	  if (__value < __b3) return __n + 2;
   23fdc:	3e700513          	addi	a0,zero,999
	  if (__value < __b4) return __n + 3;
   23fe0:	00002737          	lui	a4,0x2
   23fe4:	70f70613          	addi	a2,a4,1807 # 270f <__abi_tag-0xdb85>
	  __value /= __b4;
   23fe8:	71070713          	addi	a4,a4,1808
	  if (__value < (unsigned)__base) return __n;
   23fec:	00f8f663          	bgeu	a7,a5,23ff8 <dwarf::cursor::address()+0x20c>
	  if (__value < __b2) return __n + 1;
   23ff0:	08f86e63          	bltu	a6,a5,2408c <dwarf::cursor::address()+0x2a0>
   23ff4:	0015859b          	addiw	a1,a1,1
	: allocator_type(__a), _M_p(__dat) { }
   23ff8:	01010793          	addi	a5,sp,16
   23ffc:	00f13023          	sd	a5,0(sp)
      { _M_construct(__n, __c); }
   24000:	00000613          	addi	a2,zero,0
   24004:	02059593          	slli	a1,a1,0x20
   24008:	0205d593          	srli	a1,a1,0x20
   2400c:	00010513          	addi	a0,sp,0
   24010:	ff0f20ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   24014:	00013603          	ld	a2,0(sp)
      unsigned __pos = __len - 1;
   24018:	00813703          	ld	a4,8(sp)
   2401c:	fff7071b          	addiw	a4,a4,-1
      while (__val >= 100)
   24020:	06300893          	addi	a7,zero,99
	  auto const __num = (__val % 100) * 2;
   24024:	06400813          	addi	a6,zero,100
	  __first[__pos] = __digits[__num + 1];
   24028:	0001f517          	auipc	a0,0x1f
   2402c:	35053503          	ld	a0,848(a0) # 43378 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb9a0>
      while (__val >= 100)
   24030:	0888e663          	bltu	a7,s0,240bc <dwarf::cursor::address()+0x2d0>
      if (__val >= 10)
   24034:	00900793          	addi	a5,zero,9
   24038:	0e87f063          	bgeu	a5,s0,24118 <dwarf::cursor::address()+0x32c>
	  auto const __num = __val * 2;
   2403c:	0014141b          	slliw	s0,s0,0x1
	  __first[1] = __digits[__num + 1];
   24040:	0001f717          	auipc	a4,0x1f
   24044:	33873703          	ld	a4,824(a4) # 43378 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb9a0>
   24048:	0014079b          	addiw	a5,s0,1
   2404c:	02079793          	slli	a5,a5,0x20
   24050:	0207d793          	srli	a5,a5,0x20
   24054:	00f707b3          	add	a5,a4,a5
   24058:	0007c783          	lbu	a5,0(a5)
   2405c:	00f600a3          	sb	a5,1(a2)
	  __first[0] = __digits[__num];
   24060:	02041413          	slli	s0,s0,0x20
   24064:	02045413          	srli	s0,s0,0x20
   24068:	00870733          	add	a4,a4,s0
   2406c:	00074783          	lbu	a5,0(a4)
   24070:	00f60023          	sb	a5,0(a2)
    { return std::move(__rhs.insert(0, __lhs)); }
   24074:	00014617          	auipc	a2,0x14
   24078:	c0460613          	addi	a2,a2,-1020 # 37c78 <std::piecewise_construct+0x1a8>
   2407c:	00000593          	addi	a1,zero,0
   24080:	00010513          	addi	a0,sp,0
   24084:	d7cf20ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   24088:	09c0006f          	jal	zero,24124 <dwarf::cursor::address()+0x338>
	  if (__value < __b3) return __n + 2;
   2408c:	00f56663          	bltu	a0,a5,24098 <dwarf::cursor::address()+0x2ac>
   24090:	0025859b          	addiw	a1,a1,2
   24094:	f65ff06f          	jal	zero,23ff8 <dwarf::cursor::address()+0x20c>
	  if (__value < __b4) return __n + 3;
   24098:	02079693          	slli	a3,a5,0x20
   2409c:	0206d693          	srli	a3,a3,0x20
   240a0:	00f66663          	bltu	a2,a5,240ac <dwarf::cursor::address()+0x2c0>
   240a4:	0035859b          	addiw	a1,a1,3
   240a8:	f51ff06f          	jal	zero,23ff8 <dwarf::cursor::address()+0x20c>
	  __value /= __b4;
   240ac:	02e6d7b3          	divu	a5,a3,a4
   240b0:	0007879b          	addiw	a5,a5,0
	  __n += 4;
   240b4:	0045859b          	addiw	a1,a1,4
	  if (__value < (unsigned)__base) return __n;
   240b8:	f35ff06f          	jal	zero,23fec <dwarf::cursor::address()+0x200>
	  auto const __num = (__val % 100) * 2;
   240bc:	030477bb          	remuw	a5,s0,a6
   240c0:	0017979b          	slliw	a5,a5,0x1
	  __val /= 100;
   240c4:	0304543b          	divuw	s0,s0,a6
	  __first[__pos] = __digits[__num + 1];
   240c8:	02071593          	slli	a1,a4,0x20
   240cc:	0205d593          	srli	a1,a1,0x20
   240d0:	00b605b3          	add	a1,a2,a1
   240d4:	0017869b          	addiw	a3,a5,1
   240d8:	02069693          	slli	a3,a3,0x20
   240dc:	0206d693          	srli	a3,a3,0x20
   240e0:	00d506b3          	add	a3,a0,a3
   240e4:	0006c683          	lbu	a3,0(a3)
   240e8:	00d58023          	sb	a3,0(a1)
	  __first[__pos - 1] = __digits[__num];
   240ec:	fff7069b          	addiw	a3,a4,-1
   240f0:	02069693          	slli	a3,a3,0x20
   240f4:	0206d693          	srli	a3,a3,0x20
   240f8:	00d606b3          	add	a3,a2,a3
   240fc:	02079793          	slli	a5,a5,0x20
   24100:	0207d793          	srli	a5,a5,0x20
   24104:	00f507b3          	add	a5,a0,a5
   24108:	0007c783          	lbu	a5,0(a5)
   2410c:	00f68023          	sb	a5,0(a3)
	  __pos -= 2;
   24110:	ffe7071b          	addiw	a4,a4,-2
   24114:	f1dff06f          	jal	zero,24030 <dwarf::cursor::address()+0x244>
	__first[0] = '0' + __val;
   24118:	0304079b          	addiw	a5,s0,48
   2411c:	0ff7f793          	andi	a5,a5,255
   24120:	f51ff06f          	jal	zero,24070 <dwarf::cursor::address()+0x284>
   24124:	00050593          	addi	a1,a0,0
   24128:	02010413          	addi	s0,sp,32
   2412c:	00040513          	addi	a0,s0,0
   24130:	da0f20ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   24134:	00014597          	auipc	a1,0x14
   24138:	b5458593          	addi	a1,a1,-1196 # 37c88 <std::piecewise_construct+0x1b8>
   2413c:	00040513          	addi	a0,s0,0
   24140:	901f20ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   24144:	00050593          	addi	a1,a0,0
   24148:	04010413          	addi	s0,sp,64
   2414c:	00040513          	addi	a0,s0,0
   24150:	d80f20ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      throw std::runtime_error(
   24154:	00040593          	addi	a1,s0,0
   24158:	00048513          	addi	a0,s1,0
   2415c:	fc4f20ef          	jal	ra,16920 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   24160:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   24164:	05010793          	addi	a5,sp,80
   24168:	00f50463          	beq	a0,a5,24170 <dwarf::cursor::address()+0x384>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2416c:	e34f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   24170:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   24174:	03010793          	addi	a5,sp,48
   24178:	00f50463          	beq	a0,a5,24180 <dwarf::cursor::address()+0x394>
   2417c:	e24f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   24180:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   24184:	01010793          	addi	a5,sp,16
   24188:	00f50463          	beq	a0,a5,24190 <dwarf::cursor::address()+0x3a4>
   2418c:	e14f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
          "address size " + std::to_string(sec->addr_size) + " not supported");
   24190:	0001f617          	auipc	a2,0x1f
   24194:	29063603          	ld	a2,656(a2) # 43420 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   24198:	0001f597          	auipc	a1,0x1f
   2419c:	4785b583          	ld	a1,1144(a1) # 43610 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   241a0:	00048513          	addi	a0,s1,0
   241a4:	fbcf20ef          	jal	ra,16960 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   241a8:	00050413          	addi	s0,a0,0
   241ac:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   241b0:	05010793          	addi	a5,sp,80
   241b4:	00f50463          	beq	a0,a5,241bc <dwarf::cursor::address()+0x3d0>
   241b8:	de8f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   241bc:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   241c0:	03010793          	addi	a5,sp,48
   241c4:	00f50463          	beq	a0,a5,241cc <dwarf::cursor::address()+0x3e0>
   241c8:	dd8f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   241cc:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   241d0:	01010793          	addi	a5,sp,16
   241d4:	00f50463          	beq	a0,a5,241dc <dwarf::cursor::address()+0x3f0>
   241d8:	dc8f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
   241dc:	00048513          	addi	a0,s1,0
   241e0:	d70f20ef          	jal	ra,16750 <__cxa_free_exception@plt>
   241e4:	00040513          	addi	a0,s0,0
   241e8:	fa8f20ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   241ec:	00050413          	addi	s0,a0,0
   241f0:	fcdff06f          	jal	zero,241bc <dwarf::cursor::address()+0x3d0>
   241f4:	00050413          	addi	s0,a0,0
   241f8:	fd5ff06f          	jal	zero,241cc <dwarf::cursor::address()+0x3e0>
        val |= ((uint64_t)p[i]) << (i * 8);
   241fc:	00074503          	lbu	a0,0(a4)
    pos += sizeof(T);
   24200:	00170713          	addi	a4,a4,1
   24204:	00e43823          	sd	a4,16(s0)
  }
   24208:	07813083          	ld	ra,120(sp)
   2420c:	07013403          	ld	s0,112(sp)
   24210:	06813483          	ld	s1,104(sp)
   24214:	08010113          	addi	sp,sp,128
   24218:	00008067          	jalr	zero,0(ra)

000000000002421c <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)>:
    __to_chars_len(_Tp __value, int __base = 10) noexcept
   2421c:	00050793          	addi	a5,a0,0
      const unsigned __b2 = __base  * __base;
   24220:	02b586bb          	mulw	a3,a1,a1
      const unsigned __b3 = __b2 * __base;
   24224:	02b6863b          	mulw	a2,a3,a1
      const unsigned long __b4 = __b3 * __base;
   24228:	02b6073b          	mulw	a4,a2,a1
   2422c:	02071713          	slli	a4,a4,0x20
   24230:	02075713          	srli	a4,a4,0x20
	  if (__value < (unsigned)__base) return __n;
   24234:	02059593          	slli	a1,a1,0x20
   24238:	0205d593          	srli	a1,a1,0x20
   2423c:	06b56463          	bltu	a0,a1,242a4 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x88>
	  if (__value < __b2) return __n + 1;
   24240:	02069693          	slli	a3,a3,0x20
   24244:	0206d693          	srli	a3,a3,0x20
   24248:	02d56c63          	bltu	a0,a3,24280 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x64>
	  if (__value < __b3) return __n + 2;
   2424c:	02061613          	slli	a2,a2,0x20
   24250:	02065613          	srli	a2,a2,0x20
   24254:	02c56c63          	bltu	a0,a2,2428c <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x70>
	  if (__value < __b4) return __n + 3;
   24258:	04e56063          	bltu	a0,a4,24298 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x7c>
      unsigned __n = 1;
   2425c:	00100513          	addi	a0,zero,1
	  __value /= __b4;
   24260:	02e7d7b3          	divu	a5,a5,a4
	  __n += 4;
   24264:	0045051b          	addiw	a0,a0,4
	  if (__value < (unsigned)__base) return __n;
   24268:	02b7ec63          	bltu	a5,a1,242a0 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x84>
	  if (__value < __b2) return __n + 1;
   2426c:	00d7ec63          	bltu	a5,a3,24284 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x68>
	  if (__value < __b3) return __n + 2;
   24270:	02c7e063          	bltu	a5,a2,24290 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x74>
	  if (__value < __b4) return __n + 3;
   24274:	fee7f6e3          	bgeu	a5,a4,24260 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x44>
   24278:	0035051b          	addiw	a0,a0,3
   2427c:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   24280:	00100513          	addi	a0,zero,1
	  if (__value < __b2) return __n + 1;
   24284:	0015051b          	addiw	a0,a0,1
   24288:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   2428c:	00100513          	addi	a0,zero,1
	  if (__value < __b3) return __n + 2;
   24290:	0025051b          	addiw	a0,a0,2
   24294:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   24298:	00100513          	addi	a0,zero,1
   2429c:	fddff06f          	jal	zero,24278 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x5c>
   242a0:	00008067          	jalr	zero,0(ra)
   242a4:	00100513          	addi	a0,zero,1
    }
   242a8:	00008067          	jalr	zero,0(ra)

00000000000242ac <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)>:
      unsigned __pos = __len - 1;
   242ac:	fff5859b          	addiw	a1,a1,-1
      while (__val >= 100)
   242b0:	06300793          	addi	a5,zero,99
   242b4:	06c7f063          	bgeu	a5,a2,24314 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x68>
	  auto const __num = (__val % 100) * 2;
   242b8:	06400693          	addi	a3,zero,100
	  __first[__pos] = __digits[__num + 1];
   242bc:	0001fe17          	auipc	t3,0x1f
   242c0:	1c4e3e03          	ld	t3,452(t3) # 43480 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb4d8>
      while (__val >= 100)
   242c4:	00002337          	lui	t1,0x2
   242c8:	70f30313          	addi	t1,t1,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   242cc:	02d677b3          	remu	a5,a2,a3
   242d0:	00179793          	slli	a5,a5,0x1
   242d4:	00060813          	addi	a6,a2,0
	  __val /= 100;
   242d8:	02d65633          	divu	a2,a2,a3
	  __first[__pos] = __digits[__num + 1];
   242dc:	02059713          	slli	a4,a1,0x20
   242e0:	02075713          	srli	a4,a4,0x20
   242e4:	00e50733          	add	a4,a0,a4
   242e8:	00fe07b3          	add	a5,t3,a5
   242ec:	0017c883          	lbu	a7,1(a5)
   242f0:	01170023          	sb	a7,0(a4)
	  __first[__pos - 1] = __digits[__num];
   242f4:	fff5871b          	addiw	a4,a1,-1
   242f8:	02071713          	slli	a4,a4,0x20
   242fc:	02075713          	srli	a4,a4,0x20
   24300:	00e50733          	add	a4,a0,a4
   24304:	0007c783          	lbu	a5,0(a5)
   24308:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   2430c:	ffe5859b          	addiw	a1,a1,-2
      while (__val >= 100)
   24310:	fb036ee3          	bltu	t1,a6,242cc <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x20>
      if (__val >= 10)
   24314:	00900793          	addi	a5,zero,9
   24318:	02c7f463          	bgeu	a5,a2,24340 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x94>
	  auto const __num = __val * 2;
   2431c:	00161613          	slli	a2,a2,0x1
	  __first[1] = __digits[__num + 1];
   24320:	0001f797          	auipc	a5,0x1f
   24324:	1607b783          	ld	a5,352(a5) # 43480 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb4d8>
   24328:	00c787b3          	add	a5,a5,a2
   2432c:	0017c703          	lbu	a4,1(a5)
   24330:	00e500a3          	sb	a4,1(a0)
	  __first[0] = __digits[__num];
   24334:	0007c603          	lbu	a2,0(a5)
   24338:	00c50023          	sb	a2,0(a0)
    }
   2433c:	00008067          	jalr	zero,0(ra)
	__first[0] = '0' + __val;
   24340:	0306061b          	addiw	a2,a2,48
   24344:	0ff67613          	andi	a2,a2,255
   24348:	ff1ff06f          	jal	zero,24338 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x8c>

000000000002434c <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)>:
    }
  }
  throw format_error("unknown attribute form " + to_string(form));
}

attribute_spec::attribute_spec(DW_AT name, DW_FORM form)
   2434c:	fa010113          	addi	sp,sp,-96
   24350:	04113c23          	sd	ra,88(sp)
   24354:	04813823          	sd	s0,80(sp)
   24358:	04913423          	sd	s1,72(sp)
   2435c:	05213023          	sd	s2,64(sp)
   24360:	00060413          	addi	s0,a2,0
    : name(name), form(form), type(resolve_type(name, form)) {}
   24364:	00b52023          	sw	a1,0(a0)
   24368:	00c52223          	sw	a2,4(a0)
  switch (form) {
   2436c:	02000793          	addi	a5,zero,32
   24370:	20c7ec63          	bltu	a5,a2,24588 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x23c>
   24374:	00058493          	addi	s1,a1,0
   24378:	00261793          	slli	a5,a2,0x2
   2437c:	00014717          	auipc	a4,0x14
   24380:	d4470713          	addi	a4,a4,-700 # 380c0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x118>
   24384:	00e787b3          	add	a5,a5,a4
   24388:	0007a783          	lw	a5,0(a5)
   2438c:	00e787b3          	add	a5,a5,a4
   24390:	00078067          	jalr	zero,0(a5)
    return value::type::constant;
   24394:	00300413          	addi	s0,zero,3
   24398:	15c0006f          	jal	zero,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    switch (name) {
   2439c:	05100793          	addi	a5,zero,81
   243a0:	00200413          	addi	s0,zero,2
   243a4:	14b7c863          	blt	a5,a1,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   243a8:	01800793          	addi	a5,zero,24
   243ac:	02b7d463          	bge	a5,a1,243d4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x88>
   243b0:	fe75859b          	addiw	a1,a1,-25
   243b4:	00014797          	auipc	a5,0x14
   243b8:	dcc7b783          	ld	a5,-564(a5) # 38180 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1d8>
   243bc:	00b7d7b3          	srl	a5,a5,a1
   243c0:	0017f793          	andi	a5,a5,1
      return value::type::exprloc;
   243c4:	00600413          	addi	s0,zero,6
    switch (name) {
   243c8:	12079663          	bne	a5,zero,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   243cc:	00200413          	addi	s0,zero,2
   243d0:	1240006f          	jal	zero,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   243d4:	00200793          	addi	a5,zero,2
   243d8:	24f58463          	beq	a1,a5,24620 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2d4>
   243dc:	ff55859b          	addiw	a1,a1,-11
   243e0:	10b7ea63          	bltu	a5,a1,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
      return value::type::exprloc;
   243e4:	00600413          	addi	s0,zero,6
   243e8:	10c0006f          	jal	zero,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    switch (name) {
   243ec:	05500793          	addi	a5,zero,85
   243f0:	22b7cc63          	blt	a5,a1,24628 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2dc>
   243f4:	01800793          	addi	a5,zero,24
   243f8:	02b7d263          	bge	a5,a1,2441c <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0xd0>
   243fc:	fe75871b          	addiw	a4,a1,-25
   24400:	00014797          	auipc	a5,0x14
   24404:	d887b783          	ld	a5,-632(a5) # 38188 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1e0>
   24408:	00e7d7b3          	srl	a5,a5,a4
   2440c:	0017f793          	andi	a5,a5,1
   24410:	06079463          	bne	a5,zero,24478 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x12c>
   24414:	00300413          	addi	s0,zero,3
   24418:	0dc0006f          	jal	zero,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   2441c:	00200793          	addi	a5,zero,2
   24420:	20f58863          	beq	a1,a5,24630 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2e4>
   24424:	01000793          	addi	a5,zero,16
   24428:	00300413          	addi	s0,zero,3
   2442c:	0cf59463          	bne	a1,a5,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
      return value::type::line;
   24430:	00800413          	addi	s0,zero,8
   24434:	0c00006f          	jal	zero,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    return value::type::sconstant;
   24438:	00500413          	addi	s0,zero,5
   2443c:	0b80006f          	jal	zero,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    return value::type::exprloc;
   24440:	00600413          	addi	s0,zero,6
   24444:	0b00006f          	jal	zero,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    return value::type::flag;
   24448:	00700413          	addi	s0,zero,7
   2444c:	0a80006f          	jal	zero,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    return value::type::reference;
   24450:	00c00413          	addi	s0,zero,12
   24454:	0a00006f          	jal	zero,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    return value::type::string;
   24458:	00d00413          	addi	s0,zero,13
   2445c:	0980006f          	jal	zero,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    return value::type::invalid;
   24460:	00000413          	addi	s0,zero,0
   24464:	0900006f          	jal	zero,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    switch (name) {
   24468:	05500793          	addi	a5,zero,85
   2446c:	06b7ca63          	blt	a5,a1,244e0 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x194>
   24470:	01800793          	addi	a5,zero,24
   24474:	04b7da63          	bge	a5,a1,244c8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x17c>
   24478:	fe74871b          	addiw	a4,s1,-25
   2447c:	00100793          	addi	a5,zero,1
   24480:	00e797b3          	sll	a5,a5,a4
   24484:	00014717          	auipc	a4,0x14
   24488:	d0c73703          	ld	a4,-756(a4) # 38190 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1e8>
   2448c:	00e7f733          	and	a4,a5,a4
   24490:	1a071863          	bne	a4,zero,24640 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2f4>
   24494:	00014717          	auipc	a4,0x14
   24498:	d0473703          	ld	a4,-764(a4) # 38198 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f0>
   2449c:	00e7f7b3          	and	a5,a5,a4
   244a0:	1a079463          	bne	a5,zero,24648 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2fc>
   244a4:	04300793          	addi	a5,zero,67
   244a8:	1af48463          	beq	s1,a5,24650 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x304>
                         to_string(name));
   244ac:	01000513          	addi	a0,zero,16
   244b0:	9e0f20ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   244b4:	00050913          	addi	s2,a0,0
   244b8:	00048593          	addi	a1,s1,0
   244bc:	00010513          	addi	a0,sp,0
   244c0:	0700e0ef          	jal	ra,32530 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
   244c4:	04c0006f          	jal	zero,24510 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1c4>
    switch (name) {
   244c8:	00200793          	addi	a5,zero,2
   244cc:	16f58663          	beq	a1,a5,24638 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2ec>
   244d0:	01000793          	addi	a5,zero,16
      return value::type::line;
   244d4:	00800413          	addi	s0,zero,8
    switch (name) {
   244d8:	00f58e63          	beq	a1,a5,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   244dc:	fd1ff06f          	jal	zero,244ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x160>
   244e0:	ffffe7b7          	lui	a5,0xffffe
   244e4:	00b787bb          	addw	a5,a5,a1
   244e8:	00002737          	lui	a4,0x2
      return value::type::invalid;
   244ec:	00000413          	addi	s0,zero,0
    switch (name) {
   244f0:	fae7fee3          	bgeu	a5,a4,244ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x160>
    : name(name), form(form), type(resolve_type(name, form)) {}
   244f4:	00852423          	sw	s0,8(a0)
   244f8:	05813083          	ld	ra,88(sp)
   244fc:	05013403          	ld	s0,80(sp)
   24500:	04813483          	ld	s1,72(sp)
   24504:	04013903          	ld	s2,64(sp)
   24508:	06010113          	addi	sp,sp,96
   2450c:	00008067          	jalr	zero,0(ra)
    { return std::move(__rhs.insert(0, __lhs)); }
   24510:	00014617          	auipc	a2,0x14
   24514:	b6860613          	addi	a2,a2,-1176 # 38078 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0xd0>
   24518:	00000593          	addi	a1,zero,0
   2451c:	00010513          	addi	a0,sp,0
   24520:	8e0f20ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   24524:	00050593          	addi	a1,a0,0
   24528:	02010413          	addi	s0,sp,32
   2452c:	00040513          	addi	a0,s0,0
   24530:	9a0f20ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   24534:	00040593          	addi	a1,s0,0
   24538:	00090513          	addi	a0,s2,0
   2453c:	af4f20ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   24540:	0001f797          	auipc	a5,0x1f
   24544:	0307b783          	ld	a5,48(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   24548:	01078793          	addi	a5,a5,16
   2454c:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   24550:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   24554:	03010793          	addi	a5,sp,48
   24558:	00f50463          	beq	a0,a5,24560 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x214>
   2455c:	a44f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   24560:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   24564:	01010793          	addi	a5,sp,16
   24568:	00f50463          	beq	a0,a5,24570 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x224>
   2456c:	a34f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
                         to_string(name));
   24570:	0001f617          	auipc	a2,0x1f
   24574:	e2863603          	ld	a2,-472(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   24578:	0001f597          	auipc	a1,0x1f
   2457c:	d505b583          	ld	a1,-688(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   24580:	00090513          	addi	a0,s2,0
   24584:	bdcf20ef          	jal	ra,16960 <__cxa_throw@plt>
  throw format_error("unknown attribute form " + to_string(form));
   24588:	01000513          	addi	a0,zero,16
   2458c:	904f20ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   24590:	00050493          	addi	s1,a0,0
   24594:	00040593          	addi	a1,s0,0
   24598:	00010513          	addi	a0,sp,0
   2459c:	2e40c0ef          	jal	ra,30880 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)>
    { return std::move(__rhs.insert(0, __lhs)); }
   245a0:	00014617          	auipc	a2,0x14
   245a4:	b0860613          	addi	a2,a2,-1272 # 380a8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x100>
   245a8:	00000593          	addi	a1,zero,0
   245ac:	00010513          	addi	a0,sp,0
   245b0:	850f20ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   245b4:	00050593          	addi	a1,a0,0
   245b8:	02010413          	addi	s0,sp,32
   245bc:	00040513          	addi	a0,s0,0
   245c0:	910f20ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   245c4:	00040593          	addi	a1,s0,0
   245c8:	00048513          	addi	a0,s1,0
   245cc:	a64f20ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   245d0:	0001f797          	auipc	a5,0x1f
   245d4:	fa07b783          	ld	a5,-96(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   245d8:	01078793          	addi	a5,a5,16
   245dc:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   245e0:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   245e4:	03010793          	addi	a5,sp,48
   245e8:	00f50463          	beq	a0,a5,245f0 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2a4>
   245ec:	9b4f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   245f0:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   245f4:	01010793          	addi	a5,sp,16
   245f8:	00f50463          	beq	a0,a5,24600 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2b4>
   245fc:	9a4f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
   24600:	0001f617          	auipc	a2,0x1f
   24604:	d9863603          	ld	a2,-616(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   24608:	0001f597          	auipc	a1,0x1f
   2460c:	cc05b583          	ld	a1,-832(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   24610:	00048513          	addi	a0,s1,0
   24614:	b4cf20ef          	jal	ra,16960 <__cxa_throw@plt>
  switch (form) {
   24618:	00400413          	addi	s0,zero,4
   2461c:	ed9ff06f          	jal	zero,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
      return value::type::exprloc;
   24620:	00600413          	addi	s0,zero,6
   24624:	ed1ff06f          	jal	zero,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   24628:	00300413          	addi	s0,zero,3
   2462c:	ec9ff06f          	jal	zero,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   24630:	00900413          	addi	s0,zero,9
   24634:	ec1ff06f          	jal	zero,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    switch (name) {
   24638:	00900413          	addi	s0,zero,9
   2463c:	eb9ff06f          	jal	zero,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   24640:	00900413          	addi	s0,zero,9
   24644:	eb1ff06f          	jal	zero,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
      return value::type::rangelist;
   24648:	00b00413          	addi	s0,zero,11
   2464c:	ea9ff06f          	jal	zero,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
      return value::type::mac;
   24650:	00a00413          	addi	s0,zero,10
   24654:	ea1ff06f          	jal	zero,244f4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
      { return _M_dataplus._M_p; }
   24658:	00050413          	addi	s0,a0,0
   2465c:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   24660:	03010793          	addi	a5,sp,48
   24664:	00f50463          	beq	a0,a5,2466c <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x320>
   24668:	938f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2466c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   24670:	01010793          	addi	a5,sp,16
   24674:	00f50463          	beq	a0,a5,2467c <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x330>
   24678:	928f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
                         to_string(name));
   2467c:	00090513          	addi	a0,s2,0
   24680:	8d0f20ef          	jal	ra,16750 <__cxa_free_exception@plt>
   24684:	00040513          	addi	a0,s0,0
   24688:	b08f20ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2468c:	00050413          	addi	s0,a0,0
   24690:	fddff06f          	jal	zero,2466c <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x320>
   24694:	00050413          	addi	s0,a0,0
   24698:	fe5ff06f          	jal	zero,2467c <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x330>
   2469c:	00050413          	addi	s0,a0,0
   246a0:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   246a4:	03010793          	addi	a5,sp,48
   246a8:	00f50463          	beq	a0,a5,246b0 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x364>
   246ac:	8f4f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   246b0:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   246b4:	01010793          	addi	a5,sp,16
   246b8:	00f50463          	beq	a0,a5,246c0 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x374>
   246bc:	8e4f20ef          	jal	ra,167a0 <operator delete(void*)@plt>
  throw format_error("unknown attribute form " + to_string(form));
   246c0:	00048513          	addi	a0,s1,0
   246c4:	88cf20ef          	jal	ra,16750 <__cxa_free_exception@plt>
   246c8:	00040513          	addi	a0,s0,0
   246cc:	ac4f20ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   246d0:	00050413          	addi	s0,a0,0
   246d4:	fddff06f          	jal	zero,246b0 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x364>
   246d8:	00050413          	addi	s0,a0,0
   246dc:	fe5ff06f          	jal	zero,246c0 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x374>

00000000000246e0 <dwarf::abbrev_entry::read(dwarf::cursor*)>:

bool abbrev_entry::read(cursor *cur) {
   246e0:	fb010113          	addi	sp,sp,-80
   246e4:	04113423          	sd	ra,72(sp)
   246e8:	04813023          	sd	s0,64(sp)
   246ec:	02913c23          	sd	s1,56(sp)
   246f0:	03213823          	sd	s2,48(sp)
   246f4:	03313423          	sd	s3,40(sp)
   246f8:	03413023          	sd	s4,32(sp)
   246fc:	01513c23          	sd	s5,24(sp)
   24700:	01613823          	sd	s6,16(sp)
   24704:	00050493          	addi	s1,a0,0
   24708:	00058413          	addi	s0,a1,0
      { _M_erase_at_end(this->_M_impl._M_start); }
   2470c:	01053783          	ld	a5,16(a0)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   24710:	01853703          	ld	a4,24(a0)
   24714:	00e78463          	beq	a5,a4,2471c <dwarf::abbrev_entry::read(dwarf::cursor*)+0x3c>
	    this->_M_impl._M_finish = __pos;
   24718:	00f53c23          	sd	a5,24(a0)
    while (pos < sec->end) {
   2471c:	01043783          	ld	a5,16(s0)
   24720:	00043503          	ld	a0,0(s0)
   24724:	01053703          	ld	a4,16(a0)
   24728:	02e7fe63          	bgeu	a5,a4,24764 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x84>
   2472c:	00000593          	addi	a1,zero,0
   24730:	00000613          	addi	a2,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   24734:	00178793          	addi	a5,a5,1
   24738:	00f43823          	sd	a5,16(s0)
   2473c:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   24740:	07f77693          	andi	a3,a4,127
   24744:	00c696b3          	sll	a3,a3,a2
   24748:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   2474c:	0187171b          	slliw	a4,a4,0x18
   24750:	4187571b          	sraiw	a4,a4,0x18
   24754:	04075463          	bge	a4,zero,2479c <dwarf::abbrev_entry::read(dwarf::cursor*)+0xbc>
      shift += 7;
   24758:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   2475c:	01053703          	ld	a4,16(a0)
   24760:	fce7eae3          	bltu	a5,a4,24734 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x54>
    underflow();
   24764:	00040513          	addi	a0,s0,0
   24768:	9dcf90ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
  attributes.clear();

  // Section 7.5.3
  code = cur->uleb128();
   2476c:	0004b023          	sd	zero,0(s1)
  if (!code)
    return false;
   24770:	00000513          	addi	a0,zero,0
      break;
    attributes.push_back(attribute_spec(name, form));
  }
  attributes.shrink_to_fit();
  return true;
}
   24774:	04813083          	ld	ra,72(sp)
   24778:	04013403          	ld	s0,64(sp)
   2477c:	03813483          	ld	s1,56(sp)
   24780:	03013903          	ld	s2,48(sp)
   24784:	02813983          	ld	s3,40(sp)
   24788:	02013a03          	ld	s4,32(sp)
   2478c:	01813a83          	ld	s5,24(sp)
   24790:	01013b03          	ld	s6,16(sp)
   24794:	05010113          	addi	sp,sp,80
   24798:	00008067          	jalr	zero,0(ra)
  code = cur->uleb128();
   2479c:	00b4b023          	sd	a1,0(s1)
  if (!code)
   247a0:	1a058863          	beq	a1,zero,24950 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x270>
    while (pos < sec->end) {
   247a4:	01043783          	ld	a5,16(s0)
   247a8:	00043503          	ld	a0,0(s0)
   247ac:	01053703          	ld	a4,16(a0)
   247b0:	02e7fe63          	bgeu	a5,a4,247ec <dwarf::abbrev_entry::read(dwarf::cursor*)+0x10c>
    std::uint64_t result = 0;
   247b4:	00000593          	addi	a1,zero,0
    int shift = 0;
   247b8:	00000613          	addi	a2,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   247bc:	00178793          	addi	a5,a5,1
   247c0:	00f43823          	sd	a5,16(s0)
   247c4:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   247c8:	07f77693          	andi	a3,a4,127
   247cc:	00c696b3          	sll	a3,a3,a2
   247d0:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   247d4:	0187171b          	slliw	a4,a4,0x18
   247d8:	4187571b          	sraiw	a4,a4,0x18
   247dc:	00075e63          	bge	a4,zero,247f8 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x118>
      shift += 7;
   247e0:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   247e4:	01053703          	ld	a4,16(a0)
   247e8:	fce7eae3          	bltu	a5,a4,247bc <dwarf::abbrev_entry::read(dwarf::cursor*)+0xdc>
    underflow();
   247ec:	00040513          	addi	a0,s0,0
   247f0:	954f90ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    return 0;
   247f4:	00000593          	addi	a1,zero,0
  tag = (DW_TAG)cur->uleb128();
   247f8:	00b4a423          	sw	a1,8(s1)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   247fc:	00043783          	ld	a5,0(s0)
   24800:	0107b703          	ld	a4,16(a5)
   24804:	01043783          	ld	a5,16(s0)
   24808:	00e7e663          	bltu	a5,a4,24814 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x134>
      underflow();
   2480c:	00040513          	addi	a0,s0,0
   24810:	934f90ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   24814:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   24818:	00043783          	ld	a5,0(s0)
   2481c:	01c7a783          	lw	a5,28(a5)
   24820:	12078c63          	beq	a5,zero,24958 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x278>
        val = (val << 8) | (uint64_t)p[i];
   24824:	00074783          	lbu	a5,0(a4) # 2000 <__abi_tag-0xe294>
      for (unsigned i = 0; i < sizeof(T); i++)
   24828:	1340006f          	jal	zero,2495c <dwarf::abbrev_entry::read(dwarf::cursor*)+0x27c>
    DW_FORM form = (DW_FORM)cur->uleb128();
   2482c:	0006061b          	addiw	a2,a2,0
    if (name == (DW_AT)0 && form == (DW_FORM)0)
   24830:	00cb67b3          	or	a5,s6,a2
   24834:	10078263          	beq	a5,zero,24938 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x258>
    attributes.push_back(attribute_spec(name, form));
   24838:	000b0593          	addi	a1,s6,0
   2483c:	00098513          	addi	a0,s3,0
   24840:	b0dff0ef          	jal	ra,2434c <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   24844:	0184b583          	ld	a1,24(s1)
   24848:	0204b783          	ld	a5,32(s1)
   2484c:	0cf58e63          	beq	a1,a5,24928 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x248>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   24850:	00012783          	lw	a5,0(sp)
   24854:	00f5a023          	sw	a5,0(a1)
   24858:	00412783          	lw	a5,4(sp)
   2485c:	00f5a223          	sw	a5,4(a1)
   24860:	00812783          	lw	a5,8(sp)
   24864:	00f5a423          	sw	a5,8(a1)
	    ++this->_M_impl._M_finish;
   24868:	0184b783          	ld	a5,24(s1)
   2486c:	00c78793          	addi	a5,a5,12
   24870:	00f4bc23          	sd	a5,24(s1)
    while (pos < sec->end) {
   24874:	01043783          	ld	a5,16(s0)
   24878:	00043583          	ld	a1,0(s0)
   2487c:	0105b703          	ld	a4,16(a1)
   24880:	02e7fe63          	bgeu	a5,a4,248bc <dwarf::abbrev_entry::read(dwarf::cursor*)+0x1dc>
    std::uint64_t result = 0;
   24884:	00000b13          	addi	s6,zero,0
    int shift = 0;
   24888:	00090613          	addi	a2,s2,0
      uint8_t byte = *(uint8_t *)(pos++);
   2488c:	00178793          	addi	a5,a5,1
   24890:	00f43823          	sd	a5,16(s0)
   24894:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   24898:	07f77693          	andi	a3,a4,127
   2489c:	00c696b3          	sll	a3,a3,a2
   248a0:	00db6b33          	or	s6,s6,a3
      if ((byte & 0x80) == 0)
   248a4:	0187171b          	slliw	a4,a4,0x18
   248a8:	4187571b          	sraiw	a4,a4,0x18
   248ac:	00075e63          	bge	a4,zero,248c8 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x1e8>
      shift += 7;
   248b0:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   248b4:	0105b703          	ld	a4,16(a1)
   248b8:	fce7eae3          	bltu	a5,a4,2488c <dwarf::abbrev_entry::read(dwarf::cursor*)+0x1ac>
    underflow();
   248bc:	00040513          	addi	a0,s0,0
   248c0:	884f90ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    return 0;
   248c4:	00000b13          	addi	s6,zero,0
    DW_AT name = (DW_AT)cur->uleb128();
   248c8:	000b0b1b          	addiw	s6,s6,0
    while (pos < sec->end) {
   248cc:	01043783          	ld	a5,16(s0)
   248d0:	00043503          	ld	a0,0(s0)
   248d4:	01053703          	ld	a4,16(a0)
   248d8:	02e7fe63          	bgeu	a5,a4,24914 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x234>
    std::uint64_t result = 0;
   248dc:	00000613          	addi	a2,zero,0
    int shift = 0;
   248e0:	00090593          	addi	a1,s2,0
      uint8_t byte = *(uint8_t *)(pos++);
   248e4:	00178793          	addi	a5,a5,1
   248e8:	00f43823          	sd	a5,16(s0)
   248ec:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   248f0:	07f77693          	andi	a3,a4,127
   248f4:	00b696b3          	sll	a3,a3,a1
   248f8:	00d66633          	or	a2,a2,a3
      if ((byte & 0x80) == 0)
   248fc:	0187171b          	slliw	a4,a4,0x18
   24900:	4187571b          	sraiw	a4,a4,0x18
   24904:	f20754e3          	bge	a4,zero,2482c <dwarf::abbrev_entry::read(dwarf::cursor*)+0x14c>
      shift += 7;
   24908:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   2490c:	01053703          	ld	a4,16(a0)
   24910:	fce7eae3          	bltu	a5,a4,248e4 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x204>
    underflow();
   24914:	00040513          	addi	a0,s0,0
   24918:	82cf90ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    if (name == (DW_AT)0 && form == (DW_FORM)0)
   2491c:	000b0e63          	beq	s6,zero,24938 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x258>
    DW_FORM form = (DW_FORM)cur->uleb128();
   24920:	00090613          	addi	a2,s2,0
   24924:	f15ff06f          	jal	zero,24838 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x158>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   24928:	00098613          	addi	a2,s3,0
   2492c:	000a0513          	addi	a0,s4,0
   24930:	000a80e7          	jalr	ra,0(s5)
  }
   24934:	f41ff06f          	jal	zero,24874 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x194>
      { _M_shrink_to_fit(); }
   24938:	000a0513          	addi	a0,s4,0
   2493c:	0001f317          	auipc	t1,0x1f
   24940:	c7c33303          	ld	t1,-900(t1) # 435b8 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()@@Base+0x1ec30>
   24944:	000300e7          	jalr	ra,0(t1)
  return true;
   24948:	00100513          	addi	a0,zero,1
   2494c:	e29ff06f          	jal	zero,24774 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x94>
    return false;
   24950:	00000513          	addi	a0,zero,0
   24954:	e21ff06f          	jal	zero,24774 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x94>
        val |= ((uint64_t)p[i]) << (i * 8);
   24958:	00074783          	lbu	a5,0(a4)
  attributes.clear();
   2495c:	01048a13          	addi	s4,s1,16
    pos += sizeof(T);
   24960:	00170713          	addi	a4,a4,1
   24964:	00e43823          	sd	a4,16(s0)
  children = cur->fixed<DW_CHILDREN>() == DW_CHILDREN::yes;
   24968:	fff78793          	addi	a5,a5,-1
   2496c:	0017b793          	sltiu	a5,a5,1
   24970:	00f48623          	sb	a5,12(s1)
    int shift = 0;
   24974:	00000913          	addi	s2,zero,0
    attributes.push_back(attribute_spec(name, form));
   24978:	00010993          	addi	s3,sp,0
   2497c:	0001fa97          	auipc	s5,0x1f
   24980:	b3caba83          	ld	s5,-1220(s5) # 434b8 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)@@Base+0x1ea04>
   24984:	ef1ff06f          	jal	zero,24874 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x194>

0000000000024988 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()>:

  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    bool
    vector<_Tp, _Alloc>::
   24988:	fd010113          	addi	sp,sp,-48
   2498c:	02113423          	sd	ra,40(sp)
   24990:	02813023          	sd	s0,32(sp)
   24994:	00913c23          	sd	s1,24(sp)
   24998:	01213823          	sd	s2,16(sp)
   2499c:	01313423          	sd	s3,8(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   249a0:	00853403          	ld	s0,8(a0)
    _M_shrink_to_fit()
    {
      if (capacity() == size())
   249a4:	01053783          	ld	a5,16(a0)
   249a8:	0ef40663          	beq	s0,a5,24a94 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x10c>
   249ac:	00050493          	addi	s1,a0,0
			 - this->_M_impl._M_start); }
   249b0:	00053983          	ld	s3,0(a0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   249b4:	41340933          	sub	s2,s0,s3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   249b8:	ff100793          	addi	a5,zero,-15
   249bc:	0017d793          	srli	a5,a5,0x1
   249c0:	0127ea63          	bltu	a5,s2,249d4 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x4c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   249c4:	0a090c63          	beq	s2,zero,24a7c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xf4>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   249c8:	00090513          	addi	a0,s2,0
   249cc:	de5f10ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   249d0:	0200006f          	jal	zero,249f0 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x68>
	  __throw_length_error(
   249d4:	00013517          	auipc	a0,0x13
   249d8:	77450513          	addi	a0,a0,1908 # 38148 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1a0>
   249dc:	cc5f10ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	    _Tp(__make_move_if_noexcept_iterator(__c.begin()),
		__make_move_if_noexcept_iterator(__c.end()),
		__c.get_allocator()).swap(__c);
	    return true;
	  }
	catch(...)
   249e0:	c91f10ef          	jal	ra,16670 <__cxa_begin_catch@plt>
   249e4:	f4df10ef          	jal	ra,16930 <__cxa_end_catch@plt>
	  { return false; }
   249e8:	00000513          	addi	a0,zero,0
   249ec:	0ac0006f          	jal	zero,24a98 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x110>
   249f0:	00050613          	addi	a2,a0,0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   249f4:	01260933          	add	s2,a2,s2
	  for (; __first != __last; ++__first, (void)++__cur)
   249f8:	09340663          	beq	s0,s3,24a84 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xfc>
   249fc:	00098793          	addi	a5,s3,0
      _ForwardIterator __cur = __result;
   24a00:	00060713          	addi	a4,a2,0
   24a04:	0007a683          	lw	a3,0(a5)
   24a08:	00d72023          	sw	a3,0(a4)
   24a0c:	0047a683          	lw	a3,4(a5)
   24a10:	00d72223          	sw	a3,4(a4)
   24a14:	0087a683          	lw	a3,8(a5)
   24a18:	00d72423          	sw	a3,8(a4)
	  for (; __first != __last; ++__first, (void)++__cur)
   24a1c:	00c70713          	addi	a4,a4,12
   24a20:	00c78793          	addi	a5,a5,12
   24a24:	fef410e3          	bne	s0,a5,24a04 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x7c>
   24a28:	ff440793          	addi	a5,s0,-12
   24a2c:	413787b3          	sub	a5,a5,s3
   24a30:	0027d793          	srli	a5,a5,0x2
   24a34:	00013717          	auipc	a4,0x13
   24a38:	76c73703          	ld	a4,1900(a4) # 381a0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f8>
   24a3c:	02e787b3          	mul	a5,a5,a4
   24a40:	00279793          	slli	a5,a5,0x2
   24a44:	0027d793          	srli	a5,a5,0x2
   24a48:	00178793          	addi	a5,a5,1
   24a4c:	00179713          	slli	a4,a5,0x1
   24a50:	00f707b3          	add	a5,a4,a5
   24a54:	00279793          	slli	a5,a5,0x2
   24a58:	00f607b3          	add	a5,a2,a5
	  _M_start = __x._M_start;
   24a5c:	0004b503          	ld	a0,0(s1)
   24a60:	00c4b023          	sd	a2,0(s1)
	  _M_finish = __x._M_finish;
   24a64:	00f4b423          	sd	a5,8(s1)
	  _M_end_of_storage = __x._M_end_of_storage;
   24a68:	0124b823          	sd	s2,16(s1)
	if (__p)
   24a6c:	02050063          	beq	a0,zero,24a8c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x104>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   24a70:	d31f10ef          	jal	ra,167a0 <operator delete(void*)@plt>
	    return true;
   24a74:	00100513          	addi	a0,zero,1
      { __a.deallocate(__p, __n); }
   24a78:	0200006f          	jal	zero,24a98 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x110>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   24a7c:	00000613          	addi	a2,zero,0
   24a80:	f75ff06f          	jal	zero,249f4 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x6c>
      _ForwardIterator __cur = __result;
   24a84:	00060793          	addi	a5,a2,0
   24a88:	fd5ff06f          	jal	zero,24a5c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xd4>
   24a8c:	00100513          	addi	a0,zero,1
   24a90:	0080006f          	jal	zero,24a98 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x110>
	return false;
   24a94:	00000513          	addi	a0,zero,0
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);
    }
   24a98:	02813083          	ld	ra,40(sp)
   24a9c:	02013403          	ld	s0,32(sp)
   24aa0:	01813483          	ld	s1,24(sp)
   24aa4:	01013903          	ld	s2,16(sp)
   24aa8:	00813983          	ld	s3,8(sp)
   24aac:	03010113          	addi	sp,sp,48
   24ab0:	00008067          	jalr	zero,0(ra)

0000000000024ab4 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)>:
      vector<_Tp, _Alloc>::
   24ab4:	fb010113          	addi	sp,sp,-80
   24ab8:	04113423          	sd	ra,72(sp)
   24abc:	04813023          	sd	s0,64(sp)
   24ac0:	02913c23          	sd	s1,56(sp)
   24ac4:	03213823          	sd	s2,48(sp)
   24ac8:	03313423          	sd	s3,40(sp)
   24acc:	03413023          	sd	s4,32(sp)
   24ad0:	01513c23          	sd	s5,24(sp)
   24ad4:	01613823          	sd	s6,16(sp)
   24ad8:	01713423          	sd	s7,8(sp)
   24adc:	01813023          	sd	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   24ae0:	00853483          	ld	s1,8(a0)
   24ae4:	00053983          	ld	s3,0(a0)
   24ae8:	413487b3          	sub	a5,s1,s3
   24aec:	4027d793          	srai	a5,a5,0x2
   24af0:	00013717          	auipc	a4,0x13
   24af4:	fd073703          	ld	a4,-48(a4) # 37ac0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   24af8:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   24afc:	00013717          	auipc	a4,0x13
   24b00:	6ac73703          	ld	a4,1708(a4) # 381a8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x200>
   24b04:	04e78463          	beq	a5,a4,24b4c <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x98>
   24b08:	00050a13          	addi	s4,a0,0
   24b0c:	00058413          	addi	s0,a1,0
   24b10:	00060b13          	addi	s6,a2,0
   24b14:	00058b93          	addi	s7,a1,0
      return __a;
   24b18:	00078713          	addi	a4,a5,0
      if (__a < __b)
   24b1c:	03348e63          	beq	s1,s3,24b58 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xa4>
	const size_type __len = size() + (std::max)(size(), __n);
   24b20:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   24b24:	04f76263          	bltu	a4,a5,24b68 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xb4>
   24b28:	00070a93          	addi	s5,a4,0
   24b2c:	00013797          	auipc	a5,0x13
   24b30:	67c7b783          	ld	a5,1660(a5) # 381a8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x200>
   24b34:	00e7f463          	bgeu	a5,a4,24b3c <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x88>
   24b38:	00078a93          	addi	s5,a5,0
    { return __lhs.base() - __rhs.base(); }
   24b3c:	41340c33          	sub	s8,s0,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   24b40:	00000913          	addi	s2,zero,0
   24b44:	04070263          	beq	a4,zero,24b88 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xd4>
   24b48:	02c0006f          	jal	zero,24b74 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xc0>
	  __throw_length_error(__N(__s));
   24b4c:	00013517          	auipc	a0,0x13
   24b50:	9b450513          	addi	a0,a0,-1612 # 37500 <__libc_csu_fini+0xa0>
   24b54:	b4df10ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   24b58:	00100713          	addi	a4,zero,1
   24b5c:	fc5ff06f          	jal	zero,24b20 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x6c>
      _ForwardIterator __cur = __result;
   24b60:	00090b13          	addi	s6,s2,0
   24b64:	0a40006f          	jal	zero,24c08 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x154>
   24b68:	41340c33          	sub	s8,s0,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   24b6c:	00013a97          	auipc	s5,0x13
   24b70:	63caba83          	ld	s5,1596(s5) # 381a8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x200>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   24b74:	001a9513          	slli	a0,s5,0x1
   24b78:	01550533          	add	a0,a0,s5
   24b7c:	00251513          	slli	a0,a0,0x2
   24b80:	c31f10ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   24b84:	00050913          	addi	s2,a0,0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   24b88:	018907b3          	add	a5,s2,s8
   24b8c:	000b2703          	lw	a4,0(s6)
   24b90:	00e7a023          	sw	a4,0(a5)
   24b94:	004b2703          	lw	a4,4(s6)
   24b98:	00e7a223          	sw	a4,4(a5)
   24b9c:	008b2703          	lw	a4,8(s6)
   24ba0:	00e7a423          	sw	a4,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   24ba4:	fb3b8ee3          	beq	s7,s3,24b60 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xac>
      _ForwardIterator __cur = __result;
   24ba8:	00090713          	addi	a4,s2,0
      for (; __first != __last; ++__first, (void)++__cur)
   24bac:	00098793          	addi	a5,s3,0
   24bb0:	0007a683          	lw	a3,0(a5)
   24bb4:	00d72023          	sw	a3,0(a4)
   24bb8:	0047a683          	lw	a3,4(a5)
   24bbc:	00d72223          	sw	a3,4(a4)
   24bc0:	0087a683          	lw	a3,8(a5)
   24bc4:	00d72423          	sw	a3,8(a4)
   24bc8:	00c78793          	addi	a5,a5,12
   24bcc:	00c70713          	addi	a4,a4,12
   24bd0:	ff7790e3          	bne	a5,s7,24bb0 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xfc>
   24bd4:	ff440793          	addi	a5,s0,-12
   24bd8:	413787b3          	sub	a5,a5,s3
   24bdc:	0027d793          	srli	a5,a5,0x2
   24be0:	00013717          	auipc	a4,0x13
   24be4:	5c073703          	ld	a4,1472(a4) # 381a0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f8>
   24be8:	02e787b3          	mul	a5,a5,a4
   24bec:	00279793          	slli	a5,a5,0x2
   24bf0:	0027d793          	srli	a5,a5,0x2
   24bf4:	00178793          	addi	a5,a5,1
   24bf8:	00179b13          	slli	s6,a5,0x1
   24bfc:	00fb0b33          	add	s6,s6,a5
   24c00:	002b1b13          	slli	s6,s6,0x2
   24c04:	01690b33          	add	s6,s2,s6
	      ++__new_finish;
   24c08:	00cb0b13          	addi	s6,s6,12
   24c0c:	069b8263          	beq	s7,s1,24c70 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x1bc>
   24c10:	00040793          	addi	a5,s0,0
      _ForwardIterator __cur = __result;
   24c14:	000b0713          	addi	a4,s6,0
   24c18:	0007a683          	lw	a3,0(a5)
   24c1c:	00d72023          	sw	a3,0(a4)
   24c20:	0047a683          	lw	a3,4(a5)
   24c24:	00d72223          	sw	a3,4(a4)
   24c28:	0087a683          	lw	a3,8(a5)
   24c2c:	00d72423          	sw	a3,8(a4)
      for (; __first != __last; ++__first, (void)++__cur)
   24c30:	00c78793          	addi	a5,a5,12
   24c34:	00c70713          	addi	a4,a4,12
   24c38:	fe9790e3          	bne	a5,s1,24c18 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x164>
   24c3c:	408487b3          	sub	a5,s1,s0
   24c40:	ff478793          	addi	a5,a5,-12
   24c44:	0027d793          	srli	a5,a5,0x2
   24c48:	00013717          	auipc	a4,0x13
   24c4c:	55873703          	ld	a4,1368(a4) # 381a0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f8>
   24c50:	02e787b3          	mul	a5,a5,a4
   24c54:	00279793          	slli	a5,a5,0x2
   24c58:	0027d793          	srli	a5,a5,0x2
   24c5c:	00178793          	addi	a5,a5,1
   24c60:	00179713          	slli	a4,a5,0x1
   24c64:	00f707b3          	add	a5,a4,a5
   24c68:	00279793          	slli	a5,a5,0x2
   24c6c:	00fb0b33          	add	s6,s6,a5
	if (__p)
   24c70:	00098663          	beq	s3,zero,24c7c <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x1c8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   24c74:	00098513          	addi	a0,s3,0
   24c78:	b29f10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   24c7c:	012a3023          	sd	s2,0(s4)
      this->_M_impl._M_finish = __new_finish;
   24c80:	016a3423          	sd	s6,8(s4)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   24c84:	001a9793          	slli	a5,s5,0x1
   24c88:	015787b3          	add	a5,a5,s5
   24c8c:	00279793          	slli	a5,a5,0x2
   24c90:	00f90933          	add	s2,s2,a5
   24c94:	012a3823          	sd	s2,16(s4)
    }
   24c98:	04813083          	ld	ra,72(sp)
   24c9c:	04013403          	ld	s0,64(sp)
   24ca0:	03813483          	ld	s1,56(sp)
   24ca4:	03013903          	ld	s2,48(sp)
   24ca8:	02813983          	ld	s3,40(sp)
   24cac:	02013a03          	ld	s4,32(sp)
   24cb0:	01813a83          	ld	s5,24(sp)
   24cb4:	01013b03          	ld	s6,16(sp)
   24cb8:	00813b83          	ld	s7,8(sp)
   24cbc:	00013c03          	ld	s8,0(sp)
   24cc0:	05010113          	addi	sp,sp,80
   24cc4:	00008067          	jalr	zero,0(ra)

0000000000024cc8 <dwarf::expr::expr(dwarf::unit const*, unsigned long, unsigned long)>:
DWARFPP_BEGIN_NAMESPACE

expr_context no_expr_context;

expr::expr(const unit *cu, section_offset offset, section_length len)
    : cu(cu), offset(offset), len(len) {}
   24cc8:	00b53023          	sd	a1,0(a0)
   24ccc:	00c53423          	sd	a2,8(a0)
   24cd0:	00d53823          	sd	a3,16(a0)
   24cd4:	00008067          	jalr	zero,0(ra)

0000000000024cd8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const>:
  return evaluate(ctx, {argument});
}

expr_result
expr::evaluate(expr_context *ctx,
               const std::initializer_list<taddr> &arguments) const {
   24cd8:	ed010113          	addi	sp,sp,-304
   24cdc:	12113423          	sd	ra,296(sp)
   24ce0:	12813023          	sd	s0,288(sp)
   24ce4:	10913c23          	sd	s1,280(sp)
   24ce8:	11213823          	sd	s2,272(sp)
   24cec:	11313423          	sd	s3,264(sp)
   24cf0:	11413023          	sd	s4,256(sp)
   24cf4:	0f513c23          	sd	s5,248(sp)
   24cf8:	0f613823          	sd	s6,240(sp)
   24cfc:	0f713423          	sd	s7,232(sp)
   24d00:	0f813023          	sd	s8,224(sp)
   24d04:	0d913c23          	sd	s9,216(sp)
   24d08:	0da13823          	sd	s10,208(sp)
   24d0c:	0db13423          	sd	s11,200(sp)
   24d10:	00050a93          	addi	s5,a0,0
   24d14:	00058913          	addi	s2,a1,0
   24d18:	00060b13          	addi	s6,a2,0
   24d1c:	00068993          	addi	s3,a3,0
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   24d20:	06810793          	addi	a5,sp,104
   24d24:	0af13423          	sd	a5,168(sp)
   24d28:	0af13823          	sd	a5,176(sp)
   24d2c:	0a810793          	addi	a5,sp,168
   24d30:	0af13c23          	sd	a5,184(sp)
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }

      // Number of elements.
      constexpr size_type
      size() const noexcept { return _M_len; }
   24d34:	0086b703          	ld	a4,8(a3)
    if (n <= (size_type)(cap - base))
   24d38:	00800793          	addi	a5,zero,8
   24d3c:	06e7f463          	bgeu	a5,a4,24da4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcc>
      target <<= 1;
   24d40:	00179793          	slli	a5,a5,0x1
    while (target < n)
   24d44:	fee7eee3          	bltu	a5,a4,24d40 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x68>
    char *newbuf = new char[sizeof(T[target])];
   24d48:	00379413          	slli	s0,a5,0x3
   24d4c:	00040513          	addi	a0,s0,0
   24d50:	841f10ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   24d54:	00050a13          	addi	s4,a0,0
    T *src = base, *dest = (T *)newbuf;
   24d58:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   24d5c:	0b013703          	ld	a4,176(sp)
   24d60:	06e57263          	bgeu	a0,a4,24dc4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xec>
    T *src = base, *dest = (T *)newbuf;
   24d64:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   24d68:	00878793          	addi	a5,a5,8
   24d6c:	fee7eee3          	bltu	a5,a4,24d68 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x90>
   24d70:	fff70493          	addi	s1,a4,-1
   24d74:	40a484b3          	sub	s1,s1,a0
   24d78:	ff84f493          	andi	s1,s1,-8
   24d7c:	00848493          	addi	s1,s1,8
   24d80:	009a04b3          	add	s1,s4,s1
    if ((char *)base != buf)
   24d84:	06810793          	addi	a5,sp,104
   24d88:	00f50663          	beq	a0,a5,24d94 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xbc>
      delete[] (char *)base;
   24d8c:	00050463          	beq	a0,zero,24d94 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xbc>
   24d90:	ac1f10ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   24d94:	0b413423          	sd	s4,168(sp)
    end = dest;
   24d98:	0a913823          	sd	s1,176(sp)
    cap = base + target;
   24d9c:	008a0a33          	add	s4,s4,s0
   24da0:	0b413c23          	sd	s4,184(sp)

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
   24da4:	0009b783          	ld	a5,0(s3)

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   24da8:	0089b483          	ld	s1,8(s3)
   24dac:	00349493          	slli	s1,s1,0x3
  small_vector<taddr, 8> stack;

  // Create the initial stack.  arguments are in reverse order
  // (that is, element 0 is TOS), so reverse it.
  stack.reserve(arguments.size());
  for (const taddr *elt = arguments.end() - 1; elt >= arguments.begin(); elt--)
   24db0:	ff848493          	addi	s1,s1,-8
   24db4:	009784b3          	add	s1,a5,s1
   24db8:	0cf4ea63          	bltu	s1,a5,24e8c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b4>
    if ((char *)base != buf)
   24dbc:	06810a13          	addi	s4,sp,104
   24dc0:	07c0006f          	jal	zero,24e3c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x164>
    T *src = base, *dest = (T *)newbuf;
   24dc4:	000a0493          	addi	s1,s4,0
   24dc8:	fbdff06f          	jal	zero,24d84 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xac>
    char *newbuf = new char[sizeof(T[target])];
   24dcc:	00050c13          	addi	s8,a0,0
    T *src = base, *dest = (T *)newbuf;
   24dd0:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   24dd4:	0b013703          	ld	a4,176(sp)
   24dd8:	0ae57663          	bgeu	a0,a4,24e84 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ac>
    T *src = base, *dest = (T *)newbuf;
   24ddc:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   24de0:	00878793          	addi	a5,a5,8
   24de4:	fee7eee3          	bltu	a5,a4,24de0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x108>
   24de8:	fff70b93          	addi	s7,a4,-1
   24dec:	40ab8bb3          	sub	s7,s7,a0
   24df0:	ff8bfb93          	andi	s7,s7,-8
   24df4:	008b8b93          	addi	s7,s7,8
   24df8:	017c0bb3          	add	s7,s8,s7
    if ((char *)base != buf)
   24dfc:	01450663          	beq	a0,s4,24e08 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x130>
      delete[] (char *)base;
   24e00:	00050463          	beq	a0,zero,24e08 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x130>
   24e04:	a4df10ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   24e08:	0b813423          	sd	s8,168(sp)
    end = dest;
   24e0c:	0b713823          	sd	s7,176(sp)
    cap = base + target;
   24e10:	008c0c33          	add	s8,s8,s0
   24e14:	0b813c23          	sd	s8,184(sp)
    new (end) T(x);
   24e18:	0004b703          	ld	a4,0(s1)
   24e1c:	0b013783          	ld	a5,176(sp)
   24e20:	00e7b023          	sd	a4,0(a5)
    end++;
   24e24:	0b013783          	ld	a5,176(sp)
   24e28:	00878793          	addi	a5,a5,8
   24e2c:	0af13823          	sd	a5,176(sp)
   24e30:	ff848493          	addi	s1,s1,-8
   24e34:	0009b783          	ld	a5,0(s3)
   24e38:	04f4ea63          	bltu	s1,a5,24e8c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b4>
  size_type size() const { return end - base; }
   24e3c:	0a813703          	ld	a4,168(sp)
   24e40:	0b013783          	ld	a5,176(sp)
   24e44:	40e787b3          	sub	a5,a5,a4
   24e48:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   24e4c:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   24e50:	0b813503          	ld	a0,184(sp)
   24e54:	40e50533          	sub	a0,a0,a4
   24e58:	40355513          	srai	a0,a0,0x3
   24e5c:	faf57ee3          	bgeu	a0,a5,24e18 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x140>
   24e60:	00051463          	bne	a0,zero,24e68 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x190>
   24e64:	00100513          	addi	a0,zero,1
    while (target < n)
   24e68:	00f57663          	bgeu	a0,a5,24e74 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19c>
      target <<= 1;
   24e6c:	00151513          	slli	a0,a0,0x1
    while (target < n)
   24e70:	fef56ee3          	bltu	a0,a5,24e6c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x194>
    char *newbuf = new char[sizeof(T[target])];
   24e74:	00351413          	slli	s0,a0,0x3
   24e78:	00040513          	addi	a0,s0,0
   24e7c:	f14f10ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   24e80:	f4dff06f          	jal	zero,24dcc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf4>
    T *src = base, *dest = (T *)newbuf;
   24e84:	000c0b93          	addi	s7,s8,0
   24e88:	f75ff06f          	jal	zero,24dfc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x124>
    stack.push_back(*elt);

  // Create a subsection for just this expression so we can
  // easily detect the end (including premature end).
  auto cusec = cu->data();
   24e8c:	00093503          	ld	a0,0(s2)
   24e90:	c90f30ef          	jal	ra,18320 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   24e94:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   24e98:	00853b83          	ld	s7,8(a0)
	if (_M_pi != nullptr)
   24e9c:	020b8063          	beq	s7,zero,24ebc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1e4>
    if (__is_single_threaded())
   24ea0:	0001e797          	auipc	a5,0x1e
   24ea4:	5f87b783          	ld	a5,1528(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   24ea8:	0007c783          	lbu	a5,0(a5)
   24eac:	02078463          	beq	a5,zero,24ed4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1fc>
  { *__mem += __val; }
   24eb0:	030ba783          	lw	a5,48(s7)
   24eb4:	0017879b          	addiw	a5,a5,1
   24eb8:	02fba823          	sw	a5,48(s7)
  shared_ptr<section> subsec(
      make_shared<section>(cusec->type, cusec->begin + offset, len, cusec->ord,
   24ebc:	0089b403          	ld	s0,8(s3)
   24ec0:	00893783          	ld	a5,8(s2)
   24ec4:	00f40433          	add	s0,s0,a5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   24ec8:	06000513          	addi	a0,zero,96
   24ecc:	8e5f10ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   24ed0:	0140006f          	jal	zero,24ee4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x20c>
      __atomic_add(__mem, __val);
   24ed4:	00100593          	addi	a1,zero,1
   24ed8:	030b8513          	addi	a0,s7,48
   24edc:	ed4f10ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   24ee0:	fddff06f          	jal	zero,24ebc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1e4>
   24ee4:	00050493          	addi	s1,a0,0
   24ee8:	00052423          	sw	zero,8(a0)
   24eec:	00052623          	sw	zero,12(a0)
   24ef0:	00052823          	sw	zero,16(a0)
   24ef4:	00052a23          	sw	zero,20(a0)
   24ef8:	00052c23          	sw	zero,24(a0)
   24efc:	00052e23          	sw	zero,28(a0)
   24f00:	02053023          	sd	zero,32(a0)
   24f04:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   24f08:	00100793          	addi	a5,zero,1
   24f0c:	02f52823          	sw	a5,48(a0)
   24f10:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   24f14:	0001e797          	auipc	a5,0x1e
   24f18:	6c47b783          	ld	a5,1732(a5) # 435d8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   24f1c:	01078793          	addi	a5,a5,16
   24f20:	00f53023          	sd	a5,0(a0)
   24f24:	0009a583          	lw	a1,0(s3)
   24f28:	01093603          	ld	a2,16(s2)
   24f2c:	01c9a703          	lw	a4,28(s3)
   24f30:	0189a683          	lw	a3,24(s3)
   24f34:	0209a783          	lw	a5,32(s3)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   24f38:	02b52c23          	sw	a1,56(a0)
   24f3c:	04853023          	sd	s0,64(a0)
   24f40:	00c40433          	add	s0,s0,a2
   24f44:	04853423          	sd	s0,72(a0)
   24f48:	04d52823          	sw	a3,80(a0)
        ord(ord), addr_size(addr_size) {}
   24f4c:	04e52a23          	sw	a4,84(a0)
   24f50:	04f52c23          	sw	a5,88(a0)
   24f54:	03850c13          	addi	s8,a0,56
    if (__is_single_threaded())
   24f58:	0001e797          	auipc	a5,0x1e
   24f5c:	5407b783          	ld	a5,1344(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   24f60:	0007c783          	lbu	a5,0(a5)
   24f64:	16078c63          	beq	a5,zero,250dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x404>
  { *__mem += __val; }
   24f68:	00200793          	addi	a5,zero,2
   24f6c:	02f52823          	sw	a5,48(a0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   24f70:	05813823          	sd	s8,80(sp)
      : _M_pi(__r._M_pi)
   24f74:	04913c23          	sd	s1,88(sp)
    if (__is_single_threaded())
   24f78:	0001e797          	auipc	a5,0x1e
   24f7c:	5207b783          	ld	a5,1312(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   24f80:	0007c783          	lbu	a5,0(a5)
   24f84:	16078463          	beq	a5,zero,250ec <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x414>
  { *__mem += __val; }
   24f88:	0304a783          	lw	a5,48(s1)
   24f8c:	0017879b          	addiw	a5,a5,1
   24f90:	02f4a823          	sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   24f94:	0404b783          	ld	a5,64(s1)
   24f98:	06f13023          	sd	a5,96(sp)
    if (__is_single_threaded())
   24f9c:	0001e797          	auipc	a5,0x1e
   24fa0:	4fc7b783          	ld	a5,1276(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   24fa4:	0007c783          	lbu	a5,0(a5)
   24fa8:	14078a63          	beq	a5,zero,250fc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x424>
    _Atomic_word __result = *__mem;
   24fac:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   24fb0:	fff5079b          	addiw	a5,a0,-1
   24fb4:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   24fb8:	00100793          	addi	a5,zero,1
   24fbc:	14f50863          	beq	a0,a5,2510c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x434>
  bool end() const { return pos >= sec->end; }
   24fc0:	05013783          	ld	a5,80(sp)
  // create the result directly, rather than using the top of
  // stack.
  expr_result result;

  // 2.6.1.1.4 Empty location descriptions
  if (cur.end()) {
   24fc4:	0107b703          	ld	a4,16(a5)
   24fc8:	06013783          	ld	a5,96(sp)
   24fcc:	1ae7e063          	bltu	a5,a4,2516c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x494>
    result.location_type = expr_result::type::empty;
   24fd0:	00400793          	addi	a5,zero,4
   24fd4:	00faa023          	sw	a5,0(s5)
    result.value = 0;
   24fd8:	000ab423          	sd	zero,8(s5)
	if (_M_pi != nullptr)
   24fdc:	05813403          	ld	s0,88(sp)
   24fe0:	02040863          	beq	s0,zero,25010 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x338>
    if (__is_single_threaded())
   24fe4:	0001e797          	auipc	a5,0x1e
   24fe8:	4b47b783          	ld	a5,1204(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   24fec:	0007c783          	lbu	a5,0(a5)
   24ff0:	00079463          	bne	a5,zero,24ff8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x320>
   24ff4:	7290106f          	jal	zero,26f1c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2244>
    _Atomic_word __result = *__mem;
   24ff8:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   24ffc:	fff5079b          	addiw	a5,a0,-1
   25000:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   25004:	00100793          	addi	a5,zero,1
   25008:	00f51463          	bne	a0,a5,25010 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x338>
   2500c:	7210106f          	jal	zero,26f2c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2254>
    if (__is_single_threaded())
   25010:	0001e797          	auipc	a5,0x1e
   25014:	4887b783          	ld	a5,1160(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   25018:	0007c783          	lbu	a5,0(a5)
   2501c:	00079463          	bne	a5,zero,25024 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x34c>
   25020:	7710106f          	jal	zero,26f90 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x22b8>
    _Atomic_word __result = *__mem;
   25024:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   25028:	fff5079b          	addiw	a5,a0,-1
   2502c:	02f4a823          	sw	a5,48(s1)
   25030:	00100793          	addi	a5,zero,1
   25034:	00f51463          	bne	a0,a5,2503c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x364>
   25038:	7690106f          	jal	zero,26fa0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x22c8>
	if (_M_pi != nullptr)
   2503c:	020b8863          	beq	s7,zero,2506c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x394>
    if (__is_single_threaded())
   25040:	0001e797          	auipc	a5,0x1e
   25044:	4587b783          	ld	a5,1112(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   25048:	0007c783          	lbu	a5,0(a5)
   2504c:	00079463          	bne	a5,zero,25054 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x37c>
   25050:	7b50106f          	jal	zero,27004 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x232c>
    _Atomic_word __result = *__mem;
   25054:	030ba503          	lw	a0,48(s7)
    *__mem += __val;
   25058:	fff5079b          	addiw	a5,a0,-1
   2505c:	02fba823          	sw	a5,48(s7)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   25060:	00100793          	addi	a5,zero,1
   25064:	00f51463          	bne	a0,a5,2506c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x394>
   25068:	7ad0106f          	jal	zero,27014 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x233c>
    for (T *p = base; p < end; ++p)
   2506c:	0a813503          	ld	a0,168(sp)
   25070:	0b013783          	ld	a5,176(sp)
   25074:	00f57a63          	bgeu	a0,a5,25088 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x3b0>
   25078:	00050793          	addi	a5,a0,0
   2507c:	00878793          	addi	a5,a5,8
   25080:	0b013703          	ld	a4,176(sp)
   25084:	fee7ece3          	bltu	a5,a4,2507c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x3a4>
    end = base;
   25088:	0aa13823          	sd	a0,176(sp)
    if ((char *)base != buf)
   2508c:	06810793          	addi	a5,sp,104
   25090:	00f50663          	beq	a0,a5,2509c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x3c4>
      delete[] (char *)base;
   25094:	00050463          	beq	a0,zero,2509c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x3c4>
   25098:	fb8f10ef          	jal	ra,16850 <operator delete[](void*)@plt>

  return result;

underflow:
  throw expr_error("stack underflow evaluating DWARF expression");
}
   2509c:	000a8513          	addi	a0,s5,0
   250a0:	12813083          	ld	ra,296(sp)
   250a4:	12013403          	ld	s0,288(sp)
   250a8:	11813483          	ld	s1,280(sp)
   250ac:	11013903          	ld	s2,272(sp)
   250b0:	10813983          	ld	s3,264(sp)
   250b4:	10013a03          	ld	s4,256(sp)
   250b8:	0f813a83          	ld	s5,248(sp)
   250bc:	0f013b03          	ld	s6,240(sp)
   250c0:	0e813b83          	ld	s7,232(sp)
   250c4:	0e013c03          	ld	s8,224(sp)
   250c8:	0d813c83          	ld	s9,216(sp)
   250cc:	0d013d03          	ld	s10,208(sp)
   250d0:	0c813d83          	ld	s11,200(sp)
   250d4:	13010113          	addi	sp,sp,304
   250d8:	00008067          	jalr	zero,0(ra)
      __atomic_add(__mem, __val);
   250dc:	00100593          	addi	a1,zero,1
   250e0:	03050513          	addi	a0,a0,48
   250e4:	cccf10ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   250e8:	e89ff06f          	jal	zero,24f70 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x298>
   250ec:	00100593          	addi	a1,zero,1
   250f0:	03048513          	addi	a0,s1,48
   250f4:	cbcf10ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   250f8:	e9dff06f          	jal	zero,24f94 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2bc>
      return __exchange_and_add(__mem, __val);
   250fc:	fff00593          	addi	a1,zero,-1
   25100:	03048513          	addi	a0,s1,48
   25104:	cecf10ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   25108:	eb1ff06f          	jal	zero,24fb8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2e0>
	_M_dispose();
   2510c:	0004b783          	ld	a5,0(s1)
   25110:	0107b783          	ld	a5,16(a5)
   25114:	00048513          	addi	a0,s1,0
   25118:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2511c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   25120:	0001e797          	auipc	a5,0x1e
   25124:	3787b783          	ld	a5,888(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   25128:	0007c783          	lbu	a5,0(a5)
   2512c:	02078663          	beq	a5,zero,25158 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x480>
    _Atomic_word __result = *__mem;
   25130:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   25134:	fff7871b          	addiw	a4,a5,-1
   25138:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2513c:	00100713          	addi	a4,zero,1
   25140:	e8e790e3          	bne	a5,a4,24fc0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2e8>
	    _M_destroy();
   25144:	0004b783          	ld	a5,0(s1)
   25148:	0187b783          	ld	a5,24(a5)
   2514c:	00048513          	addi	a0,s1,0
   25150:	000780e7          	jalr	ra,0(a5)
   25154:	e6dff06f          	jal	zero,24fc0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2e8>
      return __exchange_and_add(__mem, __val);
   25158:	fff00593          	addi	a1,zero,-1
   2515c:	03448513          	addi	a0,s1,52
   25160:	c90f10ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   25164:	00050793          	addi	a5,a0,0
   25168:	fd5ff06f          	jal	zero,2513c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x464>
  result.location_type = expr_result::type::address;
   2516c:	000aa023          	sw	zero,0(s5)
    switch (op) {
   25170:	0fc00993          	addi	s3,zero,252
   25174:	00013417          	auipc	s0,0x13
   25178:	26440413          	addi	s0,s0,612 # 383d8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x430>
    return ::__libc_single_threaded;
   2517c:	0001ed17          	auipc	s10,0x1e
   25180:	31cd3d03          	ld	s10,796(s10) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
      CHECKN(2);
   25184:	00800d93          	addi	s11,zero,8
  while (!cur.end()) {
   25188:	1b40106f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    while (pos < sec->end) {
   2518c:	0106b783          	ld	a5,16(a3)
    std::uint64_t result = 0;
   25190:	00000913          	addi	s2,zero,0
    int shift = 0;
   25194:	00000593          	addi	a1,zero,0
    while (pos < sec->end) {
   25198:	02f77a63          	bgeu	a4,a5,251cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4f4>
      uint8_t byte = *(uint8_t *)(pos++);
   2519c:	00170713          	addi	a4,a4,1
   251a0:	06e13023          	sd	a4,96(sp)
   251a4:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   251a8:	07f7f613          	andi	a2,a5,127
   251ac:	00b61633          	sll	a2,a2,a1
   251b0:	00c96933          	or	s2,s2,a2
      if ((byte & 0x80) == 0)
   251b4:	0187979b          	slliw	a5,a5,0x18
   251b8:	4187d79b          	sraiw	a5,a5,0x18
   251bc:	5607d6e3          	bge	a5,zero,25f28 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1250>
      shift += 7;
   251c0:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   251c4:	0106b783          	ld	a5,16(a3)
   251c8:	fcf76ae3          	bltu	a4,a5,2519c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4c4>
    underflow();
   251cc:	05010513          	addi	a0,sp,80
   251d0:	f74f80ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    return 0;
   251d4:	5510006f          	jal	zero,25f24 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x124c>
    while (pos < sec->end) {
   251d8:	0106b783          	ld	a5,16(a3)
    std::uint64_t result = 0;
   251dc:	00000513          	addi	a0,zero,0
    int shift = 0;
   251e0:	00000593          	addi	a1,zero,0
    while (pos < sec->end) {
   251e4:	02f77c63          	bgeu	a4,a5,2521c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x544>
      uint8_t byte = *(uint8_t *)(pos++);
   251e8:	00170713          	addi	a4,a4,1
   251ec:	06e13023          	sd	a4,96(sp)
   251f0:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   251f4:	07f7f613          	andi	a2,a5,127
   251f8:	00b61633          	sll	a2,a2,a1
   251fc:	00c56533          	or	a0,a0,a2
      if ((byte & 0x80) == 0)
   25200:	0187979b          	slliw	a5,a5,0x18
   25204:	4187d79b          	sraiw	a5,a5,0x18
   25208:	0007c463          	blt	a5,zero,25210 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x538>
   2520c:	4240106f          	jal	zero,26630 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1958>
      shift += 7;
   25210:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   25214:	0106b783          	ld	a5,16(a3)
   25218:	fcf768e3          	bltu	a4,a5,251e8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x510>
    underflow();
   2521c:	05010513          	addi	a0,sp,80
   25220:	f24f80ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    return 0;
   25224:	4080106f          	jal	zero,2662c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1954>
    while (pos < sec->end) {
   25228:	0106b783          	ld	a5,16(a3)
    std::uint64_t result = 0;
   2522c:	00000a13          	addi	s4,zero,0
    int shift = 0;
   25230:	00000593          	addi	a1,zero,0
    while (pos < sec->end) {
   25234:	02f77a63          	bgeu	a4,a5,25268 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x590>
      uint8_t byte = *(uint8_t *)(pos++);
   25238:	00170713          	addi	a4,a4,1
   2523c:	06e13023          	sd	a4,96(sp)
   25240:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   25244:	07f7f613          	andi	a2,a5,127
   25248:	00b61633          	sll	a2,a2,a1
   2524c:	00ca6a33          	or	s4,s4,a2
      if ((byte & 0x80) == 0)
   25250:	0187979b          	slliw	a5,a5,0x18
   25254:	4187d79b          	sraiw	a5,a5,0x18
   25258:	2207d8e3          	bge	a5,zero,25c88 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfb0>
      shift += 7;
   2525c:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   25260:	0106b783          	ld	a5,16(a3)
   25264:	fcf76ae3          	bltu	a4,a5,25238 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x560>
    underflow();
   25268:	05010513          	addi	a0,sp,80
   2526c:	ed8f80ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    return 0;
   25270:	2150006f          	jal	zero,25c84 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfac>
      stack.push_back((unsigned)op - (unsigned)DW_OP::lit0);
   25274:	fd09091b          	addiw	s2,s2,-48
   25278:	02091913          	slli	s2,s2,0x20
   2527c:	02095913          	srli	s2,s2,0x20
  size_type size() const { return end - base; }
   25280:	0a813703          	ld	a4,168(sp)
   25284:	0b013783          	ld	a5,176(sp)
   25288:	40e787b3          	sub	a5,a5,a4
   2528c:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   25290:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   25294:	0b813a03          	ld	s4,184(sp)
   25298:	40ea0a33          	sub	s4,s4,a4
   2529c:	403a5a13          	srai	s4,s4,0x3
   252a0:	06fa7e63          	bgeu	s4,a5,2531c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x644>
   252a4:	000a1463          	bne	s4,zero,252ac <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5d4>
   252a8:	00100a13          	addi	s4,zero,1
    while (target < n)
   252ac:	00fa7663          	bgeu	s4,a5,252b8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5e0>
      target <<= 1;
   252b0:	001a1a13          	slli	s4,s4,0x1
    while (target < n)
   252b4:	fefa6ee3          	bltu	s4,a5,252b0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5d8>
    char *newbuf = new char[sizeof(T[target])];
   252b8:	003a1a13          	slli	s4,s4,0x3
   252bc:	000a0513          	addi	a0,s4,0
   252c0:	ad0f10ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   252c4:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   252c8:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   252cc:	0b013703          	ld	a4,176(sp)
   252d0:	06e57263          	bgeu	a0,a4,25334 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x65c>
    T *src = base, *dest = (T *)newbuf;
   252d4:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   252d8:	00878793          	addi	a5,a5,8
   252dc:	fee7eee3          	bltu	a5,a4,252d8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x600>
   252e0:	fff70793          	addi	a5,a4,-1
   252e4:	40a787b3          	sub	a5,a5,a0
   252e8:	ff87f793          	andi	a5,a5,-8
   252ec:	00878793          	addi	a5,a5,8
   252f0:	00fc87b3          	add	a5,s9,a5
   252f4:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   252f8:	06810793          	addi	a5,sp,104
   252fc:	00f50663          	beq	a0,a5,25308 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x630>
      delete[] (char *)base;
   25300:	00050463          	beq	a0,zero,25308 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x630>
   25304:	d4cf10ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   25308:	0b913423          	sd	s9,168(sp)
    end = dest;
   2530c:	00813783          	ld	a5,8(sp)
   25310:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   25314:	014c8cb3          	add	s9,s9,s4
   25318:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   2531c:	0b013783          	ld	a5,176(sp)
   25320:	0127b023          	sd	s2,0(a5)
    end++;
   25324:	0b013783          	ld	a5,176(sp)
   25328:	00878793          	addi	a5,a5,8
   2532c:	0af13823          	sd	a5,176(sp)
      break;
   25330:	00c0106f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   25334:	01913423          	sd	s9,8(sp)
   25338:	fc1ff06f          	jal	zero,252f8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x620>
      stack.push_back(cur.address());
   2533c:	05010513          	addi	a0,sp,80
   25340:	0001e317          	auipc	t1,0x1e
   25344:	05033303          	ld	t1,80(t1) # 43390 <dwarf::cursor::address()@@Base+0x1f5a4>
   25348:	000300e7          	jalr	ra,0(t1)
   2534c:	00a13423          	sd	a0,8(sp)
  size_type size() const { return end - base; }
   25350:	0a813703          	ld	a4,168(sp)
   25354:	0b013783          	ld	a5,176(sp)
   25358:	40e787b3          	sub	a5,a5,a4
   2535c:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   25360:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   25364:	0b813903          	ld	s2,184(sp)
   25368:	40e90933          	sub	s2,s2,a4
   2536c:	40395913          	srai	s2,s2,0x3
   25370:	06f97a63          	bgeu	s2,a5,253e4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x70c>
   25374:	00091463          	bne	s2,zero,2537c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6a4>
   25378:	00100913          	addi	s2,zero,1
    while (target < n)
   2537c:	00f97663          	bgeu	s2,a5,25388 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6b0>
      target <<= 1;
   25380:	00191913          	slli	s2,s2,0x1
    while (target < n)
   25384:	fef96ee3          	bltu	s2,a5,25380 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6a8>
    char *newbuf = new char[sizeof(T[target])];
   25388:	00391913          	slli	s2,s2,0x3
   2538c:	00090513          	addi	a0,s2,0
   25390:	a00f10ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   25394:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   25398:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   2539c:	0b013703          	ld	a4,176(sp)
   253a0:	06e57063          	bgeu	a0,a4,25400 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x728>
    T *src = base, *dest = (T *)newbuf;
   253a4:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   253a8:	00878793          	addi	a5,a5,8
   253ac:	fee7eee3          	bltu	a5,a4,253a8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6d0>
   253b0:	fff70a13          	addi	s4,a4,-1
   253b4:	40aa0a33          	sub	s4,s4,a0
   253b8:	ff8a7a13          	andi	s4,s4,-8
   253bc:	008a0a13          	addi	s4,s4,8
   253c0:	014c8a33          	add	s4,s9,s4
    if ((char *)base != buf)
   253c4:	06810793          	addi	a5,sp,104
   253c8:	00f50663          	beq	a0,a5,253d4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6fc>
      delete[] (char *)base;
   253cc:	00050463          	beq	a0,zero,253d4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6fc>
   253d0:	c80f10ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   253d4:	0b913423          	sd	s9,168(sp)
    end = dest;
   253d8:	0b413823          	sd	s4,176(sp)
    cap = base + target;
   253dc:	012c8cb3          	add	s9,s9,s2
   253e0:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   253e4:	0b013783          	ld	a5,176(sp)
   253e8:	00813703          	ld	a4,8(sp)
   253ec:	00e7b023          	sd	a4,0(a5)
    end++;
   253f0:	0b013783          	ld	a5,176(sp)
   253f4:	00878793          	addi	a5,a5,8
   253f8:	0af13823          	sd	a5,176(sp)
      break;
   253fc:	7410006f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   25400:	000c8a13          	addi	s4,s9,0
   25404:	fc1ff06f          	jal	zero,253c4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6ec>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   25408:	0106b783          	ld	a5,16(a3)
   2540c:	00f76663          	bltu	a4,a5,25418 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x740>
      underflow();
   25410:	05010513          	addi	a0,sp,80
   25414:	d30f80ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   25418:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   2541c:	05013703          	ld	a4,80(sp)
   25420:	01c72703          	lw	a4,28(a4)
   25424:	00071463          	bne	a4,zero,2542c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x754>
   25428:	6350106f          	jal	zero,2725c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2584>
        val = (val << 8) | (uint64_t)p[i];
   2542c:	0007cc83          	lbu	s9,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   25430:	6310106f          	jal	zero,27260 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2588>
    char *newbuf = new char[sizeof(T[target])];
   25434:	00050a13          	addi	s4,a0,0
    T *src = base, *dest = (T *)newbuf;
   25438:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   2543c:	0b013703          	ld	a4,176(sp)
   25440:	06e57263          	bgeu	a0,a4,254a4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7cc>
    T *src = base, *dest = (T *)newbuf;
   25444:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   25448:	00878793          	addi	a5,a5,8
   2544c:	fee7eee3          	bltu	a5,a4,25448 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x770>
   25450:	fff70793          	addi	a5,a4,-1
   25454:	40a787b3          	sub	a5,a5,a0
   25458:	ff87f793          	andi	a5,a5,-8
   2545c:	00878793          	addi	a5,a5,8
   25460:	00fa07b3          	add	a5,s4,a5
   25464:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   25468:	06810793          	addi	a5,sp,104
   2546c:	00f50663          	beq	a0,a5,25478 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7a0>
      delete[] (char *)base;
   25470:	00050463          	beq	a0,zero,25478 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7a0>
   25474:	bdcf10ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   25478:	0b413423          	sd	s4,168(sp)
    end = dest;
   2547c:	00813783          	ld	a5,8(sp)
   25480:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   25484:	012a0a33          	add	s4,s4,s2
   25488:	0b413c23          	sd	s4,184(sp)
    new (end) T(std::move(x));
   2548c:	0b013783          	ld	a5,176(sp)
   25490:	0197b023          	sd	s9,0(a5)
    end++;
   25494:	0b013783          	ld	a5,176(sp)
   25498:	00878793          	addi	a5,a5,8
   2549c:	0af13823          	sd	a5,176(sp)
      break;
   254a0:	69d0006f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   254a4:	01413423          	sd	s4,8(sp)
   254a8:	fc1ff06f          	jal	zero,25468 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x790>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   254ac:	0106b783          	ld	a5,16(a3)
   254b0:	40e78633          	sub	a2,a5,a4
   254b4:	00100693          	addi	a3,zero,1
   254b8:	00c6f463          	bgeu	a3,a2,254c0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7e8>
   254bc:	00f76663          	bltu	a4,a5,254c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7f0>
      underflow();
   254c0:	05010513          	addi	a0,sp,80
   254c4:	c80f80ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   254c8:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   254cc:	05013703          	ld	a4,80(sp)
   254d0:	01c72703          	lw	a4,28(a4)
   254d4:	06071263          	bne	a4,zero,25538 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x860>
        val |= ((uint64_t)p[i]) << (i * 8);
   254d8:	0017ca03          	lbu	s4,1(a5)
   254dc:	008a1a13          	slli	s4,s4,0x8
   254e0:	0007c703          	lbu	a4,0(a5)
   254e4:	00ea6a33          	or	s4,s4,a4
    pos += sizeof(T);
   254e8:	00278793          	addi	a5,a5,2
   254ec:	06f13023          	sd	a5,96(sp)
  size_type size() const { return end - base; }
   254f0:	0a813703          	ld	a4,168(sp)
   254f4:	0b013783          	ld	a5,176(sp)
   254f8:	40e787b3          	sub	a5,a5,a4
   254fc:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   25500:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   25504:	0b813903          	ld	s2,184(sp)
   25508:	40e90933          	sub	s2,s2,a4
   2550c:	40395913          	srai	s2,s2,0x3
   25510:	08f97a63          	bgeu	s2,a5,255a4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8cc>
   25514:	00091463          	bne	s2,zero,2551c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x844>
   25518:	00100913          	addi	s2,zero,1
    while (target < n)
   2551c:	00f97663          	bgeu	s2,a5,25528 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x850>
      target <<= 1;
   25520:	00191913          	slli	s2,s2,0x1
    while (target < n)
   25524:	fef96ee3          	bltu	s2,a5,25520 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x848>
    char *newbuf = new char[sizeof(T[target])];
   25528:	00391913          	slli	s2,s2,0x3
   2552c:	00090513          	addi	a0,s2,0
   25530:	860f10ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   25534:	0180006f          	jal	zero,2554c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x874>
        val = (val << 8) | (uint64_t)p[i];
   25538:	0007ca03          	lbu	s4,0(a5)
   2553c:	008a1a13          	slli	s4,s4,0x8
   25540:	0017c703          	lbu	a4,1(a5)
   25544:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   25548:	fa1ff06f          	jal	zero,254e8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x810>
   2554c:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   25550:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   25554:	0b013703          	ld	a4,176(sp)
   25558:	06e57263          	bgeu	a0,a4,255bc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8e4>
    T *src = base, *dest = (T *)newbuf;
   2555c:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   25560:	00878793          	addi	a5,a5,8
   25564:	fee7eee3          	bltu	a5,a4,25560 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x888>
   25568:	fff70793          	addi	a5,a4,-1
   2556c:	40a787b3          	sub	a5,a5,a0
   25570:	ff87f793          	andi	a5,a5,-8
   25574:	00878793          	addi	a5,a5,8
   25578:	00fc87b3          	add	a5,s9,a5
   2557c:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   25580:	06810793          	addi	a5,sp,104
   25584:	00f50663          	beq	a0,a5,25590 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8b8>
      delete[] (char *)base;
   25588:	00050463          	beq	a0,zero,25590 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8b8>
   2558c:	ac4f10ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   25590:	0b913423          	sd	s9,168(sp)
    end = dest;
   25594:	00813783          	ld	a5,8(sp)
   25598:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   2559c:	012c8cb3          	add	s9,s9,s2
   255a0:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   255a4:	0b013783          	ld	a5,176(sp)
   255a8:	0147b023          	sd	s4,0(a5)
    end++;
   255ac:	0b013783          	ld	a5,176(sp)
   255b0:	00878793          	addi	a5,a5,8
   255b4:	0af13823          	sd	a5,176(sp)
      break;
   255b8:	5850006f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   255bc:	01913423          	sd	s9,8(sp)
   255c0:	fc1ff06f          	jal	zero,25580 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8a8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   255c4:	0106b783          	ld	a5,16(a3)
   255c8:	40e78633          	sub	a2,a5,a4
   255cc:	00300693          	addi	a3,zero,3
   255d0:	00c6f463          	bgeu	a3,a2,255d8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x900>
   255d4:	00f76663          	bltu	a4,a5,255e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x908>
      underflow();
   255d8:	05010513          	addi	a0,sp,80
   255dc:	b68f80ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   255e0:	06013603          	ld	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   255e4:	05013783          	ld	a5,80(sp)
   255e8:	01c7a783          	lw	a5,28(a5)
   255ec:	08079063          	bne	a5,zero,2566c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x994>
   255f0:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   255f4:	00000a13          	addi	s4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   255f8:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   255fc:	0006c703          	lbu	a4,0(a3)
   25600:	00f71733          	sll	a4,a4,a5
   25604:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   25608:	00168693          	addi	a3,a3,1
   2560c:	0087879b          	addiw	a5,a5,8
   25610:	feb796e3          	bne	a5,a1,255fc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x924>
    pos += sizeof(T);
   25614:	00460613          	addi	a2,a2,4
   25618:	06c13023          	sd	a2,96(sp)
   2561c:	020a1a13          	slli	s4,s4,0x20
   25620:	020a5a13          	srli	s4,s4,0x20
  size_type size() const { return end - base; }
   25624:	0a813703          	ld	a4,168(sp)
   25628:	0b013783          	ld	a5,176(sp)
   2562c:	40e787b3          	sub	a5,a5,a4
   25630:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   25634:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   25638:	0b813903          	ld	s2,184(sp)
   2563c:	40e90933          	sub	s2,s2,a4
   25640:	40395913          	srai	s2,s2,0x3
   25644:	0af97263          	bgeu	s2,a5,256e8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa10>
   25648:	00091463          	bne	s2,zero,25650 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x978>
   2564c:	00100913          	addi	s2,zero,1
    while (target < n)
   25650:	00f97663          	bgeu	s2,a5,2565c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x984>
      target <<= 1;
   25654:	00191913          	slli	s2,s2,0x1
    while (target < n)
   25658:	fef96ee3          	bltu	s2,a5,25654 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x97c>
    char *newbuf = new char[sizeof(T[target])];
   2565c:	00391913          	slli	s2,s2,0x3
   25660:	00090513          	addi	a0,s2,0
   25664:	f2df00ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   25668:	0280006f          	jal	zero,25690 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9b8>
   2566c:	00060793          	addi	a5,a2,0
   25670:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   25674:	00000a13          	addi	s4,zero,0
        val = (val << 8) | (uint64_t)p[i];
   25678:	008a1a13          	slli	s4,s4,0x8
   2567c:	0007c703          	lbu	a4,0(a5)
   25680:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   25684:	00178793          	addi	a5,a5,1
   25688:	fef698e3          	bne	a3,a5,25678 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9a0>
   2568c:	f89ff06f          	jal	zero,25614 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x93c>
   25690:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   25694:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   25698:	0b013703          	ld	a4,176(sp)
   2569c:	06e57263          	bgeu	a0,a4,25700 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa28>
    T *src = base, *dest = (T *)newbuf;
   256a0:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   256a4:	00878793          	addi	a5,a5,8
   256a8:	fee7eee3          	bltu	a5,a4,256a4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9cc>
   256ac:	fff70793          	addi	a5,a4,-1
   256b0:	40a787b3          	sub	a5,a5,a0
   256b4:	ff87f793          	andi	a5,a5,-8
   256b8:	00878793          	addi	a5,a5,8
   256bc:	00fc87b3          	add	a5,s9,a5
   256c0:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   256c4:	06810793          	addi	a5,sp,104
   256c8:	00f50663          	beq	a0,a5,256d4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9fc>
      delete[] (char *)base;
   256cc:	00050463          	beq	a0,zero,256d4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9fc>
   256d0:	980f10ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   256d4:	0b913423          	sd	s9,168(sp)
    end = dest;
   256d8:	00813783          	ld	a5,8(sp)
   256dc:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   256e0:	012c8cb3          	add	s9,s9,s2
   256e4:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   256e8:	0b013783          	ld	a5,176(sp)
   256ec:	0147b023          	sd	s4,0(a5)
    end++;
   256f0:	0b013783          	ld	a5,176(sp)
   256f4:	00878793          	addi	a5,a5,8
   256f8:	0af13823          	sd	a5,176(sp)
      break;
   256fc:	4410006f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   25700:	01913423          	sd	s9,8(sp)
   25704:	fc1ff06f          	jal	zero,256c4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9ec>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   25708:	0106b783          	ld	a5,16(a3)
   2570c:	40e78633          	sub	a2,a5,a4
   25710:	00700693          	addi	a3,zero,7
   25714:	00c6f463          	bgeu	a3,a2,2571c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa44>
   25718:	00f76663          	bltu	a4,a5,25724 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa4c>
      underflow();
   2571c:	05010513          	addi	a0,sp,80
   25720:	a24f80ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   25724:	06013603          	ld	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   25728:	05013783          	ld	a5,80(sp)
   2572c:	01c7a783          	lw	a5,28(a5)
   25730:	06079c63          	bne	a5,zero,257a8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xad0>
   25734:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   25738:	00000a13          	addi	s4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   2573c:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   25740:	0006c703          	lbu	a4,0(a3)
   25744:	00f71733          	sll	a4,a4,a5
   25748:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   2574c:	00168693          	addi	a3,a3,1
   25750:	0087879b          	addiw	a5,a5,8
   25754:	feb796e3          	bne	a5,a1,25740 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa68>
    pos += sizeof(T);
   25758:	00860613          	addi	a2,a2,8
   2575c:	06c13023          	sd	a2,96(sp)
  size_type size() const { return end - base; }
   25760:	0a813703          	ld	a4,168(sp)
   25764:	0b013783          	ld	a5,176(sp)
   25768:	40e787b3          	sub	a5,a5,a4
   2576c:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   25770:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   25774:	0b813903          	ld	s2,184(sp)
   25778:	40e90933          	sub	s2,s2,a4
   2577c:	40395913          	srai	s2,s2,0x3
   25780:	0af97263          	bgeu	s2,a5,25824 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb4c>
   25784:	00091463          	bne	s2,zero,2578c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xab4>
   25788:	00100913          	addi	s2,zero,1
    while (target < n)
   2578c:	00f97663          	bgeu	s2,a5,25798 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xac0>
      target <<= 1;
   25790:	00191913          	slli	s2,s2,0x1
    while (target < n)
   25794:	fef96ee3          	bltu	s2,a5,25790 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xab8>
    char *newbuf = new char[sizeof(T[target])];
   25798:	00391913          	slli	s2,s2,0x3
   2579c:	00090513          	addi	a0,s2,0
   257a0:	df1f00ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   257a4:	0280006f          	jal	zero,257cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xaf4>
   257a8:	00060793          	addi	a5,a2,0
   257ac:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   257b0:	00000a13          	addi	s4,zero,0
        val = (val << 8) | (uint64_t)p[i];
   257b4:	008a1a13          	slli	s4,s4,0x8
   257b8:	0007c703          	lbu	a4,0(a5)
   257bc:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   257c0:	00178793          	addi	a5,a5,1
   257c4:	fed798e3          	bne	a5,a3,257b4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xadc>
   257c8:	f91ff06f          	jal	zero,25758 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa80>
   257cc:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   257d0:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   257d4:	0b013703          	ld	a4,176(sp)
   257d8:	06e57263          	bgeu	a0,a4,2583c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb64>
    T *src = base, *dest = (T *)newbuf;
   257dc:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   257e0:	00878793          	addi	a5,a5,8
   257e4:	fee7eee3          	bltu	a5,a4,257e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb08>
   257e8:	fff70793          	addi	a5,a4,-1
   257ec:	40a787b3          	sub	a5,a5,a0
   257f0:	ff87f793          	andi	a5,a5,-8
   257f4:	00878793          	addi	a5,a5,8
   257f8:	00fc87b3          	add	a5,s9,a5
   257fc:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   25800:	06810793          	addi	a5,sp,104
   25804:	00f50663          	beq	a0,a5,25810 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb38>
      delete[] (char *)base;
   25808:	00050463          	beq	a0,zero,25810 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb38>
   2580c:	844f10ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   25810:	0b913423          	sd	s9,168(sp)
    end = dest;
   25814:	00813783          	ld	a5,8(sp)
   25818:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   2581c:	012c8cb3          	add	s9,s9,s2
   25820:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   25824:	0b013783          	ld	a5,176(sp)
   25828:	0147b023          	sd	s4,0(a5)
    end++;
   2582c:	0b013783          	ld	a5,176(sp)
   25830:	00878793          	addi	a5,a5,8
   25834:	0af13823          	sd	a5,176(sp)
      break;
   25838:	3050006f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   2583c:	01913423          	sd	s9,8(sp)
   25840:	fc1ff06f          	jal	zero,25800 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb28>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   25844:	0106b783          	ld	a5,16(a3)
   25848:	00f76663          	bltu	a4,a5,25854 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb7c>
      underflow();
   2584c:	05010513          	addi	a0,sp,80
   25850:	8f4f80ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   25854:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   25858:	05013703          	ld	a4,80(sp)
   2585c:	01c72703          	lw	a4,28(a4)
   25860:	00071463          	bne	a4,zero,25868 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb90>
   25864:	2510106f          	jal	zero,272b4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x25dc>
        val = (val << 8) | (uint64_t)p[i];
   25868:	0007cc83          	lbu	s9,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   2586c:	24d0106f          	jal	zero,272b8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x25e0>
    char *newbuf = new char[sizeof(T[target])];
   25870:	00050a13          	addi	s4,a0,0
    T *src = base, *dest = (T *)newbuf;
   25874:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   25878:	0b013703          	ld	a4,176(sp)
   2587c:	06e57263          	bgeu	a0,a4,258e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc08>
    T *src = base, *dest = (T *)newbuf;
   25880:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   25884:	00878793          	addi	a5,a5,8
   25888:	fee7eee3          	bltu	a5,a4,25884 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xbac>
   2588c:	fff70793          	addi	a5,a4,-1
   25890:	40a787b3          	sub	a5,a5,a0
   25894:	ff87f793          	andi	a5,a5,-8
   25898:	00878793          	addi	a5,a5,8
   2589c:	00fa07b3          	add	a5,s4,a5
   258a0:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   258a4:	06810793          	addi	a5,sp,104
   258a8:	00f50663          	beq	a0,a5,258b4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xbdc>
      delete[] (char *)base;
   258ac:	00050463          	beq	a0,zero,258b4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xbdc>
   258b0:	fa1f00ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   258b4:	0b413423          	sd	s4,168(sp)
    end = dest;
   258b8:	00813783          	ld	a5,8(sp)
   258bc:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   258c0:	012a0a33          	add	s4,s4,s2
   258c4:	0b413c23          	sd	s4,184(sp)
    new (end) T(std::move(x));
   258c8:	0b013783          	ld	a5,176(sp)
   258cc:	0197b023          	sd	s9,0(a5)
    end++;
   258d0:	0b013783          	ld	a5,176(sp)
   258d4:	00878793          	addi	a5,a5,8
   258d8:	0af13823          	sd	a5,176(sp)
      break;
   258dc:	2610006f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   258e0:	01413423          	sd	s4,8(sp)
   258e4:	fc1ff06f          	jal	zero,258a4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xbcc>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   258e8:	0106b783          	ld	a5,16(a3)
   258ec:	40e78633          	sub	a2,a5,a4
   258f0:	00100693          	addi	a3,zero,1
   258f4:	00c6f463          	bgeu	a3,a2,258fc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc24>
   258f8:	00f76663          	bltu	a4,a5,25904 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc2c>
      underflow();
   258fc:	05010513          	addi	a0,sp,80
   25900:	844f80ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   25904:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   25908:	05013703          	ld	a4,80(sp)
   2590c:	01c72703          	lw	a4,28(a4)
   25910:	06071663          	bne	a4,zero,2597c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xca4>
        val |= ((uint64_t)p[i]) << (i * 8);
   25914:	0017ca03          	lbu	s4,1(a5)
   25918:	008a1a13          	slli	s4,s4,0x8
   2591c:	0007c703          	lbu	a4,0(a5)
   25920:	00ea6a33          	or	s4,s4,a4
    pos += sizeof(T);
   25924:	00278793          	addi	a5,a5,2
   25928:	06f13023          	sd	a5,96(sp)
      stack.push_back(cur.fixed<int16_t>());
   2592c:	010a1a1b          	slliw	s4,s4,0x10
   25930:	410a5a1b          	sraiw	s4,s4,0x10
  size_type size() const { return end - base; }
   25934:	0a813703          	ld	a4,168(sp)
   25938:	0b013783          	ld	a5,176(sp)
   2593c:	40e787b3          	sub	a5,a5,a4
   25940:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   25944:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   25948:	0b813903          	ld	s2,184(sp)
   2594c:	40e90933          	sub	s2,s2,a4
   25950:	40395913          	srai	s2,s2,0x3
   25954:	08f97a63          	bgeu	s2,a5,259e8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd10>
   25958:	00091463          	bne	s2,zero,25960 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc88>
   2595c:	00100913          	addi	s2,zero,1
    while (target < n)
   25960:	00f97663          	bgeu	s2,a5,2596c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc94>
      target <<= 1;
   25964:	00191913          	slli	s2,s2,0x1
    while (target < n)
   25968:	fef96ee3          	bltu	s2,a5,25964 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc8c>
    char *newbuf = new char[sizeof(T[target])];
   2596c:	00391913          	slli	s2,s2,0x3
   25970:	00090513          	addi	a0,s2,0
   25974:	c1df00ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   25978:	0180006f          	jal	zero,25990 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcb8>
        val = (val << 8) | (uint64_t)p[i];
   2597c:	0007ca03          	lbu	s4,0(a5)
   25980:	008a1a13          	slli	s4,s4,0x8
   25984:	0017c703          	lbu	a4,1(a5)
   25988:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   2598c:	f99ff06f          	jal	zero,25924 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc4c>
   25990:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   25994:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   25998:	0b013703          	ld	a4,176(sp)
   2599c:	06e57263          	bgeu	a0,a4,25a00 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd28>
    T *src = base, *dest = (T *)newbuf;
   259a0:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   259a4:	00878793          	addi	a5,a5,8
   259a8:	fee7eee3          	bltu	a5,a4,259a4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xccc>
   259ac:	fff70793          	addi	a5,a4,-1
   259b0:	40a787b3          	sub	a5,a5,a0
   259b4:	ff87f793          	andi	a5,a5,-8
   259b8:	00878793          	addi	a5,a5,8
   259bc:	00fc87b3          	add	a5,s9,a5
   259c0:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   259c4:	06810793          	addi	a5,sp,104
   259c8:	00f50663          	beq	a0,a5,259d4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcfc>
      delete[] (char *)base;
   259cc:	00050463          	beq	a0,zero,259d4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcfc>
   259d0:	e81f00ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   259d4:	0b913423          	sd	s9,168(sp)
    end = dest;
   259d8:	00813783          	ld	a5,8(sp)
   259dc:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   259e0:	012c8cb3          	add	s9,s9,s2
   259e4:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   259e8:	0b013783          	ld	a5,176(sp)
   259ec:	0147b023          	sd	s4,0(a5)
    end++;
   259f0:	0b013783          	ld	a5,176(sp)
   259f4:	00878793          	addi	a5,a5,8
   259f8:	0af13823          	sd	a5,176(sp)
      break;
   259fc:	1410006f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   25a00:	01913423          	sd	s9,8(sp)
   25a04:	fc1ff06f          	jal	zero,259c4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcec>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   25a08:	0106b783          	ld	a5,16(a3)
   25a0c:	40e78633          	sub	a2,a5,a4
   25a10:	00300693          	addi	a3,zero,3
   25a14:	00c6f463          	bgeu	a3,a2,25a1c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd44>
   25a18:	00f76663          	bltu	a4,a5,25a24 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd4c>
      underflow();
   25a1c:	05010513          	addi	a0,sp,80
   25a20:	f25f70ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   25a24:	06013603          	ld	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   25a28:	05013783          	ld	a5,80(sp)
   25a2c:	01c7a783          	lw	a5,28(a5)
   25a30:	06079e63          	bne	a5,zero,25aac <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdd4>
   25a34:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   25a38:	00000a13          	addi	s4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   25a3c:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   25a40:	0006c703          	lbu	a4,0(a3)
   25a44:	00f71733          	sll	a4,a4,a5
   25a48:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   25a4c:	00168693          	addi	a3,a3,1
   25a50:	0087879b          	addiw	a5,a5,8
   25a54:	feb796e3          	bne	a5,a1,25a40 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd68>
    pos += sizeof(T);
   25a58:	00460613          	addi	a2,a2,4
   25a5c:	06c13023          	sd	a2,96(sp)
      stack.push_back(cur.fixed<int32_t>());
   25a60:	000a0a1b          	addiw	s4,s4,0
  size_type size() const { return end - base; }
   25a64:	0a813703          	ld	a4,168(sp)
   25a68:	0b013783          	ld	a5,176(sp)
   25a6c:	40e787b3          	sub	a5,a5,a4
   25a70:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   25a74:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   25a78:	0b813903          	ld	s2,184(sp)
   25a7c:	40e90933          	sub	s2,s2,a4
   25a80:	40395913          	srai	s2,s2,0x3
   25a84:	0af97263          	bgeu	s2,a5,25b28 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe50>
   25a88:	00091463          	bne	s2,zero,25a90 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdb8>
   25a8c:	00100913          	addi	s2,zero,1
    while (target < n)
   25a90:	00f97663          	bgeu	s2,a5,25a9c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdc4>
      target <<= 1;
   25a94:	00191913          	slli	s2,s2,0x1
    while (target < n)
   25a98:	fef96ee3          	bltu	s2,a5,25a94 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdbc>
    char *newbuf = new char[sizeof(T[target])];
   25a9c:	00391913          	slli	s2,s2,0x3
   25aa0:	00090513          	addi	a0,s2,0
   25aa4:	aedf00ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   25aa8:	0280006f          	jal	zero,25ad0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdf8>
   25aac:	00060793          	addi	a5,a2,0
   25ab0:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   25ab4:	00000a13          	addi	s4,zero,0
        val = (val << 8) | (uint64_t)p[i];
   25ab8:	008a1a13          	slli	s4,s4,0x8
   25abc:	0007c703          	lbu	a4,0(a5)
   25ac0:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   25ac4:	00178793          	addi	a5,a5,1
   25ac8:	fef698e3          	bne	a3,a5,25ab8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xde0>
   25acc:	f8dff06f          	jal	zero,25a58 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd80>
   25ad0:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   25ad4:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   25ad8:	0b013703          	ld	a4,176(sp)
   25adc:	06e57263          	bgeu	a0,a4,25b40 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe68>
    T *src = base, *dest = (T *)newbuf;
   25ae0:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   25ae4:	00878793          	addi	a5,a5,8
   25ae8:	fee7eee3          	bltu	a5,a4,25ae4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe0c>
   25aec:	fff70793          	addi	a5,a4,-1
   25af0:	40a787b3          	sub	a5,a5,a0
   25af4:	ff87f793          	andi	a5,a5,-8
   25af8:	00878793          	addi	a5,a5,8
   25afc:	00fc87b3          	add	a5,s9,a5
   25b00:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   25b04:	06810793          	addi	a5,sp,104
   25b08:	00f50663          	beq	a0,a5,25b14 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe3c>
      delete[] (char *)base;
   25b0c:	00050463          	beq	a0,zero,25b14 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe3c>
   25b10:	d41f00ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   25b14:	0b913423          	sd	s9,168(sp)
    end = dest;
   25b18:	00813783          	ld	a5,8(sp)
   25b1c:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   25b20:	012c8cb3          	add	s9,s9,s2
   25b24:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   25b28:	0b013783          	ld	a5,176(sp)
   25b2c:	0147b023          	sd	s4,0(a5)
    end++;
   25b30:	0b013783          	ld	a5,176(sp)
   25b34:	00878793          	addi	a5,a5,8
   25b38:	0af13823          	sd	a5,176(sp)
      break;
   25b3c:	0010006f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   25b40:	01913423          	sd	s9,8(sp)
   25b44:	fc1ff06f          	jal	zero,25b04 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe2c>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   25b48:	0106b783          	ld	a5,16(a3)
   25b4c:	40e78633          	sub	a2,a5,a4
   25b50:	00700693          	addi	a3,zero,7
   25b54:	00c6f463          	bgeu	a3,a2,25b5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe84>
   25b58:	00f76663          	bltu	a4,a5,25b64 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe8c>
      underflow();
   25b5c:	05010513          	addi	a0,sp,80
   25b60:	de5f70ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   25b64:	06013603          	ld	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   25b68:	05013783          	ld	a5,80(sp)
   25b6c:	01c7a783          	lw	a5,28(a5)
   25b70:	06079c63          	bne	a5,zero,25be8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf10>
   25b74:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   25b78:	00000a13          	addi	s4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   25b7c:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   25b80:	0006c703          	lbu	a4,0(a3)
   25b84:	00f71733          	sll	a4,a4,a5
   25b88:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   25b8c:	00168693          	addi	a3,a3,1
   25b90:	0087879b          	addiw	a5,a5,8
   25b94:	feb796e3          	bne	a5,a1,25b80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xea8>
    pos += sizeof(T);
   25b98:	00860613          	addi	a2,a2,8
   25b9c:	06c13023          	sd	a2,96(sp)
  size_type size() const { return end - base; }
   25ba0:	0a813703          	ld	a4,168(sp)
   25ba4:	0b013783          	ld	a5,176(sp)
   25ba8:	40e787b3          	sub	a5,a5,a4
   25bac:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   25bb0:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   25bb4:	0b813903          	ld	s2,184(sp)
   25bb8:	40e90933          	sub	s2,s2,a4
   25bbc:	40395913          	srai	s2,s2,0x3
   25bc0:	0af97263          	bgeu	s2,a5,25c64 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf8c>
   25bc4:	00091463          	bne	s2,zero,25bcc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xef4>
   25bc8:	00100913          	addi	s2,zero,1
    while (target < n)
   25bcc:	00f97663          	bgeu	s2,a5,25bd8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf00>
      target <<= 1;
   25bd0:	00191913          	slli	s2,s2,0x1
    while (target < n)
   25bd4:	fef96ee3          	bltu	s2,a5,25bd0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xef8>
    char *newbuf = new char[sizeof(T[target])];
   25bd8:	00391913          	slli	s2,s2,0x3
   25bdc:	00090513          	addi	a0,s2,0
   25be0:	9b1f00ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   25be4:	0280006f          	jal	zero,25c0c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf34>
   25be8:	00060793          	addi	a5,a2,0
   25bec:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   25bf0:	00000a13          	addi	s4,zero,0
        val = (val << 8) | (uint64_t)p[i];
   25bf4:	008a1a13          	slli	s4,s4,0x8
   25bf8:	0007c703          	lbu	a4,0(a5)
   25bfc:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   25c00:	00178793          	addi	a5,a5,1
   25c04:	fed798e3          	bne	a5,a3,25bf4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf1c>
   25c08:	f91ff06f          	jal	zero,25b98 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xec0>
   25c0c:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   25c10:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   25c14:	0b013703          	ld	a4,176(sp)
   25c18:	06e57263          	bgeu	a0,a4,25c7c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfa4>
    T *src = base, *dest = (T *)newbuf;
   25c1c:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   25c20:	00878793          	addi	a5,a5,8
   25c24:	fee7eee3          	bltu	a5,a4,25c20 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf48>
   25c28:	fff70793          	addi	a5,a4,-1
   25c2c:	40a787b3          	sub	a5,a5,a0
   25c30:	ff87f793          	andi	a5,a5,-8
   25c34:	00878793          	addi	a5,a5,8
   25c38:	00fc87b3          	add	a5,s9,a5
   25c3c:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   25c40:	06810793          	addi	a5,sp,104
   25c44:	00f50663          	beq	a0,a5,25c50 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf78>
      delete[] (char *)base;
   25c48:	00050463          	beq	a0,zero,25c50 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf78>
   25c4c:	c05f00ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   25c50:	0b913423          	sd	s9,168(sp)
    end = dest;
   25c54:	00813783          	ld	a5,8(sp)
   25c58:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   25c5c:	012c8cb3          	add	s9,s9,s2
   25c60:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   25c64:	0b013783          	ld	a5,176(sp)
   25c68:	0147b023          	sd	s4,0(a5)
    end++;
   25c6c:	0b013783          	ld	a5,176(sp)
   25c70:	00878793          	addi	a5,a5,8
   25c74:	0af13823          	sd	a5,176(sp)
      break;
   25c78:	6c40006f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   25c7c:	01913423          	sd	s9,8(sp)
   25c80:	fc1ff06f          	jal	zero,25c40 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf68>
    return 0;
   25c84:	00000a13          	addi	s4,zero,0
  size_type size() const { return end - base; }
   25c88:	0a813703          	ld	a4,168(sp)
   25c8c:	0b013783          	ld	a5,176(sp)
   25c90:	40e787b3          	sub	a5,a5,a4
   25c94:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   25c98:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   25c9c:	0b813903          	ld	s2,184(sp)
   25ca0:	40e90933          	sub	s2,s2,a4
   25ca4:	40395913          	srai	s2,s2,0x3
   25ca8:	06f97e63          	bgeu	s2,a5,25d24 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x104c>
   25cac:	00091463          	bne	s2,zero,25cb4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfdc>
   25cb0:	00100913          	addi	s2,zero,1
    while (target < n)
   25cb4:	00f97663          	bgeu	s2,a5,25cc0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfe8>
      target <<= 1;
   25cb8:	00191913          	slli	s2,s2,0x1
    while (target < n)
   25cbc:	fef96ee3          	bltu	s2,a5,25cb8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfe0>
    char *newbuf = new char[sizeof(T[target])];
   25cc0:	00391913          	slli	s2,s2,0x3
   25cc4:	00090513          	addi	a0,s2,0
   25cc8:	8c9f00ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   25ccc:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   25cd0:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   25cd4:	0b013703          	ld	a4,176(sp)
   25cd8:	06e57263          	bgeu	a0,a4,25d3c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1064>
    T *src = base, *dest = (T *)newbuf;
   25cdc:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   25ce0:	00878793          	addi	a5,a5,8
   25ce4:	fee7eee3          	bltu	a5,a4,25ce0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1008>
   25ce8:	fff70793          	addi	a5,a4,-1
   25cec:	40a787b3          	sub	a5,a5,a0
   25cf0:	ff87f793          	andi	a5,a5,-8
   25cf4:	00878793          	addi	a5,a5,8
   25cf8:	00fc87b3          	add	a5,s9,a5
   25cfc:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   25d00:	06810793          	addi	a5,sp,104
   25d04:	00f50663          	beq	a0,a5,25d10 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1038>
      delete[] (char *)base;
   25d08:	00050463          	beq	a0,zero,25d10 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1038>
   25d0c:	b45f00ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   25d10:	0b913423          	sd	s9,168(sp)
    end = dest;
   25d14:	00813783          	ld	a5,8(sp)
   25d18:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   25d1c:	012c8cb3          	add	s9,s9,s2
   25d20:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   25d24:	0b013783          	ld	a5,176(sp)
   25d28:	0147b023          	sd	s4,0(a5)
    end++;
   25d2c:	0b013783          	ld	a5,176(sp)
   25d30:	00878793          	addi	a5,a5,8
   25d34:	0af13823          	sd	a5,176(sp)
      break;
   25d38:	6040006f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   25d3c:	01913423          	sd	s9,8(sp)
   25d40:	fc1ff06f          	jal	zero,25d00 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1028>
      stack.push_back(cur.sleb128());
   25d44:	05010513          	addi	a0,sp,80
   25d48:	c51f70ef          	jal	ra,1d998 <dwarf::cursor::sleb128()>
   25d4c:	00a13423          	sd	a0,8(sp)
  size_type size() const { return end - base; }
   25d50:	0a813703          	ld	a4,168(sp)
   25d54:	0b013783          	ld	a5,176(sp)
   25d58:	40e787b3          	sub	a5,a5,a4
   25d5c:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   25d60:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   25d64:	0b813903          	ld	s2,184(sp)
   25d68:	40e90933          	sub	s2,s2,a4
   25d6c:	40395913          	srai	s2,s2,0x3
   25d70:	06f97a63          	bgeu	s2,a5,25de4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x110c>
   25d74:	00091463          	bne	s2,zero,25d7c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10a4>
   25d78:	00100913          	addi	s2,zero,1
    while (target < n)
   25d7c:	00f97663          	bgeu	s2,a5,25d88 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10b0>
      target <<= 1;
   25d80:	00191913          	slli	s2,s2,0x1
    while (target < n)
   25d84:	fef96ee3          	bltu	s2,a5,25d80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10a8>
    char *newbuf = new char[sizeof(T[target])];
   25d88:	00391913          	slli	s2,s2,0x3
   25d8c:	00090513          	addi	a0,s2,0
   25d90:	801f00ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   25d94:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   25d98:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   25d9c:	0b013703          	ld	a4,176(sp)
   25da0:	06e57063          	bgeu	a0,a4,25e00 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1128>
    T *src = base, *dest = (T *)newbuf;
   25da4:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   25da8:	00878793          	addi	a5,a5,8
   25dac:	fee7eee3          	bltu	a5,a4,25da8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10d0>
   25db0:	fff70a13          	addi	s4,a4,-1
   25db4:	40aa0a33          	sub	s4,s4,a0
   25db8:	ff8a7a13          	andi	s4,s4,-8
   25dbc:	008a0a13          	addi	s4,s4,8
   25dc0:	014c8a33          	add	s4,s9,s4
    if ((char *)base != buf)
   25dc4:	06810793          	addi	a5,sp,104
   25dc8:	00f50663          	beq	a0,a5,25dd4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10fc>
      delete[] (char *)base;
   25dcc:	00050463          	beq	a0,zero,25dd4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10fc>
   25dd0:	a81f00ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   25dd4:	0b913423          	sd	s9,168(sp)
    end = dest;
   25dd8:	0b413823          	sd	s4,176(sp)
    cap = base + target;
   25ddc:	012c8cb3          	add	s9,s9,s2
   25de0:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   25de4:	0b013783          	ld	a5,176(sp)
   25de8:	00813703          	ld	a4,8(sp)
   25dec:	00e7b023          	sd	a4,0(a5)
    end++;
   25df0:	0b013783          	ld	a5,176(sp)
   25df4:	00878793          	addi	a5,a5,8
   25df8:	0af13823          	sd	a5,176(sp)
      break;
   25dfc:	5400006f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   25e00:	000c8a13          	addi	s4,s9,0
   25e04:	fc1ff06f          	jal	zero,25dc4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10ec>
      throw runtime_error("DW_OP_fbreg not implemented");
   25e08:	01000513          	addi	a0,zero,16
   25e0c:	885f00ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   25e10:	00050913          	addi	s2,a0,0
   25e14:	00012597          	auipc	a1,0x12
   25e18:	45458593          	addi	a1,a1,1108 # 38268 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x2c0>
   25e1c:	845f00ef          	jal	ra,16660 <std::runtime_error::runtime_error(char const*)@plt>
   25e20:	0001d617          	auipc	a2,0x1d
   25e24:	60063603          	ld	a2,1536(a2) # 43420 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   25e28:	0001d597          	auipc	a1,0x1d
   25e2c:	7e85b583          	ld	a1,2024(a1) # 43610 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   25e30:	00090513          	addi	a0,s2,0
   25e34:	b2df00ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   25e38:	00050413          	addi	s0,a0,0
   25e3c:	2480106f          	jal	zero,27084 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      tmp1.u = (unsigned)op - (unsigned)DW_OP::breg0;
   25e40:	f909091b          	addiw	s2,s2,-112
      tmp2.s = cur.sleb128();
   25e44:	05010513          	addi	a0,sp,80
   25e48:	b51f70ef          	jal	ra,1d998 <dwarf::cursor::sleb128()>
   25e4c:	00050c93          	addi	s9,a0,0
      stack.push_back((int64_t)ctx->reg(tmp1.u) + tmp2.s);
   25e50:	000b3783          	ld	a5,0(s6)
   25e54:	0107b783          	ld	a5,16(a5)
   25e58:	00090593          	addi	a1,s2,0
   25e5c:	000b0513          	addi	a0,s6,0
   25e60:	000780e7          	jalr	ra,0(a5)
   25e64:	01950cb3          	add	s9,a0,s9
  size_type size() const { return end - base; }
   25e68:	0a813703          	ld	a4,168(sp)
   25e6c:	0b013783          	ld	a5,176(sp)
   25e70:	40e787b3          	sub	a5,a5,a4
   25e74:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   25e78:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   25e7c:	0b813903          	ld	s2,184(sp)
   25e80:	40e90933          	sub	s2,s2,a4
   25e84:	40395913          	srai	s2,s2,0x3
   25e88:	06f97e63          	bgeu	s2,a5,25f04 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x122c>
   25e8c:	00091463          	bne	s2,zero,25e94 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x11bc>
   25e90:	00100913          	addi	s2,zero,1
    while (target < n)
   25e94:	00f97663          	bgeu	s2,a5,25ea0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x11c8>
      target <<= 1;
   25e98:	00191913          	slli	s2,s2,0x1
    while (target < n)
   25e9c:	fef96ee3          	bltu	s2,a5,25e98 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x11c0>
    char *newbuf = new char[sizeof(T[target])];
   25ea0:	00391913          	slli	s2,s2,0x3
   25ea4:	00090513          	addi	a0,s2,0
   25ea8:	ee8f00ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   25eac:	00050a13          	addi	s4,a0,0
    T *src = base, *dest = (T *)newbuf;
   25eb0:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   25eb4:	0b013703          	ld	a4,176(sp)
   25eb8:	06e57263          	bgeu	a0,a4,25f1c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1244>
    T *src = base, *dest = (T *)newbuf;
   25ebc:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   25ec0:	00878793          	addi	a5,a5,8
   25ec4:	fee7eee3          	bltu	a5,a4,25ec0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x11e8>
   25ec8:	fff70793          	addi	a5,a4,-1
   25ecc:	40a787b3          	sub	a5,a5,a0
   25ed0:	ff87f793          	andi	a5,a5,-8
   25ed4:	00878793          	addi	a5,a5,8
   25ed8:	00fa07b3          	add	a5,s4,a5
   25edc:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   25ee0:	06810793          	addi	a5,sp,104
   25ee4:	00f50663          	beq	a0,a5,25ef0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1218>
      delete[] (char *)base;
   25ee8:	00050463          	beq	a0,zero,25ef0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1218>
   25eec:	965f00ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   25ef0:	0b413423          	sd	s4,168(sp)
    end = dest;
   25ef4:	00813783          	ld	a5,8(sp)
   25ef8:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   25efc:	012a0a33          	add	s4,s4,s2
   25f00:	0b413c23          	sd	s4,184(sp)
    new (end) T(std::move(x));
   25f04:	0b013783          	ld	a5,176(sp)
   25f08:	0197b023          	sd	s9,0(a5)
    end++;
   25f0c:	0b013783          	ld	a5,176(sp)
   25f10:	00878793          	addi	a5,a5,8
   25f14:	0af13823          	sd	a5,176(sp)
      break;
   25f18:	4240006f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   25f1c:	01413423          	sd	s4,8(sp)
   25f20:	fc1ff06f          	jal	zero,25ee0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1208>
   25f24:	00000913          	addi	s2,zero,0
      tmp2.s = cur.sleb128();
   25f28:	05010513          	addi	a0,sp,80
   25f2c:	a6df70ef          	jal	ra,1d998 <dwarf::cursor::sleb128()>
   25f30:	00050c93          	addi	s9,a0,0
      stack.push_back((int64_t)ctx->reg(tmp1.u) + tmp2.s);
   25f34:	000b3783          	ld	a5,0(s6)
   25f38:	0107b783          	ld	a5,16(a5)
   25f3c:	0009059b          	addiw	a1,s2,0
   25f40:	000b0513          	addi	a0,s6,0
   25f44:	000780e7          	jalr	ra,0(a5)
   25f48:	01950cb3          	add	s9,a0,s9
  size_type size() const { return end - base; }
   25f4c:	0a813703          	ld	a4,168(sp)
   25f50:	0b013783          	ld	a5,176(sp)
   25f54:	40e787b3          	sub	a5,a5,a4
   25f58:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   25f5c:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   25f60:	0b813903          	ld	s2,184(sp)
   25f64:	40e90933          	sub	s2,s2,a4
   25f68:	40395913          	srai	s2,s2,0x3
   25f6c:	06f97e63          	bgeu	s2,a5,25fe8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1310>
   25f70:	00091463          	bne	s2,zero,25f78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x12a0>
   25f74:	00100913          	addi	s2,zero,1
    while (target < n)
   25f78:	00f97663          	bgeu	s2,a5,25f84 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x12ac>
      target <<= 1;
   25f7c:	00191913          	slli	s2,s2,0x1
    while (target < n)
   25f80:	fef96ee3          	bltu	s2,a5,25f7c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x12a4>
    char *newbuf = new char[sizeof(T[target])];
   25f84:	00391913          	slli	s2,s2,0x3
   25f88:	00090513          	addi	a0,s2,0
   25f8c:	e04f00ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   25f90:	00050a13          	addi	s4,a0,0
    T *src = base, *dest = (T *)newbuf;
   25f94:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   25f98:	0b013703          	ld	a4,176(sp)
   25f9c:	06e57263          	bgeu	a0,a4,26000 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1328>
    T *src = base, *dest = (T *)newbuf;
   25fa0:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   25fa4:	00878793          	addi	a5,a5,8
   25fa8:	fee7eee3          	bltu	a5,a4,25fa4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x12cc>
   25fac:	fff70793          	addi	a5,a4,-1
   25fb0:	40a787b3          	sub	a5,a5,a0
   25fb4:	ff87f793          	andi	a5,a5,-8
   25fb8:	00878793          	addi	a5,a5,8
   25fbc:	00fa07b3          	add	a5,s4,a5
   25fc0:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   25fc4:	06810793          	addi	a5,sp,104
   25fc8:	00f50663          	beq	a0,a5,25fd4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x12fc>
      delete[] (char *)base;
   25fcc:	00050463          	beq	a0,zero,25fd4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x12fc>
   25fd0:	881f00ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   25fd4:	0b413423          	sd	s4,168(sp)
    end = dest;
   25fd8:	00813783          	ld	a5,8(sp)
   25fdc:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   25fe0:	012a0a33          	add	s4,s4,s2
   25fe4:	0b413c23          	sd	s4,184(sp)
    new (end) T(std::move(x));
   25fe8:	0b013783          	ld	a5,176(sp)
   25fec:	0197b023          	sd	s9,0(a5)
    end++;
   25ff0:	0b013783          	ld	a5,176(sp)
   25ff4:	00878793          	addi	a5,a5,8
   25ff8:	0af13823          	sd	a5,176(sp)
      break;
   25ffc:	3400006f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   26000:	01413423          	sd	s4,8(sp)
   26004:	fc1ff06f          	jal	zero,25fc4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x12ec>
  bool empty() const { return base == end; }
   26008:	0a813703          	ld	a4,168(sp)
   2600c:	0b013c83          	ld	s9,176(sp)
      CHECK();
   26010:	66ec84e3          	beq	s9,a4,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
  size_type size() const { return end - base; }
   26014:	40ec87b3          	sub	a5,s9,a4
   26018:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   2601c:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   26020:	0b813903          	ld	s2,184(sp)
   26024:	40e90933          	sub	s2,s2,a4
   26028:	40395913          	srai	s2,s2,0x3
   2602c:	06f97e63          	bgeu	s2,a5,260a8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13d0>
   26030:	00091463          	bne	s2,zero,26038 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1360>
   26034:	00100913          	addi	s2,zero,1
    while (target < n)
   26038:	00f97663          	bgeu	s2,a5,26044 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x136c>
      target <<= 1;
   2603c:	00191913          	slli	s2,s2,0x1
    while (target < n)
   26040:	fef96ee3          	bltu	s2,a5,2603c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1364>
    char *newbuf = new char[sizeof(T[target])];
   26044:	00391913          	slli	s2,s2,0x3
   26048:	00090513          	addi	a0,s2,0
   2604c:	d44f00ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   26050:	00050a13          	addi	s4,a0,0
    T *src = base, *dest = (T *)newbuf;
   26054:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   26058:	0b013703          	ld	a4,176(sp)
   2605c:	06e57463          	bgeu	a0,a4,260c4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13ec>
    T *src = base, *dest = (T *)newbuf;
   26060:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   26064:	00878793          	addi	a5,a5,8
   26068:	fee7eee3          	bltu	a5,a4,26064 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x138c>
   2606c:	fff70793          	addi	a5,a4,-1
   26070:	40a787b3          	sub	a5,a5,a0
   26074:	ff87f793          	andi	a5,a5,-8
   26078:	00878793          	addi	a5,a5,8
   2607c:	00fa07b3          	add	a5,s4,a5
   26080:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   26084:	06810793          	addi	a5,sp,104
   26088:	00f50663          	beq	a0,a5,26094 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13bc>
      delete[] (char *)base;
   2608c:	00050463          	beq	a0,zero,26094 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13bc>
   26090:	fc0f00ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   26094:	0b413423          	sd	s4,168(sp)
    end = dest;
   26098:	00813783          	ld	a5,8(sp)
   2609c:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   260a0:	012a0a33          	add	s4,s4,s2
   260a4:	0b413c23          	sd	s4,184(sp)
    new (end) T(x);
   260a8:	ff8cb703          	ld	a4,-8(s9)
   260ac:	0b013783          	ld	a5,176(sp)
   260b0:	00e7b023          	sd	a4,0(a5)
    end++;
   260b4:	0b013783          	ld	a5,176(sp)
   260b8:	00878793          	addi	a5,a5,8
   260bc:	0af13823          	sd	a5,176(sp)
  }
   260c0:	27c0006f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   260c4:	01413423          	sd	s4,8(sp)
   260c8:	fbdff06f          	jal	zero,26084 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13ac>
  bool empty() const { return base == end; }
   260cc:	0b013783          	ld	a5,176(sp)
      CHECK();
   260d0:	0a813703          	ld	a4,168(sp)
   260d4:	5ae782e3          	beq	a5,a4,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
    end--;
   260d8:	ff878793          	addi	a5,a5,-8
   260dc:	0af13823          	sd	a5,176(sp)
  }
   260e0:	25c0006f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   260e4:	0106b783          	ld	a5,16(a3)
   260e8:	00f76663          	bltu	a4,a5,260f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x141c>
      underflow();
   260ec:	05010513          	addi	a0,sp,80
   260f0:	855f70ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   260f4:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   260f8:	05013703          	ld	a4,80(sp)
   260fc:	01c72703          	lw	a4,28(a4)
   26100:	00071463          	bne	a4,zero,26108 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1430>
   26104:	2100106f          	jal	zero,27314 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x263c>
        val = (val << 8) | (uint64_t)p[i];
   26108:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   2610c:	20c0106f          	jal	zero,27318 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2640>
    char *newbuf = new char[sizeof(T[target])];
   26110:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   26114:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   26118:	0b013703          	ld	a4,176(sp)
   2611c:	06e57463          	bgeu	a0,a4,26184 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x14ac>
    T *src = base, *dest = (T *)newbuf;
   26120:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   26124:	00878793          	addi	a5,a5,8
   26128:	fee7eee3          	bltu	a5,a4,26124 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x144c>
   2612c:	fff70793          	addi	a5,a4,-1
   26130:	40a787b3          	sub	a5,a5,a0
   26134:	ff87f793          	andi	a5,a5,-8
   26138:	00878793          	addi	a5,a5,8
   2613c:	00fc87b3          	add	a5,s9,a5
   26140:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   26144:	06810793          	addi	a5,sp,104
   26148:	00f50663          	beq	a0,a5,26154 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x147c>
      delete[] (char *)base;
   2614c:	00050463          	beq	a0,zero,26154 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x147c>
   26150:	f00f00ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   26154:	0b913423          	sd	s9,168(sp)
    end = dest;
   26158:	00813783          	ld	a5,8(sp)
   2615c:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   26160:	012c8cb3          	add	s9,s9,s2
   26164:	0b913c23          	sd	s9,184(sp)
    new (end) T(x);
   26168:	000a3703          	ld	a4,0(s4)
   2616c:	0b013783          	ld	a5,176(sp)
   26170:	00e7b023          	sd	a4,0(a5)
    end++;
   26174:	0b013783          	ld	a5,176(sp)
   26178:	00878793          	addi	a5,a5,8
   2617c:	0af13823          	sd	a5,176(sp)
  }
   26180:	1bc0006f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   26184:	01913423          	sd	s9,8(sp)
   26188:	fbdff06f          	jal	zero,26144 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x146c>
  size_type size() const { return end - base; }
   2618c:	0b013c83          	ld	s9,176(sp)
   26190:	0a813703          	ld	a4,168(sp)
   26194:	40ec87b3          	sub	a5,s9,a4
      CHECKN(2);
   26198:	00800693          	addi	a3,zero,8
   2619c:	4cf6fee3          	bgeu	a3,a5,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   261a0:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   261a4:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   261a8:	0b813903          	ld	s2,184(sp)
   261ac:	40e90933          	sub	s2,s2,a4
   261b0:	40395913          	srai	s2,s2,0x3
   261b4:	06f97e63          	bgeu	s2,a5,26230 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1558>
   261b8:	00091463          	bne	s2,zero,261c0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x14e8>
   261bc:	00100913          	addi	s2,zero,1
    while (target < n)
   261c0:	00f97663          	bgeu	s2,a5,261cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x14f4>
      target <<= 1;
   261c4:	00191913          	slli	s2,s2,0x1
    while (target < n)
   261c8:	fef96ee3          	bltu	s2,a5,261c4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x14ec>
    char *newbuf = new char[sizeof(T[target])];
   261cc:	00391913          	slli	s2,s2,0x3
   261d0:	00090513          	addi	a0,s2,0
   261d4:	bbcf00ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   261d8:	00050a13          	addi	s4,a0,0
    T *src = base, *dest = (T *)newbuf;
   261dc:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   261e0:	0b013703          	ld	a4,176(sp)
   261e4:	06e57463          	bgeu	a0,a4,2624c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1574>
    T *src = base, *dest = (T *)newbuf;
   261e8:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   261ec:	00878793          	addi	a5,a5,8
   261f0:	fee7eee3          	bltu	a5,a4,261ec <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1514>
   261f4:	fff70793          	addi	a5,a4,-1
   261f8:	40a787b3          	sub	a5,a5,a0
   261fc:	ff87f793          	andi	a5,a5,-8
   26200:	00878793          	addi	a5,a5,8
   26204:	00fa07b3          	add	a5,s4,a5
   26208:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   2620c:	06810793          	addi	a5,sp,104
   26210:	00f50663          	beq	a0,a5,2621c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1544>
      delete[] (char *)base;
   26214:	00050463          	beq	a0,zero,2621c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1544>
   26218:	e38f00ef          	jal	ra,16850 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   2621c:	0b413423          	sd	s4,168(sp)
    end = dest;
   26220:	00813783          	ld	a5,8(sp)
   26224:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   26228:	012a0a33          	add	s4,s4,s2
   2622c:	0b413c23          	sd	s4,184(sp)
    new (end) T(x);
   26230:	ff0cb703          	ld	a4,-16(s9)
   26234:	0b013783          	ld	a5,176(sp)
   26238:	00e7b023          	sd	a4,0(a5)
    end++;
   2623c:	0b013783          	ld	a5,176(sp)
   26240:	00878793          	addi	a5,a5,8
   26244:	0af13823          	sd	a5,176(sp)
  }
   26248:	0f40006f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   2624c:	01413423          	sd	s4,8(sp)
   26250:	fbdff06f          	jal	zero,2620c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1534>
  size_type size() const { return end - base; }
   26254:	0b013783          	ld	a5,176(sp)
   26258:	0a813703          	ld	a4,168(sp)
   2625c:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   26260:	00800693          	addi	a3,zero,8
   26264:	40e6fae3          	bgeu	a3,a4,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp1.u = stack.back();
   26268:	ff87b703          	ld	a4,-8(a5)
      stack.back() = stack.revat(1);
   2626c:	ff07b683          	ld	a3,-16(a5)
   26270:	fed7bc23          	sd	a3,-8(a5)
  reference revat(size_type n) { return *(end - 1 - n); }
   26274:	0b013783          	ld	a5,176(sp)
      stack.revat(1) = tmp1.u;
   26278:	fee7b823          	sd	a4,-16(a5)
      break;
   2627c:	0c00006f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   26280:	0b013783          	ld	a5,176(sp)
   26284:	0a813703          	ld	a4,168(sp)
   26288:	40e78733          	sub	a4,a5,a4
      CHECKN(3);
   2628c:	01000693          	addi	a3,zero,16
   26290:	3ee6f4e3          	bgeu	a3,a4,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp1.u = stack.back();
   26294:	ff87b703          	ld	a4,-8(a5)
      stack.back() = stack.revat(1);
   26298:	ff07b683          	ld	a3,-16(a5)
   2629c:	fed7bc23          	sd	a3,-8(a5)
  reference revat(size_type n) { return *(end - 1 - n); }
   262a0:	0b013783          	ld	a5,176(sp)
      stack.revat(1) = stack.revat(2);
   262a4:	fe87b683          	ld	a3,-24(a5)
   262a8:	fed7b823          	sd	a3,-16(a5)
   262ac:	0b013783          	ld	a5,176(sp)
      stack.revat(2) = tmp1.u;
   262b0:	fee7b423          	sd	a4,-24(a5)
      break;
   262b4:	0880006f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
      tmp1.u = subsec->addr_size;
   262b8:	0584e603          	lwu	a2,88(s1)
  bool empty() const { return base == end; }
   262bc:	0b013903          	ld	s2,176(sp)
      CHECK();
   262c0:	0a813783          	ld	a5,168(sp)
   262c4:	3b278ae3          	beq	a5,s2,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      stack.back() = ctx->deref_size(stack.back(), tmp1.u);
   262c8:	000b3783          	ld	a5,0(s6)
   262cc:	0187b783          	ld	a5,24(a5)
   262d0:	0006061b          	addiw	a2,a2,0
   262d4:	ff893583          	ld	a1,-8(s2)
   262d8:	000b0513          	addi	a0,s6,0
   262dc:	000780e7          	jalr	ra,0(a5)
   262e0:	0580006f          	jal	zero,26338 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1660>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   262e4:	0106b783          	ld	a5,16(a3)
   262e8:	00f76663          	bltu	a4,a5,262f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x161c>
      underflow();
   262ec:	05010513          	addi	a0,sp,80
   262f0:	e54f70ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   262f4:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   262f8:	05013703          	ld	a4,80(sp)
   262fc:	01c72703          	lw	a4,28(a4)
   26300:	00071463          	bne	a4,zero,26308 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1630>
   26304:	0780106f          	jal	zero,2737c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x26a4>
        val = (val << 8) | (uint64_t)p[i];
   26308:	0007c603          	lbu	a2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   2630c:	0740106f          	jal	zero,27380 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x26a8>
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   26310:	0001d797          	auipc	a5,0x1d
   26314:	0587b783          	ld	a5,88(a5) # 43368 <vtable for dwarf::expr_error@@Base+0x8e0>
   26318:	01078793          	addi	a5,a5,16
   2631c:	00f93023          	sd	a5,0(s2)
        throw expr_error("DW_OP_deref_size operand exceeds address size");
   26320:	0001d617          	auipc	a2,0x1d
   26324:	1a063603          	ld	a2,416(a2) # 434c0 <dwarf::expr_error::~expr_error()@@Base+0x1c008>
   26328:	0001d597          	auipc	a1,0x1d
   2632c:	2105b583          	ld	a1,528(a1) # 43538 <typeinfo for dwarf::expr_error@@Base+0xad8>
   26330:	00090513          	addi	a0,s2,0
   26334:	e2cf00ef          	jal	ra,16960 <__cxa_throw@plt>
      stack.back() = ctx->deref_size(stack.back(), tmp1.u);
   26338:	fea93c23          	sd	a0,-8(s2)
      { return _M_ptr; }
   2633c:	05013683          	ld	a3,80(sp)
  bool end() const { return pos >= sec->end; }
   26340:	06013703          	ld	a4,96(sp)
  while (!cur.end()) {
   26344:	0106b783          	ld	a5,16(a3)
   26348:	36f778e3          	bgeu	a4,a5,26eb8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21e0>
    if (sec->ord == byte_order::lsb) {
   2634c:	01c6a783          	lw	a5,28(a3)
   26350:	00079463          	bne	a5,zero,26358 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1680>
   26354:	0900106f          	jal	zero,273e4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x270c>
        val = (val << 8) | (uint64_t)p[i];
   26358:	00074783          	lbu	a5,0(a4)
      for (unsigned i = 0; i < sizeof(T); i++)
   2635c:	08c0106f          	jal	zero,273e8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2710>
      tmp1.u = subsec->addr_size;
   26360:	0584e683          	lwu	a3,88(s1)
  size_type size() const { return end - base; }
   26364:	0b013903          	ld	s2,176(sp)
   26368:	0a813783          	ld	a5,168(sp)
   2636c:	40f907b3          	sub	a5,s2,a5
      CHECKN(2);
   26370:	30fdf4e3          	bgeu	s11,a5,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp2.u = stack.back();
   26374:	ff893583          	ld	a1,-8(s2)
    end--;
   26378:	ff890793          	addi	a5,s2,-8
   2637c:	0af13823          	sd	a5,176(sp)
      stack.back() = ctx->xderef_size(tmp2.u, stack.back(), tmp1.u);
   26380:	000b3783          	ld	a5,0(s6)
   26384:	0207b783          	ld	a5,32(a5)
   26388:	0006869b          	addiw	a3,a3,0
   2638c:	ff093603          	ld	a2,-16(s2)
   26390:	000b0513          	addi	a0,s6,0
   26394:	000780e7          	jalr	ra,0(a5)
   26398:	0580006f          	jal	zero,263f0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1718>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2639c:	0106b783          	ld	a5,16(a3)
   263a0:	00f76663          	bltu	a4,a5,263ac <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x16d4>
      underflow();
   263a4:	05010513          	addi	a0,sp,80
   263a8:	d9cf70ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   263ac:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   263b0:	05013703          	ld	a4,80(sp)
   263b4:	01c72703          	lw	a4,28(a4)
   263b8:	00071463          	bne	a4,zero,263c0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x16e8>
   263bc:	7f50006f          	jal	zero,273b0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x26d8>
        val = (val << 8) | (uint64_t)p[i];
   263c0:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   263c4:	7f10006f          	jal	zero,273b4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x26dc>
   263c8:	0001d797          	auipc	a5,0x1d
   263cc:	fa07b783          	ld	a5,-96(a5) # 43368 <vtable for dwarf::expr_error@@Base+0x8e0>
   263d0:	01078793          	addi	a5,a5,16
   263d4:	00f93023          	sd	a5,0(s2)
        throw expr_error("DW_OP_xderef_size operand exceeds address size");
   263d8:	0001d617          	auipc	a2,0x1d
   263dc:	0e863603          	ld	a2,232(a2) # 434c0 <dwarf::expr_error::~expr_error()@@Base+0x1c008>
   263e0:	0001d597          	auipc	a1,0x1d
   263e4:	1585b583          	ld	a1,344(a1) # 43538 <typeinfo for dwarf::expr_error@@Base+0xad8>
   263e8:	00090513          	addi	a0,s2,0
   263ec:	d74f00ef          	jal	ra,16960 <__cxa_throw@plt>
      stack.back() = ctx->xderef_size(tmp2.u, stack.back(), tmp1.u);
   263f0:	fea93823          	sd	a0,-16(s2)
      break;
   263f4:	f49ff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
      throw runtime_error("DW_OP_push_object_address not implemented");
   263f8:	01000513          	addi	a0,zero,16
   263fc:	a94f00ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   26400:	00050913          	addi	s2,a0,0
   26404:	00012597          	auipc	a1,0x12
   26408:	ee458593          	addi	a1,a1,-284 # 382e8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x340>
   2640c:	a54f00ef          	jal	ra,16660 <std::runtime_error::runtime_error(char const*)@plt>
   26410:	0001d617          	auipc	a2,0x1d
   26414:	01063603          	ld	a2,16(a2) # 43420 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   26418:	0001d597          	auipc	a1,0x1d
   2641c:	1f85b583          	ld	a1,504(a1) # 43610 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   26420:	00090513          	addi	a0,s2,0
   26424:	d3cf00ef          	jal	ra,16960 <__cxa_throw@plt>
  bool empty() const { return base == end; }
   26428:	0b013903          	ld	s2,176(sp)
      CHECK();
   2642c:	0a813783          	ld	a5,168(sp)
   26430:	252784e3          	beq	a5,s2,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      stack.back() = ctx->form_tls_address(stack.back());
   26434:	000b3783          	ld	a5,0(s6)
   26438:	0287b783          	ld	a5,40(a5)
   2643c:	ff893583          	ld	a1,-8(s2)
   26440:	000b0513          	addi	a0,s6,0
   26444:	000780e7          	jalr	ra,0(a5)
   26448:	fea93c23          	sd	a0,-8(s2)
      break;
   2644c:	ef1ff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
      throw runtime_error("DW_OP_call_frame_cfa not implemented");
   26450:	01000513          	addi	a0,zero,16
   26454:	a3cf00ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   26458:	00050913          	addi	s2,a0,0
   2645c:	00012597          	auipc	a1,0x12
   26460:	ebc58593          	addi	a1,a1,-324 # 38318 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x370>
   26464:	9fcf00ef          	jal	ra,16660 <std::runtime_error::runtime_error(char const*)@plt>
   26468:	0001d617          	auipc	a2,0x1d
   2646c:	fb863603          	ld	a2,-72(a2) # 43420 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   26470:	0001d597          	auipc	a1,0x1d
   26474:	1a05b583          	ld	a1,416(a1) # 43610 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   26478:	00090513          	addi	a0,s2,0
   2647c:	ce4f00ef          	jal	ra,16960 <__cxa_throw@plt>
   26480:	0b013703          	ld	a4,176(sp)
      CHECK();
   26484:	0a813783          	ld	a5,168(sp)
   26488:	1ef708e3          	beq	a4,a5,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      if (tmp1.s < 0)
   2648c:	ff873783          	ld	a5,-8(a4)
   26490:	43f7d693          	srai	a3,a5,0x3f
   26494:	00d7c7b3          	xor	a5,a5,a3
   26498:	40d787b3          	sub	a5,a5,a3
      stack.back() = tmp1.u;
   2649c:	fef73c23          	sd	a5,-8(a4)
      break;
   264a0:	e9dff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   264a4:	0b013783          	ld	a5,176(sp)
   264a8:	0a813703          	ld	a4,168(sp)
   264ac:	40e78733          	sub	a4,a5,a4
      UBINOP(&);
   264b0:	00800693          	addi	a3,zero,8
   264b4:	1ce6f2e3          	bgeu	a3,a4,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   264b8:	ff87b683          	ld	a3,-8(a5)
    end--;
   264bc:	ff878713          	addi	a4,a5,-8
   264c0:	0ae13823          	sd	a4,176(sp)
   264c4:	ff07b703          	ld	a4,-16(a5)
   264c8:	00d77733          	and	a4,a4,a3
   264cc:	fee7b823          	sd	a4,-16(a5)
      break;
   264d0:	e6dff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   264d4:	0b013783          	ld	a5,176(sp)
   264d8:	0a813703          	ld	a4,168(sp)
   264dc:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   264e0:	00800693          	addi	a3,zero,8
   264e4:	18e6fae3          	bgeu	a3,a4,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp1.u = stack.back();
   264e8:	ff87b703          	ld	a4,-8(a5)
    end--;
   264ec:	ff878693          	addi	a3,a5,-8
   264f0:	0ad13823          	sd	a3,176(sp)
      tmp3.s = tmp1.s / tmp2.s;
   264f4:	ff07b683          	ld	a3,-16(a5)
   264f8:	02d74733          	div	a4,a4,a3
      stack.back() = tmp3.u;
   264fc:	fee7b823          	sd	a4,-16(a5)
      break;
   26500:	e3dff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   26504:	0b013783          	ld	a5,176(sp)
   26508:	0a813703          	ld	a4,168(sp)
   2650c:	40e78733          	sub	a4,a5,a4
      UBINOP(-);
   26510:	00800693          	addi	a3,zero,8
   26514:	16e6f2e3          	bgeu	a3,a4,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   26518:	ff87b683          	ld	a3,-8(a5)
    end--;
   2651c:	ff878713          	addi	a4,a5,-8
   26520:	0ae13823          	sd	a4,176(sp)
   26524:	ff07b703          	ld	a4,-16(a5)
   26528:	40d70733          	sub	a4,a4,a3
   2652c:	fee7b823          	sd	a4,-16(a5)
      break;
   26530:	e0dff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   26534:	0b013783          	ld	a5,176(sp)
   26538:	0a813703          	ld	a4,168(sp)
   2653c:	40e78733          	sub	a4,a5,a4
      UBINOP(%);
   26540:	00800693          	addi	a3,zero,8
   26544:	12e6fae3          	bgeu	a3,a4,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   26548:	ff87b683          	ld	a3,-8(a5)
    end--;
   2654c:	ff878713          	addi	a4,a5,-8
   26550:	0ae13823          	sd	a4,176(sp)
   26554:	ff07b703          	ld	a4,-16(a5)
   26558:	02d77733          	remu	a4,a4,a3
   2655c:	fee7b823          	sd	a4,-16(a5)
      break;
   26560:	dddff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   26564:	0b013783          	ld	a5,176(sp)
   26568:	0a813703          	ld	a4,168(sp)
   2656c:	40e78733          	sub	a4,a5,a4
      UBINOP(*);
   26570:	00800693          	addi	a3,zero,8
   26574:	10e6f2e3          	bgeu	a3,a4,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   26578:	ff87b683          	ld	a3,-8(a5)
    end--;
   2657c:	ff878713          	addi	a4,a5,-8
   26580:	0ae13823          	sd	a4,176(sp)
   26584:	ff07b703          	ld	a4,-16(a5)
   26588:	02d70733          	mul	a4,a4,a3
   2658c:	fee7b823          	sd	a4,-16(a5)
      break;
   26590:	dadff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  bool empty() const { return base == end; }
   26594:	0b013783          	ld	a5,176(sp)
      CHECK();
   26598:	0a813703          	ld	a4,168(sp)
   2659c:	0cf70ee3          	beq	a4,a5,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp1.s = -tmp1.s;
   265a0:	ff87b703          	ld	a4,-8(a5)
   265a4:	40e00733          	sub	a4,zero,a4
      stack.back() = tmp1.u;
   265a8:	fee7bc23          	sd	a4,-8(a5)
      break;
   265ac:	d91ff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
   265b0:	0b013783          	ld	a5,176(sp)
      CHECK();
   265b4:	0a813703          	ld	a4,168(sp)
   265b8:	0cf700e3          	beq	a4,a5,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      stack.back() = ~stack.back();
   265bc:	ff87b703          	ld	a4,-8(a5)
   265c0:	fff74713          	xori	a4,a4,-1
   265c4:	fee7bc23          	sd	a4,-8(a5)
      break;
   265c8:	d75ff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   265cc:	0b013783          	ld	a5,176(sp)
   265d0:	0a813703          	ld	a4,168(sp)
   265d4:	40e78733          	sub	a4,a5,a4
      UBINOP(|);
   265d8:	00800693          	addi	a3,zero,8
   265dc:	08e6fee3          	bgeu	a3,a4,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   265e0:	ff87b683          	ld	a3,-8(a5)
    end--;
   265e4:	ff878713          	addi	a4,a5,-8
   265e8:	0ae13823          	sd	a4,176(sp)
   265ec:	ff07b703          	ld	a4,-16(a5)
   265f0:	00d76733          	or	a4,a4,a3
   265f4:	fee7b823          	sd	a4,-16(a5)
      break;
   265f8:	d45ff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   265fc:	0b013783          	ld	a5,176(sp)
   26600:	0a813703          	ld	a4,168(sp)
   26604:	40e78733          	sub	a4,a5,a4
      UBINOP(+);
   26608:	00800693          	addi	a3,zero,8
   2660c:	06e6f6e3          	bgeu	a3,a4,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   26610:	ff87b683          	ld	a3,-8(a5)
    end--;
   26614:	ff878713          	addi	a4,a5,-8
   26618:	0ae13823          	sd	a4,176(sp)
   2661c:	ff07b703          	ld	a4,-16(a5)
   26620:	00d70733          	add	a4,a4,a3
   26624:	fee7b823          	sd	a4,-16(a5)
      break;
   26628:	d15ff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    return 0;
   2662c:	00000513          	addi	a0,zero,0
  bool empty() const { return base == end; }
   26630:	0b013783          	ld	a5,176(sp)
      CHECK();
   26634:	0a813703          	ld	a4,168(sp)
   26638:	04f700e3          	beq	a4,a5,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      stack.back() += tmp1.u;
   2663c:	ff87b703          	ld	a4,-8(a5)
   26640:	00a70733          	add	a4,a4,a0
   26644:	fee7bc23          	sd	a4,-8(a5)
      break;
   26648:	cf5ff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   2664c:	0b013783          	ld	a5,176(sp)
   26650:	0a813703          	ld	a4,168(sp)
   26654:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   26658:	00800693          	addi	a3,zero,8
   2665c:	00e6fee3          	bgeu	a3,a4,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp1.u = stack.back();
   26660:	ff87b683          	ld	a3,-8(a5)
    end--;
   26664:	ff878713          	addi	a4,a5,-8
   26668:	0ae13823          	sd	a4,176(sp)
      tmp2.u = stack.back();
   2666c:	ff07b703          	ld	a4,-16(a5)
      if (tmp1.u < sizeof(tmp2.u) * 8)
   26670:	03f00613          	addi	a2,zero,63
   26674:	00d66863          	bltu	a2,a3,26684 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19ac>
        stack.back() = tmp2.u << tmp1.u;
   26678:	00d71733          	sll	a4,a4,a3
   2667c:	fee7b823          	sd	a4,-16(a5)
   26680:	cbdff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
        stack.back() = 0;
   26684:	fe07b823          	sd	zero,-16(a5)
   26688:	cb5ff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   2668c:	0b013783          	ld	a5,176(sp)
   26690:	0a813703          	ld	a4,168(sp)
   26694:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   26698:	00800693          	addi	a3,zero,8
   2669c:	7ce6fe63          	bgeu	a3,a4,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp1.u = stack.back();
   266a0:	ff87b683          	ld	a3,-8(a5)
    end--;
   266a4:	ff878713          	addi	a4,a5,-8
   266a8:	0ae13823          	sd	a4,176(sp)
      tmp2.u = stack.back();
   266ac:	ff07b703          	ld	a4,-16(a5)
      if (tmp1.u < sizeof(tmp2.u) * 8)
   266b0:	03f00613          	addi	a2,zero,63
   266b4:	00d66863          	bltu	a2,a3,266c4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19ec>
        stack.back() = tmp2.u >> tmp1.u;
   266b8:	00d75733          	srl	a4,a4,a3
   266bc:	fee7b823          	sd	a4,-16(a5)
   266c0:	c7dff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
        stack.back() = 0;
   266c4:	fe07b823          	sd	zero,-16(a5)
   266c8:	c75ff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   266cc:	0b013783          	ld	a5,176(sp)
   266d0:	0a813703          	ld	a4,168(sp)
   266d4:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   266d8:	00800693          	addi	a3,zero,8
   266dc:	78e6fe63          	bgeu	a3,a4,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp1.u = stack.back();
   266e0:	ff87b603          	ld	a2,-8(a5)
    end--;
   266e4:	ff878713          	addi	a4,a5,-8
   266e8:	0ae13823          	sd	a4,176(sp)
      tmp2.u = stack.back();
   266ec:	ff07b683          	ld	a3,-16(a5)
      if (tmp1.u < sizeof(tmp2.u) * 8)
   266f0:	03f00593          	addi	a1,zero,63
        tmp2.u = 0;
   266f4:	00000713          	addi	a4,zero,0
      if (tmp1.u < sizeof(tmp2.u) * 8)
   266f8:	00c5ea63          	bltu	a1,a2,2670c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a34>
      if (tmp3.u)
   266fc:	43f6d593          	srai	a1,a3,0x3f
   26700:	00d5c733          	xor	a4,a1,a3
   26704:	40b70733          	sub	a4,a4,a1
        tmp2.u >>= tmp1.u;
   26708:	00c75733          	srl	a4,a4,a2
      if (tmp3.u)
   2670c:	0006d463          	bge	a3,zero,26714 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a3c>
        tmp2.s = -tmp2.s;
   26710:	40e00733          	sub	a4,zero,a4
      stack.back() = tmp2.u;
   26714:	fee7b823          	sd	a4,-16(a5)
      break;
   26718:	c25ff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   2671c:	0b013783          	ld	a5,176(sp)
   26720:	0a813703          	ld	a4,168(sp)
   26724:	40e78733          	sub	a4,a5,a4
      UBINOP(^);
   26728:	00800693          	addi	a3,zero,8
   2672c:	74e6f663          	bgeu	a3,a4,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   26730:	ff87b683          	ld	a3,-8(a5)
    end--;
   26734:	ff878713          	addi	a4,a5,-8
   26738:	0ae13823          	sd	a4,176(sp)
   2673c:	ff07b703          	ld	a4,-16(a5)
   26740:	00d74733          	xor	a4,a4,a3
   26744:	fee7b823          	sd	a4,-16(a5)
      break;
   26748:	bf5ff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   2674c:	0b013703          	ld	a4,176(sp)
   26750:	0a813783          	ld	a5,168(sp)
   26754:	40f707b3          	sub	a5,a4,a5
      SRELOP(<=);
   26758:	00800693          	addi	a3,zero,8
   2675c:	70f6fe63          	bgeu	a3,a5,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   26760:	ff873783          	ld	a5,-8(a4)
    end--;
   26764:	ff870693          	addi	a3,a4,-8
   26768:	0ad13823          	sd	a3,176(sp)
   2676c:	ff073683          	ld	a3,-16(a4)
   26770:	00d7a7b3          	slt	a5,a5,a3
   26774:	0017c793          	xori	a5,a5,1
   26778:	02079793          	slli	a5,a5,0x20
   2677c:	0207d793          	srli	a5,a5,0x20
   26780:	fef73823          	sd	a5,-16(a4)
      break;
   26784:	bb9ff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   26788:	0b013703          	ld	a4,176(sp)
   2678c:	0a813783          	ld	a5,168(sp)
   26790:	40f707b3          	sub	a5,a4,a5
      SRELOP(>=);
   26794:	00800693          	addi	a3,zero,8
   26798:	6ef6f063          	bgeu	a3,a5,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   2679c:	ff873783          	ld	a5,-8(a4)
    end--;
   267a0:	ff870693          	addi	a3,a4,-8
   267a4:	0ad13823          	sd	a3,176(sp)
   267a8:	ff073683          	ld	a3,-16(a4)
   267ac:	00d7a7b3          	slt	a5,a5,a3
   267b0:	0017c793          	xori	a5,a5,1
   267b4:	02079793          	slli	a5,a5,0x20
   267b8:	0207d793          	srli	a5,a5,0x20
   267bc:	fef73823          	sd	a5,-16(a4)
      break;
   267c0:	b7dff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   267c4:	0b013703          	ld	a4,176(sp)
   267c8:	0a813783          	ld	a5,168(sp)
   267cc:	40f707b3          	sub	a5,a4,a5
      SRELOP(==);
   267d0:	00800693          	addi	a3,zero,8
   267d4:	6af6f263          	bgeu	a3,a5,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   267d8:	ff873783          	ld	a5,-8(a4)
    end--;
   267dc:	ff870693          	addi	a3,a4,-8
   267e0:	0ad13823          	sd	a3,176(sp)
   267e4:	ff073683          	ld	a3,-16(a4)
   267e8:	00d7a7b3          	slt	a5,a5,a3
   267ec:	0017c793          	xori	a5,a5,1
   267f0:	02079793          	slli	a5,a5,0x20
   267f4:	0207d793          	srli	a5,a5,0x20
   267f8:	fef73823          	sd	a5,-16(a4)
      break;
   267fc:	b41ff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   26800:	0b013703          	ld	a4,176(sp)
   26804:	0a813783          	ld	a5,168(sp)
   26808:	40f707b3          	sub	a5,a4,a5
      SRELOP(<);
   2680c:	00800693          	addi	a3,zero,8
   26810:	66f6f463          	bgeu	a3,a5,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   26814:	ff873783          	ld	a5,-8(a4)
    end--;
   26818:	ff870693          	addi	a3,a4,-8
   2681c:	0ad13823          	sd	a3,176(sp)
   26820:	ff073683          	ld	a3,-16(a4)
   26824:	00d7a7b3          	slt	a5,a5,a3
   26828:	0017c793          	xori	a5,a5,1
   2682c:	02079793          	slli	a5,a5,0x20
   26830:	0207d793          	srli	a5,a5,0x20
   26834:	fef73823          	sd	a5,-16(a4)
      break;
   26838:	b05ff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   2683c:	0b013703          	ld	a4,176(sp)
   26840:	0a813783          	ld	a5,168(sp)
   26844:	40f707b3          	sub	a5,a4,a5
      SRELOP(>);
   26848:	00800693          	addi	a3,zero,8
   2684c:	62f6f663          	bgeu	a3,a5,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   26850:	ff873783          	ld	a5,-8(a4)
    end--;
   26854:	ff870693          	addi	a3,a4,-8
   26858:	0ad13823          	sd	a3,176(sp)
   2685c:	ff073683          	ld	a3,-16(a4)
   26860:	00d7a7b3          	slt	a5,a5,a3
   26864:	0017c793          	xori	a5,a5,1
   26868:	02079793          	slli	a5,a5,0x20
   2686c:	0207d793          	srli	a5,a5,0x20
   26870:	fef73823          	sd	a5,-16(a4)
      break;
   26874:	ac9ff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   26878:	0b013703          	ld	a4,176(sp)
   2687c:	0a813783          	ld	a5,168(sp)
   26880:	40f707b3          	sub	a5,a4,a5
      SRELOP(!=);
   26884:	00800693          	addi	a3,zero,8
   26888:	5ef6f863          	bgeu	a3,a5,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   2688c:	ff873783          	ld	a5,-8(a4)
    end--;
   26890:	ff870693          	addi	a3,a4,-8
   26894:	0ad13823          	sd	a3,176(sp)
   26898:	ff073683          	ld	a3,-16(a4)
   2689c:	00d7a7b3          	slt	a5,a5,a3
   268a0:	0017c793          	xori	a5,a5,1
   268a4:	02079793          	slli	a5,a5,0x20
   268a8:	0207d793          	srli	a5,a5,0x20
   268ac:	fef73823          	sd	a5,-16(a4)
      break;
   268b0:	a8dff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   268b4:	0106b783          	ld	a5,16(a3)
   268b8:	40e78633          	sub	a2,a5,a4
   268bc:	00100693          	addi	a3,zero,1
   268c0:	00c6f463          	bgeu	a3,a2,268c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1bf0>
   268c4:	00f76663          	bltu	a4,a5,268d0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1bf8>
      underflow();
   268c8:	05010513          	addi	a0,sp,80
   268cc:	878f70ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   268d0:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   268d4:	05013703          	ld	a4,80(sp)
   268d8:	01c72703          	lw	a4,28(a4)
   268dc:	10071063          	bne	a4,zero,269dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1d04>
        val |= ((uint64_t)p[i]) << (i * 8);
   268e0:	0017c903          	lbu	s2,1(a5)
   268e4:	00891913          	slli	s2,s2,0x8
   268e8:	0007c703          	lbu	a4,0(a5)
   268ec:	00e96933          	or	s2,s2,a4
    pos += sizeof(T);
   268f0:	00278793          	addi	a5,a5,2
   268f4:	06f13023          	sd	a5,96(sp)
      tmp1.s = cur.fixed<int16_t>();
   268f8:	0109191b          	slliw	s2,s2,0x10
   268fc:	4109591b          	sraiw	s2,s2,0x10
    if (__is_single_threaded())
   26900:	000d4783          	lbu	a5,0(s10)
   26904:	16078663          	beq	a5,zero,26a70 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1d98>
  { *__mem += __val; }
   26908:	0304a783          	lw	a5,48(s1)
   2690c:	0017879b          	addiw	a5,a5,1
   26910:	02f4a823          	sw	a5,48(s1)
  section_offset get_section_offset() const { return pos - sec->begin; }
   26914:	05013783          	ld	a5,80(sp)
   26918:	0087b703          	ld	a4,8(a5)
   2691c:	06013783          	ld	a5,96(sp)
   26920:	40e787b3          	sub	a5,a5,a4
      cur = cursor(subsec, (int64_t)cur.get_section_offset() + tmp1.s);
   26924:	01278933          	add	s2,a5,s2
   26928:	0304a783          	lw	a5,48(s1)
   2692c:	0017879b          	addiw	a5,a5,1
   26930:	02f4a823          	sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   26934:	0404b783          	ld	a5,64(s1)
   26938:	01278933          	add	s2,a5,s2
   2693c:	05813823          	sd	s8,80(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   26940:	05813a03          	ld	s4,88(sp)
	__r._M_pi = _M_pi;
   26944:	04913c23          	sd	s1,88(sp)
	if (_M_pi != nullptr)
   26948:	020a0463          	beq	s4,zero,26970 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c98>
    if (__is_single_threaded())
   2694c:	0001d797          	auipc	a5,0x1d
   26950:	b4c7b783          	ld	a5,-1204(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   26954:	0007c783          	lbu	a5,0(a5)
   26958:	14078c63          	beq	a5,zero,26ab0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1dd8>
    _Atomic_word __result = *__mem;
   2695c:	030a2503          	lw	a0,48(s4)
    *__mem += __val;
   26960:	fff5079b          	addiw	a5,a0,-1
   26964:	02fa2823          	sw	a5,48(s4)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   26968:	00100793          	addi	a5,zero,1
   2696c:	14f50a63          	beq	a0,a5,26ac0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1de8>
struct cursor {
   26970:	07213023          	sd	s2,96(sp)
    if (__is_single_threaded())
   26974:	000d4783          	lbu	a5,0(s10)
   26978:	1a078463          	beq	a5,zero,26b20 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1e48>
    _Atomic_word __result = *__mem;
   2697c:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   26980:	fff5079b          	addiw	a5,a0,-1
   26984:	02f4a823          	sw	a5,48(s1)
   26988:	00100793          	addi	a5,zero,1
   2698c:	9af518e3          	bne	a0,a5,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
	_M_dispose();
   26990:	0004b783          	ld	a5,0(s1)
   26994:	0107b783          	ld	a5,16(a5)
   26998:	00048513          	addi	a0,s1,0
   2699c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   269a0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   269a4:	0001d797          	auipc	a5,0x1d
   269a8:	af47b783          	ld	a5,-1292(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   269ac:	0007c783          	lbu	a5,0(a5)
   269b0:	18078063          	beq	a5,zero,26b30 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1e58>
    _Atomic_word __result = *__mem;
   269b4:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   269b8:	fff7871b          	addiw	a4,a5,-1
   269bc:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   269c0:	00100713          	addi	a4,zero,1
   269c4:	96e79ce3          	bne	a5,a4,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
	    _M_destroy();
   269c8:	0004b783          	ld	a5,0(s1)
   269cc:	0187b783          	ld	a5,24(a5)
   269d0:	00048513          	addi	a0,s1,0
   269d4:	000780e7          	jalr	ra,0(a5)
   269d8:	965ff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
        val = (val << 8) | (uint64_t)p[i];
   269dc:	0007c903          	lbu	s2,0(a5)
   269e0:	00891913          	slli	s2,s2,0x8
   269e4:	0017c703          	lbu	a4,1(a5)
   269e8:	00e96933          	or	s2,s2,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   269ec:	f05ff06f          	jal	zero,268f0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c18>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   269f0:	0106b783          	ld	a5,16(a3)
   269f4:	40e78633          	sub	a2,a5,a4
   269f8:	00100693          	addi	a3,zero,1
   269fc:	00c6f463          	bgeu	a3,a2,26a04 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1d2c>
   26a00:	00f76663          	bltu	a4,a5,26a0c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1d34>
      underflow();
   26a04:	05010513          	addi	a0,sp,80
   26a08:	f3df60ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   26a0c:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   26a10:	05013703          	ld	a4,80(sp)
   26a14:	01c72703          	lw	a4,28(a4)
   26a18:	04071263          	bne	a4,zero,26a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1d84>
        val |= ((uint64_t)p[i]) << (i * 8);
   26a1c:	0017c903          	lbu	s2,1(a5)
   26a20:	00891913          	slli	s2,s2,0x8
   26a24:	0007c703          	lbu	a4,0(a5)
   26a28:	00e96933          	or	s2,s2,a4
    pos += sizeof(T);
   26a2c:	00278793          	addi	a5,a5,2
   26a30:	06f13023          	sd	a5,96(sp)
  bool empty() const { return base == end; }
   26a34:	0b013783          	ld	a5,176(sp)
      CHECK();
   26a38:	0a813703          	ld	a4,168(sp)
   26a3c:	42f70e63          	beq	a4,a5,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp2.u = stack.back();
   26a40:	ff87b703          	ld	a4,-8(a5)
    end--;
   26a44:	ff878793          	addi	a5,a5,-8
   26a48:	0af13823          	sd	a5,176(sp)
      if (tmp2.u == 0)
   26a4c:	8e0708e3          	beq	a4,zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
      tmp1.s = cur.fixed<int16_t>();
   26a50:	0109191b          	slliw	s2,s2,0x10
   26a54:	4109591b          	sraiw	s2,s2,0x10
   26a58:	ea9ff06f          	jal	zero,26900 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c28>
        val = (val << 8) | (uint64_t)p[i];
   26a5c:	0007c903          	lbu	s2,0(a5)
   26a60:	00891913          	slli	s2,s2,0x8
   26a64:	0017c703          	lbu	a4,1(a5)
   26a68:	00e96933          	or	s2,s2,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   26a6c:	fc1ff06f          	jal	zero,26a2c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1d54>
      __atomic_add(__mem, __val);
   26a70:	00100593          	addi	a1,zero,1
   26a74:	03048513          	addi	a0,s1,48
   26a78:	b39ef0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
  section_offset get_section_offset() const { return pos - sec->begin; }
   26a7c:	05013783          	ld	a5,80(sp)
   26a80:	0087b703          	ld	a4,8(a5)
   26a84:	06013783          	ld	a5,96(sp)
   26a88:	40e787b3          	sub	a5,a5,a4
      cur = cursor(subsec, (int64_t)cur.get_section_offset() + tmp1.s);
   26a8c:	01278933          	add	s2,a5,s2
    if (__is_single_threaded())
   26a90:	0001d797          	auipc	a5,0x1d
   26a94:	a087b783          	ld	a5,-1528(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   26a98:	0007c783          	lbu	a5,0(a5)
   26a9c:	e80796e3          	bne	a5,zero,26928 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c50>
      __atomic_add(__mem, __val);
   26aa0:	00100593          	addi	a1,zero,1
   26aa4:	03048513          	addi	a0,s1,48
   26aa8:	b09ef0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   26aac:	e89ff06f          	jal	zero,26934 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c5c>
      return __exchange_and_add(__mem, __val);
   26ab0:	fff00593          	addi	a1,zero,-1
   26ab4:	030a0513          	addi	a0,s4,48
   26ab8:	b39ef0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26abc:	eadff06f          	jal	zero,26968 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c90>
	_M_dispose();
   26ac0:	000a3783          	ld	a5,0(s4)
   26ac4:	0107b783          	ld	a5,16(a5)
   26ac8:	000a0513          	addi	a0,s4,0
   26acc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   26ad0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   26ad4:	0001d797          	auipc	a5,0x1d
   26ad8:	9c47b783          	ld	a5,-1596(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   26adc:	0007c783          	lbu	a5,0(a5)
   26ae0:	02078663          	beq	a5,zero,26b0c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1e34>
    _Atomic_word __result = *__mem;
   26ae4:	034a2783          	lw	a5,52(s4)
    *__mem += __val;
   26ae8:	fff7871b          	addiw	a4,a5,-1
   26aec:	02ea2a23          	sw	a4,52(s4)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   26af0:	00100713          	addi	a4,zero,1
   26af4:	e6e79ee3          	bne	a5,a4,26970 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c98>
	    _M_destroy();
   26af8:	000a3783          	ld	a5,0(s4)
   26afc:	0187b783          	ld	a5,24(a5)
   26b00:	000a0513          	addi	a0,s4,0
   26b04:	000780e7          	jalr	ra,0(a5)
   26b08:	e69ff06f          	jal	zero,26970 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c98>
      return __exchange_and_add(__mem, __val);
   26b0c:	fff00593          	addi	a1,zero,-1
   26b10:	034a0513          	addi	a0,s4,52
   26b14:	addef0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26b18:	00050793          	addi	a5,a0,0
   26b1c:	fd5ff06f          	jal	zero,26af0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1e18>
   26b20:	fff00593          	addi	a1,zero,-1
   26b24:	03048513          	addi	a0,s1,48
   26b28:	ac9ef0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26b2c:	e5dff06f          	jal	zero,26988 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1cb0>
   26b30:	fff00593          	addi	a1,zero,-1
   26b34:	03448513          	addi	a0,s1,52
   26b38:	ab9ef0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26b3c:	00050793          	addi	a5,a0,0
   26b40:	e81ff06f          	jal	zero,269c0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ce8>
      throw runtime_error(to_string(op) + " not implemented");
   26b44:	01000513          	addi	a0,zero,16
   26b48:	b49ef0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   26b4c:	00050993          	addi	s3,a0,0
   26b50:	00090593          	addi	a1,s2,0
   26b54:	01010513          	addi	a0,sp,16
   26b58:	5cd0a0ef          	jal	ra,31924 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__lhs.append(__rhs)); }
   26b5c:	00011597          	auipc	a1,0x11
   26b60:	7e458593          	addi	a1,a1,2020 # 38340 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x398>
   26b64:	01010513          	addi	a0,sp,16
   26b68:	ed9ef0ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   26b6c:	00050593          	addi	a1,a0,0
   26b70:	03010413          	addi	s0,sp,48
   26b74:	00040513          	addi	a0,s0,0
   26b78:	b59ef0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   26b7c:	00040593          	addi	a1,s0,0
   26b80:	00098513          	addi	a0,s3,0
   26b84:	d9def0ef          	jal	ra,16920 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   26b88:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   26b8c:	04010793          	addi	a5,sp,64
   26b90:	00f50463          	beq	a0,a5,26b98 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ec0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   26b94:	c0def0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26b98:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   26b9c:	02010793          	addi	a5,sp,32
   26ba0:	00f50463          	beq	a0,a5,26ba8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ed0>
   26ba4:	bfdef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   26ba8:	0001d617          	auipc	a2,0x1d
   26bac:	87863603          	ld	a2,-1928(a2) # 43420 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   26bb0:	0001d597          	auipc	a1,0x1d
   26bb4:	a605b583          	ld	a1,-1440(a1) # 43610 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   26bb8:	00098513          	addi	a0,s3,0
   26bbc:	da5ef0ef          	jal	ra,16960 <__cxa_throw@plt>
      result.location_type = expr_result::type::reg;
   26bc0:	00100793          	addi	a5,zero,1
   26bc4:	00faa023          	sw	a5,0(s5)
      result.value = (unsigned)op - (unsigned)DW_OP::reg0;
   26bc8:	fb09079b          	addiw	a5,s2,-80
   26bcc:	02079793          	slli	a5,a5,0x20
   26bd0:	0207d793          	srli	a5,a5,0x20
   26bd4:	00fab423          	sd	a5,8(s5)
      break;
   26bd8:	f64ff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
      result.location_type = expr_result::type::reg;
   26bdc:	00100793          	addi	a5,zero,1
   26be0:	00faa023          	sw	a5,0(s5)
    while (pos < sec->end) {
   26be4:	0106b783          	ld	a5,16(a3)
   26be8:	02f77e63          	bgeu	a4,a5,26c24 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1f4c>
    std::uint64_t result = 0;
   26bec:	00000513          	addi	a0,zero,0
    int shift = 0;
   26bf0:	00000593          	addi	a1,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   26bf4:	00170713          	addi	a4,a4,1
   26bf8:	06e13023          	sd	a4,96(sp)
   26bfc:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   26c00:	07f7f613          	andi	a2,a5,127
   26c04:	00b61633          	sll	a2,a2,a1
   26c08:	00c56533          	or	a0,a0,a2
      if ((byte & 0x80) == 0)
   26c0c:	0187979b          	slliw	a5,a5,0x18
   26c10:	4187d79b          	sraiw	a5,a5,0x18
   26c14:	0007de63          	bge	a5,zero,26c30 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1f58>
      shift += 7;
   26c18:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   26c1c:	0106b783          	ld	a5,16(a3)
   26c20:	fcf76ae3          	bltu	a4,a5,26bf4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1f1c>
    underflow();
   26c24:	05010513          	addi	a0,sp,80
   26c28:	d1df60ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    return 0;
   26c2c:	00000513          	addi	a0,zero,0
      result.value = cur.uleb128();
   26c30:	00aab423          	sd	a0,8(s5)
      break;
   26c34:	f08ff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
      result.location_type = expr_result::type::implicit;
   26c38:	00300793          	addi	a5,zero,3
   26c3c:	00faa023          	sw	a5,0(s5)
    while (pos < sec->end) {
   26c40:	0106b783          	ld	a5,16(a3)
   26c44:	02f77e63          	bgeu	a4,a5,26c80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1fa8>
    std::uint64_t result = 0;
   26c48:	00000513          	addi	a0,zero,0
    int shift = 0;
   26c4c:	00000593          	addi	a1,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   26c50:	00170713          	addi	a4,a4,1
   26c54:	06e13023          	sd	a4,96(sp)
   26c58:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   26c5c:	07f7f613          	andi	a2,a5,127
   26c60:	00b61633          	sll	a2,a2,a1
   26c64:	00c56533          	or	a0,a0,a2
      if ((byte & 0x80) == 0)
   26c68:	0187979b          	slliw	a5,a5,0x18
   26c6c:	4187d79b          	sraiw	a5,a5,0x18
   26c70:	0007de63          	bge	a5,zero,26c8c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1fb4>
      shift += 7;
   26c74:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   26c78:	0106b783          	ld	a5,16(a3)
   26c7c:	fcf76ae3          	bltu	a4,a5,26c50 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1f78>
    underflow();
   26c80:	05010513          	addi	a0,sp,80
   26c84:	cc1f60ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    return 0;
   26c88:	00000513          	addi	a0,zero,0
      result.implicit_len = cur.uleb128();
   26c8c:	00aabc23          	sd	a0,24(s5)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   26c90:	05013783          	ld	a5,80(sp)
   26c94:	0107b703          	ld	a4,16(a5)
   26c98:	06013783          	ld	a5,96(sp)
   26c9c:	40f706b3          	sub	a3,a4,a5
   26ca0:	00a6e463          	bltu	a3,a0,26ca8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1fd0>
   26ca4:	00e7e663          	bltu	a5,a4,26cb0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1fd8>
      underflow();
   26ca8:	05010513          	addi	a0,sp,80
   26cac:	c99f60ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
      result.implicit = cur.pos;
   26cb0:	06013783          	ld	a5,96(sp)
   26cb4:	00fab823          	sd	a5,16(s5)
      break;
   26cb8:	e84ff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  bool empty() const { return base == end; }
   26cbc:	0b013783          	ld	a5,176(sp)
      CHECK();
   26cc0:	0a813703          	ld	a4,168(sp)
   26cc4:	1af70a63          	beq	a4,a5,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      result.location_type = expr_result::type::literal;
   26cc8:	00200713          	addi	a4,zero,2
   26ccc:	00eaa023          	sw	a4,0(s5)
      result.value = stack.back();
   26cd0:	ff87b783          	ld	a5,-8(a5)
   26cd4:	00fab423          	sd	a5,8(s5)
      break;
   26cd8:	e64ff06f          	jal	zero,2633c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
      throw runtime_error(to_string(op) + " not implemented");
   26cdc:	01000513          	addi	a0,zero,16
   26ce0:	9b1ef0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   26ce4:	00050993          	addi	s3,a0,0
   26ce8:	00090593          	addi	a1,s2,0
   26cec:	01010513          	addi	a0,sp,16
   26cf0:	4350a0ef          	jal	ra,31924 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__lhs.append(__rhs)); }
   26cf4:	00011597          	auipc	a1,0x11
   26cf8:	64c58593          	addi	a1,a1,1612 # 38340 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x398>
   26cfc:	01010513          	addi	a0,sp,16
   26d00:	d41ef0ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   26d04:	00050593          	addi	a1,a0,0
   26d08:	03010413          	addi	s0,sp,48
   26d0c:	00040513          	addi	a0,s0,0
   26d10:	9c1ef0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   26d14:	00040593          	addi	a1,s0,0
   26d18:	00098513          	addi	a0,s3,0
   26d1c:	c05ef0ef          	jal	ra,16920 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   26d20:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   26d24:	04010793          	addi	a5,sp,64
   26d28:	00f50463          	beq	a0,a5,26d30 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2058>
   26d2c:	a75ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26d30:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   26d34:	02010793          	addi	a5,sp,32
   26d38:	00f50463          	beq	a0,a5,26d40 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2068>
   26d3c:	a65ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   26d40:	0001c617          	auipc	a2,0x1c
   26d44:	6e063603          	ld	a2,1760(a2) # 43420 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   26d48:	0001d597          	auipc	a1,0x1d
   26d4c:	8c85b583          	ld	a1,-1848(a1) # 43610 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   26d50:	00098513          	addi	a0,s3,0
   26d54:	c0def0ef          	jal	ra,16960 <__cxa_throw@plt>
      throw expr_error("unknown user op " + to_string(op));
   26d58:	01000513          	addi	a0,zero,16
   26d5c:	935ef0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   26d60:	00050993          	addi	s3,a0,0
   26d64:	00090593          	addi	a1,s2,0
   26d68:	01010513          	addi	a0,sp,16
   26d6c:	3b90a0ef          	jal	ra,31924 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__rhs.insert(0, __lhs)); }
   26d70:	00011617          	auipc	a2,0x11
   26d74:	5e860613          	addi	a2,a2,1512 # 38358 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x3b0>
   26d78:	00000593          	addi	a1,zero,0
   26d7c:	01010513          	addi	a0,sp,16
   26d80:	881ef0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   26d84:	00050593          	addi	a1,a0,0
   26d88:	03010413          	addi	s0,sp,48
   26d8c:	00040513          	addi	a0,s0,0
   26d90:	941ef0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   26d94:	00040593          	addi	a1,s0,0
   26d98:	00098513          	addi	a0,s3,0
   26d9c:	a95ef0ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   26da0:	0001c797          	auipc	a5,0x1c
   26da4:	5c87b783          	ld	a5,1480(a5) # 43368 <vtable for dwarf::expr_error@@Base+0x8e0>
   26da8:	01078793          	addi	a5,a5,16
   26dac:	00f9b023          	sd	a5,0(s3)
      { return _M_dataplus._M_p; }
   26db0:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   26db4:	04010793          	addi	a5,sp,64
   26db8:	00f50463          	beq	a0,a5,26dc0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x20e8>
   26dbc:	9e5ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26dc0:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   26dc4:	02010793          	addi	a5,sp,32
   26dc8:	00f50463          	beq	a0,a5,26dd0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x20f8>
   26dcc:	9d5ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   26dd0:	0001c617          	auipc	a2,0x1c
   26dd4:	6f063603          	ld	a2,1776(a2) # 434c0 <dwarf::expr_error::~expr_error()@@Base+0x1c008>
   26dd8:	0001c597          	auipc	a1,0x1c
   26ddc:	7605b583          	ld	a1,1888(a1) # 43538 <typeinfo for dwarf::expr_error@@Base+0xad8>
   26de0:	00098513          	addi	a0,s3,0
   26de4:	b7def0ef          	jal	ra,16960 <__cxa_throw@plt>
      throw expr_error("bad operation " + to_string(op));
   26de8:	01000513          	addi	a0,zero,16
   26dec:	8a5ef0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   26df0:	00050993          	addi	s3,a0,0
   26df4:	00090593          	addi	a1,s2,0
   26df8:	01010513          	addi	a0,sp,16
   26dfc:	3290a0ef          	jal	ra,31924 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__rhs.insert(0, __lhs)); }
   26e00:	00011617          	auipc	a2,0x11
   26e04:	57060613          	addi	a2,a2,1392 # 38370 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x3c8>
   26e08:	00000593          	addi	a1,zero,0
   26e0c:	01010513          	addi	a0,sp,16
   26e10:	ff0ef0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   26e14:	00050593          	addi	a1,a0,0
   26e18:	03010413          	addi	s0,sp,48
   26e1c:	00040513          	addi	a0,s0,0
   26e20:	8b1ef0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   26e24:	00040593          	addi	a1,s0,0
   26e28:	00098513          	addi	a0,s3,0
   26e2c:	a05ef0ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   26e30:	0001c797          	auipc	a5,0x1c
   26e34:	5387b783          	ld	a5,1336(a5) # 43368 <vtable for dwarf::expr_error@@Base+0x8e0>
   26e38:	01078793          	addi	a5,a5,16
   26e3c:	00f9b023          	sd	a5,0(s3)
      { return _M_dataplus._M_p; }
   26e40:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   26e44:	04010793          	addi	a5,sp,64
   26e48:	00f50463          	beq	a0,a5,26e50 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2178>
   26e4c:	955ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26e50:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   26e54:	02010793          	addi	a5,sp,32
   26e58:	00f50463          	beq	a0,a5,26e60 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2188>
   26e5c:	945ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   26e60:	0001c617          	auipc	a2,0x1c
   26e64:	66063603          	ld	a2,1632(a2) # 434c0 <dwarf::expr_error::~expr_error()@@Base+0x1c008>
   26e68:	0001c597          	auipc	a1,0x1c
   26e6c:	6d05b583          	ld	a1,1744(a1) # 43538 <typeinfo for dwarf::expr_error@@Base+0xad8>
   26e70:	00098513          	addi	a0,s3,0
   26e74:	aedef0ef          	jal	ra,16960 <__cxa_throw@plt>
  throw expr_error("stack underflow evaluating DWARF expression");
   26e78:	01000513          	addi	a0,zero,16
   26e7c:	815ef0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   26e80:	00050913          	addi	s2,a0,0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   26e84:	00011597          	auipc	a1,0x11
   26e88:	4fc58593          	addi	a1,a1,1276 # 38380 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x3d8>
   26e8c:	b85ef0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   26e90:	0001c797          	auipc	a5,0x1c
   26e94:	4d87b783          	ld	a5,1240(a5) # 43368 <vtable for dwarf::expr_error@@Base+0x8e0>
   26e98:	01078793          	addi	a5,a5,16
   26e9c:	00f93023          	sd	a5,0(s2)
   26ea0:	0001c617          	auipc	a2,0x1c
   26ea4:	62063603          	ld	a2,1568(a2) # 434c0 <dwarf::expr_error::~expr_error()@@Base+0x1c008>
   26ea8:	0001c597          	auipc	a1,0x1c
   26eac:	6905b583          	ld	a1,1680(a1) # 43538 <typeinfo for dwarf::expr_error@@Base+0xad8>
   26eb0:	00090513          	addi	a0,s2,0
   26eb4:	aadef0ef          	jal	ra,16960 <__cxa_throw@plt>
  if (result.location_type == expr_result::type::address) {
   26eb8:	000aa783          	lw	a5,0(s5)
   26ebc:	00078463          	beq	a5,zero,26ec4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21ec>
   26ec0:	91cfe06f          	jal	zero,24fdc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x304>
   26ec4:	0b013783          	ld	a5,176(sp)
    if (stack.empty())
   26ec8:	0a813703          	ld	a4,168(sp)
   26ecc:	00f70863          	beq	a4,a5,26edc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2204>
    result.value = stack.back();
   26ed0:	ff87b783          	ld	a5,-8(a5)
   26ed4:	00fab423          	sd	a5,8(s5)
   26ed8:	904fe06f          	jal	zero,24fdc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x304>
      throw expr_error("final stack is empty; no result given");
   26edc:	01000513          	addi	a0,zero,16
   26ee0:	fb0ef0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   26ee4:	00050913          	addi	s2,a0,0
   26ee8:	00011597          	auipc	a1,0x11
   26eec:	4c858593          	addi	a1,a1,1224 # 383b0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x408>
   26ef0:	b21ef0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   26ef4:	0001c797          	auipc	a5,0x1c
   26ef8:	4747b783          	ld	a5,1140(a5) # 43368 <vtable for dwarf::expr_error@@Base+0x8e0>
   26efc:	01078793          	addi	a5,a5,16
   26f00:	00f93023          	sd	a5,0(s2)
   26f04:	0001c617          	auipc	a2,0x1c
   26f08:	5bc63603          	ld	a2,1468(a2) # 434c0 <dwarf::expr_error::~expr_error()@@Base+0x1c008>
   26f0c:	0001c597          	auipc	a1,0x1c
   26f10:	62c5b583          	ld	a1,1580(a1) # 43538 <typeinfo for dwarf::expr_error@@Base+0xad8>
   26f14:	00090513          	addi	a0,s2,0
   26f18:	a49ef0ef          	jal	ra,16960 <__cxa_throw@plt>
   26f1c:	fff00593          	addi	a1,zero,-1
   26f20:	03040513          	addi	a0,s0,48
   26f24:	eccef0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26f28:	8dcfe06f          	jal	zero,25004 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x32c>
	_M_dispose();
   26f2c:	00043783          	ld	a5,0(s0)
   26f30:	0107b783          	ld	a5,16(a5)
   26f34:	00040513          	addi	a0,s0,0
   26f38:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   26f3c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   26f40:	0001c797          	auipc	a5,0x1c
   26f44:	5587b783          	ld	a5,1368(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   26f48:	0007c783          	lbu	a5,0(a5)
   26f4c:	02078863          	beq	a5,zero,26f7c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x22a4>
    _Atomic_word __result = *__mem;
   26f50:	03442783          	lw	a5,52(s0)
    *__mem += __val;
   26f54:	fff7871b          	addiw	a4,a5,-1
   26f58:	02e42a23          	sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   26f5c:	00100713          	addi	a4,zero,1
   26f60:	00e78463          	beq	a5,a4,26f68 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2290>
   26f64:	8acfe06f          	jal	zero,25010 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x338>
	    _M_destroy();
   26f68:	00043783          	ld	a5,0(s0)
   26f6c:	0187b783          	ld	a5,24(a5)
   26f70:	00040513          	addi	a0,s0,0
   26f74:	000780e7          	jalr	ra,0(a5)
   26f78:	898fe06f          	jal	zero,25010 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x338>
      return __exchange_and_add(__mem, __val);
   26f7c:	fff00593          	addi	a1,zero,-1
   26f80:	03440513          	addi	a0,s0,52
   26f84:	e6cef0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26f88:	00050793          	addi	a5,a0,0
   26f8c:	fd1ff06f          	jal	zero,26f5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2284>
   26f90:	fff00593          	addi	a1,zero,-1
   26f94:	03048513          	addi	a0,s1,48
   26f98:	e58ef0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26f9c:	894fe06f          	jal	zero,25030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x358>
	_M_dispose();
   26fa0:	0004b783          	ld	a5,0(s1)
   26fa4:	0107b783          	ld	a5,16(a5)
   26fa8:	00048513          	addi	a0,s1,0
   26fac:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   26fb0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   26fb4:	0001c797          	auipc	a5,0x1c
   26fb8:	4e47b783          	ld	a5,1252(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   26fbc:	0007c783          	lbu	a5,0(a5)
   26fc0:	02078863          	beq	a5,zero,26ff0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2318>
    _Atomic_word __result = *__mem;
   26fc4:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   26fc8:	fff7871b          	addiw	a4,a5,-1
   26fcc:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   26fd0:	00100713          	addi	a4,zero,1
   26fd4:	00e78463          	beq	a5,a4,26fdc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2304>
   26fd8:	864fe06f          	jal	zero,2503c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x364>
	    _M_destroy();
   26fdc:	0004b783          	ld	a5,0(s1)
   26fe0:	0187b783          	ld	a5,24(a5)
   26fe4:	00048513          	addi	a0,s1,0
   26fe8:	000780e7          	jalr	ra,0(a5)
   26fec:	850fe06f          	jal	zero,2503c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x364>
      return __exchange_and_add(__mem, __val);
   26ff0:	fff00593          	addi	a1,zero,-1
   26ff4:	03448513          	addi	a0,s1,52
   26ff8:	df8ef0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26ffc:	00050793          	addi	a5,a0,0
   27000:	fd1ff06f          	jal	zero,26fd0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x22f8>
   27004:	fff00593          	addi	a1,zero,-1
   27008:	030b8513          	addi	a0,s7,48
   2700c:	de4ef0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   27010:	850fe06f          	jal	zero,25060 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x388>
	_M_dispose();
   27014:	000bb783          	ld	a5,0(s7)
   27018:	0107b783          	ld	a5,16(a5)
   2701c:	000b8513          	addi	a0,s7,0
   27020:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   27024:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   27028:	0001c797          	auipc	a5,0x1c
   2702c:	4707b783          	ld	a5,1136(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   27030:	0007c783          	lbu	a5,0(a5)
   27034:	02078863          	beq	a5,zero,27064 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x238c>
    _Atomic_word __result = *__mem;
   27038:	034ba783          	lw	a5,52(s7)
    *__mem += __val;
   2703c:	fff7871b          	addiw	a4,a5,-1
   27040:	02ebaa23          	sw	a4,52(s7)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   27044:	00100713          	addi	a4,zero,1
   27048:	00e78463          	beq	a5,a4,27050 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2378>
   2704c:	820fe06f          	jal	zero,2506c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x394>
	    _M_destroy();
   27050:	000bb783          	ld	a5,0(s7)
   27054:	0187b783          	ld	a5,24(a5)
   27058:	000b8513          	addi	a0,s7,0
   2705c:	000780e7          	jalr	ra,0(a5)
   27060:	80cfe06f          	jal	zero,2506c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x394>
      return __exchange_and_add(__mem, __val);
   27064:	fff00593          	addi	a1,zero,-1
   27068:	034b8513          	addi	a0,s7,52
   2706c:	d84ef0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   27070:	00050793          	addi	a5,a0,0
   27074:	fd1ff06f          	jal	zero,27044 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x236c>
      throw runtime_error("DW_OP_fbreg not implemented");
   27078:	00050413          	addi	s0,a0,0
   2707c:	00090513          	addi	a0,s2,0
   27080:	ed0ef0ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   27084:	05813503          	ld	a0,88(sp)
   27088:	00050863          	beq	a0,zero,27098 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23c0>
	  _M_pi->_M_release();
   2708c:	0001c317          	auipc	t1,0x1c
   27090:	35433303          	ld	t1,852(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   27094:	000300e7          	jalr	ra,0(t1)
   27098:	00048513          	addi	a0,s1,0
   2709c:	0001c317          	auipc	t1,0x1c
   270a0:	34433303          	ld	t1,836(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   270a4:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   270a8:	000b8a63          	beq	s7,zero,270bc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23e4>
	  _M_pi->_M_release();
   270ac:	000b8513          	addi	a0,s7,0
   270b0:	0001c317          	auipc	t1,0x1c
   270b4:	33033303          	ld	t1,816(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   270b8:	000300e7          	jalr	ra,0(t1)
    for (T *p = base; p < end; ++p)
   270bc:	0a813503          	ld	a0,168(sp)
   270c0:	00050793          	addi	a5,a0,0
   270c4:	0b013703          	ld	a4,176(sp)
   270c8:	18e7e663          	bltu	a5,a4,27254 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x257c>
    if ((char *)base != buf)
   270cc:	06810793          	addi	a5,sp,104
   270d0:	00f50663          	beq	a0,a5,270dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2404>
      delete[] (char *)base;
   270d4:	00050463          	beq	a0,zero,270dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2404>
   270d8:	f78ef0ef          	jal	ra,16850 <operator delete[](void*)@plt>
   270dc:	00040513          	addi	a0,s0,0
   270e0:	8b1ef0ef          	jal	ra,16990 <_Unwind_Resume@plt>
        throw expr_error("DW_OP_deref_size operand exceeds address size");
   270e4:	00050413          	addi	s0,a0,0
   270e8:	00090513          	addi	a0,s2,0
   270ec:	e64ef0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   270f0:	f95ff06f          	jal	zero,27084 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
        throw expr_error("DW_OP_xderef_size operand exceeds address size");
   270f4:	00050413          	addi	s0,a0,0
   270f8:	00090513          	addi	a0,s2,0
   270fc:	e54ef0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   27100:	f85ff06f          	jal	zero,27084 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      throw runtime_error("DW_OP_push_object_address not implemented");
   27104:	00050413          	addi	s0,a0,0
   27108:	00090513          	addi	a0,s2,0
   2710c:	e44ef0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   27110:	f75ff06f          	jal	zero,27084 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      throw runtime_error("DW_OP_call_frame_cfa not implemented");
   27114:	00050413          	addi	s0,a0,0
   27118:	00090513          	addi	a0,s2,0
   2711c:	e34ef0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   27120:	f65ff06f          	jal	zero,27084 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      { return _M_dataplus._M_p; }
   27124:	00050413          	addi	s0,a0,0
   27128:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   2712c:	04010793          	addi	a5,sp,64
   27130:	00f50463          	beq	a0,a5,27138 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2460>
   27134:	e6cef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   27138:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   2713c:	02010793          	addi	a5,sp,32
   27140:	00f50463          	beq	a0,a5,27148 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2470>
   27144:	e5cef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      throw runtime_error(to_string(op) + " not implemented");
   27148:	00098513          	addi	a0,s3,0
   2714c:	e04ef0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   27150:	f35ff06f          	jal	zero,27084 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      { return _M_dataplus._M_p; }
   27154:	00050413          	addi	s0,a0,0
   27158:	fe1ff06f          	jal	zero,27138 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2460>
   2715c:	00050413          	addi	s0,a0,0
   27160:	fe9ff06f          	jal	zero,27148 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2470>
   27164:	00050413          	addi	s0,a0,0
   27168:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   2716c:	04010793          	addi	a5,sp,64
   27170:	00f50463          	beq	a0,a5,27178 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24a0>
   27174:	e2cef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   27178:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   2717c:	02010793          	addi	a5,sp,32
   27180:	00f50463          	beq	a0,a5,27188 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24b0>
   27184:	e1cef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      throw runtime_error(to_string(op) + " not implemented");
   27188:	00098513          	addi	a0,s3,0
   2718c:	dc4ef0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   27190:	ef5ff06f          	jal	zero,27084 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      { return _M_dataplus._M_p; }
   27194:	00050413          	addi	s0,a0,0
   27198:	fe1ff06f          	jal	zero,27178 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24a0>
   2719c:	00050413          	addi	s0,a0,0
   271a0:	fe9ff06f          	jal	zero,27188 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24b0>
   271a4:	00050413          	addi	s0,a0,0
   271a8:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   271ac:	04010793          	addi	a5,sp,64
   271b0:	00f50463          	beq	a0,a5,271b8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24e0>
   271b4:	decef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   271b8:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   271bc:	02010793          	addi	a5,sp,32
   271c0:	00f50463          	beq	a0,a5,271c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24f0>
   271c4:	ddcef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      throw expr_error("unknown user op " + to_string(op));
   271c8:	00098513          	addi	a0,s3,0
   271cc:	d84ef0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   271d0:	eb5ff06f          	jal	zero,27084 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      { return _M_dataplus._M_p; }
   271d4:	00050413          	addi	s0,a0,0
   271d8:	fe1ff06f          	jal	zero,271b8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24e0>
   271dc:	00050413          	addi	s0,a0,0
   271e0:	fe9ff06f          	jal	zero,271c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24f0>
   271e4:	00050413          	addi	s0,a0,0
   271e8:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   271ec:	04010793          	addi	a5,sp,64
   271f0:	00f50463          	beq	a0,a5,271f8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2520>
   271f4:	dacef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   271f8:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   271fc:	02010793          	addi	a5,sp,32
   27200:	00f50463          	beq	a0,a5,27208 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2530>
   27204:	d9cef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      throw expr_error("bad operation " + to_string(op));
   27208:	00098513          	addi	a0,s3,0
   2720c:	d44ef0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   27210:	e75ff06f          	jal	zero,27084 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      { return _M_dataplus._M_p; }
   27214:	00050413          	addi	s0,a0,0
   27218:	fe1ff06f          	jal	zero,271f8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2520>
   2721c:	00050413          	addi	s0,a0,0
   27220:	fe9ff06f          	jal	zero,27208 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2530>
      throw expr_error("final stack is empty; no result given");
   27224:	00050413          	addi	s0,a0,0
   27228:	00090513          	addi	a0,s2,0
   2722c:	d24ef0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   27230:	e55ff06f          	jal	zero,27084 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
  throw expr_error("stack underflow evaluating DWARF expression");
   27234:	00050413          	addi	s0,a0,0
   27238:	00090513          	addi	a0,s2,0
   2723c:	d14ef0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   27240:	e45ff06f          	jal	zero,27084 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
	if (_M_pi != nullptr)
   27244:	00050413          	addi	s0,a0,0
   27248:	e61ff06f          	jal	zero,270a8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23d0>
    for (T *p = base; p < end; ++p)
   2724c:	00050413          	addi	s0,a0,0
   27250:	e6dff06f          	jal	zero,270bc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23e4>
   27254:	00878793          	addi	a5,a5,8
   27258:	e6dff06f          	jal	zero,270c4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ec>
        val |= ((uint64_t)p[i]) << (i * 8);
   2725c:	0007cc83          	lbu	s9,0(a5)
    pos += sizeof(T);
   27260:	00178793          	addi	a5,a5,1
   27264:	06f13023          	sd	a5,96(sp)
  size_type size() const { return end - base; }
   27268:	0a813703          	ld	a4,168(sp)
   2726c:	0b013783          	ld	a5,176(sp)
   27270:	40e787b3          	sub	a5,a5,a4
   27274:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   27278:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   2727c:	0b813903          	ld	s2,184(sp)
   27280:	40e90933          	sub	s2,s2,a4
   27284:	40395913          	srai	s2,s2,0x3
   27288:	00f96463          	bltu	s2,a5,27290 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x25b8>
   2728c:	a00fe06f          	jal	zero,2548c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7b4>
   27290:	00091463          	bne	s2,zero,27298 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x25c0>
   27294:	00100913          	addi	s2,zero,1
    while (target < n)
   27298:	00f97663          	bgeu	s2,a5,272a4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x25cc>
      target <<= 1;
   2729c:	00191913          	slli	s2,s2,0x1
    while (target < n)
   272a0:	fef96ee3          	bltu	s2,a5,2729c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x25c4>
    char *newbuf = new char[sizeof(T[target])];
   272a4:	00391913          	slli	s2,s2,0x3
   272a8:	00090513          	addi	a0,s2,0
   272ac:	ae4ef0ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   272b0:	984fe06f          	jal	zero,25434 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x75c>
        val |= ((uint64_t)p[i]) << (i * 8);
   272b4:	0007cc83          	lbu	s9,0(a5)
    pos += sizeof(T);
   272b8:	00178793          	addi	a5,a5,1
   272bc:	06f13023          	sd	a5,96(sp)
      stack.push_back(cur.fixed<int8_t>());
   272c0:	018c9c9b          	slliw	s9,s9,0x18
   272c4:	418cdc9b          	sraiw	s9,s9,0x18
  size_type size() const { return end - base; }
   272c8:	0a813703          	ld	a4,168(sp)
   272cc:	0b013783          	ld	a5,176(sp)
   272d0:	40e787b3          	sub	a5,a5,a4
   272d4:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   272d8:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   272dc:	0b813903          	ld	s2,184(sp)
   272e0:	40e90933          	sub	s2,s2,a4
   272e4:	40395913          	srai	s2,s2,0x3
   272e8:	00f96463          	bltu	s2,a5,272f0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2618>
   272ec:	ddcfe06f          	jal	zero,258c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xbf0>
   272f0:	00091463          	bne	s2,zero,272f8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2620>
   272f4:	00100913          	addi	s2,zero,1
    while (target < n)
   272f8:	00f97663          	bgeu	s2,a5,27304 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x262c>
      target <<= 1;
   272fc:	00191913          	slli	s2,s2,0x1
    while (target < n)
   27300:	fef96ee3          	bltu	s2,a5,272fc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2624>
    char *newbuf = new char[sizeof(T[target])];
   27304:	00391913          	slli	s2,s2,0x3
   27308:	00090513          	addi	a0,s2,0
   2730c:	a84ef0ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   27310:	d60fe06f          	jal	zero,25870 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb98>
        val |= ((uint64_t)p[i]) << (i * 8);
   27314:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   27318:	00178793          	addi	a5,a5,1
   2731c:	06f13023          	sd	a5,96(sp)
  size_type size() const { return end - base; }
   27320:	0b013703          	ld	a4,176(sp)
   27324:	0a813603          	ld	a2,168(sp)
   27328:	40c707b3          	sub	a5,a4,a2
   2732c:	4037d793          	srai	a5,a5,0x3
      CHECKN(tmp1.u);
   27330:	b4d7e4e3          	bltu	a5,a3,26e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
  reference revat(size_type n) { return *(end - 1 - n); }
   27334:	00369693          	slli	a3,a3,0x3
   27338:	40d70733          	sub	a4,a4,a3
   2733c:	ff870a13          	addi	s4,a4,-8
    reserve(size() + 1);
   27340:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   27344:	0b813903          	ld	s2,184(sp)
   27348:	40c90933          	sub	s2,s2,a2
   2734c:	40395913          	srai	s2,s2,0x3
   27350:	00f96463          	bltu	s2,a5,27358 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2680>
   27354:	e15fe06f          	jal	zero,26168 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1490>
   27358:	00091463          	bne	s2,zero,27360 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2688>
   2735c:	00100913          	addi	s2,zero,1
    while (target < n)
   27360:	00f97663          	bgeu	s2,a5,2736c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2694>
      target <<= 1;
   27364:	00191913          	slli	s2,s2,0x1
    while (target < n)
   27368:	fef96ee3          	bltu	s2,a5,27364 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x268c>
    char *newbuf = new char[sizeof(T[target])];
   2736c:	00391913          	slli	s2,s2,0x3
   27370:	00090513          	addi	a0,s2,0
   27374:	a1cef0ef          	jal	ra,16590 <operator new[](unsigned long)@plt>
   27378:	d99fe06f          	jal	zero,26110 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1438>
        val |= ((uint64_t)p[i]) << (i * 8);
   2737c:	0007c603          	lbu	a2,0(a5)
    pos += sizeof(T);
   27380:	00178793          	addi	a5,a5,1
   27384:	06f13023          	sd	a5,96(sp)
      if (tmp1.u > subsec->addr_size)
   27388:	0584e783          	lwu	a5,88(s1)
   2738c:	00c7e463          	bltu	a5,a2,27394 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x26bc>
   27390:	f2dfe06f          	jal	zero,262bc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x15e4>
        throw expr_error("DW_OP_deref_size operand exceeds address size");
   27394:	01000513          	addi	a0,zero,16
   27398:	af8ef0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2739c:	00050913          	addi	s2,a0,0
   273a0:	00011597          	auipc	a1,0x11
   273a4:	ee858593          	addi	a1,a1,-280 # 38288 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x2e0>
   273a8:	e68ef0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   273ac:	f65fe06f          	jal	zero,26310 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1638>
        val |= ((uint64_t)p[i]) << (i * 8);
   273b0:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   273b4:	00178793          	addi	a5,a5,1
   273b8:	06f13023          	sd	a5,96(sp)
      if (tmp1.u > subsec->addr_size)
   273bc:	0584e783          	lwu	a5,88(s1)
   273c0:	00d7e463          	bltu	a5,a3,273c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x26f0>
   273c4:	fa1fe06f          	jal	zero,26364 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x168c>
        throw expr_error("DW_OP_xderef_size operand exceeds address size");
   273c8:	01000513          	addi	a0,zero,16
   273cc:	ac4ef0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   273d0:	00050913          	addi	s2,a0,0
   273d4:	00011597          	auipc	a1,0x11
   273d8:	ee458593          	addi	a1,a1,-284 # 382b8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x310>
   273dc:	e34ef0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   273e0:	fe9fe06f          	jal	zero,263c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x16f0>
        val |= ((uint64_t)p[i]) << (i * 8);
   273e4:	00074783          	lbu	a5,0(a4)
    pos += sizeof(T);
   273e8:	00170713          	addi	a4,a4,1
   273ec:	06e13023          	sd	a4,96(sp)
    return (T)val;
   273f0:	0ff7f913          	andi	s2,a5,255
    switch (op) {
   273f4:	ffd7879b          	addiw	a5,a5,-3
   273f8:	0ff7f613          	andi	a2,a5,255
   273fc:	9ec9e6e3          	bltu	s3,a2,26de8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2110>
   27400:	00261793          	slli	a5,a2,0x2
   27404:	008787b3          	add	a5,a5,s0
   27408:	0007a783          	lw	a5,0(a5)
   2740c:	008787b3          	add	a5,a5,s0
   27410:	00078067          	jalr	zero,0(a5)

0000000000027414 <dwarf::expr::evaluate(dwarf::expr_context*) const>:
expr_result expr::evaluate(expr_context *ctx) const {
   27414:	fe010113          	addi	sp,sp,-32
   27418:	00113c23          	sd	ra,24(sp)
   2741c:	00813823          	sd	s0,16(sp)
   27420:	00050413          	addi	s0,a0,0
  return evaluate(ctx, {});
   27424:	00013023          	sd	zero,0(sp)
   27428:	00013423          	sd	zero,8(sp)
   2742c:	00010693          	addi	a3,sp,0
   27430:	8a9fd0ef          	jal	ra,24cd8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const>
}
   27434:	00040513          	addi	a0,s0,0
   27438:	01813083          	ld	ra,24(sp)
   2743c:	01013403          	ld	s0,16(sp)
   27440:	02010113          	addi	sp,sp,32
   27444:	00008067          	jalr	zero,0(ra)

0000000000027448 <dwarf::expr::evaluate(dwarf::expr_context*, unsigned long) const>:
expr_result expr::evaluate(expr_context *ctx, taddr argument) const {
   27448:	fd010113          	addi	sp,sp,-48
   2744c:	02113423          	sd	ra,40(sp)
   27450:	02813023          	sd	s0,32(sp)
   27454:	00050413          	addi	s0,a0,0
  return evaluate(ctx, {argument});
   27458:	00d13c23          	sd	a3,24(sp)
   2745c:	01810793          	addi	a5,sp,24
   27460:	00f13423          	sd	a5,8(sp)
   27464:	00100793          	addi	a5,zero,1
   27468:	00f13823          	sd	a5,16(sp)
   2746c:	00810693          	addi	a3,sp,8
   27470:	869fd0ef          	jal	ra,24cd8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const>
}
   27474:	00040513          	addi	a0,s0,0
   27478:	02813083          	ld	ra,40(sp)
   2747c:	02013403          	ld	s0,32(sp)
   27480:	03010113          	addi	sp,sp,48
   27484:	00008067          	jalr	zero,0(ra)

0000000000027488 <_GLOBAL__sub_I_expr.cc>:

DWARFPP_END_NAMESPACE
   27488:	ff010113          	addi	sp,sp,-16
   2748c:	00113423          	sd	ra,8(sp)
expr_context no_expr_context;
   27490:	e3018613          	addi	a2,gp,-464 # 43630 <__dso_handle>
   27494:	0001c597          	auipc	a1,0x1c
   27498:	eac5b583          	ld	a1,-340(a1) # 43340 <dwarf::no_expr_context@@Base+0x338>
   2749c:	0001c517          	auipc	a0,0x1c
   274a0:	e4c53503          	ld	a0,-436(a0) # 432e8 <dwarf::expr_context::~expr_context()@@Base+0x1be34>
   274a4:	d1cef0ef          	jal	ra,169c0 <__cxa_atexit@plt>
DWARFPP_END_NAMESPACE
   274a8:	00813083          	ld	ra,8(sp)
   274ac:	01010113          	addi	sp,sp,16
   274b0:	00008067          	jalr	zero,0(ra)

00000000000274b4 <dwarf::expr_context::~expr_context()>:
  virtual ~expr_context() {}
   274b4:	00008067          	jalr	zero,0(ra)

00000000000274b8 <dwarf::expr_error::~expr_error()>:
class expr_error : public std::runtime_error {
   274b8:	ff010113          	addi	sp,sp,-16
   274bc:	00113423          	sd	ra,8(sp)
   274c0:	0001c797          	auipc	a5,0x1c
   274c4:	ea87b783          	ld	a5,-344(a5) # 43368 <vtable for dwarf::expr_error@@Base+0x8e0>
   274c8:	01078793          	addi	a5,a5,16
   274cc:	00f53023          	sd	a5,0(a0)
   274d0:	b00ef0ef          	jal	ra,167d0 <std::runtime_error::~runtime_error()@plt>
   274d4:	00813083          	ld	ra,8(sp)
   274d8:	01010113          	addi	sp,sp,16
   274dc:	00008067          	jalr	zero,0(ra)

00000000000274e0 <dwarf::expr_error::~expr_error()>:
   274e0:	ff010113          	addi	sp,sp,-16
   274e4:	00113423          	sd	ra,8(sp)
   274e8:	00813023          	sd	s0,0(sp)
   274ec:	00050413          	addi	s0,a0,0
   274f0:	0001c797          	auipc	a5,0x1c
   274f4:	e787b783          	ld	a5,-392(a5) # 43368 <vtable for dwarf::expr_error@@Base+0x8e0>
   274f8:	01078793          	addi	a5,a5,16
   274fc:	00f53023          	sd	a5,0(a0)
   27500:	ad0ef0ef          	jal	ra,167d0 <std::runtime_error::~runtime_error()@plt>
   27504:	00040513          	addi	a0,s0,0
   27508:	a98ef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2750c:	00813083          	ld	ra,8(sp)
   27510:	00013403          	ld	s0,0(sp)
   27514:	01010113          	addi	sp,sp,16
   27518:	00008067          	jalr	zero,0(ra)

000000000002751c <dwarf::expr_context::~expr_context()>:
  virtual ~expr_context() {}
   2751c:	ff010113          	addi	sp,sp,-16
   27520:	00113423          	sd	ra,8(sp)
   27524:	a7cef0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   27528:	00813083          	ld	ra,8(sp)
   2752c:	01010113          	addi	sp,sp,16
   27530:	00008067          	jalr	zero,0(ra)

0000000000027534 <dwarf::expr_context::form_tls_address(unsigned long)>:
  virtual taddr form_tls_address(taddr address) {
   27534:	fe010113          	addi	sp,sp,-32
   27538:	00113c23          	sd	ra,24(sp)
   2753c:	00813823          	sd	s0,16(sp)
   27540:	00913423          	sd	s1,8(sp)
    throw expr_error("DW_OP_form_tls_address operations not supported");
   27544:	01000513          	addi	a0,zero,16
   27548:	948ef0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2754c:	00050413          	addi	s0,a0,0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   27550:	00011597          	auipc	a1,0x11
   27554:	c6058593          	addi	a1,a1,-928 # 381b0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x208>
   27558:	cb8ef0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   2755c:	0001c797          	auipc	a5,0x1c
   27560:	e0c7b783          	ld	a5,-500(a5) # 43368 <vtable for dwarf::expr_error@@Base+0x8e0>
   27564:	01078793          	addi	a5,a5,16
   27568:	00f43023          	sd	a5,0(s0)
    throw expr_error("DW_OP_form_tls_address operations not supported");
   2756c:	0001c617          	auipc	a2,0x1c
   27570:	f5463603          	ld	a2,-172(a2) # 434c0 <dwarf::expr_error::~expr_error()@@Base+0x1c008>
   27574:	0001c597          	auipc	a1,0x1c
   27578:	fc45b583          	ld	a1,-60(a1) # 43538 <typeinfo for dwarf::expr_error@@Base+0xad8>
   2757c:	00040513          	addi	a0,s0,0
   27580:	be0ef0ef          	jal	ra,16960 <__cxa_throw@plt>
   27584:	00050493          	addi	s1,a0,0
   27588:	00040513          	addi	a0,s0,0
   2758c:	9c4ef0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   27590:	00048513          	addi	a0,s1,0
   27594:	bfcef0ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000027598 <dwarf::expr_context::xderef_size(unsigned long, unsigned long, unsigned int)>:
  virtual taddr xderef_size(taddr address, taddr asid, unsigned size) {
   27598:	fe010113          	addi	sp,sp,-32
   2759c:	00113c23          	sd	ra,24(sp)
   275a0:	00813823          	sd	s0,16(sp)
   275a4:	00913423          	sd	s1,8(sp)
    throw expr_error("DW_OP_xderef_size operations not supported");
   275a8:	01000513          	addi	a0,zero,16
   275ac:	8e4ef0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   275b0:	00050413          	addi	s0,a0,0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   275b4:	00011597          	auipc	a1,0x11
   275b8:	c2c58593          	addi	a1,a1,-980 # 381e0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x238>
   275bc:	c54ef0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   275c0:	0001c797          	auipc	a5,0x1c
   275c4:	da87b783          	ld	a5,-600(a5) # 43368 <vtable for dwarf::expr_error@@Base+0x8e0>
   275c8:	01078793          	addi	a5,a5,16
   275cc:	00f43023          	sd	a5,0(s0)
    throw expr_error("DW_OP_xderef_size operations not supported");
   275d0:	0001c617          	auipc	a2,0x1c
   275d4:	ef063603          	ld	a2,-272(a2) # 434c0 <dwarf::expr_error::~expr_error()@@Base+0x1c008>
   275d8:	0001c597          	auipc	a1,0x1c
   275dc:	f605b583          	ld	a1,-160(a1) # 43538 <typeinfo for dwarf::expr_error@@Base+0xad8>
   275e0:	00040513          	addi	a0,s0,0
   275e4:	b7cef0ef          	jal	ra,16960 <__cxa_throw@plt>
   275e8:	00050493          	addi	s1,a0,0
   275ec:	00040513          	addi	a0,s0,0
   275f0:	960ef0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   275f4:	00048513          	addi	a0,s1,0
   275f8:	b98ef0ef          	jal	ra,16990 <_Unwind_Resume@plt>

00000000000275fc <dwarf::expr_context::deref_size(unsigned long, unsigned int)>:
  virtual taddr deref_size(taddr address, unsigned size) {
   275fc:	fe010113          	addi	sp,sp,-32
   27600:	00113c23          	sd	ra,24(sp)
   27604:	00813823          	sd	s0,16(sp)
   27608:	00913423          	sd	s1,8(sp)
    throw expr_error("DW_OP_deref_size operations not supported");
   2760c:	01000513          	addi	a0,zero,16
   27610:	880ef0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   27614:	00050413          	addi	s0,a0,0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   27618:	00011597          	auipc	a1,0x11
   2761c:	bf858593          	addi	a1,a1,-1032 # 38210 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x268>
   27620:	bf0ef0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   27624:	0001c797          	auipc	a5,0x1c
   27628:	d447b783          	ld	a5,-700(a5) # 43368 <vtable for dwarf::expr_error@@Base+0x8e0>
   2762c:	01078793          	addi	a5,a5,16
   27630:	00f43023          	sd	a5,0(s0)
    throw expr_error("DW_OP_deref_size operations not supported");
   27634:	0001c617          	auipc	a2,0x1c
   27638:	e8c63603          	ld	a2,-372(a2) # 434c0 <dwarf::expr_error::~expr_error()@@Base+0x1c008>
   2763c:	0001c597          	auipc	a1,0x1c
   27640:	efc5b583          	ld	a1,-260(a1) # 43538 <typeinfo for dwarf::expr_error@@Base+0xad8>
   27644:	00040513          	addi	a0,s0,0
   27648:	b18ef0ef          	jal	ra,16960 <__cxa_throw@plt>
   2764c:	00050493          	addi	s1,a0,0
   27650:	00040513          	addi	a0,s0,0
   27654:	8fcef0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   27658:	00048513          	addi	a0,s1,0
   2765c:	b34ef0ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000027660 <dwarf::expr_context::reg(unsigned int)>:
  virtual taddr reg(unsigned regnum) {
   27660:	fe010113          	addi	sp,sp,-32
   27664:	00113c23          	sd	ra,24(sp)
   27668:	00813823          	sd	s0,16(sp)
   2766c:	00913423          	sd	s1,8(sp)
    throw expr_error("DW_OP_breg* operations not supported");
   27670:	01000513          	addi	a0,zero,16
   27674:	81cef0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   27678:	00050413          	addi	s0,a0,0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   2767c:	00011597          	auipc	a1,0x11
   27680:	bc458593          	addi	a1,a1,-1084 # 38240 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x298>
   27684:	b8cef0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   27688:	0001c797          	auipc	a5,0x1c
   2768c:	ce07b783          	ld	a5,-800(a5) # 43368 <vtable for dwarf::expr_error@@Base+0x8e0>
   27690:	01078793          	addi	a5,a5,16
   27694:	00f43023          	sd	a5,0(s0)
    throw expr_error("DW_OP_breg* operations not supported");
   27698:	0001c617          	auipc	a2,0x1c
   2769c:	e2863603          	ld	a2,-472(a2) # 434c0 <dwarf::expr_error::~expr_error()@@Base+0x1c008>
   276a0:	0001c597          	auipc	a1,0x1c
   276a4:	e985b583          	ld	a1,-360(a1) # 43538 <typeinfo for dwarf::expr_error@@Base+0xad8>
   276a8:	00040513          	addi	a0,s0,0
   276ac:	ab4ef0ef          	jal	ra,16960 <__cxa_throw@plt>
   276b0:	00050493          	addi	s1,a0,0
   276b4:	00040513          	addi	a0,s0,0
   276b8:	898ef0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   276bc:	00048513          	addi	a0,s1,0
   276c0:	ad0ef0ef          	jal	ra,16990 <_Unwind_Resume@plt>

00000000000276c4 <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)>:

using namespace std;

DWARFPP_BEGIN_NAMESPACE

rangelist::rangelist(const std::shared_ptr<section> &sec, section_offset off,
   276c4:	fb010113          	addi	sp,sp,-80
   276c8:	04113423          	sd	ra,72(sp)
   276cc:	04813023          	sd	s0,64(sp)
   276d0:	02913c23          	sd	s1,56(sp)
   276d4:	03213823          	sd	s2,48(sp)
   276d8:	03313423          	sd	s3,40(sp)
   276dc:	03413023          	sd	s4,32(sp)
   276e0:	01513c23          	sd	s5,24(sp)
   276e4:	01613823          	sd	s6,16(sp)
   276e8:	00050413          	addi	s0,a0,0
   276ec:	00068993          	addi	s3,a3,0
   276f0:	00070a13          	addi	s4,a4,0
	: _M_start(), _M_finish(), _M_end_of_storage()
   276f4:	00053023          	sd	zero,0(a0)
   276f8:	00053423          	sd	zero,8(a0)
   276fc:	00053823          	sd	zero,16(a0)
      { return _M_ptr; }
   27700:	0005b903          	ld	s2,0(a1)
   27704:	fff00793          	addi	a5,zero,-1
   27708:	00f13023          	sd	a5,0(sp)
      fmt = this->fmt;
   2770c:	01892a83          	lw	s5,24(s2)
    if (addr_size == 0)
   27710:	00069463          	bne	a3,zero,27718 <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)+0x54>
      addr_size = this->addr_size;
   27714:	02092983          	lw	s3,32(s2)
        type, begin + start, std::min(len, (section_length)(end - begin)), ord,
   27718:	00893703          	ld	a4,8(s2)
   2771c:	00c704b3          	add	s1,a4,a2
   27720:	01093783          	ld	a5,16(s2)
   27724:	40e787b3          	sub	a5,a5,a4
   27728:	00f13423          	sd	a5,8(sp)
      if (__b < __a)
   2772c:	fff00713          	addi	a4,zero,-1
	return __b;
   27730:	00810b13          	addi	s6,sp,8
      if (__b < __a)
   27734:	00e79463          	bne	a5,a4,2773c <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)+0x78>
      return __a;
   27738:	00010b13          	addi	s6,sp,0
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   2773c:	00043c23          	sd	zero,24(s0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   27740:	06000513          	addi	a0,zero,96
   27744:	86cef0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   27748:	00052423          	sw	zero,8(a0)
   2774c:	00052623          	sw	zero,12(a0)
   27750:	00052823          	sw	zero,16(a0)
   27754:	00052a23          	sw	zero,20(a0)
   27758:	00052c23          	sw	zero,24(a0)
   2775c:	00052e23          	sw	zero,28(a0)
   27760:	02053023          	sd	zero,32(a0)
   27764:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   27768:	00100793          	addi	a5,zero,1
   2776c:	02f52823          	sw	a5,48(a0)
   27770:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   27774:	0001c797          	auipc	a5,0x1c
   27778:	e647b783          	ld	a5,-412(a5) # 435d8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   2777c:	01078793          	addi	a5,a5,16
   27780:	00f53023          	sd	a5,0(a0)
   27784:	00092683          	lw	a3,0(s2)
   27788:	000b3703          	ld	a4,0(s6)
   2778c:	01c92783          	lw	a5,28(s2)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   27790:	02d52c23          	sw	a3,56(a0)
   27794:	04953023          	sd	s1,64(a0)
   27798:	00e484b3          	add	s1,s1,a4
   2779c:	04953423          	sd	s1,72(a0)
   277a0:	05552823          	sw	s5,80(a0)
        ord(ord), addr_size(addr_size) {}
   277a4:	04f52a23          	sw	a5,84(a0)
   277a8:	05352c23          	sw	s3,88(a0)
	  _M_pi = __pi;
   277ac:	02a43023          	sd	a0,32(s0)
   277b0:	03850793          	addi	a5,a0,56
	  __p = __pi->_M_ptr();
   277b4:	00f43c23          	sd	a5,24(s0)
                     unsigned cu_addr_size, taddr cu_low_pc)
    : sec(sec->slice(off, ~0, format::unknown, cu_addr_size)),
      base_addr(cu_low_pc) {}
   277b8:	03443423          	sd	s4,40(s0)
   277bc:	04813083          	ld	ra,72(sp)
   277c0:	04013403          	ld	s0,64(sp)
   277c4:	03813483          	ld	s1,56(sp)
   277c8:	03013903          	ld	s2,48(sp)
   277cc:	02813983          	ld	s3,40(sp)
   277d0:	02013a03          	ld	s4,32(sp)
   277d4:	01813a83          	ld	s5,24(sp)
   277d8:	01013b03          	ld	s6,16(sp)
   277dc:	05010113          	addi	sp,sp,80
   277e0:	00008067          	jalr	zero,0(ra)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   277e4:	00050493          	addi	s1,a0,0
   277e8:	00043503          	ld	a0,0(s0)
	if (__p)
   277ec:	00050463          	beq	a0,zero,277f4 <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)+0x130>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   277f0:	fb1ee0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   277f4:	00048513          	addi	a0,s1,0
   277f8:	998ef0ef          	jal	ra,16990 <_Unwind_Resume@plt>

00000000000277fc <dwarf::rangelist::end() const>:
      : _M_ptr(0), _M_refcount()
   277fc:	00053023          	sd	zero,0(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   27800:	00053423          	sd	zero,8(a0)
  iterator() : sec(nullptr), base_addr(0), pos(0) {}
   27804:	00053823          	sd	zero,16(a0)
   27808:	00053c23          	sd	zero,24(a0)
  if (sec)
    return iterator(sec, base_addr);
  return end();
}

rangelist::iterator rangelist::end() const { return iterator(); }
   2780c:	00008067          	jalr	zero,0(ra)

0000000000027810 <dwarf::rangelist::iterator::operator++()>:
    : sec(sec), base_addr(base_addr), pos(0) {
  // Read in the first entry
  ++(*this);
}

rangelist::iterator &rangelist::iterator::operator++() {
   27810:	fb010113          	addi	sp,sp,-80
   27814:	04113423          	sd	ra,72(sp)
   27818:	04813023          	sd	s0,64(sp)
   2781c:	02913c23          	sd	s1,56(sp)
   27820:	03213823          	sd	s2,48(sp)
   27824:	03313423          	sd	s3,40(sp)
   27828:	03413023          	sd	s4,32(sp)
   2782c:	00050413          	addi	s0,a0,0
      { return _M_ptr; }
   27830:	00053483          	ld	s1,0(a0)
  // DWARF4 section 2.17.3
  taddr largest_offset = ~(taddr)0;
  if (sec->addr_size < sizeof(taddr))
   27834:	0204a783          	lw	a5,32(s1)
   27838:	00700713          	addi	a4,zero,7
  taddr largest_offset = ~(taddr)0;
   2783c:	fff00a13          	addi	s4,zero,-1
  if (sec->addr_size < sizeof(taddr))
   27840:	00f76a63          	bltu	a4,a5,27854 <dwarf::rangelist::iterator::operator++()+0x44>
    largest_offset += 1 << (8 * sec->addr_size);
   27844:	0037979b          	slliw	a5,a5,0x3
   27848:	00100a13          	addi	s4,zero,1
   2784c:	00fa1a3b          	sllw	s4,s4,a5
   27850:	fffa0a13          	addi	s4,s4,-1
      : _M_pi(__r._M_pi)
   27854:	00843903          	ld	s2,8(s0)
	if (_M_pi != nullptr)
   27858:	2c090e63          	beq	s2,zero,27b34 <dwarf::rangelist::iterator::operator++()+0x324>
    if (__is_single_threaded())
   2785c:	0001c797          	auipc	a5,0x1c
   27860:	c3c7b783          	ld	a5,-964(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   27864:	0007c783          	lbu	a5,0(a5)
   27868:	0a078a63          	beq	a5,zero,2791c <dwarf::rangelist::iterator::operator++()+0x10c>
  { *__mem += __val; }
   2786c:	03092783          	lw	a5,48(s2)
   27870:	0017879b          	addiw	a5,a5,1
   27874:	02f92823          	sw	a5,48(s2)

  // Read in entries until we reach a regular entry of an
  // end-of-list.  Note that pos points to the beginning of the
  // entry *following* the current entry, so that's where we
  // start.
  cursor cur(sec, pos);
   27878:	01843983          	ld	s3,24(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2787c:	00913423          	sd	s1,8(sp)
      : _M_pi(__r._M_pi)
   27880:	01213823          	sd	s2,16(sp)
    if (__is_single_threaded())
   27884:	0001c797          	auipc	a5,0x1c
   27888:	c147b783          	ld	a5,-1004(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2788c:	0007c783          	lbu	a5,0(a5)
   27890:	08078e63          	beq	a5,zero,2792c <dwarf::rangelist::iterator::operator++()+0x11c>
  { *__mem += __val; }
   27894:	03092783          	lw	a5,48(s2)
   27898:	0017879b          	addiw	a5,a5,1
   2789c:	02f92823          	sw	a5,48(s2)
      : sec(sec), pos(sec->begin + offset) {}
   278a0:	0084b783          	ld	a5,8(s1)
   278a4:	013787b3          	add	a5,a5,s3
   278a8:	00f13c23          	sd	a5,24(sp)
    if (__is_single_threaded())
   278ac:	0001c797          	auipc	a5,0x1c
   278b0:	bec7b783          	ld	a5,-1044(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   278b4:	0007c783          	lbu	a5,0(a5)
   278b8:	08078263          	beq	a5,zero,2793c <dwarf::rangelist::iterator::operator++()+0x12c>
    _Atomic_word __result = *__mem;
   278bc:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   278c0:	fff5079b          	addiw	a5,a0,-1
   278c4:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   278c8:	00100793          	addi	a5,zero,1
   278cc:	28f51063          	bne	a0,a5,27b4c <dwarf::rangelist::iterator::operator++()+0x33c>
	_M_dispose();
   278d0:	00093783          	ld	a5,0(s2)
   278d4:	0107b783          	ld	a5,16(a5)
   278d8:	00090513          	addi	a0,s2,0
   278dc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   278e0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   278e4:	0001c797          	auipc	a5,0x1c
   278e8:	bb47b783          	ld	a5,-1100(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   278ec:	0007c783          	lbu	a5,0(a5)
   278f0:	04078e63          	beq	a5,zero,2794c <dwarf::rangelist::iterator::operator++()+0x13c>
    _Atomic_word __result = *__mem;
   278f4:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   278f8:	fff5079b          	addiw	a5,a0,-1
   278fc:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   27900:	00100793          	addi	a5,zero,1
   27904:	24f51463          	bne	a0,a5,27b4c <dwarf::rangelist::iterator::operator++()+0x33c>
	    _M_destroy();
   27908:	00093783          	ld	a5,0(s2)
   2790c:	0187b783          	ld	a5,24(a5)
   27910:	00090513          	addi	a0,s2,0
   27914:	000780e7          	jalr	ra,0(a5)
   27918:	2340006f          	jal	zero,27b4c <dwarf::rangelist::iterator::operator++()+0x33c>
      __atomic_add(__mem, __val);
   2791c:	00100593          	addi	a1,zero,1
   27920:	03090513          	addi	a0,s2,48
   27924:	c8dee0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   27928:	f51ff06f          	jal	zero,27878 <dwarf::rangelist::iterator::operator++()+0x68>
   2792c:	00100593          	addi	a1,zero,1
   27930:	03090513          	addi	a0,s2,48
   27934:	c7dee0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   27938:	f69ff06f          	jal	zero,278a0 <dwarf::rangelist::iterator::operator++()+0x90>
      return __exchange_and_add(__mem, __val);
   2793c:	fff00593          	addi	a1,zero,-1
   27940:	03090513          	addi	a0,s2,48
   27944:	cadee0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   27948:	f81ff06f          	jal	zero,278c8 <dwarf::rangelist::iterator::operator++()+0xb8>
   2794c:	fff00593          	addi	a1,zero,-1
   27950:	03490513          	addi	a0,s2,52
   27954:	c9dee0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   27958:	fa9ff06f          	jal	zero,27900 <dwarf::rangelist::iterator::operator++()+0xf0>
  while (true) {
    entry.low = cur.address();
   2795c:	02a43023          	sd	a0,32(s0)
    entry.high = cur.address();
   27960:	00090513          	addi	a0,s2,0
   27964:	000980e7          	jalr	ra,0(s3)
   27968:	02a43423          	sd	a0,40(s0)

    if (entry.low == 0 && entry.high == 0) {
   2796c:	02043783          	ld	a5,32(s0)
   27970:	00a7e4b3          	or	s1,a5,a0
   27974:	0a049463          	bne	s1,zero,27a1c <dwarf::rangelist::iterator::operator++()+0x20c>
   27978:	00043023          	sd	zero,0(s0)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   2797c:	00843903          	ld	s2,8(s0)
	__r._M_pi = _M_pi;
   27980:	00043423          	sd	zero,8(s0)
	if (_M_pi != nullptr)
   27984:	0c090863          	beq	s2,zero,27a54 <dwarf::rangelist::iterator::operator++()+0x244>
    if (__is_single_threaded())
   27988:	0001c797          	auipc	a5,0x1c
   2798c:	b107b783          	ld	a5,-1264(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   27990:	0007c783          	lbu	a5,0(a5)
   27994:	06078263          	beq	a5,zero,279f8 <dwarf::rangelist::iterator::operator++()+0x1e8>
    _Atomic_word __result = *__mem;
   27998:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   2799c:	fff5079b          	addiw	a5,a0,-1
   279a0:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   279a4:	00100793          	addi	a5,zero,1
   279a8:	0af51663          	bne	a0,a5,27a54 <dwarf::rangelist::iterator::operator++()+0x244>
	_M_dispose();
   279ac:	00093783          	ld	a5,0(s2)
   279b0:	0107b783          	ld	a5,16(a5)
   279b4:	00090513          	addi	a0,s2,0
   279b8:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   279bc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   279c0:	0001c797          	auipc	a5,0x1c
   279c4:	ad87b783          	ld	a5,-1320(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   279c8:	0007c783          	lbu	a5,0(a5)
   279cc:	02078e63          	beq	a5,zero,27a08 <dwarf::rangelist::iterator::operator++()+0x1f8>
    _Atomic_word __result = *__mem;
   279d0:	03492783          	lw	a5,52(s2)
    *__mem += __val;
   279d4:	fff7871b          	addiw	a4,a5,-1
   279d8:	02e92a23          	sw	a4,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   279dc:	00100713          	addi	a4,zero,1
   279e0:	06e79a63          	bne	a5,a4,27a54 <dwarf::rangelist::iterator::operator++()+0x244>
	    _M_destroy();
   279e4:	00093783          	ld	a5,0(s2)
   279e8:	0187b783          	ld	a5,24(a5)
   279ec:	00090513          	addi	a0,s2,0
   279f0:	000780e7          	jalr	ra,0(a5)
      // End of list
      sec.reset();
      pos = 0;
      break;
   279f4:	0600006f          	jal	zero,27a54 <dwarf::rangelist::iterator::operator++()+0x244>
      return __exchange_and_add(__mem, __val);
   279f8:	fff00593          	addi	a1,zero,-1
   279fc:	03090513          	addi	a0,s2,48
   27a00:	bf1ee0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   27a04:	fa1ff06f          	jal	zero,279a4 <dwarf::rangelist::iterator::operator++()+0x194>
   27a08:	fff00593          	addi	a1,zero,-1
   27a0c:	03490513          	addi	a0,s2,52
   27a10:	be1ee0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   27a14:	00050793          	addi	a5,a0,0
   27a18:	fc5ff06f          	jal	zero,279dc <dwarf::rangelist::iterator::operator++()+0x1cc>
    } else if (entry.low == largest_offset) {
   27a1c:	01479a63          	bne	a5,s4,27a30 <dwarf::rangelist::iterator::operator++()+0x220>
      // Base address change
      base_addr = entry.high;
   27a20:	00a43823          	sd	a0,16(s0)
    entry.low = cur.address();
   27a24:	00090513          	addi	a0,s2,0
   27a28:	000980e7          	jalr	ra,0(s3)
   27a2c:	f31ff06f          	jal	zero,2795c <dwarf::rangelist::iterator::operator++()+0x14c>
    } else {
      // Regular entry.  Adjust by base address.
      entry.low += base_addr;
   27a30:	01043703          	ld	a4,16(s0)
   27a34:	00e787b3          	add	a5,a5,a4
   27a38:	02f43023          	sd	a5,32(s0)
      entry.high += base_addr;
   27a3c:	00a70733          	add	a4,a4,a0
   27a40:	02e43423          	sd	a4,40(s0)
  section_offset get_section_offset() const { return pos - sec->begin; }
   27a44:	00813783          	ld	a5,8(sp)
   27a48:	0087b783          	ld	a5,8(a5)
   27a4c:	01813483          	ld	s1,24(sp)
   27a50:	40f484b3          	sub	s1,s1,a5
      pos = 0;
   27a54:	00943c23          	sd	s1,24(s0)
	if (_M_pi != nullptr)
   27a58:	01013483          	ld	s1,16(sp)
   27a5c:	02048463          	beq	s1,zero,27a84 <dwarf::rangelist::iterator::operator++()+0x274>
    if (__is_single_threaded())
   27a60:	0001c797          	auipc	a5,0x1c
   27a64:	a387b783          	ld	a5,-1480(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   27a68:	0007c783          	lbu	a5,0(a5)
   27a6c:	02078e63          	beq	a5,zero,27aa8 <dwarf::rangelist::iterator::operator++()+0x298>
    _Atomic_word __result = *__mem;
   27a70:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   27a74:	fff5079b          	addiw	a5,a0,-1
   27a78:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   27a7c:	00100793          	addi	a5,zero,1
   27a80:	02f50c63          	beq	a0,a5,27ab8 <dwarf::rangelist::iterator::operator++()+0x2a8>
      break;
    }
  }

  return *this;
}
   27a84:	00040513          	addi	a0,s0,0
   27a88:	04813083          	ld	ra,72(sp)
   27a8c:	04013403          	ld	s0,64(sp)
   27a90:	03813483          	ld	s1,56(sp)
   27a94:	03013903          	ld	s2,48(sp)
   27a98:	02813983          	ld	s3,40(sp)
   27a9c:	02013a03          	ld	s4,32(sp)
   27aa0:	05010113          	addi	sp,sp,80
   27aa4:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   27aa8:	fff00593          	addi	a1,zero,-1
   27aac:	03048513          	addi	a0,s1,48
   27ab0:	b41ee0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   27ab4:	fc9ff06f          	jal	zero,27a7c <dwarf::rangelist::iterator::operator++()+0x26c>
	_M_dispose();
   27ab8:	0004b783          	ld	a5,0(s1)
   27abc:	0107b783          	ld	a5,16(a5)
   27ac0:	00048513          	addi	a0,s1,0
   27ac4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   27ac8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   27acc:	0001c797          	auipc	a5,0x1c
   27ad0:	9cc7b783          	ld	a5,-1588(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   27ad4:	0007c783          	lbu	a5,0(a5)
   27ad8:	02078663          	beq	a5,zero,27b04 <dwarf::rangelist::iterator::operator++()+0x2f4>
    _Atomic_word __result = *__mem;
   27adc:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   27ae0:	fff5079b          	addiw	a5,a0,-1
   27ae4:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   27ae8:	00100793          	addi	a5,zero,1
   27aec:	f8f51ce3          	bne	a0,a5,27a84 <dwarf::rangelist::iterator::operator++()+0x274>
	    _M_destroy();
   27af0:	0004b783          	ld	a5,0(s1)
   27af4:	0187b783          	ld	a5,24(a5)
   27af8:	00048513          	addi	a0,s1,0
   27afc:	000780e7          	jalr	ra,0(a5)
  return *this;
   27b00:	f85ff06f          	jal	zero,27a84 <dwarf::rangelist::iterator::operator++()+0x274>
      return __exchange_and_add(__mem, __val);
   27b04:	fff00593          	addi	a1,zero,-1
   27b08:	03448513          	addi	a0,s1,52
   27b0c:	ae5ee0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   27b10:	fd9ff06f          	jal	zero,27ae8 <dwarf::rangelist::iterator::operator++()+0x2d8>
	if (_M_pi != nullptr)
   27b14:	00050413          	addi	s0,a0,0
   27b18:	01013503          	ld	a0,16(sp)
   27b1c:	00050863          	beq	a0,zero,27b2c <dwarf::rangelist::iterator::operator++()+0x31c>
	  _M_pi->_M_release();
   27b20:	0001c317          	auipc	t1,0x1c
   27b24:	8c033303          	ld	t1,-1856(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   27b28:	000300e7          	jalr	ra,0(t1)
   27b2c:	00040513          	addi	a0,s0,0
   27b30:	e61ee0ef          	jal	ra,16990 <_Unwind_Resume@plt>
  cursor cur(sec, pos);
   27b34:	01843703          	ld	a4,24(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   27b38:	00913423          	sd	s1,8(sp)
      : _M_pi(__r._M_pi)
   27b3c:	00013823          	sd	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   27b40:	0084b783          	ld	a5,8(s1)
   27b44:	00e787b3          	add	a5,a5,a4
   27b48:	00f13c23          	sd	a5,24(sp)
    entry.low = cur.address();
   27b4c:	00810913          	addi	s2,sp,8
   27b50:	0001c997          	auipc	s3,0x1c
   27b54:	8409b983          	ld	s3,-1984(s3) # 43390 <dwarf::cursor::address()@@Base+0x1f5a4>
   27b58:	ecdff06f          	jal	zero,27a24 <dwarf::rangelist::iterator::operator++()+0x214>

0000000000027b5c <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)>:
rangelist::iterator::iterator(const std::shared_ptr<section> &sec,
   27b5c:	fe010113          	addi	sp,sp,-32
   27b60:	00113c23          	sd	ra,24(sp)
   27b64:	00813823          	sd	s0,16(sp)
   27b68:	00913423          	sd	s1,8(sp)
   27b6c:	00050413          	addi	s0,a0,0
   27b70:	00060493          	addi	s1,a2,0
      __shared_ptr(const __shared_ptr&) noexcept = default;
   27b74:	0005b783          	ld	a5,0(a1)
   27b78:	00f53023          	sd	a5,0(a0)
      : _M_pi(__r._M_pi)
   27b7c:	0085b503          	ld	a0,8(a1)
   27b80:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   27b84:	02050063          	beq	a0,zero,27ba4 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x48>
    if (__is_single_threaded())
   27b88:	0001c797          	auipc	a5,0x1c
   27b8c:	9107b783          	ld	a5,-1776(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   27b90:	0007c783          	lbu	a5,0(a5)
   27b94:	02078263          	beq	a5,zero,27bb8 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x5c>
  { *__mem += __val; }
   27b98:	03052783          	lw	a5,48(a0)
   27b9c:	0017879b          	addiw	a5,a5,1
   27ba0:	02f52823          	sw	a5,48(a0)
    : sec(sec), base_addr(base_addr), pos(0) {
   27ba4:	00943823          	sd	s1,16(s0)
   27ba8:	00043c23          	sd	zero,24(s0)
  ++(*this);
   27bac:	00040513          	addi	a0,s0,0
   27bb0:	c61ff0ef          	jal	ra,27810 <dwarf::rangelist::iterator::operator++()>
   27bb4:	0340006f          	jal	zero,27be8 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x8c>
      __atomic_add(__mem, __val);
   27bb8:	00100593          	addi	a1,zero,1
   27bbc:	03050513          	addi	a0,a0,48
   27bc0:	9f1ee0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   27bc4:	fe1ff06f          	jal	zero,27ba4 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x48>
	if (_M_pi != nullptr)
   27bc8:	00050493          	addi	s1,a0,0
   27bcc:	00843503          	ld	a0,8(s0)
   27bd0:	00050863          	beq	a0,zero,27be0 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x84>
	  _M_pi->_M_release();
   27bd4:	0001c317          	auipc	t1,0x1c
   27bd8:	80c33303          	ld	t1,-2036(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   27bdc:	000300e7          	jalr	ra,0(t1)
   27be0:	00048513          	addi	a0,s1,0
   27be4:	dadee0ef          	jal	ra,16990 <_Unwind_Resume@plt>
}
   27be8:	01813083          	ld	ra,24(sp)
   27bec:	01013403          	ld	s0,16(sp)
   27bf0:	00813483          	ld	s1,8(sp)
   27bf4:	02010113          	addi	sp,sp,32
   27bf8:	00008067          	jalr	zero,0(ra)

0000000000027bfc <dwarf::rangelist::begin() const>:
rangelist::iterator rangelist::begin() const {
   27bfc:	ff010113          	addi	sp,sp,-16
   27c00:	00113423          	sd	ra,8(sp)
   27c04:	00813023          	sd	s0,0(sp)
   27c08:	00050413          	addi	s0,a0,0
  if (sec)
   27c0c:	0185b783          	ld	a5,24(a1)
   27c10:	02078263          	beq	a5,zero,27c34 <dwarf::rangelist::begin() const+0x38>
    return iterator(sec, base_addr);
   27c14:	0285b603          	ld	a2,40(a1)
   27c18:	01858593          	addi	a1,a1,24
   27c1c:	f41ff0ef          	jal	ra,27b5c <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)>
}
   27c20:	00040513          	addi	a0,s0,0
   27c24:	00813083          	ld	ra,8(sp)
   27c28:	00013403          	ld	s0,0(sp)
   27c2c:	01010113          	addi	sp,sp,16
   27c30:	00008067          	jalr	zero,0(ra)
  return end();
   27c34:	bc9ff0ef          	jal	ra,277fc <dwarf::rangelist::end() const>
   27c38:	fe9ff06f          	jal	zero,27c20 <dwarf::rangelist::begin() const+0x24>

0000000000027c3c <dwarf::rangelist::contains(unsigned long) const>:
bool rangelist::contains(taddr addr) const {
   27c3c:	f8010113          	addi	sp,sp,-128
   27c40:	06113c23          	sd	ra,120(sp)
   27c44:	06813823          	sd	s0,112(sp)
   27c48:	06913423          	sd	s1,104(sp)
   27c4c:	00050493          	addi	s1,a0,0
   27c50:	00058413          	addi	s0,a1,0
  for (auto ent : *this)
   27c54:	00050593          	addi	a1,a0,0
   27c58:	00010513          	addi	a0,sp,0
   27c5c:	fa1ff0ef          	jal	ra,27bfc <dwarf::rangelist::begin() const>
   27c60:	00048593          	addi	a1,s1,0
   27c64:	03010513          	addi	a0,sp,48
   27c68:	b95ff0ef          	jal	ra,277fc <dwarf::rangelist::end() const>
   27c6c:	00010493          	addi	s1,sp,0
    return sec == o.sec && pos == o.pos;
   27c70:	00013703          	ld	a4,0(sp)
   27c74:	03013783          	ld	a5,48(sp)
   27c78:	16f70463          	beq	a4,a5,27de0 <dwarf::rangelist::contains(unsigned long) const+0x1a4>
   27c7c:	02813703          	ld	a4,40(sp)
  bool contains(taddr addr) const { return low <= addr && addr < high; }
   27c80:	02013783          	ld	a5,32(sp)
   27c84:	00f47863          	bgeu	s0,a5,27c94 <dwarf::rangelist::contains(unsigned long) const+0x58>
   27c88:	00048513          	addi	a0,s1,0
   27c8c:	b85ff0ef          	jal	ra,27810 <dwarf::rangelist::iterator::operator++()>
   27c90:	fe1ff06f          	jal	zero,27c70 <dwarf::rangelist::contains(unsigned long) const+0x34>
   27c94:	fee47ae3          	bgeu	s0,a4,27c88 <dwarf::rangelist::contains(unsigned long) const+0x4c>
	if (_M_pi != nullptr)
   27c98:	03813403          	ld	s0,56(sp)
   27c9c:	02040463          	beq	s0,zero,27cc4 <dwarf::rangelist::contains(unsigned long) const+0x88>
    if (__is_single_threaded())
   27ca0:	0001b797          	auipc	a5,0x1b
   27ca4:	7f87b783          	ld	a5,2040(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   27ca8:	0007c783          	lbu	a5,0(a5)
   27cac:	04078e63          	beq	a5,zero,27d08 <dwarf::rangelist::contains(unsigned long) const+0xcc>
    _Atomic_word __result = *__mem;
   27cb0:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   27cb4:	fff5079b          	addiw	a5,a0,-1
   27cb8:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   27cbc:	00100793          	addi	a5,zero,1
   27cc0:	04f50c63          	beq	a0,a5,27d18 <dwarf::rangelist::contains(unsigned long) const+0xdc>
	if (_M_pi != nullptr)
   27cc4:	00813403          	ld	s0,8(sp)
   27cc8:	02040463          	beq	s0,zero,27cf0 <dwarf::rangelist::contains(unsigned long) const+0xb4>
    if (__is_single_threaded())
   27ccc:	0001b797          	auipc	a5,0x1b
   27cd0:	7cc7b783          	ld	a5,1996(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   27cd4:	0007c783          	lbu	a5,0(a5)
   27cd8:	08078e63          	beq	a5,zero,27d74 <dwarf::rangelist::contains(unsigned long) const+0x138>
    _Atomic_word __result = *__mem;
   27cdc:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   27ce0:	fff5079b          	addiw	a5,a0,-1
   27ce4:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   27ce8:	00100793          	addi	a5,zero,1
   27cec:	08f50c63          	beq	a0,a5,27d84 <dwarf::rangelist::contains(unsigned long) const+0x148>
      return true;
   27cf0:	00100513          	addi	a0,zero,1
}
   27cf4:	07813083          	ld	ra,120(sp)
   27cf8:	07013403          	ld	s0,112(sp)
   27cfc:	06813483          	ld	s1,104(sp)
   27d00:	08010113          	addi	sp,sp,128
   27d04:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   27d08:	fff00593          	addi	a1,zero,-1
   27d0c:	03040513          	addi	a0,s0,48
   27d10:	8e1ee0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   27d14:	fa9ff06f          	jal	zero,27cbc <dwarf::rangelist::contains(unsigned long) const+0x80>
	_M_dispose();
   27d18:	00043783          	ld	a5,0(s0)
   27d1c:	0107b783          	ld	a5,16(a5)
   27d20:	00040513          	addi	a0,s0,0
   27d24:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   27d28:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   27d2c:	0001b797          	auipc	a5,0x1b
   27d30:	76c7b783          	ld	a5,1900(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   27d34:	0007c783          	lbu	a5,0(a5)
   27d38:	02078663          	beq	a5,zero,27d64 <dwarf::rangelist::contains(unsigned long) const+0x128>
    _Atomic_word __result = *__mem;
   27d3c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   27d40:	fff5079b          	addiw	a5,a0,-1
   27d44:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   27d48:	00100793          	addi	a5,zero,1
   27d4c:	f6f51ce3          	bne	a0,a5,27cc4 <dwarf::rangelist::contains(unsigned long) const+0x88>
	    _M_destroy();
   27d50:	00043783          	ld	a5,0(s0)
   27d54:	0187b783          	ld	a5,24(a5)
   27d58:	00040513          	addi	a0,s0,0
   27d5c:	000780e7          	jalr	ra,0(a5)
   27d60:	f65ff06f          	jal	zero,27cc4 <dwarf::rangelist::contains(unsigned long) const+0x88>
      return __exchange_and_add(__mem, __val);
   27d64:	fff00593          	addi	a1,zero,-1
   27d68:	03440513          	addi	a0,s0,52
   27d6c:	885ee0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   27d70:	fd9ff06f          	jal	zero,27d48 <dwarf::rangelist::contains(unsigned long) const+0x10c>
   27d74:	fff00593          	addi	a1,zero,-1
   27d78:	03040513          	addi	a0,s0,48
   27d7c:	875ee0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   27d80:	f69ff06f          	jal	zero,27ce8 <dwarf::rangelist::contains(unsigned long) const+0xac>
	_M_dispose();
   27d84:	00043783          	ld	a5,0(s0)
   27d88:	0107b783          	ld	a5,16(a5)
   27d8c:	00040513          	addi	a0,s0,0
   27d90:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   27d94:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   27d98:	0001b797          	auipc	a5,0x1b
   27d9c:	7007b783          	ld	a5,1792(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   27da0:	0007c783          	lbu	a5,0(a5)
   27da4:	02078663          	beq	a5,zero,27dd0 <dwarf::rangelist::contains(unsigned long) const+0x194>
    _Atomic_word __result = *__mem;
   27da8:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   27dac:	fff5079b          	addiw	a5,a0,-1
   27db0:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   27db4:	00100793          	addi	a5,zero,1
   27db8:	f2f51ce3          	bne	a0,a5,27cf0 <dwarf::rangelist::contains(unsigned long) const+0xb4>
	    _M_destroy();
   27dbc:	00043783          	ld	a5,0(s0)
   27dc0:	0187b783          	ld	a5,24(a5)
   27dc4:	00040513          	addi	a0,s0,0
   27dc8:	000780e7          	jalr	ra,0(a5)
   27dcc:	f25ff06f          	jal	zero,27cf0 <dwarf::rangelist::contains(unsigned long) const+0xb4>
      return __exchange_and_add(__mem, __val);
   27dd0:	fff00593          	addi	a1,zero,-1
   27dd4:	03440513          	addi	a0,s0,52
   27dd8:	819ee0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   27ddc:	fd9ff06f          	jal	zero,27db4 <dwarf::rangelist::contains(unsigned long) const+0x178>
    return sec == o.sec && pos == o.pos;
   27de0:	01813703          	ld	a4,24(sp)
   27de4:	04813783          	ld	a5,72(sp)
   27de8:	e8f71ae3          	bne	a4,a5,27c7c <dwarf::rangelist::contains(unsigned long) const+0x40>
	if (_M_pi != nullptr)
   27dec:	03813403          	ld	s0,56(sp)
   27df0:	02040463          	beq	s0,zero,27e18 <dwarf::rangelist::contains(unsigned long) const+0x1dc>
    if (__is_single_threaded())
   27df4:	0001b797          	auipc	a5,0x1b
   27df8:	6a47b783          	ld	a5,1700(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   27dfc:	0007c783          	lbu	a5,0(a5)
   27e00:	04078663          	beq	a5,zero,27e4c <dwarf::rangelist::contains(unsigned long) const+0x210>
    _Atomic_word __result = *__mem;
   27e04:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   27e08:	fff5079b          	addiw	a5,a0,-1
   27e0c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   27e10:	00100793          	addi	a5,zero,1
   27e14:	04f50463          	beq	a0,a5,27e5c <dwarf::rangelist::contains(unsigned long) const+0x220>
	if (_M_pi != nullptr)
   27e18:	00813403          	ld	s0,8(sp)
   27e1c:	02040463          	beq	s0,zero,27e44 <dwarf::rangelist::contains(unsigned long) const+0x208>
    if (__is_single_threaded())
   27e20:	0001b797          	auipc	a5,0x1b
   27e24:	6787b783          	ld	a5,1656(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   27e28:	0007c783          	lbu	a5,0(a5)
   27e2c:	08078663          	beq	a5,zero,27eb8 <dwarf::rangelist::contains(unsigned long) const+0x27c>
    _Atomic_word __result = *__mem;
   27e30:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   27e34:	fff5079b          	addiw	a5,a0,-1
   27e38:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   27e3c:	00100793          	addi	a5,zero,1
   27e40:	08f50463          	beq	a0,a5,27ec8 <dwarf::rangelist::contains(unsigned long) const+0x28c>
  return false;
   27e44:	00000513          	addi	a0,zero,0
   27e48:	eadff06f          	jal	zero,27cf4 <dwarf::rangelist::contains(unsigned long) const+0xb8>
      return __exchange_and_add(__mem, __val);
   27e4c:	fff00593          	addi	a1,zero,-1
   27e50:	03040513          	addi	a0,s0,48
   27e54:	f9cee0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   27e58:	fb9ff06f          	jal	zero,27e10 <dwarf::rangelist::contains(unsigned long) const+0x1d4>
	_M_dispose();
   27e5c:	00043783          	ld	a5,0(s0)
   27e60:	0107b783          	ld	a5,16(a5)
   27e64:	00040513          	addi	a0,s0,0
   27e68:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   27e6c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   27e70:	0001b797          	auipc	a5,0x1b
   27e74:	6287b783          	ld	a5,1576(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   27e78:	0007c783          	lbu	a5,0(a5)
   27e7c:	02078663          	beq	a5,zero,27ea8 <dwarf::rangelist::contains(unsigned long) const+0x26c>
    _Atomic_word __result = *__mem;
   27e80:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   27e84:	fff5079b          	addiw	a5,a0,-1
   27e88:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   27e8c:	00100793          	addi	a5,zero,1
   27e90:	f8f514e3          	bne	a0,a5,27e18 <dwarf::rangelist::contains(unsigned long) const+0x1dc>
	    _M_destroy();
   27e94:	00043783          	ld	a5,0(s0)
   27e98:	0187b783          	ld	a5,24(a5)
   27e9c:	00040513          	addi	a0,s0,0
   27ea0:	000780e7          	jalr	ra,0(a5)
   27ea4:	f75ff06f          	jal	zero,27e18 <dwarf::rangelist::contains(unsigned long) const+0x1dc>
      return __exchange_and_add(__mem, __val);
   27ea8:	fff00593          	addi	a1,zero,-1
   27eac:	03440513          	addi	a0,s0,52
   27eb0:	f40ee0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   27eb4:	fd9ff06f          	jal	zero,27e8c <dwarf::rangelist::contains(unsigned long) const+0x250>
   27eb8:	fff00593          	addi	a1,zero,-1
   27ebc:	03040513          	addi	a0,s0,48
   27ec0:	f30ee0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   27ec4:	f79ff06f          	jal	zero,27e3c <dwarf::rangelist::contains(unsigned long) const+0x200>
	_M_dispose();
   27ec8:	00043783          	ld	a5,0(s0)
   27ecc:	0107b783          	ld	a5,16(a5)
   27ed0:	00040513          	addi	a0,s0,0
   27ed4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   27ed8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   27edc:	0001b797          	auipc	a5,0x1b
   27ee0:	5bc7b783          	ld	a5,1468(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   27ee4:	0007c783          	lbu	a5,0(a5)
   27ee8:	02078663          	beq	a5,zero,27f14 <dwarf::rangelist::contains(unsigned long) const+0x2d8>
    _Atomic_word __result = *__mem;
   27eec:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   27ef0:	fff5079b          	addiw	a5,a0,-1
   27ef4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   27ef8:	00100793          	addi	a5,zero,1
   27efc:	f4f514e3          	bne	a0,a5,27e44 <dwarf::rangelist::contains(unsigned long) const+0x208>
	    _M_destroy();
   27f00:	00043783          	ld	a5,0(s0)
   27f04:	0187b783          	ld	a5,24(a5)
   27f08:	00040513          	addi	a0,s0,0
   27f0c:	000780e7          	jalr	ra,0(a5)
   27f10:	f35ff06f          	jal	zero,27e44 <dwarf::rangelist::contains(unsigned long) const+0x208>
      return __exchange_and_add(__mem, __val);
   27f14:	fff00593          	addi	a1,zero,-1
   27f18:	03440513          	addi	a0,s0,52
   27f1c:	ed4ee0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   27f20:	fd9ff06f          	jal	zero,27ef8 <dwarf::rangelist::contains(unsigned long) const+0x2bc>
	if (_M_pi != nullptr)
   27f24:	00050413          	addi	s0,a0,0
   27f28:	03813503          	ld	a0,56(sp)
   27f2c:	00050863          	beq	a0,zero,27f3c <dwarf::rangelist::contains(unsigned long) const+0x300>
	  _M_pi->_M_release();
   27f30:	0001b317          	auipc	t1,0x1b
   27f34:	4b033303          	ld	t1,1200(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   27f38:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   27f3c:	00813503          	ld	a0,8(sp)
   27f40:	00050863          	beq	a0,zero,27f50 <dwarf::rangelist::contains(unsigned long) const+0x314>
	  _M_pi->_M_release();
   27f44:	0001b317          	auipc	t1,0x1b
   27f48:	49c33303          	ld	t1,1180(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   27f4c:	000300e7          	jalr	ra,0(t1)
   27f50:	00040513          	addi	a0,s0,0
   27f54:	a3dee0ef          	jal	ra,16990 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   27f58:	00050413          	addi	s0,a0,0
   27f5c:	fe1ff06f          	jal	zero,27f3c <dwarf::rangelist::contains(unsigned long) const+0x300>

0000000000027f60 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)>:
rangelist::rangelist(const initializer_list<pair<taddr, taddr>> &ranges) {
   27f60:	fc010113          	addi	sp,sp,-64
   27f64:	02113c23          	sd	ra,56(sp)
   27f68:	02813823          	sd	s0,48(sp)
   27f6c:	02913423          	sd	s1,40(sp)
   27f70:	03213023          	sd	s2,32(sp)
   27f74:	01313c23          	sd	s3,24(sp)
   27f78:	01413823          	sd	s4,16(sp)
   27f7c:	00050413          	addi	s0,a0,0
	: _M_start(), _M_finish(), _M_end_of_storage()
   27f80:	00053023          	sd	zero,0(a0)
   27f84:	00053423          	sd	zero,8(a0)
   27f88:	00053823          	sd	zero,16(a0)
      : _M_ptr(0), _M_refcount()
   27f8c:	00053c23          	sd	zero,24(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   27f90:	02053023          	sd	zero,32(a0)
  synthetic.reserve(ranges.size() * 2 + 2);
   27f94:	0085b783          	ld	a5,8(a1)
   27f98:	00178793          	addi	a5,a5,1
   27f9c:	00179693          	slli	a3,a5,0x1
      if (__n > this->max_size())
   27fa0:	fff00713          	addi	a4,zero,-1
   27fa4:	00475713          	srli	a4,a4,0x4
   27fa8:	00d76e63          	bltu	a4,a3,27fc4 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x64>
   27fac:	00058913          	addi	s2,a1,0
      if (this->capacity() < __n)
   27fb0:	08068463          	beq	a3,zero,28038 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xd8>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   27fb4:	00479493          	slli	s1,a5,0x4
   27fb8:	00048513          	addi	a0,s1,0
   27fbc:	ff4ee0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   27fc0:	03c0006f          	jal	zero,27ffc <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x9c>
	__throw_length_error(__N("vector::reserve"));
   27fc4:	00011517          	auipc	a0,0x11
   27fc8:	83c50513          	addi	a0,a0,-1988 # 38800 <typeinfo name for dwarf::expr_context+0x18>
   27fcc:	ed4ee0ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	if (_M_pi != nullptr)
   27fd0:	00050493          	addi	s1,a0,0
   27fd4:	02043503          	ld	a0,32(s0)
   27fd8:	00050863          	beq	a0,zero,27fe8 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x88>
	  _M_pi->_M_release();
   27fdc:	0001b317          	auipc	t1,0x1b
   27fe0:	40433303          	ld	t1,1028(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   27fe4:	000300e7          	jalr	ra,0(t1)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   27fe8:	00043503          	ld	a0,0(s0)
	if (__p)
   27fec:	00050463          	beq	a0,zero,27ff4 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x94>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   27ff0:	fb0ee0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   27ff4:	00048513          	addi	a0,s1,0
   27ff8:	999ee0ef          	jal	ra,16990 <_Unwind_Resume@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   27ffc:	00050993          	addi	s3,a0,0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   28000:	00043a03          	ld	s4,0(s0)
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result,
		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
   28004:	00843603          	ld	a2,8(s0)
   28008:	41460633          	sub	a2,a2,s4
      if (__count > 0)
   2800c:	00c04663          	blt	zero,a2,28018 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xb8>
   28010:	000a0c63          	beq	s4,zero,28028 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xc8>
   28014:	00c0006f          	jal	zero,28020 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xc0>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   28018:	000a0593          	addi	a1,s4,0
   2801c:	a05ee0ef          	jal	ra,16a20 <memmove@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   28020:	000a0513          	addi	a0,s4,0
   28024:	f7cee0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	  this->_M_impl._M_start = __tmp;
   28028:	01343023          	sd	s3,0(s0)
	  this->_M_impl._M_finish = __tmp + __old_size;
   2802c:	01343423          	sd	s3,8(s0)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   28030:	009989b3          	add	s3,s3,s1
   28034:	01343823          	sd	s3,16(s0)
      begin() const noexcept { return _M_array; }
   28038:	00093483          	ld	s1,0(s2)
      end() const noexcept { return begin() + size(); }
   2803c:	00893903          	ld	s2,8(s2)
   28040:	00491913          	slli	s2,s2,0x4
   28044:	01248933          	add	s2,s1,s2
  for (auto &range : ranges) {
   28048:	07248863          	beq	s1,s2,280b8 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x158>
	  _M_realloc_insert(end(), __x);
   2804c:	0001b997          	auipc	s3,0x1b
   28050:	4e49b983          	ld	s3,1252(s3) # 43530 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)@@Base+0x1b314>
   28054:	0280006f          	jal	zero,2807c <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x11c>
   28058:	00048613          	addi	a2,s1,0
   2805c:	00040513          	addi	a0,s0,0
   28060:	000980e7          	jalr	ra,0(s3)
   28064:	0340006f          	jal	zero,28098 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x138>
   28068:	00848613          	addi	a2,s1,8
   2806c:	00040513          	addi	a0,s0,0
   28070:	000980e7          	jalr	ra,0(s3)
   28074:	01048493          	addi	s1,s1,16
   28078:	04990063          	beq	s2,s1,280b8 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x158>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   2807c:	00843583          	ld	a1,8(s0)
   28080:	01043783          	ld	a5,16(s0)
   28084:	fcf58ae3          	beq	a1,a5,28058 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xf8>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   28088:	0004b783          	ld	a5,0(s1)
   2808c:	00f5b023          	sd	a5,0(a1)
	    ++this->_M_impl._M_finish;
   28090:	00858593          	addi	a1,a1,8
   28094:	00b43423          	sd	a1,8(s0)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   28098:	00843583          	ld	a1,8(s0)
   2809c:	01043783          	ld	a5,16(s0)
   280a0:	fcf584e3          	beq	a1,a5,28068 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x108>
   280a4:	0084b783          	ld	a5,8(s1)
   280a8:	00f5b023          	sd	a5,0(a1)
	    ++this->_M_impl._M_finish;
   280ac:	00858593          	addi	a1,a1,8
   280b0:	00b43423          	sd	a1,8(s0)
   280b4:	fc1ff06f          	jal	zero,28074 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x114>
  synthetic.push_back(0);
   280b8:	00013023          	sd	zero,0(sp)
      { emplace_back(std::move(__x)); }
   280bc:	00010593          	addi	a1,sp,0
   280c0:	00040513          	addi	a0,s0,0
   280c4:	0001b317          	auipc	t1,0x1b
   280c8:	35433303          	ld	t1,852(t1) # 43418 <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)@@Base+0x1af4c>
   280cc:	000300e7          	jalr	ra,0(t1)
  synthetic.push_back(0);
   280d0:	00013423          	sd	zero,8(sp)
   280d4:	00810593          	addi	a1,sp,8
   280d8:	00040513          	addi	a0,s0,0
   280dc:	0001b317          	auipc	t1,0x1b
   280e0:	33c33303          	ld	t1,828(t1) # 43418 <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)@@Base+0x1af4c>
   280e4:	000300e7          	jalr	ra,0(t1)
      { return _M_data_ptr(this->_M_impl._M_start); }
   280e8:	00043903          	ld	s2,0(s0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   280ec:	00843483          	ld	s1,8(s0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   280f0:	06000513          	addi	a0,zero,96
   280f4:	ebcee0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   280f8:	00052423          	sw	zero,8(a0)
   280fc:	00052623          	sw	zero,12(a0)
   28100:	00052823          	sw	zero,16(a0)
   28104:	00052a23          	sw	zero,20(a0)
   28108:	00052c23          	sw	zero,24(a0)
   2810c:	00052e23          	sw	zero,28(a0)
   28110:	02053023          	sd	zero,32(a0)
   28114:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   28118:	00100793          	addi	a5,zero,1
   2811c:	02f52823          	sw	a5,48(a0)
   28120:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   28124:	0001b797          	auipc	a5,0x1b
   28128:	4b47b783          	ld	a5,1204(a5) # 435d8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   2812c:	01078793          	addi	a5,a5,16
   28130:	00f53023          	sd	a5,0(a0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   28134:	00900793          	addi	a5,zero,9
   28138:	02f52c23          	sw	a5,56(a0)
   2813c:	05253023          	sd	s2,64(a0)
   28140:	04953423          	sd	s1,72(a0)
   28144:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   28148:	04052a23          	sw	zero,84(a0)
   2814c:	00800793          	addi	a5,zero,8
   28150:	04f52c23          	sw	a5,88(a0)
   28154:	03850793          	addi	a5,a0,56
   28158:	00f43c23          	sd	a5,24(s0)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   2815c:	02043483          	ld	s1,32(s0)
	__r._M_pi = _M_pi;
   28160:	02a43023          	sd	a0,32(s0)
	if (_M_pi != nullptr)
   28164:	02048463          	beq	s1,zero,2818c <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x22c>
    if (__is_single_threaded())
   28168:	0001b797          	auipc	a5,0x1b
   2816c:	3307b783          	ld	a5,816(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   28170:	0007c783          	lbu	a5,0(a5)
   28174:	02078e63          	beq	a5,zero,281b0 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x250>
    _Atomic_word __result = *__mem;
   28178:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   2817c:	fff5079b          	addiw	a5,a0,-1
   28180:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   28184:	00100793          	addi	a5,zero,1
   28188:	02f50c63          	beq	a0,a5,281c0 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x260>
  base_addr = 0;
   2818c:	02043423          	sd	zero,40(s0)
}
   28190:	03813083          	ld	ra,56(sp)
   28194:	03013403          	ld	s0,48(sp)
   28198:	02813483          	ld	s1,40(sp)
   2819c:	02013903          	ld	s2,32(sp)
   281a0:	01813983          	ld	s3,24(sp)
   281a4:	01013a03          	ld	s4,16(sp)
   281a8:	04010113          	addi	sp,sp,64
   281ac:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   281b0:	fff00593          	addi	a1,zero,-1
   281b4:	03048513          	addi	a0,s1,48
   281b8:	c38ee0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   281bc:	fc9ff06f          	jal	zero,28184 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x224>
	_M_dispose();
   281c0:	0004b783          	ld	a5,0(s1)
   281c4:	0107b783          	ld	a5,16(a5)
   281c8:	00048513          	addi	a0,s1,0
   281cc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   281d0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   281d4:	0001b797          	auipc	a5,0x1b
   281d8:	2c47b783          	ld	a5,708(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   281dc:	0007c783          	lbu	a5,0(a5)
   281e0:	02078663          	beq	a5,zero,2820c <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x2ac>
    _Atomic_word __result = *__mem;
   281e4:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   281e8:	fff5079b          	addiw	a5,a0,-1
   281ec:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   281f0:	00100793          	addi	a5,zero,1
   281f4:	f8f51ce3          	bne	a0,a5,2818c <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x22c>
	    _M_destroy();
   281f8:	0004b783          	ld	a5,0(s1)
   281fc:	0187b783          	ld	a5,24(a5)
   28200:	00048513          	addi	a0,s1,0
   28204:	000780e7          	jalr	ra,0(a5)
   28208:	f85ff06f          	jal	zero,2818c <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x22c>
      return __exchange_and_add(__mem, __val);
   2820c:	fff00593          	addi	a1,zero,-1
   28210:	03448513          	addi	a0,s1,52
   28214:	bdcee0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   28218:	fd9ff06f          	jal	zero,281f0 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x290>

000000000002821c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)>:
      vector<_Tp, _Alloc>::
   2821c:	fb010113          	addi	sp,sp,-80
   28220:	04113423          	sd	ra,72(sp)
   28224:	04813023          	sd	s0,64(sp)
   28228:	02913c23          	sd	s1,56(sp)
   2822c:	03213823          	sd	s2,48(sp)
   28230:	03313423          	sd	s3,40(sp)
   28234:	03413023          	sd	s4,32(sp)
   28238:	01513c23          	sd	s5,24(sp)
   2823c:	01613823          	sd	s6,16(sp)
   28240:	01713423          	sd	s7,8(sp)
   28244:	00853903          	ld	s2,8(a0)
   28248:	00053983          	ld	s3,0(a0)
   2824c:	413907b3          	sub	a5,s2,s3
   28250:	4037d793          	srai	a5,a5,0x3
	if (max_size() - size() < __n)
   28254:	fff00713          	addi	a4,zero,-1
   28258:	00475713          	srli	a4,a4,0x4
   2825c:	04e78263          	beq	a5,a4,282a0 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x84>
   28260:	00050493          	addi	s1,a0,0
   28264:	00058a13          	addi	s4,a1,0
   28268:	00060b93          	addi	s7,a2,0
      return __a;
   2826c:	00078713          	addi	a4,a5,0
      if (__a < __b)
   28270:	03390e63          	beq	s2,s3,282ac <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x90>
	const size_type __len = size() + (std::max)(size(), __n);
   28274:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   28278:	06f76263          	bltu	a4,a5,282dc <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xc0>
   2827c:	00070a93          	addi	s5,a4,0
   28280:	fff00793          	addi	a5,zero,-1
   28284:	0047d793          	srli	a5,a5,0x4
   28288:	00e7f463          	bgeu	a5,a4,28290 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x74>
   2828c:	00078a93          	addi	s5,a5,0
   28290:	413a0433          	sub	s0,s4,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   28294:	00000b13          	addi	s6,zero,0
   28298:	04070e63          	beq	a4,zero,282f4 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xd8>
   2829c:	04c0006f          	jal	zero,282e8 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xcc>
	  __throw_length_error(__N(__s));
   282a0:	0000f517          	auipc	a0,0xf
   282a4:	26050513          	addi	a0,a0,608 # 37500 <__libc_csu_fini+0xa0>
   282a8:	bf8ee0ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   282ac:	00100713          	addi	a4,zero,1
   282b0:	fc5ff06f          	jal	zero,28274 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x58>
   282b4:	00040613          	addi	a2,s0,0
   282b8:	00098593          	addi	a1,s3,0
   282bc:	000b0513          	addi	a0,s6,0
   282c0:	f60ee0ef          	jal	ra,16a20 <memmove@plt>
	      ++__new_finish;
   282c4:	00840413          	addi	s0,s0,8
   282c8:	008b0433          	add	s0,s6,s0
      ptrdiff_t __count = __last - __first;
   282cc:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   282d0:	05204263          	blt	zero,s2,28314 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xf8>
	}
      return __result + __count;
   282d4:	01240433          	add	s0,s0,s2
      _M_deallocate(pointer __p, size_t __n)
   282d8:	0540006f          	jal	zero,2832c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x110>
   282dc:	413a0433          	sub	s0,s4,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   282e0:	fff00a93          	addi	s5,zero,-1
   282e4:	004ada93          	srli	s5,s5,0x4
   282e8:	003a9513          	slli	a0,s5,0x3
   282ec:	cc4ee0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   282f0:	00050b13          	addi	s6,a0,0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   282f4:	008b07b3          	add	a5,s6,s0
   282f8:	000bb703          	ld	a4,0(s7)
   282fc:	00e7b023          	sd	a4,0(a5)
      if (__count > 0)
   28300:	fa804ae3          	blt	zero,s0,282b4 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x98>
   28304:	00840413          	addi	s0,s0,8
   28308:	008b0433          	add	s0,s6,s0
      ptrdiff_t __count = __last - __first;
   2830c:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   28310:	01205a63          	bge	zero,s2,28324 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x108>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   28314:	00090613          	addi	a2,s2,0
   28318:	000a0593          	addi	a1,s4,0
   2831c:	00040513          	addi	a0,s0,0
   28320:	d20ee0ef          	jal	ra,16840 <memcpy@plt>
      return __result + __count;
   28324:	01240433          	add	s0,s0,s2
	if (__p)
   28328:	00098663          	beq	s3,zero,28334 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x118>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2832c:	00098513          	addi	a0,s3,0
   28330:	c70ee0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   28334:	0164b023          	sd	s6,0(s1)
      this->_M_impl._M_finish = __new_finish;
   28338:	0084b423          	sd	s0,8(s1)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2833c:	003a9a93          	slli	s5,s5,0x3
   28340:	015b0ab3          	add	s5,s6,s5
   28344:	0154b823          	sd	s5,16(s1)
    }
   28348:	04813083          	ld	ra,72(sp)
   2834c:	04013403          	ld	s0,64(sp)
   28350:	03813483          	ld	s1,56(sp)
   28354:	03013903          	ld	s2,48(sp)
   28358:	02813983          	ld	s3,40(sp)
   2835c:	02013a03          	ld	s4,32(sp)
   28360:	01813a83          	ld	s5,24(sp)
   28364:	01013b03          	ld	s6,16(sp)
   28368:	00813b83          	ld	s7,8(sp)
   2836c:	05010113          	addi	sp,sp,80
   28370:	00008067          	jalr	zero,0(ra)

0000000000028374 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)>:
      vector<_Tp, _Alloc>::
   28374:	fb010113          	addi	sp,sp,-80
   28378:	04113423          	sd	ra,72(sp)
   2837c:	04813023          	sd	s0,64(sp)
   28380:	02913c23          	sd	s1,56(sp)
   28384:	03213823          	sd	s2,48(sp)
   28388:	03313423          	sd	s3,40(sp)
   2838c:	03413023          	sd	s4,32(sp)
   28390:	01513c23          	sd	s5,24(sp)
   28394:	01613823          	sd	s6,16(sp)
   28398:	01713423          	sd	s7,8(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2839c:	00853903          	ld	s2,8(a0)
   283a0:	00053983          	ld	s3,0(a0)
   283a4:	413907b3          	sub	a5,s2,s3
   283a8:	4037d793          	srai	a5,a5,0x3
	if (max_size() - size() < __n)
   283ac:	fff00713          	addi	a4,zero,-1
   283b0:	00475713          	srli	a4,a4,0x4
   283b4:	04e78263          	beq	a5,a4,283f8 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x84>
   283b8:	00050493          	addi	s1,a0,0
   283bc:	00058a13          	addi	s4,a1,0
   283c0:	00060b93          	addi	s7,a2,0
      return __a;
   283c4:	00078713          	addi	a4,a5,0
      if (__a < __b)
   283c8:	03390e63          	beq	s2,s3,28404 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x90>
	const size_type __len = size() + (std::max)(size(), __n);
   283cc:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   283d0:	06f76263          	bltu	a4,a5,28434 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xc0>
   283d4:	00070a93          	addi	s5,a4,0
   283d8:	fff00793          	addi	a5,zero,-1
   283dc:	0047d793          	srli	a5,a5,0x4
   283e0:	00e7f463          	bgeu	a5,a4,283e8 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x74>
   283e4:	00078a93          	addi	s5,a5,0
   283e8:	413a0433          	sub	s0,s4,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   283ec:	00000b13          	addi	s6,zero,0
   283f0:	04070e63          	beq	a4,zero,2844c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xd8>
   283f4:	04c0006f          	jal	zero,28440 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xcc>
	  __throw_length_error(__N(__s));
   283f8:	0000f517          	auipc	a0,0xf
   283fc:	10850513          	addi	a0,a0,264 # 37500 <__libc_csu_fini+0xa0>
   28400:	aa0ee0ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   28404:	00100713          	addi	a4,zero,1
   28408:	fc5ff06f          	jal	zero,283cc <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x58>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   2840c:	00040613          	addi	a2,s0,0
   28410:	00098593          	addi	a1,s3,0
   28414:	000b0513          	addi	a0,s6,0
   28418:	e08ee0ef          	jal	ra,16a20 <memmove@plt>
	      ++__new_finish;
   2841c:	00840413          	addi	s0,s0,8
   28420:	008b0433          	add	s0,s6,s0
      ptrdiff_t __count = __last - __first;
   28424:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   28428:	05204263          	blt	zero,s2,2846c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xf8>
      return __result + __count;
   2842c:	01240433          	add	s0,s0,s2
      _M_deallocate(pointer __p, size_t __n)
   28430:	0540006f          	jal	zero,28484 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x110>
   28434:	413a0433          	sub	s0,s4,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   28438:	fff00a93          	addi	s5,zero,-1
   2843c:	004ada93          	srli	s5,s5,0x4
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   28440:	003a9513          	slli	a0,s5,0x3
   28444:	b6cee0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   28448:	00050b13          	addi	s6,a0,0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   2844c:	008b07b3          	add	a5,s6,s0
   28450:	000bb703          	ld	a4,0(s7)
   28454:	00e7b023          	sd	a4,0(a5)
      if (__count > 0)
   28458:	fa804ae3          	blt	zero,s0,2840c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x98>
   2845c:	00840413          	addi	s0,s0,8
   28460:	008b0433          	add	s0,s6,s0
      ptrdiff_t __count = __last - __first;
   28464:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   28468:	01205a63          	bge	zero,s2,2847c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x108>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   2846c:	00090613          	addi	a2,s2,0
   28470:	000a0593          	addi	a1,s4,0
   28474:	00040513          	addi	a0,s0,0
   28478:	bc8ee0ef          	jal	ra,16840 <memcpy@plt>
      return __result + __count;
   2847c:	01240433          	add	s0,s0,s2
	if (__p)
   28480:	00098663          	beq	s3,zero,2848c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x118>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   28484:	00098513          	addi	a0,s3,0
   28488:	b18ee0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2848c:	0164b023          	sd	s6,0(s1)
      this->_M_impl._M_finish = __new_finish;
   28490:	0084b423          	sd	s0,8(s1)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   28494:	003a9a93          	slli	s5,s5,0x3
   28498:	015b0ab3          	add	s5,s6,s5
   2849c:	0154b823          	sd	s5,16(s1)
    }
   284a0:	04813083          	ld	ra,72(sp)
   284a4:	04013403          	ld	s0,64(sp)
   284a8:	03813483          	ld	s1,56(sp)
   284ac:	03013903          	ld	s2,48(sp)
   284b0:	02813983          	ld	s3,40(sp)
   284b4:	02013a03          	ld	s4,32(sp)
   284b8:	01813a83          	ld	s5,24(sp)
   284bc:	01013b03          	ld	s6,16(sp)
   284c0:	00813b83          	ld	s7,8(sp)
   284c4:	05010113          	addi	sp,sp,80
   284c8:	00008067          	jalr	zero,0(ra)

00000000000284cc <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)>:
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   284cc:	00853783          	ld	a5,8(a0)
   284d0:	01053703          	ld	a4,16(a0)
   284d4:	00e78e63          	beq	a5,a4,284f0 <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)+0x24>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   284d8:	0005b703          	ld	a4,0(a1)
   284dc:	00e7b023          	sd	a4,0(a5)
	    ++this->_M_impl._M_finish;
   284e0:	00853783          	ld	a5,8(a0)
   284e4:	00878793          	addi	a5,a5,8
   284e8:	00f53423          	sd	a5,8(a0)
   284ec:	00008067          	jalr	zero,0(ra)
      vector<_Tp, _Alloc>::
   284f0:	ff010113          	addi	sp,sp,-16
   284f4:	00113423          	sd	ra,8(sp)
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   284f8:	00058613          	addi	a2,a1,0
   284fc:	00078593          	addi	a1,a5,0
   28500:	0001b317          	auipc	t1,0x1b
   28504:	e4833303          	ld	t1,-440(t1) # 43348 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)@@Base+0x1afd4>
   28508:	000300e7          	jalr	ra,0(t1)
      }
   2850c:	00813083          	ld	ra,8(sp)
   28510:	01010113          	addi	sp,sp,16
   28514:	00008067          	jalr	zero,0(ra)

0000000000028518 <dwarf::line_table::entry::reset(bool)>:

line_table::file::file(string path, uint64_t mtime, uint64_t length)
    : path(path), mtime(mtime), length(length) {}

void line_table::entry::reset(bool is_stmt) {
  address = op_index = 0;
   28518:	00052423          	sw	zero,8(a0)
   2851c:	00053023          	sd	zero,0(a0)
  file = nullptr;
   28520:	00053823          	sd	zero,16(a0)
  file_index = line = 1;
   28524:	00100793          	addi	a5,zero,1
   28528:	00f52e23          	sw	a5,28(a0)
   2852c:	00f52c23          	sw	a5,24(a0)
  column = 0;
   28530:	02052023          	sw	zero,32(a0)
  this->is_stmt = is_stmt;
   28534:	02b50223          	sb	a1,36(a0)
  basic_block = end_sequence = prologue_end = epilogue_begin = false;
   28538:	02050423          	sb	zero,40(a0)
   2853c:	020503a3          	sb	zero,39(a0)
   28540:	02050323          	sb	zero,38(a0)
   28544:	020502a3          	sb	zero,37(a0)
  isa = discriminator = 0;
   28548:	02052823          	sw	zero,48(a0)
   2854c:	02052623          	sw	zero,44(a0)
}
   28550:	00008067          	jalr	zero,0(ra)

0000000000028554 <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>:
line_table::file::file(string path, uint64_t mtime, uint64_t length)
   28554:	fe010113          	addi	sp,sp,-32
   28558:	00113c23          	sd	ra,24(sp)
   2855c:	00813823          	sd	s0,16(sp)
   28560:	00913423          	sd	s1,8(sp)
   28564:	01213023          	sd	s2,0(sp)
   28568:	00050413          	addi	s0,a0,0
   2856c:	00058793          	addi	a5,a1,0
   28570:	00060913          	addi	s2,a2,0
   28574:	00068493          	addi	s1,a3,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28578:	01050713          	addi	a4,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2857c:	00e53023          	sd	a4,0(a0)
      { return _M_dataplus._M_p; }
   28580:	0005b583          	ld	a1,0(a1)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   28584:	0087b603          	ld	a2,8(a5)
   28588:	00000693          	addi	a3,zero,0
   2858c:	00c58633          	add	a2,a1,a2
   28590:	0001b317          	auipc	t1,0x1b
   28594:	d9833303          	ld	t1,-616(t1) # 43328 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17b3c>
   28598:	000300e7          	jalr	ra,0(t1)
    : path(path), mtime(mtime), length(length) {}
   2859c:	03243023          	sd	s2,32(s0)
   285a0:	02943423          	sd	s1,40(s0)
   285a4:	01813083          	ld	ra,24(sp)
   285a8:	01013403          	ld	s0,16(sp)
   285ac:	00813483          	ld	s1,8(sp)
   285b0:	00013903          	ld	s2,0(sp)
   285b4:	02010113          	addi	sp,sp,32
   285b8:	00008067          	jalr	zero,0(ra)

00000000000285bc <dwarf::line_table::entry::get_description[abi:cxx11]() const>:

string line_table::entry::get_description() const {
   285bc:	fb010113          	addi	sp,sp,-80
   285c0:	04113423          	sd	ra,72(sp)
   285c4:	04813023          	sd	s0,64(sp)
   285c8:	02913c23          	sd	s1,56(sp)
   285cc:	03213823          	sd	s2,48(sp)
   285d0:	03313423          	sd	s3,40(sp)
   285d4:	03413023          	sd	s4,32(sp)
   285d8:	00050413          	addi	s0,a0,0
   285dc:	00058493          	addi	s1,a1,0
  string res = file->path;
   285e0:	0105b783          	ld	a5,16(a1)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   285e4:	01050913          	addi	s2,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   285e8:	01253023          	sd	s2,0(a0)
      { return _M_dataplus._M_p; }
   285ec:	0007b583          	ld	a1,0(a5)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   285f0:	0087b603          	ld	a2,8(a5)
   285f4:	00000693          	addi	a3,zero,0
   285f8:	00c58633          	add	a2,a1,a2
   285fc:	0001b317          	auipc	t1,0x1b
   28600:	d2c33303          	ld	t1,-724(t1) # 43328 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17b3c>
   28604:	000300e7          	jalr	ra,0(t1)
  if (line) {
   28608:	01c4a783          	lw	a5,28(s1)
   2860c:	02079463          	bne	a5,zero,28634 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x78>
    res.append(":").append(std::to_string(line));
    if (column)
      res.append(":").append(std::to_string(column));
  }
  return res;
}
   28610:	00040513          	addi	a0,s0,0
   28614:	04813083          	ld	ra,72(sp)
   28618:	04013403          	ld	s0,64(sp)
   2861c:	03813483          	ld	s1,56(sp)
   28620:	03013903          	ld	s2,48(sp)
   28624:	02813983          	ld	s3,40(sp)
   28628:	02013a03          	ld	s4,32(sp)
   2862c:	05010113          	addi	sp,sp,80
   28630:	00008067          	jalr	zero,0(ra)
	if (this->max_size() - (this->size() - __n1) < __n2)
   28634:	00843703          	ld	a4,8(s0)
   28638:	fff00793          	addi	a5,zero,-1
   2863c:	0027d793          	srli	a5,a5,0x2
   28640:	00f70e63          	beq	a4,a5,2865c <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xa0>
	return _M_append(__s, __n);
   28644:	00100613          	addi	a2,zero,1
   28648:	00010597          	auipc	a1,0x10
   2864c:	1c858593          	addi	a1,a1,456 # 38810 <typeinfo name for dwarf::expr_context+0x28>
   28650:	00040513          	addi	a0,s0,0
   28654:	fdded0ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   28658:	0180006f          	jal	zero,28670 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xb4>
	  __throw_length_error(__N(__s));
   2865c:	0000f517          	auipc	a0,0xf
   28660:	72450513          	addi	a0,a0,1828 # 37d80 <std::piecewise_construct+0x2b0>
   28664:	83cee0ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   28668:	00050493          	addi	s1,a0,0
   2866c:	09c0006f          	jal	zero,28708 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x14c>
	return _M_append(__s, __n);
   28670:	00050993          	addi	s3,a0,0
    res.append(":").append(std::to_string(line));
   28674:	01c4aa03          	lw	s4,28(s1)
    string __str(__detail::__to_chars_len(__val), '\0');
   28678:	00a00593          	addi	a1,zero,10
   2867c:	000a0513          	addi	a0,s4,0
   28680:	0001b317          	auipc	t1,0x1b
   28684:	e3033303          	ld	t1,-464(t1) # 434b0 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x18174>
   28688:	000300e7          	jalr	ra,0(t1)
	: allocator_type(__a), _M_p(__dat) { }
   2868c:	01010793          	addi	a5,sp,16
   28690:	00f13023          	sd	a5,0(sp)
      { _M_construct(__n, __c); }
   28694:	00000613          	addi	a2,zero,0
   28698:	02051593          	slli	a1,a0,0x20
   2869c:	0205d593          	srli	a1,a1,0x20
   286a0:	00010513          	addi	a0,sp,0
   286a4:	95cee0ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   286a8:	000a0613          	addi	a2,s4,0
   286ac:	00812583          	lw	a1,8(sp)
   286b0:	00013503          	ld	a0,0(sp)
   286b4:	0001b317          	auipc	t1,0x1b
   286b8:	e1c33303          	ld	t1,-484(t1) # 434d0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x180f8>
   286bc:	000300e7          	jalr	ra,0(t1)
      { return _M_dataplus._M_p; }
   286c0:	00013583          	ld	a1,0(sp)
      { return _M_string_length; }
   286c4:	00813603          	ld	a2,8(sp)
	if (this->max_size() - (this->size() - __n1) < __n2)
   286c8:	0089b703          	ld	a4,8(s3)
   286cc:	fff00793          	addi	a5,zero,-1
   286d0:	0027d793          	srli	a5,a5,0x2
   286d4:	40e787b3          	sub	a5,a5,a4
   286d8:	00c7e863          	bltu	a5,a2,286e8 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x12c>
	return _M_append(__s, __n);
   286dc:	00098513          	addi	a0,s3,0
   286e0:	f51ed0ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   286e4:	0380006f          	jal	zero,2871c <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x160>
	  __throw_length_error(__N(__s));
   286e8:	0000f517          	auipc	a0,0xf
   286ec:	69850513          	addi	a0,a0,1688 # 37d80 <std::piecewise_construct+0x2b0>
   286f0:	fb1ed0ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   286f4:	00050493          	addi	s1,a0,0
   286f8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   286fc:	01010793          	addi	a5,sp,16
   28700:	00f50463          	beq	a0,a5,28708 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x14c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   28704:	89cee0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28708:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2870c:	01250463          	beq	a0,s2,28714 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x158>
   28710:	890ee0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   28714:	00048513          	addi	a0,s1,0
   28718:	a78ee0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2871c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   28720:	01010793          	addi	a5,sp,16
   28724:	00f50463          	beq	a0,a5,2872c <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x170>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   28728:	878ee0ef          	jal	ra,167a0 <operator delete(void*)@plt>
    if (column)
   2872c:	0204a783          	lw	a5,32(s1)
   28730:	ee0780e3          	beq	a5,zero,28610 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x54>
	if (this->max_size() - (this->size() - __n1) < __n2)
   28734:	00843703          	ld	a4,8(s0)
   28738:	fff00793          	addi	a5,zero,-1
   2873c:	0027d793          	srli	a5,a5,0x2
   28740:	00f70e63          	beq	a4,a5,2875c <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x1a0>
	return _M_append(__s, __n);
   28744:	00100613          	addi	a2,zero,1
   28748:	00010597          	auipc	a1,0x10
   2874c:	0c858593          	addi	a1,a1,200 # 38810 <typeinfo name for dwarf::expr_context+0x28>
   28750:	00040513          	addi	a0,s0,0
   28754:	edded0ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   28758:	0100006f          	jal	zero,28768 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x1ac>
	  __throw_length_error(__N(__s));
   2875c:	0000f517          	auipc	a0,0xf
   28760:	62450513          	addi	a0,a0,1572 # 37d80 <std::piecewise_construct+0x2b0>
   28764:	f3ded0ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return _M_append(__s, __n);
   28768:	00050993          	addi	s3,a0,0
      res.append(":").append(std::to_string(column));
   2876c:	0204a483          	lw	s1,32(s1)
    string __str(__detail::__to_chars_len(__val), '\0');
   28770:	00a00593          	addi	a1,zero,10
   28774:	00048513          	addi	a0,s1,0
   28778:	0001b317          	auipc	t1,0x1b
   2877c:	d3833303          	ld	t1,-712(t1) # 434b0 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x18174>
   28780:	000300e7          	jalr	ra,0(t1)
	: allocator_type(__a), _M_p(__dat) { }
   28784:	01010793          	addi	a5,sp,16
   28788:	00f13023          	sd	a5,0(sp)
      { _M_construct(__n, __c); }
   2878c:	00000613          	addi	a2,zero,0
   28790:	02051593          	slli	a1,a0,0x20
   28794:	0205d593          	srli	a1,a1,0x20
   28798:	00010513          	addi	a0,sp,0
   2879c:	864ee0ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   287a0:	00048613          	addi	a2,s1,0
   287a4:	00812583          	lw	a1,8(sp)
   287a8:	00013503          	ld	a0,0(sp)
   287ac:	0001b317          	auipc	t1,0x1b
   287b0:	d2433303          	ld	t1,-732(t1) # 434d0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x180f8>
   287b4:	000300e7          	jalr	ra,0(t1)
      { return _M_dataplus._M_p; }
   287b8:	00013583          	ld	a1,0(sp)
      { return _M_string_length; }
   287bc:	00813603          	ld	a2,8(sp)
	if (this->max_size() - (this->size() - __n1) < __n2)
   287c0:	0089b703          	ld	a4,8(s3)
   287c4:	fff00793          	addi	a5,zero,-1
   287c8:	0027d793          	srli	a5,a5,0x2
   287cc:	40e787b3          	sub	a5,a5,a4
   287d0:	00c7e863          	bltu	a5,a2,287e0 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x224>
	return _M_append(__s, __n);
   287d4:	00098513          	addi	a0,s3,0
   287d8:	e59ed0ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   287dc:	0280006f          	jal	zero,28804 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x248>
	  __throw_length_error(__N(__s));
   287e0:	0000f517          	auipc	a0,0xf
   287e4:	5a050513          	addi	a0,a0,1440 # 37d80 <std::piecewise_construct+0x2b0>
   287e8:	eb9ed0ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   287ec:	00050493          	addi	s1,a0,0
   287f0:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   287f4:	01010793          	addi	a5,sp,16
   287f8:	f0f508e3          	beq	a0,a5,28708 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x14c>
   287fc:	fa5ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   28800:	f09ff06f          	jal	zero,28708 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x14c>
      { return _M_dataplus._M_p; }
   28804:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   28808:	01010793          	addi	a5,sp,16
   2880c:	e0f502e3          	beq	a0,a5,28610 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x54>
   28810:	f91ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
  return res;
   28814:	dfdff06f          	jal	zero,28610 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x54>

0000000000028818 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)>:
bool line_table::impl::read_file_entry(cursor *cur, bool in_header) {
   28818:	f7010113          	addi	sp,sp,-144
   2881c:	08113423          	sd	ra,136(sp)
   28820:	08813023          	sd	s0,128(sp)
   28824:	06913c23          	sd	s1,120(sp)
   28828:	07213823          	sd	s2,112(sp)
  assert(cur->sec == sec);
   2882c:	00053703          	ld	a4,0(a0)
   28830:	0005b783          	ld	a5,0(a1)
   28834:	02f71863          	bne	a4,a5,28864 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x4c>
   28838:	00050913          	addi	s2,a0,0
   2883c:	00058413          	addi	s0,a1,0
   28840:	00060493          	addi	s1,a2,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   28844:	06010793          	addi	a5,sp,96
   28848:	04f13823          	sd	a5,80(sp)
      { _M_string_length = __length; }
   2884c:	04013c23          	sd	zero,88(sp)
	__c1 = __c2;
   28850:	06010023          	sb	zero,96(sp)
  cur->string(file_name);
   28854:	05010593          	addi	a1,sp,80
   28858:	00040513          	addi	a0,s0,0
   2885c:	894f50ef          	jal	ra,1d8f0 <dwarf::cursor::string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   28860:	0240006f          	jal	zero,28884 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x6c>
  assert(cur->sec == sec);
   28864:	00010697          	auipc	a3,0x10
   28868:	fb468693          	addi	a3,a3,-76 # 38818 <typeinfo name for dwarf::expr_context+0x30>
   2886c:	0bb00613          	addi	a2,zero,187
   28870:	00010597          	auipc	a1,0x10
   28874:	ff058593          	addi	a1,a1,-16 # 38860 <typeinfo name for dwarf::expr_context+0x78>
   28878:	00010517          	auipc	a0,0x10
   2887c:	ff050513          	addi	a0,a0,-16 # 38868 <typeinfo name for dwarf::expr_context+0x80>
   28880:	f11ed0ef          	jal	ra,16790 <__assert_fail@plt>
  if (in_header && file_name.empty())
   28884:	00048663          	beq	s1,zero,28890 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x78>
   28888:	05813783          	ld	a5,88(sp)
   2888c:	28078463          	beq	a5,zero,28b14 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x2fc>
    while (pos < sec->end) {
   28890:	01043783          	ld	a5,16(s0)
      { return _M_ptr; }
   28894:	00043583          	ld	a1,0(s0)
   28898:	0105b703          	ld	a4,16(a1)
   2889c:	02e7fe63          	bgeu	a5,a4,288d8 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0xc0>
   288a0:	00000493          	addi	s1,zero,0
   288a4:	00000613          	addi	a2,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   288a8:	00178793          	addi	a5,a5,1
   288ac:	00f43823          	sd	a5,16(s0)
   288b0:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   288b4:	07f77693          	andi	a3,a4,127
   288b8:	00c696b3          	sll	a3,a3,a2
   288bc:	00d4e4b3          	or	s1,s1,a3
      if ((byte & 0x80) == 0)
   288c0:	0187171b          	slliw	a4,a4,0x18
   288c4:	4187571b          	sraiw	a4,a4,0x18
   288c8:	00075e63          	bge	a4,zero,288e4 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0xcc>
      shift += 7;
   288cc:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   288d0:	0105b703          	ld	a4,16(a1)
   288d4:	fce7eae3          	bltu	a5,a4,288a8 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x90>
    underflow();
   288d8:	00040513          	addi	a0,s0,0
   288dc:	868f50ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    return 0;
   288e0:	00000493          	addi	s1,zero,0
    while (pos < sec->end) {
   288e4:	01043783          	ld	a5,16(s0)
   288e8:	00043503          	ld	a0,0(s0)
   288ec:	01053703          	ld	a4,16(a0)
   288f0:	02e7fe63          	bgeu	a5,a4,2892c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x114>
    std::uint64_t result = 0;
   288f4:	00000593          	addi	a1,zero,0
    int shift = 0;
   288f8:	00000613          	addi	a2,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   288fc:	00178793          	addi	a5,a5,1
   28900:	00f43823          	sd	a5,16(s0)
   28904:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   28908:	07f77693          	andi	a3,a4,127
   2890c:	00c696b3          	sll	a3,a3,a2
   28910:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   28914:	0187171b          	slliw	a4,a4,0x18
   28918:	4187571b          	sraiw	a4,a4,0x18
   2891c:	00075e63          	bge	a4,zero,28938 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x120>
      shift += 7;
   28920:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   28924:	01053703          	ld	a4,16(a0)
   28928:	fce7eae3          	bltu	a5,a4,288fc <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0xe4>
    underflow();
   2892c:	00040513          	addi	a0,s0,0
   28930:	814f50ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    return 0;
   28934:	00000593          	addi	a1,zero,0
  uint64_t mtime = cur->uleb128();
   28938:	04b13423          	sd	a1,72(sp)
    while (pos < sec->end) {
   2893c:	01043783          	ld	a5,16(s0)
   28940:	00043503          	ld	a0,0(s0)
   28944:	01053703          	ld	a4,16(a0)
   28948:	02e7fe63          	bgeu	a5,a4,28984 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x16c>
    std::uint64_t result = 0;
   2894c:	00000593          	addi	a1,zero,0
    int shift = 0;
   28950:	00000613          	addi	a2,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   28954:	00178793          	addi	a5,a5,1
   28958:	00f43823          	sd	a5,16(s0)
   2895c:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   28960:	07f77693          	andi	a3,a4,127
   28964:	00c696b3          	sll	a3,a3,a2
   28968:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   2896c:	0187171b          	slliw	a4,a4,0x18
   28970:	4187571b          	sraiw	a4,a4,0x18
   28974:	00075e63          	bge	a4,zero,28990 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x178>
      shift += 7;
   28978:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   2897c:	01053703          	ld	a4,16(a0)
   28980:	fce7eae3          	bltu	a5,a4,28954 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x13c>
    underflow();
   28984:	00040513          	addi	a0,s0,0
   28988:	fbdf40ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    return 0;
   2898c:	00000593          	addi	a1,zero,0
  uint64_t length = cur->uleb128();
   28990:	04b13023          	sd	a1,64(sp)
  section_offset get_section_offset() const { return pos - sec->begin; }
   28994:	00043703          	ld	a4,0(s0)
   28998:	01043783          	ld	a5,16(s0)
   2899c:	00873703          	ld	a4,8(a4)
   289a0:	40e787b3          	sub	a5,a5,a4
  if (cur->get_section_offset() <= last_file_name_end)
   289a4:	06893703          	ld	a4,104(s2)
   289a8:	16f77a63          	bgeu	a4,a5,28b1c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x304>
  last_file_name_end = cur->get_section_offset();
   289ac:	06f93423          	sd	a5,104(s2)
  if (file_name[0] == '/')
   289b0:	05013783          	ld	a5,80(sp)
   289b4:	0007c703          	lbu	a4,0(a5)
   289b8:	02f00793          	addi	a5,zero,47
   289bc:	02f70e63          	beq	a4,a5,289f8 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x1e0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   289c0:	03893703          	ld	a4,56(s2)
   289c4:	04093783          	ld	a5,64(s2)
   289c8:	40e787b3          	sub	a5,a5,a4
   289cc:	4057d793          	srai	a5,a5,0x5
  else if (dir_index < include_directories.size())
   289d0:	0af4f263          	bgeu	s1,a5,28a74 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x25c>
    file_names.emplace_back(include_directories[dir_index] + file_name, mtime,
   289d4:	05090913          	addi	s2,s2,80
	return *(this->_M_impl._M_start + __n);
   289d8:	00549593          	slli	a1,s1,0x5
   289dc:	05010613          	addi	a2,sp,80
   289e0:	00b705b3          	add	a1,a4,a1
   289e4:	02010513          	addi	a0,sp,32
   289e8:	0001b317          	auipc	t1,0x1b
   289ec:	bf833303          	ld	t1,-1032(t1) # 435e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x17d58>
   289f0:	000300e7          	jalr	ra,0(t1)
   289f4:	0240006f          	jal	zero,28a18 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x200>
    file_names.emplace_back(move(file_name), mtime, length);
   289f8:	04010693          	addi	a3,sp,64
   289fc:	04810613          	addi	a2,sp,72
   28a00:	05010593          	addi	a1,sp,80
   28a04:	05090513          	addi	a0,s2,80
   28a08:	0001b317          	auipc	t1,0x1b
   28a0c:	af833303          	ld	t1,-1288(t1) # 43500 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)@@Base+0x16b64>
   28a10:	000300e7          	jalr	ra,0(t1)
   28a14:	1100006f          	jal	zero,28b24 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x30c>
    file_names.emplace_back(include_directories[dir_index] + file_name, mtime,
   28a18:	04010693          	addi	a3,sp,64
   28a1c:	04810613          	addi	a2,sp,72
   28a20:	02010593          	addi	a1,sp,32
   28a24:	00090513          	addi	a0,s2,0
   28a28:	0001b317          	auipc	t1,0x1b
   28a2c:	ad833303          	ld	t1,-1320(t1) # 43500 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)@@Base+0x16b64>
   28a30:	000300e7          	jalr	ra,0(t1)
      { return _M_dataplus._M_p; }
   28a34:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   28a38:	03010793          	addi	a5,sp,48
   28a3c:	00f50463          	beq	a0,a5,28a44 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x22c>
   28a40:	d61ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
  return true;
   28a44:	00100413          	addi	s0,zero,1
      { return _M_dataplus._M_p; }
   28a48:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   28a4c:	06010793          	addi	a5,sp,96
   28a50:	00f50463          	beq	a0,a5,28a58 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x240>
   28a54:	d4ded0ef          	jal	ra,167a0 <operator delete(void*)@plt>
}
   28a58:	00040513          	addi	a0,s0,0
   28a5c:	08813083          	ld	ra,136(sp)
   28a60:	08013403          	ld	s0,128(sp)
   28a64:	07813483          	ld	s1,120(sp)
   28a68:	07013903          	ld	s2,112(sp)
   28a6c:	09010113          	addi	sp,sp,144
   28a70:	00008067          	jalr	zero,0(ra)
                       std::to_string(dir_index));
   28a74:	01000513          	addi	a0,zero,16
   28a78:	c19ed0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   28a7c:	00050913          	addi	s2,a0,0
   28a80:	00048593          	addi	a1,s1,0
   28a84:	00010513          	addi	a0,sp,0
   28a88:	0001b317          	auipc	t1,0x1b
   28a8c:	89033303          	ld	t1,-1904(t1) # 43318 <std::__cxx11::to_string(unsigned long)@@Base+0x18190>
   28a90:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   28a94:	00010617          	auipc	a2,0x10
   28a98:	de460613          	addi	a2,a2,-540 # 38878 <typeinfo name for dwarf::expr_context+0x90>
   28a9c:	00000593          	addi	a1,zero,0
   28aa0:	00010513          	addi	a0,sp,0
   28aa4:	b5ded0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   28aa8:	00050593          	addi	a1,a0,0
   28aac:	02010413          	addi	s0,sp,32
   28ab0:	00040513          	addi	a0,s0,0
   28ab4:	c1ded0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   28ab8:	00040593          	addi	a1,s0,0
   28abc:	00090513          	addi	a0,s2,0
   28ac0:	d71ed0ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   28ac4:	0001b797          	auipc	a5,0x1b
   28ac8:	aac7b783          	ld	a5,-1364(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   28acc:	01078793          	addi	a5,a5,16
   28ad0:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   28ad4:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   28ad8:	03010793          	addi	a5,sp,48
   28adc:	00f50463          	beq	a0,a5,28ae4 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x2cc>
   28ae0:	cc1ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28ae4:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   28ae8:	01010793          	addi	a5,sp,16
   28aec:	00f50463          	beq	a0,a5,28af4 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x2dc>
   28af0:	cb1ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   28af4:	0001b617          	auipc	a2,0x1b
   28af8:	8a463603          	ld	a2,-1884(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   28afc:	0001a597          	auipc	a1,0x1a
   28b00:	7cc5b583          	ld	a1,1996(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   28b04:	00090513          	addi	a0,s2,0
   28b08:	e59ed0ef          	jal	ra,16960 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   28b0c:	00050413          	addi	s0,a0,0
   28b10:	0300006f          	jal	zero,28b40 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x328>
    return false;
   28b14:	00000413          	addi	s0,zero,0
   28b18:	f31ff06f          	jal	zero,28a48 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x230>
    return true;
   28b1c:	00100413          	addi	s0,zero,1
   28b20:	f29ff06f          	jal	zero,28a48 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x230>
  return true;
   28b24:	00100413          	addi	s0,zero,1
   28b28:	f21ff06f          	jal	zero,28a48 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x230>
   28b2c:	00050413          	addi	s0,a0,0
   28b30:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   28b34:	03010793          	addi	a5,sp,48
   28b38:	00f50463          	beq	a0,a5,28b40 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x328>
   28b3c:	c65ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28b40:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   28b44:	06010793          	addi	a5,sp,96
   28b48:	00f50463          	beq	a0,a5,28b50 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x338>
   28b4c:	c55ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   28b50:	00040513          	addi	a0,s0,0
   28b54:	e3ded0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   28b58:	00050413          	addi	s0,a0,0
   28b5c:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   28b60:	03010793          	addi	a5,sp,48
   28b64:	00f50463          	beq	a0,a5,28b6c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x354>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   28b68:	c39ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28b6c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   28b70:	01010793          	addi	a5,sp,16
   28b74:	00f50463          	beq	a0,a5,28b7c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x364>
   28b78:	c29ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
                       std::to_string(dir_index));
   28b7c:	00090513          	addi	a0,s2,0
   28b80:	bd1ed0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   28b84:	fbdff06f          	jal	zero,28b40 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x328>
      { return _M_dataplus._M_p; }
   28b88:	00050413          	addi	s0,a0,0
   28b8c:	fe1ff06f          	jal	zero,28b6c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x354>
   28b90:	00050413          	addi	s0,a0,0
   28b94:	fe9ff06f          	jal	zero,28b7c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x364>

0000000000028b98 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
line_table::line_table(const shared_ptr<section> &sec, section_offset offset,
   28b98:	e2010113          	addi	sp,sp,-480
   28b9c:	1c113c23          	sd	ra,472(sp)
   28ba0:	1c813823          	sd	s0,464(sp)
   28ba4:	1c913423          	sd	s1,456(sp)
   28ba8:	1d213023          	sd	s2,448(sp)
   28bac:	1b313c23          	sd	s3,440(sp)
   28bb0:	1b413823          	sd	s4,432(sp)
   28bb4:	1b513423          	sd	s5,424(sp)
   28bb8:	1b613023          	sd	s6,416(sp)
   28bbc:	19713c23          	sd	s7,408(sp)
   28bc0:	19813823          	sd	s8,400(sp)
   28bc4:	19913423          	sd	s9,392(sp)
   28bc8:	19a13023          	sd	s10,384(sp)
   28bcc:	17b13c23          	sd	s11,376(sp)
   28bd0:	00050413          	addi	s0,a0,0
   28bd4:	00058913          	addi	s2,a1,0
   28bd8:	00060a93          	addi	s5,a2,0
   28bdc:	00068a13          	addi	s4,a3,0
   28be0:	00070493          	addi	s1,a4,0
   28be4:	00078993          	addi	s3,a5,0
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   28be8:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   28bec:	0b000513          	addi	a0,zero,176
   28bf0:	bc1ed0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   28bf4:	00052423          	sw	zero,8(a0)
   28bf8:	00052623          	sw	zero,12(a0)
   28bfc:	00052823          	sw	zero,16(a0)
   28c00:	00052a23          	sw	zero,20(a0)
   28c04:	00052c23          	sw	zero,24(a0)
   28c08:	00052e23          	sw	zero,28(a0)
   28c0c:	02053023          	sd	zero,32(a0)
   28c10:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   28c14:	00100793          	addi	a5,zero,1
   28c18:	02f52823          	sw	a5,48(a0)
   28c1c:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   28c20:	0001a797          	auipc	a5,0x1a
   28c24:	7907b783          	ld	a5,1936(a5) # 433b0 <vtable for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x8a8>
   28c28:	01078793          	addi	a5,a5,16
   28c2c:	00f53023          	sd	a5,0(a0)
      : _M_ptr(0), _M_refcount()
   28c30:	02053c23          	sd	zero,56(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   28c34:	04053023          	sd	zero,64(a0)
	: _M_start(), _M_finish(), _M_end_of_storage()
   28c38:	04053c23          	sd	zero,88(a0)
   28c3c:	06053023          	sd	zero,96(a0)
   28c40:	06053423          	sd	zero,104(a0)
   28c44:	06053823          	sd	zero,112(a0)
   28c48:	06053c23          	sd	zero,120(a0)
   28c4c:	08053023          	sd	zero,128(a0)
   28c50:	08053423          	sd	zero,136(a0)
   28c54:	08053823          	sd	zero,144(a0)
   28c58:	08053c23          	sd	zero,152(a0)
  impl() : last_file_name_end(0), file_names_complete(false){};
   28c5c:	0a053023          	sd	zero,160(a0)
   28c60:	0a050423          	sb	zero,168(a0)
	  _M_pi = __pi;
   28c64:	00a43423          	sd	a0,8(s0)
   28c68:	03850513          	addi	a0,a0,56
	  __p = __pi->_M_ptr();
   28c6c:	00a43023          	sd	a0,0(s0)
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   28c70:	03010793          	addi	a5,sp,48
   28c74:	02f13023          	sd	a5,32(sp)
      { _M_string_length = __length; }
   28c78:	02013423          	sd	zero,40(sp)
   28c7c:	02010823          	sb	zero,48(sp)
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   28c80:	05010793          	addi	a5,sp,80
   28c84:	04f13023          	sd	a5,64(sp)
      { _M_string_length = __length; }
   28c88:	04013423          	sd	zero,72(sp)
   28c8c:	04010823          	sb	zero,80(sp)
      { return _M_string_length; }
   28c90:	0084b603          	ld	a2,8(s1)
  if (cu_comp_dir.empty() || cu_comp_dir.back() == '/')
   28c94:	00060c63          	beq	a2,zero,28cac <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x114>
      { return _M_dataplus._M_p; }
   28c98:	0004b583          	ld	a1,0(s1)
   28c9c:	00c587b3          	add	a5,a1,a2
   28ca0:	fff7c703          	lbu	a4,-1(a5)
   28ca4:	02f00793          	addi	a5,zero,47
   28ca8:	00f71a63          	bne	a4,a5,28cbc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x124>
	this->_M_assign(__str);
   28cac:	00048593          	addi	a1,s1,0
   28cb0:	02010513          	addi	a0,sp,32
   28cb4:	9fded0ef          	jal	ra,166b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   28cb8:	0f00006f          	jal	zero,28da8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x210>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   28cbc:	15010793          	addi	a5,sp,336
   28cc0:	14f13023          	sd	a5,320(sp)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   28cc4:	00000693          	addi	a3,zero,0
   28cc8:	00c58633          	add	a2,a1,a2
   28ccc:	14010513          	addi	a0,sp,320
   28cd0:	0001a317          	auipc	t1,0x1a
   28cd4:	65833303          	ld	t1,1624(t1) # 43328 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17b3c>
   28cd8:	000300e7          	jalr	ra,0(t1)
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
   28cdc:	02f00713          	addi	a4,zero,47
   28ce0:	00100693          	addi	a3,zero,1
   28ce4:	00000613          	addi	a2,zero,0
   28ce8:	14813583          	ld	a1,328(sp)
   28cec:	14010513          	addi	a0,sp,320
   28cf0:	d01ed0ef          	jal	ra,169f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)@plt>
   28cf4:	0540006f          	jal	zero,28d48 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1b0>
      { return _M_dataplus._M_p; }
   28cf8:	00050493          	addi	s1,a0,0
   28cfc:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   28d00:	15010793          	addi	a5,sp,336
   28d04:	00f50463          	beq	a0,a5,28d0c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x174>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   28d08:	a99ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28d0c:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   28d10:	05010793          	addi	a5,sp,80
   28d14:	00f50463          	beq	a0,a5,28d1c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x184>
   28d18:	a89ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28d1c:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   28d20:	03010793          	addi	a5,sp,48
   28d24:	00f50463          	beq	a0,a5,28d2c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x194>
   28d28:	a79ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   28d2c:	00843503          	ld	a0,8(s0)
   28d30:	00050863          	beq	a0,zero,28d40 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1a8>
	  _M_pi->_M_release();
   28d34:	0001a317          	auipc	t1,0x1a
   28d38:	6ac33303          	ld	t1,1708(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   28d3c:	000300e7          	jalr	ra,0(t1)
   28d40:	00048513          	addi	a0,s1,0
   28d44:	c4ded0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   28d48:	02013503          	ld	a0,32(sp)
   28d4c:	14013783          	ld	a5,320(sp)
	if (__str._M_is_local())
   28d50:	15010713          	addi	a4,sp,336
   28d54:	12e78463          	beq	a5,a4,28e7c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2e4>
	    if (!_M_is_local())
   28d58:	03010713          	addi	a4,sp,48
   28d5c:	00e51463          	bne	a0,a4,28d64 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1cc>
   28d60:	0100106f          	jal	zero,29d70 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11d8>
		    __capacity = _M_allocated_capacity;
   28d64:	03013703          	ld	a4,48(sp)
      { _M_dataplus._M_p = __p; }
   28d68:	02f13023          	sd	a5,32(sp)
      { _M_string_length = __length; }
   28d6c:	14813783          	ld	a5,328(sp)
   28d70:	02f13423          	sd	a5,40(sp)
      { _M_allocated_capacity = __capacity; }
   28d74:	15013783          	ld	a5,336(sp)
   28d78:	02f13823          	sd	a5,48(sp)
	    if (__data)
   28d7c:	00051463          	bne	a0,zero,28d84 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1ec>
   28d80:	0040106f          	jal	zero,29d84 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11ec>
      { _M_dataplus._M_p = __p; }
   28d84:	14a13023          	sd	a0,320(sp)
      { _M_allocated_capacity = __capacity; }
   28d88:	14e13823          	sd	a4,336(sp)
      { _M_string_length = __length; }
   28d8c:	14013423          	sd	zero,328(sp)
      { return _M_dataplus._M_p; }
   28d90:	14013783          	ld	a5,320(sp)
   28d94:	00078023          	sb	zero,0(a5)
   28d98:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   28d9c:	15010793          	addi	a5,sp,336
   28da0:	00f50463          	beq	a0,a5,28da8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x210>
   28da4:	9fded0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   28da8:	00093b03          	ld	s6,0(s2)
      : _M_pi(__r._M_pi)
   28dac:	00893483          	ld	s1,8(s2)
	if (_M_pi != nullptr)
   28db0:	00049463          	bne	s1,zero,28db8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x220>
   28db4:	7950006f          	jal	zero,29d48 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11b0>
    if (__is_single_threaded())
   28db8:	0001a797          	auipc	a5,0x1a
   28dbc:	6e07b783          	ld	a5,1760(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   28dc0:	0007c783          	lbu	a5,0(a5)
   28dc4:	0e078c63          	beq	a5,zero,28ebc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x324>
  { *__mem += __val; }
   28dc8:	0304a783          	lw	a5,48(s1)
   28dcc:	0017879b          	addiw	a5,a5,1
   28dd0:	02f4a823          	sw	a5,48(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   28dd4:	01613423          	sd	s6,8(sp)
      : _M_pi(__r._M_pi)
   28dd8:	00913823          	sd	s1,16(sp)
    if (__is_single_threaded())
   28ddc:	0001a797          	auipc	a5,0x1a
   28de0:	6bc7b783          	ld	a5,1724(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   28de4:	0007c783          	lbu	a5,0(a5)
   28de8:	0e078263          	beq	a5,zero,28ecc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x334>
  { *__mem += __val; }
   28dec:	0304a783          	lw	a5,48(s1)
   28df0:	0017879b          	addiw	a5,a5,1
   28df4:	02f4a823          	sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   28df8:	008b3783          	ld	a5,8(s6)
   28dfc:	015787b3          	add	a5,a5,s5
   28e00:	00f13c23          	sd	a5,24(sp)
    if (__is_single_threaded())
   28e04:	0001a797          	auipc	a5,0x1a
   28e08:	6947b783          	ld	a5,1684(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   28e0c:	0007c783          	lbu	a5,0(a5)
   28e10:	0c078663          	beq	a5,zero,28edc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x344>
    _Atomic_word __result = *__mem;
   28e14:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   28e18:	fff5079b          	addiw	a5,a0,-1
   28e1c:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   28e20:	00100793          	addi	a5,zero,1
   28e24:	00f50463          	beq	a0,a5,28e2c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x294>
   28e28:	7350006f          	jal	zero,29d5c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11c4>
	_M_dispose();
   28e2c:	0004b783          	ld	a5,0(s1)
   28e30:	0107b783          	ld	a5,16(a5)
   28e34:	00048513          	addi	a0,s1,0
   28e38:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   28e3c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   28e40:	0001a797          	auipc	a5,0x1a
   28e44:	6587b783          	ld	a5,1624(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   28e48:	0007c783          	lbu	a5,0(a5)
   28e4c:	0a078063          	beq	a5,zero,28eec <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x354>
    _Atomic_word __result = *__mem;
   28e50:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   28e54:	fff5079b          	addiw	a5,a0,-1
   28e58:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   28e5c:	00100793          	addi	a5,zero,1
   28e60:	00f50463          	beq	a0,a5,28e68 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2d0>
   28e64:	6f90006f          	jal	zero,29d5c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11c4>
	    _M_destroy();
   28e68:	0004b783          	ld	a5,0(s1)
   28e6c:	0187b783          	ld	a5,24(a5)
   28e70:	00048513          	addi	a0,s1,0
   28e74:	000780e7          	jalr	ra,0(a5)
   28e78:	6e50006f          	jal	zero,29d5c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11c4>
      { return _M_string_length; }
   28e7c:	14813603          	ld	a2,328(sp)
		if (__str.size())
   28e80:	00061e63          	bne	a2,zero,28e9c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x304>
      { return _M_string_length; }
   28e84:	14813703          	ld	a4,328(sp)
      { _M_string_length = __length; }
   28e88:	02e13423          	sd	a4,40(sp)
   28e8c:	02013783          	ld	a5,32(sp)
   28e90:	00e787b3          	add	a5,a5,a4
   28e94:	00078023          	sb	zero,0(a5)
      }
   28e98:	ef5ff06f          	jal	zero,28d8c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1f4>
	if (__n == 1)
   28e9c:	00100793          	addi	a5,zero,1
   28ea0:	00f60863          	beq	a2,a5,28eb0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x318>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   28ea4:	15010593          	addi	a1,sp,336
   28ea8:	999ed0ef          	jal	ra,16840 <memcpy@plt>
   28eac:	fd9ff06f          	jal	zero,28e84 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2ec>
	__c1 = __c2;
   28eb0:	15014783          	lbu	a5,336(sp)
   28eb4:	00f50023          	sb	a5,0(a0)
      }
   28eb8:	fcdff06f          	jal	zero,28e84 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2ec>
      __atomic_add(__mem, __val);
   28ebc:	00100593          	addi	a1,zero,1
   28ec0:	03048513          	addi	a0,s1,48
   28ec4:	eeced0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   28ec8:	f0dff06f          	jal	zero,28dd4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x23c>
   28ecc:	00100593          	addi	a1,zero,1
   28ed0:	03048513          	addi	a0,s1,48
   28ed4:	edced0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   28ed8:	f21ff06f          	jal	zero,28df8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x260>
      return __exchange_and_add(__mem, __val);
   28edc:	fff00593          	addi	a1,zero,-1
   28ee0:	03048513          	addi	a0,s1,48
   28ee4:	f0ced0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   28ee8:	f39ff06f          	jal	zero,28e20 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x288>
   28eec:	fff00593          	addi	a1,zero,-1
   28ef0:	03448513          	addi	a0,s1,52
   28ef4:	efced0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   28ef8:	f65ff06f          	jal	zero,28e5c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2c4>
      : _M_ptr(__r._M_ptr), _M_refcount()
   28efc:	16013703          	ld	a4,352(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   28f00:	16813783          	ld	a5,360(sp)
	__r._M_pi = _M_pi;
   28f04:	16013423          	sd	zero,360(sp)
	__r._M_ptr = nullptr;
   28f08:	16013023          	sd	zero,352(sp)
   28f0c:	00e4b023          	sd	a4,0(s1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   28f10:	0084b903          	ld	s2,8(s1)
	__r._M_pi = _M_pi;
   28f14:	00f4b423          	sd	a5,8(s1)
	if (_M_pi != nullptr)
   28f18:	0a090a63          	beq	s2,zero,28fcc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x434>
    if (__is_single_threaded())
   28f1c:	0001a797          	auipc	a5,0x1a
   28f20:	57c7b783          	ld	a5,1404(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   28f24:	0007c783          	lbu	a5,0(a5)
   28f28:	06078263          	beq	a5,zero,28f8c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3f4>
    _Atomic_word __result = *__mem;
   28f2c:	03092783          	lw	a5,48(s2)
    *__mem += __val;
   28f30:	fff7871b          	addiw	a4,a5,-1
   28f34:	02e92823          	sw	a4,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   28f38:	00100713          	addi	a4,zero,1
   28f3c:	08e79863          	bne	a5,a4,28fcc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x434>
	_M_dispose();
   28f40:	00093783          	ld	a5,0(s2)
   28f44:	0107b783          	ld	a5,16(a5)
   28f48:	00090513          	addi	a0,s2,0
   28f4c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   28f50:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   28f54:	0001a797          	auipc	a5,0x1a
   28f58:	5447b783          	ld	a5,1348(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   28f5c:	0007c783          	lbu	a5,0(a5)
   28f60:	10078a63          	beq	a5,zero,29074 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4dc>
    _Atomic_word __result = *__mem;
   28f64:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   28f68:	fff5079b          	addiw	a5,a0,-1
   28f6c:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   28f70:	00100793          	addi	a5,zero,1
   28f74:	02f51663          	bne	a0,a5,28fa0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x408>
	    _M_destroy();
   28f78:	00093783          	ld	a5,0(s2)
   28f7c:	0187b783          	ld	a5,24(a5)
   28f80:	00090513          	addi	a0,s2,0
   28f84:	000780e7          	jalr	ra,0(a5)
   28f88:	0180006f          	jal	zero,28fa0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x408>
      return __exchange_and_add(__mem, __val);
   28f8c:	fff00593          	addi	a1,zero,-1
   28f90:	03090513          	addi	a0,s2,48
   28f94:	e5ced0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   28f98:	00100793          	addi	a5,zero,1
   28f9c:	faf502e3          	beq	a0,a5,28f40 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3a8>
	if (_M_pi != nullptr)
   28fa0:	16813483          	ld	s1,360(sp)
   28fa4:	02048463          	beq	s1,zero,28fcc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x434>
    if (__is_single_threaded())
   28fa8:	0001a797          	auipc	a5,0x1a
   28fac:	4f07b783          	ld	a5,1264(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   28fb0:	0007c783          	lbu	a5,0(a5)
   28fb4:	0c078863          	beq	a5,zero,29084 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4ec>
    _Atomic_word __result = *__mem;
   28fb8:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   28fbc:	fff5079b          	addiw	a5,a0,-1
   28fc0:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   28fc4:	00100793          	addi	a5,zero,1
   28fc8:	0cf50663          	beq	a0,a5,29094 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4fc>
      { return _M_ptr; }
   28fcc:	00043783          	ld	a5,0(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   28fd0:	0007b903          	ld	s2,0(a5)
      : _M_pi(__r._M_pi)
   28fd4:	0087b483          	ld	s1,8(a5)
	if (_M_pi != nullptr)
   28fd8:	54048ae3          	beq	s1,zero,29d2c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1194>
    if (__is_single_threaded())
   28fdc:	0001a797          	auipc	a5,0x1a
   28fe0:	4bc7b783          	ld	a5,1212(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   28fe4:	0007c783          	lbu	a5,0(a5)
   28fe8:	10078463          	beq	a5,zero,290f0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x558>
  { *__mem += __val; }
   28fec:	0304a783          	lw	a5,48(s1)
   28ff0:	0017879b          	addiw	a5,a5,1
   28ff4:	02f4a823          	sw	a5,48(s1)
   28ff8:	0304a783          	lw	a5,48(s1)
   28ffc:	0017879b          	addiw	a5,a5,1
   29000:	02f4a823          	sw	a5,48(s1)
   29004:	00893a83          	ld	s5,8(s2)
   29008:	01213423          	sd	s2,8(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   2900c:	01013903          	ld	s2,16(sp)
	__r._M_pi = _M_pi;
   29010:	00913823          	sd	s1,16(sp)
	if (_M_pi != nullptr)
   29014:	500908e3          	beq	s2,zero,29d24 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x118c>
    if (__is_single_threaded())
   29018:	0001a797          	auipc	a5,0x1a
   2901c:	4807b783          	ld	a5,1152(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   29020:	0007c783          	lbu	a5,0(a5)
   29024:	0e078c63          	beq	a5,zero,2911c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x584>
    _Atomic_word __result = *__mem;
   29028:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   2902c:	fff5079b          	addiw	a5,a0,-1
   29030:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   29034:	00100793          	addi	a5,zero,1
   29038:	0ef50a63          	beq	a0,a5,2912c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x594>
struct cursor {
   2903c:	01513c23          	sd	s5,24(sp)
	if (_M_pi != nullptr)
   29040:	02048463          	beq	s1,zero,29068 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4d0>
    if (__is_single_threaded())
   29044:	0001a797          	auipc	a5,0x1a
   29048:	4547b783          	ld	a5,1108(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2904c:	0007c783          	lbu	a5,0(a5)
   29050:	12078c63          	beq	a5,zero,29188 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5f0>
    _Atomic_word __result = *__mem;
   29054:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   29058:	fff5079b          	addiw	a5,a0,-1
   2905c:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   29060:	00100793          	addi	a5,zero,1
   29064:	12f50a63          	beq	a0,a5,29198 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x600>
  cur.skip_initial_length();
   29068:	00810513          	addi	a0,sp,8
   2906c:	f40f40ef          	jal	ra,1d7ac <dwarf::cursor::skip_initial_length()>
   29070:	1840006f          	jal	zero,291f4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x65c>
      return __exchange_and_add(__mem, __val);
   29074:	fff00593          	addi	a1,zero,-1
   29078:	03490513          	addi	a0,s2,52
   2907c:	d74ed0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   29080:	ef1ff06f          	jal	zero,28f70 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3d8>
   29084:	fff00593          	addi	a1,zero,-1
   29088:	03048513          	addi	a0,s1,48
   2908c:	d64ed0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   29090:	f35ff06f          	jal	zero,28fc4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x42c>
	_M_dispose();
   29094:	0004b783          	ld	a5,0(s1)
   29098:	0107b783          	ld	a5,16(a5)
   2909c:	00048513          	addi	a0,s1,0
   290a0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   290a4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   290a8:	0001a797          	auipc	a5,0x1a
   290ac:	3f07b783          	ld	a5,1008(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   290b0:	0007c783          	lbu	a5,0(a5)
   290b4:	02078663          	beq	a5,zero,290e0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x548>
    _Atomic_word __result = *__mem;
   290b8:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   290bc:	fff5079b          	addiw	a5,a0,-1
   290c0:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   290c4:	00100793          	addi	a5,zero,1
   290c8:	f0f512e3          	bne	a0,a5,28fcc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x434>
	    _M_destroy();
   290cc:	0004b783          	ld	a5,0(s1)
   290d0:	0187b783          	ld	a5,24(a5)
   290d4:	00048513          	addi	a0,s1,0
   290d8:	000780e7          	jalr	ra,0(a5)
   290dc:	ef1ff06f          	jal	zero,28fcc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x434>
      return __exchange_and_add(__mem, __val);
   290e0:	fff00593          	addi	a1,zero,-1
   290e4:	03448513          	addi	a0,s1,52
   290e8:	d08ed0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   290ec:	fd9ff06f          	jal	zero,290c4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x52c>
      __atomic_add(__mem, __val);
   290f0:	00100593          	addi	a1,zero,1
   290f4:	03048513          	addi	a0,s1,48
   290f8:	cb8ed0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
    if (__is_single_threaded())
   290fc:	0001a797          	auipc	a5,0x1a
   29100:	39c7b783          	ld	a5,924(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   29104:	0007c783          	lbu	a5,0(a5)
   29108:	ee0798e3          	bne	a5,zero,28ff8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x460>
      __atomic_add(__mem, __val);
   2910c:	00100593          	addi	a1,zero,1
   29110:	03048513          	addi	a0,s1,48
   29114:	c9ced0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   29118:	eedff06f          	jal	zero,29004 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x46c>
      return __exchange_and_add(__mem, __val);
   2911c:	fff00593          	addi	a1,zero,-1
   29120:	03090513          	addi	a0,s2,48
   29124:	ccced0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   29128:	f0dff06f          	jal	zero,29034 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x49c>
	_M_dispose();
   2912c:	00093783          	ld	a5,0(s2)
   29130:	0107b783          	ld	a5,16(a5)
   29134:	00090513          	addi	a0,s2,0
   29138:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2913c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   29140:	0001a797          	auipc	a5,0x1a
   29144:	3587b783          	ld	a5,856(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   29148:	0007c783          	lbu	a5,0(a5)
   2914c:	02078663          	beq	a5,zero,29178 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5e0>
    _Atomic_word __result = *__mem;
   29150:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   29154:	fff5079b          	addiw	a5,a0,-1
   29158:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2915c:	00100793          	addi	a5,zero,1
   29160:	ecf51ee3          	bne	a0,a5,2903c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4a4>
	    _M_destroy();
   29164:	00093783          	ld	a5,0(s2)
   29168:	0187b783          	ld	a5,24(a5)
   2916c:	00090513          	addi	a0,s2,0
   29170:	000780e7          	jalr	ra,0(a5)
   29174:	ec9ff06f          	jal	zero,2903c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4a4>
      return __exchange_and_add(__mem, __val);
   29178:	fff00593          	addi	a1,zero,-1
   2917c:	03490513          	addi	a0,s2,52
   29180:	c70ed0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   29184:	fd9ff06f          	jal	zero,2915c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5c4>
   29188:	fff00593          	addi	a1,zero,-1
   2918c:	03048513          	addi	a0,s1,48
   29190:	c60ed0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   29194:	ecdff06f          	jal	zero,29060 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4c8>
	_M_dispose();
   29198:	0004b783          	ld	a5,0(s1)
   2919c:	0107b783          	ld	a5,16(a5)
   291a0:	00048513          	addi	a0,s1,0
   291a4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   291a8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   291ac:	0001a797          	auipc	a5,0x1a
   291b0:	2ec7b783          	ld	a5,748(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   291b4:	0007c783          	lbu	a5,0(a5)
   291b8:	02078663          	beq	a5,zero,291e4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x64c>
    _Atomic_word __result = *__mem;
   291bc:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   291c0:	fff5079b          	addiw	a5,a0,-1
   291c4:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   291c8:	00100793          	addi	a5,zero,1
   291cc:	e8f51ee3          	bne	a0,a5,29068 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4d0>
	    _M_destroy();
   291d0:	0004b783          	ld	a5,0(s1)
   291d4:	0187b783          	ld	a5,24(a5)
   291d8:	00048513          	addi	a0,s1,0
   291dc:	000780e7          	jalr	ra,0(a5)
   291e0:	e89ff06f          	jal	zero,29068 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4d0>
      return __exchange_and_add(__mem, __val);
   291e4:	fff00593          	addi	a1,zero,-1
   291e8:	03448513          	addi	a0,s1,52
   291ec:	c04ed0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   291f0:	fd9ff06f          	jal	zero,291c8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x630>
      { return _M_ptr; }
   291f4:	00043783          	ld	a5,0(s0)
   291f8:	0007b783          	ld	a5,0(a5)
  m->sec->addr_size = cu_addr_size;
   291fc:	0347a023          	sw	s4,32(a5)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   29200:	00813783          	ld	a5,8(sp)
   29204:	0107b703          	ld	a4,16(a5)
   29208:	01813783          	ld	a5,24(sp)
   2920c:	40f70633          	sub	a2,a4,a5
   29210:	00100693          	addi	a3,zero,1
   29214:	00c6f463          	bgeu	a3,a2,2921c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x684>
   29218:	00e7e663          	bltu	a5,a4,29224 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x68c>
      underflow();
   2921c:	00810513          	addi	a0,sp,8
   29220:	f24f40ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   29224:	01813703          	ld	a4,24(sp)
    if (sec->ord == byte_order::lsb) {
   29228:	00813783          	ld	a5,8(sp)
   2922c:	01c7a783          	lw	a5,28(a5)
   29230:	04079263          	bne	a5,zero,29274 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6dc>
        val |= ((uint64_t)p[i]) << (i * 8);
   29234:	00174783          	lbu	a5,1(a4)
   29238:	00879793          	slli	a5,a5,0x8
   2923c:	00074683          	lbu	a3,0(a4)
   29240:	00d7e7b3          	or	a5,a5,a3
    pos += sizeof(T);
   29244:	00270713          	addi	a4,a4,2
   29248:	00e13c23          	sd	a4,24(sp)
    return (T)val;
   2924c:	03079493          	slli	s1,a5,0x30
   29250:	0304d493          	srli	s1,s1,0x30
  if (version < 2 || version > 4)
   29254:	ffe7879b          	addiw	a5,a5,-2
   29258:	03079793          	slli	a5,a5,0x30
   2925c:	0307d793          	srli	a5,a5,0x30
   29260:	00200713          	addi	a4,zero,2
   29264:	02f76263          	bltu	a4,a5,29288 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6f0>
  section_length header_length = cur.offset();
   29268:	00810513          	addi	a0,sp,8
   2926c:	e65f40ef          	jal	ra,1e0d0 <dwarf::cursor::offset()>
   29270:	0bc0006f          	jal	zero,2932c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x794>
        val = (val << 8) | (uint64_t)p[i];
   29274:	00074783          	lbu	a5,0(a4)
   29278:	00879793          	slli	a5,a5,0x8
   2927c:	00174683          	lbu	a3,1(a4)
   29280:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   29284:	fc1ff06f          	jal	zero,29244 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6ac>
                       std::to_string(version));
   29288:	01000513          	addi	a0,zero,16
   2928c:	c04ed0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   29290:	00050913          	addi	s2,a0,0
   29294:	00048593          	addi	a1,s1,0
   29298:	14010493          	addi	s1,sp,320
   2929c:	00048513          	addi	a0,s1,0
   292a0:	0001a317          	auipc	t1,0x1a
   292a4:	20833303          	ld	t1,520(t1) # 434a8 <std::__cxx11::to_string(int)@@Base+0x278c0>
   292a8:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   292ac:	0000f617          	auipc	a2,0xf
   292b0:	5fc60613          	addi	a2,a2,1532 # 388a8 <typeinfo name for dwarf::expr_context+0xc0>
   292b4:	00000593          	addi	a1,zero,0
   292b8:	00048513          	addi	a0,s1,0
   292bc:	b44ed0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   292c0:	00050593          	addi	a1,a0,0
   292c4:	12010493          	addi	s1,sp,288
   292c8:	00048513          	addi	a0,s1,0
   292cc:	c04ed0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   292d0:	00048593          	addi	a1,s1,0
   292d4:	00090513          	addi	a0,s2,0
   292d8:	d58ed0ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   292dc:	0001a797          	auipc	a5,0x1a
   292e0:	2947b783          	ld	a5,660(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   292e4:	01078793          	addi	a5,a5,16
   292e8:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   292ec:	12013503          	ld	a0,288(sp)
	if (!_M_is_local())
   292f0:	13010793          	addi	a5,sp,304
   292f4:	00f50463          	beq	a0,a5,292fc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x764>
   292f8:	ca8ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   292fc:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   29300:	15010793          	addi	a5,sp,336
   29304:	00f50463          	beq	a0,a5,2930c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x774>
   29308:	c98ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2930c:	0001a617          	auipc	a2,0x1a
   29310:	08c63603          	ld	a2,140(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   29314:	0001a597          	auipc	a1,0x1a
   29318:	fb45b583          	ld	a1,-76(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   2931c:	00090513          	addi	a0,s2,0
   29320:	e40ed0ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   29324:	00050493          	addi	s1,a0,0
   29328:	6ec0006f          	jal	zero,29a14 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe7c>
  section_offset get_section_offset() const { return pos - sec->begin; }
   2932c:	01813703          	ld	a4,24(sp)
      { return _M_ptr; }
   29330:	00813683          	ld	a3,8(sp)
   29334:	00043903          	ld	s2,0(s0)
   29338:	0086b783          	ld	a5,8(a3)
   2933c:	40f707b3          	sub	a5,a4,a5
  m->program_offset = cur.get_section_offset() + header_length;
   29340:	00a787b3          	add	a5,a5,a0
   29344:	00f93823          	sd	a5,16(s2)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   29348:	0106b783          	ld	a5,16(a3)
   2934c:	00f76663          	bltu	a4,a5,29358 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7c0>
      underflow();
   29350:	00810513          	addi	a0,sp,8
   29354:	df0f40ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   29358:	01813783          	ld	a5,24(sp)
   2935c:	00813703          	ld	a4,8(sp)
    if (sec->ord == byte_order::lsb) {
   29360:	01c72683          	lw	a3,28(a4)
   29364:	16068ee3          	beq	a3,zero,29ce0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1148>
        val = (val << 8) | (uint64_t)p[i];
   29368:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   2936c:	1790006f          	jal	zero,29ce4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x114c>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   29370:	01073703          	ld	a4,16(a4)
   29374:	00e7e663          	bltu	a5,a4,29380 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7e8>
      underflow();
   29378:	00810513          	addi	a0,sp,8
   2937c:	dc8f40ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   29380:	01813783          	ld	a5,24(sp)
    if (sec->ord == byte_order::lsb) {
   29384:	00813703          	ld	a4,8(sp)
   29388:	01c72703          	lw	a4,28(a4)
   2938c:	10070ee3          	beq	a4,zero,29ca8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1110>
        val = (val << 8) | (uint64_t)p[i];
   29390:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   29394:	1190006f          	jal	zero,29cac <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1114>
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   29398:	0001a797          	auipc	a5,0x1a
   2939c:	1d87b783          	ld	a5,472(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   293a0:	01078793          	addi	a5,a5,16
   293a4:	00f93023          	sd	a5,0(s2)
                       " be 0 in line number table");
   293a8:	0001a617          	auipc	a2,0x1a
   293ac:	ff063603          	ld	a2,-16(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   293b0:	0001a597          	auipc	a1,0x1a
   293b4:	f185b583          	ld	a1,-232(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   293b8:	00090513          	addi	a0,s2,0
   293bc:	da4ed0ef          	jal	ra,16960 <__cxa_throw@plt>
    const unsigned char *p = (const unsigned char *)pos;
   293c0:	01813783          	ld	a5,24(sp)
   293c4:	00813683          	ld	a3,8(sp)
    if (sec->ord == byte_order::lsb) {
   293c8:	01c6a703          	lw	a4,28(a3)
   293cc:	0a0708e3          	beq	a4,zero,29c7c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10e4>
        val = (val << 8) | (uint64_t)p[i];
   293d0:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   293d4:	0ad0006f          	jal	zero,29c80 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10e8>
    const unsigned char *p = (const unsigned char *)pos;
   293d8:	01813783          	ld	a5,24(sp)
   293dc:	00813703          	ld	a4,8(sp)
    if (sec->ord == byte_order::lsb) {
   293e0:	01c72683          	lw	a3,28(a4)
   293e4:	060688e3          	beq	a3,zero,29c54 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10bc>
        val = (val << 8) | (uint64_t)p[i];
   293e8:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   293ec:	06d0006f          	jal	zero,29c58 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10c0>
    const unsigned char *p = (const unsigned char *)pos;
   293f0:	01813783          	ld	a5,24(sp)
   293f4:	00813703          	ld	a4,8(sp)
    if (sec->ord == byte_order::lsb) {
   293f8:	01c72683          	lw	a3,28(a4)
   293fc:	020684e3          	beq	a3,zero,29c24 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x108c>
        val = (val << 8) | (uint64_t)p[i];
   29400:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   29404:	0250006f          	jal	zero,29c28 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1090>
    throw format_error("line_range cannot be 0 in line number table");
   29408:	01000513          	addi	a0,zero,16
   2940c:	a84ed0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   29410:	00050913          	addi	s2,a0,0
   29414:	0000f597          	auipc	a1,0xf
   29418:	50458593          	addi	a1,a1,1284 # 38918 <typeinfo name for dwarf::expr_context+0x130>
   2941c:	df4ed0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   29420:	0001a797          	auipc	a5,0x1a
   29424:	1507b783          	ld	a5,336(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   29428:	01078793          	addi	a5,a5,16
   2942c:	00f93023          	sd	a5,0(s2)
   29430:	0001a617          	auipc	a2,0x1a
   29434:	f6863603          	ld	a2,-152(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   29438:	0001a597          	auipc	a1,0x1a
   2943c:	e905b583          	ld	a1,-368(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   29440:	00090513          	addi	a0,s2,0
   29444:	d1ced0ef          	jal	ra,16960 <__cxa_throw@plt>
    const unsigned char *p = (const unsigned char *)pos;
   29448:	01813783          	ld	a5,24(sp)
    if (sec->ord == byte_order::lsb) {
   2944c:	00813703          	ld	a4,8(sp)
   29450:	01c72703          	lw	a4,28(a4)
   29454:	76070663          	beq	a4,zero,29bc0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1028>
        val = (val << 8) | (uint64_t)p[i];
   29458:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   2945c:	7680006f          	jal	zero,29bc4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x102c>
	  _M_default_append(__new_size - size());
   29460:	40b785b3          	sub	a1,a5,a1
   29464:	02050513          	addi	a0,a0,32
   29468:	0001a317          	auipc	t1,0x1a
   2946c:	08033303          	ld	t1,128(t1) # 434e8 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)@@Base+0x17e70>
   29470:	000300e7          	jalr	ra,0(t1)
   29474:	7840006f          	jal	zero,29bf8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1060>
    const unsigned char *p = (const unsigned char *)pos;
   29478:	01813683          	ld	a3,24(sp)
    if (sec->ord == byte_order::lsb) {
   2947c:	00813783          	ld	a5,8(sp)
   29480:	01c7a783          	lw	a5,28(a5)
   29484:	6e078063          	beq	a5,zero,29b64 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xfcc>
        val = (val << 8) | (uint64_t)p[i];
   29488:	0006c703          	lbu	a4,0(a3)
      for (unsigned i = 0; i < sizeof(T); i++)
   2948c:	6dc0006f          	jal	zero,29b68 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xfd0>
                         std::to_string(i) + ", got " + std::to_string(length));
   29490:	01000513          	addi	a0,zero,16
   29494:	9fced0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   29498:	00050993          	addi	s3,a0,0
      throw format_error("expected " + std::to_string(opcode_lengths[i]) +
   2949c:	000b0593          	addi	a1,s6,0
   294a0:	10010a13          	addi	s4,sp,256
   294a4:	000a0513          	addi	a0,s4,0
   294a8:	0001a317          	auipc	t1,0x1a
   294ac:	00033303          	ld	t1,0(t1) # 434a8 <std::__cxx11::to_string(int)@@Base+0x278c0>
   294b0:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   294b4:	0000f617          	auipc	a2,0xf
   294b8:	49460613          	addi	a2,a2,1172 # 38948 <typeinfo name for dwarf::expr_context+0x160>
   294bc:	00000593          	addi	a1,zero,0
   294c0:	000a0513          	addi	a0,s4,0
   294c4:	93ced0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   294c8:	00050593          	addi	a1,a0,0
   294cc:	0e010a13          	addi	s4,sp,224
   294d0:	000a0513          	addi	a0,s4,0
   294d4:	9fced0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   294d8:	0000f597          	auipc	a1,0xf
   294dc:	48058593          	addi	a1,a1,1152 # 38958 <typeinfo name for dwarf::expr_context+0x170>
   294e0:	000a0513          	addi	a0,s4,0
   294e4:	d5ced0ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   294e8:	00050593          	addi	a1,a0,0
   294ec:	0c010a13          	addi	s4,sp,192
   294f0:	000a0513          	addi	a0,s4,0
   294f4:	9dced0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                         std::to_string(i) + ", got " + std::to_string(length));
   294f8:	0009059b          	addiw	a1,s2,0
   294fc:	12010913          	addi	s2,sp,288
   29500:	00090513          	addi	a0,s2,0
   29504:	0001a317          	auipc	t1,0x1a
   29508:	00433303          	ld	t1,4(t1) # 43508 <std::__cxx11::to_string(unsigned int)@@Base+0x18060>
   2950c:	000300e7          	jalr	ra,0(t1)
                         " arguments for line number opcode " +
   29510:	00090613          	addi	a2,s2,0
   29514:	000a0593          	addi	a1,s4,0
   29518:	0a010513          	addi	a0,sp,160
   2951c:	0001a317          	auipc	t1,0x1a
   29520:	ebc33303          	ld	t1,-324(t1) # 433d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17eb8>
   29524:	000300e7          	jalr	ra,0(t1)
   29528:	0000f597          	auipc	a1,0xf
   2952c:	45858593          	addi	a1,a1,1112 # 38980 <typeinfo name for dwarf::expr_context+0x198>
   29530:	0a010513          	addi	a0,sp,160
   29534:	d0ced0ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   29538:	00050593          	addi	a1,a0,0
   2953c:	08010913          	addi	s2,sp,128
   29540:	00090513          	addi	a0,s2,0
   29544:	98ced0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                         std::to_string(i) + ", got " + std::to_string(length));
   29548:	00048593          	addi	a1,s1,0
   2954c:	14010493          	addi	s1,sp,320
   29550:	00048513          	addi	a0,s1,0
   29554:	0001a317          	auipc	t1,0x1a
   29558:	f5433303          	ld	t1,-172(t1) # 434a8 <std::__cxx11::to_string(int)@@Base+0x278c0>
   2955c:	000300e7          	jalr	ra,0(t1)
   29560:	00048613          	addi	a2,s1,0
   29564:	00090593          	addi	a1,s2,0
   29568:	06010513          	addi	a0,sp,96
   2956c:	0001a317          	auipc	t1,0x1a
   29570:	e6c33303          	ld	t1,-404(t1) # 433d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17eb8>
   29574:	000300e7          	jalr	ra,0(t1)
      : std::runtime_error(what_arg) {}
   29578:	06010593          	addi	a1,sp,96
   2957c:	00098513          	addi	a0,s3,0
   29580:	ab0ed0ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   29584:	0001a797          	auipc	a5,0x1a
   29588:	fec7b783          	ld	a5,-20(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   2958c:	01078793          	addi	a5,a5,16
   29590:	00f9b023          	sd	a5,0(s3)
      { return _M_dataplus._M_p; }
   29594:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   29598:	07010793          	addi	a5,sp,112
   2959c:	00f50463          	beq	a0,a5,295a4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa0c>
   295a0:	a00ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   295a4:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   295a8:	15010793          	addi	a5,sp,336
   295ac:	00f50463          	beq	a0,a5,295b4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa1c>
   295b0:	9f0ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   295b4:	08013503          	ld	a0,128(sp)
	if (!_M_is_local())
   295b8:	09010793          	addi	a5,sp,144
   295bc:	00f50463          	beq	a0,a5,295c4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa2c>
   295c0:	9e0ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   295c4:	0a013503          	ld	a0,160(sp)
	if (!_M_is_local())
   295c8:	0b010793          	addi	a5,sp,176
   295cc:	00f50463          	beq	a0,a5,295d4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa3c>
   295d0:	9d0ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   295d4:	12013503          	ld	a0,288(sp)
	if (!_M_is_local())
   295d8:	13010793          	addi	a5,sp,304
   295dc:	00f50463          	beq	a0,a5,295e4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa4c>
   295e0:	9c0ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   295e4:	0c013503          	ld	a0,192(sp)
	if (!_M_is_local())
   295e8:	0d010793          	addi	a5,sp,208
   295ec:	00f50463          	beq	a0,a5,295f4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa5c>
   295f0:	9b0ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   295f4:	0e013503          	ld	a0,224(sp)
	if (!_M_is_local())
   295f8:	0f010793          	addi	a5,sp,240
   295fc:	00f50463          	beq	a0,a5,29604 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa6c>
   29600:	9a0ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29604:	10013503          	ld	a0,256(sp)
	if (!_M_is_local())
   29608:	11010793          	addi	a5,sp,272
   2960c:	00f50463          	beq	a0,a5,29614 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa7c>
   29610:	990ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   29614:	0001a617          	auipc	a2,0x1a
   29618:	d8463603          	ld	a2,-636(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   2961c:	0001a597          	auipc	a1,0x1a
   29620:	cac5b583          	ld	a1,-852(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   29624:	00098513          	addi	a0,s3,0
   29628:	b38ed0ef          	jal	ra,16960 <__cxa_throw@plt>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2962c:	11010793          	addi	a5,sp,272
   29630:	10f13023          	sd	a5,256(sp)
      { _M_string_length = __length; }
   29634:	10013423          	sd	zero,264(sp)
	__c1 = __c2;
   29638:	10010823          	sb	zero,272(sp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   2963c:	0404b503          	ld	a0,64(s1)
   29640:	0484b783          	ld	a5,72(s1)
   29644:	04f50e63          	beq	a0,a5,296a0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb08>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29648:	01050793          	addi	a5,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2964c:	00f53023          	sd	a5,0(a0)
      { return _M_dataplus._M_p; }
   29650:	02013583          	ld	a1,32(sp)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   29654:	00000693          	addi	a3,zero,0
   29658:	02813603          	ld	a2,40(sp)
   2965c:	00c58633          	add	a2,a1,a2
   29660:	0001a317          	auipc	t1,0x1a
   29664:	cc833303          	ld	t1,-824(t1) # 43328 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17b3c>
   29668:	000300e7          	jalr	ra,0(t1)
	    ++this->_M_impl._M_finish;
   2966c:	0404b783          	ld	a5,64(s1)
   29670:	02078793          	addi	a5,a5,32
   29674:	04f4b023          	sd	a5,64(s1)
    cur.string(incdir);
   29678:	10010a13          	addi	s4,sp,256
   2967c:	00810b13          	addi	s6,sp,8
    if (incdir.back() != '/')
   29680:	02f00913          	addi	s2,zero,47
	return _M_is_local() ? size_type(_S_local_capacity)
   29684:	11010d13          	addi	s10,sp,272
      m->include_directories.push_back(comp_dir + incdir);
   29688:	14010a93          	addi	s5,sp,320
   2968c:	02010b93          	addi	s7,sp,32
   29690:	0001ac17          	auipc	s8,0x1a
   29694:	f50c3c03          	ld	s8,-176(s8) # 435e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x17d58>
	if (!_M_is_local())
   29698:	15010c93          	addi	s9,sp,336
   2969c:	0f00006f          	jal	zero,2978c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbf4>
	  _M_realloc_insert(end(), __x);
   296a0:	02010613          	addi	a2,sp,32
   296a4:	00050593          	addi	a1,a0,0
   296a8:	03848513          	addi	a0,s1,56
   296ac:	0001a317          	auipc	t1,0x1a
   296b0:	dc433303          	ld	t1,-572(t1) # 43470 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x17b3c>
   296b4:	000300e7          	jalr	ra,0(t1)
   296b8:	fc1ff06f          	jal	zero,29678 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xae0>
      { return _M_string_length; }
   296bc:	10813483          	ld	s1,264(sp)
    if (incdir.empty())
   296c0:	0c048e63          	beq	s1,zero,2979c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc04>
      { return _M_dataplus._M_p; }
   296c4:	10013783          	ld	a5,256(sp)
    if (incdir.back() != '/')
   296c8:	00978733          	add	a4,a5,s1
   296cc:	fff74703          	lbu	a4,-1(a4)
   296d0:	03271663          	bne	a4,s2,296fc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb64>
    if (incdir[0] == '/')
   296d4:	10013783          	ld	a5,256(sp)
   296d8:	0007c783          	lbu	a5,0(a5)
   296dc:	07278a63          	beq	a5,s2,29750 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbb8>
      m->include_directories.push_back(comp_dir + incdir);
   296e0:	00043483          	ld	s1,0(s0)
   296e4:	03848493          	addi	s1,s1,56
   296e8:	000a0613          	addi	a2,s4,0
   296ec:	000b8593          	addi	a1,s7,0
   296f0:	000a8513          	addi	a0,s5,0
   296f4:	000c00e7          	jalr	ra,0(s8)
   296f8:	0740006f          	jal	zero,2976c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbd4>
	if (__size + 1 > this->capacity())
   296fc:	00148d93          	addi	s11,s1,1
	return _M_is_local() ? size_type(_S_local_capacity)
   29700:	03a78663          	beq	a5,s10,2972c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb94>
   29704:	11013783          	ld	a5,272(sp)
	if (__size + 1 > this->capacity())
   29708:	03b7e663          	bltu	a5,s11,29734 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb9c>
   2970c:	10013783          	ld	a5,256(sp)
   29710:	009787b3          	add	a5,a5,s1
   29714:	01278023          	sb	s2,0(a5)
      { _M_string_length = __length; }
   29718:	11b13423          	sd	s11,264(sp)
   2971c:	10013783          	ld	a5,256(sp)
   29720:	01b787b3          	add	a5,a5,s11
   29724:	00078023          	sb	zero,0(a5)
      }
   29728:	fadff06f          	jal	zero,296d4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb3c>
	return _M_is_local() ? size_type(_S_local_capacity)
   2972c:	00f00793          	addi	a5,zero,15
   29730:	fd9ff06f          	jal	zero,29708 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb70>
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
   29734:	00100713          	addi	a4,zero,1
   29738:	00000693          	addi	a3,zero,0
   2973c:	00000613          	addi	a2,zero,0
   29740:	00048593          	addi	a1,s1,0
   29744:	000a0513          	addi	a0,s4,0
   29748:	a88ed0ef          	jal	ra,169d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2974c:	fc1ff06f          	jal	zero,2970c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb74>
      m->include_directories.push_back(move(incdir));
   29750:	00043503          	ld	a0,0(s0)
      { emplace_back(std::move(__x)); }
   29754:	000a0593          	addi	a1,s4,0
   29758:	03850513          	addi	a0,a0,56
   2975c:	0001a317          	auipc	t1,0x1a
   29760:	e7433303          	ld	t1,-396(t1) # 435d0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17808>
   29764:	000300e7          	jalr	ra,0(t1)
   29768:	0240006f          	jal	zero,2978c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbf4>
   2976c:	000a8593          	addi	a1,s5,0
   29770:	00048513          	addi	a0,s1,0
   29774:	0001a317          	auipc	t1,0x1a
   29778:	e5c33303          	ld	t1,-420(t1) # 435d0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17808>
   2977c:	000300e7          	jalr	ra,0(t1)
      { return _M_dataplus._M_p; }
   29780:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   29784:	01950463          	beq	a0,s9,2978c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbf4>
   29788:	818ed0ef          	jal	ra,167a0 <operator delete(void*)@plt>
    cur.string(incdir);
   2978c:	000a0593          	addi	a1,s4,0
   29790:	000b0513          	addi	a0,s6,0
   29794:	95cf40ef          	jal	ra,1d8f0 <dwarf::cursor::string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   29798:	f25ff06f          	jal	zero,296bc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb24>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2979c:	13010793          	addi	a5,sp,304
   297a0:	12f13023          	sd	a5,288(sp)
      { _M_string_length = __length; }
   297a4:	12013423          	sd	zero,296(sp)
   297a8:	12010823          	sb	zero,304(sp)
      { return _M_string_length; }
   297ac:	0089b603          	ld	a2,8(s3)
  if (!cu_name.empty() && cu_name[0] == '/')
   297b0:	00060a63          	beq	a2,zero,297c4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc2c>
      { return _M_dataplus._M_p; }
   297b4:	0009b583          	ld	a1,0(s3)
   297b8:	0005c703          	lbu	a4,0(a1)
   297bc:	02f00793          	addi	a5,zero,47
   297c0:	02f70463          	beq	a4,a5,297e8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc50>
    m->file_names.emplace_back(comp_dir + cu_name);
   297c4:	00043483          	ld	s1,0(s0)
   297c8:	05048493          	addi	s1,s1,80
   297cc:	00098613          	addi	a2,s3,0
   297d0:	02010593          	addi	a1,sp,32
   297d4:	14010513          	addi	a0,sp,320
   297d8:	0001a317          	auipc	t1,0x1a
   297dc:	e0833303          	ld	t1,-504(t1) # 435e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x17d58>
   297e0:	000300e7          	jalr	ra,0(t1)
   297e4:	0ac0006f          	jal	zero,29890 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcf8>
   297e8:	00043483          	ld	s1,0(s0)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   297ec:	0584b903          	ld	s2,88(s1)
   297f0:	0604b783          	ld	a5,96(s1)
   297f4:	08f90063          	beq	s2,a5,29874 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcdc>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   297f8:	15010793          	addi	a5,sp,336
   297fc:	14f13023          	sd	a5,320(sp)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   29800:	00000693          	addi	a3,zero,0
   29804:	00c58633          	add	a2,a1,a2
   29808:	14010513          	addi	a0,sp,320
   2980c:	0001a317          	auipc	t1,0x1a
   29810:	b1c33303          	ld	t1,-1252(t1) # 43328 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17b3c>
   29814:	000300e7          	jalr	ra,0(t1)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   29818:	00000693          	addi	a3,zero,0
   2981c:	00000613          	addi	a2,zero,0
   29820:	14010593          	addi	a1,sp,320
   29824:	00090513          	addi	a0,s2,0
   29828:	d2dfe0ef          	jal	ra,28554 <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
      { return _M_dataplus._M_p; }
   2982c:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   29830:	15010793          	addi	a5,sp,336
   29834:	00f50463          	beq	a0,a5,2983c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xca4>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   29838:	f69ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	    ++this->_M_impl._M_finish;
   2983c:	0584b783          	ld	a5,88(s1)
   29840:	03078793          	addi	a5,a5,48
   29844:	04f4bc23          	sd	a5,88(s1)
   29848:	06c0006f          	jal	zero,298b4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd1c>
      { return _M_dataplus._M_p; }
   2984c:	00050493          	addi	s1,a0,0
   29850:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   29854:	15010793          	addi	a5,sp,336
   29858:	00f50463          	beq	a0,a5,29860 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc8>
   2985c:	f45ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29860:	12013503          	ld	a0,288(sp)
	if (!_M_is_local())
   29864:	13010793          	addi	a5,sp,304
   29868:	2af50c63          	beq	a0,a5,29b20 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf88>
   2986c:	f35ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   29870:	2b00006f          	jal	zero,29b20 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf88>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   29874:	00098613          	addi	a2,s3,0
   29878:	00090593          	addi	a1,s2,0
   2987c:	05048513          	addi	a0,s1,80
   29880:	0001a317          	auipc	t1,0x1a
   29884:	bd833303          	ld	t1,-1064(t1) # 43458 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x1758c>
   29888:	000300e7          	jalr	ra,0(t1)
   2988c:	0280006f          	jal	zero,298b4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd1c>
   29890:	14010593          	addi	a1,sp,320
   29894:	00048513          	addi	a0,s1,0
   29898:	0001a317          	auipc	t1,0x1a
   2989c:	d1033303          	ld	t1,-752(t1) # 435a8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17068>
   298a0:	000300e7          	jalr	ra,0(t1)
      { return _M_dataplus._M_p; }
   298a4:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   298a8:	15010793          	addi	a5,sp,336
   298ac:	00f50463          	beq	a0,a5,298b4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd1c>
   298b0:	ef1ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
  while (m->read_file_entry(&cur, true))
   298b4:	00810493          	addi	s1,sp,8
   298b8:	0080006f          	jal	zero,298c0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd28>
   298bc:	00050c63          	beq	a0,zero,298d4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd3c>
   298c0:	00100613          	addi	a2,zero,1
   298c4:	00048593          	addi	a1,s1,0
   298c8:	00043503          	ld	a0,0(s0)
   298cc:	f4dfe0ef          	jal	ra,28818 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)>
   298d0:	fedff06f          	jal	zero,298bc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd24>
      { return _M_dataplus._M_p; }
   298d4:	12013503          	ld	a0,288(sp)
	if (!_M_is_local())
   298d8:	13010793          	addi	a5,sp,304
   298dc:	00f50463          	beq	a0,a5,298e4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd4c>
   298e0:	ec1ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   298e4:	10013503          	ld	a0,256(sp)
	if (!_M_is_local())
   298e8:	11010793          	addi	a5,sp,272
   298ec:	00f50463          	beq	a0,a5,298f4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd5c>
   298f0:	eb1ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   298f4:	01013403          	ld	s0,16(sp)
   298f8:	02040463          	beq	s0,zero,29920 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd88>
    if (__is_single_threaded())
   298fc:	0001a797          	auipc	a5,0x1a
   29900:	b9c7b783          	ld	a5,-1124(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   29904:	0007c783          	lbu	a5,0(a5)
   29908:	06078a63          	beq	a5,zero,2997c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xde4>
    _Atomic_word __result = *__mem;
   2990c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   29910:	fff5079b          	addiw	a5,a0,-1
   29914:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   29918:	00100793          	addi	a5,zero,1
   2991c:	06f50863          	beq	a0,a5,2998c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xdf4>
      { return _M_dataplus._M_p; }
   29920:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   29924:	05010793          	addi	a5,sp,80
   29928:	00f50463          	beq	a0,a5,29930 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd98>
   2992c:	e75ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29930:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   29934:	03010793          	addi	a5,sp,48
   29938:	00f50463          	beq	a0,a5,29940 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xda8>
   2993c:	e65ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
}
   29940:	1d813083          	ld	ra,472(sp)
   29944:	1d013403          	ld	s0,464(sp)
   29948:	1c813483          	ld	s1,456(sp)
   2994c:	1c013903          	ld	s2,448(sp)
   29950:	1b813983          	ld	s3,440(sp)
   29954:	1b013a03          	ld	s4,432(sp)
   29958:	1a813a83          	ld	s5,424(sp)
   2995c:	1a013b03          	ld	s6,416(sp)
   29960:	19813b83          	ld	s7,408(sp)
   29964:	19013c03          	ld	s8,400(sp)
   29968:	18813c83          	ld	s9,392(sp)
   2996c:	18013d03          	ld	s10,384(sp)
   29970:	17813d83          	ld	s11,376(sp)
   29974:	1e010113          	addi	sp,sp,480
   29978:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   2997c:	fff00593          	addi	a1,zero,-1
   29980:	03040513          	addi	a0,s0,48
   29984:	c6dec0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   29988:	f91ff06f          	jal	zero,29918 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd80>
	_M_dispose();
   2998c:	00043783          	ld	a5,0(s0)
   29990:	0107b783          	ld	a5,16(a5)
   29994:	00040513          	addi	a0,s0,0
   29998:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2999c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   299a0:	0001a797          	auipc	a5,0x1a
   299a4:	af87b783          	ld	a5,-1288(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   299a8:	0007c783          	lbu	a5,0(a5)
   299ac:	02078663          	beq	a5,zero,299d8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe40>
    _Atomic_word __result = *__mem;
   299b0:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   299b4:	fff5079b          	addiw	a5,a0,-1
   299b8:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   299bc:	00100793          	addi	a5,zero,1
   299c0:	f6f510e3          	bne	a0,a5,29920 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd88>
	    _M_destroy();
   299c4:	00043783          	ld	a5,0(s0)
   299c8:	0187b783          	ld	a5,24(a5)
   299cc:	00040513          	addi	a0,s0,0
   299d0:	000780e7          	jalr	ra,0(a5)
   299d4:	f4dff06f          	jal	zero,29920 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd88>
      return __exchange_and_add(__mem, __val);
   299d8:	fff00593          	addi	a1,zero,-1
   299dc:	03440513          	addi	a0,s0,52
   299e0:	c11ec0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   299e4:	fd9ff06f          	jal	zero,299bc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe24>
      { return _M_dataplus._M_p; }
   299e8:	00050493          	addi	s1,a0,0
   299ec:	12013503          	ld	a0,288(sp)
	if (!_M_is_local())
   299f0:	13010793          	addi	a5,sp,304
   299f4:	00f50463          	beq	a0,a5,299fc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe64>
   299f8:	da9ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   299fc:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   29a00:	15010793          	addi	a5,sp,336
   29a04:	00f50463          	beq	a0,a5,29a0c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe74>
   29a08:	d99ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
                       std::to_string(version));
   29a0c:	00090513          	addi	a0,s2,0
   29a10:	d41ec0ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   29a14:	01013503          	ld	a0,16(sp)
   29a18:	ae050a63          	beq	a0,zero,28d0c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x174>
	  _M_pi->_M_release();
   29a1c:	0001a317          	auipc	t1,0x1a
   29a20:	9c433303          	ld	t1,-1596(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   29a24:	000300e7          	jalr	ra,0(t1)
   29a28:	ae4ff06f          	jal	zero,28d0c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x174>
      { return _M_dataplus._M_p; }
   29a2c:	00050493          	addi	s1,a0,0
   29a30:	fcdff06f          	jal	zero,299fc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe64>
                       " be 0 in line number table");
   29a34:	00050493          	addi	s1,a0,0
   29a38:	00090513          	addi	a0,s2,0
   29a3c:	d15ec0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   29a40:	fd5ff06f          	jal	zero,29a14 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe7c>
    throw format_error("line_range cannot be 0 in line number table");
   29a44:	00050493          	addi	s1,a0,0
   29a48:	00090513          	addi	a0,s2,0
   29a4c:	d05ec0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   29a50:	fc5ff06f          	jal	zero,29a14 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe7c>
   29a54:	00050493          	addi	s1,a0,0
   29a58:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   29a5c:	07010793          	addi	a5,sp,112
   29a60:	00f50463          	beq	a0,a5,29a68 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xed0>
   29a64:	d3dec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29a68:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   29a6c:	15010793          	addi	a5,sp,336
   29a70:	00f50463          	beq	a0,a5,29a78 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xee0>
   29a74:	d2dec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29a78:	08013503          	ld	a0,128(sp)
	if (!_M_is_local())
   29a7c:	09010793          	addi	a5,sp,144
   29a80:	00f50463          	beq	a0,a5,29a88 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xef0>
   29a84:	d1dec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29a88:	0a013503          	ld	a0,160(sp)
	if (!_M_is_local())
   29a8c:	0b010793          	addi	a5,sp,176
   29a90:	00f50463          	beq	a0,a5,29a98 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf00>
   29a94:	d0dec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29a98:	12013503          	ld	a0,288(sp)
	if (!_M_is_local())
   29a9c:	13010793          	addi	a5,sp,304
   29aa0:	00f50463          	beq	a0,a5,29aa8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf10>
   29aa4:	cfdec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29aa8:	0c013503          	ld	a0,192(sp)
	if (!_M_is_local())
   29aac:	0d010793          	addi	a5,sp,208
   29ab0:	00f50463          	beq	a0,a5,29ab8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf20>
   29ab4:	cedec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29ab8:	0e013503          	ld	a0,224(sp)
	if (!_M_is_local())
   29abc:	0f010793          	addi	a5,sp,240
   29ac0:	00f50463          	beq	a0,a5,29ac8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf30>
   29ac4:	cddec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29ac8:	10013503          	ld	a0,256(sp)
	if (!_M_is_local())
   29acc:	11010793          	addi	a5,sp,272
   29ad0:	00f50463          	beq	a0,a5,29ad8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf40>
   29ad4:	ccdec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
                         std::to_string(i) + ", got " + std::to_string(length));
   29ad8:	00098513          	addi	a0,s3,0
   29adc:	c75ec0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   29ae0:	f35ff06f          	jal	zero,29a14 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe7c>
      { return _M_dataplus._M_p; }
   29ae4:	00050493          	addi	s1,a0,0
   29ae8:	f81ff06f          	jal	zero,29a68 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xed0>
   29aec:	00050493          	addi	s1,a0,0
   29af0:	f99ff06f          	jal	zero,29a88 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xef0>
   29af4:	00050493          	addi	s1,a0,0
   29af8:	fa1ff06f          	jal	zero,29a98 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf00>
   29afc:	00050493          	addi	s1,a0,0
   29b00:	fb9ff06f          	jal	zero,29ab8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf20>
   29b04:	00050493          	addi	s1,a0,0
   29b08:	fc1ff06f          	jal	zero,29ac8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf30>
   29b0c:	00050493          	addi	s1,a0,0
   29b10:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   29b14:	15010793          	addi	a5,sp,336
   29b18:	00f50463          	beq	a0,a5,29b20 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf88>
   29b1c:	c85ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29b20:	10013503          	ld	a0,256(sp)
	if (!_M_is_local())
   29b24:	11010793          	addi	a5,sp,272
   29b28:	eef506e3          	beq	a0,a5,29a14 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe7c>
   29b2c:	c75ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   29b30:	ee5ff06f          	jal	zero,29a14 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe7c>
      { return _M_dataplus._M_p; }
   29b34:	00050493          	addi	s1,a0,0
   29b38:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   29b3c:	15010793          	addi	a5,sp,336
   29b40:	d2f500e3          	beq	a0,a5,29860 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc8>
   29b44:	c5dec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   29b48:	d19ff06f          	jal	zero,29860 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc8>
      { return _M_dataplus._M_p; }
   29b4c:	00050493          	addi	s1,a0,0
   29b50:	d11ff06f          	jal	zero,29860 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc8>
   29b54:	00050493          	addi	s1,a0,0
   29b58:	fc9ff06f          	jal	zero,29b20 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf88>
   29b5c:	00050493          	addi	s1,a0,0
   29b60:	9acff06f          	jal	zero,28d0c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x174>
        val |= ((uint64_t)p[i]) << (i * 8);
   29b64:	0006c703          	lbu	a4,0(a3)
    pos += sizeof(T);
   29b68:	00168693          	addi	a3,a3,1
   29b6c:	00d13c23          	sd	a3,24(sp)
    return (T)val;
   29b70:	0ff77793          	andi	a5,a4,255
    if (length != opcode_lengths[i])
   29b74:	00070493          	addi	s1,a4,0
   29b78:	000a2b03          	lw	s6,0(s4)
   29b7c:	91671ae3          	bne	a4,s6,29490 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8f8>
      { return _M_ptr; }
   29b80:	00043483          	ld	s1,0(s0)
    m->standard_opcode_lengths[i] = length;
   29b84:	0204b703          	ld	a4,32(s1)
   29b88:	01270733          	add	a4,a4,s2
   29b8c:	00f70023          	sb	a5,0(a4)
  for (unsigned i = 1; i < m->opcode_base; i++) {
   29b90:	00190913          	addi	s2,s2,1
   29b94:	004a0a13          	addi	s4,s4,4
   29b98:	01d4c703          	lbu	a4,29(s1)
   29b9c:	0009079b          	addiw	a5,s2,0
   29ba0:	a8e7f6e3          	bgeu	a5,a4,2962c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa94>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   29ba4:	00813783          	ld	a5,8(sp)
   29ba8:	0107b703          	ld	a4,16(a5)
   29bac:	01813783          	ld	a5,24(sp)
   29bb0:	8ce7e4e3          	bltu	a5,a4,29478 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8e0>
      underflow();
   29bb4:	000a8513          	addi	a0,s5,0
   29bb8:	d8df30ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
   29bbc:	8bdff06f          	jal	zero,29478 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8e0>
        val |= ((uint64_t)p[i]) << (i * 8);
   29bc0:	0007c703          	lbu	a4,0(a5)
    pos += sizeof(T);
   29bc4:	00178793          	addi	a5,a5,1
   29bc8:	00f13c23          	sd	a5,24(sp)
    return (T)val;
   29bcc:	00e48ea3          	sb	a4,29(s1)
   29bd0:	00043503          	ld	a0,0(s0)
  m->standard_opcode_lengths.resize(m->opcode_base);
   29bd4:	01d54783          	lbu	a5,29(a0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   29bd8:	02853683          	ld	a3,40(a0)
   29bdc:	02053703          	ld	a4,32(a0)
   29be0:	40e685b3          	sub	a1,a3,a4
	if (__new_size > size())
   29be4:	86f5eee3          	bltu	a1,a5,29460 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8c8>
	else if (__new_size < size())
   29be8:	00b7f863          	bgeu	a5,a1,29bf8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1060>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   29bec:	00f70733          	add	a4,a4,a5
	if (size_type __n = this->_M_impl._M_finish - __pos)
   29bf0:	00e68463          	beq	a3,a4,29bf8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1060>
	    this->_M_impl._M_finish = __pos;
   29bf4:	02e53423          	sd	a4,40(a0)
   29bf8:	00043483          	ld	s1,0(s0)
	return *(this->_M_impl._M_start + __n);
   29bfc:	0204b783          	ld	a5,32(s1)
  m->standard_opcode_lengths[0] = 0;
   29c00:	00078023          	sb	zero,0(a5)
  for (unsigned i = 1; i < m->opcode_base; i++) {
   29c04:	01d4c703          	lbu	a4,29(s1)
   29c08:	00100793          	addi	a5,zero,1
   29c0c:	a2e7f0e3          	bgeu	a5,a4,2962c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa94>
   29c10:	0000fa17          	auipc	s4,0xf
   29c14:	e9ca0a13          	addi	s4,s4,-356 # 38aac <dwarf::opcode_lengths+0x4>
   29c18:	00100913          	addi	s2,zero,1
      underflow();
   29c1c:	00810a93          	addi	s5,sp,8
   29c20:	f85ff06f          	jal	zero,29ba4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x100c>
        val |= ((uint64_t)p[i]) << (i * 8);
   29c24:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   29c28:	00178793          	addi	a5,a5,1
   29c2c:	00f13c23          	sd	a5,24(sp)
    return (T)val;
   29c30:	00d48e23          	sb	a3,28(s1)
   29c34:	00043483          	ld	s1,0(s0)
  if (m->line_range == 0)
   29c38:	01c4c683          	lbu	a3,28(s1)
   29c3c:	fc068663          	beq	a3,zero,29408 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x870>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   29c40:	01073703          	ld	a4,16(a4)
   29c44:	80e7e2e3          	bltu	a5,a4,29448 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8b0>
      underflow();
   29c48:	00810513          	addi	a0,sp,8
   29c4c:	cf9f30ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
   29c50:	ff8ff06f          	jal	zero,29448 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8b0>
        val |= ((uint64_t)p[i]) << (i * 8);
   29c54:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   29c58:	00178793          	addi	a5,a5,1
   29c5c:	00f13c23          	sd	a5,24(sp)
    return (T)val;
   29c60:	00d48da3          	sb	a3,27(s1)
   29c64:	00043483          	ld	s1,0(s0)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   29c68:	01073703          	ld	a4,16(a4)
   29c6c:	f8e7e263          	bltu	a5,a4,293f0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x858>
      underflow();
   29c70:	00810513          	addi	a0,sp,8
   29c74:	cd1f30ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
   29c78:	f78ff06f          	jal	zero,293f0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x858>
        val |= ((uint64_t)p[i]) << (i * 8);
   29c7c:	0007c703          	lbu	a4,0(a5)
    pos += sizeof(T);
   29c80:	00178793          	addi	a5,a5,1
   29c84:	00f13c23          	sd	a5,24(sp)
   29c88:	00043483          	ld	s1,0(s0)
  m->default_is_stmt = cur.fixed<ubyte>();
   29c8c:	00e03733          	sltu	a4,zero,a4
   29c90:	00e48d23          	sb	a4,26(s1)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   29c94:	0106b703          	ld	a4,16(a3)
   29c98:	f4e7e063          	bltu	a5,a4,293d8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x840>
      underflow();
   29c9c:	00810513          	addi	a0,sp,8
   29ca0:	ca5f30ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
   29ca4:	f34ff06f          	jal	zero,293d8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x840>
        val |= ((uint64_t)p[i]) << (i * 8);
   29ca8:	0007c703          	lbu	a4,0(a5)
    pos += sizeof(T);
   29cac:	00178793          	addi	a5,a5,1
   29cb0:	00f13c23          	sd	a5,24(sp)
    return (T)val;
   29cb4:	00e90ca3          	sb	a4,25(s2)
  if (m->maximum_operations_per_instruction == 0)
   29cb8:	00043783          	ld	a5,0(s0)
   29cbc:	0197c783          	lbu	a5,25(a5)
   29cc0:	04079463          	bne	a5,zero,29d08 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1170>
                       " be 0 in line number table");
   29cc4:	01000513          	addi	a0,zero,16
   29cc8:	9c9ec0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   29ccc:	00050913          	addi	s2,a0,0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   29cd0:	0000f597          	auipc	a1,0xf
   29cd4:	c0058593          	addi	a1,a1,-1024 # 388d0 <typeinfo name for dwarf::expr_context+0xe8>
   29cd8:	d39ec0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   29cdc:	ebcff06f          	jal	zero,29398 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x800>
        val |= ((uint64_t)p[i]) << (i * 8);
   29ce0:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   29ce4:	00178793          	addi	a5,a5,1
   29ce8:	00f13c23          	sd	a5,24(sp)
    return (T)val;
   29cec:	00d90c23          	sb	a3,24(s2)
   29cf0:	00043903          	ld	s2,0(s0)
  m->maximum_operations_per_instruction = 1;
   29cf4:	00100693          	addi	a3,zero,1
   29cf8:	00d90ca3          	sb	a3,25(s2)
  if (version == 4)
   29cfc:	0004849b          	addiw	s1,s1,0
   29d00:	00400693          	addi	a3,zero,4
   29d04:	e6d48663          	beq	s1,a3,29370 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7d8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   29d08:	00813783          	ld	a5,8(sp)
   29d0c:	0107b703          	ld	a4,16(a5)
   29d10:	01813783          	ld	a5,24(sp)
   29d14:	eae7e663          	bltu	a5,a4,293c0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x828>
      underflow();
   29d18:	00810513          	addi	a0,sp,8
   29d1c:	c29f30ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
   29d20:	ea0ff06f          	jal	zero,293c0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x828>
struct cursor {
   29d24:	01513c23          	sd	s5,24(sp)
      ~__shared_count() noexcept
   29d28:	b1cff06f          	jal	zero,29044 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4ac>
      : sec(sec), pos(sec->begin + offset) {}
   29d2c:	00893a83          	ld	s5,8(s2)
   29d30:	01213423          	sd	s2,8(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   29d34:	01013903          	ld	s2,16(sp)
	__r._M_pi = _M_pi;
   29d38:	00013823          	sd	zero,16(sp)
	if (_M_pi != nullptr)
   29d3c:	ac091e63          	bne	s2,zero,29018 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x480>
struct cursor {
   29d40:	01513c23          	sd	s5,24(sp)
      ~__shared_count() noexcept
   29d44:	b24ff06f          	jal	zero,29068 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4d0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   29d48:	01613423          	sd	s6,8(sp)
      : _M_pi(__r._M_pi)
   29d4c:	00013823          	sd	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   29d50:	008b3783          	ld	a5,8(s6)
   29d54:	015787b3          	add	a5,a5,s5
   29d58:	00f13c23          	sd	a5,24(sp)
      { return _M_ptr; }
   29d5c:	00043483          	ld	s1,0(s0)
  m->sec = cur.subsection();
   29d60:	00810593          	addi	a1,sp,8
   29d64:	16010513          	addi	a0,sp,352
   29d68:	920f40ef          	jal	ra,1de88 <dwarf::cursor::subsection()>
   29d6c:	990ff06f          	jal	zero,28efc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x364>
      { _M_dataplus._M_p = __p; }
   29d70:	02f13023          	sd	a5,32(sp)
      { _M_string_length = __length; }
   29d74:	14813783          	ld	a5,328(sp)
   29d78:	02f13423          	sd	a5,40(sp)
      { _M_allocated_capacity = __capacity; }
   29d7c:	15013783          	ld	a5,336(sp)
   29d80:	02f13823          	sd	a5,48(sp)
      { _M_dataplus._M_p = __p; }
   29d84:	15010793          	addi	a5,sp,336
   29d88:	14f13023          	sd	a5,320(sp)
   29d8c:	800ff06f          	jal	zero,28d8c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1f4>

0000000000029d90 <dwarf::line_table::iterator::step(dwarf::cursor*)>:

  pos = cur.get_section_offset();
  return *this;
}

bool line_table::iterator::step(cursor *cur) {
   29d90:	f6010113          	addi	sp,sp,-160
   29d94:	08113c23          	sd	ra,152(sp)
   29d98:	08813823          	sd	s0,144(sp)
   29d9c:	08913423          	sd	s1,136(sp)
   29da0:	09213023          	sd	s2,128(sp)
   29da4:	07313c23          	sd	s3,120(sp)
   29da8:	07413823          	sd	s4,112(sp)
   29dac:	07513423          	sd	s5,104(sp)
   29db0:	00050493          	addi	s1,a0,0
   29db4:	00058413          	addi	s0,a1,0
   29db8:	00053783          	ld	a5,0(a0)
   29dbc:	0007b983          	ld	s3,0(a5)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   29dc0:	0005b783          	ld	a5,0(a1)
   29dc4:	0107b703          	ld	a4,16(a5)
   29dc8:	0105b783          	ld	a5,16(a1)
   29dcc:	00e7e663          	bltu	a5,a4,29dd8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x48>
      underflow();
   29dd0:	00058513          	addi	a0,a1,0
   29dd4:	b71f30ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   29dd8:	01043783          	ld	a5,16(s0)
   29ddc:	00043583          	ld	a1,0(s0)
    if (sec->ord == byte_order::lsb) {
   29de0:	01c5a703          	lw	a4,28(a1)
   29de4:	040700e3          	beq	a4,zero,2a624 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x894>
        val = (val << 8) | (uint64_t)p[i];
   29de8:	0007c903          	lbu	s2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   29dec:	03d0006f          	jal	zero,2a628 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x898>

  // Read the opcode (DWARF4 section 6.2.3)
  ubyte opcode = cur->fixed<ubyte>();
  if (opcode >= m->opcode_base) {
    // Special opcode (DWARF4 section 6.2.5.1)
    ubyte adjusted_opcode = opcode - m->opcode_base;
   29df0:	40e907bb          	subw	a5,s2,a4
   29df4:	0ff7f793          	andi	a5,a5,255
    unsigned op_advance = adjusted_opcode / m->line_range;
   29df8:	01c9c683          	lbu	a3,28(s3)
    signed line_inc = m->line_base + (signed)adjusted_opcode % m->line_range;
   29dfc:	01b98703          	lb	a4,27(s3)
   29e00:	02d7f63b          	remuw	a2,a5,a3
   29e04:	00c7073b          	addw	a4,a4,a2

    regs.line += line_inc;
   29e08:	05c4a603          	lw	a2,92(s1)
   29e0c:	00c7073b          	addw	a4,a4,a2
   29e10:	04e4ae23          	sw	a4,92(s1)
    unsigned op_advance = adjusted_opcode / m->line_range;
   29e14:	02d7d7bb          	divuw	a5,a5,a3
    regs.address +=
        m->minimum_instruction_length *
        ((regs.op_index + op_advance) / m->maximum_operations_per_instruction);
   29e18:	0484a703          	lw	a4,72(s1)
   29e1c:	00e787bb          	addw	a5,a5,a4
   29e20:	0199c703          	lbu	a4,25(s3)
   29e24:	02e7d73b          	divuw	a4,a5,a4
        m->minimum_instruction_length *
   29e28:	0189c683          	lbu	a3,24(s3)
   29e2c:	02d7073b          	mulw	a4,a4,a3
   29e30:	02071713          	slli	a4,a4,0x20
   29e34:	02075713          	srli	a4,a4,0x20
    regs.address +=
   29e38:	0404b683          	ld	a3,64(s1)
   29e3c:	00e68733          	add	a4,a3,a4
   29e40:	04e4b023          	sd	a4,64(s1)
    regs.op_index =
        (regs.op_index + op_advance) % m->maximum_operations_per_instruction;
   29e44:	0199c683          	lbu	a3,25(s3)
   29e48:	02d7f7bb          	remuw	a5,a5,a3
    regs.op_index =
   29e4c:	04f4a423          	sw	a5,72(s1)
    entry = regs;
   29e50:	0484b803          	ld	a6,72(s1)
   29e54:	0504b503          	ld	a0,80(s1)
   29e58:	0584b583          	ld	a1,88(s1)
   29e5c:	0604b603          	ld	a2,96(s1)
   29e60:	0684b683          	ld	a3,104(s1)
   29e64:	0704b783          	ld	a5,112(s1)
   29e68:	00e4b423          	sd	a4,8(s1)
   29e6c:	0104b823          	sd	a6,16(s1)
   29e70:	00a4bc23          	sd	a0,24(s1)
   29e74:	02b4b023          	sd	a1,32(s1)
   29e78:	02c4b423          	sd	a2,40(s1)
   29e7c:	02d4b823          	sd	a3,48(s1)
   29e80:	02f4bc23          	sd	a5,56(s1)

    regs.basic_block = regs.prologue_end = regs.epilogue_begin = false;
   29e84:	06048423          	sb	zero,104(s1)
   29e88:	060483a3          	sb	zero,103(s1)
   29e8c:	060482a3          	sb	zero,101(s1)
    regs.discriminator = 0;
   29e90:	0604a823          	sw	zero,112(s1)

    return true;
   29e94:	00100513          	addi	a0,zero,1
   29e98:	2a00006f          	jal	zero,2a138 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a8>
    while (pos < sec->end) {
   29e9c:	0105b703          	ld	a4,16(a1)
    std::uint64_t result = 0;
   29ea0:	00000513          	addi	a0,zero,0
    int shift = 0;
   29ea4:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   29ea8:	02e7fa63          	bgeu	a5,a4,29edc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x14c>
      uint8_t byte = *(uint8_t *)(pos++);
   29eac:	00178793          	addi	a5,a5,1
   29eb0:	00f43823          	sd	a5,16(s0)
   29eb4:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   29eb8:	07f77693          	andi	a3,a4,127
   29ebc:	00c696b3          	sll	a3,a3,a2
   29ec0:	00d56533          	or	a0,a0,a3
      if ((byte & 0x80) == 0)
   29ec4:	0187171b          	slliw	a4,a4,0x18
   29ec8:	4187571b          	sraiw	a4,a4,0x18
   29ecc:	00075e63          	bge	a4,zero,29ee8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x158>
      shift += 7;
   29ed0:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   29ed4:	0105b703          	ld	a4,16(a1)
   29ed8:	fce7eae3          	bltu	a5,a4,29eac <dwarf::line_table::iterator::step(dwarf::cursor*)+0x11c>
    underflow();
   29edc:	00040513          	addi	a0,s0,0
   29ee0:	a65f30ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    return 0;
   29ee4:	00000513          	addi	a0,zero,0
  section_offset get_section_offset() const { return pos - sec->begin; }
   29ee8:	01043783          	ld	a5,16(s0)
   29eec:	00043703          	ld	a4,0(s0)
   29ef0:	00873a03          	ld	s4,8(a4)
   29ef4:	41478a33          	sub	s4,a5,s4
    return ((DW_LNS)opcode == DW_LNS::copy);
  } else { // opcode == 0
    // Extended opcode (DWARF4 sections 6.2.3 and 6.2.5.3)
    assert(opcode == 0);
    uint64_t length = cur->uleb128();
    section_offset end = cur->get_section_offset() + length;
   29ef8:	00aa0a33          	add	s4,s4,a0
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   29efc:	01073703          	ld	a4,16(a4)
   29f00:	00e7e663          	bltu	a5,a4,29f0c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x17c>
      underflow();
   29f04:	00040513          	addi	a0,s0,0
   29f08:	a3df30ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   29f0c:	01043783          	ld	a5,16(s0)
   29f10:	00043503          	ld	a0,0(s0)
    if (sec->ord == byte_order::lsb) {
   29f14:	01c52703          	lw	a4,28(a0)
   29f18:	6c070063          	beq	a4,zero,2a5d8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x848>
        val = (val << 8) | (uint64_t)p[i];
   29f1c:	0007c583          	lbu	a1,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   29f20:	6bc0006f          	jal	zero,2a5dc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x84c>
    while (pos < sec->end) {
   29f24:	0105b703          	ld	a4,16(a1)
    std::uint64_t result = 0;
   29f28:	00000513          	addi	a0,zero,0
    int shift = 0;
   29f2c:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   29f30:	02e7fa63          	bgeu	a5,a4,29f64 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1d4>
      uint8_t byte = *(uint8_t *)(pos++);
   29f34:	00178793          	addi	a5,a5,1
   29f38:	00f43823          	sd	a5,16(s0)
   29f3c:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   29f40:	07f77693          	andi	a3,a4,127
   29f44:	00c696b3          	sll	a3,a3,a2
   29f48:	00d56533          	or	a0,a0,a3
      if ((byte & 0x80) == 0)
   29f4c:	0187171b          	slliw	a4,a4,0x18
   29f50:	4187571b          	sraiw	a4,a4,0x18
   29f54:	00075e63          	bge	a4,zero,29f70 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1e0>
      shift += 7;
   29f58:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   29f5c:	0105b703          	ld	a4,16(a1)
   29f60:	fce7eae3          	bltu	a5,a4,29f34 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1a4>
    underflow();
   29f64:	00040513          	addi	a0,s0,0
   29f68:	9ddf30ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    return 0;
   29f6c:	00000513          	addi	a0,zero,0
      regs.isa = cur->uleb128();
   29f70:	06a4a623          	sw	a0,108(s1)
      break;
   29f74:	1bc0006f          	jal	zero,2a130 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
    while (pos < sec->end) {
   29f78:	0105b703          	ld	a4,16(a1)
    std::uint64_t result = 0;
   29f7c:	00000513          	addi	a0,zero,0
    int shift = 0;
   29f80:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   29f84:	02e7fa63          	bgeu	a5,a4,29fb8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x228>
      uint8_t byte = *(uint8_t *)(pos++);
   29f88:	00178793          	addi	a5,a5,1
   29f8c:	00f43823          	sd	a5,16(s0)
   29f90:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   29f94:	07f77693          	andi	a3,a4,127
   29f98:	00c696b3          	sll	a3,a3,a2
   29f9c:	00d56533          	or	a0,a0,a3
      if ((byte & 0x80) == 0)
   29fa0:	0187171b          	slliw	a4,a4,0x18
   29fa4:	4187571b          	sraiw	a4,a4,0x18
   29fa8:	00075e63          	bge	a4,zero,29fc4 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x234>
      shift += 7;
   29fac:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   29fb0:	0105b703          	ld	a4,16(a1)
   29fb4:	fce7eae3          	bltu	a5,a4,29f88 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1f8>
    underflow();
   29fb8:	00040513          	addi	a0,s0,0
   29fbc:	989f30ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    return 0;
   29fc0:	00000513          	addi	a0,zero,0
      regs.column = cur->uleb128();
   29fc4:	06a4a023          	sw	a0,96(s1)
      break;
   29fc8:	1680006f          	jal	zero,2a130 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
    while (pos < sec->end) {
   29fcc:	0105b703          	ld	a4,16(a1)
    std::uint64_t result = 0;
   29fd0:	00000513          	addi	a0,zero,0
    int shift = 0;
   29fd4:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   29fd8:	02e7fa63          	bgeu	a5,a4,2a00c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x27c>
      uint8_t byte = *(uint8_t *)(pos++);
   29fdc:	00178793          	addi	a5,a5,1
   29fe0:	00f43823          	sd	a5,16(s0)
   29fe4:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   29fe8:	07f77693          	andi	a3,a4,127
   29fec:	00c696b3          	sll	a3,a3,a2
   29ff0:	00d56533          	or	a0,a0,a3
      if ((byte & 0x80) == 0)
   29ff4:	0187171b          	slliw	a4,a4,0x18
   29ff8:	4187571b          	sraiw	a4,a4,0x18
   29ffc:	00075e63          	bge	a4,zero,2a018 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x288>
      shift += 7;
   2a000:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   2a004:	0105b703          	ld	a4,16(a1)
   2a008:	fce7eae3          	bltu	a5,a4,29fdc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x24c>
    underflow();
   2a00c:	00040513          	addi	a0,s0,0
   2a010:	935f30ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    return 0;
   2a014:	00000513          	addi	a0,zero,0
      regs.file_index = cur->uleb128();
   2a018:	04a4ac23          	sw	a0,88(s1)
      break;
   2a01c:	1140006f          	jal	zero,2a130 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
    while (pos < sec->end) {
   2a020:	0105b703          	ld	a4,16(a1)
    std::uint64_t result = 0;
   2a024:	00000513          	addi	a0,zero,0
    int shift = 0;
   2a028:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   2a02c:	02e7fa63          	bgeu	a5,a4,2a060 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x2d0>
      uint8_t byte = *(uint8_t *)(pos++);
   2a030:	00178793          	addi	a5,a5,1
   2a034:	00f43823          	sd	a5,16(s0)
   2a038:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   2a03c:	07f77693          	andi	a3,a4,127
   2a040:	00c696b3          	sll	a3,a3,a2
   2a044:	00d56533          	or	a0,a0,a3
      if ((byte & 0x80) == 0)
   2a048:	0187171b          	slliw	a4,a4,0x18
   2a04c:	4187571b          	sraiw	a4,a4,0x18
   2a050:	0a075863          	bge	a4,zero,2a100 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x370>
      shift += 7;
   2a054:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   2a058:	0105b703          	ld	a4,16(a1)
   2a05c:	fce7eae3          	bltu	a5,a4,2a030 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x2a0>
    underflow();
   2a060:	00040513          	addi	a0,s0,0
   2a064:	8e1f30ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    return 0;
   2a068:	00000513          	addi	a0,zero,0
   2a06c:	0940006f          	jal	zero,2a100 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x370>
      entry = regs;
   2a070:	0404b803          	ld	a6,64(s1)
   2a074:	0484b503          	ld	a0,72(s1)
   2a078:	0504b583          	ld	a1,80(s1)
   2a07c:	0584b603          	ld	a2,88(s1)
   2a080:	0604b683          	ld	a3,96(s1)
   2a084:	0684b703          	ld	a4,104(s1)
   2a088:	0704b783          	ld	a5,112(s1)
   2a08c:	0104b423          	sd	a6,8(s1)
   2a090:	00a4b823          	sd	a0,16(s1)
   2a094:	00b4bc23          	sd	a1,24(s1)
   2a098:	02c4b023          	sd	a2,32(s1)
   2a09c:	02d4b423          	sd	a3,40(s1)
   2a0a0:	02e4b823          	sd	a4,48(s1)
   2a0a4:	02f4bc23          	sd	a5,56(s1)
      regs.basic_block = regs.prologue_end = regs.epilogue_begin = false;
   2a0a8:	06048423          	sb	zero,104(s1)
   2a0ac:	060483a3          	sb	zero,103(s1)
   2a0b0:	060482a3          	sb	zero,101(s1)
      regs.discriminator = 0;
   2a0b4:	0604a823          	sw	zero,112(s1)
      break;
   2a0b8:	0780006f          	jal	zero,2a130 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
      regs.line = (signed)regs.line + cur->sleb128();
   2a0bc:	05c4a983          	lw	s3,92(s1)
   2a0c0:	00040513          	addi	a0,s0,0
   2a0c4:	8d5f30ef          	jal	ra,1d998 <dwarf::cursor::sleb128()>
   2a0c8:	0135053b          	addw	a0,a0,s3
   2a0cc:	04a4ae23          	sw	a0,92(s1)
      break;
   2a0d0:	0600006f          	jal	zero,2a130 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
      regs.is_stmt = !regs.is_stmt;
   2a0d4:	0644c783          	lbu	a5,100(s1)
   2a0d8:	0017c793          	xori	a5,a5,1
   2a0dc:	06f48223          	sb	a5,100(s1)
      break;
   2a0e0:	0500006f          	jal	zero,2a130 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
      regs.basic_block = true;
   2a0e4:	00100793          	addi	a5,zero,1
   2a0e8:	06f482a3          	sb	a5,101(s1)
      break;
   2a0ec:	0440006f          	jal	zero,2a130 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
      uarg = (255 - m->opcode_base) / m->line_range;
   2a0f0:	0ff00513          	addi	a0,zero,255
   2a0f4:	40e5053b          	subw	a0,a0,a4
   2a0f8:	01c9c783          	lbu	a5,28(s3)
   2a0fc:	02f5453b          	divw	a0,a0,a5
          ((regs.op_index + uarg) / m->maximum_operations_per_instruction);
   2a100:	0484e783          	lwu	a5,72(s1)
   2a104:	00a787b3          	add	a5,a5,a0
   2a108:	0199c703          	lbu	a4,25(s3)
   2a10c:	02e7d733          	divu	a4,a5,a4
          m->minimum_instruction_length *
   2a110:	0189c683          	lbu	a3,24(s3)
   2a114:	02d70733          	mul	a4,a4,a3
      regs.address +=
   2a118:	0404b683          	ld	a3,64(s1)
   2a11c:	00e68733          	add	a4,a3,a4
   2a120:	04e4b023          	sd	a4,64(s1)
          (regs.op_index + uarg) % m->maximum_operations_per_instruction;
   2a124:	0199c703          	lbu	a4,25(s3)
   2a128:	02e7f7b3          	remu	a5,a5,a4
      regs.op_index =
   2a12c:	04f4a423          	sw	a5,72(s1)
    return ((DW_LNS)opcode == DW_LNS::copy);
   2a130:	fff90513          	addi	a0,s2,-1
   2a134:	00153513          	sltiu	a0,a0,1
    if (cur->get_section_offset() > end)
      throw format_error("extended line number opcode exceeded its size");
    cur += end - cur->get_section_offset();
    return ((DW_LNE)opcode == DW_LNE::end_sequence);
  }
}
   2a138:	09813083          	ld	ra,152(sp)
   2a13c:	09013403          	ld	s0,144(sp)
   2a140:	08813483          	ld	s1,136(sp)
   2a144:	08013903          	ld	s2,128(sp)
   2a148:	07813983          	ld	s3,120(sp)
   2a14c:	07013a03          	ld	s4,112(sp)
   2a150:	06813a83          	ld	s5,104(sp)
   2a154:	0a010113          	addi	sp,sp,160
   2a158:	00008067          	jalr	zero,0(ra)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2a15c:	0105b703          	ld	a4,16(a1)
   2a160:	40f70633          	sub	a2,a4,a5
   2a164:	00100693          	addi	a3,zero,1
   2a168:	00c6f463          	bgeu	a3,a2,2a170 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3e0>
   2a16c:	00e7e663          	bltu	a5,a4,2a178 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3e8>
      underflow();
   2a170:	00040513          	addi	a0,s0,0
   2a174:	fd0f30ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   2a178:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   2a17c:	00043783          	ld	a5,0(s0)
   2a180:	01c7a783          	lw	a5,28(a5)
   2a184:	02079863          	bne	a5,zero,2a1b4 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x424>
        val |= ((uint64_t)p[i]) << (i * 8);
   2a188:	00174783          	lbu	a5,1(a4)
   2a18c:	00879793          	slli	a5,a5,0x8
   2a190:	00074683          	lbu	a3,0(a4)
   2a194:	00d7e7b3          	or	a5,a5,a3
    pos += sizeof(T);
   2a198:	00270713          	addi	a4,a4,2
   2a19c:	00e43823          	sd	a4,16(s0)
      regs.address += cur->fixed<uhalf>();
   2a1a0:	0404b703          	ld	a4,64(s1)
   2a1a4:	00f707b3          	add	a5,a4,a5
   2a1a8:	04f4b023          	sd	a5,64(s1)
      regs.op_index = 0;
   2a1ac:	0404a423          	sw	zero,72(s1)
      break;
   2a1b0:	f81ff06f          	jal	zero,2a130 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
        val = (val << 8) | (uint64_t)p[i];
   2a1b4:	00074783          	lbu	a5,0(a4)
   2a1b8:	00879793          	slli	a5,a5,0x8
   2a1bc:	00174683          	lbu	a3,1(a4)
   2a1c0:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   2a1c4:	fd5ff06f          	jal	zero,2a198 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x408>
      regs.prologue_end = true;
   2a1c8:	00100793          	addi	a5,zero,1
   2a1cc:	06f483a3          	sb	a5,103(s1)
      break;
   2a1d0:	f61ff06f          	jal	zero,2a130 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
      regs.epilogue_begin = true;
   2a1d4:	00100793          	addi	a5,zero,1
   2a1d8:	06f48423          	sb	a5,104(s1)
      break;
   2a1dc:	f55ff06f          	jal	zero,2a130 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
                         to_string((DW_LNS)opcode));
   2a1e0:	01000513          	addi	a0,zero,16
   2a1e4:	cacec0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2a1e8:	00050493          	addi	s1,a0,0
   2a1ec:	00090593          	addi	a1,s2,0
   2a1f0:	02010513          	addi	a0,sp,32
   2a1f4:	3e8050ef          	jal	ra,2f5dc <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)>
    { return std::move(__rhs.insert(0, __lhs)); }
   2a1f8:	0000e617          	auipc	a2,0xe
   2a1fc:	79060613          	addi	a2,a2,1936 # 38988 <typeinfo name for dwarf::expr_context+0x1a0>
   2a200:	00000593          	addi	a1,zero,0
   2a204:	02010513          	addi	a0,sp,32
   2a208:	bf8ec0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2a20c:	00050593          	addi	a1,a0,0
   2a210:	04010413          	addi	s0,sp,64
   2a214:	00040513          	addi	a0,s0,0
   2a218:	cb8ec0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   2a21c:	00040593          	addi	a1,s0,0
   2a220:	00048513          	addi	a0,s1,0
   2a224:	e0cec0ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2a228:	00019797          	auipc	a5,0x19
   2a22c:	3487b783          	ld	a5,840(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   2a230:	01078793          	addi	a5,a5,16
   2a234:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   2a238:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2a23c:	05010793          	addi	a5,sp,80
   2a240:	00f50463          	beq	a0,a5,2a248 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x4b8>
   2a244:	d5cec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a248:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2a24c:	03010793          	addi	a5,sp,48
   2a250:	00f50463          	beq	a0,a5,2a258 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x4c8>
   2a254:	d4cec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2a258:	00019617          	auipc	a2,0x19
   2a25c:	14063603          	ld	a2,320(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   2a260:	00019597          	auipc	a1,0x19
   2a264:	0685b583          	ld	a1,104(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   2a268:	00048513          	addi	a0,s1,0
   2a26c:	ef4ec0ef          	jal	ra,16960 <__cxa_throw@plt>
    switch ((DW_LNE)opcode) {
   2a270:	00400713          	addi	a4,zero,4
   2a274:	04e91c63          	bne	s2,a4,2a2cc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x53c>
    while (pos < sec->end) {
   2a278:	01053703          	ld	a4,16(a0)
    std::uint64_t result = 0;
   2a27c:	00000593          	addi	a1,zero,0
    int shift = 0;
   2a280:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   2a284:	02e7fa63          	bgeu	a5,a4,2a2b8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x528>
      uint8_t byte = *(uint8_t *)(pos++);
   2a288:	00178793          	addi	a5,a5,1
   2a28c:	00f43823          	sd	a5,16(s0)
   2a290:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   2a294:	07f77693          	andi	a3,a4,127
   2a298:	00c696b3          	sll	a3,a3,a2
   2a29c:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   2a2a0:	0187171b          	slliw	a4,a4,0x18
   2a2a4:	4187571b          	sraiw	a4,a4,0x18
   2a2a8:	00075e63          	bge	a4,zero,2a2c4 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x534>
      shift += 7;
   2a2ac:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   2a2b0:	01053703          	ld	a4,16(a0)
   2a2b4:	fce7eae3          	bltu	a5,a4,2a288 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x4f8>
    underflow();
   2a2b8:	00040513          	addi	a0,s0,0
   2a2bc:	e88f30ef          	jal	ra,1d944 <dwarf::cursor::underflow()>
    return 0;
   2a2c0:	00000593          	addi	a1,zero,0
      regs.discriminator = cur->uleb128();
   2a2c4:	06b4a823          	sw	a1,112(s1)
      break;
   2a2c8:	07c0006f          	jal	zero,2a344 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5b4>
    switch ((DW_LNE)opcode) {
   2a2cc:	f809091b          	addiw	s2,s2,-128
   2a2d0:	0189191b          	slliw	s2,s2,0x18
   2a2d4:	4189591b          	sraiw	s2,s2,0x18
   2a2d8:	14094863          	blt	s2,zero,2a428 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x698>
                          to_string((DW_LNE)opcode) + " not implemented");
   2a2dc:	01000513          	addi	a0,zero,16
   2a2e0:	bb0ec0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2a2e4:	00050493          	addi	s1,a0,0
   2a2e8:	000a8593          	addi	a1,s5,0
   2a2ec:	00010513          	addi	a0,sp,0
   2a2f0:	35d040ef          	jal	ra,2ee4c <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)>
   2a2f4:	09c0006f          	jal	zero,2a390 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x600>
      regs.end_sequence = true;
   2a2f8:	00100793          	addi	a5,zero,1
   2a2fc:	06f48323          	sb	a5,102(s1)
      entry = regs;
   2a300:	0404b803          	ld	a6,64(s1)
   2a304:	0484b503          	ld	a0,72(s1)
   2a308:	0504b583          	ld	a1,80(s1)
   2a30c:	0584b603          	ld	a2,88(s1)
   2a310:	0604b683          	ld	a3,96(s1)
   2a314:	0684b703          	ld	a4,104(s1)
   2a318:	0704b783          	ld	a5,112(s1)
   2a31c:	0104b423          	sd	a6,8(s1)
   2a320:	00a4b823          	sd	a0,16(s1)
   2a324:	00b4bc23          	sd	a1,24(s1)
   2a328:	02c4b023          	sd	a2,32(s1)
   2a32c:	02d4b423          	sd	a3,40(s1)
   2a330:	02e4b823          	sd	a4,48(s1)
   2a334:	02f4bc23          	sd	a5,56(s1)
      regs.reset(m->default_is_stmt);
   2a338:	01a9c583          	lbu	a1,26(s3)
   2a33c:	04048513          	addi	a0,s1,64
   2a340:	9d8fe0ef          	jal	ra,28518 <dwarf::line_table::entry::reset(bool)>
  section_offset get_section_offset() const { return pos - sec->begin; }
   2a344:	00043703          	ld	a4,0(s0)
   2a348:	01043783          	ld	a5,16(s0)
   2a34c:	00873703          	ld	a4,8(a4)
   2a350:	40e787b3          	sub	a5,a5,a4
    return ((DW_LNE)opcode == DW_LNE::end_sequence);
   2a354:	fff90513          	addi	a0,s2,-1
   2a358:	00153513          	sltiu	a0,a0,1
    if (cur->get_section_offset() > end)
   2a35c:	dcfa7ee3          	bgeu	s4,a5,2a138 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a8>
      throw format_error("extended line number opcode exceeded its size");
   2a360:	01000513          	addi	a0,zero,16
   2a364:	b2cec0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2a368:	00050413          	addi	s0,a0,0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   2a36c:	0000e597          	auipc	a1,0xe
   2a370:	65c58593          	addi	a1,a1,1628 # 389c8 <typeinfo name for dwarf::expr_context+0x1e0>
   2a374:	e9cec0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   2a378:	1400006f          	jal	zero,2a4b8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x728>
      m->read_file_entry(cur, false);
   2a37c:	00000613          	addi	a2,zero,0
   2a380:	00040593          	addi	a1,s0,0
   2a384:	00098513          	addi	a0,s3,0
   2a388:	c90fe0ef          	jal	ra,28818 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)>
      break;
   2a38c:	fb9ff06f          	jal	zero,2a344 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5b4>
    { return std::move(__rhs.insert(0, __lhs)); }
   2a390:	0000e617          	auipc	a2,0xe
   2a394:	61860613          	addi	a2,a2,1560 # 389a8 <typeinfo name for dwarf::expr_context+0x1c0>
   2a398:	00000593          	addi	a1,zero,0
   2a39c:	00010513          	addi	a0,sp,0
   2a3a0:	a60ec0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2a3a4:	00050593          	addi	a1,a0,0
   2a3a8:	02010413          	addi	s0,sp,32
   2a3ac:	00040513          	addi	a0,s0,0
   2a3b0:	b20ec0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   2a3b4:	0000e597          	auipc	a1,0xe
   2a3b8:	f8c58593          	addi	a1,a1,-116 # 38340 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x398>
   2a3bc:	00040513          	addi	a0,s0,0
   2a3c0:	e80ec0ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   2a3c4:	00050593          	addi	a1,a0,0
   2a3c8:	04010413          	addi	s0,sp,64
   2a3cc:	00040513          	addi	a0,s0,0
   2a3d0:	b00ec0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      throw runtime_error("vendor line number opcode " +
   2a3d4:	00040593          	addi	a1,s0,0
   2a3d8:	00048513          	addi	a0,s1,0
   2a3dc:	d44ec0ef          	jal	ra,16920 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   2a3e0:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2a3e4:	05010793          	addi	a5,sp,80
   2a3e8:	00f50463          	beq	a0,a5,2a3f0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x660>
   2a3ec:	bb4ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a3f0:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2a3f4:	03010793          	addi	a5,sp,48
   2a3f8:	00f50463          	beq	a0,a5,2a400 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x670>
   2a3fc:	ba4ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a400:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2a404:	01010793          	addi	a5,sp,16
   2a408:	00f50463          	beq	a0,a5,2a410 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x680>
   2a40c:	b94ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
                          to_string((DW_LNE)opcode) + " not implemented");
   2a410:	00019617          	auipc	a2,0x19
   2a414:	01063603          	ld	a2,16(a2) # 43420 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   2a418:	00019597          	auipc	a1,0x19
   2a41c:	1f85b583          	ld	a1,504(a1) # 43610 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   2a420:	00048513          	addi	a0,s1,0
   2a424:	d3cec0ef          	jal	ra,16960 <__cxa_throw@plt>
                         to_string((DW_LNE)opcode));
   2a428:	01000513          	addi	a0,zero,16
   2a42c:	a64ec0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2a430:	00050493          	addi	s1,a0,0
   2a434:	000a8593          	addi	a1,s5,0
   2a438:	02010513          	addi	a0,sp,32
   2a43c:	211040ef          	jal	ra,2ee4c <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)>
    { return std::move(__rhs.insert(0, __lhs)); }
   2a440:	0000e617          	auipc	a2,0xe
   2a444:	54860613          	addi	a2,a2,1352 # 38988 <typeinfo name for dwarf::expr_context+0x1a0>
   2a448:	00000593          	addi	a1,zero,0
   2a44c:	02010513          	addi	a0,sp,32
   2a450:	9b0ec0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2a454:	00050593          	addi	a1,a0,0
   2a458:	04010413          	addi	s0,sp,64
   2a45c:	00040513          	addi	a0,s0,0
   2a460:	a70ec0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   2a464:	00040593          	addi	a1,s0,0
   2a468:	00048513          	addi	a0,s1,0
   2a46c:	bc4ec0ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2a470:	00019797          	auipc	a5,0x19
   2a474:	1007b783          	ld	a5,256(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   2a478:	01078793          	addi	a5,a5,16
   2a47c:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   2a480:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2a484:	05010793          	addi	a5,sp,80
   2a488:	00f50463          	beq	a0,a5,2a490 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x700>
   2a48c:	b14ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a490:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2a494:	03010793          	addi	a5,sp,48
   2a498:	00f50463          	beq	a0,a5,2a4a0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x710>
   2a49c:	b04ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2a4a0:	00019617          	auipc	a2,0x19
   2a4a4:	ef863603          	ld	a2,-264(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   2a4a8:	00019597          	auipc	a1,0x19
   2a4ac:	e205b583          	ld	a1,-480(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   2a4b0:	00048513          	addi	a0,s1,0
   2a4b4:	cacec0ef          	jal	ra,16960 <__cxa_throw@plt>
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   2a4b8:	00019797          	auipc	a5,0x19
   2a4bc:	0b87b783          	ld	a5,184(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   2a4c0:	01078793          	addi	a5,a5,16
   2a4c4:	00f43023          	sd	a5,0(s0)
      throw format_error("extended line number opcode exceeded its size");
   2a4c8:	00019617          	auipc	a2,0x19
   2a4cc:	ed063603          	ld	a2,-304(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   2a4d0:	00019597          	auipc	a1,0x19
   2a4d4:	df85b583          	ld	a1,-520(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   2a4d8:	00040513          	addi	a0,s0,0
   2a4dc:	c84ec0ef          	jal	ra,16960 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   2a4e0:	00050413          	addi	s0,a0,0
   2a4e4:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2a4e8:	05010793          	addi	a5,sp,80
   2a4ec:	00f50463          	beq	a0,a5,2a4f4 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x764>
   2a4f0:	ab0ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a4f4:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2a4f8:	03010793          	addi	a5,sp,48
   2a4fc:	00f50463          	beq	a0,a5,2a504 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x774>
   2a500:	aa0ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
                         to_string((DW_LNS)opcode));
   2a504:	00048513          	addi	a0,s1,0
   2a508:	a48ec0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2a50c:	00040513          	addi	a0,s0,0
   2a510:	c80ec0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2a514:	00050413          	addi	s0,a0,0
   2a518:	fddff06f          	jal	zero,2a4f4 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x764>
   2a51c:	00050413          	addi	s0,a0,0
   2a520:	fe5ff06f          	jal	zero,2a504 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x774>
   2a524:	00050413          	addi	s0,a0,0
   2a528:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2a52c:	05010793          	addi	a5,sp,80
   2a530:	00f50463          	beq	a0,a5,2a538 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x7a8>
   2a534:	a6cec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a538:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2a53c:	03010793          	addi	a5,sp,48
   2a540:	00f50463          	beq	a0,a5,2a548 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x7b8>
   2a544:	a5cec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a548:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2a54c:	01010793          	addi	a5,sp,16
   2a550:	00f50463          	beq	a0,a5,2a558 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x7c8>
   2a554:	a4cec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
                          to_string((DW_LNE)opcode) + " not implemented");
   2a558:	00048513          	addi	a0,s1,0
   2a55c:	9f4ec0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2a560:	00040513          	addi	a0,s0,0
   2a564:	c2cec0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2a568:	00050413          	addi	s0,a0,0
   2a56c:	fcdff06f          	jal	zero,2a538 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x7a8>
   2a570:	00050413          	addi	s0,a0,0
   2a574:	fd5ff06f          	jal	zero,2a548 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x7b8>
   2a578:	00050413          	addi	s0,a0,0
   2a57c:	fddff06f          	jal	zero,2a558 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x7c8>
   2a580:	00050413          	addi	s0,a0,0
   2a584:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2a588:	05010793          	addi	a5,sp,80
   2a58c:	00f50463          	beq	a0,a5,2a594 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x804>
   2a590:	a10ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a594:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2a598:	03010793          	addi	a5,sp,48
   2a59c:	00f50463          	beq	a0,a5,2a5a4 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x814>
   2a5a0:	a00ec0ef          	jal	ra,167a0 <operator delete(void*)@plt>
                         to_string((DW_LNE)opcode));
   2a5a4:	00048513          	addi	a0,s1,0
   2a5a8:	9a8ec0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2a5ac:	00040513          	addi	a0,s0,0
   2a5b0:	be0ec0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2a5b4:	00050413          	addi	s0,a0,0
   2a5b8:	fddff06f          	jal	zero,2a594 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x804>
   2a5bc:	00050413          	addi	s0,a0,0
   2a5c0:	fe5ff06f          	jal	zero,2a5a4 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x814>
      throw format_error("extended line number opcode exceeded its size");
   2a5c4:	00050493          	addi	s1,a0,0
   2a5c8:	00040513          	addi	a0,s0,0
   2a5cc:	984ec0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2a5d0:	00048513          	addi	a0,s1,0
   2a5d4:	bbcec0ef          	jal	ra,16990 <_Unwind_Resume@plt>
        val |= ((uint64_t)p[i]) << (i * 8);
   2a5d8:	0007c583          	lbu	a1,0(a5)
    pos += sizeof(T);
   2a5dc:	00178793          	addi	a5,a5,1
   2a5e0:	00f43823          	sd	a5,16(s0)
    return (T)val;
   2a5e4:	0ff5f913          	andi	s2,a1,255
    switch ((DW_LNE)opcode) {
   2a5e8:	00058a93          	addi	s5,a1,0
   2a5ec:	00300713          	addi	a4,zero,3
   2a5f0:	d8e906e3          	beq	s2,a4,2a37c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5ec>
   2a5f4:	c7276ee3          	bltu	a4,s2,2a270 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x4e0>
   2a5f8:	00100793          	addi	a5,zero,1
   2a5fc:	cef90ee3          	beq	s2,a5,2a2f8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x568>
   2a600:	00200793          	addi	a5,zero,2
   2a604:	e2f912e3          	bne	s2,a5,2a428 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x698>
      regs.address = cur->address();
   2a608:	00040513          	addi	a0,s0,0
   2a60c:	00019317          	auipc	t1,0x19
   2a610:	d8433303          	ld	t1,-636(t1) # 43390 <dwarf::cursor::address()@@Base+0x1f5a4>
   2a614:	000300e7          	jalr	ra,0(t1)
   2a618:	04a4b023          	sd	a0,64(s1)
      regs.op_index = 0;
   2a61c:	0404a423          	sw	zero,72(s1)
      break;
   2a620:	d25ff06f          	jal	zero,2a344 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5b4>
        val |= ((uint64_t)p[i]) << (i * 8);
   2a624:	0007c903          	lbu	s2,0(a5)
    pos += sizeof(T);
   2a628:	00178793          	addi	a5,a5,1
   2a62c:	00f43823          	sd	a5,16(s0)
    return (T)val;
   2a630:	0ff97913          	andi	s2,s2,255
  if (opcode >= m->opcode_base) {
   2a634:	01d9c703          	lbu	a4,29(s3)
   2a638:	fae97c63          	bgeu	s2,a4,29df0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x60>
  } else if (opcode != 0) {
   2a63c:	860900e3          	beq	s2,zero,29e9c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x10c>
    switch ((DW_LNS)opcode) {
   2a640:	00c00693          	addi	a3,zero,12
   2a644:	b926eee3          	bltu	a3,s2,2a1e0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x450>
   2a648:	00291693          	slli	a3,s2,0x2
   2a64c:	0000e617          	auipc	a2,0xe
   2a650:	42460613          	addi	a2,a2,1060 # 38a70 <typeinfo name for dwarf::expr_context+0x288>
   2a654:	00c686b3          	add	a3,a3,a2
   2a658:	0006a683          	lw	a3,0(a3)
   2a65c:	00c686b3          	add	a3,a3,a2
   2a660:	00068067          	jalr	zero,0(a3)

000000000002a664 <dwarf::line_table::iterator::operator++()>:
line_table::iterator &line_table::iterator::operator++() {
   2a664:	f5010113          	addi	sp,sp,-176
   2a668:	0a113423          	sd	ra,168(sp)
   2a66c:	0a813023          	sd	s0,160(sp)
   2a670:	08913c23          	sd	s1,152(sp)
   2a674:	09213823          	sd	s2,144(sp)
   2a678:	09313423          	sd	s3,136(sp)
   2a67c:	00050413          	addi	s0,a0,0
   2a680:	00053783          	ld	a5,0(a0)
   2a684:	0007b783          	ld	a5,0(a5)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2a688:	0007b903          	ld	s2,0(a5)
      : _M_pi(__r._M_pi)
   2a68c:	0087b483          	ld	s1,8(a5)
	if (_M_pi != nullptr)
   2a690:	3a048863          	beq	s1,zero,2aa40 <dwarf::line_table::iterator::operator++()+0x3dc>
    if (__is_single_threaded())
   2a694:	00019797          	auipc	a5,0x19
   2a698:	e047b783          	ld	a5,-508(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2a69c:	0007c783          	lbu	a5,0(a5)
   2a6a0:	0a078a63          	beq	a5,zero,2a754 <dwarf::line_table::iterator::operator++()+0xf0>
  { *__mem += __val; }
   2a6a4:	0304a783          	lw	a5,48(s1)
   2a6a8:	0017879b          	addiw	a5,a5,1
   2a6ac:	02f4a823          	sw	a5,48(s1)
  cursor cur(table->m->sec, pos);
   2a6b0:	07843983          	ld	s3,120(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2a6b4:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   2a6b8:	06913823          	sd	s1,112(sp)
    if (__is_single_threaded())
   2a6bc:	00019797          	auipc	a5,0x19
   2a6c0:	ddc7b783          	ld	a5,-548(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2a6c4:	0007c783          	lbu	a5,0(a5)
   2a6c8:	08078e63          	beq	a5,zero,2a764 <dwarf::line_table::iterator::operator++()+0x100>
  { *__mem += __val; }
   2a6cc:	0304a783          	lw	a5,48(s1)
   2a6d0:	0017879b          	addiw	a5,a5,1
   2a6d4:	02f4a823          	sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   2a6d8:	00893783          	ld	a5,8(s2)
   2a6dc:	013787b3          	add	a5,a5,s3
   2a6e0:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   2a6e4:	00019797          	auipc	a5,0x19
   2a6e8:	db47b783          	ld	a5,-588(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2a6ec:	0007c783          	lbu	a5,0(a5)
   2a6f0:	08078263          	beq	a5,zero,2a774 <dwarf::line_table::iterator::operator++()+0x110>
    _Atomic_word __result = *__mem;
   2a6f4:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   2a6f8:	fff5079b          	addiw	a5,a0,-1
   2a6fc:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2a700:	00100793          	addi	a5,zero,1
   2a704:	34f51a63          	bne	a0,a5,2aa58 <dwarf::line_table::iterator::operator++()+0x3f4>
	_M_dispose();
   2a708:	0004b783          	ld	a5,0(s1)
   2a70c:	0107b783          	ld	a5,16(a5)
   2a710:	00048513          	addi	a0,s1,0
   2a714:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2a718:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2a71c:	00019797          	auipc	a5,0x19
   2a720:	d7c7b783          	ld	a5,-644(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2a724:	0007c783          	lbu	a5,0(a5)
   2a728:	04078e63          	beq	a5,zero,2a784 <dwarf::line_table::iterator::operator++()+0x120>
    _Atomic_word __result = *__mem;
   2a72c:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   2a730:	fff5079b          	addiw	a5,a0,-1
   2a734:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2a738:	00100793          	addi	a5,zero,1
   2a73c:	30f51e63          	bne	a0,a5,2aa58 <dwarf::line_table::iterator::operator++()+0x3f4>
	    _M_destroy();
   2a740:	0004b783          	ld	a5,0(s1)
   2a744:	0187b783          	ld	a5,24(a5)
   2a748:	00048513          	addi	a0,s1,0
   2a74c:	000780e7          	jalr	ra,0(a5)
   2a750:	3080006f          	jal	zero,2aa58 <dwarf::line_table::iterator::operator++()+0x3f4>
      __atomic_add(__mem, __val);
   2a754:	00100593          	addi	a1,zero,1
   2a758:	03048513          	addi	a0,s1,48
   2a75c:	e55eb0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2a760:	f51ff06f          	jal	zero,2a6b0 <dwarf::line_table::iterator::operator++()+0x4c>
   2a764:	00100593          	addi	a1,zero,1
   2a768:	03048513          	addi	a0,s1,48
   2a76c:	e45eb0ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2a770:	f69ff06f          	jal	zero,2a6d8 <dwarf::line_table::iterator::operator++()+0x74>
      return __exchange_and_add(__mem, __val);
   2a774:	fff00593          	addi	a1,zero,-1
   2a778:	03048513          	addi	a0,s1,48
   2a77c:	e75eb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2a780:	f81ff06f          	jal	zero,2a700 <dwarf::line_table::iterator::operator++()+0x9c>
   2a784:	fff00593          	addi	a1,zero,-1
   2a788:	03448513          	addi	a0,s1,52
   2a78c:	e65eb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2a790:	fa9ff06f          	jal	zero,2a738 <dwarf::line_table::iterator::operator++()+0xd4>
  if (stepped && !output)
   2a794:	30048063          	beq	s1,zero,2aa94 <dwarf::line_table::iterator::operator++()+0x430>
   2a798:	0a050863          	beq	a0,zero,2a848 <dwarf::line_table::iterator::operator++()+0x1e4>
  if (stepped && cur.end()) {
   2a79c:	00d7ea63          	bltu	a5,a3,2a7b0 <dwarf::line_table::iterator::operator++()+0x14c>
      { return _M_ptr; }
   2a7a0:	00043683          	ld	a3,0(s0)
   2a7a4:	0006b683          	ld	a3,0(a3)
    table->m->file_names_complete = true;
   2a7a8:	00100613          	addi	a2,zero,1
   2a7ac:	06c68823          	sb	a2,112(a3)
    if (entry.file_index < table->m->file_names.size())
   2a7b0:	02046583          	lwu	a1,32(s0)
   2a7b4:	00043683          	ld	a3,0(s0)
   2a7b8:	0006b683          	ld	a3,0(a3)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2a7bc:	0506b603          	ld	a2,80(a3)
   2a7c0:	0586b683          	ld	a3,88(a3)
   2a7c4:	40c686b3          	sub	a3,a3,a2
   2a7c8:	4046d693          	srai	a3,a3,0x4
   2a7cc:	0000d517          	auipc	a0,0xd
   2a7d0:	2f453503          	ld	a0,756(a0) # 37ac0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   2a7d4:	02a686b3          	mul	a3,a3,a0
   2a7d8:	0ad5fc63          	bgeu	a1,a3,2a890 <dwarf::line_table::iterator::operator++()+0x22c>
	return *(this->_M_impl._M_start + __n);
   2a7dc:	00159693          	slli	a3,a1,0x1
   2a7e0:	00b686b3          	add	a3,a3,a1
   2a7e4:	00469693          	slli	a3,a3,0x4
   2a7e8:	00d60633          	add	a2,a2,a3
      entry.file = &table->m->file_names[entry.file_index];
   2a7ec:	00c43c23          	sd	a2,24(s0)
  section_offset get_section_offset() const { return pos - sec->begin; }
   2a7f0:	00873703          	ld	a4,8(a4)
   2a7f4:	40e787b3          	sub	a5,a5,a4
  pos = cur.get_section_offset();
   2a7f8:	06f43c23          	sd	a5,120(s0)
	if (_M_pi != nullptr)
   2a7fc:	07013483          	ld	s1,112(sp)
   2a800:	02048463          	beq	s1,zero,2a828 <dwarf::line_table::iterator::operator++()+0x1c4>
    if (__is_single_threaded())
   2a804:	00019797          	auipc	a5,0x19
   2a808:	c947b783          	ld	a5,-876(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2a80c:	0007c783          	lbu	a5,0(a5)
   2a810:	14078663          	beq	a5,zero,2a95c <dwarf::line_table::iterator::operator++()+0x2f8>
    _Atomic_word __result = *__mem;
   2a814:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   2a818:	fff5079b          	addiw	a5,a0,-1
   2a81c:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2a820:	00100793          	addi	a5,zero,1
   2a824:	14f50463          	beq	a0,a5,2a96c <dwarf::line_table::iterator::operator++()+0x308>
}
   2a828:	00040513          	addi	a0,s0,0
   2a82c:	0a813083          	ld	ra,168(sp)
   2a830:	0a013403          	ld	s0,160(sp)
   2a834:	09813483          	ld	s1,152(sp)
   2a838:	09013903          	ld	s2,144(sp)
   2a83c:	08813983          	ld	s3,136(sp)
   2a840:	0b010113          	addi	sp,sp,176
   2a844:	00008067          	jalr	zero,0(ra)
    throw format_error("unexpected end of line table");
   2a848:	01000513          	addi	a0,zero,16
   2a84c:	e45eb0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2a850:	00050493          	addi	s1,a0,0
   2a854:	0000e597          	auipc	a1,0xe
   2a858:	1a458593          	addi	a1,a1,420 # 389f8 <typeinfo name for dwarf::expr_context+0x210>
   2a85c:	9b4ec0ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   2a860:	00019797          	auipc	a5,0x19
   2a864:	d107b783          	ld	a5,-752(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   2a868:	01078793          	addi	a5,a5,16
   2a86c:	00f4b023          	sd	a5,0(s1)
   2a870:	00019617          	auipc	a2,0x19
   2a874:	b2863603          	ld	a2,-1240(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   2a878:	00019597          	auipc	a1,0x19
   2a87c:	a505b583          	ld	a1,-1456(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   2a880:	00048513          	addi	a0,s1,0
   2a884:	8dcec0ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   2a888:	00050413          	addi	s0,a0,0
   2a88c:	1480006f          	jal	zero,2a9d4 <dwarf::line_table::iterator::operator++()+0x370>
                         " in line table");
   2a890:	01000513          	addi	a0,zero,16
   2a894:	dfdeb0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2a898:	00050493          	addi	s1,a0,0
      throw format_error("bad file index " + std::to_string(entry.file_index) +
   2a89c:	02042583          	lw	a1,32(s0)
   2a8a0:	00810413          	addi	s0,sp,8
   2a8a4:	00040513          	addi	a0,s0,0
   2a8a8:	00019317          	auipc	t1,0x19
   2a8ac:	c6033303          	ld	t1,-928(t1) # 43508 <std::__cxx11::to_string(unsigned int)@@Base+0x18060>
   2a8b0:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   2a8b4:	0000e617          	auipc	a2,0xe
   2a8b8:	16460613          	addi	a2,a2,356 # 38a18 <typeinfo name for dwarf::expr_context+0x230>
   2a8bc:	00000593          	addi	a1,zero,0
   2a8c0:	00040513          	addi	a0,s0,0
   2a8c4:	d3deb0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2a8c8:	00050593          	addi	a1,a0,0
   2a8cc:	02810413          	addi	s0,sp,40
   2a8d0:	00040513          	addi	a0,s0,0
   2a8d4:	dfdeb0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   2a8d8:	0000e597          	auipc	a1,0xe
   2a8dc:	15058593          	addi	a1,a1,336 # 38a28 <typeinfo name for dwarf::expr_context+0x240>
   2a8e0:	00040513          	addi	a0,s0,0
   2a8e4:	95cec0ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   2a8e8:	00050593          	addi	a1,a0,0
   2a8ec:	04810413          	addi	s0,sp,72
   2a8f0:	00040513          	addi	a0,s0,0
   2a8f4:	dddeb0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   2a8f8:	00040593          	addi	a1,s0,0
   2a8fc:	00048513          	addi	a0,s1,0
   2a900:	f31eb0ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2a904:	00019797          	auipc	a5,0x19
   2a908:	c6c7b783          	ld	a5,-916(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   2a90c:	01078793          	addi	a5,a5,16
   2a910:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   2a914:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   2a918:	05810793          	addi	a5,sp,88
   2a91c:	00f50463          	beq	a0,a5,2a924 <dwarf::line_table::iterator::operator++()+0x2c0>
   2a920:	e81eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a924:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   2a928:	03810793          	addi	a5,sp,56
   2a92c:	00f50463          	beq	a0,a5,2a934 <dwarf::line_table::iterator::operator++()+0x2d0>
   2a930:	e71eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a934:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   2a938:	01810793          	addi	a5,sp,24
   2a93c:	00f50463          	beq	a0,a5,2a944 <dwarf::line_table::iterator::operator++()+0x2e0>
   2a940:	e61eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
                         " in line table");
   2a944:	00019617          	auipc	a2,0x19
   2a948:	a5463603          	ld	a2,-1452(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   2a94c:	00019597          	auipc	a1,0x19
   2a950:	97c5b583          	ld	a1,-1668(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   2a954:	00048513          	addi	a0,s1,0
   2a958:	808ec0ef          	jal	ra,16960 <__cxa_throw@plt>
      return __exchange_and_add(__mem, __val);
   2a95c:	fff00593          	addi	a1,zero,-1
   2a960:	03048513          	addi	a0,s1,48
   2a964:	c8deb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2a968:	eb9ff06f          	jal	zero,2a820 <dwarf::line_table::iterator::operator++()+0x1bc>
	_M_dispose();
   2a96c:	0004b783          	ld	a5,0(s1)
   2a970:	0107b783          	ld	a5,16(a5)
   2a974:	00048513          	addi	a0,s1,0
   2a978:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2a97c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2a980:	00019797          	auipc	a5,0x19
   2a984:	b187b783          	ld	a5,-1256(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2a988:	0007c783          	lbu	a5,0(a5)
   2a98c:	02078663          	beq	a5,zero,2a9b8 <dwarf::line_table::iterator::operator++()+0x354>
    _Atomic_word __result = *__mem;
   2a990:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   2a994:	fff5079b          	addiw	a5,a0,-1
   2a998:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2a99c:	00100793          	addi	a5,zero,1
   2a9a0:	e8f514e3          	bne	a0,a5,2a828 <dwarf::line_table::iterator::operator++()+0x1c4>
	    _M_destroy();
   2a9a4:	0004b783          	ld	a5,0(s1)
   2a9a8:	0187b783          	ld	a5,24(a5)
   2a9ac:	00048513          	addi	a0,s1,0
   2a9b0:	000780e7          	jalr	ra,0(a5)
  return *this;
   2a9b4:	e75ff06f          	jal	zero,2a828 <dwarf::line_table::iterator::operator++()+0x1c4>
      return __exchange_and_add(__mem, __val);
   2a9b8:	fff00593          	addi	a1,zero,-1
   2a9bc:	03448513          	addi	a0,s1,52
   2a9c0:	c31eb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2a9c4:	fd9ff06f          	jal	zero,2a99c <dwarf::line_table::iterator::operator++()+0x338>
    throw format_error("unexpected end of line table");
   2a9c8:	00050413          	addi	s0,a0,0
   2a9cc:	00048513          	addi	a0,s1,0
   2a9d0:	d81eb0ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   2a9d4:	07013503          	ld	a0,112(sp)
   2a9d8:	00050863          	beq	a0,zero,2a9e8 <dwarf::line_table::iterator::operator++()+0x384>
	  _M_pi->_M_release();
   2a9dc:	00019317          	auipc	t1,0x19
   2a9e0:	a0433303          	ld	t1,-1532(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   2a9e4:	000300e7          	jalr	ra,0(t1)
   2a9e8:	00040513          	addi	a0,s0,0
   2a9ec:	fa5eb0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2a9f0:	00050413          	addi	s0,a0,0
   2a9f4:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   2a9f8:	05810793          	addi	a5,sp,88
   2a9fc:	00f50463          	beq	a0,a5,2aa04 <dwarf::line_table::iterator::operator++()+0x3a0>
   2aa00:	da1eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2aa04:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   2aa08:	03810793          	addi	a5,sp,56
   2aa0c:	00f50463          	beq	a0,a5,2aa14 <dwarf::line_table::iterator::operator++()+0x3b0>
   2aa10:	d91eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2aa14:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   2aa18:	01810793          	addi	a5,sp,24
   2aa1c:	00f50463          	beq	a0,a5,2aa24 <dwarf::line_table::iterator::operator++()+0x3c0>
   2aa20:	d81eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
                         " in line table");
   2aa24:	00048513          	addi	a0,s1,0
   2aa28:	d29eb0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2aa2c:	fa9ff06f          	jal	zero,2a9d4 <dwarf::line_table::iterator::operator++()+0x370>
      { return _M_dataplus._M_p; }
   2aa30:	00050413          	addi	s0,a0,0
   2aa34:	fd1ff06f          	jal	zero,2aa04 <dwarf::line_table::iterator::operator++()+0x3a0>
   2aa38:	00050413          	addi	s0,a0,0
   2aa3c:	fd9ff06f          	jal	zero,2aa14 <dwarf::line_table::iterator::operator++()+0x3b0>
  cursor cur(table->m->sec, pos);
   2aa40:	07853703          	ld	a4,120(a0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2aa44:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   2aa48:	06013823          	sd	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   2aa4c:	00893783          	ld	a5,8(s2)
   2aa50:	00e787b3          	add	a5,a5,a4
   2aa54:	06f13c23          	sd	a5,120(sp)
line_table::iterator &line_table::iterator::operator++() {
   2aa58:	00000513          	addi	a0,zero,0
   2aa5c:	00000493          	addi	s1,zero,0
    stepped = true;
   2aa60:	00100913          	addi	s2,zero,1
    output = step(&cur);
   2aa64:	06810993          	addi	s3,sp,104
  bool end() const { return pos >= sec->end; }
   2aa68:	07813783          	ld	a5,120(sp)
      { return _M_ptr; }
   2aa6c:	06813703          	ld	a4,104(sp)
   2aa70:	01073683          	ld	a3,16(a4)
  while (!cur.end() && !output) {
   2aa74:	d2d7f0e3          	bgeu	a5,a3,2a794 <dwarf::line_table::iterator::operator++()+0x130>
   2aa78:	00051c63          	bne	a0,zero,2aa90 <dwarf::line_table::iterator::operator++()+0x42c>
    stepped = true;
   2aa7c:	00090493          	addi	s1,s2,0
    output = step(&cur);
   2aa80:	00098593          	addi	a1,s3,0
   2aa84:	00040513          	addi	a0,s0,0
   2aa88:	b08ff0ef          	jal	ra,29d90 <dwarf::line_table::iterator::step(dwarf::cursor*)>
   2aa8c:	fddff06f          	jal	zero,2aa68 <dwarf::line_table::iterator::operator++()+0x404>
  if (stepped && !output)
   2aa90:	d20490e3          	bne	s1,zero,2a7b0 <dwarf::line_table::iterator::operator++()+0x14c>
  if (output) {
   2aa94:	d4050ee3          	beq	a0,zero,2a7f0 <dwarf::line_table::iterator::operator++()+0x18c>
   2aa98:	d19ff06f          	jal	zero,2a7b0 <dwarf::line_table::iterator::operator++()+0x14c>

000000000002aa9c <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>:
    : table(table), pos(pos) {
   2aa9c:	00b53023          	sd	a1,0(a0)
   2aaa0:	06c53c23          	sd	a2,120(a0)
  if (table) {
   2aaa4:	02058e63          	beq	a1,zero,2aae0 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)+0x44>
line_table::iterator::iterator(const line_table *table, section_offset pos)
   2aaa8:	ff010113          	addi	sp,sp,-16
   2aaac:	00113423          	sd	ra,8(sp)
   2aab0:	00813023          	sd	s0,0(sp)
   2aab4:	00050413          	addi	s0,a0,0
    regs.reset(table->m->default_is_stmt);
   2aab8:	0005b783          	ld	a5,0(a1)
   2aabc:	01a7c583          	lbu	a1,26(a5)
   2aac0:	04050513          	addi	a0,a0,64
   2aac4:	a55fd0ef          	jal	ra,28518 <dwarf::line_table::entry::reset(bool)>
    ++(*this);
   2aac8:	00040513          	addi	a0,s0,0
   2aacc:	b99ff0ef          	jal	ra,2a664 <dwarf::line_table::iterator::operator++()>
}
   2aad0:	00813083          	ld	ra,8(sp)
   2aad4:	00013403          	ld	s0,0(sp)
   2aad8:	01010113          	addi	sp,sp,16
   2aadc:	00008067          	jalr	zero,0(ra)
   2aae0:	00008067          	jalr	zero,0(ra)

000000000002aae4 <dwarf::line_table::begin() const>:
line_table::iterator line_table::begin() const {
   2aae4:	ff010113          	addi	sp,sp,-16
   2aae8:	00113423          	sd	ra,8(sp)
   2aaec:	00813023          	sd	s0,0(sp)
   2aaf0:	00050413          	addi	s0,a0,0
      { return _M_ptr != nullptr; }
   2aaf4:	0005b783          	ld	a5,0(a1)
  if (!valid())
   2aaf8:	02078063          	beq	a5,zero,2ab18 <dwarf::line_table::begin() const+0x34>
  return iterator(this, m->program_offset);
   2aafc:	0107b603          	ld	a2,16(a5)
   2ab00:	f9dff0ef          	jal	ra,2aa9c <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
}
   2ab04:	00040513          	addi	a0,s0,0
   2ab08:	00813083          	ld	ra,8(sp)
   2ab0c:	00013403          	ld	s0,0(sp)
   2ab10:	01010113          	addi	sp,sp,16
   2ab14:	00008067          	jalr	zero,0(ra)
    return iterator(nullptr, 0);
   2ab18:	00000613          	addi	a2,zero,0
   2ab1c:	00000593          	addi	a1,zero,0
   2ab20:	f7dff0ef          	jal	ra,2aa9c <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
   2ab24:	fe1ff06f          	jal	zero,2ab04 <dwarf::line_table::begin() const+0x20>

000000000002ab28 <dwarf::line_table::end() const>:
line_table::iterator line_table::end() const {
   2ab28:	ff010113          	addi	sp,sp,-16
   2ab2c:	00113423          	sd	ra,8(sp)
   2ab30:	00813023          	sd	s0,0(sp)
   2ab34:	00050413          	addi	s0,a0,0
   2ab38:	0005b783          	ld	a5,0(a1)
  if (!valid())
   2ab3c:	02078663          	beq	a5,zero,2ab68 <dwarf::line_table::end() const+0x40>
      { return _M_ptr; }
   2ab40:	0007b783          	ld	a5,0(a5)
  size_t size() const { return end - begin; }
   2ab44:	0107b603          	ld	a2,16(a5)
   2ab48:	0087b783          	ld	a5,8(a5)
  return iterator(this, m->sec->size());
   2ab4c:	40f60633          	sub	a2,a2,a5
   2ab50:	f4dff0ef          	jal	ra,2aa9c <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
}
   2ab54:	00040513          	addi	a0,s0,0
   2ab58:	00813083          	ld	ra,8(sp)
   2ab5c:	00013403          	ld	s0,0(sp)
   2ab60:	01010113          	addi	sp,sp,16
   2ab64:	00008067          	jalr	zero,0(ra)
    return iterator(nullptr, 0);
   2ab68:	00000613          	addi	a2,zero,0
   2ab6c:	00000593          	addi	a1,zero,0
   2ab70:	f2dff0ef          	jal	ra,2aa9c <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
   2ab74:	fe1ff06f          	jal	zero,2ab54 <dwarf::line_table::end() const+0x2c>

000000000002ab78 <dwarf::line_table::find_address(unsigned long) const>:
line_table::iterator line_table::find_address(taddr addr) const {
   2ab78:	e4010113          	addi	sp,sp,-448
   2ab7c:	1a113c23          	sd	ra,440(sp)
   2ab80:	1a813823          	sd	s0,432(sp)
   2ab84:	1a913423          	sd	s1,424(sp)
   2ab88:	1b213023          	sd	s2,416(sp)
   2ab8c:	19313c23          	sd	s3,408(sp)
   2ab90:	19413823          	sd	s4,400(sp)
   2ab94:	19513423          	sd	s5,392(sp)
   2ab98:	00050413          	addi	s0,a0,0
   2ab9c:	00058493          	addi	s1,a1,0
   2aba0:	00060913          	addi	s2,a2,0
  iterator prev = begin(), e = end();
   2aba4:	f41ff0ef          	jal	ra,2aae4 <dwarf::line_table::begin() const>
   2aba8:	00048593          	addi	a1,s1,0
   2abac:	10010513          	addi	a0,sp,256
   2abb0:	f79ff0ef          	jal	ra,2ab28 <dwarf::line_table::end() const>
   2abb4:	10013a03          	ld	s4,256(sp)
   2abb8:	17813983          	ld	s3,376(sp)
    return o.pos == pos && o.table == table;
   2abbc:	07843783          	ld	a5,120(s0)
   2abc0:	05378863          	beq	a5,s3,2ac10 <dwarf::line_table::find_address(unsigned long) const+0x98>
  iterator it = prev;
   2abc4:	00040793          	addi	a5,s0,0
   2abc8:	08010713          	addi	a4,sp,128
   2abcc:	08040813          	addi	a6,s0,128
   2abd0:	0007b503          	ld	a0,0(a5)
   2abd4:	0087b583          	ld	a1,8(a5)
   2abd8:	0107b603          	ld	a2,16(a5)
   2abdc:	0187b683          	ld	a3,24(a5)
   2abe0:	00a73023          	sd	a0,0(a4)
   2abe4:	00b73423          	sd	a1,8(a4)
   2abe8:	00c73823          	sd	a2,16(a4)
   2abec:	00d73c23          	sd	a3,24(a4)
   2abf0:	02078793          	addi	a5,a5,32
   2abf4:	02070713          	addi	a4,a4,32
   2abf8:	fd079ce3          	bne	a5,a6,2abd0 <dwarf::line_table::find_address(unsigned long) const+0x58>
  for (++it; it != e; prev = it++) {
   2abfc:	08010513          	addi	a0,sp,128
   2ac00:	a65ff0ef          	jal	ra,2a664 <dwarf::line_table::iterator::operator++()>
    iterator tmp(*this);
   2ac04:	10010a93          	addi	s5,sp,256
    ++(*this);
   2ac08:	08010493          	addi	s1,sp,128
   2ac0c:	0800006f          	jal	zero,2ac8c <dwarf::line_table::find_address(unsigned long) const+0x114>
    return o.pos == pos && o.table == table;
   2ac10:	00043783          	ld	a5,0(s0)
   2ac14:	fafa18e3          	bne	s4,a5,2abc4 <dwarf::line_table::find_address(unsigned long) const+0x4c>
   2ac18:	0d80006f          	jal	zero,2acf0 <dwarf::line_table::find_address(unsigned long) const+0x178>
    iterator tmp(*this);
   2ac1c:	08010793          	addi	a5,sp,128
   2ac20:	00010713          	addi	a4,sp,0
   2ac24:	0007b503          	ld	a0,0(a5)
   2ac28:	0087b583          	ld	a1,8(a5)
   2ac2c:	0107b603          	ld	a2,16(a5)
   2ac30:	0187b683          	ld	a3,24(a5)
   2ac34:	00a73023          	sd	a0,0(a4)
   2ac38:	00b73423          	sd	a1,8(a4)
   2ac3c:	00c73823          	sd	a2,16(a4)
   2ac40:	00d73c23          	sd	a3,24(a4)
   2ac44:	02078793          	addi	a5,a5,32
   2ac48:	02070713          	addi	a4,a4,32
   2ac4c:	fd579ce3          	bne	a5,s5,2ac24 <dwarf::line_table::find_address(unsigned long) const+0xac>
    ++(*this);
   2ac50:	00048513          	addi	a0,s1,0
   2ac54:	a11ff0ef          	jal	ra,2a664 <dwarf::line_table::iterator::operator++()>
   2ac58:	00010793          	addi	a5,sp,0
   2ac5c:	00040713          	addi	a4,s0,0
   2ac60:	0007b503          	ld	a0,0(a5)
   2ac64:	0087b583          	ld	a1,8(a5)
   2ac68:	0107b603          	ld	a2,16(a5)
   2ac6c:	0187b683          	ld	a3,24(a5)
   2ac70:	00a73023          	sd	a0,0(a4)
   2ac74:	00b73423          	sd	a1,8(a4)
   2ac78:	00c73823          	sd	a2,16(a4)
   2ac7c:	00d73c23          	sd	a3,24(a4)
   2ac80:	02078793          	addi	a5,a5,32
   2ac84:	02070713          	addi	a4,a4,32
   2ac88:	fc979ce3          	bne	a5,s1,2ac60 <dwarf::line_table::find_address(unsigned long) const+0xe8>
    return o.pos == pos && o.table == table;
   2ac8c:	0f813783          	ld	a5,248(sp)
   2ac90:	03378063          	beq	a5,s3,2acb0 <dwarf::line_table::find_address(unsigned long) const+0x138>
    if (prev->address <= addr && it->address > addr && !prev->end_sequence)
   2ac94:	00843783          	ld	a5,8(s0)
   2ac98:	f8f962e3          	bltu	s2,a5,2ac1c <dwarf::line_table::find_address(unsigned long) const+0xa4>
   2ac9c:	08813783          	ld	a5,136(sp)
   2aca0:	f6f97ee3          	bgeu	s2,a5,2ac1c <dwarf::line_table::find_address(unsigned long) const+0xa4>
   2aca4:	02e44783          	lbu	a5,46(s0)
   2aca8:	f6079ae3          	bne	a5,zero,2ac1c <dwarf::line_table::find_address(unsigned long) const+0xa4>
   2acac:	0440006f          	jal	zero,2acf0 <dwarf::line_table::find_address(unsigned long) const+0x178>
   2acb0:	08013783          	ld	a5,128(sp)
   2acb4:	fefa10e3          	bne	s4,a5,2ac94 <dwarf::line_table::find_address(unsigned long) const+0x11c>
  prev = e;
   2acb8:	10010793          	addi	a5,sp,256
   2acbc:	00040713          	addi	a4,s0,0
   2acc0:	18010813          	addi	a6,sp,384
   2acc4:	0007b503          	ld	a0,0(a5)
   2acc8:	0087b583          	ld	a1,8(a5)
   2accc:	0107b603          	ld	a2,16(a5)
   2acd0:	0187b683          	ld	a3,24(a5)
   2acd4:	00a73023          	sd	a0,0(a4)
   2acd8:	00b73423          	sd	a1,8(a4)
   2acdc:	00c73823          	sd	a2,16(a4)
   2ace0:	00d73c23          	sd	a3,24(a4)
   2ace4:	02078793          	addi	a5,a5,32
   2ace8:	02070713          	addi	a4,a4,32
   2acec:	fd079ce3          	bne	a5,a6,2acc4 <dwarf::line_table::find_address(unsigned long) const+0x14c>
}
   2acf0:	00040513          	addi	a0,s0,0
   2acf4:	1b813083          	ld	ra,440(sp)
   2acf8:	1b013403          	ld	s0,432(sp)
   2acfc:	1a813483          	ld	s1,424(sp)
   2ad00:	1a013903          	ld	s2,416(sp)
   2ad04:	19813983          	ld	s3,408(sp)
   2ad08:	19013a03          	ld	s4,400(sp)
   2ad0c:	18813a83          	ld	s5,392(sp)
   2ad10:	1c010113          	addi	sp,sp,448
   2ad14:	00008067          	jalr	zero,0(ra)

000000000002ad18 <dwarf::line_table::get_file(unsigned int) const>:
const line_table::file *line_table::get_file(unsigned index) const {
   2ad18:	e7010113          	addi	sp,sp,-400
   2ad1c:	18113423          	sd	ra,392(sp)
   2ad20:	18813023          	sd	s0,384(sp)
   2ad24:	16913c23          	sd	s1,376(sp)
   2ad28:	17213823          	sd	s2,368(sp)
   2ad2c:	17313423          	sd	s3,360(sp)
   2ad30:	00050413          	addi	s0,a0,0
  if (index >= m->file_names.size()) {
   2ad34:	02059493          	slli	s1,a1,0x20
   2ad38:	0204d493          	srli	s1,s1,0x20
   2ad3c:	00053703          	ld	a4,0(a0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2ad40:	05873783          	ld	a5,88(a4)
   2ad44:	05073683          	ld	a3,80(a4)
   2ad48:	40d787b3          	sub	a5,a5,a3
   2ad4c:	4047d793          	srai	a5,a5,0x4
   2ad50:	0000d697          	auipc	a3,0xd
   2ad54:	d706b683          	ld	a3,-656(a3) # 37ac0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   2ad58:	02d787b3          	mul	a5,a5,a3
   2ad5c:	0af4e863          	bltu	s1,a5,2ae0c <dwarf::line_table::get_file(unsigned int) const+0xf4>
   2ad60:	00058913          	addi	s2,a1,0
    if (!m->file_names_complete) {
   2ad64:	07074783          	lbu	a5,112(a4)
   2ad68:	04078063          	beq	a5,zero,2ada8 <dwarf::line_table::get_file(unsigned int) const+0x90>
                         std::to_string(m->file_names.size()));
   2ad6c:	01000513          	addi	a0,zero,16
   2ad70:	921eb0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2ad74:	00050493          	addi	s1,a0,0
      throw out_of_range("file name index " + std::to_string(index) +
   2ad78:	00090593          	addi	a1,s2,0
   2ad7c:	00010913          	addi	s2,sp,0
   2ad80:	00090513          	addi	a0,s2,0
   2ad84:	00018317          	auipc	t1,0x18
   2ad88:	78433303          	ld	t1,1924(t1) # 43508 <std::__cxx11::to_string(unsigned int)@@Base+0x18060>
   2ad8c:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   2ad90:	0000e617          	auipc	a2,0xe
   2ad94:	ca860613          	addi	a2,a2,-856 # 38a38 <typeinfo name for dwarf::expr_context+0x250>
   2ad98:	00000593          	addi	a1,zero,0
   2ad9c:	00090513          	addi	a0,s2,0
   2ada0:	861eb0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2ada4:	09c0006f          	jal	zero,2ae40 <dwarf::line_table::get_file(unsigned int) const+0x128>
      for (auto &ent : *this)
   2ada8:	00050593          	addi	a1,a0,0
   2adac:	06010513          	addi	a0,sp,96
   2adb0:	d35ff0ef          	jal	ra,2aae4 <dwarf::line_table::begin() const>
   2adb4:	00040593          	addi	a1,s0,0
   2adb8:	0e010513          	addi	a0,sp,224
   2adbc:	d6dff0ef          	jal	ra,2ab28 <dwarf::line_table::end() const>
   2adc0:	06010993          	addi	s3,sp,96
   2adc4:	00c0006f          	jal	zero,2add0 <dwarf::line_table::get_file(unsigned int) const+0xb8>
   2adc8:	00098513          	addi	a0,s3,0
   2adcc:	899ff0ef          	jal	ra,2a664 <dwarf::line_table::iterator::operator++()>
   2add0:	0d813703          	ld	a4,216(sp)
   2add4:	15813783          	ld	a5,344(sp)
   2add8:	fef718e3          	bne	a4,a5,2adc8 <dwarf::line_table::get_file(unsigned int) const+0xb0>
   2addc:	0e013703          	ld	a4,224(sp)
   2ade0:	06013783          	ld	a5,96(sp)
   2ade4:	fef712e3          	bne	a4,a5,2adc8 <dwarf::line_table::get_file(unsigned int) const+0xb0>
   2ade8:	00043703          	ld	a4,0(s0)
   2adec:	05873783          	ld	a5,88(a4)
   2adf0:	05073703          	ld	a4,80(a4)
   2adf4:	40e787b3          	sub	a5,a5,a4
   2adf8:	4047d793          	srai	a5,a5,0x4
   2adfc:	0000d717          	auipc	a4,0xd
   2ae00:	cc473703          	ld	a4,-828(a4) # 37ac0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   2ae04:	02e787b3          	mul	a5,a5,a4
    if (index >= m->file_names.size())
   2ae08:	f6f4f2e3          	bgeu	s1,a5,2ad6c <dwarf::line_table::get_file(unsigned int) const+0x54>
	return *(this->_M_impl._M_start + __n);
   2ae0c:	00043703          	ld	a4,0(s0)
   2ae10:	00149793          	slli	a5,s1,0x1
   2ae14:	009787b3          	add	a5,a5,s1
   2ae18:	00479793          	slli	a5,a5,0x4
   2ae1c:	05073503          	ld	a0,80(a4)
   2ae20:	00f50533          	add	a0,a0,a5
}
   2ae24:	18813083          	ld	ra,392(sp)
   2ae28:	18013403          	ld	s0,384(sp)
   2ae2c:	17813483          	ld	s1,376(sp)
   2ae30:	17013903          	ld	s2,368(sp)
   2ae34:	16813983          	ld	s3,360(sp)
   2ae38:	19010113          	addi	sp,sp,400
   2ae3c:	00008067          	jalr	zero,0(ra)
   2ae40:	00050593          	addi	a1,a0,0
   2ae44:	02010913          	addi	s2,sp,32
   2ae48:	00090513          	addi	a0,s2,0
   2ae4c:	885eb0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   2ae50:	0000e597          	auipc	a1,0xe
   2ae54:	c0058593          	addi	a1,a1,-1024 # 38a50 <typeinfo name for dwarf::expr_context+0x268>
   2ae58:	00090513          	addi	a0,s2,0
   2ae5c:	be5eb0ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   2ae60:	00050593          	addi	a1,a0,0
   2ae64:	04010513          	addi	a0,sp,64
   2ae68:	869eb0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   2ae6c:	00043703          	ld	a4,0(s0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2ae70:	05873783          	ld	a5,88(a4)
   2ae74:	05073703          	ld	a4,80(a4)
   2ae78:	40e787b3          	sub	a5,a5,a4
   2ae7c:	4047d793          	srai	a5,a5,0x4
                         std::to_string(m->file_names.size()));
   2ae80:	0000d597          	auipc	a1,0xd
   2ae84:	c405b583          	ld	a1,-960(a1) # 37ac0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   2ae88:	02b785b3          	mul	a1,a5,a1
   2ae8c:	06010513          	addi	a0,sp,96
   2ae90:	00018317          	auipc	t1,0x18
   2ae94:	48833303          	ld	t1,1160(t1) # 43318 <std::__cxx11::to_string(unsigned long)@@Base+0x18190>
   2ae98:	000300e7          	jalr	ra,0(t1)
                         " exceeds file table size of " +
   2ae9c:	06010613          	addi	a2,sp,96
   2aea0:	04010593          	addi	a1,sp,64
   2aea4:	0e010513          	addi	a0,sp,224
   2aea8:	00018317          	auipc	t1,0x18
   2aeac:	53033303          	ld	t1,1328(t1) # 433d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17eb8>
   2aeb0:	000300e7          	jalr	ra,0(t1)
      throw out_of_range("file name index " + std::to_string(index) +
   2aeb4:	0e010593          	addi	a1,sp,224
   2aeb8:	00048513          	addi	a0,s1,0
   2aebc:	a35eb0ef          	jal	ra,168f0 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   2aec0:	0e013503          	ld	a0,224(sp)
	if (!_M_is_local())
   2aec4:	0f010793          	addi	a5,sp,240
   2aec8:	00f50463          	beq	a0,a5,2aed0 <dwarf::line_table::get_file(unsigned int) const+0x1b8>
   2aecc:	8d5eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2aed0:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   2aed4:	07010793          	addi	a5,sp,112
   2aed8:	00f50463          	beq	a0,a5,2aee0 <dwarf::line_table::get_file(unsigned int) const+0x1c8>
   2aedc:	8c5eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2aee0:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2aee4:	05010793          	addi	a5,sp,80
   2aee8:	00f50463          	beq	a0,a5,2aef0 <dwarf::line_table::get_file(unsigned int) const+0x1d8>
   2aeec:	8b5eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2aef0:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2aef4:	03010793          	addi	a5,sp,48
   2aef8:	00f50463          	beq	a0,a5,2af00 <dwarf::line_table::get_file(unsigned int) const+0x1e8>
   2aefc:	8a5eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2af00:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2af04:	01010793          	addi	a5,sp,16
   2af08:	00f50463          	beq	a0,a5,2af10 <dwarf::line_table::get_file(unsigned int) const+0x1f8>
   2af0c:	895eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
                         std::to_string(m->file_names.size()));
   2af10:	00018617          	auipc	a2,0x18
   2af14:	5c863603          	ld	a2,1480(a2) # 434d8 <std::out_of_range::~out_of_range()@GLIBCXX_3.4>
   2af18:	00018597          	auipc	a1,0x18
   2af1c:	6705b583          	ld	a1,1648(a1) # 43588 <typeinfo for std::out_of_range@GLIBCXX_3.4>
   2af20:	00048513          	addi	a0,s1,0
   2af24:	a3deb0ef          	jal	ra,16960 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   2af28:	00050413          	addi	s0,a0,0
   2af2c:	0e013503          	ld	a0,224(sp)
	if (!_M_is_local())
   2af30:	0f010793          	addi	a5,sp,240
   2af34:	00f50463          	beq	a0,a5,2af3c <dwarf::line_table::get_file(unsigned int) const+0x224>
   2af38:	869eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2af3c:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   2af40:	07010793          	addi	a5,sp,112
   2af44:	00f50463          	beq	a0,a5,2af4c <dwarf::line_table::get_file(unsigned int) const+0x234>
   2af48:	859eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2af4c:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2af50:	05010793          	addi	a5,sp,80
   2af54:	00f50463          	beq	a0,a5,2af5c <dwarf::line_table::get_file(unsigned int) const+0x244>
   2af58:	849eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2af5c:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2af60:	03010793          	addi	a5,sp,48
   2af64:	00f50463          	beq	a0,a5,2af6c <dwarf::line_table::get_file(unsigned int) const+0x254>
   2af68:	839eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2af6c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2af70:	01010793          	addi	a5,sp,16
   2af74:	00f50463          	beq	a0,a5,2af7c <dwarf::line_table::get_file(unsigned int) const+0x264>
   2af78:	829eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2af7c:	00048513          	addi	a0,s1,0
   2af80:	fd0eb0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2af84:	00040513          	addi	a0,s0,0
   2af88:	a09eb0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2af8c:	00050413          	addi	s0,a0,0
   2af90:	fadff06f          	jal	zero,2af3c <dwarf::line_table::get_file(unsigned int) const+0x224>
   2af94:	00050413          	addi	s0,a0,0
   2af98:	fb5ff06f          	jal	zero,2af4c <dwarf::line_table::get_file(unsigned int) const+0x234>
   2af9c:	00050413          	addi	s0,a0,0
   2afa0:	fbdff06f          	jal	zero,2af5c <dwarf::line_table::get_file(unsigned int) const+0x244>
   2afa4:	00050413          	addi	s0,a0,0
   2afa8:	fc5ff06f          	jal	zero,2af6c <dwarf::line_table::get_file(unsigned int) const+0x254>

000000000002afac <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   2afac:	00008067          	jalr	zero,0(ra)

000000000002afb0 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2afb0:	ff010113          	addi	sp,sp,-16
   2afb4:	00113423          	sd	ra,8(sp)
   2afb8:	fe8eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2afbc:	00813083          	ld	ra,8(sp)
   2afc0:	01010113          	addi	sp,sp,16
   2afc4:	00008067          	jalr	zero,0(ra)

000000000002afc8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   2afc8:	ff010113          	addi	sp,sp,-16
   2afcc:	00113423          	sd	ra,8(sp)
   2afd0:	fd0eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   2afd4:	00813083          	ld	ra,8(sp)
   2afd8:	01010113          	addi	sp,sp,16
   2afdc:	00008067          	jalr	zero,0(ra)

000000000002afe0 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   2afe0:	ff010113          	addi	sp,sp,-16
   2afe4:	00113423          	sd	ra,8(sp)
   2afe8:	00813023          	sd	s0,0(sp)
   2afec:	03850413          	addi	s0,a0,56
	    ||
   2aff0:	00018797          	auipc	a5,0x18
   2aff4:	5607b783          	ld	a5,1376(a5) # 43550 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbdd0>
   2aff8:	02f58c63          	beq	a1,a5,2b030 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   2affc:	0085b503          	ld	a0,8(a1)
   2b000:	00018797          	auipc	a5,0x18
   2b004:	4287b783          	ld	a5,1064(a5) # 43428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbe98>
   2b008:	02f50463          	beq	a0,a5,2b030 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   2b00c:	00054703          	lbu	a4,0(a0)
   2b010:	02a00793          	addi	a5,zero,42
   2b014:	02f70863          	beq	a4,a5,2b044 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   2b018:	00018597          	auipc	a1,0x18
   2b01c:	4105b583          	ld	a1,1040(a1) # 43428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbe98>
   2b020:	db0eb0ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   2b024:	00153513          	sltiu	a0,a0,1
   2b028:	40a00533          	sub	a0,zero,a0
   2b02c:	00a47433          	and	s0,s0,a0
      }
   2b030:	00040513          	addi	a0,s0,0
   2b034:	00813083          	ld	ra,8(sp)
   2b038:	00013403          	ld	s0,0(sp)
   2b03c:	01010113          	addi	sp,sp,16
   2b040:	00008067          	jalr	zero,0(ra)
	return nullptr;
   2b044:	00000413          	addi	s0,zero,0
   2b048:	fe9ff06f          	jal	zero,2b030 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

000000000002b04c <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   2b04c:	fe010113          	addi	sp,sp,-32
   2b050:	00113c23          	sd	ra,24(sp)
   2b054:	00813823          	sd	s0,16(sp)
   2b058:	00913423          	sd	s1,8(sp)
   2b05c:	01213023          	sd	s2,0(sp)
   2b060:	00050493          	addi	s1,a0,0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   2b064:	08853403          	ld	s0,136(a0)
   2b068:	09053903          	ld	s2,144(a0)
	  for (; __first != __last; ++__first)
   2b06c:	09241063          	bne	s0,s2,2b0ec <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa0>
	_M_deallocate(_M_impl._M_start,
   2b070:	0884b503          	ld	a0,136(s1)
	if (__p)
   2b074:	00050463          	beq	a0,zero,2b07c <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x30>
   2b078:	f28eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   2b07c:	0704b403          	ld	s0,112(s1)
   2b080:	0784b903          	ld	s2,120(s1)
   2b084:	09241263          	bne	s0,s2,2b108 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xbc>
	_M_deallocate(_M_impl._M_start,
   2b088:	0704b503          	ld	a0,112(s1)
	if (__p)
   2b08c:	00050463          	beq	a0,zero,2b094 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x48>
   2b090:	f10eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   2b094:	0584b503          	ld	a0,88(s1)
	if (__p)
   2b098:	00050463          	beq	a0,zero,2b0a0 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x54>
   2b09c:	f04eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   2b0a0:	0404b403          	ld	s0,64(s1)
   2b0a4:	02040463          	beq	s0,zero,2b0cc <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x80>
    if (__is_single_threaded())
   2b0a8:	00018797          	auipc	a5,0x18
   2b0ac:	3f07b783          	ld	a5,1008(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b0b0:	0007c783          	lbu	a5,0(a5)
   2b0b4:	06078463          	beq	a5,zero,2b11c <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd0>
    _Atomic_word __result = *__mem;
   2b0b8:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   2b0bc:	fff5079b          	addiw	a5,a0,-1
   2b0c0:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2b0c4:	00100793          	addi	a5,zero,1
   2b0c8:	06f50263          	beq	a0,a5,2b12c <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xe0>
      }
   2b0cc:	01813083          	ld	ra,24(sp)
   2b0d0:	01013403          	ld	s0,16(sp)
   2b0d4:	00813483          	ld	s1,8(sp)
   2b0d8:	00013903          	ld	s2,0(sp)
   2b0dc:	02010113          	addi	sp,sp,32
   2b0e0:	00008067          	jalr	zero,0(ra)
   2b0e4:	03040413          	addi	s0,s0,48
   2b0e8:	f88904e3          	beq	s2,s0,2b070 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x24>
   2b0ec:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2b0f0:	01040793          	addi	a5,s0,16
   2b0f4:	fef508e3          	beq	a0,a5,2b0e4 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x98>
   2b0f8:	ea8eb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2b0fc:	fe9ff06f          	jal	zero,2b0e4 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x98>
   2b100:	02040413          	addi	s0,s0,32
   2b104:	f88902e3          	beq	s2,s0,2b088 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x3c>
      { return _M_dataplus._M_p; }
   2b108:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2b10c:	01040793          	addi	a5,s0,16
   2b110:	fef508e3          	beq	a0,a5,2b100 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
   2b114:	e8ceb0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2b118:	fe9ff06f          	jal	zero,2b100 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
      return __exchange_and_add(__mem, __val);
   2b11c:	fff00593          	addi	a1,zero,-1
   2b120:	03040513          	addi	a0,s0,48
   2b124:	ccceb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b128:	f9dff06f          	jal	zero,2b0c4 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x78>
	_M_dispose();
   2b12c:	00043783          	ld	a5,0(s0)
   2b130:	0107b783          	ld	a5,16(a5)
   2b134:	00040513          	addi	a0,s0,0
   2b138:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2b13c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2b140:	00018797          	auipc	a5,0x18
   2b144:	3587b783          	ld	a5,856(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   2b148:	0007c783          	lbu	a5,0(a5)
   2b14c:	02078663          	beq	a5,zero,2b178 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x12c>
    _Atomic_word __result = *__mem;
   2b150:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   2b154:	fff5079b          	addiw	a5,a0,-1
   2b158:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2b15c:	00100793          	addi	a5,zero,1
   2b160:	f6f516e3          	bne	a0,a5,2b0cc <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x80>
	    _M_destroy();
   2b164:	00043783          	ld	a5,0(s0)
   2b168:	0187b783          	ld	a5,24(a5)
   2b16c:	00040513          	addi	a0,s0,0
   2b170:	000780e7          	jalr	ra,0(a5)
      }
   2b174:	f59ff06f          	jal	zero,2b0cc <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x80>
      return __exchange_and_add(__mem, __val);
   2b178:	fff00593          	addi	a1,zero,-1
   2b17c:	03440513          	addi	a0,s0,52
   2b180:	c70eb0ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b184:	fd9ff06f          	jal	zero,2b15c <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x110>

000000000002b188 <std::__cxx11::to_string(unsigned long)>:
  {
   2b188:	fe010113          	addi	sp,sp,-32
   2b18c:	00113c23          	sd	ra,24(sp)
   2b190:	00813823          	sd	s0,16(sp)
   2b194:	00913423          	sd	s1,8(sp)
   2b198:	00050493          	addi	s1,a0,0
   2b19c:	00058413          	addi	s0,a1,0
	  if (__value < (unsigned)__base) return __n;
   2b1a0:	00900793          	addi	a5,zero,9
   2b1a4:	18b7f263          	bgeu	a5,a1,2b328 <std::__cxx11::to_string(unsigned long)+0x1a0>
	  if (__value < __b2) return __n + 1;
   2b1a8:	06300793          	addi	a5,zero,99
   2b1ac:	06b7f663          	bgeu	a5,a1,2b218 <std::__cxx11::to_string(unsigned long)+0x90>
	  if (__value < __b3) return __n + 2;
   2b1b0:	3e700793          	addi	a5,zero,999
   2b1b4:	0ab7f063          	bgeu	a5,a1,2b254 <std::__cxx11::to_string(unsigned long)+0xcc>
	  if (__value < __b4) return __n + 3;
   2b1b8:	000027b7          	lui	a5,0x2
   2b1bc:	70f78793          	addi	a5,a5,1807 # 270f <__abi_tag-0xdb85>
   2b1c0:	16b7f063          	bgeu	a5,a1,2b320 <std::__cxx11::to_string(unsigned long)+0x198>
   2b1c4:	00058713          	addi	a4,a1,0
      unsigned __n = 1;
   2b1c8:	00100593          	addi	a1,zero,1
	  __value /= __b4;
   2b1cc:	00002637          	lui	a2,0x2
   2b1d0:	71060613          	addi	a2,a2,1808 # 2710 <__abi_tag-0xdb84>
	  if (__value < (unsigned)__base) return __n;
   2b1d4:	000186b7          	lui	a3,0x18
   2b1d8:	69f68693          	addi	a3,a3,1695 # 1869f <dwarf::dwarf::get_section(dwarf::section_type) const+0x367>
	  if (__value < __b2) return __n + 1;
   2b1dc:	000f4537          	lui	a0,0xf4
   2b1e0:	23f50513          	addi	a0,a0,575 # f423f <__global_pointer$+0xb0a3f>
	  if (__value < __b3) return __n + 2;
   2b1e4:	00989837          	lui	a6,0x989
   2b1e8:	67f80813          	addi	a6,a6,1663 # 98967f <__global_pointer$+0x945e7f>
	  if (__value < __b4) return __n + 3;
   2b1ec:	05f5e8b7          	lui	a7,0x5f5e
   2b1f0:	0ff88893          	addi	a7,a7,255 # 5f5e0ff <__global_pointer$+0x5f1a8ff>
   2b1f4:	00070793          	addi	a5,a4,0
	  __value /= __b4;
   2b1f8:	02c75733          	divu	a4,a4,a2
	  __n += 4;
   2b1fc:	0045859b          	addiw	a1,a1,4
	  if (__value < (unsigned)__base) return __n;
   2b200:	04f6fe63          	bgeu	a3,a5,2b25c <std::__cxx11::to_string(unsigned long)+0xd4>
	  if (__value < __b2) return __n + 1;
   2b204:	00f57c63          	bgeu	a0,a5,2b21c <std::__cxx11::to_string(unsigned long)+0x94>
	  if (__value < __b3) return __n + 2;
   2b208:	04f87863          	bgeu	a6,a5,2b258 <std::__cxx11::to_string(unsigned long)+0xd0>
	  if (__value < __b4) return __n + 3;
   2b20c:	fef8e4e3          	bltu	a7,a5,2b1f4 <std::__cxx11::to_string(unsigned long)+0x6c>
   2b210:	0035859b          	addiw	a1,a1,3
   2b214:	0480006f          	jal	zero,2b25c <std::__cxx11::to_string(unsigned long)+0xd4>
      unsigned __n = 1;
   2b218:	00100593          	addi	a1,zero,1
	  if (__value < __b2) return __n + 1;
   2b21c:	0015859b          	addiw	a1,a1,1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b220:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   2b224:	00f4b023          	sd	a5,0(s1)
      { _M_construct(__n, __c); }
   2b228:	00000613          	addi	a2,zero,0
   2b22c:	02059593          	slli	a1,a1,0x20
   2b230:	0205d593          	srli	a1,a1,0x20
   2b234:	00048513          	addi	a0,s1,0
   2b238:	dc8eb0ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   2b23c:	0004b603          	ld	a2,0(s1)
      while (__val >= 100)
   2b240:	06300793          	addi	a5,zero,99
   2b244:	0887fe63          	bgeu	a5,s0,2b2e0 <std::__cxx11::to_string(unsigned long)+0x158>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   2b248:	0084b683          	ld	a3,8(s1)
      unsigned __pos = __len - 1;
   2b24c:	fff6869b          	addiw	a3,a3,-1
   2b250:	0340006f          	jal	zero,2b284 <std::__cxx11::to_string(unsigned long)+0xfc>
      unsigned __n = 1;
   2b254:	00100593          	addi	a1,zero,1
	  if (__value < __b3) return __n + 2;
   2b258:	0025859b          	addiw	a1,a1,2
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b25c:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   2b260:	00f4b023          	sd	a5,0(s1)
      { _M_construct(__n, __c); }
   2b264:	00000613          	addi	a2,zero,0
   2b268:	02059593          	slli	a1,a1,0x20
   2b26c:	0205d593          	srli	a1,a1,0x20
   2b270:	00048513          	addi	a0,s1,0
   2b274:	d8ceb0ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   2b278:	0004b603          	ld	a2,0(s1)
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   2b27c:	0084b683          	ld	a3,8(s1)
      unsigned __pos = __len - 1;
   2b280:	fff6869b          	addiw	a3,a3,-1
	  auto const __num = (__val % 100) * 2;
   2b284:	06400593          	addi	a1,zero,100
	  __first[__pos] = __digits[__num + 1];
   2b288:	00018317          	auipc	t1,0x18
   2b28c:	1f833303          	ld	t1,504(t1) # 43480 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb4d8>
      while (__val >= 100)
   2b290:	000028b7          	lui	a7,0x2
   2b294:	70f88893          	addi	a7,a7,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   2b298:	02b477b3          	remu	a5,s0,a1
   2b29c:	00179793          	slli	a5,a5,0x1
   2b2a0:	00040513          	addi	a0,s0,0
	  __val /= 100;
   2b2a4:	02b45433          	divu	s0,s0,a1
	  __first[__pos] = __digits[__num + 1];
   2b2a8:	02069713          	slli	a4,a3,0x20
   2b2ac:	02075713          	srli	a4,a4,0x20
   2b2b0:	00e60733          	add	a4,a2,a4
   2b2b4:	00f307b3          	add	a5,t1,a5
   2b2b8:	0017c803          	lbu	a6,1(a5)
   2b2bc:	01070023          	sb	a6,0(a4)
	  __first[__pos - 1] = __digits[__num];
   2b2c0:	fff6871b          	addiw	a4,a3,-1
   2b2c4:	02071713          	slli	a4,a4,0x20
   2b2c8:	02075713          	srli	a4,a4,0x20
   2b2cc:	00e60733          	add	a4,a2,a4
   2b2d0:	0007c783          	lbu	a5,0(a5)
   2b2d4:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   2b2d8:	ffe6869b          	addiw	a3,a3,-2
      while (__val >= 100)
   2b2dc:	faa8eee3          	bltu	a7,a0,2b298 <std::__cxx11::to_string(unsigned long)+0x110>
      if (__val >= 10)
   2b2e0:	00900793          	addi	a5,zero,9
   2b2e4:	0487f663          	bgeu	a5,s0,2b330 <std::__cxx11::to_string(unsigned long)+0x1a8>
	  auto const __num = __val * 2;
   2b2e8:	00141413          	slli	s0,s0,0x1
	  __first[1] = __digits[__num + 1];
   2b2ec:	00018797          	auipc	a5,0x18
   2b2f0:	1947b783          	ld	a5,404(a5) # 43480 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb4d8>
   2b2f4:	008787b3          	add	a5,a5,s0
   2b2f8:	0017c703          	lbu	a4,1(a5)
   2b2fc:	00e600a3          	sb	a4,1(a2)
	  __first[0] = __digits[__num];
   2b300:	0007c403          	lbu	s0,0(a5)
   2b304:	00860023          	sb	s0,0(a2)
  }
   2b308:	00048513          	addi	a0,s1,0
   2b30c:	01813083          	ld	ra,24(sp)
   2b310:	01013403          	ld	s0,16(sp)
   2b314:	00813483          	ld	s1,8(sp)
   2b318:	02010113          	addi	sp,sp,32
   2b31c:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   2b320:	00100593          	addi	a1,zero,1
   2b324:	eedff06f          	jal	zero,2b210 <std::__cxx11::to_string(unsigned long)+0x88>
   2b328:	00100593          	addi	a1,zero,1
   2b32c:	ef5ff06f          	jal	zero,2b220 <std::__cxx11::to_string(unsigned long)+0x98>
	__first[0] = '0' + __val;
   2b330:	0304041b          	addiw	s0,s0,48
   2b334:	0ff47413          	andi	s0,s0,255
   2b338:	fcdff06f          	jal	zero,2b304 <std::__cxx11::to_string(unsigned long)+0x17c>

000000000002b33c <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)>:
      const unsigned __b2 = __base  * __base;
   2b33c:	02b586bb          	mulw	a3,a1,a1
   2b340:	0006889b          	addiw	a7,a3,0
      const unsigned __b3 = __b2 * __base;
   2b344:	0005881b          	addiw	a6,a1,0
   2b348:	02b686bb          	mulw	a3,a3,a1
   2b34c:	0006831b          	addiw	t1,a3,0
      const unsigned long __b4 = __b3 * __base;
   2b350:	02b686bb          	mulw	a3,a3,a1
   2b354:	0006859b          	addiw	a1,a3,0
   2b358:	02069693          	slli	a3,a3,0x20
   2b35c:	0206d693          	srli	a3,a3,0x20
	  if (__value < (unsigned)__base) return __n;
   2b360:	07056863          	bltu	a0,a6,2b3d0 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x94>
	  if (__value < __b2) return __n + 1;
   2b364:	05156463          	bltu	a0,a7,2b3ac <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x70>
	  if (__value < __b3) return __n + 2;
   2b368:	04656863          	bltu	a0,t1,2b3b8 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x7c>
	  if (__value < __b4) return __n + 3;
   2b36c:	02051793          	slli	a5,a0,0x20
   2b370:	0207d793          	srli	a5,a5,0x20
   2b374:	04b56863          	bltu	a0,a1,2b3c4 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x88>
      unsigned __n = 1;
   2b378:	00100513          	addi	a0,zero,1
   2b37c:	fff00613          	addi	a2,zero,-1
   2b380:	02065613          	srli	a2,a2,0x20
	  __value /= __b4;
   2b384:	02d7d7b3          	divu	a5,a5,a3
   2b388:	0007871b          	addiw	a4,a5,0
	  __n += 4;
   2b38c:	0045051b          	addiw	a0,a0,4
	  if (__value < (unsigned)__base) return __n;
   2b390:	03076e63          	bltu	a4,a6,2b3cc <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x90>
	  if (__value < __b2) return __n + 1;
   2b394:	01176e63          	bltu	a4,a7,2b3b0 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x74>
	  if (__value < __b3) return __n + 2;
   2b398:	02676263          	bltu	a4,t1,2b3bc <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x80>
   2b39c:	00c7f7b3          	and	a5,a5,a2
	  if (__value < __b4) return __n + 3;
   2b3a0:	feb772e3          	bgeu	a4,a1,2b384 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x48>
   2b3a4:	0035051b          	addiw	a0,a0,3
   2b3a8:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   2b3ac:	00100513          	addi	a0,zero,1
	  if (__value < __b2) return __n + 1;
   2b3b0:	0015051b          	addiw	a0,a0,1
   2b3b4:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   2b3b8:	00100513          	addi	a0,zero,1
	  if (__value < __b3) return __n + 2;
   2b3bc:	0025051b          	addiw	a0,a0,2
   2b3c0:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   2b3c4:	00100513          	addi	a0,zero,1
   2b3c8:	fddff06f          	jal	zero,2b3a4 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x68>
   2b3cc:	00008067          	jalr	zero,0(ra)
   2b3d0:	00100513          	addi	a0,zero,1
    }
   2b3d4:	00008067          	jalr	zero,0(ra)

000000000002b3d8 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>:
      unsigned __pos = __len - 1;
   2b3d8:	fff5859b          	addiw	a1,a1,-1
      while (__val >= 100)
   2b3dc:	06300793          	addi	a5,zero,99
   2b3e0:	06c7fc63          	bgeu	a5,a2,2b458 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x80>
	  auto const __num = (__val % 100) * 2;
   2b3e4:	06400893          	addi	a7,zero,100
	  __first[__pos] = __digits[__num + 1];
   2b3e8:	00018817          	auipc	a6,0x18
   2b3ec:	f9083803          	ld	a6,-112(a6) # 43378 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb9a0>
      while (__val >= 100)
   2b3f0:	00002e37          	lui	t3,0x2
   2b3f4:	70fe0e13          	addi	t3,t3,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   2b3f8:	031677bb          	remuw	a5,a2,a7
   2b3fc:	0017979b          	slliw	a5,a5,0x1
   2b400:	0006031b          	addiw	t1,a2,0
	  __val /= 100;
   2b404:	0316563b          	divuw	a2,a2,a7
	  __first[__pos] = __digits[__num + 1];
   2b408:	02059693          	slli	a3,a1,0x20
   2b40c:	0206d693          	srli	a3,a3,0x20
   2b410:	00d506b3          	add	a3,a0,a3
   2b414:	0017871b          	addiw	a4,a5,1
   2b418:	02071713          	slli	a4,a4,0x20
   2b41c:	02075713          	srli	a4,a4,0x20
   2b420:	00e80733          	add	a4,a6,a4
   2b424:	00074703          	lbu	a4,0(a4)
   2b428:	00e68023          	sb	a4,0(a3)
	  __first[__pos - 1] = __digits[__num];
   2b42c:	fff5871b          	addiw	a4,a1,-1
   2b430:	02071713          	slli	a4,a4,0x20
   2b434:	02075713          	srli	a4,a4,0x20
   2b438:	00e50733          	add	a4,a0,a4
   2b43c:	02079793          	slli	a5,a5,0x20
   2b440:	0207d793          	srli	a5,a5,0x20
   2b444:	00f807b3          	add	a5,a6,a5
   2b448:	0007c783          	lbu	a5,0(a5)
   2b44c:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   2b450:	ffe5859b          	addiw	a1,a1,-2
      while (__val >= 100)
   2b454:	fa6e62e3          	bltu	t3,t1,2b3f8 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x20>
      if (__val >= 10)
   2b458:	00900793          	addi	a5,zero,9
   2b45c:	04c7f063          	bgeu	a5,a2,2b49c <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0xc4>
	  auto const __num = __val * 2;
   2b460:	0016161b          	slliw	a2,a2,0x1
	  __first[1] = __digits[__num + 1];
   2b464:	00018717          	auipc	a4,0x18
   2b468:	f1473703          	ld	a4,-236(a4) # 43378 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb9a0>
   2b46c:	0016079b          	addiw	a5,a2,1
   2b470:	02079793          	slli	a5,a5,0x20
   2b474:	0207d793          	srli	a5,a5,0x20
   2b478:	00f707b3          	add	a5,a4,a5
   2b47c:	0007c783          	lbu	a5,0(a5)
   2b480:	00f500a3          	sb	a5,1(a0)
	  __first[0] = __digits[__num];
   2b484:	02061613          	slli	a2,a2,0x20
   2b488:	02065613          	srli	a2,a2,0x20
   2b48c:	00c70733          	add	a4,a4,a2
   2b490:	00074603          	lbu	a2,0(a4)
   2b494:	00c50023          	sb	a2,0(a0)
    }
   2b498:	00008067          	jalr	zero,0(ra)
	__first[0] = '0' + __val;
   2b49c:	0306061b          	addiw	a2,a2,48
   2b4a0:	0ff67613          	andi	a2,a2,255
   2b4a4:	ff1ff06f          	jal	zero,2b494 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0xbc>

000000000002b4a8 <std::__cxx11::to_string(unsigned int)>:
  {
   2b4a8:	fe010113          	addi	sp,sp,-32
   2b4ac:	00113c23          	sd	ra,24(sp)
   2b4b0:	00813823          	sd	s0,16(sp)
   2b4b4:	00913423          	sd	s1,8(sp)
   2b4b8:	00050413          	addi	s0,a0,0
   2b4bc:	00058493          	addi	s1,a1,0
    string __str(__detail::__to_chars_len(__val), '\0');
   2b4c0:	00a00593          	addi	a1,zero,10
   2b4c4:	00048513          	addi	a0,s1,0
   2b4c8:	00018317          	auipc	t1,0x18
   2b4cc:	fe833303          	ld	t1,-24(t1) # 434b0 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x18174>
   2b4d0:	000300e7          	jalr	ra,0(t1)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b4d4:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   2b4d8:	00f43023          	sd	a5,0(s0)
      { _M_construct(__n, __c); }
   2b4dc:	00000613          	addi	a2,zero,0
   2b4e0:	02051593          	slli	a1,a0,0x20
   2b4e4:	0205d593          	srli	a1,a1,0x20
   2b4e8:	00040513          	addi	a0,s0,0
   2b4ec:	b14eb0ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   2b4f0:	00048613          	addi	a2,s1,0
   2b4f4:	00842583          	lw	a1,8(s0)
   2b4f8:	00043503          	ld	a0,0(s0)
   2b4fc:	00018317          	auipc	t1,0x18
   2b500:	fd433303          	ld	t1,-44(t1) # 434d0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x180f8>
   2b504:	000300e7          	jalr	ra,0(t1)
  }
   2b508:	00040513          	addi	a0,s0,0
   2b50c:	01813083          	ld	ra,24(sp)
   2b510:	01013403          	ld	s0,16(sp)
   2b514:	00813483          	ld	s1,8(sp)
   2b518:	02010113          	addi	sp,sp,32
   2b51c:	00008067          	jalr	zero,0(ra)

000000000002b520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
   2b520:	fe010113          	addi	sp,sp,-32
   2b524:	00113c23          	sd	ra,24(sp)
   2b528:	00813823          	sd	s0,16(sp)
   2b52c:	00913423          	sd	s1,8(sp)
   2b530:	01213023          	sd	s2,0(sp)
   2b534:	00050413          	addi	s0,a0,0
   2b538:	00058513          	addi	a0,a1,0
   2b53c:	00060793          	addi	a5,a2,0
      { return _M_string_length; }
   2b540:	0085b703          	ld	a4,8(a1)
   2b544:	00863603          	ld	a2,8(a2)
	  const auto __size = __lhs.size() + __rhs.size();
   2b548:	00e60833          	add	a6,a2,a4
      { return _M_dataplus._M_p; }
   2b54c:	0005b683          	ld	a3,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b550:	01058593          	addi	a1,a1,16
	return _M_is_local() ? size_type(_S_local_capacity)
   2b554:	08b68663          	beq	a3,a1,2b5e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xc0>
   2b558:	01053583          	ld	a1,16(a0)
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
   2b55c:	0105fc63          	bgeu	a1,a6,2b574 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x54>
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b560:	01078593          	addi	a1,a5,16
	return _M_is_local() ? size_type(_S_local_capacity)
   2b564:	0007b883          	ld	a7,0(a5)
   2b568:	08b88063          	beq	a7,a1,2b5e8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xc8>
   2b56c:	0107b583          	ld	a1,16(a5)
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
   2b570:	0905f063          	bgeu	a1,a6,2b5f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xd0>
      { return _M_dataplus._M_p; }
   2b574:	0007b583          	ld	a1,0(a5)
	if (this->max_size() - (this->size() - __n1) < __n2)
   2b578:	fff00793          	addi	a5,zero,-1
   2b57c:	0027d793          	srli	a5,a5,0x2
   2b580:	40e787b3          	sub	a5,a5,a4
   2b584:	0cc7e863          	bltu	a5,a2,2b654 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x134>
	return _M_append(__s, __n);
   2b588:	8a8eb0ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   2b58c:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b590:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b594:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2b598:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b59c:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2b5a0:	0d278063          	beq	a5,s2,2b660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x140>
      { _M_dataplus._M_p = __p; }
   2b5a4:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2b5a8:	0104b783          	ld	a5,16(s1)
   2b5ac:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2b5b0:	0084b783          	ld	a5,8(s1)
   2b5b4:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2b5b8:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2b5bc:	0004b423          	sd	zero,8(s1)
   2b5c0:	00048823          	sb	zero,16(s1)
    }
   2b5c4:	00040513          	addi	a0,s0,0
   2b5c8:	01813083          	ld	ra,24(sp)
   2b5cc:	01013403          	ld	s0,16(sp)
   2b5d0:	00813483          	ld	s1,8(sp)
   2b5d4:	00013903          	ld	s2,0(sp)
   2b5d8:	02010113          	addi	sp,sp,32
   2b5dc:	00008067          	jalr	zero,0(ra)
	return _M_is_local() ? size_type(_S_local_capacity)
   2b5e0:	00f00593          	addi	a1,zero,15
   2b5e4:	f79ff06f          	jal	zero,2b55c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x3c>
   2b5e8:	00f00593          	addi	a1,zero,15
   2b5ec:	f85ff06f          	jal	zero,2b570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x50>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2b5f0:	00000613          	addi	a2,zero,0
   2b5f4:	00000593          	addi	a1,zero,0
   2b5f8:	00078513          	addi	a0,a5,0
   2b5fc:	b04eb0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2b600:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b604:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b608:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2b60c:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b610:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2b614:	03278463          	beq	a5,s2,2b63c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x11c>
      { _M_dataplus._M_p = __p; }
   2b618:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2b61c:	0104b783          	ld	a5,16(s1)
   2b620:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2b624:	0084b783          	ld	a5,8(s1)
   2b628:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2b62c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2b630:	0004b423          	sd	zero,8(s1)
   2b634:	00048823          	sb	zero,16(s1)
      }
   2b638:	f8dff06f          	jal	zero,2b5c4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa4>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b63c:	0084b603          	ld	a2,8(s1)
   2b640:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2b644:	fe0600e3          	beq	a2,zero,2b624 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x104>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2b648:	00090593          	addi	a1,s2,0
   2b64c:	9f4eb0ef          	jal	ra,16840 <memcpy@plt>
   2b650:	fd5ff06f          	jal	zero,2b624 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x104>
	  __throw_length_error(__N(__s));
   2b654:	0000c517          	auipc	a0,0xc
   2b658:	72c50513          	addi	a0,a0,1836 # 37d80 <std::piecewise_construct+0x2b0>
   2b65c:	844eb0ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b660:	0084b603          	ld	a2,8(s1)
   2b664:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2b668:	f40604e3          	beq	a2,zero,2b5b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x90>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2b66c:	00090593          	addi	a1,s2,0
   2b670:	9d0eb0ef          	jal	ra,16840 <memcpy@plt>
   2b674:	f3dff06f          	jal	zero,2b5b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x90>

000000000002b678 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)>:
      if (__n != 0)
   2b678:	16058863          	beq	a1,zero,2b7e8 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x170>
    vector<_Tp, _Alloc>::
   2b67c:	fc010113          	addi	sp,sp,-64
   2b680:	02113c23          	sd	ra,56(sp)
   2b684:	02813823          	sd	s0,48(sp)
   2b688:	02913423          	sd	s1,40(sp)
   2b68c:	03213023          	sd	s2,32(sp)
   2b690:	01313c23          	sd	s3,24(sp)
   2b694:	01413823          	sd	s4,16(sp)
   2b698:	01513423          	sd	s5,8(sp)
   2b69c:	00050993          	addi	s3,a0,0
   2b6a0:	00058413          	addi	s0,a1,0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2b6a4:	00853683          	ld	a3,8(a0)
   2b6a8:	00053483          	ld	s1,0(a0)
   2b6ac:	409684b3          	sub	s1,a3,s1
	  if (__size > max_size() || __navail > max_size() - __size)
   2b6b0:	fff00793          	addi	a5,zero,-1
   2b6b4:	0017d793          	srli	a5,a5,0x1
   2b6b8:	409787b3          	sub	a5,a5,s1
					 - this->_M_impl._M_finish);
   2b6bc:	01053703          	ld	a4,16(a0)
   2b6c0:	40d70733          	sub	a4,a4,a3
	  if (__navail >= __n)
   2b6c4:	06b76063          	bltu	a4,a1,2b724 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xac>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   2b6c8:	00068023          	sb	zero,0(a3)
	      ++__first;
   2b6cc:	00168513          	addi	a0,a3,1
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   2b6d0:	00100793          	addi	a5,zero,1
   2b6d4:	02f59663          	bne	a1,a5,2b700 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x88>
	      this->_M_impl._M_finish =
   2b6d8:	00a9b423          	sd	a0,8(s3)
    }
   2b6dc:	03813083          	ld	ra,56(sp)
   2b6e0:	03013403          	ld	s0,48(sp)
   2b6e4:	02813483          	ld	s1,40(sp)
   2b6e8:	02013903          	ld	s2,32(sp)
   2b6ec:	01813983          	ld	s3,24(sp)
   2b6f0:	01013a03          	ld	s4,16(sp)
   2b6f4:	00813a83          	ld	s5,8(sp)
   2b6f8:	04010113          	addi	sp,sp,64
   2b6fc:	00008067          	jalr	zero,0(ra)
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   2b700:	00b684b3          	add	s1,a3,a1
      if (const size_t __len = __last - __first)
   2b704:	fff58613          	addi	a2,a1,-1
   2b708:	00061663          	bne	a2,zero,2b714 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x9c>
      return __first + __n;
   2b70c:	00048513          	addi	a0,s1,0
   2b710:	fc9ff06f          	jal	zero,2b6d8 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x60>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
   2b714:	00000593          	addi	a1,zero,0
   2b718:	958eb0ef          	jal	ra,16870 <memset@plt>
      return __first + __n;
   2b71c:	00048513          	addi	a0,s1,0
   2b720:	fb9ff06f          	jal	zero,2b6d8 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x60>
	if (max_size() - size() < __n)
   2b724:	06b7e263          	bltu	a5,a1,2b788 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x110>
	const size_type __len = size() + (std::max)(size(), __n);
   2b728:	00048793          	addi	a5,s1,0
   2b72c:	00b4f463          	bgeu	s1,a1,2b734 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xbc>
   2b730:	00058793          	addi	a5,a1,0
   2b734:	009787b3          	add	a5,a5,s1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2b738:	0497ee63          	bltu	a5,s1,2b794 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x11c>
   2b73c:	00078a13          	addi	s4,a5,0
   2b740:	0007d663          	bge	a5,zero,2b74c <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xd4>
   2b744:	fff00a13          	addi	s4,zero,-1
   2b748:	001a5a13          	srli	s4,s4,0x1
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2b74c:	00000913          	addi	s2,zero,0
   2b750:	00078863          	beq	a5,zero,2b760 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xe8>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2b754:	000a0513          	addi	a0,s4,0
   2b758:	858eb0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   2b75c:	00050913          	addi	s2,a0,0
		      std::__uninitialized_default_n_a(__new_start + __size,
   2b760:	00990533          	add	a0,s2,s1
   2b764:	00050023          	sb	zero,0(a0)
      if (__n <= 0)
   2b768:	00100793          	addi	a5,zero,1
   2b76c:	02f41a63          	bne	s0,a5,2b7a0 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x128>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   2b770:	0009ba83          	ld	s5,0(s3)
      ptrdiff_t __count = __last - __first;
   2b774:	0089b603          	ld	a2,8(s3)
   2b778:	41560633          	sub	a2,a2,s5
      if (__count > 0)
   2b77c:	02c04e63          	blt	zero,a2,2b7b8 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x140>
	if (__p)
   2b780:	040a8663          	beq	s5,zero,2b7cc <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x154>
   2b784:	0400006f          	jal	zero,2b7c4 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x14c>
	  __throw_length_error(__N(__s));
   2b788:	0000c517          	auipc	a0,0xc
   2b78c:	00850513          	addi	a0,a0,8 # 37790 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x10>
   2b790:	f11ea0ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2b794:	fff00a13          	addi	s4,zero,-1
   2b798:	001a5a13          	srli	s4,s4,0x1
   2b79c:	fb9ff06f          	jal	zero,2b754 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xdc>
      if (const size_t __len = __last - __first)
   2b7a0:	fff40613          	addi	a2,s0,-1
   2b7a4:	fc0606e3          	beq	a2,zero,2b770 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xf8>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
   2b7a8:	00000593          	addi	a1,zero,0
   2b7ac:	00150513          	addi	a0,a0,1
   2b7b0:	8c0eb0ef          	jal	ra,16870 <memset@plt>
   2b7b4:	fbdff06f          	jal	zero,2b770 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xf8>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   2b7b8:	000a8593          	addi	a1,s5,0
   2b7bc:	00090513          	addi	a0,s2,0
   2b7c0:	a60eb0ef          	jal	ra,16a20 <memmove@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2b7c4:	000a8513          	addi	a0,s5,0
   2b7c8:	fd9ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	      this->_M_impl._M_start = __new_start;
   2b7cc:	0129b023          	sd	s2,0(s3)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   2b7d0:	008484b3          	add	s1,s1,s0
   2b7d4:	009904b3          	add	s1,s2,s1
   2b7d8:	0099b423          	sd	s1,8(s3)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   2b7dc:	01490933          	add	s2,s2,s4
   2b7e0:	0129b823          	sd	s2,16(s3)
    }
   2b7e4:	ef9ff06f          	jal	zero,2b6dc <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x64>
   2b7e8:	00008067          	jalr	zero,0(ra)

000000000002b7ec <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>:
      basic_string<_CharT, _Traits, _Alloc>::
   2b7ec:	fd010113          	addi	sp,sp,-48
   2b7f0:	02113423          	sd	ra,40(sp)
   2b7f4:	02813023          	sd	s0,32(sp)
   2b7f8:	00913c23          	sd	s1,24(sp)
   2b7fc:	01213823          	sd	s2,16(sp)
   2b800:	00050413          	addi	s0,a0,0
   2b804:	00058913          	addi	s2,a1,0
   2b808:	40b604b3          	sub	s1,a2,a1
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   2b80c:	00913423          	sd	s1,8(sp)
	if (__dnew > size_type(_S_local_capacity))
   2b810:	00f00793          	addi	a5,zero,15
   2b814:	0497e263          	bltu	a5,s1,2b858 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x6c>
      { return _M_dataplus._M_p; }
   2b818:	00053503          	ld	a0,0(a0)
	if (__n == 1)
   2b81c:	00100793          	addi	a5,zero,1
   2b820:	06f49063          	bne	s1,a5,2b880 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x94>
	__c1 = __c2;
   2b824:	0005c783          	lbu	a5,0(a1)
   2b828:	00f50023          	sb	a5,0(a0)
	_M_set_length(__dnew);
   2b82c:	00813703          	ld	a4,8(sp)
      { _M_string_length = __length; }
   2b830:	00e43423          	sd	a4,8(s0)
   2b834:	00043783          	ld	a5,0(s0)
   2b838:	00e787b3          	add	a5,a5,a4
   2b83c:	00078023          	sb	zero,0(a5)
      }
   2b840:	02813083          	ld	ra,40(sp)
   2b844:	02013403          	ld	s0,32(sp)
   2b848:	01813483          	ld	s1,24(sp)
   2b84c:	01013903          	ld	s2,16(sp)
   2b850:	03010113          	addi	sp,sp,48
   2b854:	00008067          	jalr	zero,0(ra)
	    _M_data(_M_create(__dnew, size_type(0)));
   2b858:	00000613          	addi	a2,zero,0
   2b85c:	00810593          	addi	a1,sp,8
   2b860:	950eb0ef          	jal	ra,169b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
   2b864:	00a43023          	sd	a0,0(s0)
      { _M_allocated_capacity = __capacity; }
   2b868:	00813783          	ld	a5,8(sp)
   2b86c:	00f43823          	sd	a5,16(s0)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2b870:	00048613          	addi	a2,s1,0
   2b874:	00090593          	addi	a1,s2,0
   2b878:	fc9ea0ef          	jal	ra,16840 <memcpy@plt>
   2b87c:	fb1ff06f          	jal	zero,2b82c <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x40>
	if (__n == 0)
   2b880:	fa0486e3          	beq	s1,zero,2b82c <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x40>
   2b884:	fedff06f          	jal	zero,2b870 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x84>

000000000002b888 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
   2b888:	fe010113          	addi	sp,sp,-32
   2b88c:	00113c23          	sd	ra,24(sp)
   2b890:	00813823          	sd	s0,16(sp)
   2b894:	00913423          	sd	s1,8(sp)
   2b898:	01213023          	sd	s2,0(sp)
   2b89c:	00050413          	addi	s0,a0,0
   2b8a0:	00058793          	addi	a5,a1,0
   2b8a4:	00060493          	addi	s1,a2,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b8a8:	01050913          	addi	s2,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b8ac:	01253023          	sd	s2,0(a0)
      { return _M_dataplus._M_p; }
   2b8b0:	0005b583          	ld	a1,0(a1)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   2b8b4:	0087b603          	ld	a2,8(a5)
   2b8b8:	00000693          	addi	a3,zero,0
   2b8bc:	00c58633          	add	a2,a1,a2
   2b8c0:	00018317          	auipc	t1,0x18
   2b8c4:	a6833303          	ld	t1,-1432(t1) # 43328 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17b3c>
   2b8c8:	000300e7          	jalr	ra,0(t1)
      { return _M_dataplus._M_p; }
   2b8cc:	0004b583          	ld	a1,0(s1)
      { return _M_string_length; }
   2b8d0:	0084b603          	ld	a2,8(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   2b8d4:	00843703          	ld	a4,8(s0)
   2b8d8:	fff00793          	addi	a5,zero,-1
   2b8dc:	0027d793          	srli	a5,a5,0x2
   2b8e0:	40e787b3          	sub	a5,a5,a4
   2b8e4:	00c7e863          	bltu	a5,a2,2b8f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6c>
	return _M_append(__s, __n);
   2b8e8:	00040513          	addi	a0,s0,0
   2b8ec:	d45ea0ef          	jal	ra,16630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   2b8f0:	0280006f          	jal	zero,2b918 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x90>
	  __throw_length_error(__N(__s));
   2b8f4:	0000c517          	auipc	a0,0xc
   2b8f8:	48c50513          	addi	a0,a0,1164 # 37d80 <std::piecewise_construct+0x2b0>
   2b8fc:	da5ea0ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   2b900:	00050493          	addi	s1,a0,0
   2b904:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2b908:	01250463          	beq	a0,s2,2b910 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x88>
   2b90c:	e95ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2b910:	00048513          	addi	a0,s1,0
   2b914:	87ceb0ef          	jal	ra,16990 <_Unwind_Resume@plt>
    }
   2b918:	00040513          	addi	a0,s0,0
   2b91c:	01813083          	ld	ra,24(sp)
   2b920:	01013403          	ld	s0,16(sp)
   2b924:	00813483          	ld	s1,8(sp)
   2b928:	00013903          	ld	s2,0(sp)
   2b92c:	02010113          	addi	sp,sp,32
   2b930:	00008067          	jalr	zero,0(ra)

000000000002b934 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
      vector<_Tp, _Alloc>::
   2b934:	fa010113          	addi	sp,sp,-96
   2b938:	04113c23          	sd	ra,88(sp)
   2b93c:	04813823          	sd	s0,80(sp)
   2b940:	04913423          	sd	s1,72(sp)
   2b944:	05213023          	sd	s2,64(sp)
   2b948:	03313c23          	sd	s3,56(sp)
   2b94c:	03413823          	sd	s4,48(sp)
   2b950:	03513423          	sd	s5,40(sp)
   2b954:	03613023          	sd	s6,32(sp)
   2b958:	01713c23          	sd	s7,24(sp)
   2b95c:	01813823          	sd	s8,16(sp)
   2b960:	01913423          	sd	s9,8(sp)
   2b964:	01a13023          	sd	s10,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2b968:	00853b83          	ld	s7,8(a0)
   2b96c:	00053983          	ld	s3,0(a0)
   2b970:	413b87b3          	sub	a5,s7,s3
   2b974:	4057d793          	srai	a5,a5,0x5
	if (max_size() - size() < __n)
   2b978:	fff00713          	addi	a4,zero,-1
   2b97c:	00675713          	srli	a4,a4,0x6
   2b980:	04e78463          	beq	a5,a4,2b9c8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x94>
   2b984:	00050a93          	addi	s5,a0,0
   2b988:	00058913          	addi	s2,a1,0
   2b98c:	00060413          	addi	s0,a2,0
   2b990:	00058d13          	addi	s10,a1,0
      return __a;
   2b994:	00078713          	addi	a4,a5,0
      if (__a < __b)
   2b998:	033b8e63          	beq	s7,s3,2b9d4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa0>
	const size_type __len = size() + (std::max)(size(), __n);
   2b99c:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2b9a0:	1af76063          	bltu	a4,a5,2bb40 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x20c>
   2b9a4:	00070a13          	addi	s4,a4,0
   2b9a8:	fff00793          	addi	a5,zero,-1
   2b9ac:	0067d793          	srli	a5,a5,0x6
   2b9b0:	00e7f463          	bgeu	a5,a4,2b9b8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x84>
   2b9b4:	00078a13          	addi	s4,a5,0
   2b9b8:	413904b3          	sub	s1,s2,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2b9bc:	00000b13          	addi	s6,zero,0
   2b9c0:	18070c63          	beq	a4,zero,2bb58 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x224>
   2b9c4:	1880006f          	jal	zero,2bb4c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x218>
	  __throw_length_error(__N(__s));
   2b9c8:	0000c517          	auipc	a0,0xc
   2b9cc:	b3850513          	addi	a0,a0,-1224 # 37500 <__libc_csu_fini+0xa0>
   2b9d0:	cd1ea0ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   2b9d4:	00100713          	addi	a4,zero,1
   2b9d8:	fc5ff06f          	jal	zero,2b99c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x68>
      for (; __first != __last; ++__first, (void)++__cur)
   2b9dc:	073d0463          	beq	s10,s3,2ba44 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x110>
   2b9e0:	01098493          	addi	s1,s3,16
   2b9e4:	41390c33          	sub	s8,s2,s3
   2b9e8:	018b0c33          	add	s8,s6,s8
      _ForwardIterator __cur = __result;
   2b9ec:	000b0413          	addi	s0,s6,0
   2b9f0:	0240006f          	jal	zero,2ba14 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe0>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b9f4:	ff84b603          	ld	a2,-8(s1)
   2b9f8:	00160613          	addi	a2,a2,1
   2b9fc:	02061e63          	bne	a2,zero,2ba38 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x104>
      { _M_string_length = __length; }
   2ba00:	ff8cb783          	ld	a5,-8(s9)
   2ba04:	00f43423          	sd	a5,8(s0)
      for (; __first != __last; ++__first, (void)++__cur)
   2ba08:	02040413          	addi	s0,s0,32
   2ba0c:	02048493          	addi	s1,s1,32
   2ba10:	03840c63          	beq	s0,s8,2ba48 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x114>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ba14:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2ba18:	00a43023          	sd	a0,0(s0)
      _M_data() const
   2ba1c:	00048c93          	addi	s9,s1,0
      { return _M_dataplus._M_p; }
   2ba20:	ff04b783          	ld	a5,-16(s1)
	if (__str._M_is_local())
   2ba24:	fc9788e3          	beq	a5,s1,2b9f4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc0>
      { _M_dataplus._M_p = __p; }
   2ba28:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2ba2c:	0004b783          	ld	a5,0(s1)
   2ba30:	00f43823          	sd	a5,16(s0)
   2ba34:	fcdff06f          	jal	zero,2ba00 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2ba38:	00048593          	addi	a1,s1,0
   2ba3c:	e05ea0ef          	jal	ra,16840 <memcpy@plt>
   2ba40:	fc1ff06f          	jal	zero,2ba00 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc>
      _ForwardIterator __cur = __result;
   2ba44:	000b0c13          	addi	s8,s6,0
	      ++__new_finish;
   2ba48:	020c0c13          	addi	s8,s8,32
      for (; __first != __last; ++__first, (void)++__cur)
   2ba4c:	077d0463          	beq	s10,s7,2bab4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x180>
   2ba50:	01090413          	addi	s0,s2,16
   2ba54:	010b8d13          	addi	s10,s7,16
      _ForwardIterator __cur = __result;
   2ba58:	000c0493          	addi	s1,s8,0
   2ba5c:	0240006f          	jal	zero,2ba80 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x14c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2ba60:	ff85b603          	ld	a2,-8(a1)
   2ba64:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2ba68:	02061e63          	bne	a2,zero,2baa4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x170>
      { _M_string_length = __length; }
   2ba6c:	ff8cb783          	ld	a5,-8(s9)
   2ba70:	00f4b423          	sd	a5,8(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   2ba74:	02048493          	addi	s1,s1,32
   2ba78:	02040413          	addi	s0,s0,32
   2ba7c:	028d0863          	beq	s10,s0,2baac <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x178>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ba80:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2ba84:	00a4b023          	sd	a0,0(s1)
      _M_data() const
   2ba88:	00040c93          	addi	s9,s0,0
      { return _M_dataplus._M_p; }
   2ba8c:	ff043583          	ld	a1,-16(s0)
	if (__str._M_is_local())
   2ba90:	fcb408e3          	beq	s0,a1,2ba60 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x12c>
      { _M_dataplus._M_p = __p; }
   2ba94:	00b4b023          	sd	a1,0(s1)
      { _M_allocated_capacity = __capacity; }
   2ba98:	00043783          	ld	a5,0(s0)
   2ba9c:	00f4b823          	sd	a5,16(s1)
   2baa0:	fcdff06f          	jal	zero,2ba6c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x138>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2baa4:	d9dea0ef          	jal	ra,16840 <memcpy@plt>
   2baa8:	fc5ff06f          	jal	zero,2ba6c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x138>
   2baac:	412b8933          	sub	s2,s7,s2
   2bab0:	012c0c33          	add	s8,s8,s2
	if (__p)
   2bab4:	00098663          	beq	s3,zero,2bac0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x18c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2bab8:	00098513          	addi	a0,s3,0
   2babc:	ce5ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2bac0:	016ab023          	sd	s6,0(s5)
      this->_M_impl._M_finish = __new_finish;
   2bac4:	018ab423          	sd	s8,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2bac8:	005a1a13          	slli	s4,s4,0x5
   2bacc:	014b0a33          	add	s4,s6,s4
   2bad0:	014ab823          	sd	s4,16(s5)
    }
   2bad4:	05813083          	ld	ra,88(sp)
   2bad8:	05013403          	ld	s0,80(sp)
   2badc:	04813483          	ld	s1,72(sp)
   2bae0:	04013903          	ld	s2,64(sp)
   2bae4:	03813983          	ld	s3,56(sp)
   2bae8:	03013a03          	ld	s4,48(sp)
   2baec:	02813a83          	ld	s5,40(sp)
   2baf0:	02013b03          	ld	s6,32(sp)
   2baf4:	01813b83          	ld	s7,24(sp)
   2baf8:	01013c03          	ld	s8,16(sp)
   2bafc:	00813c83          	ld	s9,8(sp)
   2bb00:	00013d03          	ld	s10,0(sp)
   2bb04:	06010113          	addi	sp,sp,96
   2bb08:	00008067          	jalr	zero,0(ra)
      __catch(...)
   2bb0c:	b65ea0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   2bb10:	020b1263          	bne	s6,zero,2bb34 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x200>
      { return _M_dataplus._M_p; }
   2bb14:	0004b503          	ld	a0,0(s1)
	if (!_M_is_local())
   2bb18:	01850463          	beq	a0,s8,2bb20 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1ec>
   2bb1c:	c85ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	  __throw_exception_again;
   2bb20:	da1ea0ef          	jal	ra,168c0 <__cxa_rethrow@plt>
      __catch(...)
   2bb24:	00050413          	addi	s0,a0,0
   2bb28:	e09ea0ef          	jal	ra,16930 <__cxa_end_catch@plt>
   2bb2c:	00040513          	addi	a0,s0,0
   2bb30:	e61ea0ef          	jal	ra,16990 <_Unwind_Resume@plt>
   2bb34:	000b0513          	addi	a0,s6,0
   2bb38:	c69ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2bb3c:	fe5ff06f          	jal	zero,2bb20 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1ec>
   2bb40:	413904b3          	sub	s1,s2,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2bb44:	fff00a13          	addi	s4,zero,-1
   2bb48:	006a5a13          	srli	s4,s4,0x6
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2bb4c:	005a1513          	slli	a0,s4,0x5
   2bb50:	c61ea0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   2bb54:	00050b13          	addi	s6,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   2bb58:	009b04b3          	add	s1,s6,s1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2bb5c:	01048c13          	addi	s8,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2bb60:	0184b023          	sd	s8,0(s1)
      { return _M_dataplus._M_p; }
   2bb64:	00043583          	ld	a1,0(s0)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   2bb68:	00843603          	ld	a2,8(s0)
   2bb6c:	00000693          	addi	a3,zero,0
   2bb70:	00c58633          	add	a2,a1,a2
   2bb74:	00048513          	addi	a0,s1,0
   2bb78:	00017317          	auipc	t1,0x17
   2bb7c:	7b033303          	ld	t1,1968(t1) # 43328 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17b3c>
   2bb80:	000300e7          	jalr	ra,0(t1)
      }
   2bb84:	e59ff06f          	jal	zero,2b9dc <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa8>

000000000002bb88 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   2bb88:	fa010113          	addi	sp,sp,-96
   2bb8c:	04113c23          	sd	ra,88(sp)
   2bb90:	04813823          	sd	s0,80(sp)
   2bb94:	04913423          	sd	s1,72(sp)
   2bb98:	05213023          	sd	s2,64(sp)
   2bb9c:	03313c23          	sd	s3,56(sp)
   2bba0:	03413823          	sd	s4,48(sp)
   2bba4:	03513423          	sd	s5,40(sp)
   2bba8:	03613023          	sd	s6,32(sp)
   2bbac:	01713c23          	sd	s7,24(sp)
   2bbb0:	01813823          	sd	s8,16(sp)
   2bbb4:	01913423          	sd	s9,8(sp)
   2bbb8:	01a13023          	sd	s10,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2bbbc:	00853b83          	ld	s7,8(a0)
   2bbc0:	00053a03          	ld	s4,0(a0)
   2bbc4:	414b87b3          	sub	a5,s7,s4
   2bbc8:	4057d793          	srai	a5,a5,0x5
	if (max_size() - size() < __n)
   2bbcc:	fff00713          	addi	a4,zero,-1
   2bbd0:	00675713          	srli	a4,a4,0x6
   2bbd4:	04e78463          	beq	a5,a4,2bc1c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x94>
   2bbd8:	00050a93          	addi	s5,a0,0
   2bbdc:	00058913          	addi	s2,a1,0
   2bbe0:	00060413          	addi	s0,a2,0
   2bbe4:	00058d13          	addi	s10,a1,0
      return __a;
   2bbe8:	00078713          	addi	a4,a5,0
      if (__a < __b)
   2bbec:	034b8e63          	beq	s7,s4,2bc28 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa0>
	const size_type __len = size() + (std::max)(size(), __n);
   2bbf0:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2bbf4:	16f76663          	bltu	a4,a5,2bd60 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1d8>
   2bbf8:	00070b13          	addi	s6,a4,0
   2bbfc:	fff00793          	addi	a5,zero,-1
   2bc00:	0067d793          	srli	a5,a5,0x6
   2bc04:	00e7f463          	bgeu	a5,a4,2bc0c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x84>
   2bc08:	00078b13          	addi	s6,a5,0
   2bc0c:	414904b3          	sub	s1,s2,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2bc10:	00000993          	addi	s3,zero,0
   2bc14:	16070263          	beq	a4,zero,2bd78 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1f0>
   2bc18:	1540006f          	jal	zero,2bd6c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1e4>
	  __throw_length_error(__N(__s));
   2bc1c:	0000c517          	auipc	a0,0xc
   2bc20:	8e450513          	addi	a0,a0,-1820 # 37500 <__libc_csu_fini+0xa0>
   2bc24:	a7dea0ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   2bc28:	00100713          	addi	a4,zero,1
   2bc2c:	fc5ff06f          	jal	zero,2bbf0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x68>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2bc30:	00843603          	ld	a2,8(s0)
   2bc34:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2bc38:	16060263          	beq	a2,zero,2bd9c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x214>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2bc3c:	000c0593          	addi	a1,s8,0
   2bc40:	c01ea0ef          	jal	ra,16840 <memcpy@plt>
   2bc44:	1580006f          	jal	zero,2bd9c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x214>
   2bc48:	ff85b603          	ld	a2,-8(a1)
   2bc4c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2bc50:	02061e63          	bne	a2,zero,2bc8c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x104>
      { _M_string_length = __length; }
   2bc54:	ff8c3783          	ld	a5,-8(s8)
   2bc58:	00f43423          	sd	a5,8(s0)
   2bc5c:	02040413          	addi	s0,s0,32
   2bc60:	02048493          	addi	s1,s1,32
   2bc64:	03940a63          	beq	s0,s9,2bc98 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x110>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2bc68:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2bc6c:	00a43023          	sd	a0,0(s0)
      _M_data() const
   2bc70:	00048c13          	addi	s8,s1,0
      { return _M_dataplus._M_p; }
   2bc74:	ff04b583          	ld	a1,-16(s1)
	if (__str._M_is_local())
   2bc78:	fcb488e3          	beq	s1,a1,2bc48 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xc0>
      { _M_dataplus._M_p = __p; }
   2bc7c:	00b43023          	sd	a1,0(s0)
      { _M_allocated_capacity = __capacity; }
   2bc80:	0004b783          	ld	a5,0(s1)
   2bc84:	00f43823          	sd	a5,16(s0)
   2bc88:	fcdff06f          	jal	zero,2bc54 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xcc>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2bc8c:	bb5ea0ef          	jal	ra,16840 <memcpy@plt>
   2bc90:	fc5ff06f          	jal	zero,2bc54 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xcc>
      _ForwardIterator __cur = __result;
   2bc94:	00098c93          	addi	s9,s3,0
	      ++__new_finish;
   2bc98:	020c8c93          	addi	s9,s9,32
      for (; __first != __last; ++__first, (void)++__cur)
   2bc9c:	077d0663          	beq	s10,s7,2bd08 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x180>
   2bca0:	01090413          	addi	s0,s2,16
   2bca4:	010b8d13          	addi	s10,s7,16
      _ForwardIterator __cur = __result;
   2bca8:	000c8493          	addi	s1,s9,0
   2bcac:	0240006f          	jal	zero,2bcd0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x148>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2bcb0:	ff843603          	ld	a2,-8(s0)
   2bcb4:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2bcb8:	02061e63          	bne	a2,zero,2bcf4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x16c>
      { _M_string_length = __length; }
   2bcbc:	ff8c3783          	ld	a5,-8(s8)
   2bcc0:	00f4b423          	sd	a5,8(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   2bcc4:	02048493          	addi	s1,s1,32
   2bcc8:	02040413          	addi	s0,s0,32
   2bccc:	03a40a63          	beq	s0,s10,2bd00 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x178>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2bcd0:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2bcd4:	00a4b023          	sd	a0,0(s1)
      _M_data() const
   2bcd8:	00040c13          	addi	s8,s0,0
      { return _M_dataplus._M_p; }
   2bcdc:	ff043783          	ld	a5,-16(s0)
	if (__str._M_is_local())
   2bce0:	fc8788e3          	beq	a5,s0,2bcb0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x128>
      { _M_dataplus._M_p = __p; }
   2bce4:	00f4b023          	sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   2bce8:	00043783          	ld	a5,0(s0)
   2bcec:	00f4b823          	sd	a5,16(s1)
   2bcf0:	fcdff06f          	jal	zero,2bcbc <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x134>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2bcf4:	00040593          	addi	a1,s0,0
   2bcf8:	b49ea0ef          	jal	ra,16840 <memcpy@plt>
   2bcfc:	fc1ff06f          	jal	zero,2bcbc <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x134>
   2bd00:	412b8933          	sub	s2,s7,s2
   2bd04:	012c8cb3          	add	s9,s9,s2
	if (__p)
   2bd08:	000a0663          	beq	s4,zero,2bd14 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x18c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2bd0c:	000a0513          	addi	a0,s4,0
   2bd10:	a91ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2bd14:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   2bd18:	019ab423          	sd	s9,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2bd1c:	005b1b13          	slli	s6,s6,0x5
   2bd20:	016989b3          	add	s3,s3,s6
   2bd24:	013ab823          	sd	s3,16(s5)
    }
   2bd28:	05813083          	ld	ra,88(sp)
   2bd2c:	05013403          	ld	s0,80(sp)
   2bd30:	04813483          	ld	s1,72(sp)
   2bd34:	04013903          	ld	s2,64(sp)
   2bd38:	03813983          	ld	s3,56(sp)
   2bd3c:	03013a03          	ld	s4,48(sp)
   2bd40:	02813a83          	ld	s5,40(sp)
   2bd44:	02013b03          	ld	s6,32(sp)
   2bd48:	01813b83          	ld	s7,24(sp)
   2bd4c:	01013c03          	ld	s8,16(sp)
   2bd50:	00813c83          	ld	s9,8(sp)
   2bd54:	00013d03          	ld	s10,0(sp)
   2bd58:	06010113          	addi	sp,sp,96
   2bd5c:	00008067          	jalr	zero,0(ra)
   2bd60:	414904b3          	sub	s1,s2,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2bd64:	fff00b13          	addi	s6,zero,-1
   2bd68:	006b5b13          	srli	s6,s6,0x6
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2bd6c:	005b1513          	slli	a0,s6,0x5
   2bd70:	a41ea0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   2bd74:	00050993          	addi	s3,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   2bd78:	009984b3          	add	s1,s3,s1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2bd7c:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2bd80:	00a4b023          	sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   2bd84:	00043783          	ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2bd88:	01040c13          	addi	s8,s0,16
	if (__str._M_is_local())
   2bd8c:	eb8782e3          	beq	a5,s8,2bc30 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa8>
      { _M_dataplus._M_p = __p; }
   2bd90:	00f4b023          	sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   2bd94:	01043783          	ld	a5,16(s0)
   2bd98:	00f4b823          	sd	a5,16(s1)
      { _M_string_length = __length; }
   2bd9c:	00843783          	ld	a5,8(s0)
   2bda0:	00f4b423          	sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   2bda4:	01843023          	sd	s8,0(s0)
      { _M_string_length = __length; }
   2bda8:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2bdac:	00040823          	sb	zero,16(s0)
   2bdb0:	ef4d02e3          	beq	s10,s4,2bc94 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x10c>
   2bdb4:	010a0493          	addi	s1,s4,16
   2bdb8:	41490cb3          	sub	s9,s2,s4
   2bdbc:	01998cb3          	add	s9,s3,s9
      _ForwardIterator __cur = __result;
   2bdc0:	00098413          	addi	s0,s3,0
   2bdc4:	ea5ff06f          	jal	zero,2bc68 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xe0>

000000000002bdc8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   2bdc8:	fd010113          	addi	sp,sp,-48
   2bdcc:	02113423          	sd	ra,40(sp)
   2bdd0:	02813023          	sd	s0,32(sp)
   2bdd4:	00913c23          	sd	s1,24(sp)
   2bdd8:	01213823          	sd	s2,16(sp)
   2bddc:	01313423          	sd	s3,8(sp)
   2bde0:	00050493          	addi	s1,a0,0
   2bde4:	00058413          	addi	s0,a1,0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   2bde8:	00853903          	ld	s2,8(a0)
   2bdec:	01053783          	ld	a5,16(a0)
   2bdf0:	06f90c63          	beq	s2,a5,2be68 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa0>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2bdf4:	01090513          	addi	a0,s2,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2bdf8:	00a93023          	sd	a0,0(s2)
      { return _M_dataplus._M_p; }
   2bdfc:	0005b783          	ld	a5,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2be00:	01058993          	addi	s3,a1,16
	if (__str._M_is_local())
   2be04:	05378663          	beq	a5,s3,2be50 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x88>
      { _M_dataplus._M_p = __p; }
   2be08:	00f93023          	sd	a5,0(s2)
      { _M_allocated_capacity = __capacity; }
   2be0c:	0105b783          	ld	a5,16(a1)
   2be10:	00f93823          	sd	a5,16(s2)
      { _M_string_length = __length; }
   2be14:	00843783          	ld	a5,8(s0)
   2be18:	00f93423          	sd	a5,8(s2)
      { _M_dataplus._M_p = __p; }
   2be1c:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   2be20:	00043423          	sd	zero,8(s0)
   2be24:	00040823          	sb	zero,16(s0)
	    ++this->_M_impl._M_finish;
   2be28:	0084b783          	ld	a5,8(s1)
   2be2c:	02078793          	addi	a5,a5,32
   2be30:	00f4b423          	sd	a5,8(s1)
      }
   2be34:	02813083          	ld	ra,40(sp)
   2be38:	02013403          	ld	s0,32(sp)
   2be3c:	01813483          	ld	s1,24(sp)
   2be40:	01013903          	ld	s2,16(sp)
   2be44:	00813983          	ld	s3,8(sp)
   2be48:	03010113          	addi	sp,sp,48
   2be4c:	00008067          	jalr	zero,0(ra)
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2be50:	0085b603          	ld	a2,8(a1)
   2be54:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2be58:	fa060ee3          	beq	a2,zero,2be14 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2be5c:	00098593          	addi	a1,s3,0
   2be60:	9e1ea0ef          	jal	ra,16840 <memcpy@plt>
   2be64:	fb1ff06f          	jal	zero,2be14 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4c>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2be68:	00058613          	addi	a2,a1,0
   2be6c:	00090593          	addi	a1,s2,0
   2be70:	00017317          	auipc	t1,0x17
   2be74:	6a833303          	ld	t1,1704(t1) # 43518 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17990>
   2be78:	000300e7          	jalr	ra,0(t1)
      }
   2be7c:	fb9ff06f          	jal	zero,2be34 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6c>

000000000002be80 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   2be80:	fe010113          	addi	sp,sp,-32
   2be84:	00113c23          	sd	ra,24(sp)
   2be88:	00813823          	sd	s0,16(sp)
   2be8c:	00913423          	sd	s1,8(sp)
   2be90:	00050413          	addi	s0,a0,0
   2be94:	00058493          	addi	s1,a1,0
	  for (; __first != __last; ++__first)
   2be98:	02b51063          	bne	a0,a1,2beb8 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x38>
	    std::_Destroy(std::__addressof(*__first));
	}
   2be9c:	01813083          	ld	ra,24(sp)
   2bea0:	01013403          	ld	s0,16(sp)
   2bea4:	00813483          	ld	s1,8(sp)
   2bea8:	02010113          	addi	sp,sp,32
   2beac:	00008067          	jalr	zero,0(ra)
	  for (; __first != __last; ++__first)
   2beb0:	03040413          	addi	s0,s0,48
   2beb4:	fe8484e3          	beq	s1,s0,2be9c <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x1c>
      { return _M_dataplus._M_p; }
   2beb8:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2bebc:	01040793          	addi	a5,s0,16
   2bec0:	fef508e3          	beq	a0,a5,2beb0 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x30>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2bec4:	8ddea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2bec8:	fe9ff06f          	jal	zero,2beb0 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x30>

000000000002becc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
      vector<_Tp, _Alloc>::
   2becc:	f8010113          	addi	sp,sp,-128
   2bed0:	06113c23          	sd	ra,120(sp)
   2bed4:	06813823          	sd	s0,112(sp)
   2bed8:	06913423          	sd	s1,104(sp)
   2bedc:	07213023          	sd	s2,96(sp)
   2bee0:	05313c23          	sd	s3,88(sp)
   2bee4:	05413823          	sd	s4,80(sp)
   2bee8:	05513423          	sd	s5,72(sp)
   2beec:	05613023          	sd	s6,64(sp)
   2bef0:	03713c23          	sd	s7,56(sp)
   2bef4:	03813823          	sd	s8,48(sp)
   2bef8:	03913423          	sd	s9,40(sp)
   2befc:	03a13023          	sd	s10,32(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2bf00:	00853a83          	ld	s5,8(a0)
   2bf04:	00053b03          	ld	s6,0(a0)
   2bf08:	416a87b3          	sub	a5,s5,s6
   2bf0c:	4047d793          	srai	a5,a5,0x4
   2bf10:	0000c717          	auipc	a4,0xc
   2bf14:	bb073703          	ld	a4,-1104(a4) # 37ac0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   2bf18:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   2bf1c:	0000d717          	auipc	a4,0xd
   2bf20:	c2473703          	ld	a4,-988(a4) # 38b40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   2bf24:	04e78463          	beq	a5,a4,2bf6c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa0>
   2bf28:	00050b93          	addi	s7,a0,0
   2bf2c:	00058a13          	addi	s4,a1,0
   2bf30:	00060413          	addi	s0,a2,0
   2bf34:	00058d13          	addi	s10,a1,0
      return __a;
   2bf38:	00078713          	addi	a4,a5,0
      if (__a < __b)
   2bf3c:	036a8e63          	beq	s5,s6,2bf78 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xac>
	const size_type __len = size() + (std::max)(size(), __n);
   2bf40:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2bf44:	26f76063          	bltu	a4,a5,2c1a4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2d8>
   2bf48:	00070c93          	addi	s9,a4,0
   2bf4c:	0000d797          	auipc	a5,0xd
   2bf50:	bf47b783          	ld	a5,-1036(a5) # 38b40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   2bf54:	00e7f463          	bgeu	a5,a4,2bf5c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x90>
   2bf58:	00078c93          	addi	s9,a5,0
   2bf5c:	416a04b3          	sub	s1,s4,s6
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2bf60:	00000c13          	addi	s8,zero,0
   2bf64:	26070063          	beq	a4,zero,2c1c4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2f8>
   2bf68:	2480006f          	jal	zero,2c1b0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2e4>
	  __throw_length_error(__N(__s));
   2bf6c:	0000b517          	auipc	a0,0xb
   2bf70:	59450513          	addi	a0,a0,1428 # 37500 <__libc_csu_fini+0xa0>
   2bf74:	f2cea0ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   2bf78:	00100713          	addi	a4,zero,1
   2bf7c:	fc5ff06f          	jal	zero,2bf40 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x74>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   2bf80:	00000693          	addi	a3,zero,0
   2bf84:	00000613          	addi	a2,zero,0
   2bf88:	00010593          	addi	a1,sp,0
   2bf8c:	00048513          	addi	a0,s1,0
   2bf90:	dc4fc0ef          	jal	ra,28554 <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
      { return _M_dataplus._M_p; }
   2bf94:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2bf98:	01010793          	addi	a5,sp,16
   2bf9c:	00f50463          	beq	a0,a5,2bfa4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2bfa0:	801ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   2bfa4:	010b0913          	addi	s2,s6,16
   2bfa8:	000b0413          	addi	s0,s6,0
      _ForwardIterator __cur = __result;
   2bfac:	000c0493          	addi	s1,s8,0
      for (; __first != __last; ++__first, (void)++__cur)
   2bfb0:	096d1663          	bne	s10,s6,2c03c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x170>
	      ++__new_finish;
   2bfb4:	03048493          	addi	s1,s1,48
   2bfb8:	175d0463          	beq	s10,s5,2c120 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x254>
   2bfbc:	010a0993          	addi	s3,s4,16
   2bfc0:	000a0913          	addi	s2,s4,0
      _ForwardIterator __cur = __result;
   2bfc4:	00048413          	addi	s0,s1,0
   2bfc8:	0f80006f          	jal	zero,2c0c0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1f4>
      { return _M_dataplus._M_p; }
   2bfcc:	00050413          	addi	s0,a0,0
   2bfd0:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2bfd4:	01010793          	addi	a5,sp,16
   2bfd8:	00f50463          	beq	a0,a5,2bfe0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x114>
   2bfdc:	fc4ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2bfe0:	00040513          	addi	a0,s0,0
      __catch(...)
   2bfe4:	e8cea0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   2bfe8:	180c1e63          	bne	s8,zero,2c184 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2b8>
      { return _M_dataplus._M_p; }
   2bfec:	0004b503          	ld	a0,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2bff0:	01048493          	addi	s1,s1,16
	if (!_M_is_local())
   2bff4:	00950463          	beq	a0,s1,2bffc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x130>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2bff8:	fa8ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	  __throw_exception_again;
   2bffc:	8c5ea0ef          	jal	ra,168c0 <__cxa_rethrow@plt>
      __catch(...)
   2c000:	00050413          	addi	s0,a0,0
   2c004:	92dea0ef          	jal	ra,16930 <__cxa_end_catch@plt>
   2c008:	00040513          	addi	a0,s0,0
   2c00c:	985ea0ef          	jal	ra,16990 <_Unwind_Resume@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2c010:	00843603          	ld	a2,8(s0)
   2c014:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2c018:	04060263          	beq	a2,zero,2c05c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x190>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2c01c:	00090593          	addi	a1,s2,0
   2c020:	821ea0ef          	jal	ra,16840 <memcpy@plt>
   2c024:	0380006f          	jal	zero,2c05c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x190>
   2c028:	f78ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   2c02c:	03040413          	addi	s0,s0,48
   2c030:	03048493          	addi	s1,s1,48
   2c034:	03090913          	addi	s2,s2,48
   2c038:	f7a40ee3          	beq	s0,s10,2bfb4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe8>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2c03c:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2c040:	00a4b023          	sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   2c044:	00043783          	ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2c048:	00090993          	addi	s3,s2,0
	if (__str._M_is_local())
   2c04c:	fd2782e3          	beq	a5,s2,2c010 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x144>
      { _M_dataplus._M_p = __p; }
   2c050:	00f4b023          	sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   2c054:	01043783          	ld	a5,16(s0)
   2c058:	00f4b823          	sd	a5,16(s1)
      { _M_string_length = __length; }
   2c05c:	00843783          	ld	a5,8(s0)
   2c060:	00f4b423          	sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   2c064:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   2c068:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2c06c:	00040823          	sb	zero,16(s0)
class line_table::file {
   2c070:	02043783          	ld	a5,32(s0)
   2c074:	02f4b023          	sd	a5,32(s1)
   2c078:	02843783          	ld	a5,40(s0)
   2c07c:	02f4b423          	sd	a5,40(s1)
      { return _M_dataplus._M_p; }
   2c080:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2c084:	fb3512e3          	bne	a0,s3,2c028 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x15c>
   2c088:	fa5ff06f          	jal	zero,2c02c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x160>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2c08c:	00893603          	ld	a2,8(s2)
   2c090:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2c094:	04061863          	bne	a2,zero,2c0e4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x218>
      { _M_string_length = __length; }
   2c098:	00893783          	ld	a5,8(s2)
   2c09c:	00f43423          	sd	a5,8(s0)
   2c0a0:	02093783          	ld	a5,32(s2)
   2c0a4:	02f43023          	sd	a5,32(s0)
   2c0a8:	02893783          	ld	a5,40(s2)
   2c0ac:	02f43423          	sd	a5,40(s0)
   2c0b0:	03090913          	addi	s2,s2,48
   2c0b4:	03040413          	addi	s0,s0,48
   2c0b8:	03098993          	addi	s3,s3,48
   2c0bc:	03590863          	beq	s2,s5,2c0ec <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x220>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2c0c0:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2c0c4:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2c0c8:	00093783          	ld	a5,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2c0cc:	00098593          	addi	a1,s3,0
	if (__str._M_is_local())
   2c0d0:	fb378ee3          	beq	a5,s3,2c08c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1c0>
      { _M_dataplus._M_p = __p; }
   2c0d4:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2c0d8:	01093783          	ld	a5,16(s2)
   2c0dc:	00f43823          	sd	a5,16(s0)
   2c0e0:	fb9ff06f          	jal	zero,2c098 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1cc>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2c0e4:	f5cea0ef          	jal	ra,16840 <memcpy@plt>
   2c0e8:	fb1ff06f          	jal	zero,2c098 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1cc>
   2c0ec:	414a87b3          	sub	a5,s5,s4
   2c0f0:	fd078793          	addi	a5,a5,-48
   2c0f4:	0047d793          	srli	a5,a5,0x4
   2c0f8:	0000d717          	auipc	a4,0xd
   2c0fc:	a5073703          	ld	a4,-1456(a4) # 38b48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68>
   2c100:	02e787b3          	mul	a5,a5,a4
   2c104:	00479793          	slli	a5,a5,0x4
   2c108:	0047d793          	srli	a5,a5,0x4
   2c10c:	00178793          	addi	a5,a5,1
   2c110:	00179713          	slli	a4,a5,0x1
   2c114:	00f707b3          	add	a5,a4,a5
   2c118:	00479793          	slli	a5,a5,0x4
   2c11c:	00f484b3          	add	s1,s1,a5
	if (__p)
   2c120:	000b0663          	beq	s6,zero,2c12c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x260>
   2c124:	000b0513          	addi	a0,s6,0
   2c128:	e78ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2c12c:	018bb023          	sd	s8,0(s7)
      this->_M_impl._M_finish = __new_finish;
   2c130:	009bb423          	sd	s1,8(s7)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2c134:	001c9793          	slli	a5,s9,0x1
   2c138:	019787b3          	add	a5,a5,s9
   2c13c:	00479793          	slli	a5,a5,0x4
   2c140:	00fc07b3          	add	a5,s8,a5
   2c144:	00fbb823          	sd	a5,16(s7)
    }
   2c148:	07813083          	ld	ra,120(sp)
   2c14c:	07013403          	ld	s0,112(sp)
   2c150:	06813483          	ld	s1,104(sp)
   2c154:	06013903          	ld	s2,96(sp)
   2c158:	05813983          	ld	s3,88(sp)
   2c15c:	05013a03          	ld	s4,80(sp)
   2c160:	04813a83          	ld	s5,72(sp)
   2c164:	04013b03          	ld	s6,64(sp)
   2c168:	03813b83          	ld	s7,56(sp)
   2c16c:	03013c03          	ld	s8,48(sp)
   2c170:	02813c83          	ld	s9,40(sp)
   2c174:	02013d03          	ld	s10,32(sp)
   2c178:	08010113          	addi	sp,sp,128
   2c17c:	00008067          	jalr	zero,0(ra)
   2c180:	e65ff06f          	jal	zero,2bfe4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x118>
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   2c184:	000c0593          	addi	a1,s8,0
   2c188:	000c0513          	addi	a0,s8,0
   2c18c:	00017317          	auipc	t1,0x17
   2c190:	14c33303          	ld	t1,332(t1) # 432d8 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)@@Base+0x17458>
   2c194:	000300e7          	jalr	ra,0(t1)
   2c198:	000c0513          	addi	a0,s8,0
   2c19c:	e04ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2c1a0:	e5dff06f          	jal	zero,2bffc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x130>
   2c1a4:	416a04b3          	sub	s1,s4,s6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2c1a8:	0000dc97          	auipc	s9,0xd
   2c1ac:	998cbc83          	ld	s9,-1640(s9) # 38b40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2c1b0:	001c9513          	slli	a0,s9,0x1
   2c1b4:	01950533          	add	a0,a0,s9
   2c1b8:	00451513          	slli	a0,a0,0x4
   2c1bc:	df4ea0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   2c1c0:	00050c13          	addi	s8,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   2c1c4:	009c04b3          	add	s1,s8,s1
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2c1c8:	01010793          	addi	a5,sp,16
   2c1cc:	00f13023          	sd	a5,0(sp)
      { return _M_dataplus._M_p; }
   2c1d0:	00043583          	ld	a1,0(s0)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   2c1d4:	00843603          	ld	a2,8(s0)
   2c1d8:	00000693          	addi	a3,zero,0
   2c1dc:	00c58633          	add	a2,a1,a2
   2c1e0:	00010513          	addi	a0,sp,0
   2c1e4:	00017317          	auipc	t1,0x17
   2c1e8:	14433303          	ld	t1,324(t1) # 43328 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17b3c>
   2c1ec:	000300e7          	jalr	ra,0(t1)
      }
   2c1f0:	d91ff06f          	jal	zero,2bf80 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb4>

000000000002c1f4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   2c1f4:	f8010113          	addi	sp,sp,-128
   2c1f8:	06113c23          	sd	ra,120(sp)
   2c1fc:	06813823          	sd	s0,112(sp)
   2c200:	06913423          	sd	s1,104(sp)
   2c204:	07213023          	sd	s2,96(sp)
   2c208:	05313c23          	sd	s3,88(sp)
   2c20c:	05413823          	sd	s4,80(sp)
   2c210:	05513423          	sd	s5,72(sp)
   2c214:	05613023          	sd	s6,64(sp)
   2c218:	03713c23          	sd	s7,56(sp)
   2c21c:	03813823          	sd	s8,48(sp)
   2c220:	03913423          	sd	s9,40(sp)
   2c224:	03a13023          	sd	s10,32(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2c228:	00853a83          	ld	s5,8(a0)
   2c22c:	00053b03          	ld	s6,0(a0)
   2c230:	416a87b3          	sub	a5,s5,s6
   2c234:	4047d793          	srai	a5,a5,0x4
   2c238:	0000c717          	auipc	a4,0xc
   2c23c:	88873703          	ld	a4,-1912(a4) # 37ac0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   2c240:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   2c244:	0000d717          	auipc	a4,0xd
   2c248:	8fc73703          	ld	a4,-1796(a4) # 38b40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   2c24c:	04e78463          	beq	a5,a4,2c294 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa0>
   2c250:	00050b93          	addi	s7,a0,0
   2c254:	00058a13          	addi	s4,a1,0
   2c258:	00060413          	addi	s0,a2,0
   2c25c:	00058d13          	addi	s10,a1,0
      return __a;
   2c260:	00078713          	addi	a4,a5,0
      if (__a < __b)
   2c264:	036a8e63          	beq	s5,s6,2c2a0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xac>
	const size_type __len = size() + (std::max)(size(), __n);
   2c268:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2c26c:	26f76263          	bltu	a4,a5,2c4d0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2dc>
   2c270:	00070c93          	addi	s9,a4,0
   2c274:	0000d797          	auipc	a5,0xd
   2c278:	8cc7b783          	ld	a5,-1844(a5) # 38b40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   2c27c:	00e7f463          	bgeu	a5,a4,2c284 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x90>
   2c280:	00078c93          	addi	s9,a5,0
   2c284:	416a0933          	sub	s2,s4,s6
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2c288:	00000c13          	addi	s8,zero,0
   2c28c:	26070263          	beq	a4,zero,2c4f0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2fc>
   2c290:	24c0006f          	jal	zero,2c4dc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2e8>
	  __throw_length_error(__N(__s));
   2c294:	0000b517          	auipc	a0,0xb
   2c298:	26c50513          	addi	a0,a0,620 # 37500 <__libc_csu_fini+0xa0>
   2c29c:	c04ea0ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   2c2a0:	00100713          	addi	a4,zero,1
   2c2a4:	fc5ff06f          	jal	zero,2c268 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x74>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2c2a8:	00843603          	ld	a2,8(s0)
   2c2ac:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2c2b0:	26060263          	beq	a2,zero,2c514 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x320>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2c2b4:	00048593          	addi	a1,s1,0
   2c2b8:	01010513          	addi	a0,sp,16
   2c2bc:	d84ea0ef          	jal	ra,16840 <memcpy@plt>
   2c2c0:	2540006f          	jal	zero,2c514 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x320>
      { return _M_dataplus._M_p; }
   2c2c4:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2c2c8:	01010793          	addi	a5,sp,16
   2c2cc:	00f50463          	beq	a0,a5,2c2d4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xe0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2c2d0:	cd0ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2c2d4:	010b0913          	addi	s2,s6,16
   2c2d8:	000b0413          	addi	s0,s6,0
      _ForwardIterator __cur = __result;
   2c2dc:	000c0493          	addi	s1,s8,0
      for (; __first != __last; ++__first, (void)++__cur)
   2c2e0:	096d1663          	bne	s10,s6,2c36c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x178>
	      ++__new_finish;
   2c2e4:	03048493          	addi	s1,s1,48
   2c2e8:	175d0463          	beq	s10,s5,2c450 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x25c>
   2c2ec:	010a0993          	addi	s3,s4,16
   2c2f0:	000a0913          	addi	s2,s4,0
      _ForwardIterator __cur = __result;
   2c2f4:	00048413          	addi	s0,s1,0
   2c2f8:	0f80006f          	jal	zero,2c3f0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1fc>
      { return _M_dataplus._M_p; }
   2c2fc:	00050413          	addi	s0,a0,0
   2c300:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2c304:	01010793          	addi	a5,sp,16
   2c308:	00f50463          	beq	a0,a5,2c310 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x11c>
   2c30c:	c94ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      __catch(...)
   2c310:	00040513          	addi	a0,s0,0
   2c314:	b5cea0ef          	jal	ra,16670 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   2c318:	180c1c63          	bne	s8,zero,2c4b0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2bc>
      { return _M_dataplus._M_p; }
   2c31c:	00093503          	ld	a0,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2c320:	01090493          	addi	s1,s2,16
	if (!_M_is_local())
   2c324:	00950463          	beq	a0,s1,2c32c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x138>
   2c328:	c78ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	  __throw_exception_again;
   2c32c:	d94ea0ef          	jal	ra,168c0 <__cxa_rethrow@plt>
      __catch(...)
   2c330:	00050413          	addi	s0,a0,0
   2c334:	dfcea0ef          	jal	ra,16930 <__cxa_end_catch@plt>
   2c338:	00040513          	addi	a0,s0,0
   2c33c:	e54ea0ef          	jal	ra,16990 <_Unwind_Resume@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2c340:	00843603          	ld	a2,8(s0)
   2c344:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2c348:	04060263          	beq	a2,zero,2c38c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x198>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2c34c:	00090593          	addi	a1,s2,0
   2c350:	cf0ea0ef          	jal	ra,16840 <memcpy@plt>
   2c354:	0380006f          	jal	zero,2c38c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x198>
   2c358:	c48ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   2c35c:	03040413          	addi	s0,s0,48
   2c360:	03048493          	addi	s1,s1,48
   2c364:	03090913          	addi	s2,s2,48
   2c368:	f7a40ee3          	beq	s0,s10,2c2e4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xf0>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2c36c:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2c370:	00a4b023          	sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   2c374:	00043783          	ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2c378:	00090993          	addi	s3,s2,0
	if (__str._M_is_local())
   2c37c:	fd2782e3          	beq	a5,s2,2c340 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x14c>
      { _M_dataplus._M_p = __p; }
   2c380:	00f4b023          	sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   2c384:	01043783          	ld	a5,16(s0)
   2c388:	00f4b823          	sd	a5,16(s1)
      { _M_string_length = __length; }
   2c38c:	00843783          	ld	a5,8(s0)
   2c390:	00f4b423          	sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   2c394:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   2c398:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2c39c:	00040823          	sb	zero,16(s0)
   2c3a0:	02043783          	ld	a5,32(s0)
   2c3a4:	02f4b023          	sd	a5,32(s1)
   2c3a8:	02843783          	ld	a5,40(s0)
   2c3ac:	02f4b423          	sd	a5,40(s1)
      { return _M_dataplus._M_p; }
   2c3b0:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2c3b4:	fb3512e3          	bne	a0,s3,2c358 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x164>
   2c3b8:	fa5ff06f          	jal	zero,2c35c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x168>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2c3bc:	00893603          	ld	a2,8(s2)
   2c3c0:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2c3c4:	04061863          	bne	a2,zero,2c414 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x220>
      { _M_string_length = __length; }
   2c3c8:	00893783          	ld	a5,8(s2)
   2c3cc:	00f43423          	sd	a5,8(s0)
   2c3d0:	02093783          	ld	a5,32(s2)
   2c3d4:	02f43023          	sd	a5,32(s0)
   2c3d8:	02893783          	ld	a5,40(s2)
   2c3dc:	02f43423          	sd	a5,40(s0)
   2c3e0:	03090913          	addi	s2,s2,48
   2c3e4:	03040413          	addi	s0,s0,48
   2c3e8:	03098993          	addi	s3,s3,48
   2c3ec:	03590863          	beq	s2,s5,2c41c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x228>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2c3f0:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2c3f4:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2c3f8:	00093783          	ld	a5,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2c3fc:	00098593          	addi	a1,s3,0
	if (__str._M_is_local())
   2c400:	fb378ee3          	beq	a5,s3,2c3bc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1c8>
      { _M_dataplus._M_p = __p; }
   2c404:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2c408:	01093783          	ld	a5,16(s2)
   2c40c:	00f43823          	sd	a5,16(s0)
   2c410:	fb9ff06f          	jal	zero,2c3c8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1d4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2c414:	c2cea0ef          	jal	ra,16840 <memcpy@plt>
   2c418:	fb1ff06f          	jal	zero,2c3c8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1d4>
   2c41c:	414a87b3          	sub	a5,s5,s4
   2c420:	fd078793          	addi	a5,a5,-48
   2c424:	0047d793          	srli	a5,a5,0x4
   2c428:	0000c717          	auipc	a4,0xc
   2c42c:	72073703          	ld	a4,1824(a4) # 38b48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68>
   2c430:	02e787b3          	mul	a5,a5,a4
   2c434:	00479793          	slli	a5,a5,0x4
   2c438:	0047d793          	srli	a5,a5,0x4
   2c43c:	00178793          	addi	a5,a5,1
   2c440:	00179713          	slli	a4,a5,0x1
   2c444:	00f707b3          	add	a5,a4,a5
   2c448:	00479793          	slli	a5,a5,0x4
   2c44c:	00f484b3          	add	s1,s1,a5
	if (__p)
   2c450:	000b0663          	beq	s6,zero,2c45c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x268>
   2c454:	000b0513          	addi	a0,s6,0
   2c458:	b48ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2c45c:	018bb023          	sd	s8,0(s7)
      this->_M_impl._M_finish = __new_finish;
   2c460:	009bb423          	sd	s1,8(s7)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2c464:	001c9793          	slli	a5,s9,0x1
   2c468:	019787b3          	add	a5,a5,s9
   2c46c:	00479793          	slli	a5,a5,0x4
   2c470:	00fc07b3          	add	a5,s8,a5
   2c474:	00fbb823          	sd	a5,16(s7)
    }
   2c478:	07813083          	ld	ra,120(sp)
   2c47c:	07013403          	ld	s0,112(sp)
   2c480:	06813483          	ld	s1,104(sp)
   2c484:	06013903          	ld	s2,96(sp)
   2c488:	05813983          	ld	s3,88(sp)
   2c48c:	05013a03          	ld	s4,80(sp)
   2c490:	04813a83          	ld	s5,72(sp)
   2c494:	04013b03          	ld	s6,64(sp)
   2c498:	03813b83          	ld	s7,56(sp)
   2c49c:	03013c03          	ld	s8,48(sp)
   2c4a0:	02813c83          	ld	s9,40(sp)
   2c4a4:	02013d03          	ld	s10,32(sp)
   2c4a8:	08010113          	addi	sp,sp,128
   2c4ac:	00008067          	jalr	zero,0(ra)
   2c4b0:	000c0593          	addi	a1,s8,0
   2c4b4:	000c0513          	addi	a0,s8,0
   2c4b8:	00017317          	auipc	t1,0x17
   2c4bc:	e2033303          	ld	t1,-480(t1) # 432d8 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)@@Base+0x17458>
   2c4c0:	000300e7          	jalr	ra,0(t1)
   2c4c4:	000c0513          	addi	a0,s8,0
   2c4c8:	ad8ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2c4cc:	e61ff06f          	jal	zero,2c32c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x138>
   2c4d0:	416a0933          	sub	s2,s4,s6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2c4d4:	0000cc97          	auipc	s9,0xc
   2c4d8:	66ccbc83          	ld	s9,1644(s9) # 38b40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2c4dc:	001c9513          	slli	a0,s9,0x1
   2c4e0:	01950533          	add	a0,a0,s9
   2c4e4:	00451513          	slli	a0,a0,0x4
   2c4e8:	ac8ea0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   2c4ec:	00050c13          	addi	s8,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   2c4f0:	012c0933          	add	s2,s8,s2
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2c4f4:	01010793          	addi	a5,sp,16
   2c4f8:	00f13023          	sd	a5,0(sp)
      { return _M_dataplus._M_p; }
   2c4fc:	00043783          	ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2c500:	01040493          	addi	s1,s0,16
	if (__str._M_is_local())
   2c504:	da9782e3          	beq	a5,s1,2c2a8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xb4>
      { _M_dataplus._M_p = __p; }
   2c508:	00f13023          	sd	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   2c50c:	01043783          	ld	a5,16(s0)
   2c510:	00f13823          	sd	a5,16(sp)
      { _M_string_length = __length; }
   2c514:	00843783          	ld	a5,8(s0)
   2c518:	00f13423          	sd	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   2c51c:	00943023          	sd	s1,0(s0)
      { _M_string_length = __length; }
   2c520:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2c524:	00040823          	sb	zero,16(s0)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   2c528:	00000693          	addi	a3,zero,0
   2c52c:	00000613          	addi	a2,zero,0
   2c530:	00010593          	addi	a1,sp,0
   2c534:	00090513          	addi	a0,s2,0
   2c538:	81cfc0ef          	jal	ra,28554 <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   2c53c:	d89ff06f          	jal	zero,2c2c4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xd0>

000000000002c540 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   2c540:	fb010113          	addi	sp,sp,-80
   2c544:	04113423          	sd	ra,72(sp)
   2c548:	04813023          	sd	s0,64(sp)
   2c54c:	02913c23          	sd	s1,56(sp)
   2c550:	03213823          	sd	s2,48(sp)
   2c554:	03313423          	sd	s3,40(sp)
   2c558:	00050493          	addi	s1,a0,0
   2c55c:	00058413          	addi	s0,a1,0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   2c560:	00853903          	ld	s2,8(a0)
   2c564:	01053783          	ld	a5,16(a0)
   2c568:	0cf90063          	beq	s2,a5,2c628 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xe8>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2c56c:	01010793          	addi	a5,sp,16
   2c570:	00f13023          	sd	a5,0(sp)
      { return _M_dataplus._M_p; }
   2c574:	0005b783          	ld	a5,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2c578:	01058993          	addi	s3,a1,16
	if (__str._M_is_local())
   2c57c:	03378e63          	beq	a5,s3,2c5b8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x78>
      { _M_dataplus._M_p = __p; }
   2c580:	00f13023          	sd	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   2c584:	0105b783          	ld	a5,16(a1)
   2c588:	00f13823          	sd	a5,16(sp)
      { _M_string_length = __length; }
   2c58c:	00843783          	ld	a5,8(s0)
   2c590:	00f13423          	sd	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   2c594:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   2c598:	00043423          	sd	zero,8(s0)
   2c59c:	00040823          	sb	zero,16(s0)
   2c5a0:	00000693          	addi	a3,zero,0
   2c5a4:	00000613          	addi	a2,zero,0
   2c5a8:	00010593          	addi	a1,sp,0
   2c5ac:	00090513          	addi	a0,s2,0
   2c5b0:	fa5fb0ef          	jal	ra,28554 <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   2c5b4:	0200006f          	jal	zero,2c5d4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x94>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2c5b8:	0085b603          	ld	a2,8(a1)
   2c5bc:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2c5c0:	fc0606e3          	beq	a2,zero,2c58c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2c5c4:	00098593          	addi	a1,s3,0
   2c5c8:	01010513          	addi	a0,sp,16
   2c5cc:	a74ea0ef          	jal	ra,16840 <memcpy@plt>
   2c5d0:	fbdff06f          	jal	zero,2c58c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4c>
      { return _M_dataplus._M_p; }
   2c5d4:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2c5d8:	01010793          	addi	a5,sp,16
   2c5dc:	00f50463          	beq	a0,a5,2c5e4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa4>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2c5e0:	9c0ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	    ++this->_M_impl._M_finish;
   2c5e4:	0084b783          	ld	a5,8(s1)
   2c5e8:	03078793          	addi	a5,a5,48
   2c5ec:	00f4b423          	sd	a5,8(s1)
      }
   2c5f0:	04813083          	ld	ra,72(sp)
   2c5f4:	04013403          	ld	s0,64(sp)
   2c5f8:	03813483          	ld	s1,56(sp)
   2c5fc:	03013903          	ld	s2,48(sp)
   2c600:	02813983          	ld	s3,40(sp)
   2c604:	05010113          	addi	sp,sp,80
   2c608:	00008067          	jalr	zero,0(ra)
      { return _M_dataplus._M_p; }
   2c60c:	00050413          	addi	s0,a0,0
   2c610:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2c614:	01010793          	addi	a5,sp,16
   2c618:	00f50463          	beq	a0,a5,2c620 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xe0>
   2c61c:	984ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2c620:	00040513          	addi	a0,s0,0
   2c624:	b6cea0ef          	jal	ra,16990 <_Unwind_Resume@plt>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2c628:	00058613          	addi	a2,a1,0
   2c62c:	00090593          	addi	a1,s2,0
   2c630:	00017317          	auipc	t1,0x17
   2c634:	eb033303          	ld	t1,-336(t1) # 434e0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x172ec>
   2c638:	000300e7          	jalr	ra,0(t1)
      }
   2c63c:	fb5ff06f          	jal	zero,2c5f0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xb0>

000000000002c640 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)>:
      vector<_Tp, _Alloc>::
   2c640:	f7010113          	addi	sp,sp,-144
   2c644:	08113423          	sd	ra,136(sp)
   2c648:	08813023          	sd	s0,128(sp)
   2c64c:	06913c23          	sd	s1,120(sp)
   2c650:	07213823          	sd	s2,112(sp)
   2c654:	07313423          	sd	s3,104(sp)
   2c658:	07413023          	sd	s4,96(sp)
   2c65c:	05513c23          	sd	s5,88(sp)
   2c660:	05613823          	sd	s6,80(sp)
   2c664:	05713423          	sd	s7,72(sp)
   2c668:	05813023          	sd	s8,64(sp)
   2c66c:	03913c23          	sd	s9,56(sp)
   2c670:	03a13823          	sd	s10,48(sp)
   2c674:	03b13423          	sd	s11,40(sp)
   2c678:	00070913          	addi	s2,a4,0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2c67c:	00853a83          	ld	s5,8(a0)
   2c680:	00053b03          	ld	s6,0(a0)
   2c684:	416a87b3          	sub	a5,s5,s6
   2c688:	4047d793          	srai	a5,a5,0x4
   2c68c:	0000b717          	auipc	a4,0xb
   2c690:	43473703          	ld	a4,1076(a4) # 37ac0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   2c694:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   2c698:	0000c717          	auipc	a4,0xc
   2c69c:	4a873703          	ld	a4,1192(a4) # 38b40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   2c6a0:	04e78663          	beq	a5,a4,2c6ec <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xac>
   2c6a4:	00050b93          	addi	s7,a0,0
   2c6a8:	00058a13          	addi	s4,a1,0
   2c6ac:	00060413          	addi	s0,a2,0
   2c6b0:	00068493          	addi	s1,a3,0
   2c6b4:	00058d13          	addi	s10,a1,0
      return __a;
   2c6b8:	00078713          	addi	a4,a5,0
      if (__a < __b)
   2c6bc:	036a8e63          	beq	s5,s6,2c6f8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xb8>
	const size_type __len = size() + (std::max)(size(), __n);
   2c6c0:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2c6c4:	26f76463          	bltu	a4,a5,2c92c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x2ec>
   2c6c8:	00070c93          	addi	s9,a4,0
   2c6cc:	0000c797          	auipc	a5,0xc
   2c6d0:	4747b783          	ld	a5,1140(a5) # 38b40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   2c6d4:	00e7f463          	bgeu	a5,a4,2c6dc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x9c>
   2c6d8:	00078c93          	addi	s9,a5,0
   2c6dc:	416a09b3          	sub	s3,s4,s6
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2c6e0:	00000c13          	addi	s8,zero,0
   2c6e4:	26070463          	beq	a4,zero,2c94c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x30c>
   2c6e8:	2500006f          	jal	zero,2c938 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x2f8>
	  __throw_length_error(__N(__s));
   2c6ec:	0000b517          	auipc	a0,0xb
   2c6f0:	e1450513          	addi	a0,a0,-492 # 37500 <__libc_csu_fini+0xa0>
   2c6f4:	fade90ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   2c6f8:	00100713          	addi	a4,zero,1
   2c6fc:	fc5ff06f          	jal	zero,2c6c0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x80>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2c700:	00843603          	ld	a2,8(s0)
   2c704:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2c708:	26060463          	beq	a2,zero,2c970 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x330>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2c70c:	000d8593          	addi	a1,s11,0
   2c710:	01010513          	addi	a0,sp,16
   2c714:	92cea0ef          	jal	ra,16840 <memcpy@plt>
   2c718:	2580006f          	jal	zero,2c970 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x330>
      { return _M_dataplus._M_p; }
   2c71c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2c720:	01010793          	addi	a5,sp,16
   2c724:	00f50463          	beq	a0,a5,2c72c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xec>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2c728:	878ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2c72c:	010b0913          	addi	s2,s6,16
   2c730:	000b0413          	addi	s0,s6,0
      _ForwardIterator __cur = __result;
   2c734:	000c0493          	addi	s1,s8,0
      for (; __first != __last; ++__first, (void)++__cur)
   2c738:	096d1663          	bne	s10,s6,2c7c4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x184>
	      ++__new_finish;
   2c73c:	03048493          	addi	s1,s1,48
   2c740:	175d0463          	beq	s10,s5,2c8a8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x268>
   2c744:	010a0993          	addi	s3,s4,16
   2c748:	000a0913          	addi	s2,s4,0
      _ForwardIterator __cur = __result;
   2c74c:	00048413          	addi	s0,s1,0
   2c750:	0f80006f          	jal	zero,2c848 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x208>
      { return _M_dataplus._M_p; }
   2c754:	00050413          	addi	s0,a0,0
   2c758:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2c75c:	01010793          	addi	a5,sp,16
   2c760:	00f50463          	beq	a0,a5,2c768 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x128>
   2c764:	83cea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      __catch(...)
   2c768:	00040513          	addi	a0,s0,0
   2c76c:	f05e90ef          	jal	ra,16670 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   2c770:	180c1e63          	bne	s8,zero,2c90c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x2cc>
      { return _M_dataplus._M_p; }
   2c774:	0009b503          	ld	a0,0(s3)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2c778:	01098993          	addi	s3,s3,16
	if (!_M_is_local())
   2c77c:	01350463          	beq	a0,s3,2c784 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x144>
   2c780:	820ea0ef          	jal	ra,167a0 <operator delete(void*)@plt>
	  __throw_exception_again;
   2c784:	93cea0ef          	jal	ra,168c0 <__cxa_rethrow@plt>
      __catch(...)
   2c788:	00050413          	addi	s0,a0,0
   2c78c:	9a4ea0ef          	jal	ra,16930 <__cxa_end_catch@plt>
   2c790:	00040513          	addi	a0,s0,0
   2c794:	9fcea0ef          	jal	ra,16990 <_Unwind_Resume@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2c798:	00843603          	ld	a2,8(s0)
   2c79c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2c7a0:	04060263          	beq	a2,zero,2c7e4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1a4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2c7a4:	00090593          	addi	a1,s2,0
   2c7a8:	898ea0ef          	jal	ra,16840 <memcpy@plt>
   2c7ac:	0380006f          	jal	zero,2c7e4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1a4>
   2c7b0:	ff1e90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   2c7b4:	03040413          	addi	s0,s0,48
   2c7b8:	03048493          	addi	s1,s1,48
   2c7bc:	03090913          	addi	s2,s2,48
   2c7c0:	f7a40ee3          	beq	s0,s10,2c73c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xfc>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2c7c4:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2c7c8:	00a4b023          	sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   2c7cc:	00043783          	ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2c7d0:	00090993          	addi	s3,s2,0
	if (__str._M_is_local())
   2c7d4:	fd2782e3          	beq	a5,s2,2c798 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x158>
      { _M_dataplus._M_p = __p; }
   2c7d8:	00f4b023          	sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   2c7dc:	01043783          	ld	a5,16(s0)
   2c7e0:	00f4b823          	sd	a5,16(s1)
      { _M_string_length = __length; }
   2c7e4:	00843783          	ld	a5,8(s0)
   2c7e8:	00f4b423          	sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   2c7ec:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   2c7f0:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2c7f4:	00040823          	sb	zero,16(s0)
   2c7f8:	02043783          	ld	a5,32(s0)
   2c7fc:	02f4b023          	sd	a5,32(s1)
   2c800:	02843783          	ld	a5,40(s0)
   2c804:	02f4b423          	sd	a5,40(s1)
      { return _M_dataplus._M_p; }
   2c808:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2c80c:	fb3512e3          	bne	a0,s3,2c7b0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x170>
   2c810:	fa5ff06f          	jal	zero,2c7b4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x174>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2c814:	00893603          	ld	a2,8(s2)
   2c818:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2c81c:	04061863          	bne	a2,zero,2c86c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x22c>
      { _M_string_length = __length; }
   2c820:	00893783          	ld	a5,8(s2)
   2c824:	00f43423          	sd	a5,8(s0)
   2c828:	02093783          	ld	a5,32(s2)
   2c82c:	02f43023          	sd	a5,32(s0)
   2c830:	02893783          	ld	a5,40(s2)
   2c834:	02f43423          	sd	a5,40(s0)
   2c838:	03090913          	addi	s2,s2,48
   2c83c:	03040413          	addi	s0,s0,48
   2c840:	03098993          	addi	s3,s3,48
   2c844:	03590863          	beq	s2,s5,2c874 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x234>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2c848:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2c84c:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2c850:	00093783          	ld	a5,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2c854:	00098593          	addi	a1,s3,0
	if (__str._M_is_local())
   2c858:	fb378ee3          	beq	a5,s3,2c814 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1d4>
      { _M_dataplus._M_p = __p; }
   2c85c:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2c860:	01093783          	ld	a5,16(s2)
   2c864:	00f43823          	sd	a5,16(s0)
   2c868:	fb9ff06f          	jal	zero,2c820 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1e0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2c86c:	fd5e90ef          	jal	ra,16840 <memcpy@plt>
   2c870:	fb1ff06f          	jal	zero,2c820 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1e0>
   2c874:	414a87b3          	sub	a5,s5,s4
   2c878:	fd078793          	addi	a5,a5,-48
   2c87c:	0047d793          	srli	a5,a5,0x4
   2c880:	0000c717          	auipc	a4,0xc
   2c884:	2c873703          	ld	a4,712(a4) # 38b48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68>
   2c888:	02e787b3          	mul	a5,a5,a4
   2c88c:	00479793          	slli	a5,a5,0x4
   2c890:	0047d793          	srli	a5,a5,0x4
   2c894:	00178793          	addi	a5,a5,1
   2c898:	00179713          	slli	a4,a5,0x1
   2c89c:	00f707b3          	add	a5,a4,a5
   2c8a0:	00479793          	slli	a5,a5,0x4
   2c8a4:	00f484b3          	add	s1,s1,a5
	if (__p)
   2c8a8:	000b0663          	beq	s6,zero,2c8b4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x274>
   2c8ac:	000b0513          	addi	a0,s6,0
   2c8b0:	ef1e90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2c8b4:	018bb023          	sd	s8,0(s7)
      this->_M_impl._M_finish = __new_finish;
   2c8b8:	009bb423          	sd	s1,8(s7)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2c8bc:	001c9793          	slli	a5,s9,0x1
   2c8c0:	019787b3          	add	a5,a5,s9
   2c8c4:	00479793          	slli	a5,a5,0x4
   2c8c8:	00fc07b3          	add	a5,s8,a5
   2c8cc:	00fbb823          	sd	a5,16(s7)
    }
   2c8d0:	08813083          	ld	ra,136(sp)
   2c8d4:	08013403          	ld	s0,128(sp)
   2c8d8:	07813483          	ld	s1,120(sp)
   2c8dc:	07013903          	ld	s2,112(sp)
   2c8e0:	06813983          	ld	s3,104(sp)
   2c8e4:	06013a03          	ld	s4,96(sp)
   2c8e8:	05813a83          	ld	s5,88(sp)
   2c8ec:	05013b03          	ld	s6,80(sp)
   2c8f0:	04813b83          	ld	s7,72(sp)
   2c8f4:	04013c03          	ld	s8,64(sp)
   2c8f8:	03813c83          	ld	s9,56(sp)
   2c8fc:	03013d03          	ld	s10,48(sp)
   2c900:	02813d83          	ld	s11,40(sp)
   2c904:	09010113          	addi	sp,sp,144
   2c908:	00008067          	jalr	zero,0(ra)
   2c90c:	000c0593          	addi	a1,s8,0
   2c910:	000c0513          	addi	a0,s8,0
   2c914:	00017317          	auipc	t1,0x17
   2c918:	9c433303          	ld	t1,-1596(t1) # 432d8 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)@@Base+0x17458>
   2c91c:	000300e7          	jalr	ra,0(t1)
   2c920:	000c0513          	addi	a0,s8,0
   2c924:	e7de90ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2c928:	e5dff06f          	jal	zero,2c784 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x144>
   2c92c:	416a09b3          	sub	s3,s4,s6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2c930:	0000cc97          	auipc	s9,0xc
   2c934:	210cbc83          	ld	s9,528(s9) # 38b40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2c938:	001c9513          	slli	a0,s9,0x1
   2c93c:	01950533          	add	a0,a0,s9
   2c940:	00451513          	slli	a0,a0,0x4
   2c944:	e6de90ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   2c948:	00050c13          	addi	s8,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   2c94c:	013c09b3          	add	s3,s8,s3
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2c950:	01010793          	addi	a5,sp,16
   2c954:	00f13023          	sd	a5,0(sp)
      { return _M_dataplus._M_p; }
   2c958:	00043783          	ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2c95c:	01040d93          	addi	s11,s0,16
	if (__str._M_is_local())
   2c960:	dbb780e3          	beq	a5,s11,2c700 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xc0>
      { _M_dataplus._M_p = __p; }
   2c964:	00f13023          	sd	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   2c968:	01043783          	ld	a5,16(s0)
   2c96c:	00f13823          	sd	a5,16(sp)
      { _M_string_length = __length; }
   2c970:	00843783          	ld	a5,8(s0)
   2c974:	00f13423          	sd	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   2c978:	01b43023          	sd	s11,0(s0)
      { _M_string_length = __length; }
   2c97c:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2c980:	00040823          	sb	zero,16(s0)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   2c984:	00093683          	ld	a3,0(s2)
   2c988:	0004b603          	ld	a2,0(s1)
   2c98c:	00010593          	addi	a1,sp,0
   2c990:	00098513          	addi	a0,s3,0
   2c994:	bc1fb0ef          	jal	ra,28554 <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   2c998:	d85ff06f          	jal	zero,2c71c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xdc>

000000000002c99c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)>:
      vector<_Tp, _Alloc>::
   2c99c:	fa010113          	addi	sp,sp,-96
   2c9a0:	04113c23          	sd	ra,88(sp)
   2c9a4:	04813823          	sd	s0,80(sp)
   2c9a8:	04913423          	sd	s1,72(sp)
   2c9ac:	05213023          	sd	s2,64(sp)
   2c9b0:	03313c23          	sd	s3,56(sp)
   2c9b4:	03413823          	sd	s4,48(sp)
   2c9b8:	03513423          	sd	s5,40(sp)
   2c9bc:	00050a93          	addi	s5,a0,0
   2c9c0:	00058413          	addi	s0,a1,0
   2c9c4:	00060493          	addi	s1,a2,0
   2c9c8:	00068913          	addi	s2,a3,0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   2c9cc:	00853983          	ld	s3,8(a0)
   2c9d0:	01053783          	ld	a5,16(a0)
   2c9d4:	0cf98463          	beq	s3,a5,2ca9c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x100>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2c9d8:	01010793          	addi	a5,sp,16
   2c9dc:	00f13023          	sd	a5,0(sp)
      { return _M_dataplus._M_p; }
   2c9e0:	0005b783          	ld	a5,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2c9e4:	01058a13          	addi	s4,a1,16
	if (__str._M_is_local())
   2c9e8:	03478e63          	beq	a5,s4,2ca24 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x88>
      { _M_dataplus._M_p = __p; }
   2c9ec:	00f13023          	sd	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   2c9f0:	0105b783          	ld	a5,16(a1)
   2c9f4:	00f13823          	sd	a5,16(sp)
      { _M_string_length = __length; }
   2c9f8:	00843783          	ld	a5,8(s0)
   2c9fc:	00f13423          	sd	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   2ca00:	01443023          	sd	s4,0(s0)
      { _M_string_length = __length; }
   2ca04:	00043423          	sd	zero,8(s0)
   2ca08:	00040823          	sb	zero,16(s0)
   2ca0c:	00093683          	ld	a3,0(s2)
   2ca10:	0004b603          	ld	a2,0(s1)
   2ca14:	00010593          	addi	a1,sp,0
   2ca18:	00098513          	addi	a0,s3,0
   2ca1c:	b39fb0ef          	jal	ra,28554 <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   2ca20:	0200006f          	jal	zero,2ca40 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xa4>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2ca24:	0085b603          	ld	a2,8(a1)
   2ca28:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2ca2c:	fc0606e3          	beq	a2,zero,2c9f8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x5c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2ca30:	000a0593          	addi	a1,s4,0
   2ca34:	01010513          	addi	a0,sp,16
   2ca38:	e09e90ef          	jal	ra,16840 <memcpy@plt>
   2ca3c:	fbdff06f          	jal	zero,2c9f8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x5c>
      { return _M_dataplus._M_p; }
   2ca40:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2ca44:	01010793          	addi	a5,sp,16
   2ca48:	00f50463          	beq	a0,a5,2ca50 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xb4>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2ca4c:	d55e90ef          	jal	ra,167a0 <operator delete(void*)@plt>
	    ++this->_M_impl._M_finish;
   2ca50:	008ab783          	ld	a5,8(s5)
   2ca54:	03078793          	addi	a5,a5,48
   2ca58:	00fab423          	sd	a5,8(s5)
      }
   2ca5c:	05813083          	ld	ra,88(sp)
   2ca60:	05013403          	ld	s0,80(sp)
   2ca64:	04813483          	ld	s1,72(sp)
   2ca68:	04013903          	ld	s2,64(sp)
   2ca6c:	03813983          	ld	s3,56(sp)
   2ca70:	03013a03          	ld	s4,48(sp)
   2ca74:	02813a83          	ld	s5,40(sp)
   2ca78:	06010113          	addi	sp,sp,96
   2ca7c:	00008067          	jalr	zero,0(ra)
      { return _M_dataplus._M_p; }
   2ca80:	00050413          	addi	s0,a0,0
   2ca84:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2ca88:	01010793          	addi	a5,sp,16
   2ca8c:	00f50463          	beq	a0,a5,2ca94 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xf8>
   2ca90:	d11e90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2ca94:	00040513          	addi	a0,s0,0
   2ca98:	ef9e90ef          	jal	ra,16990 <_Unwind_Resume@plt>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2ca9c:	00068713          	addi	a4,a3,0
   2caa0:	00060693          	addi	a3,a2,0
   2caa4:	00058613          	addi	a2,a1,0
   2caa8:	00098593          	addi	a1,s3,0
   2caac:	00017317          	auipc	t1,0x17
   2cab0:	a4433303          	ld	t1,-1468(t1) # 434f0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)@@Base+0x16eb0>
   2cab4:	000300e7          	jalr	ra,0(t1)
      }
   2cab8:	fa5ff06f          	jal	zero,2ca5c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xc0>

000000000002cabc <dwarf::at_sibling(dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x0X
//

AT_REFERENCE(sibling);
   2cabc:	fc010113          	addi	sp,sp,-64
   2cac0:	02113c23          	sd	ra,56(sp)
   2cac4:	02813823          	sd	s0,48(sp)
   2cac8:	02913423          	sd	s1,40(sp)
   2cacc:	00050413          	addi	s0,a0,0
   2cad0:	00100613          	addi	a2,zero,1
   2cad4:	00810493          	addi	s1,sp,8
   2cad8:	00048513          	addi	a0,s1,0
   2cadc:	d55f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2cae0:	00048593          	addi	a1,s1,0
   2cae4:	00040513          	addi	a0,s0,0
   2cae8:	db0f50ef          	jal	ra,22098 <dwarf::value::as_reference() const>
   2caec:	00040513          	addi	a0,s0,0
   2caf0:	03813083          	ld	ra,56(sp)
   2caf4:	03013403          	ld	s0,48(sp)
   2caf8:	02813483          	ld	s1,40(sp)
   2cafc:	04010113          	addi	sp,sp,64
   2cb00:	00008067          	jalr	zero,0(ra)

000000000002cb04 <dwarf::at_name[abi:cxx11](dwarf::die const&)>:
// XXX location
AT_STRING(name);
   2cb04:	fc010113          	addi	sp,sp,-64
   2cb08:	02113c23          	sd	ra,56(sp)
   2cb0c:	02813823          	sd	s0,48(sp)
   2cb10:	02913423          	sd	s1,40(sp)
   2cb14:	00050413          	addi	s0,a0,0
   2cb18:	00300613          	addi	a2,zero,3
   2cb1c:	00810493          	addi	s1,sp,8
   2cb20:	00048513          	addi	a0,s1,0
   2cb24:	d0df10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2cb28:	00048593          	addi	a1,s1,0
   2cb2c:	00040513          	addi	a0,s0,0
   2cb30:	cfcf50ef          	jal	ra,2202c <dwarf::value::as_string[abi:cxx11]() const>
   2cb34:	00040513          	addi	a0,s0,0
   2cb38:	03813083          	ld	ra,56(sp)
   2cb3c:	03013403          	ld	s0,48(sp)
   2cb40:	02813483          	ld	s1,40(sp)
   2cb44:	04010113          	addi	sp,sp,64
   2cb48:	00008067          	jalr	zero,0(ra)

000000000002cb4c <dwarf::at_ordering(dwarf::die const&)>:
AT_ENUM(ordering, DW_ORD);
   2cb4c:	fd010113          	addi	sp,sp,-48
   2cb50:	02113423          	sd	ra,40(sp)
   2cb54:	02813023          	sd	s0,32(sp)
   2cb58:	00050593          	addi	a1,a0,0
   2cb5c:	00900613          	addi	a2,zero,9
   2cb60:	00810413          	addi	s0,sp,8
   2cb64:	00040513          	addi	a0,s0,0
   2cb68:	cc9f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2cb6c:	00040513          	addi	a0,s0,0
   2cb70:	858f30ef          	jal	ra,1fbc8 <dwarf::value::as_uconstant() const>
   2cb74:	0005051b          	addiw	a0,a0,0
   2cb78:	02813083          	ld	ra,40(sp)
   2cb7c:	02013403          	ld	s0,32(sp)
   2cb80:	03010113          	addi	sp,sp,48
   2cb84:	00008067          	jalr	zero,0(ra)

000000000002cb88 <dwarf::at_low_pc(dwarf::die const&)>:
//////////////////////////////////////////////////////////////////
// 0x1X
//

// XXX stmt_list
AT_ADDRESS(low_pc);
   2cb88:	fd010113          	addi	sp,sp,-48
   2cb8c:	02113423          	sd	ra,40(sp)
   2cb90:	02813023          	sd	s0,32(sp)
   2cb94:	00050593          	addi	a1,a0,0
   2cb98:	01100613          	addi	a2,zero,17
   2cb9c:	00810413          	addi	s0,sp,8
   2cba0:	00040513          	addi	a0,s0,0
   2cba4:	c8df10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2cba8:	00040513          	addi	a0,s0,0
   2cbac:	f94f20ef          	jal	ra,1f340 <dwarf::value::as_address() const>
   2cbb0:	02813083          	ld	ra,40(sp)
   2cbb4:	02013403          	ld	s0,32(sp)
   2cbb8:	03010113          	addi	sp,sp,48
   2cbbc:	00008067          	jalr	zero,0(ra)

000000000002cbc0 <dwarf::at_language(dwarf::die const&)>:
  default:
    throw format_error(to_string(DW_AT::high_pc) + " has unexpected type " +
                       to_string(v.get_type()));
  }
}
AT_ENUM(language, DW_LANG);
   2cbc0:	fd010113          	addi	sp,sp,-48
   2cbc4:	02113423          	sd	ra,40(sp)
   2cbc8:	02813023          	sd	s0,32(sp)
   2cbcc:	00050593          	addi	a1,a0,0
   2cbd0:	01300613          	addi	a2,zero,19
   2cbd4:	00810413          	addi	s0,sp,8
   2cbd8:	00040513          	addi	a0,s0,0
   2cbdc:	c55f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2cbe0:	00040513          	addi	a0,s0,0
   2cbe4:	fe5f20ef          	jal	ra,1fbc8 <dwarf::value::as_uconstant() const>
   2cbe8:	0005051b          	addiw	a0,a0,0
   2cbec:	02813083          	ld	ra,40(sp)
   2cbf0:	02013403          	ld	s0,32(sp)
   2cbf4:	03010113          	addi	sp,sp,48
   2cbf8:	00008067          	jalr	zero,0(ra)

000000000002cbfc <dwarf::at_discr(dwarf::die const&)>:
AT_REFERENCE(discr);
   2cbfc:	fc010113          	addi	sp,sp,-64
   2cc00:	02113c23          	sd	ra,56(sp)
   2cc04:	02813823          	sd	s0,48(sp)
   2cc08:	02913423          	sd	s1,40(sp)
   2cc0c:	00050413          	addi	s0,a0,0
   2cc10:	01500613          	addi	a2,zero,21
   2cc14:	00810493          	addi	s1,sp,8
   2cc18:	00048513          	addi	a0,s1,0
   2cc1c:	c15f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2cc20:	00048593          	addi	a1,s1,0
   2cc24:	00040513          	addi	a0,s0,0
   2cc28:	c70f50ef          	jal	ra,22098 <dwarf::value::as_reference() const>
   2cc2c:	00040513          	addi	a0,s0,0
   2cc30:	03813083          	ld	ra,56(sp)
   2cc34:	03013403          	ld	s0,48(sp)
   2cc38:	02813483          	ld	s1,40(sp)
   2cc3c:	04010113          	addi	sp,sp,64
   2cc40:	00008067          	jalr	zero,0(ra)

000000000002cc44 <dwarf::at_discr_value(dwarf::die const&)>:
AT_ANY(discr_value); // XXX Signed or unsigned
   2cc44:	ff010113          	addi	sp,sp,-16
   2cc48:	00113423          	sd	ra,8(sp)
   2cc4c:	00813023          	sd	s0,0(sp)
   2cc50:	00050413          	addi	s0,a0,0
   2cc54:	01600613          	addi	a2,zero,22
   2cc58:	bd9f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2cc5c:	00040513          	addi	a0,s0,0
   2cc60:	00813083          	ld	ra,8(sp)
   2cc64:	00013403          	ld	s0,0(sp)
   2cc68:	01010113          	addi	sp,sp,16
   2cc6c:	00008067          	jalr	zero,0(ra)

000000000002cc70 <dwarf::at_visibility(dwarf::die const&)>:
AT_ENUM(visibility, DW_VIS);
   2cc70:	fd010113          	addi	sp,sp,-48
   2cc74:	02113423          	sd	ra,40(sp)
   2cc78:	02813023          	sd	s0,32(sp)
   2cc7c:	00050593          	addi	a1,a0,0
   2cc80:	01700613          	addi	a2,zero,23
   2cc84:	00810413          	addi	s0,sp,8
   2cc88:	00040513          	addi	a0,s0,0
   2cc8c:	ba5f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2cc90:	00040513          	addi	a0,s0,0
   2cc94:	f35f20ef          	jal	ra,1fbc8 <dwarf::value::as_uconstant() const>
   2cc98:	0005051b          	addiw	a0,a0,0
   2cc9c:	02813083          	ld	ra,40(sp)
   2cca0:	02013403          	ld	s0,32(sp)
   2cca4:	03010113          	addi	sp,sp,48
   2cca8:	00008067          	jalr	zero,0(ra)

000000000002ccac <dwarf::at_import(dwarf::die const&)>:
AT_REFERENCE(import);
   2ccac:	fc010113          	addi	sp,sp,-64
   2ccb0:	02113c23          	sd	ra,56(sp)
   2ccb4:	02813823          	sd	s0,48(sp)
   2ccb8:	02913423          	sd	s1,40(sp)
   2ccbc:	00050413          	addi	s0,a0,0
   2ccc0:	01800613          	addi	a2,zero,24
   2ccc4:	00810493          	addi	s1,sp,8
   2ccc8:	00048513          	addi	a0,s1,0
   2cccc:	b65f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2ccd0:	00048593          	addi	a1,s1,0
   2ccd4:	00040513          	addi	a0,s0,0
   2ccd8:	bc0f50ef          	jal	ra,22098 <dwarf::value::as_reference() const>
   2ccdc:	00040513          	addi	a0,s0,0
   2cce0:	03813083          	ld	ra,56(sp)
   2cce4:	03013403          	ld	s0,48(sp)
   2cce8:	02813483          	ld	s1,40(sp)
   2ccec:	04010113          	addi	sp,sp,64
   2ccf0:	00008067          	jalr	zero,0(ra)

000000000002ccf4 <dwarf::at_common_reference(dwarf::die const&)>:
// XXX string_length
AT_REFERENCE(common_reference);
   2ccf4:	fc010113          	addi	sp,sp,-64
   2ccf8:	02113c23          	sd	ra,56(sp)
   2ccfc:	02813823          	sd	s0,48(sp)
   2cd00:	02913423          	sd	s1,40(sp)
   2cd04:	00050413          	addi	s0,a0,0
   2cd08:	01a00613          	addi	a2,zero,26
   2cd0c:	00810493          	addi	s1,sp,8
   2cd10:	00048513          	addi	a0,s1,0
   2cd14:	b1df10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2cd18:	00048593          	addi	a1,s1,0
   2cd1c:	00040513          	addi	a0,s0,0
   2cd20:	b78f50ef          	jal	ra,22098 <dwarf::value::as_reference() const>
   2cd24:	00040513          	addi	a0,s0,0
   2cd28:	03813083          	ld	ra,56(sp)
   2cd2c:	03013403          	ld	s0,48(sp)
   2cd30:	02813483          	ld	s1,40(sp)
   2cd34:	04010113          	addi	sp,sp,64
   2cd38:	00008067          	jalr	zero,0(ra)

000000000002cd3c <dwarf::at_comp_dir[abi:cxx11](dwarf::die const&)>:
AT_STRING(comp_dir);
   2cd3c:	fc010113          	addi	sp,sp,-64
   2cd40:	02113c23          	sd	ra,56(sp)
   2cd44:	02813823          	sd	s0,48(sp)
   2cd48:	02913423          	sd	s1,40(sp)
   2cd4c:	00050413          	addi	s0,a0,0
   2cd50:	01b00613          	addi	a2,zero,27
   2cd54:	00810493          	addi	s1,sp,8
   2cd58:	00048513          	addi	a0,s1,0
   2cd5c:	ad5f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2cd60:	00048593          	addi	a1,s1,0
   2cd64:	00040513          	addi	a0,s0,0
   2cd68:	ac4f50ef          	jal	ra,2202c <dwarf::value::as_string[abi:cxx11]() const>
   2cd6c:	00040513          	addi	a0,s0,0
   2cd70:	03813083          	ld	ra,56(sp)
   2cd74:	03013403          	ld	s0,48(sp)
   2cd78:	02813483          	ld	s1,40(sp)
   2cd7c:	04010113          	addi	sp,sp,64
   2cd80:	00008067          	jalr	zero,0(ra)

000000000002cd84 <dwarf::at_const_value(dwarf::die const&)>:
AT_ANY(const_value);
   2cd84:	ff010113          	addi	sp,sp,-16
   2cd88:	00113423          	sd	ra,8(sp)
   2cd8c:	00813023          	sd	s0,0(sp)
   2cd90:	00050413          	addi	s0,a0,0
   2cd94:	01c00613          	addi	a2,zero,28
   2cd98:	a99f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2cd9c:	00040513          	addi	a0,s0,0
   2cda0:	00813083          	ld	ra,8(sp)
   2cda4:	00013403          	ld	s0,0(sp)
   2cda8:	01010113          	addi	sp,sp,16
   2cdac:	00008067          	jalr	zero,0(ra)

000000000002cdb0 <dwarf::at_containing_type(dwarf::die const&)>:
AT_REFERENCE(containing_type);
   2cdb0:	fc010113          	addi	sp,sp,-64
   2cdb4:	02113c23          	sd	ra,56(sp)
   2cdb8:	02813823          	sd	s0,48(sp)
   2cdbc:	02913423          	sd	s1,40(sp)
   2cdc0:	00050413          	addi	s0,a0,0
   2cdc4:	01d00613          	addi	a2,zero,29
   2cdc8:	00810493          	addi	s1,sp,8
   2cdcc:	00048513          	addi	a0,s1,0
   2cdd0:	a61f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2cdd4:	00048593          	addi	a1,s1,0
   2cdd8:	00040513          	addi	a0,s0,0
   2cddc:	abcf50ef          	jal	ra,22098 <dwarf::value::as_reference() const>
   2cde0:	00040513          	addi	a0,s0,0
   2cde4:	03813083          	ld	ra,56(sp)
   2cde8:	03013403          	ld	s0,48(sp)
   2cdec:	02813483          	ld	s1,40(sp)
   2cdf0:	04010113          	addi	sp,sp,64
   2cdf4:	00008067          	jalr	zero,0(ra)

000000000002cdf8 <dwarf::at_inline(dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x2X
//

DW_INL at_inline(const die &d) {
   2cdf8:	fd010113          	addi	sp,sp,-48
   2cdfc:	02113423          	sd	ra,40(sp)
   2ce00:	02813023          	sd	s0,32(sp)
   2ce04:	00050593          	addi	a1,a0,0
  // XXX Missing attribute is equivalent to DW_INL_not_inlined
  // (DWARF4 section 3.3.8)
  return (DW_INL)d[DW_AT::inline_].as_uconstant();
   2ce08:	02000613          	addi	a2,zero,32
   2ce0c:	00810413          	addi	s0,sp,8
   2ce10:	00040513          	addi	a0,s0,0
   2ce14:	a1df10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2ce18:	00040513          	addi	a0,s0,0
   2ce1c:	dadf20ef          	jal	ra,1fbc8 <dwarf::value::as_uconstant() const>
}
   2ce20:	0005051b          	addiw	a0,a0,0
   2ce24:	02813083          	ld	ra,40(sp)
   2ce28:	02013403          	ld	s0,32(sp)
   2ce2c:	03010113          	addi	sp,sp,48
   2ce30:	00008067          	jalr	zero,0(ra)

000000000002ce34 <dwarf::at_is_optional(dwarf::die const&)>:
AT_FLAG(is_optional);
   2ce34:	fd010113          	addi	sp,sp,-48
   2ce38:	02113423          	sd	ra,40(sp)
   2ce3c:	02813023          	sd	s0,32(sp)
   2ce40:	00050593          	addi	a1,a0,0
   2ce44:	02100613          	addi	a2,zero,33
   2ce48:	00810413          	addi	s0,sp,8
   2ce4c:	00040513          	addi	a0,s0,0
   2ce50:	9e1f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2ce54:	00040513          	addi	a0,s0,0
   2ce58:	d59f30ef          	jal	ra,20bb0 <dwarf::value::as_flag() const>
   2ce5c:	02813083          	ld	ra,40(sp)
   2ce60:	02013403          	ld	s0,32(sp)
   2ce64:	03010113          	addi	sp,sp,48
   2ce68:	00008067          	jalr	zero,0(ra)

000000000002ce6c <dwarf::at_producer[abi:cxx11](dwarf::die const&)>:
AT_UDYNAMIC(lower_bound); // XXX Language-based default?
AT_STRING(producer);
   2ce6c:	fc010113          	addi	sp,sp,-64
   2ce70:	02113c23          	sd	ra,56(sp)
   2ce74:	02813823          	sd	s0,48(sp)
   2ce78:	02913423          	sd	s1,40(sp)
   2ce7c:	00050413          	addi	s0,a0,0
   2ce80:	02500613          	addi	a2,zero,37
   2ce84:	00810493          	addi	s1,sp,8
   2ce88:	00048513          	addi	a0,s1,0
   2ce8c:	9a5f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2ce90:	00048593          	addi	a1,s1,0
   2ce94:	00040513          	addi	a0,s0,0
   2ce98:	994f50ef          	jal	ra,2202c <dwarf::value::as_string[abi:cxx11]() const>
   2ce9c:	00040513          	addi	a0,s0,0
   2cea0:	03813083          	ld	ra,56(sp)
   2cea4:	03013403          	ld	s0,48(sp)
   2cea8:	02813483          	ld	s1,40(sp)
   2ceac:	04010113          	addi	sp,sp,64
   2ceb0:	00008067          	jalr	zero,0(ra)

000000000002ceb4 <dwarf::at_prototyped(dwarf::die const&)>:
AT_FLAG(prototyped);
   2ceb4:	fd010113          	addi	sp,sp,-48
   2ceb8:	02113423          	sd	ra,40(sp)
   2cebc:	02813023          	sd	s0,32(sp)
   2cec0:	00050593          	addi	a1,a0,0
   2cec4:	02700613          	addi	a2,zero,39
   2cec8:	00810413          	addi	s0,sp,8
   2cecc:	00040513          	addi	a0,s0,0
   2ced0:	961f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2ced4:	00040513          	addi	a0,s0,0
   2ced8:	cd9f30ef          	jal	ra,20bb0 <dwarf::value::as_flag() const>
   2cedc:	02813083          	ld	ra,40(sp)
   2cee0:	02013403          	ld	s0,32(sp)
   2cee4:	03010113          	addi	sp,sp,48
   2cee8:	00008067          	jalr	zero,0(ra)

000000000002ceec <dwarf::at_abstract_origin(dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x3X
//

AT_REFERENCE(abstract_origin);
   2ceec:	fc010113          	addi	sp,sp,-64
   2cef0:	02113c23          	sd	ra,56(sp)
   2cef4:	02813823          	sd	s0,48(sp)
   2cef8:	02913423          	sd	s1,40(sp)
   2cefc:	00050413          	addi	s0,a0,0
   2cf00:	03100613          	addi	a2,zero,49
   2cf04:	00810493          	addi	s1,sp,8
   2cf08:	00048513          	addi	a0,s1,0
   2cf0c:	925f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2cf10:	00048593          	addi	a1,s1,0
   2cf14:	00040513          	addi	a0,s0,0
   2cf18:	980f50ef          	jal	ra,22098 <dwarf::value::as_reference() const>
   2cf1c:	00040513          	addi	a0,s0,0
   2cf20:	03813083          	ld	ra,56(sp)
   2cf24:	03013403          	ld	s0,48(sp)
   2cf28:	02813483          	ld	s1,40(sp)
   2cf2c:	04010113          	addi	sp,sp,64
   2cf30:	00008067          	jalr	zero,0(ra)

000000000002cf34 <dwarf::at_accessibility(dwarf::die const&)>:
AT_ENUM(accessibility, DW_ACCESS);
   2cf34:	fd010113          	addi	sp,sp,-48
   2cf38:	02113423          	sd	ra,40(sp)
   2cf3c:	02813023          	sd	s0,32(sp)
   2cf40:	00050593          	addi	a1,a0,0
   2cf44:	03200613          	addi	a2,zero,50
   2cf48:	00810413          	addi	s0,sp,8
   2cf4c:	00040513          	addi	a0,s0,0
   2cf50:	8e1f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2cf54:	00040513          	addi	a0,s0,0
   2cf58:	c71f20ef          	jal	ra,1fbc8 <dwarf::value::as_uconstant() const>
   2cf5c:	0005051b          	addiw	a0,a0,0
   2cf60:	02813083          	ld	ra,40(sp)
   2cf64:	02013403          	ld	s0,32(sp)
   2cf68:	03010113          	addi	sp,sp,48
   2cf6c:	00008067          	jalr	zero,0(ra)

000000000002cf70 <dwarf::at_artificial(dwarf::die const&)>:
// XXX const address_class
AT_FLAG(artificial);
   2cf70:	fd010113          	addi	sp,sp,-48
   2cf74:	02113423          	sd	ra,40(sp)
   2cf78:	02813023          	sd	s0,32(sp)
   2cf7c:	00050593          	addi	a1,a0,0
   2cf80:	03400613          	addi	a2,zero,52
   2cf84:	00810413          	addi	s0,sp,8
   2cf88:	00040513          	addi	a0,s0,0
   2cf8c:	8a5f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2cf90:	00040513          	addi	a0,s0,0
   2cf94:	c1df30ef          	jal	ra,20bb0 <dwarf::value::as_flag() const>
   2cf98:	02813083          	ld	ra,40(sp)
   2cf9c:	02013403          	ld	s0,32(sp)
   2cfa0:	03010113          	addi	sp,sp,48
   2cfa4:	00008067          	jalr	zero,0(ra)

000000000002cfa8 <dwarf::at_calling_convention(dwarf::die const&)>:
// XXX base_types
AT_ENUM(calling_convention, DW_CC);
   2cfa8:	fd010113          	addi	sp,sp,-48
   2cfac:	02113423          	sd	ra,40(sp)
   2cfb0:	02813023          	sd	s0,32(sp)
   2cfb4:	00050593          	addi	a1,a0,0
   2cfb8:	03600613          	addi	a2,zero,54
   2cfbc:	00810413          	addi	s0,sp,8
   2cfc0:	00040513          	addi	a0,s0,0
   2cfc4:	86df10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2cfc8:	00040513          	addi	a0,s0,0
   2cfcc:	bfdf20ef          	jal	ra,1fbc8 <dwarf::value::as_uconstant() const>
   2cfd0:	0005051b          	addiw	a0,a0,0
   2cfd4:	02813083          	ld	ra,40(sp)
   2cfd8:	02013403          	ld	s0,32(sp)
   2cfdc:	03010113          	addi	sp,sp,48
   2cfe0:	00008067          	jalr	zero,0(ra)

000000000002cfe4 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)>:
AT_UDYNAMIC(count);
expr_result at_data_member_location(const die &d, expr_context *ctx, taddr base,
                                    taddr pc) {
   2cfe4:	f6010113          	addi	sp,sp,-160
   2cfe8:	08113c23          	sd	ra,152(sp)
   2cfec:	08813823          	sd	s0,144(sp)
   2cff0:	08913423          	sd	s1,136(sp)
   2cff4:	09213023          	sd	s2,128(sp)
   2cff8:	07313c23          	sd	s3,120(sp)
   2cffc:	00050413          	addi	s0,a0,0
   2d000:	00060913          	addi	s2,a2,0
   2d004:	00068493          	addi	s1,a3,0
  value v(d[DW_AT::data_member_location]);
   2d008:	03800613          	addi	a2,zero,56
   2d00c:	04010513          	addi	a0,sp,64
   2d010:	821f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
  type get_type() const { return typ; }
   2d014:	04c12783          	lw	a5,76(sp)
  switch (v.get_type()) {
   2d018:	00600713          	addi	a4,zero,6
   2d01c:	06e78c63          	beq	a5,a4,2d094 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xb0>
   2d020:	04f74863          	blt	a4,a5,2d070 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x8c>
   2d024:	ffd7879b          	addiw	a5,a5,-3
   2d028:	00100713          	addi	a4,zero,1
   2d02c:	0af76463          	bltu	a4,a5,2d0d4 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xf0>
  case value::type::constant:
  case value::type::uconstant:
    return {expr_result::type::address, base + v.as_uconstant()};
   2d030:	00043023          	sd	zero,0(s0)
   2d034:	00043423          	sd	zero,8(s0)
   2d038:	00043823          	sd	zero,16(s0)
   2d03c:	00043c23          	sd	zero,24(s0)
   2d040:	04010513          	addi	a0,sp,64
   2d044:	b85f20ef          	jal	ra,1fbc8 <dwarf::value::as_uconstant() const>
   2d048:	00a484b3          	add	s1,s1,a0
   2d04c:	00943423          	sd	s1,8(s0)
    throw std::runtime_error("not implemented");
  default:
    throw format_error("DW_AT_data_member_location has unexpected type " +
                       to_string(v.get_type()));
  }
}
   2d050:	00040513          	addi	a0,s0,0
   2d054:	09813083          	ld	ra,152(sp)
   2d058:	09013403          	ld	s0,144(sp)
   2d05c:	08813483          	ld	s1,136(sp)
   2d060:	08013903          	ld	s2,128(sp)
   2d064:	07813983          	ld	s3,120(sp)
   2d068:	0a010113          	addi	sp,sp,160
   2d06c:	00008067          	jalr	zero,0(ra)
  switch (v.get_type()) {
   2d070:	00900713          	addi	a4,zero,9
   2d074:	06e79063          	bne	a5,a4,2d0d4 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xf0>
    throw std::runtime_error("not implemented");
   2d078:	01000513          	addi	a0,zero,16
   2d07c:	e14e90ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2d080:	00050413          	addi	s0,a0,0
   2d084:	0000c597          	auipc	a1,0xc
   2d088:	acc58593          	addi	a1,a1,-1332 # 38b50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x70>
   2d08c:	dd4e90ef          	jal	ra,16660 <std::runtime_error::runtime_error(char const*)@plt>
   2d090:	02c0006f          	jal	zero,2d0bc <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xd8>
    return v.as_exprloc().evaluate(ctx, base);
   2d094:	04010593          	addi	a1,sp,64
   2d098:	05810993          	addi	s3,sp,88
   2d09c:	00098513          	addi	a0,s3,0
   2d0a0:	decf30ef          	jal	ra,2068c <dwarf::value::as_exprloc() const>
   2d0a4:	00048693          	addi	a3,s1,0
   2d0a8:	00090613          	addi	a2,s2,0
   2d0ac:	00098593          	addi	a1,s3,0
   2d0b0:	00040513          	addi	a0,s0,0
   2d0b4:	b94fa0ef          	jal	ra,27448 <dwarf::expr::evaluate(dwarf::expr_context*, unsigned long) const>
   2d0b8:	f99ff06f          	jal	zero,2d050 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x6c>
    throw std::runtime_error("not implemented");
   2d0bc:	00016617          	auipc	a2,0x16
   2d0c0:	36463603          	ld	a2,868(a2) # 43420 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   2d0c4:	00016597          	auipc	a1,0x16
   2d0c8:	54c5b583          	ld	a1,1356(a1) # 43610 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   2d0cc:	00040513          	addi	a0,s0,0
   2d0d0:	891e90ef          	jal	ra,16960 <__cxa_throw@plt>
                       to_string(v.get_type()));
   2d0d4:	01000513          	addi	a0,zero,16
   2d0d8:	db8e90ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2d0dc:	00050493          	addi	s1,a0,0
   2d0e0:	04c12583          	lw	a1,76(sp)
   2d0e4:	00010513          	addi	a0,sp,0
   2d0e8:	389020ef          	jal	ra,2fc70 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   2d0ec:	0000c617          	auipc	a2,0xc
   2d0f0:	a7460613          	addi	a2,a2,-1420 # 38b60 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x80>
   2d0f4:	00000593          	addi	a1,zero,0
   2d0f8:	00010513          	addi	a0,sp,0
   2d0fc:	d04e90ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2d100:	00050593          	addi	a1,a0,0
   2d104:	02010413          	addi	s0,sp,32
   2d108:	00040513          	addi	a0,s0,0
   2d10c:	dc4e90ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   2d110:	00040593          	addi	a1,s0,0
   2d114:	00048513          	addi	a0,s1,0
   2d118:	f18e90ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2d11c:	00016797          	auipc	a5,0x16
   2d120:	4547b783          	ld	a5,1108(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   2d124:	01078793          	addi	a5,a5,16
   2d128:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   2d12c:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2d130:	03010793          	addi	a5,sp,48
   2d134:	00f50463          	beq	a0,a5,2d13c <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x158>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2d138:	e68e90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2d13c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d140:	01010793          	addi	a5,sp,16
   2d144:	00f50463          	beq	a0,a5,2d14c <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x168>
   2d148:	e58e90ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2d14c:	00016617          	auipc	a2,0x16
   2d150:	24c63603          	ld	a2,588(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   2d154:	00016597          	auipc	a1,0x16
   2d158:	1745b583          	ld	a1,372(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   2d15c:	00048513          	addi	a0,s1,0
   2d160:	801e90ef          	jal	ra,16960 <__cxa_throw@plt>
    throw std::runtime_error("not implemented");
   2d164:	00050493          	addi	s1,a0,0
   2d168:	00040513          	addi	a0,s0,0
   2d16c:	de4e90ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2d170:	00048513          	addi	a0,s1,0
   2d174:	81de90ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2d178:	00050413          	addi	s0,a0,0
   2d17c:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2d180:	03010793          	addi	a5,sp,48
   2d184:	00f50463          	beq	a0,a5,2d18c <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x1a8>
   2d188:	e18e90ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2d18c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d190:	01010793          	addi	a5,sp,16
   2d194:	00f50463          	beq	a0,a5,2d19c <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x1b8>
   2d198:	e08e90ef          	jal	ra,167a0 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   2d19c:	00048513          	addi	a0,s1,0
   2d1a0:	db0e90ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2d1a4:	00040513          	addi	a0,s0,0
   2d1a8:	fe8e90ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2d1ac:	00050413          	addi	s0,a0,0
   2d1b0:	fddff06f          	jal	zero,2d18c <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x1a8>
   2d1b4:	00050413          	addi	s0,a0,0
   2d1b8:	fe5ff06f          	jal	zero,2d19c <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x1b8>

000000000002d1bc <dwarf::at_declaration(dwarf::die const&)>:
// XXX decl_column decl_file decl_line
AT_FLAG(declaration);
   2d1bc:	fd010113          	addi	sp,sp,-48
   2d1c0:	02113423          	sd	ra,40(sp)
   2d1c4:	02813023          	sd	s0,32(sp)
   2d1c8:	00050593          	addi	a1,a0,0
   2d1cc:	03c00613          	addi	a2,zero,60
   2d1d0:	00810413          	addi	s0,sp,8
   2d1d4:	00040513          	addi	a0,s0,0
   2d1d8:	e58f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d1dc:	00040513          	addi	a0,s0,0
   2d1e0:	9d1f30ef          	jal	ra,20bb0 <dwarf::value::as_flag() const>
   2d1e4:	02813083          	ld	ra,40(sp)
   2d1e8:	02013403          	ld	s0,32(sp)
   2d1ec:	03010113          	addi	sp,sp,48
   2d1f0:	00008067          	jalr	zero,0(ra)

000000000002d1f4 <dwarf::at_encoding(dwarf::die const&)>:
// XXX discr_list
AT_ENUM(encoding, DW_ATE);
   2d1f4:	fd010113          	addi	sp,sp,-48
   2d1f8:	02113423          	sd	ra,40(sp)
   2d1fc:	02813023          	sd	s0,32(sp)
   2d200:	00050593          	addi	a1,a0,0
   2d204:	03e00613          	addi	a2,zero,62
   2d208:	00810413          	addi	s0,sp,8
   2d20c:	00040513          	addi	a0,s0,0
   2d210:	e20f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d214:	00040513          	addi	a0,s0,0
   2d218:	9b1f20ef          	jal	ra,1fbc8 <dwarf::value::as_uconstant() const>
   2d21c:	0005051b          	addiw	a0,a0,0
   2d220:	02813083          	ld	ra,40(sp)
   2d224:	02013403          	ld	s0,32(sp)
   2d228:	03010113          	addi	sp,sp,48
   2d22c:	00008067          	jalr	zero,0(ra)

000000000002d230 <dwarf::at_external(dwarf::die const&)>:
AT_FLAG(external);
   2d230:	fd010113          	addi	sp,sp,-48
   2d234:	02113423          	sd	ra,40(sp)
   2d238:	02813023          	sd	s0,32(sp)
   2d23c:	00050593          	addi	a1,a0,0
   2d240:	03f00613          	addi	a2,zero,63
   2d244:	00810413          	addi	s0,sp,8
   2d248:	00040513          	addi	a0,s0,0
   2d24c:	de4f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d250:	00040513          	addi	a0,s0,0
   2d254:	95df30ef          	jal	ra,20bb0 <dwarf::value::as_flag() const>
   2d258:	02813083          	ld	ra,40(sp)
   2d25c:	02013403          	ld	s0,32(sp)
   2d260:	03010113          	addi	sp,sp,48
   2d264:	00008067          	jalr	zero,0(ra)

000000000002d268 <dwarf::at_friend(dwarf::die const&)>:
//////////////////////////////////////////////////////////////////
// 0x4X
//

// XXX frame_base
die at_friend(const die &d) { return d[DW_AT::friend_].as_reference(); }
   2d268:	fc010113          	addi	sp,sp,-64
   2d26c:	02113c23          	sd	ra,56(sp)
   2d270:	02813823          	sd	s0,48(sp)
   2d274:	02913423          	sd	s1,40(sp)
   2d278:	00050413          	addi	s0,a0,0
   2d27c:	04100613          	addi	a2,zero,65
   2d280:	00810493          	addi	s1,sp,8
   2d284:	00048513          	addi	a0,s1,0
   2d288:	da8f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d28c:	00048593          	addi	a1,s1,0
   2d290:	00040513          	addi	a0,s0,0
   2d294:	e05f40ef          	jal	ra,22098 <dwarf::value::as_reference() const>
   2d298:	00040513          	addi	a0,s0,0
   2d29c:	03813083          	ld	ra,56(sp)
   2d2a0:	03013403          	ld	s0,48(sp)
   2d2a4:	02813483          	ld	s1,40(sp)
   2d2a8:	04010113          	addi	sp,sp,64
   2d2ac:	00008067          	jalr	zero,0(ra)

000000000002d2b0 <dwarf::at_identifier_case(dwarf::die const&)>:
AT_ENUM(identifier_case, DW_ID);
   2d2b0:	fd010113          	addi	sp,sp,-48
   2d2b4:	02113423          	sd	ra,40(sp)
   2d2b8:	02813023          	sd	s0,32(sp)
   2d2bc:	00050593          	addi	a1,a0,0
   2d2c0:	04200613          	addi	a2,zero,66
   2d2c4:	00810413          	addi	s0,sp,8
   2d2c8:	00040513          	addi	a0,s0,0
   2d2cc:	d64f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d2d0:	00040513          	addi	a0,s0,0
   2d2d4:	8f5f20ef          	jal	ra,1fbc8 <dwarf::value::as_uconstant() const>
   2d2d8:	0005051b          	addiw	a0,a0,0
   2d2dc:	02813083          	ld	ra,40(sp)
   2d2e0:	02013403          	ld	s0,32(sp)
   2d2e4:	03010113          	addi	sp,sp,48
   2d2e8:	00008067          	jalr	zero,0(ra)

000000000002d2ec <dwarf::at_namelist_item(dwarf::die const&)>:
// XXX macro_info
AT_REFERENCE(namelist_item);
   2d2ec:	fc010113          	addi	sp,sp,-64
   2d2f0:	02113c23          	sd	ra,56(sp)
   2d2f4:	02813823          	sd	s0,48(sp)
   2d2f8:	02913423          	sd	s1,40(sp)
   2d2fc:	00050413          	addi	s0,a0,0
   2d300:	04400613          	addi	a2,zero,68
   2d304:	00810493          	addi	s1,sp,8
   2d308:	00048513          	addi	a0,s1,0
   2d30c:	d24f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d310:	00048593          	addi	a1,s1,0
   2d314:	00040513          	addi	a0,s0,0
   2d318:	d81f40ef          	jal	ra,22098 <dwarf::value::as_reference() const>
   2d31c:	00040513          	addi	a0,s0,0
   2d320:	03813083          	ld	ra,56(sp)
   2d324:	03013403          	ld	s0,48(sp)
   2d328:	02813483          	ld	s1,40(sp)
   2d32c:	04010113          	addi	sp,sp,64
   2d330:	00008067          	jalr	zero,0(ra)

000000000002d334 <dwarf::at_priority(dwarf::die const&)>:
AT_REFERENCE(priority); // XXX Computed might be useful
   2d334:	fc010113          	addi	sp,sp,-64
   2d338:	02113c23          	sd	ra,56(sp)
   2d33c:	02813823          	sd	s0,48(sp)
   2d340:	02913423          	sd	s1,40(sp)
   2d344:	00050413          	addi	s0,a0,0
   2d348:	04500613          	addi	a2,zero,69
   2d34c:	00810493          	addi	s1,sp,8
   2d350:	00048513          	addi	a0,s1,0
   2d354:	cdcf10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d358:	00048593          	addi	a1,s1,0
   2d35c:	00040513          	addi	a0,s0,0
   2d360:	d39f40ef          	jal	ra,22098 <dwarf::value::as_reference() const>
   2d364:	00040513          	addi	a0,s0,0
   2d368:	03813083          	ld	ra,56(sp)
   2d36c:	03013403          	ld	s0,48(sp)
   2d370:	02813483          	ld	s1,40(sp)
   2d374:	04010113          	addi	sp,sp,64
   2d378:	00008067          	jalr	zero,0(ra)

000000000002d37c <dwarf::at_specification(dwarf::die const&)>:
// XXX segment
AT_REFERENCE(specification);
   2d37c:	fc010113          	addi	sp,sp,-64
   2d380:	02113c23          	sd	ra,56(sp)
   2d384:	02813823          	sd	s0,48(sp)
   2d388:	02913423          	sd	s1,40(sp)
   2d38c:	00050413          	addi	s0,a0,0
   2d390:	04700613          	addi	a2,zero,71
   2d394:	00810493          	addi	s1,sp,8
   2d398:	00048513          	addi	a0,s1,0
   2d39c:	c94f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d3a0:	00048593          	addi	a1,s1,0
   2d3a4:	00040513          	addi	a0,s0,0
   2d3a8:	cf1f40ef          	jal	ra,22098 <dwarf::value::as_reference() const>
   2d3ac:	00040513          	addi	a0,s0,0
   2d3b0:	03813083          	ld	ra,56(sp)
   2d3b4:	03013403          	ld	s0,48(sp)
   2d3b8:	02813483          	ld	s1,40(sp)
   2d3bc:	04010113          	addi	sp,sp,64
   2d3c0:	00008067          	jalr	zero,0(ra)

000000000002d3c4 <dwarf::at_type(dwarf::die const&)>:
// XXX static_link
AT_REFERENCE(type);
   2d3c4:	fc010113          	addi	sp,sp,-64
   2d3c8:	02113c23          	sd	ra,56(sp)
   2d3cc:	02813823          	sd	s0,48(sp)
   2d3d0:	02913423          	sd	s1,40(sp)
   2d3d4:	00050413          	addi	s0,a0,0
   2d3d8:	04900613          	addi	a2,zero,73
   2d3dc:	00810493          	addi	s1,sp,8
   2d3e0:	00048513          	addi	a0,s1,0
   2d3e4:	c4cf10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d3e8:	00048593          	addi	a1,s1,0
   2d3ec:	00040513          	addi	a0,s0,0
   2d3f0:	ca9f40ef          	jal	ra,22098 <dwarf::value::as_reference() const>
   2d3f4:	00040513          	addi	a0,s0,0
   2d3f8:	03813083          	ld	ra,56(sp)
   2d3fc:	03013403          	ld	s0,48(sp)
   2d400:	02813483          	ld	s1,40(sp)
   2d404:	04010113          	addi	sp,sp,64
   2d408:	00008067          	jalr	zero,0(ra)

000000000002d40c <dwarf::at_variable_parameter(dwarf::die const&)>:
// XXX use_location
AT_FLAG(variable_parameter);
   2d40c:	fd010113          	addi	sp,sp,-48
   2d410:	02113423          	sd	ra,40(sp)
   2d414:	02813023          	sd	s0,32(sp)
   2d418:	00050593          	addi	a1,a0,0
   2d41c:	04b00613          	addi	a2,zero,75
   2d420:	00810413          	addi	s0,sp,8
   2d424:	00040513          	addi	a0,s0,0
   2d428:	c08f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d42c:	00040513          	addi	a0,s0,0
   2d430:	f80f30ef          	jal	ra,20bb0 <dwarf::value::as_flag() const>
   2d434:	02813083          	ld	ra,40(sp)
   2d438:	02013403          	ld	s0,32(sp)
   2d43c:	03010113          	addi	sp,sp,48
   2d440:	00008067          	jalr	zero,0(ra)

000000000002d444 <dwarf::at_virtuality(dwarf::die const&)>:
// XXX 7.11 The value DW_VIRTUALITY_none is equivalent to the absence
// of the DW_AT_virtuality attribute.
AT_ENUM(virtuality, DW_VIRTUALITY);
   2d444:	fd010113          	addi	sp,sp,-48
   2d448:	02113423          	sd	ra,40(sp)
   2d44c:	02813023          	sd	s0,32(sp)
   2d450:	00050593          	addi	a1,a0,0
   2d454:	04c00613          	addi	a2,zero,76
   2d458:	00810413          	addi	s0,sp,8
   2d45c:	00040513          	addi	a0,s0,0
   2d460:	bd0f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d464:	00040513          	addi	a0,s0,0
   2d468:	f60f20ef          	jal	ra,1fbc8 <dwarf::value::as_uconstant() const>
   2d46c:	0005051b          	addiw	a0,a0,0
   2d470:	02813083          	ld	ra,40(sp)
   2d474:	02013403          	ld	s0,32(sp)
   2d478:	03010113          	addi	sp,sp,48
   2d47c:	00008067          	jalr	zero,0(ra)

000000000002d480 <dwarf::at_entry_pc(dwarf::die const&)>:
// 0x5X
//

// XXX data_location
AT_UDYNAMIC(byte_stride);
AT_ADDRESS(entry_pc);
   2d480:	fd010113          	addi	sp,sp,-48
   2d484:	02113423          	sd	ra,40(sp)
   2d488:	02813023          	sd	s0,32(sp)
   2d48c:	00050593          	addi	a1,a0,0
   2d490:	05200613          	addi	a2,zero,82
   2d494:	00810413          	addi	s0,sp,8
   2d498:	00040513          	addi	a0,s0,0
   2d49c:	b94f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d4a0:	00040513          	addi	a0,s0,0
   2d4a4:	e9df10ef          	jal	ra,1f340 <dwarf::value::as_address() const>
   2d4a8:	02813083          	ld	ra,40(sp)
   2d4ac:	02013403          	ld	s0,32(sp)
   2d4b0:	03010113          	addi	sp,sp,48
   2d4b4:	00008067          	jalr	zero,0(ra)

000000000002d4b8 <dwarf::at_use_UTF8(dwarf::die const&)>:
AT_FLAG(use_UTF8);
   2d4b8:	fd010113          	addi	sp,sp,-48
   2d4bc:	02113423          	sd	ra,40(sp)
   2d4c0:	02813023          	sd	s0,32(sp)
   2d4c4:	00050593          	addi	a1,a0,0
   2d4c8:	05300613          	addi	a2,zero,83
   2d4cc:	00810413          	addi	s0,sp,8
   2d4d0:	00040513          	addi	a0,s0,0
   2d4d4:	b5cf10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d4d8:	00040513          	addi	a0,s0,0
   2d4dc:	ed4f30ef          	jal	ra,20bb0 <dwarf::value::as_flag() const>
   2d4e0:	02813083          	ld	ra,40(sp)
   2d4e4:	02013403          	ld	s0,32(sp)
   2d4e8:	03010113          	addi	sp,sp,48
   2d4ec:	00008067          	jalr	zero,0(ra)

000000000002d4f0 <dwarf::at_extension(dwarf::die const&)>:
AT_REFERENCE(extension);
   2d4f0:	fc010113          	addi	sp,sp,-64
   2d4f4:	02113c23          	sd	ra,56(sp)
   2d4f8:	02813823          	sd	s0,48(sp)
   2d4fc:	02913423          	sd	s1,40(sp)
   2d500:	00050413          	addi	s0,a0,0
   2d504:	05400613          	addi	a2,zero,84
   2d508:	00810493          	addi	s1,sp,8
   2d50c:	00048513          	addi	a0,s1,0
   2d510:	b20f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d514:	00048593          	addi	a1,s1,0
   2d518:	00040513          	addi	a0,s0,0
   2d51c:	b7df40ef          	jal	ra,22098 <dwarf::value::as_reference() const>
   2d520:	00040513          	addi	a0,s0,0
   2d524:	03813083          	ld	ra,56(sp)
   2d528:	03013403          	ld	s0,48(sp)
   2d52c:	02813483          	ld	s1,40(sp)
   2d530:	04010113          	addi	sp,sp,64
   2d534:	00008067          	jalr	zero,0(ra)

000000000002d538 <dwarf::at_ranges(dwarf::die const&)>:
rangelist at_ranges(const die &d) { return d[DW_AT::ranges].as_rangelist(); }
   2d538:	fc010113          	addi	sp,sp,-64
   2d53c:	02113c23          	sd	ra,56(sp)
   2d540:	02813823          	sd	s0,48(sp)
   2d544:	02913423          	sd	s1,40(sp)
   2d548:	00050413          	addi	s0,a0,0
   2d54c:	05500613          	addi	a2,zero,85
   2d550:	00810493          	addi	s1,sp,8
   2d554:	00048513          	addi	a0,s1,0
   2d558:	ad8f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d55c:	00048593          	addi	a1,s1,0
   2d560:	00040513          	addi	a0,s0,0
   2d564:	efcf40ef          	jal	ra,21c60 <dwarf::value::as_rangelist() const>
   2d568:	00040513          	addi	a0,s0,0
   2d56c:	03813083          	ld	ra,56(sp)
   2d570:	03013403          	ld	s0,48(sp)
   2d574:	02813483          	ld	s1,40(sp)
   2d578:	04010113          	addi	sp,sp,64
   2d57c:	00008067          	jalr	zero,0(ra)

000000000002d580 <dwarf::at_description[abi:cxx11](dwarf::die const&)>:
// XXX trampoline
// XXX const call_column, call_file, call_line
AT_STRING(description);
   2d580:	fc010113          	addi	sp,sp,-64
   2d584:	02113c23          	sd	ra,56(sp)
   2d588:	02813823          	sd	s0,48(sp)
   2d58c:	02913423          	sd	s1,40(sp)
   2d590:	00050413          	addi	s0,a0,0
   2d594:	05a00613          	addi	a2,zero,90
   2d598:	00810493          	addi	s1,sp,8
   2d59c:	00048513          	addi	a0,s1,0
   2d5a0:	a90f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d5a4:	00048593          	addi	a1,s1,0
   2d5a8:	00040513          	addi	a0,s0,0
   2d5ac:	a81f40ef          	jal	ra,2202c <dwarf::value::as_string[abi:cxx11]() const>
   2d5b0:	00040513          	addi	a0,s0,0
   2d5b4:	03813083          	ld	ra,56(sp)
   2d5b8:	03013403          	ld	s0,48(sp)
   2d5bc:	02813483          	ld	s1,40(sp)
   2d5c0:	04010113          	addi	sp,sp,64
   2d5c4:	00008067          	jalr	zero,0(ra)

000000000002d5c8 <dwarf::at_small(dwarf::die const&)>:
// XXX const binary_scale
// XXX const decimal_scale
AT_REFERENCE(small);
   2d5c8:	fc010113          	addi	sp,sp,-64
   2d5cc:	02113c23          	sd	ra,56(sp)
   2d5d0:	02813823          	sd	s0,48(sp)
   2d5d4:	02913423          	sd	s1,40(sp)
   2d5d8:	00050413          	addi	s0,a0,0
   2d5dc:	05d00613          	addi	a2,zero,93
   2d5e0:	00810493          	addi	s1,sp,8
   2d5e4:	00048513          	addi	a0,s1,0
   2d5e8:	a48f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d5ec:	00048593          	addi	a1,s1,0
   2d5f0:	00040513          	addi	a0,s0,0
   2d5f4:	aa5f40ef          	jal	ra,22098 <dwarf::value::as_reference() const>
   2d5f8:	00040513          	addi	a0,s0,0
   2d5fc:	03813083          	ld	ra,56(sp)
   2d600:	03013403          	ld	s0,48(sp)
   2d604:	02813483          	ld	s1,40(sp)
   2d608:	04010113          	addi	sp,sp,64
   2d60c:	00008067          	jalr	zero,0(ra)

000000000002d610 <dwarf::at_picture_string[abi:cxx11](dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x6X
//

AT_STRING(picture_string);
   2d610:	fc010113          	addi	sp,sp,-64
   2d614:	02113c23          	sd	ra,56(sp)
   2d618:	02813823          	sd	s0,48(sp)
   2d61c:	02913423          	sd	s1,40(sp)
   2d620:	00050413          	addi	s0,a0,0
   2d624:	06000613          	addi	a2,zero,96
   2d628:	00810493          	addi	s1,sp,8
   2d62c:	00048513          	addi	a0,s1,0
   2d630:	a00f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d634:	00048593          	addi	a1,s1,0
   2d638:	00040513          	addi	a0,s0,0
   2d63c:	9f1f40ef          	jal	ra,2202c <dwarf::value::as_string[abi:cxx11]() const>
   2d640:	00040513          	addi	a0,s0,0
   2d644:	03813083          	ld	ra,56(sp)
   2d648:	03013403          	ld	s0,48(sp)
   2d64c:	02813483          	ld	s1,40(sp)
   2d650:	04010113          	addi	sp,sp,64
   2d654:	00008067          	jalr	zero,0(ra)

000000000002d658 <dwarf::at_mutable(dwarf::die const&)>:
AT_FLAG_(mutable);
   2d658:	fd010113          	addi	sp,sp,-48
   2d65c:	02113423          	sd	ra,40(sp)
   2d660:	02813023          	sd	s0,32(sp)
   2d664:	00050593          	addi	a1,a0,0
   2d668:	06100613          	addi	a2,zero,97
   2d66c:	00810413          	addi	s0,sp,8
   2d670:	00040513          	addi	a0,s0,0
   2d674:	9bcf10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d678:	00040513          	addi	a0,s0,0
   2d67c:	d34f30ef          	jal	ra,20bb0 <dwarf::value::as_flag() const>
   2d680:	02813083          	ld	ra,40(sp)
   2d684:	02013403          	ld	s0,32(sp)
   2d688:	03010113          	addi	sp,sp,48
   2d68c:	00008067          	jalr	zero,0(ra)

000000000002d690 <dwarf::at_threads_scaled(dwarf::die const&)>:
AT_FLAG(threads_scaled);
   2d690:	fd010113          	addi	sp,sp,-48
   2d694:	02113423          	sd	ra,40(sp)
   2d698:	02813023          	sd	s0,32(sp)
   2d69c:	00050593          	addi	a1,a0,0
   2d6a0:	06200613          	addi	a2,zero,98
   2d6a4:	00810413          	addi	s0,sp,8
   2d6a8:	00040513          	addi	a0,s0,0
   2d6ac:	984f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d6b0:	00040513          	addi	a0,s0,0
   2d6b4:	cfcf30ef          	jal	ra,20bb0 <dwarf::value::as_flag() const>
   2d6b8:	02813083          	ld	ra,40(sp)
   2d6bc:	02013403          	ld	s0,32(sp)
   2d6c0:	03010113          	addi	sp,sp,48
   2d6c4:	00008067          	jalr	zero,0(ra)

000000000002d6c8 <dwarf::at_explicit(dwarf::die const&)>:
AT_FLAG_(explicit);
   2d6c8:	fd010113          	addi	sp,sp,-48
   2d6cc:	02113423          	sd	ra,40(sp)
   2d6d0:	02813023          	sd	s0,32(sp)
   2d6d4:	00050593          	addi	a1,a0,0
   2d6d8:	06300613          	addi	a2,zero,99
   2d6dc:	00810413          	addi	s0,sp,8
   2d6e0:	00040513          	addi	a0,s0,0
   2d6e4:	94cf10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d6e8:	00040513          	addi	a0,s0,0
   2d6ec:	cc4f30ef          	jal	ra,20bb0 <dwarf::value::as_flag() const>
   2d6f0:	02813083          	ld	ra,40(sp)
   2d6f4:	02013403          	ld	s0,32(sp)
   2d6f8:	03010113          	addi	sp,sp,48
   2d6fc:	00008067          	jalr	zero,0(ra)

000000000002d700 <dwarf::at_object_pointer(dwarf::die const&)>:
AT_REFERENCE(object_pointer);
   2d700:	fc010113          	addi	sp,sp,-64
   2d704:	02113c23          	sd	ra,56(sp)
   2d708:	02813823          	sd	s0,48(sp)
   2d70c:	02913423          	sd	s1,40(sp)
   2d710:	00050413          	addi	s0,a0,0
   2d714:	06400613          	addi	a2,zero,100
   2d718:	00810493          	addi	s1,sp,8
   2d71c:	00048513          	addi	a0,s1,0
   2d720:	910f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d724:	00048593          	addi	a1,s1,0
   2d728:	00040513          	addi	a0,s0,0
   2d72c:	96df40ef          	jal	ra,22098 <dwarf::value::as_reference() const>
   2d730:	00040513          	addi	a0,s0,0
   2d734:	03813083          	ld	ra,56(sp)
   2d738:	03013403          	ld	s0,48(sp)
   2d73c:	02813483          	ld	s1,40(sp)
   2d740:	04010113          	addi	sp,sp,64
   2d744:	00008067          	jalr	zero,0(ra)

000000000002d748 <dwarf::at_endianity(dwarf::die const&)>:
AT_ENUM(endianity, DW_END);
   2d748:	fd010113          	addi	sp,sp,-48
   2d74c:	02113423          	sd	ra,40(sp)
   2d750:	02813023          	sd	s0,32(sp)
   2d754:	00050593          	addi	a1,a0,0
   2d758:	06500613          	addi	a2,zero,101
   2d75c:	00810413          	addi	s0,sp,8
   2d760:	00040513          	addi	a0,s0,0
   2d764:	8ccf10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d768:	00040513          	addi	a0,s0,0
   2d76c:	c5cf20ef          	jal	ra,1fbc8 <dwarf::value::as_uconstant() const>
   2d770:	0005051b          	addiw	a0,a0,0
   2d774:	02813083          	ld	ra,40(sp)
   2d778:	02013403          	ld	s0,32(sp)
   2d77c:	03010113          	addi	sp,sp,48
   2d780:	00008067          	jalr	zero,0(ra)

000000000002d784 <dwarf::at_elemental(dwarf::die const&)>:
AT_FLAG(elemental);
   2d784:	fd010113          	addi	sp,sp,-48
   2d788:	02113423          	sd	ra,40(sp)
   2d78c:	02813023          	sd	s0,32(sp)
   2d790:	00050593          	addi	a1,a0,0
   2d794:	06600613          	addi	a2,zero,102
   2d798:	00810413          	addi	s0,sp,8
   2d79c:	00040513          	addi	a0,s0,0
   2d7a0:	890f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d7a4:	00040513          	addi	a0,s0,0
   2d7a8:	c08f30ef          	jal	ra,20bb0 <dwarf::value::as_flag() const>
   2d7ac:	02813083          	ld	ra,40(sp)
   2d7b0:	02013403          	ld	s0,32(sp)
   2d7b4:	03010113          	addi	sp,sp,48
   2d7b8:	00008067          	jalr	zero,0(ra)

000000000002d7bc <dwarf::at_pure(dwarf::die const&)>:
AT_FLAG(pure);
   2d7bc:	fd010113          	addi	sp,sp,-48
   2d7c0:	02113423          	sd	ra,40(sp)
   2d7c4:	02813023          	sd	s0,32(sp)
   2d7c8:	00050593          	addi	a1,a0,0
   2d7cc:	06700613          	addi	a2,zero,103
   2d7d0:	00810413          	addi	s0,sp,8
   2d7d4:	00040513          	addi	a0,s0,0
   2d7d8:	858f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d7dc:	00040513          	addi	a0,s0,0
   2d7e0:	bd0f30ef          	jal	ra,20bb0 <dwarf::value::as_flag() const>
   2d7e4:	02813083          	ld	ra,40(sp)
   2d7e8:	02013403          	ld	s0,32(sp)
   2d7ec:	03010113          	addi	sp,sp,48
   2d7f0:	00008067          	jalr	zero,0(ra)

000000000002d7f4 <dwarf::at_recursive(dwarf::die const&)>:
AT_FLAG(recursive);
   2d7f4:	fd010113          	addi	sp,sp,-48
   2d7f8:	02113423          	sd	ra,40(sp)
   2d7fc:	02813023          	sd	s0,32(sp)
   2d800:	00050593          	addi	a1,a0,0
   2d804:	06800613          	addi	a2,zero,104
   2d808:	00810413          	addi	s0,sp,8
   2d80c:	00040513          	addi	a0,s0,0
   2d810:	820f10ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d814:	00040513          	addi	a0,s0,0
   2d818:	b98f30ef          	jal	ra,20bb0 <dwarf::value::as_flag() const>
   2d81c:	02813083          	ld	ra,40(sp)
   2d820:	02013403          	ld	s0,32(sp)
   2d824:	03010113          	addi	sp,sp,48
   2d828:	00008067          	jalr	zero,0(ra)

000000000002d82c <dwarf::at_signature(dwarf::die const&)>:
AT_REFERENCE(signature); // XXX Computed might be useful
   2d82c:	fc010113          	addi	sp,sp,-64
   2d830:	02113c23          	sd	ra,56(sp)
   2d834:	02813823          	sd	s0,48(sp)
   2d838:	02913423          	sd	s1,40(sp)
   2d83c:	00050413          	addi	s0,a0,0
   2d840:	06900613          	addi	a2,zero,105
   2d844:	00810493          	addi	s1,sp,8
   2d848:	00048513          	addi	a0,s1,0
   2d84c:	fe5f00ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d850:	00048593          	addi	a1,s1,0
   2d854:	00040513          	addi	a0,s0,0
   2d858:	841f40ef          	jal	ra,22098 <dwarf::value::as_reference() const>
   2d85c:	00040513          	addi	a0,s0,0
   2d860:	03813083          	ld	ra,56(sp)
   2d864:	03013403          	ld	s0,48(sp)
   2d868:	02813483          	ld	s1,40(sp)
   2d86c:	04010113          	addi	sp,sp,64
   2d870:	00008067          	jalr	zero,0(ra)

000000000002d874 <dwarf::at_main_subprogram(dwarf::die const&)>:
AT_FLAG(main_subprogram);
   2d874:	fd010113          	addi	sp,sp,-48
   2d878:	02113423          	sd	ra,40(sp)
   2d87c:	02813023          	sd	s0,32(sp)
   2d880:	00050593          	addi	a1,a0,0
   2d884:	06a00613          	addi	a2,zero,106
   2d888:	00810413          	addi	s0,sp,8
   2d88c:	00040513          	addi	a0,s0,0
   2d890:	fa1f00ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d894:	00040513          	addi	a0,s0,0
   2d898:	b18f30ef          	jal	ra,20bb0 <dwarf::value::as_flag() const>
   2d89c:	02813083          	ld	ra,40(sp)
   2d8a0:	02013403          	ld	s0,32(sp)
   2d8a4:	03010113          	addi	sp,sp,48
   2d8a8:	00008067          	jalr	zero,0(ra)

000000000002d8ac <dwarf::at_const_expr(dwarf::die const&)>:
// XXX const data_bit_offset
AT_FLAG(const_expr);
   2d8ac:	fd010113          	addi	sp,sp,-48
   2d8b0:	02113423          	sd	ra,40(sp)
   2d8b4:	02813023          	sd	s0,32(sp)
   2d8b8:	00050593          	addi	a1,a0,0
   2d8bc:	06c00613          	addi	a2,zero,108
   2d8c0:	00810413          	addi	s0,sp,8
   2d8c4:	00040513          	addi	a0,s0,0
   2d8c8:	f69f00ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d8cc:	00040513          	addi	a0,s0,0
   2d8d0:	ae0f30ef          	jal	ra,20bb0 <dwarf::value::as_flag() const>
   2d8d4:	02813083          	ld	ra,40(sp)
   2d8d8:	02013403          	ld	s0,32(sp)
   2d8dc:	03010113          	addi	sp,sp,48
   2d8e0:	00008067          	jalr	zero,0(ra)

000000000002d8e4 <dwarf::at_enum_class(dwarf::die const&)>:
AT_FLAG(enum_class);
   2d8e4:	fd010113          	addi	sp,sp,-48
   2d8e8:	02113423          	sd	ra,40(sp)
   2d8ec:	02813023          	sd	s0,32(sp)
   2d8f0:	00050593          	addi	a1,a0,0
   2d8f4:	06d00613          	addi	a2,zero,109
   2d8f8:	00810413          	addi	s0,sp,8
   2d8fc:	00040513          	addi	a0,s0,0
   2d900:	f31f00ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d904:	00040513          	addi	a0,s0,0
   2d908:	aa8f30ef          	jal	ra,20bb0 <dwarf::value::as_flag() const>
   2d90c:	02813083          	ld	ra,40(sp)
   2d910:	02013403          	ld	s0,32(sp)
   2d914:	03010113          	addi	sp,sp,48
   2d918:	00008067          	jalr	zero,0(ra)

000000000002d91c <dwarf::at_linkage_name[abi:cxx11](dwarf::die const&)>:
AT_STRING(linkage_name);
   2d91c:	fc010113          	addi	sp,sp,-64
   2d920:	02113c23          	sd	ra,56(sp)
   2d924:	02813823          	sd	s0,48(sp)
   2d928:	02913423          	sd	s1,40(sp)
   2d92c:	00050413          	addi	s0,a0,0
   2d930:	06e00613          	addi	a2,zero,110
   2d934:	00810493          	addi	s1,sp,8
   2d938:	00048513          	addi	a0,s1,0
   2d93c:	ef5f00ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
   2d940:	00048593          	addi	a1,s1,0
   2d944:	00040513          	addi	a0,s0,0
   2d948:	ee4f40ef          	jal	ra,2202c <dwarf::value::as_string[abi:cxx11]() const>
   2d94c:	00040513          	addi	a0,s0,0
   2d950:	03813083          	ld	ra,56(sp)
   2d954:	03013403          	ld	s0,48(sp)
   2d958:	02813483          	ld	s1,40(sp)
   2d95c:	04010113          	addi	sp,sp,64
   2d960:	00008067          	jalr	zero,0(ra)

000000000002d964 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>:
                             int depth = 0) {
   2d964:	ed010113          	addi	sp,sp,-304
   2d968:	12113423          	sd	ra,296(sp)
   2d96c:	12813023          	sd	s0,288(sp)
   2d970:	10913c23          	sd	s1,280(sp)
   2d974:	11213823          	sd	s2,272(sp)
   2d978:	11313423          	sd	s3,264(sp)
   2d97c:	00050413          	addi	s0,a0,0
  if (depth > 16)
   2d980:	01000793          	addi	a5,zero,16
   2d984:	04d7cc63          	blt	a5,a3,2d9dc <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x78>
   2d988:	00060913          	addi	s2,a2,0
   2d98c:	00068493          	addi	s1,a3,0
  value v(d[attr]);
   2d990:	00050613          	addi	a2,a0,0
   2d994:	0d010513          	addi	a0,sp,208
   2d998:	e99f00ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
  type get_type() const { return typ; }
   2d99c:	0dc12783          	lw	a5,220(sp)
  switch (v.get_type()) {
   2d9a0:	00600713          	addi	a4,zero,6
   2d9a4:	12e78a63          	beq	a5,a4,2dad8 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x174>
   2d9a8:	0cf75263          	bge	a4,a5,2da6c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x108>
   2d9ac:	00c00713          	addi	a4,zero,12
   2d9b0:	14e79863          	bne	a5,a4,2db00 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x19c>
    return _at_udynamic(attr, v.as_reference(), ctx, depth + 1);
   2d9b4:	0d010593          	addi	a1,sp,208
   2d9b8:	06010993          	addi	s3,sp,96
   2d9bc:	00098513          	addi	a0,s3,0
   2d9c0:	ed8f40ef          	jal	ra,22098 <dwarf::value::as_reference() const>
   2d9c4:	0014869b          	addiw	a3,s1,1
   2d9c8:	00090613          	addi	a2,s2,0
   2d9cc:	00098593          	addi	a1,s3,0
   2d9d0:	00040513          	addi	a0,s0,0
   2d9d4:	f91ff0ef          	jal	ra,2d964 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2d9d8:	0cc0006f          	jal	zero,2daa4 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x140>
    throw format_error("reference depth exceeded for " + to_string(attr));
   2d9dc:	01000513          	addi	a0,zero,16
   2d9e0:	cb1e80ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2d9e4:	00050493          	addi	s1,a0,0
   2d9e8:	00040593          	addi	a1,s0,0
   2d9ec:	04010513          	addi	a0,sp,64
   2d9f0:	341040ef          	jal	ra,32530 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__rhs.insert(0, __lhs)); }
   2d9f4:	0000b617          	auipc	a2,0xb
   2d9f8:	19c60613          	addi	a2,a2,412 # 38b90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb0>
   2d9fc:	00000593          	addi	a1,zero,0
   2da00:	04010513          	addi	a0,sp,64
   2da04:	bfde80ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2da08:	00050593          	addi	a1,a0,0
   2da0c:	06010413          	addi	s0,sp,96
   2da10:	00040513          	addi	a0,s0,0
   2da14:	cbde80ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   2da18:	00040593          	addi	a1,s0,0
   2da1c:	00048513          	addi	a0,s1,0
   2da20:	e11e80ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2da24:	00016797          	auipc	a5,0x16
   2da28:	b4c7b783          	ld	a5,-1204(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   2da2c:	01078793          	addi	a5,a5,16
   2da30:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   2da34:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   2da38:	07010793          	addi	a5,sp,112
   2da3c:	00f50463          	beq	a0,a5,2da44 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xe0>
   2da40:	d61e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2da44:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2da48:	05010793          	addi	a5,sp,80
   2da4c:	00f50463          	beq	a0,a5,2da54 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xf0>
   2da50:	d51e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2da54:	00016617          	auipc	a2,0x16
   2da58:	94463603          	ld	a2,-1724(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   2da5c:	00016597          	auipc	a1,0x16
   2da60:	86c5b583          	ld	a1,-1940(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   2da64:	00048513          	addi	a0,s1,0
   2da68:	ef9e80ef          	jal	ra,16960 <__cxa_throw@plt>
  switch (v.get_type()) {
   2da6c:	ffd7879b          	addiw	a5,a5,-3
   2da70:	00100713          	addi	a4,zero,1
   2da74:	08f76663          	bltu	a4,a5,2db00 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x19c>
    return v.as_uconstant();
   2da78:	0d010513          	addi	a0,sp,208
   2da7c:	94cf20ef          	jal	ra,1fbc8 <dwarf::value::as_uconstant() const>
   2da80:	00050413          	addi	s0,a0,0
}
   2da84:	00040513          	addi	a0,s0,0
   2da88:	12813083          	ld	ra,296(sp)
   2da8c:	12013403          	ld	s0,288(sp)
   2da90:	11813483          	ld	s1,280(sp)
   2da94:	11013903          	ld	s2,272(sp)
   2da98:	10813983          	ld	s3,264(sp)
   2da9c:	13010113          	addi	sp,sp,304
   2daa0:	00008067          	jalr	zero,0(ra)
    return _at_udynamic(attr, v.as_reference(), ctx, depth + 1);
   2daa4:	00050413          	addi	s0,a0,0
    for (T *p = base; p < end; ++p)
   2daa8:	0b013503          	ld	a0,176(sp)
   2daac:	0b813783          	ld	a5,184(sp)
   2dab0:	00f57a63          	bgeu	a0,a5,2dac4 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x160>
   2dab4:	00050793          	addi	a5,a0,0
   2dab8:	00878793          	addi	a5,a5,8
   2dabc:	0b813703          	ld	a4,184(sp)
   2dac0:	fee7ece3          	bltu	a5,a4,2dab8 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x154>
    if ((char *)base != buf)
   2dac4:	08010793          	addi	a5,sp,128
   2dac8:	faf50ee3          	beq	a0,a5,2da84 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x120>
      delete[] (char *)base;
   2dacc:	fa050ce3          	beq	a0,zero,2da84 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x120>
   2dad0:	d81e80ef          	jal	ra,16850 <operator delete[](void*)@plt>
   2dad4:	fb1ff06f          	jal	zero,2da84 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x120>
    return v.as_exprloc().evaluate(ctx).value;
   2dad8:	0d010593          	addi	a1,sp,208
   2dadc:	0e810413          	addi	s0,sp,232
   2dae0:	00040513          	addi	a0,s0,0
   2dae4:	ba9f20ef          	jal	ra,2068c <dwarf::value::as_exprloc() const>
   2dae8:	00090613          	addi	a2,s2,0
   2daec:	00040593          	addi	a1,s0,0
   2daf0:	06010513          	addi	a0,sp,96
   2daf4:	921f90ef          	jal	ra,27414 <dwarf::expr::evaluate(dwarf::expr_context*) const>
   2daf8:	06813403          	ld	s0,104(sp)
   2dafc:	f89ff06f          	jal	zero,2da84 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x120>
                       to_string(v.get_type()));
   2db00:	01000513          	addi	a0,zero,16
   2db04:	b8de80ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2db08:	00050493          	addi	s1,a0,0
    throw format_error(to_string(attr) + " has unexpected type " +
   2db0c:	00040593          	addi	a1,s0,0
   2db10:	00010513          	addi	a0,sp,0
   2db14:	21d040ef          	jal	ra,32530 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__lhs.append(__rhs)); }
   2db18:	0000b597          	auipc	a1,0xb
   2db1c:	09858593          	addi	a1,a1,152 # 38bb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd0>
   2db20:	00010513          	addi	a0,sp,0
   2db24:	f1de80ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   2db28:	00050593          	addi	a1,a0,0
   2db2c:	02010513          	addi	a0,sp,32
   2db30:	ba1e80ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                       to_string(v.get_type()));
   2db34:	0dc12583          	lw	a1,220(sp)
   2db38:	04010513          	addi	a0,sp,64
   2db3c:	134020ef          	jal	ra,2fc70 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    throw format_error(to_string(attr) + " has unexpected type " +
   2db40:	04010613          	addi	a2,sp,64
   2db44:	02010593          	addi	a1,sp,32
   2db48:	06010513          	addi	a0,sp,96
   2db4c:	00016317          	auipc	t1,0x16
   2db50:	88c33303          	ld	t1,-1908(t1) # 433d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17eb8>
   2db54:	000300e7          	jalr	ra,0(t1)
   2db58:	06010593          	addi	a1,sp,96
   2db5c:	00048513          	addi	a0,s1,0
   2db60:	cd1e80ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2db64:	00016797          	auipc	a5,0x16
   2db68:	a0c7b783          	ld	a5,-1524(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   2db6c:	01078793          	addi	a5,a5,16
   2db70:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   2db74:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   2db78:	07010793          	addi	a5,sp,112
   2db7c:	00f50463          	beq	a0,a5,2db84 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x220>
   2db80:	c21e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2db84:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2db88:	05010793          	addi	a5,sp,80
   2db8c:	00f50463          	beq	a0,a5,2db94 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x230>
   2db90:	c11e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2db94:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2db98:	03010793          	addi	a5,sp,48
   2db9c:	00f50463          	beq	a0,a5,2dba4 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x240>
   2dba0:	c01e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2dba4:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2dba8:	01010793          	addi	a5,sp,16
   2dbac:	00f50463          	beq	a0,a5,2dbb4 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x250>
   2dbb0:	bf1e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   2dbb4:	00015617          	auipc	a2,0x15
   2dbb8:	7e463603          	ld	a2,2020(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   2dbbc:	00015597          	auipc	a1,0x15
   2dbc0:	70c5b583          	ld	a1,1804(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   2dbc4:	00048513          	addi	a0,s1,0
   2dbc8:	d99e80ef          	jal	ra,16960 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   2dbcc:	00050413          	addi	s0,a0,0
   2dbd0:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   2dbd4:	07010793          	addi	a5,sp,112
   2dbd8:	00f50463          	beq	a0,a5,2dbe0 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x27c>
   2dbdc:	bc5e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2dbe0:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2dbe4:	05010793          	addi	a5,sp,80
   2dbe8:	00f50463          	beq	a0,a5,2dbf0 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x28c>
   2dbec:	bb5e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
    throw format_error("reference depth exceeded for " + to_string(attr));
   2dbf0:	00048513          	addi	a0,s1,0
   2dbf4:	b5de80ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2dbf8:	00040513          	addi	a0,s0,0
   2dbfc:	d95e80ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2dc00:	00050413          	addi	s0,a0,0
   2dc04:	fddff06f          	jal	zero,2dbe0 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x27c>
   2dc08:	00050413          	addi	s0,a0,0
   2dc0c:	fe5ff06f          	jal	zero,2dbf0 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x28c>
    for (T *p = base; p < end; ++p)
   2dc10:	00050413          	addi	s0,a0,0
   2dc14:	0b013503          	ld	a0,176(sp)
   2dc18:	00050793          	addi	a5,a0,0
   2dc1c:	0b813703          	ld	a4,184(sp)
   2dc20:	00e7ee63          	bltu	a5,a4,2dc3c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x2d8>
    if ((char *)base != buf)
   2dc24:	08010793          	addi	a5,sp,128
   2dc28:	00f50663          	beq	a0,a5,2dc34 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x2d0>
      delete[] (char *)base;
   2dc2c:	00050463          	beq	a0,zero,2dc34 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x2d0>
   2dc30:	c21e80ef          	jal	ra,16850 <operator delete[](void*)@plt>
   2dc34:	00040513          	addi	a0,s0,0
   2dc38:	d59e80ef          	jal	ra,16990 <_Unwind_Resume@plt>
    for (T *p = base; p < end; ++p)
   2dc3c:	00878793          	addi	a5,a5,8
   2dc40:	fddff06f          	jal	zero,2dc1c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x2b8>
   2dc44:	00050413          	addi	s0,a0,0
   2dc48:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   2dc4c:	07010793          	addi	a5,sp,112
   2dc50:	00f50463          	beq	a0,a5,2dc58 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x2f4>
   2dc54:	b4de80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2dc58:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2dc5c:	05010793          	addi	a5,sp,80
   2dc60:	00f50463          	beq	a0,a5,2dc68 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x304>
   2dc64:	b3de80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2dc68:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2dc6c:	03010793          	addi	a5,sp,48
   2dc70:	00f50463          	beq	a0,a5,2dc78 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x314>
   2dc74:	b2de80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2dc78:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2dc7c:	01010793          	addi	a5,sp,16
   2dc80:	00f50463          	beq	a0,a5,2dc88 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x324>
   2dc84:	b1de80ef          	jal	ra,167a0 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   2dc88:	00048513          	addi	a0,s1,0
   2dc8c:	ac5e80ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2dc90:	00040513          	addi	a0,s0,0
   2dc94:	cfde80ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2dc98:	00050413          	addi	s0,a0,0
   2dc9c:	fbdff06f          	jal	zero,2dc58 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x2f4>
   2dca0:	00050413          	addi	s0,a0,0
   2dca4:	fc5ff06f          	jal	zero,2dc68 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x304>
   2dca8:	00050413          	addi	s0,a0,0
   2dcac:	fcdff06f          	jal	zero,2dc78 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x314>
   2dcb0:	00050413          	addi	s0,a0,0
   2dcb4:	fd5ff06f          	jal	zero,2dc88 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x324>

000000000002dcb8 <dwarf::at_byte_size(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(byte_size);
   2dcb8:	ff010113          	addi	sp,sp,-16
   2dcbc:	00113423          	sd	ra,8(sp)
   2dcc0:	00058613          	addi	a2,a1,0
   2dcc4:	00000693          	addi	a3,zero,0
   2dcc8:	00050593          	addi	a1,a0,0
   2dccc:	00b00513          	addi	a0,zero,11
   2dcd0:	c95ff0ef          	jal	ra,2d964 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2dcd4:	00813083          	ld	ra,8(sp)
   2dcd8:	01010113          	addi	sp,sp,16
   2dcdc:	00008067          	jalr	zero,0(ra)

000000000002dce0 <dwarf::at_bit_offset(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(bit_offset);
   2dce0:	ff010113          	addi	sp,sp,-16
   2dce4:	00113423          	sd	ra,8(sp)
   2dce8:	00058613          	addi	a2,a1,0
   2dcec:	00000693          	addi	a3,zero,0
   2dcf0:	00050593          	addi	a1,a0,0
   2dcf4:	00c00513          	addi	a0,zero,12
   2dcf8:	c6dff0ef          	jal	ra,2d964 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2dcfc:	00813083          	ld	ra,8(sp)
   2dd00:	01010113          	addi	sp,sp,16
   2dd04:	00008067          	jalr	zero,0(ra)

000000000002dd08 <dwarf::at_bit_size(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(bit_size);
   2dd08:	ff010113          	addi	sp,sp,-16
   2dd0c:	00113423          	sd	ra,8(sp)
   2dd10:	00058613          	addi	a2,a1,0
   2dd14:	00000693          	addi	a3,zero,0
   2dd18:	00050593          	addi	a1,a0,0
   2dd1c:	00d00513          	addi	a0,zero,13
   2dd20:	c45ff0ef          	jal	ra,2d964 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2dd24:	00813083          	ld	ra,8(sp)
   2dd28:	01010113          	addi	sp,sp,16
   2dd2c:	00008067          	jalr	zero,0(ra)

000000000002dd30 <dwarf::at_lower_bound(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(lower_bound); // XXX Language-based default?
   2dd30:	ff010113          	addi	sp,sp,-16
   2dd34:	00113423          	sd	ra,8(sp)
   2dd38:	00058613          	addi	a2,a1,0
   2dd3c:	00000693          	addi	a3,zero,0
   2dd40:	00050593          	addi	a1,a0,0
   2dd44:	02200513          	addi	a0,zero,34
   2dd48:	c1dff0ef          	jal	ra,2d964 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2dd4c:	00813083          	ld	ra,8(sp)
   2dd50:	01010113          	addi	sp,sp,16
   2dd54:	00008067          	jalr	zero,0(ra)

000000000002dd58 <dwarf::at_bit_stride(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(bit_stride);
   2dd58:	ff010113          	addi	sp,sp,-16
   2dd5c:	00113423          	sd	ra,8(sp)
   2dd60:	00058613          	addi	a2,a1,0
   2dd64:	00000693          	addi	a3,zero,0
   2dd68:	00050593          	addi	a1,a0,0
   2dd6c:	02e00513          	addi	a0,zero,46
   2dd70:	bf5ff0ef          	jal	ra,2d964 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2dd74:	00813083          	ld	ra,8(sp)
   2dd78:	01010113          	addi	sp,sp,16
   2dd7c:	00008067          	jalr	zero,0(ra)

000000000002dd80 <dwarf::at_upper_bound(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(upper_bound);
   2dd80:	ff010113          	addi	sp,sp,-16
   2dd84:	00113423          	sd	ra,8(sp)
   2dd88:	00058613          	addi	a2,a1,0
   2dd8c:	00000693          	addi	a3,zero,0
   2dd90:	00050593          	addi	a1,a0,0
   2dd94:	02f00513          	addi	a0,zero,47
   2dd98:	bcdff0ef          	jal	ra,2d964 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2dd9c:	00813083          	ld	ra,8(sp)
   2dda0:	01010113          	addi	sp,sp,16
   2dda4:	00008067          	jalr	zero,0(ra)

000000000002dda8 <dwarf::at_count(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(count);
   2dda8:	ff010113          	addi	sp,sp,-16
   2ddac:	00113423          	sd	ra,8(sp)
   2ddb0:	00058613          	addi	a2,a1,0
   2ddb4:	00000693          	addi	a3,zero,0
   2ddb8:	00050593          	addi	a1,a0,0
   2ddbc:	03700513          	addi	a0,zero,55
   2ddc0:	ba5ff0ef          	jal	ra,2d964 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2ddc4:	00813083          	ld	ra,8(sp)
   2ddc8:	01010113          	addi	sp,sp,16
   2ddcc:	00008067          	jalr	zero,0(ra)

000000000002ddd0 <dwarf::at_allocated(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(allocated);
   2ddd0:	ff010113          	addi	sp,sp,-16
   2ddd4:	00113423          	sd	ra,8(sp)
   2ddd8:	00058613          	addi	a2,a1,0
   2dddc:	00000693          	addi	a3,zero,0
   2dde0:	00050593          	addi	a1,a0,0
   2dde4:	04e00513          	addi	a0,zero,78
   2dde8:	b7dff0ef          	jal	ra,2d964 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2ddec:	00813083          	ld	ra,8(sp)
   2ddf0:	01010113          	addi	sp,sp,16
   2ddf4:	00008067          	jalr	zero,0(ra)

000000000002ddf8 <dwarf::at_associated(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(associated);
   2ddf8:	ff010113          	addi	sp,sp,-16
   2ddfc:	00113423          	sd	ra,8(sp)
   2de00:	00058613          	addi	a2,a1,0
   2de04:	00000693          	addi	a3,zero,0
   2de08:	00050593          	addi	a1,a0,0
   2de0c:	04f00513          	addi	a0,zero,79
   2de10:	b55ff0ef          	jal	ra,2d964 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2de14:	00813083          	ld	ra,8(sp)
   2de18:	01010113          	addi	sp,sp,16
   2de1c:	00008067          	jalr	zero,0(ra)

000000000002de20 <dwarf::at_byte_stride(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(byte_stride);
   2de20:	ff010113          	addi	sp,sp,-16
   2de24:	00113423          	sd	ra,8(sp)
   2de28:	00058613          	addi	a2,a1,0
   2de2c:	00000693          	addi	a3,zero,0
   2de30:	00050593          	addi	a1,a0,0
   2de34:	05100513          	addi	a0,zero,81
   2de38:	b2dff0ef          	jal	ra,2d964 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2de3c:	00813083          	ld	ra,8(sp)
   2de40:	01010113          	addi	sp,sp,16
   2de44:	00008067          	jalr	zero,0(ra)

000000000002de48 <dwarf::at_high_pc(dwarf::die const&)>:
taddr at_high_pc(const die &d) {
   2de48:	f4010113          	addi	sp,sp,-192
   2de4c:	0a113c23          	sd	ra,184(sp)
   2de50:	0a813823          	sd	s0,176(sp)
   2de54:	0a913423          	sd	s1,168(sp)
   2de58:	00050413          	addi	s0,a0,0
  value v(d[DW_AT::high_pc]);
   2de5c:	01200613          	addi	a2,zero,18
   2de60:	00050593          	addi	a1,a0,0
   2de64:	08810513          	addi	a0,sp,136
   2de68:	9c9f00ef          	jal	ra,1e830 <dwarf::die::operator[](dwarf::DW_AT) const>
  type get_type() const { return typ; }
   2de6c:	09412783          	lw	a5,148(sp)
  switch (v.get_type()) {
   2de70:	00100713          	addi	a4,zero,1
   2de74:	02e78c63          	beq	a5,a4,2deac <dwarf::at_high_pc(dwarf::die const&)+0x64>
   2de78:	ffd7879b          	addiw	a5,a5,-3
   2de7c:	02f76e63          	bltu	a4,a5,2deb8 <dwarf::at_high_pc(dwarf::die const&)+0x70>
    return at_low_pc(d) + v.as_uconstant();
   2de80:	00040513          	addi	a0,s0,0
   2de84:	d05fe0ef          	jal	ra,2cb88 <dwarf::at_low_pc(dwarf::die const&)>
   2de88:	00050413          	addi	s0,a0,0
   2de8c:	08810513          	addi	a0,sp,136
   2de90:	d39f10ef          	jal	ra,1fbc8 <dwarf::value::as_uconstant() const>
   2de94:	00a40533          	add	a0,s0,a0
}
   2de98:	0b813083          	ld	ra,184(sp)
   2de9c:	0b013403          	ld	s0,176(sp)
   2dea0:	0a813483          	ld	s1,168(sp)
   2dea4:	0c010113          	addi	sp,sp,192
   2dea8:	00008067          	jalr	zero,0(ra)
    return v.as_address();
   2deac:	08810513          	addi	a0,sp,136
   2deb0:	c90f10ef          	jal	ra,1f340 <dwarf::value::as_address() const>
   2deb4:	fe5ff06f          	jal	zero,2de98 <dwarf::at_high_pc(dwarf::die const&)+0x50>
                       to_string(v.get_type()));
   2deb8:	01000513          	addi	a0,zero,16
   2debc:	fd4e80ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   2dec0:	00050493          	addi	s1,a0,0
    throw format_error(to_string(DW_AT::high_pc) + " has unexpected type " +
   2dec4:	01200593          	addi	a1,zero,18
   2dec8:	00810513          	addi	a0,sp,8
   2decc:	664040ef          	jal	ra,32530 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__lhs.append(__rhs)); }
   2ded0:	0000b597          	auipc	a1,0xb
   2ded4:	ce058593          	addi	a1,a1,-800 # 38bb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd0>
   2ded8:	00810513          	addi	a0,sp,8
   2dedc:	b65e80ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   2dee0:	00050593          	addi	a1,a0,0
   2dee4:	02810513          	addi	a0,sp,40
   2dee8:	fe8e80ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                       to_string(v.get_type()));
   2deec:	09412583          	lw	a1,148(sp)
   2def0:	04810513          	addi	a0,sp,72
   2def4:	57d010ef          	jal	ra,2fc70 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    throw format_error(to_string(DW_AT::high_pc) + " has unexpected type " +
   2def8:	04810613          	addi	a2,sp,72
   2defc:	02810593          	addi	a1,sp,40
   2df00:	06810513          	addi	a0,sp,104
   2df04:	00015317          	auipc	t1,0x15
   2df08:	4d433303          	ld	t1,1236(t1) # 433d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17eb8>
   2df0c:	000300e7          	jalr	ra,0(t1)
      : std::runtime_error(what_arg) {}
   2df10:	06810593          	addi	a1,sp,104
   2df14:	00048513          	addi	a0,s1,0
   2df18:	919e80ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2df1c:	00015797          	auipc	a5,0x15
   2df20:	6547b783          	ld	a5,1620(a5) # 43570 <vtable for dwarf::format_error@@Base+0xc68>
   2df24:	01078793          	addi	a5,a5,16
   2df28:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   2df2c:	06813503          	ld	a0,104(sp)
	if (!_M_is_local())
   2df30:	07810793          	addi	a5,sp,120
   2df34:	00f50463          	beq	a0,a5,2df3c <dwarf::at_high_pc(dwarf::die const&)+0xf4>
   2df38:	869e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2df3c:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   2df40:	05810793          	addi	a5,sp,88
   2df44:	00f50463          	beq	a0,a5,2df4c <dwarf::at_high_pc(dwarf::die const&)+0x104>
   2df48:	859e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2df4c:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   2df50:	03810793          	addi	a5,sp,56
   2df54:	00f50463          	beq	a0,a5,2df5c <dwarf::at_high_pc(dwarf::die const&)+0x114>
   2df58:	849e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2df5c:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   2df60:	01810793          	addi	a5,sp,24
   2df64:	00f50463          	beq	a0,a5,2df6c <dwarf::at_high_pc(dwarf::die const&)+0x124>
   2df68:	839e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   2df6c:	00015617          	auipc	a2,0x15
   2df70:	42c63603          	ld	a2,1068(a2) # 43398 <dwarf::format_error::~format_error()@@Base+0x27a48>
   2df74:	00015597          	auipc	a1,0x15
   2df78:	3545b583          	ld	a1,852(a1) # 432c8 <typeinfo for dwarf::format_error@@Base+0xa60>
   2df7c:	00048513          	addi	a0,s1,0
   2df80:	9e1e80ef          	jal	ra,16960 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   2df84:	00050413          	addi	s0,a0,0
   2df88:	06813503          	ld	a0,104(sp)
	if (!_M_is_local())
   2df8c:	07810793          	addi	a5,sp,120
   2df90:	00f50463          	beq	a0,a5,2df98 <dwarf::at_high_pc(dwarf::die const&)+0x150>
   2df94:	80de80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2df98:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   2df9c:	05810793          	addi	a5,sp,88
   2dfa0:	00f50463          	beq	a0,a5,2dfa8 <dwarf::at_high_pc(dwarf::die const&)+0x160>
   2dfa4:	ffce80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2dfa8:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   2dfac:	03810793          	addi	a5,sp,56
   2dfb0:	00f50463          	beq	a0,a5,2dfb8 <dwarf::at_high_pc(dwarf::die const&)+0x170>
   2dfb4:	fece80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2dfb8:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   2dfbc:	01810793          	addi	a5,sp,24
   2dfc0:	00f50463          	beq	a0,a5,2dfc8 <dwarf::at_high_pc(dwarf::die const&)+0x180>
   2dfc4:	fdce80ef          	jal	ra,167a0 <operator delete(void*)@plt>
   2dfc8:	00048513          	addi	a0,s1,0
   2dfcc:	f84e80ef          	jal	ra,16750 <__cxa_free_exception@plt>
   2dfd0:	00040513          	addi	a0,s0,0
   2dfd4:	9bde80ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2dfd8:	00050413          	addi	s0,a0,0
   2dfdc:	fbdff06f          	jal	zero,2df98 <dwarf::at_high_pc(dwarf::die const&)+0x150>
   2dfe0:	00050413          	addi	s0,a0,0
   2dfe4:	fc5ff06f          	jal	zero,2dfa8 <dwarf::at_high_pc(dwarf::die const&)+0x160>
   2dfe8:	00050413          	addi	s0,a0,0
   2dfec:	fcdff06f          	jal	zero,2dfb8 <dwarf::at_high_pc(dwarf::die const&)+0x170>
   2dff0:	00050413          	addi	s0,a0,0
   2dff4:	fd5ff06f          	jal	zero,2dfc8 <dwarf::at_high_pc(dwarf::die const&)+0x180>

000000000002dff8 <dwarf::die_pc_range(dwarf::die const&)>:

rangelist die_pc_range(const die &d) {
   2dff8:	fc010113          	addi	sp,sp,-64
   2dffc:	02113c23          	sd	ra,56(sp)
   2e000:	02813823          	sd	s0,48(sp)
   2e004:	02913423          	sd	s1,40(sp)
   2e008:	03213023          	sd	s2,32(sp)
   2e00c:	00050493          	addi	s1,a0,0
   2e010:	00058413          	addi	s0,a1,0
  // DWARF4 section 2.17
  if (d.has(DW_AT::ranges))
   2e014:	05500593          	addi	a1,zero,85
   2e018:	00040513          	addi	a0,s0,0
   2e01c:	fd0f00ef          	jal	ra,1e7ec <dwarf::die::has(dwarf::DW_AT) const>
   2e020:	02050663          	beq	a0,zero,2e04c <dwarf::die_pc_range(dwarf::die const&)+0x54>
    return at_ranges(d);
   2e024:	00040593          	addi	a1,s0,0
   2e028:	00048513          	addi	a0,s1,0
   2e02c:	d0cff0ef          	jal	ra,2d538 <dwarf::at_ranges(dwarf::die const&)>
  taddr low = at_low_pc(d);
  taddr high = d.has(DW_AT::high_pc) ? at_high_pc(d) : (low + 1);
  return rangelist({{low, high}});
}
   2e030:	00048513          	addi	a0,s1,0
   2e034:	03813083          	ld	ra,56(sp)
   2e038:	03013403          	ld	s0,48(sp)
   2e03c:	02813483          	ld	s1,40(sp)
   2e040:	02013903          	ld	s2,32(sp)
   2e044:	04010113          	addi	sp,sp,64
   2e048:	00008067          	jalr	zero,0(ra)
  taddr low = at_low_pc(d);
   2e04c:	00040513          	addi	a0,s0,0
   2e050:	b39fe0ef          	jal	ra,2cb88 <dwarf::at_low_pc(dwarf::die const&)>
   2e054:	00050913          	addi	s2,a0,0
  taddr high = d.has(DW_AT::high_pc) ? at_high_pc(d) : (low + 1);
   2e058:	01200593          	addi	a1,zero,18
   2e05c:	00040513          	addi	a0,s0,0
   2e060:	f8cf00ef          	jal	ra,1e7ec <dwarf::die::has(dwarf::DW_AT) const>
   2e064:	00190793          	addi	a5,s2,1
   2e068:	02051663          	bne	a0,zero,2e094 <dwarf::die_pc_range(dwarf::die const&)+0x9c>
   2e06c:	01213823          	sd	s2,16(sp)
   2e070:	00f13c23          	sd	a5,24(sp)
  return rangelist({{low, high}});
   2e074:	01010793          	addi	a5,sp,16
   2e078:	00f13023          	sd	a5,0(sp)
   2e07c:	00100793          	addi	a5,zero,1
   2e080:	00f13423          	sd	a5,8(sp)
   2e084:	00010593          	addi	a1,sp,0
   2e088:	00048513          	addi	a0,s1,0
   2e08c:	ed5f90ef          	jal	ra,27f60 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)>
   2e090:	fa1ff06f          	jal	zero,2e030 <dwarf::die_pc_range(dwarf::die const&)+0x38>
  taddr high = d.has(DW_AT::high_pc) ? at_high_pc(d) : (low + 1);
   2e094:	00040513          	addi	a0,s0,0
   2e098:	db1ff0ef          	jal	ra,2de48 <dwarf::at_high_pc(dwarf::die const&)>
   2e09c:	00050793          	addi	a5,a0,0
   2e0a0:	fcdff06f          	jal	zero,2e06c <dwarf::die_pc_range(dwarf::die const&)+0x74>

000000000002e0a4 <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)>:
    {".debug_ranges", section_type::ranges},
    {".debug_str", section_type::str},
    {".debug_types", section_type::types},
};

bool elf::section_name_to_type(const char *name, section_type *out) {
   2e0a4:	fd010113          	addi	sp,sp,-48
   2e0a8:	02113423          	sd	ra,40(sp)
   2e0ac:	02813023          	sd	s0,32(sp)
   2e0b0:	00913c23          	sd	s1,24(sp)
   2e0b4:	01213823          	sd	s2,16(sp)
   2e0b8:	01313423          	sd	s3,8(sp)
   2e0bc:	00050493          	addi	s1,a0,0
   2e0c0:	00058993          	addi	s3,a1,0
  for (auto &sec : sections) {
   2e0c4:	00014417          	auipc	s0,0x14
   2e0c8:	5c440413          	addi	s0,s0,1476 # 42688 <dwarf::sections>
   2e0cc:	00014917          	auipc	s2,0x14
   2e0d0:	67c90913          	addi	s2,s2,1660 # 42748 <vtable for __cxxabiv1::__class_type_info@CXXABI_1.3>
    if (strcmp(sec.name, name) == 0) {
   2e0d4:	00048593          	addi	a1,s1,0
   2e0d8:	00043503          	ld	a0,0(s0)
   2e0dc:	cf4e80ef          	jal	ra,165d0 <strcmp@plt>
   2e0e0:	02050663          	beq	a0,zero,2e10c <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)+0x68>
  for (auto &sec : sections) {
   2e0e4:	01040413          	addi	s0,s0,16
   2e0e8:	ff2416e3          	bne	s0,s2,2e0d4 <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)+0x30>
      *out = sec.type;
      return true;
    }
  }
  return false;
   2e0ec:	00000513          	addi	a0,zero,0
}
   2e0f0:	02813083          	ld	ra,40(sp)
   2e0f4:	02013403          	ld	s0,32(sp)
   2e0f8:	01813483          	ld	s1,24(sp)
   2e0fc:	01013903          	ld	s2,16(sp)
   2e100:	00813983          	ld	s3,8(sp)
   2e104:	03010113          	addi	sp,sp,48
   2e108:	00008067          	jalr	zero,0(ra)
      *out = sec.type;
   2e10c:	00842783          	lw	a5,8(s0)
   2e110:	00f9a023          	sw	a5,0(s3)
      return true;
   2e114:	00100513          	addi	a0,zero,1
   2e118:	fd9ff06f          	jal	zero,2e0f0 <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)+0x4c>

000000000002e11c <dwarf::elf::section_type_to_name(dwarf::section_type)>:

const char *elf::section_type_to_name(section_type type) {
  for (auto &sec : sections) {
   2e11c:	00014797          	auipc	a5,0x14
   2e120:	56c78793          	addi	a5,a5,1388 # 42688 <dwarf::sections>
   2e124:	00014697          	auipc	a3,0x14
   2e128:	62468693          	addi	a3,a3,1572 # 42748 <vtable for __cxxabiv1::__class_type_info@CXXABI_1.3>
    if (sec.type == type)
   2e12c:	0087a703          	lw	a4,8(a5)
   2e130:	00a70a63          	beq	a4,a0,2e144 <dwarf::elf::section_type_to_name(dwarf::section_type)+0x28>
  for (auto &sec : sections) {
   2e134:	01078793          	addi	a5,a5,16
   2e138:	fed79ae3          	bne	a5,a3,2e12c <dwarf::elf::section_type_to_name(dwarf::section_type)+0x10>
      return sec.name;
  }
  return nullptr;
   2e13c:	00000513          	addi	a0,zero,0
}
   2e140:	00008067          	jalr	zero,0(ra)
      return sec.name;
   2e144:	0007b503          	ld	a0,0(a5)
   2e148:	00008067          	jalr	zero,0(ra)

000000000002e14c <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)>:
        return "(DW_ORD)0x" + to_hex((int)v);
}

std::string
to_string(DW_DSC v)
{
   2e14c:	fc010113          	addi	sp,sp,-64
   2e150:	02113c23          	sd	ra,56(sp)
   2e154:	02813823          	sd	s0,48(sp)
   2e158:	02913423          	sd	s1,40(sp)
   2e15c:	03213023          	sd	s2,32(sp)
   2e160:	00050413          	addi	s0,a0,0
        switch (v) {
   2e164:	04058063          	beq	a1,zero,2e1a4 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x58>
   2e168:	00100793          	addi	a5,zero,1
   2e16c:	06f58e63          	beq	a1,a5,2e1e8 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x9c>
        case DW_DSC::label: return "DW_DSC_label";
        case DW_DSC::range: return "DW_DSC_range";
        }
        return "(DW_DSC)0x" + to_hex((int)v);
   2e170:	00010493          	addi	s1,sp,0
   2e174:	00048513          	addi	a0,s1,0
   2e178:	00015317          	auipc	t1,0x15
   2e17c:	2b833303          	ld	t1,696(t1) # 43430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe24>
   2e180:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e184:	00a00713          	addi	a4,zero,10
   2e188:	0000b697          	auipc	a3,0xb
   2e18c:	b2068693          	addi	a3,a3,-1248 # 38ca8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c8>
   2e190:	00000613          	addi	a2,zero,0
   2e194:	00000593          	addi	a1,zero,0
   2e198:	00048513          	addi	a0,s1,0
   2e19c:	f64e80ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2e1a0:	0740006f          	jal	zero,2e214 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0xc8>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e1a4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e1a8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e1ac:	00000693          	addi	a3,zero,0
   2e1b0:	0000b617          	auipc	a2,0xb
   2e1b4:	ae460613          	addi	a2,a2,-1308 # 38c94 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b4>
   2e1b8:	0000b597          	auipc	a1,0xb
   2e1bc:	ad058593          	addi	a1,a1,-1328 # 38c88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a8>
   2e1c0:	00015317          	auipc	t1,0x15
   2e1c4:	16033303          	ld	t1,352(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2e1c8:	000300e7          	jalr	ra,0(t1)
}
   2e1cc:	00040513          	addi	a0,s0,0
   2e1d0:	03813083          	ld	ra,56(sp)
   2e1d4:	03013403          	ld	s0,48(sp)
   2e1d8:	02813483          	ld	s1,40(sp)
   2e1dc:	02013903          	ld	s2,32(sp)
   2e1e0:	04010113          	addi	sp,sp,64
   2e1e4:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e1e8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e1ec:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e1f0:	00000693          	addi	a3,zero,0
   2e1f4:	0000b617          	auipc	a2,0xb
   2e1f8:	ab060613          	addi	a2,a2,-1360 # 38ca4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c4>
   2e1fc:	0000b597          	auipc	a1,0xb
   2e200:	a9c58593          	addi	a1,a1,-1380 # 38c98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b8>
   2e204:	00015317          	auipc	t1,0x15
   2e208:	11c33303          	ld	t1,284(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2e20c:	000300e7          	jalr	ra,0(t1)
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2e210:	fbdff06f          	jal	zero,2e1cc <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x80>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e214:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e218:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2e21c:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2e220:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2e224:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2e228:	03278c63          	beq	a5,s2,2e260 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x114>
      { _M_dataplus._M_p = __p; }
   2e22c:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2e230:	0104b783          	ld	a5,16(s1)
   2e234:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2e238:	0084b783          	ld	a5,8(s1)
   2e23c:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2e240:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2e244:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2e248:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2e24c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e250:	01010793          	addi	a5,sp,16
   2e254:	f6f50ce3          	beq	a0,a5,2e1cc <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x80>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2e258:	d48e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2e25c:	f71ff06f          	jal	zero,2e1cc <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x80>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2e260:	0084b603          	ld	a2,8(s1)
   2e264:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2e268:	fc0608e3          	beq	a2,zero,2e238 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0xec>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2e26c:	00090593          	addi	a1,s2,0
   2e270:	dd0e80ef          	jal	ra,16840 <memcpy@plt>
   2e274:	fc5ff06f          	jal	zero,2e238 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0xec>
      { return _M_dataplus._M_p; }
   2e278:	00050413          	addi	s0,a0,0
   2e27c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e280:	01010793          	addi	a5,sp,16
   2e284:	00f50463          	beq	a0,a5,2e28c <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x140>
   2e288:	d18e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2e28c:	00040513          	addi	a0,s0,0
   2e290:	f00e80ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002e294 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)>:
{
   2e294:	fc010113          	addi	sp,sp,-64
   2e298:	02113c23          	sd	ra,56(sp)
   2e29c:	02813823          	sd	s0,48(sp)
   2e2a0:	02913423          	sd	s1,40(sp)
   2e2a4:	03213023          	sd	s2,32(sp)
   2e2a8:	00050413          	addi	s0,a0,0
        switch (v) {
   2e2ac:	04058063          	beq	a1,zero,2e2ec <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x58>
   2e2b0:	00100793          	addi	a5,zero,1
   2e2b4:	06f58e63          	beq	a1,a5,2e330 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x9c>
        return "(DW_ORD)0x" + to_hex((int)v);
   2e2b8:	00010493          	addi	s1,sp,0
   2e2bc:	00048513          	addi	a0,s1,0
   2e2c0:	00015317          	auipc	t1,0x15
   2e2c4:	17033303          	ld	t1,368(t1) # 43430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe24>
   2e2c8:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e2cc:	00a00713          	addi	a4,zero,10
   2e2d0:	0000b697          	auipc	a3,0xb
   2e2d4:	a1868693          	addi	a3,a3,-1512 # 38ce8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x208>
   2e2d8:	00000613          	addi	a2,zero,0
   2e2dc:	00000593          	addi	a1,zero,0
   2e2e0:	00048513          	addi	a0,s1,0
   2e2e4:	e1ce80ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2e2e8:	0740006f          	jal	zero,2e35c <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0xc8>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e2ec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e2f0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e2f4:	00000693          	addi	a3,zero,0
   2e2f8:	0000b617          	auipc	a2,0xb
   2e2fc:	9d060613          	addi	a2,a2,-1584 # 38cc8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e8>
   2e300:	0000b597          	auipc	a1,0xb
   2e304:	9b858593          	addi	a1,a1,-1608 # 38cb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d8>
   2e308:	00015317          	auipc	t1,0x15
   2e30c:	01833303          	ld	t1,24(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2e310:	000300e7          	jalr	ra,0(t1)
}
   2e314:	00040513          	addi	a0,s0,0
   2e318:	03813083          	ld	ra,56(sp)
   2e31c:	03013403          	ld	s0,48(sp)
   2e320:	02813483          	ld	s1,40(sp)
   2e324:	02013903          	ld	s2,32(sp)
   2e328:	04010113          	addi	sp,sp,64
   2e32c:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e330:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e334:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e338:	00000693          	addi	a3,zero,0
   2e33c:	0000b617          	auipc	a2,0xb
   2e340:	9a460613          	addi	a2,a2,-1628 # 38ce0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x200>
   2e344:	0000b597          	auipc	a1,0xb
   2e348:	98c58593          	addi	a1,a1,-1652 # 38cd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f0>
   2e34c:	00015317          	auipc	t1,0x15
   2e350:	fd433303          	ld	t1,-44(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2e354:	000300e7          	jalr	ra,0(t1)
   2e358:	fbdff06f          	jal	zero,2e314 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x80>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e35c:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e360:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2e364:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2e368:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2e36c:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2e370:	03278c63          	beq	a5,s2,2e3a8 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x114>
      { _M_dataplus._M_p = __p; }
   2e374:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2e378:	0104b783          	ld	a5,16(s1)
   2e37c:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2e380:	0084b783          	ld	a5,8(s1)
   2e384:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2e388:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2e38c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2e390:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2e394:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e398:	01010793          	addi	a5,sp,16
   2e39c:	f6f50ce3          	beq	a0,a5,2e314 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x80>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2e3a0:	c00e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2e3a4:	f71ff06f          	jal	zero,2e314 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x80>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2e3a8:	0084b603          	ld	a2,8(s1)
   2e3ac:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2e3b0:	fc0608e3          	beq	a2,zero,2e380 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0xec>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2e3b4:	00090593          	addi	a1,s2,0
   2e3b8:	c88e80ef          	jal	ra,16840 <memcpy@plt>
   2e3bc:	fc5ff06f          	jal	zero,2e380 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0xec>
      { return _M_dataplus._M_p; }
   2e3c0:	00050413          	addi	s0,a0,0
   2e3c4:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e3c8:	01010793          	addi	a5,sp,16
   2e3cc:	00f50463          	beq	a0,a5,2e3d4 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x140>
   2e3d0:	bd0e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2e3d4:	00040513          	addi	a0,s0,0
   2e3d8:	db8e80ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002e3dc <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)>:
{
   2e3dc:	fc010113          	addi	sp,sp,-64
   2e3e0:	02113c23          	sd	ra,56(sp)
   2e3e4:	02813823          	sd	s0,48(sp)
   2e3e8:	02913423          	sd	s1,40(sp)
   2e3ec:	03213023          	sd	s2,32(sp)
   2e3f0:	00050413          	addi	s0,a0,0
        switch (v) {
   2e3f4:	04058063          	beq	a1,zero,2e434 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x58>
   2e3f8:	00100793          	addi	a5,zero,1
   2e3fc:	06f58e63          	beq	a1,a5,2e478 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x9c>
        return "(DW_CHILDREN)0x" + to_hex((int)v);
   2e400:	00010493          	addi	s1,sp,0
   2e404:	00048513          	addi	a0,s1,0
   2e408:	00015317          	auipc	t1,0x15
   2e40c:	02833303          	ld	t1,40(t1) # 43430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe24>
   2e410:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e414:	00f00713          	addi	a4,zero,15
   2e418:	0000b697          	auipc	a3,0xb
   2e41c:	90068693          	addi	a3,a3,-1792 # 38d18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x238>
   2e420:	00000613          	addi	a2,zero,0
   2e424:	00000593          	addi	a1,zero,0
   2e428:	00048513          	addi	a0,s1,0
   2e42c:	cd4e80ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2e430:	0740006f          	jal	zero,2e4a4 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0xc8>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e434:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e438:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e43c:	00000693          	addi	a3,zero,0
   2e440:	0000b617          	auipc	a2,0xb
   2e444:	8c660613          	addi	a2,a2,-1850 # 38d06 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x226>
   2e448:	0000b597          	auipc	a1,0xb
   2e44c:	8b058593          	addi	a1,a1,-1872 # 38cf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x218>
   2e450:	00015317          	auipc	t1,0x15
   2e454:	ed033303          	ld	t1,-304(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2e458:	000300e7          	jalr	ra,0(t1)
}
   2e45c:	00040513          	addi	a0,s0,0
   2e460:	03813083          	ld	ra,56(sp)
   2e464:	03013403          	ld	s0,48(sp)
   2e468:	02813483          	ld	s1,40(sp)
   2e46c:	02013903          	ld	s2,32(sp)
   2e470:	04010113          	addi	sp,sp,64
   2e474:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e478:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e47c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e480:	00000693          	addi	a3,zero,0
   2e484:	0000b617          	auipc	a2,0xb
   2e488:	89360613          	addi	a2,a2,-1901 # 38d17 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x237>
   2e48c:	0000b597          	auipc	a1,0xb
   2e490:	87c58593          	addi	a1,a1,-1924 # 38d08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x228>
   2e494:	00015317          	auipc	t1,0x15
   2e498:	e8c33303          	ld	t1,-372(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2e49c:	000300e7          	jalr	ra,0(t1)
   2e4a0:	fbdff06f          	jal	zero,2e45c <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x80>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e4a4:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e4a8:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2e4ac:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2e4b0:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2e4b4:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2e4b8:	03278c63          	beq	a5,s2,2e4f0 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x114>
      { _M_dataplus._M_p = __p; }
   2e4bc:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2e4c0:	0104b783          	ld	a5,16(s1)
   2e4c4:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2e4c8:	0084b783          	ld	a5,8(s1)
   2e4cc:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2e4d0:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2e4d4:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2e4d8:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2e4dc:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e4e0:	01010793          	addi	a5,sp,16
   2e4e4:	f6f50ce3          	beq	a0,a5,2e45c <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x80>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2e4e8:	ab8e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2e4ec:	f71ff06f          	jal	zero,2e45c <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x80>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2e4f0:	0084b603          	ld	a2,8(s1)
   2e4f4:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2e4f8:	fc0608e3          	beq	a2,zero,2e4c8 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0xec>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2e4fc:	00090593          	addi	a1,s2,0
   2e500:	b40e80ef          	jal	ra,16840 <memcpy@plt>
   2e504:	fc5ff06f          	jal	zero,2e4c8 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0xec>
      { return _M_dataplus._M_p; }
   2e508:	00050413          	addi	s0,a0,0
   2e50c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e510:	01010793          	addi	a5,sp,16
   2e514:	00f50463          	beq	a0,a5,2e51c <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x140>
   2e518:	a88e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2e51c:	00040513          	addi	a0,s0,0
   2e520:	c70e80ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002e524 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)>:
{
   2e524:	fc010113          	addi	sp,sp,-64
   2e528:	02113c23          	sd	ra,56(sp)
   2e52c:	02813823          	sd	s0,48(sp)
   2e530:	02913423          	sd	s1,40(sp)
   2e534:	03213023          	sd	s2,32(sp)
   2e538:	00050413          	addi	s0,a0,0
        switch (v) {
   2e53c:	00200793          	addi	a5,zero,2
   2e540:	08f58663          	beq	a1,a5,2e5cc <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0xa8>
   2e544:	00300793          	addi	a5,zero,3
   2e548:	0af58863          	beq	a1,a5,2e5f8 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0xd4>
   2e54c:	00100793          	addi	a5,zero,1
   2e550:	02f58c63          	beq	a1,a5,2e588 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x64>
        return "(DW_ACCESS)0x" + to_hex((int)v);
   2e554:	00010493          	addi	s1,sp,0
   2e558:	00048513          	addi	a0,s1,0
   2e55c:	00015317          	auipc	t1,0x15
   2e560:	ed433303          	ld	t1,-300(t1) # 43430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe24>
   2e564:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e568:	00d00713          	addi	a4,zero,13
   2e56c:	0000b697          	auipc	a3,0xb
   2e570:	80468693          	addi	a3,a3,-2044 # 38d70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x290>
   2e574:	00000613          	addi	a2,zero,0
   2e578:	00000593          	addi	a1,zero,0
   2e57c:	00048513          	addi	a0,s1,0
   2e580:	b80e80ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2e584:	0a00006f          	jal	zero,2e624 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x100>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e588:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e58c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e590:	00000693          	addi	a3,zero,0
   2e594:	0000a617          	auipc	a2,0xa
   2e598:	7a460613          	addi	a2,a2,1956 # 38d38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x258>
   2e59c:	0000a597          	auipc	a1,0xa
   2e5a0:	78c58593          	addi	a1,a1,1932 # 38d28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x248>
   2e5a4:	00015317          	auipc	t1,0x15
   2e5a8:	d7c33303          	ld	t1,-644(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2e5ac:	000300e7          	jalr	ra,0(t1)
}
   2e5b0:	00040513          	addi	a0,s0,0
   2e5b4:	03813083          	ld	ra,56(sp)
   2e5b8:	03013403          	ld	s0,48(sp)
   2e5bc:	02813483          	ld	s1,40(sp)
   2e5c0:	02013903          	ld	s2,32(sp)
   2e5c4:	04010113          	addi	sp,sp,64
   2e5c8:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e5cc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e5d0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e5d4:	00000693          	addi	a3,zero,0
   2e5d8:	0000a617          	auipc	a2,0xa
   2e5dc:	77b60613          	addi	a2,a2,1915 # 38d53 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x273>
   2e5e0:	0000a597          	auipc	a1,0xa
   2e5e4:	76058593          	addi	a1,a1,1888 # 38d40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x260>
   2e5e8:	00015317          	auipc	t1,0x15
   2e5ec:	d3833303          	ld	t1,-712(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2e5f0:	000300e7          	jalr	ra,0(t1)
   2e5f4:	fbdff06f          	jal	zero,2e5b0 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x8c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e5f8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e5fc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e600:	00000693          	addi	a3,zero,0
   2e604:	0000a617          	auipc	a2,0xa
   2e608:	76560613          	addi	a2,a2,1893 # 38d69 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x289>
   2e60c:	0000a597          	auipc	a1,0xa
   2e610:	74c58593          	addi	a1,a1,1868 # 38d58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x278>
   2e614:	00015317          	auipc	t1,0x15
   2e618:	d0c33303          	ld	t1,-756(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2e61c:	000300e7          	jalr	ra,0(t1)
   2e620:	f91ff06f          	jal	zero,2e5b0 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x8c>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e624:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e628:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2e62c:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2e630:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2e634:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2e638:	03278c63          	beq	a5,s2,2e670 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x14c>
      { _M_dataplus._M_p = __p; }
   2e63c:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2e640:	0104b783          	ld	a5,16(s1)
   2e644:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2e648:	0084b783          	ld	a5,8(s1)
   2e64c:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2e650:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2e654:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2e658:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2e65c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e660:	01010793          	addi	a5,sp,16
   2e664:	f4f506e3          	beq	a0,a5,2e5b0 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x8c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2e668:	938e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2e66c:	f45ff06f          	jal	zero,2e5b0 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x8c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2e670:	0084b603          	ld	a2,8(s1)
   2e674:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2e678:	fc0608e3          	beq	a2,zero,2e648 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x124>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2e67c:	00090593          	addi	a1,s2,0
   2e680:	9c0e80ef          	jal	ra,16840 <memcpy@plt>
   2e684:	fc5ff06f          	jal	zero,2e648 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x124>
      { return _M_dataplus._M_p; }
   2e688:	00050413          	addi	s0,a0,0
   2e68c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e690:	01010793          	addi	a5,sp,16
   2e694:	00f50463          	beq	a0,a5,2e69c <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x178>
   2e698:	908e80ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2e69c:	00040513          	addi	a0,s0,0
   2e6a0:	af0e80ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002e6a4 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)>:
{
   2e6a4:	fc010113          	addi	sp,sp,-64
   2e6a8:	02113c23          	sd	ra,56(sp)
   2e6ac:	02813823          	sd	s0,48(sp)
   2e6b0:	02913423          	sd	s1,40(sp)
   2e6b4:	03213023          	sd	s2,32(sp)
   2e6b8:	00050413          	addi	s0,a0,0
        switch (v) {
   2e6bc:	00100793          	addi	a5,zero,1
   2e6c0:	08f58463          	beq	a1,a5,2e748 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0xa4>
   2e6c4:	00200793          	addi	a5,zero,2
   2e6c8:	0af58663          	beq	a1,a5,2e774 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0xd0>
   2e6cc:	02058c63          	beq	a1,zero,2e704 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x60>
        return "(DW_VIRTUALITY)0x" + to_hex((int)v);
   2e6d0:	00010493          	addi	s1,sp,0
   2e6d4:	00048513          	addi	a0,s1,0
   2e6d8:	00015317          	auipc	t1,0x15
   2e6dc:	d5833303          	ld	t1,-680(t1) # 43430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe24>
   2e6e0:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e6e4:	01100713          	addi	a4,zero,17
   2e6e8:	0000a697          	auipc	a3,0xa
   2e6ec:	6e868693          	addi	a3,a3,1768 # 38dd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2f0>
   2e6f0:	00000613          	addi	a2,zero,0
   2e6f4:	00000593          	addi	a1,zero,0
   2e6f8:	00048513          	addi	a0,s1,0
   2e6fc:	a04e80ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2e700:	0a00006f          	jal	zero,2e7a0 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0xfc>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e704:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e708:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e70c:	00000693          	addi	a3,zero,0
   2e710:	0000a617          	auipc	a2,0xa
   2e714:	68260613          	addi	a2,a2,1666 # 38d92 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2b2>
   2e718:	0000a597          	auipc	a1,0xa
   2e71c:	66858593          	addi	a1,a1,1640 # 38d80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2a0>
   2e720:	00015317          	auipc	t1,0x15
   2e724:	c0033303          	ld	t1,-1024(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2e728:	000300e7          	jalr	ra,0(t1)
}
   2e72c:	00040513          	addi	a0,s0,0
   2e730:	03813083          	ld	ra,56(sp)
   2e734:	03013403          	ld	s0,48(sp)
   2e738:	02813483          	ld	s1,40(sp)
   2e73c:	02013903          	ld	s2,32(sp)
   2e740:	04010113          	addi	sp,sp,64
   2e744:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e748:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e74c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e750:	00000693          	addi	a3,zero,0
   2e754:	0000a617          	auipc	a2,0xa
   2e758:	65960613          	addi	a2,a2,1625 # 38dad <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2cd>
   2e75c:	0000a597          	auipc	a1,0xa
   2e760:	63c58593          	addi	a1,a1,1596 # 38d98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2b8>
   2e764:	00015317          	auipc	t1,0x15
   2e768:	bbc33303          	ld	t1,-1092(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2e76c:	000300e7          	jalr	ra,0(t1)
   2e770:	fbdff06f          	jal	zero,2e72c <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x88>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e774:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e778:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e77c:	00000693          	addi	a3,zero,0
   2e780:	0000a617          	auipc	a2,0xa
   2e784:	64a60613          	addi	a2,a2,1610 # 38dca <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2ea>
   2e788:	0000a597          	auipc	a1,0xa
   2e78c:	62858593          	addi	a1,a1,1576 # 38db0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2d0>
   2e790:	00015317          	auipc	t1,0x15
   2e794:	b9033303          	ld	t1,-1136(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2e798:	000300e7          	jalr	ra,0(t1)
   2e79c:	f91ff06f          	jal	zero,2e72c <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x88>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e7a0:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e7a4:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2e7a8:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2e7ac:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2e7b0:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2e7b4:	03278c63          	beq	a5,s2,2e7ec <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x148>
      { _M_dataplus._M_p = __p; }
   2e7b8:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2e7bc:	0104b783          	ld	a5,16(s1)
   2e7c0:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2e7c4:	0084b783          	ld	a5,8(s1)
   2e7c8:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2e7cc:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2e7d0:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2e7d4:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2e7d8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e7dc:	01010793          	addi	a5,sp,16
   2e7e0:	f4f506e3          	beq	a0,a5,2e72c <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x88>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2e7e4:	fbde70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2e7e8:	f45ff06f          	jal	zero,2e72c <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x88>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2e7ec:	0084b603          	ld	a2,8(s1)
   2e7f0:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2e7f4:	fc0608e3          	beq	a2,zero,2e7c4 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x120>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2e7f8:	00090593          	addi	a1,s2,0
   2e7fc:	844e80ef          	jal	ra,16840 <memcpy@plt>
   2e800:	fc5ff06f          	jal	zero,2e7c4 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x120>
      { return _M_dataplus._M_p; }
   2e804:	00050413          	addi	s0,a0,0
   2e808:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e80c:	01010793          	addi	a5,sp,16
   2e810:	00f50463          	beq	a0,a5,2e818 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x174>
   2e814:	f8de70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2e818:	00040513          	addi	a0,s0,0
   2e81c:	974e80ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002e820 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)>:
{
   2e820:	fc010113          	addi	sp,sp,-64
   2e824:	02113c23          	sd	ra,56(sp)
   2e828:	02813823          	sd	s0,48(sp)
   2e82c:	02913423          	sd	s1,40(sp)
   2e830:	03213023          	sd	s2,32(sp)
   2e834:	00050413          	addi	s0,a0,0
        switch (v) {
   2e838:	00200793          	addi	a5,zero,2
   2e83c:	08f58663          	beq	a1,a5,2e8c8 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0xa8>
   2e840:	00300793          	addi	a5,zero,3
   2e844:	0af58863          	beq	a1,a5,2e8f4 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0xd4>
   2e848:	00100793          	addi	a5,zero,1
   2e84c:	02f58c63          	beq	a1,a5,2e884 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x64>
        return "(DW_CC)0x" + to_hex((int)v);
   2e850:	00010493          	addi	s1,sp,0
   2e854:	00048513          	addi	a0,s1,0
   2e858:	00015317          	auipc	t1,0x15
   2e85c:	bd833303          	ld	t1,-1064(t1) # 43430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe24>
   2e860:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e864:	00900713          	addi	a4,zero,9
   2e868:	0000a697          	auipc	a3,0xa
   2e86c:	5b068693          	addi	a3,a3,1456 # 38e18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x338>
   2e870:	00000613          	addi	a2,zero,0
   2e874:	00000593          	addi	a1,zero,0
   2e878:	00048513          	addi	a0,s1,0
   2e87c:	884e80ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2e880:	0a00006f          	jal	zero,2e920 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x100>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e884:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e888:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e88c:	00000693          	addi	a3,zero,0
   2e890:	0000a617          	auipc	a2,0xa
   2e894:	56460613          	addi	a2,a2,1380 # 38df4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x314>
   2e898:	0000a597          	auipc	a1,0xa
   2e89c:	55058593          	addi	a1,a1,1360 # 38de8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x308>
   2e8a0:	00015317          	auipc	t1,0x15
   2e8a4:	a8033303          	ld	t1,-1408(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2e8a8:	000300e7          	jalr	ra,0(t1)
}
   2e8ac:	00040513          	addi	a0,s0,0
   2e8b0:	03813083          	ld	ra,56(sp)
   2e8b4:	03013403          	ld	s0,48(sp)
   2e8b8:	02813483          	ld	s1,40(sp)
   2e8bc:	02013903          	ld	s2,32(sp)
   2e8c0:	04010113          	addi	sp,sp,64
   2e8c4:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e8c8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e8cc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e8d0:	00000693          	addi	a3,zero,0
   2e8d4:	0000a617          	auipc	a2,0xa
   2e8d8:	53160613          	addi	a2,a2,1329 # 38e05 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x325>
   2e8dc:	0000a597          	auipc	a1,0xa
   2e8e0:	51c58593          	addi	a1,a1,1308 # 38df8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x318>
   2e8e4:	00015317          	auipc	t1,0x15
   2e8e8:	a3c33303          	ld	t1,-1476(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2e8ec:	000300e7          	jalr	ra,0(t1)
   2e8f0:	fbdff06f          	jal	zero,2e8ac <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x8c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e8f4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e8f8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e8fc:	00000693          	addi	a3,zero,0
   2e900:	0000a617          	auipc	a2,0xa
   2e904:	51460613          	addi	a2,a2,1300 # 38e14 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x334>
   2e908:	0000a597          	auipc	a1,0xa
   2e90c:	50058593          	addi	a1,a1,1280 # 38e08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x328>
   2e910:	00015317          	auipc	t1,0x15
   2e914:	a1033303          	ld	t1,-1520(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2e918:	000300e7          	jalr	ra,0(t1)
   2e91c:	f91ff06f          	jal	zero,2e8ac <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x8c>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e920:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e924:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2e928:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2e92c:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2e930:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2e934:	03278c63          	beq	a5,s2,2e96c <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x14c>
      { _M_dataplus._M_p = __p; }
   2e938:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2e93c:	0104b783          	ld	a5,16(s1)
   2e940:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2e944:	0084b783          	ld	a5,8(s1)
   2e948:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2e94c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2e950:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2e954:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2e958:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e95c:	01010793          	addi	a5,sp,16
   2e960:	f4f506e3          	beq	a0,a5,2e8ac <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x8c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2e964:	e3de70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2e968:	f45ff06f          	jal	zero,2e8ac <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x8c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2e96c:	0084b603          	ld	a2,8(s1)
   2e970:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2e974:	fc0608e3          	beq	a2,zero,2e944 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x124>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2e978:	00090593          	addi	a1,s2,0
   2e97c:	ec5e70ef          	jal	ra,16840 <memcpy@plt>
   2e980:	fc5ff06f          	jal	zero,2e944 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x124>
      { return _M_dataplus._M_p; }
   2e984:	00050413          	addi	s0,a0,0
   2e988:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e98c:	01010793          	addi	a5,sp,16
   2e990:	00f50463          	beq	a0,a5,2e998 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x178>
   2e994:	e0de70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2e998:	00040513          	addi	a0,s0,0
   2e99c:	ff5e70ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002e9a0 <dwarf::to_string[abi:cxx11](dwarf::DW_END)>:
{
   2e9a0:	fc010113          	addi	sp,sp,-64
   2e9a4:	02113c23          	sd	ra,56(sp)
   2e9a8:	02813823          	sd	s0,48(sp)
   2e9ac:	02913423          	sd	s1,40(sp)
   2e9b0:	03213023          	sd	s2,32(sp)
   2e9b4:	00050413          	addi	s0,a0,0
        switch (v) {
   2e9b8:	00100793          	addi	a5,zero,1
   2e9bc:	08f58463          	beq	a1,a5,2ea44 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0xa4>
   2e9c0:	00200793          	addi	a5,zero,2
   2e9c4:	0af58663          	beq	a1,a5,2ea70 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0xd0>
   2e9c8:	02058c63          	beq	a1,zero,2ea00 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x60>
        return "(DW_END)0x" + to_hex((int)v);
   2e9cc:	00010493          	addi	s1,sp,0
   2e9d0:	00048513          	addi	a0,s1,0
   2e9d4:	00015317          	auipc	t1,0x15
   2e9d8:	a5c33303          	ld	t1,-1444(t1) # 43430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe24>
   2e9dc:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e9e0:	00a00713          	addi	a4,zero,10
   2e9e4:	0000a697          	auipc	a3,0xa
   2e9e8:	47468693          	addi	a3,a3,1140 # 38e58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x378>
   2e9ec:	00000613          	addi	a2,zero,0
   2e9f0:	00000593          	addi	a1,zero,0
   2e9f4:	00048513          	addi	a0,s1,0
   2e9f8:	f09e70ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2e9fc:	0a00006f          	jal	zero,2ea9c <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0xfc>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ea00:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ea04:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ea08:	00000693          	addi	a3,zero,0
   2ea0c:	0000a617          	auipc	a2,0xa
   2ea10:	42a60613          	addi	a2,a2,1066 # 38e36 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x356>
   2ea14:	0000a597          	auipc	a1,0xa
   2ea18:	41458593          	addi	a1,a1,1044 # 38e28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x348>
   2ea1c:	00015317          	auipc	t1,0x15
   2ea20:	90433303          	ld	t1,-1788(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2ea24:	000300e7          	jalr	ra,0(t1)
}
   2ea28:	00040513          	addi	a0,s0,0
   2ea2c:	03813083          	ld	ra,56(sp)
   2ea30:	03013403          	ld	s0,48(sp)
   2ea34:	02813483          	ld	s1,40(sp)
   2ea38:	02013903          	ld	s2,32(sp)
   2ea3c:	04010113          	addi	sp,sp,64
   2ea40:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ea44:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ea48:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ea4c:	00000693          	addi	a3,zero,0
   2ea50:	0000a617          	auipc	a2,0xa
   2ea54:	3f260613          	addi	a2,a2,1010 # 38e42 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x362>
   2ea58:	0000a597          	auipc	a1,0xa
   2ea5c:	3e058593          	addi	a1,a1,992 # 38e38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x358>
   2ea60:	00015317          	auipc	t1,0x15
   2ea64:	8c033303          	ld	t1,-1856(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2ea68:	000300e7          	jalr	ra,0(t1)
   2ea6c:	fbdff06f          	jal	zero,2ea28 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x88>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ea70:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ea74:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ea78:	00000693          	addi	a3,zero,0
   2ea7c:	0000a617          	auipc	a2,0xa
   2ea80:	3d960613          	addi	a2,a2,985 # 38e55 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x375>
   2ea84:	0000a597          	auipc	a1,0xa
   2ea88:	3c458593          	addi	a1,a1,964 # 38e48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x368>
   2ea8c:	00015317          	auipc	t1,0x15
   2ea90:	89433303          	ld	t1,-1900(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2ea94:	000300e7          	jalr	ra,0(t1)
   2ea98:	f91ff06f          	jal	zero,2ea28 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x88>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2ea9c:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2eaa0:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2eaa4:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2eaa8:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2eaac:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2eab0:	03278c63          	beq	a5,s2,2eae8 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x148>
      { _M_dataplus._M_p = __p; }
   2eab4:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2eab8:	0104b783          	ld	a5,16(s1)
   2eabc:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2eac0:	0084b783          	ld	a5,8(s1)
   2eac4:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2eac8:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2eacc:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2ead0:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2ead4:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2ead8:	01010793          	addi	a5,sp,16
   2eadc:	f4f506e3          	beq	a0,a5,2ea28 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x88>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2eae0:	cc1e70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2eae4:	f45ff06f          	jal	zero,2ea28 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x88>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2eae8:	0084b603          	ld	a2,8(s1)
   2eaec:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2eaf0:	fc0608e3          	beq	a2,zero,2eac0 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x120>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2eaf4:	00090593          	addi	a1,s2,0
   2eaf8:	d49e70ef          	jal	ra,16840 <memcpy@plt>
   2eafc:	fc5ff06f          	jal	zero,2eac0 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x120>
      { return _M_dataplus._M_p; }
   2eb00:	00050413          	addi	s0,a0,0
   2eb04:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2eb08:	01010793          	addi	a5,sp,16
   2eb0c:	00f50463          	beq	a0,a5,2eb14 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x174>
   2eb10:	c91e70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2eb14:	00040513          	addi	a0,s0,0
   2eb18:	e79e70ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002eb1c <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)>:
{
   2eb1c:	fc010113          	addi	sp,sp,-64
   2eb20:	02113c23          	sd	ra,56(sp)
   2eb24:	02813823          	sd	s0,48(sp)
   2eb28:	02913423          	sd	s1,40(sp)
   2eb2c:	03213023          	sd	s2,32(sp)
   2eb30:	00050413          	addi	s0,a0,0
        switch (v) {
   2eb34:	00200793          	addi	a5,zero,2
   2eb38:	08f58663          	beq	a1,a5,2ebc4 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0xa8>
   2eb3c:	00300793          	addi	a5,zero,3
   2eb40:	0af58863          	beq	a1,a5,2ebf0 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0xd4>
   2eb44:	00100793          	addi	a5,zero,1
   2eb48:	02f58c63          	beq	a1,a5,2eb80 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x64>
        return "(DW_VIS)0x" + to_hex((int)v);
   2eb4c:	00010493          	addi	s1,sp,0
   2eb50:	00048513          	addi	a0,s1,0
   2eb54:	00015317          	auipc	t1,0x15
   2eb58:	8dc33303          	ld	t1,-1828(t1) # 43430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe24>
   2eb5c:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2eb60:	00a00713          	addi	a4,zero,10
   2eb64:	0000a697          	auipc	a3,0xa
   2eb68:	33c68693          	addi	a3,a3,828 # 38ea0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3c0>
   2eb6c:	00000613          	addi	a2,zero,0
   2eb70:	00000593          	addi	a1,zero,0
   2eb74:	00048513          	addi	a0,s1,0
   2eb78:	d89e70ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2eb7c:	0a00006f          	jal	zero,2ec1c <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x100>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2eb80:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2eb84:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2eb88:	00000693          	addi	a3,zero,0
   2eb8c:	0000a617          	auipc	a2,0xa
   2eb90:	2e860613          	addi	a2,a2,744 # 38e74 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x394>
   2eb94:	0000a597          	auipc	a1,0xa
   2eb98:	2d458593          	addi	a1,a1,724 # 38e68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x388>
   2eb9c:	00014317          	auipc	t1,0x14
   2eba0:	78433303          	ld	t1,1924(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2eba4:	000300e7          	jalr	ra,0(t1)
}
   2eba8:	00040513          	addi	a0,s0,0
   2ebac:	03813083          	ld	ra,56(sp)
   2ebb0:	03013403          	ld	s0,48(sp)
   2ebb4:	02813483          	ld	s1,40(sp)
   2ebb8:	02013903          	ld	s2,32(sp)
   2ebbc:	04010113          	addi	sp,sp,64
   2ebc0:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ebc4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ebc8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ebcc:	00000693          	addi	a3,zero,0
   2ebd0:	0000a617          	auipc	a2,0xa
   2ebd4:	2b760613          	addi	a2,a2,695 # 38e87 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3a7>
   2ebd8:	0000a597          	auipc	a1,0xa
   2ebdc:	2a058593          	addi	a1,a1,672 # 38e78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x398>
   2ebe0:	00014317          	auipc	t1,0x14
   2ebe4:	74033303          	ld	t1,1856(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2ebe8:	000300e7          	jalr	ra,0(t1)
   2ebec:	fbdff06f          	jal	zero,2eba8 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x8c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ebf0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ebf4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ebf8:	00000693          	addi	a3,zero,0
   2ebfc:	0000a617          	auipc	a2,0xa
   2ec00:	29c60613          	addi	a2,a2,668 # 38e98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3b8>
   2ec04:	0000a597          	auipc	a1,0xa
   2ec08:	28458593          	addi	a1,a1,644 # 38e88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3a8>
   2ec0c:	00014317          	auipc	t1,0x14
   2ec10:	71433303          	ld	t1,1812(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2ec14:	000300e7          	jalr	ra,0(t1)
   2ec18:	f91ff06f          	jal	zero,2eba8 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x8c>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2ec1c:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ec20:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2ec24:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2ec28:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2ec2c:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2ec30:	03278c63          	beq	a5,s2,2ec68 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x14c>
      { _M_dataplus._M_p = __p; }
   2ec34:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2ec38:	0104b783          	ld	a5,16(s1)
   2ec3c:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2ec40:	0084b783          	ld	a5,8(s1)
   2ec44:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2ec48:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2ec4c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2ec50:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2ec54:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2ec58:	01010793          	addi	a5,sp,16
   2ec5c:	f4f506e3          	beq	a0,a5,2eba8 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x8c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2ec60:	b41e70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2ec64:	f45ff06f          	jal	zero,2eba8 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x8c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2ec68:	0084b603          	ld	a2,8(s1)
   2ec6c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2ec70:	fc0608e3          	beq	a2,zero,2ec40 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x124>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2ec74:	00090593          	addi	a1,s2,0
   2ec78:	bc9e70ef          	jal	ra,16840 <memcpy@plt>
   2ec7c:	fc5ff06f          	jal	zero,2ec40 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x124>
      { return _M_dataplus._M_p; }
   2ec80:	00050413          	addi	s0,a0,0
   2ec84:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2ec88:	01010793          	addi	a5,sp,16
   2ec8c:	00f50463          	beq	a0,a5,2ec94 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x178>
   2ec90:	b11e70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2ec94:	00040513          	addi	a0,s0,0
   2ec98:	cf9e70ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002ec9c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)>:
{
   2ec9c:	fc010113          	addi	sp,sp,-64
   2eca0:	02113c23          	sd	ra,56(sp)
   2eca4:	02813823          	sd	s0,48(sp)
   2eca8:	02913423          	sd	s1,40(sp)
   2ecac:	03213023          	sd	s2,32(sp)
   2ecb0:	00050413          	addi	s0,a0,0
        switch (v) {
   2ecb4:	00200793          	addi	a5,zero,2
   2ecb8:	0af58c63          	beq	a1,a5,2ed70 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xd4>
   2ecbc:	02b7ce63          	blt	a5,a1,2ecf8 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x5c>
   2ecc0:	06058663          	beq	a1,zero,2ed2c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x90>
   2ecc4:	00100793          	addi	a5,zero,1
   2ecc8:	0cf59a63          	bne	a1,a5,2ed9c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x100>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2eccc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ecd0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ecd4:	00000693          	addi	a3,zero,0
   2ecd8:	0000a617          	auipc	a2,0xa
   2ecdc:	1fe60613          	addi	a2,a2,510 # 38ed6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3f6>
   2ece0:	0000a597          	auipc	a1,0xa
   2ece4:	1e858593          	addi	a1,a1,488 # 38ec8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3e8>
   2ece8:	00014317          	auipc	t1,0x14
   2ecec:	63833303          	ld	t1,1592(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2ecf0:	000300e7          	jalr	ra,0(t1)
   2ecf4:	0600006f          	jal	zero,2ed54 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xb8>
   2ecf8:	00300793          	addi	a5,zero,3
   2ecfc:	0af59063          	bne	a1,a5,2ed9c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x100>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ed00:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ed04:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ed08:	00000693          	addi	a3,zero,0
   2ed0c:	0000a617          	auipc	a2,0xa
   2ed10:	20360613          	addi	a2,a2,515 # 38f0f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x42f>
   2ed14:	0000a597          	auipc	a1,0xa
   2ed18:	1e458593          	addi	a1,a1,484 # 38ef8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x418>
   2ed1c:	00014317          	auipc	t1,0x14
   2ed20:	60433303          	ld	t1,1540(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2ed24:	000300e7          	jalr	ra,0(t1)
   2ed28:	02c0006f          	jal	zero,2ed54 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xb8>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ed2c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ed30:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ed34:	00000693          	addi	a3,zero,0
   2ed38:	0000a617          	auipc	a2,0xa
   2ed3c:	18a60613          	addi	a2,a2,394 # 38ec2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3e2>
   2ed40:	0000a597          	auipc	a1,0xa
   2ed44:	17058593          	addi	a1,a1,368 # 38eb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3d0>
   2ed48:	00014317          	auipc	t1,0x14
   2ed4c:	5d833303          	ld	t1,1496(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2ed50:	000300e7          	jalr	ra,0(t1)
}
   2ed54:	00040513          	addi	a0,s0,0
   2ed58:	03813083          	ld	ra,56(sp)
   2ed5c:	03013403          	ld	s0,48(sp)
   2ed60:	02813483          	ld	s1,40(sp)
   2ed64:	02013903          	ld	s2,32(sp)
   2ed68:	04010113          	addi	sp,sp,64
   2ed6c:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ed70:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ed74:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ed78:	00000693          	addi	a3,zero,0
   2ed7c:	0000a617          	auipc	a2,0xa
   2ed80:	17760613          	addi	a2,a2,375 # 38ef3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x413>
   2ed84:	0000a597          	auipc	a1,0xa
   2ed88:	15458593          	addi	a1,a1,340 # 38ed8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3f8>
   2ed8c:	00014317          	auipc	t1,0x14
   2ed90:	59433303          	ld	t1,1428(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2ed94:	000300e7          	jalr	ra,0(t1)
   2ed98:	fbdff06f          	jal	zero,2ed54 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xb8>
        return "(DW_INL)0x" + to_hex((int)v);
   2ed9c:	00010493          	addi	s1,sp,0
   2eda0:	00048513          	addi	a0,s1,0
   2eda4:	00014317          	auipc	t1,0x14
   2eda8:	68c33303          	ld	t1,1676(t1) # 43430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe24>
   2edac:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2edb0:	00a00713          	addi	a4,zero,10
   2edb4:	0000a697          	auipc	a3,0xa
   2edb8:	15c68693          	addi	a3,a3,348 # 38f10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x430>
   2edbc:	00000613          	addi	a2,zero,0
   2edc0:	00000593          	addi	a1,zero,0
   2edc4:	00048513          	addi	a0,s1,0
   2edc8:	b39e70ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2edcc:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2edd0:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2edd4:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2edd8:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2eddc:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2ede0:	03278c63          	beq	a5,s2,2ee18 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x17c>
      { _M_dataplus._M_p = __p; }
   2ede4:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2ede8:	0104b783          	ld	a5,16(s1)
   2edec:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2edf0:	0084b783          	ld	a5,8(s1)
   2edf4:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2edf8:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2edfc:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2ee00:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2ee04:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2ee08:	01010793          	addi	a5,sp,16
   2ee0c:	f4f504e3          	beq	a0,a5,2ed54 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xb8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2ee10:	991e70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2ee14:	f41ff06f          	jal	zero,2ed54 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xb8>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2ee18:	0084b603          	ld	a2,8(s1)
   2ee1c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2ee20:	fc0608e3          	beq	a2,zero,2edf0 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x154>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2ee24:	00090593          	addi	a1,s2,0
   2ee28:	a19e70ef          	jal	ra,16840 <memcpy@plt>
   2ee2c:	fc5ff06f          	jal	zero,2edf0 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x154>
      { return _M_dataplus._M_p; }
   2ee30:	00050413          	addi	s0,a0,0
   2ee34:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2ee38:	01010793          	addi	a5,sp,16
   2ee3c:	00f50463          	beq	a0,a5,2ee44 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x1a8>
   2ee40:	961e70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2ee44:	00040513          	addi	a0,s0,0
   2ee48:	b49e70ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002ee4c <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)>:
        return "(DW_LNS)0x" + to_hex((int)v);
}

std::string
to_string(DW_LNE v)
{
   2ee4c:	fc010113          	addi	sp,sp,-64
   2ee50:	02113c23          	sd	ra,56(sp)
   2ee54:	02813823          	sd	s0,48(sp)
   2ee58:	02913423          	sd	s1,40(sp)
   2ee5c:	03213023          	sd	s2,32(sp)
   2ee60:	00050413          	addi	s0,a0,0
        switch (v) {
   2ee64:	00300793          	addi	a5,zero,3
   2ee68:	0af58e63          	beq	a1,a5,2ef24 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xd8>
   2ee6c:	04b7c063          	blt	a5,a1,2eeac <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x60>
   2ee70:	00100793          	addi	a5,zero,1
   2ee74:	06f58663          	beq	a1,a5,2eee0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x94>
   2ee78:	00200793          	addi	a5,zero,2
   2ee7c:	0cf59a63          	bne	a1,a5,2ef50 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x104>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ee80:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ee84:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ee88:	00000693          	addi	a3,zero,0
   2ee8c:	0000a617          	auipc	a2,0xa
   2ee90:	0be60613          	addi	a2,a2,190 # 38f4a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x46a>
   2ee94:	0000a597          	auipc	a1,0xa
   2ee98:	0a458593          	addi	a1,a1,164 # 38f38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x458>
   2ee9c:	00014317          	auipc	t1,0x14
   2eea0:	48433303          	ld	t1,1156(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2eea4:	000300e7          	jalr	ra,0(t1)
   2eea8:	0600006f          	jal	zero,2ef08 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xbc>
   2eeac:	00400793          	addi	a5,zero,4
   2eeb0:	0af59063          	bne	a1,a5,2ef50 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x104>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2eeb4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2eeb8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2eebc:	00000693          	addi	a3,zero,0
   2eec0:	0000a617          	auipc	a2,0xa
   2eec4:	0c060613          	addi	a2,a2,192 # 38f80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4a0>
   2eec8:	0000a597          	auipc	a1,0xa
   2eecc:	0a058593          	addi	a1,a1,160 # 38f68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x488>
   2eed0:	00014317          	auipc	t1,0x14
   2eed4:	45033303          	ld	t1,1104(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2eed8:	000300e7          	jalr	ra,0(t1)
   2eedc:	02c0006f          	jal	zero,2ef08 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xbc>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2eee0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2eee4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2eee8:	00000693          	addi	a3,zero,0
   2eeec:	0000a617          	auipc	a2,0xa
   2eef0:	04760613          	addi	a2,a2,71 # 38f33 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x453>
   2eef4:	0000a597          	auipc	a1,0xa
   2eef8:	02c58593          	addi	a1,a1,44 # 38f20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x440>
   2eefc:	00014317          	auipc	t1,0x14
   2ef00:	42433303          	ld	t1,1060(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2ef04:	000300e7          	jalr	ra,0(t1)
        case DW_LNE::set_discriminator: return "DW_LNE_set_discriminator";
        case DW_LNE::lo_user: break;
        case DW_LNE::hi_user: break;
        }
        return "(DW_LNE)0x" + to_hex((int)v);
}
   2ef08:	00040513          	addi	a0,s0,0
   2ef0c:	03813083          	ld	ra,56(sp)
   2ef10:	03013403          	ld	s0,48(sp)
   2ef14:	02813483          	ld	s1,40(sp)
   2ef18:	02013903          	ld	s2,32(sp)
   2ef1c:	04010113          	addi	sp,sp,64
   2ef20:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ef24:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ef28:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ef2c:	00000693          	addi	a3,zero,0
   2ef30:	0000a617          	auipc	a2,0xa
   2ef34:	03260613          	addi	a2,a2,50 # 38f62 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x482>
   2ef38:	0000a597          	auipc	a1,0xa
   2ef3c:	01858593          	addi	a1,a1,24 # 38f50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x470>
   2ef40:	00014317          	auipc	t1,0x14
   2ef44:	3e033303          	ld	t1,992(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2ef48:	000300e7          	jalr	ra,0(t1)
   2ef4c:	fbdff06f          	jal	zero,2ef08 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xbc>
        return "(DW_LNE)0x" + to_hex((int)v);
   2ef50:	00010493          	addi	s1,sp,0
   2ef54:	00048513          	addi	a0,s1,0
   2ef58:	00014317          	auipc	t1,0x14
   2ef5c:	4d833303          	ld	t1,1240(t1) # 43430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe24>
   2ef60:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2ef64:	00a00713          	addi	a4,zero,10
   2ef68:	0000a697          	auipc	a3,0xa
   2ef6c:	02068693          	addi	a3,a3,32 # 38f88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4a8>
   2ef70:	00000613          	addi	a2,zero,0
   2ef74:	00000593          	addi	a1,zero,0
   2ef78:	00048513          	addi	a0,s1,0
   2ef7c:	985e70ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2ef80:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ef84:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2ef88:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2ef8c:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2ef90:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2ef94:	03278c63          	beq	a5,s2,2efcc <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x180>
      { _M_dataplus._M_p = __p; }
   2ef98:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2ef9c:	0104b783          	ld	a5,16(s1)
   2efa0:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2efa4:	0084b783          	ld	a5,8(s1)
   2efa8:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2efac:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2efb0:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2efb4:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2efb8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2efbc:	01010793          	addi	a5,sp,16
   2efc0:	f4f504e3          	beq	a0,a5,2ef08 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xbc>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2efc4:	fdce70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2efc8:	f41ff06f          	jal	zero,2ef08 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xbc>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2efcc:	0084b603          	ld	a2,8(s1)
   2efd0:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2efd4:	fc0608e3          	beq	a2,zero,2efa4 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x158>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2efd8:	00090593          	addi	a1,s2,0
   2efdc:	865e70ef          	jal	ra,16840 <memcpy@plt>
   2efe0:	fc5ff06f          	jal	zero,2efa4 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x158>
      { return _M_dataplus._M_p; }
   2efe4:	00050413          	addi	s0,a0,0
   2efe8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2efec:	01010793          	addi	a5,sp,16
   2eff0:	00f50463          	beq	a0,a5,2eff8 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x1ac>
   2eff4:	face70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2eff8:	00040513          	addi	a0,s0,0
   2effc:	995e70ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002f000 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)>:
{
   2f000:	fc010113          	addi	sp,sp,-64
   2f004:	02113c23          	sd	ra,56(sp)
   2f008:	02813823          	sd	s0,48(sp)
   2f00c:	02913423          	sd	s1,40(sp)
   2f010:	03213023          	sd	s2,32(sp)
   2f014:	00050413          	addi	s0,a0,0
        switch (v) {
   2f018:	00200793          	addi	a5,zero,2
   2f01c:	0af58c63          	beq	a1,a5,2f0d4 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xd4>
   2f020:	02b7ce63          	blt	a5,a1,2f05c <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x5c>
   2f024:	06058663          	beq	a1,zero,2f090 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x90>
   2f028:	00100793          	addi	a5,zero,1
   2f02c:	0cf59a63          	bne	a1,a5,2f100 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x100>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f030:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f034:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f038:	00000693          	addi	a3,zero,0
   2f03c:	0000a617          	auipc	a2,0xa
   2f040:	f8160613          	addi	a2,a2,-127 # 38fbd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4dd>
   2f044:	0000a597          	auipc	a1,0xa
   2f048:	f6c58593          	addi	a1,a1,-148 # 38fb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4d0>
   2f04c:	00014317          	auipc	t1,0x14
   2f050:	2d433303          	ld	t1,724(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f054:	000300e7          	jalr	ra,0(t1)
   2f058:	0600006f          	jal	zero,2f0b8 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xb8>
   2f05c:	00300793          	addi	a5,zero,3
   2f060:	0af59063          	bne	a1,a5,2f100 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x100>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f064:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f068:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f06c:	00000693          	addi	a3,zero,0
   2f070:	0000a617          	auipc	a2,0xa
   2f074:	f7660613          	addi	a2,a2,-138 # 38fe6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x506>
   2f078:	0000a597          	auipc	a1,0xa
   2f07c:	f5858593          	addi	a1,a1,-168 # 38fd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4f0>
   2f080:	00014317          	auipc	t1,0x14
   2f084:	2a033303          	ld	t1,672(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f088:	000300e7          	jalr	ra,0(t1)
   2f08c:	02c0006f          	jal	zero,2f0b8 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xb8>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f090:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f094:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f098:	00000693          	addi	a3,zero,0
   2f09c:	0000a617          	auipc	a2,0xa
   2f0a0:	f1060613          	addi	a2,a2,-240 # 38fac <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4cc>
   2f0a4:	0000a597          	auipc	a1,0xa
   2f0a8:	ef458593          	addi	a1,a1,-268 # 38f98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4b8>
   2f0ac:	00014317          	auipc	t1,0x14
   2f0b0:	27433303          	ld	t1,628(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f0b4:	000300e7          	jalr	ra,0(t1)
}
   2f0b8:	00040513          	addi	a0,s0,0
   2f0bc:	03813083          	ld	ra,56(sp)
   2f0c0:	03013403          	ld	s0,48(sp)
   2f0c4:	02813483          	ld	s1,40(sp)
   2f0c8:	02013903          	ld	s2,32(sp)
   2f0cc:	04010113          	addi	sp,sp,64
   2f0d0:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f0d4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f0d8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f0dc:	00000693          	addi	a3,zero,0
   2f0e0:	0000a617          	auipc	a2,0xa
   2f0e4:	eef60613          	addi	a2,a2,-273 # 38fcf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4ef>
   2f0e8:	0000a597          	auipc	a1,0xa
   2f0ec:	ed858593          	addi	a1,a1,-296 # 38fc0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4e0>
   2f0f0:	00014317          	auipc	t1,0x14
   2f0f4:	23033303          	ld	t1,560(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f0f8:	000300e7          	jalr	ra,0(t1)
   2f0fc:	fbdff06f          	jal	zero,2f0b8 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xb8>
        return "(DW_ID)0x" + to_hex((int)v);
   2f100:	00010493          	addi	s1,sp,0
   2f104:	00048513          	addi	a0,s1,0
   2f108:	00014317          	auipc	t1,0x14
   2f10c:	32833303          	ld	t1,808(t1) # 43430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe24>
   2f110:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2f114:	00900713          	addi	a4,zero,9
   2f118:	0000a697          	auipc	a3,0xa
   2f11c:	ed068693          	addi	a3,a3,-304 # 38fe8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x508>
   2f120:	00000613          	addi	a2,zero,0
   2f124:	00000593          	addi	a1,zero,0
   2f128:	00048513          	addi	a0,s1,0
   2f12c:	fd4e70ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2f130:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f134:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2f138:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2f13c:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2f140:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2f144:	03278c63          	beq	a5,s2,2f17c <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x17c>
      { _M_dataplus._M_p = __p; }
   2f148:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2f14c:	0104b783          	ld	a5,16(s1)
   2f150:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2f154:	0084b783          	ld	a5,8(s1)
   2f158:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2f15c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2f160:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2f164:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2f168:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2f16c:	01010793          	addi	a5,sp,16
   2f170:	f4f504e3          	beq	a0,a5,2f0b8 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xb8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2f174:	e2ce70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2f178:	f41ff06f          	jal	zero,2f0b8 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xb8>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2f17c:	0084b603          	ld	a2,8(s1)
   2f180:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2f184:	fc0608e3          	beq	a2,zero,2f154 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x154>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2f188:	00090593          	addi	a1,s2,0
   2f18c:	eb4e70ef          	jal	ra,16840 <memcpy@plt>
   2f190:	fc5ff06f          	jal	zero,2f154 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x154>
      { return _M_dataplus._M_p; }
   2f194:	00050413          	addi	s0,a0,0
   2f198:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2f19c:	01010793          	addi	a5,sp,16
   2f1a0:	00f50463          	beq	a0,a5,2f1a8 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x1a8>
   2f1a4:	dfce70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2f1a8:	00040513          	addi	a0,s0,0
   2f1ac:	fe4e70ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002f1b0 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)>:
{
   2f1b0:	fc010113          	addi	sp,sp,-64
   2f1b4:	02113c23          	sd	ra,56(sp)
   2f1b8:	02813823          	sd	s0,48(sp)
   2f1bc:	02913423          	sd	s1,40(sp)
   2f1c0:	03213023          	sd	s2,32(sp)
   2f1c4:	00050413          	addi	s0,a0,0
        switch (v) {
   2f1c8:	00500793          	addi	a5,zero,5
   2f1cc:	10b7ea63          	bltu	a5,a1,2f2e0 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x130>
   2f1d0:	00259793          	slli	a5,a1,0x2
   2f1d4:	0000c717          	auipc	a4,0xc
   2f1d8:	94070713          	addi	a4,a4,-1728 # 3ab14 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2034>
   2f1dc:	00e787b3          	add	a5,a5,a4
   2f1e0:	0007a783          	lw	a5,0(a5)
   2f1e4:	00e787b3          	add	a5,a5,a4
   2f1e8:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f1ec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f1f0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f1f4:	00000693          	addi	a3,zero,0
   2f1f8:	0000a617          	auipc	a2,0xa
   2f1fc:	e0e60613          	addi	a2,a2,-498 # 39006 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x526>
   2f200:	0000a597          	auipc	a1,0xa
   2f204:	df858593          	addi	a1,a1,-520 # 38ff8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x518>
   2f208:	00014317          	auipc	t1,0x14
   2f20c:	11833303          	ld	t1,280(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f210:	000300e7          	jalr	ra,0(t1)
}
   2f214:	00040513          	addi	a0,s0,0
   2f218:	03813083          	ld	ra,56(sp)
   2f21c:	03013403          	ld	s0,48(sp)
   2f220:	02813483          	ld	s1,40(sp)
   2f224:	02013903          	ld	s2,32(sp)
   2f228:	04010113          	addi	sp,sp,64
   2f22c:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f230:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f234:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f238:	00000693          	addi	a3,zero,0
   2f23c:	0000a617          	auipc	a2,0xa
   2f240:	de360613          	addi	a2,a2,-541 # 3901f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x53f>
   2f244:	0000a597          	auipc	a1,0xa
   2f248:	dc458593          	addi	a1,a1,-572 # 39008 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x528>
   2f24c:	00014317          	auipc	t1,0x14
   2f250:	0d433303          	ld	t1,212(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f254:	000300e7          	jalr	ra,0(t1)
   2f258:	fbdff06f          	jal	zero,2f214 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f25c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f260:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f264:	00000693          	addi	a3,zero,0
   2f268:	0000a617          	auipc	a2,0xa
   2f26c:	dd060613          	addi	a2,a2,-560 # 39038 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x558>
   2f270:	0000a597          	auipc	a1,0xa
   2f274:	db058593          	addi	a1,a1,-592 # 39020 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x540>
   2f278:	00014317          	auipc	t1,0x14
   2f27c:	0a833303          	ld	t1,168(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f280:	000300e7          	jalr	ra,0(t1)
   2f284:	f91ff06f          	jal	zero,2f214 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f288:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f28c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f290:	00000693          	addi	a3,zero,0
   2f294:	0000a617          	auipc	a2,0xa
   2f298:	dc260613          	addi	a2,a2,-574 # 39056 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x576>
   2f29c:	0000a597          	auipc	a1,0xa
   2f2a0:	da458593          	addi	a1,a1,-604 # 39040 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x560>
   2f2a4:	00014317          	auipc	t1,0x14
   2f2a8:	07c33303          	ld	t1,124(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f2ac:	000300e7          	jalr	ra,0(t1)
   2f2b0:	f65ff06f          	jal	zero,2f214 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f2b4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f2b8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f2bc:	00000693          	addi	a3,zero,0
   2f2c0:	0000a617          	auipc	a2,0xa
   2f2c4:	daf60613          	addi	a2,a2,-593 # 3906f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x58f>
   2f2c8:	0000a597          	auipc	a1,0xa
   2f2cc:	d9058593          	addi	a1,a1,-624 # 39058 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x578>
   2f2d0:	00014317          	auipc	t1,0x14
   2f2d4:	05033303          	ld	t1,80(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f2d8:	000300e7          	jalr	ra,0(t1)
   2f2dc:	f39ff06f          	jal	zero,2f214 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x64>
        return "(DW_DS)0x" + to_hex((int)v);
   2f2e0:	00010493          	addi	s1,sp,0
   2f2e4:	00048513          	addi	a0,s1,0
   2f2e8:	00014317          	auipc	t1,0x14
   2f2ec:	14833303          	ld	t1,328(t1) # 43430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe24>
   2f2f0:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2f2f4:	00900713          	addi	a4,zero,9
   2f2f8:	0000a697          	auipc	a3,0xa
   2f2fc:	d7868693          	addi	a3,a3,-648 # 39070 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x590>
   2f300:	00000613          	addi	a2,zero,0
   2f304:	00000593          	addi	a1,zero,0
   2f308:	00048513          	addi	a0,s1,0
   2f30c:	df4e70ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2f310:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f314:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2f318:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2f31c:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2f320:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2f324:	03278c63          	beq	a5,s2,2f35c <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x1ac>
      { _M_dataplus._M_p = __p; }
   2f328:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2f32c:	0104b783          	ld	a5,16(s1)
   2f330:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2f334:	0084b783          	ld	a5,8(s1)
   2f338:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2f33c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2f340:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2f344:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2f348:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2f34c:	01010793          	addi	a5,sp,16
   2f350:	ecf502e3          	beq	a0,a5,2f214 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2f354:	c4ce70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2f358:	ebdff06f          	jal	zero,2f214 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2f35c:	0084b603          	ld	a2,8(s1)
   2f360:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2f364:	fc0608e3          	beq	a2,zero,2f334 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x184>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2f368:	00090593          	addi	a1,s2,0
   2f36c:	cd4e70ef          	jal	ra,16840 <memcpy@plt>
   2f370:	fc5ff06f          	jal	zero,2f334 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x184>
      { return _M_dataplus._M_p; }
   2f374:	00050413          	addi	s0,a0,0
   2f378:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2f37c:	01010793          	addi	a5,sp,16
   2f380:	00f50463          	beq	a0,a5,2f388 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x1d8>
   2f384:	c1ce70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2f388:	00040513          	addi	a0,s0,0
   2f38c:	e04e70ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002f390 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)>:
{
   2f390:	fb010113          	addi	sp,sp,-80
   2f394:	04113423          	sd	ra,72(sp)
   2f398:	04813023          	sd	s0,64(sp)
   2f39c:	02913c23          	sd	s1,56(sp)
   2f3a0:	03213823          	sd	s2,48(sp)
   2f3a4:	03313423          	sd	s3,40(sp)
   2f3a8:	03413023          	sd	s4,32(sp)
   2f3ac:	00050413          	addi	s0,a0,0
        switch (v) {
   2f3b0:	00400793          	addi	a5,zero,4
   2f3b4:	10b7ee63          	bltu	a5,a1,2f4d0 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x140>
   2f3b8:	00259593          	slli	a1,a1,0x2
   2f3bc:	0000b717          	auipc	a4,0xb
   2f3c0:	77070713          	addi	a4,a4,1904 # 3ab2c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x204c>
   2f3c4:	00e585b3          	add	a1,a1,a4
   2f3c8:	0005a783          	lw	a5,0(a1)
   2f3cc:	00e787b3          	add	a5,a5,a4
   2f3d0:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f3d4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f3d8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f3dc:	00000693          	addi	a3,zero,0
   2f3e0:	0000a617          	auipc	a2,0xa
   2f3e4:	cba60613          	addi	a2,a2,-838 # 3909a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5ba>
   2f3e8:	0000a597          	auipc	a1,0xa
   2f3ec:	c9858593          	addi	a1,a1,-872 # 39080 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5a0>
   2f3f0:	00014317          	auipc	t1,0x14
   2f3f4:	f3033303          	ld	t1,-208(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f3f8:	000300e7          	jalr	ra,0(t1)
}
   2f3fc:	00040513          	addi	a0,s0,0
   2f400:	04813083          	ld	ra,72(sp)
   2f404:	04013403          	ld	s0,64(sp)
   2f408:	03813483          	ld	s1,56(sp)
   2f40c:	03013903          	ld	s2,48(sp)
   2f410:	02813983          	ld	s3,40(sp)
   2f414:	02013a03          	ld	s4,32(sp)
   2f418:	05010113          	addi	sp,sp,80
   2f41c:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f420:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f424:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f428:	00000693          	addi	a3,zero,0
   2f42c:	0000a617          	auipc	a2,0xa
   2f430:	c8a60613          	addi	a2,a2,-886 # 390b6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5d6>
   2f434:	0000a597          	auipc	a1,0xa
   2f438:	c6c58593          	addi	a1,a1,-916 # 390a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5c0>
   2f43c:	00014317          	auipc	t1,0x14
   2f440:	ee433303          	ld	t1,-284(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f444:	000300e7          	jalr	ra,0(t1)
   2f448:	fb5ff06f          	jal	zero,2f3fc <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f44c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f450:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f454:	00000693          	addi	a3,zero,0
   2f458:	0000a617          	auipc	a2,0xa
   2f45c:	c7a60613          	addi	a2,a2,-902 # 390d2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5f2>
   2f460:	0000a597          	auipc	a1,0xa
   2f464:	c5858593          	addi	a1,a1,-936 # 390b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5d8>
   2f468:	00014317          	auipc	t1,0x14
   2f46c:	eb833303          	ld	t1,-328(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f470:	000300e7          	jalr	ra,0(t1)
   2f474:	f89ff06f          	jal	zero,2f3fc <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f478:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f47c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f480:	00000693          	addi	a3,zero,0
   2f484:	0000a617          	auipc	a2,0xa
   2f488:	c6f60613          	addi	a2,a2,-913 # 390f3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x613>
   2f48c:	0000a597          	auipc	a1,0xa
   2f490:	c4c58593          	addi	a1,a1,-948 # 390d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5f8>
   2f494:	00014317          	auipc	t1,0x14
   2f498:	e8c33303          	ld	t1,-372(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f49c:	000300e7          	jalr	ra,0(t1)
   2f4a0:	f5dff06f          	jal	zero,2f3fc <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f4a4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f4a8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f4ac:	00000693          	addi	a3,zero,0
   2f4b0:	0000a617          	auipc	a2,0xa
   2f4b4:	c6060613          	addi	a2,a2,-928 # 39110 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x630>
   2f4b8:	0000a597          	auipc	a1,0xa
   2f4bc:	c4058593          	addi	a1,a1,-960 # 390f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x618>
   2f4c0:	00014317          	auipc	t1,0x14
   2f4c4:	e6033303          	ld	t1,-416(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f4c8:	000300e7          	jalr	ra,0(t1)
   2f4cc:	f31ff06f          	jal	zero,2f3fc <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x6c>
    const bool __neg = __val < 0;
   2f4d0:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2f4d4:	0005891b          	addiw	s2,a1,0
   2f4d8:	0605ce63          	blt	a1,zero,2f554 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x1c4>
    const auto __len = __detail::__to_chars_len(__uval);
   2f4dc:	00a00593          	addi	a1,zero,10
   2f4e0:	00090513          	addi	a0,s2,0
   2f4e4:	00014317          	auipc	t1,0x14
   2f4e8:	fcc33303          	ld	t1,-52(t1) # 434b0 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x18174>
   2f4ec:	000300e7          	jalr	ra,0(t1)
   2f4f0:	00050a1b          	addiw	s4,a0,0
	: allocator_type(__a), _M_p(__dat) { }
   2f4f4:	01010793          	addi	a5,sp,16
   2f4f8:	00f13023          	sd	a5,0(sp)
    string __str(__neg + __len, '-');
   2f4fc:	00a985bb          	addw	a1,s3,a0
      { _M_construct(__n, __c); }
   2f500:	02d00613          	addi	a2,zero,45
   2f504:	02059593          	slli	a1,a1,0x20
   2f508:	0205d593          	srli	a1,a1,0x20
   2f50c:	00010493          	addi	s1,sp,0
   2f510:	00048513          	addi	a0,s1,0
   2f514:	aece70ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   2f518:	00090613          	addi	a2,s2,0
   2f51c:	000a0593          	addi	a1,s4,0
   2f520:	00013503          	ld	a0,0(sp)
   2f524:	01350533          	add	a0,a0,s3
   2f528:	00014317          	auipc	t1,0x14
   2f52c:	fa833303          	ld	t1,-88(t1) # 434d0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x180f8>
   2f530:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2f534:	01300713          	addi	a4,zero,19
   2f538:	0000a697          	auipc	a3,0xa
   2f53c:	be068693          	addi	a3,a3,-1056 # 39118 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x638>
   2f540:	00000613          	addi	a2,zero,0
   2f544:	00000593          	addi	a1,zero,0
   2f548:	00048513          	addi	a0,s1,0
   2f54c:	bb4e70ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2f550:	00c0006f          	jal	zero,2f55c <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x1cc>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2f554:	40b0093b          	subw	s2,zero,a1
   2f558:	f85ff06f          	jal	zero,2f4dc <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x14c>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2f55c:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f560:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2f564:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2f568:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2f56c:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2f570:	03278c63          	beq	a5,s2,2f5a8 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x218>
      { _M_dataplus._M_p = __p; }
   2f574:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2f578:	0104b783          	ld	a5,16(s1)
   2f57c:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2f580:	0084b783          	ld	a5,8(s1)
   2f584:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2f588:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2f58c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2f590:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2f594:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2f598:	01010793          	addi	a5,sp,16
   2f59c:	e6f500e3          	beq	a0,a5,2f3fc <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x6c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2f5a0:	a00e70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2f5a4:	e59ff06f          	jal	zero,2f3fc <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x6c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2f5a8:	0084b603          	ld	a2,8(s1)
   2f5ac:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2f5b0:	fc0608e3          	beq	a2,zero,2f580 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x1f0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2f5b4:	00090593          	addi	a1,s2,0
   2f5b8:	a88e70ef          	jal	ra,16840 <memcpy@plt>
   2f5bc:	fc5ff06f          	jal	zero,2f580 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x1f0>
      { return _M_dataplus._M_p; }
   2f5c0:	00050413          	addi	s0,a0,0
   2f5c4:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2f5c8:	01010793          	addi	a5,sp,16
   2f5cc:	00f50463          	beq	a0,a5,2f5d4 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x244>
   2f5d0:	9d0e70ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2f5d4:	00040513          	addi	a0,s0,0
   2f5d8:	bb8e70ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002f5dc <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)>:
{
   2f5dc:	fc010113          	addi	sp,sp,-64
   2f5e0:	02113c23          	sd	ra,56(sp)
   2f5e4:	02813823          	sd	s0,48(sp)
   2f5e8:	02913423          	sd	s1,40(sp)
   2f5ec:	03213023          	sd	s2,32(sp)
   2f5f0:	00050413          	addi	s0,a0,0
        switch (v) {
   2f5f4:	00c00793          	addi	a5,zero,12
   2f5f8:	24b7e463          	bltu	a5,a1,2f840 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x264>
   2f5fc:	00259793          	slli	a5,a1,0x2
   2f600:	0000b717          	auipc	a4,0xb
   2f604:	54070713          	addi	a4,a4,1344 # 3ab40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2060>
   2f608:	00e787b3          	add	a5,a5,a4
   2f60c:	0007a783          	lw	a5,0(a5)
   2f610:	00e787b3          	add	a5,a5,a4
   2f614:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f618:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f61c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f620:	00000693          	addi	a3,zero,0
   2f624:	0000a617          	auipc	a2,0xa
   2f628:	b1760613          	addi	a2,a2,-1257 # 3913b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x65b>
   2f62c:	0000a597          	auipc	a1,0xa
   2f630:	b0458593          	addi	a1,a1,-1276 # 39130 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x650>
   2f634:	00014317          	auipc	t1,0x14
   2f638:	cec33303          	ld	t1,-788(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f63c:	000300e7          	jalr	ra,0(t1)
}
   2f640:	00040513          	addi	a0,s0,0
   2f644:	03813083          	ld	ra,56(sp)
   2f648:	03013403          	ld	s0,48(sp)
   2f64c:	02813483          	ld	s1,40(sp)
   2f650:	02013903          	ld	s2,32(sp)
   2f654:	04010113          	addi	sp,sp,64
   2f658:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f65c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f660:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f664:	00000693          	addi	a3,zero,0
   2f668:	0000a617          	auipc	a2,0xa
   2f66c:	ae960613          	addi	a2,a2,-1303 # 39151 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x671>
   2f670:	0000a597          	auipc	a1,0xa
   2f674:	ad058593          	addi	a1,a1,-1328 # 39140 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x660>
   2f678:	00014317          	auipc	t1,0x14
   2f67c:	ca833303          	ld	t1,-856(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f680:	000300e7          	jalr	ra,0(t1)
   2f684:	fbdff06f          	jal	zero,2f640 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f688:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f68c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f690:	00000693          	addi	a3,zero,0
   2f694:	0000a617          	auipc	a2,0xa
   2f698:	ad760613          	addi	a2,a2,-1321 # 3916b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68b>
   2f69c:	0000a597          	auipc	a1,0xa
   2f6a0:	abc58593          	addi	a1,a1,-1348 # 39158 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x678>
   2f6a4:	00014317          	auipc	t1,0x14
   2f6a8:	c7c33303          	ld	t1,-900(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f6ac:	000300e7          	jalr	ra,0(t1)
   2f6b0:	f91ff06f          	jal	zero,2f640 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f6b4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f6b8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f6bc:	00000693          	addi	a3,zero,0
   2f6c0:	0000a617          	auipc	a2,0xa
   2f6c4:	abf60613          	addi	a2,a2,-1345 # 3917f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x69f>
   2f6c8:	0000a597          	auipc	a1,0xa
   2f6cc:	aa858593          	addi	a1,a1,-1368 # 39170 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x690>
   2f6d0:	00014317          	auipc	t1,0x14
   2f6d4:	c5033303          	ld	t1,-944(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f6d8:	000300e7          	jalr	ra,0(t1)
   2f6dc:	f65ff06f          	jal	zero,2f640 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f6e0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f6e4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f6e8:	00000693          	addi	a3,zero,0
   2f6ec:	0000a617          	auipc	a2,0xa
   2f6f0:	aa560613          	addi	a2,a2,-1371 # 39191 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6b1>
   2f6f4:	0000a597          	auipc	a1,0xa
   2f6f8:	a8c58593          	addi	a1,a1,-1396 # 39180 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6a0>
   2f6fc:	00014317          	auipc	t1,0x14
   2f700:	c2433303          	ld	t1,-988(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f704:	000300e7          	jalr	ra,0(t1)
   2f708:	f39ff06f          	jal	zero,2f640 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f70c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f710:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f714:	00000693          	addi	a3,zero,0
   2f718:	0000a617          	auipc	a2,0xa
   2f71c:	a9260613          	addi	a2,a2,-1390 # 391aa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6ca>
   2f720:	0000a597          	auipc	a1,0xa
   2f724:	a7858593          	addi	a1,a1,-1416 # 39198 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6b8>
   2f728:	00014317          	auipc	t1,0x14
   2f72c:	bf833303          	ld	t1,-1032(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f730:	000300e7          	jalr	ra,0(t1)
   2f734:	f0dff06f          	jal	zero,2f640 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f738:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f73c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f740:	00000693          	addi	a3,zero,0
   2f744:	0000a617          	auipc	a2,0xa
   2f748:	a8260613          	addi	a2,a2,-1406 # 391c6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6e6>
   2f74c:	0000a597          	auipc	a1,0xa
   2f750:	a6458593          	addi	a1,a1,-1436 # 391b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6d0>
   2f754:	00014317          	auipc	t1,0x14
   2f758:	bcc33303          	ld	t1,-1076(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f75c:	000300e7          	jalr	ra,0(t1)
   2f760:	ee1ff06f          	jal	zero,2f640 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f764:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f768:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f76c:	00000693          	addi	a3,zero,0
   2f770:	0000a617          	auipc	a2,0xa
   2f774:	a6b60613          	addi	a2,a2,-1429 # 391db <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6fb>
   2f778:	0000a597          	auipc	a1,0xa
   2f77c:	a5058593          	addi	a1,a1,-1456 # 391c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6e8>
   2f780:	00014317          	auipc	t1,0x14
   2f784:	ba033303          	ld	t1,-1120(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f788:	000300e7          	jalr	ra,0(t1)
   2f78c:	eb5ff06f          	jal	zero,2f640 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f790:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f794:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f798:	00000693          	addi	a3,zero,0
   2f79c:	0000a617          	auipc	a2,0xa
   2f7a0:	a5b60613          	addi	a2,a2,-1445 # 391f7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x717>
   2f7a4:	0000a597          	auipc	a1,0xa
   2f7a8:	a3c58593          	addi	a1,a1,-1476 # 391e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x700>
   2f7ac:	00014317          	auipc	t1,0x14
   2f7b0:	b7433303          	ld	t1,-1164(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f7b4:	000300e7          	jalr	ra,0(t1)
   2f7b8:	e89ff06f          	jal	zero,2f640 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f7bc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f7c0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f7c4:	00000693          	addi	a3,zero,0
   2f7c8:	0000a617          	auipc	a2,0xa
   2f7cc:	a4760613          	addi	a2,a2,-1465 # 3920f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x72f>
   2f7d0:	0000a597          	auipc	a1,0xa
   2f7d4:	a2858593          	addi	a1,a1,-1496 # 391f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x718>
   2f7d8:	00014317          	auipc	t1,0x14
   2f7dc:	b4833303          	ld	t1,-1208(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f7e0:	000300e7          	jalr	ra,0(t1)
   2f7e4:	e5dff06f          	jal	zero,2f640 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f7e8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f7ec:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f7f0:	00000693          	addi	a3,zero,0
   2f7f4:	0000a617          	auipc	a2,0xa
   2f7f8:	a3560613          	addi	a2,a2,-1483 # 39229 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x749>
   2f7fc:	0000a597          	auipc	a1,0xa
   2f800:	a1458593          	addi	a1,a1,-1516 # 39210 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x730>
   2f804:	00014317          	auipc	t1,0x14
   2f808:	b1c33303          	ld	t1,-1252(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f80c:	000300e7          	jalr	ra,0(t1)
   2f810:	e31ff06f          	jal	zero,2f640 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f814:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f818:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f81c:	00000693          	addi	a3,zero,0
   2f820:	0000a617          	auipc	a2,0xa
   2f824:	a1e60613          	addi	a2,a2,-1506 # 3923e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x75e>
   2f828:	0000a597          	auipc	a1,0xa
   2f82c:	a0858593          	addi	a1,a1,-1528 # 39230 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x750>
   2f830:	00014317          	auipc	t1,0x14
   2f834:	af033303          	ld	t1,-1296(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f838:	000300e7          	jalr	ra,0(t1)
   2f83c:	e05ff06f          	jal	zero,2f640 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
        return "(DW_LNS)0x" + to_hex((int)v);
   2f840:	00010493          	addi	s1,sp,0
   2f844:	00048513          	addi	a0,s1,0
   2f848:	00014317          	auipc	t1,0x14
   2f84c:	be833303          	ld	t1,-1048(t1) # 43430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe24>
   2f850:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2f854:	00a00713          	addi	a4,zero,10
   2f858:	0000a697          	auipc	a3,0xa
   2f85c:	9e868693          	addi	a3,a3,-1560 # 39240 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x760>
   2f860:	00000613          	addi	a2,zero,0
   2f864:	00000593          	addi	a1,zero,0
   2f868:	00048513          	addi	a0,s1,0
   2f86c:	894e70ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2f870:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f874:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2f878:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2f87c:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2f880:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2f884:	03278c63          	beq	a5,s2,2f8bc <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x2e0>
      { _M_dataplus._M_p = __p; }
   2f888:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2f88c:	0104b783          	ld	a5,16(s1)
   2f890:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2f894:	0084b783          	ld	a5,8(s1)
   2f898:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2f89c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2f8a0:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2f8a4:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2f8a8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2f8ac:	01010793          	addi	a5,sp,16
   2f8b0:	d8f508e3          	beq	a0,a5,2f640 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2f8b4:	eede60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2f8b8:	d89ff06f          	jal	zero,2f640 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2f8bc:	0084b603          	ld	a2,8(s1)
   2f8c0:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2f8c4:	fc0608e3          	beq	a2,zero,2f894 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x2b8>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2f8c8:	00090593          	addi	a1,s2,0
   2f8cc:	f75e60ef          	jal	ra,16840 <memcpy@plt>
   2f8d0:	fc5ff06f          	jal	zero,2f894 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x2b8>
      { return _M_dataplus._M_p; }
   2f8d4:	00050413          	addi	s0,a0,0
   2f8d8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2f8dc:	01010793          	addi	a5,sp,16
   2f8e0:	00f50463          	beq	a0,a5,2f8e8 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x30c>
   2f8e4:	ebde60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2f8e8:	00040513          	addi	a0,s0,0
   2f8ec:	8a4e70ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002f8f0 <dwarf::to_string[abi:cxx11](dwarf::section_type)>:
{
   2f8f0:	fb010113          	addi	sp,sp,-80
   2f8f4:	04113423          	sd	ra,72(sp)
   2f8f8:	04813023          	sd	s0,64(sp)
   2f8fc:	02913c23          	sd	s1,56(sp)
   2f900:	03213823          	sd	s2,48(sp)
   2f904:	03313423          	sd	s3,40(sp)
   2f908:	03413023          	sd	s4,32(sp)
   2f90c:	00050413          	addi	s0,a0,0
        switch (v) {
   2f910:	00b00793          	addi	a5,zero,11
   2f914:	24b7e863          	bltu	a5,a1,2fb64 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x274>
   2f918:	00259593          	slli	a1,a1,0x2
   2f91c:	0000b717          	auipc	a4,0xb
   2f920:	25870713          	addi	a4,a4,600 # 3ab74 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2094>
   2f924:	00e585b3          	add	a1,a1,a4
   2f928:	0005a783          	lw	a5,0(a1)
   2f92c:	00e787b3          	add	a5,a5,a4
   2f930:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f934:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f938:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f93c:	00000693          	addi	a3,zero,0
   2f940:	0000a617          	auipc	a2,0xa
   2f944:	92460613          	addi	a2,a2,-1756 # 39264 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x784>
   2f948:	0000a597          	auipc	a1,0xa
   2f94c:	90858593          	addi	a1,a1,-1784 # 39250 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x770>
   2f950:	00014317          	auipc	t1,0x14
   2f954:	9d033303          	ld	t1,-1584(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f958:	000300e7          	jalr	ra,0(t1)
}
   2f95c:	00040513          	addi	a0,s0,0
   2f960:	04813083          	ld	ra,72(sp)
   2f964:	04013403          	ld	s0,64(sp)
   2f968:	03813483          	ld	s1,56(sp)
   2f96c:	03013903          	ld	s2,48(sp)
   2f970:	02813983          	ld	s3,40(sp)
   2f974:	02013a03          	ld	s4,32(sp)
   2f978:	05010113          	addi	sp,sp,80
   2f97c:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f980:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f984:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f988:	00000693          	addi	a3,zero,0
   2f98c:	0000a617          	auipc	a2,0xa
   2f990:	8f160613          	addi	a2,a2,-1807 # 3927d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x79d>
   2f994:	0000a597          	auipc	a1,0xa
   2f998:	8d458593          	addi	a1,a1,-1836 # 39268 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x788>
   2f99c:	00014317          	auipc	t1,0x14
   2f9a0:	98433303          	ld	t1,-1660(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f9a4:	000300e7          	jalr	ra,0(t1)
   2f9a8:	fb5ff06f          	jal	zero,2f95c <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f9ac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f9b0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f9b4:	00000693          	addi	a3,zero,0
   2f9b8:	0000a617          	auipc	a2,0xa
   2f9bc:	8db60613          	addi	a2,a2,-1829 # 39293 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7b3>
   2f9c0:	0000a597          	auipc	a1,0xa
   2f9c4:	8c058593          	addi	a1,a1,-1856 # 39280 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7a0>
   2f9c8:	00014317          	auipc	t1,0x14
   2f9cc:	95833303          	ld	t1,-1704(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f9d0:	000300e7          	jalr	ra,0(t1)
   2f9d4:	f89ff06f          	jal	zero,2f95c <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f9d8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f9dc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f9e0:	00000693          	addi	a3,zero,0
   2f9e4:	0000a617          	auipc	a2,0xa
   2f9e8:	8c660613          	addi	a2,a2,-1850 # 392aa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7ca>
   2f9ec:	0000a597          	auipc	a1,0xa
   2f9f0:	8ac58593          	addi	a1,a1,-1876 # 39298 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7b8>
   2f9f4:	00014317          	auipc	t1,0x14
   2f9f8:	92c33303          	ld	t1,-1748(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2f9fc:	000300e7          	jalr	ra,0(t1)
   2fa00:	f5dff06f          	jal	zero,2f95c <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fa04:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fa08:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fa0c:	00000693          	addi	a3,zero,0
   2fa10:	0000a617          	auipc	a2,0xa
   2fa14:	8b260613          	addi	a2,a2,-1870 # 392c2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7e2>
   2fa18:	0000a597          	auipc	a1,0xa
   2fa1c:	89858593          	addi	a1,a1,-1896 # 392b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7d0>
   2fa20:	00014317          	auipc	t1,0x14
   2fa24:	90033303          	ld	t1,-1792(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2fa28:	000300e7          	jalr	ra,0(t1)
   2fa2c:	f31ff06f          	jal	zero,2f95c <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fa30:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fa34:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fa38:	00000693          	addi	a3,zero,0
   2fa3c:	0000a617          	auipc	a2,0xa
   2fa40:	89d60613          	addi	a2,a2,-1891 # 392d9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7f9>
   2fa44:	0000a597          	auipc	a1,0xa
   2fa48:	88458593          	addi	a1,a1,-1916 # 392c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7e8>
   2fa4c:	00014317          	auipc	t1,0x14
   2fa50:	8d433303          	ld	t1,-1836(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2fa54:	000300e7          	jalr	ra,0(t1)
   2fa58:	f05ff06f          	jal	zero,2f95c <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fa5c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fa60:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fa64:	00000693          	addi	a3,zero,0
   2fa68:	0000a617          	auipc	a2,0xa
   2fa6c:	88d60613          	addi	a2,a2,-1907 # 392f5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x815>
   2fa70:	0000a597          	auipc	a1,0xa
   2fa74:	87058593          	addi	a1,a1,-1936 # 392e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x800>
   2fa78:	00014317          	auipc	t1,0x14
   2fa7c:	8a833303          	ld	t1,-1880(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2fa80:	000300e7          	jalr	ra,0(t1)
   2fa84:	ed9ff06f          	jal	zero,2f95c <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fa88:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fa8c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fa90:	00000693          	addi	a3,zero,0
   2fa94:	0000a617          	auipc	a2,0xa
   2fa98:	87a60613          	addi	a2,a2,-1926 # 3930e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x82e>
   2fa9c:	0000a597          	auipc	a1,0xa
   2faa0:	85c58593          	addi	a1,a1,-1956 # 392f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x818>
   2faa4:	00014317          	auipc	t1,0x14
   2faa8:	87c33303          	ld	t1,-1924(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2faac:	000300e7          	jalr	ra,0(t1)
   2fab0:	eadff06f          	jal	zero,2f95c <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fab4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fab8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fabc:	00000693          	addi	a3,zero,0
   2fac0:	0000a617          	auipc	a2,0xa
   2fac4:	86660613          	addi	a2,a2,-1946 # 39326 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x846>
   2fac8:	0000a597          	auipc	a1,0xa
   2facc:	84858593          	addi	a1,a1,-1976 # 39310 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x830>
   2fad0:	00014317          	auipc	t1,0x14
   2fad4:	85033303          	ld	t1,-1968(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2fad8:	000300e7          	jalr	ra,0(t1)
   2fadc:	e81ff06f          	jal	zero,2f95c <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fae0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fae4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fae8:	00000693          	addi	a3,zero,0
   2faec:	0000a617          	auipc	a2,0xa
   2faf0:	85060613          	addi	a2,a2,-1968 # 3933c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x85c>
   2faf4:	0000a597          	auipc	a1,0xa
   2faf8:	83458593          	addi	a1,a1,-1996 # 39328 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x848>
   2fafc:	00014317          	auipc	t1,0x14
   2fb00:	82433303          	ld	t1,-2012(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2fb04:	000300e7          	jalr	ra,0(t1)
   2fb08:	e55ff06f          	jal	zero,2f95c <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fb0c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fb10:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fb14:	00000693          	addi	a3,zero,0
   2fb18:	0000a617          	auipc	a2,0xa
   2fb1c:	83960613          	addi	a2,a2,-1991 # 39351 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x871>
   2fb20:	0000a597          	auipc	a1,0xa
   2fb24:	82058593          	addi	a1,a1,-2016 # 39340 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x860>
   2fb28:	00013317          	auipc	t1,0x13
   2fb2c:	7f833303          	ld	t1,2040(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2fb30:	000300e7          	jalr	ra,0(t1)
   2fb34:	e29ff06f          	jal	zero,2f95c <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fb38:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fb3c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fb40:	00000693          	addi	a3,zero,0
   2fb44:	0000a617          	auipc	a2,0xa
   2fb48:	82760613          	addi	a2,a2,-2009 # 3936b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x88b>
   2fb4c:	0000a597          	auipc	a1,0xa
   2fb50:	80c58593          	addi	a1,a1,-2036 # 39358 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x878>
   2fb54:	00013317          	auipc	t1,0x13
   2fb58:	7cc33303          	ld	t1,1996(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2fb5c:	000300e7          	jalr	ra,0(t1)
   2fb60:	dfdff06f          	jal	zero,2f95c <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
    const bool __neg = __val < 0;
   2fb64:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2fb68:	0005891b          	addiw	s2,a1,0
   2fb6c:	0605ce63          	blt	a1,zero,2fbe8 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x2f8>
    const auto __len = __detail::__to_chars_len(__uval);
   2fb70:	00a00593          	addi	a1,zero,10
   2fb74:	00090513          	addi	a0,s2,0
   2fb78:	00014317          	auipc	t1,0x14
   2fb7c:	93833303          	ld	t1,-1736(t1) # 434b0 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x18174>
   2fb80:	000300e7          	jalr	ra,0(t1)
   2fb84:	00050a1b          	addiw	s4,a0,0
	: allocator_type(__a), _M_p(__dat) { }
   2fb88:	01010793          	addi	a5,sp,16
   2fb8c:	00f13023          	sd	a5,0(sp)
    string __str(__neg + __len, '-');
   2fb90:	00a985bb          	addw	a1,s3,a0
      { _M_construct(__n, __c); }
   2fb94:	02d00613          	addi	a2,zero,45
   2fb98:	02059593          	slli	a1,a1,0x20
   2fb9c:	0205d593          	srli	a1,a1,0x20
   2fba0:	00010493          	addi	s1,sp,0
   2fba4:	00048513          	addi	a0,s1,0
   2fba8:	c59e60ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   2fbac:	00090613          	addi	a2,s2,0
   2fbb0:	000a0593          	addi	a1,s4,0
   2fbb4:	00013503          	ld	a0,0(sp)
   2fbb8:	01350533          	add	a0,a0,s3
   2fbbc:	00014317          	auipc	t1,0x14
   2fbc0:	91433303          	ld	t1,-1772(t1) # 434d0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x180f8>
   2fbc4:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2fbc8:	00e00713          	addi	a4,zero,14
   2fbcc:	00009697          	auipc	a3,0x9
   2fbd0:	7a468693          	addi	a3,a3,1956 # 39370 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x890>
   2fbd4:	00000613          	addi	a2,zero,0
   2fbd8:	00000593          	addi	a1,zero,0
   2fbdc:	00048513          	addi	a0,s1,0
   2fbe0:	d21e60ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2fbe4:	00c0006f          	jal	zero,2fbf0 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x300>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2fbe8:	40b0093b          	subw	s2,zero,a1
   2fbec:	f85ff06f          	jal	zero,2fb70 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x280>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2fbf0:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fbf4:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2fbf8:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2fbfc:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2fc00:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2fc04:	03278c63          	beq	a5,s2,2fc3c <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x34c>
      { _M_dataplus._M_p = __p; }
   2fc08:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2fc0c:	0104b783          	ld	a5,16(s1)
   2fc10:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2fc14:	0084b783          	ld	a5,8(s1)
   2fc18:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2fc1c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2fc20:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2fc24:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2fc28:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2fc2c:	01010793          	addi	a5,sp,16
   2fc30:	d2f506e3          	beq	a0,a5,2f95c <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2fc34:	b6de60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2fc38:	d25ff06f          	jal	zero,2f95c <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2fc3c:	0084b603          	ld	a2,8(s1)
   2fc40:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2fc44:	fc0608e3          	beq	a2,zero,2fc14 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x324>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2fc48:	00090593          	addi	a1,s2,0
   2fc4c:	bf5e60ef          	jal	ra,16840 <memcpy@plt>
   2fc50:	fc5ff06f          	jal	zero,2fc14 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x324>
      { return _M_dataplus._M_p; }
   2fc54:	00050413          	addi	s0,a0,0
   2fc58:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2fc5c:	01010793          	addi	a5,sp,16
   2fc60:	00f50463          	beq	a0,a5,2fc68 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x378>
   2fc64:	b3de60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2fc68:	00040513          	addi	a0,s0,0
   2fc6c:	d25e60ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000002fc70 <dwarf::to_string[abi:cxx11](dwarf::value::type)>:
{
   2fc70:	fb010113          	addi	sp,sp,-80
   2fc74:	04113423          	sd	ra,72(sp)
   2fc78:	04813023          	sd	s0,64(sp)
   2fc7c:	02913c23          	sd	s1,56(sp)
   2fc80:	03213823          	sd	s2,48(sp)
   2fc84:	03313423          	sd	s3,40(sp)
   2fc88:	03413023          	sd	s4,32(sp)
   2fc8c:	00050413          	addi	s0,a0,0
        switch (v) {
   2fc90:	00d00793          	addi	a5,zero,13
   2fc94:	2ab7e463          	bltu	a5,a1,2ff3c <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x2cc>
   2fc98:	00259593          	slli	a1,a1,0x2
   2fc9c:	0000b717          	auipc	a4,0xb
   2fca0:	f0870713          	addi	a4,a4,-248 # 3aba4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x20c4>
   2fca4:	00e585b3          	add	a1,a1,a4
   2fca8:	0005a783          	lw	a5,0(a1)
   2fcac:	00e787b3          	add	a5,a5,a4
   2fcb0:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fcb4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fcb8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fcbc:	00000693          	addi	a3,zero,0
   2fcc0:	00009617          	auipc	a2,0x9
   2fcc4:	6d460613          	addi	a2,a2,1748 # 39394 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8b4>
   2fcc8:	00009597          	auipc	a1,0x9
   2fccc:	6b858593          	addi	a1,a1,1720 # 39380 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8a0>
   2fcd0:	00013317          	auipc	t1,0x13
   2fcd4:	65033303          	ld	t1,1616(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2fcd8:	000300e7          	jalr	ra,0(t1)
}
   2fcdc:	00040513          	addi	a0,s0,0
   2fce0:	04813083          	ld	ra,72(sp)
   2fce4:	04013403          	ld	s0,64(sp)
   2fce8:	03813483          	ld	s1,56(sp)
   2fcec:	03013903          	ld	s2,48(sp)
   2fcf0:	02813983          	ld	s3,40(sp)
   2fcf4:	02013a03          	ld	s4,32(sp)
   2fcf8:	05010113          	addi	sp,sp,80
   2fcfc:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fd00:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fd04:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fd08:	00000693          	addi	a3,zero,0
   2fd0c:	00009617          	auipc	a2,0x9
   2fd10:	6a060613          	addi	a2,a2,1696 # 393ac <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8cc>
   2fd14:	00009597          	auipc	a1,0x9
   2fd18:	68458593          	addi	a1,a1,1668 # 39398 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8b8>
   2fd1c:	00013317          	auipc	t1,0x13
   2fd20:	60433303          	ld	t1,1540(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2fd24:	000300e7          	jalr	ra,0(t1)
   2fd28:	fb5ff06f          	jal	zero,2fcdc <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fd2c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fd30:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fd34:	00000693          	addi	a3,zero,0
   2fd38:	00009617          	auipc	a2,0x9
   2fd3c:	68a60613          	addi	a2,a2,1674 # 393c2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8e2>
   2fd40:	00009597          	auipc	a1,0x9
   2fd44:	67058593          	addi	a1,a1,1648 # 393b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8d0>
   2fd48:	00013317          	auipc	t1,0x13
   2fd4c:	5d833303          	ld	t1,1496(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2fd50:	000300e7          	jalr	ra,0(t1)
   2fd54:	f89ff06f          	jal	zero,2fcdc <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fd58:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fd5c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fd60:	00000693          	addi	a3,zero,0
   2fd64:	00009617          	auipc	a2,0x9
   2fd68:	67960613          	addi	a2,a2,1657 # 393dd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8fd>
   2fd6c:	00009597          	auipc	a1,0x9
   2fd70:	65c58593          	addi	a1,a1,1628 # 393c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8e8>
   2fd74:	00013317          	auipc	t1,0x13
   2fd78:	5ac33303          	ld	t1,1452(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2fd7c:	000300e7          	jalr	ra,0(t1)
   2fd80:	f5dff06f          	jal	zero,2fcdc <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fd84:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fd88:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fd8c:	00000693          	addi	a3,zero,0
   2fd90:	00009617          	auipc	a2,0x9
   2fd94:	66660613          	addi	a2,a2,1638 # 393f6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x916>
   2fd98:	00009597          	auipc	a1,0x9
   2fd9c:	64858593          	addi	a1,a1,1608 # 393e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x900>
   2fda0:	00013317          	auipc	t1,0x13
   2fda4:	58033303          	ld	t1,1408(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2fda8:	000300e7          	jalr	ra,0(t1)
   2fdac:	f31ff06f          	jal	zero,2fcdc <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fdb0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fdb4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fdb8:	00000693          	addi	a3,zero,0
   2fdbc:	00009617          	auipc	a2,0x9
   2fdc0:	65260613          	addi	a2,a2,1618 # 3940e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x92e>
   2fdc4:	00009597          	auipc	a1,0x9
   2fdc8:	63458593          	addi	a1,a1,1588 # 393f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x918>
   2fdcc:	00013317          	auipc	t1,0x13
   2fdd0:	55433303          	ld	t1,1364(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2fdd4:	000300e7          	jalr	ra,0(t1)
   2fdd8:	f05ff06f          	jal	zero,2fcdc <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fddc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fde0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fde4:	00000693          	addi	a3,zero,0
   2fde8:	00009617          	auipc	a2,0x9
   2fdec:	63c60613          	addi	a2,a2,1596 # 39424 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x944>
   2fdf0:	00009597          	auipc	a1,0x9
   2fdf4:	62058593          	addi	a1,a1,1568 # 39410 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x930>
   2fdf8:	00013317          	auipc	t1,0x13
   2fdfc:	52833303          	ld	t1,1320(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2fe00:	000300e7          	jalr	ra,0(t1)
   2fe04:	ed9ff06f          	jal	zero,2fcdc <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fe08:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fe0c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fe10:	00000693          	addi	a3,zero,0
   2fe14:	00009617          	auipc	a2,0x9
   2fe18:	62560613          	addi	a2,a2,1573 # 39439 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x959>
   2fe1c:	00009597          	auipc	a1,0x9
   2fe20:	60c58593          	addi	a1,a1,1548 # 39428 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x948>
   2fe24:	00013317          	auipc	t1,0x13
   2fe28:	4fc33303          	ld	t1,1276(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2fe2c:	000300e7          	jalr	ra,0(t1)
   2fe30:	eadff06f          	jal	zero,2fcdc <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fe34:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fe38:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fe3c:	00000693          	addi	a3,zero,0
   2fe40:	00009617          	auipc	a2,0x9
   2fe44:	61160613          	addi	a2,a2,1553 # 39451 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x971>
   2fe48:	00009597          	auipc	a1,0x9
   2fe4c:	5f858593          	addi	a1,a1,1528 # 39440 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x960>
   2fe50:	00013317          	auipc	t1,0x13
   2fe54:	4d033303          	ld	t1,1232(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2fe58:	000300e7          	jalr	ra,0(t1)
   2fe5c:	e81ff06f          	jal	zero,2fcdc <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fe60:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fe64:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fe68:	00000693          	addi	a3,zero,0
   2fe6c:	00009617          	auipc	a2,0x9
   2fe70:	60060613          	addi	a2,a2,1536 # 3946c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x98c>
   2fe74:	00009597          	auipc	a1,0x9
   2fe78:	5e458593          	addi	a1,a1,1508 # 39458 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x978>
   2fe7c:	00013317          	auipc	t1,0x13
   2fe80:	4a433303          	ld	t1,1188(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2fe84:	000300e7          	jalr	ra,0(t1)
   2fe88:	e55ff06f          	jal	zero,2fcdc <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fe8c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fe90:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fe94:	00000693          	addi	a3,zero,0
   2fe98:	00009617          	auipc	a2,0x9
   2fe9c:	5e860613          	addi	a2,a2,1512 # 39480 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9a0>
   2fea0:	00009597          	auipc	a1,0x9
   2fea4:	5d058593          	addi	a1,a1,1488 # 39470 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x990>
   2fea8:	00013317          	auipc	t1,0x13
   2feac:	47833303          	ld	t1,1144(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2feb0:	000300e7          	jalr	ra,0(t1)
   2feb4:	e29ff06f          	jal	zero,2fcdc <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2feb8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2febc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fec0:	00000693          	addi	a3,zero,0
   2fec4:	00009617          	auipc	a2,0x9
   2fec8:	5da60613          	addi	a2,a2,1498 # 3949e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9be>
   2fecc:	00009597          	auipc	a1,0x9
   2fed0:	5bc58593          	addi	a1,a1,1468 # 39488 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9a8>
   2fed4:	00013317          	auipc	t1,0x13
   2fed8:	44c33303          	ld	t1,1100(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2fedc:	000300e7          	jalr	ra,0(t1)
   2fee0:	dfdff06f          	jal	zero,2fcdc <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fee4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fee8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2feec:	00000693          	addi	a3,zero,0
   2fef0:	00009617          	auipc	a2,0x9
   2fef4:	5c660613          	addi	a2,a2,1478 # 394b6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9d6>
   2fef8:	00009597          	auipc	a1,0x9
   2fefc:	5a858593          	addi	a1,a1,1448 # 394a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9c0>
   2ff00:	00013317          	auipc	t1,0x13
   2ff04:	42033303          	ld	t1,1056(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2ff08:	000300e7          	jalr	ra,0(t1)
   2ff0c:	dd1ff06f          	jal	zero,2fcdc <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ff10:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ff14:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ff18:	00000693          	addi	a3,zero,0
   2ff1c:	00009617          	auipc	a2,0x9
   2ff20:	5af60613          	addi	a2,a2,1455 # 394cb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9eb>
   2ff24:	00009597          	auipc	a1,0x9
   2ff28:	59458593          	addi	a1,a1,1428 # 394b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9d8>
   2ff2c:	00013317          	auipc	t1,0x13
   2ff30:	3f433303          	ld	t1,1012(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   2ff34:	000300e7          	jalr	ra,0(t1)
   2ff38:	da5ff06f          	jal	zero,2fcdc <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
    const bool __neg = __val < 0;
   2ff3c:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2ff40:	0005891b          	addiw	s2,a1,0
   2ff44:	0605ce63          	blt	a1,zero,2ffc0 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x350>
    const auto __len = __detail::__to_chars_len(__uval);
   2ff48:	00a00593          	addi	a1,zero,10
   2ff4c:	00090513          	addi	a0,s2,0
   2ff50:	00013317          	auipc	t1,0x13
   2ff54:	56033303          	ld	t1,1376(t1) # 434b0 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x18174>
   2ff58:	000300e7          	jalr	ra,0(t1)
   2ff5c:	00050a1b          	addiw	s4,a0,0
	: allocator_type(__a), _M_p(__dat) { }
   2ff60:	01010793          	addi	a5,sp,16
   2ff64:	00f13023          	sd	a5,0(sp)
    string __str(__neg + __len, '-');
   2ff68:	00a985bb          	addw	a1,s3,a0
      { _M_construct(__n, __c); }
   2ff6c:	02d00613          	addi	a2,zero,45
   2ff70:	02059593          	slli	a1,a1,0x20
   2ff74:	0205d593          	srli	a1,a1,0x20
   2ff78:	00010493          	addi	s1,sp,0
   2ff7c:	00048513          	addi	a0,s1,0
   2ff80:	881e60ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   2ff84:	00090613          	addi	a2,s2,0
   2ff88:	000a0593          	addi	a1,s4,0
   2ff8c:	00013503          	ld	a0,0(sp)
   2ff90:	01350533          	add	a0,a0,s3
   2ff94:	00013317          	auipc	t1,0x13
   2ff98:	53c33303          	ld	t1,1340(t1) # 434d0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x180f8>
   2ff9c:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2ffa0:	00d00713          	addi	a4,zero,13
   2ffa4:	00009697          	auipc	a3,0x9
   2ffa8:	52c68693          	addi	a3,a3,1324 # 394d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9f0>
   2ffac:	00000613          	addi	a2,zero,0
   2ffb0:	00000593          	addi	a1,zero,0
   2ffb4:	00048513          	addi	a0,s1,0
   2ffb8:	949e60ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2ffbc:	00c0006f          	jal	zero,2ffc8 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x358>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2ffc0:	40b0093b          	subw	s2,zero,a1
   2ffc4:	f85ff06f          	jal	zero,2ff48 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x2d8>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2ffc8:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ffcc:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2ffd0:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2ffd4:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2ffd8:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2ffdc:	03278c63          	beq	a5,s2,30014 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x3a4>
      { _M_dataplus._M_p = __p; }
   2ffe0:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2ffe4:	0104b783          	ld	a5,16(s1)
   2ffe8:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2ffec:	0084b783          	ld	a5,8(s1)
   2fff0:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2fff4:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2fff8:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2fffc:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   30000:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   30004:	01010793          	addi	a5,sp,16
   30008:	ccf50ae3          	beq	a0,a5,2fcdc <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   3000c:	f94e60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   30010:	ccdff06f          	jal	zero,2fcdc <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   30014:	0084b603          	ld	a2,8(s1)
   30018:	00160613          	addi	a2,a2,1
	if (__n == 0)
   3001c:	fc0608e3          	beq	a2,zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x37c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   30020:	00090593          	addi	a1,s2,0
   30024:	81de60ef          	jal	ra,16840 <memcpy@plt>
   30028:	fc5ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x37c>
      { return _M_dataplus._M_p; }
   3002c:	00050413          	addi	s0,a0,0
   30030:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   30034:	01010793          	addi	a5,sp,16
   30038:	00f50463          	beq	a0,a5,30040 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x3d0>
   3003c:	f64e60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   30040:	00040513          	addi	a0,s0,0
   30044:	94de60ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000030048 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)>:
{
   30048:	fc010113          	addi	sp,sp,-64
   3004c:	02113c23          	sd	ra,56(sp)
   30050:	02813823          	sd	s0,48(sp)
   30054:	02913423          	sd	s1,40(sp)
   30058:	03213023          	sd	s2,32(sp)
   3005c:	00050413          	addi	s0,a0,0
        switch (v) {
   30060:	01000793          	addi	a5,zero,16
   30064:	2eb7ec63          	bltu	a5,a1,3035c <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x314>
   30068:	00259793          	slli	a5,a1,0x2
   3006c:	0000b717          	auipc	a4,0xb
   30070:	b7070713          	addi	a4,a4,-1168 # 3abdc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x20fc>
   30074:	00e787b3          	add	a5,a5,a4
   30078:	0007a783          	lw	a5,0(a5)
   3007c:	00e787b3          	add	a5,a5,a4
   30080:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30084:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30088:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3008c:	00000693          	addi	a3,zero,0
   30090:	00009617          	auipc	a2,0x9
   30094:	45e60613          	addi	a2,a2,1118 # 394ee <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa0e>
   30098:	00009597          	auipc	a1,0x9
   3009c:	44858593          	addi	a1,a1,1096 # 394e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa00>
   300a0:	00013317          	auipc	t1,0x13
   300a4:	28033303          	ld	t1,640(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   300a8:	000300e7          	jalr	ra,0(t1)
}
   300ac:	00040513          	addi	a0,s0,0
   300b0:	03813083          	ld	ra,56(sp)
   300b4:	03013403          	ld	s0,48(sp)
   300b8:	02813483          	ld	s1,40(sp)
   300bc:	02013903          	ld	s2,32(sp)
   300c0:	04010113          	addi	sp,sp,64
   300c4:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   300c8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   300cc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   300d0:	00000693          	addi	a3,zero,0
   300d4:	00009617          	auipc	a2,0x9
   300d8:	42a60613          	addi	a2,a2,1066 # 394fe <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa1e>
   300dc:	00009597          	auipc	a1,0x9
   300e0:	41458593          	addi	a1,a1,1044 # 394f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa10>
   300e4:	00013317          	auipc	t1,0x13
   300e8:	23c33303          	ld	t1,572(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   300ec:	000300e7          	jalr	ra,0(t1)
   300f0:	fbdff06f          	jal	zero,300ac <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   300f4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   300f8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   300fc:	00000693          	addi	a3,zero,0
   30100:	00009617          	auipc	a2,0x9
   30104:	41460613          	addi	a2,a2,1044 # 39514 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa34>
   30108:	00009597          	auipc	a1,0x9
   3010c:	3f858593          	addi	a1,a1,1016 # 39500 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa20>
   30110:	00013317          	auipc	t1,0x13
   30114:	21033303          	ld	t1,528(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30118:	000300e7          	jalr	ra,0(t1)
   3011c:	f91ff06f          	jal	zero,300ac <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30120:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30124:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30128:	00000693          	addi	a3,zero,0
   3012c:	00009617          	auipc	a2,0x9
   30130:	3f860613          	addi	a2,a2,1016 # 39524 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa44>
   30134:	00009597          	auipc	a1,0x9
   30138:	3e458593          	addi	a1,a1,996 # 39518 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa38>
   3013c:	00013317          	auipc	t1,0x13
   30140:	1e433303          	ld	t1,484(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30144:	000300e7          	jalr	ra,0(t1)
   30148:	f65ff06f          	jal	zero,300ac <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3014c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30150:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30154:	00000693          	addi	a3,zero,0
   30158:	00009617          	auipc	a2,0x9
   3015c:	3dd60613          	addi	a2,a2,989 # 39535 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa55>
   30160:	00009597          	auipc	a1,0x9
   30164:	3c858593          	addi	a1,a1,968 # 39528 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa48>
   30168:	00013317          	auipc	t1,0x13
   3016c:	1b833303          	ld	t1,440(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30170:	000300e7          	jalr	ra,0(t1)
   30174:	f39ff06f          	jal	zero,300ac <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30178:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3017c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30180:	00000693          	addi	a3,zero,0
   30184:	00009617          	auipc	a2,0x9
   30188:	3c660613          	addi	a2,a2,966 # 3954a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa6a>
   3018c:	00009597          	auipc	a1,0x9
   30190:	3ac58593          	addi	a1,a1,940 # 39538 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa58>
   30194:	00013317          	auipc	t1,0x13
   30198:	18c33303          	ld	t1,396(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3019c:	000300e7          	jalr	ra,0(t1)
   301a0:	f0dff06f          	jal	zero,300ac <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   301a4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   301a8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   301ac:	00000693          	addi	a3,zero,0
   301b0:	00009617          	auipc	a2,0x9
   301b4:	3af60613          	addi	a2,a2,943 # 3955f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa7f>
   301b8:	00009597          	auipc	a1,0x9
   301bc:	39858593          	addi	a1,a1,920 # 39550 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa70>
   301c0:	00013317          	auipc	t1,0x13
   301c4:	16033303          	ld	t1,352(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   301c8:	000300e7          	jalr	ra,0(t1)
   301cc:	ee1ff06f          	jal	zero,300ac <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   301d0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   301d4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   301d8:	00000693          	addi	a3,zero,0
   301dc:	00009617          	auipc	a2,0x9
   301e0:	39860613          	addi	a2,a2,920 # 39574 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa94>
   301e4:	00009597          	auipc	a1,0x9
   301e8:	37c58593          	addi	a1,a1,892 # 39560 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa80>
   301ec:	00013317          	auipc	t1,0x13
   301f0:	13433303          	ld	t1,308(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   301f4:	000300e7          	jalr	ra,0(t1)
   301f8:	eb5ff06f          	jal	zero,300ac <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   301fc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30200:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30204:	00000693          	addi	a3,zero,0
   30208:	00009617          	auipc	a2,0x9
   3020c:	38660613          	addi	a2,a2,902 # 3958e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xaae>
   30210:	00009597          	auipc	a1,0x9
   30214:	36858593          	addi	a1,a1,872 # 39578 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa98>
   30218:	00013317          	auipc	t1,0x13
   3021c:	10833303          	ld	t1,264(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30220:	000300e7          	jalr	ra,0(t1)
   30224:	e89ff06f          	jal	zero,300ac <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30228:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3022c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30230:	00000693          	addi	a3,zero,0
   30234:	00009617          	auipc	a2,0x9
   30238:	37160613          	addi	a2,a2,881 # 395a5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xac5>
   3023c:	00009597          	auipc	a1,0x9
   30240:	35458593          	addi	a1,a1,852 # 39590 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xab0>
   30244:	00013317          	auipc	t1,0x13
   30248:	0dc33303          	ld	t1,220(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3024c:	000300e7          	jalr	ra,0(t1)
   30250:	e5dff06f          	jal	zero,300ac <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30254:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30258:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3025c:	00000693          	addi	a3,zero,0
   30260:	00009617          	auipc	a2,0x9
   30264:	35d60613          	addi	a2,a2,861 # 395bd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xadd>
   30268:	00009597          	auipc	a1,0x9
   3026c:	34058593          	addi	a1,a1,832 # 395a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xac8>
   30270:	00013317          	auipc	t1,0x13
   30274:	0b033303          	ld	t1,176(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30278:	000300e7          	jalr	ra,0(t1)
   3027c:	e31ff06f          	jal	zero,300ac <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30280:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30284:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30288:	00000693          	addi	a3,zero,0
   3028c:	00009617          	auipc	a2,0x9
   30290:	34160613          	addi	a2,a2,833 # 395cd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xaed>
   30294:	00009597          	auipc	a1,0x9
   30298:	32c58593          	addi	a1,a1,812 # 395c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xae0>
   3029c:	00013317          	auipc	t1,0x13
   302a0:	08433303          	ld	t1,132(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   302a4:	000300e7          	jalr	ra,0(t1)
   302a8:	e05ff06f          	jal	zero,300ac <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   302ac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   302b0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   302b4:	00000693          	addi	a3,zero,0
   302b8:	00009617          	auipc	a2,0x9
   302bc:	32b60613          	addi	a2,a2,811 # 395e3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb03>
   302c0:	00009597          	auipc	a1,0x9
   302c4:	31058593          	addi	a1,a1,784 # 395d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xaf0>
   302c8:	00013317          	auipc	t1,0x13
   302cc:	05833303          	ld	t1,88(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   302d0:	000300e7          	jalr	ra,0(t1)
   302d4:	dd9ff06f          	jal	zero,300ac <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   302d8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   302dc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   302e0:	00000693          	addi	a3,zero,0
   302e4:	00009617          	auipc	a2,0x9
   302e8:	31960613          	addi	a2,a2,793 # 395fd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb1d>
   302ec:	00009597          	auipc	a1,0x9
   302f0:	2fc58593          	addi	a1,a1,764 # 395e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb08>
   302f4:	00013317          	auipc	t1,0x13
   302f8:	02c33303          	ld	t1,44(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   302fc:	000300e7          	jalr	ra,0(t1)
   30300:	dadff06f          	jal	zero,300ac <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30304:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30308:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3030c:	00000693          	addi	a3,zero,0
   30310:	00009617          	auipc	a2,0x9
   30314:	30460613          	addi	a2,a2,772 # 39614 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb34>
   30318:	00009597          	auipc	a1,0x9
   3031c:	2e858593          	addi	a1,a1,744 # 39600 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb20>
   30320:	00013317          	auipc	t1,0x13
   30324:	00033303          	ld	t1,0(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30328:	000300e7          	jalr	ra,0(t1)
   3032c:	d81ff06f          	jal	zero,300ac <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30330:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30334:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30338:	00000693          	addi	a3,zero,0
   3033c:	00009617          	auipc	a2,0x9
   30340:	2e660613          	addi	a2,a2,742 # 39622 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb42>
   30344:	00009597          	auipc	a1,0x9
   30348:	2d458593          	addi	a1,a1,724 # 39618 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb38>
   3034c:	00013317          	auipc	t1,0x13
   30350:	fd433303          	ld	t1,-44(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30354:	000300e7          	jalr	ra,0(t1)
   30358:	d55ff06f          	jal	zero,300ac <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
        return "(DW_ATE)0x" + to_hex((int)v);
   3035c:	00010493          	addi	s1,sp,0
   30360:	00048513          	addi	a0,s1,0
   30364:	00013317          	auipc	t1,0x13
   30368:	0cc33303          	ld	t1,204(t1) # 43430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe24>
   3036c:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   30370:	00a00713          	addi	a4,zero,10
   30374:	00009697          	auipc	a3,0x9
   30378:	2b468693          	addi	a3,a3,692 # 39628 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb48>
   3037c:	00000613          	addi	a2,zero,0
   30380:	00000593          	addi	a1,zero,0
   30384:	00048513          	addi	a0,s1,0
   30388:	d78e60ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   3038c:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30390:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   30394:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   30398:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   3039c:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   303a0:	03278c63          	beq	a5,s2,303d8 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x390>
      { _M_dataplus._M_p = __p; }
   303a4:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   303a8:	0104b783          	ld	a5,16(s1)
   303ac:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   303b0:	0084b783          	ld	a5,8(s1)
   303b4:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   303b8:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   303bc:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   303c0:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   303c4:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   303c8:	01010793          	addi	a5,sp,16
   303cc:	cef500e3          	beq	a0,a5,300ac <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   303d0:	bd0e60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   303d4:	cd9ff06f          	jal	zero,300ac <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   303d8:	0084b603          	ld	a2,8(s1)
   303dc:	00160613          	addi	a2,a2,1
	if (__n == 0)
   303e0:	fc0608e3          	beq	a2,zero,303b0 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x368>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   303e4:	00090593          	addi	a1,s2,0
   303e8:	c58e60ef          	jal	ra,16840 <memcpy@plt>
   303ec:	fc5ff06f          	jal	zero,303b0 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x368>
      { return _M_dataplus._M_p; }
   303f0:	00050413          	addi	s0,a0,0
   303f4:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   303f8:	01010793          	addi	a5,sp,16
   303fc:	00f50463          	beq	a0,a5,30404 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x3bc>
   30400:	ba0e60ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   30404:	00040513          	addi	a0,s0,0
   30408:	d88e60ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000003040c <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)>:
{
   3040c:	fc010113          	addi	sp,sp,-64
   30410:	02113c23          	sd	ra,56(sp)
   30414:	02813823          	sd	s0,48(sp)
   30418:	02913423          	sd	s1,40(sp)
   3041c:	03213023          	sd	s2,32(sp)
   30420:	00050413          	addi	s0,a0,0
        switch (v) {
   30424:	01400793          	addi	a5,zero,20
   30428:	3ab7e463          	bltu	a5,a1,307d0 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x3c4>
   3042c:	00259793          	slli	a5,a1,0x2
   30430:	0000a717          	auipc	a4,0xa
   30434:	7f070713          	addi	a4,a4,2032 # 3ac20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2140>
   30438:	00e787b3          	add	a5,a5,a4
   3043c:	0007a783          	lw	a5,0(a5)
   30440:	00e787b3          	add	a5,a5,a4
   30444:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30448:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3044c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30450:	00000693          	addi	a3,zero,0
   30454:	00009617          	auipc	a2,0x9
   30458:	1ef60613          	addi	a2,a2,495 # 39643 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb63>
   3045c:	00009597          	auipc	a1,0x9
   30460:	1dc58593          	addi	a1,a1,476 # 39638 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb58>
   30464:	00013317          	auipc	t1,0x13
   30468:	ebc33303          	ld	t1,-324(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3046c:	000300e7          	jalr	ra,0(t1)
}
   30470:	00040513          	addi	a0,s0,0
   30474:	03813083          	ld	ra,56(sp)
   30478:	03013403          	ld	s0,48(sp)
   3047c:	02813483          	ld	s1,40(sp)
   30480:	02013903          	ld	s2,32(sp)
   30484:	04010113          	addi	sp,sp,64
   30488:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3048c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30490:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30494:	00000693          	addi	a3,zero,0
   30498:	00009617          	auipc	a2,0x9
   3049c:	1b960613          	addi	a2,a2,441 # 39651 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb71>
   304a0:	00009597          	auipc	a1,0x9
   304a4:	1a858593          	addi	a1,a1,424 # 39648 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb68>
   304a8:	00013317          	auipc	t1,0x13
   304ac:	e7833303          	ld	t1,-392(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   304b0:	000300e7          	jalr	ra,0(t1)
   304b4:	fbdff06f          	jal	zero,30470 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   304b8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   304bc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   304c0:	00000693          	addi	a3,zero,0
   304c4:	00009617          	auipc	a2,0x9
   304c8:	1a160613          	addi	a2,a2,417 # 39665 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb85>
   304cc:	00009597          	auipc	a1,0x9
   304d0:	18c58593          	addi	a1,a1,396 # 39658 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb78>
   304d4:	00013317          	auipc	t1,0x13
   304d8:	e4c33303          	ld	t1,-436(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   304dc:	000300e7          	jalr	ra,0(t1)
   304e0:	f91ff06f          	jal	zero,30470 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   304e4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   304e8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   304ec:	00000693          	addi	a3,zero,0
   304f0:	00009617          	auipc	a2,0x9
   304f4:	18b60613          	addi	a2,a2,395 # 3967b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb9b>
   304f8:	00009597          	auipc	a1,0x9
   304fc:	17058593          	addi	a1,a1,368 # 39668 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb88>
   30500:	00013317          	auipc	t1,0x13
   30504:	e2033303          	ld	t1,-480(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30508:	000300e7          	jalr	ra,0(t1)
   3050c:	f65ff06f          	jal	zero,30470 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30510:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30514:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30518:	00000693          	addi	a3,zero,0
   3051c:	00009617          	auipc	a2,0x9
   30520:	17360613          	addi	a2,a2,371 # 3968f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbaf>
   30524:	00009597          	auipc	a1,0x9
   30528:	15c58593          	addi	a1,a1,348 # 39680 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xba0>
   3052c:	00013317          	auipc	t1,0x13
   30530:	df433303          	ld	t1,-524(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30534:	000300e7          	jalr	ra,0(t1)
   30538:	f39ff06f          	jal	zero,30470 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3053c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30540:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30544:	00000693          	addi	a3,zero,0
   30548:	00009617          	auipc	a2,0x9
   3054c:	15760613          	addi	a2,a2,343 # 3969f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbbf>
   30550:	00009597          	auipc	a1,0x9
   30554:	14058593          	addi	a1,a1,320 # 39690 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbb0>
   30558:	00013317          	auipc	t1,0x13
   3055c:	dc833303          	ld	t1,-568(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30560:	000300e7          	jalr	ra,0(t1)
   30564:	f0dff06f          	jal	zero,30470 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30568:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3056c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30570:	00000693          	addi	a3,zero,0
   30574:	00009617          	auipc	a2,0x9
   30578:	13d60613          	addi	a2,a2,317 # 396b1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbd1>
   3057c:	00009597          	auipc	a1,0x9
   30580:	12458593          	addi	a1,a1,292 # 396a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbc0>
   30584:	00013317          	auipc	t1,0x13
   30588:	d9c33303          	ld	t1,-612(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3058c:	000300e7          	jalr	ra,0(t1)
   30590:	ee1ff06f          	jal	zero,30470 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30594:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30598:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3059c:	00000693          	addi	a3,zero,0
   305a0:	00009617          	auipc	a2,0x9
   305a4:	12960613          	addi	a2,a2,297 # 396c9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   305a8:	00009597          	auipc	a1,0x9
   305ac:	11058593          	addi	a1,a1,272 # 396b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbd8>
   305b0:	00013317          	auipc	t1,0x13
   305b4:	d7033303          	ld	t1,-656(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   305b8:	000300e7          	jalr	ra,0(t1)
   305bc:	eb5ff06f          	jal	zero,30470 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   305c0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   305c4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   305c8:	00000693          	addi	a3,zero,0
   305cc:	00009617          	auipc	a2,0x9
   305d0:	11460613          	addi	a2,a2,276 # 396e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc00>
   305d4:	00009597          	auipc	a1,0x9
   305d8:	0fc58593          	addi	a1,a1,252 # 396d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbf0>
   305dc:	00013317          	auipc	t1,0x13
   305e0:	d4433303          	ld	t1,-700(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   305e4:	000300e7          	jalr	ra,0(t1)
   305e8:	e89ff06f          	jal	zero,30470 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   305ec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   305f0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   305f4:	00000693          	addi	a3,zero,0
   305f8:	00009617          	auipc	a2,0x9
   305fc:	0ff60613          	addi	a2,a2,255 # 396f7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc17>
   30600:	00009597          	auipc	a1,0x9
   30604:	0e858593          	addi	a1,a1,232 # 396e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc08>
   30608:	00013317          	auipc	t1,0x13
   3060c:	d1833303          	ld	t1,-744(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30610:	000300e7          	jalr	ra,0(t1)
   30614:	e5dff06f          	jal	zero,30470 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30618:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3061c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30620:	00000693          	addi	a3,zero,0
   30624:	00009617          	auipc	a2,0x9
   30628:	0e060613          	addi	a2,a2,224 # 39704 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc24>
   3062c:	00009597          	auipc	a1,0x9
   30630:	0cc58593          	addi	a1,a1,204 # 396f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc18>
   30634:	00013317          	auipc	t1,0x13
   30638:	cec33303          	ld	t1,-788(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3063c:	000300e7          	jalr	ra,0(t1)
   30640:	e31ff06f          	jal	zero,30470 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30644:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30648:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3064c:	00000693          	addi	a3,zero,0
   30650:	00009617          	auipc	a2,0x9
   30654:	0c360613          	addi	a2,a2,195 # 39713 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc33>
   30658:	00009597          	auipc	a1,0x9
   3065c:	0b058593          	addi	a1,a1,176 # 39708 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc28>
   30660:	00013317          	auipc	t1,0x13
   30664:	cc033303          	ld	t1,-832(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30668:	000300e7          	jalr	ra,0(t1)
   3066c:	e05ff06f          	jal	zero,30470 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30670:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30674:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30678:	00000693          	addi	a3,zero,0
   3067c:	00009617          	auipc	a2,0x9
   30680:	0a960613          	addi	a2,a2,169 # 39725 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc45>
   30684:	00009597          	auipc	a1,0x9
   30688:	09458593          	addi	a1,a1,148 # 39718 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc38>
   3068c:	00013317          	auipc	t1,0x13
   30690:	c9433303          	ld	t1,-876(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30694:	000300e7          	jalr	ra,0(t1)
   30698:	dd9ff06f          	jal	zero,30470 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3069c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   306a0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   306a4:	00000693          	addi	a3,zero,0
   306a8:	00009617          	auipc	a2,0x9
   306ac:	09160613          	addi	a2,a2,145 # 39739 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc59>
   306b0:	00009597          	auipc	a1,0x9
   306b4:	07858593          	addi	a1,a1,120 # 39728 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc48>
   306b8:	00013317          	auipc	t1,0x13
   306bc:	c6833303          	ld	t1,-920(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   306c0:	000300e7          	jalr	ra,0(t1)
   306c4:	dadff06f          	jal	zero,30470 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   306c8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   306cc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   306d0:	00000693          	addi	a3,zero,0
   306d4:	00009617          	auipc	a2,0x9
   306d8:	07760613          	addi	a2,a2,119 # 3974b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc6b>
   306dc:	00009597          	auipc	a1,0x9
   306e0:	06458593          	addi	a1,a1,100 # 39740 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc60>
   306e4:	00013317          	auipc	t1,0x13
   306e8:	c3c33303          	ld	t1,-964(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   306ec:	000300e7          	jalr	ra,0(t1)
   306f0:	d81ff06f          	jal	zero,30470 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   306f4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   306f8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   306fc:	00000693          	addi	a3,zero,0
   30700:	00009617          	auipc	a2,0x9
   30704:	05c60613          	addi	a2,a2,92 # 3975c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc7c>
   30708:	00009597          	auipc	a1,0x9
   3070c:	04858593          	addi	a1,a1,72 # 39750 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc70>
   30710:	00013317          	auipc	t1,0x13
   30714:	c1033303          	ld	t1,-1008(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30718:	000300e7          	jalr	ra,0(t1)
   3071c:	d55ff06f          	jal	zero,30470 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30720:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30724:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30728:	00000693          	addi	a3,zero,0
   3072c:	00009617          	auipc	a2,0x9
   30730:	04a60613          	addi	a2,a2,74 # 39776 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc96>
   30734:	00009597          	auipc	a1,0x9
   30738:	02c58593          	addi	a1,a1,44 # 39760 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc80>
   3073c:	00013317          	auipc	t1,0x13
   30740:	be433303          	ld	t1,-1052(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30744:	000300e7          	jalr	ra,0(t1)
   30748:	d29ff06f          	jal	zero,30470 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3074c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30750:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30754:	00000693          	addi	a3,zero,0
   30758:	00009617          	auipc	a2,0x9
   3075c:	02b60613          	addi	a2,a2,43 # 39783 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xca3>
   30760:	00009597          	auipc	a1,0x9
   30764:	01858593          	addi	a1,a1,24 # 39778 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc98>
   30768:	00013317          	auipc	t1,0x13
   3076c:	bb833303          	ld	t1,-1096(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30770:	000300e7          	jalr	ra,0(t1)
   30774:	cfdff06f          	jal	zero,30470 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30778:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3077c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30780:	00000693          	addi	a3,zero,0
   30784:	00009617          	auipc	a2,0x9
   30788:	00d60613          	addi	a2,a2,13 # 39791 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcb1>
   3078c:	00009597          	auipc	a1,0x9
   30790:	ffc58593          	addi	a1,a1,-4 # 39788 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xca8>
   30794:	00013317          	auipc	t1,0x13
   30798:	b8c33303          	ld	t1,-1140(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3079c:	000300e7          	jalr	ra,0(t1)
   307a0:	cd1ff06f          	jal	zero,30470 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   307a4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   307a8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   307ac:	00000693          	addi	a3,zero,0
   307b0:	00009617          	auipc	a2,0x9
   307b4:	ff660613          	addi	a2,a2,-10 # 397a6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcc6>
   307b8:	00009597          	auipc	a1,0x9
   307bc:	fe058593          	addi	a1,a1,-32 # 39798 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcb8>
   307c0:	00013317          	auipc	t1,0x13
   307c4:	b6033303          	ld	t1,-1184(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   307c8:	000300e7          	jalr	ra,0(t1)
   307cc:	ca5ff06f          	jal	zero,30470 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
        return "(DW_LANG)0x" + to_hex((int)v);
   307d0:	00010493          	addi	s1,sp,0
   307d4:	00048513          	addi	a0,s1,0
   307d8:	00013317          	auipc	t1,0x13
   307dc:	c5833303          	ld	t1,-936(t1) # 43430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe24>
   307e0:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   307e4:	00b00713          	addi	a4,zero,11
   307e8:	00009697          	auipc	a3,0x9
   307ec:	fc068693          	addi	a3,a3,-64 # 397a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcc8>
   307f0:	00000613          	addi	a2,zero,0
   307f4:	00000593          	addi	a1,zero,0
   307f8:	00048513          	addi	a0,s1,0
   307fc:	904e60ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   30800:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30804:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   30808:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   3080c:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   30810:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   30814:	03278c63          	beq	a5,s2,3084c <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x440>
      { _M_dataplus._M_p = __p; }
   30818:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   3081c:	0104b783          	ld	a5,16(s1)
   30820:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   30824:	0084b783          	ld	a5,8(s1)
   30828:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   3082c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   30830:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   30834:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   30838:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   3083c:	01010793          	addi	a5,sp,16
   30840:	c2f508e3          	beq	a0,a5,30470 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   30844:	f5de50ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   30848:	c29ff06f          	jal	zero,30470 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   3084c:	0084b603          	ld	a2,8(s1)
   30850:	00160613          	addi	a2,a2,1
	if (__n == 0)
   30854:	fc0608e3          	beq	a2,zero,30824 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x418>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   30858:	00090593          	addi	a1,s2,0
   3085c:	fe5e50ef          	jal	ra,16840 <memcpy@plt>
   30860:	fc5ff06f          	jal	zero,30824 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x418>
      { return _M_dataplus._M_p; }
   30864:	00050413          	addi	s0,a0,0
   30868:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   3086c:	01010793          	addi	a5,sp,16
   30870:	00f50463          	beq	a0,a5,30878 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x46c>
   30874:	f2de50ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   30878:	00040513          	addi	a0,s0,0
   3087c:	914e60ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000030880 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)>:
{
   30880:	fc010113          	addi	sp,sp,-64
   30884:	02113c23          	sd	ra,56(sp)
   30888:	02813823          	sd	s0,48(sp)
   3088c:	02913423          	sd	s1,40(sp)
   30890:	03213023          	sd	s2,32(sp)
   30894:	00050413          	addi	s0,a0,0
        switch (v) {
   30898:	02000793          	addi	a5,zero,32
   3089c:	48b7e263          	bltu	a5,a1,30d20 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a0>
   308a0:	00259793          	slli	a5,a1,0x2
   308a4:	0000a717          	auipc	a4,0xa
   308a8:	3d070713          	addi	a4,a4,976 # 3ac74 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2194>
   308ac:	00e787b3          	add	a5,a5,a4
   308b0:	0007a783          	lw	a5,0(a5)
   308b4:	00e787b3          	add	a5,a5,a4
   308b8:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   308bc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   308c0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   308c4:	00000693          	addi	a3,zero,0
   308c8:	00009617          	auipc	a2,0x9
   308cc:	efc60613          	addi	a2,a2,-260 # 397c4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xce4>
   308d0:	00009597          	auipc	a1,0x9
   308d4:	ee858593          	addi	a1,a1,-280 # 397b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcd8>
   308d8:	00013317          	auipc	t1,0x13
   308dc:	a4833303          	ld	t1,-1464(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   308e0:	000300e7          	jalr	ra,0(t1)
}
   308e4:	00040513          	addi	a0,s0,0
   308e8:	03813083          	ld	ra,56(sp)
   308ec:	03013403          	ld	s0,48(sp)
   308f0:	02813483          	ld	s1,40(sp)
   308f4:	02013903          	ld	s2,32(sp)
   308f8:	04010113          	addi	sp,sp,64
   308fc:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30900:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30904:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30908:	00000693          	addi	a3,zero,0
   3090c:	00009617          	auipc	a2,0x9
   30910:	eca60613          	addi	a2,a2,-310 # 397d6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcf6>
   30914:	00009597          	auipc	a1,0x9
   30918:	eb458593          	addi	a1,a1,-332 # 397c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xce8>
   3091c:	00013317          	auipc	t1,0x13
   30920:	a0433303          	ld	t1,-1532(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30924:	000300e7          	jalr	ra,0(t1)
   30928:	fbdff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3092c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30930:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30934:	00000693          	addi	a3,zero,0
   30938:	00009617          	auipc	a2,0x9
   3093c:	eae60613          	addi	a2,a2,-338 # 397e6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd06>
   30940:	00009597          	auipc	a1,0x9
   30944:	e9858593          	addi	a1,a1,-360 # 397d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcf8>
   30948:	00013317          	auipc	t1,0x13
   3094c:	9d833303          	ld	t1,-1576(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30950:	000300e7          	jalr	ra,0(t1)
   30954:	f91ff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30958:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3095c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30960:	00000693          	addi	a3,zero,0
   30964:	00009617          	auipc	a2,0x9
   30968:	e9160613          	addi	a2,a2,-367 # 397f5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd15>
   3096c:	00009597          	auipc	a1,0x9
   30970:	e7c58593          	addi	a1,a1,-388 # 397e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd08>
   30974:	00013317          	auipc	t1,0x13
   30978:	9ac33303          	ld	t1,-1620(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3097c:	000300e7          	jalr	ra,0(t1)
   30980:	f65ff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30984:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30988:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3098c:	00000693          	addi	a3,zero,0
   30990:	00009617          	auipc	a2,0x9
   30994:	e7560613          	addi	a2,a2,-395 # 39805 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd25>
   30998:	00009597          	auipc	a1,0x9
   3099c:	e6058593          	addi	a1,a1,-416 # 397f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd18>
   309a0:	00013317          	auipc	t1,0x13
   309a4:	98033303          	ld	t1,-1664(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   309a8:	000300e7          	jalr	ra,0(t1)
   309ac:	f39ff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   309b0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   309b4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   309b8:	00000693          	addi	a3,zero,0
   309bc:	00009617          	auipc	a2,0x9
   309c0:	e5960613          	addi	a2,a2,-423 # 39815 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd35>
   309c4:	00009597          	auipc	a1,0x9
   309c8:	e4458593          	addi	a1,a1,-444 # 39808 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd28>
   309cc:	00013317          	auipc	t1,0x13
   309d0:	95433303          	ld	t1,-1708(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   309d4:	000300e7          	jalr	ra,0(t1)
   309d8:	f0dff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   309dc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   309e0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   309e4:	00000693          	addi	a3,zero,0
   309e8:	00009617          	auipc	a2,0x9
   309ec:	e3e60613          	addi	a2,a2,-450 # 39826 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd46>
   309f0:	00009597          	auipc	a1,0x9
   309f4:	e2858593          	addi	a1,a1,-472 # 39818 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd38>
   309f8:	00013317          	auipc	t1,0x13
   309fc:	92833303          	ld	t1,-1752(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30a00:	000300e7          	jalr	ra,0(t1)
   30a04:	ee1ff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30a08:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30a0c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30a10:	00000693          	addi	a3,zero,0
   30a14:	00009617          	auipc	a2,0x9
   30a18:	e2160613          	addi	a2,a2,-479 # 39835 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd55>
   30a1c:	00009597          	auipc	a1,0x9
   30a20:	e0c58593          	addi	a1,a1,-500 # 39828 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd48>
   30a24:	00013317          	auipc	t1,0x13
   30a28:	8fc33303          	ld	t1,-1796(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30a2c:	000300e7          	jalr	ra,0(t1)
   30a30:	eb5ff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30a34:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30a38:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30a3c:	00000693          	addi	a3,zero,0
   30a40:	00009617          	auipc	a2,0x9
   30a44:	e0660613          	addi	a2,a2,-506 # 39846 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd66>
   30a48:	00009597          	auipc	a1,0x9
   30a4c:	df058593          	addi	a1,a1,-528 # 39838 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd58>
   30a50:	00013317          	auipc	t1,0x13
   30a54:	8d033303          	ld	t1,-1840(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30a58:	000300e7          	jalr	ra,0(t1)
   30a5c:	e89ff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30a60:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30a64:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30a68:	00000693          	addi	a3,zero,0
   30a6c:	00009617          	auipc	a2,0x9
   30a70:	de960613          	addi	a2,a2,-535 # 39855 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd75>
   30a74:	00009597          	auipc	a1,0x9
   30a78:	dd458593          	addi	a1,a1,-556 # 39848 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd68>
   30a7c:	00013317          	auipc	t1,0x13
   30a80:	8a433303          	ld	t1,-1884(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30a84:	000300e7          	jalr	ra,0(t1)
   30a88:	e5dff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30a8c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30a90:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30a94:	00000693          	addi	a3,zero,0
   30a98:	00009617          	auipc	a2,0x9
   30a9c:	dcc60613          	addi	a2,a2,-564 # 39864 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd84>
   30aa0:	00009597          	auipc	a1,0x9
   30aa4:	db858593          	addi	a1,a1,-584 # 39858 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd78>
   30aa8:	00013317          	auipc	t1,0x13
   30aac:	87833303          	ld	t1,-1928(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30ab0:	000300e7          	jalr	ra,0(t1)
   30ab4:	e31ff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30ab8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30abc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30ac0:	00000693          	addi	a3,zero,0
   30ac4:	00009617          	auipc	a2,0x9
   30ac8:	db160613          	addi	a2,a2,-591 # 39875 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd95>
   30acc:	00009597          	auipc	a1,0x9
   30ad0:	d9c58593          	addi	a1,a1,-612 # 39868 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd88>
   30ad4:	00013317          	auipc	t1,0x13
   30ad8:	84c33303          	ld	t1,-1972(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30adc:	000300e7          	jalr	ra,0(t1)
   30ae0:	e05ff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30ae4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30ae8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30aec:	00000693          	addi	a3,zero,0
   30af0:	00009617          	auipc	a2,0x9
   30af4:	d9460613          	addi	a2,a2,-620 # 39884 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xda4>
   30af8:	00009597          	auipc	a1,0x9
   30afc:	d8058593          	addi	a1,a1,-640 # 39878 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd98>
   30b00:	00013317          	auipc	t1,0x13
   30b04:	82033303          	ld	t1,-2016(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30b08:	000300e7          	jalr	ra,0(t1)
   30b0c:	dd9ff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30b10:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30b14:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30b18:	00000693          	addi	a3,zero,0
   30b1c:	00009617          	auipc	a2,0x9
   30b20:	d7960613          	addi	a2,a2,-647 # 39895 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdb5>
   30b24:	00009597          	auipc	a1,0x9
   30b28:	d6458593          	addi	a1,a1,-668 # 39888 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xda8>
   30b2c:	00012317          	auipc	t1,0x12
   30b30:	7f433303          	ld	t1,2036(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30b34:	000300e7          	jalr	ra,0(t1)
   30b38:	dadff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30b3c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30b40:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30b44:	00000693          	addi	a3,zero,0
   30b48:	00009617          	auipc	a2,0x9
   30b4c:	d6060613          	addi	a2,a2,-672 # 398a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdc8>
   30b50:	00009597          	auipc	a1,0x9
   30b54:	d4858593          	addi	a1,a1,-696 # 39898 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdb8>
   30b58:	00012317          	auipc	t1,0x12
   30b5c:	7c833303          	ld	t1,1992(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30b60:	000300e7          	jalr	ra,0(t1)
   30b64:	d81ff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30b68:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30b6c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30b70:	00000693          	addi	a3,zero,0
   30b74:	00009617          	auipc	a2,0x9
   30b78:	d4860613          	addi	a2,a2,-696 # 398bc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xddc>
   30b7c:	00009597          	auipc	a1,0x9
   30b80:	d3458593          	addi	a1,a1,-716 # 398b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdd0>
   30b84:	00012317          	auipc	t1,0x12
   30b88:	79c33303          	ld	t1,1948(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30b8c:	000300e7          	jalr	ra,0(t1)
   30b90:	d55ff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30b94:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30b98:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30b9c:	00000693          	addi	a3,zero,0
   30ba0:	00009617          	auipc	a2,0x9
   30ba4:	d2c60613          	addi	a2,a2,-724 # 398cc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdec>
   30ba8:	00009597          	auipc	a1,0x9
   30bac:	d1858593          	addi	a1,a1,-744 # 398c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xde0>
   30bb0:	00012317          	auipc	t1,0x12
   30bb4:	77033303          	ld	t1,1904(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30bb8:	000300e7          	jalr	ra,0(t1)
   30bbc:	d29ff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30bc0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30bc4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30bc8:	00000693          	addi	a3,zero,0
   30bcc:	00009617          	auipc	a2,0x9
   30bd0:	d1060613          	addi	a2,a2,-752 # 398dc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdfc>
   30bd4:	00009597          	auipc	a1,0x9
   30bd8:	cfc58593          	addi	a1,a1,-772 # 398d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdf0>
   30bdc:	00012317          	auipc	t1,0x12
   30be0:	74433303          	ld	t1,1860(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30be4:	000300e7          	jalr	ra,0(t1)
   30be8:	cfdff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30bec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30bf0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30bf4:	00000693          	addi	a3,zero,0
   30bf8:	00009617          	auipc	a2,0x9
   30bfc:	cf460613          	addi	a2,a2,-780 # 398ec <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe0c>
   30c00:	00009597          	auipc	a1,0x9
   30c04:	ce058593          	addi	a1,a1,-800 # 398e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe00>
   30c08:	00012317          	auipc	t1,0x12
   30c0c:	71833303          	ld	t1,1816(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30c10:	000300e7          	jalr	ra,0(t1)
   30c14:	cd1ff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30c18:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30c1c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30c20:	00000693          	addi	a3,zero,0
   30c24:	00009617          	auipc	a2,0x9
   30c28:	cdd60613          	addi	a2,a2,-803 # 39901 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe21>
   30c2c:	00009597          	auipc	a1,0x9
   30c30:	cc458593          	addi	a1,a1,-828 # 398f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe10>
   30c34:	00012317          	auipc	t1,0x12
   30c38:	6ec33303          	ld	t1,1772(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30c3c:	000300e7          	jalr	ra,0(t1)
   30c40:	ca5ff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30c44:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30c48:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30c4c:	00000693          	addi	a3,zero,0
   30c50:	00009617          	auipc	a2,0x9
   30c54:	cc860613          	addi	a2,a2,-824 # 39918 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe38>
   30c58:	00009597          	auipc	a1,0x9
   30c5c:	cb058593          	addi	a1,a1,-848 # 39908 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe28>
   30c60:	00012317          	auipc	t1,0x12
   30c64:	6c033303          	ld	t1,1728(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30c68:	000300e7          	jalr	ra,0(t1)
   30c6c:	c79ff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30c70:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30c74:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30c78:	00000693          	addi	a3,zero,0
   30c7c:	00009617          	auipc	a2,0x9
   30c80:	cb660613          	addi	a2,a2,-842 # 39932 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe52>
   30c84:	00009597          	auipc	a1,0x9
   30c88:	c9c58593          	addi	a1,a1,-868 # 39920 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe40>
   30c8c:	00012317          	auipc	t1,0x12
   30c90:	69433303          	ld	t1,1684(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30c94:	000300e7          	jalr	ra,0(t1)
   30c98:	c4dff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30c9c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30ca0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30ca4:	00000693          	addi	a3,zero,0
   30ca8:	00009617          	auipc	a2,0x9
   30cac:	c9f60613          	addi	a2,a2,-865 # 39947 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe67>
   30cb0:	00009597          	auipc	a1,0x9
   30cb4:	c8858593          	addi	a1,a1,-888 # 39938 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe58>
   30cb8:	00012317          	auipc	t1,0x12
   30cbc:	66833303          	ld	t1,1640(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30cc0:	000300e7          	jalr	ra,0(t1)
   30cc4:	c21ff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30cc8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30ccc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30cd0:	00000693          	addi	a3,zero,0
   30cd4:	00009617          	auipc	a2,0x9
   30cd8:	c8860613          	addi	a2,a2,-888 # 3995c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe7c>
   30cdc:	00009597          	auipc	a1,0x9
   30ce0:	c6c58593          	addi	a1,a1,-916 # 39948 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe68>
   30ce4:	00012317          	auipc	t1,0x12
   30ce8:	63c33303          	ld	t1,1596(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30cec:	000300e7          	jalr	ra,0(t1)
   30cf0:	bf5ff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30cf4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30cf8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30cfc:	00000693          	addi	a3,zero,0
   30d00:	00009617          	auipc	a2,0x9
   30d04:	c7060613          	addi	a2,a2,-912 # 39970 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe90>
   30d08:	00009597          	auipc	a1,0x9
   30d0c:	c5858593          	addi	a1,a1,-936 # 39960 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe80>
   30d10:	00012317          	auipc	t1,0x12
   30d14:	61033303          	ld	t1,1552(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30d18:	000300e7          	jalr	ra,0(t1)
   30d1c:	bc9ff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
        return "(DW_FORM)0x" + to_hex((int)v);
   30d20:	00010493          	addi	s1,sp,0
   30d24:	00048513          	addi	a0,s1,0
   30d28:	00012317          	auipc	t1,0x12
   30d2c:	70833303          	ld	t1,1800(t1) # 43430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe24>
   30d30:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   30d34:	00b00713          	addi	a4,zero,11
   30d38:	00009697          	auipc	a3,0x9
   30d3c:	c4068693          	addi	a3,a3,-960 # 39978 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe98>
   30d40:	00000613          	addi	a2,zero,0
   30d44:	00000593          	addi	a1,zero,0
   30d48:	00048513          	addi	a0,s1,0
   30d4c:	bb5e50ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   30d50:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30d54:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   30d58:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   30d5c:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   30d60:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   30d64:	03278c63          	beq	a5,s2,30d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x51c>
      { _M_dataplus._M_p = __p; }
   30d68:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   30d6c:	0104b783          	ld	a5,16(s1)
   30d70:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   30d74:	0084b783          	ld	a5,8(s1)
   30d78:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   30d7c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   30d80:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   30d84:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   30d88:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   30d8c:	01010793          	addi	a5,sp,16
   30d90:	b4f50ae3          	beq	a0,a5,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   30d94:	a0de50ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   30d98:	b4dff06f          	jal	zero,308e4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   30d9c:	0084b603          	ld	a2,8(s1)
   30da0:	00160613          	addi	a2,a2,1
	if (__n == 0)
   30da4:	fc0608e3          	beq	a2,zero,30d74 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4f4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   30da8:	00090593          	addi	a1,s2,0
   30dac:	a95e50ef          	jal	ra,16840 <memcpy@plt>
   30db0:	fc5ff06f          	jal	zero,30d74 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4f4>
      { return _M_dataplus._M_p; }
   30db4:	00050413          	addi	s0,a0,0
   30db8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   30dbc:	01010793          	addi	a5,sp,16
   30dc0:	00f50463          	beq	a0,a5,30dc8 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x548>
   30dc4:	9dde50ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   30dc8:	00040513          	addi	a0,s0,0
   30dcc:	bc5e50ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000030dd0 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)>:
{
   30dd0:	fc010113          	addi	sp,sp,-64
   30dd4:	02113c23          	sd	ra,56(sp)
   30dd8:	02813823          	sd	s0,48(sp)
   30ddc:	02913423          	sd	s1,40(sp)
   30de0:	03213023          	sd	s2,32(sp)
   30de4:	00050413          	addi	s0,a0,0
        switch (v) {
   30de8:	04300793          	addi	a5,zero,67
   30dec:	28b7e4e3          	bltu	a5,a1,31874 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0xaa4>
   30df0:	00259793          	slli	a5,a1,0x2
   30df4:	0000a717          	auipc	a4,0xa
   30df8:	f0470713          	addi	a4,a4,-252 # 3acf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2218>
   30dfc:	00e787b3          	add	a5,a5,a4
   30e00:	0007a783          	lw	a5,0(a5)
   30e04:	00e787b3          	add	a5,a5,a4
   30e08:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30e0c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30e10:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30e14:	00000693          	addi	a3,zero,0
   30e18:	00009617          	auipc	a2,0x9
   30e1c:	b8160613          	addi	a2,a2,-1151 # 39999 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xeb9>
   30e20:	00009597          	auipc	a1,0x9
   30e24:	b6858593          	addi	a1,a1,-1176 # 39988 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xea8>
   30e28:	00012317          	auipc	t1,0x12
   30e2c:	4f833303          	ld	t1,1272(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30e30:	000300e7          	jalr	ra,0(t1)
}
   30e34:	00040513          	addi	a0,s0,0
   30e38:	03813083          	ld	ra,56(sp)
   30e3c:	03013403          	ld	s0,48(sp)
   30e40:	02813483          	ld	s1,40(sp)
   30e44:	02013903          	ld	s2,32(sp)
   30e48:	04010113          	addi	sp,sp,64
   30e4c:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30e50:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30e54:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30e58:	00000693          	addi	a3,zero,0
   30e5c:	00009617          	auipc	a2,0x9
   30e60:	b5560613          	addi	a2,a2,-1195 # 399b1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xed1>
   30e64:	00009597          	auipc	a1,0x9
   30e68:	b3c58593          	addi	a1,a1,-1220 # 399a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xec0>
   30e6c:	00012317          	auipc	t1,0x12
   30e70:	4b433303          	ld	t1,1204(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30e74:	000300e7          	jalr	ra,0(t1)
   30e78:	fbdff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30e7c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30e80:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30e84:	00000693          	addi	a3,zero,0
   30e88:	00009617          	auipc	a2,0x9
   30e8c:	b4260613          	addi	a2,a2,-1214 # 399ca <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xeea>
   30e90:	00009597          	auipc	a1,0x9
   30e94:	b2858593          	addi	a1,a1,-1240 # 399b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xed8>
   30e98:	00012317          	auipc	t1,0x12
   30e9c:	48833303          	ld	t1,1160(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30ea0:	000300e7          	jalr	ra,0(t1)
   30ea4:	f91ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30ea8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30eac:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30eb0:	00000693          	addi	a3,zero,0
   30eb4:	00009617          	auipc	a2,0x9
   30eb8:	b3360613          	addi	a2,a2,-1229 # 399e7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf07>
   30ebc:	00009597          	auipc	a1,0x9
   30ec0:	b1458593          	addi	a1,a1,-1260 # 399d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xef0>
   30ec4:	00012317          	auipc	t1,0x12
   30ec8:	45c33303          	ld	t1,1116(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30ecc:	000300e7          	jalr	ra,0(t1)
   30ed0:	f65ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30ed4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30ed8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30edc:	00000693          	addi	a3,zero,0
   30ee0:	00009617          	auipc	a2,0x9
   30ee4:	b1f60613          	addi	a2,a2,-1249 # 399ff <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf1f>
   30ee8:	00009597          	auipc	a1,0x9
   30eec:	b0058593          	addi	a1,a1,-1280 # 399e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf08>
   30ef0:	00012317          	auipc	t1,0x12
   30ef4:	43033303          	ld	t1,1072(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30ef8:	000300e7          	jalr	ra,0(t1)
   30efc:	f39ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30f00:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30f04:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30f08:	00000693          	addi	a3,zero,0
   30f0c:	00009617          	auipc	a2,0x9
   30f10:	b0f60613          	addi	a2,a2,-1265 # 39a1b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf3b>
   30f14:	00009597          	auipc	a1,0x9
   30f18:	aec58593          	addi	a1,a1,-1300 # 39a00 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf20>
   30f1c:	00012317          	auipc	t1,0x12
   30f20:	40433303          	ld	t1,1028(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30f24:	000300e7          	jalr	ra,0(t1)
   30f28:	f0dff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30f2c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30f30:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30f34:	00000693          	addi	a3,zero,0
   30f38:	00009617          	auipc	a2,0x9
   30f3c:	af460613          	addi	a2,a2,-1292 # 39a2c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf4c>
   30f40:	00009597          	auipc	a1,0x9
   30f44:	ae058593          	addi	a1,a1,-1312 # 39a20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf40>
   30f48:	00012317          	auipc	t1,0x12
   30f4c:	3d833303          	ld	t1,984(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30f50:	000300e7          	jalr	ra,0(t1)
   30f54:	ee1ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30f58:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30f5c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30f60:	00000693          	addi	a3,zero,0
   30f64:	00009617          	auipc	a2,0x9
   30f68:	ae060613          	addi	a2,a2,-1312 # 39a44 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf64>
   30f6c:	00009597          	auipc	a1,0x9
   30f70:	ac458593          	addi	a1,a1,-1340 # 39a30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf50>
   30f74:	00012317          	auipc	t1,0x12
   30f78:	3ac33303          	ld	t1,940(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30f7c:	000300e7          	jalr	ra,0(t1)
   30f80:	eb5ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30f84:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30f88:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30f8c:	00000693          	addi	a3,zero,0
   30f90:	00009617          	auipc	a2,0x9
   30f94:	ac560613          	addi	a2,a2,-1339 # 39a55 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf75>
   30f98:	00009597          	auipc	a1,0x9
   30f9c:	ab058593          	addi	a1,a1,-1360 # 39a48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf68>
   30fa0:	00012317          	auipc	t1,0x12
   30fa4:	38033303          	ld	t1,896(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30fa8:	000300e7          	jalr	ra,0(t1)
   30fac:	e89ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30fb0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30fb4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30fb8:	00000693          	addi	a3,zero,0
   30fbc:	00009617          	auipc	a2,0x9
   30fc0:	aaf60613          	addi	a2,a2,-1361 # 39a6b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf8b>
   30fc4:	00009597          	auipc	a1,0x9
   30fc8:	a9458593          	addi	a1,a1,-1388 # 39a58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf78>
   30fcc:	00012317          	auipc	t1,0x12
   30fd0:	35433303          	ld	t1,852(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   30fd4:	000300e7          	jalr	ra,0(t1)
   30fd8:	e5dff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30fdc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30fe0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30fe4:	00000693          	addi	a3,zero,0
   30fe8:	00009617          	auipc	a2,0x9
   30fec:	a9d60613          	addi	a2,a2,-1379 # 39a85 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfa5>
   30ff0:	00009597          	auipc	a1,0x9
   30ff4:	a8058593          	addi	a1,a1,-1408 # 39a70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf90>
   30ff8:	00012317          	auipc	t1,0x12
   30ffc:	32833303          	ld	t1,808(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31000:	000300e7          	jalr	ra,0(t1)
   31004:	e31ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31008:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3100c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31010:	00000693          	addi	a3,zero,0
   31014:	00009617          	auipc	a2,0x9
   31018:	a8760613          	addi	a2,a2,-1401 # 39a9b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfbb>
   3101c:	00009597          	auipc	a1,0x9
   31020:	a6c58593          	addi	a1,a1,-1428 # 39a88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfa8>
   31024:	00012317          	auipc	t1,0x12
   31028:	2fc33303          	ld	t1,764(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3102c:	000300e7          	jalr	ra,0(t1)
   31030:	e05ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31034:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31038:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3103c:	00000693          	addi	a3,zero,0
   31040:	00009617          	auipc	a2,0x9
   31044:	a7260613          	addi	a2,a2,-1422 # 39ab2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfd2>
   31048:	00009597          	auipc	a1,0x9
   3104c:	a5858593          	addi	a1,a1,-1448 # 39aa0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfc0>
   31050:	00012317          	auipc	t1,0x12
   31054:	2d033303          	ld	t1,720(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31058:	000300e7          	jalr	ra,0(t1)
   3105c:	dd9ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31060:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31064:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31068:	00000693          	addi	a3,zero,0
   3106c:	00009617          	auipc	a2,0x9
   31070:	a6160613          	addi	a2,a2,-1439 # 39acd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfed>
   31074:	00009597          	auipc	a1,0x9
   31078:	a4458593          	addi	a1,a1,-1468 # 39ab8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfd8>
   3107c:	00012317          	auipc	t1,0x12
   31080:	2a433303          	ld	t1,676(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31084:	000300e7          	jalr	ra,0(t1)
   31088:	dadff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3108c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31090:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31094:	00000693          	addi	a3,zero,0
   31098:	00009617          	auipc	a2,0x9
   3109c:	a4e60613          	addi	a2,a2,-1458 # 39ae6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1006>
   310a0:	00009597          	auipc	a1,0x9
   310a4:	a3058593          	addi	a1,a1,-1488 # 39ad0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xff0>
   310a8:	00012317          	auipc	t1,0x12
   310ac:	27833303          	ld	t1,632(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   310b0:	000300e7          	jalr	ra,0(t1)
   310b4:	d81ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   310b8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   310bc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   310c0:	00000693          	addi	a3,zero,0
   310c4:	00009617          	auipc	a2,0x9
   310c8:	a3260613          	addi	a2,a2,-1486 # 39af6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1016>
   310cc:	00009597          	auipc	a1,0x9
   310d0:	a1c58593          	addi	a1,a1,-1508 # 39ae8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1008>
   310d4:	00012317          	auipc	t1,0x12
   310d8:	24c33303          	ld	t1,588(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   310dc:	000300e7          	jalr	ra,0(t1)
   310e0:	d55ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   310e4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   310e8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   310ec:	00000693          	addi	a3,zero,0
   310f0:	00009617          	auipc	a2,0x9
   310f4:	a1960613          	addi	a2,a2,-1511 # 39b09 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1029>
   310f8:	00009597          	auipc	a1,0x9
   310fc:	a0058593          	addi	a1,a1,-1536 # 39af8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1018>
   31100:	00012317          	auipc	t1,0x12
   31104:	22033303          	ld	t1,544(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31108:	000300e7          	jalr	ra,0(t1)
   3110c:	d29ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31110:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31114:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31118:	00000693          	addi	a3,zero,0
   3111c:	00009617          	auipc	a2,0x9
   31120:	a1160613          	addi	a2,a2,-1519 # 39b2d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x104d>
   31124:	00009597          	auipc	a1,0x9
   31128:	9ec58593          	addi	a1,a1,-1556 # 39b10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1030>
   3112c:	00012317          	auipc	t1,0x12
   31130:	1f433303          	ld	t1,500(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31134:	000300e7          	jalr	ra,0(t1)
   31138:	cfdff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3113c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31140:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31144:	00000693          	addi	a3,zero,0
   31148:	00009617          	auipc	a2,0x9
   3114c:	9f660613          	addi	a2,a2,-1546 # 39b3e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x105e>
   31150:	00009597          	auipc	a1,0x9
   31154:	9e058593          	addi	a1,a1,-1568 # 39b30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1050>
   31158:	00012317          	auipc	t1,0x12
   3115c:	1c833303          	ld	t1,456(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31160:	000300e7          	jalr	ra,0(t1)
   31164:	cd1ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31168:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3116c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31170:	00000693          	addi	a3,zero,0
   31174:	00009617          	auipc	a2,0x9
   31178:	9df60613          	addi	a2,a2,-1569 # 39b53 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1073>
   3117c:	00009597          	auipc	a1,0x9
   31180:	9c458593          	addi	a1,a1,-1596 # 39b40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1060>
   31184:	00012317          	auipc	t1,0x12
   31188:	19c33303          	ld	t1,412(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3118c:	000300e7          	jalr	ra,0(t1)
   31190:	ca5ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31194:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31198:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3119c:	00000693          	addi	a3,zero,0
   311a0:	00009617          	auipc	a2,0x9
   311a4:	9cf60613          	addi	a2,a2,-1585 # 39b6f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x108f>
   311a8:	00009597          	auipc	a1,0x9
   311ac:	9b058593          	addi	a1,a1,-1616 # 39b58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1078>
   311b0:	00012317          	auipc	t1,0x12
   311b4:	17033303          	ld	t1,368(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   311b8:	000300e7          	jalr	ra,0(t1)
   311bc:	c79ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   311c0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   311c4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   311c8:	00000693          	addi	a3,zero,0
   311cc:	00009617          	auipc	a2,0x9
   311d0:	9b660613          	addi	a2,a2,-1610 # 39b82 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10a2>
   311d4:	00009597          	auipc	a1,0x9
   311d8:	99c58593          	addi	a1,a1,-1636 # 39b70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1090>
   311dc:	00012317          	auipc	t1,0x12
   311e0:	14433303          	ld	t1,324(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   311e4:	000300e7          	jalr	ra,0(t1)
   311e8:	c4dff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   311ec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   311f0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   311f4:	00000693          	addi	a3,zero,0
   311f8:	00009617          	auipc	a2,0x9
   311fc:	9a960613          	addi	a2,a2,-1623 # 39ba1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10c1>
   31200:	00009597          	auipc	a1,0x9
   31204:	98858593          	addi	a1,a1,-1656 # 39b88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10a8>
   31208:	00012317          	auipc	t1,0x12
   3120c:	11833303          	ld	t1,280(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31210:	000300e7          	jalr	ra,0(t1)
   31214:	c21ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31218:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3121c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31220:	00000693          	addi	a3,zero,0
   31224:	00009617          	auipc	a2,0x9
   31228:	99160613          	addi	a2,a2,-1647 # 39bb5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10d5>
   3122c:	00009597          	auipc	a1,0x9
   31230:	97c58593          	addi	a1,a1,-1668 # 39ba8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10c8>
   31234:	00012317          	auipc	t1,0x12
   31238:	0ec33303          	ld	t1,236(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3123c:	000300e7          	jalr	ra,0(t1)
   31240:	bf5ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31244:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31248:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3124c:	00000693          	addi	a3,zero,0
   31250:	00009617          	auipc	a2,0x9
   31254:	98160613          	addi	a2,a2,-1663 # 39bd1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10f1>
   31258:	00009597          	auipc	a1,0x9
   3125c:	96058593          	addi	a1,a1,-1696 # 39bb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10d8>
   31260:	00012317          	auipc	t1,0x12
   31264:	0c033303          	ld	t1,192(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31268:	000300e7          	jalr	ra,0(t1)
   3126c:	bc9ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31270:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31274:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31278:	00000693          	addi	a3,zero,0
   3127c:	00009617          	auipc	a2,0x9
   31280:	96b60613          	addi	a2,a2,-1685 # 39be7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1107>
   31284:	00009597          	auipc	a1,0x9
   31288:	95458593          	addi	a1,a1,-1708 # 39bd8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10f8>
   3128c:	00012317          	auipc	t1,0x12
   31290:	09433303          	ld	t1,148(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31294:	000300e7          	jalr	ra,0(t1)
   31298:	b9dff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3129c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   312a0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   312a4:	00000693          	addi	a3,zero,0
   312a8:	00009617          	auipc	a2,0x9
   312ac:	95460613          	addi	a2,a2,-1708 # 39bfc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x111c>
   312b0:	00009597          	auipc	a1,0x9
   312b4:	93858593          	addi	a1,a1,-1736 # 39be8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1108>
   312b8:	00012317          	auipc	t1,0x12
   312bc:	06833303          	ld	t1,104(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   312c0:	000300e7          	jalr	ra,0(t1)
   312c4:	b71ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   312c8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   312cc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   312d0:	00000693          	addi	a3,zero,0
   312d4:	00009617          	auipc	a2,0x9
   312d8:	93c60613          	addi	a2,a2,-1732 # 39c10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1130>
   312dc:	00009597          	auipc	a1,0x9
   312e0:	92458593          	addi	a1,a1,-1756 # 39c00 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1120>
   312e4:	00012317          	auipc	t1,0x12
   312e8:	03c33303          	ld	t1,60(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   312ec:	000300e7          	jalr	ra,0(t1)
   312f0:	b45ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   312f4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   312f8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   312fc:	00000693          	addi	a3,zero,0
   31300:	00009617          	auipc	a2,0x9
   31304:	93160613          	addi	a2,a2,-1743 # 39c31 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1151>
   31308:	00009597          	auipc	a1,0x9
   3130c:	91058593          	addi	a1,a1,-1776 # 39c18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1138>
   31310:	00012317          	auipc	t1,0x12
   31314:	01033303          	ld	t1,16(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31318:	000300e7          	jalr	ra,0(t1)
   3131c:	b19ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31320:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31324:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31328:	00000693          	addi	a3,zero,0
   3132c:	00009617          	auipc	a2,0x9
   31330:	91c60613          	addi	a2,a2,-1764 # 39c48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1168>
   31334:	00009597          	auipc	a1,0x9
   31338:	90458593          	addi	a1,a1,-1788 # 39c38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1158>
   3133c:	00012317          	auipc	t1,0x12
   31340:	fe433303          	ld	t1,-28(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31344:	000300e7          	jalr	ra,0(t1)
   31348:	aedff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3134c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31350:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31354:	00000693          	addi	a3,zero,0
   31358:	00009617          	auipc	a2,0x9
   3135c:	90a60613          	addi	a2,a2,-1782 # 39c62 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1182>
   31360:	00009597          	auipc	a1,0x9
   31364:	8f058593          	addi	a1,a1,-1808 # 39c50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1170>
   31368:	00012317          	auipc	t1,0x12
   3136c:	fb833303          	ld	t1,-72(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31370:	000300e7          	jalr	ra,0(t1)
   31374:	ac1ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31378:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3137c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31380:	00000693          	addi	a3,zero,0
   31384:	00009617          	auipc	a2,0x9
   31388:	8f560613          	addi	a2,a2,-1803 # 39c79 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1199>
   3138c:	00009597          	auipc	a1,0x9
   31390:	8dc58593          	addi	a1,a1,-1828 # 39c68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1188>
   31394:	00012317          	auipc	t1,0x12
   31398:	f8c33303          	ld	t1,-116(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3139c:	000300e7          	jalr	ra,0(t1)
   313a0:	a95ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   313a4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   313a8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   313ac:	00000693          	addi	a3,zero,0
   313b0:	00009617          	auipc	a2,0x9
   313b4:	8df60613          	addi	a2,a2,-1825 # 39c8f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11af>
   313b8:	00009597          	auipc	a1,0x9
   313bc:	8c858593          	addi	a1,a1,-1848 # 39c80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11a0>
   313c0:	00012317          	auipc	t1,0x12
   313c4:	f6033303          	ld	t1,-160(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   313c8:	000300e7          	jalr	ra,0(t1)
   313cc:	a69ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   313d0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   313d4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   313d8:	00000693          	addi	a3,zero,0
   313dc:	00009617          	auipc	a2,0x9
   313e0:	8c560613          	addi	a2,a2,-1851 # 39ca1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11c1>
   313e4:	00009597          	auipc	a1,0x9
   313e8:	8ac58593          	addi	a1,a1,-1876 # 39c90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11b0>
   313ec:	00012317          	auipc	t1,0x12
   313f0:	f3433303          	ld	t1,-204(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   313f4:	000300e7          	jalr	ra,0(t1)
   313f8:	a3dff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   313fc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31400:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31404:	00000693          	addi	a3,zero,0
   31408:	00009617          	auipc	a2,0x9
   3140c:	8b060613          	addi	a2,a2,-1872 # 39cb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11d8>
   31410:	00009597          	auipc	a1,0x9
   31414:	89858593          	addi	a1,a1,-1896 # 39ca8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11c8>
   31418:	00012317          	auipc	t1,0x12
   3141c:	f0833303          	ld	t1,-248(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31420:	000300e7          	jalr	ra,0(t1)
   31424:	a11ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31428:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3142c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31430:	00000693          	addi	a3,zero,0
   31434:	00009617          	auipc	a2,0x9
   31438:	89960613          	addi	a2,a2,-1895 # 39ccd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11ed>
   3143c:	00009597          	auipc	a1,0x9
   31440:	88458593          	addi	a1,a1,-1916 # 39cc0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11e0>
   31444:	00012317          	auipc	t1,0x12
   31448:	edc33303          	ld	t1,-292(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3144c:	000300e7          	jalr	ra,0(t1)
   31450:	9e5ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31454:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31458:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3145c:	00000693          	addi	a3,zero,0
   31460:	00009617          	auipc	a2,0x9
   31464:	87f60613          	addi	a2,a2,-1921 # 39cdf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11ff>
   31468:	00009597          	auipc	a1,0x9
   3146c:	86858593          	addi	a1,a1,-1944 # 39cd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11f0>
   31470:	00012317          	auipc	t1,0x12
   31474:	eb033303          	ld	t1,-336(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31478:	000300e7          	jalr	ra,0(t1)
   3147c:	9b9ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31480:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31484:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31488:	00000693          	addi	a3,zero,0
   3148c:	00009617          	auipc	a2,0x9
   31490:	86860613          	addi	a2,a2,-1944 # 39cf4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1214>
   31494:	00009597          	auipc	a1,0x9
   31498:	84c58593          	addi	a1,a1,-1972 # 39ce0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1200>
   3149c:	00012317          	auipc	t1,0x12
   314a0:	e8433303          	ld	t1,-380(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   314a4:	000300e7          	jalr	ra,0(t1)
   314a8:	98dff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   314ac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   314b0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   314b4:	00000693          	addi	a3,zero,0
   314b8:	00009617          	auipc	a2,0x9
   314bc:	85260613          	addi	a2,a2,-1966 # 39d0a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x122a>
   314c0:	00009597          	auipc	a1,0x9
   314c4:	83858593          	addi	a1,a1,-1992 # 39cf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1218>
   314c8:	00012317          	auipc	t1,0x12
   314cc:	e5833303          	ld	t1,-424(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   314d0:	000300e7          	jalr	ra,0(t1)
   314d4:	961ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   314d8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   314dc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   314e0:	00000693          	addi	a3,zero,0
   314e4:	00009617          	auipc	a2,0x9
   314e8:	83d60613          	addi	a2,a2,-1987 # 39d21 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1241>
   314ec:	00009597          	auipc	a1,0x9
   314f0:	82458593          	addi	a1,a1,-2012 # 39d10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1230>
   314f4:	00012317          	auipc	t1,0x12
   314f8:	e2c33303          	ld	t1,-468(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   314fc:	000300e7          	jalr	ra,0(t1)
   31500:	935ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31504:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31508:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3150c:	00000693          	addi	a3,zero,0
   31510:	00009617          	auipc	a2,0x9
   31514:	83660613          	addi	a2,a2,-1994 # 39d46 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1266>
   31518:	00009597          	auipc	a1,0x9
   3151c:	81058593          	addi	a1,a1,-2032 # 39d28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1248>
   31520:	00012317          	auipc	t1,0x12
   31524:	e0033303          	ld	t1,-512(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31528:	000300e7          	jalr	ra,0(t1)
   3152c:	909ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31530:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31534:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31538:	00000693          	addi	a3,zero,0
   3153c:	00009617          	auipc	a2,0x9
   31540:	82b60613          	addi	a2,a2,-2005 # 39d67 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1287>
   31544:	00009597          	auipc	a1,0x9
   31548:	80458593          	addi	a1,a1,-2044 # 39d48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1268>
   3154c:	00012317          	auipc	t1,0x12
   31550:	dd433303          	ld	t1,-556(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31554:	000300e7          	jalr	ra,0(t1)
   31558:	8ddff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3155c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31560:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31564:	00000693          	addi	a3,zero,0
   31568:	00009617          	auipc	a2,0x9
   3156c:	81260613          	addi	a2,a2,-2030 # 39d7a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x129a>
   31570:	00008597          	auipc	a1,0x8
   31574:	7f858593          	addi	a1,a1,2040 # 39d68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1288>
   31578:	00012317          	auipc	t1,0x12
   3157c:	da833303          	ld	t1,-600(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31580:	000300e7          	jalr	ra,0(t1)
   31584:	8b1ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31588:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3158c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31590:	00000693          	addi	a3,zero,0
   31594:	00008617          	auipc	a2,0x8
   31598:	7fc60613          	addi	a2,a2,2044 # 39d90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12b0>
   3159c:	00008597          	auipc	a1,0x8
   315a0:	7e458593          	addi	a1,a1,2020 # 39d80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12a0>
   315a4:	00012317          	auipc	t1,0x12
   315a8:	d7c33303          	ld	t1,-644(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   315ac:	000300e7          	jalr	ra,0(t1)
   315b0:	885ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   315b4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   315b8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   315bc:	00000693          	addi	a3,zero,0
   315c0:	00008617          	auipc	a2,0x8
   315c4:	7eb60613          	addi	a2,a2,2027 # 39dab <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12cb>
   315c8:	00008597          	auipc	a1,0x8
   315cc:	7d058593          	addi	a1,a1,2000 # 39d98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12b8>
   315d0:	00012317          	auipc	t1,0x12
   315d4:	d5033303          	ld	t1,-688(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   315d8:	000300e7          	jalr	ra,0(t1)
   315dc:	859ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   315e0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   315e4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   315e8:	00000693          	addi	a3,zero,0
   315ec:	00008617          	auipc	a2,0x8
   315f0:	7d360613          	addi	a2,a2,2003 # 39dbf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12df>
   315f4:	00008597          	auipc	a1,0x8
   315f8:	7bc58593          	addi	a1,a1,1980 # 39db0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12d0>
   315fc:	00012317          	auipc	t1,0x12
   31600:	d2433303          	ld	t1,-732(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31604:	000300e7          	jalr	ra,0(t1)
   31608:	82dff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3160c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31610:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31614:	00000693          	addi	a3,zero,0
   31618:	00008617          	auipc	a2,0x8
   3161c:	7bc60613          	addi	a2,a2,1980 # 39dd4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12f4>
   31620:	00008597          	auipc	a1,0x8
   31624:	7a058593          	addi	a1,a1,1952 # 39dc0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12e0>
   31628:	00012317          	auipc	t1,0x12
   3162c:	cf833303          	ld	t1,-776(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31630:	000300e7          	jalr	ra,0(t1)
   31634:	801ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31638:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3163c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31640:	00000693          	addi	a3,zero,0
   31644:	00008617          	auipc	a2,0x8
   31648:	7aa60613          	addi	a2,a2,1962 # 39dee <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x130e>
   3164c:	00008597          	auipc	a1,0x8
   31650:	78c58593          	addi	a1,a1,1932 # 39dd8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12f8>
   31654:	00012317          	auipc	t1,0x12
   31658:	ccc33303          	ld	t1,-820(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3165c:	000300e7          	jalr	ra,0(t1)
   31660:	fd4ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31664:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31668:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3166c:	00000693          	addi	a3,zero,0
   31670:	00008617          	auipc	a2,0x8
   31674:	79460613          	addi	a2,a2,1940 # 39e04 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1324>
   31678:	00008597          	auipc	a1,0x8
   3167c:	77858593          	addi	a1,a1,1912 # 39df0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1310>
   31680:	00012317          	auipc	t1,0x12
   31684:	ca033303          	ld	t1,-864(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31688:	000300e7          	jalr	ra,0(t1)
   3168c:	fa8ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31690:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31694:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31698:	00000693          	addi	a3,zero,0
   3169c:	00008617          	auipc	a2,0x8
   316a0:	78160613          	addi	a2,a2,1921 # 39e1d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x133d>
   316a4:	00008597          	auipc	a1,0x8
   316a8:	76458593          	addi	a1,a1,1892 # 39e08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1328>
   316ac:	00012317          	auipc	t1,0x12
   316b0:	c7433303          	ld	t1,-908(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   316b4:	000300e7          	jalr	ra,0(t1)
   316b8:	f7cff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   316bc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   316c0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   316c4:	00000693          	addi	a3,zero,0
   316c8:	00008617          	auipc	a2,0x8
   316cc:	76860613          	addi	a2,a2,1896 # 39e30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1350>
   316d0:	00008597          	auipc	a1,0x8
   316d4:	75058593          	addi	a1,a1,1872 # 39e20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1340>
   316d8:	00012317          	auipc	t1,0x12
   316dc:	c4833303          	ld	t1,-952(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   316e0:	000300e7          	jalr	ra,0(t1)
   316e4:	f50ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   316e8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   316ec:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   316f0:	00000693          	addi	a3,zero,0
   316f4:	00008617          	auipc	a2,0x8
   316f8:	75a60613          	addi	a2,a2,1882 # 39e4e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x136e>
   316fc:	00008597          	auipc	a1,0x8
   31700:	73c58593          	addi	a1,a1,1852 # 39e38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1358>
   31704:	00012317          	auipc	t1,0x12
   31708:	c1c33303          	ld	t1,-996(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3170c:	000300e7          	jalr	ra,0(t1)
   31710:	f24ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31714:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31718:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3171c:	00000693          	addi	a3,zero,0
   31720:	00008617          	auipc	a2,0x8
   31724:	74760613          	addi	a2,a2,1863 # 39e67 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1387>
   31728:	00008597          	auipc	a1,0x8
   3172c:	72858593          	addi	a1,a1,1832 # 39e50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1370>
   31730:	00012317          	auipc	t1,0x12
   31734:	bf033303          	ld	t1,-1040(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31738:	000300e7          	jalr	ra,0(t1)
   3173c:	ef8ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31740:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31744:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31748:	00000693          	addi	a3,zero,0
   3174c:	00008617          	auipc	a2,0x8
   31750:	72f60613          	addi	a2,a2,1839 # 39e7b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x139b>
   31754:	00008597          	auipc	a1,0x8
   31758:	71458593          	addi	a1,a1,1812 # 39e68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1388>
   3175c:	00012317          	auipc	t1,0x12
   31760:	bc433303          	ld	t1,-1084(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31764:	000300e7          	jalr	ra,0(t1)
   31768:	eccff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3176c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31770:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31774:	00000693          	addi	a3,zero,0
   31778:	00008617          	auipc	a2,0x8
   3177c:	71c60613          	addi	a2,a2,1820 # 39e94 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13b4>
   31780:	00008597          	auipc	a1,0x8
   31784:	70058593          	addi	a1,a1,1792 # 39e80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13a0>
   31788:	00012317          	auipc	t1,0x12
   3178c:	b9833303          	ld	t1,-1128(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31790:	000300e7          	jalr	ra,0(t1)
   31794:	ea0ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31798:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3179c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   317a0:	00000693          	addi	a3,zero,0
   317a4:	00008617          	auipc	a2,0x8
   317a8:	70460613          	addi	a2,a2,1796 # 39ea8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13c8>
   317ac:	00008597          	auipc	a1,0x8
   317b0:	6ec58593          	addi	a1,a1,1772 # 39e98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13b8>
   317b4:	00012317          	auipc	t1,0x12
   317b8:	b6c33303          	ld	t1,-1172(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   317bc:	000300e7          	jalr	ra,0(t1)
   317c0:	e74ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   317c4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   317c8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   317cc:	00000693          	addi	a3,zero,0
   317d0:	00008617          	auipc	a2,0x8
   317d4:	6f260613          	addi	a2,a2,1778 # 39ec2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13e2>
   317d8:	00008597          	auipc	a1,0x8
   317dc:	6d858593          	addi	a1,a1,1752 # 39eb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13d0>
   317e0:	00012317          	auipc	t1,0x12
   317e4:	b4033303          	ld	t1,-1216(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   317e8:	000300e7          	jalr	ra,0(t1)
   317ec:	e48ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   317f0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   317f4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   317f8:	00000693          	addi	a3,zero,0
   317fc:	00008617          	auipc	a2,0x8
   31800:	6dc60613          	addi	a2,a2,1756 # 39ed8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13f8>
   31804:	00008597          	auipc	a1,0x8
   31808:	6c458593          	addi	a1,a1,1732 # 39ec8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13e8>
   3180c:	00012317          	auipc	t1,0x12
   31810:	b1433303          	ld	t1,-1260(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31814:	000300e7          	jalr	ra,0(t1)
   31818:	e1cff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3181c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31820:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31824:	00000693          	addi	a3,zero,0
   31828:	00008617          	auipc	a2,0x8
   3182c:	6d460613          	addi	a2,a2,1748 # 39efc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x141c>
   31830:	00008597          	auipc	a1,0x8
   31834:	6b058593          	addi	a1,a1,1712 # 39ee0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1400>
   31838:	00012317          	auipc	t1,0x12
   3183c:	ae833303          	ld	t1,-1304(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31840:	000300e7          	jalr	ra,0(t1)
   31844:	df0ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31848:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3184c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31850:	00000693          	addi	a3,zero,0
   31854:	00008617          	auipc	a2,0x8
   31858:	6c160613          	addi	a2,a2,1729 # 39f15 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1435>
   3185c:	00008597          	auipc	a1,0x8
   31860:	6a458593          	addi	a1,a1,1700 # 39f00 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1420>
   31864:	00012317          	auipc	t1,0x12
   31868:	abc33303          	ld	t1,-1348(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3186c:	000300e7          	jalr	ra,0(t1)
   31870:	dc4ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
        return "(DW_TAG)0x" + to_hex((int)v);
   31874:	00010493          	addi	s1,sp,0
   31878:	00048513          	addi	a0,s1,0
   3187c:	00012317          	auipc	t1,0x12
   31880:	bb433303          	ld	t1,-1100(t1) # 43430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe24>
   31884:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   31888:	00a00713          	addi	a4,zero,10
   3188c:	00008697          	auipc	a3,0x8
   31890:	68c68693          	addi	a3,a3,1676 # 39f18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1438>
   31894:	00000613          	addi	a2,zero,0
   31898:	00000593          	addi	a1,zero,0
   3189c:	00048513          	addi	a0,s1,0
   318a0:	860e50ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   318a4:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   318a8:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   318ac:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   318b0:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   318b4:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   318b8:	03278c63          	beq	a5,s2,318f0 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0xb20>
      { _M_dataplus._M_p = __p; }
   318bc:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   318c0:	0104b783          	ld	a5,16(s1)
   318c4:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   318c8:	0084b783          	ld	a5,8(s1)
   318cc:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   318d0:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   318d4:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   318d8:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   318dc:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   318e0:	01010793          	addi	a5,sp,16
   318e4:	d4f50863          	beq	a0,a5,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   318e8:	eb9e40ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   318ec:	d48ff06f          	jal	zero,30e34 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   318f0:	0084b603          	ld	a2,8(s1)
   318f4:	00160613          	addi	a2,a2,1
	if (__n == 0)
   318f8:	fc0608e3          	beq	a2,zero,318c8 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0xaf8>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   318fc:	00090593          	addi	a1,s2,0
   31900:	f41e40ef          	jal	ra,16840 <memcpy@plt>
   31904:	fc5ff06f          	jal	zero,318c8 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0xaf8>
      { return _M_dataplus._M_p; }
   31908:	00050413          	addi	s0,a0,0
   3190c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   31910:	01010793          	addi	a5,sp,16
   31914:	00f50463          	beq	a0,a5,3191c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0xb4c>
   31918:	e89e40ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   3191c:	00040513          	addi	a0,s0,0
   31920:	870e50ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000031924 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>:
{
   31924:	fc010113          	addi	sp,sp,-64
   31928:	02113c23          	sd	ra,56(sp)
   3192c:	02813823          	sd	s0,48(sp)
   31930:	02913423          	sd	s1,40(sp)
   31934:	03213023          	sd	s2,32(sp)
   31938:	00050413          	addi	s0,a0,0
        switch (v) {
   3193c:	ffd5879b          	addiw	a5,a1,-3
   31940:	0ff7f693          	andi	a3,a5,255
   31944:	09c00713          	addi	a4,zero,156
   31948:	32d76ce3          	bltu	a4,a3,32480 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0xb5c>
   3194c:	00269793          	slli	a5,a3,0x2
   31950:	00009717          	auipc	a4,0x9
   31954:	4b870713          	addi	a4,a4,1208 # 3ae08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2328>
   31958:	00e787b3          	add	a5,a5,a4
   3195c:	0007a783          	lw	a5,0(a5)
   31960:	00e787b3          	add	a5,a5,a4
   31964:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31968:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3196c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31970:	00000693          	addi	a3,zero,0
   31974:	00008617          	auipc	a2,0x8
   31978:	5be60613          	addi	a2,a2,1470 # 39f32 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1452>
   3197c:	00008597          	auipc	a1,0x8
   31980:	5ac58593          	addi	a1,a1,1452 # 39f28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1448>
   31984:	00012317          	auipc	t1,0x12
   31988:	99c33303          	ld	t1,-1636(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3198c:	000300e7          	jalr	ra,0(t1)
}
   31990:	00040513          	addi	a0,s0,0
   31994:	03813083          	ld	ra,56(sp)
   31998:	03013403          	ld	s0,48(sp)
   3199c:	02813483          	ld	s1,40(sp)
   319a0:	02013903          	ld	s2,32(sp)
   319a4:	04010113          	addi	sp,sp,64
   319a8:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   319ac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   319b0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   319b4:	00000693          	addi	a3,zero,0
   319b8:	00008617          	auipc	a2,0x8
   319bc:	58b60613          	addi	a2,a2,1419 # 39f43 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1463>
   319c0:	00008597          	auipc	a1,0x8
   319c4:	57858593          	addi	a1,a1,1400 # 39f38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1458>
   319c8:	00012317          	auipc	t1,0x12
   319cc:	95833303          	ld	t1,-1704(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   319d0:	000300e7          	jalr	ra,0(t1)
   319d4:	fbdff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   319d8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   319dc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   319e0:	00000693          	addi	a3,zero,0
   319e4:	00008617          	auipc	a2,0x8
   319e8:	57160613          	addi	a2,a2,1393 # 39f55 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1475>
   319ec:	00008597          	auipc	a1,0x8
   319f0:	55c58593          	addi	a1,a1,1372 # 39f48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1468>
   319f4:	00012317          	auipc	t1,0x12
   319f8:	92c33303          	ld	t1,-1748(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   319fc:	000300e7          	jalr	ra,0(t1)
   31a00:	f91ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31a04:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31a08:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31a0c:	00000693          	addi	a3,zero,0
   31a10:	00008617          	auipc	a2,0x8
   31a14:	55560613          	addi	a2,a2,1365 # 39f65 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1485>
   31a18:	00008597          	auipc	a1,0x8
   31a1c:	54058593          	addi	a1,a1,1344 # 39f58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1478>
   31a20:	00012317          	auipc	t1,0x12
   31a24:	90033303          	ld	t1,-1792(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31a28:	000300e7          	jalr	ra,0(t1)
   31a2c:	f65ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31a30:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31a34:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31a38:	00000693          	addi	a3,zero,0
   31a3c:	00008617          	auipc	a2,0x8
   31a40:	53960613          	addi	a2,a2,1337 # 39f75 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1495>
   31a44:	00008597          	auipc	a1,0x8
   31a48:	52458593          	addi	a1,a1,1316 # 39f68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1488>
   31a4c:	00012317          	auipc	t1,0x12
   31a50:	8d433303          	ld	t1,-1836(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31a54:	000300e7          	jalr	ra,0(t1)
   31a58:	f39ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31a5c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31a60:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31a64:	00000693          	addi	a3,zero,0
   31a68:	00008617          	auipc	a2,0x8
   31a6c:	51d60613          	addi	a2,a2,1309 # 39f85 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14a5>
   31a70:	00008597          	auipc	a1,0x8
   31a74:	50858593          	addi	a1,a1,1288 # 39f78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1498>
   31a78:	00012317          	auipc	t1,0x12
   31a7c:	8a833303          	ld	t1,-1880(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31a80:	000300e7          	jalr	ra,0(t1)
   31a84:	f0dff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31a88:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31a8c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31a90:	00000693          	addi	a3,zero,0
   31a94:	00008617          	auipc	a2,0x8
   31a98:	50160613          	addi	a2,a2,1281 # 39f95 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14b5>
   31a9c:	00008597          	auipc	a1,0x8
   31aa0:	4ec58593          	addi	a1,a1,1260 # 39f88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14a8>
   31aa4:	00012317          	auipc	t1,0x12
   31aa8:	87c33303          	ld	t1,-1924(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31aac:	000300e7          	jalr	ra,0(t1)
   31ab0:	ee1ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31ab4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31ab8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31abc:	00000693          	addi	a3,zero,0
   31ac0:	00008617          	auipc	a2,0x8
   31ac4:	4e560613          	addi	a2,a2,1253 # 39fa5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14c5>
   31ac8:	00008597          	auipc	a1,0x8
   31acc:	4d058593          	addi	a1,a1,1232 # 39f98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14b8>
   31ad0:	00012317          	auipc	t1,0x12
   31ad4:	85033303          	ld	t1,-1968(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31ad8:	000300e7          	jalr	ra,0(t1)
   31adc:	eb5ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31ae0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31ae4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31ae8:	00000693          	addi	a3,zero,0
   31aec:	00008617          	auipc	a2,0x8
   31af0:	4c960613          	addi	a2,a2,1225 # 39fb5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14d5>
   31af4:	00008597          	auipc	a1,0x8
   31af8:	4b458593          	addi	a1,a1,1204 # 39fa8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14c8>
   31afc:	00012317          	auipc	t1,0x12
   31b00:	82433303          	ld	t1,-2012(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31b04:	000300e7          	jalr	ra,0(t1)
   31b08:	e89ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31b0c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31b10:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31b14:	00000693          	addi	a3,zero,0
   31b18:	00008617          	auipc	a2,0x8
   31b1c:	4ad60613          	addi	a2,a2,1197 # 39fc5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14e5>
   31b20:	00008597          	auipc	a1,0x8
   31b24:	49858593          	addi	a1,a1,1176 # 39fb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14d8>
   31b28:	00011317          	auipc	t1,0x11
   31b2c:	7f833303          	ld	t1,2040(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31b30:	000300e7          	jalr	ra,0(t1)
   31b34:	e5dff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31b38:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31b3c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31b40:	00000693          	addi	a3,zero,0
   31b44:	00008617          	auipc	a2,0x8
   31b48:	49060613          	addi	a2,a2,1168 # 39fd4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14f4>
   31b4c:	00008597          	auipc	a1,0x8
   31b50:	47c58593          	addi	a1,a1,1148 # 39fc8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14e8>
   31b54:	00011317          	auipc	t1,0x11
   31b58:	7cc33303          	ld	t1,1996(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31b5c:	000300e7          	jalr	ra,0(t1)
   31b60:	e31ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31b64:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31b68:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31b6c:	00000693          	addi	a3,zero,0
   31b70:	00008617          	auipc	a2,0x8
   31b74:	47460613          	addi	a2,a2,1140 # 39fe4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1504>
   31b78:	00008597          	auipc	a1,0x8
   31b7c:	46058593          	addi	a1,a1,1120 # 39fd8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14f8>
   31b80:	00011317          	auipc	t1,0x11
   31b84:	7a033303          	ld	t1,1952(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31b88:	000300e7          	jalr	ra,0(t1)
   31b8c:	e05ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31b90:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31b94:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31b98:	00000693          	addi	a3,zero,0
   31b9c:	00008617          	auipc	a2,0x8
   31ba0:	45560613          	addi	a2,a2,1109 # 39ff1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1511>
   31ba4:	00008597          	auipc	a1,0x8
   31ba8:	44458593          	addi	a1,a1,1092 # 39fe8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1508>
   31bac:	00011317          	auipc	t1,0x11
   31bb0:	77433303          	ld	t1,1908(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31bb4:	000300e7          	jalr	ra,0(t1)
   31bb8:	dd9ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31bbc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31bc0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31bc4:	00000693          	addi	a3,zero,0
   31bc8:	00008617          	auipc	a2,0x8
   31bcc:	43a60613          	addi	a2,a2,1082 # 3a002 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1522>
   31bd0:	00008597          	auipc	a1,0x8
   31bd4:	42858593          	addi	a1,a1,1064 # 39ff8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1518>
   31bd8:	00011317          	auipc	t1,0x11
   31bdc:	74833303          	ld	t1,1864(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31be0:	000300e7          	jalr	ra,0(t1)
   31be4:	dadff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31be8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31bec:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31bf0:	00000693          	addi	a3,zero,0
   31bf4:	00008617          	auipc	a2,0x8
   31bf8:	41e60613          	addi	a2,a2,1054 # 3a012 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1532>
   31bfc:	00008597          	auipc	a1,0x8
   31c00:	40c58593          	addi	a1,a1,1036 # 3a008 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1528>
   31c04:	00011317          	auipc	t1,0x11
   31c08:	71c33303          	ld	t1,1820(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31c0c:	000300e7          	jalr	ra,0(t1)
   31c10:	d81ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31c14:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31c18:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31c1c:	00000693          	addi	a3,zero,0
   31c20:	00008617          	auipc	a2,0x8
   31c24:	40260613          	addi	a2,a2,1026 # 3a022 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1542>
   31c28:	00008597          	auipc	a1,0x8
   31c2c:	3f058593          	addi	a1,a1,1008 # 3a018 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1538>
   31c30:	00011317          	auipc	t1,0x11
   31c34:	6f033303          	ld	t1,1776(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31c38:	000300e7          	jalr	ra,0(t1)
   31c3c:	d55ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31c40:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31c44:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31c48:	00000693          	addi	a3,zero,0
   31c4c:	00008617          	auipc	a2,0x8
   31c50:	3e660613          	addi	a2,a2,998 # 3a032 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1552>
   31c54:	00008597          	auipc	a1,0x8
   31c58:	3d458593          	addi	a1,a1,980 # 3a028 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1548>
   31c5c:	00011317          	auipc	t1,0x11
   31c60:	6c433303          	ld	t1,1732(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31c64:	000300e7          	jalr	ra,0(t1)
   31c68:	d29ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31c6c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31c70:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31c74:	00000693          	addi	a3,zero,0
   31c78:	00008617          	auipc	a2,0x8
   31c7c:	3c960613          	addi	a2,a2,969 # 3a041 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1561>
   31c80:	00008597          	auipc	a1,0x8
   31c84:	3b858593          	addi	a1,a1,952 # 3a038 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1558>
   31c88:	00011317          	auipc	t1,0x11
   31c8c:	69833303          	ld	t1,1688(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31c90:	000300e7          	jalr	ra,0(t1)
   31c94:	cfdff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31c98:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31c9c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31ca0:	00000693          	addi	a3,zero,0
   31ca4:	00008617          	auipc	a2,0x8
   31ca8:	3b060613          	addi	a2,a2,944 # 3a054 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1574>
   31cac:	00008597          	auipc	a1,0x8
   31cb0:	39c58593          	addi	a1,a1,924 # 3a048 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1568>
   31cb4:	00011317          	auipc	t1,0x11
   31cb8:	66c33303          	ld	t1,1644(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31cbc:	000300e7          	jalr	ra,0(t1)
   31cc0:	cd1ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31cc4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31cc8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31ccc:	00000693          	addi	a3,zero,0
   31cd0:	00008617          	auipc	a2,0x8
   31cd4:	39160613          	addi	a2,a2,913 # 3a061 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1581>
   31cd8:	00008597          	auipc	a1,0x8
   31cdc:	38058593          	addi	a1,a1,896 # 3a058 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1578>
   31ce0:	00011317          	auipc	t1,0x11
   31ce4:	64033303          	ld	t1,1600(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31ce8:	000300e7          	jalr	ra,0(t1)
   31cec:	ca5ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31cf0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31cf4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31cf8:	00000693          	addi	a3,zero,0
   31cfc:	00008617          	auipc	a2,0x8
   31d00:	37560613          	addi	a2,a2,885 # 3a071 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1591>
   31d04:	00008597          	auipc	a1,0x8
   31d08:	36458593          	addi	a1,a1,868 # 3a068 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1588>
   31d0c:	00011317          	auipc	t1,0x11
   31d10:	61433303          	ld	t1,1556(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31d14:	000300e7          	jalr	ra,0(t1)
   31d18:	c79ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31d1c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31d20:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31d24:	00000693          	addi	a3,zero,0
   31d28:	00008617          	auipc	a2,0x8
   31d2c:	35960613          	addi	a2,a2,857 # 3a081 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15a1>
   31d30:	00008597          	auipc	a1,0x8
   31d34:	34858593          	addi	a1,a1,840 # 3a078 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1598>
   31d38:	00011317          	auipc	t1,0x11
   31d3c:	5e833303          	ld	t1,1512(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31d40:	000300e7          	jalr	ra,0(t1)
   31d44:	c4dff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31d48:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31d4c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31d50:	00000693          	addi	a3,zero,0
   31d54:	00008617          	auipc	a2,0x8
   31d58:	33f60613          	addi	a2,a2,831 # 3a093 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15b3>
   31d5c:	00008597          	auipc	a1,0x8
   31d60:	32c58593          	addi	a1,a1,812 # 3a088 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15a8>
   31d64:	00011317          	auipc	t1,0x11
   31d68:	5bc33303          	ld	t1,1468(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31d6c:	000300e7          	jalr	ra,0(t1)
   31d70:	c21ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31d74:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31d78:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31d7c:	00000693          	addi	a3,zero,0
   31d80:	00008617          	auipc	a2,0x8
   31d84:	32160613          	addi	a2,a2,801 # 3a0a1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15c1>
   31d88:	00008597          	auipc	a1,0x8
   31d8c:	31058593          	addi	a1,a1,784 # 3a098 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15b8>
   31d90:	00011317          	auipc	t1,0x11
   31d94:	59033303          	ld	t1,1424(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31d98:	000300e7          	jalr	ra,0(t1)
   31d9c:	bf5ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31da0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31da4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31da8:	00000693          	addi	a3,zero,0
   31dac:	00008617          	auipc	a2,0x8
   31db0:	30560613          	addi	a2,a2,773 # 3a0b1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15d1>
   31db4:	00008597          	auipc	a1,0x8
   31db8:	2f458593          	addi	a1,a1,756 # 3a0a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15c8>
   31dbc:	00011317          	auipc	t1,0x11
   31dc0:	56433303          	ld	t1,1380(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31dc4:	000300e7          	jalr	ra,0(t1)
   31dc8:	bc9ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31dcc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31dd0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31dd4:	00000693          	addi	a3,zero,0
   31dd8:	00008617          	auipc	a2,0x8
   31ddc:	2e960613          	addi	a2,a2,745 # 3a0c1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15e1>
   31de0:	00008597          	auipc	a1,0x8
   31de4:	2d858593          	addi	a1,a1,728 # 3a0b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15d8>
   31de8:	00011317          	auipc	t1,0x11
   31dec:	53833303          	ld	t1,1336(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31df0:	000300e7          	jalr	ra,0(t1)
   31df4:	b9dff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31df8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31dfc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31e00:	00000693          	addi	a3,zero,0
   31e04:	00008617          	auipc	a2,0x8
   31e08:	2cd60613          	addi	a2,a2,717 # 3a0d1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15f1>
   31e0c:	00008597          	auipc	a1,0x8
   31e10:	2bc58593          	addi	a1,a1,700 # 3a0c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15e8>
   31e14:	00011317          	auipc	t1,0x11
   31e18:	50c33303          	ld	t1,1292(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31e1c:	000300e7          	jalr	ra,0(t1)
   31e20:	b71ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31e24:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31e28:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31e2c:	00000693          	addi	a3,zero,0
   31e30:	00008617          	auipc	a2,0x8
   31e34:	2b060613          	addi	a2,a2,688 # 3a0e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1600>
   31e38:	00008597          	auipc	a1,0x8
   31e3c:	2a058593          	addi	a1,a1,672 # 3a0d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15f8>
   31e40:	00011317          	auipc	t1,0x11
   31e44:	4e033303          	ld	t1,1248(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31e48:	000300e7          	jalr	ra,0(t1)
   31e4c:	b45ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31e50:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31e54:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31e58:	00000693          	addi	a3,zero,0
   31e5c:	00008617          	auipc	a2,0x8
   31e60:	29660613          	addi	a2,a2,662 # 3a0f2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1612>
   31e64:	00008597          	auipc	a1,0x8
   31e68:	28458593          	addi	a1,a1,644 # 3a0e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1608>
   31e6c:	00011317          	auipc	t1,0x11
   31e70:	4b433303          	ld	t1,1204(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31e74:	000300e7          	jalr	ra,0(t1)
   31e78:	b19ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31e7c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31e80:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31e84:	00000693          	addi	a3,zero,0
   31e88:	00008617          	auipc	a2,0x8
   31e8c:	28160613          	addi	a2,a2,641 # 3a109 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1629>
   31e90:	00008597          	auipc	a1,0x8
   31e94:	26858593          	addi	a1,a1,616 # 3a0f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1618>
   31e98:	00011317          	auipc	t1,0x11
   31e9c:	48833303          	ld	t1,1160(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31ea0:	000300e7          	jalr	ra,0(t1)
   31ea4:	aedff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31ea8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31eac:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31eb0:	00000693          	addi	a3,zero,0
   31eb4:	00008617          	auipc	a2,0x8
   31eb8:	26560613          	addi	a2,a2,613 # 3a119 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1639>
   31ebc:	00008597          	auipc	a1,0x8
   31ec0:	25458593          	addi	a1,a1,596 # 3a110 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1630>
   31ec4:	00011317          	auipc	t1,0x11
   31ec8:	45c33303          	ld	t1,1116(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31ecc:	000300e7          	jalr	ra,0(t1)
   31ed0:	ac1ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31ed4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31ed8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31edc:	00000693          	addi	a3,zero,0
   31ee0:	00008617          	auipc	a2,0x8
   31ee4:	24960613          	addi	a2,a2,585 # 3a129 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1649>
   31ee8:	00008597          	auipc	a1,0x8
   31eec:	23858593          	addi	a1,a1,568 # 3a120 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1640>
   31ef0:	00011317          	auipc	t1,0x11
   31ef4:	43033303          	ld	t1,1072(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31ef8:	000300e7          	jalr	ra,0(t1)
   31efc:	a95ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31f00:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31f04:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31f08:	00000693          	addi	a3,zero,0
   31f0c:	00008617          	auipc	a2,0x8
   31f10:	22e60613          	addi	a2,a2,558 # 3a13a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x165a>
   31f14:	00008597          	auipc	a1,0x8
   31f18:	21c58593          	addi	a1,a1,540 # 3a130 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1650>
   31f1c:	00011317          	auipc	t1,0x11
   31f20:	40433303          	ld	t1,1028(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31f24:	000300e7          	jalr	ra,0(t1)
   31f28:	a69ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31f2c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31f30:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31f34:	00000693          	addi	a3,zero,0
   31f38:	00008617          	auipc	a2,0x8
   31f3c:	21160613          	addi	a2,a2,529 # 3a149 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1669>
   31f40:	00008597          	auipc	a1,0x8
   31f44:	20058593          	addi	a1,a1,512 # 3a140 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1660>
   31f48:	00011317          	auipc	t1,0x11
   31f4c:	3d833303          	ld	t1,984(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31f50:	000300e7          	jalr	ra,0(t1)
   31f54:	a3dff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31f58:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31f5c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31f60:	00000693          	addi	a3,zero,0
   31f64:	00008617          	auipc	a2,0x8
   31f68:	1f660613          	addi	a2,a2,502 # 3a15a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x167a>
   31f6c:	00008597          	auipc	a1,0x8
   31f70:	1e458593          	addi	a1,a1,484 # 3a150 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1670>
   31f74:	00011317          	auipc	t1,0x11
   31f78:	3ac33303          	ld	t1,940(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31f7c:	000300e7          	jalr	ra,0(t1)
   31f80:	a11ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31f84:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31f88:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31f8c:	00000693          	addi	a3,zero,0
   31f90:	00008617          	auipc	a2,0x8
   31f94:	1d960613          	addi	a2,a2,473 # 3a169 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1689>
   31f98:	00008597          	auipc	a1,0x8
   31f9c:	1c858593          	addi	a1,a1,456 # 3a160 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1680>
   31fa0:	00011317          	auipc	t1,0x11
   31fa4:	38033303          	ld	t1,896(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31fa8:	000300e7          	jalr	ra,0(t1)
   31fac:	9e5ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31fb0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31fb4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31fb8:	00000693          	addi	a3,zero,0
   31fbc:	00008617          	auipc	a2,0x8
   31fc0:	1bc60613          	addi	a2,a2,444 # 3a178 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1698>
   31fc4:	00008597          	auipc	a1,0x8
   31fc8:	1ac58593          	addi	a1,a1,428 # 3a170 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1690>
   31fcc:	00011317          	auipc	t1,0x11
   31fd0:	35433303          	ld	t1,852(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   31fd4:	000300e7          	jalr	ra,0(t1)
   31fd8:	9b9ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31fdc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31fe0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31fe4:	00000693          	addi	a3,zero,0
   31fe8:	00008617          	auipc	a2,0x8
   31fec:	1a060613          	addi	a2,a2,416 # 3a188 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16a8>
   31ff0:	00008597          	auipc	a1,0x8
   31ff4:	19058593          	addi	a1,a1,400 # 3a180 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16a0>
   31ff8:	00011317          	auipc	t1,0x11
   31ffc:	32833303          	ld	t1,808(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32000:	000300e7          	jalr	ra,0(t1)
   32004:	98dff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32008:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3200c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32010:	00000693          	addi	a3,zero,0
   32014:	00008617          	auipc	a2,0x8
   32018:	18460613          	addi	a2,a2,388 # 3a198 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16b8>
   3201c:	00008597          	auipc	a1,0x8
   32020:	17458593          	addi	a1,a1,372 # 3a190 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16b0>
   32024:	00011317          	auipc	t1,0x11
   32028:	2fc33303          	ld	t1,764(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3202c:	000300e7          	jalr	ra,0(t1)
   32030:	961ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32034:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32038:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3203c:	00000693          	addi	a3,zero,0
   32040:	00008617          	auipc	a2,0x8
   32044:	16860613          	addi	a2,a2,360 # 3a1a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16c8>
   32048:	00008597          	auipc	a1,0x8
   3204c:	15858593          	addi	a1,a1,344 # 3a1a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16c0>
   32050:	00011317          	auipc	t1,0x11
   32054:	2d033303          	ld	t1,720(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32058:	000300e7          	jalr	ra,0(t1)
   3205c:	935ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32060:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32064:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32068:	00000693          	addi	a3,zero,0
   3206c:	00008617          	auipc	a2,0x8
   32070:	14c60613          	addi	a2,a2,332 # 3a1b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16d8>
   32074:	00008597          	auipc	a1,0x8
   32078:	13c58593          	addi	a1,a1,316 # 3a1b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16d0>
   3207c:	00011317          	auipc	t1,0x11
   32080:	2a433303          	ld	t1,676(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32084:	000300e7          	jalr	ra,0(t1)
   32088:	909ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3208c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32090:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32094:	00000693          	addi	a3,zero,0
   32098:	00008617          	auipc	a2,0x8
   3209c:	13060613          	addi	a2,a2,304 # 3a1c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16e8>
   320a0:	00008597          	auipc	a1,0x8
   320a4:	12058593          	addi	a1,a1,288 # 3a1c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16e0>
   320a8:	00011317          	auipc	t1,0x11
   320ac:	27833303          	ld	t1,632(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   320b0:	000300e7          	jalr	ra,0(t1)
   320b4:	8ddff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   320b8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   320bc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   320c0:	00000693          	addi	a3,zero,0
   320c4:	00008617          	auipc	a2,0x8
   320c8:	11660613          	addi	a2,a2,278 # 3a1da <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16fa>
   320cc:	00008597          	auipc	a1,0x8
   320d0:	10458593          	addi	a1,a1,260 # 3a1d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16f0>
   320d4:	00011317          	auipc	t1,0x11
   320d8:	24c33303          	ld	t1,588(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   320dc:	000300e7          	jalr	ra,0(t1)
   320e0:	8b1ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   320e4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   320e8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   320ec:	00000693          	addi	a3,zero,0
   320f0:	00008617          	auipc	a2,0x8
   320f4:	0fb60613          	addi	a2,a2,251 # 3a1eb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x170b>
   320f8:	00008597          	auipc	a1,0x8
   320fc:	0e858593          	addi	a1,a1,232 # 3a1e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1700>
   32100:	00011317          	auipc	t1,0x11
   32104:	22033303          	ld	t1,544(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32108:	000300e7          	jalr	ra,0(t1)
   3210c:	885ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32110:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32114:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32118:	00000693          	addi	a3,zero,0
   3211c:	00008617          	auipc	a2,0x8
   32120:	0de60613          	addi	a2,a2,222 # 3a1fa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x171a>
   32124:	00008597          	auipc	a1,0x8
   32128:	0cc58593          	addi	a1,a1,204 # 3a1f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1710>
   3212c:	00011317          	auipc	t1,0x11
   32130:	1f433303          	ld	t1,500(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32134:	000300e7          	jalr	ra,0(t1)
   32138:	859ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3213c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32140:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32144:	00000693          	addi	a3,zero,0
   32148:	00008617          	auipc	a2,0x8
   3214c:	0c360613          	addi	a2,a2,195 # 3a20b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x172b>
   32150:	00008597          	auipc	a1,0x8
   32154:	0b058593          	addi	a1,a1,176 # 3a200 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1720>
   32158:	00011317          	auipc	t1,0x11
   3215c:	1c833303          	ld	t1,456(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32160:	000300e7          	jalr	ra,0(t1)
   32164:	82dff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32168:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3216c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32170:	00000693          	addi	a3,zero,0
   32174:	00008617          	auipc	a2,0x8
   32178:	0a760613          	addi	a2,a2,167 # 3a21b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x173b>
   3217c:	00008597          	auipc	a1,0x8
   32180:	09458593          	addi	a1,a1,148 # 3a210 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1730>
   32184:	00011317          	auipc	t1,0x11
   32188:	19c33303          	ld	t1,412(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3218c:	000300e7          	jalr	ra,0(t1)
   32190:	801ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32194:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32198:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3219c:	00000693          	addi	a3,zero,0
   321a0:	00008617          	auipc	a2,0x8
   321a4:	08c60613          	addi	a2,a2,140 # 3a22c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x174c>
   321a8:	00008597          	auipc	a1,0x8
   321ac:	07858593          	addi	a1,a1,120 # 3a220 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1740>
   321b0:	00011317          	auipc	t1,0x11
   321b4:	17033303          	ld	t1,368(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   321b8:	000300e7          	jalr	ra,0(t1)
   321bc:	fd4ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   321c0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   321c4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   321c8:	00000693          	addi	a3,zero,0
   321cc:	00008617          	auipc	a2,0x8
   321d0:	06e60613          	addi	a2,a2,110 # 3a23a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x175a>
   321d4:	00008597          	auipc	a1,0x8
   321d8:	05c58593          	addi	a1,a1,92 # 3a230 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1750>
   321dc:	00011317          	auipc	t1,0x11
   321e0:	14433303          	ld	t1,324(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   321e4:	000300e7          	jalr	ra,0(t1)
   321e8:	fa8ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   321ec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   321f0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   321f4:	00000693          	addi	a3,zero,0
   321f8:	00008617          	auipc	a2,0x8
   321fc:	05360613          	addi	a2,a2,83 # 3a24b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x176b>
   32200:	00008597          	auipc	a1,0x8
   32204:	04058593          	addi	a1,a1,64 # 3a240 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1760>
   32208:	00011317          	auipc	t1,0x11
   3220c:	11833303          	ld	t1,280(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32210:	000300e7          	jalr	ra,0(t1)
   32214:	f7cff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32218:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3221c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32220:	00000693          	addi	a3,zero,0
   32224:	00008617          	auipc	a2,0x8
   32228:	03760613          	addi	a2,a2,55 # 3a25b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x177b>
   3222c:	00008597          	auipc	a1,0x8
   32230:	02458593          	addi	a1,a1,36 # 3a250 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1770>
   32234:	00011317          	auipc	t1,0x11
   32238:	0ec33303          	ld	t1,236(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3223c:	000300e7          	jalr	ra,0(t1)
   32240:	f50ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32244:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32248:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3224c:	00000693          	addi	a3,zero,0
   32250:	00008617          	auipc	a2,0x8
   32254:	01b60613          	addi	a2,a2,27 # 3a26b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x178b>
   32258:	00008597          	auipc	a1,0x8
   3225c:	00858593          	addi	a1,a1,8 # 3a260 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1780>
   32260:	00011317          	auipc	t1,0x11
   32264:	0c033303          	ld	t1,192(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32268:	000300e7          	jalr	ra,0(t1)
   3226c:	f24ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32270:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32274:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32278:	00000693          	addi	a3,zero,0
   3227c:	00008617          	auipc	a2,0x8
   32280:	00460613          	addi	a2,a2,4 # 3a280 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17a0>
   32284:	00008597          	auipc	a1,0x8
   32288:	fec58593          	addi	a1,a1,-20 # 3a270 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1790>
   3228c:	00011317          	auipc	t1,0x11
   32290:	09433303          	ld	t1,148(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32294:	000300e7          	jalr	ra,0(t1)
   32298:	ef8ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3229c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   322a0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   322a4:	00000693          	addi	a3,zero,0
   322a8:	00008617          	auipc	a2,0x8
   322ac:	ff160613          	addi	a2,a2,-15 # 3a299 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17b9>
   322b0:	00008597          	auipc	a1,0x8
   322b4:	fd858593          	addi	a1,a1,-40 # 3a288 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17a8>
   322b8:	00011317          	auipc	t1,0x11
   322bc:	06833303          	ld	t1,104(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   322c0:	000300e7          	jalr	ra,0(t1)
   322c4:	eccff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   322c8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   322cc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   322d0:	00000693          	addi	a3,zero,0
   322d4:	00008617          	auipc	a2,0x8
   322d8:	fd560613          	addi	a2,a2,-43 # 3a2a9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17c9>
   322dc:	00008597          	auipc	a1,0x8
   322e0:	fc458593          	addi	a1,a1,-60 # 3a2a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17c0>
   322e4:	00011317          	auipc	t1,0x11
   322e8:	03c33303          	ld	t1,60(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   322ec:	000300e7          	jalr	ra,0(t1)
   322f0:	ea0ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   322f4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   322f8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   322fc:	00000693          	addi	a3,zero,0
   32300:	00008617          	auipc	a2,0x8
   32304:	fc960613          	addi	a2,a2,-55 # 3a2c9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17e9>
   32308:	00008597          	auipc	a1,0x8
   3230c:	fa858593          	addi	a1,a1,-88 # 3a2b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17d0>
   32310:	00011317          	auipc	t1,0x11
   32314:	01033303          	ld	t1,16(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32318:	000300e7          	jalr	ra,0(t1)
   3231c:	e74ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32320:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32324:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32328:	00000693          	addi	a3,zero,0
   3232c:	00008617          	auipc	a2,0x8
   32330:	faf60613          	addi	a2,a2,-81 # 3a2db <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17fb>
   32334:	00008597          	auipc	a1,0x8
   32338:	f9c58593          	addi	a1,a1,-100 # 3a2d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17f0>
   3233c:	00011317          	auipc	t1,0x11
   32340:	fe433303          	ld	t1,-28(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32344:	000300e7          	jalr	ra,0(t1)
   32348:	e48ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3234c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32350:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32354:	00000693          	addi	a3,zero,0
   32358:	00008617          	auipc	a2,0x8
   3235c:	f9360613          	addi	a2,a2,-109 # 3a2eb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x180b>
   32360:	00008597          	auipc	a1,0x8
   32364:	f8058593          	addi	a1,a1,-128 # 3a2e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1800>
   32368:	00011317          	auipc	t1,0x11
   3236c:	fb833303          	ld	t1,-72(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32370:	000300e7          	jalr	ra,0(t1)
   32374:	e1cff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32378:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3237c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32380:	00000693          	addi	a3,zero,0
   32384:	00008617          	auipc	a2,0x8
   32388:	f7a60613          	addi	a2,a2,-134 # 3a2fe <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x181e>
   3238c:	00008597          	auipc	a1,0x8
   32390:	f6458593          	addi	a1,a1,-156 # 3a2f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1810>
   32394:	00011317          	auipc	t1,0x11
   32398:	f8c33303          	ld	t1,-116(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3239c:	000300e7          	jalr	ra,0(t1)
   323a0:	df0ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   323a4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   323a8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   323ac:	00000693          	addi	a3,zero,0
   323b0:	00008617          	auipc	a2,0x8
   323b4:	f6660613          	addi	a2,a2,-154 # 3a316 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1836>
   323b8:	00008597          	auipc	a1,0x8
   323bc:	f4858593          	addi	a1,a1,-184 # 3a300 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1820>
   323c0:	00011317          	auipc	t1,0x11
   323c4:	f6033303          	ld	t1,-160(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   323c8:	000300e7          	jalr	ra,0(t1)
   323cc:	dc4ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   323d0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   323d4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   323d8:	00000693          	addi	a3,zero,0
   323dc:	00008617          	auipc	a2,0x8
   323e0:	f5060613          	addi	a2,a2,-176 # 3a32c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x184c>
   323e4:	00008597          	auipc	a1,0x8
   323e8:	f3458593          	addi	a1,a1,-204 # 3a318 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1838>
   323ec:	00011317          	auipc	t1,0x11
   323f0:	f3433303          	ld	t1,-204(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   323f4:	000300e7          	jalr	ra,0(t1)
   323f8:	d98ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   323fc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32400:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32404:	00000693          	addi	a3,zero,0
   32408:	00008617          	auipc	a2,0x8
   3240c:	f3760613          	addi	a2,a2,-201 # 3a33f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x185f>
   32410:	00008597          	auipc	a1,0x8
   32414:	f2058593          	addi	a1,a1,-224 # 3a330 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1850>
   32418:	00011317          	auipc	t1,0x11
   3241c:	f0833303          	ld	t1,-248(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32420:	000300e7          	jalr	ra,0(t1)
   32424:	d6cff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32428:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3242c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32430:	00000693          	addi	a3,zero,0
   32434:	00008617          	auipc	a2,0x8
   32438:	f2060613          	addi	a2,a2,-224 # 3a354 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1874>
   3243c:	00008597          	auipc	a1,0x8
   32440:	f0458593          	addi	a1,a1,-252 # 3a340 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1860>
   32444:	00011317          	auipc	t1,0x11
   32448:	edc33303          	ld	t1,-292(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3244c:	000300e7          	jalr	ra,0(t1)
   32450:	d40ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32454:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32458:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3245c:	00000693          	addi	a3,zero,0
   32460:	00008617          	auipc	a2,0x8
   32464:	f0960613          	addi	a2,a2,-247 # 3a369 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1889>
   32468:	00008597          	auipc	a1,0x8
   3246c:	ef058593          	addi	a1,a1,-272 # 3a358 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1878>
   32470:	00011317          	auipc	t1,0x11
   32474:	eb033303          	ld	t1,-336(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32478:	000300e7          	jalr	ra,0(t1)
   3247c:	d14ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
        return "(DW_OP)0x" + to_hex((int)v);
   32480:	00010493          	addi	s1,sp,0
   32484:	00048513          	addi	a0,s1,0
   32488:	00011317          	auipc	t1,0x11
   3248c:	fa833303          	ld	t1,-88(t1) # 43430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe24>
   32490:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   32494:	00900713          	addi	a4,zero,9
   32498:	00008697          	auipc	a3,0x8
   3249c:	ed868693          	addi	a3,a3,-296 # 3a370 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1890>
   324a0:	00000613          	addi	a2,zero,0
   324a4:	00000593          	addi	a1,zero,0
   324a8:	00048513          	addi	a0,s1,0
   324ac:	c54e40ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   324b0:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   324b4:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   324b8:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   324bc:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   324c0:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   324c4:	03278c63          	beq	a5,s2,324fc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0xbd8>
      { _M_dataplus._M_p = __p; }
   324c8:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   324cc:	0104b783          	ld	a5,16(s1)
   324d0:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   324d4:	0084b783          	ld	a5,8(s1)
   324d8:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   324dc:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   324e0:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   324e4:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   324e8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   324ec:	01010793          	addi	a5,sp,16
   324f0:	caf50063          	beq	a0,a5,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   324f4:	aace40ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   324f8:	c98ff06f          	jal	zero,31990 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   324fc:	0084b603          	ld	a2,8(s1)
   32500:	00160613          	addi	a2,a2,1
	if (__n == 0)
   32504:	fc0608e3          	beq	a2,zero,324d4 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0xbb0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   32508:	00090593          	addi	a1,s2,0
   3250c:	b34e40ef          	jal	ra,16840 <memcpy@plt>
   32510:	fc5ff06f          	jal	zero,324d4 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0xbb0>
      { return _M_dataplus._M_p; }
   32514:	00050413          	addi	s0,a0,0
   32518:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   3251c:	01010793          	addi	a5,sp,16
   32520:	00f50463          	beq	a0,a5,32528 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0xc04>
   32524:	a7ce40ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   32528:	00040513          	addi	a0,s0,0
   3252c:	c64e40ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000032530 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>:
{
   32530:	fc010113          	addi	sp,sp,-64
   32534:	02113c23          	sd	ra,56(sp)
   32538:	02813823          	sd	s0,48(sp)
   3253c:	02913423          	sd	s1,40(sp)
   32540:	03213023          	sd	s2,32(sp)
   32544:	00050413          	addi	s0,a0,0
        switch (v) {
   32548:	06e00793          	addi	a5,zero,110
   3254c:	00b7f463          	bgeu	a5,a1,32554 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x24>
   32550:	0080106f          	jal	zero,33558 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x1028>
   32554:	00259793          	slli	a5,a1,0x2
   32558:	00009717          	auipc	a4,0x9
   3255c:	b2470713          	addi	a4,a4,-1244 # 3b07c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x259c>
   32560:	00e787b3          	add	a5,a5,a4
   32564:	0007a783          	lw	a5,0(a5)
   32568:	00e787b3          	add	a5,a5,a4
   3256c:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32570:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32574:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32578:	00000693          	addi	a3,zero,0
   3257c:	00008617          	auipc	a2,0x8
   32580:	e1160613          	addi	a2,a2,-495 # 3a38d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18ad>
   32584:	00008597          	auipc	a1,0x8
   32588:	dfc58593          	addi	a1,a1,-516 # 3a380 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18a0>
   3258c:	00011317          	auipc	t1,0x11
   32590:	d9433303          	ld	t1,-620(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32594:	000300e7          	jalr	ra,0(t1)
}
   32598:	00040513          	addi	a0,s0,0
   3259c:	03813083          	ld	ra,56(sp)
   325a0:	03013403          	ld	s0,48(sp)
   325a4:	02813483          	ld	s1,40(sp)
   325a8:	02013903          	ld	s2,32(sp)
   325ac:	04010113          	addi	sp,sp,64
   325b0:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   325b4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   325b8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   325bc:	00000693          	addi	a3,zero,0
   325c0:	00008617          	auipc	a2,0x8
   325c4:	dde60613          	addi	a2,a2,-546 # 3a39e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18be>
   325c8:	00008597          	auipc	a1,0x8
   325cc:	dc858593          	addi	a1,a1,-568 # 3a390 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18b0>
   325d0:	00011317          	auipc	t1,0x11
   325d4:	d5033303          	ld	t1,-688(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   325d8:	000300e7          	jalr	ra,0(t1)
   325dc:	fbdff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   325e0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   325e4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   325e8:	00000693          	addi	a3,zero,0
   325ec:	00008617          	auipc	a2,0x8
   325f0:	dbe60613          	addi	a2,a2,-578 # 3a3aa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18ca>
   325f4:	00008597          	auipc	a1,0x8
   325f8:	dac58593          	addi	a1,a1,-596 # 3a3a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18c0>
   325fc:	00011317          	auipc	t1,0x11
   32600:	d2433303          	ld	t1,-732(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32604:	000300e7          	jalr	ra,0(t1)
   32608:	f91ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3260c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32610:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32614:	00000693          	addi	a3,zero,0
   32618:	00008617          	auipc	a2,0x8
   3261c:	da660613          	addi	a2,a2,-602 # 3a3be <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18de>
   32620:	00008597          	auipc	a1,0x8
   32624:	d9058593          	addi	a1,a1,-624 # 3a3b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18d0>
   32628:	00011317          	auipc	t1,0x11
   3262c:	cf833303          	ld	t1,-776(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32630:	000300e7          	jalr	ra,0(t1)
   32634:	f65ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32638:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3263c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32640:	00000693          	addi	a3,zero,0
   32644:	00008617          	auipc	a2,0x8
   32648:	d8b60613          	addi	a2,a2,-629 # 3a3cf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18ef>
   3264c:	00008597          	auipc	a1,0x8
   32650:	d7458593          	addi	a1,a1,-652 # 3a3c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18e0>
   32654:	00011317          	auipc	t1,0x11
   32658:	ccc33303          	ld	t1,-820(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3265c:	000300e7          	jalr	ra,0(t1)
   32660:	f39ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32664:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32668:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3266c:	00000693          	addi	a3,zero,0
   32670:	00008617          	auipc	a2,0x8
   32674:	d7060613          	addi	a2,a2,-656 # 3a3e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1900>
   32678:	00008597          	auipc	a1,0x8
   3267c:	d5858593          	addi	a1,a1,-680 # 3a3d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18f0>
   32680:	00011317          	auipc	t1,0x11
   32684:	ca033303          	ld	t1,-864(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32688:	000300e7          	jalr	ra,0(t1)
   3268c:	f0dff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32690:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32694:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32698:	00000693          	addi	a3,zero,0
   3269c:	00008617          	auipc	a2,0x8
   326a0:	d5a60613          	addi	a2,a2,-678 # 3a3f6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1916>
   326a4:	00008597          	auipc	a1,0x8
   326a8:	d4458593          	addi	a1,a1,-700 # 3a3e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1908>
   326ac:	00011317          	auipc	t1,0x11
   326b0:	c7433303          	ld	t1,-908(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   326b4:	000300e7          	jalr	ra,0(t1)
   326b8:	ee1ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   326bc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   326c0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   326c4:	00000693          	addi	a3,zero,0
   326c8:	00008617          	auipc	a2,0x8
   326cc:	d3f60613          	addi	a2,a2,-705 # 3a407 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1927>
   326d0:	00008597          	auipc	a1,0x8
   326d4:	d2858593          	addi	a1,a1,-728 # 3a3f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1918>
   326d8:	00011317          	auipc	t1,0x11
   326dc:	c4833303          	ld	t1,-952(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   326e0:	000300e7          	jalr	ra,0(t1)
   326e4:	eb5ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   326e8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   326ec:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   326f0:	00000693          	addi	a3,zero,0
   326f4:	00008617          	auipc	a2,0x8
   326f8:	d2060613          	addi	a2,a2,-736 # 3a414 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1934>
   326fc:	00008597          	auipc	a1,0x8
   32700:	d0c58593          	addi	a1,a1,-756 # 3a408 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1928>
   32704:	00011317          	auipc	t1,0x11
   32708:	c1c33303          	ld	t1,-996(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3270c:	000300e7          	jalr	ra,0(t1)
   32710:	e89ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32714:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32718:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3271c:	00000693          	addi	a3,zero,0
   32720:	00008617          	auipc	a2,0x8
   32724:	d0560613          	addi	a2,a2,-763 # 3a425 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1945>
   32728:	00008597          	auipc	a1,0x8
   3272c:	cf058593          	addi	a1,a1,-784 # 3a418 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1938>
   32730:	00011317          	auipc	t1,0x11
   32734:	bf033303          	ld	t1,-1040(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32738:	000300e7          	jalr	ra,0(t1)
   3273c:	e5dff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32740:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32744:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32748:	00000693          	addi	a3,zero,0
   3274c:	00008617          	auipc	a2,0x8
   32750:	cea60613          	addi	a2,a2,-790 # 3a436 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1956>
   32754:	00008597          	auipc	a1,0x8
   32758:	cd458593          	addi	a1,a1,-812 # 3a428 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1948>
   3275c:	00011317          	auipc	t1,0x11
   32760:	bc433303          	ld	t1,-1084(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32764:	000300e7          	jalr	ra,0(t1)
   32768:	e31ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3276c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32770:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32774:	00000693          	addi	a3,zero,0
   32778:	00008617          	auipc	a2,0x8
   3277c:	ccb60613          	addi	a2,a2,-821 # 3a443 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1963>
   32780:	00008597          	auipc	a1,0x8
   32784:	cb858593          	addi	a1,a1,-840 # 3a438 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1958>
   32788:	00011317          	auipc	t1,0x11
   3278c:	b9833303          	ld	t1,-1128(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32790:	000300e7          	jalr	ra,0(t1)
   32794:	e05ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32798:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3279c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   327a0:	00000693          	addi	a3,zero,0
   327a4:	00008617          	auipc	a2,0x8
   327a8:	cb560613          	addi	a2,a2,-843 # 3a459 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1979>
   327ac:	00008597          	auipc	a1,0x8
   327b0:	c9c58593          	addi	a1,a1,-868 # 3a448 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1968>
   327b4:	00011317          	auipc	t1,0x11
   327b8:	b6c33303          	ld	t1,-1172(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   327bc:	000300e7          	jalr	ra,0(t1)
   327c0:	dd9ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   327c4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   327c8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   327cc:	00000693          	addi	a3,zero,0
   327d0:	00008617          	auipc	a2,0x8
   327d4:	ca060613          	addi	a2,a2,-864 # 3a470 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1990>
   327d8:	00008597          	auipc	a1,0x8
   327dc:	c8858593          	addi	a1,a1,-888 # 3a460 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1980>
   327e0:	00011317          	auipc	t1,0x11
   327e4:	b4033303          	ld	t1,-1216(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   327e8:	000300e7          	jalr	ra,0(t1)
   327ec:	dadff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   327f0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   327f4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   327f8:	00000693          	addi	a3,zero,0
   327fc:	00008617          	auipc	a2,0x8
   32800:	c8860613          	addi	a2,a2,-888 # 3a484 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19a4>
   32804:	00008597          	auipc	a1,0x8
   32808:	c7458593          	addi	a1,a1,-908 # 3a478 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1998>
   3280c:	00011317          	auipc	t1,0x11
   32810:	b1433303          	ld	t1,-1260(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32814:	000300e7          	jalr	ra,0(t1)
   32818:	d81ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3281c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32820:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32824:	00000693          	addi	a3,zero,0
   32828:	00008617          	auipc	a2,0x8
   3282c:	c7360613          	addi	a2,a2,-909 # 3a49b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19bb>
   32830:	00008597          	auipc	a1,0x8
   32834:	c5858593          	addi	a1,a1,-936 # 3a488 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19a8>
   32838:	00011317          	auipc	t1,0x11
   3283c:	ae833303          	ld	t1,-1304(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32840:	000300e7          	jalr	ra,0(t1)
   32844:	d55ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32848:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3284c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32850:	00000693          	addi	a3,zero,0
   32854:	00008617          	auipc	a2,0x8
   32858:	c6260613          	addi	a2,a2,-926 # 3a4b6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19d6>
   3285c:	00008597          	auipc	a1,0x8
   32860:	c4458593          	addi	a1,a1,-956 # 3a4a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19c0>
   32864:	00011317          	auipc	t1,0x11
   32868:	abc33303          	ld	t1,-1348(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3286c:	000300e7          	jalr	ra,0(t1)
   32870:	d29ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32874:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32878:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3287c:	00000693          	addi	a3,zero,0
   32880:	00008617          	auipc	a2,0x8
   32884:	c4660613          	addi	a2,a2,-954 # 3a4c6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19e6>
   32888:	00008597          	auipc	a1,0x8
   3288c:	c3058593          	addi	a1,a1,-976 # 3a4b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19d8>
   32890:	00011317          	auipc	t1,0x11
   32894:	a9033303          	ld	t1,-1392(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32898:	000300e7          	jalr	ra,0(t1)
   3289c:	cfdff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   328a0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   328a4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   328a8:	00000693          	addi	a3,zero,0
   328ac:	00008617          	auipc	a2,0x8
   328b0:	c2d60613          	addi	a2,a2,-979 # 3a4d9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19f9>
   328b4:	00008597          	auipc	a1,0x8
   328b8:	c1458593          	addi	a1,a1,-1004 # 3a4c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19e8>
   328bc:	00011317          	auipc	t1,0x11
   328c0:	a6433303          	ld	t1,-1436(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   328c4:	000300e7          	jalr	ra,0(t1)
   328c8:	cd1ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   328cc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   328d0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   328d4:	00000693          	addi	a3,zero,0
   328d8:	00008617          	auipc	a2,0x8
   328dc:	c1d60613          	addi	a2,a2,-995 # 3a4f5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a15>
   328e0:	00008597          	auipc	a1,0x8
   328e4:	c0058593          	addi	a1,a1,-1024 # 3a4e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a00>
   328e8:	00011317          	auipc	t1,0x11
   328ec:	a3833303          	ld	t1,-1480(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   328f0:	000300e7          	jalr	ra,0(t1)
   328f4:	ca5ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   328f8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   328fc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32900:	00000693          	addi	a3,zero,0
   32904:	00008617          	auipc	a2,0x8
   32908:	c0760613          	addi	a2,a2,-1017 # 3a50b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a2b>
   3290c:	00008597          	auipc	a1,0x8
   32910:	bec58593          	addi	a1,a1,-1044 # 3a4f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a18>
   32914:	00011317          	auipc	t1,0x11
   32918:	a0c33303          	ld	t1,-1524(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3291c:	000300e7          	jalr	ra,0(t1)
   32920:	c79ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32924:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32928:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3292c:	00000693          	addi	a3,zero,0
   32930:	00008617          	auipc	a2,0x8
   32934:	bec60613          	addi	a2,a2,-1044 # 3a51c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a3c>
   32938:	00008597          	auipc	a1,0x8
   3293c:	bd858593          	addi	a1,a1,-1064 # 3a510 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a30>
   32940:	00011317          	auipc	t1,0x11
   32944:	9e033303          	ld	t1,-1568(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32948:	000300e7          	jalr	ra,0(t1)
   3294c:	c4dff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32950:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32954:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32958:	00000693          	addi	a3,zero,0
   3295c:	00008617          	auipc	a2,0x8
   32960:	bd560613          	addi	a2,a2,-1067 # 3a531 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a51>
   32964:	00008597          	auipc	a1,0x8
   32968:	bbc58593          	addi	a1,a1,-1092 # 3a520 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a40>
   3296c:	00011317          	auipc	t1,0x11
   32970:	9b433303          	ld	t1,-1612(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32974:	000300e7          	jalr	ra,0(t1)
   32978:	c21ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3297c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32980:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32984:	00000693          	addi	a3,zero,0
   32988:	00008617          	auipc	a2,0x8
   3298c:	bc160613          	addi	a2,a2,-1087 # 3a549 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a69>
   32990:	00008597          	auipc	a1,0x8
   32994:	ba858593          	addi	a1,a1,-1112 # 3a538 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a58>
   32998:	00011317          	auipc	t1,0x11
   3299c:	98833303          	ld	t1,-1656(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   329a0:	000300e7          	jalr	ra,0(t1)
   329a4:	bf5ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   329a8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   329ac:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   329b0:	00000693          	addi	a3,zero,0
   329b4:	00008617          	auipc	a2,0x8
   329b8:	baa60613          	addi	a2,a2,-1110 # 3a55e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a7e>
   329bc:	00008597          	auipc	a1,0x8
   329c0:	b9458593          	addi	a1,a1,-1132 # 3a550 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a70>
   329c4:	00011317          	auipc	t1,0x11
   329c8:	95c33303          	ld	t1,-1700(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   329cc:	000300e7          	jalr	ra,0(t1)
   329d0:	bc9ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   329d4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   329d8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   329dc:	00000693          	addi	a3,zero,0
   329e0:	00008617          	auipc	a2,0x8
   329e4:	b9060613          	addi	a2,a2,-1136 # 3a570 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a90>
   329e8:	00008597          	auipc	a1,0x8
   329ec:	b7858593          	addi	a1,a1,-1160 # 3a560 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a80>
   329f0:	00011317          	auipc	t1,0x11
   329f4:	93033303          	ld	t1,-1744(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   329f8:	000300e7          	jalr	ra,0(t1)
   329fc:	b9dff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32a00:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32a04:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32a08:	00000693          	addi	a3,zero,0
   32a0c:	00008617          	auipc	a2,0x8
   32a10:	b7d60613          	addi	a2,a2,-1155 # 3a589 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1aa9>
   32a14:	00008597          	auipc	a1,0x8
   32a18:	b6458593          	addi	a1,a1,-1180 # 3a578 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a98>
   32a1c:	00011317          	auipc	t1,0x11
   32a20:	90433303          	ld	t1,-1788(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32a24:	000300e7          	jalr	ra,0(t1)
   32a28:	b71ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32a2c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32a30:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32a34:	00000693          	addi	a3,zero,0
   32a38:	00008617          	auipc	a2,0x8
   32a3c:	b6960613          	addi	a2,a2,-1175 # 3a5a1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ac1>
   32a40:	00008597          	auipc	a1,0x8
   32a44:	b5058593          	addi	a1,a1,-1200 # 3a590 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ab0>
   32a48:	00011317          	auipc	t1,0x11
   32a4c:	8d833303          	ld	t1,-1832(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32a50:	000300e7          	jalr	ra,0(t1)
   32a54:	b45ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32a58:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32a5c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32a60:	00000693          	addi	a3,zero,0
   32a64:	00008617          	auipc	a2,0x8
   32a68:	b5460613          	addi	a2,a2,-1196 # 3a5b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ad8>
   32a6c:	00008597          	auipc	a1,0x8
   32a70:	b3c58593          	addi	a1,a1,-1220 # 3a5a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ac8>
   32a74:	00011317          	auipc	t1,0x11
   32a78:	8ac33303          	ld	t1,-1876(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32a7c:	000300e7          	jalr	ra,0(t1)
   32a80:	b19ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32a84:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32a88:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32a8c:	00000693          	addi	a3,zero,0
   32a90:	00008617          	auipc	a2,0x8
   32a94:	b4160613          	addi	a2,a2,-1215 # 3a5d1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1af1>
   32a98:	00008597          	auipc	a1,0x8
   32a9c:	b2858593          	addi	a1,a1,-1240 # 3a5c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ae0>
   32aa0:	00011317          	auipc	t1,0x11
   32aa4:	88033303          	ld	t1,-1920(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32aa8:	000300e7          	jalr	ra,0(t1)
   32aac:	aedff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32ab0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32ab4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32ab8:	00000693          	addi	a3,zero,0
   32abc:	00008617          	auipc	a2,0x8
   32ac0:	b3160613          	addi	a2,a2,-1231 # 3a5ed <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b0d>
   32ac4:	00008597          	auipc	a1,0x8
   32ac8:	b1458593          	addi	a1,a1,-1260 # 3a5d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1af8>
   32acc:	00011317          	auipc	t1,0x11
   32ad0:	85433303          	ld	t1,-1964(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32ad4:	000300e7          	jalr	ra,0(t1)
   32ad8:	ac1ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32adc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32ae0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32ae4:	00000693          	addi	a3,zero,0
   32ae8:	00008617          	auipc	a2,0x8
   32aec:	b1b60613          	addi	a2,a2,-1253 # 3a603 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b23>
   32af0:	00008597          	auipc	a1,0x8
   32af4:	b0058593          	addi	a1,a1,-1280 # 3a5f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b10>
   32af8:	00011317          	auipc	t1,0x11
   32afc:	82833303          	ld	t1,-2008(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32b00:	000300e7          	jalr	ra,0(t1)
   32b04:	a95ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32b08:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32b0c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32b10:	00000693          	addi	a3,zero,0
   32b14:	00008617          	auipc	a2,0x8
   32b18:	b0760613          	addi	a2,a2,-1273 # 3a61b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b3b>
   32b1c:	00008597          	auipc	a1,0x8
   32b20:	aec58593          	addi	a1,a1,-1300 # 3a608 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b28>
   32b24:	00010317          	auipc	t1,0x10
   32b28:	7fc33303          	ld	t1,2044(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32b2c:	000300e7          	jalr	ra,0(t1)
   32b30:	a69ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32b34:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32b38:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32b3c:	00000693          	addi	a3,zero,0
   32b40:	00008617          	auipc	a2,0x8
   32b44:	af060613          	addi	a2,a2,-1296 # 3a630 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b50>
   32b48:	00008597          	auipc	a1,0x8
   32b4c:	ad858593          	addi	a1,a1,-1320 # 3a620 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b40>
   32b50:	00010317          	auipc	t1,0x10
   32b54:	7d033303          	ld	t1,2000(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32b58:	000300e7          	jalr	ra,0(t1)
   32b5c:	a3dff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32b60:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32b64:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32b68:	00000693          	addi	a3,zero,0
   32b6c:	00008617          	auipc	a2,0x8
   32b70:	adc60613          	addi	a2,a2,-1316 # 3a648 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b68>
   32b74:	00008597          	auipc	a1,0x8
   32b78:	ac458593          	addi	a1,a1,-1340 # 3a638 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b58>
   32b7c:	00010317          	auipc	t1,0x10
   32b80:	7a433303          	ld	t1,1956(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32b84:	000300e7          	jalr	ra,0(t1)
   32b88:	a11ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32b8c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32b90:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32b94:	00000693          	addi	a3,zero,0
   32b98:	00008617          	auipc	a2,0x8
   32b9c:	ad060613          	addi	a2,a2,-1328 # 3a668 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b88>
   32ba0:	00008597          	auipc	a1,0x8
   32ba4:	ab058593          	addi	a1,a1,-1360 # 3a650 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b70>
   32ba8:	00010317          	auipc	t1,0x10
   32bac:	77833303          	ld	t1,1912(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32bb0:	000300e7          	jalr	ra,0(t1)
   32bb4:	9e5ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32bb8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32bbc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32bc0:	00000693          	addi	a3,zero,0
   32bc4:	00008617          	auipc	a2,0x8
   32bc8:	ab760613          	addi	a2,a2,-1353 # 3a67b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b9b>
   32bcc:	00008597          	auipc	a1,0x8
   32bd0:	aa458593          	addi	a1,a1,-1372 # 3a670 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b90>
   32bd4:	00010317          	auipc	t1,0x10
   32bd8:	74c33303          	ld	t1,1868(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32bdc:	000300e7          	jalr	ra,0(t1)
   32be0:	9b9ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32be4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32be8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32bec:	00000693          	addi	a3,zero,0
   32bf0:	00008617          	auipc	a2,0x8
   32bf4:	aaa60613          	addi	a2,a2,-1366 # 3a69a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bba>
   32bf8:	00008597          	auipc	a1,0x8
   32bfc:	a8858593          	addi	a1,a1,-1400 # 3a680 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ba0>
   32c00:	00010317          	auipc	t1,0x10
   32c04:	72033303          	ld	t1,1824(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32c08:	000300e7          	jalr	ra,0(t1)
   32c0c:	98dff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32c10:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32c14:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32c18:	00000693          	addi	a3,zero,0
   32c1c:	00008617          	auipc	a2,0x8
   32c20:	a9560613          	addi	a2,a2,-1387 # 3a6b1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bd1>
   32c24:	00008597          	auipc	a1,0x8
   32c28:	a7c58593          	addi	a1,a1,-1412 # 3a6a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bc0>
   32c2c:	00010317          	auipc	t1,0x10
   32c30:	6f433303          	ld	t1,1780(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32c34:	000300e7          	jalr	ra,0(t1)
   32c38:	961ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32c3c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32c40:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32c44:	00000693          	addi	a3,zero,0
   32c48:	00008617          	auipc	a2,0x8
   32c4c:	a7f60613          	addi	a2,a2,-1409 # 3a6c7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1be7>
   32c50:	00008597          	auipc	a1,0x8
   32c54:	a6858593          	addi	a1,a1,-1432 # 3a6b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bd8>
   32c58:	00010317          	auipc	t1,0x10
   32c5c:	6c833303          	ld	t1,1736(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32c60:	000300e7          	jalr	ra,0(t1)
   32c64:	935ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32c68:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32c6c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32c70:	00000693          	addi	a3,zero,0
   32c74:	00008617          	auipc	a2,0x8
   32c78:	a6360613          	addi	a2,a2,-1437 # 3a6d7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bf7>
   32c7c:	00008597          	auipc	a1,0x8
   32c80:	a4c58593          	addi	a1,a1,-1460 # 3a6c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1be8>
   32c84:	00010317          	auipc	t1,0x10
   32c88:	69c33303          	ld	t1,1692(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32c8c:	000300e7          	jalr	ra,0(t1)
   32c90:	909ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32c94:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32c98:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32c9c:	00000693          	addi	a3,zero,0
   32ca0:	00008617          	auipc	a2,0x8
   32ca4:	a4960613          	addi	a2,a2,-1463 # 3a6e9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c09>
   32ca8:	00008597          	auipc	a1,0x8
   32cac:	a3058593          	addi	a1,a1,-1488 # 3a6d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bf8>
   32cb0:	00010317          	auipc	t1,0x10
   32cb4:	67033303          	ld	t1,1648(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32cb8:	000300e7          	jalr	ra,0(t1)
   32cbc:	8ddff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32cc0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32cc4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32cc8:	00000693          	addi	a3,zero,0
   32ccc:	00008617          	auipc	a2,0x8
   32cd0:	a3460613          	addi	a2,a2,-1484 # 3a700 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c20>
   32cd4:	00008597          	auipc	a1,0x8
   32cd8:	a1c58593          	addi	a1,a1,-1508 # 3a6f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c10>
   32cdc:	00010317          	auipc	t1,0x10
   32ce0:	64433303          	ld	t1,1604(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32ce4:	000300e7          	jalr	ra,0(t1)
   32ce8:	8b1ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32cec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32cf0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32cf4:	00000693          	addi	a3,zero,0
   32cf8:	00008617          	auipc	a2,0x8
   32cfc:	a1e60613          	addi	a2,a2,-1506 # 3a716 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c36>
   32d00:	00008597          	auipc	a1,0x8
   32d04:	a0858593          	addi	a1,a1,-1528 # 3a708 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c28>
   32d08:	00010317          	auipc	t1,0x10
   32d0c:	61833303          	ld	t1,1560(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32d10:	000300e7          	jalr	ra,0(t1)
   32d14:	885ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32d18:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32d1c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32d20:	00000693          	addi	a3,zero,0
   32d24:	00008617          	auipc	a2,0x8
   32d28:	a0260613          	addi	a2,a2,-1534 # 3a726 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c46>
   32d2c:	00008597          	auipc	a1,0x8
   32d30:	9ec58593          	addi	a1,a1,-1556 # 3a718 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c38>
   32d34:	00010317          	auipc	t1,0x10
   32d38:	5ec33303          	ld	t1,1516(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32d3c:	000300e7          	jalr	ra,0(t1)
   32d40:	859ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32d44:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32d48:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32d4c:	00000693          	addi	a3,zero,0
   32d50:	00008617          	auipc	a2,0x8
   32d54:	9e860613          	addi	a2,a2,-1560 # 3a738 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c58>
   32d58:	00008597          	auipc	a1,0x8
   32d5c:	9d058593          	addi	a1,a1,-1584 # 3a728 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c48>
   32d60:	00010317          	auipc	t1,0x10
   32d64:	5c033303          	ld	t1,1472(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32d68:	000300e7          	jalr	ra,0(t1)
   32d6c:	82dff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32d70:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32d74:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32d78:	00000693          	addi	a3,zero,0
   32d7c:	00008617          	auipc	a2,0x8
   32d80:	9d060613          	addi	a2,a2,-1584 # 3a74c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c6c>
   32d84:	00008597          	auipc	a1,0x8
   32d88:	9bc58593          	addi	a1,a1,-1604 # 3a740 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c60>
   32d8c:	00010317          	auipc	t1,0x10
   32d90:	59433303          	ld	t1,1428(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32d94:	000300e7          	jalr	ra,0(t1)
   32d98:	801ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32d9c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32da0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32da4:	00000693          	addi	a3,zero,0
   32da8:	00008617          	auipc	a2,0x8
   32dac:	9bd60613          	addi	a2,a2,-1603 # 3a765 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c85>
   32db0:	00008597          	auipc	a1,0x8
   32db4:	9a058593          	addi	a1,a1,-1632 # 3a750 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c70>
   32db8:	00010317          	auipc	t1,0x10
   32dbc:	56833303          	ld	t1,1384(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32dc0:	000300e7          	jalr	ra,0(t1)
   32dc4:	fd4ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32dc8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32dcc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32dd0:	00000693          	addi	a3,zero,0
   32dd4:	00008617          	auipc	a2,0x8
   32dd8:	9a460613          	addi	a2,a2,-1628 # 3a778 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c98>
   32ddc:	00008597          	auipc	a1,0x8
   32de0:	98c58593          	addi	a1,a1,-1652 # 3a768 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c88>
   32de4:	00010317          	auipc	t1,0x10
   32de8:	53c33303          	ld	t1,1340(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32dec:	000300e7          	jalr	ra,0(t1)
   32df0:	fa8ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32df4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32df8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32dfc:	00000693          	addi	a3,zero,0
   32e00:	00008617          	auipc	a2,0x8
   32e04:	99360613          	addi	a2,a2,-1645 # 3a793 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cb3>
   32e08:	00008597          	auipc	a1,0x8
   32e0c:	97858593          	addi	a1,a1,-1672 # 3a780 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ca0>
   32e10:	00010317          	auipc	t1,0x10
   32e14:	51033303          	ld	t1,1296(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32e18:	000300e7          	jalr	ra,0(t1)
   32e1c:	f7cff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32e20:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32e24:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32e28:	00000693          	addi	a3,zero,0
   32e2c:	00008617          	auipc	a2,0x8
   32e30:	97a60613          	addi	a2,a2,-1670 # 3a7a6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cc6>
   32e34:	00008597          	auipc	a1,0x8
   32e38:	96458593          	addi	a1,a1,-1692 # 3a798 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cb8>
   32e3c:	00010317          	auipc	t1,0x10
   32e40:	4e433303          	ld	t1,1252(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32e44:	000300e7          	jalr	ra,0(t1)
   32e48:	f50ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32e4c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32e50:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32e54:	00000693          	addi	a3,zero,0
   32e58:	00008617          	auipc	a2,0x8
   32e5c:	95d60613          	addi	a2,a2,-1699 # 3a7b5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cd5>
   32e60:	00008597          	auipc	a1,0x8
   32e64:	94858593          	addi	a1,a1,-1720 # 3a7a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cc8>
   32e68:	00010317          	auipc	t1,0x10
   32e6c:	4b833303          	ld	t1,1208(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32e70:	000300e7          	jalr	ra,0(t1)
   32e74:	f24ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32e78:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32e7c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32e80:	00000693          	addi	a3,zero,0
   32e84:	00008617          	auipc	a2,0x8
   32e88:	94760613          	addi	a2,a2,-1721 # 3a7cb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ceb>
   32e8c:	00008597          	auipc	a1,0x8
   32e90:	92c58593          	addi	a1,a1,-1748 # 3a7b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cd8>
   32e94:	00010317          	auipc	t1,0x10
   32e98:	48c33303          	ld	t1,1164(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32e9c:	000300e7          	jalr	ra,0(t1)
   32ea0:	ef8ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32ea4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32ea8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32eac:	00000693          	addi	a3,zero,0
   32eb0:	00008617          	auipc	a2,0x8
   32eb4:	93160613          	addi	a2,a2,-1743 # 3a7e1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d01>
   32eb8:	00008597          	auipc	a1,0x8
   32ebc:	91858593          	addi	a1,a1,-1768 # 3a7d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cf0>
   32ec0:	00010317          	auipc	t1,0x10
   32ec4:	46033303          	ld	t1,1120(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32ec8:	000300e7          	jalr	ra,0(t1)
   32ecc:	eccff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32ed0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32ed4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32ed8:	00000693          	addi	a3,zero,0
   32edc:	00008617          	auipc	a2,0x8
   32ee0:	91660613          	addi	a2,a2,-1770 # 3a7f2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d12>
   32ee4:	00008597          	auipc	a1,0x8
   32ee8:	90458593          	addi	a1,a1,-1788 # 3a7e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d08>
   32eec:	00010317          	auipc	t1,0x10
   32ef0:	43433303          	ld	t1,1076(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32ef4:	000300e7          	jalr	ra,0(t1)
   32ef8:	ea0ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32efc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32f00:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32f04:	00000693          	addi	a3,zero,0
   32f08:	00008617          	auipc	a2,0x8
   32f0c:	90260613          	addi	a2,a2,-1790 # 3a80a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d2a>
   32f10:	00008597          	auipc	a1,0x8
   32f14:	8e858593          	addi	a1,a1,-1816 # 3a7f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d18>
   32f18:	00010317          	auipc	t1,0x10
   32f1c:	40833303          	ld	t1,1032(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32f20:	000300e7          	jalr	ra,0(t1)
   32f24:	e74ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32f28:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32f2c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32f30:	00000693          	addi	a3,zero,0
   32f34:	00008617          	auipc	a2,0x8
   32f38:	8f460613          	addi	a2,a2,-1804 # 3a828 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d48>
   32f3c:	00008597          	auipc	a1,0x8
   32f40:	8d458593          	addi	a1,a1,-1836 # 3a810 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d30>
   32f44:	00010317          	auipc	t1,0x10
   32f48:	3dc33303          	ld	t1,988(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32f4c:	000300e7          	jalr	ra,0(t1)
   32f50:	e48ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32f54:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32f58:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32f5c:	00000693          	addi	a3,zero,0
   32f60:	00008617          	auipc	a2,0x8
   32f64:	8e060613          	addi	a2,a2,-1824 # 3a840 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d60>
   32f68:	00008597          	auipc	a1,0x8
   32f6c:	8c858593          	addi	a1,a1,-1848 # 3a830 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d50>
   32f70:	00010317          	auipc	t1,0x10
   32f74:	3b033303          	ld	t1,944(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32f78:	000300e7          	jalr	ra,0(t1)
   32f7c:	e1cff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32f80:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32f84:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32f88:	00000693          	addi	a3,zero,0
   32f8c:	00008617          	auipc	a2,0x8
   32f90:	8d660613          	addi	a2,a2,-1834 # 3a862 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d82>
   32f94:	00008597          	auipc	a1,0x8
   32f98:	8b458593          	addi	a1,a1,-1868 # 3a848 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d68>
   32f9c:	00010317          	auipc	t1,0x10
   32fa0:	38433303          	ld	t1,900(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32fa4:	000300e7          	jalr	ra,0(t1)
   32fa8:	df0ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32fac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32fb0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32fb4:	00000693          	addi	a3,zero,0
   32fb8:	00008617          	auipc	a2,0x8
   32fbc:	8bf60613          	addi	a2,a2,-1857 # 3a877 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d97>
   32fc0:	00008597          	auipc	a1,0x8
   32fc4:	8a858593          	addi	a1,a1,-1880 # 3a868 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d88>
   32fc8:	00010317          	auipc	t1,0x10
   32fcc:	35833303          	ld	t1,856(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32fd0:	000300e7          	jalr	ra,0(t1)
   32fd4:	dc4ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32fd8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32fdc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32fe0:	00000693          	addi	a3,zero,0
   32fe4:	00008617          	auipc	a2,0x8
   32fe8:	8a460613          	addi	a2,a2,-1884 # 3a888 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1da8>
   32fec:	00008597          	auipc	a1,0x8
   32ff0:	88c58593          	addi	a1,a1,-1908 # 3a878 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d98>
   32ff4:	00010317          	auipc	t1,0x10
   32ff8:	32c33303          	ld	t1,812(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   32ffc:	000300e7          	jalr	ra,0(t1)
   33000:	d98ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33004:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33008:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3300c:	00000693          	addi	a3,zero,0
   33010:	00008617          	auipc	a2,0x8
   33014:	89360613          	addi	a2,a2,-1901 # 3a8a3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dc3>
   33018:	00008597          	auipc	a1,0x8
   3301c:	87858593          	addi	a1,a1,-1928 # 3a890 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1db0>
   33020:	00010317          	auipc	t1,0x10
   33024:	30033303          	ld	t1,768(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   33028:	000300e7          	jalr	ra,0(t1)
   3302c:	d6cff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33030:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33034:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33038:	00000693          	addi	a3,zero,0
   3303c:	00008617          	auipc	a2,0x8
   33040:	87d60613          	addi	a2,a2,-1923 # 3a8b9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dd9>
   33044:	00008597          	auipc	a1,0x8
   33048:	86458593          	addi	a1,a1,-1948 # 3a8a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dc8>
   3304c:	00010317          	auipc	t1,0x10
   33050:	2d433303          	ld	t1,724(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   33054:	000300e7          	jalr	ra,0(t1)
   33058:	d40ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3305c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33060:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33064:	00000693          	addi	a3,zero,0
   33068:	00008617          	auipc	a2,0x8
   3306c:	86660613          	addi	a2,a2,-1946 # 3a8ce <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dee>
   33070:	00008597          	auipc	a1,0x8
   33074:	85058593          	addi	a1,a1,-1968 # 3a8c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1de0>
   33078:	00010317          	auipc	t1,0x10
   3307c:	2a833303          	ld	t1,680(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   33080:	000300e7          	jalr	ra,0(t1)
   33084:	d14ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33088:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3308c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33090:	00000693          	addi	a3,zero,0
   33094:	00008617          	auipc	a2,0x8
   33098:	84a60613          	addi	a2,a2,-1974 # 3a8de <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dfe>
   3309c:	00008597          	auipc	a1,0x8
   330a0:	83458593          	addi	a1,a1,-1996 # 3a8d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1df0>
   330a4:	00010317          	auipc	t1,0x10
   330a8:	27c33303          	ld	t1,636(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   330ac:	000300e7          	jalr	ra,0(t1)
   330b0:	ce8ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   330b4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   330b8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   330bc:	00000693          	addi	a3,zero,0
   330c0:	00008617          	auipc	a2,0x8
   330c4:	82f60613          	addi	a2,a2,-2001 # 3a8ef <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e0f>
   330c8:	00008597          	auipc	a1,0x8
   330cc:	81858593          	addi	a1,a1,-2024 # 3a8e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e00>
   330d0:	00010317          	auipc	t1,0x10
   330d4:	25033303          	ld	t1,592(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   330d8:	000300e7          	jalr	ra,0(t1)
   330dc:	cbcff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   330e0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   330e4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   330e8:	00000693          	addi	a3,zero,0
   330ec:	00008617          	auipc	a2,0x8
   330f0:	81060613          	addi	a2,a2,-2032 # 3a8fc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e1c>
   330f4:	00007597          	auipc	a1,0x7
   330f8:	7fc58593          	addi	a1,a1,2044 # 3a8f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e10>
   330fc:	00010317          	auipc	t1,0x10
   33100:	22433303          	ld	t1,548(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   33104:	000300e7          	jalr	ra,0(t1)
   33108:	c90ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3310c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33110:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33114:	00000693          	addi	a3,zero,0
   33118:	00007617          	auipc	a2,0x7
   3311c:	7f860613          	addi	a2,a2,2040 # 3a910 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e30>
   33120:	00007597          	auipc	a1,0x7
   33124:	7e058593          	addi	a1,a1,2016 # 3a900 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e20>
   33128:	00010317          	auipc	t1,0x10
   3312c:	1f833303          	ld	t1,504(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   33130:	000300e7          	jalr	ra,0(t1)
   33134:	c64ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33138:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3313c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33140:	00000693          	addi	a3,zero,0
   33144:	00007617          	auipc	a2,0x7
   33148:	7e560613          	addi	a2,a2,2021 # 3a929 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e49>
   3314c:	00007597          	auipc	a1,0x7
   33150:	7cc58593          	addi	a1,a1,1996 # 3a918 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e38>
   33154:	00010317          	auipc	t1,0x10
   33158:	1cc33303          	ld	t1,460(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3315c:	000300e7          	jalr	ra,0(t1)
   33160:	c38ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33164:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33168:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3316c:	00000693          	addi	a3,zero,0
   33170:	00007617          	auipc	a2,0x7
   33174:	7cf60613          	addi	a2,a2,1999 # 3a93f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e5f>
   33178:	00007597          	auipc	a1,0x7
   3317c:	7b858593          	addi	a1,a1,1976 # 3a930 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e50>
   33180:	00010317          	auipc	t1,0x10
   33184:	1a033303          	ld	t1,416(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   33188:	000300e7          	jalr	ra,0(t1)
   3318c:	c0cff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33190:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33194:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33198:	00000693          	addi	a3,zero,0
   3319c:	00007617          	auipc	a2,0x7
   331a0:	7b360613          	addi	a2,a2,1971 # 3a94f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e6f>
   331a4:	00007597          	auipc	a1,0x7
   331a8:	79c58593          	addi	a1,a1,1948 # 3a940 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e60>
   331ac:	00010317          	auipc	t1,0x10
   331b0:	17433303          	ld	t1,372(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   331b4:	000300e7          	jalr	ra,0(t1)
   331b8:	be0ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   331bc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   331c0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   331c4:	00000693          	addi	a3,zero,0
   331c8:	00007617          	auipc	a2,0x7
   331cc:	79960613          	addi	a2,a2,1945 # 3a961 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e81>
   331d0:	00007597          	auipc	a1,0x7
   331d4:	78058593          	addi	a1,a1,1920 # 3a950 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e70>
   331d8:	00010317          	auipc	t1,0x10
   331dc:	14833303          	ld	t1,328(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   331e0:	000300e7          	jalr	ra,0(t1)
   331e4:	bb4ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   331e8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   331ec:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   331f0:	00000693          	addi	a3,zero,0
   331f4:	00007617          	auipc	a2,0x7
   331f8:	78660613          	addi	a2,a2,1926 # 3a97a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e9a>
   331fc:	00007597          	auipc	a1,0x7
   33200:	76c58593          	addi	a1,a1,1900 # 3a968 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e88>
   33204:	00010317          	auipc	t1,0x10
   33208:	11c33303          	ld	t1,284(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3320c:	000300e7          	jalr	ra,0(t1)
   33210:	b88ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33214:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33218:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3321c:	00000693          	addi	a3,zero,0
   33220:	00007617          	auipc	a2,0x7
   33224:	77360613          	addi	a2,a2,1907 # 3a993 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1eb3>
   33228:	00007597          	auipc	a1,0x7
   3322c:	75858593          	addi	a1,a1,1880 # 3a980 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ea0>
   33230:	00010317          	auipc	t1,0x10
   33234:	0f033303          	ld	t1,240(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   33238:	000300e7          	jalr	ra,0(t1)
   3323c:	b5cff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33240:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33244:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33248:	00000693          	addi	a3,zero,0
   3324c:	00007617          	auipc	a2,0x7
   33250:	75760613          	addi	a2,a2,1879 # 3a9a3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ec3>
   33254:	00007597          	auipc	a1,0x7
   33258:	74458593          	addi	a1,a1,1860 # 3a998 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1eb8>
   3325c:	00010317          	auipc	t1,0x10
   33260:	0c433303          	ld	t1,196(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   33264:	000300e7          	jalr	ra,0(t1)
   33268:	b30ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3326c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33270:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33274:	00000693          	addi	a3,zero,0
   33278:	00007617          	auipc	a2,0x7
   3327c:	74260613          	addi	a2,a2,1858 # 3a9ba <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1eda>
   33280:	00007597          	auipc	a1,0x7
   33284:	72858593          	addi	a1,a1,1832 # 3a9a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ec8>
   33288:	00010317          	auipc	t1,0x10
   3328c:	09833303          	ld	t1,152(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   33290:	000300e7          	jalr	ra,0(t1)
   33294:	b04ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33298:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3329c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   332a0:	00000693          	addi	a3,zero,0
   332a4:	00007617          	auipc	a2,0x7
   332a8:	72d60613          	addi	a2,a2,1837 # 3a9d1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ef1>
   332ac:	00007597          	auipc	a1,0x7
   332b0:	71458593          	addi	a1,a1,1812 # 3a9c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ee0>
   332b4:	00010317          	auipc	t1,0x10
   332b8:	06c33303          	ld	t1,108(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   332bc:	000300e7          	jalr	ra,0(t1)
   332c0:	ad8ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   332c4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   332c8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   332cc:	00000693          	addi	a3,zero,0
   332d0:	00007617          	auipc	a2,0x7
   332d4:	71c60613          	addi	a2,a2,1820 # 3a9ec <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f0c>
   332d8:	00007597          	auipc	a1,0x7
   332dc:	70058593          	addi	a1,a1,1792 # 3a9d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ef8>
   332e0:	00010317          	auipc	t1,0x10
   332e4:	04033303          	ld	t1,64(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   332e8:	000300e7          	jalr	ra,0(t1)
   332ec:	aacff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   332f0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   332f4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   332f8:	00000693          	addi	a3,zero,0
   332fc:	00007617          	auipc	a2,0x7
   33300:	70160613          	addi	a2,a2,1793 # 3a9fd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f1d>
   33304:	00007597          	auipc	a1,0x7
   33308:	6ec58593          	addi	a1,a1,1772 # 3a9f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f10>
   3330c:	00010317          	auipc	t1,0x10
   33310:	01433303          	ld	t1,20(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   33314:	000300e7          	jalr	ra,0(t1)
   33318:	a80ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3331c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33320:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33324:	00000693          	addi	a3,zero,0
   33328:	00007617          	auipc	a2,0x7
   3332c:	6ec60613          	addi	a2,a2,1772 # 3aa14 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f34>
   33330:	00007597          	auipc	a1,0x7
   33334:	6d058593          	addi	a1,a1,1744 # 3aa00 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f20>
   33338:	00010317          	auipc	t1,0x10
   3333c:	fe833303          	ld	t1,-24(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   33340:	000300e7          	jalr	ra,0(t1)
   33344:	a54ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33348:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3334c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33350:	00000693          	addi	a3,zero,0
   33354:	00007617          	auipc	a2,0x7
   33358:	6d260613          	addi	a2,a2,1746 # 3aa26 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f46>
   3335c:	00007597          	auipc	a1,0x7
   33360:	6bc58593          	addi	a1,a1,1724 # 3aa18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f38>
   33364:	00010317          	auipc	t1,0x10
   33368:	fbc33303          	ld	t1,-68(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3336c:	000300e7          	jalr	ra,0(t1)
   33370:	a28ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33374:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33378:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3337c:	00000693          	addi	a3,zero,0
   33380:	00007617          	auipc	a2,0x7
   33384:	6bc60613          	addi	a2,a2,1724 # 3aa3c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f5c>
   33388:	00007597          	auipc	a1,0x7
   3338c:	6a058593          	addi	a1,a1,1696 # 3aa28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f48>
   33390:	00010317          	auipc	t1,0x10
   33394:	f9033303          	ld	t1,-112(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   33398:	000300e7          	jalr	ra,0(t1)
   3339c:	9fcff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   333a0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   333a4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   333a8:	00000693          	addi	a3,zero,0
   333ac:	00007617          	auipc	a2,0x7
   333b0:	6a360613          	addi	a2,a2,1699 # 3aa4f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f6f>
   333b4:	00007597          	auipc	a1,0x7
   333b8:	68c58593          	addi	a1,a1,1676 # 3aa40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f60>
   333bc:	00010317          	auipc	t1,0x10
   333c0:	f6433303          	ld	t1,-156(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   333c4:	000300e7          	jalr	ra,0(t1)
   333c8:	9d0ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   333cc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   333d0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   333d4:	00000693          	addi	a3,zero,0
   333d8:	00007617          	auipc	a2,0x7
   333dc:	68760613          	addi	a2,a2,1671 # 3aa5f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f7f>
   333e0:	00007597          	auipc	a1,0x7
   333e4:	67058593          	addi	a1,a1,1648 # 3aa50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f70>
   333e8:	00010317          	auipc	t1,0x10
   333ec:	f3833303          	ld	t1,-200(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   333f0:	000300e7          	jalr	ra,0(t1)
   333f4:	9a4ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   333f8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   333fc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33400:	00000693          	addi	a3,zero,0
   33404:	00007617          	auipc	a2,0x7
   33408:	66660613          	addi	a2,a2,1638 # 3aa6a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f8a>
   3340c:	00007597          	auipc	a1,0x7
   33410:	65458593          	addi	a1,a1,1620 # 3aa60 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f80>
   33414:	00010317          	auipc	t1,0x10
   33418:	f0c33303          	ld	t1,-244(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3341c:	000300e7          	jalr	ra,0(t1)
   33420:	978ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33424:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33428:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3342c:	00000693          	addi	a3,zero,0
   33430:	00007617          	auipc	a2,0x7
   33434:	64f60613          	addi	a2,a2,1615 # 3aa7f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f9f>
   33438:	00007597          	auipc	a1,0x7
   3343c:	63858593          	addi	a1,a1,1592 # 3aa70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f90>
   33440:	00010317          	auipc	t1,0x10
   33444:	ee033303          	ld	t1,-288(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   33448:	000300e7          	jalr	ra,0(t1)
   3344c:	94cff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33450:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33454:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33458:	00000693          	addi	a3,zero,0
   3345c:	00007617          	auipc	a2,0x7
   33460:	63360613          	addi	a2,a2,1587 # 3aa8f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1faf>
   33464:	00007597          	auipc	a1,0x7
   33468:	61c58593          	addi	a1,a1,1564 # 3aa80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fa0>
   3346c:	00010317          	auipc	t1,0x10
   33470:	eb433303          	ld	t1,-332(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   33474:	000300e7          	jalr	ra,0(t1)
   33478:	920ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3347c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33480:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33484:	00000693          	addi	a3,zero,0
   33488:	00007617          	auipc	a2,0x7
   3348c:	61d60613          	addi	a2,a2,1565 # 3aaa5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fc5>
   33490:	00007597          	auipc	a1,0x7
   33494:	60058593          	addi	a1,a1,1536 # 3aa90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fb0>
   33498:	00010317          	auipc	t1,0x10
   3349c:	e8833303          	ld	t1,-376(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   334a0:	000300e7          	jalr	ra,0(t1)
   334a4:	8f4ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   334a8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   334ac:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   334b0:	00000693          	addi	a3,zero,0
   334b4:	00007617          	auipc	a2,0x7
   334b8:	60960613          	addi	a2,a2,1545 # 3aabd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fdd>
   334bc:	00007597          	auipc	a1,0x7
   334c0:	5ec58593          	addi	a1,a1,1516 # 3aaa8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fc8>
   334c4:	00010317          	auipc	t1,0x10
   334c8:	e5c33303          	ld	t1,-420(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   334cc:	000300e7          	jalr	ra,0(t1)
   334d0:	8c8ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   334d4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   334d8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   334dc:	00000693          	addi	a3,zero,0
   334e0:	00007617          	auipc	a2,0x7
   334e4:	5f060613          	addi	a2,a2,1520 # 3aad0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ff0>
   334e8:	00007597          	auipc	a1,0x7
   334ec:	5d858593          	addi	a1,a1,1496 # 3aac0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fe0>
   334f0:	00010317          	auipc	t1,0x10
   334f4:	e3033303          	ld	t1,-464(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   334f8:	000300e7          	jalr	ra,0(t1)
   334fc:	89cff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33500:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33504:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33508:	00000693          	addi	a3,zero,0
   3350c:	00007617          	auipc	a2,0x7
   33510:	5dc60613          	addi	a2,a2,1500 # 3aae8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2008>
   33514:	00007597          	auipc	a1,0x7
   33518:	5c458593          	addi	a1,a1,1476 # 3aad8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ff8>
   3351c:	00010317          	auipc	t1,0x10
   33520:	e0433303          	ld	t1,-508(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   33524:	000300e7          	jalr	ra,0(t1)
   33528:	870ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3352c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33530:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33534:	00000693          	addi	a3,zero,0
   33538:	00007617          	auipc	a2,0x7
   3353c:	5ca60613          	addi	a2,a2,1482 # 3ab02 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2022>
   33540:	00007597          	auipc	a1,0x7
   33544:	5b058593          	addi	a1,a1,1456 # 3aaf0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2010>
   33548:	00010317          	auipc	t1,0x10
   3354c:	dd833303          	ld	t1,-552(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   33550:	000300e7          	jalr	ra,0(t1)
   33554:	844ff06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
        return "(DW_AT)0x" + to_hex((int)v);
   33558:	00010493          	addi	s1,sp,0
   3355c:	00048513          	addi	a0,s1,0
   33560:	00010317          	auipc	t1,0x10
   33564:	ed033303          	ld	t1,-304(t1) # 43430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe24>
   33568:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   3356c:	00900713          	addi	a4,zero,9
   33570:	00007697          	auipc	a3,0x7
   33574:	59868693          	addi	a3,a3,1432 # 3ab08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2028>
   33578:	00000613          	addi	a2,zero,0
   3357c:	00000593          	addi	a1,zero,0
   33580:	00048513          	addi	a0,s1,0
   33584:	b7ce30ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   33588:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3358c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   33590:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   33594:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   33598:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   3359c:	03278e63          	beq	a5,s2,335d8 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x10a8>
      { _M_dataplus._M_p = __p; }
   335a0:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   335a4:	0104b783          	ld	a5,16(s1)
   335a8:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   335ac:	0084b783          	ld	a5,8(s1)
   335b0:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   335b4:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   335b8:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   335bc:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   335c0:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   335c4:	01010793          	addi	a5,sp,16
   335c8:	00f51463          	bne	a0,a5,335d0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x10a0>
   335cc:	fcdfe06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   335d0:	9d0e30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   335d4:	fc5fe06f          	jal	zero,32598 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   335d8:	0084b603          	ld	a2,8(s1)
   335dc:	00160613          	addi	a2,a2,1
	if (__n == 0)
   335e0:	fc0606e3          	beq	a2,zero,335ac <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x107c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   335e4:	00090593          	addi	a1,s2,0
   335e8:	a58e30ef          	jal	ra,16840 <memcpy@plt>
   335ec:	fc1ff06f          	jal	zero,335ac <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x107c>
      { return _M_dataplus._M_p; }
   335f0:	00050413          	addi	s0,a0,0
   335f4:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   335f8:	01010793          	addi	a5,sp,16
   335fc:	00f50463          	beq	a0,a5,33604 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x10d4>
   33600:	9a0e30ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   33604:	00040513          	addi	a0,s0,0
   33608:	b88e30ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000003360c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)>:
template <typename T> std::string to_hex(T v) {
   3360c:	fd010113          	addi	sp,sp,-48
   33610:	02113423          	sd	ra,40(sp)
   33614:	02813023          	sd	s0,32(sp)
   33618:	00913c23          	sd	s1,24(sp)
   3361c:	00050493          	addi	s1,a0,0
  if (v == 0)
   33620:	00058c63          	beq	a1,zero,33638 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x2c>
  *pos-- = '\0';
   33624:	00010423          	sb	zero,8(sp)
   33628:	00710413          	addi	s0,sp,7
    if (digit < 10)
   3362c:	00900693          	addi	a3,zero,9
  while (v && pos >= buf) {
   33630:	fff10613          	addi	a2,sp,-1
   33634:	0480006f          	jal	zero,3367c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x70>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33638:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3363c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33640:	00000693          	addi	a3,zero,0
   33644:	00006617          	auipc	a2,0x6
   33648:	08560613          	addi	a2,a2,133 # 396c9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   3364c:	00006597          	auipc	a1,0x6
   33650:	07c58593          	addi	a1,a1,124 # 396c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe8>
   33654:	00010317          	auipc	t1,0x10
   33658:	ccc33303          	ld	t1,-820(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   3365c:	000300e7          	jalr	ra,0(t1)
   33660:	05c0006f          	jal	zero,336bc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0xb0>
   33664:	00e40023          	sb	a4,0(s0)
    pos--;
   33668:	fff40793          	addi	a5,s0,-1
    v >>= 4;
   3366c:	4045d59b          	sraiw	a1,a1,0x4
  while (v && pos >= buf) {
   33670:	02058063          	beq	a1,zero,33690 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x84>
   33674:	00c78e63          	beq	a5,a2,33690 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x84>
    pos--;
   33678:	00078413          	addi	s0,a5,0
    int digit = v & 0xf;
   3367c:	00f5f793          	andi	a5,a1,15
      *pos = 'a' + (digit - 10);
   33680:	05778713          	addi	a4,a5,87
    if (digit < 10)
   33684:	fef6c0e3          	blt	a3,a5,33664 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x58>
      *pos = '0' + digit;
   33688:	03078713          	addi	a4,a5,48
   3368c:	fd9ff06f          	jal	zero,33664 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x58>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33690:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   33694:	00f4b023          	sd	a5,0(s1)
	return __builtin_strlen(__s);
   33698:	00040513          	addi	a0,s0,0
   3369c:	fe5e20ef          	jal	ra,16680 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   336a0:	00000693          	addi	a3,zero,0
   336a4:	00a40633          	add	a2,s0,a0
   336a8:	00040593          	addi	a1,s0,0
   336ac:	00048513          	addi	a0,s1,0
   336b0:	00010317          	auipc	t1,0x10
   336b4:	c7033303          	ld	t1,-912(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   336b8:	000300e7          	jalr	ra,0(t1)
}
   336bc:	00048513          	addi	a0,s1,0
   336c0:	02813083          	ld	ra,40(sp)
   336c4:	02013403          	ld	s0,32(sp)
   336c8:	01813483          	ld	s1,24(sp)
   336cc:	03010113          	addi	sp,sp,48
   336d0:	00008067          	jalr	zero,0(ra)

00000000000336d4 <elf::elf::get_hdr() const>:
    // isn't super-cheap.
    m->sections.push_back(section(*this, sec));
  }
}

const Ehdr<> &elf::get_hdr() const { return m->hdr; }
   336d4:	00053503          	ld	a0,0(a0)
   336d8:	01050513          	addi	a0,a0,16
   336dc:	00008067          	jalr	zero,0(ra)

00000000000336e0 <elf::elf::get_loader() const>:

shared_ptr<loader> elf::get_loader() const { return m->l; }
   336e0:	ff010113          	addi	sp,sp,-16
   336e4:	00113423          	sd	ra,8(sp)
   336e8:	00813023          	sd	s0,0(sp)
   336ec:	00050413          	addi	s0,a0,0
      { return _M_ptr; }
   336f0:	0005b783          	ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   336f4:	0007b703          	ld	a4,0(a5)
   336f8:	00e53023          	sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   336fc:	0087b503          	ld	a0,8(a5)
   33700:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   33704:	02050063          	beq	a0,zero,33724 <elf::elf::get_loader() const+0x44>
    if (__is_single_threaded())
   33708:	00010797          	auipc	a5,0x10
   3370c:	d907b783          	ld	a5,-624(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   33710:	0007c783          	lbu	a5,0(a5)
   33714:	02078263          	beq	a5,zero,33738 <elf::elf::get_loader() const+0x58>
  { *__mem += __val; }
   33718:	03052783          	lw	a5,48(a0)
   3371c:	0017879b          	addiw	a5,a5,1
   33720:	02f52823          	sw	a5,48(a0)
   33724:	00040513          	addi	a0,s0,0
   33728:	00813083          	ld	ra,8(sp)
   3372c:	00013403          	ld	s0,0(sp)
   33730:	01010113          	addi	sp,sp,16
   33734:	00008067          	jalr	zero,0(ra)
      __atomic_add(__mem, __val);
   33738:	00100593          	addi	a1,zero,1
   3373c:	03050513          	addi	a0,a0,48
   33740:	e71e20ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   33744:	fe1ff06f          	jal	zero,33724 <elf::elf::get_loader() const+0x44>

0000000000033748 <elf::elf::sections() const>:

const std::vector<section> &elf::sections() const { return m->sections; }
   33748:	00053503          	ld	a0,0(a0)
   3374c:	05050513          	addi	a0,a0,80
   33750:	00008067          	jalr	zero,0(ra)

0000000000033754 <elf::elf::segments() const>:

const std::vector<segment> &elf::segments() const { return m->segments; }
   33754:	00053503          	ld	a0,0(a0)
   33758:	06850513          	addi	a0,a0,104
   3375c:	00008067          	jalr	zero,0(ra)

0000000000033760 <elf::elf::get_section(unsigned int) const>:
    if (name == sec.get_name(nullptr))
      return sec;
  return m->invalid_section;
}

const section &elf::get_section(unsigned index) const {
   33760:	fe010113          	addi	sp,sp,-32
   33764:	00113c23          	sd	ra,24(sp)
   33768:	00813823          	sd	s0,16(sp)
   3376c:	00913423          	sd	s1,8(sp)
   33770:	00050493          	addi	s1,a0,0
  if (index >= sections().size())
   33774:	02059413          	slli	s0,a1,0x20
   33778:	02045413          	srli	s0,s0,0x20
   3377c:	fcdff0ef          	jal	ra,33748 <elf::elf::sections() const>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   33780:	00853783          	ld	a5,8(a0)
   33784:	00053703          	ld	a4,0(a0)
   33788:	40e787b3          	sub	a5,a5,a4
   3378c:	4047d793          	srai	a5,a5,0x4
   33790:	02f46063          	bltu	s0,a5,337b0 <elf::elf::get_section(unsigned int) const+0x50>
    return m->invalid_section;
   33794:	0004b503          	ld	a0,0(s1)
   33798:	08050513          	addi	a0,a0,128
  return sections().at(index);
}
   3379c:	01813083          	ld	ra,24(sp)
   337a0:	01013403          	ld	s0,16(sp)
   337a4:	00813483          	ld	s1,8(sp)
   337a8:	02010113          	addi	sp,sp,32
   337ac:	00008067          	jalr	zero,0(ra)
  return sections().at(index);
   337b0:	00048513          	addi	a0,s1,0
   337b4:	f95ff0ef          	jal	ra,33748 <elf::elf::sections() const>
   337b8:	00053783          	ld	a5,0(a0)
   337bc:	00853603          	ld	a2,8(a0)
   337c0:	40f60633          	sub	a2,a2,a5
   337c4:	40465613          	srai	a2,a2,0x4
	return *(this->_M_impl._M_start + __n);
   337c8:	00441713          	slli	a4,s0,0x4
   337cc:	00e78533          	add	a0,a5,a4
	if (__n >= this->size())
   337d0:	fcc466e3          	bltu	s0,a2,3379c <elf::elf::get_section(unsigned int) const+0x3c>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   337d4:	00040593          	addi	a1,s0,0
   337d8:	00008517          	auipc	a0,0x8
   337dc:	a6050513          	addi	a0,a0,-1440 # 3b238 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2758>
   337e0:	900e30ef          	jal	ra,168e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>

00000000000337e4 <elf::elf::get_segment(unsigned int) const>:

const segment &elf::get_segment(unsigned index) const {
   337e4:	fe010113          	addi	sp,sp,-32
   337e8:	00113c23          	sd	ra,24(sp)
   337ec:	00813823          	sd	s0,16(sp)
   337f0:	00913423          	sd	s1,8(sp)
   337f4:	00050493          	addi	s1,a0,0
  if (index >= segments().size())
   337f8:	02059413          	slli	s0,a1,0x20
   337fc:	02045413          	srli	s0,s0,0x20
   33800:	f55ff0ef          	jal	ra,33754 <elf::elf::segments() const>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   33804:	00853783          	ld	a5,8(a0)
   33808:	00053703          	ld	a4,0(a0)
   3380c:	40e787b3          	sub	a5,a5,a4
   33810:	4047d793          	srai	a5,a5,0x4
   33814:	02f46063          	bltu	s0,a5,33834 <elf::elf::get_segment(unsigned int) const+0x50>
    return m->invalid_segment;
   33818:	0004b503          	ld	a0,0(s1)
   3381c:	09050513          	addi	a0,a0,144
  return segments().at(index);
}
   33820:	01813083          	ld	ra,24(sp)
   33824:	01013403          	ld	s0,16(sp)
   33828:	00813483          	ld	s1,8(sp)
   3382c:	02010113          	addi	sp,sp,32
   33830:	00008067          	jalr	zero,0(ra)
  return segments().at(index);
   33834:	00048513          	addi	a0,s1,0
   33838:	f1dff0ef          	jal	ra,33754 <elf::elf::segments() const>
   3383c:	00053783          	ld	a5,0(a0)
   33840:	00853603          	ld	a2,8(a0)
   33844:	40f60633          	sub	a2,a2,a5
   33848:	40465613          	srai	a2,a2,0x4
	return *(this->_M_impl._M_start + __n);
   3384c:	00441713          	slli	a4,s0,0x4
   33850:	00e78533          	add	a0,a5,a4
	if (__n >= this->size())
   33854:	fcc466e3          	bltu	s0,a2,33820 <elf::elf::get_segment(unsigned int) const+0x3c>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   33858:	00040593          	addi	a1,s0,0
   3385c:	00008517          	auipc	a0,0x8
   33860:	9dc50513          	addi	a0,a0,-1572 # 3b238 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2758>
   33864:	87ce30ef          	jal	ra,168e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>

0000000000033868 <elf::segment::get_hdr() const>:

segment::segment(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
}

const Phdr<> &segment::get_hdr() const { return m->hdr; }
   33868:	00053503          	ld	a0,0(a0)
   3386c:	01050513          	addi	a0,a0,16
   33870:	00008067          	jalr	zero,0(ra)

0000000000033874 <elf::segment::data() const>:

const void *segment::data() const {
   33874:	fd010113          	addi	sp,sp,-48
   33878:	02113423          	sd	ra,40(sp)
   3387c:	02813023          	sd	s0,32(sp)
   33880:	00913c23          	sd	s1,24(sp)
   33884:	00050413          	addi	s0,a0,0
      { return _M_ptr; }
   33888:	00053583          	ld	a1,0(a0)
  if (!m->data)
   3388c:	0485b783          	ld	a5,72(a1)
   33890:	02078063          	beq	a5,zero,338b0 <elf::segment::data() const+0x3c>
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.filesz);
  return m->data;
   33894:	00043783          	ld	a5,0(s0)
   33898:	0487b503          	ld	a0,72(a5)
}
   3389c:	02813083          	ld	ra,40(sp)
   338a0:	02013403          	ld	s0,32(sp)
   338a4:	01813483          	ld	s1,24(sp)
   338a8:	03010113          	addi	sp,sp,48
   338ac:	00008067          	jalr	zero,0(ra)
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.filesz);
   338b0:	00010513          	addi	a0,sp,0
   338b4:	e2dff0ef          	jal	ra,336e0 <elf::elf::get_loader() const>
   338b8:	00013503          	ld	a0,0(sp)
   338bc:	00043483          	ld	s1,0(s0)
   338c0:	00053783          	ld	a5,0(a0)
   338c4:	0107b783          	ld	a5,16(a5)
   338c8:	0304b603          	ld	a2,48(s1)
   338cc:	0184b583          	ld	a1,24(s1)
   338d0:	000780e7          	jalr	ra,0(a5)
   338d4:	04a4b423          	sd	a0,72(s1)
	if (_M_pi != nullptr)
   338d8:	00813483          	ld	s1,8(sp)
   338dc:	fa048ce3          	beq	s1,zero,33894 <elf::segment::data() const+0x20>
    if (__is_single_threaded())
   338e0:	00010797          	auipc	a5,0x10
   338e4:	bb87b783          	ld	a5,-1096(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   338e8:	0007c783          	lbu	a5,0(a5)
   338ec:	06078263          	beq	a5,zero,33950 <elf::segment::data() const+0xdc>
    _Atomic_word __result = *__mem;
   338f0:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   338f4:	fff5079b          	addiw	a5,a0,-1
   338f8:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   338fc:	00100793          	addi	a5,zero,1
   33900:	f8f51ae3          	bne	a0,a5,33894 <elf::segment::data() const+0x20>
	_M_dispose();
   33904:	0004b783          	ld	a5,0(s1)
   33908:	0107b783          	ld	a5,16(a5)
   3390c:	00048513          	addi	a0,s1,0
   33910:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   33914:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   33918:	00010797          	auipc	a5,0x10
   3391c:	b807b783          	ld	a5,-1152(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   33920:	0007c783          	lbu	a5,0(a5)
   33924:	02078e63          	beq	a5,zero,33960 <elf::segment::data() const+0xec>
    _Atomic_word __result = *__mem;
   33928:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   3392c:	fff5079b          	addiw	a5,a0,-1
   33930:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   33934:	00100793          	addi	a5,zero,1
   33938:	f4f51ee3          	bne	a0,a5,33894 <elf::segment::data() const+0x20>
	    _M_destroy();
   3393c:	0004b783          	ld	a5,0(s1)
   33940:	0187b783          	ld	a5,24(a5)
   33944:	00048513          	addi	a0,s1,0
   33948:	000780e7          	jalr	ra,0(a5)
   3394c:	f49ff06f          	jal	zero,33894 <elf::segment::data() const+0x20>
      return __exchange_and_add(__mem, __val);
   33950:	fff00593          	addi	a1,zero,-1
   33954:	03048513          	addi	a0,s1,48
   33958:	c99e20ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   3395c:	fa1ff06f          	jal	zero,338fc <elf::segment::data() const+0x88>
   33960:	fff00593          	addi	a1,zero,-1
   33964:	03448513          	addi	a0,s1,52
   33968:	c89e20ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   3396c:	fc9ff06f          	jal	zero,33934 <elf::segment::data() const+0xc0>
	if (_M_pi != nullptr)
   33970:	00050413          	addi	s0,a0,0
   33974:	00813503          	ld	a0,8(sp)
   33978:	00050863          	beq	a0,zero,33988 <elf::segment::data() const+0x114>
	  _M_pi->_M_release();
   3397c:	00010317          	auipc	t1,0x10
   33980:	a6433303          	ld	t1,-1436(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   33984:	000300e7          	jalr	ra,0(t1)
   33988:	00040513          	addi	a0,s0,0
   3398c:	804e30ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000033990 <elf::segment::file_size() const>:

size_t segment::file_size() const { return m->hdr.filesz; }
   33990:	00053783          	ld	a5,0(a0)
   33994:	0307b503          	ld	a0,48(a5)
   33998:	00008067          	jalr	zero,0(ra)

000000000003399c <elf::segment::mem_size() const>:

size_t segment::mem_size() const { return m->hdr.memsz; }
   3399c:	00053783          	ld	a5,0(a0)
   339a0:	0387b503          	ld	a0,56(a5)
   339a4:	00008067          	jalr	zero,0(ra)

00000000000339a8 <elf::section::get_hdr() const>:

section::section(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
}

const Shdr<> &section::get_hdr() const { return m->hdr; }
   339a8:	00053503          	ld	a0,0(a0)
   339ac:	01050513          	addi	a0,a0,16
   339b0:	00008067          	jalr	zero,0(ra)

00000000000339b4 <elf::section::data() const>:
      { return _M_ptr; }
   339b4:	00053583          	ld	a1,0(a0)
}

string section::get_name() const { return get_name(nullptr); }

const void *section::data() const {
  if (m->hdr.type == sht::nobits)
   339b8:	0145a703          	lw	a4,20(a1)
   339bc:	00800793          	addi	a5,zero,8
   339c0:	0ef70e63          	beq	a4,a5,33abc <elf::section::data() const+0x108>
const void *section::data() const {
   339c4:	fd010113          	addi	sp,sp,-48
   339c8:	02113423          	sd	ra,40(sp)
   339cc:	02813023          	sd	s0,32(sp)
   339d0:	00913c23          	sd	s1,24(sp)
   339d4:	00050413          	addi	s0,a0,0
    return nullptr;
  if (!m->data)
   339d8:	0605b783          	ld	a5,96(a1)
   339dc:	02078063          	beq	a5,zero,339fc <elf::section::data() const+0x48>
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.size);
  return m->data;
   339e0:	00043783          	ld	a5,0(s0)
   339e4:	0607b503          	ld	a0,96(a5)
}
   339e8:	02813083          	ld	ra,40(sp)
   339ec:	02013403          	ld	s0,32(sp)
   339f0:	01813483          	ld	s1,24(sp)
   339f4:	03010113          	addi	sp,sp,48
   339f8:	00008067          	jalr	zero,0(ra)
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.size);
   339fc:	00010513          	addi	a0,sp,0
   33a00:	ce1ff0ef          	jal	ra,336e0 <elf::elf::get_loader() const>
   33a04:	00013503          	ld	a0,0(sp)
   33a08:	00043483          	ld	s1,0(s0)
   33a0c:	00053783          	ld	a5,0(a0)
   33a10:	0107b783          	ld	a5,16(a5)
   33a14:	0304b603          	ld	a2,48(s1)
   33a18:	0284b583          	ld	a1,40(s1)
   33a1c:	000780e7          	jalr	ra,0(a5)
   33a20:	06a4b023          	sd	a0,96(s1)
	if (_M_pi != nullptr)
   33a24:	00813483          	ld	s1,8(sp)
   33a28:	fa048ce3          	beq	s1,zero,339e0 <elf::section::data() const+0x2c>
    if (__is_single_threaded())
   33a2c:	00010797          	auipc	a5,0x10
   33a30:	a6c7b783          	ld	a5,-1428(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   33a34:	0007c783          	lbu	a5,0(a5)
   33a38:	06078263          	beq	a5,zero,33a9c <elf::section::data() const+0xe8>
    _Atomic_word __result = *__mem;
   33a3c:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   33a40:	fff5079b          	addiw	a5,a0,-1
   33a44:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   33a48:	00100793          	addi	a5,zero,1
   33a4c:	f8f51ae3          	bne	a0,a5,339e0 <elf::section::data() const+0x2c>
	_M_dispose();
   33a50:	0004b783          	ld	a5,0(s1)
   33a54:	0107b783          	ld	a5,16(a5)
   33a58:	00048513          	addi	a0,s1,0
   33a5c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   33a60:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   33a64:	00010797          	auipc	a5,0x10
   33a68:	a347b783          	ld	a5,-1484(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   33a6c:	0007c783          	lbu	a5,0(a5)
   33a70:	02078e63          	beq	a5,zero,33aac <elf::section::data() const+0xf8>
    _Atomic_word __result = *__mem;
   33a74:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   33a78:	fff5079b          	addiw	a5,a0,-1
   33a7c:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   33a80:	00100793          	addi	a5,zero,1
   33a84:	f4f51ee3          	bne	a0,a5,339e0 <elf::section::data() const+0x2c>
	    _M_destroy();
   33a88:	0004b783          	ld	a5,0(s1)
   33a8c:	0187b783          	ld	a5,24(a5)
   33a90:	00048513          	addi	a0,s1,0
   33a94:	000780e7          	jalr	ra,0(a5)
   33a98:	f49ff06f          	jal	zero,339e0 <elf::section::data() const+0x2c>
      return __exchange_and_add(__mem, __val);
   33a9c:	fff00593          	addi	a1,zero,-1
   33aa0:	03048513          	addi	a0,s1,48
   33aa4:	b4de20ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   33aa8:	fa1ff06f          	jal	zero,33a48 <elf::section::data() const+0x94>
   33aac:	fff00593          	addi	a1,zero,-1
   33ab0:	03448513          	addi	a0,s1,52
   33ab4:	b3de20ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   33ab8:	fc9ff06f          	jal	zero,33a80 <elf::section::data() const+0xcc>
    return nullptr;
   33abc:	00000513          	addi	a0,zero,0
}
   33ac0:	00008067          	jalr	zero,0(ra)
	if (_M_pi != nullptr)
   33ac4:	00050413          	addi	s0,a0,0
   33ac8:	00813503          	ld	a0,8(sp)
   33acc:	00050863          	beq	a0,zero,33adc <elf::section::data() const+0x128>
	  _M_pi->_M_release();
   33ad0:	00010317          	auipc	t1,0x10
   33ad4:	91033303          	ld	t1,-1776(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   33ad8:	000300e7          	jalr	ra,0(t1)
   33adc:	00040513          	addi	a0,s0,0
   33ae0:	eb1e20ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000033ae4 <elf::section::size() const>:

size_t section::size() const { return m->hdr.size; }
   33ae4:	00053783          	ld	a5,0(a0)
   33ae8:	0307b503          	ld	a0,48(a5)
   33aec:	00008067          	jalr	zero,0(ra)

0000000000033af0 <elf::strtab::strtab(elf::elf, void const*, unsigned long)>:

  const elf f;
  const char *data, *end;
};

strtab::strtab(elf f, const void *data, size_t size)
   33af0:	fd010113          	addi	sp,sp,-48
   33af4:	02113423          	sd	ra,40(sp)
   33af8:	02813023          	sd	s0,32(sp)
   33afc:	00913c23          	sd	s1,24(sp)
   33b00:	01213823          	sd	s2,16(sp)
   33b04:	01313423          	sd	s3,8(sp)
   33b08:	01413023          	sd	s4,0(sp)
   33b0c:	00050913          	addi	s2,a0,0
   33b10:	00058493          	addi	s1,a1,0
   33b14:	00060993          	addi	s3,a2,0
    : m(make_shared<impl>(f, (const char *)data, (const char *)data + size)) {}
   33b18:	00d60a33          	add	s4,a2,a3
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   33b1c:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   33b20:	05800513          	addi	a0,zero,88
   33b24:	c8de20ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   33b28:	00050413          	addi	s0,a0,0
   33b2c:	00052423          	sw	zero,8(a0)
   33b30:	00052623          	sw	zero,12(a0)
   33b34:	00052823          	sw	zero,16(a0)
   33b38:	00052a23          	sw	zero,20(a0)
   33b3c:	00052c23          	sw	zero,24(a0)
   33b40:	00052e23          	sw	zero,28(a0)
   33b44:	02053023          	sd	zero,32(a0)
   33b48:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   33b4c:	00100793          	addi	a5,zero,1
   33b50:	02f52823          	sw	a5,48(a0)
   33b54:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   33b58:	00010797          	auipc	a5,0x10
   33b5c:	ab07b783          	ld	a5,-1360(a5) # 43608 <vtable for std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x928>
   33b60:	01078793          	addi	a5,a5,16
   33b64:	00f53023          	sd	a5,0(a0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   33b68:	0004b783          	ld	a5,0(s1)
   33b6c:	02f53c23          	sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   33b70:	0084b503          	ld	a0,8(s1)
   33b74:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   33b78:	02050063          	beq	a0,zero,33b98 <elf::strtab::strtab(elf::elf, void const*, unsigned long)+0xa8>
    if (__is_single_threaded())
   33b7c:	00010717          	auipc	a4,0x10
   33b80:	91c73703          	ld	a4,-1764(a4) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   33b84:	00074703          	lbu	a4,0(a4)
   33b88:	04070263          	beq	a4,zero,33bcc <elf::strtab::strtab(elf::elf, void const*, unsigned long)+0xdc>
  { *__mem += __val; }
   33b8c:	03052703          	lw	a4,48(a0)
   33b90:	0017071b          	addiw	a4,a4,1
   33b94:	02e52823          	sw	a4,48(a0)
      : f(f), data(data), end(end) {}
   33b98:	05343423          	sd	s3,72(s0)
   33b9c:	05443823          	sd	s4,80(s0)
	  _M_pi = __pi;
   33ba0:	00893423          	sd	s0,8(s2)
   33ba4:	03840413          	addi	s0,s0,56
	  __p = __pi->_M_ptr();
   33ba8:	00893023          	sd	s0,0(s2)
    : m(make_shared<impl>(f, (const char *)data, (const char *)data + size)) {}
   33bac:	02813083          	ld	ra,40(sp)
   33bb0:	02013403          	ld	s0,32(sp)
   33bb4:	01813483          	ld	s1,24(sp)
   33bb8:	01013903          	ld	s2,16(sp)
   33bbc:	00813983          	ld	s3,8(sp)
   33bc0:	00013a03          	ld	s4,0(sp)
   33bc4:	03010113          	addi	sp,sp,48
   33bc8:	00008067          	jalr	zero,0(ra)
      __atomic_add(__mem, __val);
   33bcc:	00100593          	addi	a1,zero,1
   33bd0:	03050513          	addi	a0,a0,48
   33bd4:	9dde20ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   33bd8:	fc1ff06f          	jal	zero,33b98 <elf::strtab::strtab(elf::elf, void const*, unsigned long)+0xa8>

0000000000033bdc <elf::section::as_strtab() const>:
strtab section::as_strtab() const {
   33bdc:	fd010113          	addi	sp,sp,-48
   33be0:	02113423          	sd	ra,40(sp)
   33be4:	02813023          	sd	s0,32(sp)
   33be8:	00913c23          	sd	s1,24(sp)
   33bec:	01213823          	sd	s2,16(sp)
      { return _M_ptr; }
   33bf0:	0005b783          	ld	a5,0(a1)
  if (m->hdr.type != sht::strtab)
   33bf4:	0147a683          	lw	a3,20(a5)
   33bf8:	00300713          	addi	a4,zero,3
   33bfc:	04e69463          	bne	a3,a4,33c44 <elf::section::as_strtab() const+0x68>
   33c00:	00050913          	addi	s2,a0,0
   33c04:	00058413          	addi	s0,a1,0
      __shared_ptr(const __shared_ptr&) noexcept = default;
   33c08:	0007b703          	ld	a4,0(a5)
   33c0c:	00e13023          	sd	a4,0(sp)
      : _M_pi(__r._M_pi)
   33c10:	0087b503          	ld	a0,8(a5)
   33c14:	00a13423          	sd	a0,8(sp)
	if (_M_pi != nullptr)
   33c18:	02050063          	beq	a0,zero,33c38 <elf::section::as_strtab() const+0x5c>
    if (__is_single_threaded())
   33c1c:	00010717          	auipc	a4,0x10
   33c20:	87c73703          	ld	a4,-1924(a4) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   33c24:	00074703          	lbu	a4,0(a4)
   33c28:	04070e63          	beq	a4,zero,33c84 <elf::section::as_strtab() const+0xa8>
  { *__mem += __val; }
   33c2c:	03052703          	lw	a4,48(a0)
   33c30:	0017071b          	addiw	a4,a4,1
   33c34:	02e52823          	sw	a4,48(a0)
  return strtab(m->f, data(), size());
   33c38:	00040513          	addi	a0,s0,0
   33c3c:	d79ff0ef          	jal	ra,339b4 <elf::section::data() const>
   33c40:	0540006f          	jal	zero,33c94 <elf::section::as_strtab() const+0xb8>
    throw section_type_mismatch("cannot use section as strtab");
   33c44:	01000513          	addi	a0,zero,16
   33c48:	a49e20ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   33c4c:	00050413          	addi	s0,a0,0
class section_type_mismatch : public std::logic_error {
public:
  explicit section_type_mismatch(const std::string &what_arg)
      : std::logic_error(what_arg) {}
  explicit section_type_mismatch(const char *what_arg)
      : std::logic_error(what_arg) {}
   33c50:	00007597          	auipc	a1,0x7
   33c54:	63858593          	addi	a1,a1,1592 # 3b288 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27a8>
   33c58:	bb9e20ef          	jal	ra,16810 <std::logic_error::logic_error(char const*)@plt>
   33c5c:	0000f797          	auipc	a5,0xf
   33c60:	7747b783          	ld	a5,1908(a5) # 433d0 <vtable for elf::section_type_mismatch@@Base+0x7c0>
   33c64:	01078793          	addi	a5,a5,16
   33c68:	00f43023          	sd	a5,0(s0)
   33c6c:	0000f617          	auipc	a2,0xf
   33c70:	65463603          	ld	a2,1620(a2) # 432c0 <elf::section_type_mismatch::~section_type_mismatch()@@Base+0xdacc>
   33c74:	0000f597          	auipc	a1,0xf
   33c78:	6845b583          	ld	a1,1668(a1) # 432f8 <typeinfo for elf::section_type_mismatch@@Base+0x7a0>
   33c7c:	00040513          	addi	a0,s0,0
   33c80:	ce1e20ef          	jal	ra,16960 <__cxa_throw@plt>
      __atomic_add(__mem, __val);
   33c84:	00100593          	addi	a1,zero,1
   33c88:	03050513          	addi	a0,a0,48
   33c8c:	925e20ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   33c90:	fa9ff06f          	jal	zero,33c38 <elf::section::as_strtab() const+0x5c>
  return strtab(m->f, data(), size());
   33c94:	00050493          	addi	s1,a0,0
   33c98:	00040513          	addi	a0,s0,0
   33c9c:	e49ff0ef          	jal	ra,33ae4 <elf::section::size() const>
   33ca0:	00050693          	addi	a3,a0,0
   33ca4:	00048613          	addi	a2,s1,0
   33ca8:	00010593          	addi	a1,sp,0
   33cac:	00090513          	addi	a0,s2,0
   33cb0:	e41ff0ef          	jal	ra,33af0 <elf::strtab::strtab(elf::elf, void const*, unsigned long)>
	if (_M_pi != nullptr)
   33cb4:	00813403          	ld	s0,8(sp)
   33cb8:	02040463          	beq	s0,zero,33ce0 <elf::section::as_strtab() const+0x104>
    if (__is_single_threaded())
   33cbc:	0000f797          	auipc	a5,0xf
   33cc0:	7dc7b783          	ld	a5,2012(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   33cc4:	0007c783          	lbu	a5,0(a5)
   33cc8:	02078a63          	beq	a5,zero,33cfc <elf::section::as_strtab() const+0x120>
    _Atomic_word __result = *__mem;
   33ccc:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   33cd0:	fff5079b          	addiw	a5,a0,-1
   33cd4:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   33cd8:	00100793          	addi	a5,zero,1
   33cdc:	02f50863          	beq	a0,a5,33d0c <elf::section::as_strtab() const+0x130>
}
   33ce0:	00090513          	addi	a0,s2,0
   33ce4:	02813083          	ld	ra,40(sp)
   33ce8:	02013403          	ld	s0,32(sp)
   33cec:	01813483          	ld	s1,24(sp)
   33cf0:	01013903          	ld	s2,16(sp)
   33cf4:	03010113          	addi	sp,sp,48
   33cf8:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   33cfc:	fff00593          	addi	a1,zero,-1
   33d00:	03040513          	addi	a0,s0,48
   33d04:	8ede20ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   33d08:	fd1ff06f          	jal	zero,33cd8 <elf::section::as_strtab() const+0xfc>
	_M_dispose();
   33d0c:	00043783          	ld	a5,0(s0)
   33d10:	0107b783          	ld	a5,16(a5)
   33d14:	00040513          	addi	a0,s0,0
   33d18:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   33d1c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   33d20:	0000f797          	auipc	a5,0xf
   33d24:	7787b783          	ld	a5,1912(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   33d28:	0007c783          	lbu	a5,0(a5)
   33d2c:	02078663          	beq	a5,zero,33d58 <elf::section::as_strtab() const+0x17c>
    _Atomic_word __result = *__mem;
   33d30:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   33d34:	fff5079b          	addiw	a5,a0,-1
   33d38:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   33d3c:	00100793          	addi	a5,zero,1
   33d40:	faf510e3          	bne	a0,a5,33ce0 <elf::section::as_strtab() const+0x104>
	    _M_destroy();
   33d44:	00043783          	ld	a5,0(s0)
   33d48:	0187b783          	ld	a5,24(a5)
   33d4c:	00040513          	addi	a0,s0,0
   33d50:	000780e7          	jalr	ra,0(a5)
  return strtab(m->f, data(), size());
   33d54:	f8dff06f          	jal	zero,33ce0 <elf::section::as_strtab() const+0x104>
      return __exchange_and_add(__mem, __val);
   33d58:	fff00593          	addi	a1,zero,-1
   33d5c:	03440513          	addi	a0,s0,52
   33d60:	891e20ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   33d64:	fd9ff06f          	jal	zero,33d3c <elf::section::as_strtab() const+0x160>
    throw section_type_mismatch("cannot use section as strtab");
   33d68:	00050493          	addi	s1,a0,0
   33d6c:	00040513          	addi	a0,s0,0
   33d70:	9e1e20ef          	jal	ra,16750 <__cxa_free_exception@plt>
   33d74:	00048513          	addi	a0,s1,0
   33d78:	c19e20ef          	jal	ra,16990 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   33d7c:	00050413          	addi	s0,a0,0
   33d80:	00813503          	ld	a0,8(sp)
   33d84:	00050863          	beq	a0,zero,33d94 <elf::section::as_strtab() const+0x1b8>
	  _M_pi->_M_release();
   33d88:	0000f317          	auipc	t1,0xf
   33d8c:	65833303          	ld	t1,1624(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   33d90:	000300e7          	jalr	ra,0(t1)
   33d94:	00040513          	addi	a0,s0,0
   33d98:	bf9e20ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000033d9c <elf::strtab::get(unsigned long, unsigned long*) const>:

const char *strtab::get(Elf64::Off offset, size_t *len_out) const {
   33d9c:	f8010113          	addi	sp,sp,-128
   33da0:	06113c23          	sd	ra,120(sp)
   33da4:	06813823          	sd	s0,112(sp)
   33da8:	06913423          	sd	s1,104(sp)
      { return _M_ptr; }
   33dac:	00053783          	ld	a5,0(a0)
  const char *start = m->data + offset;
   33db0:	0107b503          	ld	a0,16(a5)
   33db4:	00b50533          	add	a0,a0,a1

  if (start >= m->end)
   33db8:	0187b683          	ld	a3,24(a5)
    throw range_error("string offset " + std::to_string(offset) +
                      " exceeds section size");

  // Find the null terminator
  const char *p = start;
   33dbc:	00050793          	addi	a5,a0,0
  if (start >= m->end)
   33dc0:	02d57863          	bgeu	a0,a3,33df0 <elf::strtab::get(unsigned long, unsigned long*) const+0x54>
  while (p < m->end && *p)
   33dc4:	0007c703          	lbu	a4,0(a5)
   33dc8:	1c070e63          	beq	a4,zero,33fa4 <elf::strtab::get(unsigned long, unsigned long*) const+0x208>
    p++;
   33dcc:	00178793          	addi	a5,a5,1
  while (p < m->end && *p)
   33dd0:	fef69ae3          	bne	a3,a5,33dc4 <elf::strtab::get(unsigned long, unsigned long*) const+0x28>
  if (p == m->end)
    throw format_error("unterminated string");
   33dd4:	01000513          	addi	a0,zero,16
   33dd8:	8b9e20ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   33ddc:	00050413          	addi	s0,a0,0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   33de0:	00004597          	auipc	a1,0x4
   33de4:	d2858593          	addi	a1,a1,-728 # 37b08 <std::piecewise_construct+0x38>
   33de8:	c29e20ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   33dec:	1dc0006f          	jal	zero,33fc8 <elf::strtab::get(unsigned long, unsigned long*) const+0x22c>
   33df0:	00058413          	addi	s0,a1,0
                      " exceeds section size");
   33df4:	01000513          	addi	a0,zero,16
   33df8:	899e20ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   33dfc:	00050493          	addi	s1,a0,0
   33e00:	00040793          	addi	a5,s0,0
      unsigned __n = 1;
   33e04:	00100593          	addi	a1,zero,1
	  if (__value < (unsigned)__base) return __n;
   33e08:	00900813          	addi	a6,zero,9
	  if (__value < __b2) return __n + 1;
   33e0c:	06300513          	addi	a0,zero,99
	  if (__value < __b3) return __n + 2;
   33e10:	3e700613          	addi	a2,zero,999
	  if (__value < __b4) return __n + 3;
   33e14:	00002737          	lui	a4,0x2
   33e18:	70f70693          	addi	a3,a4,1807 # 270f <__abi_tag-0xdb85>
	  __value /= __b4;
   33e1c:	71070713          	addi	a4,a4,1808
	  if (__value < (unsigned)__base) return __n;
   33e20:	00f87663          	bgeu	a6,a5,33e2c <elf::strtab::get(unsigned long, unsigned long*) const+0x90>
	  if (__value < __b2) return __n + 1;
   33e24:	02f56463          	bltu	a0,a5,33e4c <elf::strtab::get(unsigned long, unsigned long*) const+0xb0>
   33e28:	0015859b          	addiw	a1,a1,1
	: allocator_type(__a), _M_p(__dat) { }
   33e2c:	01010793          	addi	a5,sp,16
   33e30:	00f13023          	sd	a5,0(sp)
      { _M_construct(__n, __c); }
   33e34:	00000613          	addi	a2,zero,0
   33e38:	02059593          	slli	a1,a1,0x20
   33e3c:	0205d593          	srli	a1,a1,0x20
   33e40:	00010513          	addi	a0,sp,0
   33e44:	9bde20ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
   33e48:	0280006f          	jal	zero,33e70 <elf::strtab::get(unsigned long, unsigned long*) const+0xd4>
	  if (__value < __b3) return __n + 2;
   33e4c:	00f66663          	bltu	a2,a5,33e58 <elf::strtab::get(unsigned long, unsigned long*) const+0xbc>
   33e50:	0025859b          	addiw	a1,a1,2
   33e54:	fd9ff06f          	jal	zero,33e2c <elf::strtab::get(unsigned long, unsigned long*) const+0x90>
	  if (__value < __b4) return __n + 3;
   33e58:	00f6e663          	bltu	a3,a5,33e64 <elf::strtab::get(unsigned long, unsigned long*) const+0xc8>
   33e5c:	0035859b          	addiw	a1,a1,3
   33e60:	fcdff06f          	jal	zero,33e2c <elf::strtab::get(unsigned long, unsigned long*) const+0x90>
	  __value /= __b4;
   33e64:	02e7d7b3          	divu	a5,a5,a4
	  __n += 4;
   33e68:	0045859b          	addiw	a1,a1,4
	  if (__value < (unsigned)__base) return __n;
   33e6c:	fb5ff06f          	jal	zero,33e20 <elf::strtab::get(unsigned long, unsigned long*) const+0x84>
      { return _M_dataplus._M_p; }
   33e70:	00013603          	ld	a2,0(sp)
      unsigned __pos = __len - 1;
   33e74:	00813783          	ld	a5,8(sp)
   33e78:	fff7879b          	addiw	a5,a5,-1
      while (__val >= 100)
   33e7c:	06300813          	addi	a6,zero,99
	  auto const __num = (__val % 100) * 2;
   33e80:	06400593          	addi	a1,zero,100
	  __first[__pos] = __digits[__num + 1];
   33e84:	0000f517          	auipc	a0,0xf
   33e88:	5fc53503          	ld	a0,1532(a0) # 43480 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb4d8>
      while (__val >= 100)
   33e8c:	04886263          	bltu	a6,s0,33ed0 <elf::strtab::get(unsigned long, unsigned long*) const+0x134>
      if (__val >= 10)
   33e90:	00900793          	addi	a5,zero,9
   33e94:	0887f063          	bgeu	a5,s0,33f14 <elf::strtab::get(unsigned long, unsigned long*) const+0x178>
	  auto const __num = __val * 2;
   33e98:	00141413          	slli	s0,s0,0x1
	  __first[1] = __digits[__num + 1];
   33e9c:	0000f797          	auipc	a5,0xf
   33ea0:	5e47b783          	ld	a5,1508(a5) # 43480 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb4d8>
   33ea4:	008787b3          	add	a5,a5,s0
   33ea8:	0017c703          	lbu	a4,1(a5)
   33eac:	00e600a3          	sb	a4,1(a2)
	  __first[0] = __digits[__num];
   33eb0:	0007c783          	lbu	a5,0(a5)
   33eb4:	00f60023          	sb	a5,0(a2)
    { return std::move(__rhs.insert(0, __lhs)); }
   33eb8:	00007617          	auipc	a2,0x7
   33ebc:	3f060613          	addi	a2,a2,1008 # 3b2a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27c8>
   33ec0:	00000593          	addi	a1,zero,0
   33ec4:	00010513          	addi	a0,sp,0
   33ec8:	f38e20ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   33ecc:	0540006f          	jal	zero,33f20 <elf::strtab::get(unsigned long, unsigned long*) const+0x184>
	  auto const __num = (__val % 100) * 2;
   33ed0:	02b47733          	remu	a4,s0,a1
   33ed4:	00171713          	slli	a4,a4,0x1
	  __val /= 100;
   33ed8:	02b45433          	divu	s0,s0,a1
	  __first[__pos] = __digits[__num + 1];
   33edc:	02079693          	slli	a3,a5,0x20
   33ee0:	0206d693          	srli	a3,a3,0x20
   33ee4:	00d606b3          	add	a3,a2,a3
   33ee8:	00e50733          	add	a4,a0,a4
   33eec:	00174883          	lbu	a7,1(a4)
   33ef0:	01168023          	sb	a7,0(a3)
	  __first[__pos - 1] = __digits[__num];
   33ef4:	fff7869b          	addiw	a3,a5,-1
   33ef8:	02069693          	slli	a3,a3,0x20
   33efc:	0206d693          	srli	a3,a3,0x20
   33f00:	00d606b3          	add	a3,a2,a3
   33f04:	00074703          	lbu	a4,0(a4)
   33f08:	00e68023          	sb	a4,0(a3)
	  __pos -= 2;
   33f0c:	ffe7879b          	addiw	a5,a5,-2
   33f10:	f7dff06f          	jal	zero,33e8c <elf::strtab::get(unsigned long, unsigned long*) const+0xf0>
	__first[0] = '0' + __val;
   33f14:	0304079b          	addiw	a5,s0,48
   33f18:	0ff7f793          	andi	a5,a5,255
   33f1c:	f99ff06f          	jal	zero,33eb4 <elf::strtab::get(unsigned long, unsigned long*) const+0x118>
   33f20:	00050593          	addi	a1,a0,0
   33f24:	02010413          	addi	s0,sp,32
   33f28:	00040513          	addi	a0,s0,0
   33f2c:	fa4e20ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   33f30:	00007597          	auipc	a1,0x7
   33f34:	38858593          	addi	a1,a1,904 # 3b2b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27d8>
   33f38:	00040513          	addi	a0,s0,0
   33f3c:	b05e20ef          	jal	ra,16a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   33f40:	00050593          	addi	a1,a0,0
   33f44:	04010413          	addi	s0,sp,64
   33f48:	00040513          	addi	a0,s0,0
   33f4c:	f84e20ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    throw range_error("string offset " + std::to_string(offset) +
   33f50:	00040593          	addi	a1,s0,0
   33f54:	00048513          	addi	a0,s1,0
   33f58:	af9e20ef          	jal	ra,16a50 <std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   33f5c:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   33f60:	05010793          	addi	a5,sp,80
   33f64:	00f50463          	beq	a0,a5,33f6c <elf::strtab::get(unsigned long, unsigned long*) const+0x1d0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   33f68:	839e20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   33f6c:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   33f70:	03010793          	addi	a5,sp,48
   33f74:	00f50463          	beq	a0,a5,33f7c <elf::strtab::get(unsigned long, unsigned long*) const+0x1e0>
   33f78:	829e20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   33f7c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   33f80:	01010793          	addi	a5,sp,16
   33f84:	00f50463          	beq	a0,a5,33f8c <elf::strtab::get(unsigned long, unsigned long*) const+0x1f0>
   33f88:	819e20ef          	jal	ra,167a0 <operator delete(void*)@plt>
                      " exceeds section size");
   33f8c:	0000f617          	auipc	a2,0xf
   33f90:	46c63603          	ld	a2,1132(a2) # 433f8 <std::range_error::~range_error()@GLIBCXX_3.4>
   33f94:	0000f597          	auipc	a1,0xf
   33f98:	5d45b583          	ld	a1,1492(a1) # 43568 <typeinfo for std::range_error@GLIBCXX_3.4>
   33f9c:	00048513          	addi	a0,s1,0
   33fa0:	9c1e20ef          	jal	ra,16960 <__cxa_throw@plt>
  if (p == m->end)
   33fa4:	e2f688e3          	beq	a3,a5,33dd4 <elf::strtab::get(unsigned long, unsigned long*) const+0x38>

  if (len_out)
   33fa8:	00060663          	beq	a2,zero,33fb4 <elf::strtab::get(unsigned long, unsigned long*) const+0x218>
    *len_out = p - start;
   33fac:	40a787b3          	sub	a5,a5,a0
   33fb0:	00f63023          	sd	a5,0(a2)
  return start;
}
   33fb4:	07813083          	ld	ra,120(sp)
   33fb8:	07013403          	ld	s0,112(sp)
   33fbc:	06813483          	ld	s1,104(sp)
   33fc0:	08010113          	addi	sp,sp,128
   33fc4:	00008067          	jalr	zero,0(ra)
   33fc8:	0000f797          	auipc	a5,0xf
   33fcc:	3907b783          	ld	a5,912(a5) # 43358 <vtable for elf::format_error@@Base+0x770>
   33fd0:	01078793          	addi	a5,a5,16
   33fd4:	00f43023          	sd	a5,0(s0)
    throw format_error("unterminated string");
   33fd8:	0000f617          	auipc	a2,0xf
   33fdc:	5a863603          	ld	a2,1448(a2) # 43580 <elf::format_error::~format_error()@@Base+0xdf4c>
   33fe0:	0000f597          	auipc	a1,0xf
   33fe4:	3585b583          	ld	a1,856(a1) # 43338 <typeinfo for elf::format_error@@Base+0x7f8>
   33fe8:	00040513          	addi	a0,s0,0
   33fec:	975e20ef          	jal	ra,16960 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   33ff0:	00050413          	addi	s0,a0,0
   33ff4:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   33ff8:	05010793          	addi	a5,sp,80
   33ffc:	00f50463          	beq	a0,a5,34004 <elf::strtab::get(unsigned long, unsigned long*) const+0x268>
   34000:	fa0e20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   34004:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   34008:	03010793          	addi	a5,sp,48
   3400c:	00f50463          	beq	a0,a5,34014 <elf::strtab::get(unsigned long, unsigned long*) const+0x278>
   34010:	f90e20ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   34014:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   34018:	01010793          	addi	a5,sp,16
   3401c:	00f50463          	beq	a0,a5,34024 <elf::strtab::get(unsigned long, unsigned long*) const+0x288>
   34020:	f80e20ef          	jal	ra,167a0 <operator delete(void*)@plt>
                      " exceeds section size");
   34024:	00048513          	addi	a0,s1,0
   34028:	f28e20ef          	jal	ra,16750 <__cxa_free_exception@plt>
   3402c:	00040513          	addi	a0,s0,0
   34030:	961e20ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   34034:	00050413          	addi	s0,a0,0
   34038:	fcdff06f          	jal	zero,34004 <elf::strtab::get(unsigned long, unsigned long*) const+0x268>
   3403c:	00050413          	addi	s0,a0,0
   34040:	fd5ff06f          	jal	zero,34014 <elf::strtab::get(unsigned long, unsigned long*) const+0x278>
   34044:	00050413          	addi	s0,a0,0
   34048:	fddff06f          	jal	zero,34024 <elf::strtab::get(unsigned long, unsigned long*) const+0x288>
    throw format_error("unterminated string");
   3404c:	00050493          	addi	s1,a0,0
   34050:	00040513          	addi	a0,s0,0
   34054:	efce20ef          	jal	ra,16750 <__cxa_free_exception@plt>
   34058:	00048513          	addi	a0,s1,0
   3405c:	935e20ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000034060 <elf::section::get_name(unsigned long*) const>:
const char *section::get_name(size_t *len_out) const {
   34060:	fc010113          	addi	sp,sp,-64
   34064:	02113c23          	sd	ra,56(sp)
   34068:	02813823          	sd	s0,48(sp)
   3406c:	02913423          	sd	s1,40(sp)
   34070:	03213023          	sd	s2,32(sp)
   34074:	01313c23          	sd	s3,24(sp)
   34078:	00050413          	addi	s0,a0,0
   3407c:	00058493          	addi	s1,a1,0
   34080:	00053903          	ld	s2,0(a0)
  if (!m->name)
   34084:	05093783          	ld	a5,80(s2)
   34088:	02078c63          	beq	a5,zero,340c0 <elf::section::get_name(unsigned long*) const+0x60>
  if (len_out)
   3408c:	00048863          	beq	s1,zero,3409c <elf::section::get_name(unsigned long*) const+0x3c>
    *len_out = m->name_len;
   34090:	00043783          	ld	a5,0(s0)
   34094:	0587b783          	ld	a5,88(a5)
   34098:	00f4b023          	sd	a5,0(s1)
  return m->name;
   3409c:	00043783          	ld	a5,0(s0)
   340a0:	0507b503          	ld	a0,80(a5)
}
   340a4:	03813083          	ld	ra,56(sp)
   340a8:	03013403          	ld	s0,48(sp)
   340ac:	02813483          	ld	s1,40(sp)
   340b0:	02013903          	ld	s2,32(sp)
   340b4:	01813983          	ld	s3,24(sp)
   340b8:	04010113          	addi	sp,sp,64
   340bc:	00008067          	jalr	zero,0(ra)
    m->name = m->f.get_section(m->f.get_hdr().shstrndx)
   340c0:	00090513          	addi	a0,s2,0
   340c4:	e10ff0ef          	jal	ra,336d4 <elf::elf::get_hdr() const>
   340c8:	03e55583          	lhu	a1,62(a0)
   340cc:	00090513          	addi	a0,s2,0
   340d0:	e90ff0ef          	jal	ra,33760 <elf::elf::get_section(unsigned int) const>
   340d4:	00050593          	addi	a1,a0,0
                  .as_strtab()
   340d8:	00010913          	addi	s2,sp,0
   340dc:	00090513          	addi	a0,s2,0
   340e0:	afdff0ef          	jal	ra,33bdc <elf::section::as_strtab() const>
   340e4:	00043983          	ld	s3,0(s0)
                  .get(m->hdr.name, &m->name_len);
   340e8:	05898613          	addi	a2,s3,88
   340ec:	0109e583          	lwu	a1,16(s3)
   340f0:	00090513          	addi	a0,s2,0
   340f4:	ca9ff0ef          	jal	ra,33d9c <elf::strtab::get(unsigned long, unsigned long*) const>
    m->name = m->f.get_section(m->f.get_hdr().shstrndx)
   340f8:	04a9b823          	sd	a0,80(s3)
	if (_M_pi != nullptr)
   340fc:	00813903          	ld	s2,8(sp)
   34100:	f80906e3          	beq	s2,zero,3408c <elf::section::get_name(unsigned long*) const+0x2c>
    if (__is_single_threaded())
   34104:	0000f797          	auipc	a5,0xf
   34108:	3947b783          	ld	a5,916(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   3410c:	0007c783          	lbu	a5,0(a5)
   34110:	06078263          	beq	a5,zero,34174 <elf::section::get_name(unsigned long*) const+0x114>
    _Atomic_word __result = *__mem;
   34114:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   34118:	fff5079b          	addiw	a5,a0,-1
   3411c:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34120:	00100793          	addi	a5,zero,1
   34124:	f6f514e3          	bne	a0,a5,3408c <elf::section::get_name(unsigned long*) const+0x2c>
	_M_dispose();
   34128:	00093783          	ld	a5,0(s2)
   3412c:	0107b783          	ld	a5,16(a5)
   34130:	00090513          	addi	a0,s2,0
   34134:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   34138:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   3413c:	0000f797          	auipc	a5,0xf
   34140:	35c7b783          	ld	a5,860(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   34144:	0007c783          	lbu	a5,0(a5)
   34148:	02078e63          	beq	a5,zero,34184 <elf::section::get_name(unsigned long*) const+0x124>
    _Atomic_word __result = *__mem;
   3414c:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   34150:	fff5079b          	addiw	a5,a0,-1
   34154:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   34158:	00100793          	addi	a5,zero,1
   3415c:	f2f518e3          	bne	a0,a5,3408c <elf::section::get_name(unsigned long*) const+0x2c>
	    _M_destroy();
   34160:	00093783          	ld	a5,0(s2)
   34164:	0187b783          	ld	a5,24(a5)
   34168:	00090513          	addi	a0,s2,0
   3416c:	000780e7          	jalr	ra,0(a5)
   34170:	f1dff06f          	jal	zero,3408c <elf::section::get_name(unsigned long*) const+0x2c>
      return __exchange_and_add(__mem, __val);
   34174:	fff00593          	addi	a1,zero,-1
   34178:	03090513          	addi	a0,s2,48
   3417c:	c74e20ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34180:	fa1ff06f          	jal	zero,34120 <elf::section::get_name(unsigned long*) const+0xc0>
   34184:	fff00593          	addi	a1,zero,-1
   34188:	03490513          	addi	a0,s2,52
   3418c:	c64e20ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34190:	fc9ff06f          	jal	zero,34158 <elf::section::get_name(unsigned long*) const+0xf8>
	if (_M_pi != nullptr)
   34194:	00050413          	addi	s0,a0,0
   34198:	00813503          	ld	a0,8(sp)
   3419c:	00050863          	beq	a0,zero,341ac <elf::section::get_name(unsigned long*) const+0x14c>
	  _M_pi->_M_release();
   341a0:	0000f317          	auipc	t1,0xf
   341a4:	24033303          	ld	t1,576(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   341a8:	000300e7          	jalr	ra,0(t1)
   341ac:	00040513          	addi	a0,s0,0
   341b0:	fe0e20ef          	jal	ra,16990 <_Unwind_Resume@plt>

00000000000341b4 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>:
const section &elf::get_section(const std::string &name) const {
   341b4:	fd010113          	addi	sp,sp,-48
   341b8:	02113423          	sd	ra,40(sp)
   341bc:	02813023          	sd	s0,32(sp)
   341c0:	00913c23          	sd	s1,24(sp)
   341c4:	01213823          	sd	s2,16(sp)
   341c8:	01313423          	sd	s3,8(sp)
   341cc:	01413023          	sd	s4,0(sp)
   341d0:	00050a13          	addi	s4,a0,0
   341d4:	00058493          	addi	s1,a1,0
  for (auto &sec : sections())
   341d8:	d70ff0ef          	jal	ra,33748 <elf::elf::sections() const>
      : _M_current(__i) { }
   341dc:	00053403          	ld	s0,0(a0)
   341e0:	00853983          	ld	s3,8(a0)
   341e4:	03340663          	beq	s0,s3,34210 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x5c>
   341e8:	00040913          	addi	s2,s0,0
    if (name == sec.get_name(nullptr))
   341ec:	00000593          	addi	a1,zero,0
   341f0:	00040513          	addi	a0,s0,0
   341f4:	e6dff0ef          	jal	ra,34060 <elf::section::get_name(unsigned long*) const>
    { return __lhs.compare(__rhs) == 0; }
   341f8:	00050593          	addi	a1,a0,0
   341fc:	00048513          	addi	a0,s1,0
   34200:	c10e20ef          	jal	ra,16610 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
   34204:	00050a63          	beq	a0,zero,34218 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x64>
  for (auto &sec : sections())
   34208:	01040413          	addi	s0,s0,16
   3420c:	fc899ee3          	bne	s3,s0,341e8 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x34>
  return m->invalid_section;
   34210:	000a3903          	ld	s2,0(s4)
   34214:	08090913          	addi	s2,s2,128
}
   34218:	00090513          	addi	a0,s2,0
   3421c:	02813083          	ld	ra,40(sp)
   34220:	02013403          	ld	s0,32(sp)
   34224:	01813483          	ld	s1,24(sp)
   34228:	01013903          	ld	s2,16(sp)
   3422c:	00813983          	ld	s3,8(sp)
   34230:	00013a03          	ld	s4,0(sp)
   34234:	03010113          	addi	sp,sp,48
   34238:	00008067          	jalr	zero,0(ra)

000000000003423c <elf::sym::get_name(unsigned long*) const>:

sym::sym(elf f, const void *data, strtab strs) : strs(strs) {
  canon_hdr(&this->data, data, f.get_hdr().ei_class, f.get_hdr().ei_data);
}

const char *sym::get_name(size_t *len_out) const {
   3423c:	ff010113          	addi	sp,sp,-16
   34240:	00113423          	sd	ra,8(sp)
   34244:	00058613          	addi	a2,a1,0
  return strs.get(get_data().name, len_out);
   34248:	01056583          	lwu	a1,16(a0)
   3424c:	b51ff0ef          	jal	ra,33d9c <elf::strtab::get(unsigned long, unsigned long*) const>
}
   34250:	00813083          	ld	ra,8(sp)
   34254:	01010113          	addi	sp,sp,16
   34258:	00008067          	jalr	zero,0(ra)

000000000003425c <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)>:
  const elf f;
  const char *data, *end;
  const strtab strs;
};

symtab::symtab(elf f, const void *data, size_t size, strtab strs)
   3425c:	fb010113          	addi	sp,sp,-80
   34260:	04113423          	sd	ra,72(sp)
   34264:	04813023          	sd	s0,64(sp)
   34268:	02913c23          	sd	s1,56(sp)
   3426c:	03213823          	sd	s2,48(sp)
   34270:	03313423          	sd	s3,40(sp)
   34274:	03413023          	sd	s4,32(sp)
   34278:	01513c23          	sd	s5,24(sp)
   3427c:	01613823          	sd	s6,16(sp)
   34280:	01713423          	sd	s7,8(sp)
   34284:	00050913          	addi	s2,a0,0
   34288:	00058a13          	addi	s4,a1,0
   3428c:	00060993          	addi	s3,a2,0
   34290:	00070493          	addi	s1,a4,0
    : m(make_shared<impl>(f, (const char *)data, (const char *)data + size,
   34294:	00d60ab3          	add	s5,a2,a3
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   34298:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   3429c:	06800513          	addi	a0,zero,104
   342a0:	d10e20ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   342a4:	00050413          	addi	s0,a0,0
   342a8:	00052423          	sw	zero,8(a0)
   342ac:	00052623          	sw	zero,12(a0)
   342b0:	00052823          	sw	zero,16(a0)
   342b4:	00052a23          	sw	zero,20(a0)
   342b8:	00052c23          	sw	zero,24(a0)
   342bc:	00052e23          	sw	zero,28(a0)
   342c0:	02053023          	sd	zero,32(a0)
   342c4:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   342c8:	00100793          	addi	a5,zero,1
   342cc:	02f52823          	sw	a5,48(a0)
   342d0:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   342d4:	0000f797          	auipc	a5,0xf
   342d8:	08c7b783          	ld	a5,140(a5) # 43360 <vtable for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x648>
   342dc:	01078793          	addi	a5,a5,16
   342e0:	00f53023          	sd	a5,0(a0)
   342e4:	03850b13          	addi	s6,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   342e8:	0004bb83          	ld	s7,0(s1)
      : _M_pi(__r._M_pi)
   342ec:	0084b483          	ld	s1,8(s1)
	if (_M_pi != nullptr)
   342f0:	02048063          	beq	s1,zero,34310 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xb4>
    if (__is_single_threaded())
   342f4:	0000f797          	auipc	a5,0xf
   342f8:	1a47b783          	ld	a5,420(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   342fc:	0007c783          	lbu	a5,0(a5)
   34300:	0a078c63          	beq	a5,zero,343b8 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x15c>
  { *__mem += __val; }
   34304:	0304a783          	lw	a5,48(s1)
   34308:	0017879b          	addiw	a5,a5,1
   3430c:	02f4a823          	sw	a5,48(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   34310:	000a3783          	ld	a5,0(s4)
   34314:	02f43c23          	sd	a5,56(s0)
      : _M_pi(__r._M_pi)
   34318:	008a3503          	ld	a0,8(s4)
   3431c:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   34320:	02050063          	beq	a0,zero,34340 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xe4>
    if (__is_single_threaded())
   34324:	0000f717          	auipc	a4,0xf
   34328:	17473703          	ld	a4,372(a4) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   3432c:	00074703          	lbu	a4,0(a4)
   34330:	08070c63          	beq	a4,zero,343c8 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x16c>
  { *__mem += __val; }
   34334:	03052703          	lw	a4,48(a0)
   34338:	0017071b          	addiw	a4,a4,1
   3433c:	02e52823          	sw	a4,48(a0)
      : f(f), data(data), end(end), strs(strs) {}
   34340:	05343423          	sd	s3,72(s0)
   34344:	05543823          	sd	s5,80(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   34348:	05743c23          	sd	s7,88(s0)
      : _M_pi(__r._M_pi)
   3434c:	06943023          	sd	s1,96(s0)
	if (_M_pi != nullptr)
   34350:	02048a63          	beq	s1,zero,34384 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x128>
    if (__is_single_threaded())
   34354:	0000f797          	auipc	a5,0xf
   34358:	1447b783          	ld	a5,324(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   3435c:	0007c783          	lbu	a5,0(a5)
   34360:	06078c63          	beq	a5,zero,343d8 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x17c>
  { *__mem += __val; }
   34364:	0304a783          	lw	a5,48(s1)
   34368:	0017879b          	addiw	a5,a5,1
   3436c:	02f4a823          	sw	a5,48(s1)
    _Atomic_word __result = *__mem;
   34370:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   34374:	fff5079b          	addiw	a5,a0,-1
   34378:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   3437c:	00100793          	addi	a5,zero,1
   34380:	08f50263          	beq	a0,a5,34404 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x1a8>
	  _M_pi = __pi;
   34384:	00893423          	sd	s0,8(s2)
	  __p = __pi->_M_ptr();
   34388:	01693023          	sd	s6,0(s2)
                          strs)) {}
   3438c:	04813083          	ld	ra,72(sp)
   34390:	04013403          	ld	s0,64(sp)
   34394:	03813483          	ld	s1,56(sp)
   34398:	03013903          	ld	s2,48(sp)
   3439c:	02813983          	ld	s3,40(sp)
   343a0:	02013a03          	ld	s4,32(sp)
   343a4:	01813a83          	ld	s5,24(sp)
   343a8:	01013b03          	ld	s6,16(sp)
   343ac:	00813b83          	ld	s7,8(sp)
   343b0:	05010113          	addi	sp,sp,80
   343b4:	00008067          	jalr	zero,0(ra)
      __atomic_add(__mem, __val);
   343b8:	00100593          	addi	a1,zero,1
   343bc:	03048513          	addi	a0,s1,48
   343c0:	9f0e20ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   343c4:	f4dff06f          	jal	zero,34310 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xb4>
   343c8:	00100593          	addi	a1,zero,1
   343cc:	03050513          	addi	a0,a0,48
   343d0:	9e0e20ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   343d4:	f6dff06f          	jal	zero,34340 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xe4>
   343d8:	00100593          	addi	a1,zero,1
   343dc:	03048513          	addi	a0,s1,48
   343e0:	9d0e20ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
    if (__is_single_threaded())
   343e4:	0000f797          	auipc	a5,0xf
   343e8:	0b47b783          	ld	a5,180(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   343ec:	0007c783          	lbu	a5,0(a5)
   343f0:	f80790e3          	bne	a5,zero,34370 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x114>
      return __exchange_and_add(__mem, __val);
   343f4:	fff00593          	addi	a1,zero,-1
   343f8:	03048513          	addi	a0,s1,48
   343fc:	9f4e20ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34400:	f7dff06f          	jal	zero,3437c <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x120>
	_M_dispose();
   34404:	0004b783          	ld	a5,0(s1)
   34408:	0107b783          	ld	a5,16(a5)
   3440c:	00048513          	addi	a0,s1,0
   34410:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   34414:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   34418:	0000f797          	auipc	a5,0xf
   3441c:	0807b783          	ld	a5,128(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   34420:	0007c783          	lbu	a5,0(a5)
   34424:	02078663          	beq	a5,zero,34450 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x1f4>
    _Atomic_word __result = *__mem;
   34428:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   3442c:	fff5079b          	addiw	a5,a0,-1
   34430:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   34434:	00100793          	addi	a5,zero,1
   34438:	f4f516e3          	bne	a0,a5,34384 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x128>
	    _M_destroy();
   3443c:	0004b783          	ld	a5,0(s1)
   34440:	0187b783          	ld	a5,24(a5)
   34444:	00048513          	addi	a0,s1,0
   34448:	000780e7          	jalr	ra,0(a5)
   3444c:	f39ff06f          	jal	zero,34384 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x128>
      return __exchange_and_add(__mem, __val);
   34450:	fff00593          	addi	a1,zero,-1
   34454:	03448513          	addi	a0,s1,52
   34458:	998e20ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   3445c:	fd9ff06f          	jal	zero,34434 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x1d8>

0000000000034460 <elf::section::as_symtab() const>:
symtab section::as_symtab() const {
   34460:	fb010113          	addi	sp,sp,-80
   34464:	04113423          	sd	ra,72(sp)
   34468:	04813023          	sd	s0,64(sp)
   3446c:	02913c23          	sd	s1,56(sp)
   34470:	03213823          	sd	s2,48(sp)
   34474:	03313423          	sd	s3,40(sp)
   34478:	03413023          	sd	s4,32(sp)
   3447c:	00050493          	addi	s1,a0,0
   34480:	00058413          	addi	s0,a1,0
      { return _M_ptr; }
   34484:	0005b783          	ld	a5,0(a1)
  if (m->hdr.type != sht::symtab && m->hdr.type != sht::dynsym)
   34488:	0147a703          	lw	a4,20(a5)
   3448c:	00200693          	addi	a3,zero,2
   34490:	00d70663          	beq	a4,a3,3449c <elf::section::as_symtab() const+0x3c>
   34494:	00b00693          	addi	a3,zero,11
   34498:	04d71063          	bne	a4,a3,344d8 <elf::section::as_symtab() const+0x78>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   3449c:	0007b703          	ld	a4,0(a5)
   344a0:	00e13023          	sd	a4,0(sp)
      : _M_pi(__r._M_pi)
   344a4:	0087b503          	ld	a0,8(a5)
   344a8:	00a13423          	sd	a0,8(sp)
	if (_M_pi != nullptr)
   344ac:	02050063          	beq	a0,zero,344cc <elf::section::as_symtab() const+0x6c>
    if (__is_single_threaded())
   344b0:	0000f797          	auipc	a5,0xf
   344b4:	fe87b783          	ld	a5,-24(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   344b8:	0007c783          	lbu	a5,0(a5)
   344bc:	04078e63          	beq	a5,zero,34518 <elf::section::as_symtab() const+0xb8>
  { *__mem += __val; }
   344c0:	03052783          	lw	a5,48(a0)
   344c4:	0017879b          	addiw	a5,a5,1
   344c8:	02f52823          	sw	a5,48(a0)
                m->f.get_section(get_hdr().link).as_strtab());
   344cc:	00040513          	addi	a0,s0,0
   344d0:	ce4ff0ef          	jal	ra,339b4 <elf::section::data() const>
   344d4:	0540006f          	jal	zero,34528 <elf::section::as_symtab() const+0xc8>
    throw section_type_mismatch("cannot use section as symtab");
   344d8:	01000513          	addi	a0,zero,16
   344dc:	9b4e20ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   344e0:	00050413          	addi	s0,a0,0
      : std::logic_error(what_arg) {}
   344e4:	00007597          	auipc	a1,0x7
   344e8:	dec58593          	addi	a1,a1,-532 # 3b2d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27f0>
   344ec:	b24e20ef          	jal	ra,16810 <std::logic_error::logic_error(char const*)@plt>
   344f0:	0000f797          	auipc	a5,0xf
   344f4:	ee07b783          	ld	a5,-288(a5) # 433d0 <vtable for elf::section_type_mismatch@@Base+0x7c0>
   344f8:	01078793          	addi	a5,a5,16
   344fc:	00f43023          	sd	a5,0(s0)
   34500:	0000f617          	auipc	a2,0xf
   34504:	dc063603          	ld	a2,-576(a2) # 432c0 <elf::section_type_mismatch::~section_type_mismatch()@@Base+0xdacc>
   34508:	0000f597          	auipc	a1,0xf
   3450c:	df05b583          	ld	a1,-528(a1) # 432f8 <typeinfo for elf::section_type_mismatch@@Base+0x7a0>
   34510:	00040513          	addi	a0,s0,0
   34514:	c4ce20ef          	jal	ra,16960 <__cxa_throw@plt>
      __atomic_add(__mem, __val);
   34518:	00100593          	addi	a1,zero,1
   3451c:	03050513          	addi	a0,a0,48
   34520:	890e20ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   34524:	fa9ff06f          	jal	zero,344cc <elf::section::as_symtab() const+0x6c>
                m->f.get_section(get_hdr().link).as_strtab());
   34528:	00050913          	addi	s2,a0,0
   3452c:	00040513          	addi	a0,s0,0
   34530:	db4ff0ef          	jal	ra,33ae4 <elf::section::size() const>
   34534:	00050993          	addi	s3,a0,0
   34538:	00043a03          	ld	s4,0(s0)
   3453c:	00040513          	addi	a0,s0,0
   34540:	c68ff0ef          	jal	ra,339a8 <elf::section::get_hdr() const>
   34544:	02855583          	lhu	a1,40(a0)
   34548:	000a0513          	addi	a0,s4,0
   3454c:	a14ff0ef          	jal	ra,33760 <elf::elf::get_section(unsigned int) const>
   34550:	00050593          	addi	a1,a0,0
   34554:	01010513          	addi	a0,sp,16
   34558:	e84ff0ef          	jal	ra,33bdc <elf::section::as_strtab() const>
   3455c:	01010713          	addi	a4,sp,16
   34560:	00098693          	addi	a3,s3,0
   34564:	00090613          	addi	a2,s2,0
   34568:	00010593          	addi	a1,sp,0
   3456c:	00048513          	addi	a0,s1,0
   34570:	cedff0ef          	jal	ra,3425c <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)>
	if (_M_pi != nullptr)
   34574:	01813403          	ld	s0,24(sp)
   34578:	02040463          	beq	s0,zero,345a0 <elf::section::as_symtab() const+0x140>
    if (__is_single_threaded())
   3457c:	0000f797          	auipc	a5,0xf
   34580:	f1c7b783          	ld	a5,-228(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   34584:	0007c783          	lbu	a5,0(a5)
   34588:	06078463          	beq	a5,zero,345f0 <elf::section::as_symtab() const+0x190>
    _Atomic_word __result = *__mem;
   3458c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   34590:	fff5079b          	addiw	a5,a0,-1
   34594:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34598:	00100793          	addi	a5,zero,1
   3459c:	06f50263          	beq	a0,a5,34600 <elf::section::as_symtab() const+0x1a0>
	if (_M_pi != nullptr)
   345a0:	00813403          	ld	s0,8(sp)
   345a4:	02040463          	beq	s0,zero,345cc <elf::section::as_symtab() const+0x16c>
    if (__is_single_threaded())
   345a8:	0000f797          	auipc	a5,0xf
   345ac:	ef07b783          	ld	a5,-272(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   345b0:	0007c783          	lbu	a5,0(a5)
   345b4:	0a078463          	beq	a5,zero,3465c <elf::section::as_symtab() const+0x1fc>
    _Atomic_word __result = *__mem;
   345b8:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   345bc:	fff5079b          	addiw	a5,a0,-1
   345c0:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   345c4:	00100793          	addi	a5,zero,1
   345c8:	0af50263          	beq	a0,a5,3466c <elf::section::as_symtab() const+0x20c>
}
   345cc:	00048513          	addi	a0,s1,0
   345d0:	04813083          	ld	ra,72(sp)
   345d4:	04013403          	ld	s0,64(sp)
   345d8:	03813483          	ld	s1,56(sp)
   345dc:	03013903          	ld	s2,48(sp)
   345e0:	02813983          	ld	s3,40(sp)
   345e4:	02013a03          	ld	s4,32(sp)
   345e8:	05010113          	addi	sp,sp,80
   345ec:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   345f0:	fff00593          	addi	a1,zero,-1
   345f4:	03040513          	addi	a0,s0,48
   345f8:	ff9e10ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   345fc:	f9dff06f          	jal	zero,34598 <elf::section::as_symtab() const+0x138>
	_M_dispose();
   34600:	00043783          	ld	a5,0(s0)
   34604:	0107b783          	ld	a5,16(a5)
   34608:	00040513          	addi	a0,s0,0
   3460c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   34610:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   34614:	0000f797          	auipc	a5,0xf
   34618:	e847b783          	ld	a5,-380(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   3461c:	0007c783          	lbu	a5,0(a5)
   34620:	02078663          	beq	a5,zero,3464c <elf::section::as_symtab() const+0x1ec>
    _Atomic_word __result = *__mem;
   34624:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   34628:	fff5079b          	addiw	a5,a0,-1
   3462c:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   34630:	00100793          	addi	a5,zero,1
   34634:	f6f516e3          	bne	a0,a5,345a0 <elf::section::as_symtab() const+0x140>
	    _M_destroy();
   34638:	00043783          	ld	a5,0(s0)
   3463c:	0187b783          	ld	a5,24(a5)
   34640:	00040513          	addi	a0,s0,0
   34644:	000780e7          	jalr	ra,0(a5)
   34648:	f59ff06f          	jal	zero,345a0 <elf::section::as_symtab() const+0x140>
      return __exchange_and_add(__mem, __val);
   3464c:	fff00593          	addi	a1,zero,-1
   34650:	03440513          	addi	a0,s0,52
   34654:	f9de10ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34658:	fd9ff06f          	jal	zero,34630 <elf::section::as_symtab() const+0x1d0>
   3465c:	fff00593          	addi	a1,zero,-1
   34660:	03040513          	addi	a0,s0,48
   34664:	f8de10ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34668:	f5dff06f          	jal	zero,345c4 <elf::section::as_symtab() const+0x164>
	_M_dispose();
   3466c:	00043783          	ld	a5,0(s0)
   34670:	0107b783          	ld	a5,16(a5)
   34674:	00040513          	addi	a0,s0,0
   34678:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   3467c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   34680:	0000f797          	auipc	a5,0xf
   34684:	e187b783          	ld	a5,-488(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   34688:	0007c783          	lbu	a5,0(a5)
   3468c:	02078663          	beq	a5,zero,346b8 <elf::section::as_symtab() const+0x258>
    _Atomic_word __result = *__mem;
   34690:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   34694:	fff5079b          	addiw	a5,a0,-1
   34698:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   3469c:	00100793          	addi	a5,zero,1
   346a0:	f2f516e3          	bne	a0,a5,345cc <elf::section::as_symtab() const+0x16c>
	    _M_destroy();
   346a4:	00043783          	ld	a5,0(s0)
   346a8:	0187b783          	ld	a5,24(a5)
   346ac:	00040513          	addi	a0,s0,0
   346b0:	000780e7          	jalr	ra,0(a5)
                m->f.get_section(get_hdr().link).as_strtab());
   346b4:	f19ff06f          	jal	zero,345cc <elf::section::as_symtab() const+0x16c>
      return __exchange_and_add(__mem, __val);
   346b8:	fff00593          	addi	a1,zero,-1
   346bc:	03440513          	addi	a0,s0,52
   346c0:	f31e10ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   346c4:	fd9ff06f          	jal	zero,3469c <elf::section::as_symtab() const+0x23c>
    throw section_type_mismatch("cannot use section as symtab");
   346c8:	00050493          	addi	s1,a0,0
   346cc:	00040513          	addi	a0,s0,0
   346d0:	880e20ef          	jal	ra,16750 <__cxa_free_exception@plt>
   346d4:	00048513          	addi	a0,s1,0
   346d8:	ab8e20ef          	jal	ra,16990 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   346dc:	00050413          	addi	s0,a0,0
   346e0:	01813503          	ld	a0,24(sp)
   346e4:	00050863          	beq	a0,zero,346f4 <elf::section::as_symtab() const+0x294>
	  _M_pi->_M_release();
   346e8:	0000f317          	auipc	t1,0xf
   346ec:	cf833303          	ld	t1,-776(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   346f0:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   346f4:	00813503          	ld	a0,8(sp)
   346f8:	00050863          	beq	a0,zero,34708 <elf::section::as_symtab() const+0x2a8>
	  _M_pi->_M_release();
   346fc:	0000f317          	auipc	t1,0xf
   34700:	ce433303          	ld	t1,-796(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   34704:	000300e7          	jalr	ra,0(t1)
   34708:	00040513          	addi	a0,s0,0
   3470c:	a84e20ef          	jal	ra,16990 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   34710:	00050413          	addi	s0,a0,0
   34714:	fe1ff06f          	jal	zero,346f4 <elf::section::as_symtab() const+0x294>

0000000000034718 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)>:

symtab::iterator::iterator(const symtab &tab, const char *pos)
   34718:	fe010113          	addi	sp,sp,-32
   3471c:	00113c23          	sd	ra,24(sp)
   34720:	00813823          	sd	s0,16(sp)
   34724:	00913423          	sd	s1,8(sp)
   34728:	01213023          	sd	s2,0(sp)
   3472c:	00050413          	addi	s0,a0,0
   34730:	00058493          	addi	s1,a1,0
   34734:	00060913          	addi	s2,a2,0
      { return _M_ptr; }
   34738:	0005b783          	ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   3473c:	0007b703          	ld	a4,0(a5)
   34740:	00e53023          	sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   34744:	0087b503          	ld	a0,8(a5)
   34748:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   3474c:	02050063          	beq	a0,zero,3476c <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x54>
    if (__is_single_threaded())
   34750:	0000f797          	auipc	a5,0xf
   34754:	d487b783          	ld	a5,-696(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   34758:	0007c783          	lbu	a5,0(a5)
   3475c:	04078a63          	beq	a5,zero,347b0 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x98>
  { *__mem += __val; }
   34760:	03052783          	lw	a5,48(a0)
   34764:	0017879b          	addiw	a5,a5,1
   34768:	02f52823          	sw	a5,48(a0)
      { return _M_ptr; }
   3476c:	0004b783          	ld	a5,0(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   34770:	0207b703          	ld	a4,32(a5)
   34774:	00e43823          	sd	a4,16(s0)
      : _M_pi(__r._M_pi)
   34778:	0287b503          	ld	a0,40(a5)
   3477c:	00a43c23          	sd	a0,24(s0)
	if (_M_pi != nullptr)
   34780:	02050063          	beq	a0,zero,347a0 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x88>
    if (__is_single_threaded())
   34784:	0000f797          	auipc	a5,0xf
   34788:	d147b783          	ld	a5,-748(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   3478c:	0007c783          	lbu	a5,0(a5)
   34790:	02078863          	beq	a5,zero,347c0 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0xa8>
  { *__mem += __val; }
   34794:	03052783          	lw	a5,48(a0)
   34798:	0017879b          	addiw	a5,a5,1
   3479c:	02f52823          	sw	a5,48(a0)
    : f(tab.m->f), strs(tab.m->strs), pos(pos) {
   347a0:	03243023          	sd	s2,32(s0)
  if (f.get_hdr().ei_class == elfclass::_32)
   347a4:	00040513          	addi	a0,s0,0
   347a8:	f2dfe0ef          	jal	ra,336d4 <elf::elf::get_hdr() const>
   347ac:	0240006f          	jal	zero,347d0 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0xb8>
      __atomic_add(__mem, __val);
   347b0:	00100593          	addi	a1,zero,1
   347b4:	03050513          	addi	a0,a0,48
   347b8:	df9e10ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   347bc:	fb1ff06f          	jal	zero,3476c <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x54>
   347c0:	00100593          	addi	a1,zero,1
   347c4:	03050513          	addi	a0,a0,48
   347c8:	de9e10ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   347cc:	fd5ff06f          	jal	zero,347a0 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x88>
   347d0:	00454683          	lbu	a3,4(a0)
   347d4:	00100713          	addi	a4,zero,1
    stride = sizeof(Sym<Elf32>);
  else
    stride = sizeof(Sym<Elf64>);
   347d8:	01800793          	addi	a5,zero,24
  if (f.get_hdr().ei_class == elfclass::_32)
   347dc:	02e68063          	beq	a3,a4,347fc <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0xe4>
   347e0:	02f43423          	sd	a5,40(s0)
}
   347e4:	01813083          	ld	ra,24(sp)
   347e8:	01013403          	ld	s0,16(sp)
   347ec:	00813483          	ld	s1,8(sp)
   347f0:	00013903          	ld	s2,0(sp)
   347f4:	02010113          	addi	sp,sp,32
   347f8:	00008067          	jalr	zero,0(ra)
    stride = sizeof(Sym<Elf32>);
   347fc:	01000793          	addi	a5,zero,16
   34800:	fe1ff06f          	jal	zero,347e0 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0xc8>
	if (_M_pi != nullptr)
   34804:	00050493          	addi	s1,a0,0
   34808:	01843503          	ld	a0,24(s0)
   3480c:	00050863          	beq	a0,zero,3481c <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x104>
	  _M_pi->_M_release();
   34810:	0000f317          	auipc	t1,0xf
   34814:	bd033303          	ld	t1,-1072(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   34818:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   3481c:	00843503          	ld	a0,8(s0)
   34820:	00050863          	beq	a0,zero,34830 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x118>
	  _M_pi->_M_release();
   34824:	0000f317          	auipc	t1,0xf
   34828:	bbc33303          	ld	t1,-1092(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   3482c:	000300e7          	jalr	ra,0(t1)
   34830:	00048513          	addi	a0,s1,0
   34834:	95ce20ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000034838 <elf::symtab::begin() const>:

symtab::iterator symtab::begin() const { return iterator(*this, m->data); }
   34838:	ff010113          	addi	sp,sp,-16
   3483c:	00113423          	sd	ra,8(sp)
   34840:	00813023          	sd	s0,0(sp)
   34844:	00050413          	addi	s0,a0,0
   34848:	0005b783          	ld	a5,0(a1)
   3484c:	0107b603          	ld	a2,16(a5)
   34850:	ec9ff0ef          	jal	ra,34718 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)>
   34854:	00040513          	addi	a0,s0,0
   34858:	00813083          	ld	ra,8(sp)
   3485c:	00013403          	ld	s0,0(sp)
   34860:	01010113          	addi	sp,sp,16
   34864:	00008067          	jalr	zero,0(ra)

0000000000034868 <elf::symtab::end() const>:

symtab::iterator symtab::end() const { return iterator(*this, m->end); }
   34868:	ff010113          	addi	sp,sp,-16
   3486c:	00113423          	sd	ra,8(sp)
   34870:	00813023          	sd	s0,0(sp)
   34874:	00050413          	addi	s0,a0,0
   34878:	0005b783          	ld	a5,0(a1)
   3487c:	0187b603          	ld	a2,24(a5)
   34880:	e99ff0ef          	jal	ra,34718 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)>
   34884:	00040513          	addi	a0,s0,0
   34888:	00813083          	ld	ra,8(sp)
   3488c:	00013403          	ld	s0,0(sp)
   34890:	01010113          	addi	sp,sp,16
   34894:	00008067          	jalr	zero,0(ra)

0000000000034898 <elf::segment::segment(elf::elf const&, void const*)>:
segment::segment(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
   34898:	fd010113          	addi	sp,sp,-48
   3489c:	02113423          	sd	ra,40(sp)
   348a0:	02813023          	sd	s0,32(sp)
   348a4:	00913c23          	sd	s1,24(sp)
   348a8:	01213823          	sd	s2,16(sp)
   348ac:	01313423          	sd	s3,8(sp)
   348b0:	01413023          	sd	s4,0(sp)
   348b4:	00050913          	addi	s2,a0,0
   348b8:	00058493          	addi	s1,a1,0
   348bc:	00060993          	addi	s3,a2,0
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   348c0:	00053023          	sd	zero,0(a0)
   348c4:	08800513          	addi	a0,zero,136
   348c8:	ee9e10ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   348cc:	00050413          	addi	s0,a0,0
   348d0:	00052423          	sw	zero,8(a0)
   348d4:	00052623          	sw	zero,12(a0)
   348d8:	00052823          	sw	zero,16(a0)
   348dc:	00052a23          	sw	zero,20(a0)
   348e0:	00052c23          	sw	zero,24(a0)
   348e4:	00052e23          	sw	zero,28(a0)
   348e8:	02053023          	sd	zero,32(a0)
   348ec:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   348f0:	00100793          	addi	a5,zero,1
   348f4:	02f52823          	sw	a5,48(a0)
   348f8:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   348fc:	0000f797          	auipc	a5,0xf
   34900:	b947b783          	ld	a5,-1132(a5) # 43490 <vtable for std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x820>
   34904:	01078793          	addi	a5,a5,16
   34908:	00f53023          	sd	a5,0(a0)
   3490c:	03850a13          	addi	s4,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   34910:	0004b783          	ld	a5,0(s1)
   34914:	02f53c23          	sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   34918:	0084b503          	ld	a0,8(s1)
   3491c:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   34920:	02050063          	beq	a0,zero,34940 <elf::segment::segment(elf::elf const&, void const*)+0xa8>
    if (__is_single_threaded())
   34924:	0000f717          	auipc	a4,0xf
   34928:	b7473703          	ld	a4,-1164(a4) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   3492c:	00074703          	lbu	a4,0(a4)
   34930:	02070663          	beq	a4,zero,3495c <elf::segment::segment(elf::elf const&, void const*)+0xc4>
  { *__mem += __val; }
   34934:	03052703          	lw	a4,48(a0)
   34938:	0017071b          	addiw	a4,a4,1
   3493c:	02e52823          	sw	a4,48(a0)
  impl(const elf &f) : f(f), data(nullptr) {}
   34940:	08043023          	sd	zero,128(s0)
	  _M_pi = __pi;
   34944:	00893423          	sd	s0,8(s2)
	  __p = __pi->_M_ptr();
   34948:	01493023          	sd	s4,0(s2)
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
   3494c:	04840413          	addi	s0,s0,72
   34950:	00048513          	addi	a0,s1,0
   34954:	d81fe0ef          	jal	ra,336d4 <elf::elf::get_hdr() const>
   34958:	0140006f          	jal	zero,3496c <elf::segment::segment(elf::elf const&, void const*)+0xd4>
      __atomic_add(__mem, __val);
   3495c:	00100593          	addi	a1,zero,1
   34960:	03050513          	addi	a0,a0,48
   34964:	c4de10ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   34968:	fd9ff06f          	jal	zero,34940 <elf::segment::segment(elf::elf const&, void const*)+0xa8>
   3496c:	00454a03          	lbu	s4,4(a0)
   34970:	00048513          	addi	a0,s1,0
   34974:	d61fe0ef          	jal	ra,336d4 <elf::elf::get_hdr() const>
   34978:	00554683          	lbu	a3,5(a0)
   3497c:	000a0613          	addi	a2,s4,0
   34980:	00098593          	addi	a1,s3,0
   34984:	00040513          	addi	a0,s0,0
   34988:	0000f317          	auipc	t1,0xf
   3498c:	c6033303          	ld	t1,-928(t1) # 435e8 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xcfd8>
   34990:	000300e7          	jalr	ra,0(t1)
}
   34994:	02813083          	ld	ra,40(sp)
   34998:	02013403          	ld	s0,32(sp)
   3499c:	01813483          	ld	s1,24(sp)
   349a0:	01013903          	ld	s2,16(sp)
   349a4:	00813983          	ld	s3,8(sp)
   349a8:	00013a03          	ld	s4,0(sp)
   349ac:	03010113          	addi	sp,sp,48
   349b0:	00008067          	jalr	zero,0(ra)
	if (_M_pi != nullptr)
   349b4:	00050413          	addi	s0,a0,0
   349b8:	00893503          	ld	a0,8(s2)
   349bc:	00050863          	beq	a0,zero,349cc <elf::segment::segment(elf::elf const&, void const*)+0x134>
	  _M_pi->_M_release();
   349c0:	0000f317          	auipc	t1,0xf
   349c4:	a2033303          	ld	t1,-1504(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   349c8:	000300e7          	jalr	ra,0(t1)
   349cc:	00040513          	addi	a0,s0,0
   349d0:	fc1e10ef          	jal	ra,16990 <_Unwind_Resume@plt>

00000000000349d4 <elf::section::section(elf::elf const&, void const*)>:
section::section(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
   349d4:	fd010113          	addi	sp,sp,-48
   349d8:	02113423          	sd	ra,40(sp)
   349dc:	02813023          	sd	s0,32(sp)
   349e0:	00913c23          	sd	s1,24(sp)
   349e4:	01213823          	sd	s2,16(sp)
   349e8:	01313423          	sd	s3,8(sp)
   349ec:	01413023          	sd	s4,0(sp)
   349f0:	00050913          	addi	s2,a0,0
   349f4:	00058493          	addi	s1,a1,0
   349f8:	00060993          	addi	s3,a2,0
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   349fc:	00053023          	sd	zero,0(a0)
   34a00:	0a000513          	addi	a0,zero,160
   34a04:	dade10ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   34a08:	00050413          	addi	s0,a0,0
   34a0c:	00052423          	sw	zero,8(a0)
   34a10:	00052623          	sw	zero,12(a0)
   34a14:	00052823          	sw	zero,16(a0)
   34a18:	00052a23          	sw	zero,20(a0)
   34a1c:	00052c23          	sw	zero,24(a0)
   34a20:	00052e23          	sw	zero,28(a0)
   34a24:	02053023          	sd	zero,32(a0)
   34a28:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   34a2c:	00100793          	addi	a5,zero,1
   34a30:	02f52823          	sw	a5,48(a0)
   34a34:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   34a38:	0000f797          	auipc	a5,0xf
   34a3c:	a087b783          	ld	a5,-1528(a5) # 43440 <vtable for std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x798>
   34a40:	01078793          	addi	a5,a5,16
   34a44:	00f53023          	sd	a5,0(a0)
   34a48:	03850a13          	addi	s4,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   34a4c:	0004b783          	ld	a5,0(s1)
   34a50:	02f53c23          	sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   34a54:	0084b503          	ld	a0,8(s1)
   34a58:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   34a5c:	02050063          	beq	a0,zero,34a7c <elf::section::section(elf::elf const&, void const*)+0xa8>
    if (__is_single_threaded())
   34a60:	0000f717          	auipc	a4,0xf
   34a64:	a3873703          	ld	a4,-1480(a4) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   34a68:	00074703          	lbu	a4,0(a4)
   34a6c:	02070863          	beq	a4,zero,34a9c <elf::section::section(elf::elf const&, void const*)+0xc8>
  { *__mem += __val; }
   34a70:	03052703          	lw	a4,48(a0)
   34a74:	0017071b          	addiw	a4,a4,1
   34a78:	02e52823          	sw	a4,48(a0)
  impl(const elf &f) : f(f), name(nullptr), data(nullptr) {}
   34a7c:	08043423          	sd	zero,136(s0)
   34a80:	08043c23          	sd	zero,152(s0)
	  _M_pi = __pi;
   34a84:	00893423          	sd	s0,8(s2)
	  __p = __pi->_M_ptr();
   34a88:	01493023          	sd	s4,0(s2)
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
   34a8c:	04840413          	addi	s0,s0,72
   34a90:	00048513          	addi	a0,s1,0
   34a94:	c41fe0ef          	jal	ra,336d4 <elf::elf::get_hdr() const>
   34a98:	0140006f          	jal	zero,34aac <elf::section::section(elf::elf const&, void const*)+0xd8>
      __atomic_add(__mem, __val);
   34a9c:	00100593          	addi	a1,zero,1
   34aa0:	03050513          	addi	a0,a0,48
   34aa4:	b0de10ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   34aa8:	fd5ff06f          	jal	zero,34a7c <elf::section::section(elf::elf const&, void const*)+0xa8>
   34aac:	00454a03          	lbu	s4,4(a0)
   34ab0:	00048513          	addi	a0,s1,0
   34ab4:	c21fe0ef          	jal	ra,336d4 <elf::elf::get_hdr() const>
   34ab8:	00554683          	lbu	a3,5(a0)
   34abc:	000a0613          	addi	a2,s4,0
   34ac0:	00098593          	addi	a1,s3,0
   34ac4:	00040513          	addi	a0,s0,0
   34ac8:	0000f317          	auipc	t1,0xf
   34acc:	ad033303          	ld	t1,-1328(t1) # 43598 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xcdac>
   34ad0:	000300e7          	jalr	ra,0(t1)
}
   34ad4:	02813083          	ld	ra,40(sp)
   34ad8:	02013403          	ld	s0,32(sp)
   34adc:	01813483          	ld	s1,24(sp)
   34ae0:	01013903          	ld	s2,16(sp)
   34ae4:	00813983          	ld	s3,8(sp)
   34ae8:	00013a03          	ld	s4,0(sp)
   34aec:	03010113          	addi	sp,sp,48
   34af0:	00008067          	jalr	zero,0(ra)
	if (_M_pi != nullptr)
   34af4:	00050413          	addi	s0,a0,0
   34af8:	00893503          	ld	a0,8(s2)
   34afc:	00050863          	beq	a0,zero,34b0c <elf::section::section(elf::elf const&, void const*)+0x138>
	  _M_pi->_M_release();
   34b00:	0000f317          	auipc	t1,0xf
   34b04:	8e033303          	ld	t1,-1824(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   34b08:	000300e7          	jalr	ra,0(t1)
   34b0c:	00040513          	addi	a0,s0,0
   34b10:	e81e10ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000034b14 <elf::sym::sym(elf::elf, void const*, elf::strtab)>:
sym::sym(elf f, const void *data, strtab strs) : strs(strs) {
   34b14:	fd010113          	addi	sp,sp,-48
   34b18:	02113423          	sd	ra,40(sp)
   34b1c:	02813023          	sd	s0,32(sp)
   34b20:	00913c23          	sd	s1,24(sp)
   34b24:	01213823          	sd	s2,16(sp)
   34b28:	01313423          	sd	s3,8(sp)
   34b2c:	01413023          	sd	s4,0(sp)
   34b30:	00050413          	addi	s0,a0,0
   34b34:	00058493          	addi	s1,a1,0
   34b38:	00060913          	addi	s2,a2,0
      __shared_ptr(const __shared_ptr&) noexcept = default;
   34b3c:	0006b783          	ld	a5,0(a3)
   34b40:	00f53023          	sd	a5,0(a0)
      : _M_pi(__r._M_pi)
   34b44:	0086b503          	ld	a0,8(a3)
   34b48:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   34b4c:	02050063          	beq	a0,zero,34b6c <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x58>
    if (__is_single_threaded())
   34b50:	0000f797          	auipc	a5,0xf
   34b54:	9487b783          	ld	a5,-1720(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   34b58:	0007c783          	lbu	a5,0(a5)
   34b5c:	02078063          	beq	a5,zero,34b7c <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x68>
  { *__mem += __val; }
   34b60:	03052783          	lw	a5,48(a0)
   34b64:	0017879b          	addiw	a5,a5,1
   34b68:	02f52823          	sw	a5,48(a0)
  canon_hdr(&this->data, data, f.get_hdr().ei_class, f.get_hdr().ei_data);
   34b6c:	01040993          	addi	s3,s0,16
   34b70:	00048513          	addi	a0,s1,0
   34b74:	b61fe0ef          	jal	ra,336d4 <elf::elf::get_hdr() const>
   34b78:	0140006f          	jal	zero,34b8c <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x78>
      __atomic_add(__mem, __val);
   34b7c:	00100593          	addi	a1,zero,1
   34b80:	03050513          	addi	a0,a0,48
   34b84:	a2de10ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   34b88:	fe5ff06f          	jal	zero,34b6c <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x58>
   34b8c:	00454a03          	lbu	s4,4(a0)
   34b90:	00048513          	addi	a0,s1,0
   34b94:	b41fe0ef          	jal	ra,336d4 <elf::elf::get_hdr() const>
   34b98:	00554683          	lbu	a3,5(a0)
   34b9c:	000a0613          	addi	a2,s4,0
   34ba0:	00090593          	addi	a1,s2,0
   34ba4:	00098513          	addi	a0,s3,0
   34ba8:	0000f317          	auipc	t1,0xf
   34bac:	9b033303          	ld	t1,-1616(t1) # 43558 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xcb40>
   34bb0:	000300e7          	jalr	ra,0(t1)
}
   34bb4:	02813083          	ld	ra,40(sp)
   34bb8:	02013403          	ld	s0,32(sp)
   34bbc:	01813483          	ld	s1,24(sp)
   34bc0:	01013903          	ld	s2,16(sp)
   34bc4:	00813983          	ld	s3,8(sp)
   34bc8:	00013a03          	ld	s4,0(sp)
   34bcc:	03010113          	addi	sp,sp,48
   34bd0:	00008067          	jalr	zero,0(ra)
	if (_M_pi != nullptr)
   34bd4:	00050493          	addi	s1,a0,0
   34bd8:	00843503          	ld	a0,8(s0)
   34bdc:	00050863          	beq	a0,zero,34bec <elf::sym::sym(elf::elf, void const*, elf::strtab)+0xd8>
	  _M_pi->_M_release();
   34be0:	0000f317          	auipc	t1,0xf
   34be4:	80033303          	ld	t1,-2048(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   34be8:	000300e7          	jalr	ra,0(t1)
   34bec:	00048513          	addi	a0,s1,0
   34bf0:	da1e10ef          	jal	ra,16990 <_Unwind_Resume@plt>

0000000000034bf4 <elf::section::get_name[abi:cxx11]() const>:
string section::get_name() const { return get_name(nullptr); }
   34bf4:	fe010113          	addi	sp,sp,-32
   34bf8:	00113c23          	sd	ra,24(sp)
   34bfc:	00813823          	sd	s0,16(sp)
   34c00:	00913423          	sd	s1,8(sp)
   34c04:	00050413          	addi	s0,a0,0
   34c08:	00058513          	addi	a0,a1,0
   34c0c:	00000593          	addi	a1,zero,0
   34c10:	c50ff0ef          	jal	ra,34060 <elf::section::get_name(unsigned long*) const>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   34c14:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   34c18:	00f43023          	sd	a5,0(s0)
	if (__s == 0)
   34c1c:	04050063          	beq	a0,zero,34c5c <elf::section::get_name[abi:cxx11]() const+0x68>
   34c20:	00050493          	addi	s1,a0,0
   34c24:	a5de10ef          	jal	ra,16680 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   34c28:	00000693          	addi	a3,zero,0
   34c2c:	00a48633          	add	a2,s1,a0
   34c30:	00048593          	addi	a1,s1,0
   34c34:	00040513          	addi	a0,s0,0
   34c38:	0000e317          	auipc	t1,0xe
   34c3c:	6e833303          	ld	t1,1768(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   34c40:	000300e7          	jalr	ra,0(t1)
   34c44:	00040513          	addi	a0,s0,0
   34c48:	01813083          	ld	ra,24(sp)
   34c4c:	01013403          	ld	s0,16(sp)
   34c50:	00813483          	ld	s1,8(sp)
   34c54:	02010113          	addi	sp,sp,32
   34c58:	00008067          	jalr	zero,0(ra)
	  std::__throw_logic_error(__N("basic_string: "
   34c5c:	00003517          	auipc	a0,0x3
   34c60:	80c50513          	addi	a0,a0,-2036 # 37468 <__libc_csu_fini+0x8>
   34c64:	adde10ef          	jal	ra,16740 <std::__throw_logic_error(char const*)@plt>

0000000000034c68 <elf::strtab::get[abi:cxx11](unsigned long) const>:
std::string strtab::get(Elf64::Off offset) const {
   34c68:	fe010113          	addi	sp,sp,-32
   34c6c:	00113c23          	sd	ra,24(sp)
   34c70:	00813823          	sd	s0,16(sp)
   34c74:	00913423          	sd	s1,8(sp)
   34c78:	00050413          	addi	s0,a0,0
   34c7c:	00058513          	addi	a0,a1,0
   34c80:	00060593          	addi	a1,a2,0
  return get(offset, nullptr);
   34c84:	00000613          	addi	a2,zero,0
   34c88:	914ff0ef          	jal	ra,33d9c <elf::strtab::get(unsigned long, unsigned long*) const>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   34c8c:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   34c90:	00f43023          	sd	a5,0(s0)
	if (__s == 0)
   34c94:	04050063          	beq	a0,zero,34cd4 <elf::strtab::get[abi:cxx11](unsigned long) const+0x6c>
   34c98:	00050493          	addi	s1,a0,0
   34c9c:	9e5e10ef          	jal	ra,16680 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   34ca0:	00000693          	addi	a3,zero,0
   34ca4:	00a48633          	add	a2,s1,a0
   34ca8:	00048593          	addi	a1,s1,0
   34cac:	00040513          	addi	a0,s0,0
   34cb0:	0000e317          	auipc	t1,0xe
   34cb4:	67033303          	ld	t1,1648(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   34cb8:	000300e7          	jalr	ra,0(t1)
}
   34cbc:	00040513          	addi	a0,s0,0
   34cc0:	01813083          	ld	ra,24(sp)
   34cc4:	01013403          	ld	s0,16(sp)
   34cc8:	00813483          	ld	s1,8(sp)
   34ccc:	02010113          	addi	sp,sp,32
   34cd0:	00008067          	jalr	zero,0(ra)
	  std::__throw_logic_error(__N("basic_string: "
   34cd4:	00002517          	auipc	a0,0x2
   34cd8:	79450513          	addi	a0,a0,1940 # 37468 <__libc_csu_fini+0x8>
   34cdc:	a65e10ef          	jal	ra,16740 <std::__throw_logic_error(char const*)@plt>

0000000000034ce0 <elf::sym::get_name[abi:cxx11]() const>:
std::string sym::get_name() const { return strs.get(get_data().name); }
   34ce0:	ff010113          	addi	sp,sp,-16
   34ce4:	00113423          	sd	ra,8(sp)
   34ce8:	00813023          	sd	s0,0(sp)
   34cec:	00050413          	addi	s0,a0,0
   34cf0:	0105e603          	lwu	a2,16(a1)
   34cf4:	f75ff0ef          	jal	ra,34c68 <elf::strtab::get[abi:cxx11](unsigned long) const>
   34cf8:	00040513          	addi	a0,s0,0
   34cfc:	00813083          	ld	ra,8(sp)
   34d00:	00013403          	ld	s0,0(sp)
   34d04:	01010113          	addi	sp,sp,16
   34d08:	00008067          	jalr	zero,0(ra)

0000000000034d0c <elf::enums::to_string[abi:cxx11](elf::enums::shn)>:
std::string enums::to_string(shn v) {
   34d0c:	fe010113          	addi	sp,sp,-32
   34d10:	00113c23          	sd	ra,24(sp)
   34d14:	00813823          	sd	s0,16(sp)
   34d18:	00913423          	sd	s1,8(sp)
   34d1c:	01213023          	sd	s2,0(sp)
   34d20:	00050493          	addi	s1,a0,0
  if (v == shn::undef)
   34d24:	06058a63          	beq	a1,zero,34d98 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x8c>
  if (v == shn::abs)
   34d28:	0005871b          	addiw	a4,a1,0
   34d2c:	000107b7          	lui	a5,0x10
   34d30:	ff178793          	addi	a5,a5,-15 # fff1 <__abi_tag-0x2a3>
   34d34:	0af70463          	beq	a4,a5,34ddc <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xd0>
  if (v == shn::common)
   34d38:	0005871b          	addiw	a4,a1,0
   34d3c:	000107b7          	lui	a5,0x10
   34d40:	ff278793          	addi	a5,a5,-14 # fff2 <__abi_tag-0x2a2>
   34d44:	0cf70263          	beq	a4,a5,34e08 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xfc>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   34d48:	0005841b          	addiw	s0,a1,0
	  if (__value < (unsigned)__base) return __n;
   34d4c:	00900793          	addi	a5,zero,9
   34d50:	0e87f263          	bgeu	a5,s0,34e34 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x128>
	  if (__value < __b2) return __n + 1;
   34d54:	06300793          	addi	a5,zero,99
   34d58:	1c87f263          	bgeu	a5,s0,34f1c <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x210>
	  if (__value < __b3) return __n + 2;
   34d5c:	3e700793          	addi	a5,zero,999
   34d60:	1c87fc63          	bgeu	a5,s0,34f38 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x22c>
	  if (__value < __b4) return __n + 3;
   34d64:	000026b7          	lui	a3,0x2
   34d68:	70f68693          	addi	a3,a3,1807 # 270f <__abi_tag-0xdb85>
	  __n += 4;
   34d6c:	0086b933          	sltu	s2,a3,s0
   34d70:	00490913          	addi	s2,s2,4
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   34d74:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   34d78:	00f4b023          	sd	a5,0(s1)
      { _M_construct(__n, __c); }
   34d7c:	02d00613          	addi	a2,zero,45
   34d80:	00090593          	addi	a1,s2,0
   34d84:	00048513          	addi	a0,s1,0
   34d88:	a79e10ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   34d8c:	0004b583          	ld	a1,0(s1)
      unsigned __pos = __len - 1;
   34d90:	fff9069b          	addiw	a3,s2,-1
      while (__val >= 100)
   34d94:	0c40006f          	jal	zero,34e58 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x14c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   34d98:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   34d9c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   34da0:	00000693          	addi	a3,zero,0
   34da4:	00006617          	auipc	a2,0x6
   34da8:	55160613          	addi	a2,a2,1361 # 3b2f5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2815>
   34dac:	00006597          	auipc	a1,0x6
   34db0:	54458593          	addi	a1,a1,1348 # 3b2f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2810>
   34db4:	0000e317          	auipc	t1,0xe
   34db8:	56c33303          	ld	t1,1388(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   34dbc:	000300e7          	jalr	ra,0(t1)
}
   34dc0:	00048513          	addi	a0,s1,0
   34dc4:	01813083          	ld	ra,24(sp)
   34dc8:	01013403          	ld	s0,16(sp)
   34dcc:	00813483          	ld	s1,8(sp)
   34dd0:	00013903          	ld	s2,0(sp)
   34dd4:	02010113          	addi	sp,sp,32
   34dd8:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   34ddc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   34de0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   34de4:	00000693          	addi	a3,zero,0
   34de8:	00006617          	auipc	a2,0x6
   34dec:	51360613          	addi	a2,a2,1299 # 3b2fb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x281b>
   34df0:	00006597          	auipc	a1,0x6
   34df4:	50858593          	addi	a1,a1,1288 # 3b2f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2818>
   34df8:	0000e317          	auipc	t1,0xe
   34dfc:	52833303          	ld	t1,1320(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   34e00:	000300e7          	jalr	ra,0(t1)
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   34e04:	fbdff06f          	jal	zero,34dc0 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xb4>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   34e08:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   34e0c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   34e10:	00000693          	addi	a3,zero,0
   34e14:	00006617          	auipc	a2,0x6
   34e18:	4f260613          	addi	a2,a2,1266 # 3b306 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2826>
   34e1c:	00006597          	auipc	a1,0x6
   34e20:	4e458593          	addi	a1,a1,1252 # 3b300 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2820>
   34e24:	0000e317          	auipc	t1,0xe
   34e28:	4fc33303          	ld	t1,1276(t1) # 43320 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f4c>
   34e2c:	000300e7          	jalr	ra,0(t1)
   34e30:	f91ff06f          	jal	zero,34dc0 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xb4>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   34e34:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   34e38:	00f53023          	sd	a5,0(a0)
      { _M_construct(__n, __c); }
   34e3c:	02d00613          	addi	a2,zero,45
   34e40:	00100593          	addi	a1,zero,1
   34e44:	9bde10ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   34e48:	0004b583          	ld	a1,0(s1)
   34e4c:	06300793          	addi	a5,zero,99
   34e50:	0687fe63          	bgeu	a5,s0,34ecc <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x1c0>
      unsigned __pos = __len - 1;
   34e54:	00000693          	addi	a3,zero,0
	  auto const __num = (__val % 100) * 2;
   34e58:	06400813          	addi	a6,zero,100
	  __first[__pos] = __digits[__num + 1];
   34e5c:	0000e517          	auipc	a0,0xe
   34e60:	51c53503          	ld	a0,1308(a0) # 43378 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb9a0>
      while (__val >= 100)
   34e64:	00002337          	lui	t1,0x2
   34e68:	70f30313          	addi	t1,t1,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   34e6c:	030477bb          	remuw	a5,s0,a6
   34e70:	0017979b          	slliw	a5,a5,0x1
   34e74:	0004089b          	addiw	a7,s0,0
	  __val /= 100;
   34e78:	0304543b          	divuw	s0,s0,a6
	  __first[__pos] = __digits[__num + 1];
   34e7c:	02069613          	slli	a2,a3,0x20
   34e80:	02065613          	srli	a2,a2,0x20
   34e84:	00c58633          	add	a2,a1,a2
   34e88:	0017871b          	addiw	a4,a5,1
   34e8c:	02071713          	slli	a4,a4,0x20
   34e90:	02075713          	srli	a4,a4,0x20
   34e94:	00e50733          	add	a4,a0,a4
   34e98:	00074703          	lbu	a4,0(a4)
   34e9c:	00e60023          	sb	a4,0(a2)
	  __first[__pos - 1] = __digits[__num];
   34ea0:	fff6871b          	addiw	a4,a3,-1
   34ea4:	02071713          	slli	a4,a4,0x20
   34ea8:	02075713          	srli	a4,a4,0x20
   34eac:	00e58733          	add	a4,a1,a4
   34eb0:	02079793          	slli	a5,a5,0x20
   34eb4:	0207d793          	srli	a5,a5,0x20
   34eb8:	00f507b3          	add	a5,a0,a5
   34ebc:	0007c783          	lbu	a5,0(a5)
   34ec0:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   34ec4:	ffe6869b          	addiw	a3,a3,-2
      while (__val >= 100)
   34ec8:	fb1362e3          	bltu	t1,a7,34e6c <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x160>
      if (__val >= 10)
   34ecc:	00900793          	addi	a5,zero,9
   34ed0:	0487f063          	bgeu	a5,s0,34f10 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x204>
	  auto const __num = __val * 2;
   34ed4:	0014141b          	slliw	s0,s0,0x1
	  __first[1] = __digits[__num + 1];
   34ed8:	0000e717          	auipc	a4,0xe
   34edc:	4a073703          	ld	a4,1184(a4) # 43378 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb9a0>
   34ee0:	0014079b          	addiw	a5,s0,1
   34ee4:	02079793          	slli	a5,a5,0x20
   34ee8:	0207d793          	srli	a5,a5,0x20
   34eec:	00f707b3          	add	a5,a4,a5
   34ef0:	0007c783          	lbu	a5,0(a5)
   34ef4:	00f580a3          	sb	a5,1(a1)
	  __first[0] = __digits[__num];
   34ef8:	02041413          	slli	s0,s0,0x20
   34efc:	02045413          	srli	s0,s0,0x20
   34f00:	00870733          	add	a4,a4,s0
   34f04:	00074783          	lbu	a5,0(a4)
   34f08:	00f58023          	sb	a5,0(a1)
   34f0c:	eb5ff06f          	jal	zero,34dc0 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xb4>
	__first[0] = '0' + __val;
   34f10:	0304041b          	addiw	s0,s0,48
   34f14:	00858023          	sb	s0,0(a1)
   34f18:	ea9ff06f          	jal	zero,34dc0 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xb4>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   34f1c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   34f20:	00f53023          	sd	a5,0(a0)
      { _M_construct(__n, __c); }
   34f24:	02d00613          	addi	a2,zero,45
   34f28:	00200593          	addi	a1,zero,2
   34f2c:	8d5e10ef          	jal	ra,16800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   34f30:	0004b583          	ld	a1,0(s1)
      while (__val >= 100)
   34f34:	f99ff06f          	jal	zero,34ecc <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x1c0>
	  if (__value < __b3) return __n + 2;
   34f38:	00300913          	addi	s2,zero,3
   34f3c:	e39ff06f          	jal	zero,34d74 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x68>

0000000000034f40 <elf::elf::elf(std::shared_ptr<elf::loader> const&)>:
elf::elf(const std::shared_ptr<loader> &l) : m(make_shared<impl>(l)) {
   34f40:	f9010113          	addi	sp,sp,-112
   34f44:	06113423          	sd	ra,104(sp)
   34f48:	06813023          	sd	s0,96(sp)
   34f4c:	04913c23          	sd	s1,88(sp)
   34f50:	05213823          	sd	s2,80(sp)
   34f54:	05313423          	sd	s3,72(sp)
   34f58:	05413023          	sd	s4,64(sp)
   34f5c:	03513c23          	sd	s5,56(sp)
   34f60:	03613823          	sd	s6,48(sp)
   34f64:	03713423          	sd	s7,40(sp)
   34f68:	03813023          	sd	s8,32(sp)
   34f6c:	00050493          	addi	s1,a0,0
   34f70:	00058a93          	addi	s5,a1,0
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   34f74:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   34f78:	0d800513          	addi	a0,zero,216
   34f7c:	835e10ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   34f80:	00050413          	addi	s0,a0,0
   34f84:	00052423          	sw	zero,8(a0)
   34f88:	00052623          	sw	zero,12(a0)
   34f8c:	00052823          	sw	zero,16(a0)
   34f90:	00052a23          	sw	zero,20(a0)
   34f94:	00052c23          	sw	zero,24(a0)
   34f98:	00052e23          	sw	zero,28(a0)
   34f9c:	02053023          	sd	zero,32(a0)
   34fa0:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   34fa4:	00100793          	addi	a5,zero,1
   34fa8:	02f52823          	sw	a5,48(a0)
   34fac:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   34fb0:	0000e797          	auipc	a5,0xe
   34fb4:	4107b783          	ld	a5,1040(a5) # 433c0 <vtable for std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x788>
   34fb8:	01078793          	addi	a5,a5,16
   34fbc:	00f53023          	sd	a5,0(a0)
   34fc0:	03850913          	addi	s2,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   34fc4:	000ab783          	ld	a5,0(s5)
   34fc8:	02f53c23          	sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   34fcc:	008ab503          	ld	a0,8(s5)
   34fd0:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   34fd4:	02050063          	beq	a0,zero,34ff4 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0xb4>
    if (__is_single_threaded())
   34fd8:	0000e797          	auipc	a5,0xe
   34fdc:	4c07b783          	ld	a5,1216(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   34fe0:	0007c783          	lbu	a5,0(a5)
   34fe4:	04078e63          	beq	a5,zero,35040 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x100>
  { *__mem += __val; }
   34fe8:	03052783          	lw	a5,48(a0)
   34fec:	0017879b          	addiw	a5,a5,1
   34ff0:	02f52823          	sw	a5,48(a0)
	: _M_start(), _M_finish(), _M_end_of_storage()
   34ff4:	08043423          	sd	zero,136(s0)
   34ff8:	08043823          	sd	zero,144(s0)
   34ffc:	08043c23          	sd	zero,152(s0)
   35000:	0a043023          	sd	zero,160(s0)
   35004:	0a043423          	sd	zero,168(s0)
   35008:	0a043823          	sd	zero,176(s0)
      : _M_ptr(0), _M_refcount()
   3500c:	0a043c23          	sd	zero,184(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   35010:	0c043023          	sd	zero,192(s0)
      : _M_ptr(0), _M_refcount()
   35014:	0c043423          	sd	zero,200(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   35018:	0c043823          	sd	zero,208(s0)
	  _M_pi = __pi;
   3501c:	0084b423          	sd	s0,8(s1)
	  __p = __pi->_M_ptr();
   35020:	0124b023          	sd	s2,0(s1)
      { return _M_ptr; }
   35024:	000ab503          	ld	a0,0(s5)
  } *core_hdr = (struct core_hdr *)l->load(0, sizeof *core_hdr);
   35028:	00053783          	ld	a5,0(a0)
   3502c:	0107b783          	ld	a5,16(a5)
   35030:	00700613          	addi	a2,zero,7
   35034:	00000593          	addi	a1,zero,0
   35038:	000780e7          	jalr	ra,0(a5)
   3503c:	0140006f          	jal	zero,35050 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x110>
      __atomic_add(__mem, __val);
   35040:	00100593          	addi	a1,zero,1
   35044:	03050513          	addi	a0,a0,48
   35048:	d68e10ef          	jal	ra,165b0 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   3504c:	fa9ff06f          	jal	zero,34ff4 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0xb4>
   35050:	00050413          	addi	s0,a0,0
  if (strncmp(core_hdr->ei_magic,
   35054:	00400613          	addi	a2,zero,4
   35058:	00006597          	auipc	a1,0x6
   3505c:	2b058593          	addi	a1,a1,688 # 3b308 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2828>
   35060:	8f1e10ef          	jal	ra,16950 <strncmp@plt>
   35064:	04051e63          	bne	a0,zero,350c0 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x180>
  if (core_hdr->ei_version != 1)
   35068:	00644703          	lbu	a4,6(s0)
   3506c:	00100793          	addi	a5,zero,1
   35070:	08f71c63          	bne	a4,a5,35108 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x1c8>
  if (core_hdr->ei_class != elfclass::_32 &&
   35074:	00444703          	lbu	a4,4(s0)
   35078:	fff7079b          	addiw	a5,a4,-1
   3507c:	0ff7f793          	andi	a5,a5,255
   35080:	00100693          	addi	a3,zero,1
   35084:	0cf6e263          	bltu	a3,a5,35148 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x208>
  if (core_hdr->ei_data != elfdata::lsb && core_hdr->ei_data != elfdata::msb)
   35088:	00544783          	lbu	a5,5(s0)
   3508c:	fff7879b          	addiw	a5,a5,-1
   35090:	0ff7f793          	andi	a5,a5,255
   35094:	00100693          	addi	a3,zero,1
   35098:	0ef6e863          	bltu	a3,a5,35188 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x248>
  size_t hdr_size = (core_hdr->ei_class == elfclass::_32 ? sizeof(Ehdr<Elf32>)
   3509c:	00100793          	addi	a5,zero,1
   350a0:	04000613          	addi	a2,zero,64
   350a4:	12f70263          	beq	a4,a5,351c8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x288>
   350a8:	000ab503          	ld	a0,0(s5)
  const void *hdr = l->load(0, hdr_size);
   350ac:	00053783          	ld	a5,0(a0)
   350b0:	0107b783          	ld	a5,16(a5)
   350b4:	00000593          	addi	a1,zero,0
   350b8:	000780e7          	jalr	ra,0(a5)
   350bc:	1140006f          	jal	zero,351d0 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x290>
    throw format_error("bad ELF magic number");
   350c0:	01000513          	addi	a0,zero,16
   350c4:	dcce10ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   350c8:	00050913          	addi	s2,a0,0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   350cc:	00006597          	auipc	a1,0x6
   350d0:	24458593          	addi	a1,a1,580 # 3b310 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2830>
   350d4:	93de10ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   350d8:	0000e797          	auipc	a5,0xe
   350dc:	2807b783          	ld	a5,640(a5) # 43358 <vtable for elf::format_error@@Base+0x770>
   350e0:	01078793          	addi	a5,a5,16
   350e4:	00f93023          	sd	a5,0(s2)
   350e8:	0000e617          	auipc	a2,0xe
   350ec:	49863603          	ld	a2,1176(a2) # 43580 <elf::format_error::~format_error()@@Base+0xdf4c>
   350f0:	0000e597          	auipc	a1,0xe
   350f4:	2485b583          	ld	a1,584(a1) # 43338 <typeinfo for elf::format_error@@Base+0x7f8>
   350f8:	00090513          	addi	a0,s2,0
   350fc:	865e10ef          	jal	ra,16960 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   35100:	00050413          	addi	s0,a0,0
   35104:	4480006f          	jal	zero,3554c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
    throw format_error("unknown ELF version");
   35108:	01000513          	addi	a0,zero,16
   3510c:	d84e10ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   35110:	00050913          	addi	s2,a0,0
   35114:	00006597          	auipc	a1,0x6
   35118:	21458593          	addi	a1,a1,532 # 3b328 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2848>
   3511c:	8f5e10ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   35120:	0000e797          	auipc	a5,0xe
   35124:	2387b783          	ld	a5,568(a5) # 43358 <vtable for elf::format_error@@Base+0x770>
   35128:	01078793          	addi	a5,a5,16
   3512c:	00f93023          	sd	a5,0(s2)
   35130:	0000e617          	auipc	a2,0xe
   35134:	45063603          	ld	a2,1104(a2) # 43580 <elf::format_error::~format_error()@@Base+0xdf4c>
   35138:	0000e597          	auipc	a1,0xe
   3513c:	2005b583          	ld	a1,512(a1) # 43338 <typeinfo for elf::format_error@@Base+0x7f8>
   35140:	00090513          	addi	a0,s2,0
   35144:	81de10ef          	jal	ra,16960 <__cxa_throw@plt>
    throw format_error("bad ELF class");
   35148:	01000513          	addi	a0,zero,16
   3514c:	d44e10ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   35150:	00050913          	addi	s2,a0,0
   35154:	00006597          	auipc	a1,0x6
   35158:	1ec58593          	addi	a1,a1,492 # 3b340 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2860>
   3515c:	8b5e10ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   35160:	0000e797          	auipc	a5,0xe
   35164:	1f87b783          	ld	a5,504(a5) # 43358 <vtable for elf::format_error@@Base+0x770>
   35168:	01078793          	addi	a5,a5,16
   3516c:	00f93023          	sd	a5,0(s2)
   35170:	0000e617          	auipc	a2,0xe
   35174:	41063603          	ld	a2,1040(a2) # 43580 <elf::format_error::~format_error()@@Base+0xdf4c>
   35178:	0000e597          	auipc	a1,0xe
   3517c:	1c05b583          	ld	a1,448(a1) # 43338 <typeinfo for elf::format_error@@Base+0x7f8>
   35180:	00090513          	addi	a0,s2,0
   35184:	fdce10ef          	jal	ra,16960 <__cxa_throw@plt>
    throw format_error("bad ELF data order");
   35188:	01000513          	addi	a0,zero,16
   3518c:	d04e10ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   35190:	00050913          	addi	s2,a0,0
   35194:	00006597          	auipc	a1,0x6
   35198:	1bc58593          	addi	a1,a1,444 # 3b350 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2870>
   3519c:	875e10ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   351a0:	0000e797          	auipc	a5,0xe
   351a4:	1b87b783          	ld	a5,440(a5) # 43358 <vtable for elf::format_error@@Base+0x770>
   351a8:	01078793          	addi	a5,a5,16
   351ac:	00f93023          	sd	a5,0(s2)
   351b0:	0000e617          	auipc	a2,0xe
   351b4:	3d063603          	ld	a2,976(a2) # 43580 <elf::format_error::~format_error()@@Base+0xdf4c>
   351b8:	0000e597          	auipc	a1,0xe
   351bc:	1805b583          	ld	a1,384(a1) # 43338 <typeinfo for elf::format_error@@Base+0x7f8>
   351c0:	00090513          	addi	a0,s2,0
   351c4:	f9ce10ef          	jal	ra,16960 <__cxa_throw@plt>
  size_t hdr_size = (core_hdr->ei_class == elfclass::_32 ? sizeof(Ehdr<Elf32>)
   351c8:	03400613          	addi	a2,zero,52
   351cc:	eddff06f          	jal	zero,350a8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x168>
  const void *hdr = l->load(0, hdr_size);
   351d0:	00050593          	addi	a1,a0,0
  canon_hdr(&m->hdr, hdr, core_hdr->ei_class, core_hdr->ei_data);
   351d4:	0004b503          	ld	a0,0(s1)
   351d8:	00544683          	lbu	a3,5(s0)
   351dc:	00444603          	lbu	a2,4(s0)
   351e0:	01050513          	addi	a0,a0,16
   351e4:	0000e317          	auipc	t1,0xe
   351e8:	16c33303          	ld	t1,364(t1) # 43350 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xd24c>
   351ec:	000300e7          	jalr	ra,0(t1)
      { return _M_ptr; }
   351f0:	0004b783          	ld	a5,0(s1)
  if (m->hdr.version != 1)
   351f4:	0247a683          	lw	a3,36(a5)
   351f8:	00100713          	addi	a4,zero,1
   351fc:	02e69c63          	bne	a3,a4,35234 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x2f4>
  if (m->hdr.shnum && m->hdr.shstrndx >= m->hdr.shnum)
   35200:	04c7d703          	lhu	a4,76(a5)
   35204:	00070663          	beq	a4,zero,35210 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x2d0>
   35208:	04e7d683          	lhu	a3,78(a5)
   3520c:	06e6f463          	bgeu	a3,a4,35274 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x334>
   35210:	000ab503          	ld	a0,0(s5)
  const void *seg_data = l->load(m->hdr.phoff, m->hdr.phentsize * m->hdr.phnum);
   35214:	0467d603          	lhu	a2,70(a5)
   35218:	0487d683          	lhu	a3,72(a5)
   3521c:	00053703          	ld	a4,0(a0)
   35220:	01073703          	ld	a4,16(a4)
   35224:	02d6063b          	mulw	a2,a2,a3
   35228:	0307b583          	ld	a1,48(a5)
   3522c:	000700e7          	jalr	ra,0(a4)
   35230:	0600006f          	jal	zero,35290 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x350>
    throw format_error("bad section ELF version");
   35234:	01000513          	addi	a0,zero,16
   35238:	c58e10ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   3523c:	00050913          	addi	s2,a0,0
   35240:	00006597          	auipc	a1,0x6
   35244:	12858593          	addi	a1,a1,296 # 3b368 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2888>
   35248:	fc8e10ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   3524c:	0000e797          	auipc	a5,0xe
   35250:	10c7b783          	ld	a5,268(a5) # 43358 <vtable for elf::format_error@@Base+0x770>
   35254:	01078793          	addi	a5,a5,16
   35258:	00f93023          	sd	a5,0(s2)
   3525c:	0000e617          	auipc	a2,0xe
   35260:	32463603          	ld	a2,804(a2) # 43580 <elf::format_error::~format_error()@@Base+0xdf4c>
   35264:	0000e597          	auipc	a1,0xe
   35268:	0d45b583          	ld	a1,212(a1) # 43338 <typeinfo for elf::format_error@@Base+0x7f8>
   3526c:	00090513          	addi	a0,s2,0
   35270:	ef0e10ef          	jal	ra,16960 <__cxa_throw@plt>
    throw format_error("bad section name string table index");
   35274:	01000513          	addi	a0,zero,16
   35278:	c18e10ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   3527c:	00050913          	addi	s2,a0,0
   35280:	00006597          	auipc	a1,0x6
   35284:	10058593          	addi	a1,a1,256 # 3b380 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x28a0>
   35288:	f88e10ef          	jal	ra,16a10 <std::runtime_error::runtime_error(char const*)@plt>
   3528c:	0340006f          	jal	zero,352c0 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x380>
  const void *seg_data = l->load(m->hdr.phoff, m->hdr.phentsize * m->hdr.phnum);
   35290:	00050993          	addi	s3,a0,0
   35294:	0004b403          	ld	s0,0(s1)
  for (unsigned i = 0; i < m->hdr.phnum; i++) {
   35298:	04845783          	lhu	a5,72(s0)
   3529c:	00000913          	addi	s2,zero,0
   352a0:	14078663          	beq	a5,zero,353ec <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x4ac>
    m->segments.push_back(segment(*this, seg));
   352a4:	00010a13          	addi	s4,sp,0
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   352a8:	0000ec17          	auipc	s8,0xe
   352ac:	278c3c03          	ld	s8,632(s8) # 43520 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)@@Base+0xc99c>
    return ::__libc_single_threaded;
   352b0:	0000eb17          	auipc	s6,0xe
   352b4:	1e8b3b03          	ld	s6,488(s6) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   352b8:	00100b93          	addi	s7,zero,1
   352bc:	0900006f          	jal	zero,3534c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x40c>
   352c0:	0000e797          	auipc	a5,0xe
   352c4:	0987b783          	ld	a5,152(a5) # 43358 <vtable for elf::format_error@@Base+0x770>
   352c8:	01078793          	addi	a5,a5,16
   352cc:	00f93023          	sd	a5,0(s2)
    throw format_error("bad section name string table index");
   352d0:	0000e617          	auipc	a2,0xe
   352d4:	2b063603          	ld	a2,688(a2) # 43580 <elf::format_error::~format_error()@@Base+0xdf4c>
   352d8:	0000e597          	auipc	a1,0xe
   352dc:	0605b583          	ld	a1,96(a1) # 43338 <typeinfo for elf::format_error@@Base+0x7f8>
   352e0:	00090513          	addi	a0,s2,0
   352e4:	e7ce10ef          	jal	ra,16960 <__cxa_throw@plt>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   352e8:	07043583          	ld	a1,112(s0)
   352ec:	07843783          	ld	a5,120(s0)
   352f0:	08f58063          	beq	a1,a5,35370 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x430>
      : _M_ptr(__r._M_ptr), _M_refcount()
   352f4:	00013783          	ld	a5,0(sp)
   352f8:	00f5b023          	sd	a5,0(a1)
      constexpr __shared_count() noexcept : _M_pi(0)
   352fc:	0005b423          	sd	zero,8(a1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   35300:	00813783          	ld	a5,8(sp)
	__r._M_pi = _M_pi;
   35304:	00013423          	sd	zero,8(sp)
	_M_pi = __tmp;
   35308:	00f5b423          	sd	a5,8(a1)
	__r._M_ptr = nullptr;
   3530c:	00013023          	sd	zero,0(sp)
	    ++this->_M_impl._M_finish;
   35310:	07043783          	ld	a5,112(s0)
   35314:	01078793          	addi	a5,a5,16
   35318:	06f43823          	sd	a5,112(s0)
	if (_M_pi != nullptr)
   3531c:	00813403          	ld	s0,8(sp)
   35320:	00040e63          	beq	s0,zero,3533c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3fc>
    if (__is_single_threaded())
   35324:	000b4783          	lbu	a5,0(s6)
   35328:	04078c63          	beq	a5,zero,35380 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x440>
    _Atomic_word __result = *__mem;
   3532c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   35330:	fff5079b          	addiw	a5,a0,-1
   35334:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   35338:	05750c63          	beq	a0,s7,35390 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x450>
  for (unsigned i = 0; i < m->hdr.phnum; i++) {
   3533c:	0019091b          	addiw	s2,s2,1
      { return _M_ptr; }
   35340:	0004b403          	ld	s0,0(s1)
   35344:	04845783          	lhu	a5,72(s0)
   35348:	0af97263          	bgeu	s2,a5,353ec <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x4ac>
    const void *seg = ((const char *)seg_data) + i * m->hdr.phentsize;
   3534c:	04645603          	lhu	a2,70(s0)
   35350:	0326063b          	mulw	a2,a2,s2
   35354:	02061613          	slli	a2,a2,0x20
   35358:	02065613          	srli	a2,a2,0x20
    m->segments.push_back(segment(*this, seg));
   3535c:	00c98633          	add	a2,s3,a2
   35360:	00048593          	addi	a1,s1,0
   35364:	000a0513          	addi	a0,s4,0
   35368:	d30ff0ef          	jal	ra,34898 <elf::segment::segment(elf::elf const&, void const*)>
   3536c:	f7dff06f          	jal	zero,352e8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3a8>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   35370:	000a0613          	addi	a2,s4,0
   35374:	06840513          	addi	a0,s0,104
   35378:	000c00e7          	jalr	ra,0(s8)
   3537c:	fa1ff06f          	jal	zero,3531c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3dc>
      return __exchange_and_add(__mem, __val);
   35380:	fff00593          	addi	a1,zero,-1
   35384:	03040513          	addi	a0,s0,48
   35388:	a68e10ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   3538c:	fadff06f          	jal	zero,35338 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3f8>
	_M_dispose();
   35390:	00043783          	ld	a5,0(s0)
   35394:	0107b783          	ld	a5,16(a5)
   35398:	00040513          	addi	a0,s0,0
   3539c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   353a0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   353a4:	0000e797          	auipc	a5,0xe
   353a8:	0f47b783          	ld	a5,244(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   353ac:	0007c783          	lbu	a5,0(a5)
   353b0:	02078663          	beq	a5,zero,353dc <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x49c>
    _Atomic_word __result = *__mem;
   353b4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   353b8:	fff5079b          	addiw	a5,a0,-1
   353bc:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   353c0:	00100793          	addi	a5,zero,1
   353c4:	f6f51ce3          	bne	a0,a5,3533c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3fc>
	    _M_destroy();
   353c8:	00043783          	ld	a5,0(s0)
   353cc:	0187b783          	ld	a5,24(a5)
   353d0:	00040513          	addi	a0,s0,0
   353d4:	000780e7          	jalr	ra,0(a5)
   353d8:	f65ff06f          	jal	zero,3533c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3fc>
      return __exchange_and_add(__mem, __val);
   353dc:	fff00593          	addi	a1,zero,-1
   353e0:	03440513          	addi	a0,s0,52
   353e4:	a0ce10ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   353e8:	fd9ff06f          	jal	zero,353c0 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x480>
      { return _M_ptr; }
   353ec:	000ab503          	ld	a0,0(s5)
  const void *sec_data = l->load(m->hdr.shoff, m->hdr.shentsize * m->hdr.shnum);
   353f0:	04a45603          	lhu	a2,74(s0)
   353f4:	04c45703          	lhu	a4,76(s0)
   353f8:	00053783          	ld	a5,0(a0)
   353fc:	0107b783          	ld	a5,16(a5)
   35400:	02e6063b          	mulw	a2,a2,a4
   35404:	03843583          	ld	a1,56(s0)
   35408:	000780e7          	jalr	ra,0(a5)
   3540c:	00050993          	addi	s3,a0,0
   35410:	0004b403          	ld	s0,0(s1)
  for (unsigned i = 0; i < m->hdr.shnum; i++) {
   35414:	04c45783          	lhu	a5,76(s0)
   35418:	1c078c63          	beq	a5,zero,355f0 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x6b0>
   3541c:	00000913          	addi	s2,zero,0
    m->sections.push_back(section(*this, sec));
   35420:	01010a13          	addi	s4,sp,16
   35424:	0000eb97          	auipc	s7,0xe
   35428:	ebcbbb83          	ld	s7,-324(s7) # 432e0 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)@@Base+0xc5d0>
    return ::__libc_single_threaded;
   3542c:	0000ea97          	auipc	s5,0xe
   35430:	06caba83          	ld	s5,108(s5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   35434:	00100b13          	addi	s6,zero,1
   35438:	0680006f          	jal	zero,354a0 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x560>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   3543c:	05843583          	ld	a1,88(s0)
   35440:	06043783          	ld	a5,96(s0)
   35444:	08f58063          	beq	a1,a5,354c4 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x584>
      : _M_ptr(__r._M_ptr), _M_refcount()
   35448:	01013783          	ld	a5,16(sp)
   3544c:	00f5b023          	sd	a5,0(a1)
      constexpr __shared_count() noexcept : _M_pi(0)
   35450:	0005b423          	sd	zero,8(a1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   35454:	01813783          	ld	a5,24(sp)
	__r._M_pi = _M_pi;
   35458:	00013c23          	sd	zero,24(sp)
	_M_pi = __tmp;
   3545c:	00f5b423          	sd	a5,8(a1)
	__r._M_ptr = nullptr;
   35460:	00013823          	sd	zero,16(sp)
	    ++this->_M_impl._M_finish;
   35464:	05843783          	ld	a5,88(s0)
   35468:	01078793          	addi	a5,a5,16
   3546c:	04f43c23          	sd	a5,88(s0)
	if (_M_pi != nullptr)
   35470:	01813403          	ld	s0,24(sp)
   35474:	00040e63          	beq	s0,zero,35490 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x550>
    if (__is_single_threaded())
   35478:	000ac783          	lbu	a5,0(s5)
   3547c:	04078c63          	beq	a5,zero,354d4 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x594>
    _Atomic_word __result = *__mem;
   35480:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   35484:	fff5079b          	addiw	a5,a0,-1
   35488:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   3548c:	05650c63          	beq	a0,s6,354e4 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x5a4>
  for (unsigned i = 0; i < m->hdr.shnum; i++) {
   35490:	0019091b          	addiw	s2,s2,1
      { return _M_ptr; }
   35494:	0004b403          	ld	s0,0(s1)
   35498:	04c45783          	lhu	a5,76(s0)
   3549c:	14f97a63          	bgeu	s2,a5,355f0 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x6b0>
    const void *sec = ((const char *)sec_data) + i * m->hdr.shentsize;
   354a0:	04a45603          	lhu	a2,74(s0)
   354a4:	0326063b          	mulw	a2,a2,s2
   354a8:	02061613          	slli	a2,a2,0x20
   354ac:	02065613          	srli	a2,a2,0x20
    m->sections.push_back(section(*this, sec));
   354b0:	00c98633          	add	a2,s3,a2
   354b4:	00048593          	addi	a1,s1,0
   354b8:	000a0513          	addi	a0,s4,0
   354bc:	d18ff0ef          	jal	ra,349d4 <elf::section::section(elf::elf const&, void const*)>
   354c0:	f7dff06f          	jal	zero,3543c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x4fc>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   354c4:	000a0613          	addi	a2,s4,0
   354c8:	05040513          	addi	a0,s0,80
   354cc:	000b80e7          	jalr	ra,0(s7)
   354d0:	fa1ff06f          	jal	zero,35470 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x530>
      return __exchange_and_add(__mem, __val);
   354d4:	fff00593          	addi	a1,zero,-1
   354d8:	03040513          	addi	a0,s0,48
   354dc:	914e10ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   354e0:	fadff06f          	jal	zero,3548c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x54c>
	_M_dispose();
   354e4:	00043783          	ld	a5,0(s0)
   354e8:	0107b783          	ld	a5,16(a5)
   354ec:	00040513          	addi	a0,s0,0
   354f0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   354f4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   354f8:	0000e797          	auipc	a5,0xe
   354fc:	fa07b783          	ld	a5,-96(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   35500:	0007c783          	lbu	a5,0(a5)
   35504:	02078663          	beq	a5,zero,35530 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x5f0>
    _Atomic_word __result = *__mem;
   35508:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   3550c:	fff5079b          	addiw	a5,a0,-1
   35510:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   35514:	00100793          	addi	a5,zero,1
   35518:	f6f51ce3          	bne	a0,a5,35490 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x550>
	    _M_destroy();
   3551c:	00043783          	ld	a5,0(s0)
   35520:	0187b783          	ld	a5,24(a5)
   35524:	00040513          	addi	a0,s0,0
   35528:	000780e7          	jalr	ra,0(a5)
   3552c:	f65ff06f          	jal	zero,35490 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x550>
      return __exchange_and_add(__mem, __val);
   35530:	fff00593          	addi	a1,zero,-1
   35534:	03440513          	addi	a0,s0,52
   35538:	8b8e10ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   3553c:	fd9ff06f          	jal	zero,35514 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x5d4>
    throw format_error("bad ELF magic number");
   35540:	00050413          	addi	s0,a0,0
   35544:	00090513          	addi	a0,s2,0
   35548:	a08e10ef          	jal	ra,16750 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   3554c:	0084b503          	ld	a0,8(s1)
   35550:	00050863          	beq	a0,zero,35560 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x620>
	  _M_pi->_M_release();
   35554:	0000e317          	auipc	t1,0xe
   35558:	e8c33303          	ld	t1,-372(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   3555c:	000300e7          	jalr	ra,0(t1)
   35560:	00040513          	addi	a0,s0,0
   35564:	c2ce10ef          	jal	ra,16990 <_Unwind_Resume@plt>
    throw format_error("unknown ELF version");
   35568:	00050413          	addi	s0,a0,0
   3556c:	00090513          	addi	a0,s2,0
   35570:	9e0e10ef          	jal	ra,16750 <__cxa_free_exception@plt>
   35574:	fd9ff06f          	jal	zero,3554c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
    throw format_error("bad ELF class");
   35578:	00050413          	addi	s0,a0,0
   3557c:	00090513          	addi	a0,s2,0
   35580:	9d0e10ef          	jal	ra,16750 <__cxa_free_exception@plt>
   35584:	fc9ff06f          	jal	zero,3554c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
    throw format_error("bad ELF data order");
   35588:	00050413          	addi	s0,a0,0
   3558c:	00090513          	addi	a0,s2,0
   35590:	9c0e10ef          	jal	ra,16750 <__cxa_free_exception@plt>
   35594:	fb9ff06f          	jal	zero,3554c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
    throw format_error("bad section ELF version");
   35598:	00050413          	addi	s0,a0,0
   3559c:	00090513          	addi	a0,s2,0
   355a0:	9b0e10ef          	jal	ra,16750 <__cxa_free_exception@plt>
   355a4:	fa9ff06f          	jal	zero,3554c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
    throw format_error("bad section name string table index");
   355a8:	00050413          	addi	s0,a0,0
   355ac:	00090513          	addi	a0,s2,0
   355b0:	9a0e10ef          	jal	ra,16750 <__cxa_free_exception@plt>
   355b4:	f99ff06f          	jal	zero,3554c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
	if (_M_pi != nullptr)
   355b8:	00050413          	addi	s0,a0,0
   355bc:	00813503          	ld	a0,8(sp)
   355c0:	f80506e3          	beq	a0,zero,3554c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
	  _M_pi->_M_release();
   355c4:	0000e317          	auipc	t1,0xe
   355c8:	e1c33303          	ld	t1,-484(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   355cc:	000300e7          	jalr	ra,0(t1)
   355d0:	f7dff06f          	jal	zero,3554c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
	if (_M_pi != nullptr)
   355d4:	00050413          	addi	s0,a0,0
   355d8:	01813503          	ld	a0,24(sp)
   355dc:	f60508e3          	beq	a0,zero,3554c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
	  _M_pi->_M_release();
   355e0:	0000e317          	auipc	t1,0xe
   355e4:	e0033303          	ld	t1,-512(t1) # 433e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2bbf8>
   355e8:	000300e7          	jalr	ra,0(t1)
   355ec:	f61ff06f          	jal	zero,3554c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
}
   355f0:	06813083          	ld	ra,104(sp)
   355f4:	06013403          	ld	s0,96(sp)
   355f8:	05813483          	ld	s1,88(sp)
   355fc:	05013903          	ld	s2,80(sp)
   35600:	04813983          	ld	s3,72(sp)
   35604:	04013a03          	ld	s4,64(sp)
   35608:	03813a83          	ld	s5,56(sp)
   3560c:	03013b03          	ld	s6,48(sp)
   35610:	02813b83          	ld	s7,40(sp)
   35614:	02013c03          	ld	s8,32(sp)
   35618:	07010113          	addi	sp,sp,112
   3561c:	00008067          	jalr	zero,0(ra)

0000000000035620 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   35620:	00008067          	jalr	zero,0(ra)

0000000000035624 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   35624:	00008067          	jalr	zero,0(ra)

0000000000035628 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   35628:	00008067          	jalr	zero,0(ra)

000000000003562c <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   3562c:	00008067          	jalr	zero,0(ra)

0000000000035630 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   35630:	00008067          	jalr	zero,0(ra)

0000000000035634 <elf::format_error::~format_error()>:
class format_error : public std::runtime_error {
   35634:	ff010113          	addi	sp,sp,-16
   35638:	00113423          	sd	ra,8(sp)
   3563c:	0000e797          	auipc	a5,0xe
   35640:	d1c7b783          	ld	a5,-740(a5) # 43358 <vtable for elf::format_error@@Base+0x770>
   35644:	01078793          	addi	a5,a5,16
   35648:	00f53023          	sd	a5,0(a0)
   3564c:	984e10ef          	jal	ra,167d0 <std::runtime_error::~runtime_error()@plt>
   35650:	00813083          	ld	ra,8(sp)
   35654:	01010113          	addi	sp,sp,16
   35658:	00008067          	jalr	zero,0(ra)

000000000003565c <elf::format_error::~format_error()>:
   3565c:	ff010113          	addi	sp,sp,-16
   35660:	00113423          	sd	ra,8(sp)
   35664:	00813023          	sd	s0,0(sp)
   35668:	00050413          	addi	s0,a0,0
   3566c:	0000e797          	auipc	a5,0xe
   35670:	cec7b783          	ld	a5,-788(a5) # 43358 <vtable for elf::format_error@@Base+0x770>
   35674:	01078793          	addi	a5,a5,16
   35678:	00f53023          	sd	a5,0(a0)
   3567c:	954e10ef          	jal	ra,167d0 <std::runtime_error::~runtime_error()@plt>
   35680:	00040513          	addi	a0,s0,0
   35684:	91ce10ef          	jal	ra,167a0 <operator delete(void*)@plt>
   35688:	00813083          	ld	ra,8(sp)
   3568c:	00013403          	ld	s0,0(sp)
   35690:	01010113          	addi	sp,sp,16
   35694:	00008067          	jalr	zero,0(ra)

0000000000035698 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   35698:	ff010113          	addi	sp,sp,-16
   3569c:	00113423          	sd	ra,8(sp)
   356a0:	900e10ef          	jal	ra,167a0 <operator delete(void*)@plt>
   356a4:	00813083          	ld	ra,8(sp)
   356a8:	01010113          	addi	sp,sp,16
   356ac:	00008067          	jalr	zero,0(ra)

00000000000356b0 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   356b0:	ff010113          	addi	sp,sp,-16
   356b4:	00113423          	sd	ra,8(sp)
   356b8:	8e8e10ef          	jal	ra,167a0 <operator delete(void*)@plt>
   356bc:	00813083          	ld	ra,8(sp)
   356c0:	01010113          	addi	sp,sp,16
   356c4:	00008067          	jalr	zero,0(ra)

00000000000356c8 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   356c8:	ff010113          	addi	sp,sp,-16
   356cc:	00113423          	sd	ra,8(sp)
   356d0:	8d0e10ef          	jal	ra,167a0 <operator delete(void*)@plt>
   356d4:	00813083          	ld	ra,8(sp)
   356d8:	01010113          	addi	sp,sp,16
   356dc:	00008067          	jalr	zero,0(ra)

00000000000356e0 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   356e0:	ff010113          	addi	sp,sp,-16
   356e4:	00113423          	sd	ra,8(sp)
   356e8:	8b8e10ef          	jal	ra,167a0 <operator delete(void*)@plt>
   356ec:	00813083          	ld	ra,8(sp)
   356f0:	01010113          	addi	sp,sp,16
   356f4:	00008067          	jalr	zero,0(ra)

00000000000356f8 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   356f8:	ff010113          	addi	sp,sp,-16
   356fc:	00113423          	sd	ra,8(sp)
   35700:	8a0e10ef          	jal	ra,167a0 <operator delete(void*)@plt>
   35704:	00813083          	ld	ra,8(sp)
   35708:	01010113          	addi	sp,sp,16
   3570c:	00008067          	jalr	zero,0(ra)

0000000000035710 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   35710:	ff010113          	addi	sp,sp,-16
   35714:	00113423          	sd	ra,8(sp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   35718:	888e10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   3571c:	00813083          	ld	ra,8(sp)
   35720:	01010113          	addi	sp,sp,16
   35724:	00008067          	jalr	zero,0(ra)

0000000000035728 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   35728:	ff010113          	addi	sp,sp,-16
   3572c:	00113423          	sd	ra,8(sp)
   35730:	870e10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   35734:	00813083          	ld	ra,8(sp)
   35738:	01010113          	addi	sp,sp,16
   3573c:	00008067          	jalr	zero,0(ra)

0000000000035740 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   35740:	ff010113          	addi	sp,sp,-16
   35744:	00113423          	sd	ra,8(sp)
   35748:	858e10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   3574c:	00813083          	ld	ra,8(sp)
   35750:	01010113          	addi	sp,sp,16
   35754:	00008067          	jalr	zero,0(ra)

0000000000035758 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   35758:	ff010113          	addi	sp,sp,-16
   3575c:	00113423          	sd	ra,8(sp)
   35760:	840e10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   35764:	00813083          	ld	ra,8(sp)
   35768:	01010113          	addi	sp,sp,16
   3576c:	00008067          	jalr	zero,0(ra)

0000000000035770 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   35770:	ff010113          	addi	sp,sp,-16
   35774:	00113423          	sd	ra,8(sp)
   35778:	828e10ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   3577c:	00813083          	ld	ra,8(sp)
   35780:	01010113          	addi	sp,sp,16
   35784:	00008067          	jalr	zero,0(ra)

0000000000035788 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   35788:	ff010113          	addi	sp,sp,-16
   3578c:	00113423          	sd	ra,8(sp)
   35790:	00813023          	sd	s0,0(sp)
   35794:	03850413          	addi	s0,a0,56
	    ||
   35798:	0000e797          	auipc	a5,0xe
   3579c:	db87b783          	ld	a5,-584(a5) # 43550 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbdd0>
   357a0:	02f58c63          	beq	a1,a5,357d8 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   357a4:	0085b503          	ld	a0,8(a1)
   357a8:	0000e797          	auipc	a5,0xe
   357ac:	c807b783          	ld	a5,-896(a5) # 43428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbe98>
   357b0:	02f50463          	beq	a0,a5,357d8 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   357b4:	00054703          	lbu	a4,0(a0)
   357b8:	02a00793          	addi	a5,zero,42
   357bc:	02f70863          	beq	a4,a5,357ec <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   357c0:	0000e597          	auipc	a1,0xe
   357c4:	c685b583          	ld	a1,-920(a1) # 43428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbe98>
   357c8:	e09e00ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   357cc:	00153513          	sltiu	a0,a0,1
   357d0:	40a00533          	sub	a0,zero,a0
   357d4:	00a47433          	and	s0,s0,a0
      }
   357d8:	00040513          	addi	a0,s0,0
   357dc:	00813083          	ld	ra,8(sp)
   357e0:	00013403          	ld	s0,0(sp)
   357e4:	01010113          	addi	sp,sp,16
   357e8:	00008067          	jalr	zero,0(ra)
	return nullptr;
   357ec:	00000413          	addi	s0,zero,0
   357f0:	fe9ff06f          	jal	zero,357d8 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

00000000000357f4 <elf::section_type_mismatch::~section_type_mismatch()>:
class section_type_mismatch : public std::logic_error {
   357f4:	ff010113          	addi	sp,sp,-16
   357f8:	00113423          	sd	ra,8(sp)
   357fc:	0000e797          	auipc	a5,0xe
   35800:	bd47b783          	ld	a5,-1068(a5) # 433d0 <vtable for elf::section_type_mismatch@@Base+0x7c0>
   35804:	01078793          	addi	a5,a5,16
   35808:	00f53023          	sd	a5,0(a0)
   3580c:	994e10ef          	jal	ra,169a0 <std::logic_error::~logic_error()@plt>
   35810:	00813083          	ld	ra,8(sp)
   35814:	01010113          	addi	sp,sp,16
   35818:	00008067          	jalr	zero,0(ra)

000000000003581c <elf::section_type_mismatch::~section_type_mismatch()>:
   3581c:	ff010113          	addi	sp,sp,-16
   35820:	00113423          	sd	ra,8(sp)
   35824:	00813023          	sd	s0,0(sp)
   35828:	00050413          	addi	s0,a0,0
   3582c:	0000e797          	auipc	a5,0xe
   35830:	ba47b783          	ld	a5,-1116(a5) # 433d0 <vtable for elf::section_type_mismatch@@Base+0x7c0>
   35834:	01078793          	addi	a5,a5,16
   35838:	00f53023          	sd	a5,0(a0)
   3583c:	964e10ef          	jal	ra,169a0 <std::logic_error::~logic_error()@plt>
   35840:	00040513          	addi	a0,s0,0
   35844:	f5de00ef          	jal	ra,167a0 <operator delete(void*)@plt>
   35848:	00813083          	ld	ra,8(sp)
   3584c:	00013403          	ld	s0,0(sp)
   35850:	01010113          	addi	sp,sp,16
   35854:	00008067          	jalr	zero,0(ra)

0000000000035858 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   35858:	ff010113          	addi	sp,sp,-16
   3585c:	00113423          	sd	ra,8(sp)
   35860:	00813023          	sd	s0,0(sp)
   35864:	03850413          	addi	s0,a0,56
	    ||
   35868:	0000e797          	auipc	a5,0xe
   3586c:	ce87b783          	ld	a5,-792(a5) # 43550 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbdd0>
   35870:	02f58c63          	beq	a1,a5,358a8 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   35874:	0085b503          	ld	a0,8(a1)
   35878:	0000e797          	auipc	a5,0xe
   3587c:	bb07b783          	ld	a5,-1104(a5) # 43428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbe98>
   35880:	02f50463          	beq	a0,a5,358a8 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   35884:	00054703          	lbu	a4,0(a0)
   35888:	02a00793          	addi	a5,zero,42
   3588c:	02f70863          	beq	a4,a5,358bc <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   35890:	0000e597          	auipc	a1,0xe
   35894:	b985b583          	ld	a1,-1128(a1) # 43428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbe98>
   35898:	d39e00ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   3589c:	00153513          	sltiu	a0,a0,1
   358a0:	40a00533          	sub	a0,zero,a0
   358a4:	00a47433          	and	s0,s0,a0
      }
   358a8:	00040513          	addi	a0,s0,0
   358ac:	00813083          	ld	ra,8(sp)
   358b0:	00013403          	ld	s0,0(sp)
   358b4:	01010113          	addi	sp,sp,16
   358b8:	00008067          	jalr	zero,0(ra)
	return nullptr;
   358bc:	00000413          	addi	s0,zero,0
   358c0:	fe9ff06f          	jal	zero,358a8 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

00000000000358c4 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   358c4:	ff010113          	addi	sp,sp,-16
   358c8:	00113423          	sd	ra,8(sp)
   358cc:	00813023          	sd	s0,0(sp)
   358d0:	03850413          	addi	s0,a0,56
	    ||
   358d4:	0000e797          	auipc	a5,0xe
   358d8:	c7c7b783          	ld	a5,-900(a5) # 43550 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbdd0>
   358dc:	02f58c63          	beq	a1,a5,35914 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   358e0:	0085b503          	ld	a0,8(a1)
   358e4:	0000e797          	auipc	a5,0xe
   358e8:	b447b783          	ld	a5,-1212(a5) # 43428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbe98>
   358ec:	02f50463          	beq	a0,a5,35914 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   358f0:	00054703          	lbu	a4,0(a0)
   358f4:	02a00793          	addi	a5,zero,42
   358f8:	02f70863          	beq	a4,a5,35928 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   358fc:	0000e597          	auipc	a1,0xe
   35900:	b2c5b583          	ld	a1,-1236(a1) # 43428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbe98>
   35904:	ccde00ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   35908:	00153513          	sltiu	a0,a0,1
   3590c:	40a00533          	sub	a0,zero,a0
   35910:	00a47433          	and	s0,s0,a0
      }
   35914:	00040513          	addi	a0,s0,0
   35918:	00813083          	ld	ra,8(sp)
   3591c:	00013403          	ld	s0,0(sp)
   35920:	01010113          	addi	sp,sp,16
   35924:	00008067          	jalr	zero,0(ra)
	return nullptr;
   35928:	00000413          	addi	s0,zero,0
   3592c:	fe9ff06f          	jal	zero,35914 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

0000000000035930 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   35930:	ff010113          	addi	sp,sp,-16
   35934:	00113423          	sd	ra,8(sp)
   35938:	00813023          	sd	s0,0(sp)
   3593c:	03850413          	addi	s0,a0,56
	    ||
   35940:	0000e797          	auipc	a5,0xe
   35944:	c107b783          	ld	a5,-1008(a5) # 43550 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbdd0>
   35948:	02f58c63          	beq	a1,a5,35980 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   3594c:	0085b503          	ld	a0,8(a1)
   35950:	0000e797          	auipc	a5,0xe
   35954:	ad87b783          	ld	a5,-1320(a5) # 43428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbe98>
   35958:	02f50463          	beq	a0,a5,35980 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   3595c:	00054703          	lbu	a4,0(a0)
   35960:	02a00793          	addi	a5,zero,42
   35964:	02f70863          	beq	a4,a5,35994 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   35968:	0000e597          	auipc	a1,0xe
   3596c:	ac05b583          	ld	a1,-1344(a1) # 43428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbe98>
   35970:	c61e00ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   35974:	00153513          	sltiu	a0,a0,1
   35978:	40a00533          	sub	a0,zero,a0
   3597c:	00a47433          	and	s0,s0,a0
      }
   35980:	00040513          	addi	a0,s0,0
   35984:	00813083          	ld	ra,8(sp)
   35988:	00013403          	ld	s0,0(sp)
   3598c:	01010113          	addi	sp,sp,16
   35990:	00008067          	jalr	zero,0(ra)
	return nullptr;
   35994:	00000413          	addi	s0,zero,0
   35998:	fe9ff06f          	jal	zero,35980 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

000000000003599c <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   3599c:	ff010113          	addi	sp,sp,-16
   359a0:	00113423          	sd	ra,8(sp)
   359a4:	00813023          	sd	s0,0(sp)
   359a8:	03850413          	addi	s0,a0,56
	    ||
   359ac:	0000e797          	auipc	a5,0xe
   359b0:	ba47b783          	ld	a5,-1116(a5) # 43550 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbdd0>
   359b4:	02f58c63          	beq	a1,a5,359ec <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   359b8:	0085b503          	ld	a0,8(a1)
   359bc:	0000e797          	auipc	a5,0xe
   359c0:	a6c7b783          	ld	a5,-1428(a5) # 43428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbe98>
   359c4:	02f50463          	beq	a0,a5,359ec <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   359c8:	00054703          	lbu	a4,0(a0)
   359cc:	02a00793          	addi	a5,zero,42
   359d0:	02f70863          	beq	a4,a5,35a00 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   359d4:	0000e597          	auipc	a1,0xe
   359d8:	a545b583          	ld	a1,-1452(a1) # 43428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbe98>
   359dc:	bf5e00ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   359e0:	00153513          	sltiu	a0,a0,1
   359e4:	40a00533          	sub	a0,zero,a0
   359e8:	00a47433          	and	s0,s0,a0
      }
   359ec:	00040513          	addi	a0,s0,0
   359f0:	00813083          	ld	ra,8(sp)
   359f4:	00013403          	ld	s0,0(sp)
   359f8:	01010113          	addi	sp,sp,16
   359fc:	00008067          	jalr	zero,0(ra)
	return nullptr;
   35a00:	00000413          	addi	s0,zero,0
   35a04:	fe9ff06f          	jal	zero,359ec <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

0000000000035a08 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   35a08:	ff010113          	addi	sp,sp,-16
   35a0c:	00113423          	sd	ra,8(sp)
   35a10:	00813023          	sd	s0,0(sp)
	if (_M_pi != nullptr)
   35a14:	04053403          	ld	s0,64(a0)
   35a18:	02040463          	beq	s0,zero,35a40 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
    if (__is_single_threaded())
   35a1c:	0000e797          	auipc	a5,0xe
   35a20:	a7c7b783          	ld	a5,-1412(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   35a24:	0007c783          	lbu	a5,0(a5)
   35a28:	02078463          	beq	a5,zero,35a50 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x48>
    _Atomic_word __result = *__mem;
   35a2c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   35a30:	fff5079b          	addiw	a5,a0,-1
   35a34:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   35a38:	00100793          	addi	a5,zero,1
   35a3c:	02f50263          	beq	a0,a5,35a60 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x58>
      }
   35a40:	00813083          	ld	ra,8(sp)
   35a44:	00013403          	ld	s0,0(sp)
   35a48:	01010113          	addi	sp,sp,16
   35a4c:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   35a50:	fff00593          	addi	a1,zero,-1
   35a54:	03040513          	addi	a0,s0,48
   35a58:	b99e00ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35a5c:	fddff06f          	jal	zero,35a38 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x30>
	_M_dispose();
   35a60:	00043783          	ld	a5,0(s0)
   35a64:	0107b783          	ld	a5,16(a5)
   35a68:	00040513          	addi	a0,s0,0
   35a6c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   35a70:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   35a74:	0000e797          	auipc	a5,0xe
   35a78:	a247b783          	ld	a5,-1500(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   35a7c:	0007c783          	lbu	a5,0(a5)
   35a80:	02078663          	beq	a5,zero,35aac <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa4>
    _Atomic_word __result = *__mem;
   35a84:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   35a88:	fff5079b          	addiw	a5,a0,-1
   35a8c:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   35a90:	00100793          	addi	a5,zero,1
   35a94:	faf516e3          	bne	a0,a5,35a40 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
	    _M_destroy();
   35a98:	00043783          	ld	a5,0(s0)
   35a9c:	0187b783          	ld	a5,24(a5)
   35aa0:	00040513          	addi	a0,s0,0
   35aa4:	000780e7          	jalr	ra,0(a5)
      }
   35aa8:	f99ff06f          	jal	zero,35a40 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
      return __exchange_and_add(__mem, __val);
   35aac:	fff00593          	addi	a1,zero,-1
   35ab0:	03440513          	addi	a0,s0,52
   35ab4:	b3de00ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35ab8:	fd9ff06f          	jal	zero,35a90 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x88>

0000000000035abc <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   35abc:	ff010113          	addi	sp,sp,-16
   35ac0:	00113423          	sd	ra,8(sp)
   35ac4:	00813023          	sd	s0,0(sp)
	if (_M_pi != nullptr)
   35ac8:	04053403          	ld	s0,64(a0)
   35acc:	02040463          	beq	s0,zero,35af4 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
    if (__is_single_threaded())
   35ad0:	0000e797          	auipc	a5,0xe
   35ad4:	9c87b783          	ld	a5,-1592(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   35ad8:	0007c783          	lbu	a5,0(a5)
   35adc:	02078463          	beq	a5,zero,35b04 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x48>
    _Atomic_word __result = *__mem;
   35ae0:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   35ae4:	fff5079b          	addiw	a5,a0,-1
   35ae8:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   35aec:	00100793          	addi	a5,zero,1
   35af0:	02f50263          	beq	a0,a5,35b14 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x58>
      }
   35af4:	00813083          	ld	ra,8(sp)
   35af8:	00013403          	ld	s0,0(sp)
   35afc:	01010113          	addi	sp,sp,16
   35b00:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   35b04:	fff00593          	addi	a1,zero,-1
   35b08:	03040513          	addi	a0,s0,48
   35b0c:	ae5e00ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35b10:	fddff06f          	jal	zero,35aec <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x30>
	_M_dispose();
   35b14:	00043783          	ld	a5,0(s0)
   35b18:	0107b783          	ld	a5,16(a5)
   35b1c:	00040513          	addi	a0,s0,0
   35b20:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   35b24:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   35b28:	0000e797          	auipc	a5,0xe
   35b2c:	9707b783          	ld	a5,-1680(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   35b30:	0007c783          	lbu	a5,0(a5)
   35b34:	02078663          	beq	a5,zero,35b60 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa4>
    _Atomic_word __result = *__mem;
   35b38:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   35b3c:	fff5079b          	addiw	a5,a0,-1
   35b40:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   35b44:	00100793          	addi	a5,zero,1
   35b48:	faf516e3          	bne	a0,a5,35af4 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
	    _M_destroy();
   35b4c:	00043783          	ld	a5,0(s0)
   35b50:	0187b783          	ld	a5,24(a5)
   35b54:	00040513          	addi	a0,s0,0
   35b58:	000780e7          	jalr	ra,0(a5)
      }
   35b5c:	f99ff06f          	jal	zero,35af4 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
      return __exchange_and_add(__mem, __val);
   35b60:	fff00593          	addi	a1,zero,-1
   35b64:	03440513          	addi	a0,s0,52
   35b68:	a89e00ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35b6c:	fd9ff06f          	jal	zero,35b44 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x88>

0000000000035b70 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   35b70:	ff010113          	addi	sp,sp,-16
   35b74:	00113423          	sd	ra,8(sp)
   35b78:	00813023          	sd	s0,0(sp)
	if (_M_pi != nullptr)
   35b7c:	04053403          	ld	s0,64(a0)
   35b80:	02040463          	beq	s0,zero,35ba8 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
    if (__is_single_threaded())
   35b84:	0000e797          	auipc	a5,0xe
   35b88:	9147b783          	ld	a5,-1772(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   35b8c:	0007c783          	lbu	a5,0(a5)
   35b90:	02078463          	beq	a5,zero,35bb8 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x48>
    _Atomic_word __result = *__mem;
   35b94:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   35b98:	fff5079b          	addiw	a5,a0,-1
   35b9c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   35ba0:	00100793          	addi	a5,zero,1
   35ba4:	02f50263          	beq	a0,a5,35bc8 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x58>
      }
   35ba8:	00813083          	ld	ra,8(sp)
   35bac:	00013403          	ld	s0,0(sp)
   35bb0:	01010113          	addi	sp,sp,16
   35bb4:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   35bb8:	fff00593          	addi	a1,zero,-1
   35bbc:	03040513          	addi	a0,s0,48
   35bc0:	a31e00ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35bc4:	fddff06f          	jal	zero,35ba0 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x30>
	_M_dispose();
   35bc8:	00043783          	ld	a5,0(s0)
   35bcc:	0107b783          	ld	a5,16(a5)
   35bd0:	00040513          	addi	a0,s0,0
   35bd4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   35bd8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   35bdc:	0000e797          	auipc	a5,0xe
   35be0:	8bc7b783          	ld	a5,-1860(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   35be4:	0007c783          	lbu	a5,0(a5)
   35be8:	02078663          	beq	a5,zero,35c14 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa4>
    _Atomic_word __result = *__mem;
   35bec:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   35bf0:	fff5079b          	addiw	a5,a0,-1
   35bf4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   35bf8:	00100793          	addi	a5,zero,1
   35bfc:	faf516e3          	bne	a0,a5,35ba8 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
	    _M_destroy();
   35c00:	00043783          	ld	a5,0(s0)
   35c04:	0187b783          	ld	a5,24(a5)
   35c08:	00040513          	addi	a0,s0,0
   35c0c:	000780e7          	jalr	ra,0(a5)
      }
   35c10:	f99ff06f          	jal	zero,35ba8 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
      return __exchange_and_add(__mem, __val);
   35c14:	fff00593          	addi	a1,zero,-1
   35c18:	03440513          	addi	a0,s0,52
   35c1c:	9d5e00ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35c20:	fd9ff06f          	jal	zero,35bf8 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x88>

0000000000035c24 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   35c24:	fe010113          	addi	sp,sp,-32
   35c28:	00113c23          	sd	ra,24(sp)
   35c2c:	00813823          	sd	s0,16(sp)
   35c30:	00913423          	sd	s1,8(sp)
   35c34:	00050413          	addi	s0,a0,0
	if (_M_pi != nullptr)
   35c38:	06053483          	ld	s1,96(a0)
   35c3c:	02048463          	beq	s1,zero,35c64 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x40>
    if (__is_single_threaded())
   35c40:	0000e797          	auipc	a5,0xe
   35c44:	8587b783          	ld	a5,-1960(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   35c48:	0007c783          	lbu	a5,0(a5)
   35c4c:	04078c63          	beq	a5,zero,35ca4 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x80>
    _Atomic_word __result = *__mem;
   35c50:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   35c54:	fff5079b          	addiw	a5,a0,-1
   35c58:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   35c5c:	00100793          	addi	a5,zero,1
   35c60:	04f50a63          	beq	a0,a5,35cb4 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x90>
	if (_M_pi != nullptr)
   35c64:	04043403          	ld	s0,64(s0)
   35c68:	02040463          	beq	s0,zero,35c90 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
    if (__is_single_threaded())
   35c6c:	0000e797          	auipc	a5,0xe
   35c70:	82c7b783          	ld	a5,-2004(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   35c74:	0007c783          	lbu	a5,0(a5)
   35c78:	08078c63          	beq	a5,zero,35d10 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xec>
    _Atomic_word __result = *__mem;
   35c7c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   35c80:	fff5079b          	addiw	a5,a0,-1
   35c84:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   35c88:	00100793          	addi	a5,zero,1
   35c8c:	08f50a63          	beq	a0,a5,35d20 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xfc>
      }
   35c90:	01813083          	ld	ra,24(sp)
   35c94:	01013403          	ld	s0,16(sp)
   35c98:	00813483          	ld	s1,8(sp)
   35c9c:	02010113          	addi	sp,sp,32
   35ca0:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   35ca4:	fff00593          	addi	a1,zero,-1
   35ca8:	03048513          	addi	a0,s1,48
   35cac:	945e00ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35cb0:	fadff06f          	jal	zero,35c5c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
	_M_dispose();
   35cb4:	0004b783          	ld	a5,0(s1)
   35cb8:	0107b783          	ld	a5,16(a5)
   35cbc:	00048513          	addi	a0,s1,0
   35cc0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   35cc4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   35cc8:	0000d797          	auipc	a5,0xd
   35ccc:	7d07b783          	ld	a5,2000(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   35cd0:	0007c783          	lbu	a5,0(a5)
   35cd4:	02078663          	beq	a5,zero,35d00 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xdc>
    _Atomic_word __result = *__mem;
   35cd8:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   35cdc:	fff5079b          	addiw	a5,a0,-1
   35ce0:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   35ce4:	00100793          	addi	a5,zero,1
   35ce8:	f6f51ee3          	bne	a0,a5,35c64 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x40>
	    _M_destroy();
   35cec:	0004b783          	ld	a5,0(s1)
   35cf0:	0187b783          	ld	a5,24(a5)
   35cf4:	00048513          	addi	a0,s1,0
   35cf8:	000780e7          	jalr	ra,0(a5)
   35cfc:	f69ff06f          	jal	zero,35c64 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x40>
      return __exchange_and_add(__mem, __val);
   35d00:	fff00593          	addi	a1,zero,-1
   35d04:	03448513          	addi	a0,s1,52
   35d08:	8e9e00ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35d0c:	fd9ff06f          	jal	zero,35ce4 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xc0>
   35d10:	fff00593          	addi	a1,zero,-1
   35d14:	03040513          	addi	a0,s0,48
   35d18:	8d9e00ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35d1c:	f6dff06f          	jal	zero,35c88 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x64>
	_M_dispose();
   35d20:	00043783          	ld	a5,0(s0)
   35d24:	0107b783          	ld	a5,16(a5)
   35d28:	00040513          	addi	a0,s0,0
   35d2c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   35d30:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   35d34:	0000d797          	auipc	a5,0xd
   35d38:	7647b783          	ld	a5,1892(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   35d3c:	0007c783          	lbu	a5,0(a5)
   35d40:	02078663          	beq	a5,zero,35d6c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x148>
    _Atomic_word __result = *__mem;
   35d44:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   35d48:	fff5079b          	addiw	a5,a0,-1
   35d4c:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   35d50:	00100793          	addi	a5,zero,1
   35d54:	f2f51ee3          	bne	a0,a5,35c90 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
	    _M_destroy();
   35d58:	00043783          	ld	a5,0(s0)
   35d5c:	0187b783          	ld	a5,24(a5)
   35d60:	00040513          	addi	a0,s0,0
   35d64:	000780e7          	jalr	ra,0(a5)
      }
   35d68:	f29ff06f          	jal	zero,35c90 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
      return __exchange_and_add(__mem, __val);
   35d6c:	fff00593          	addi	a1,zero,-1
   35d70:	03440513          	addi	a0,s0,52
   35d74:	87de00ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35d78:	fd9ff06f          	jal	zero,35d50 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x12c>

0000000000035d7c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   35d7c:	fc010113          	addi	sp,sp,-64
   35d80:	02113c23          	sd	ra,56(sp)
   35d84:	02813823          	sd	s0,48(sp)
   35d88:	02913423          	sd	s1,40(sp)
   35d8c:	03213023          	sd	s2,32(sp)
   35d90:	01313c23          	sd	s3,24(sp)
   35d94:	01413823          	sd	s4,16(sp)
   35d98:	01513423          	sd	s5,8(sp)
   35d9c:	00050913          	addi	s2,a0,0
	if (_M_pi != nullptr)
   35da0:	0d053403          	ld	s0,208(a0)
   35da4:	02040463          	beq	s0,zero,35dcc <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x50>
    if (__is_single_threaded())
   35da8:	0000d797          	auipc	a5,0xd
   35dac:	6f07b783          	ld	a5,1776(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   35db0:	0007c783          	lbu	a5,0(a5)
   35db4:	06078063          	beq	a5,zero,35e14 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x98>
    _Atomic_word __result = *__mem;
   35db8:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   35dbc:	fff5079b          	addiw	a5,a0,-1
   35dc0:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   35dc4:	00100793          	addi	a5,zero,1
   35dc8:	04f50e63          	beq	a0,a5,35e24 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa8>
	if (_M_pi != nullptr)
   35dcc:	0c093403          	ld	s0,192(s2)
   35dd0:	02040463          	beq	s0,zero,35df8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7c>
    if (__is_single_threaded())
   35dd4:	0000d797          	auipc	a5,0xd
   35dd8:	6c47b783          	ld	a5,1732(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   35ddc:	0007c783          	lbu	a5,0(a5)
   35de0:	0a078063          	beq	a5,zero,35e80 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x104>
    _Atomic_word __result = *__mem;
   35de4:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   35de8:	fff5079b          	addiw	a5,a0,-1
   35dec:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   35df0:	00100793          	addi	a5,zero,1
   35df4:	08f50e63          	beq	a0,a5,35e90 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x114>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   35df8:	0a093403          	ld	s0,160(s2)
   35dfc:	0a893983          	ld	s3,168(s2)
	  for (; __first != __last; ++__first)
   35e00:	19340063          	beq	s0,s3,35f80 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x204>
    return ::__libc_single_threaded;
   35e04:	0000da97          	auipc	s5,0xd
   35e08:	694aba83          	ld	s5,1684(s5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   35e0c:	00100a13          	addi	s4,zero,1
   35e10:	0f40006f          	jal	zero,35f04 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x188>
      return __exchange_and_add(__mem, __val);
   35e14:	fff00593          	addi	a1,zero,-1
   35e18:	03040513          	addi	a0,s0,48
   35e1c:	fd4e00ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35e20:	fa5ff06f          	jal	zero,35dc4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x48>
	_M_dispose();
   35e24:	00043783          	ld	a5,0(s0)
   35e28:	0107b783          	ld	a5,16(a5)
   35e2c:	00040513          	addi	a0,s0,0
   35e30:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   35e34:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   35e38:	0000d797          	auipc	a5,0xd
   35e3c:	6607b783          	ld	a5,1632(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   35e40:	0007c783          	lbu	a5,0(a5)
   35e44:	02078663          	beq	a5,zero,35e70 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xf4>
    _Atomic_word __result = *__mem;
   35e48:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   35e4c:	fff5079b          	addiw	a5,a0,-1
   35e50:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   35e54:	00100793          	addi	a5,zero,1
   35e58:	f6f51ae3          	bne	a0,a5,35dcc <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x50>
	    _M_destroy();
   35e5c:	00043783          	ld	a5,0(s0)
   35e60:	0187b783          	ld	a5,24(a5)
   35e64:	00040513          	addi	a0,s0,0
   35e68:	000780e7          	jalr	ra,0(a5)
   35e6c:	f61ff06f          	jal	zero,35dcc <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x50>
      return __exchange_and_add(__mem, __val);
   35e70:	fff00593          	addi	a1,zero,-1
   35e74:	03440513          	addi	a0,s0,52
   35e78:	f78e00ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35e7c:	fd9ff06f          	jal	zero,35e54 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd8>
   35e80:	fff00593          	addi	a1,zero,-1
   35e84:	03040513          	addi	a0,s0,48
   35e88:	f68e00ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35e8c:	f65ff06f          	jal	zero,35df0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x74>
	_M_dispose();
   35e90:	00043783          	ld	a5,0(s0)
   35e94:	0107b783          	ld	a5,16(a5)
   35e98:	00040513          	addi	a0,s0,0
   35e9c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   35ea0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   35ea4:	0000d797          	auipc	a5,0xd
   35ea8:	5f47b783          	ld	a5,1524(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   35eac:	0007c783          	lbu	a5,0(a5)
   35eb0:	02078663          	beq	a5,zero,35edc <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x160>
    _Atomic_word __result = *__mem;
   35eb4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   35eb8:	fff5079b          	addiw	a5,a0,-1
   35ebc:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   35ec0:	00100793          	addi	a5,zero,1
   35ec4:	f2f51ae3          	bne	a0,a5,35df8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7c>
	    _M_destroy();
   35ec8:	00043783          	ld	a5,0(s0)
   35ecc:	0187b783          	ld	a5,24(a5)
   35ed0:	00040513          	addi	a0,s0,0
   35ed4:	000780e7          	jalr	ra,0(a5)
   35ed8:	f21ff06f          	jal	zero,35df8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7c>
      return __exchange_and_add(__mem, __val);
   35edc:	fff00593          	addi	a1,zero,-1
   35ee0:	03440513          	addi	a0,s0,52
   35ee4:	f0ce00ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35ee8:	fd9ff06f          	jal	zero,35ec0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x144>
    _Atomic_word __result = *__mem;
   35eec:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   35ef0:	fff5079b          	addiw	a5,a0,-1
   35ef4:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   35ef8:	03450663          	beq	a0,s4,35f24 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1a8>
   35efc:	01040413          	addi	s0,s0,16
   35f00:	08898063          	beq	s3,s0,35f80 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x204>
	if (_M_pi != nullptr)
   35f04:	00843483          	ld	s1,8(s0)
   35f08:	fe048ae3          	beq	s1,zero,35efc <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x180>
    if (__is_single_threaded())
   35f0c:	000ac783          	lbu	a5,0(s5)
   35f10:	fc079ee3          	bne	a5,zero,35eec <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x170>
      return __exchange_and_add(__mem, __val);
   35f14:	fff00593          	addi	a1,zero,-1
   35f18:	03048513          	addi	a0,s1,48
   35f1c:	ed4e00ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35f20:	fd9ff06f          	jal	zero,35ef8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x17c>
	_M_dispose();
   35f24:	0004b783          	ld	a5,0(s1)
   35f28:	0107b783          	ld	a5,16(a5)
   35f2c:	00048513          	addi	a0,s1,0
   35f30:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   35f34:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   35f38:	0000d797          	auipc	a5,0xd
   35f3c:	5607b783          	ld	a5,1376(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   35f40:	0007c783          	lbu	a5,0(a5)
   35f44:	02078663          	beq	a5,zero,35f70 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1f4>
    _Atomic_word __result = *__mem;
   35f48:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   35f4c:	fff5079b          	addiw	a5,a0,-1
   35f50:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   35f54:	00100793          	addi	a5,zero,1
   35f58:	faf512e3          	bne	a0,a5,35efc <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x180>
	    _M_destroy();
   35f5c:	0004b783          	ld	a5,0(s1)
   35f60:	0187b783          	ld	a5,24(a5)
   35f64:	00048513          	addi	a0,s1,0
   35f68:	000780e7          	jalr	ra,0(a5)
   35f6c:	f91ff06f          	jal	zero,35efc <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x180>
      return __exchange_and_add(__mem, __val);
   35f70:	fff00593          	addi	a1,zero,-1
   35f74:	03448513          	addi	a0,s1,52
   35f78:	e78e00ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35f7c:	fd9ff06f          	jal	zero,35f54 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1d8>
	_M_deallocate(_M_impl._M_start,
   35f80:	0a093503          	ld	a0,160(s2)
	if (__p)
   35f84:	00050463          	beq	a0,zero,35f8c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x210>
   35f88:	819e00ef          	jal	ra,167a0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   35f8c:	08893403          	ld	s0,136(s2)
   35f90:	09093983          	ld	s3,144(s2)
   35f94:	0b340463          	beq	s0,s3,3603c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2c0>
    return ::__libc_single_threaded;
   35f98:	0000da97          	auipc	s5,0xd
   35f9c:	500aba83          	ld	s5,1280(s5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   35fa0:	00100a13          	addi	s4,zero,1
   35fa4:	01c0006f          	jal	zero,35fc0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x244>
    _Atomic_word __result = *__mem;
   35fa8:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   35fac:	fff5079b          	addiw	a5,a0,-1
   35fb0:	02f4a823          	sw	a5,48(s1)
   35fb4:	03450663          	beq	a0,s4,35fe0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x264>
   35fb8:	01040413          	addi	s0,s0,16
   35fbc:	08898063          	beq	s3,s0,3603c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2c0>
	if (_M_pi != nullptr)
   35fc0:	00843483          	ld	s1,8(s0)
   35fc4:	fe048ae3          	beq	s1,zero,35fb8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x23c>
    if (__is_single_threaded())
   35fc8:	000ac783          	lbu	a5,0(s5)
   35fcc:	fc079ee3          	bne	a5,zero,35fa8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x22c>
      return __exchange_and_add(__mem, __val);
   35fd0:	fff00593          	addi	a1,zero,-1
   35fd4:	03048513          	addi	a0,s1,48
   35fd8:	e18e00ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35fdc:	fd9ff06f          	jal	zero,35fb4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x238>
	_M_dispose();
   35fe0:	0004b783          	ld	a5,0(s1)
   35fe4:	0107b783          	ld	a5,16(a5)
   35fe8:	00048513          	addi	a0,s1,0
   35fec:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   35ff0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   35ff4:	0000d797          	auipc	a5,0xd
   35ff8:	4a47b783          	ld	a5,1188(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   35ffc:	0007c783          	lbu	a5,0(a5)
   36000:	02078663          	beq	a5,zero,3602c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2b0>
    _Atomic_word __result = *__mem;
   36004:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   36008:	fff5079b          	addiw	a5,a0,-1
   3600c:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   36010:	00100793          	addi	a5,zero,1
   36014:	faf512e3          	bne	a0,a5,35fb8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x23c>
	    _M_destroy();
   36018:	0004b783          	ld	a5,0(s1)
   3601c:	0187b783          	ld	a5,24(a5)
   36020:	00048513          	addi	a0,s1,0
   36024:	000780e7          	jalr	ra,0(a5)
   36028:	f91ff06f          	jal	zero,35fb8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x23c>
      return __exchange_and_add(__mem, __val);
   3602c:	fff00593          	addi	a1,zero,-1
   36030:	03448513          	addi	a0,s1,52
   36034:	dbce00ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   36038:	fd9ff06f          	jal	zero,36010 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x294>
	_M_deallocate(_M_impl._M_start,
   3603c:	08893503          	ld	a0,136(s2)
	if (__p)
   36040:	00050463          	beq	a0,zero,36048 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2cc>
   36044:	f5ce00ef          	jal	ra,167a0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   36048:	04093403          	ld	s0,64(s2)
   3604c:	02040463          	beq	s0,zero,36074 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2f8>
    if (__is_single_threaded())
   36050:	0000d797          	auipc	a5,0xd
   36054:	4487b783          	ld	a5,1096(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   36058:	0007c783          	lbu	a5,0(a5)
   3605c:	02078e63          	beq	a5,zero,36098 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x31c>
    _Atomic_word __result = *__mem;
   36060:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   36064:	fff5079b          	addiw	a5,a0,-1
   36068:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   3606c:	00100793          	addi	a5,zero,1
   36070:	02f50c63          	beq	a0,a5,360a8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x32c>
      }
   36074:	03813083          	ld	ra,56(sp)
   36078:	03013403          	ld	s0,48(sp)
   3607c:	02813483          	ld	s1,40(sp)
   36080:	02013903          	ld	s2,32(sp)
   36084:	01813983          	ld	s3,24(sp)
   36088:	01013a03          	ld	s4,16(sp)
   3608c:	00813a83          	ld	s5,8(sp)
   36090:	04010113          	addi	sp,sp,64
   36094:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   36098:	fff00593          	addi	a1,zero,-1
   3609c:	03040513          	addi	a0,s0,48
   360a0:	d50e00ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   360a4:	fc9ff06f          	jal	zero,3606c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2f0>
	_M_dispose();
   360a8:	00043783          	ld	a5,0(s0)
   360ac:	0107b783          	ld	a5,16(a5)
   360b0:	00040513          	addi	a0,s0,0
   360b4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   360b8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   360bc:	0000d797          	auipc	a5,0xd
   360c0:	3dc7b783          	ld	a5,988(a5) # 43498 <__libc_single_threaded@GLIBC_2.32-0x1c8>
   360c4:	0007c783          	lbu	a5,0(a5)
   360c8:	02078663          	beq	a5,zero,360f4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x378>
    _Atomic_word __result = *__mem;
   360cc:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   360d0:	fff5079b          	addiw	a5,a0,-1
   360d4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   360d8:	00100793          	addi	a5,zero,1
   360dc:	f8f51ce3          	bne	a0,a5,36074 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2f8>
	    _M_destroy();
   360e0:	00043783          	ld	a5,0(s0)
   360e4:	0187b783          	ld	a5,24(a5)
   360e8:	00040513          	addi	a0,s0,0
   360ec:	000780e7          	jalr	ra,0(a5)
      }
   360f0:	f85ff06f          	jal	zero,36074 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2f8>
      return __exchange_and_add(__mem, __val);
   360f4:	fff00593          	addi	a1,zero,-1
   360f8:	03440513          	addi	a0,s0,52
   360fc:	cf4e00ef          	jal	ra,165f0 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   36100:	fd9ff06f          	jal	zero,360d8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x35c>

0000000000036104 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   36104:	fe010113          	addi	sp,sp,-32
   36108:	00113c23          	sd	ra,24(sp)
   3610c:	00813823          	sd	s0,16(sp)
   36110:	00913423          	sd	s1,8(sp)
   36114:	00050493          	addi	s1,a0,0
   36118:	00058413          	addi	s0,a1,0
  switch (ei_class) {
   3611c:	00100793          	addi	a5,zero,1
   36120:	02f60063          	beq	a2,a5,36140 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x3c>
   36124:	00200793          	addi	a5,zero,2
   36128:	28f60663          	beq	a2,a5,363b4 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x2b0>
}
   3612c:	01813083          	ld	ra,24(sp)
   36130:	01013403          	ld	s0,16(sp)
   36134:	00813483          	ld	s1,8(sp)
   36138:	02010113          	addi	sp,sp,32
   3613c:	00008067          	jalr	zero,0(ra)
   36140:	00100793          	addi	a5,zero,1
   36144:	18f68263          	beq	a3,a5,362c8 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x1c4>
   36148:	00200793          	addi	a5,zero,2
   3614c:	fef690e3          	bne	a3,a5,3612c <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
  typename E::Half shentsize; // Size of section header entry
  typename E::Half shnum;     // Number of section header entries
  typename E::Half shstrndx;  // Section name string table index

  template <typename E2> void from(const E2 &o) {
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   36150:	0005c603          	lbu	a2,0(a1)
   36154:	0015c683          	lbu	a3,1(a1)
   36158:	0025c703          	lbu	a4,2(a1)
   3615c:	0035c783          	lbu	a5,3(a1)
   36160:	00c50023          	sb	a2,0(a0)
   36164:	00d500a3          	sb	a3,1(a0)
   36168:	00e50123          	sb	a4,2(a0)
   3616c:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   36170:	0045c783          	lbu	a5,4(a1)
   36174:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   36178:	0055c783          	lbu	a5,5(a1)
   3617c:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   36180:	0065c783          	lbu	a5,6(a1)
   36184:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   36188:	0075c783          	lbu	a5,7(a1)
   3618c:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   36190:	0085c783          	lbu	a5,8(a1)
   36194:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   36198:	0095c883          	lbu	a7,9(a1)
   3619c:	00a5c803          	lbu	a6,10(a1)
   361a0:	00b5c503          	lbu	a0,11(a1)
   361a4:	00c5c583          	lbu	a1,12(a1)
   361a8:	00d44603          	lbu	a2,13(s0)
   361ac:	00e44683          	lbu	a3,14(s0)
   361b0:	00f44703          	lbu	a4,15(s0)
   361b4:	011484a3          	sb	a7,9(s1)
   361b8:	01048523          	sb	a6,10(s1)
   361bc:	00a485a3          	sb	a0,11(s1)
   361c0:	00b48623          	sb	a1,12(s1)
   361c4:	00c486a3          	sb	a2,13(s1)
   361c8:	00d48723          	sb	a3,14(s1)
   361cc:	00e487a3          	sb	a4,15(s1)

    type = swizzle(o.type, o.order, order);
   361d0:	01045783          	lhu	a5,16(s0)
  switch (sizeof(T)) {
  case 1:
    return v;
  case 2: {
    std::uint16_t x = (std::uint16_t)v;
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   361d4:	0087d71b          	srliw	a4,a5,0x8
   361d8:	0087979b          	slliw	a5,a5,0x8
   361dc:	00f767b3          	or	a5,a4,a5
   361e0:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   361e4:	01245783          	lhu	a5,18(s0)
   361e8:	0087d71b          	srliw	a4,a5,0x8
   361ec:	0087979b          	slliw	a5,a5,0x8
   361f0:	00f767b3          	or	a5,a4,a5
   361f4:	00f49923          	sh	a5,18(s1)
  }
  case 4:
    return (T)__builtin_bswap32((std::uint32_t)v);
   361f8:	01442503          	lw	a0,20(s0)
   361fc:	be4e00ef          	jal	ra,165e0 <__bswapsi2@plt>
    version = swizzle(o.version, o.order, order);
   36200:	00a4aa23          	sw	a0,20(s1)
   36204:	01842503          	lw	a0,24(s0)
   36208:	bd8e00ef          	jal	ra,165e0 <__bswapsi2@plt>
    entry = swizzle(o.entry, o.order, order);
   3620c:	02051513          	slli	a0,a0,0x20
   36210:	02055513          	srli	a0,a0,0x20
   36214:	00a4bc23          	sd	a0,24(s1)
   36218:	01c42503          	lw	a0,28(s0)
   3621c:	bc4e00ef          	jal	ra,165e0 <__bswapsi2@plt>
    phoff = swizzle(o.phoff, o.order, order);
   36220:	02051513          	slli	a0,a0,0x20
   36224:	02055513          	srli	a0,a0,0x20
   36228:	02a4b023          	sd	a0,32(s1)
   3622c:	02042503          	lw	a0,32(s0)
   36230:	bb0e00ef          	jal	ra,165e0 <__bswapsi2@plt>
    shoff = swizzle(o.shoff, o.order, order);
   36234:	02051513          	slli	a0,a0,0x20
   36238:	02055513          	srli	a0,a0,0x20
   3623c:	02a4b423          	sd	a0,40(s1)
   36240:	02442503          	lw	a0,36(s0)
   36244:	b9ce00ef          	jal	ra,165e0 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   36248:	02a4a823          	sw	a0,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   3624c:	02845783          	lhu	a5,40(s0)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   36250:	0087d71b          	srliw	a4,a5,0x8
   36254:	0087979b          	slliw	a5,a5,0x8
   36258:	00f767b3          	or	a5,a4,a5
   3625c:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   36260:	02a45783          	lhu	a5,42(s0)
   36264:	0087d71b          	srliw	a4,a5,0x8
   36268:	0087979b          	slliw	a5,a5,0x8
   3626c:	00f767b3          	or	a5,a4,a5
   36270:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   36274:	02c45783          	lhu	a5,44(s0)
   36278:	0087d71b          	srliw	a4,a5,0x8
   3627c:	0087979b          	slliw	a5,a5,0x8
   36280:	00f767b3          	or	a5,a4,a5
   36284:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   36288:	02e45783          	lhu	a5,46(s0)
   3628c:	0087d71b          	srliw	a4,a5,0x8
   36290:	0087979b          	slliw	a5,a5,0x8
   36294:	00f767b3          	or	a5,a4,a5
   36298:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   3629c:	03045783          	lhu	a5,48(s0)
   362a0:	0087d71b          	srliw	a4,a5,0x8
   362a4:	0087979b          	slliw	a5,a5,0x8
   362a8:	00f767b3          	or	a5,a4,a5
   362ac:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   362b0:	03245783          	lhu	a5,50(s0)
   362b4:	0087d71b          	srliw	a4,a5,0x8
   362b8:	0087979b          	slliw	a5,a5,0x8
   362bc:	00f767b3          	or	a5,a4,a5
   362c0:	02f49f23          	sh	a5,62(s1)
  }
   362c4:	e69ff06f          	jal	zero,3612c <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   362c8:	0005c603          	lbu	a2,0(a1)
   362cc:	0015c683          	lbu	a3,1(a1)
   362d0:	0025c703          	lbu	a4,2(a1)
   362d4:	0035c783          	lbu	a5,3(a1)
   362d8:	00c50023          	sb	a2,0(a0)
   362dc:	00d500a3          	sb	a3,1(a0)
   362e0:	00e50123          	sb	a4,2(a0)
   362e4:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   362e8:	0045c783          	lbu	a5,4(a1)
   362ec:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   362f0:	0055c783          	lbu	a5,5(a1)
   362f4:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   362f8:	0065c783          	lbu	a5,6(a1)
   362fc:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   36300:	0075c783          	lbu	a5,7(a1)
   36304:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   36308:	0085c783          	lbu	a5,8(a1)
   3630c:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   36310:	0095c883          	lbu	a7,9(a1)
   36314:	00a5c803          	lbu	a6,10(a1)
   36318:	00b5c503          	lbu	a0,11(a1)
   3631c:	00c5c583          	lbu	a1,12(a1)
   36320:	00d44603          	lbu	a2,13(s0)
   36324:	00e44683          	lbu	a3,14(s0)
   36328:	00f44703          	lbu	a4,15(s0)
   3632c:	011484a3          	sb	a7,9(s1)
   36330:	01048523          	sb	a6,10(s1)
   36334:	00a485a3          	sb	a0,11(s1)
   36338:	00b48623          	sb	a1,12(s1)
   3633c:	00c486a3          	sb	a2,13(s1)
   36340:	00d48723          	sb	a3,14(s1)
   36344:	00e487a3          	sb	a4,15(s1)
    type = swizzle(o.type, o.order, order);
   36348:	01045783          	lhu	a5,16(s0)
   3634c:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   36350:	01245783          	lhu	a5,18(s0)
   36354:	00f49923          	sh	a5,18(s1)
    version = swizzle(o.version, o.order, order);
   36358:	01442783          	lw	a5,20(s0)
   3635c:	00f4aa23          	sw	a5,20(s1)
    entry = swizzle(o.entry, o.order, order);
   36360:	01846783          	lwu	a5,24(s0)
   36364:	00f4bc23          	sd	a5,24(s1)
    phoff = swizzle(o.phoff, o.order, order);
   36368:	01c46783          	lwu	a5,28(s0)
   3636c:	02f4b023          	sd	a5,32(s1)
    shoff = swizzle(o.shoff, o.order, order);
   36370:	02046783          	lwu	a5,32(s0)
   36374:	02f4b423          	sd	a5,40(s1)
    flags = swizzle(o.flags, o.order, order);
   36378:	02442783          	lw	a5,36(s0)
   3637c:	02f4a823          	sw	a5,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   36380:	02845783          	lhu	a5,40(s0)
   36384:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   36388:	02a45783          	lhu	a5,42(s0)
   3638c:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   36390:	02c45783          	lhu	a5,44(s0)
   36394:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   36398:	02e45783          	lhu	a5,46(s0)
   3639c:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   363a0:	03045783          	lhu	a5,48(s0)
   363a4:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   363a8:	03245783          	lhu	a5,50(s0)
   363ac:	02f49f23          	sh	a5,62(s1)
  }
   363b0:	d7dff06f          	jal	zero,3612c <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
   363b4:	00100793          	addi	a5,zero,1
   363b8:	16f68663          	beq	a3,a5,36524 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x420>
   363bc:	00200793          	addi	a5,zero,2
   363c0:	d6f696e3          	bne	a3,a5,3612c <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   363c4:	0005c603          	lbu	a2,0(a1)
   363c8:	0015c683          	lbu	a3,1(a1)
   363cc:	0025c703          	lbu	a4,2(a1)
   363d0:	0035c783          	lbu	a5,3(a1)
   363d4:	00c50023          	sb	a2,0(a0)
   363d8:	00d500a3          	sb	a3,1(a0)
   363dc:	00e50123          	sb	a4,2(a0)
   363e0:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   363e4:	0045c783          	lbu	a5,4(a1)
   363e8:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   363ec:	0055c783          	lbu	a5,5(a1)
   363f0:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   363f4:	0065c783          	lbu	a5,6(a1)
   363f8:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   363fc:	0075c783          	lbu	a5,7(a1)
   36400:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   36404:	0085c783          	lbu	a5,8(a1)
   36408:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   3640c:	0095c883          	lbu	a7,9(a1)
   36410:	00a5c803          	lbu	a6,10(a1)
   36414:	00b5c503          	lbu	a0,11(a1)
   36418:	00c5c583          	lbu	a1,12(a1)
   3641c:	00d44603          	lbu	a2,13(s0)
   36420:	00e44683          	lbu	a3,14(s0)
   36424:	00f44703          	lbu	a4,15(s0)
   36428:	011484a3          	sb	a7,9(s1)
   3642c:	01048523          	sb	a6,10(s1)
   36430:	00a485a3          	sb	a0,11(s1)
   36434:	00b48623          	sb	a1,12(s1)
   36438:	00c486a3          	sb	a2,13(s1)
   3643c:	00d48723          	sb	a3,14(s1)
   36440:	00e487a3          	sb	a4,15(s1)
    type = swizzle(o.type, o.order, order);
   36444:	01045783          	lhu	a5,16(s0)
   36448:	0087d71b          	srliw	a4,a5,0x8
   3644c:	0087979b          	slliw	a5,a5,0x8
   36450:	00f767b3          	or	a5,a4,a5
   36454:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   36458:	01245783          	lhu	a5,18(s0)
   3645c:	0087d71b          	srliw	a4,a5,0x8
   36460:	0087979b          	slliw	a5,a5,0x8
   36464:	00f767b3          	or	a5,a4,a5
   36468:	00f49923          	sh	a5,18(s1)
    return (T)__builtin_bswap32((std::uint32_t)v);
   3646c:	01442503          	lw	a0,20(s0)
   36470:	970e00ef          	jal	ra,165e0 <__bswapsi2@plt>
    version = swizzle(o.version, o.order, order);
   36474:	00a4aa23          	sw	a0,20(s1)
  case 8:
    return (T)__builtin_bswap64((std::uint64_t)v);
   36478:	01843503          	ld	a0,24(s0)
   3647c:	b64e00ef          	jal	ra,167e0 <__bswapdi2@plt>
    entry = swizzle(o.entry, o.order, order);
   36480:	00a4bc23          	sd	a0,24(s1)
   36484:	02043503          	ld	a0,32(s0)
   36488:	b58e00ef          	jal	ra,167e0 <__bswapdi2@plt>
    phoff = swizzle(o.phoff, o.order, order);
   3648c:	02a4b023          	sd	a0,32(s1)
   36490:	02843503          	ld	a0,40(s0)
   36494:	b4ce00ef          	jal	ra,167e0 <__bswapdi2@plt>
    shoff = swizzle(o.shoff, o.order, order);
   36498:	02a4b423          	sd	a0,40(s1)
    return (T)__builtin_bswap32((std::uint32_t)v);
   3649c:	03042503          	lw	a0,48(s0)
   364a0:	940e00ef          	jal	ra,165e0 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   364a4:	02a4a823          	sw	a0,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   364a8:	03445783          	lhu	a5,52(s0)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   364ac:	0087d71b          	srliw	a4,a5,0x8
   364b0:	0087979b          	slliw	a5,a5,0x8
   364b4:	00f767b3          	or	a5,a4,a5
   364b8:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   364bc:	03645783          	lhu	a5,54(s0)
   364c0:	0087d71b          	srliw	a4,a5,0x8
   364c4:	0087979b          	slliw	a5,a5,0x8
   364c8:	00f767b3          	or	a5,a4,a5
   364cc:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   364d0:	03845783          	lhu	a5,56(s0)
   364d4:	0087d71b          	srliw	a4,a5,0x8
   364d8:	0087979b          	slliw	a5,a5,0x8
   364dc:	00f767b3          	or	a5,a4,a5
   364e0:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   364e4:	03a45783          	lhu	a5,58(s0)
   364e8:	0087d71b          	srliw	a4,a5,0x8
   364ec:	0087979b          	slliw	a5,a5,0x8
   364f0:	00f767b3          	or	a5,a4,a5
   364f4:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   364f8:	03c45783          	lhu	a5,60(s0)
   364fc:	0087d71b          	srliw	a4,a5,0x8
   36500:	0087979b          	slliw	a5,a5,0x8
   36504:	00f767b3          	or	a5,a4,a5
   36508:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   3650c:	03e45783          	lhu	a5,62(s0)
   36510:	0087d71b          	srliw	a4,a5,0x8
   36514:	0087979b          	slliw	a5,a5,0x8
   36518:	00f767b3          	or	a5,a4,a5
   3651c:	02f49f23          	sh	a5,62(s1)
  }
   36520:	c0dff06f          	jal	zero,3612c <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   36524:	0005c603          	lbu	a2,0(a1)
   36528:	0015c683          	lbu	a3,1(a1)
   3652c:	0025c703          	lbu	a4,2(a1)
   36530:	0035c783          	lbu	a5,3(a1)
   36534:	00c50023          	sb	a2,0(a0)
   36538:	00d500a3          	sb	a3,1(a0)
   3653c:	00e50123          	sb	a4,2(a0)
   36540:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   36544:	0045c783          	lbu	a5,4(a1)
   36548:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   3654c:	0055c783          	lbu	a5,5(a1)
   36550:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   36554:	0065c783          	lbu	a5,6(a1)
   36558:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   3655c:	0075c783          	lbu	a5,7(a1)
   36560:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   36564:	0085c783          	lbu	a5,8(a1)
   36568:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   3656c:	0095c883          	lbu	a7,9(a1)
   36570:	00a5c803          	lbu	a6,10(a1)
   36574:	00b5c503          	lbu	a0,11(a1)
   36578:	00c5c583          	lbu	a1,12(a1)
   3657c:	00d44603          	lbu	a2,13(s0)
   36580:	00e44683          	lbu	a3,14(s0)
   36584:	00f44703          	lbu	a4,15(s0)
   36588:	011484a3          	sb	a7,9(s1)
   3658c:	01048523          	sb	a6,10(s1)
   36590:	00a485a3          	sb	a0,11(s1)
   36594:	00b48623          	sb	a1,12(s1)
   36598:	00c486a3          	sb	a2,13(s1)
   3659c:	00d48723          	sb	a3,14(s1)
   365a0:	00e487a3          	sb	a4,15(s1)
    type = swizzle(o.type, o.order, order);
   365a4:	01045783          	lhu	a5,16(s0)
   365a8:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   365ac:	01245783          	lhu	a5,18(s0)
   365b0:	00f49923          	sh	a5,18(s1)
    version = swizzle(o.version, o.order, order);
   365b4:	01442783          	lw	a5,20(s0)
   365b8:	00f4aa23          	sw	a5,20(s1)
    entry = swizzle(o.entry, o.order, order);
   365bc:	01843783          	ld	a5,24(s0)
   365c0:	00f4bc23          	sd	a5,24(s1)
    phoff = swizzle(o.phoff, o.order, order);
   365c4:	02043783          	ld	a5,32(s0)
   365c8:	02f4b023          	sd	a5,32(s1)
    shoff = swizzle(o.shoff, o.order, order);
   365cc:	02843783          	ld	a5,40(s0)
   365d0:	02f4b423          	sd	a5,40(s1)
    flags = swizzle(o.flags, o.order, order);
   365d4:	03042783          	lw	a5,48(s0)
   365d8:	02f4a823          	sw	a5,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   365dc:	03445783          	lhu	a5,52(s0)
   365e0:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   365e4:	03645783          	lhu	a5,54(s0)
   365e8:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   365ec:	03845783          	lhu	a5,56(s0)
   365f0:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   365f4:	03a45783          	lhu	a5,58(s0)
   365f8:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   365fc:	03c45783          	lhu	a5,60(s0)
   36600:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   36604:	03e45783          	lhu	a5,62(s0)
   36608:	02f49f23          	sh	a5,62(s1)
  }
   3660c:	b21ff06f          	jal	zero,3612c <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>

0000000000036610 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   36610:	fe010113          	addi	sp,sp,-32
   36614:	00113c23          	sd	ra,24(sp)
   36618:	00813823          	sd	s0,16(sp)
   3661c:	00913423          	sd	s1,8(sp)
   36620:	00050413          	addi	s0,a0,0
   36624:	00058493          	addi	s1,a1,0
  switch (ei_class) {
   36628:	00100793          	addi	a5,zero,1
   3662c:	02f60063          	beq	a2,a5,3664c <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x3c>
   36630:	00200793          	addi	a5,zero,2
   36634:	10f60063          	beq	a2,a5,36734 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x124>
}
   36638:	01813083          	ld	ra,24(sp)
   3663c:	01013403          	ld	s0,16(sp)
   36640:	00813483          	ld	s1,8(sp)
   36644:	02010113          	addi	sp,sp,32
   36648:	00008067          	jalr	zero,0(ra)
   3664c:	00100793          	addi	a5,zero,1
   36650:	0af68063          	beq	a3,a5,366f0 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0xe0>
   36654:	00200793          	addi	a5,zero,2
   36658:	fef690e3          	bne	a3,a5,36638 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    return (T)__builtin_bswap32((std::uint32_t)v);
   3665c:	0005a503          	lw	a0,0(a1)
   36660:	f81df0ef          	jal	ra,165e0 <__bswapsi2@plt>
  Elf64::Xword filesz; // Size of segment in file
  Elf64::Xword memsz;  // Size of segment in memory
  Elf64::Xword align;  // Alignment of segment

  template <typename E2> void from(const E2 &o) {
    type = swizzle(o.type, o.order, order);
   36664:	00a42023          	sw	a0,0(s0)
   36668:	0044a503          	lw	a0,4(s1)
   3666c:	f75df0ef          	jal	ra,165e0 <__bswapsi2@plt>
    offset = swizzle(o.offset, o.order, order);
   36670:	02051513          	slli	a0,a0,0x20
   36674:	02055513          	srli	a0,a0,0x20
   36678:	00a43423          	sd	a0,8(s0)
   3667c:	0084a503          	lw	a0,8(s1)
   36680:	f61df0ef          	jal	ra,165e0 <__bswapsi2@plt>
    vaddr = swizzle(o.vaddr, o.order, order);
   36684:	02051513          	slli	a0,a0,0x20
   36688:	02055513          	srli	a0,a0,0x20
   3668c:	00a43823          	sd	a0,16(s0)
   36690:	00c4a503          	lw	a0,12(s1)
   36694:	f4ddf0ef          	jal	ra,165e0 <__bswapsi2@plt>
    paddr = swizzle(o.paddr, o.order, order);
   36698:	02051513          	slli	a0,a0,0x20
   3669c:	02055513          	srli	a0,a0,0x20
   366a0:	00a43c23          	sd	a0,24(s0)
   366a4:	0104a503          	lw	a0,16(s1)
   366a8:	f39df0ef          	jal	ra,165e0 <__bswapsi2@plt>
    filesz = swizzle(o.filesz, o.order, order);
   366ac:	02051513          	slli	a0,a0,0x20
   366b0:	02055513          	srli	a0,a0,0x20
   366b4:	02a43023          	sd	a0,32(s0)
   366b8:	0144a503          	lw	a0,20(s1)
   366bc:	f25df0ef          	jal	ra,165e0 <__bswapsi2@plt>
    memsz = swizzle(o.memsz, o.order, order);
   366c0:	02051513          	slli	a0,a0,0x20
   366c4:	02055513          	srli	a0,a0,0x20
   366c8:	02a43423          	sd	a0,40(s0)
   366cc:	0184a503          	lw	a0,24(s1)
   366d0:	f11df0ef          	jal	ra,165e0 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   366d4:	00a42223          	sw	a0,4(s0)
   366d8:	01c4a503          	lw	a0,28(s1)
   366dc:	f05df0ef          	jal	ra,165e0 <__bswapsi2@plt>
    align = swizzle(o.align, o.order, order);
   366e0:	02051513          	slli	a0,a0,0x20
   366e4:	02055513          	srli	a0,a0,0x20
   366e8:	02a43823          	sd	a0,48(s0)
  }
   366ec:	f4dff06f          	jal	zero,36638 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    type = swizzle(o.type, o.order, order);
   366f0:	0005a783          	lw	a5,0(a1)
   366f4:	00f52023          	sw	a5,0(a0)
    offset = swizzle(o.offset, o.order, order);
   366f8:	0045e783          	lwu	a5,4(a1)
   366fc:	00f53423          	sd	a5,8(a0)
    vaddr = swizzle(o.vaddr, o.order, order);
   36700:	0085e783          	lwu	a5,8(a1)
   36704:	00f53823          	sd	a5,16(a0)
    paddr = swizzle(o.paddr, o.order, order);
   36708:	00c5e783          	lwu	a5,12(a1)
   3670c:	00f53c23          	sd	a5,24(a0)
    filesz = swizzle(o.filesz, o.order, order);
   36710:	0105e783          	lwu	a5,16(a1)
   36714:	02f53023          	sd	a5,32(a0)
    memsz = swizzle(o.memsz, o.order, order);
   36718:	0145e783          	lwu	a5,20(a1)
   3671c:	02f53423          	sd	a5,40(a0)
    flags = swizzle(o.flags, o.order, order);
   36720:	0185a783          	lw	a5,24(a1)
   36724:	00f52223          	sw	a5,4(a0)
    align = swizzle(o.align, o.order, order);
   36728:	01c5e783          	lwu	a5,28(a1)
   3672c:	02f53823          	sd	a5,48(a0)
  }
   36730:	f09ff06f          	jal	zero,36638 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
   36734:	00100793          	addi	a5,zero,1
   36738:	06f68863          	beq	a3,a5,367a8 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x198>
   3673c:	00200793          	addi	a5,zero,2
   36740:	eef69ce3          	bne	a3,a5,36638 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
   36744:	0005a503          	lw	a0,0(a1)
   36748:	e99df0ef          	jal	ra,165e0 <__bswapsi2@plt>
    type = swizzle(o.type, o.order, order);
   3674c:	00a42023          	sw	a0,0(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   36750:	0084b503          	ld	a0,8(s1)
   36754:	88ce00ef          	jal	ra,167e0 <__bswapdi2@plt>
    offset = swizzle(o.offset, o.order, order);
   36758:	00a43423          	sd	a0,8(s0)
   3675c:	0104b503          	ld	a0,16(s1)
   36760:	880e00ef          	jal	ra,167e0 <__bswapdi2@plt>
    vaddr = swizzle(o.vaddr, o.order, order);
   36764:	00a43823          	sd	a0,16(s0)
   36768:	0184b503          	ld	a0,24(s1)
   3676c:	874e00ef          	jal	ra,167e0 <__bswapdi2@plt>
    paddr = swizzle(o.paddr, o.order, order);
   36770:	00a43c23          	sd	a0,24(s0)
   36774:	0204b503          	ld	a0,32(s1)
   36778:	868e00ef          	jal	ra,167e0 <__bswapdi2@plt>
    filesz = swizzle(o.filesz, o.order, order);
   3677c:	02a43023          	sd	a0,32(s0)
   36780:	0284b503          	ld	a0,40(s1)
   36784:	85ce00ef          	jal	ra,167e0 <__bswapdi2@plt>
    memsz = swizzle(o.memsz, o.order, order);
   36788:	02a43423          	sd	a0,40(s0)
    return (T)__builtin_bswap32((std::uint32_t)v);
   3678c:	0044a503          	lw	a0,4(s1)
   36790:	e51df0ef          	jal	ra,165e0 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   36794:	00a42223          	sw	a0,4(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   36798:	0304b503          	ld	a0,48(s1)
   3679c:	844e00ef          	jal	ra,167e0 <__bswapdi2@plt>
    align = swizzle(o.align, o.order, order);
   367a0:	02a43823          	sd	a0,48(s0)
  }
   367a4:	e95ff06f          	jal	zero,36638 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    type = swizzle(o.type, o.order, order);
   367a8:	0005a783          	lw	a5,0(a1)
   367ac:	00f52023          	sw	a5,0(a0)
    offset = swizzle(o.offset, o.order, order);
   367b0:	0085b783          	ld	a5,8(a1)
   367b4:	00f53423          	sd	a5,8(a0)
    vaddr = swizzle(o.vaddr, o.order, order);
   367b8:	0105b783          	ld	a5,16(a1)
   367bc:	00f53823          	sd	a5,16(a0)
    paddr = swizzle(o.paddr, o.order, order);
   367c0:	0185b783          	ld	a5,24(a1)
   367c4:	00f53c23          	sd	a5,24(a0)
    filesz = swizzle(o.filesz, o.order, order);
   367c8:	0205b783          	ld	a5,32(a1)
   367cc:	02f53023          	sd	a5,32(a0)
    memsz = swizzle(o.memsz, o.order, order);
   367d0:	0285b783          	ld	a5,40(a1)
   367d4:	02f53423          	sd	a5,40(a0)
    flags = swizzle(o.flags, o.order, order);
   367d8:	0045a783          	lw	a5,4(a1)
   367dc:	00f52223          	sw	a5,4(a0)
    align = swizzle(o.align, o.order, order);
   367e0:	0305b783          	ld	a5,48(a1)
   367e4:	02f53823          	sd	a5,48(a0)
  }
   367e8:	e51ff06f          	jal	zero,36638 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>

00000000000367ec <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   367ec:	fe010113          	addi	sp,sp,-32
   367f0:	00113c23          	sd	ra,24(sp)
   367f4:	00813823          	sd	s0,16(sp)
   367f8:	00913423          	sd	s1,8(sp)
   367fc:	00050413          	addi	s0,a0,0
   36800:	00058493          	addi	s1,a1,0
  switch (ei_class) {
   36804:	00100793          	addi	a5,zero,1
   36808:	02f60063          	beq	a2,a5,36828 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x3c>
   3680c:	00200793          	addi	a5,zero,2
   36810:	12f60463          	beq	a2,a5,36938 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x14c>
}
   36814:	01813083          	ld	ra,24(sp)
   36818:	01013403          	ld	s0,16(sp)
   3681c:	00813483          	ld	s1,8(sp)
   36820:	02010113          	addi	sp,sp,32
   36824:	00008067          	jalr	zero,0(ra)
   36828:	00100793          	addi	a5,zero,1
   3682c:	0af68c63          	beq	a3,a5,368e4 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0xf8>
   36830:	00200793          	addi	a5,zero,2
   36834:	fef690e3          	bne	a3,a5,36814 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    return (T)__builtin_bswap32((std::uint32_t)v);
   36838:	0005a503          	lw	a0,0(a1)
   3683c:	da5df0ef          	jal	ra,165e0 <__bswapsi2@plt>
    name = swizzle(o.name, o.order, order);
   36840:	00a42023          	sw	a0,0(s0)
   36844:	0044a503          	lw	a0,4(s1)
   36848:	d99df0ef          	jal	ra,165e0 <__bswapsi2@plt>
    type = swizzle(o.type, o.order, order);
   3684c:	00a42223          	sw	a0,4(s0)
   36850:	0084a503          	lw	a0,8(s1)
   36854:	d8ddf0ef          	jal	ra,165e0 <__bswapsi2@plt>
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   36858:	02051513          	slli	a0,a0,0x20
   3685c:	02055513          	srli	a0,a0,0x20
   36860:	00a43423          	sd	a0,8(s0)
   36864:	00c4a503          	lw	a0,12(s1)
   36868:	d79df0ef          	jal	ra,165e0 <__bswapsi2@plt>
    addr = swizzle(o.addr, o.order, order);
   3686c:	02051513          	slli	a0,a0,0x20
   36870:	02055513          	srli	a0,a0,0x20
   36874:	00a43823          	sd	a0,16(s0)
   36878:	0104a503          	lw	a0,16(s1)
   3687c:	d65df0ef          	jal	ra,165e0 <__bswapsi2@plt>
    offset = swizzle(o.offset, o.order, order);
   36880:	02051513          	slli	a0,a0,0x20
   36884:	02055513          	srli	a0,a0,0x20
   36888:	00a43c23          	sd	a0,24(s0)
   3688c:	0144a503          	lw	a0,20(s1)
   36890:	d51df0ef          	jal	ra,165e0 <__bswapsi2@plt>
    size = swizzle(o.size, o.order, order);
   36894:	02051513          	slli	a0,a0,0x20
   36898:	02055513          	srli	a0,a0,0x20
   3689c:	02a43023          	sd	a0,32(s0)
   368a0:	0184a503          	lw	a0,24(s1)
   368a4:	d3ddf0ef          	jal	ra,165e0 <__bswapsi2@plt>
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   368a8:	02a41423          	sh	a0,40(s0)
   368ac:	01c4a503          	lw	a0,28(s1)
   368b0:	d31df0ef          	jal	ra,165e0 <__bswapsi2@plt>
    info = swizzle(o.info, o.order, order);
   368b4:	02a42623          	sw	a0,44(s0)
   368b8:	0204a503          	lw	a0,32(s1)
   368bc:	d25df0ef          	jal	ra,165e0 <__bswapsi2@plt>
    addralign = swizzle(o.addralign, o.order, order);
   368c0:	02051513          	slli	a0,a0,0x20
   368c4:	02055513          	srli	a0,a0,0x20
   368c8:	02a43823          	sd	a0,48(s0)
   368cc:	0244a503          	lw	a0,36(s1)
   368d0:	d11df0ef          	jal	ra,165e0 <__bswapsi2@plt>
    entsize = swizzle(o.entsize, o.order, order);
   368d4:	02051513          	slli	a0,a0,0x20
   368d8:	02055513          	srli	a0,a0,0x20
   368dc:	02a43c23          	sd	a0,56(s0)
  }
   368e0:	f35ff06f          	jal	zero,36814 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    name = swizzle(o.name, o.order, order);
   368e4:	0005a783          	lw	a5,0(a1)
   368e8:	00f52023          	sw	a5,0(a0)
    type = swizzle(o.type, o.order, order);
   368ec:	0045a783          	lw	a5,4(a1)
   368f0:	00f52223          	sw	a5,4(a0)
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   368f4:	0085e783          	lwu	a5,8(a1)
   368f8:	00f53423          	sd	a5,8(a0)
    addr = swizzle(o.addr, o.order, order);
   368fc:	00c5e783          	lwu	a5,12(a1)
   36900:	00f53823          	sd	a5,16(a0)
    offset = swizzle(o.offset, o.order, order);
   36904:	0105e783          	lwu	a5,16(a1)
   36908:	00f53c23          	sd	a5,24(a0)
    size = swizzle(o.size, o.order, order);
   3690c:	0145e783          	lwu	a5,20(a1)
   36910:	02f53023          	sd	a5,32(a0)
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   36914:	0185a783          	lw	a5,24(a1)
   36918:	02f51423          	sh	a5,40(a0)
    info = swizzle(o.info, o.order, order);
   3691c:	01c5a783          	lw	a5,28(a1)
   36920:	02f52623          	sw	a5,44(a0)
    addralign = swizzle(o.addralign, o.order, order);
   36924:	0205e783          	lwu	a5,32(a1)
   36928:	02f53823          	sd	a5,48(a0)
    entsize = swizzle(o.entsize, o.order, order);
   3692c:	0245e783          	lwu	a5,36(a1)
   36930:	02f53c23          	sd	a5,56(a0)
  }
   36934:	ee1ff06f          	jal	zero,36814 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
   36938:	00100793          	addi	a5,zero,1
   3693c:	08f68463          	beq	a3,a5,369c4 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x1d8>
   36940:	00200793          	addi	a5,zero,2
   36944:	ecf698e3          	bne	a3,a5,36814 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
   36948:	0005a503          	lw	a0,0(a1)
   3694c:	c95df0ef          	jal	ra,165e0 <__bswapsi2@plt>
    name = swizzle(o.name, o.order, order);
   36950:	00a42023          	sw	a0,0(s0)
   36954:	0044a503          	lw	a0,4(s1)
   36958:	c89df0ef          	jal	ra,165e0 <__bswapsi2@plt>
    type = swizzle(o.type, o.order, order);
   3695c:	00a42223          	sw	a0,4(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   36960:	0084b503          	ld	a0,8(s1)
   36964:	e7ddf0ef          	jal	ra,167e0 <__bswapdi2@plt>
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   36968:	00a43423          	sd	a0,8(s0)
   3696c:	0104b503          	ld	a0,16(s1)
   36970:	e71df0ef          	jal	ra,167e0 <__bswapdi2@plt>
    addr = swizzle(o.addr, o.order, order);
   36974:	00a43823          	sd	a0,16(s0)
   36978:	0184b503          	ld	a0,24(s1)
   3697c:	e65df0ef          	jal	ra,167e0 <__bswapdi2@plt>
    offset = swizzle(o.offset, o.order, order);
   36980:	00a43c23          	sd	a0,24(s0)
   36984:	0204b503          	ld	a0,32(s1)
   36988:	e59df0ef          	jal	ra,167e0 <__bswapdi2@plt>
    size = swizzle(o.size, o.order, order);
   3698c:	02a43023          	sd	a0,32(s0)
    return (T)__builtin_bswap32((std::uint32_t)v);
   36990:	0284a503          	lw	a0,40(s1)
   36994:	c4ddf0ef          	jal	ra,165e0 <__bswapsi2@plt>
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   36998:	02a41423          	sh	a0,40(s0)
   3699c:	02c4a503          	lw	a0,44(s1)
   369a0:	c41df0ef          	jal	ra,165e0 <__bswapsi2@plt>
    info = swizzle(o.info, o.order, order);
   369a4:	02a42623          	sw	a0,44(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   369a8:	0304b503          	ld	a0,48(s1)
   369ac:	e35df0ef          	jal	ra,167e0 <__bswapdi2@plt>
    addralign = swizzle(o.addralign, o.order, order);
   369b0:	02a43823          	sd	a0,48(s0)
   369b4:	0384b503          	ld	a0,56(s1)
   369b8:	e29df0ef          	jal	ra,167e0 <__bswapdi2@plt>
    entsize = swizzle(o.entsize, o.order, order);
   369bc:	02a43c23          	sd	a0,56(s0)
  }
   369c0:	e55ff06f          	jal	zero,36814 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    name = swizzle(o.name, o.order, order);
   369c4:	0005a783          	lw	a5,0(a1)
   369c8:	00f52023          	sw	a5,0(a0)
    type = swizzle(o.type, o.order, order);
   369cc:	0045a783          	lw	a5,4(a1)
   369d0:	00f52223          	sw	a5,4(a0)
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   369d4:	0085b783          	ld	a5,8(a1)
   369d8:	00f53423          	sd	a5,8(a0)
    addr = swizzle(o.addr, o.order, order);
   369dc:	0105b783          	ld	a5,16(a1)
   369e0:	00f53823          	sd	a5,16(a0)
    offset = swizzle(o.offset, o.order, order);
   369e4:	0185b783          	ld	a5,24(a1)
   369e8:	00f53c23          	sd	a5,24(a0)
    size = swizzle(o.size, o.order, order);
   369ec:	0205b783          	ld	a5,32(a1)
   369f0:	02f53023          	sd	a5,32(a0)
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   369f4:	0285a783          	lw	a5,40(a1)
   369f8:	02f51423          	sh	a5,40(a0)
    info = swizzle(o.info, o.order, order);
   369fc:	02c5a783          	lw	a5,44(a1)
   36a00:	02f52623          	sw	a5,44(a0)
    addralign = swizzle(o.addralign, o.order, order);
   36a04:	0305b783          	ld	a5,48(a1)
   36a08:	02f53823          	sd	a5,48(a0)
    entsize = swizzle(o.entsize, o.order, order);
   36a0c:	0385b783          	ld	a5,56(a1)
   36a10:	02f53c23          	sd	a5,56(a0)
  }
   36a14:	e01ff06f          	jal	zero,36814 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>

0000000000036a18 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   36a18:	fe010113          	addi	sp,sp,-32
   36a1c:	00113c23          	sd	ra,24(sp)
   36a20:	00813823          	sd	s0,16(sp)
   36a24:	00913423          	sd	s1,8(sp)
   36a28:	00050413          	addi	s0,a0,0
   36a2c:	00058493          	addi	s1,a1,0
  switch (ei_class) {
   36a30:	00100793          	addi	a5,zero,1
   36a34:	02f60063          	beq	a2,a5,36a54 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x3c>
   36a38:	00200793          	addi	a5,zero,2
   36a3c:	0af60c63          	beq	a2,a5,36af4 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0xdc>
}
   36a40:	01813083          	ld	ra,24(sp)
   36a44:	01013403          	ld	s0,16(sp)
   36a48:	00813483          	ld	s1,8(sp)
   36a4c:	02010113          	addi	sp,sp,32
   36a50:	00008067          	jalr	zero,0(ra)
   36a54:	00100793          	addi	a5,zero,1
   36a58:	06f68463          	beq	a3,a5,36ac0 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0xa8>
   36a5c:	00200793          	addi	a5,zero,2
   36a60:	fef690e3          	bne	a3,a5,36a40 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    return (T)__builtin_bswap32((std::uint32_t)v);
   36a64:	0005a503          	lw	a0,0(a1)
   36a68:	b79df0ef          	jal	ra,165e0 <__bswapsi2@plt>
  shn shnxd;           // Section table index
  Elf64::Addr value;   // Symbol value (address)
  Elf64::Xword size;   // Size of object

  template <typename E2> void from(const E2 &o) {
    name = swizzle(o.name, o.order, order);
   36a6c:	00a42023          	sw	a0,0(s0)
   36a70:	0044a503          	lw	a0,4(s1)
   36a74:	b6ddf0ef          	jal	ra,165e0 <__bswapsi2@plt>
    value = swizzle(o.value, o.order, order);
   36a78:	02051513          	slli	a0,a0,0x20
   36a7c:	02055513          	srli	a0,a0,0x20
   36a80:	00a43423          	sd	a0,8(s0)
   36a84:	0084a503          	lw	a0,8(s1)
   36a88:	b59df0ef          	jal	ra,165e0 <__bswapsi2@plt>
    size = swizzle(o.size, o.order, order);
   36a8c:	02051513          	slli	a0,a0,0x20
   36a90:	02055513          	srli	a0,a0,0x20
   36a94:	00a43823          	sd	a0,16(s0)
    info = o.info;
   36a98:	00c4c783          	lbu	a5,12(s1)
   36a9c:	00f40223          	sb	a5,4(s0)
    other = o.other;
   36aa0:	00d4c783          	lbu	a5,13(s1)
   36aa4:	00f402a3          	sb	a5,5(s0)
    shnxd = swizzle(o.shnxd, o.order, order);
   36aa8:	00e4d783          	lhu	a5,14(s1)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   36aac:	0087d71b          	srliw	a4,a5,0x8
   36ab0:	0087979b          	slliw	a5,a5,0x8
   36ab4:	00f767b3          	or	a5,a4,a5
   36ab8:	00f41323          	sh	a5,6(s0)
  }
   36abc:	f85ff06f          	jal	zero,36a40 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    name = swizzle(o.name, o.order, order);
   36ac0:	0005a783          	lw	a5,0(a1)
   36ac4:	00f52023          	sw	a5,0(a0)
    value = swizzle(o.value, o.order, order);
   36ac8:	0045e783          	lwu	a5,4(a1)
   36acc:	00f53423          	sd	a5,8(a0)
    size = swizzle(o.size, o.order, order);
   36ad0:	0085e783          	lwu	a5,8(a1)
   36ad4:	00f53823          	sd	a5,16(a0)
    info = o.info;
   36ad8:	00c5c783          	lbu	a5,12(a1)
   36adc:	00f50223          	sb	a5,4(a0)
    other = o.other;
   36ae0:	00d5c783          	lbu	a5,13(a1)
   36ae4:	00f502a3          	sb	a5,5(a0)
    shnxd = swizzle(o.shnxd, o.order, order);
   36ae8:	00e5d783          	lhu	a5,14(a1)
   36aec:	00f51323          	sh	a5,6(a0)
  }
   36af0:	f51ff06f          	jal	zero,36a40 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
   36af4:	00100793          	addi	a5,zero,1
   36af8:	04f68c63          	beq	a3,a5,36b50 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x138>
   36afc:	00200793          	addi	a5,zero,2
   36b00:	f4f690e3          	bne	a3,a5,36a40 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    return (T)__builtin_bswap32((std::uint32_t)v);
   36b04:	0005a503          	lw	a0,0(a1)
   36b08:	ad9df0ef          	jal	ra,165e0 <__bswapsi2@plt>
    name = swizzle(o.name, o.order, order);
   36b0c:	00a42023          	sw	a0,0(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   36b10:	0084b503          	ld	a0,8(s1)
   36b14:	ccddf0ef          	jal	ra,167e0 <__bswapdi2@plt>
    value = swizzle(o.value, o.order, order);
   36b18:	00a43423          	sd	a0,8(s0)
   36b1c:	0104b503          	ld	a0,16(s1)
   36b20:	cc1df0ef          	jal	ra,167e0 <__bswapdi2@plt>
    size = swizzle(o.size, o.order, order);
   36b24:	00a43823          	sd	a0,16(s0)
    info = o.info;
   36b28:	0044c783          	lbu	a5,4(s1)
   36b2c:	00f40223          	sb	a5,4(s0)
    other = o.other;
   36b30:	0054c783          	lbu	a5,5(s1)
   36b34:	00f402a3          	sb	a5,5(s0)
    shnxd = swizzle(o.shnxd, o.order, order);
   36b38:	0064d783          	lhu	a5,6(s1)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   36b3c:	0087d71b          	srliw	a4,a5,0x8
   36b40:	0087979b          	slliw	a5,a5,0x8
   36b44:	00f767b3          	or	a5,a4,a5
   36b48:	00f41323          	sh	a5,6(s0)
  }
   36b4c:	ef5ff06f          	jal	zero,36a40 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    name = swizzle(o.name, o.order, order);
   36b50:	0005a783          	lw	a5,0(a1)
   36b54:	00f52023          	sw	a5,0(a0)
    value = swizzle(o.value, o.order, order);
   36b58:	0085b783          	ld	a5,8(a1)
   36b5c:	00f53423          	sd	a5,8(a0)
    size = swizzle(o.size, o.order, order);
   36b60:	0105b783          	ld	a5,16(a1)
   36b64:	00f53823          	sd	a5,16(a0)
    info = o.info;
   36b68:	0045c783          	lbu	a5,4(a1)
   36b6c:	00f50223          	sb	a5,4(a0)
    other = o.other;
   36b70:	0055c783          	lbu	a5,5(a1)
   36b74:	00f502a3          	sb	a5,5(a0)
    shnxd = swizzle(o.shnxd, o.order, order);
   36b78:	0065d783          	lhu	a5,6(a1)
   36b7c:	00f51323          	sh	a5,6(a0)
  }
   36b80:	ec1ff06f          	jal	zero,36a40 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>

0000000000036b84 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)>:
      vector<_Tp, _Alloc>::
   36b84:	fb010113          	addi	sp,sp,-80
   36b88:	04113423          	sd	ra,72(sp)
   36b8c:	04813023          	sd	s0,64(sp)
   36b90:	02913c23          	sd	s1,56(sp)
   36b94:	03213823          	sd	s2,48(sp)
   36b98:	03313423          	sd	s3,40(sp)
   36b9c:	03413023          	sd	s4,32(sp)
   36ba0:	01513c23          	sd	s5,24(sp)
   36ba4:	01613823          	sd	s6,16(sp)
   36ba8:	01713423          	sd	s7,8(sp)
   36bac:	01813023          	sd	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   36bb0:	00853903          	ld	s2,8(a0)
   36bb4:	00053a03          	ld	s4,0(a0)
   36bb8:	414907b3          	sub	a5,s2,s4
   36bbc:	4047d793          	srai	a5,a5,0x4
	if (max_size() - size() < __n)
   36bc0:	fff00713          	addi	a4,zero,-1
   36bc4:	00575713          	srli	a4,a4,0x5
   36bc8:	04e78463          	beq	a5,a4,36c10 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x8c>
   36bcc:	00050a93          	addi	s5,a0,0
   36bd0:	00058b93          	addi	s7,a1,0
   36bd4:	00060493          	addi	s1,a2,0
   36bd8:	00058413          	addi	s0,a1,0
      return __a;
   36bdc:	00078713          	addi	a4,a5,0
      if (__a < __b)
   36be0:	03490e63          	beq	s2,s4,36c1c <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x98>
	const size_type __len = size() + (std::max)(size(), __n);
   36be4:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   36be8:	04f76263          	bltu	a4,a5,36c2c <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xa8>
   36bec:	00070b13          	addi	s6,a4,0
   36bf0:	fff00793          	addi	a5,zero,-1
   36bf4:	0057d793          	srli	a5,a5,0x5
   36bf8:	00e7f463          	bgeu	a5,a4,36c00 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x7c>
   36bfc:	00078b13          	addi	s6,a5,0
    { return __lhs.base() - __rhs.base(); }
   36c00:	414b8c33          	sub	s8,s7,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   36c04:	00000993          	addi	s3,zero,0
   36c08:	02070e63          	beq	a4,zero,36c44 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xc0>
   36c0c:	02c0006f          	jal	zero,36c38 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xb4>
	  __throw_length_error(__N(__s));
   36c10:	00001517          	auipc	a0,0x1
   36c14:	8f050513          	addi	a0,a0,-1808 # 37500 <__libc_csu_fini+0xa0>
   36c18:	a89df0ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   36c1c:	00100713          	addi	a4,zero,1
   36c20:	fc5ff06f          	jal	zero,36be4 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x60>
      _ForwardIterator __cur = __result;
   36c24:	00098693          	addi	a3,s3,0
   36c28:	0680006f          	jal	zero,36c90 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x10c>
   36c2c:	414b8c33          	sub	s8,s7,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   36c30:	fff00b13          	addi	s6,zero,-1
   36c34:	005b5b13          	srli	s6,s6,0x5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   36c38:	004b1513          	slli	a0,s6,0x4
   36c3c:	b75df0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   36c40:	00050993          	addi	s3,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   36c44:	018987b3          	add	a5,s3,s8
      : _M_ptr(__r._M_ptr), _M_refcount()
   36c48:	0004b703          	ld	a4,0(s1)
   36c4c:	00e7b023          	sd	a4,0(a5)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   36c50:	0084b703          	ld	a4,8(s1)
	__r._M_pi = _M_pi;
   36c54:	0004b423          	sd	zero,8(s1)
	_M_pi = __tmp;
   36c58:	00e7b423          	sd	a4,8(a5)
	__r._M_ptr = nullptr;
   36c5c:	0004b023          	sd	zero,0(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   36c60:	fd4402e3          	beq	s0,s4,36c24 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xa0>
   36c64:	414b86b3          	sub	a3,s7,s4
   36c68:	00d986b3          	add	a3,s3,a3
   36c6c:	000a0713          	addi	a4,s4,0
      _ForwardIterator __cur = __result;
   36c70:	00098793          	addi	a5,s3,0
      : _M_ptr(__r._M_ptr), _M_refcount()
   36c74:	00073603          	ld	a2,0(a4)
   36c78:	00c7b023          	sd	a2,0(a5)
	_M_pi = __tmp;
   36c7c:	00873603          	ld	a2,8(a4)
   36c80:	00c7b423          	sd	a2,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   36c84:	01070713          	addi	a4,a4,16
   36c88:	01078793          	addi	a5,a5,16
   36c8c:	fed794e3          	bne	a5,a3,36c74 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xf0>
	      ++__new_finish;
   36c90:	01068493          	addi	s1,a3,16
   36c94:	03240663          	beq	s0,s2,36cc0 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x13c>
   36c98:	41790bb3          	sub	s7,s2,s7
      _ForwardIterator __cur = __result;
   36c9c:	00048793          	addi	a5,s1,0
      : _M_ptr(__r._M_ptr), _M_refcount()
   36ca0:	00043703          	ld	a4,0(s0)
   36ca4:	00e7b023          	sd	a4,0(a5)
	_M_pi = __tmp;
   36ca8:	00843703          	ld	a4,8(s0)
   36cac:	00e7b423          	sd	a4,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   36cb0:	01040413          	addi	s0,s0,16
   36cb4:	01078793          	addi	a5,a5,16
   36cb8:	ff2414e3          	bne	s0,s2,36ca0 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x11c>
   36cbc:	017484b3          	add	s1,s1,s7
	if (__p)
   36cc0:	000a0663          	beq	s4,zero,36ccc <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x148>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   36cc4:	000a0513          	addi	a0,s4,0
   36cc8:	ad9df0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   36ccc:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   36cd0:	009ab423          	sd	s1,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   36cd4:	004b1b13          	slli	s6,s6,0x4
   36cd8:	016989b3          	add	s3,s3,s6
   36cdc:	013ab823          	sd	s3,16(s5)
    }
   36ce0:	04813083          	ld	ra,72(sp)
   36ce4:	04013403          	ld	s0,64(sp)
   36ce8:	03813483          	ld	s1,56(sp)
   36cec:	03013903          	ld	s2,48(sp)
   36cf0:	02813983          	ld	s3,40(sp)
   36cf4:	02013a03          	ld	s4,32(sp)
   36cf8:	01813a83          	ld	s5,24(sp)
   36cfc:	01013b03          	ld	s6,16(sp)
   36d00:	00813b83          	ld	s7,8(sp)
   36d04:	00013c03          	ld	s8,0(sp)
   36d08:	05010113          	addi	sp,sp,80
   36d0c:	00008067          	jalr	zero,0(ra)

0000000000036d10 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)>:
      vector<_Tp, _Alloc>::
   36d10:	fb010113          	addi	sp,sp,-80
   36d14:	04113423          	sd	ra,72(sp)
   36d18:	04813023          	sd	s0,64(sp)
   36d1c:	02913c23          	sd	s1,56(sp)
   36d20:	03213823          	sd	s2,48(sp)
   36d24:	03313423          	sd	s3,40(sp)
   36d28:	03413023          	sd	s4,32(sp)
   36d2c:	01513c23          	sd	s5,24(sp)
   36d30:	01613823          	sd	s6,16(sp)
   36d34:	01713423          	sd	s7,8(sp)
   36d38:	01813023          	sd	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   36d3c:	00853903          	ld	s2,8(a0)
   36d40:	00053a03          	ld	s4,0(a0)
   36d44:	414907b3          	sub	a5,s2,s4
   36d48:	4047d793          	srai	a5,a5,0x4
	if (max_size() - size() < __n)
   36d4c:	fff00713          	addi	a4,zero,-1
   36d50:	00575713          	srli	a4,a4,0x5
   36d54:	04e78463          	beq	a5,a4,36d9c <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x8c>
   36d58:	00050a93          	addi	s5,a0,0
   36d5c:	00058b93          	addi	s7,a1,0
   36d60:	00060493          	addi	s1,a2,0
   36d64:	00058413          	addi	s0,a1,0
      return __a;
   36d68:	00078713          	addi	a4,a5,0
      if (__a < __b)
   36d6c:	03490e63          	beq	s2,s4,36da8 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x98>
	const size_type __len = size() + (std::max)(size(), __n);
   36d70:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   36d74:	04f76263          	bltu	a4,a5,36db8 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xa8>
   36d78:	00070b13          	addi	s6,a4,0
   36d7c:	fff00793          	addi	a5,zero,-1
   36d80:	0057d793          	srli	a5,a5,0x5
   36d84:	00e7f463          	bgeu	a5,a4,36d8c <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x7c>
   36d88:	00078b13          	addi	s6,a5,0
   36d8c:	414b8c33          	sub	s8,s7,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   36d90:	00000993          	addi	s3,zero,0
   36d94:	02070e63          	beq	a4,zero,36dd0 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xc0>
   36d98:	02c0006f          	jal	zero,36dc4 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xb4>
	  __throw_length_error(__N(__s));
   36d9c:	00000517          	auipc	a0,0x0
   36da0:	76450513          	addi	a0,a0,1892 # 37500 <__libc_csu_fini+0xa0>
   36da4:	8fddf0ef          	jal	ra,166a0 <std::__throw_length_error(char const*)@plt>
	return __b;
   36da8:	00100713          	addi	a4,zero,1
   36dac:	fc5ff06f          	jal	zero,36d70 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x60>
      _ForwardIterator __cur = __result;
   36db0:	00098693          	addi	a3,s3,0
   36db4:	0680006f          	jal	zero,36e1c <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x10c>
   36db8:	414b8c33          	sub	s8,s7,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   36dbc:	fff00b13          	addi	s6,zero,-1
   36dc0:	005b5b13          	srli	s6,s6,0x5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   36dc4:	004b1513          	slli	a0,s6,0x4
   36dc8:	9e9df0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   36dcc:	00050993          	addi	s3,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   36dd0:	018987b3          	add	a5,s3,s8
      : _M_ptr(__r._M_ptr), _M_refcount()
   36dd4:	0004b703          	ld	a4,0(s1)
   36dd8:	00e7b023          	sd	a4,0(a5)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   36ddc:	0084b703          	ld	a4,8(s1)
	__r._M_pi = _M_pi;
   36de0:	0004b423          	sd	zero,8(s1)
	_M_pi = __tmp;
   36de4:	00e7b423          	sd	a4,8(a5)
	__r._M_ptr = nullptr;
   36de8:	0004b023          	sd	zero,0(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   36dec:	fd4402e3          	beq	s0,s4,36db0 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xa0>
   36df0:	414b86b3          	sub	a3,s7,s4
   36df4:	00d986b3          	add	a3,s3,a3
   36df8:	000a0713          	addi	a4,s4,0
      _ForwardIterator __cur = __result;
   36dfc:	00098793          	addi	a5,s3,0
      : _M_ptr(__r._M_ptr), _M_refcount()
   36e00:	00073603          	ld	a2,0(a4)
   36e04:	00c7b023          	sd	a2,0(a5)
	_M_pi = __tmp;
   36e08:	00873603          	ld	a2,8(a4)
   36e0c:	00c7b423          	sd	a2,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   36e10:	01070713          	addi	a4,a4,16
   36e14:	01078793          	addi	a5,a5,16
   36e18:	fed794e3          	bne	a5,a3,36e00 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xf0>
	      ++__new_finish;
   36e1c:	01068493          	addi	s1,a3,16
   36e20:	03240663          	beq	s0,s2,36e4c <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x13c>
   36e24:	41790bb3          	sub	s7,s2,s7
      _ForwardIterator __cur = __result;
   36e28:	00048793          	addi	a5,s1,0
      : _M_ptr(__r._M_ptr), _M_refcount()
   36e2c:	00043703          	ld	a4,0(s0)
   36e30:	00e7b023          	sd	a4,0(a5)
	_M_pi = __tmp;
   36e34:	00843703          	ld	a4,8(s0)
   36e38:	00e7b423          	sd	a4,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   36e3c:	01040413          	addi	s0,s0,16
   36e40:	01078793          	addi	a5,a5,16
   36e44:	ff2414e3          	bne	s0,s2,36e2c <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x11c>
   36e48:	017484b3          	add	s1,s1,s7
	if (__p)
   36e4c:	000a0663          	beq	s4,zero,36e58 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x148>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   36e50:	000a0513          	addi	a0,s4,0
   36e54:	94ddf0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   36e58:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   36e5c:	009ab423          	sd	s1,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   36e60:	004b1b13          	slli	s6,s6,0x4
   36e64:	016989b3          	add	s3,s3,s6
   36e68:	013ab823          	sd	s3,16(s5)
    }
   36e6c:	04813083          	ld	ra,72(sp)
   36e70:	04013403          	ld	s0,64(sp)
   36e74:	03813483          	ld	s1,56(sp)
   36e78:	03013903          	ld	s2,48(sp)
   36e7c:	02813983          	ld	s3,40(sp)
   36e80:	02013a03          	ld	s4,32(sp)
   36e84:	01813a83          	ld	s5,24(sp)
   36e88:	01013b03          	ld	s6,16(sp)
   36e8c:	00813b83          	ld	s7,8(sp)
   36e90:	00013c03          	ld	s8,0(sp)
   36e94:	05010113          	addi	sp,sp,80
   36e98:	00008067          	jalr	zero,0(ra)

0000000000036e9c <elf::create_mmap_loader(int)>:
      throw range_error("offset exceeds file size");
    return (const char *)base + offset;
  }
};

std::shared_ptr<loader> create_mmap_loader(int fd) {
   36e9c:	fb010113          	addi	sp,sp,-80
   36ea0:	04113423          	sd	ra,72(sp)
   36ea4:	04813023          	sd	s0,64(sp)
   36ea8:	02913c23          	sd	s1,56(sp)
   36eac:	03213823          	sd	s2,48(sp)
   36eb0:	03313423          	sd	s3,40(sp)
   36eb4:	00050913          	addi	s2,a0,0
   36eb8:	00058493          	addi	s1,a1,0
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   36ebc:	05000513          	addi	a0,zero,80
   36ec0:	8f1df0ef          	jal	ra,167b0 <operator new(unsigned long)@plt>
   36ec4:	00050413          	addi	s0,a0,0
   36ec8:	00052423          	sw	zero,8(a0)
   36ecc:	00052623          	sw	zero,12(a0)
   36ed0:	00052823          	sw	zero,16(a0)
   36ed4:	00052a23          	sw	zero,20(a0)
   36ed8:	00052c23          	sw	zero,24(a0)
   36edc:	00052e23          	sw	zero,28(a0)
   36ee0:	02053023          	sd	zero,32(a0)
   36ee4:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   36ee8:	00100793          	addi	a5,zero,1
   36eec:	02f52823          	sw	a5,48(a0)
   36ef0:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   36ef4:	0000c797          	auipc	a5,0xc
   36ef8:	5d47b783          	ld	a5,1492(a5) # 434c8 <vtable for std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x710>
   36efc:	01078793          	addi	a5,a5,16
   36f00:	00f53023          	sd	a5,0(a0)
   36f04:	03850993          	addi	s3,a0,56
  mmap_loader(int fd) {
   36f08:	0000c797          	auipc	a5,0xc
   36f0c:	5707b783          	ld	a5,1392(a5) # 43478 <vtable for elf::mmap_loader@@Base+0x6e8>
   36f10:	01078793          	addi	a5,a5,16
   36f14:	02f53c23          	sd	a5,56(a0)
    off_t end = lseek(fd, 0, SEEK_END);
   36f18:	00200613          	addi	a2,zero,2
   36f1c:	00000593          	addi	a1,zero,0
   36f20:	00048513          	addi	a0,s1,0
   36f24:	9eddf0ef          	jal	ra,16910 <lseek@plt>
    if (end == (off_t)-1)
   36f28:	fff00793          	addi	a5,zero,-1
   36f2c:	02f50e63          	beq	a0,a5,36f68 <elf::create_mmap_loader(int)+0xcc>
   36f30:	00050593          	addi	a1,a0,0
    lim = end;
   36f34:	04a43423          	sd	a0,72(s0)
    base = mmap(nullptr, lim, PROT_READ, MAP_SHARED, fd, 0);
   36f38:	00000793          	addi	a5,zero,0
   36f3c:	00048713          	addi	a4,s1,0
   36f40:	00100693          	addi	a3,zero,1
   36f44:	00100613          	addi	a2,zero,1
   36f48:	00000513          	addi	a0,zero,0
   36f4c:	fd4df0ef          	jal	ra,16720 <mmap@plt>
   36f50:	04a43023          	sd	a0,64(s0)
    if (base == MAP_FAILED)
   36f54:	fff00793          	addi	a5,zero,-1
   36f58:	06f50663          	beq	a0,a5,36fc4 <elf::create_mmap_loader(int)+0x128>
    close(fd);
   36f5c:	00048513          	addi	a0,s1,0
   36f60:	b11df0ef          	jal	ra,16a70 <close@plt>
   36f64:	0e00006f          	jal	zero,37044 <elf::create_mmap_loader(int)+0x1a8>
      throw system_error(errno, system_category(), "finding file length");
   36f68:	02000513          	addi	a0,zero,32
   36f6c:	f24df0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   36f70:	00050913          	addi	s2,a0,0
   36f74:	aeddf0ef          	jal	ra,16a60 <__errno_location@plt>
   36f78:	00052483          	lw	s1,0(a0)
   36f7c:	f44df0ef          	jal	ra,166c0 <std::_V2::system_category()@plt>
   36f80:	00050613          	addi	a2,a0,0
  public:
    error_code() noexcept
    : _M_value(0), _M_cat(&system_category()) { }

    error_code(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }
   36f84:	00912823          	sw	s1,16(sp)

    system_error(error_code __ec, const char* __what)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }

    system_error(int __v, const error_category& __ecat, const char* __what)
    : system_error(error_code(__v, __ecat), __what) { }
   36f88:	00004697          	auipc	a3,0x4
   36f8c:	63068693          	addi	a3,a3,1584 # 3b5b8 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x80>
   36f90:	01013583          	ld	a1,16(sp)
   36f94:	00090513          	addi	a0,s2,0
   36f98:	0000c317          	auipc	t1,0xc
   36f9c:	4b033303          	ld	t1,1200(t1) # 43448 <std::system_error::system_error(std::error_code, char const*)@@Base+0xc238>
   36fa0:	000300e7          	jalr	ra,0(t1)
   36fa4:	0000c617          	auipc	a2,0xc
   36fa8:	49463603          	ld	a2,1172(a2) # 43438 <std::system_error::~system_error()@GLIBCXX_3.4.11>
   36fac:	0000c597          	auipc	a1,0xc
   36fb0:	35c5b583          	ld	a1,860(a1) # 43308 <typeinfo for std::system_error@GLIBCXX_3.4.11>
   36fb4:	00090513          	addi	a0,s2,0
   36fb8:	9a9df0ef          	jal	ra,16960 <__cxa_throw@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   36fbc:	00050493          	addi	s1,a0,0
   36fc0:	0640006f          	jal	zero,37024 <elf::create_mmap_loader(int)+0x188>
      throw system_error(errno, system_category(), "mmap'ing file");
   36fc4:	02000513          	addi	a0,zero,32
   36fc8:	ec8df0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   36fcc:	00050913          	addi	s2,a0,0
   36fd0:	a91df0ef          	jal	ra,16a60 <__errno_location@plt>
   36fd4:	00052483          	lw	s1,0(a0)
   36fd8:	ee8df0ef          	jal	ra,166c0 <std::_V2::system_category()@plt>
   36fdc:	00050613          	addi	a2,a0,0
    : _M_value(__v), _M_cat(&__cat) { }
   36fe0:	00912023          	sw	s1,0(sp)
    : system_error(error_code(__v, __ecat), __what) { }
   36fe4:	00004697          	auipc	a3,0x4
   36fe8:	5ec68693          	addi	a3,a3,1516 # 3b5d0 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x98>
   36fec:	00013583          	ld	a1,0(sp)
   36ff0:	00090513          	addi	a0,s2,0
   36ff4:	0000c317          	auipc	t1,0xc
   36ff8:	45433303          	ld	t1,1108(t1) # 43448 <std::system_error::system_error(std::error_code, char const*)@@Base+0xc238>
   36ffc:	000300e7          	jalr	ra,0(t1)
   37000:	0000c617          	auipc	a2,0xc
   37004:	43863603          	ld	a2,1080(a2) # 43438 <std::system_error::~system_error()@GLIBCXX_3.4.11>
   37008:	0000c597          	auipc	a1,0xc
   3700c:	3005b583          	ld	a1,768(a1) # 43308 <typeinfo for std::system_error@GLIBCXX_3.4.11>
   37010:	00090513          	addi	a0,s2,0
   37014:	94ddf0ef          	jal	ra,16960 <__cxa_throw@plt>
      throw system_error(errno, system_category(), "finding file length");
   37018:	00050493          	addi	s1,a0,0
   3701c:	00090513          	addi	a0,s2,0
   37020:	f30df0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   37024:	00040513          	addi	a0,s0,0
   37028:	f78df0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   3702c:	00048513          	addi	a0,s1,0
   37030:	961df0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      throw system_error(errno, system_category(), "mmap'ing file");
   37034:	00050493          	addi	s1,a0,0
   37038:	00090513          	addi	a0,s2,0
   3703c:	f14df0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   37040:	fe5ff06f          	jal	zero,37024 <elf::create_mmap_loader(int)+0x188>
	: _M_ptr(__r._M_ptr), _M_refcount()
   37044:	01393023          	sd	s3,0(s2)
	_M_pi = __tmp;
   37048:	00893423          	sd	s0,8(s2)
  return make_shared<mmap_loader>(fd);
}
   3704c:	00090513          	addi	a0,s2,0
   37050:	04813083          	ld	ra,72(sp)
   37054:	04013403          	ld	s0,64(sp)
   37058:	03813483          	ld	s1,56(sp)
   3705c:	03013903          	ld	s2,48(sp)
   37060:	02813983          	ld	s3,40(sp)
   37064:	05010113          	addi	sp,sp,80
   37068:	00008067          	jalr	zero,0(ra)

000000000003706c <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   3706c:	00008067          	jalr	zero,0(ra)

0000000000037070 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   37070:	ff010113          	addi	sp,sp,-16
   37074:	00113423          	sd	ra,8(sp)
      __pointer->~_Tp();
   37078:	03853783          	ld	a5,56(a0)
   3707c:	0007b783          	ld	a5,0(a5)
   37080:	03850513          	addi	a0,a0,56
   37084:	000780e7          	jalr	ra,0(a5)
      }
   37088:	00813083          	ld	ra,8(sp)
   3708c:	01010113          	addi	sp,sp,16
   37090:	00008067          	jalr	zero,0(ra)

0000000000037094 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   37094:	ff010113          	addi	sp,sp,-16
   37098:	00113423          	sd	ra,8(sp)
   3709c:	00813023          	sd	s0,0(sp)
   370a0:	03850413          	addi	s0,a0,56
	    ||
   370a4:	0000c797          	auipc	a5,0xc
   370a8:	4ac7b783          	ld	a5,1196(a5) # 43550 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbdd0>
   370ac:	02f58c63          	beq	a1,a5,370e4 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   370b0:	0085b503          	ld	a0,8(a1)
   370b4:	0000c797          	auipc	a5,0xc
   370b8:	3747b783          	ld	a5,884(a5) # 43428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbe98>
   370bc:	02f50463          	beq	a0,a5,370e4 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   370c0:	00054703          	lbu	a4,0(a0)
   370c4:	02a00793          	addi	a5,zero,42
   370c8:	02f70863          	beq	a4,a5,370f8 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   370cc:	0000c597          	auipc	a1,0xc
   370d0:	35c5b583          	ld	a1,860(a1) # 43428 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbe98>
   370d4:	cfcdf0ef          	jal	ra,165d0 <strcmp@plt>
	return nullptr;
   370d8:	00153513          	sltiu	a0,a0,1
   370dc:	40a00533          	sub	a0,zero,a0
   370e0:	00a47433          	and	s0,s0,a0
      }
   370e4:	00040513          	addi	a0,s0,0
   370e8:	00813083          	ld	ra,8(sp)
   370ec:	00013403          	ld	s0,0(sp)
   370f0:	01010113          	addi	sp,sp,16
   370f4:	00008067          	jalr	zero,0(ra)
	return nullptr;
   370f8:	00000413          	addi	s0,zero,0
   370fc:	fe9ff06f          	jal	zero,370e4 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

0000000000037100 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   37100:	ff010113          	addi	sp,sp,-16
   37104:	00113423          	sd	ra,8(sp)
   37108:	e98df0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   3710c:	00813083          	ld	ra,8(sp)
   37110:	01010113          	addi	sp,sp,16
   37114:	00008067          	jalr	zero,0(ra)

0000000000037118 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   37118:	ff010113          	addi	sp,sp,-16
   3711c:	00113423          	sd	ra,8(sp)
   37120:	e80df0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      }
   37124:	00813083          	ld	ra,8(sp)
   37128:	01010113          	addi	sp,sp,16
   3712c:	00008067          	jalr	zero,0(ra)

0000000000037130 <elf::mmap_loader::load(long, unsigned long)>:
    if (offset + size > lim)
   37130:	00c58633          	add	a2,a1,a2
   37134:	01053783          	ld	a5,16(a0)
   37138:	00c7e863          	bltu	a5,a2,37148 <elf::mmap_loader::load(long, unsigned long)+0x18>
    return (const char *)base + offset;
   3713c:	00853503          	ld	a0,8(a0)
   37140:	00b50533          	add	a0,a0,a1
  }
   37144:	00008067          	jalr	zero,0(ra)
  const void *load(off_t offset, size_t size) {
   37148:	fe010113          	addi	sp,sp,-32
   3714c:	00113c23          	sd	ra,24(sp)
   37150:	00813823          	sd	s0,16(sp)
   37154:	00913423          	sd	s1,8(sp)
      throw range_error("offset exceeds file size");
   37158:	01000513          	addi	a0,zero,16
   3715c:	d34df0ef          	jal	ra,16690 <__cxa_allocate_exception@plt>
   37160:	00050493          	addi	s1,a0,0
   37164:	00004597          	auipc	a1,0x4
   37168:	42c58593          	addi	a1,a1,1068 # 3b590 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x58>
   3716c:	805df0ef          	jal	ra,16970 <std::range_error::range_error(char const*)@plt>
   37170:	0000c617          	auipc	a2,0xc
   37174:	28863603          	ld	a2,648(a2) # 433f8 <std::range_error::~range_error()@GLIBCXX_3.4>
   37178:	0000c597          	auipc	a1,0xc
   3717c:	3f05b583          	ld	a1,1008(a1) # 43568 <typeinfo for std::range_error@GLIBCXX_3.4>
   37180:	00048513          	addi	a0,s1,0
   37184:	fdcdf0ef          	jal	ra,16960 <__cxa_throw@plt>
   37188:	00050413          	addi	s0,a0,0
   3718c:	00048513          	addi	a0,s1,0
   37190:	dc0df0ef          	jal	ra,16750 <__cxa_free_exception@plt>
   37194:	00040513          	addi	a0,s0,0
   37198:	ff8df0ef          	jal	ra,16990 <_Unwind_Resume@plt>

000000000003719c <elf::mmap_loader::~mmap_loader()>:
  ~mmap_loader() { munmap(base, lim); }
   3719c:	ff010113          	addi	sp,sp,-16
   371a0:	00113423          	sd	ra,8(sp)
   371a4:	0000c797          	auipc	a5,0xc
   371a8:	2d47b783          	ld	a5,724(a5) # 43478 <vtable for elf::mmap_loader@@Base+0x6e8>
   371ac:	01078793          	addi	a5,a5,16
   371b0:	00f53023          	sd	a5,0(a0)
   371b4:	01053583          	ld	a1,16(a0)
   371b8:	00853503          	ld	a0,8(a0)
   371bc:	db4df0ef          	jal	ra,16770 <munmap@plt>
   371c0:	00813083          	ld	ra,8(sp)
   371c4:	01010113          	addi	sp,sp,16
   371c8:	00008067          	jalr	zero,0(ra)

00000000000371cc <elf::mmap_loader::~mmap_loader()>:
   371cc:	ff010113          	addi	sp,sp,-16
   371d0:	00113423          	sd	ra,8(sp)
   371d4:	00813023          	sd	s0,0(sp)
   371d8:	00050413          	addi	s0,a0,0
   371dc:	0000c797          	auipc	a5,0xc
   371e0:	29c7b783          	ld	a5,668(a5) # 43478 <vtable for elf::mmap_loader@@Base+0x6e8>
   371e4:	01078793          	addi	a5,a5,16
   371e8:	00f53023          	sd	a5,0(a0)
   371ec:	01053583          	ld	a1,16(a0)
   371f0:	00853503          	ld	a0,8(a0)
   371f4:	d7cdf0ef          	jal	ra,16770 <munmap@plt>
   371f8:	00040513          	addi	a0,s0,0
   371fc:	da4df0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   37200:	00813083          	ld	ra,8(sp)
   37204:	00013403          	ld	s0,0(sp)
   37208:	01010113          	addi	sp,sp,16
   3720c:	00008067          	jalr	zero,0(ra)

0000000000037210 <std::system_error::system_error(std::error_code, char const*)>:
    system_error(error_code __ec, const char* __what)
   37210:	f6010113          	addi	sp,sp,-160
   37214:	08113c23          	sd	ra,152(sp)
   37218:	08813823          	sd	s0,144(sp)
   3721c:	08913423          	sd	s1,136(sp)
   37220:	09213023          	sd	s2,128(sp)
   37224:	07313c23          	sd	s3,120(sp)
   37228:	00050493          	addi	s1,a0,0
   3722c:	00058713          	addi	a4,a1,0
   37230:	00b13023          	sd	a1,0(sp)
   37234:	00c13423          	sd	a2,8(sp)
   37238:	00068913          	addi	s2,a3,0
    category() const noexcept { return *_M_cat; }
   3723c:	00060593          	addi	a1,a2,0
    { return category().message(value()); }
   37240:	00063783          	ld	a5,0(a2)
   37244:	0207b783          	ld	a5,32(a5)
   37248:	0007061b          	addiw	a2,a4,0
   3724c:	05010413          	addi	s0,sp,80
   37250:	00040513          	addi	a0,s0,0
   37254:	000780e7          	jalr	ra,0(a5)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   37258:	00200713          	addi	a4,zero,2
   3725c:	00004697          	auipc	a3,0x4
   37260:	35468693          	addi	a3,a3,852 # 3b5b0 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x78>
   37264:	00000613          	addi	a2,zero,0
   37268:	00000593          	addi	a1,zero,0
   3726c:	00040513          	addi	a0,s0,0
   37270:	e90df0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   37274:	00050413          	addi	s0,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   37278:	04010793          	addi	a5,sp,64
   3727c:	02f13823          	sd	a5,48(sp)
      { return _M_dataplus._M_p; }
   37280:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   37284:	01050993          	addi	s3,a0,16
	if (__str._M_is_local())
   37288:	05378463          	beq	a5,s3,372d0 <std::system_error::system_error(std::error_code, char const*)+0xc0>
      { _M_dataplus._M_p = __p; }
   3728c:	02f13823          	sd	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   37290:	01053783          	ld	a5,16(a0)
   37294:	04f13023          	sd	a5,64(sp)
      { _M_string_length = __length; }
   37298:	00843783          	ld	a5,8(s0)
   3729c:	02f13c23          	sd	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   372a0:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   372a4:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   372a8:	00040823          	sb	zero,16(s0)
	return __builtin_strlen(__s);
   372ac:	00090513          	addi	a0,s2,0
   372b0:	bd0df0ef          	jal	ra,16680 <strlen@plt>
   372b4:	00050713          	addi	a4,a0,0
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   372b8:	00090693          	addi	a3,s2,0
   372bc:	00000613          	addi	a2,zero,0
   372c0:	00000593          	addi	a1,zero,0
   372c4:	03010513          	addi	a0,sp,48
   372c8:	e38df0ef          	jal	ra,16900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   372cc:	0200006f          	jal	zero,372ec <std::system_error::system_error(std::error_code, char const*)+0xdc>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   372d0:	00853603          	ld	a2,8(a0)
   372d4:	00160613          	addi	a2,a2,1
	if (__n == 0)
   372d8:	fc0600e3          	beq	a2,zero,37298 <std::system_error::system_error(std::error_code, char const*)+0x88>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   372dc:	00098593          	addi	a1,s3,0
   372e0:	04010513          	addi	a0,sp,64
   372e4:	d5cdf0ef          	jal	ra,16840 <memcpy@plt>
   372e8:	fb1ff06f          	jal	zero,37298 <std::system_error::system_error(std::error_code, char const*)+0x88>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   372ec:	00050413          	addi	s0,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   372f0:	02010793          	addi	a5,sp,32
   372f4:	00f13823          	sd	a5,16(sp)
      { return _M_dataplus._M_p; }
   372f8:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   372fc:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   37300:	03278a63          	beq	a5,s2,37334 <std::system_error::system_error(std::error_code, char const*)+0x124>
      { _M_dataplus._M_p = __p; }
   37304:	00f13823          	sd	a5,16(sp)
      { _M_allocated_capacity = __capacity; }
   37308:	01053783          	ld	a5,16(a0)
   3730c:	02f13023          	sd	a5,32(sp)
      { _M_string_length = __length; }
   37310:	00843783          	ld	a5,8(s0)
   37314:	00f13c23          	sd	a5,24(sp)
      { _M_dataplus._M_p = __p; }
   37318:	01243023          	sd	s2,0(s0)
      { _M_string_length = __length; }
   3731c:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   37320:	00040823          	sb	zero,16(s0)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }
   37324:	01010593          	addi	a1,sp,16
   37328:	00048513          	addi	a0,s1,0
   3732c:	d04df0ef          	jal	ra,16830 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   37330:	0200006f          	jal	zero,37350 <std::system_error::system_error(std::error_code, char const*)+0x140>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   37334:	00853603          	ld	a2,8(a0)
   37338:	00160613          	addi	a2,a2,1
	if (__n == 0)
   3733c:	fc060ae3          	beq	a2,zero,37310 <std::system_error::system_error(std::error_code, char const*)+0x100>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   37340:	00090593          	addi	a1,s2,0
   37344:	02010513          	addi	a0,sp,32
   37348:	cf8df0ef          	jal	ra,16840 <memcpy@plt>
   3734c:	fc5ff06f          	jal	zero,37310 <std::system_error::system_error(std::error_code, char const*)+0x100>
      { return _M_dataplus._M_p; }
   37350:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   37354:	02010793          	addi	a5,sp,32
   37358:	00f50463          	beq	a0,a5,37360 <std::system_error::system_error(std::error_code, char const*)+0x150>
   3735c:	c44df0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   37360:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   37364:	04010793          	addi	a5,sp,64
   37368:	00f50463          	beq	a0,a5,37370 <std::system_error::system_error(std::error_code, char const*)+0x160>
   3736c:	c34df0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   37370:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   37374:	06010793          	addi	a5,sp,96
   37378:	00f50463          	beq	a0,a5,37380 <std::system_error::system_error(std::error_code, char const*)+0x170>
   3737c:	c24df0ef          	jal	ra,167a0 <operator delete(void*)@plt>
   37380:	0000c797          	auipc	a5,0xc
   37384:	2207b783          	ld	a5,544(a5) # 435a0 <vtable for std::system_error@GLIBCXX_3.4.11>
   37388:	01078793          	addi	a5,a5,16
   3738c:	00f4b023          	sd	a5,0(s1)
   37390:	00013783          	ld	a5,0(sp)
   37394:	00f4b823          	sd	a5,16(s1)
   37398:	00813783          	ld	a5,8(sp)
   3739c:	00f4bc23          	sd	a5,24(s1)
   373a0:	09813083          	ld	ra,152(sp)
   373a4:	09013403          	ld	s0,144(sp)
   373a8:	08813483          	ld	s1,136(sp)
   373ac:	08013903          	ld	s2,128(sp)
   373b0:	07813983          	ld	s3,120(sp)
   373b4:	0a010113          	addi	sp,sp,160
   373b8:	00008067          	jalr	zero,0(ra)
      { return _M_dataplus._M_p; }
   373bc:	00050413          	addi	s0,a0,0
   373c0:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   373c4:	02010793          	addi	a5,sp,32
   373c8:	00f50463          	beq	a0,a5,373d0 <std::system_error::system_error(std::error_code, char const*)+0x1c0>
   373cc:	bd4df0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   373d0:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   373d4:	04010793          	addi	a5,sp,64
   373d8:	00f50463          	beq	a0,a5,373e0 <std::system_error::system_error(std::error_code, char const*)+0x1d0>
   373dc:	bc4df0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   373e0:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   373e4:	06010793          	addi	a5,sp,96
   373e8:	00f50463          	beq	a0,a5,373f0 <std::system_error::system_error(std::error_code, char const*)+0x1e0>
   373ec:	bb4df0ef          	jal	ra,167a0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   373f0:	00040513          	addi	a0,s0,0
   373f4:	d9cdf0ef          	jal	ra,16990 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   373f8:	00050413          	addi	s0,a0,0
   373fc:	fd5ff06f          	jal	zero,373d0 <std::system_error::system_error(std::error_code, char const*)+0x1c0>
   37400:	00050413          	addi	s0,a0,0
   37404:	fddff06f          	jal	zero,373e0 <std::system_error::system_error(std::error_code, char const*)+0x1d0>

0000000000037408 <__libc_csu_init>:
   the libc.a module in that it doesn't call the preinit array.  */


void
__libc_csu_init (int argc, char **argv, char **envp)
{
   37408:	7139                	c.addi16sp	sp,-64
   3740a:	f822                	c.sdsp	s0,48(sp)
   3740c:	f04a                	c.sdsp	s2,32(sp)

#if ELF_INITFINI
  _init ();
#endif

  const size_t size = __init_array_end - __init_array_start;
   3740e:	0000b797          	auipc	a5,0xb
   37412:	27278793          	addi	a5,a5,626 # 42680 <__do_global_dtors_aux_fini_array_entry>
   37416:	0000b417          	auipc	s0,0xb
   3741a:	25a40413          	addi	s0,s0,602 # 42670 <__frame_dummy_init_array_entry>
{
   3741e:	fc06                	c.sdsp	ra,56(sp)
   37420:	f426                	c.sdsp	s1,40(sp)
   37422:	ec4e                	c.sdsp	s3,24(sp)
   37424:	e852                	c.sdsp	s4,16(sp)
   37426:	e456                	c.sdsp	s5,8(sp)
  const size_t size = __init_array_end - __init_array_start;
   37428:	40878933          	sub	s2,a5,s0
  for (size_t i = 0; i < size; i++)
   3742c:	02878163          	beq	a5,s0,3744e <__libc_csu_init+0x46>
   37430:	89aa                	c.mv	s3,a0
   37432:	8a2e                	c.mv	s4,a1
   37434:	8ab2                	c.mv	s5,a2
   37436:	40395913          	srai	s2,s2,0x3
   3743a:	4481                	c.li	s1,0
      (*__init_array_start [i]) (argc, argv, envp);
   3743c:	601c                	c.ld	a5,0(s0)
   3743e:	8656                	c.mv	a2,s5
   37440:	85d2                	c.mv	a1,s4
   37442:	854e                	c.mv	a0,s3
  for (size_t i = 0; i < size; i++)
   37444:	0485                	c.addi	s1,1
      (*__init_array_start [i]) (argc, argv, envp);
   37446:	9782                	c.jalr	a5
  for (size_t i = 0; i < size; i++)
   37448:	0421                	c.addi	s0,8
   3744a:	ff24e9e3          	bltu	s1,s2,3743c <__libc_csu_init+0x34>
}
   3744e:	70e2                	c.ldsp	ra,56(sp)
   37450:	7442                	c.ldsp	s0,48(sp)
   37452:	74a2                	c.ldsp	s1,40(sp)
   37454:	7902                	c.ldsp	s2,32(sp)
   37456:	69e2                	c.ldsp	s3,24(sp)
   37458:	6a42                	c.ldsp	s4,16(sp)
   3745a:	6aa2                	c.ldsp	s5,8(sp)
   3745c:	6121                	c.addi16sp	sp,64
   3745e:	8082                	c.jr	ra

0000000000037460 <__libc_csu_fini>:

# if ELF_INITFINI
  _fini ();
# endif
#endif
}
   37460:	8082                	c.jr	ra
