
dump-tree:     file format elf64-littleriscv


Disassembly of section .plt:

00000000000162c0 <_PROCEDURE_LINKAGE_TABLE_>:
   162c0:	97 c3 02 00 33 03 c3 41 03 be 83 d5 13 03 43 fd     ....3..A......C.
   162d0:	93 82 83 d5 13 53 13 00 83 b2 82 00 67 00 0e 00     .....S......g...

00000000000162e0 <operator new[](unsigned long)@plt>:
   162e0:	0002ce17          	auipc	t3,0x2c
   162e4:	d48e3e03          	ld	t3,-696(t3) # 42028 <operator new[](unsigned long)@GLIBCXX_3.4>
   162e8:	000e0367          	jalr	t1,0(t3)
   162ec:	00000013          	addi	zero,zero,0

00000000000162f0 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt>:
   162f0:	0002ce17          	auipc	t3,0x2c
   162f4:	d40e3e03          	ld	t3,-704(t3) # 42030 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@GLIBCXX_3.4>
   162f8:	000e0367          	jalr	t1,0(t3)
   162fc:	00000013          	addi	zero,zero,0

0000000000016300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>:
   16300:	0002ce17          	auipc	t3,0x2c
   16304:	d38e3e03          	ld	t3,-712(t3) # 42038 <__gnu_cxx::__atomic_add(int volatile*, int)@GLIBCXX_3.4>
   16308:	000e0367          	jalr	t1,0(t3)
   1630c:	00000013          	addi	zero,zero,0

0000000000016310 <strcmp@plt>:
   16310:	0002ce17          	auipc	t3,0x2c
   16314:	d30e3e03          	ld	t3,-720(t3) # 42040 <strcmp@GLIBC_2.27>
   16318:	000e0367          	jalr	t1,0(t3)
   1631c:	00000013          	addi	zero,zero,0

0000000000016320 <__bswapsi2@plt>:
   16320:	0002ce17          	auipc	t3,0x2c
   16324:	d28e3e03          	ld	t3,-728(t3) # 42048 <__bswapsi2@GCC_4.3.0>
   16328:	000e0367          	jalr	t1,0(t3)
   1632c:	00000013          	addi	zero,zero,0

0000000000016330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>:
   16330:	0002ce17          	auipc	t3,0x2c
   16334:	d20e3e03          	ld	t3,-736(t3) # 42050 <__gnu_cxx::__exchange_and_add(int volatile*, int)@GLIBCXX_3.4>
   16338:	000e0367          	jalr	t1,0(t3)
   1633c:	00000013          	addi	zero,zero,0

0000000000016340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>:
   16340:	0002ce17          	auipc	t3,0x2c
   16344:	d18e3e03          	ld	t3,-744(t3) # 42058 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@GLIBCXX_3.4.21>
   16348:	000e0367          	jalr	t1,0(t3)
   1634c:	00000013          	addi	zero,zero,0

0000000000016350 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>:
   16350:	0002ce17          	auipc	t3,0x2c
   16354:	d10e3e03          	ld	t3,-752(t3) # 42060 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@GLIBCXX_3.4.21>
   16358:	000e0367          	jalr	t1,0(t3)
   1635c:	00000013          	addi	zero,zero,0

0000000000016360 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@plt>:
   16360:	0002ce17          	auipc	t3,0x2c
   16364:	d08e3e03          	ld	t3,-760(t3) # 42068 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@GLIBCXX_3.4.21>
   16368:	000e0367          	jalr	t1,0(t3)
   1636c:	00000013          	addi	zero,zero,0

0000000000016370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>:
   16370:	0002ce17          	auipc	t3,0x2c
   16374:	d00e3e03          	ld	t3,-768(t3) # 42070 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@GLIBCXX_3.4.21>
   16378:	000e0367          	jalr	t1,0(t3)
   1637c:	00000013          	addi	zero,zero,0

0000000000016380 <__libc_start_main@plt>:
   16380:	0002ce17          	auipc	t3,0x2c
   16384:	cf8e3e03          	ld	t3,-776(t3) # 42078 <__libc_start_main@GLIBC_2.27>
   16388:	000e0367          	jalr	t1,0(t3)
   1638c:	00000013          	addi	zero,zero,0

0000000000016390 <std::__throw_bad_alloc()@plt>:
   16390:	0002ce17          	auipc	t3,0x2c
   16394:	cf0e3e03          	ld	t3,-784(t3) # 42080 <std::__throw_bad_alloc()@GLIBCXX_3.4>
   16398:	000e0367          	jalr	t1,0(t3)
   1639c:	00000013          	addi	zero,zero,0

00000000000163a0 <std::runtime_error::runtime_error(char const*)@plt>:
   163a0:	0002ce17          	auipc	t3,0x2c
   163a4:	ce8e3e03          	ld	t3,-792(t3) # 42088 <std::runtime_error::runtime_error(char const*)@GLIBCXX_3.4.21>
   163a8:	000e0367          	jalr	t1,0(t3)
   163ac:	00000013          	addi	zero,zero,0

00000000000163b0 <__cxa_begin_catch@plt>:
   163b0:	0002ce17          	auipc	t3,0x2c
   163b4:	ce0e3e03          	ld	t3,-800(t3) # 42090 <__cxa_begin_catch@CXXABI_1.3>
   163b8:	000e0367          	jalr	t1,0(t3)
   163bc:	00000013          	addi	zero,zero,0

00000000000163c0 <strlen@plt>:
   163c0:	0002ce17          	auipc	t3,0x2c
   163c4:	cd8e3e03          	ld	t3,-808(t3) # 42098 <strlen@GLIBC_2.27>
   163c8:	000e0367          	jalr	t1,0(t3)
   163cc:	00000013          	addi	zero,zero,0

00000000000163d0 <__cxa_allocate_exception@plt>:
   163d0:	0002ce17          	auipc	t3,0x2c
   163d4:	cd0e3e03          	ld	t3,-816(t3) # 420a0 <__cxa_allocate_exception@CXXABI_1.3>
   163d8:	000e0367          	jalr	t1,0(t3)
   163dc:	00000013          	addi	zero,zero,0

00000000000163e0 <std::__throw_length_error(char const*)@plt>:
   163e0:	0002ce17          	auipc	t3,0x2c
   163e4:	cc8e3e03          	ld	t3,-824(t3) # 420a8 <std::__throw_length_error(char const*)@GLIBCXX_3.4>
   163e8:	000e0367          	jalr	t1,0(t3)
   163ec:	00000013          	addi	zero,zero,0

00000000000163f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   163f0:	0002ce17          	auipc	t3,0x2c
   163f4:	cc0e3e03          	ld	t3,-832(t3) # 420b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   163f8:	000e0367          	jalr	t1,0(t3)
   163fc:	00000013          	addi	zero,zero,0

0000000000016400 <std::_V2::system_category()@plt>:
   16400:	0002ce17          	auipc	t3,0x2c
   16404:	cb8e3e03          	ld	t3,-840(t3) # 420b8 <std::_V2::system_category()@GLIBCXX_3.4.21>
   16408:	000e0367          	jalr	t1,0(t3)
   1640c:	00000013          	addi	zero,zero,0

0000000000016410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>:
   16410:	0002ce17          	auipc	t3,0x2c
   16414:	cb0e3e03          	ld	t3,-848(t3) # 420c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@GLIBCXX_3.4.21>
   16418:	000e0367          	jalr	t1,0(t3)
   1641c:	00000013          	addi	zero,zero,0

0000000000016420 <open@plt>:
   16420:	0002ce17          	auipc	t3,0x2c
   16424:	ca8e3e03          	ld	t3,-856(t3) # 420c8 <open@GLIBC_2.27>
   16428:	000e0367          	jalr	t1,0(t3)
   1642c:	00000013          	addi	zero,zero,0

0000000000016430 <__cxa_guard_release@plt>:
   16430:	0002ce17          	auipc	t3,0x2c
   16434:	ca0e3e03          	ld	t3,-864(t3) # 420d0 <__cxa_guard_release@CXXABI_1.3>
   16438:	000e0367          	jalr	t1,0(t3)
   1643c:	00000013          	addi	zero,zero,0

0000000000016440 <mmap@plt>:
   16440:	0002ce17          	auipc	t3,0x2c
   16444:	c98e3e03          	ld	t3,-872(t3) # 420d8 <mmap@GLIBC_2.27>
   16448:	000e0367          	jalr	t1,0(t3)
   1644c:	00000013          	addi	zero,zero,0

0000000000016450 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@plt>:
   16450:	0002ce17          	auipc	t3,0x2c
   16454:	c90e3e03          	ld	t3,-880(t3) # 420e0 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@GLIBCXX_3.4>
   16458:	000e0367          	jalr	t1,0(t3)
   1645c:	00000013          	addi	zero,zero,0

0000000000016460 <std::__throw_logic_error(char const*)@plt>:
   16460:	0002ce17          	auipc	t3,0x2c
   16464:	c88e3e03          	ld	t3,-888(t3) # 420e8 <std::__throw_logic_error(char const*)@GLIBCXX_3.4>
   16468:	000e0367          	jalr	t1,0(t3)
   1646c:	00000013          	addi	zero,zero,0

0000000000016470 <__cxa_free_exception@plt>:
   16470:	0002ce17          	auipc	t3,0x2c
   16474:	c80e3e03          	ld	t3,-896(t3) # 420f0 <__cxa_free_exception@CXXABI_1.3>
   16478:	000e0367          	jalr	t1,0(t3)
   1647c:	00000013          	addi	zero,zero,0

0000000000016480 <munmap@plt>:
   16480:	0002ce17          	auipc	t3,0x2c
   16484:	c78e3e03          	ld	t3,-904(t3) # 420f8 <munmap@GLIBC_2.27>
   16488:	000e0367          	jalr	t1,0(t3)
   1648c:	00000013          	addi	zero,zero,0

0000000000016490 <std::__throw_bad_array_new_length()@plt>:
   16490:	0002ce17          	auipc	t3,0x2c
   16494:	c70e3e03          	ld	t3,-912(t3) # 42100 <std::__throw_bad_array_new_length()@GLIBCXX_3.4.29>
   16498:	000e0367          	jalr	t1,0(t3)
   1649c:	00000013          	addi	zero,zero,0

00000000000164a0 <__assert_fail@plt>:
   164a0:	0002ce17          	auipc	t3,0x2c
   164a4:	c68e3e03          	ld	t3,-920(t3) # 42108 <__assert_fail@GLIBC_2.27>
   164a8:	000e0367          	jalr	t1,0(t3)
   164ac:	00000013          	addi	zero,zero,0

00000000000164b0 <operator delete(void*)@plt>:
   164b0:	0002ce17          	auipc	t3,0x2c
   164b4:	c60e3e03          	ld	t3,-928(t3) # 42110 <operator delete(void*)@GLIBCXX_3.4>
   164b8:	000e0367          	jalr	t1,0(t3)
   164bc:	00000013          	addi	zero,zero,0

00000000000164c0 <operator new(unsigned long)@plt>:
   164c0:	0002ce17          	auipc	t3,0x2c
   164c4:	c58e3e03          	ld	t3,-936(t3) # 42118 <operator new(unsigned long)@GLIBCXX_3.4>
   164c8:	000e0367          	jalr	t1,0(t3)
   164cc:	00000013          	addi	zero,zero,0

00000000000164d0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>:
   164d0:	0002ce17          	auipc	t3,0x2c
   164d4:	c50e3e03          	ld	t3,-944(t3) # 42120 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@GLIBCXX_3.4>
   164d8:	000e0367          	jalr	t1,0(t3)
   164dc:	00000013          	addi	zero,zero,0

00000000000164e0 <std::runtime_error::~runtime_error()@plt>:
   164e0:	0002ce17          	auipc	t3,0x2c
   164e4:	c48e3e03          	ld	t3,-952(t3) # 42128 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   164e8:	000e0367          	jalr	t1,0(t3)
   164ec:	00000013          	addi	zero,zero,0

00000000000164f0 <__bswapdi2@plt>:
   164f0:	0002ce17          	auipc	t3,0x2c
   164f4:	c40e3e03          	ld	t3,-960(t3) # 42130 <__bswapdi2@GCC_4.3.0>
   164f8:	000e0367          	jalr	t1,0(t3)
   164fc:	00000013          	addi	zero,zero,0

0000000000016500 <__dynamic_cast@plt>:
   16500:	0002ce17          	auipc	t3,0x2c
   16504:	c38e3e03          	ld	t3,-968(t3) # 42138 <__dynamic_cast@CXXABI_1.3>
   16508:	000e0367          	jalr	t1,0(t3)
   1650c:	00000013          	addi	zero,zero,0

0000000000016510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>:
   16510:	0002ce17          	auipc	t3,0x2c
   16514:	c30e3e03          	ld	t3,-976(t3) # 42140 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@GLIBCXX_3.4.21>
   16518:	000e0367          	jalr	t1,0(t3)
   1651c:	00000013          	addi	zero,zero,0

0000000000016520 <std::logic_error::logic_error(char const*)@plt>:
   16520:	0002ce17          	auipc	t3,0x2c
   16524:	c28e3e03          	ld	t3,-984(t3) # 42148 <std::logic_error::logic_error(char const*)@GLIBCXX_3.4.21>
   16528:	000e0367          	jalr	t1,0(t3)
   1652c:	00000013          	addi	zero,zero,0

0000000000016530 <strerror@plt>:
   16530:	0002ce17          	auipc	t3,0x2c
   16534:	c20e3e03          	ld	t3,-992(t3) # 42150 <strerror@GLIBC_2.27>
   16538:	000e0367          	jalr	t1,0(t3)
   1653c:	00000013          	addi	zero,zero,0

0000000000016540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16540:	0002ce17          	auipc	t3,0x2c
   16544:	c18e3e03          	ld	t3,-1000(t3) # 42158 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16548:	000e0367          	jalr	t1,0(t3)
   1654c:	00000013          	addi	zero,zero,0

0000000000016550 <memcpy@plt>:
   16550:	0002ce17          	auipc	t3,0x2c
   16554:	c10e3e03          	ld	t3,-1008(t3) # 42160 <memcpy@GLIBC_2.27>
   16558:	000e0367          	jalr	t1,0(t3)
   1655c:	00000013          	addi	zero,zero,0

0000000000016560 <operator delete[](void*)@plt>:
   16560:	0002ce17          	auipc	t3,0x2c
   16564:	c08e3e03          	ld	t3,-1016(t3) # 42168 <operator delete[](void*)@GLIBCXX_3.4>
   16568:	000e0367          	jalr	t1,0(t3)
   1656c:	00000013          	addi	zero,zero,0

0000000000016570 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>:
   16570:	0002ce17          	auipc	t3,0x2c
   16574:	c00e3e03          	ld	t3,-1024(t3) # 42170 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@GLIBCXX_3.4.18>
   16578:	000e0367          	jalr	t1,0(t3)
   1657c:	00000013          	addi	zero,zero,0

0000000000016580 <memset@plt>:
   16580:	0002ce17          	auipc	t3,0x2c
   16584:	bf8e3e03          	ld	t3,-1032(t3) # 42178 <memset@GLIBC_2.27>
   16588:	000e0367          	jalr	t1,0(t3)
   1658c:	00000013          	addi	zero,zero,0

0000000000016590 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>:
   16590:	0002ce17          	auipc	t3,0x2c
   16594:	bf0e3e03          	ld	t3,-1040(t3) # 42180 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@GLIBCXX_3.4.21>
   16598:	000e0367          	jalr	t1,0(t3)
   1659c:	00000013          	addi	zero,zero,0

00000000000165a0 <std::runtime_error::what() const@plt>:
   165a0:	0002ce17          	auipc	t3,0x2c
   165a4:	be8e3e03          	ld	t3,-1048(t3) # 42188 <std::runtime_error::what() const@GLIBCXX_3.4>
   165a8:	000e0367          	jalr	t1,0(t3)
   165ac:	00000013          	addi	zero,zero,0

00000000000165b0 <std::logic_error::logic_error(char const*)@plt>:
   165b0:	0002ce17          	auipc	t3,0x2c
   165b4:	be0e3e03          	ld	t3,-1056(t3) # 42190 <std::logic_error::logic_error(char const*)@GLIBCXX_3.4.21>
   165b8:	000e0367          	jalr	t1,0(t3)
   165bc:	00000013          	addi	zero,zero,0

00000000000165c0 <__cxa_rethrow@plt>:
   165c0:	0002ce17          	auipc	t3,0x2c
   165c4:	bd8e3e03          	ld	t3,-1064(t3) # 42198 <__cxa_rethrow@CXXABI_1.3>
   165c8:	000e0367          	jalr	t1,0(t3)
   165cc:	00000013          	addi	zero,zero,0

00000000000165d0 <std::logic_error::what() const@plt>:
   165d0:	0002ce17          	auipc	t3,0x2c
   165d4:	bd0e3e03          	ld	t3,-1072(t3) # 421a0 <std::logic_error::what() const@GLIBCXX_3.4>
   165d8:	000e0367          	jalr	t1,0(t3)
   165dc:	00000013          	addi	zero,zero,0

00000000000165e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>:
   165e0:	0002ce17          	auipc	t3,0x2c
   165e4:	bc8e3e03          	ld	t3,-1080(t3) # 421a8 <std::__throw_out_of_range_fmt(char const*, ...)@GLIBCXX_3.4.20>
   165e8:	000e0367          	jalr	t1,0(t3)
   165ec:	00000013          	addi	zero,zero,0

00000000000165f0 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   165f0:	0002ce17          	auipc	t3,0x2c
   165f4:	bc0e3e03          	ld	t3,-1088(t3) # 421b0 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   165f8:	000e0367          	jalr	t1,0(t3)
   165fc:	00000013          	addi	zero,zero,0

0000000000016600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>:
   16600:	0002ce17          	auipc	t3,0x2c
   16604:	bb8e3e03          	ld	t3,-1096(t3) # 421b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@GLIBCXX_3.4.21>
   16608:	000e0367          	jalr	t1,0(t3)
   1660c:	00000013          	addi	zero,zero,0

0000000000016610 <lseek@plt>:
   16610:	0002ce17          	auipc	t3,0x2c
   16614:	bb0e3e03          	ld	t3,-1104(t3) # 421c0 <lseek@GLIBC_2.27>
   16618:	000e0367          	jalr	t1,0(t3)
   1661c:	00000013          	addi	zero,zero,0

0000000000016620 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16620:	0002ce17          	auipc	t3,0x2c
   16624:	ba8e3e03          	ld	t3,-1112(t3) # 421c8 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16628:	000e0367          	jalr	t1,0(t3)
   1662c:	00000013          	addi	zero,zero,0

0000000000016630 <__cxa_end_catch@plt>:
   16630:	0002ce17          	auipc	t3,0x2c
   16634:	ba0e3e03          	ld	t3,-1120(t3) # 421d0 <__cxa_end_catch@CXXABI_1.3>
   16638:	000e0367          	jalr	t1,0(t3)
   1663c:	00000013          	addi	zero,zero,0

0000000000016640 <__gxx_personality_v0@plt>:
   16640:	0002ce17          	auipc	t3,0x2c
   16644:	b98e3e03          	ld	t3,-1128(t3) # 421d8 <__gxx_personality_v0@CXXABI_1.3>
   16648:	000e0367          	jalr	t1,0(t3)
   1664c:	00000013          	addi	zero,zero,0

0000000000016650 <strncmp@plt>:
   16650:	0002ce17          	auipc	t3,0x2c
   16654:	b90e3e03          	ld	t3,-1136(t3) # 421e0 <strncmp@GLIBC_2.27>
   16658:	000e0367          	jalr	t1,0(t3)
   1665c:	00000013          	addi	zero,zero,0

0000000000016660 <__cxa_throw@plt>:
   16660:	0002ce17          	auipc	t3,0x2c
   16664:	b88e3e03          	ld	t3,-1144(t3) # 421e8 <__cxa_throw@CXXABI_1.3>
   16668:	000e0367          	jalr	t1,0(t3)
   1666c:	00000013          	addi	zero,zero,0

0000000000016670 <std::range_error::range_error(char const*)@plt>:
   16670:	0002ce17          	auipc	t3,0x2c
   16674:	b80e3e03          	ld	t3,-1152(t3) # 421f0 <std::range_error::range_error(char const*)@GLIBCXX_3.4.21>
   16678:	000e0367          	jalr	t1,0(t3)
   1667c:	00000013          	addi	zero,zero,0

0000000000016680 <fprintf@plt>:
   16680:	0002ce17          	auipc	t3,0x2c
   16684:	b78e3e03          	ld	t3,-1160(t3) # 421f8 <fprintf@GLIBC_2.27>
   16688:	000e0367          	jalr	t1,0(t3)
   1668c:	00000013          	addi	zero,zero,0

0000000000016690 <_Unwind_Resume@plt>:
   16690:	0002ce17          	auipc	t3,0x2c
   16694:	b70e3e03          	ld	t3,-1168(t3) # 42200 <_Unwind_Resume@GCC_3.0>
   16698:	000e0367          	jalr	t1,0(t3)
   1669c:	00000013          	addi	zero,zero,0

00000000000166a0 <std::logic_error::~logic_error()@plt>:
   166a0:	0002ce17          	auipc	t3,0x2c
   166a4:	b68e3e03          	ld	t3,-1176(t3) # 42208 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   166a8:	000e0367          	jalr	t1,0(t3)
   166ac:	00000013          	addi	zero,zero,0

00000000000166b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>:
   166b0:	0002ce17          	auipc	t3,0x2c
   166b4:	b60e3e03          	ld	t3,-1184(t3) # 42210 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@GLIBCXX_3.4.21>
   166b8:	000e0367          	jalr	t1,0(t3)
   166bc:	00000013          	addi	zero,zero,0

00000000000166c0 <__cxa_atexit@plt>:
   166c0:	0002ce17          	auipc	t3,0x2c
   166c4:	b58e3e03          	ld	t3,-1192(t3) # 42218 <__cxa_atexit@GLIBC_2.27>
   166c8:	000e0367          	jalr	t1,0(t3)
   166cc:	00000013          	addi	zero,zero,0

00000000000166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@plt>:
   166d0:	0002ce17          	auipc	t3,0x2c
   166d4:	b50e3e03          	ld	t3,-1200(t3) # 42220 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@GLIBCXX_3.4.21>
   166d8:	000e0367          	jalr	t1,0(t3)
   166dc:	00000013          	addi	zero,zero,0

00000000000166e0 <__cxa_guard_acquire@plt>:
   166e0:	0002ce17          	auipc	t3,0x2c
   166e4:	b48e3e03          	ld	t3,-1208(t3) # 42228 <__cxa_guard_acquire@CXXABI_1.3>
   166e8:	000e0367          	jalr	t1,0(t3)
   166ec:	00000013          	addi	zero,zero,0

00000000000166f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)@plt>:
   166f0:	0002ce17          	auipc	t3,0x2c
   166f4:	b40e3e03          	ld	t3,-1216(t3) # 42230 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)@GLIBCXX_3.4.21>
   166f8:	000e0367          	jalr	t1,0(t3)
   166fc:	00000013          	addi	zero,zero,0

0000000000016700 <printf@plt>:
   16700:	0002ce17          	auipc	t3,0x2c
   16704:	b38e3e03          	ld	t3,-1224(t3) # 42238 <printf@GLIBC_2.27>
   16708:	000e0367          	jalr	t1,0(t3)
   1670c:	00000013          	addi	zero,zero,0

0000000000016710 <std::runtime_error::runtime_error(char const*)@plt>:
   16710:	0002ce17          	auipc	t3,0x2c
   16714:	b30e3e03          	ld	t3,-1232(t3) # 42240 <std::runtime_error::runtime_error(char const*)@GLIBCXX_3.4.21>
   16718:	000e0367          	jalr	t1,0(t3)
   1671c:	00000013          	addi	zero,zero,0

0000000000016720 <memmove@plt>:
   16720:	0002ce17          	auipc	t3,0x2c
   16724:	b28e3e03          	ld	t3,-1240(t3) # 42248 <memmove@GLIBC_2.27>
   16728:	000e0367          	jalr	t1,0(t3)
   1672c:	00000013          	addi	zero,zero,0

0000000000016730 <__cxa_pure_virtual@plt>:
   16730:	0002ce17          	auipc	t3,0x2c
   16734:	b20e3e03          	ld	t3,-1248(t3) # 42250 <__cxa_pure_virtual@CXXABI_1.3>
   16738:	000e0367          	jalr	t1,0(t3)
   1673c:	00000013          	addi	zero,zero,0

0000000000016740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>:
   16740:	0002ce17          	auipc	t3,0x2c
   16744:	b18e3e03          	ld	t3,-1256(t3) # 42258 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@GLIBCXX_3.4.21>
   16748:	000e0367          	jalr	t1,0(t3)
   1674c:	00000013          	addi	zero,zero,0

0000000000016750 <std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16750:	0002ce17          	auipc	t3,0x2c
   16754:	b10e3e03          	ld	t3,-1264(t3) # 42260 <std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16758:	000e0367          	jalr	t1,0(t3)
   1675c:	00000013          	addi	zero,zero,0

0000000000016760 <__errno_location@plt>:
   16760:	0002ce17          	auipc	t3,0x2c
   16764:	b08e3e03          	ld	t3,-1272(t3) # 42268 <__errno_location@GLIBC_2.27>
   16768:	000e0367          	jalr	t1,0(t3)
   1676c:	00000013          	addi	zero,zero,0

0000000000016770 <close@plt>:
   16770:	0002ce17          	auipc	t3,0x2c
   16774:	b00e3e03          	ld	t3,-1280(t3) # 42270 <close@GLIBC_2.27>
   16778:	000e0367          	jalr	t1,0(t3)
   1677c:	00000013          	addi	zero,zero,0

0000000000016780 <std::underflow_error::underflow_error(char const*)@plt>:
   16780:	0002ce17          	auipc	t3,0x2c
   16784:	af8e3e03          	ld	t3,-1288(t3) # 42278 <std::underflow_error::underflow_error(char const*)@GLIBCXX_3.4.21>
   16788:	000e0367          	jalr	t1,0(t3)
   1678c:	00000013          	addi	zero,zero,0

0000000000016790 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16790:	0002ce17          	auipc	t3,0x2c
   16794:	af0e3e03          	ld	t3,-1296(t3) # 42280 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16798:	000e0367          	jalr	t1,0(t3)
   1679c:	00000013          	addi	zero,zero,0

Disassembly of section .text:

00000000000167a0 <_start>:
ENTRY (ENTRY_POINT)
	/* Terminate call stack by noting ra is undefined.  Use a dummy
	   .cfi_label to force starting the FDE.  */
	.cfi_label .Ldummy
	cfi_undefined (ra)
	call  load_gp
   167a0:	02e000ef          	jal	ra,167ce <load_gp>
	mv    a5, a0  /* rtld_fini.  */
   167a4:	87aa                	c.mv	a5,a0
	/* main may be in a shared library.  */
	la   a0, main
   167a6:	00000517          	auipc	a0,0x0
   167aa:	33250513          	addi	a0,a0,818 # 16ad8 <main>
	REG_L a1, 0(sp)      /* argc.  */
   167ae:	6582                	c.ldsp	a1,0(sp)
	addi  a2, sp, SZREG  /* argv.  */
   167b0:	0030                	c.addi4spn	a2,sp,8
	andi  sp, sp, ALMASK /* Align stack. */
   167b2:	ff017113          	andi	sp,sp,-16
	lla   a3, __libc_csu_init
   167b6:	00020697          	auipc	a3,0x20
   167ba:	e0a68693          	addi	a3,a3,-502 # 365c0 <__libc_csu_init>
	lla   a4, __libc_csu_fini
   167be:	00020717          	auipc	a4,0x20
   167c2:	e5a70713          	addi	a4,a4,-422 # 36618 <__libc_csu_fini>
	mv    a6, sp  /* stack_end.  */
   167c6:	880a                	c.mv	a6,sp

	call  __libc_start_main@plt
   167c8:	bb9ff0ef          	jal	ra,16380 <__libc_start_main@plt>
	ebreak
   167cc:	9002                	c.ebreak

00000000000167ce <load_gp>:
   So we redundantly initialize it at the beginning of _start.  */

load_gp:
.option push
.option norelax
	lla   gp, __global_pointer$
   167ce:	0002c197          	auipc	gp,0x2c
   167d2:	03218193          	addi	gp,gp,50 # 42800 <__global_pointer$>
.option pop
	ret
   167d6:	8082                	c.jr	ra
	...

00000000000167da <deregister_tm_clones>:
   167da:	81818793          	addi	a5,gp,-2024 # 42018 <__TMC_END__>
   167de:	81818713          	addi	a4,gp,-2024 # 42018 <__TMC_END__>
   167e2:	00f70863          	beq	a4,a5,167f2 <deregister_tm_clones+0x18>
   167e6:	00000793          	addi	a5,zero,0
   167ea:	c781                	c.beqz	a5,167f2 <deregister_tm_clones+0x18>
   167ec:	81818513          	addi	a0,gp,-2024 # 42018 <__TMC_END__>
   167f0:	8782                	c.jr	a5
   167f2:	8082                	c.jr	ra

00000000000167f4 <register_tm_clones>:
   167f4:	81818793          	addi	a5,gp,-2024 # 42018 <__TMC_END__>
   167f8:	81818593          	addi	a1,gp,-2024 # 42018 <__TMC_END__>
   167fc:	8d9d                	c.sub	a1,a5
   167fe:	4035d793          	srai	a5,a1,0x3
   16802:	91fd                	c.srli	a1,0x3f
   16804:	95be                	c.add	a1,a5
   16806:	8585                	c.srai	a1,0x1
   16808:	c599                	c.beqz	a1,16816 <register_tm_clones+0x22>
   1680a:	00000793          	addi	a5,zero,0
   1680e:	c781                	c.beqz	a5,16816 <register_tm_clones+0x22>
   16810:	81818513          	addi	a0,gp,-2024 # 42018 <__TMC_END__>
   16814:	8782                	c.jr	a5
   16816:	8082                	c.jr	ra

0000000000016818 <__do_global_dtors_aux>:
   16818:	1141                	c.addi	sp,-16
   1681a:	e022                	c.sdsp	s0,0(sp)
   1681c:	e191c783          	lbu	a5,-487(gp) # 42619 <completed.0>
   16820:	e406                	c.sdsp	ra,8(sp)
   16822:	e791                	c.bnez	a5,1682e <__do_global_dtors_aux+0x16>
   16824:	fb7ff0ef          	jal	ra,167da <deregister_tm_clones>
   16828:	4785                	c.li	a5,1
   1682a:	e0f18ca3          	sb	a5,-487(gp) # 42619 <completed.0>
   1682e:	60a2                	c.ldsp	ra,8(sp)
   16830:	6402                	c.ldsp	s0,0(sp)
   16832:	0141                	c.addi	sp,16
   16834:	8082                	c.jr	ra

0000000000016836 <frame_dummy>:
   16836:	bf7d                	c.j	167f4 <register_tm_clones>

0000000000016838 <dump_tree(dwarf::die const&, int)>:
#include <fcntl.h>
#include <inttypes.h>

using namespace std;

void dump_tree(const dwarf::die &node, int depth = 0) {
   16838:	eb010113          	addi	sp,sp,-336
   1683c:	14113423          	sd	ra,328(sp)
   16840:	14813023          	sd	s0,320(sp)
   16844:	12913c23          	sd	s1,312(sp)
   16848:	13213823          	sd	s2,304(sp)
   1684c:	13313423          	sd	s3,296(sp)
   16850:	13413023          	sd	s4,288(sp)
   16854:	11513c23          	sd	s5,280(sp)
   16858:	11613823          	sd	s6,272(sp)
   1685c:	11713423          	sd	s7,264(sp)
   16860:	11813023          	sd	s8,256(sp)
   16864:	00050c13          	addi	s8,a0,0
   16868:	00058913          	addi	s2,a1,0
  printf("%*.s<%" PRIx64 "> %s\n", depth, " ", node.get_section_offset(),
   1686c:	3d1060ef          	jal	ra,1d43c <dwarf::die::get_section_offset() const>
   16870:	00050413          	addi	s0,a0,0
         to_string(node.tag).c_str());
   16874:	000c2583          	lw	a1,0(s8)
   16878:	07810513          	addi	a0,sp,120
   1687c:	70c190ef          	jal	ra,2ff88 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)>
  printf("%*.s<%" PRIx64 "> %s\n", depth, " ", node.get_section_offset(),
   16880:	07813703          	ld	a4,120(sp)
   16884:	00040693          	addi	a3,s0,0
   16888:	00038637          	lui	a2,0x38
   1688c:	b5060613          	addi	a2,a2,-1200 # 37b50 <typeinfo name for dwarf::expr_context+0x168>
   16890:	00090593          	addi	a1,s2,0
   16894:	00036537          	lui	a0,0x36
   16898:	65850513          	addi	a0,a0,1624 # 36658 <__libc_csu_fini+0x40>
   1689c:	e65ff0ef          	jal	ra,16700 <printf@plt>
      { _M_string_length = __length; }

      _GLIBCXX20_CONSTEXPR
      pointer
      _M_data() const
      { return _M_dataplus._M_p; }
   168a0:	07813503          	ld	a0,120(sp)

      _GLIBCXX20_CONSTEXPR
      void
      _M_dispose()
      {
	if (!_M_is_local())
   168a4:	08810793          	addi	a5,sp,136
   168a8:	00f50463          	beq	a0,a5,168b0 <dump_tree(dwarf::die const&, int)+0x78>
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   168ac:	c05ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
  for (auto &attr : node.attributes())
   168b0:	000c0593          	addi	a1,s8,0
   168b4:	0e810513          	addi	a0,sp,232
   168b8:	111070ef          	jal	ra,1e1c8 <dwarf::die::attributes() const>
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   168bc:	0e813403          	ld	s0,232(sp)
   168c0:	0f013983          	ld	s3,240(sp)
   168c4:	07340863          	beq	s0,s3,16934 <dump_tree(dwarf::die const&, int)+0xfc>
    printf("%*.s      %s %s\n", depth, " ", to_string(attr.first).c_str(),
   168c8:	00038bb7          	lui	s7,0x38
   168cc:	00036b37          	lui	s6,0x36
   168d0:	08810a93          	addi	s5,sp,136
   168d4:	01810a13          	addi	s4,sp,24
   168d8:	04c0006f          	jal	zero,16924 <dump_tree(dwarf::die const&, int)+0xec>
      { return _M_dataplus._M_p; }
   168dc:	00813483          	ld	s1,8(sp)
           to_string(attr.second).c_str());
   168e0:	00840593          	addi	a1,s0,8
   168e4:	07810513          	addi	a0,sp,120
   168e8:	5840b0ef          	jal	ra,21e6c <dwarf::to_string[abi:cxx11](dwarf::value const&)>
    printf("%*.s      %s %s\n", depth, " ", to_string(attr.first).c_str(),
   168ec:	07813703          	ld	a4,120(sp)
   168f0:	00048693          	addi	a3,s1,0
   168f4:	b50b8613          	addi	a2,s7,-1200 # 37b50 <typeinfo name for dwarf::expr_context+0x168>
   168f8:	00090593          	addi	a1,s2,0
   168fc:	668b0513          	addi	a0,s6,1640 # 36668 <__libc_csu_fini+0x50>
   16900:	e01ff0ef          	jal	ra,16700 <printf@plt>
   16904:	07813503          	ld	a0,120(sp)
	if (!_M_is_local())
   16908:	01550463          	beq	a0,s5,16910 <dump_tree(dwarf::die const&, int)+0xd8>
   1690c:	ba5ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   16910:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   16914:	01450463          	beq	a0,s4,1691c <dump_tree(dwarf::die const&, int)+0xe4>
   16918:	b99ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
  for (auto &attr : node.attributes())
   1691c:	02040413          	addi	s0,s0,32
   16920:	00898a63          	beq	s3,s0,16934 <dump_tree(dwarf::die const&, int)+0xfc>
    printf("%*.s      %s %s\n", depth, " ", to_string(attr.first).c_str(),
   16924:	00042583          	lw	a1,0(s0)
   16928:	00810513          	addi	a0,sp,8
   1692c:	5bd1a0ef          	jal	ra,316e8 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
   16930:	fadff06f          	jal	zero,168dc <dump_tree(dwarf::die const&, int)+0xa4>
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   16934:	0e813503          	ld	a0,232(sp)
	if (__p)
   16938:	00050463          	beq	a0,zero,16940 <dump_tree(dwarf::die const&, int)+0x108>
   1693c:	b75ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
  for (auto &child : node) // DFS
   16940:	000c0593          	addi	a1,s8,0
   16944:	00810513          	addi	a0,sp,8
   16948:	2a0070ef          	jal	ra,1dbe8 <dwarf::die::begin() const>
  iterator(const unit *cu, section_offset off);

  die d;
};

inline die::iterator die::end() const { return iterator(); }
   1694c:	06013c23          	sd	zero,120(sp)
   16950:	08013023          	sd	zero,128(sp)
   16954:	08013423          	sd	zero,136(sp)
   16958:	08013823          	sd	zero,144(sp)
   1695c:	08013c23          	sd	zero,152(sp)
   16960:	0a013023          	sd	zero,160(sp)
   16964:	0a013423          	sd	zero,168(sp)
   16968:	0a013823          	sd	zero,176(sp)
   1696c:	0a013c23          	sd	zero,184(sp)
   16970:	0c013023          	sd	zero,192(sp)
   16974:	0e013023          	sd	zero,224(sp)
  typedef T value_type;
  typedef value_type &reference;
  typedef const value_type &const_reference;
  typedef size_t size_type;

  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   16978:	09810793          	addi	a5,sp,152
   1697c:	0cf13423          	sd	a5,200(sp)
   16980:	0cf13823          	sd	a5,208(sp)
   16984:	0c810793          	addi	a5,sp,200
   16988:	0cf13c23          	sd	a5,216(sp)
    if (d.abbrev != o.d.abbrev)
   1698c:	01813783          	ld	a5,24(sp)
   16990:	08813703          	ld	a4,136(sp)
   16994:	00e78e63          	beq	a5,a4,169b0 <dump_tree(dwarf::die const&, int)+0x178>
    dump_tree(child, depth + 1);
   16998:	0019059b          	addiw	a1,s2,1
   1699c:	00810513          	addi	a0,sp,8
   169a0:	e99ff0ef          	jal	ra,16838 <dump_tree(dwarf::die const&, int)>
  for (auto &child : node) // DFS
   169a4:	00810513          	addi	a0,sp,8
   169a8:	5ac070ef          	jal	ra,1df54 <dwarf::die::iterator::operator++()>
   169ac:	fe1ff06f          	jal	zero,1698c <dump_tree(dwarf::die const&, int)+0x154>
    if (d.abbrev == nullptr)
   169b0:	00078e63          	beq	a5,zero,169cc <dump_tree(dwarf::die const&, int)+0x194>
    return d.next != o.d.next || d.cu != o.d.cu;
   169b4:	07013703          	ld	a4,112(sp)
   169b8:	0e013783          	ld	a5,224(sp)
   169bc:	fcf71ee3          	bne	a4,a5,16998 <dump_tree(dwarf::die const&, int)+0x160>
   169c0:	01013703          	ld	a4,16(sp)
   169c4:	08013783          	ld	a5,128(sp)
   169c8:	fcf718e3          	bne	a4,a5,16998 <dump_tree(dwarf::die const&, int)+0x160>
    end--;
    end->~T();
  }

  void clear() {
    for (T *p = base; p < end; ++p)
   169cc:	0c813503          	ld	a0,200(sp)
   169d0:	0d013783          	ld	a5,208(sp)
   169d4:	00f57a63          	bgeu	a0,a5,169e8 <dump_tree(dwarf::die const&, int)+0x1b0>
   169d8:	00050793          	addi	a5,a0,0
   169dc:	00878793          	addi	a5,a5,8
   169e0:	0d013703          	ld	a4,208(sp)
   169e4:	fee7ece3          	bltu	a5,a4,169dc <dump_tree(dwarf::die const&, int)+0x1a4>
      p->~T();
    end = base;
   169e8:	0ca13823          	sd	a0,208(sp)
    if ((char *)base != buf)
   169ec:	09810793          	addi	a5,sp,152
   169f0:	00f50663          	beq	a0,a5,169fc <dump_tree(dwarf::die const&, int)+0x1c4>
      delete[] (char *)base;
   169f4:	00050463          	beq	a0,zero,169fc <dump_tree(dwarf::die const&, int)+0x1c4>
   169f8:	b69ff0ef          	jal	ra,16560 <operator delete[](void*)@plt>
    for (T *p = base; p < end; ++p)
   169fc:	05813503          	ld	a0,88(sp)
   16a00:	06013783          	ld	a5,96(sp)
   16a04:	00f57a63          	bgeu	a0,a5,16a18 <dump_tree(dwarf::die const&, int)+0x1e0>
   16a08:	00050793          	addi	a5,a0,0
   16a0c:	00878793          	addi	a5,a5,8
   16a10:	06013703          	ld	a4,96(sp)
   16a14:	fee7ece3          	bltu	a5,a4,16a0c <dump_tree(dwarf::die const&, int)+0x1d4>
    if ((char *)base != buf)
   16a18:	02810793          	addi	a5,sp,40
   16a1c:	00f50663          	beq	a0,a5,16a28 <dump_tree(dwarf::die const&, int)+0x1f0>
      delete[] (char *)base;
   16a20:	00050463          	beq	a0,zero,16a28 <dump_tree(dwarf::die const&, int)+0x1f0>
   16a24:	b3dff0ef          	jal	ra,16560 <operator delete[](void*)@plt>
}
   16a28:	14813083          	ld	ra,328(sp)
   16a2c:	14013403          	ld	s0,320(sp)
   16a30:	13813483          	ld	s1,312(sp)
   16a34:	13013903          	ld	s2,304(sp)
   16a38:	12813983          	ld	s3,296(sp)
   16a3c:	12013a03          	ld	s4,288(sp)
   16a40:	11813a83          	ld	s5,280(sp)
   16a44:	11013b03          	ld	s6,272(sp)
   16a48:	10813b83          	ld	s7,264(sp)
   16a4c:	10013c03          	ld	s8,256(sp)
   16a50:	15010113          	addi	sp,sp,336
   16a54:	00008067          	jalr	zero,0(ra)
      { return _M_dataplus._M_p; }
   16a58:	00050413          	addi	s0,a0,0
   16a5c:	07813503          	ld	a0,120(sp)
	if (!_M_is_local())
   16a60:	08810793          	addi	a5,sp,136
   16a64:	00f50463          	beq	a0,a5,16a6c <dump_tree(dwarf::die const&, int)+0x234>
   16a68:	a49ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   16a6c:	00040513          	addi	a0,s0,0
   16a70:	c21ff0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   16a74:	00050413          	addi	s0,a0,0
   16a78:	07813503          	ld	a0,120(sp)
	if (!_M_is_local())
   16a7c:	08810793          	addi	a5,sp,136
   16a80:	00f50463          	beq	a0,a5,16a88 <dump_tree(dwarf::die const&, int)+0x250>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   16a84:	a2dff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   16a88:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   16a8c:	01810793          	addi	a5,sp,24
   16a90:	00f50463          	beq	a0,a5,16a98 <dump_tree(dwarf::die const&, int)+0x260>
   16a94:	a1dff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   16a98:	0e813503          	ld	a0,232(sp)
	if (__p)
   16a9c:	00050463          	beq	a0,zero,16aa4 <dump_tree(dwarf::die const&, int)+0x26c>
   16aa0:	a11ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   16aa4:	00040513          	addi	a0,s0,0
   16aa8:	be9ff0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   16aac:	00050413          	addi	s0,a0,0
   16ab0:	fd9ff06f          	jal	zero,16a88 <dump_tree(dwarf::die const&, int)+0x250>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   16ab4:	00050413          	addi	s0,a0,0
   16ab8:	fe1ff06f          	jal	zero,16a98 <dump_tree(dwarf::die const&, int)+0x260>
class die {
   16abc:	00050413          	addi	s0,a0,0
   16ac0:	09810513          	addi	a0,sp,152
   16ac4:	00d000ef          	jal	ra,172d0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()>
   16ac8:	02810513          	addi	a0,sp,40
   16acc:	005000ef          	jal	ra,172d0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()>
   16ad0:	00040513          	addi	a0,s0,0
   16ad4:	bbdff0ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000016ad8 <main>:

int main(int argc, char **argv) {
   16ad8:	f6010113          	addi	sp,sp,-160
   16adc:	08113c23          	sd	ra,152(sp)
   16ae0:	08813823          	sd	s0,144(sp)
   16ae4:	08913423          	sd	s1,136(sp)
   16ae8:	09213023          	sd	s2,128(sp)
   16aec:	07313c23          	sd	s3,120(sp)
   16af0:	07413823          	sd	s4,112(sp)
   16af4:	07513423          	sd	s5,104(sp)
   16af8:	00058413          	addi	s0,a1,0
  if (argc != 2) {
   16afc:	00200793          	addi	a5,zero,2
   16b00:	02f51863          	bne	a0,a5,16b30 <main+0x58>
    fprintf(stderr, "usage: %s elf-file\n", argv[0]);
    return 2;
  }
  int fd = open(argv[1], O_RDONLY);
   16b04:	00000593          	addi	a1,zero,0
   16b08:	00843503          	ld	a0,8(s0)
   16b0c:	915ff0ef          	jal	ra,16420 <open@plt>
   16b10:	00050593          	addi	a1,a0,0
  if (fd < 0) {
   16b14:	02054c63          	blt	a0,zero,16b4c <main+0x74>
    fprintf(stderr, "%s: %s\n", argv[1], strerror(errno));
    return 1;
  }

  elf::elf ef(elf::create_mmap_loader(fd));
   16b18:	04010513          	addi	a0,sp,64
   16b1c:	5381f0ef          	jal	ra,36054 <elf::create_mmap_loader(int)>
   16b20:	04010593          	addi	a1,sp,64
   16b24:	03010513          	addi	a0,sp,48
   16b28:	5d01d0ef          	jal	ra,340f8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)>
   16b2c:	0540006f          	jal	zero,16b80 <main+0xa8>
    fprintf(stderr, "usage: %s elf-file\n", argv[0]);
   16b30:	0005b603          	ld	a2,0(a1)
   16b34:	000365b7          	lui	a1,0x36
   16b38:	68058593          	addi	a1,a1,1664 # 36680 <__libc_csu_fini+0x68>
   16b3c:	e101b503          	ld	a0,-496(gp) # 42610 <stderr@GLIBC_2.27>
   16b40:	b41ff0ef          	jal	ra,16680 <fprintf@plt>
    return 2;
   16b44:	00200513          	addi	a0,zero,2
   16b48:	1b40006f          	jal	zero,16cfc <main+0x224>
    fprintf(stderr, "%s: %s\n", argv[1], strerror(errno));
   16b4c:	e101b483          	ld	s1,-496(gp) # 42610 <stderr@GLIBC_2.27>
   16b50:	00843403          	ld	s0,8(s0)
   16b54:	c0dff0ef          	jal	ra,16760 <__errno_location@plt>
   16b58:	00052503          	lw	a0,0(a0)
   16b5c:	9d5ff0ef          	jal	ra,16530 <strerror@plt>
   16b60:	00050693          	addi	a3,a0,0
   16b64:	00040613          	addi	a2,s0,0
   16b68:	000365b7          	lui	a1,0x36
   16b6c:	69858593          	addi	a1,a1,1688 # 36698 <__libc_csu_fini+0x80>
   16b70:	00048513          	addi	a0,s1,0
   16b74:	b0dff0ef          	jal	ra,16680 <fprintf@plt>
    return 1;
   16b78:	00100513          	addi	a0,zero,1
   16b7c:	1800006f          	jal	zero,16cfc <main+0x224>
      explicit
      __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t) noexcept;

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   16b80:	04813503          	ld	a0,72(sp)
   16b84:	00050463          	beq	a0,zero,16b8c <main+0xb4>
	  _M_pi->_M_release();
   16b88:	49c000ef          	jal	ra,17024 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   16b8c:	05000513          	addi	a0,zero,80
   16b90:	931ff0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   16b94:	00050413          	addi	s0,a0,0
    __mutex(const __mutex&);
    __mutex& operator=(const __mutex&);

  public:
    __mutex() 
    { 
   16b98:	00052423          	sw	zero,8(a0)
   16b9c:	00052623          	sw	zero,12(a0)
   16ba0:	00052823          	sw	zero,16(a0)
   16ba4:	00052a23          	sw	zero,20(a0)
   16ba8:	00052c23          	sw	zero,24(a0)
   16bac:	00052e23          	sw	zero,28(a0)
   16bb0:	02053023          	sd	zero,32(a0)
   16bb4:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   16bb8:	00100793          	addi	a5,zero,1
   16bbc:	02f52823          	sw	a5,48(a0)
   16bc0:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   16bc4:	000377b7          	lui	a5,0x37
   16bc8:	94878793          	addi	a5,a5,-1720 # 36948 <vtable for std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10>
   16bcc:	00f53023          	sd	a5,0(a0)
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   16bd0:	03850493          	addi	s1,a0,56

template <typename Elf> class elf_loader : public loader {
  Elf f;

public:
  elf_loader(const Elf &file) : f(file) {}
   16bd4:	000377b7          	lui	a5,0x37
   16bd8:	92078793          	addi	a5,a5,-1760 # 36920 <vtable for dwarf::elf::elf_loader<elf::elf>+0x10>
   16bdc:	02f53c23          	sd	a5,56(a0)
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   16be0:	03013783          	ld	a5,48(sp)
   16be4:	04f53023          	sd	a5,64(a0)
      : _M_pi(__r._M_pi)
   16be8:	03813503          	ld	a0,56(sp)
   16bec:	04a43423          	sd	a0,72(s0)
	if (_M_pi != nullptr)
   16bf0:	00050c63          	beq	a0,zero,16c08 <main+0x130>

  inline void
  __attribute__ ((__always_inline__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {
    if (__is_single_threaded())
   16bf4:	e181c783          	lbu	a5,-488(gp) # 42618 <__libc_single_threaded@GLIBC_2.32>
   16bf8:	02078463          	beq	a5,zero,16c20 <main+0x148>
  { *__mem += __val; }
   16bfc:	03052783          	lw	a5,48(a0)
   16c00:	0017879b          	addiw	a5,a5,1
   16c04:	02f52823          	sw	a5,48(a0)
	__r._M_ptr = nullptr;
      }

      template<typename _Yp, typename = _Compatible<_Yp>>
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount()
   16c08:	04913823          	sd	s1,80(sp)
	_M_pi = __tmp;
   16c0c:	04813c23          	sd	s0,88(sp)
  dwarf::dwarf dw(dwarf::elf::create_loader(ef));
   16c10:	05010593          	addi	a1,sp,80
   16c14:	02010513          	addi	a0,sp,32
   16c18:	670010ef          	jal	ra,18288 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)>
   16c1c:	0140006f          	jal	zero,16c30 <main+0x158>
      __atomic_add_single(__mem, __val);
    else
      __atomic_add(__mem, __val);
   16c20:	00100593          	addi	a1,zero,1
   16c24:	03050513          	addi	a0,a0,48
   16c28:	ed8ff0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   16c2c:	fddff06f          	jal	zero,16c08 <main+0x130>
	if (_M_pi != nullptr)
   16c30:	05813503          	ld	a0,88(sp)
   16c34:	00050463          	beq	a0,zero,16c3c <main+0x164>
	  _M_pi->_M_release();
   16c38:	3ec000ef          	jal	ra,17024 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>

  for (auto cu : dw.compilation_units()) {
   16c3c:	02010513          	addi	a0,sp,32
   16c40:	78c000ef          	jal	ra,173cc <dwarf::dwarf::compilation_units() const>
   16c44:	00053403          	ld	s0,0(a0)
   16c48:	00853983          	ld	s3,8(a0)
   16c4c:	08898c63          	beq	s3,s0,16ce4 <main+0x20c>
class unit {
   16c50:	00037937          	lui	s2,0x37
   16c54:	8e090913          	addi	s2,s2,-1824 # 368e0 <vtable for dwarf::unit+0x10>
  compilation_unit(const compilation_unit &o) = default;
   16c58:	000374b7          	lui	s1,0x37
   16c5c:	90048493          	addi	s1,s1,-1792 # 36900 <vtable for dwarf::compilation_unit+0x10>
    printf("--- <%" PRIx64 ">\n", cu.get_section_offset());
   16c60:	00036a37          	lui	s4,0x36
   16c64:	0440006f          	jal	zero,16ca8 <main+0x1d0>
   16c68:	00100593          	addi	a1,zero,1
   16c6c:	03050513          	addi	a0,a0,48
   16c70:	e90ff0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   16c74:	0600006f          	jal	zero,16cd4 <main+0x1fc>
   16c78:	00050593          	addi	a1,a0,0
   16c7c:	6a0a0513          	addi	a0,s4,1696 # 366a0 <__libc_csu_fini+0x88>
   16c80:	a81ff0ef          	jal	ra,16700 <printf@plt>
    dump_tree(cu.root());
   16c84:	00810513          	addi	a0,sp,8
   16c88:	430030ef          	jal	ra,1a0b8 <dwarf::unit::root() const>
   16c8c:	00000593          	addi	a1,zero,0
   16c90:	ba9ff0ef          	jal	ra,16838 <dump_tree(dwarf::die const&, int)>
class compilation_unit : public unit {
   16c94:	00913423          	sd	s1,8(sp)
   16c98:	00810513          	addi	a0,sp,8
   16c9c:	79c000ef          	jal	ra,17438 <dwarf::unit::~unit()>

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
      {
	++_M_current;
   16ca0:	01840413          	addi	s0,s0,24
  for (auto cu : dw.compilation_units()) {
   16ca4:	04898063          	beq	s3,s0,16ce4 <main+0x20c>
class unit {
   16ca8:	01213423          	sd	s2,8(sp)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   16cac:	00843783          	ld	a5,8(s0)
   16cb0:	00f13823          	sd	a5,16(sp)
      : _M_pi(__r._M_pi)
   16cb4:	01043503          	ld	a0,16(s0)
   16cb8:	00a13c23          	sd	a0,24(sp)
	if (_M_pi != nullptr)
   16cbc:	00050c63          	beq	a0,zero,16cd4 <main+0x1fc>
    if (__is_single_threaded())
   16cc0:	e181c783          	lbu	a5,-488(gp) # 42618 <__libc_single_threaded@GLIBC_2.32>
   16cc4:	fa0782e3          	beq	a5,zero,16c68 <main+0x190>
  { *__mem += __val; }
   16cc8:	03052783          	lw	a5,48(a0)
   16ccc:	0017879b          	addiw	a5,a5,1
   16cd0:	02f52823          	sw	a5,48(a0)
  compilation_unit(const compilation_unit &o) = default;
   16cd4:	00913423          	sd	s1,8(sp)
    printf("--- <%" PRIx64 ">\n", cu.get_section_offset());
   16cd8:	00810513          	addi	a0,sp,8
   16cdc:	055000ef          	jal	ra,17530 <dwarf::unit::get_section_offset() const>
   16ce0:	f99ff06f          	jal	zero,16c78 <main+0x1a0>
  }

  return 0;
}
   16ce4:	02010513          	addi	a0,sp,32
   16ce8:	630000ef          	jal	ra,17318 <dwarf::dwarf::~dwarf()>
	if (_M_pi != nullptr)
   16cec:	03813503          	ld	a0,56(sp)
   16cf0:	00050463          	beq	a0,zero,16cf8 <main+0x220>
	  _M_pi->_M_release();
   16cf4:	330000ef          	jal	ra,17024 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
  return 0;
   16cf8:	00000513          	addi	a0,zero,0
}
   16cfc:	09813083          	ld	ra,152(sp)
   16d00:	09013403          	ld	s0,144(sp)
   16d04:	08813483          	ld	s1,136(sp)
   16d08:	08013903          	ld	s2,128(sp)
   16d0c:	07813983          	ld	s3,120(sp)
   16d10:	07013a03          	ld	s4,112(sp)
   16d14:	06813a83          	ld	s5,104(sp)
   16d18:	0a010113          	addi	sp,sp,160
   16d1c:	00008067          	jalr	zero,0(ra)
	if (_M_pi != nullptr)
   16d20:	00050413          	addi	s0,a0,0
   16d24:	04813503          	ld	a0,72(sp)
   16d28:	00050463          	beq	a0,zero,16d30 <main+0x258>
	  _M_pi->_M_release();
   16d2c:	2f8000ef          	jal	ra,17024 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
   16d30:	00040513          	addi	a0,s0,0
   16d34:	95dff0ef          	jal	ra,16690 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   16d38:	00050413          	addi	s0,a0,0
   16d3c:	05813503          	ld	a0,88(sp)
   16d40:	00050463          	beq	a0,zero,16d48 <main+0x270>
	  _M_pi->_M_release();
   16d44:	2e0000ef          	jal	ra,17024 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
	if (_M_pi != nullptr)
   16d48:	03813503          	ld	a0,56(sp)
   16d4c:	00050463          	beq	a0,zero,16d54 <main+0x27c>
	  _M_pi->_M_release();
   16d50:	2d4000ef          	jal	ra,17024 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
   16d54:	00040513          	addi	a0,s0,0
   16d58:	939ff0ef          	jal	ra,16690 <_Unwind_Resume@plt>
class compilation_unit : public unit {
   16d5c:	00050413          	addi	s0,a0,0
   16d60:	000377b7          	lui	a5,0x37
   16d64:	90078793          	addi	a5,a5,-1792 # 36900 <vtable for dwarf::compilation_unit+0x10>
   16d68:	00f13423          	sd	a5,8(sp)
   16d6c:	00810513          	addi	a0,sp,8
   16d70:	6c8000ef          	jal	ra,17438 <dwarf::unit::~unit()>
   16d74:	02010513          	addi	a0,sp,32
   16d78:	5a0000ef          	jal	ra,17318 <dwarf::dwarf::~dwarf()>
   16d7c:	fcdff06f          	jal	zero,16d48 <main+0x270>
   16d80:	00050413          	addi	s0,a0,0
   16d84:	ff1ff06f          	jal	zero,16d74 <main+0x29c>
	if (_M_pi != nullptr)
   16d88:	00050413          	addi	s0,a0,0
   16d8c:	fbdff06f          	jal	zero,16d48 <main+0x270>

0000000000016d90 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   16d90:	00008067          	jalr	zero,0(ra)

0000000000016d94 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   16d94:	ff010113          	addi	sp,sp,-16
   16d98:	00113423          	sd	ra,8(sp)
    _Destroy(_Tp* __pointer)
    {
#if __cplusplus > 201703L
      std::destroy_at(__pointer);
#else
      __pointer->~_Tp();
   16d9c:	03853783          	ld	a5,56(a0)
   16da0:	0007b783          	ld	a5,0(a5)
   16da4:	03850513          	addi	a0,a0,56
   16da8:	000780e7          	jalr	ra,0(a5)
      }
   16dac:	00813083          	ld	ra,8(sp)
   16db0:	01010113          	addi	sp,sp,16
   16db4:	00008067          	jalr	zero,0(ra)

0000000000016db8 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   16db8:	ff010113          	addi	sp,sp,-16
   16dbc:	00113423          	sd	ra,8(sp)
   16dc0:	ef0ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   16dc4:	00813083          	ld	ra,8(sp)
   16dc8:	01010113          	addi	sp,sp,16
   16dcc:	00008067          	jalr	zero,0(ra)

0000000000016dd0 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   16dd0:	ff010113          	addi	sp,sp,-16
   16dd4:	00113423          	sd	ra,8(sp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   16dd8:	ed8ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   16ddc:	00813083          	ld	ra,8(sp)
   16de0:	01010113          	addi	sp,sp,16
   16de4:	00008067          	jalr	zero,0(ra)

0000000000016de8 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   16de8:	ff010113          	addi	sp,sp,-16
   16dec:	00113423          	sd	ra,8(sp)
   16df0:	00813023          	sd	s0,0(sp)
   16df4:	03850413          	addi	s0,a0,56
	    ||
   16df8:	000377b7          	lui	a5,0x37
   16dfc:	97078793          	addi	a5,a5,-1680 # 36970 <std::_Sp_make_shared_tag::_S_ti()::__tag>
   16e00:	02f58c63          	beq	a1,a5,16e38 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
  type_info::operator==(const type_info& __arg) const _GLIBCXX_NOEXCEPT
  {
    if (std::__is_constant_evaluated())
      return this == &__arg;

    if (__name == __arg.__name)
   16e04:	0085b503          	ld	a0,8(a1)
   16e08:	000367b7          	lui	a5,0x36
   16e0c:	72078793          	addi	a5,a5,1824 # 36720 <typeinfo name for std::_Sp_make_shared_tag>
   16e10:	02f50463          	beq	a0,a5,16e38 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
#if !__GXX_TYPEINFO_EQUALITY_INLINE
    // ABI requires comparisons to be non-inline.
    return __equal(__arg);
#elif !__GXX_MERGED_TYPEINFO_NAMES
    // Need to do string comparison.
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   16e14:	00054703          	lbu	a4,0(a0)
   16e18:	02a00793          	addi	a5,zero,42
   16e1c:	02f70863          	beq	a4,a5,16e4c <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   16e20:	000365b7          	lui	a1,0x36
   16e24:	72058593          	addi	a1,a1,1824 # 36720 <typeinfo name for std::_Sp_make_shared_tag>
   16e28:	ce8ff0ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   16e2c:	00153513          	sltiu	a0,a0,1
   16e30:	40a00533          	sub	a0,zero,a0
   16e34:	00a47433          	and	s0,s0,a0
      }
   16e38:	00040513          	addi	a0,s0,0
   16e3c:	00813083          	ld	ra,8(sp)
   16e40:	00013403          	ld	s0,0(sp)
   16e44:	01010113          	addi	sp,sp,16
   16e48:	00008067          	jalr	zero,0(ra)
	return nullptr;
   16e4c:	00000413          	addi	s0,zero,0
   16e50:	fe9ff06f          	jal	zero,16e38 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

0000000000016e54 <dwarf::compilation_unit::~compilation_unit()>:
   16e54:	ff010113          	addi	sp,sp,-16
   16e58:	00113423          	sd	ra,8(sp)
   16e5c:	000377b7          	lui	a5,0x37
   16e60:	90078793          	addi	a5,a5,-1792 # 36900 <vtable for dwarf::compilation_unit+0x10>
   16e64:	00f53023          	sd	a5,0(a0)
   16e68:	5d0000ef          	jal	ra,17438 <dwarf::unit::~unit()>
   16e6c:	00813083          	ld	ra,8(sp)
   16e70:	01010113          	addi	sp,sp,16
   16e74:	00008067          	jalr	zero,0(ra)

0000000000016e78 <dwarf::compilation_unit::~compilation_unit()>:
   16e78:	ff010113          	addi	sp,sp,-16
   16e7c:	00113423          	sd	ra,8(sp)
   16e80:	00813023          	sd	s0,0(sp)
   16e84:	00050413          	addi	s0,a0,0
   16e88:	000377b7          	lui	a5,0x37
   16e8c:	90078793          	addi	a5,a5,-1792 # 36900 <vtable for dwarf::compilation_unit+0x10>
   16e90:	00f53023          	sd	a5,0(a0)
   16e94:	5a4000ef          	jal	ra,17438 <dwarf::unit::~unit()>
   16e98:	00040513          	addi	a0,s0,0
   16e9c:	e14ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   16ea0:	00813083          	ld	ra,8(sp)
   16ea4:	00013403          	ld	s0,0(sp)
   16ea8:	01010113          	addi	sp,sp,16
   16eac:	00008067          	jalr	zero,0(ra)

0000000000016eb0 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()>:
template <typename Elf> class elf_loader : public loader {
   16eb0:	ff010113          	addi	sp,sp,-16
   16eb4:	00113423          	sd	ra,8(sp)
   16eb8:	00813023          	sd	s0,0(sp)
   16ebc:	000377b7          	lui	a5,0x37
   16ec0:	92078793          	addi	a5,a5,-1760 # 36920 <vtable for dwarf::elf::elf_loader<elf::elf>+0x10>
   16ec4:	00f53023          	sd	a5,0(a0)
	if (_M_pi != nullptr)
   16ec8:	01053403          	ld	s0,16(a0)
   16ecc:	02040063          	beq	s0,zero,16eec <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x3c>
    if (__is_single_threaded())
   16ed0:	e181c783          	lbu	a5,-488(gp) # 42618 <__libc_single_threaded@GLIBC_2.32>
   16ed4:	02078463          	beq	a5,zero,16efc <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x4c>
    _Atomic_word __result = *__mem;
   16ed8:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   16edc:	fff5079b          	addiw	a5,a0,-1
   16ee0:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   16ee4:	00100793          	addi	a5,zero,1
   16ee8:	02f50263          	beq	a0,a5,16f0c <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x5c>
   16eec:	00813083          	ld	ra,8(sp)
   16ef0:	00013403          	ld	s0,0(sp)
   16ef4:	01010113          	addi	sp,sp,16
   16ef8:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   16efc:	fff00593          	addi	a1,zero,-1
   16f00:	03040513          	addi	a0,s0,48
   16f04:	c2cff0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16f08:	fddff06f          	jal	zero,16ee4 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x34>
	_M_dispose();
   16f0c:	00043783          	ld	a5,0(s0)
   16f10:	0107b783          	ld	a5,16(a5)
   16f14:	00040513          	addi	a0,s0,0
   16f18:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   16f1c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   16f20:	e181c783          	lbu	a5,-488(gp) # 42618 <__libc_single_threaded@GLIBC_2.32>
   16f24:	02078663          	beq	a5,zero,16f50 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0xa0>
    _Atomic_word __result = *__mem;
   16f28:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   16f2c:	fff5079b          	addiw	a5,a0,-1
   16f30:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   16f34:	00100793          	addi	a5,zero,1
   16f38:	faf51ae3          	bne	a0,a5,16eec <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x3c>
	    _M_destroy();
   16f3c:	00043783          	ld	a5,0(s0)
   16f40:	0187b783          	ld	a5,24(a5)
   16f44:	00040513          	addi	a0,s0,0
   16f48:	000780e7          	jalr	ra,0(a5)
   16f4c:	fa1ff06f          	jal	zero,16eec <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x3c>
      return __exchange_and_add(__mem, __val);
   16f50:	fff00593          	addi	a1,zero,-1
   16f54:	03440513          	addi	a0,s0,52
   16f58:	bd8ff0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16f5c:	fd9ff06f          	jal	zero,16f34 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x84>

0000000000016f60 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()>:
   16f60:	fe010113          	addi	sp,sp,-32
   16f64:	00113c23          	sd	ra,24(sp)
   16f68:	00813823          	sd	s0,16(sp)
   16f6c:	00913423          	sd	s1,8(sp)
   16f70:	00050413          	addi	s0,a0,0
   16f74:	000377b7          	lui	a5,0x37
   16f78:	92078793          	addi	a5,a5,-1760 # 36920 <vtable for dwarf::elf::elf_loader<elf::elf>+0x10>
   16f7c:	00f53023          	sd	a5,0(a0)
	if (_M_pi != nullptr)
   16f80:	01053483          	ld	s1,16(a0)
   16f84:	02048063          	beq	s1,zero,16fa4 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x44>
    if (__is_single_threaded())
   16f88:	e181c783          	lbu	a5,-488(gp) # 42618 <__libc_single_threaded@GLIBC_2.32>
   16f8c:	02078a63          	beq	a5,zero,16fc0 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x60>
    _Atomic_word __result = *__mem;
   16f90:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   16f94:	fff5079b          	addiw	a5,a0,-1
   16f98:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   16f9c:	00100793          	addi	a5,zero,1
   16fa0:	02f50863          	beq	a0,a5,16fd0 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x70>
   16fa4:	00040513          	addi	a0,s0,0
   16fa8:	d08ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   16fac:	01813083          	ld	ra,24(sp)
   16fb0:	01013403          	ld	s0,16(sp)
   16fb4:	00813483          	ld	s1,8(sp)
   16fb8:	02010113          	addi	sp,sp,32
   16fbc:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   16fc0:	fff00593          	addi	a1,zero,-1
   16fc4:	03048513          	addi	a0,s1,48
   16fc8:	b68ff0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16fcc:	fd1ff06f          	jal	zero,16f9c <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x3c>
	_M_dispose();
   16fd0:	0004b783          	ld	a5,0(s1)
   16fd4:	0107b783          	ld	a5,16(a5)
   16fd8:	00048513          	addi	a0,s1,0
   16fdc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   16fe0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   16fe4:	e181c783          	lbu	a5,-488(gp) # 42618 <__libc_single_threaded@GLIBC_2.32>
   16fe8:	02078663          	beq	a5,zero,17014 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0xb4>
    _Atomic_word __result = *__mem;
   16fec:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   16ff0:	fff5079b          	addiw	a5,a0,-1
   16ff4:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   16ff8:	00100793          	addi	a5,zero,1
   16ffc:	faf514e3          	bne	a0,a5,16fa4 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x44>
	    _M_destroy();
   17000:	0004b783          	ld	a5,0(s1)
   17004:	0187b783          	ld	a5,24(a5)
   17008:	00048513          	addi	a0,s1,0
   1700c:	000780e7          	jalr	ra,0(a5)
   17010:	f95ff06f          	jal	zero,16fa4 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x44>
      return __exchange_and_add(__mem, __val);
   17014:	fff00593          	addi	a1,zero,-1
   17018:	03448513          	addi	a0,s1,52
   1701c:	b14ff0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17020:	fd9ff06f          	jal	zero,16ff8 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x98>

0000000000017024 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>:
    {
   17024:	ff010113          	addi	sp,sp,-16
   17028:	00113423          	sd	ra,8(sp)
   1702c:	00813023          	sd	s0,0(sp)
   17030:	00050413          	addi	s0,a0,0
    if (__is_single_threaded())
   17034:	e181c783          	lbu	a5,-488(gp) # 42618 <__libc_single_threaded@GLIBC_2.32>
   17038:	02078463          	beq	a5,zero,17060 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x3c>
    _Atomic_word __result = *__mem;
   1703c:	03052503          	lw	a0,48(a0)
    *__mem += __val;
   17040:	fff5079b          	addiw	a5,a0,-1
   17044:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17048:	00100793          	addi	a5,zero,1
   1704c:	02f50263          	beq	a0,a5,17070 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x4c>
    }
   17050:	00813083          	ld	ra,8(sp)
   17054:	00013403          	ld	s0,0(sp)
   17058:	01010113          	addi	sp,sp,16
   1705c:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   17060:	fff00593          	addi	a1,zero,-1
   17064:	03050513          	addi	a0,a0,48
   17068:	ac8ff0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1706c:	fddff06f          	jal	zero,17048 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x24>
	_M_dispose();
   17070:	00043783          	ld	a5,0(s0)
   17074:	0107b783          	ld	a5,16(a5)
   17078:	00040513          	addi	a0,s0,0
   1707c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17080:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17084:	e181c783          	lbu	a5,-488(gp) # 42618 <__libc_single_threaded@GLIBC_2.32>
   17088:	02078663          	beq	a5,zero,170b4 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x90>
    _Atomic_word __result = *__mem;
   1708c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   17090:	fff5079b          	addiw	a5,a0,-1
   17094:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17098:	00100793          	addi	a5,zero,1
   1709c:	faf51ae3          	bne	a0,a5,17050 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x2c>
	    _M_destroy();
   170a0:	00043783          	ld	a5,0(s0)
   170a4:	0187b783          	ld	a5,24(a5)
   170a8:	00040513          	addi	a0,s0,0
   170ac:	000780e7          	jalr	ra,0(a5)
    }
   170b0:	fa1ff06f          	jal	zero,17050 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x2c>
      return __exchange_and_add(__mem, __val);
   170b4:	fff00593          	addi	a1,zero,-1
   170b8:	03440513          	addi	a0,s0,52
   170bc:	a74ff0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   170c0:	fd9ff06f          	jal	zero,17098 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x74>

00000000000170c4 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)>:

  const void *load(section_type section, size_t *size_out) {
   170c4:	f9010113          	addi	sp,sp,-112
   170c8:	06113423          	sd	ra,104(sp)
   170cc:	06813023          	sd	s0,96(sp)
   170d0:	04913c23          	sd	s1,88(sp)
   170d4:	05213823          	sd	s2,80(sp)
   170d8:	05313423          	sd	s3,72(sp)
   170dc:	00060913          	addi	s2,a2,0
    auto sec = f.get_section(section_type_to_name(section));
   170e0:	00850993          	addi	s3,a0,8
   170e4:	00058513          	addi	a0,a1,0
   170e8:	1ec160ef          	jal	ra,2d2d4 <dwarf::elf::section_type_to_name(dwarf::section_type)>
	: allocator_type(__a), _M_p(__dat) { }
   170ec:	02010793          	addi	a5,sp,32
   170f0:	00f13823          	sd	a5,16(sp)
      _GLIBCXX20_CONSTEXPR
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {
	// NB: Not required, but considered best practice.
	if (__s == 0)
   170f4:	04050863          	beq	a0,zero,17144 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x80>
   170f8:	00050493          	addi	s1,a0,0
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   170fc:	ac4ff0ef          	jal	ra,163c0 <strlen@plt>
   17100:	00050413          	addi	s0,a0,0
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   17104:	00a13423          	sd	a0,8(sp)

	if (__dnew > size_type(_S_local_capacity))
   17108:	00f00793          	addi	a5,zero,15
   1710c:	04a7e263          	bltu	a5,a0,17150 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x8c>
	if (__n == 1)
   17110:	00100793          	addi	a5,zero,1
   17114:	06f51463          	bne	a0,a5,1717c <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xb8>
	__c1 = __c2;
   17118:	0004c783          	lbu	a5,0(s1)
   1711c:	02f10023          	sb	a5,32(sp)

	this->_S_copy_chars(_M_data(), __beg, __end);

	__guard._M_guarded = 0;

	_M_set_length(__dnew);
   17120:	00813703          	ld	a4,8(sp)
      { _M_string_length = __length; }
   17124:	00e13c23          	sd	a4,24(sp)
   17128:	01013783          	ld	a5,16(sp)
   1712c:	00e787b3          	add	a5,a5,a4
   17130:	00078023          	sb	zero,0(a5)
   17134:	01010593          	addi	a1,sp,16
   17138:	00098513          	addi	a0,s3,0
   1713c:	2301c0ef          	jal	ra,3336c <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>
   17140:	0480006f          	jal	zero,17188 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xc4>
	  std::__throw_logic_error(__N("basic_string: "
   17144:	00036537          	lui	a0,0x36
   17148:	62050513          	addi	a0,a0,1568 # 36620 <__libc_csu_fini+0x8>
   1714c:	b14ff0ef          	jal	ra,16460 <std::__throw_logic_error(char const*)@plt>
	    _M_data(_M_create(__dnew, size_type(0)));
   17150:	00000613          	addi	a2,zero,0
   17154:	00810593          	addi	a1,sp,8
   17158:	01010513          	addi	a0,sp,16
   1715c:	d54ff0ef          	jal	ra,166b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
   17160:	00a13823          	sd	a0,16(sp)
      { _M_allocated_capacity = __capacity; }
   17164:	00813783          	ld	a5,8(sp)
   17168:	02f13023          	sd	a5,32(sp)
	  return __s1;
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1716c:	00040613          	addi	a2,s0,0
   17170:	00048593          	addi	a1,s1,0
   17174:	bdcff0ef          	jal	ra,16550 <memcpy@plt>
   17178:	fa9ff06f          	jal	zero,17120 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x5c>
	if (__n == 0)
   1717c:	fa0502e3          	beq	a0,zero,17120 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x5c>
      { return _M_dataplus._M_p; }
   17180:	02010513          	addi	a0,sp,32
   17184:	fe9ff06f          	jal	zero,1716c <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xa8>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17188:	00053783          	ld	a5,0(a0)
   1718c:	02f13823          	sd	a5,48(sp)
      : _M_pi(__r._M_pi)
   17190:	00853503          	ld	a0,8(a0)
   17194:	02a13c23          	sd	a0,56(sp)
	if (_M_pi != nullptr)
   17198:	00050c63          	beq	a0,zero,171b0 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xec>
    if (__is_single_threaded())
   1719c:	e181c783          	lbu	a5,-488(gp) # 42618 <__libc_single_threaded@GLIBC_2.32>
   171a0:	02078a63          	beq	a5,zero,171d4 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x110>
  { *__mem += __val; }
   171a4:	03052783          	lw	a5,48(a0)
   171a8:	0017879b          	addiw	a5,a5,1
   171ac:	02f52823          	sw	a5,48(a0)
   171b0:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   171b4:	02010793          	addi	a5,sp,32
   171b8:	00f50463          	beq	a0,a5,171c0 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xfc>
   171bc:	af4ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const noexcept
      { return _M_ptr != nullptr; }
   171c0:	03013403          	ld	s0,48(sp)
    if (!sec.valid())
   171c4:	02040863          	beq	s0,zero,171f4 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x130>
      return nullptr;
    *size_out = sec.size();
   171c8:	03010513          	addi	a0,sp,48
   171cc:	2d11b0ef          	jal	ra,32c9c <elf::section::size() const>
   171d0:	0140006f          	jal	zero,171e4 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x120>
      __atomic_add(__mem, __val);
   171d4:	00100593          	addi	a1,zero,1
   171d8:	03050513          	addi	a0,a0,48
   171dc:	924ff0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   171e0:	fd1ff06f          	jal	zero,171b0 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xec>
   171e4:	00a93023          	sd	a0,0(s2)
    return sec.data();
   171e8:	03010513          	addi	a0,sp,48
   171ec:	1811b0ef          	jal	ra,32b6c <elf::section::data() const>
   171f0:	00050413          	addi	s0,a0,0
	if (_M_pi != nullptr)
   171f4:	03813483          	ld	s1,56(sp)
   171f8:	02048063          	beq	s1,zero,17218 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x154>
    if (__is_single_threaded())
   171fc:	e181c783          	lbu	a5,-488(gp) # 42618 <__libc_single_threaded@GLIBC_2.32>
   17200:	02078c63          	beq	a5,zero,17238 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x174>
    _Atomic_word __result = *__mem;
   17204:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   17208:	fff5079b          	addiw	a5,a0,-1
   1720c:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17210:	00100793          	addi	a5,zero,1
   17214:	02f50a63          	beq	a0,a5,17248 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x184>
  }
   17218:	00040513          	addi	a0,s0,0
   1721c:	06813083          	ld	ra,104(sp)
   17220:	06013403          	ld	s0,96(sp)
   17224:	05813483          	ld	s1,88(sp)
   17228:	05013903          	ld	s2,80(sp)
   1722c:	04813983          	ld	s3,72(sp)
   17230:	07010113          	addi	sp,sp,112
   17234:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   17238:	fff00593          	addi	a1,zero,-1
   1723c:	03048513          	addi	a0,s1,48
   17240:	8f0ff0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17244:	fcdff06f          	jal	zero,17210 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x14c>
	_M_dispose();
   17248:	0004b783          	ld	a5,0(s1)
   1724c:	0107b783          	ld	a5,16(a5)
   17250:	00048513          	addi	a0,s1,0
   17254:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17258:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1725c:	e181c783          	lbu	a5,-488(gp) # 42618 <__libc_single_threaded@GLIBC_2.32>
   17260:	02078663          	beq	a5,zero,1728c <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x1c8>
    _Atomic_word __result = *__mem;
   17264:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   17268:	fff5079b          	addiw	a5,a0,-1
   1726c:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17270:	00100793          	addi	a5,zero,1
   17274:	faf512e3          	bne	a0,a5,17218 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x154>
	    _M_destroy();
   17278:	0004b783          	ld	a5,0(s1)
   1727c:	0187b783          	ld	a5,24(a5)
   17280:	00048513          	addi	a0,s1,0
   17284:	000780e7          	jalr	ra,0(a5)
   17288:	f91ff06f          	jal	zero,17218 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x154>
      return __exchange_and_add(__mem, __val);
   1728c:	fff00593          	addi	a1,zero,-1
   17290:	03448513          	addi	a0,s1,52
   17294:	89cff0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17298:	fd9ff06f          	jal	zero,17270 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x1ac>
      { return _M_dataplus._M_p; }
   1729c:	00050413          	addi	s0,a0,0
   172a0:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   172a4:	02010793          	addi	a5,sp,32
   172a8:	00f50463          	beq	a0,a5,172b0 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x1ec>
   172ac:	a04ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   172b0:	00040513          	addi	a0,s0,0
   172b4:	bdcff0ef          	jal	ra,16690 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   172b8:	00050413          	addi	s0,a0,0
   172bc:	03813503          	ld	a0,56(sp)
   172c0:	00050463          	beq	a0,zero,172c8 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x204>
	  _M_pi->_M_release();
   172c4:	d61ff0ef          	jal	ra,17024 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
   172c8:	00040513          	addi	a0,s0,0
   172cc:	bc4ff0ef          	jal	ra,16690 <_Unwind_Resume@plt>

00000000000172d0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()>:
  ~small_vector() {
   172d0:	00050693          	addi	a3,a0,0
    for (T *p = base; p < end; ++p)
   172d4:	03053503          	ld	a0,48(a0)
   172d8:	0386b783          	ld	a5,56(a3)
   172dc:	00f57a63          	bgeu	a0,a5,172f0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0x20>
   172e0:	00050793          	addi	a5,a0,0
   172e4:	00878793          	addi	a5,a5,8
   172e8:	0386b703          	ld	a4,56(a3)
   172ec:	fee7ece3          	bltu	a5,a4,172e4 <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0x14>
    end = base;
   172f0:	02a6bc23          	sd	a0,56(a3)
    if ((char *)base != buf)
   172f4:	02a68063          	beq	a3,a0,17314 <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0x44>
      delete[] (char *)base;
   172f8:	00050e63          	beq	a0,zero,17314 <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0x44>
  ~small_vector() {
   172fc:	ff010113          	addi	sp,sp,-16
   17300:	00113423          	sd	ra,8(sp)
      delete[] (char *)base;
   17304:	a5cff0ef          	jal	ra,16560 <operator delete[](void*)@plt>
  }
   17308:	00813083          	ld	ra,8(sp)
   1730c:	01010113          	addi	sp,sp,16
   17310:	00008067          	jalr	zero,0(ra)
   17314:	00008067          	jalr	zero,0(ra)

0000000000017318 <dwarf::dwarf::~dwarf()>:
    m->compilation_units.emplace_back(*this, infocur.get_section_offset());
    infocur.subsection();
  }
}

dwarf::~dwarf() {}
   17318:	ff010113          	addi	sp,sp,-16
   1731c:	00113423          	sd	ra,8(sp)
   17320:	00813023          	sd	s0,0(sp)
	if (_M_pi != nullptr)
   17324:	00853403          	ld	s0,8(a0)
   17328:	02040463          	beq	s0,zero,17350 <dwarf::dwarf::~dwarf()+0x38>
    if (__is_single_threaded())
   1732c:	0002b797          	auipc	a5,0x2b
   17330:	14c7b783          	ld	a5,332(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17334:	0007c783          	lbu	a5,0(a5)
   17338:	02078463          	beq	a5,zero,17360 <dwarf::dwarf::~dwarf()+0x48>
    _Atomic_word __result = *__mem;
   1733c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   17340:	fff5079b          	addiw	a5,a0,-1
   17344:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17348:	00100793          	addi	a5,zero,1
   1734c:	02f50263          	beq	a0,a5,17370 <dwarf::dwarf::~dwarf()+0x58>
   17350:	00813083          	ld	ra,8(sp)
   17354:	00013403          	ld	s0,0(sp)
   17358:	01010113          	addi	sp,sp,16
   1735c:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   17360:	fff00593          	addi	a1,zero,-1
   17364:	03040513          	addi	a0,s0,48
   17368:	fc9fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1736c:	fddff06f          	jal	zero,17348 <dwarf::dwarf::~dwarf()+0x30>
	_M_dispose();
   17370:	00043783          	ld	a5,0(s0)
   17374:	0107b783          	ld	a5,16(a5)
   17378:	00040513          	addi	a0,s0,0
   1737c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17380:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17384:	0002b797          	auipc	a5,0x2b
   17388:	0f47b783          	ld	a5,244(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1738c:	0007c783          	lbu	a5,0(a5)
   17390:	02078663          	beq	a5,zero,173bc <dwarf::dwarf::~dwarf()+0xa4>
    _Atomic_word __result = *__mem;
   17394:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   17398:	fff5079b          	addiw	a5,a0,-1
   1739c:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   173a0:	00100793          	addi	a5,zero,1
   173a4:	faf516e3          	bne	a0,a5,17350 <dwarf::dwarf::~dwarf()+0x38>
	    _M_destroy();
   173a8:	00043783          	ld	a5,0(s0)
   173ac:	0187b783          	ld	a5,24(a5)
   173b0:	00040513          	addi	a0,s0,0
   173b4:	000780e7          	jalr	ra,0(a5)
   173b8:	f99ff06f          	jal	zero,17350 <dwarf::dwarf::~dwarf()+0x38>
      return __exchange_and_add(__mem, __val);
   173bc:	fff00593          	addi	a1,zero,-1
   173c0:	03440513          	addi	a0,s0,52
   173c4:	f6dfe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   173c8:	fd9ff06f          	jal	zero,173a0 <dwarf::dwarf::~dwarf()+0x88>

00000000000173cc <dwarf::dwarf::compilation_units() const>:

const std::vector<compilation_unit> &dwarf::compilation_units() const {
   173cc:	ff010113          	addi	sp,sp,-16
   173d0:	00113423          	sd	ra,8(sp)
   173d4:	00813023          	sd	s0,0(sp)
   173d8:	00050413          	addi	s0,a0,0
  static std::vector<compilation_unit> empty;
   173dc:	e3818513          	addi	a0,gp,-456 # 42638 <guard variable for dwarf::dwarf::compilation_units() const::empty>
   173e0:	b00ff0ef          	jal	ra,166e0 <__cxa_guard_acquire@plt>
   173e4:	02051063          	bne	a0,zero,17404 <dwarf::dwarf::compilation_units() const+0x38>
      { return _M_ptr != nullptr; }
   173e8:	00043503          	ld	a0,0(s0)
  if (!m)
   173ec:	04050263          	beq	a0,zero,17430 <dwarf::dwarf::compilation_units() const+0x64>
    return empty;
  return m->compilation_units;
   173f0:	03050513          	addi	a0,a0,48
}
   173f4:	00813083          	ld	ra,8(sp)
   173f8:	00013403          	ld	s0,0(sp)
   173fc:	01010113          	addi	sp,sp,16
   17400:	00008067          	jalr	zero,0(ra)
	: _M_start(), _M_finish(), _M_end_of_storage()
   17404:	e2018593          	addi	a1,gp,-480 # 42620 <dwarf::dwarf::compilation_units() const::empty>
   17408:	0005b023          	sd	zero,0(a1)
   1740c:	0005b423          	sd	zero,8(a1)
   17410:	0005b823          	sd	zero,16(a1)
  static std::vector<compilation_unit> empty;
   17414:	e0018613          	addi	a2,gp,-512 # 42600 <__dso_handle>
   17418:	0002b517          	auipc	a0,0x2b
   1741c:	f5053503          	ld	a0,-176(a0) # 42368 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()@@Base+0x27750>
   17420:	aa0ff0ef          	jal	ra,166c0 <__cxa_atexit@plt>
   17424:	e3818513          	addi	a0,gp,-456 # 42638 <guard variable for dwarf::dwarf::compilation_units() const::empty>
   17428:	808ff0ef          	jal	ra,16430 <__cxa_guard_release@plt>
   1742c:	fbdff06f          	jal	zero,173e8 <dwarf::dwarf::compilation_units() const+0x1c>
    return empty;
   17430:	e2018513          	addi	a0,gp,-480 # 42620 <dwarf::dwarf::compilation_units() const::empty>
   17434:	fc1ff06f          	jal	zero,173f4 <dwarf::dwarf::compilation_units() const+0x28>

0000000000017438 <dwarf::unit::~unit()>:
        have_abbrevs(false) {}

  void force_abbrevs();
};

unit::~unit() {}
   17438:	ff010113          	addi	sp,sp,-16
   1743c:	00113423          	sd	ra,8(sp)
   17440:	00813023          	sd	s0,0(sp)
   17444:	0002b797          	auipc	a5,0x2b
   17448:	1647b783          	ld	a5,356(a5) # 425a8 <vtable for dwarf::unit@@Base+0xbcd8>
   1744c:	01078793          	addi	a5,a5,16
   17450:	00f53023          	sd	a5,0(a0)
	if (_M_pi != nullptr)
   17454:	01053403          	ld	s0,16(a0)
   17458:	02040463          	beq	s0,zero,17480 <dwarf::unit::~unit()+0x48>
    if (__is_single_threaded())
   1745c:	0002b797          	auipc	a5,0x2b
   17460:	01c7b783          	ld	a5,28(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17464:	0007c783          	lbu	a5,0(a5)
   17468:	02078463          	beq	a5,zero,17490 <dwarf::unit::~unit()+0x58>
    _Atomic_word __result = *__mem;
   1746c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   17470:	fff5079b          	addiw	a5,a0,-1
   17474:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17478:	00100793          	addi	a5,zero,1
   1747c:	02f50263          	beq	a0,a5,174a0 <dwarf::unit::~unit()+0x68>
   17480:	00813083          	ld	ra,8(sp)
   17484:	00013403          	ld	s0,0(sp)
   17488:	01010113          	addi	sp,sp,16
   1748c:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   17490:	fff00593          	addi	a1,zero,-1
   17494:	03040513          	addi	a0,s0,48
   17498:	e99fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1749c:	fddff06f          	jal	zero,17478 <dwarf::unit::~unit()+0x40>
	_M_dispose();
   174a0:	00043783          	ld	a5,0(s0)
   174a4:	0107b783          	ld	a5,16(a5)
   174a8:	00040513          	addi	a0,s0,0
   174ac:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   174b0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   174b4:	0002b797          	auipc	a5,0x2b
   174b8:	fc47b783          	ld	a5,-60(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   174bc:	0007c783          	lbu	a5,0(a5)
   174c0:	02078663          	beq	a5,zero,174ec <dwarf::unit::~unit()+0xb4>
    _Atomic_word __result = *__mem;
   174c4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   174c8:	fff5079b          	addiw	a5,a0,-1
   174cc:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   174d0:	00100793          	addi	a5,zero,1
   174d4:	faf516e3          	bne	a0,a5,17480 <dwarf::unit::~unit()+0x48>
	    _M_destroy();
   174d8:	00043783          	ld	a5,0(s0)
   174dc:	0187b783          	ld	a5,24(a5)
   174e0:	00040513          	addi	a0,s0,0
   174e4:	000780e7          	jalr	ra,0(a5)
   174e8:	f99ff06f          	jal	zero,17480 <dwarf::unit::~unit()+0x48>
      return __exchange_and_add(__mem, __val);
   174ec:	fff00593          	addi	a1,zero,-1
   174f0:	03440513          	addi	a0,s0,52
   174f4:	e3dfe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   174f8:	fd9ff06f          	jal	zero,174d0 <dwarf::unit::~unit()+0x98>

00000000000174fc <dwarf::unit::~unit()>:
   174fc:	ff010113          	addi	sp,sp,-16
   17500:	00113423          	sd	ra,8(sp)
   17504:	00813023          	sd	s0,0(sp)
   17508:	00050413          	addi	s0,a0,0
   1750c:	f2dff0ef          	jal	ra,17438 <dwarf::unit::~unit()>
   17510:	00040513          	addi	a0,s0,0
   17514:	f9dfe0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   17518:	00813083          	ld	ra,8(sp)
   1751c:	00013403          	ld	s0,0(sp)
   17520:	01010113          	addi	sp,sp,16
   17524:	00008067          	jalr	zero,0(ra)

0000000000017528 <dwarf::unit::get_dwarf() const>:

const dwarf &unit::get_dwarf() const { return m->file; }
   17528:	00853503          	ld	a0,8(a0)
   1752c:	00008067          	jalr	zero,0(ra)

0000000000017530 <dwarf::unit::get_section_offset() const>:

section_offset unit::get_section_offset() const { return m->offset; }
   17530:	00853783          	ld	a5,8(a0)
   17534:	0107b503          	ld	a0,16(a5)
   17538:	00008067          	jalr	zero,0(ra)

000000000001753c <dwarf::unit::data() const>:
    m->root.read(m->root_offset);
  }
  return m->root;
}

const std::shared_ptr<section> &unit::data() const { return m->subsec; }
   1753c:	00853503          	ld	a0,8(a0)
   17540:	01850513          	addi	a0,a0,24
   17544:	00008067          	jalr	zero,0(ra)

0000000000017548 <dwarf::type_unit::get_type_signature() const>:

  m = make_shared<impl>(file, offset, subsec, debug_abbrev_offset,
                        sub.get_section_offset(), type_signature, type_offset);
}

uint64_t type_unit::get_type_signature() const { return m->type_signature; }
   17548:	00853783          	ld	a5,8(a0)
   1754c:	0387b503          	ld	a0,56(a5)
   17550:	00008067          	jalr	zero,0(ra)

0000000000017554 <dwarf::dwarf::get_section(dwarf::section_type) const>:
std::shared_ptr<section> dwarf::get_section(section_type type) const {
   17554:	f5010113          	addi	sp,sp,-176
   17558:	0a113423          	sd	ra,168(sp)
   1755c:	0a813023          	sd	s0,160(sp)
   17560:	08913c23          	sd	s1,152(sp)
   17564:	09213823          	sd	s2,144(sp)
   17568:	09313423          	sd	s3,136(sp)
   1756c:	09413023          	sd	s4,128(sp)
   17570:	00050413          	addi	s0,a0,0
   17574:	00058493          	addi	s1,a1,0
   17578:	00c12623          	sw	a2,12(sp)
  if (type == section_type::info)
   1757c:	00300713          	addi	a4,zero,3
   17580:	06e60263          	beq	a2,a4,175e4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x90>
   17584:	00060793          	addi	a5,a2,0
  if (type == section_type::abbrev)
   17588:	0a061a63          	bne	a2,zero,1763c <dwarf::dwarf::get_section(dwarf::section_type) const+0xe8>
      { return _M_ptr; }
   1758c:	0005b783          	ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17590:	0207b703          	ld	a4,32(a5)
   17594:	00e53023          	sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   17598:	0287b503          	ld	a0,40(a5)
   1759c:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   175a0:	02050063          	beq	a0,zero,175c0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
    if (__is_single_threaded())
   175a4:	0002b797          	auipc	a5,0x2b
   175a8:	ed47b783          	ld	a5,-300(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   175ac:	0007c783          	lbu	a5,0(a5)
   175b0:	06078e63          	beq	a5,zero,1762c <dwarf::dwarf::get_section(dwarf::section_type) const+0xd8>
  { *__mem += __val; }
   175b4:	03052783          	lw	a5,48(a0)
   175b8:	0017879b          	addiw	a5,a5,1
   175bc:	02f52823          	sw	a5,48(a0)
}
   175c0:	00040513          	addi	a0,s0,0
   175c4:	0a813083          	ld	ra,168(sp)
   175c8:	0a013403          	ld	s0,160(sp)
   175cc:	09813483          	ld	s1,152(sp)
   175d0:	09013903          	ld	s2,144(sp)
   175d4:	08813983          	ld	s3,136(sp)
   175d8:	08013a03          	ld	s4,128(sp)
   175dc:	0b010113          	addi	sp,sp,176
   175e0:	00008067          	jalr	zero,0(ra)
      { return _M_ptr; }
   175e4:	0005b783          	ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   175e8:	0107b703          	ld	a4,16(a5)
   175ec:	00e53023          	sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   175f0:	0187b503          	ld	a0,24(a5)
   175f4:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   175f8:	fc0504e3          	beq	a0,zero,175c0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
    if (__is_single_threaded())
   175fc:	0002b797          	auipc	a5,0x2b
   17600:	e7c7b783          	ld	a5,-388(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17604:	0007c783          	lbu	a5,0(a5)
   17608:	00078a63          	beq	a5,zero,1761c <dwarf::dwarf::get_section(dwarf::section_type) const+0xc8>
  { *__mem += __val; }
   1760c:	03052783          	lw	a5,48(a0)
   17610:	0017879b          	addiw	a5,a5,1
   17614:	02f52823          	sw	a5,48(a0)
   17618:	fa9ff06f          	jal	zero,175c0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
      __atomic_add(__mem, __val);
   1761c:	00100593          	addi	a1,zero,1
   17620:	03050513          	addi	a0,a0,48
   17624:	cddfe0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17628:	f99ff06f          	jal	zero,175c0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
   1762c:	00100593          	addi	a1,zero,1
   17630:	03050513          	addi	a0,a0,48
   17634:	ccdfe0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17638:	f89ff06f          	jal	zero,175c0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
      { return _M_ptr; }
   1763c:	0005b583          	ld	a1,0(a1)
      _M_rightmost() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_header._M_right; }

      _Link_type
      _M_mbegin() const _GLIBCXX_NOEXCEPT
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   17640:	0985b703          	ld	a4,152(a1)
	  (this->_M_impl._M_header._M_parent);
      }

      _Base_ptr
      _M_end() _GLIBCXX_NOEXCEPT
      { return &this->_M_impl._M_header; }
   17644:	09058513          	addi	a0,a1,144
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Base_ptr __y,
		   const _Key& __k)
    {
      while (__x != 0)
   17648:	38070e63          	beq	a4,zero,179e4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x490>
   1764c:	00050613          	addi	a2,a0,0
   17650:	00c0006f          	jal	zero,1765c <dwarf::dwarf::get_section(dwarf::section_type) const+0x108>
      { return static_cast<_Link_type>(__x->_M_right); }
   17654:	01873703          	ld	a4,24(a4)
      while (__x != 0)
   17658:	00070c63          	beq	a4,zero,17670 <dwarf::dwarf::get_section(dwarf::section_type) const+0x11c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   1765c:	02072683          	lw	a3,32(a4)
   17660:	fef6cae3          	blt	a3,a5,17654 <dwarf::dwarf::get_section(dwarf::section_type) const+0x100>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   17664:	00070613          	addi	a2,a4,0
	  __y = __x, __x = _S_left(__x);
   17668:	01073703          	ld	a4,16(a4)
   1766c:	fedff06f          	jal	zero,17658 <dwarf::dwarf::get_section(dwarf::section_type) const+0x104>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   17670:	36c50a63          	beq	a0,a2,179e4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x490>
	      || _M_impl._M_key_compare(__k,
   17674:	02062703          	lw	a4,32(a2)
   17678:	36e7c663          	blt	a5,a4,179e4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x490>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1767c:	02863783          	ld	a5,40(a2)
   17680:	00f43023          	sd	a5,0(s0)
      : _M_pi(__r._M_pi)
   17684:	03063503          	ld	a0,48(a2)
   17688:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   1768c:	f2050ae3          	beq	a0,zero,175c0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
    if (__is_single_threaded())
   17690:	0002b797          	auipc	a5,0x2b
   17694:	de87b783          	ld	a5,-536(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17698:	0007c783          	lbu	a5,0(a5)
   1769c:	00078a63          	beq	a5,zero,176b0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x15c>
  { *__mem += __val; }
   176a0:	03052783          	lw	a5,48(a0)
   176a4:	0017879b          	addiw	a5,a5,1
   176a8:	02f52823          	sw	a5,48(a0)
   176ac:	f15ff06f          	jal	zero,175c0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
      __atomic_add(__mem, __val);
   176b0:	00100593          	addi	a1,zero,1
   176b4:	03050513          	addi	a0,a0,48
   176b8:	c49fe0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   176bc:	f05ff06f          	jal	zero,175c0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
                       " section missing");
   176c0:	01000513          	addi	a0,zero,16
   176c4:	d0dfe0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   176c8:	00050493          	addi	s1,a0,0
    throw format_error(std::string(elf::section_type_to_name(type)) +
   176cc:	00c12503          	lw	a0,12(sp)
   176d0:	405150ef          	jal	ra,2d2d4 <dwarf::elf::section_type_to_name(dwarf::section_type)>
   176d4:	00050593          	addi	a1,a0,0
   176d8:	05810613          	addi	a2,sp,88
   176dc:	01010513          	addi	a0,sp,16
   176e0:	eb1fe0ef          	jal	ra,16590 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
	      const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }
   176e4:	0001f597          	auipc	a1,0x1f
   176e8:	2bc58593          	addi	a1,a1,700 # 369a0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x30>
   176ec:	01010513          	addi	a0,sp,16
   176f0:	850ff0ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   176f4:	00050593          	addi	a1,a0,0
   176f8:	03010413          	addi	s0,sp,48
   176fc:	00040513          	addi	a0,s0,0
   17700:	d11fe0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   17704:	00040593          	addi	a1,s0,0
   17708:	00048513          	addi	a0,s1,0
   1770c:	e35fe0ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   17710:	0002b797          	auipc	a5,0x2b
   17714:	e407b783          	ld	a5,-448(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   17718:	01078793          	addi	a5,a5,16
   1771c:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   17720:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   17724:	04010793          	addi	a5,sp,64
   17728:	00f50463          	beq	a0,a5,17730 <dwarf::dwarf::get_section(dwarf::section_type) const+0x1dc>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1772c:	d85fe0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   17730:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   17734:	02010793          	addi	a5,sp,32
   17738:	00f50463          	beq	a0,a5,17740 <dwarf::dwarf::get_section(dwarf::section_type) const+0x1ec>
   1773c:	d75fe0ef          	jal	ra,164b0 <operator delete(void*)@plt>
                       " section missing");
   17740:	0002b617          	auipc	a2,0x2b
   17744:	c3863603          	ld	a2,-968(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   17748:	0002b597          	auipc	a1,0x2b
   1774c:	b605b583          	ld	a1,-1184(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   17750:	00048513          	addi	a0,s1,0
   17754:	f0dfe0ef          	jal	ra,16660 <__cxa_throw@plt>
      { return static_cast<_Link_type>(__x->_M_right); }
   17758:	0187b783          	ld	a5,24(a5)
      while (__x != 0)
   1775c:	00078c63          	beq	a5,zero,17774 <dwarf::dwarf::get_section(dwarf::section_type) const+0x220>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   17760:	0207a703          	lw	a4,32(a5)
   17764:	fed74ae3          	blt	a4,a3,17758 <dwarf::dwarf::get_section(dwarf::section_type) const+0x204>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   17768:	00078913          	addi	s2,a5,0
	  __y = __x, __x = _S_left(__x);
   1776c:	0107b783          	ld	a5,16(a5)
   17770:	fedff06f          	jal	zero,1775c <dwarf::dwarf::get_section(dwarf::section_type) const+0x208>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   17774:	10c90663          	beq	s2,a2,17880 <dwarf::dwarf::get_section(dwarf::section_type) const+0x32c>
   17778:	02092783          	lw	a5,32(s2)
   1777c:	02f6da63          	bge	a3,a5,177b0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x25c>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }
   17780:	00c10793          	addi	a5,sp,12
   17784:	06f13423          	sd	a5,104(sp)
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   17788:	06010713          	addi	a4,sp,96
   1778c:	06810693          	addi	a3,sp,104
   17790:	0001f617          	auipc	a2,0x1f
   17794:	52060613          	addi	a2,a2,1312 # 36cb0 <std::piecewise_construct>
   17798:	00090593          	addi	a1,s2,0
   1779c:	08850513          	addi	a0,a0,136
   177a0:	0002b317          	auipc	t1,0x2b
   177a4:	bf833303          	ld	t1,-1032(t1) # 42398 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)@@Base+0x2656c>
   177a8:	000300e7          	jalr	ra,0(t1)
   177ac:	00050913          	addi	s2,a0,0
      { return _M_ptr; }
   177b0:	0004b783          	ld	a5,0(s1)
   177b4:	0107ba03          	ld	s4,16(a5)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   177b8:	06000513          	addi	a0,zero,96
   177bc:	d05fe0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   177c0:	00052423          	sw	zero,8(a0)
   177c4:	00052623          	sw	zero,12(a0)
   177c8:	00052823          	sw	zero,16(a0)
   177cc:	00052a23          	sw	zero,20(a0)
   177d0:	00052c23          	sw	zero,24(a0)
   177d4:	00052e23          	sw	zero,28(a0)
   177d8:	02053023          	sd	zero,32(a0)
   177dc:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   177e0:	00100793          	addi	a5,zero,1
   177e4:	02f52823          	sw	a5,48(a0)
   177e8:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   177ec:	0002b797          	auipc	a5,0x2b
   177f0:	dcc7b783          	ld	a5,-564(a5) # 425b8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc40>
   177f4:	01078793          	addi	a5,a5,16
   177f8:	00f53023          	sd	a5,0(a0)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   177fc:	01ca2703          	lw	a4,28(s4)
  const byte_order ord;
  unsigned addr_size;

  section(section_type type, const void *begin, section_length length,
          byte_order ord, format fmt = format::unknown, unsigned addr_size = 0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   17800:	00a00793          	addi	a5,zero,10
   17804:	02f52c23          	sw	a5,56(a0)
   17808:	05353023          	sd	s3,64(a0)
   1780c:	05013783          	ld	a5,80(sp)
   17810:	00f987b3          	add	a5,s3,a5
   17814:	04f53423          	sd	a5,72(a0)
   17818:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   1781c:	04e52a23          	sw	a4,84(a0)
   17820:	04052c23          	sw	zero,88(a0)
   17824:	03850793          	addi	a5,a0,56
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   17828:	02f93423          	sd	a5,40(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1782c:	03093983          	ld	s3,48(s2)
	__r._M_pi = _M_pi;
   17830:	02a93823          	sd	a0,48(s2)
	if (_M_pi != nullptr)
   17834:	02098463          	beq	s3,zero,1785c <dwarf::dwarf::get_section(dwarf::section_type) const+0x308>
    if (__is_single_threaded())
   17838:	0002b797          	auipc	a5,0x2b
   1783c:	c407b783          	ld	a5,-960(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17840:	0007c783          	lbu	a5,0(a5)
   17844:	04078263          	beq	a5,zero,17888 <dwarf::dwarf::get_section(dwarf::section_type) const+0x334>
    _Atomic_word __result = *__mem;
   17848:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   1784c:	fff5079b          	addiw	a5,a0,-1
   17850:	02f9a823          	sw	a5,48(s3)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17854:	00100793          	addi	a5,zero,1
   17858:	04f50063          	beq	a0,a5,17898 <dwarf::dwarf::get_section(dwarf::section_type) const+0x344>
      { return _M_ptr; }
   1785c:	0004b503          	ld	a0,0(s1)
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   17860:	09853783          	ld	a5,152(a0)
      { return &this->_M_impl._M_header; }
   17864:	09050613          	addi	a2,a0,144
      while (__x != 0)
   17868:	10078c63          	beq	a5,zero,17980 <dwarf::dwarf::get_section(dwarf::section_type) const+0x42c>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
   1786c:	00c12683          	lw	a3,12(sp)
   17870:	00060593          	addi	a1,a2,0
   17874:	08c0006f          	jal	zero,17900 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3ac>
   17878:	00060913          	addi	s2,a2,0
   1787c:	f05ff06f          	jal	zero,17780 <dwarf::dwarf::get_section(dwarf::section_type) const+0x22c>
   17880:	00060913          	addi	s2,a2,0
   17884:	efdff06f          	jal	zero,17780 <dwarf::dwarf::get_section(dwarf::section_type) const+0x22c>
      return __exchange_and_add(__mem, __val);
   17888:	fff00593          	addi	a1,zero,-1
   1788c:	03098513          	addi	a0,s3,48
   17890:	aa1fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17894:	fc1ff06f          	jal	zero,17854 <dwarf::dwarf::get_section(dwarf::section_type) const+0x300>
	_M_dispose();
   17898:	0009b783          	ld	a5,0(s3)
   1789c:	0107b783          	ld	a5,16(a5)
   178a0:	00098513          	addi	a0,s3,0
   178a4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   178a8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   178ac:	0002b797          	auipc	a5,0x2b
   178b0:	bcc7b783          	ld	a5,-1076(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   178b4:	0007c783          	lbu	a5,0(a5)
   178b8:	02078663          	beq	a5,zero,178e4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x390>
    _Atomic_word __result = *__mem;
   178bc:	0349a783          	lw	a5,52(s3)
    *__mem += __val;
   178c0:	fff7871b          	addiw	a4,a5,-1
   178c4:	02e9aa23          	sw	a4,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   178c8:	00100713          	addi	a4,zero,1
   178cc:	f8e798e3          	bne	a5,a4,1785c <dwarf::dwarf::get_section(dwarf::section_type) const+0x308>
	    _M_destroy();
   178d0:	0009b783          	ld	a5,0(s3)
   178d4:	0187b783          	ld	a5,24(a5)
   178d8:	00098513          	addi	a0,s3,0
   178dc:	000780e7          	jalr	ra,0(a5)
   178e0:	f7dff06f          	jal	zero,1785c <dwarf::dwarf::get_section(dwarf::section_type) const+0x308>
      return __exchange_and_add(__mem, __val);
   178e4:	fff00593          	addi	a1,zero,-1
   178e8:	03498513          	addi	a0,s3,52
   178ec:	a45fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   178f0:	00050793          	addi	a5,a0,0
   178f4:	fd5ff06f          	jal	zero,178c8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x374>
      { return static_cast<_Link_type>(__x->_M_right); }
   178f8:	0187b783          	ld	a5,24(a5)
      while (__x != 0)
   178fc:	00078c63          	beq	a5,zero,17914 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3c0>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   17900:	0207a703          	lw	a4,32(a5)
   17904:	fed74ae3          	blt	a4,a3,178f8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3a4>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   17908:	00078593          	addi	a1,a5,0
	  __y = __x, __x = _S_left(__x);
   1790c:	0107b783          	ld	a5,16(a5)
   17910:	fedff06f          	jal	zero,178fc <dwarf::dwarf::get_section(dwarf::section_type) const+0x3a8>
	if (__i == end() || key_comp()(__k, (*__i).first))
   17914:	06c58a63          	beq	a1,a2,17988 <dwarf::dwarf::get_section(dwarf::section_type) const+0x434>
   17918:	0205a783          	lw	a5,32(a1)
   1791c:	02f6d863          	bge	a3,a5,1794c <dwarf::dwarf::get_section(dwarf::section_type) const+0x3f8>
   17920:	00c10793          	addi	a5,sp,12
   17924:	06f13c23          	sd	a5,120(sp)
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   17928:	07010713          	addi	a4,sp,112
   1792c:	07810693          	addi	a3,sp,120
   17930:	0001f617          	auipc	a2,0x1f
   17934:	38060613          	addi	a2,a2,896 # 36cb0 <std::piecewise_construct>
   17938:	08850513          	addi	a0,a0,136
   1793c:	0002b317          	auipc	t1,0x2b
   17940:	a5c33303          	ld	t1,-1444(t1) # 42398 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)@@Base+0x2656c>
   17944:	000300e7          	jalr	ra,0(t1)
   17948:	00050593          	addi	a1,a0,0
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1794c:	0285b783          	ld	a5,40(a1)
   17950:	00f43023          	sd	a5,0(s0)
      : _M_pi(__r._M_pi)
   17954:	0305b503          	ld	a0,48(a1)
   17958:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   1795c:	c60502e3          	beq	a0,zero,175c0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
    if (__is_single_threaded())
   17960:	0002b797          	auipc	a5,0x2b
   17964:	b187b783          	ld	a5,-1256(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17968:	0007c783          	lbu	a5,0(a5)
   1796c:	02078263          	beq	a5,zero,17990 <dwarf::dwarf::get_section(dwarf::section_type) const+0x43c>
  { *__mem += __val; }
   17970:	03052783          	lw	a5,48(a0)
   17974:	0017879b          	addiw	a5,a5,1
   17978:	02f52823          	sw	a5,48(a0)
   1797c:	c45ff06f          	jal	zero,175c0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
      while (__x != 0)
   17980:	00060593          	addi	a1,a2,0
   17984:	f9dff06f          	jal	zero,17920 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3cc>
   17988:	00060593          	addi	a1,a2,0
   1798c:	f95ff06f          	jal	zero,17920 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3cc>
      __atomic_add(__mem, __val);
   17990:	00100593          	addi	a1,zero,1
   17994:	03050513          	addi	a0,a0,48
   17998:	969fe0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1799c:	c25ff06f          	jal	zero,175c0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
      { return _M_dataplus._M_p; }
   179a0:	00050413          	addi	s0,a0,0
   179a4:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   179a8:	04010793          	addi	a5,sp,64
   179ac:	00f50463          	beq	a0,a5,179b4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x460>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   179b0:	b01fe0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   179b4:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   179b8:	02010793          	addi	a5,sp,32
   179bc:	00f50463          	beq	a0,a5,179c4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x470>
   179c0:	af1fe0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   179c4:	00048513          	addi	a0,s1,0
   179c8:	aa9fe0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   179cc:	00040513          	addi	a0,s0,0
   179d0:	cc1fe0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   179d4:	00050413          	addi	s0,a0,0
   179d8:	fddff06f          	jal	zero,179b4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x460>
   179dc:	00050413          	addi	s0,a0,0
   179e0:	fe5ff06f          	jal	zero,179c4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x470>
      { return _M_ptr; }
   179e4:	0005b503          	ld	a0,0(a1)
  const void *data = m->l->load(type, &size);
   179e8:	00053703          	ld	a4,0(a0)
   179ec:	01073703          	ld	a4,16(a4)
   179f0:	05010613          	addi	a2,sp,80
   179f4:	00078593          	addi	a1,a5,0
   179f8:	000700e7          	jalr	ra,0(a4)
   179fc:	00050993          	addi	s3,a0,0
  if (!data)
   17a00:	cc0500e3          	beq	a0,zero,176c0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x16c>
   17a04:	0004b503          	ld	a0,0(s1)
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   17a08:	09853783          	ld	a5,152(a0)
      { return &this->_M_impl._M_header; }
   17a0c:	09050613          	addi	a2,a0,144
      while (__x != 0)
   17a10:	e60784e3          	beq	a5,zero,17878 <dwarf::dwarf::get_section(dwarf::section_type) const+0x324>
   17a14:	00c12683          	lw	a3,12(sp)
   17a18:	00060913          	addi	s2,a2,0
   17a1c:	d45ff06f          	jal	zero,17760 <dwarf::dwarf::get_section(dwarf::section_type) const+0x20c>

0000000000017a20 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)>:
compilation_unit::compilation_unit(const dwarf &file, section_offset offset) {
   17a20:	f3010113          	addi	sp,sp,-208
   17a24:	0c113423          	sd	ra,200(sp)
   17a28:	0c813023          	sd	s0,192(sp)
   17a2c:	0a913c23          	sd	s1,184(sp)
   17a30:	0b213823          	sd	s2,176(sp)
   17a34:	0b313423          	sd	s3,168(sp)
   17a38:	0b413023          	sd	s4,160(sp)
   17a3c:	09513c23          	sd	s5,152(sp)
   17a40:	09613823          	sd	s6,144(sp)
   17a44:	00050493          	addi	s1,a0,0
   17a48:	00058913          	addi	s2,a1,0
   17a4c:	00060993          	addi	s3,a2,0
      : _M_ptr(0), _M_refcount()
   17a50:	00053423          	sd	zero,8(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   17a54:	00053823          	sd	zero,16(a0)
   17a58:	0002b797          	auipc	a5,0x2b
   17a5c:	8587b783          	ld	a5,-1960(a5) # 422b0 <vtable for dwarf::compilation_unit@@Base+0xb9c0>
   17a60:	01078793          	addi	a5,a5,16
   17a64:	00f53023          	sd	a5,0(a0)
  cursor cur(file.get_section(section_type::info), offset);
   17a68:	00300613          	addi	a2,zero,3
   17a6c:	08010513          	addi	a0,sp,128
   17a70:	ae5ff0ef          	jal	ra,17554 <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17a74:	08013783          	ld	a5,128(sp)
   17a78:	00f13823          	sd	a5,16(sp)
      : _M_pi(__r._M_pi)
   17a7c:	08813503          	ld	a0,136(sp)
   17a80:	00a13c23          	sd	a0,24(sp)
	if (_M_pi != nullptr)
   17a84:	02050063          	beq	a0,zero,17aa4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x84>
    if (__is_single_threaded())
   17a88:	0002b797          	auipc	a5,0x2b
   17a8c:	9f07b783          	ld	a5,-1552(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17a90:	0007c783          	lbu	a5,0(a5)
   17a94:	04078e63          	beq	a5,zero,17af0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xd0>
  { *__mem += __val; }
   17a98:	03052783          	lw	a5,48(a0)
   17a9c:	0017879b          	addiw	a5,a5,1
   17aa0:	02f52823          	sw	a5,48(a0)
  std::shared_ptr<section> sec;
  const char *pos;

  cursor() : pos(nullptr) {}
  cursor(const std::shared_ptr<section> sec, section_offset offset = 0)
      : sec(sec), pos(sec->begin + offset) {}
   17aa4:	08013783          	ld	a5,128(sp)
   17aa8:	0087b783          	ld	a5,8(a5)
   17aac:	013787b3          	add	a5,a5,s3
   17ab0:	02f13023          	sd	a5,32(sp)
	if (_M_pi != nullptr)
   17ab4:	08813403          	ld	s0,136(sp)
   17ab8:	02040463          	beq	s0,zero,17ae0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xc0>
    if (__is_single_threaded())
   17abc:	0002b797          	auipc	a5,0x2b
   17ac0:	9bc7b783          	ld	a5,-1604(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17ac4:	0007c783          	lbu	a5,0(a5)
   17ac8:	02078c63          	beq	a5,zero,17b00 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xe0>
    _Atomic_word __result = *__mem;
   17acc:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   17ad0:	fff5079b          	addiw	a5,a0,-1
   17ad4:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17ad8:	00100793          	addi	a5,zero,1
   17adc:	02f50a63          	beq	a0,a5,17b10 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xf0>
  std::shared_ptr<section> subsec = cur.subsection();
   17ae0:	01010593          	addi	a1,sp,16
   17ae4:	00010513          	addi	a0,sp,0
   17ae8:	558050ef          	jal	ra,1d040 <dwarf::cursor::subsection()>
   17aec:	0800006f          	jal	zero,17b6c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x14c>
      __atomic_add(__mem, __val);
   17af0:	00100593          	addi	a1,zero,1
   17af4:	03050513          	addi	a0,a0,48
   17af8:	809fe0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17afc:	fa9ff06f          	jal	zero,17aa4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x84>
      return __exchange_and_add(__mem, __val);
   17b00:	fff00593          	addi	a1,zero,-1
   17b04:	03040513          	addi	a0,s0,48
   17b08:	829fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17b0c:	fcdff06f          	jal	zero,17ad8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xb8>
	_M_dispose();
   17b10:	00043783          	ld	a5,0(s0)
   17b14:	0107b783          	ld	a5,16(a5)
   17b18:	00040513          	addi	a0,s0,0
   17b1c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17b20:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17b24:	0002b797          	auipc	a5,0x2b
   17b28:	9547b783          	ld	a5,-1708(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17b2c:	0007c783          	lbu	a5,0(a5)
   17b30:	02078663          	beq	a5,zero,17b5c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x13c>
    _Atomic_word __result = *__mem;
   17b34:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   17b38:	fff5079b          	addiw	a5,a0,-1
   17b3c:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17b40:	00100793          	addi	a5,zero,1
   17b44:	f8f51ee3          	bne	a0,a5,17ae0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xc0>
	    _M_destroy();
   17b48:	00043783          	ld	a5,0(s0)
   17b4c:	0187b783          	ld	a5,24(a5)
   17b50:	00040513          	addi	a0,s0,0
   17b54:	000780e7          	jalr	ra,0(a5)
   17b58:	f89ff06f          	jal	zero,17ae0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xc0>
      return __exchange_and_add(__mem, __val);
   17b5c:	fff00593          	addi	a1,zero,-1
   17b60:	03440513          	addi	a0,s0,52
   17b64:	fccfe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17b68:	fd9ff06f          	jal	zero,17b40 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x120>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17b6c:	00013a03          	ld	s4,0(sp)
      : _M_pi(__r._M_pi)
   17b70:	00813403          	ld	s0,8(sp)
	if (_M_pi != nullptr)
   17b74:	6e040c63          	beq	s0,zero,1826c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x84c>
    if (__is_single_threaded())
   17b78:	0002b797          	auipc	a5,0x2b
   17b7c:	9007b783          	ld	a5,-1792(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17b80:	0007c783          	lbu	a5,0(a5)
   17b84:	0a078663          	beq	a5,zero,17c30 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x210>
  { *__mem += __val; }
   17b88:	03042783          	lw	a5,48(s0)
   17b8c:	0017879b          	addiw	a5,a5,1
   17b90:	02f42823          	sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17b94:	03413423          	sd	s4,40(sp)
      : _M_pi(__r._M_pi)
   17b98:	02813823          	sd	s0,48(sp)
    if (__is_single_threaded())
   17b9c:	0002b797          	auipc	a5,0x2b
   17ba0:	8dc7b783          	ld	a5,-1828(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17ba4:	0007c783          	lbu	a5,0(a5)
   17ba8:	08078c63          	beq	a5,zero,17c40 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x220>
  { *__mem += __val; }
   17bac:	03042783          	lw	a5,48(s0)
   17bb0:	0017879b          	addiw	a5,a5,1
   17bb4:	02f42823          	sw	a5,48(s0)
   17bb8:	008a3783          	ld	a5,8(s4)
   17bbc:	02f13c23          	sd	a5,56(sp)
    if (__is_single_threaded())
   17bc0:	0002b797          	auipc	a5,0x2b
   17bc4:	8b87b783          	ld	a5,-1864(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17bc8:	0007c783          	lbu	a5,0(a5)
   17bcc:	08078263          	beq	a5,zero,17c50 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x230>
    _Atomic_word __result = *__mem;
   17bd0:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   17bd4:	fff5079b          	addiw	a5,a0,-1
   17bd8:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17bdc:	00100793          	addi	a5,zero,1
   17be0:	68f51e63          	bne	a0,a5,1827c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x85c>
	_M_dispose();
   17be4:	00043783          	ld	a5,0(s0)
   17be8:	0107b783          	ld	a5,16(a5)
   17bec:	00040513          	addi	a0,s0,0
   17bf0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17bf4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17bf8:	0002b797          	auipc	a5,0x2b
   17bfc:	8807b783          	ld	a5,-1920(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17c00:	0007c783          	lbu	a5,0(a5)
   17c04:	04078e63          	beq	a5,zero,17c60 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x240>
    _Atomic_word __result = *__mem;
   17c08:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   17c0c:	fff5079b          	addiw	a5,a0,-1
   17c10:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17c14:	00100793          	addi	a5,zero,1
   17c18:	66f51263          	bne	a0,a5,1827c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x85c>
	    _M_destroy();
   17c1c:	00043783          	ld	a5,0(s0)
   17c20:	0187b783          	ld	a5,24(a5)
   17c24:	00040513          	addi	a0,s0,0
   17c28:	000780e7          	jalr	ra,0(a5)
   17c2c:	6500006f          	jal	zero,1827c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x85c>
      __atomic_add(__mem, __val);
   17c30:	00100593          	addi	a1,zero,1
   17c34:	03040513          	addi	a0,s0,48
   17c38:	ec8fe0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17c3c:	f59ff06f          	jal	zero,17b94 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x174>
   17c40:	00100593          	addi	a1,zero,1
   17c44:	03040513          	addi	a0,s0,48
   17c48:	eb8fe0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17c4c:	f6dff06f          	jal	zero,17bb8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x198>
      return __exchange_and_add(__mem, __val);
   17c50:	fff00593          	addi	a1,zero,-1
   17c54:	03040513          	addi	a0,s0,48
   17c58:	ed8fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17c5c:	f81ff06f          	jal	zero,17bdc <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x1bc>
   17c60:	fff00593          	addi	a1,zero,-1
   17c64:	03440513          	addi	a0,s0,52
   17c68:	ec8fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17c6c:	fa9ff06f          	jal	zero,17c14 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x1f4>
  section_offset offset();
  void string(std::string &out);
  const char *cstr(size_t *size_out = nullptr);

  void ensure(section_offset bytes) {
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   17c70:	02813783          	ld	a5,40(sp)
   17c74:	0107b703          	ld	a4,16(a5)
   17c78:	03813783          	ld	a5,56(sp)
   17c7c:	40f70633          	sub	a2,a4,a5
   17c80:	00100693          	addi	a3,zero,1
   17c84:	00c6f463          	bgeu	a3,a2,17c8c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x26c>
   17c88:	00e7e663          	bltu	a5,a4,17c94 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x274>
      underflow();
   17c8c:	02810513          	addi	a0,sp,40
   17c90:	66d040ef          	jal	ra,1cafc <dwarf::cursor::underflow()>

  template <typename T> T fixed() {
    ensure(sizeof(T));
    static_assert(sizeof(T) <= 8, "T too big");
    uint64_t val = 0;
    const unsigned char *p = (const unsigned char *)pos;
   17c94:	03813703          	ld	a4,56(sp)
    if (sec->ord == byte_order::lsb) {
   17c98:	02813783          	ld	a5,40(sp)
   17c9c:	01c7a783          	lw	a5,28(a5)
   17ca0:	04079263          	bne	a5,zero,17ce4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x2c4>
      for (unsigned i = 0; i < sizeof(T); i++)
        val |= ((uint64_t)p[i]) << (i * 8);
   17ca4:	00174783          	lbu	a5,1(a4)
   17ca8:	00879793          	slli	a5,a5,0x8
   17cac:	00074683          	lbu	a3,0(a4)
   17cb0:	00d7e7b3          	or	a5,a5,a3
    } else {
      for (unsigned i = 0; i < sizeof(T); i++)
        val = (val << 8) | (uint64_t)p[i];
    }
    pos += sizeof(T);
   17cb4:	00270713          	addi	a4,a4,2
   17cb8:	02e13c23          	sd	a4,56(sp)
    return (T)val;
   17cbc:	03079413          	slli	s0,a5,0x30
   17cc0:	03045413          	srli	s0,s0,0x30
  if (version < 2 || version > 4)
   17cc4:	ffe7879b          	addiw	a5,a5,-2
   17cc8:	03079793          	slli	a5,a5,0x30
   17ccc:	0307d793          	srli	a5,a5,0x30
   17cd0:	00200713          	addi	a4,zero,2
   17cd4:	02f76263          	bltu	a4,a5,17cf8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x2d8>
  section_offset debug_abbrev_offset = sub.offset();
   17cd8:	02810513          	addi	a0,sp,40
   17cdc:	5ac050ef          	jal	ra,1d288 <dwarf::cursor::offset()>
   17ce0:	0bc0006f          	jal	zero,17d9c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x37c>
        val = (val << 8) | (uint64_t)p[i];
   17ce4:	00074783          	lbu	a5,0(a4)
   17ce8:	00879793          	slli	a5,a5,0x8
   17cec:	00174683          	lbu	a3,1(a4)
   17cf0:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   17cf4:	fc1ff06f          	jal	zero,17cb4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x294>
                       std::to_string(version));
   17cf8:	01000513          	addi	a0,zero,16
   17cfc:	ed4fe0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   17d00:	00050913          	addi	s2,a0,0
   17d04:	00040593          	addi	a1,s0,0
   17d08:	06010413          	addi	s0,sp,96
   17d0c:	00040513          	addi	a0,s0,0
   17d10:	0002a317          	auipc	t1,0x2a
   17d14:	77833303          	ld	t1,1912(t1) # 42488 <std::__cxx11::to_string(int)@@Base+0x27684>
   17d18:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   17d1c:	0001f617          	auipc	a2,0x1f
   17d20:	c9c60613          	addi	a2,a2,-868 # 369b8 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x48>
   17d24:	00000593          	addi	a1,zero,0
   17d28:	00040513          	addi	a0,s0,0
   17d2c:	e14fe0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   17d30:	00050593          	addi	a1,a0,0
   17d34:	04010413          	addi	s0,sp,64
   17d38:	00040513          	addi	a0,s0,0
   17d3c:	ed4fe0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   17d40:	00040593          	addi	a1,s0,0
   17d44:	00090513          	addi	a0,s2,0
   17d48:	ff8fe0ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   17d4c:	0002b797          	auipc	a5,0x2b
   17d50:	8047b783          	ld	a5,-2044(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   17d54:	01078793          	addi	a5,a5,16
   17d58:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   17d5c:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   17d60:	05010793          	addi	a5,sp,80
   17d64:	00f50463          	beq	a0,a5,17d6c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x34c>
   17d68:	f48fe0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   17d6c:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   17d70:	07010793          	addi	a5,sp,112
   17d74:	00f50463          	beq	a0,a5,17d7c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x35c>
   17d78:	f38fe0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   17d7c:	0002a617          	auipc	a2,0x2a
   17d80:	5fc63603          	ld	a2,1532(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   17d84:	0002a597          	auipc	a1,0x2a
   17d88:	5245b583          	ld	a1,1316(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   17d8c:	00090513          	addi	a0,s2,0
   17d90:	8d1fe0ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   17d94:	00050413          	addi	s0,a0,0
   17d98:	4480006f          	jal	zero,181e0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7c0>
  section_offset debug_abbrev_offset = sub.offset();
   17d9c:	00050a93          	addi	s5,a0,0
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   17da0:	02813783          	ld	a5,40(sp)
   17da4:	0107b703          	ld	a4,16(a5)
   17da8:	03813783          	ld	a5,56(sp)
   17dac:	00e7e663          	bltu	a5,a4,17db8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x398>
      underflow();
   17db0:	02810513          	addi	a0,sp,40
   17db4:	549040ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   17db8:	03813783          	ld	a5,56(sp)
      { return _M_ptr; }
   17dbc:	02813703          	ld	a4,40(sp)
    if (sec->ord == byte_order::lsb) {
   17dc0:	01c72683          	lw	a3,28(a4)
   17dc4:	48068063          	beq	a3,zero,18244 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x824>
        val = (val << 8) | (uint64_t)p[i];
   17dc8:	0007c603          	lbu	a2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   17dcc:	47c0006f          	jal	zero,18248 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x828>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   17dd0:	00050413          	addi	s0,a0,0
   17dd4:	00052423          	sw	zero,8(a0)
   17dd8:	00052623          	sw	zero,12(a0)
   17ddc:	00052823          	sw	zero,16(a0)
   17de0:	00052a23          	sw	zero,20(a0)
   17de4:	00052c23          	sw	zero,24(a0)
   17de8:	00052e23          	sw	zero,28(a0)
   17dec:	02053023          	sd	zero,32(a0)
   17df0:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   17df4:	00100793          	addi	a5,zero,1
   17df8:	02f52823          	sw	a5,48(a0)
   17dfc:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   17e00:	0002a797          	auipc	a5,0x2a
   17e04:	6307b783          	ld	a5,1584(a5) # 42430 <vtable for std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xa48>
   17e08:	01078793          	addi	a5,a5,16
   17e0c:	00f53023          	sd	a5,0(a0)
   17e10:	03850b13          	addi	s6,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17e14:	00093783          	ld	a5,0(s2)
   17e18:	02f53c23          	sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   17e1c:	00893503          	ld	a0,8(s2)
   17e20:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   17e24:	02050063          	beq	a0,zero,17e44 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x424>
    if (__is_single_threaded())
   17e28:	0002a797          	auipc	a5,0x2a
   17e2c:	6507b783          	ld	a5,1616(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17e30:	0007c783          	lbu	a5,0(a5)
   17e34:	1a078863          	beq	a5,zero,17fe4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5c4>
  { *__mem += __val; }
   17e38:	03052783          	lw	a5,48(a0)
   17e3c:	0017879b          	addiw	a5,a5,1
   17e40:	02f52823          	sw	a5,48(a0)
      : file(file), offset(offset), subsec(subsec),
   17e44:	05343423          	sd	s3,72(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17e48:	00013783          	ld	a5,0(sp)
   17e4c:	04f43823          	sd	a5,80(s0)
      : _M_pi(__r._M_pi)
   17e50:	00813503          	ld	a0,8(sp)
   17e54:	04a43c23          	sd	a0,88(s0)
	if (_M_pi != nullptr)
   17e58:	02050063          	beq	a0,zero,17e78 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x458>
    if (__is_single_threaded())
   17e5c:	0002a797          	auipc	a5,0x2a
   17e60:	61c7b783          	ld	a5,1564(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17e64:	0007c783          	lbu	a5,0(a5)
   17e68:	18078663          	beq	a5,zero,17ff4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5d4>
  { *__mem += __val; }
   17e6c:	03052783          	lw	a5,48(a0)
   17e70:	0017879b          	addiw	a5,a5,1
   17e74:	02f52823          	sw	a5,48(a0)
        debug_abbrev_offset(debug_abbrev_offset), root_offset(root_offset),
   17e78:	07543023          	sd	s5,96(s0)
   17e7c:	07443423          	sd	s4,104(s0)
        type_signature(type_signature), type_offset(type_offset),
   17e80:	06043823          	sd	zero,112(s0)
   17e84:	06043c23          	sd	zero,120(s0)
  die() : cu(nullptr), abbrev(nullptr) {}
   17e88:	08043423          	sd	zero,136(s0)
   17e8c:	08043823          	sd	zero,144(s0)
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   17e90:	0a040793          	addi	a5,s0,160
   17e94:	0cf43823          	sd	a5,208(s0)
   17e98:	0cf43c23          	sd	a5,216(s0)
   17e9c:	0d040793          	addi	a5,s0,208
   17ea0:	0ef43023          	sd	a5,224(s0)
   17ea4:	0e043c23          	sd	zero,248(s0)
   17ea8:	10043023          	sd	zero,256(s0)
   17eac:	11040793          	addi	a5,s0,272
   17eb0:	14f43023          	sd	a5,320(s0)
   17eb4:	14f43423          	sd	a5,328(s0)
   17eb8:	14040793          	addi	a5,s0,320
   17ebc:	14f43823          	sd	a5,336(s0)
      : _M_ptr(0), _M_refcount()
   17ec0:	16043023          	sd	zero,352(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   17ec4:	16043423          	sd	zero,360(s0)
        have_abbrevs(false) {}
   17ec8:	16040823          	sb	zero,368(s0)
   17ecc:	16043c23          	sd	zero,376(s0)
   17ed0:	18043023          	sd	zero,384(s0)
   17ed4:	18043423          	sd	zero,392(s0)
		   const _Hash&, const _Equal&, const allocator_type&,
		   false_type __uks);

    public:
      // Constructor, destructor, assignment, swap
      _Hashtable() = default;
   17ed8:	1c040793          	addi	a5,s0,448
   17edc:	18f43823          	sd	a5,400(s0)
   17ee0:	00100793          	addi	a5,zero,1
   17ee4:	18f43c23          	sd	a5,408(s0)
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
   17ee8:	1a043023          	sd	zero,416(s0)
   17eec:	1a043423          	sd	zero,424(s0)
  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
    : _M_max_load_factor(__z), _M_next_resize(0) { }
   17ef0:	0001f797          	auipc	a5,0x1f
   17ef4:	db87a787          	flw	fa5,-584(a5) # 36ca8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xf0>
   17ef8:	1af42827          	fsw	fa5,432(s0)
   17efc:	1a043c23          	sd	zero,440(s0)
   17f00:	1c043023          	sd	zero,448(s0)
   17f04:	0164b423          	sd	s6,8(s1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   17f08:	0104b903          	ld	s2,16(s1)
	__r._M_pi = _M_pi;
   17f0c:	0084b823          	sd	s0,16(s1)
	if (_M_pi != nullptr)
   17f10:	02090463          	beq	s2,zero,17f38 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x518>
    if (__is_single_threaded())
   17f14:	0002a797          	auipc	a5,0x2a
   17f18:	5647b783          	ld	a5,1380(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17f1c:	0007c783          	lbu	a5,0(a5)
   17f20:	0e078263          	beq	a5,zero,18004 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5e4>
    _Atomic_word __result = *__mem;
   17f24:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   17f28:	fff5079b          	addiw	a5,a0,-1
   17f2c:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17f30:	00100793          	addi	a5,zero,1
   17f34:	0ef50063          	beq	a0,a5,18014 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5f4>
	if (_M_pi != nullptr)
   17f38:	03013403          	ld	s0,48(sp)
   17f3c:	02040463          	beq	s0,zero,17f64 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x544>
    if (__is_single_threaded())
   17f40:	0002a797          	auipc	a5,0x2a
   17f44:	5387b783          	ld	a5,1336(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17f48:	0007c783          	lbu	a5,0(a5)
   17f4c:	12078263          	beq	a5,zero,18070 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x650>
    _Atomic_word __result = *__mem;
   17f50:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   17f54:	fff5079b          	addiw	a5,a0,-1
   17f58:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17f5c:	00100793          	addi	a5,zero,1
   17f60:	12f50063          	beq	a0,a5,18080 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x660>
	if (_M_pi != nullptr)
   17f64:	00813403          	ld	s0,8(sp)
   17f68:	02040463          	beq	s0,zero,17f90 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x570>
    if (__is_single_threaded())
   17f6c:	0002a797          	auipc	a5,0x2a
   17f70:	50c7b783          	ld	a5,1292(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17f74:	0007c783          	lbu	a5,0(a5)
   17f78:	16078263          	beq	a5,zero,180dc <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x6bc>
    _Atomic_word __result = *__mem;
   17f7c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   17f80:	fff5079b          	addiw	a5,a0,-1
   17f84:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17f88:	00100793          	addi	a5,zero,1
   17f8c:	16f50063          	beq	a0,a5,180ec <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x6cc>
	if (_M_pi != nullptr)
   17f90:	01813403          	ld	s0,24(sp)
   17f94:	02040463          	beq	s0,zero,17fbc <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x59c>
    if (__is_single_threaded())
   17f98:	0002a797          	auipc	a5,0x2a
   17f9c:	4e07b783          	ld	a5,1248(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17fa0:	0007c783          	lbu	a5,0(a5)
   17fa4:	1a078263          	beq	a5,zero,18148 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x728>
    _Atomic_word __result = *__mem;
   17fa8:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   17fac:	fff5079b          	addiw	a5,a0,-1
   17fb0:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17fb4:	00100793          	addi	a5,zero,1
   17fb8:	1af50063          	beq	a0,a5,18158 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x738>
}
   17fbc:	0c813083          	ld	ra,200(sp)
   17fc0:	0c013403          	ld	s0,192(sp)
   17fc4:	0b813483          	ld	s1,184(sp)
   17fc8:	0b013903          	ld	s2,176(sp)
   17fcc:	0a813983          	ld	s3,168(sp)
   17fd0:	0a013a03          	ld	s4,160(sp)
   17fd4:	09813a83          	ld	s5,152(sp)
   17fd8:	09013b03          	ld	s6,144(sp)
   17fdc:	0d010113          	addi	sp,sp,208
   17fe0:	00008067          	jalr	zero,0(ra)
      __atomic_add(__mem, __val);
   17fe4:	00100593          	addi	a1,zero,1
   17fe8:	03050513          	addi	a0,a0,48
   17fec:	b14fe0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17ff0:	e55ff06f          	jal	zero,17e44 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x424>
   17ff4:	00100593          	addi	a1,zero,1
   17ff8:	03050513          	addi	a0,a0,48
   17ffc:	b04fe0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18000:	e79ff06f          	jal	zero,17e78 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x458>
      return __exchange_and_add(__mem, __val);
   18004:	fff00593          	addi	a1,zero,-1
   18008:	03090513          	addi	a0,s2,48
   1800c:	b24fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18010:	f21ff06f          	jal	zero,17f30 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x510>
	_M_dispose();
   18014:	00093783          	ld	a5,0(s2)
   18018:	0107b783          	ld	a5,16(a5)
   1801c:	00090513          	addi	a0,s2,0
   18020:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18024:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18028:	0002a797          	auipc	a5,0x2a
   1802c:	4507b783          	ld	a5,1104(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18030:	0007c783          	lbu	a5,0(a5)
   18034:	02078663          	beq	a5,zero,18060 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x640>
    _Atomic_word __result = *__mem;
   18038:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   1803c:	fff5079b          	addiw	a5,a0,-1
   18040:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18044:	00100793          	addi	a5,zero,1
   18048:	eef518e3          	bne	a0,a5,17f38 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x518>
	    _M_destroy();
   1804c:	00093783          	ld	a5,0(s2)
   18050:	0187b783          	ld	a5,24(a5)
   18054:	00090513          	addi	a0,s2,0
   18058:	000780e7          	jalr	ra,0(a5)
   1805c:	eddff06f          	jal	zero,17f38 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x518>
      return __exchange_and_add(__mem, __val);
   18060:	fff00593          	addi	a1,zero,-1
   18064:	03490513          	addi	a0,s2,52
   18068:	ac8fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1806c:	fd9ff06f          	jal	zero,18044 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x624>
   18070:	fff00593          	addi	a1,zero,-1
   18074:	03040513          	addi	a0,s0,48
   18078:	ab8fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1807c:	ee1ff06f          	jal	zero,17f5c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x53c>
	_M_dispose();
   18080:	00043783          	ld	a5,0(s0)
   18084:	0107b783          	ld	a5,16(a5)
   18088:	00040513          	addi	a0,s0,0
   1808c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18090:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18094:	0002a797          	auipc	a5,0x2a
   18098:	3e47b783          	ld	a5,996(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1809c:	0007c783          	lbu	a5,0(a5)
   180a0:	02078663          	beq	a5,zero,180cc <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x6ac>
    _Atomic_word __result = *__mem;
   180a4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   180a8:	fff5079b          	addiw	a5,a0,-1
   180ac:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   180b0:	00100793          	addi	a5,zero,1
   180b4:	eaf518e3          	bne	a0,a5,17f64 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x544>
	    _M_destroy();
   180b8:	00043783          	ld	a5,0(s0)
   180bc:	0187b783          	ld	a5,24(a5)
   180c0:	00040513          	addi	a0,s0,0
   180c4:	000780e7          	jalr	ra,0(a5)
   180c8:	e9dff06f          	jal	zero,17f64 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x544>
      return __exchange_and_add(__mem, __val);
   180cc:	fff00593          	addi	a1,zero,-1
   180d0:	03440513          	addi	a0,s0,52
   180d4:	a5cfe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   180d8:	fd9ff06f          	jal	zero,180b0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x690>
   180dc:	fff00593          	addi	a1,zero,-1
   180e0:	03040513          	addi	a0,s0,48
   180e4:	a4cfe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   180e8:	ea1ff06f          	jal	zero,17f88 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x568>
	_M_dispose();
   180ec:	00043783          	ld	a5,0(s0)
   180f0:	0107b783          	ld	a5,16(a5)
   180f4:	00040513          	addi	a0,s0,0
   180f8:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   180fc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18100:	0002a797          	auipc	a5,0x2a
   18104:	3787b783          	ld	a5,888(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18108:	0007c783          	lbu	a5,0(a5)
   1810c:	02078663          	beq	a5,zero,18138 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x718>
    _Atomic_word __result = *__mem;
   18110:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   18114:	fff5079b          	addiw	a5,a0,-1
   18118:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1811c:	00100793          	addi	a5,zero,1
   18120:	e6f518e3          	bne	a0,a5,17f90 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x570>
	    _M_destroy();
   18124:	00043783          	ld	a5,0(s0)
   18128:	0187b783          	ld	a5,24(a5)
   1812c:	00040513          	addi	a0,s0,0
   18130:	000780e7          	jalr	ra,0(a5)
   18134:	e5dff06f          	jal	zero,17f90 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x570>
      return __exchange_and_add(__mem, __val);
   18138:	fff00593          	addi	a1,zero,-1
   1813c:	03440513          	addi	a0,s0,52
   18140:	9f0fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18144:	fd9ff06f          	jal	zero,1811c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x6fc>
   18148:	fff00593          	addi	a1,zero,-1
   1814c:	03040513          	addi	a0,s0,48
   18150:	9e0fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18154:	e61ff06f          	jal	zero,17fb4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x594>
	_M_dispose();
   18158:	00043783          	ld	a5,0(s0)
   1815c:	0107b783          	ld	a5,16(a5)
   18160:	00040513          	addi	a0,s0,0
   18164:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18168:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1816c:	0002a797          	auipc	a5,0x2a
   18170:	30c7b783          	ld	a5,780(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18174:	0007c783          	lbu	a5,0(a5)
   18178:	02078663          	beq	a5,zero,181a4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x784>
    _Atomic_word __result = *__mem;
   1817c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   18180:	fff5079b          	addiw	a5,a0,-1
   18184:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18188:	00100793          	addi	a5,zero,1
   1818c:	e2f518e3          	bne	a0,a5,17fbc <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x59c>
	    _M_destroy();
   18190:	00043783          	ld	a5,0(s0)
   18194:	0187b783          	ld	a5,24(a5)
   18198:	00040513          	addi	a0,s0,0
   1819c:	000780e7          	jalr	ra,0(a5)
   181a0:	e1dff06f          	jal	zero,17fbc <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x59c>
      return __exchange_and_add(__mem, __val);
   181a4:	fff00593          	addi	a1,zero,-1
   181a8:	03440513          	addi	a0,s0,52
   181ac:	984fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   181b0:	fd9ff06f          	jal	zero,18188 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x768>
      { return _M_dataplus._M_p; }
   181b4:	00050413          	addi	s0,a0,0
   181b8:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   181bc:	05010793          	addi	a5,sp,80
   181c0:	00f50463          	beq	a0,a5,181c8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7a8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   181c4:	aecfe0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   181c8:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   181cc:	07010793          	addi	a5,sp,112
   181d0:	00f50463          	beq	a0,a5,181d8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7b8>
   181d4:	adcfe0ef          	jal	ra,164b0 <operator delete(void*)@plt>
                       std::to_string(version));
   181d8:	00090513          	addi	a0,s2,0
   181dc:	a94fe0ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   181e0:	03013503          	ld	a0,48(sp)
   181e4:	00050863          	beq	a0,zero,181f4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7d4>
	  _M_pi->_M_release();
   181e8:	0002a317          	auipc	t1,0x2a
   181ec:	1d833303          	ld	t1,472(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   181f0:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   181f4:	00813503          	ld	a0,8(sp)
   181f8:	00050863          	beq	a0,zero,18208 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7e8>
	  _M_pi->_M_release();
   181fc:	0002a317          	auipc	t1,0x2a
   18200:	1c433303          	ld	t1,452(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   18204:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   18208:	01813503          	ld	a0,24(sp)
   1820c:	00050863          	beq	a0,zero,1821c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7fc>
	  _M_pi->_M_release();
   18210:	0002a317          	auipc	t1,0x2a
   18214:	1b033303          	ld	t1,432(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   18218:	000300e7          	jalr	ra,0(t1)
}
   1821c:	00048513          	addi	a0,s1,0
   18220:	a18ff0ef          	jal	ra,17438 <dwarf::unit::~unit()>
   18224:	00040513          	addi	a0,s0,0
   18228:	c68fe0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1822c:	00050413          	addi	s0,a0,0
   18230:	f99ff06f          	jal	zero,181c8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7a8>
	if (_M_pi != nullptr)
   18234:	00050413          	addi	s0,a0,0
   18238:	fd1ff06f          	jal	zero,18208 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7e8>
   1823c:	00050413          	addi	s0,a0,0
   18240:	fddff06f          	jal	zero,1821c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7fc>
        val |= ((uint64_t)p[i]) << (i * 8);
   18244:	0007c603          	lbu	a2,0(a5)
    pos += sizeof(T);
   18248:	00178793          	addi	a5,a5,1
   1824c:	02f13c23          	sd	a5,56(sp)
  subsec->addr_size = address_size;
   18250:	00013683          	ld	a3,0(sp)
   18254:	02c6a023          	sw	a2,32(a3)

  bool end() const { return pos >= sec->end; }

  bool valid() const { return !!pos; }

  section_offset get_section_offset() const { return pos - sec->begin; }
   18258:	00873703          	ld	a4,8(a4)
   1825c:	40e78a33          	sub	s4,a5,a4
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   18260:	1c800513          	addi	a0,zero,456
   18264:	a5cfe0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   18268:	b69ff06f          	jal	zero,17dd0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3b0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1826c:	03413423          	sd	s4,40(sp)
      : _M_pi(__r._M_pi)
   18270:	02013823          	sd	zero,48(sp)
      : sec(sec), pos(sec->begin + offset) {}
   18274:	008a3783          	ld	a5,8(s4)
   18278:	02f13c23          	sd	a5,56(sp)
  sub.skip_initial_length();
   1827c:	02810513          	addi	a0,sp,40
   18280:	6e4040ef          	jal	ra,1c964 <dwarf::cursor::skip_initial_length()>
   18284:	9edff06f          	jal	zero,17c70 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x250>

0000000000018288 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)>:
dwarf::dwarf(const std::shared_ptr<loader> &l) : m(make_shared<impl>(l)) {
   18288:	f6010113          	addi	sp,sp,-160
   1828c:	08113c23          	sd	ra,152(sp)
   18290:	08813823          	sd	s0,144(sp)
   18294:	08913423          	sd	s1,136(sp)
   18298:	09213023          	sd	s2,128(sp)
   1829c:	07313c23          	sd	s3,120(sp)
   182a0:	07413823          	sd	s4,112(sp)
   182a4:	07513423          	sd	s5,104(sp)
   182a8:	07613023          	sd	s6,96(sp)
   182ac:	05713c23          	sd	s7,88(sp)
   182b0:	00050493          	addi	s1,a0,0
   182b4:	00058913          	addi	s2,a1,0

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   182b8:	00053023          	sd	zero,0(a0)
   182bc:	0f000513          	addi	a0,zero,240
   182c0:	a00fe0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   182c4:	00050413          	addi	s0,a0,0
   182c8:	00052423          	sw	zero,8(a0)
   182cc:	00052623          	sw	zero,12(a0)
   182d0:	00052823          	sw	zero,16(a0)
   182d4:	00052a23          	sw	zero,20(a0)
   182d8:	00052c23          	sw	zero,24(a0)
   182dc:	00052e23          	sw	zero,28(a0)
   182e0:	02053023          	sd	zero,32(a0)
   182e4:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   182e8:	00100793          	addi	a5,zero,1
   182ec:	02f52823          	sw	a5,48(a0)
   182f0:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   182f4:	0002a797          	auipc	a5,0x2a
   182f8:	2347b783          	ld	a5,564(a5) # 42528 <vtable for std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xb78>
   182fc:	01078793          	addi	a5,a5,16
   18300:	00f53023          	sd	a5,0(a0)
   18304:	03850993          	addi	s3,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18308:	00093783          	ld	a5,0(s2)
   1830c:	02f53c23          	sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   18310:	00893503          	ld	a0,8(s2)
   18314:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   18318:	02050063          	beq	a0,zero,18338 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb0>
    if (__is_single_threaded())
   1831c:	0002a797          	auipc	a5,0x2a
   18320:	15c7b783          	ld	a5,348(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18324:	0007c783          	lbu	a5,0(a5)
   18328:	08078c63          	beq	a5,zero,183c0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x138>
  { *__mem += __val; }
   1832c:	03052783          	lw	a5,48(a0)
   18330:	0017879b          	addiw	a5,a5,1
   18334:	02f52823          	sw	a5,48(a0)
      : _M_ptr(0), _M_refcount()
   18338:	04043423          	sd	zero,72(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1833c:	04043823          	sd	zero,80(s0)
      : _M_ptr(0), _M_refcount()
   18340:	04043c23          	sd	zero,88(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   18344:	06043023          	sd	zero,96(s0)
   18348:	06043423          	sd	zero,104(s0)
   1834c:	06043823          	sd	zero,112(s0)
   18350:	06043c23          	sd	zero,120(s0)
   18354:	0b040793          	addi	a5,s0,176
   18358:	08f43023          	sd	a5,128(s0)
   1835c:	00100793          	addi	a5,zero,1
   18360:	08f43423          	sd	a5,136(s0)
    _Hash_node_base() noexcept : _M_nxt() { }
   18364:	08043823          	sd	zero,144(s0)
   18368:	08043c23          	sd	zero,152(s0)
    : _M_max_load_factor(__z), _M_next_resize(0) { }
   1836c:	0001f797          	auipc	a5,0x1f
   18370:	93c7a787          	flw	fa5,-1732(a5) # 36ca8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xf0>
   18374:	0af42027          	fsw	fa5,160(s0)
   18378:	0a043423          	sd	zero,168(s0)
   1837c:	0a043823          	sd	zero,176(s0)
  impl(const std::shared_ptr<loader> &l) : l(l), have_type_units(false) {}
   18380:	0a040c23          	sb	zero,184(s0)
      _M_header._M_color = _S_red;
   18384:	0c042423          	sw	zero,200(s0)
      _M_header._M_parent = 0;
   18388:	0c043823          	sd	zero,208(s0)
      _M_header._M_left = &_M_header;
   1838c:	0c840793          	addi	a5,s0,200
   18390:	0cf43c23          	sd	a5,216(s0)
      _M_header._M_right = &_M_header;
   18394:	0ef43023          	sd	a5,224(s0)
      _M_node_count = 0;
   18398:	0e043423          	sd	zero,232(s0)
	  _M_pi = __pi;
   1839c:	0084b423          	sd	s0,8(s1)
	  __p = __pi->_M_ptr();
   183a0:	0134b023          	sd	s3,0(s1)
      { return _M_ptr; }
   183a4:	00093503          	ld	a0,0(s2)
  data = l->load(section_type::info, &size);
   183a8:	00053783          	ld	a5,0(a0)
   183ac:	0107b783          	ld	a5,16(a5)
   183b0:	00010613          	addi	a2,sp,0
   183b4:	00300593          	addi	a1,zero,3
   183b8:	000780e7          	jalr	ra,0(a5)
   183bc:	0140006f          	jal	zero,183d0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x148>
      __atomic_add(__mem, __val);
   183c0:	00100593          	addi	a1,zero,1
   183c4:	03050513          	addi	a0,a0,48
   183c8:	f39fd0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   183cc:	f6dff06f          	jal	zero,18338 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb0>
   183d0:	00050413          	addi	s0,a0,0
  if (!data)
   183d4:	00050a63          	beq	a0,zero,183e8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x160>
   183d8:	0004ba03          	ld	s4,0(s1)
   183dc:	06000513          	addi	a0,zero,96
   183e0:	8e0fe0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   183e4:	04c0006f          	jal	zero,18430 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x1a8>
    throw format_error("required .debug_info section missing");
   183e8:	01000513          	addi	a0,zero,16
   183ec:	fe5fd0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   183f0:	00050913          	addi	s2,a0,0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   183f4:	0001e597          	auipc	a1,0x1e
   183f8:	5ec58593          	addi	a1,a1,1516 # 369e0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x70>
   183fc:	b14fe0ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   18400:	0002a797          	auipc	a5,0x2a
   18404:	1507b783          	ld	a5,336(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   18408:	01078793          	addi	a5,a5,16
   1840c:	00f93023          	sd	a5,0(s2)
   18410:	0002a617          	auipc	a2,0x2a
   18414:	f6863603          	ld	a2,-152(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   18418:	0002a597          	auipc	a1,0x2a
   1841c:	e905b583          	ld	a1,-368(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   18420:	00090513          	addi	a0,s2,0
   18424:	a3cfe0ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   18428:	00050413          	addi	s0,a0,0
   1842c:	1610006f          	jal	zero,18d8c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb04>
   18430:	00052423          	sw	zero,8(a0)
   18434:	00052623          	sw	zero,12(a0)
   18438:	00052823          	sw	zero,16(a0)
   1843c:	00052a23          	sw	zero,20(a0)
   18440:	00052c23          	sw	zero,24(a0)
   18444:	00052e23          	sw	zero,28(a0)
   18448:	02053023          	sd	zero,32(a0)
   1844c:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   18450:	00100793          	addi	a5,zero,1
   18454:	02f52823          	sw	a5,48(a0)
   18458:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   1845c:	0002a797          	auipc	a5,0x2a
   18460:	15c7b783          	ld	a5,348(a5) # 425b8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc40>
   18464:	01078793          	addi	a5,a5,16
   18468:	00f53023          	sd	a5,0(a0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   1846c:	00300793          	addi	a5,zero,3
   18470:	02f52c23          	sw	a5,56(a0)
   18474:	04853023          	sd	s0,64(a0)
   18478:	00013783          	ld	a5,0(sp)
   1847c:	00f407b3          	add	a5,s0,a5
   18480:	04f53423          	sd	a5,72(a0)
   18484:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   18488:	04052a23          	sw	zero,84(a0)
   1848c:	04052c23          	sw	zero,88(a0)
   18490:	03850793          	addi	a5,a0,56
   18494:	00fa3823          	sd	a5,16(s4)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   18498:	018a3983          	ld	s3,24(s4)
	__r._M_pi = _M_pi;
   1849c:	00aa3c23          	sd	a0,24(s4)
	if (_M_pi != nullptr)
   184a0:	02098463          	beq	s3,zero,184c8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x240>
    if (__is_single_threaded())
   184a4:	0002a797          	auipc	a5,0x2a
   184a8:	fd47b783          	ld	a5,-44(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   184ac:	0007c783          	lbu	a5,0(a5)
   184b0:	0e078063          	beq	a5,zero,18590 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x308>
    _Atomic_word __result = *__mem;
   184b4:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   184b8:	fff5079b          	addiw	a5,a0,-1
   184bc:	02f9a823          	sw	a5,48(s3)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   184c0:	00100793          	addi	a5,zero,1
   184c4:	0cf50e63          	beq	a0,a5,185a0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x318>
      { return _M_ptr; }
   184c8:	0004b783          	ld	a5,0(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   184cc:	0107ba03          	ld	s4,16(a5)
      : _M_pi(__r._M_pi)
   184d0:	0187b983          	ld	s3,24(a5)
	if (_M_pi != nullptr)
   184d4:	12098ae3          	beq	s3,zero,18e08 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb80>
    if (__is_single_threaded())
   184d8:	0002a797          	auipc	a5,0x2a
   184dc:	fa07b783          	ld	a5,-96(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   184e0:	0007c783          	lbu	a5,0(a5)
   184e4:	10078c63          	beq	a5,zero,185fc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x374>
  { *__mem += __val; }
   184e8:	0309a783          	lw	a5,48(s3)
   184ec:	0017879b          	addiw	a5,a5,1
   184f0:	02f9a823          	sw	a5,48(s3)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   184f4:	01413423          	sd	s4,8(sp)
      : _M_pi(__r._M_pi)
   184f8:	01313823          	sd	s3,16(sp)
    if (__is_single_threaded())
   184fc:	0002a797          	auipc	a5,0x2a
   18500:	f7c7b783          	ld	a5,-132(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18504:	0007c783          	lbu	a5,0(a5)
   18508:	10078263          	beq	a5,zero,1860c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x384>
  { *__mem += __val; }
   1850c:	0309a783          	lw	a5,48(s3)
   18510:	0017879b          	addiw	a5,a5,1
   18514:	02f9a823          	sw	a5,48(s3)
      : sec(sec), pos(sec->begin + offset) {}
   18518:	008a3783          	ld	a5,8(s4)
   1851c:	00f13c23          	sd	a5,24(sp)
    if (__is_single_threaded())
   18520:	0002a797          	auipc	a5,0x2a
   18524:	f587b783          	ld	a5,-168(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18528:	0007c783          	lbu	a5,0(a5)
   1852c:	0e078863          	beq	a5,zero,1861c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x394>
    _Atomic_word __result = *__mem;
   18530:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   18534:	fff5079b          	addiw	a5,a0,-1
   18538:	02f9a823          	sw	a5,48(s3)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1853c:	00100793          	addi	a5,zero,1
   18540:	0cf51ce3          	bne	a0,a5,18e18 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb90>
	_M_dispose();
   18544:	0009b783          	ld	a5,0(s3)
   18548:	0107b783          	ld	a5,16(a5)
   1854c:	00098513          	addi	a0,s3,0
   18550:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18554:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18558:	0002a797          	auipc	a5,0x2a
   1855c:	f207b783          	ld	a5,-224(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18560:	0007c783          	lbu	a5,0(a5)
   18564:	0c078463          	beq	a5,zero,1862c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3a4>
    _Atomic_word __result = *__mem;
   18568:	0349a503          	lw	a0,52(s3)
    *__mem += __val;
   1856c:	fff5079b          	addiw	a5,a0,-1
   18570:	02f9aa23          	sw	a5,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18574:	00100793          	addi	a5,zero,1
   18578:	0af510e3          	bne	a0,a5,18e18 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb90>
	    _M_destroy();
   1857c:	0009b783          	ld	a5,0(s3)
   18580:	0187b783          	ld	a5,24(a5)
   18584:	00098513          	addi	a0,s3,0
   18588:	000780e7          	jalr	ra,0(a5)
   1858c:	08d0006f          	jal	zero,18e18 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb90>
      return __exchange_and_add(__mem, __val);
   18590:	fff00593          	addi	a1,zero,-1
   18594:	03098513          	addi	a0,s3,48
   18598:	d99fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1859c:	f25ff06f          	jal	zero,184c0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x238>
	_M_dispose();
   185a0:	0009b783          	ld	a5,0(s3)
   185a4:	0107b783          	ld	a5,16(a5)
   185a8:	00098513          	addi	a0,s3,0
   185ac:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   185b0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   185b4:	0002a797          	auipc	a5,0x2a
   185b8:	ec47b783          	ld	a5,-316(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   185bc:	0007c783          	lbu	a5,0(a5)
   185c0:	02078663          	beq	a5,zero,185ec <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x364>
    _Atomic_word __result = *__mem;
   185c4:	0349a503          	lw	a0,52(s3)
    *__mem += __val;
   185c8:	fff5079b          	addiw	a5,a0,-1
   185cc:	02f9aa23          	sw	a5,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   185d0:	00100793          	addi	a5,zero,1
   185d4:	eef51ae3          	bne	a0,a5,184c8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x240>
	    _M_destroy();
   185d8:	0009b783          	ld	a5,0(s3)
   185dc:	0187b783          	ld	a5,24(a5)
   185e0:	00098513          	addi	a0,s3,0
   185e4:	000780e7          	jalr	ra,0(a5)
   185e8:	ee1ff06f          	jal	zero,184c8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x240>
      return __exchange_and_add(__mem, __val);
   185ec:	fff00593          	addi	a1,zero,-1
   185f0:	03498513          	addi	a0,s3,52
   185f4:	d3dfd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   185f8:	fd9ff06f          	jal	zero,185d0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x348>
      __atomic_add(__mem, __val);
   185fc:	00100593          	addi	a1,zero,1
   18600:	03098513          	addi	a0,s3,48
   18604:	cfdfd0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18608:	eedff06f          	jal	zero,184f4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x26c>
   1860c:	00100593          	addi	a1,zero,1
   18610:	03098513          	addi	a0,s3,48
   18614:	cedfd0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18618:	f01ff06f          	jal	zero,18518 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x290>
      return __exchange_and_add(__mem, __val);
   1861c:	fff00593          	addi	a1,zero,-1
   18620:	03098513          	addi	a0,s3,48
   18624:	d0dfd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18628:	f15ff06f          	jal	zero,1853c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2b4>
   1862c:	fff00593          	addi	a1,zero,-1
   18630:	03498513          	addi	a0,s3,52
   18634:	cfdfd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18638:	f3dff06f          	jal	zero,18574 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2ec>
    const unsigned char *p = (const unsigned char *)pos;
   1863c:	01813583          	ld	a1,24(sp)
      { return _M_ptr; }
   18640:	00813803          	ld	a6,8(sp)
    if (sec->ord == byte_order::lsb) {
   18644:	01c82783          	lw	a5,28(a6)
   18648:	06079263          	bne	a5,zero,186ac <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x424>
   1864c:	00058613          	addi	a2,a1,0
   18650:	00000713          	addi	a4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   18654:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   18658:	00064683          	lbu	a3,0(a2)
   1865c:	00e696b3          	sll	a3,a3,a4
   18660:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   18664:	00160613          	addi	a2,a2,1
   18668:	0087071b          	addiw	a4,a4,8
   1866c:	fea716e3          	bne	a4,a0,18658 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3d0>
    pos += sizeof(T);
   18670:	00458593          	addi	a1,a1,4
   18674:	00b13c23          	sd	a1,24(sp)
  if (length == 0xffffffff)
   18678:	0007879b          	addiw	a5,a5,0
   1867c:	fff00713          	addi	a4,zero,-1
   18680:	04e78863          	beq	a5,a4,186d0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x448>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   18684:	00813783          	ld	a5,8(sp)
   18688:	0107b703          	ld	a4,16(a5)
   1868c:	01813783          	ld	a5,24(sp)
   18690:	40f70633          	sub	a2,a4,a5
   18694:	00100693          	addi	a3,zero,1
   18698:	00c6f463          	bgeu	a3,a2,186a0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x418>
   1869c:	06e7e063          	bltu	a5,a4,186fc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x474>
      underflow();
   186a0:	00810513          	addi	a0,sp,8
   186a4:	458040ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
   186a8:	0540006f          	jal	zero,186fc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x474>
   186ac:	00058713          	addi	a4,a1,0
   186b0:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   186b4:	00000793          	addi	a5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   186b8:	00879793          	slli	a5,a5,0x8
   186bc:	00074683          	lbu	a3,0(a4)
   186c0:	00f6e7b3          	or	a5,a3,a5
      for (unsigned i = 0; i < sizeof(T); i++)
   186c4:	00170713          	addi	a4,a4,1
   186c8:	fec718e3          	bne	a4,a2,186b8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x430>
   186cc:	fa5ff06f          	jal	zero,18670 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3e8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   186d0:	01083783          	ld	a5,16(a6)
   186d4:	40b786b3          	sub	a3,a5,a1
   186d8:	00700713          	addi	a4,zero,7
   186dc:	00d77463          	bgeu	a4,a3,186e4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x45c>
   186e0:	00f5e663          	bltu	a1,a5,186ec <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x464>
      underflow();
   186e4:	00810513          	addi	a0,sp,8
   186e8:	414040ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    pos += sizeof(T);
   186ec:	01813783          	ld	a5,24(sp)
   186f0:	00878793          	addi	a5,a5,8
   186f4:	00f13c23          	sd	a5,24(sp)
    return (T)val;
   186f8:	f8dff06f          	jal	zero,18684 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3fc>
    const unsigned char *p = (const unsigned char *)pos;
   186fc:	01813703          	ld	a4,24(sp)
    if (sec->ord == byte_order::lsb) {
   18700:	00813783          	ld	a5,8(sp)
   18704:	01c7a783          	lw	a5,28(a5)
   18708:	04079c63          	bne	a5,zero,18760 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x4d8>
        val |= ((uint64_t)p[i]) << (i * 8);
   1870c:	00174783          	lbu	a5,1(a4)
   18710:	00879793          	slli	a5,a5,0x8
   18714:	00074683          	lbu	a3,0(a4)
   18718:	00d7e7b3          	or	a5,a5,a3
    pos += sizeof(T);
   1871c:	00270713          	addi	a4,a4,2
   18720:	00e13c23          	sd	a4,24(sp)
    return (T)val;
   18724:	03079793          	slli	a5,a5,0x30
   18728:	0307d793          	srli	a5,a5,0x30
  uhalf versionbe = (version >> 8) | ((version & 0xFF) << 8);
   1872c:	0087d71b          	srliw	a4,a5,0x8
   18730:	0087969b          	slliw	a3,a5,0x8
   18734:	00d76733          	or	a4,a4,a3
  if (versionbe < version) {
   18738:	03071713          	slli	a4,a4,0x30
   1873c:	03075713          	srli	a4,a4,0x30
   18740:	02f76a63          	bltu	a4,a5,18774 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x4ec>
   18744:	00093503          	ld	a0,0(s2)
  data = l->load(section_type::abbrev, &size);
   18748:	00053783          	ld	a5,0(a0)
   1874c:	0107b783          	ld	a5,16(a5)
   18750:	00010613          	addi	a2,sp,0
   18754:	00000593          	addi	a1,zero,0
   18758:	000780e7          	jalr	ra,0(a5)
   1875c:	12c0006f          	jal	zero,18888 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x600>
        val = (val << 8) | (uint64_t)p[i];
   18760:	00074783          	lbu	a5,0(a4)
   18764:	00879793          	slli	a5,a5,0x8
   18768:	00174683          	lbu	a3,1(a4)
   1876c:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   18770:	fadff06f          	jal	zero,1871c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x494>
   18774:	0004b983          	ld	s3,0(s1)
   18778:	06000513          	addi	a0,zero,96
   1877c:	d45fd0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   18780:	00052423          	sw	zero,8(a0)
   18784:	00052623          	sw	zero,12(a0)
   18788:	00052823          	sw	zero,16(a0)
   1878c:	00052a23          	sw	zero,20(a0)
   18790:	00052c23          	sw	zero,24(a0)
   18794:	00052e23          	sw	zero,28(a0)
   18798:	02053023          	sd	zero,32(a0)
   1879c:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   187a0:	00100793          	addi	a5,zero,1
   187a4:	02f52823          	sw	a5,48(a0)
   187a8:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   187ac:	0002a717          	auipc	a4,0x2a
   187b0:	e0c73703          	ld	a4,-500(a4) # 425b8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc40>
   187b4:	01070713          	addi	a4,a4,16
   187b8:	00e53023          	sd	a4,0(a0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   187bc:	00300713          	addi	a4,zero,3
   187c0:	02e52c23          	sw	a4,56(a0)
   187c4:	04853023          	sd	s0,64(a0)
   187c8:	00013703          	ld	a4,0(sp)
   187cc:	00e40733          	add	a4,s0,a4
   187d0:	04e53423          	sd	a4,72(a0)
   187d4:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   187d8:	04f52a23          	sw	a5,84(a0)
   187dc:	04052c23          	sw	zero,88(a0)
   187e0:	03850793          	addi	a5,a0,56
   187e4:	00f9b823          	sd	a5,16(s3)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   187e8:	0189b403          	ld	s0,24(s3)
	__r._M_pi = _M_pi;
   187ec:	00a9bc23          	sd	a0,24(s3)
	if (_M_pi != nullptr)
   187f0:	f4040ae3          	beq	s0,zero,18744 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x4bc>
    if (__is_single_threaded())
   187f4:	0002a797          	auipc	a5,0x2a
   187f8:	c847b783          	ld	a5,-892(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   187fc:	0007c783          	lbu	a5,0(a5)
   18800:	06078263          	beq	a5,zero,18864 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5dc>
    _Atomic_word __result = *__mem;
   18804:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   18808:	fff5079b          	addiw	a5,a0,-1
   1880c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18810:	00100793          	addi	a5,zero,1
   18814:	f2f518e3          	bne	a0,a5,18744 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x4bc>
	_M_dispose();
   18818:	00043783          	ld	a5,0(s0)
   1881c:	0107b783          	ld	a5,16(a5)
   18820:	00040513          	addi	a0,s0,0
   18824:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18828:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1882c:	0002a797          	auipc	a5,0x2a
   18830:	c4c7b783          	ld	a5,-948(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18834:	0007c783          	lbu	a5,0(a5)
   18838:	02078e63          	beq	a5,zero,18874 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5ec>
    _Atomic_word __result = *__mem;
   1883c:	03442783          	lw	a5,52(s0)
    *__mem += __val;
   18840:	fff7871b          	addiw	a4,a5,-1
   18844:	02e42a23          	sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18848:	00100713          	addi	a4,zero,1
   1884c:	eee79ce3          	bne	a5,a4,18744 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x4bc>
	    _M_destroy();
   18850:	00043783          	ld	a5,0(s0)
   18854:	0187b783          	ld	a5,24(a5)
   18858:	00040513          	addi	a0,s0,0
   1885c:	000780e7          	jalr	ra,0(a5)
   18860:	ee5ff06f          	jal	zero,18744 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x4bc>
      return __exchange_and_add(__mem, __val);
   18864:	fff00593          	addi	a1,zero,-1
   18868:	03040513          	addi	a0,s0,48
   1886c:	ac5fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18870:	fa1ff06f          	jal	zero,18810 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x588>
   18874:	fff00593          	addi	a1,zero,-1
   18878:	03440513          	addi	a0,s0,52
   1887c:	ab5fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18880:	00050793          	addi	a5,a0,0
   18884:	fc5ff06f          	jal	zero,18848 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5c0>
   18888:	00050413          	addi	s0,a0,0
  if (!data)
   1888c:	00050c63          	beq	a0,zero,188a4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x61c>
      { return _M_ptr; }
   18890:	0004b903          	ld	s2,0(s1)
   18894:	01093983          	ld	s3,16(s2)
   18898:	06000513          	addi	a0,zero,96
   1889c:	c25fd0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   188a0:	04c0006f          	jal	zero,188ec <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x664>
    throw format_error("required .debug_abbrev section missing");
   188a4:	01000513          	addi	a0,zero,16
   188a8:	b29fd0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   188ac:	00050913          	addi	s2,a0,0
   188b0:	0001e597          	auipc	a1,0x1e
   188b4:	15858593          	addi	a1,a1,344 # 36a08 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x98>
   188b8:	e59fd0ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   188bc:	0002a797          	auipc	a5,0x2a
   188c0:	c947b783          	ld	a5,-876(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   188c4:	01078793          	addi	a5,a5,16
   188c8:	00f93023          	sd	a5,0(s2)
   188cc:	0002a617          	auipc	a2,0x2a
   188d0:	aac63603          	ld	a2,-1364(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   188d4:	0002a597          	auipc	a1,0x2a
   188d8:	9d45b583          	ld	a1,-1580(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   188dc:	00090513          	addi	a0,s2,0
   188e0:	d81fd0ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   188e4:	00050413          	addi	s0,a0,0
   188e8:	4cc0006f          	jal	zero,18db4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb2c>
   188ec:	00052423          	sw	zero,8(a0)
   188f0:	00052623          	sw	zero,12(a0)
   188f4:	00052823          	sw	zero,16(a0)
   188f8:	00052a23          	sw	zero,20(a0)
   188fc:	00052c23          	sw	zero,24(a0)
   18900:	00052e23          	sw	zero,28(a0)
   18904:	02053023          	sd	zero,32(a0)
   18908:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   1890c:	00100793          	addi	a5,zero,1
   18910:	02f52823          	sw	a5,48(a0)
   18914:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   18918:	0002a797          	auipc	a5,0x2a
   1891c:	ca07b783          	ld	a5,-864(a5) # 425b8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc40>
   18920:	01078793          	addi	a5,a5,16
   18924:	00f53023          	sd	a5,0(a0)
   18928:	01c9a783          	lw	a5,28(s3)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   1892c:	02052c23          	sw	zero,56(a0)
   18930:	04853023          	sd	s0,64(a0)
   18934:	00013703          	ld	a4,0(sp)
   18938:	00e40433          	add	s0,s0,a4
   1893c:	04853423          	sd	s0,72(a0)
   18940:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   18944:	04f52a23          	sw	a5,84(a0)
   18948:	04052c23          	sw	zero,88(a0)
   1894c:	03850793          	addi	a5,a0,56
   18950:	02f93023          	sd	a5,32(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   18954:	02893403          	ld	s0,40(s2)
	__r._M_pi = _M_pi;
   18958:	02a93423          	sd	a0,40(s2)
	if (_M_pi != nullptr)
   1895c:	02040463          	beq	s0,zero,18984 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6fc>
    if (__is_single_threaded())
   18960:	0002a797          	auipc	a5,0x2a
   18964:	b187b783          	ld	a5,-1256(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18968:	0007c783          	lbu	a5,0(a5)
   1896c:	0c078463          	beq	a5,zero,18a34 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7ac>
    _Atomic_word __result = *__mem;
   18970:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   18974:	fff5079b          	addiw	a5,a0,-1
   18978:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1897c:	00100793          	addi	a5,zero,1
   18980:	0cf50263          	beq	a0,a5,18a44 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7bc>
      { return _M_ptr; }
   18984:	0004b783          	ld	a5,0(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18988:	0107b903          	ld	s2,16(a5)
      : _M_pi(__r._M_pi)
   1898c:	0187b403          	ld	s0,24(a5)
	if (_M_pi != nullptr)
   18990:	44040c63          	beq	s0,zero,18de8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb60>
    if (__is_single_threaded())
   18994:	0002a797          	auipc	a5,0x2a
   18998:	ae47b783          	ld	a5,-1308(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1899c:	0007c783          	lbu	a5,0(a5)
   189a0:	10078063          	beq	a5,zero,18aa0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x818>
  { *__mem += __val; }
   189a4:	03042783          	lw	a5,48(s0)
   189a8:	0017879b          	addiw	a5,a5,1
   189ac:	02f42823          	sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   189b0:	03213023          	sd	s2,32(sp)
      : _M_pi(__r._M_pi)
   189b4:	02813423          	sd	s0,40(sp)
    if (__is_single_threaded())
   189b8:	0002a797          	auipc	a5,0x2a
   189bc:	ac07b783          	ld	a5,-1344(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   189c0:	0007c783          	lbu	a5,0(a5)
   189c4:	0e078663          	beq	a5,zero,18ab0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x828>
  { *__mem += __val; }
   189c8:	03042783          	lw	a5,48(s0)
   189cc:	0017879b          	addiw	a5,a5,1
   189d0:	02f42823          	sw	a5,48(s0)
      : sec(sec), pos(sec->begin + offset) {}
   189d4:	00893783          	ld	a5,8(s2)
   189d8:	02f13823          	sd	a5,48(sp)
    if (__is_single_threaded())
   189dc:	0002a797          	auipc	a5,0x2a
   189e0:	a9c7b783          	ld	a5,-1380(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   189e4:	0007c783          	lbu	a5,0(a5)
   189e8:	0c078c63          	beq	a5,zero,18ac0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x838>
    _Atomic_word __result = *__mem;
   189ec:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   189f0:	fff5079b          	addiw	a5,a0,-1
   189f4:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   189f8:	00100793          	addi	a5,zero,1
   189fc:	0cf50a63          	beq	a0,a5,18ad0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x848>
  bool end() const { return pos >= sec->end; }
   18a00:	03013603          	ld	a2,48(sp)
      { return _M_ptr; }
   18a04:	02013783          	ld	a5,32(sp)
  while (!infocur.end()) {
   18a08:	0107b703          	ld	a4,16(a5)
   18a0c:	20e67c63          	bgeu	a2,a4,18c24 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x99c>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   18a10:	03810b13          	addi	s6,sp,56
   18a14:	0002ab97          	auipc	s7,0x2a
   18a18:	8ccbbb83          	ld	s7,-1844(s7) # 422e0 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)@@Base+0x263dc>
    infocur.subsection();
   18a1c:	04010913          	addi	s2,sp,64
   18a20:	02010993          	addi	s3,sp,32
    return ::__libc_single_threaded;
   18a24:	0002aa17          	auipc	s4,0x2a
   18a28:	a54a3a03          	ld	s4,-1452(s4) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18a2c:	00100a93          	addi	s5,zero,1
   18a30:	1600006f          	jal	zero,18b90 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x908>
      return __exchange_and_add(__mem, __val);
   18a34:	fff00593          	addi	a1,zero,-1
   18a38:	03040513          	addi	a0,s0,48
   18a3c:	8f5fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18a40:	f3dff06f          	jal	zero,1897c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6f4>
	_M_dispose();
   18a44:	00043783          	ld	a5,0(s0)
   18a48:	0107b783          	ld	a5,16(a5)
   18a4c:	00040513          	addi	a0,s0,0
   18a50:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18a54:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18a58:	0002a797          	auipc	a5,0x2a
   18a5c:	a207b783          	ld	a5,-1504(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18a60:	0007c783          	lbu	a5,0(a5)
   18a64:	02078663          	beq	a5,zero,18a90 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x808>
    _Atomic_word __result = *__mem;
   18a68:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   18a6c:	fff5079b          	addiw	a5,a0,-1
   18a70:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18a74:	00100793          	addi	a5,zero,1
   18a78:	f0f516e3          	bne	a0,a5,18984 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6fc>
	    _M_destroy();
   18a7c:	00043783          	ld	a5,0(s0)
   18a80:	0187b783          	ld	a5,24(a5)
   18a84:	00040513          	addi	a0,s0,0
   18a88:	000780e7          	jalr	ra,0(a5)
   18a8c:	ef9ff06f          	jal	zero,18984 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6fc>
      return __exchange_and_add(__mem, __val);
   18a90:	fff00593          	addi	a1,zero,-1
   18a94:	03440513          	addi	a0,s0,52
   18a98:	899fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18a9c:	fd9ff06f          	jal	zero,18a74 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7ec>
      __atomic_add(__mem, __val);
   18aa0:	00100593          	addi	a1,zero,1
   18aa4:	03040513          	addi	a0,s0,48
   18aa8:	859fd0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18aac:	f05ff06f          	jal	zero,189b0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x728>
   18ab0:	00100593          	addi	a1,zero,1
   18ab4:	03040513          	addi	a0,s0,48
   18ab8:	849fd0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18abc:	f19ff06f          	jal	zero,189d4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x74c>
      return __exchange_and_add(__mem, __val);
   18ac0:	fff00593          	addi	a1,zero,-1
   18ac4:	03040513          	addi	a0,s0,48
   18ac8:	869fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18acc:	f2dff06f          	jal	zero,189f8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x770>
	_M_dispose();
   18ad0:	00043783          	ld	a5,0(s0)
   18ad4:	0107b783          	ld	a5,16(a5)
   18ad8:	00040513          	addi	a0,s0,0
   18adc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18ae0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18ae4:	0002a797          	auipc	a5,0x2a
   18ae8:	9947b783          	ld	a5,-1644(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18aec:	0007c783          	lbu	a5,0(a5)
   18af0:	02078663          	beq	a5,zero,18b1c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x894>
    _Atomic_word __result = *__mem;
   18af4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   18af8:	fff5079b          	addiw	a5,a0,-1
   18afc:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18b00:	00100793          	addi	a5,zero,1
   18b04:	eef51ee3          	bne	a0,a5,18a00 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x778>
	    _M_destroy();
   18b08:	00043783          	ld	a5,0(s0)
   18b0c:	0187b783          	ld	a5,24(a5)
   18b10:	00040513          	addi	a0,s0,0
   18b14:	000780e7          	jalr	ra,0(a5)
   18b18:	ee9ff06f          	jal	zero,18a00 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x778>
      return __exchange_and_add(__mem, __val);
   18b1c:	fff00593          	addi	a1,zero,-1
   18b20:	03440513          	addi	a0,s0,52
   18b24:	80dfd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18b28:	fd9ff06f          	jal	zero,18b00 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x878>
	    ++this->_M_impl._M_finish;
   18b2c:	03843783          	ld	a5,56(s0)
   18b30:	01878793          	addi	a5,a5,24
   18b34:	02f43c23          	sd	a5,56(s0)
   18b38:	00098593          	addi	a1,s3,0
   18b3c:	00090513          	addi	a0,s2,0
   18b40:	500040ef          	jal	ra,1d040 <dwarf::cursor::subsection()>
   18b44:	01c0006f          	jal	zero,18b60 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8d8>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   18b48:	000b0693          	addi	a3,s6,0
   18b4c:	00048613          	addi	a2,s1,0
   18b50:	00050593          	addi	a1,a0,0
   18b54:	03040513          	addi	a0,s0,48
   18b58:	000b80e7          	jalr	ra,0(s7)
   18b5c:	fddff06f          	jal	zero,18b38 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8b0>
	if (_M_pi != nullptr)
   18b60:	04813403          	ld	s0,72(sp)
   18b64:	00040e63          	beq	s0,zero,18b80 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8f8>
    if (__is_single_threaded())
   18b68:	000a4783          	lbu	a5,0(s4)
   18b6c:	04078663          	beq	a5,zero,18bb8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x930>
    _Atomic_word __result = *__mem;
   18b70:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   18b74:	fff5079b          	addiw	a5,a0,-1
   18b78:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18b7c:	05550663          	beq	a0,s5,18bc8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x940>
   18b80:	03013603          	ld	a2,48(sp)
      { return _M_ptr; }
   18b84:	02013783          	ld	a5,32(sp)
  while (!infocur.end()) {
   18b88:	0107b703          	ld	a4,16(a5)
   18b8c:	08e67c63          	bgeu	a2,a4,18c24 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x99c>
   18b90:	0004b403          	ld	s0,0(s1)
  section_offset get_section_offset() const { return pos - sec->begin; }
   18b94:	0087b783          	ld	a5,8(a5)
   18b98:	40f60633          	sub	a2,a2,a5
    m->compilation_units.emplace_back(*this, infocur.get_section_offset());
   18b9c:	02c13c23          	sd	a2,56(sp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   18ba0:	03843503          	ld	a0,56(s0)
   18ba4:	04043783          	ld	a5,64(s0)
   18ba8:	faf500e3          	beq	a0,a5,18b48 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8c0>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   18bac:	00048593          	addi	a1,s1,0
   18bb0:	e71fe0ef          	jal	ra,17a20 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)>
   18bb4:	f79ff06f          	jal	zero,18b2c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8a4>
      return __exchange_and_add(__mem, __val);
   18bb8:	fff00593          	addi	a1,zero,-1
   18bbc:	03040513          	addi	a0,s0,48
   18bc0:	f70fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18bc4:	fb9ff06f          	jal	zero,18b7c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8f4>
	_M_dispose();
   18bc8:	00043783          	ld	a5,0(s0)
   18bcc:	0107b783          	ld	a5,16(a5)
   18bd0:	00040513          	addi	a0,s0,0
   18bd4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18bd8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18bdc:	0002a797          	auipc	a5,0x2a
   18be0:	89c7b783          	ld	a5,-1892(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18be4:	0007c783          	lbu	a5,0(a5)
   18be8:	02078663          	beq	a5,zero,18c14 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x98c>
    _Atomic_word __result = *__mem;
   18bec:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   18bf0:	fff5079b          	addiw	a5,a0,-1
   18bf4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18bf8:	00100793          	addi	a5,zero,1
   18bfc:	f8f512e3          	bne	a0,a5,18b80 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8f8>
	    _M_destroy();
   18c00:	00043783          	ld	a5,0(s0)
   18c04:	0187b783          	ld	a5,24(a5)
   18c08:	00040513          	addi	a0,s0,0
   18c0c:	000780e7          	jalr	ra,0(a5)
   18c10:	f71ff06f          	jal	zero,18b80 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8f8>
      return __exchange_and_add(__mem, __val);
   18c14:	fff00593          	addi	a1,zero,-1
   18c18:	03440513          	addi	a0,s0,52
   18c1c:	f14fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18c20:	fd9ff06f          	jal	zero,18bf8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x970>
	if (_M_pi != nullptr)
   18c24:	02813403          	ld	s0,40(sp)
   18c28:	02040463          	beq	s0,zero,18c50 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9c8>
    if (__is_single_threaded())
   18c2c:	0002a797          	auipc	a5,0x2a
   18c30:	84c7b783          	ld	a5,-1972(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18c34:	0007c783          	lbu	a5,0(a5)
   18c38:	06078863          	beq	a5,zero,18ca8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xa20>
    _Atomic_word __result = *__mem;
   18c3c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   18c40:	fff5079b          	addiw	a5,a0,-1
   18c44:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18c48:	00100793          	addi	a5,zero,1
   18c4c:	06f50663          	beq	a0,a5,18cb8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xa30>
	if (_M_pi != nullptr)
   18c50:	01013403          	ld	s0,16(sp)
   18c54:	02040463          	beq	s0,zero,18c7c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9f4>
    if (__is_single_threaded())
   18c58:	0002a797          	auipc	a5,0x2a
   18c5c:	8207b783          	ld	a5,-2016(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18c60:	0007c783          	lbu	a5,0(a5)
   18c64:	0a078863          	beq	a5,zero,18d14 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xa8c>
    _Atomic_word __result = *__mem;
   18c68:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   18c6c:	fff5079b          	addiw	a5,a0,-1
   18c70:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18c74:	00100793          	addi	a5,zero,1
   18c78:	0af50663          	beq	a0,a5,18d24 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xa9c>
}
   18c7c:	09813083          	ld	ra,152(sp)
   18c80:	09013403          	ld	s0,144(sp)
   18c84:	08813483          	ld	s1,136(sp)
   18c88:	08013903          	ld	s2,128(sp)
   18c8c:	07813983          	ld	s3,120(sp)
   18c90:	07013a03          	ld	s4,112(sp)
   18c94:	06813a83          	ld	s5,104(sp)
   18c98:	06013b03          	ld	s6,96(sp)
   18c9c:	05813b83          	ld	s7,88(sp)
   18ca0:	0a010113          	addi	sp,sp,160
   18ca4:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   18ca8:	fff00593          	addi	a1,zero,-1
   18cac:	03040513          	addi	a0,s0,48
   18cb0:	e80fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18cb4:	f95ff06f          	jal	zero,18c48 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9c0>
	_M_dispose();
   18cb8:	00043783          	ld	a5,0(s0)
   18cbc:	0107b783          	ld	a5,16(a5)
   18cc0:	00040513          	addi	a0,s0,0
   18cc4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18cc8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18ccc:	00029797          	auipc	a5,0x29
   18cd0:	7ac7b783          	ld	a5,1964(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18cd4:	0007c783          	lbu	a5,0(a5)
   18cd8:	02078663          	beq	a5,zero,18d04 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xa7c>
    _Atomic_word __result = *__mem;
   18cdc:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   18ce0:	fff5079b          	addiw	a5,a0,-1
   18ce4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18ce8:	00100793          	addi	a5,zero,1
   18cec:	f6f512e3          	bne	a0,a5,18c50 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9c8>
	    _M_destroy();
   18cf0:	00043783          	ld	a5,0(s0)
   18cf4:	0187b783          	ld	a5,24(a5)
   18cf8:	00040513          	addi	a0,s0,0
   18cfc:	000780e7          	jalr	ra,0(a5)
   18d00:	f51ff06f          	jal	zero,18c50 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9c8>
      return __exchange_and_add(__mem, __val);
   18d04:	fff00593          	addi	a1,zero,-1
   18d08:	03440513          	addi	a0,s0,52
   18d0c:	e24fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18d10:	fd9ff06f          	jal	zero,18ce8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xa60>
   18d14:	fff00593          	addi	a1,zero,-1
   18d18:	03040513          	addi	a0,s0,48
   18d1c:	e14fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18d20:	f55ff06f          	jal	zero,18c74 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9ec>
	_M_dispose();
   18d24:	00043783          	ld	a5,0(s0)
   18d28:	0107b783          	ld	a5,16(a5)
   18d2c:	00040513          	addi	a0,s0,0
   18d30:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18d34:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18d38:	00029797          	auipc	a5,0x29
   18d3c:	7407b783          	ld	a5,1856(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18d40:	0007c783          	lbu	a5,0(a5)
   18d44:	02078663          	beq	a5,zero,18d70 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xae8>
    _Atomic_word __result = *__mem;
   18d48:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   18d4c:	fff5079b          	addiw	a5,a0,-1
   18d50:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18d54:	00100793          	addi	a5,zero,1
   18d58:	f2f512e3          	bne	a0,a5,18c7c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9f4>
	    _M_destroy();
   18d5c:	00043783          	ld	a5,0(s0)
   18d60:	0187b783          	ld	a5,24(a5)
   18d64:	00040513          	addi	a0,s0,0
   18d68:	000780e7          	jalr	ra,0(a5)
   18d6c:	f11ff06f          	jal	zero,18c7c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9f4>
      return __exchange_and_add(__mem, __val);
   18d70:	fff00593          	addi	a1,zero,-1
   18d74:	03440513          	addi	a0,s0,52
   18d78:	db8fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18d7c:	fd9ff06f          	jal	zero,18d54 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xacc>
    throw format_error("required .debug_info section missing");
   18d80:	00050413          	addi	s0,a0,0
   18d84:	00090513          	addi	a0,s2,0
   18d88:	ee8fd0ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   18d8c:	0084b503          	ld	a0,8(s1)
   18d90:	00050863          	beq	a0,zero,18da0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb18>
	  _M_pi->_M_release();
   18d94:	00029317          	auipc	t1,0x29
   18d98:	62c33303          	ld	t1,1580(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   18d9c:	000300e7          	jalr	ra,0(t1)
   18da0:	00040513          	addi	a0,s0,0
   18da4:	8edfd0ef          	jal	ra,16690 <_Unwind_Resume@plt>
    throw format_error("required .debug_abbrev section missing");
   18da8:	00050413          	addi	s0,a0,0
   18dac:	00090513          	addi	a0,s2,0
   18db0:	ec0fd0ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   18db4:	01013503          	ld	a0,16(sp)
   18db8:	fc050ae3          	beq	a0,zero,18d8c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb04>
	  _M_pi->_M_release();
   18dbc:	00029317          	auipc	t1,0x29
   18dc0:	60433303          	ld	t1,1540(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   18dc4:	000300e7          	jalr	ra,0(t1)
   18dc8:	fc5ff06f          	jal	zero,18d8c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb04>
	if (_M_pi != nullptr)
   18dcc:	00050413          	addi	s0,a0,0
   18dd0:	02813503          	ld	a0,40(sp)
   18dd4:	fe0500e3          	beq	a0,zero,18db4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb2c>
	  _M_pi->_M_release();
   18dd8:	00029317          	auipc	t1,0x29
   18ddc:	5e833303          	ld	t1,1512(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   18de0:	000300e7          	jalr	ra,0(t1)
   18de4:	fd1ff06f          	jal	zero,18db4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb2c>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18de8:	03213023          	sd	s2,32(sp)
      : _M_pi(__r._M_pi)
   18dec:	02013423          	sd	zero,40(sp)
      : sec(sec), pos(sec->begin + offset) {}
   18df0:	00893603          	ld	a2,8(s2)
   18df4:	02c13823          	sd	a2,48(sp)
      { return _M_ptr; }
   18df8:	00090793          	addi	a5,s2,0
  while (!infocur.end()) {
   18dfc:	01093703          	ld	a4,16(s2)
   18e00:	c0e668e3          	bltu	a2,a4,18a10 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x788>
   18e04:	e4dff06f          	jal	zero,18c50 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9c8>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18e08:	01413423          	sd	s4,8(sp)
      : _M_pi(__r._M_pi)
   18e0c:	00013823          	sd	zero,16(sp)
   18e10:	008a3783          	ld	a5,8(s4)
   18e14:	00f13c23          	sd	a5,24(sp)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   18e18:	00813783          	ld	a5,8(sp)
   18e1c:	0107b703          	ld	a4,16(a5)
   18e20:	01813783          	ld	a5,24(sp)
   18e24:	40f70633          	sub	a2,a4,a5
   18e28:	00300693          	addi	a3,zero,3
   18e2c:	00c6f463          	bgeu	a3,a2,18e34 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xbac>
   18e30:	80e7e6e3          	bltu	a5,a4,1863c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3b4>
      underflow();
   18e34:	00810513          	addi	a0,sp,8
   18e38:	4c5030ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
   18e3c:	801ff06f          	jal	zero,1863c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3b4>

0000000000018e40 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)>:
type_unit::type_unit(const dwarf &file, section_offset offset) {
   18e40:	f2010113          	addi	sp,sp,-224
   18e44:	0c113c23          	sd	ra,216(sp)
   18e48:	0c813823          	sd	s0,208(sp)
   18e4c:	0c913423          	sd	s1,200(sp)
   18e50:	0d213023          	sd	s2,192(sp)
   18e54:	0b313c23          	sd	s3,184(sp)
   18e58:	0b413823          	sd	s4,176(sp)
   18e5c:	0b513423          	sd	s5,168(sp)
   18e60:	0b613023          	sd	s6,160(sp)
   18e64:	09713c23          	sd	s7,152(sp)
   18e68:	09813823          	sd	s8,144(sp)
   18e6c:	00050913          	addi	s2,a0,0
   18e70:	00058993          	addi	s3,a1,0
   18e74:	00060a13          	addi	s4,a2,0
      : _M_ptr(0), _M_refcount()
   18e78:	00053423          	sd	zero,8(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   18e7c:	00053823          	sd	zero,16(a0)
   18e80:	00029797          	auipc	a5,0x29
   18e84:	4d07b783          	ld	a5,1232(a5) # 42350 <vtable for dwarf::type_unit@@Base+0x9f8>
   18e88:	01078793          	addi	a5,a5,16
   18e8c:	00f53023          	sd	a5,0(a0)
  cursor cur(file.get_section(section_type::types), offset);
   18e90:	00b00613          	addi	a2,zero,11
   18e94:	08010513          	addi	a0,sp,128
   18e98:	ebcfe0ef          	jal	ra,17554 <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18e9c:	08013783          	ld	a5,128(sp)
   18ea0:	00f13823          	sd	a5,16(sp)
      : _M_pi(__r._M_pi)
   18ea4:	08813503          	ld	a0,136(sp)
   18ea8:	00a13c23          	sd	a0,24(sp)
	if (_M_pi != nullptr)
   18eac:	02050063          	beq	a0,zero,18ecc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8c>
    if (__is_single_threaded())
   18eb0:	00029797          	auipc	a5,0x29
   18eb4:	5c87b783          	ld	a5,1480(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18eb8:	0007c783          	lbu	a5,0(a5)
   18ebc:	04078e63          	beq	a5,zero,18f18 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xd8>
  { *__mem += __val; }
   18ec0:	03052783          	lw	a5,48(a0)
   18ec4:	0017879b          	addiw	a5,a5,1
   18ec8:	02f52823          	sw	a5,48(a0)
      : sec(sec), pos(sec->begin + offset) {}
   18ecc:	08013783          	ld	a5,128(sp)
   18ed0:	0087b783          	ld	a5,8(a5)
   18ed4:	014787b3          	add	a5,a5,s4
   18ed8:	02f13023          	sd	a5,32(sp)
	if (_M_pi != nullptr)
   18edc:	08813403          	ld	s0,136(sp)
   18ee0:	02040463          	beq	s0,zero,18f08 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xc8>
    if (__is_single_threaded())
   18ee4:	00029797          	auipc	a5,0x29
   18ee8:	5947b783          	ld	a5,1428(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18eec:	0007c783          	lbu	a5,0(a5)
   18ef0:	02078c63          	beq	a5,zero,18f28 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xe8>
    _Atomic_word __result = *__mem;
   18ef4:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   18ef8:	fff5079b          	addiw	a5,a0,-1
   18efc:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18f00:	00100793          	addi	a5,zero,1
   18f04:	02f50a63          	beq	a0,a5,18f38 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xf8>
  std::shared_ptr<section> subsec = cur.subsection();
   18f08:	01010593          	addi	a1,sp,16
   18f0c:	00010513          	addi	a0,sp,0
   18f10:	130040ef          	jal	ra,1d040 <dwarf::cursor::subsection()>
   18f14:	0800006f          	jal	zero,18f94 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x154>
      __atomic_add(__mem, __val);
   18f18:	00100593          	addi	a1,zero,1
   18f1c:	03050513          	addi	a0,a0,48
   18f20:	be0fd0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18f24:	fa9ff06f          	jal	zero,18ecc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8c>
      return __exchange_and_add(__mem, __val);
   18f28:	fff00593          	addi	a1,zero,-1
   18f2c:	03040513          	addi	a0,s0,48
   18f30:	c00fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18f34:	fcdff06f          	jal	zero,18f00 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xc0>
	_M_dispose();
   18f38:	00043783          	ld	a5,0(s0)
   18f3c:	0107b783          	ld	a5,16(a5)
   18f40:	00040513          	addi	a0,s0,0
   18f44:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18f48:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18f4c:	00029797          	auipc	a5,0x29
   18f50:	52c7b783          	ld	a5,1324(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18f54:	0007c783          	lbu	a5,0(a5)
   18f58:	02078663          	beq	a5,zero,18f84 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x144>
    _Atomic_word __result = *__mem;
   18f5c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   18f60:	fff5079b          	addiw	a5,a0,-1
   18f64:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18f68:	00100793          	addi	a5,zero,1
   18f6c:	f8f51ee3          	bne	a0,a5,18f08 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xc8>
	    _M_destroy();
   18f70:	00043783          	ld	a5,0(s0)
   18f74:	0187b783          	ld	a5,24(a5)
   18f78:	00040513          	addi	a0,s0,0
   18f7c:	000780e7          	jalr	ra,0(a5)
   18f80:	f89ff06f          	jal	zero,18f08 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xc8>
      return __exchange_and_add(__mem, __val);
   18f84:	fff00593          	addi	a1,zero,-1
   18f88:	03440513          	addi	a0,s0,52
   18f8c:	ba4fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18f90:	fd9ff06f          	jal	zero,18f68 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x128>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18f94:	00013483          	ld	s1,0(sp)
      : _M_pi(__r._M_pi)
   18f98:	00813403          	ld	s0,8(sp)
	if (_M_pi != nullptr)
   18f9c:	78040463          	beq	s0,zero,19724 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8e4>
    if (__is_single_threaded())
   18fa0:	00029797          	auipc	a5,0x29
   18fa4:	4d87b783          	ld	a5,1240(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18fa8:	0007c783          	lbu	a5,0(a5)
   18fac:	0a078663          	beq	a5,zero,19058 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x218>
  { *__mem += __val; }
   18fb0:	03042783          	lw	a5,48(s0)
   18fb4:	0017879b          	addiw	a5,a5,1
   18fb8:	02f42823          	sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18fbc:	02913423          	sd	s1,40(sp)
      : _M_pi(__r._M_pi)
   18fc0:	02813823          	sd	s0,48(sp)
    if (__is_single_threaded())
   18fc4:	00029797          	auipc	a5,0x29
   18fc8:	4b47b783          	ld	a5,1204(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18fcc:	0007c783          	lbu	a5,0(a5)
   18fd0:	08078c63          	beq	a5,zero,19068 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x228>
  { *__mem += __val; }
   18fd4:	03042783          	lw	a5,48(s0)
   18fd8:	0017879b          	addiw	a5,a5,1
   18fdc:	02f42823          	sw	a5,48(s0)
   18fe0:	0084b783          	ld	a5,8(s1)
   18fe4:	02f13c23          	sd	a5,56(sp)
    if (__is_single_threaded())
   18fe8:	00029797          	auipc	a5,0x29
   18fec:	4907b783          	ld	a5,1168(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18ff0:	0007c783          	lbu	a5,0(a5)
   18ff4:	08078263          	beq	a5,zero,19078 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x238>
    _Atomic_word __result = *__mem;
   18ff8:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   18ffc:	fff5079b          	addiw	a5,a0,-1
   19000:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19004:	00100793          	addi	a5,zero,1
   19008:	72f51663          	bne	a0,a5,19734 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8f4>
	_M_dispose();
   1900c:	00043783          	ld	a5,0(s0)
   19010:	0107b783          	ld	a5,16(a5)
   19014:	00040513          	addi	a0,s0,0
   19018:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1901c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19020:	00029797          	auipc	a5,0x29
   19024:	4587b783          	ld	a5,1112(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19028:	0007c783          	lbu	a5,0(a5)
   1902c:	04078e63          	beq	a5,zero,19088 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x248>
    _Atomic_word __result = *__mem;
   19030:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   19034:	fff5079b          	addiw	a5,a0,-1
   19038:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1903c:	00100793          	addi	a5,zero,1
   19040:	6ef51a63          	bne	a0,a5,19734 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8f4>
	    _M_destroy();
   19044:	00043783          	ld	a5,0(s0)
   19048:	0187b783          	ld	a5,24(a5)
   1904c:	00040513          	addi	a0,s0,0
   19050:	000780e7          	jalr	ra,0(a5)
   19054:	6e00006f          	jal	zero,19734 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8f4>
      __atomic_add(__mem, __val);
   19058:	00100593          	addi	a1,zero,1
   1905c:	03040513          	addi	a0,s0,48
   19060:	aa0fd0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   19064:	f59ff06f          	jal	zero,18fbc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x17c>
   19068:	00100593          	addi	a1,zero,1
   1906c:	03040513          	addi	a0,s0,48
   19070:	a90fd0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   19074:	f6dff06f          	jal	zero,18fe0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1a0>
      return __exchange_and_add(__mem, __val);
   19078:	fff00593          	addi	a1,zero,-1
   1907c:	03040513          	addi	a0,s0,48
   19080:	ab0fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19084:	f81ff06f          	jal	zero,19004 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1c4>
   19088:	fff00593          	addi	a1,zero,-1
   1908c:	03440513          	addi	a0,s0,52
   19090:	aa0fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19094:	fa9ff06f          	jal	zero,1903c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1fc>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   19098:	02813783          	ld	a5,40(sp)
   1909c:	0107b703          	ld	a4,16(a5)
   190a0:	03813783          	ld	a5,56(sp)
   190a4:	40f70633          	sub	a2,a4,a5
   190a8:	00100693          	addi	a3,zero,1
   190ac:	00c6f463          	bgeu	a3,a2,190b4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x274>
   190b0:	00e7e663          	bltu	a5,a4,190bc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x27c>
      underflow();
   190b4:	02810513          	addi	a0,sp,40
   190b8:	245030ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   190bc:	03813703          	ld	a4,56(sp)
    if (sec->ord == byte_order::lsb) {
   190c0:	02813783          	ld	a5,40(sp)
   190c4:	01c7a783          	lw	a5,28(a5)
   190c8:	02079c63          	bne	a5,zero,19100 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x2c0>
        val |= ((uint64_t)p[i]) << (i * 8);
   190cc:	00174783          	lbu	a5,1(a4)
   190d0:	00879793          	slli	a5,a5,0x8
   190d4:	00074683          	lbu	a3,0(a4)
   190d8:	00d7e7b3          	or	a5,a5,a3
    pos += sizeof(T);
   190dc:	00270713          	addi	a4,a4,2
   190e0:	02e13c23          	sd	a4,56(sp)
    return (T)val;
   190e4:	03079413          	slli	s0,a5,0x30
   190e8:	03045413          	srli	s0,s0,0x30
  if (version != 4)
   190ec:	00400713          	addi	a4,zero,4
   190f0:	02e79263          	bne	a5,a4,19114 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x2d4>
  section_offset debug_abbrev_offset = sub.offset();
   190f4:	02810513          	addi	a0,sp,40
   190f8:	190040ef          	jal	ra,1d288 <dwarf::cursor::offset()>
   190fc:	0bc0006f          	jal	zero,191b8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x378>
        val = (val << 8) | (uint64_t)p[i];
   19100:	00074783          	lbu	a5,0(a4)
   19104:	00879793          	slli	a5,a5,0x8
   19108:	00174683          	lbu	a3,1(a4)
   1910c:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   19110:	fcdff06f          	jal	zero,190dc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x29c>
    throw format_error("unknown type unit version " + std::to_string(version));
   19114:	01000513          	addi	a0,zero,16
   19118:	ab8fd0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1911c:	00050493          	addi	s1,a0,0
   19120:	00040593          	addi	a1,s0,0
   19124:	06010413          	addi	s0,sp,96
   19128:	00040513          	addi	a0,s0,0
   1912c:	00029317          	auipc	t1,0x29
   19130:	35c33303          	ld	t1,860(t1) # 42488 <std::__cxx11::to_string(int)@@Base+0x27684>
   19134:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   19138:	0001e617          	auipc	a2,0x1e
   1913c:	8f860613          	addi	a2,a2,-1800 # 36a30 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xc0>
   19140:	00000593          	addi	a1,zero,0
   19144:	00040513          	addi	a0,s0,0
   19148:	9f8fd0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1914c:	00050593          	addi	a1,a0,0
   19150:	04010413          	addi	s0,sp,64
   19154:	00040513          	addi	a0,s0,0
   19158:	ab8fd0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   1915c:	00040593          	addi	a1,s0,0
   19160:	00048513          	addi	a0,s1,0
   19164:	bdcfd0ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   19168:	00029797          	auipc	a5,0x29
   1916c:	3e87b783          	ld	a5,1000(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   19170:	01078793          	addi	a5,a5,16
   19174:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   19178:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   1917c:	05010793          	addi	a5,sp,80
   19180:	00f50463          	beq	a0,a5,19188 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x348>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   19184:	b2cfd0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   19188:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   1918c:	07010793          	addi	a5,sp,112
   19190:	00f50463          	beq	a0,a5,19198 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x358>
   19194:	b1cfd0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   19198:	00029617          	auipc	a2,0x29
   1919c:	1e063603          	ld	a2,480(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   191a0:	00029597          	auipc	a1,0x29
   191a4:	1085b583          	ld	a1,264(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   191a8:	00048513          	addi	a0,s1,0
   191ac:	cb4fd0ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   191b0:	00050413          	addi	s0,a0,0
   191b4:	4d80006f          	jal	zero,1968c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x84c>
  section_offset debug_abbrev_offset = sub.offset();
   191b8:	00050a93          	addi	s5,a0,0
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   191bc:	02813783          	ld	a5,40(sp)
   191c0:	0107b703          	ld	a4,16(a5)
   191c4:	03813783          	ld	a5,56(sp)
   191c8:	00e7e663          	bltu	a5,a4,191d4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x394>
      underflow();
   191cc:	02810513          	addi	a0,sp,40
   191d0:	12d030ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   191d4:	03813783          	ld	a5,56(sp)
      { return _M_ptr; }
   191d8:	02813703          	ld	a4,40(sp)
    if (sec->ord == byte_order::lsb) {
   191dc:	01c72683          	lw	a3,28(a4)
   191e0:	50068863          	beq	a3,zero,196f0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8b0>
        val = (val << 8) | (uint64_t)p[i];
   191e4:	0007c603          	lbu	a2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   191e8:	50c0006f          	jal	zero,196f4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8b4>
    const unsigned char *p = (const unsigned char *)pos;
   191ec:	03813603          	ld	a2,56(sp)
    if (sec->ord == byte_order::lsb) {
   191f0:	02813783          	ld	a5,40(sp)
   191f4:	01c7a783          	lw	a5,28(a5)
   191f8:	02079e63          	bne	a5,zero,19234 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x3f4>
   191fc:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   19200:	00000493          	addi	s1,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   19204:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   19208:	0006c703          	lbu	a4,0(a3)
   1920c:	00f71733          	sll	a4,a4,a5
   19210:	00e4e4b3          	or	s1,s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   19214:	00168693          	addi	a3,a3,1
   19218:	0087879b          	addiw	a5,a5,8
   1921c:	feb796e3          	bne	a5,a1,19208 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x3c8>
    pos += sizeof(T);
   19220:	00860613          	addi	a2,a2,8
   19224:	02c13c23          	sd	a2,56(sp)
  section_offset type_offset = sub.offset();
   19228:	02810513          	addi	a0,sp,40
   1922c:	05c040ef          	jal	ra,1d288 <dwarf::cursor::offset()>
   19230:	0280006f          	jal	zero,19258 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x418>
   19234:	00060793          	addi	a5,a2,0
   19238:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1923c:	00000493          	addi	s1,zero,0
        val = (val << 8) | (uint64_t)p[i];
   19240:	00849493          	slli	s1,s1,0x8
   19244:	0007c703          	lbu	a4,0(a5)
   19248:	009764b3          	or	s1,a4,s1
      for (unsigned i = 0; i < sizeof(T); i++)
   1924c:	00178793          	addi	a5,a5,1
   19250:	fef698e3          	bne	a3,a5,19240 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x400>
   19254:	fcdff06f          	jal	zero,19220 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x3e0>
   19258:	00050b13          	addi	s6,a0,0
  section_offset get_section_offset() const { return pos - sec->begin; }
   1925c:	02813783          	ld	a5,40(sp)
   19260:	0087b783          	ld	a5,8(a5)
   19264:	03813b83          	ld	s7,56(sp)
   19268:	40fb8bb3          	sub	s7,s7,a5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1926c:	1c800513          	addi	a0,zero,456
   19270:	a50fd0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   19274:	00050413          	addi	s0,a0,0
   19278:	00052423          	sw	zero,8(a0)
   1927c:	00052623          	sw	zero,12(a0)
   19280:	00052823          	sw	zero,16(a0)
   19284:	00052a23          	sw	zero,20(a0)
   19288:	00052c23          	sw	zero,24(a0)
   1928c:	00052e23          	sw	zero,28(a0)
   19290:	02053023          	sd	zero,32(a0)
   19294:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   19298:	00100793          	addi	a5,zero,1
   1929c:	02f52823          	sw	a5,48(a0)
   192a0:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   192a4:	00029797          	auipc	a5,0x29
   192a8:	18c7b783          	ld	a5,396(a5) # 42430 <vtable for std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xa48>
   192ac:	01078793          	addi	a5,a5,16
   192b0:	00f53023          	sd	a5,0(a0)
   192b4:	03850c13          	addi	s8,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   192b8:	0009b783          	ld	a5,0(s3)
   192bc:	02f53c23          	sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   192c0:	0089b503          	ld	a0,8(s3)
   192c4:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   192c8:	02050063          	beq	a0,zero,192e8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4a8>
    if (__is_single_threaded())
   192cc:	00029797          	auipc	a5,0x29
   192d0:	1ac7b783          	ld	a5,428(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   192d4:	0007c783          	lbu	a5,0(a5)
   192d8:	1a078c63          	beq	a5,zero,19490 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x650>
  { *__mem += __val; }
   192dc:	03052783          	lw	a5,48(a0)
   192e0:	0017879b          	addiw	a5,a5,1
   192e4:	02f52823          	sw	a5,48(a0)
      : file(file), offset(offset), subsec(subsec),
   192e8:	05443423          	sd	s4,72(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   192ec:	00013783          	ld	a5,0(sp)
   192f0:	04f43823          	sd	a5,80(s0)
      : _M_pi(__r._M_pi)
   192f4:	00813503          	ld	a0,8(sp)
   192f8:	04a43c23          	sd	a0,88(s0)
	if (_M_pi != nullptr)
   192fc:	02050063          	beq	a0,zero,1931c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4dc>
    if (__is_single_threaded())
   19300:	00029797          	auipc	a5,0x29
   19304:	1787b783          	ld	a5,376(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19308:	0007c783          	lbu	a5,0(a5)
   1930c:	18078a63          	beq	a5,zero,194a0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x660>
  { *__mem += __val; }
   19310:	03052783          	lw	a5,48(a0)
   19314:	0017879b          	addiw	a5,a5,1
   19318:	02f52823          	sw	a5,48(a0)
        debug_abbrev_offset(debug_abbrev_offset), root_offset(root_offset),
   1931c:	07543023          	sd	s5,96(s0)
   19320:	07743423          	sd	s7,104(s0)
        type_signature(type_signature), type_offset(type_offset),
   19324:	06943823          	sd	s1,112(s0)
   19328:	07643c23          	sd	s6,120(s0)
  die() : cu(nullptr), abbrev(nullptr) {}
   1932c:	08043423          	sd	zero,136(s0)
   19330:	08043823          	sd	zero,144(s0)
   19334:	0a040793          	addi	a5,s0,160
   19338:	0cf43823          	sd	a5,208(s0)
   1933c:	0cf43c23          	sd	a5,216(s0)
   19340:	0d040793          	addi	a5,s0,208
   19344:	0ef43023          	sd	a5,224(s0)
   19348:	0e043c23          	sd	zero,248(s0)
   1934c:	10043023          	sd	zero,256(s0)
   19350:	11040793          	addi	a5,s0,272
   19354:	14f43023          	sd	a5,320(s0)
   19358:	14f43423          	sd	a5,328(s0)
   1935c:	14040793          	addi	a5,s0,320
   19360:	14f43823          	sd	a5,336(s0)
      : _M_ptr(0), _M_refcount()
   19364:	16043023          	sd	zero,352(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   19368:	16043423          	sd	zero,360(s0)
        have_abbrevs(false) {}
   1936c:	16040823          	sb	zero,368(s0)
   19370:	16043c23          	sd	zero,376(s0)
   19374:	18043023          	sd	zero,384(s0)
   19378:	18043423          	sd	zero,392(s0)
   1937c:	1c040793          	addi	a5,s0,448
   19380:	18f43823          	sd	a5,400(s0)
   19384:	00100793          	addi	a5,zero,1
   19388:	18f43c23          	sd	a5,408(s0)
    _Hash_node_base() noexcept : _M_nxt() { }
   1938c:	1a043023          	sd	zero,416(s0)
   19390:	1a043423          	sd	zero,424(s0)
    : _M_max_load_factor(__z), _M_next_resize(0) { }
   19394:	0001e797          	auipc	a5,0x1e
   19398:	9147a787          	flw	fa5,-1772(a5) # 36ca8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xf0>
   1939c:	1af42827          	fsw	fa5,432(s0)
   193a0:	1a043c23          	sd	zero,440(s0)
   193a4:	1c043023          	sd	zero,448(s0)
   193a8:	01893423          	sd	s8,8(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   193ac:	01093483          	ld	s1,16(s2)
	__r._M_pi = _M_pi;
   193b0:	00893823          	sd	s0,16(s2)
	if (_M_pi != nullptr)
   193b4:	02048463          	beq	s1,zero,193dc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x59c>
    if (__is_single_threaded())
   193b8:	00029797          	auipc	a5,0x29
   193bc:	0c07b783          	ld	a5,192(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   193c0:	0007c783          	lbu	a5,0(a5)
   193c4:	0e078663          	beq	a5,zero,194b0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x670>
    _Atomic_word __result = *__mem;
   193c8:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   193cc:	fff5079b          	addiw	a5,a0,-1
   193d0:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   193d4:	00100793          	addi	a5,zero,1
   193d8:	0ef50463          	beq	a0,a5,194c0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x680>
	if (_M_pi != nullptr)
   193dc:	03013403          	ld	s0,48(sp)
   193e0:	02040463          	beq	s0,zero,19408 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5c8>
    if (__is_single_threaded())
   193e4:	00029797          	auipc	a5,0x29
   193e8:	0947b783          	ld	a5,148(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   193ec:	0007c783          	lbu	a5,0(a5)
   193f0:	12078663          	beq	a5,zero,1951c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x6dc>
    _Atomic_word __result = *__mem;
   193f4:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   193f8:	fff5079b          	addiw	a5,a0,-1
   193fc:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19400:	00100793          	addi	a5,zero,1
   19404:	12f50463          	beq	a0,a5,1952c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x6ec>
	if (_M_pi != nullptr)
   19408:	00813403          	ld	s0,8(sp)
   1940c:	02040463          	beq	s0,zero,19434 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5f4>
    if (__is_single_threaded())
   19410:	00029797          	auipc	a5,0x29
   19414:	0687b783          	ld	a5,104(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19418:	0007c783          	lbu	a5,0(a5)
   1941c:	16078663          	beq	a5,zero,19588 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x748>
    _Atomic_word __result = *__mem;
   19420:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   19424:	fff5079b          	addiw	a5,a0,-1
   19428:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1942c:	00100793          	addi	a5,zero,1
   19430:	16f50463          	beq	a0,a5,19598 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x758>
	if (_M_pi != nullptr)
   19434:	01813403          	ld	s0,24(sp)
   19438:	02040463          	beq	s0,zero,19460 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x620>
    if (__is_single_threaded())
   1943c:	00029797          	auipc	a5,0x29
   19440:	03c7b783          	ld	a5,60(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19444:	0007c783          	lbu	a5,0(a5)
   19448:	1a078663          	beq	a5,zero,195f4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x7b4>
    _Atomic_word __result = *__mem;
   1944c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   19450:	fff5079b          	addiw	a5,a0,-1
   19454:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19458:	00100793          	addi	a5,zero,1
   1945c:	1af50463          	beq	a0,a5,19604 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x7c4>
}
   19460:	0d813083          	ld	ra,216(sp)
   19464:	0d013403          	ld	s0,208(sp)
   19468:	0c813483          	ld	s1,200(sp)
   1946c:	0c013903          	ld	s2,192(sp)
   19470:	0b813983          	ld	s3,184(sp)
   19474:	0b013a03          	ld	s4,176(sp)
   19478:	0a813a83          	ld	s5,168(sp)
   1947c:	0a013b03          	ld	s6,160(sp)
   19480:	09813b83          	ld	s7,152(sp)
   19484:	09013c03          	ld	s8,144(sp)
   19488:	0e010113          	addi	sp,sp,224
   1948c:	00008067          	jalr	zero,0(ra)
      __atomic_add(__mem, __val);
   19490:	00100593          	addi	a1,zero,1
   19494:	03050513          	addi	a0,a0,48
   19498:	e69fc0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1949c:	e4dff06f          	jal	zero,192e8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4a8>
   194a0:	00100593          	addi	a1,zero,1
   194a4:	03050513          	addi	a0,a0,48
   194a8:	e59fc0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   194ac:	e71ff06f          	jal	zero,1931c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4dc>
      return __exchange_and_add(__mem, __val);
   194b0:	fff00593          	addi	a1,zero,-1
   194b4:	03048513          	addi	a0,s1,48
   194b8:	e79fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   194bc:	f19ff06f          	jal	zero,193d4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x594>
	_M_dispose();
   194c0:	0004b783          	ld	a5,0(s1)
   194c4:	0107b783          	ld	a5,16(a5)
   194c8:	00048513          	addi	a0,s1,0
   194cc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   194d0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   194d4:	00029797          	auipc	a5,0x29
   194d8:	fa47b783          	ld	a5,-92(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   194dc:	0007c783          	lbu	a5,0(a5)
   194e0:	02078663          	beq	a5,zero,1950c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x6cc>
    _Atomic_word __result = *__mem;
   194e4:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   194e8:	fff5079b          	addiw	a5,a0,-1
   194ec:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   194f0:	00100793          	addi	a5,zero,1
   194f4:	eef514e3          	bne	a0,a5,193dc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x59c>
	    _M_destroy();
   194f8:	0004b783          	ld	a5,0(s1)
   194fc:	0187b783          	ld	a5,24(a5)
   19500:	00048513          	addi	a0,s1,0
   19504:	000780e7          	jalr	ra,0(a5)
   19508:	ed5ff06f          	jal	zero,193dc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x59c>
      return __exchange_and_add(__mem, __val);
   1950c:	fff00593          	addi	a1,zero,-1
   19510:	03448513          	addi	a0,s1,52
   19514:	e1dfc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19518:	fd9ff06f          	jal	zero,194f0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x6b0>
   1951c:	fff00593          	addi	a1,zero,-1
   19520:	03040513          	addi	a0,s0,48
   19524:	e0dfc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19528:	ed9ff06f          	jal	zero,19400 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5c0>
	_M_dispose();
   1952c:	00043783          	ld	a5,0(s0)
   19530:	0107b783          	ld	a5,16(a5)
   19534:	00040513          	addi	a0,s0,0
   19538:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1953c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19540:	00029797          	auipc	a5,0x29
   19544:	f387b783          	ld	a5,-200(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19548:	0007c783          	lbu	a5,0(a5)
   1954c:	02078663          	beq	a5,zero,19578 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x738>
    _Atomic_word __result = *__mem;
   19550:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   19554:	fff5079b          	addiw	a5,a0,-1
   19558:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1955c:	00100793          	addi	a5,zero,1
   19560:	eaf514e3          	bne	a0,a5,19408 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5c8>
	    _M_destroy();
   19564:	00043783          	ld	a5,0(s0)
   19568:	0187b783          	ld	a5,24(a5)
   1956c:	00040513          	addi	a0,s0,0
   19570:	000780e7          	jalr	ra,0(a5)
   19574:	e95ff06f          	jal	zero,19408 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5c8>
      return __exchange_and_add(__mem, __val);
   19578:	fff00593          	addi	a1,zero,-1
   1957c:	03440513          	addi	a0,s0,52
   19580:	db1fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19584:	fd9ff06f          	jal	zero,1955c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x71c>
   19588:	fff00593          	addi	a1,zero,-1
   1958c:	03040513          	addi	a0,s0,48
   19590:	da1fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19594:	e99ff06f          	jal	zero,1942c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5ec>
	_M_dispose();
   19598:	00043783          	ld	a5,0(s0)
   1959c:	0107b783          	ld	a5,16(a5)
   195a0:	00040513          	addi	a0,s0,0
   195a4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   195a8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   195ac:	00029797          	auipc	a5,0x29
   195b0:	ecc7b783          	ld	a5,-308(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   195b4:	0007c783          	lbu	a5,0(a5)
   195b8:	02078663          	beq	a5,zero,195e4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x7a4>
    _Atomic_word __result = *__mem;
   195bc:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   195c0:	fff5079b          	addiw	a5,a0,-1
   195c4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   195c8:	00100793          	addi	a5,zero,1
   195cc:	e6f514e3          	bne	a0,a5,19434 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5f4>
	    _M_destroy();
   195d0:	00043783          	ld	a5,0(s0)
   195d4:	0187b783          	ld	a5,24(a5)
   195d8:	00040513          	addi	a0,s0,0
   195dc:	000780e7          	jalr	ra,0(a5)
   195e0:	e55ff06f          	jal	zero,19434 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5f4>
      return __exchange_and_add(__mem, __val);
   195e4:	fff00593          	addi	a1,zero,-1
   195e8:	03440513          	addi	a0,s0,52
   195ec:	d45fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   195f0:	fd9ff06f          	jal	zero,195c8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x788>
   195f4:	fff00593          	addi	a1,zero,-1
   195f8:	03040513          	addi	a0,s0,48
   195fc:	d35fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19600:	e59ff06f          	jal	zero,19458 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x618>
	_M_dispose();
   19604:	00043783          	ld	a5,0(s0)
   19608:	0107b783          	ld	a5,16(a5)
   1960c:	00040513          	addi	a0,s0,0
   19610:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19614:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19618:	00029797          	auipc	a5,0x29
   1961c:	e607b783          	ld	a5,-416(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19620:	0007c783          	lbu	a5,0(a5)
   19624:	02078663          	beq	a5,zero,19650 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x810>
    _Atomic_word __result = *__mem;
   19628:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1962c:	fff5079b          	addiw	a5,a0,-1
   19630:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19634:	00100793          	addi	a5,zero,1
   19638:	e2f514e3          	bne	a0,a5,19460 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x620>
	    _M_destroy();
   1963c:	00043783          	ld	a5,0(s0)
   19640:	0187b783          	ld	a5,24(a5)
   19644:	00040513          	addi	a0,s0,0
   19648:	000780e7          	jalr	ra,0(a5)
   1964c:	e15ff06f          	jal	zero,19460 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x620>
      return __exchange_and_add(__mem, __val);
   19650:	fff00593          	addi	a1,zero,-1
   19654:	03440513          	addi	a0,s0,52
   19658:	cd9fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1965c:	fd9ff06f          	jal	zero,19634 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x7f4>
      { return _M_dataplus._M_p; }
   19660:	00050413          	addi	s0,a0,0
   19664:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   19668:	05010793          	addi	a5,sp,80
   1966c:	00f50463          	beq	a0,a5,19674 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x834>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   19670:	e41fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   19674:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   19678:	07010793          	addi	a5,sp,112
   1967c:	00f50463          	beq	a0,a5,19684 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x844>
   19680:	e31fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
    throw format_error("unknown type unit version " + std::to_string(version));
   19684:	00048513          	addi	a0,s1,0
   19688:	de9fc0ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1968c:	03013503          	ld	a0,48(sp)
   19690:	00050863          	beq	a0,zero,196a0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x860>
	  _M_pi->_M_release();
   19694:	00029317          	auipc	t1,0x29
   19698:	d2c33303          	ld	t1,-724(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   1969c:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   196a0:	00813503          	ld	a0,8(sp)
   196a4:	00050863          	beq	a0,zero,196b4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x874>
	  _M_pi->_M_release();
   196a8:	00029317          	auipc	t1,0x29
   196ac:	d1833303          	ld	t1,-744(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   196b0:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   196b4:	01813503          	ld	a0,24(sp)
   196b8:	00050863          	beq	a0,zero,196c8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x888>
	  _M_pi->_M_release();
   196bc:	00029317          	auipc	t1,0x29
   196c0:	d0433303          	ld	t1,-764(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   196c4:	000300e7          	jalr	ra,0(t1)
}
   196c8:	00090513          	addi	a0,s2,0
   196cc:	d6dfd0ef          	jal	ra,17438 <dwarf::unit::~unit()>
   196d0:	00040513          	addi	a0,s0,0
   196d4:	fbdfc0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   196d8:	00050413          	addi	s0,a0,0
   196dc:	f99ff06f          	jal	zero,19674 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x834>
	if (_M_pi != nullptr)
   196e0:	00050413          	addi	s0,a0,0
   196e4:	fd1ff06f          	jal	zero,196b4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x874>
   196e8:	00050413          	addi	s0,a0,0
   196ec:	fddff06f          	jal	zero,196c8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x888>
        val |= ((uint64_t)p[i]) << (i * 8);
   196f0:	0007c603          	lbu	a2,0(a5)
    pos += sizeof(T);
   196f4:	00178793          	addi	a5,a5,1
   196f8:	02f13c23          	sd	a5,56(sp)
  subsec->addr_size = address_size;
   196fc:	00013683          	ld	a3,0(sp)
   19700:	02c6a023          	sw	a2,32(a3)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   19704:	01073703          	ld	a4,16(a4)
   19708:	40f70633          	sub	a2,a4,a5
   1970c:	00700693          	addi	a3,zero,7
   19710:	00c6f463          	bgeu	a3,a2,19718 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8d8>
   19714:	ace7ece3          	bltu	a5,a4,191ec <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x3ac>
      underflow();
   19718:	02810513          	addi	a0,sp,40
   1971c:	3e0030ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
   19720:	acdff06f          	jal	zero,191ec <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x3ac>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   19724:	02913423          	sd	s1,40(sp)
      : _M_pi(__r._M_pi)
   19728:	02013823          	sd	zero,48(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1972c:	0084b783          	ld	a5,8(s1)
   19730:	02f13c23          	sd	a5,56(sp)
  sub.skip_initial_length();
   19734:	02810513          	addi	a0,sp,40
   19738:	22c030ef          	jal	ra,1c964 <dwarf::cursor::skip_initial_length()>
   1973c:	95dff06f          	jal	zero,19098 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x258>

0000000000019740 <dwarf::dwarf::get_type_unit(unsigned long) const>:
const type_unit &dwarf::get_type_unit(uint64_t type_signature) const {
   19740:	f2010113          	addi	sp,sp,-224
   19744:	0c113c23          	sd	ra,216(sp)
   19748:	0c813823          	sd	s0,208(sp)
   1974c:	0c913423          	sd	s1,200(sp)
   19750:	0d213023          	sd	s2,192(sp)
   19754:	0b313c23          	sd	s3,184(sp)
   19758:	0b413823          	sd	s4,176(sp)
   1975c:	0b513423          	sd	s5,168(sp)
   19760:	0b613023          	sd	s6,160(sp)
   19764:	09713c23          	sd	s7,152(sp)
   19768:	09813823          	sd	s8,144(sp)
   1976c:	09913423          	sd	s9,136(sp)
   19770:	09a13023          	sd	s10,128(sp)
   19774:	00050913          	addi	s2,a0,0
   19778:	00b13423          	sd	a1,8(sp)
  if (!m->have_type_units) {
   1977c:	00053783          	ld	a5,0(a0)
   19780:	0807c783          	lbu	a5,128(a5)
   19784:	32079c63          	bne	a5,zero,19abc <dwarf::dwarf::get_type_unit(unsigned long) const+0x37c>
    cursor tucur(get_section(section_type::types));
   19788:	00b00613          	addi	a2,zero,11
   1978c:	00050593          	addi	a1,a0,0
   19790:	05810513          	addi	a0,sp,88
   19794:	dc1fd0ef          	jal	ra,17554 <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   19798:	05813783          	ld	a5,88(sp)
   1979c:	00f13c23          	sd	a5,24(sp)
      : _M_pi(__r._M_pi)
   197a0:	06013503          	ld	a0,96(sp)
   197a4:	02a13023          	sd	a0,32(sp)
	if (_M_pi != nullptr)
   197a8:	02050063          	beq	a0,zero,197c8 <dwarf::dwarf::get_type_unit(unsigned long) const+0x88>
    if (__is_single_threaded())
   197ac:	00029797          	auipc	a5,0x29
   197b0:	ccc7b783          	ld	a5,-820(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   197b4:	0007c783          	lbu	a5,0(a5)
   197b8:	08078463          	beq	a5,zero,19840 <dwarf::dwarf::get_type_unit(unsigned long) const+0x100>
  { *__mem += __val; }
   197bc:	03052783          	lw	a5,48(a0)
   197c0:	0017879b          	addiw	a5,a5,1
   197c4:	02f52823          	sw	a5,48(a0)
   197c8:	05813783          	ld	a5,88(sp)
   197cc:	0087b783          	ld	a5,8(a5)
   197d0:	02f13423          	sd	a5,40(sp)
	if (_M_pi != nullptr)
   197d4:	06013403          	ld	s0,96(sp)
   197d8:	02040463          	beq	s0,zero,19800 <dwarf::dwarf::get_type_unit(unsigned long) const+0xc0>
    if (__is_single_threaded())
   197dc:	00029797          	auipc	a5,0x29
   197e0:	c9c7b783          	ld	a5,-868(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   197e4:	0007c783          	lbu	a5,0(a5)
   197e8:	06078463          	beq	a5,zero,19850 <dwarf::dwarf::get_type_unit(unsigned long) const+0x110>
    _Atomic_word __result = *__mem;
   197ec:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   197f0:	fff5079b          	addiw	a5,a0,-1
   197f4:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   197f8:	00100793          	addi	a5,zero,1
   197fc:	06f50263          	beq	a0,a5,19860 <dwarf::dwarf::get_type_unit(unsigned long) const+0x120>
  bool end() const { return pos >= sec->end; }
   19800:	02813783          	ld	a5,40(sp)
      { return _M_ptr; }
   19804:	01813703          	ld	a4,24(sp)
    while (!tucur.end()) {
   19808:	01073683          	ld	a3,16(a4)
   1980c:	26d7fc63          	bgeu	a5,a3,19a84 <dwarf::dwarf::get_type_unit(unsigned long) const+0x344>
      type_unit tu(*this, tucur.get_section_offset());
   19810:	03810993          	addi	s3,sp,56
      operator[](const key_type& __k)
      { return _M_h[__k]; }

      mapped_type&
      operator[](key_type&& __k)
      { return _M_h[std::move(__k)]; }
   19814:	06810b13          	addi	s6,sp,104
   19818:	00029b97          	auipc	s7,0x29
   1981c:	c68bbb83          	ld	s7,-920(s7) # 42480 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)@@Base+0x2602c>
    return ::__libc_single_threaded;
   19820:	00029a97          	auipc	s5,0x29
   19824:	c58aba83          	ld	s5,-936(s5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      tucur.subsection();
   19828:	07010c13          	addi	s8,sp,112
   1982c:	01810c93          	addi	s9,sp,24
class type_unit : public unit {
   19830:	00029a17          	auipc	s4,0x29
   19834:	b20a3a03          	ld	s4,-1248(s4) # 42350 <vtable for dwarf::type_unit@@Base+0x9f8>
   19838:	010a0a13          	addi	s4,s4,16
   1983c:	1c40006f          	jal	zero,19a00 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2c0>
      __atomic_add(__mem, __val);
   19840:	00100593          	addi	a1,zero,1
   19844:	03050513          	addi	a0,a0,48
   19848:	ab9fc0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1984c:	f7dff06f          	jal	zero,197c8 <dwarf::dwarf::get_type_unit(unsigned long) const+0x88>
      return __exchange_and_add(__mem, __val);
   19850:	fff00593          	addi	a1,zero,-1
   19854:	03040513          	addi	a0,s0,48
   19858:	ad9fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1985c:	f9dff06f          	jal	zero,197f8 <dwarf::dwarf::get_type_unit(unsigned long) const+0xb8>
	_M_dispose();
   19860:	00043783          	ld	a5,0(s0)
   19864:	0107b783          	ld	a5,16(a5)
   19868:	00040513          	addi	a0,s0,0
   1986c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19870:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19874:	00029797          	auipc	a5,0x29
   19878:	c047b783          	ld	a5,-1020(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1987c:	0007c783          	lbu	a5,0(a5)
   19880:	02078663          	beq	a5,zero,198ac <dwarf::dwarf::get_type_unit(unsigned long) const+0x16c>
    _Atomic_word __result = *__mem;
   19884:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   19888:	fff5079b          	addiw	a5,a0,-1
   1988c:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19890:	00100793          	addi	a5,zero,1
   19894:	f6f516e3          	bne	a0,a5,19800 <dwarf::dwarf::get_type_unit(unsigned long) const+0xc0>
	    _M_destroy();
   19898:	00043783          	ld	a5,0(s0)
   1989c:	0187b783          	ld	a5,24(a5)
   198a0:	00040513          	addi	a0,s0,0
   198a4:	000780e7          	jalr	ra,0(a5)
   198a8:	f59ff06f          	jal	zero,19800 <dwarf::dwarf::get_type_unit(unsigned long) const+0xc0>
      return __exchange_and_add(__mem, __val);
   198ac:	fff00593          	addi	a1,zero,-1
   198b0:	03440513          	addi	a0,s0,52
   198b4:	a7dfc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   198b8:	fd9ff06f          	jal	zero,19890 <dwarf::dwarf::get_type_unit(unsigned long) const+0x150>
      { return _M_ptr; }
   198bc:	00093403          	ld	s0,0(s2)
      m->type_units[tu.get_type_signature()] = tu;
   198c0:	00098513          	addi	a0,s3,0
   198c4:	c85fd0ef          	jal	ra,17548 <dwarf::type_unit::get_type_signature() const>
   198c8:	06a13423          	sd	a0,104(sp)
   198cc:	000b0593          	addi	a1,s6,0
   198d0:	04840513          	addi	a0,s0,72
   198d4:	000b80e7          	jalr	ra,0(s7)
   198d8:	00050413          	addi	s0,a0,0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   198dc:	04013783          	ld	a5,64(sp)
   198e0:	00f53423          	sd	a5,8(a0)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   198e4:	04813483          	ld	s1,72(sp)
	if (__tmp != _M_pi)
   198e8:	01053783          	ld	a5,16(a0)
   198ec:	02f48e63          	beq	s1,a5,19928 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1e8>
	    if (__tmp != nullptr)
   198f0:	04048a63          	beq	s1,zero,19944 <dwarf::dwarf::get_type_unit(unsigned long) const+0x204>
    if (__is_single_threaded())
   198f4:	000ac783          	lbu	a5,0(s5)
   198f8:	04078063          	beq	a5,zero,19938 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1f8>
  { *__mem += __val; }
   198fc:	0304a783          	lw	a5,48(s1)
   19900:	0017879b          	addiw	a5,a5,1
   19904:	02f4a823          	sw	a5,48(s1)
	    if (_M_pi != nullptr)
   19908:	01053d03          	ld	s10,16(a0)
   1990c:	000d0c63          	beq	s10,zero,19924 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1e4>
    _Atomic_word __result = *__mem;
   19910:	030d2503          	lw	a0,48(s10)
    *__mem += __val;
   19914:	fff5079b          	addiw	a5,a0,-1
   19918:	02fd2823          	sw	a5,48(s10)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1991c:	00100793          	addi	a5,zero,1
   19920:	04f50263          	beq	a0,a5,19964 <dwarf::dwarf::get_type_unit(unsigned long) const+0x224>
	    _M_pi = __tmp;
   19924:	00943823          	sd	s1,16(s0)
      tucur.subsection();
   19928:	000c8593          	addi	a1,s9,0
   1992c:	000c0513          	addi	a0,s8,0
   19930:	710030ef          	jal	ra,1d040 <dwarf::cursor::subsection()>
   19934:	08c0006f          	jal	zero,199c0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x280>
      __atomic_add(__mem, __val);
   19938:	00100593          	addi	a1,zero,1
   1993c:	03048513          	addi	a0,s1,48
   19940:	9c1fc0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
	    if (_M_pi != nullptr)
   19944:	01043d03          	ld	s10,16(s0)
   19948:	fc0d0ee3          	beq	s10,zero,19924 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1e4>
    if (__is_single_threaded())
   1994c:	000ac783          	lbu	a5,0(s5)
   19950:	fc0790e3          	bne	a5,zero,19910 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1d0>
      return __exchange_and_add(__mem, __val);
   19954:	fff00593          	addi	a1,zero,-1
   19958:	030d0513          	addi	a0,s10,48
   1995c:	9d5fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19960:	fbdff06f          	jal	zero,1991c <dwarf::dwarf::get_type_unit(unsigned long) const+0x1dc>
	_M_dispose();
   19964:	000d3783          	ld	a5,0(s10)
   19968:	0107b783          	ld	a5,16(a5)
   1996c:	000d0513          	addi	a0,s10,0
   19970:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19974:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19978:	00029797          	auipc	a5,0x29
   1997c:	b007b783          	ld	a5,-1280(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19980:	0007c783          	lbu	a5,0(a5)
   19984:	02078663          	beq	a5,zero,199b0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x270>
    _Atomic_word __result = *__mem;
   19988:	034d2503          	lw	a0,52(s10)
    *__mem += __val;
   1998c:	fff5079b          	addiw	a5,a0,-1
   19990:	02fd2a23          	sw	a5,52(s10)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19994:	00100793          	addi	a5,zero,1
   19998:	f8f516e3          	bne	a0,a5,19924 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1e4>
	    _M_destroy();
   1999c:	000d3783          	ld	a5,0(s10)
   199a0:	0187b783          	ld	a5,24(a5)
   199a4:	000d0513          	addi	a0,s10,0
   199a8:	000780e7          	jalr	ra,0(a5)
   199ac:	f79ff06f          	jal	zero,19924 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1e4>
      return __exchange_and_add(__mem, __val);
   199b0:	fff00593          	addi	a1,zero,-1
   199b4:	034d0513          	addi	a0,s10,52
   199b8:	979fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   199bc:	fd9ff06f          	jal	zero,19994 <dwarf::dwarf::get_type_unit(unsigned long) const+0x254>
	if (_M_pi != nullptr)
   199c0:	07813403          	ld	s0,120(sp)
   199c4:	02040063          	beq	s0,zero,199e4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2a4>
    if (__is_single_threaded())
   199c8:	000ac783          	lbu	a5,0(s5)
   199cc:	04078663          	beq	a5,zero,19a18 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2d8>
    _Atomic_word __result = *__mem;
   199d0:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   199d4:	fff5079b          	addiw	a5,a0,-1
   199d8:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   199dc:	00100793          	addi	a5,zero,1
   199e0:	04f50463          	beq	a0,a5,19a28 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2e8>
   199e4:	03413c23          	sd	s4,56(sp)
   199e8:	00098513          	addi	a0,s3,0
   199ec:	a4dfd0ef          	jal	ra,17438 <dwarf::unit::~unit()>
   199f0:	02813783          	ld	a5,40(sp)
      { return _M_ptr; }
   199f4:	01813703          	ld	a4,24(sp)
    while (!tucur.end()) {
   199f8:	01073683          	ld	a3,16(a4)
   199fc:	08d7f463          	bgeu	a5,a3,19a84 <dwarf::dwarf::get_type_unit(unsigned long) const+0x344>
  section_offset get_section_offset() const { return pos - sec->begin; }
   19a00:	00873603          	ld	a2,8(a4)
      type_unit tu(*this, tucur.get_section_offset());
   19a04:	40c78633          	sub	a2,a5,a2
   19a08:	00090593          	addi	a1,s2,0
   19a0c:	00098513          	addi	a0,s3,0
   19a10:	c30ff0ef          	jal	ra,18e40 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)>
   19a14:	ea9ff06f          	jal	zero,198bc <dwarf::dwarf::get_type_unit(unsigned long) const+0x17c>
      return __exchange_and_add(__mem, __val);
   19a18:	fff00593          	addi	a1,zero,-1
   19a1c:	03040513          	addi	a0,s0,48
   19a20:	911fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19a24:	fb9ff06f          	jal	zero,199dc <dwarf::dwarf::get_type_unit(unsigned long) const+0x29c>
	_M_dispose();
   19a28:	00043783          	ld	a5,0(s0)
   19a2c:	0107b783          	ld	a5,16(a5)
   19a30:	00040513          	addi	a0,s0,0
   19a34:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19a38:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19a3c:	00029797          	auipc	a5,0x29
   19a40:	a3c7b783          	ld	a5,-1476(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19a44:	0007c783          	lbu	a5,0(a5)
   19a48:	02078663          	beq	a5,zero,19a74 <dwarf::dwarf::get_type_unit(unsigned long) const+0x334>
    _Atomic_word __result = *__mem;
   19a4c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   19a50:	fff5079b          	addiw	a5,a0,-1
   19a54:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19a58:	00100793          	addi	a5,zero,1
   19a5c:	f8f514e3          	bne	a0,a5,199e4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2a4>
	    _M_destroy();
   19a60:	00043783          	ld	a5,0(s0)
   19a64:	0187b783          	ld	a5,24(a5)
   19a68:	00040513          	addi	a0,s0,0
   19a6c:	000780e7          	jalr	ra,0(a5)
   19a70:	f75ff06f          	jal	zero,199e4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2a4>
      return __exchange_and_add(__mem, __val);
   19a74:	fff00593          	addi	a1,zero,-1
   19a78:	03440513          	addi	a0,s0,52
   19a7c:	8b5fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19a80:	fd9ff06f          	jal	zero,19a58 <dwarf::dwarf::get_type_unit(unsigned long) const+0x318>
      { return _M_ptr; }
   19a84:	00093783          	ld	a5,0(s2)
    m->have_type_units = true;
   19a88:	00100713          	addi	a4,zero,1
   19a8c:	08e78023          	sb	a4,128(a5)
	if (_M_pi != nullptr)
   19a90:	02013403          	ld	s0,32(sp)
   19a94:	02040463          	beq	s0,zero,19abc <dwarf::dwarf::get_type_unit(unsigned long) const+0x37c>
    if (__is_single_threaded())
   19a98:	00029797          	auipc	a5,0x29
   19a9c:	9e07b783          	ld	a5,-1568(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19aa0:	0007c783          	lbu	a5,0(a5)
   19aa4:	06078463          	beq	a5,zero,19b0c <dwarf::dwarf::get_type_unit(unsigned long) const+0x3cc>
    _Atomic_word __result = *__mem;
   19aa8:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   19aac:	fff5079b          	addiw	a5,a0,-1
   19ab0:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19ab4:	00100793          	addi	a5,zero,1
   19ab8:	06f50263          	beq	a0,a5,19b1c <dwarf::dwarf::get_type_unit(unsigned long) const+0x3dc>
      { return _M_ptr; }
   19abc:	00093783          	ld	a5,0(s2)
      { return _M_h.count(__x); }
   19ac0:	04878413          	addi	s0,a5,72
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    find(const key_type& __k) const
    -> const_iterator
    {
      if (size() <= __small_size_threshold())
   19ac4:	0607b703          	ld	a4,96(a5)
   19ac8:	0a071863          	bne	a4,zero,19b78 <dwarf::dwarf::get_type_unit(unsigned long) const+0x438>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   19acc:	0587b783          	ld	a5,88(a5)
	{
	  for (auto __it = begin(); __it != end(); ++__it)
   19ad0:	00078c63          	beq	a5,zero,19ae8 <dwarf::dwarf::get_type_unit(unsigned long) const+0x3a8>
      { return __x == __y; }
   19ad4:	00813683          	ld	a3,8(sp)
	    if (this->_M_key_equals(__k, *__it._M_cur))
   19ad8:	0087b703          	ld	a4,8(a5)
   19adc:	0ce68463          	beq	a3,a4,19ba4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x464>
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   19ae0:	0007b783          	ld	a5,0(a5)
	  for (auto __it = begin(); __it != end(); ++__it)
   19ae4:	fe079ae3          	bne	a5,zero,19ad8 <dwarf::dwarf::get_type_unit(unsigned long) const+0x398>
    throw out_of_range("type signature 0x" + to_hex(type_signature));
   19ae8:	01000513          	addi	a0,zero,16
   19aec:	8e5fc0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   19af0:	00050493          	addi	s1,a0,0
   19af4:	00813583          	ld	a1,8(sp)
   19af8:	01810513          	addi	a0,sp,24
   19afc:	00028317          	auipc	t1,0x28
   19b00:	7f433303          	ld	t1,2036(t1) # 422f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26cc8>
   19b04:	000300e7          	jalr	ra,0(t1)
   19b08:	0e80006f          	jal	zero,19bf0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x4b0>
      return __exchange_and_add(__mem, __val);
   19b0c:	fff00593          	addi	a1,zero,-1
   19b10:	03040513          	addi	a0,s0,48
   19b14:	81dfc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19b18:	f9dff06f          	jal	zero,19ab4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x374>
	_M_dispose();
   19b1c:	00043783          	ld	a5,0(s0)
   19b20:	0107b783          	ld	a5,16(a5)
   19b24:	00040513          	addi	a0,s0,0
   19b28:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19b2c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19b30:	00029797          	auipc	a5,0x29
   19b34:	9487b783          	ld	a5,-1720(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19b38:	0007c783          	lbu	a5,0(a5)
   19b3c:	02078663          	beq	a5,zero,19b68 <dwarf::dwarf::get_type_unit(unsigned long) const+0x428>
    _Atomic_word __result = *__mem;
   19b40:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   19b44:	fff5079b          	addiw	a5,a0,-1
   19b48:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19b4c:	00100793          	addi	a5,zero,1
   19b50:	f6f516e3          	bne	a0,a5,19abc <dwarf::dwarf::get_type_unit(unsigned long) const+0x37c>
	    _M_destroy();
   19b54:	00043783          	ld	a5,0(s0)
   19b58:	0187b783          	ld	a5,24(a5)
   19b5c:	00040513          	addi	a0,s0,0
   19b60:	000780e7          	jalr	ra,0(a5)
   19b64:	f59ff06f          	jal	zero,19abc <dwarf::dwarf::get_type_unit(unsigned long) const+0x37c>
      return __exchange_and_add(__mem, __val);
   19b68:	fff00593          	addi	a1,zero,-1
   19b6c:	03440513          	addi	a0,s0,52
   19b70:	fc0fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19b74:	fd9ff06f          	jal	zero,19b4c <dwarf::dwarf::get_type_unit(unsigned long) const+0x40c>
      __hash_code
      _M_hash_code(const _Key& __k) const
      {
	static_assert(__is_invocable<const _Hash&, const _Key&>{},
	    "hash function must be invocable with an argument of key type");
	return _M_hash()(__k);
   19b78:	00813683          	ld	a3,8(sp)
    { return __num % __den; }
   19b7c:	0507b583          	ld	a1,80(a5)
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   19b80:	00810613          	addi	a2,sp,8
   19b84:	02b6f5b3          	remu	a1,a3,a1
   19b88:	00040513          	addi	a0,s0,0
   19b8c:	00028317          	auipc	t1,0x28
   19b90:	78433303          	ld	t1,1924(t1) # 42310 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x26768>
   19b94:	000300e7          	jalr	ra,0(t1)
	if (__before_n)
   19b98:	f40508e3          	beq	a0,zero,19ae8 <dwarf::dwarf::get_type_unit(unsigned long) const+0x3a8>
  if (!m->type_units.count(type_signature))
   19b9c:	00053783          	ld	a5,0(a0)
   19ba0:	f40784e3          	beq	a5,zero,19ae8 <dwarf::dwarf::get_type_unit(unsigned long) const+0x3a8>
      { return _M_h[__k]; }
   19ba4:	00810593          	addi	a1,sp,8
   19ba8:	00040513          	addi	a0,s0,0
   19bac:	00029317          	auipc	t1,0x29
   19bb0:	95c33303          	ld	t1,-1700(t1) # 42508 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)@@Base+0x25fcc>
   19bb4:	000300e7          	jalr	ra,0(t1)
}
   19bb8:	0d813083          	ld	ra,216(sp)
   19bbc:	0d013403          	ld	s0,208(sp)
   19bc0:	0c813483          	ld	s1,200(sp)
   19bc4:	0c013903          	ld	s2,192(sp)
   19bc8:	0b813983          	ld	s3,184(sp)
   19bcc:	0b013a03          	ld	s4,176(sp)
   19bd0:	0a813a83          	ld	s5,168(sp)
   19bd4:	0a013b03          	ld	s6,160(sp)
   19bd8:	09813b83          	ld	s7,152(sp)
   19bdc:	09013c03          	ld	s8,144(sp)
   19be0:	08813c83          	ld	s9,136(sp)
   19be4:	08013d03          	ld	s10,128(sp)
   19be8:	0e010113          	addi	sp,sp,224
   19bec:	00008067          	jalr	zero,0(ra)
    { return std::move(__rhs.insert(0, __lhs)); }
   19bf0:	0001d617          	auipc	a2,0x1d
   19bf4:	33060613          	addi	a2,a2,816 # 36f20 <std::piecewise_construct+0x270>
   19bf8:	00000593          	addi	a1,zero,0
   19bfc:	01810513          	addi	a0,sp,24
   19c00:	f40fc0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   19c04:	00050593          	addi	a1,a0,0
   19c08:	03810413          	addi	s0,sp,56
   19c0c:	00040513          	addi	a0,s0,0
   19c10:	801fc0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    throw out_of_range("type signature 0x" + to_hex(type_signature));
   19c14:	00040593          	addi	a1,s0,0
   19c18:	00048513          	addi	a0,s1,0
   19c1c:	9d5fc0ef          	jal	ra,165f0 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   19c20:	03813503          	ld	a0,56(sp)
	if (!_M_is_local())
   19c24:	04810793          	addi	a5,sp,72
   19c28:	00f50463          	beq	a0,a5,19c30 <dwarf::dwarf::get_type_unit(unsigned long) const+0x4f0>
   19c2c:	885fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   19c30:	01813503          	ld	a0,24(sp)
	if (!_M_is_local())
   19c34:	02810793          	addi	a5,sp,40
   19c38:	00f50463          	beq	a0,a5,19c40 <dwarf::dwarf::get_type_unit(unsigned long) const+0x500>
   19c3c:	875fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   19c40:	00029617          	auipc	a2,0x29
   19c44:	87863603          	ld	a2,-1928(a2) # 424b8 <std::out_of_range::~out_of_range()@GLIBCXX_3.4>
   19c48:	00029597          	auipc	a1,0x29
   19c4c:	9205b583          	ld	a1,-1760(a1) # 42568 <typeinfo for std::out_of_range@GLIBCXX_3.4>
   19c50:	00048513          	addi	a0,s1,0
   19c54:	a0dfc0ef          	jal	ra,16660 <__cxa_throw@plt>
   19c58:	00050413          	addi	s0,a0,0
   19c5c:	00028797          	auipc	a5,0x28
   19c60:	6f47b783          	ld	a5,1780(a5) # 42350 <vtable for dwarf::type_unit@@Base+0x9f8>
   19c64:	01078793          	addi	a5,a5,16
   19c68:	02f13c23          	sd	a5,56(sp)
   19c6c:	03810513          	addi	a0,sp,56
   19c70:	fc8fd0ef          	jal	ra,17438 <dwarf::unit::~unit()>
	if (_M_pi != nullptr)
   19c74:	02013503          	ld	a0,32(sp)
   19c78:	00050863          	beq	a0,zero,19c88 <dwarf::dwarf::get_type_unit(unsigned long) const+0x548>
	  _M_pi->_M_release();
   19c7c:	00028317          	auipc	t1,0x28
   19c80:	74433303          	ld	t1,1860(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   19c84:	000300e7          	jalr	ra,0(t1)
   19c88:	00040513          	addi	a0,s0,0
   19c8c:	a05fc0ef          	jal	ra,16690 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   19c90:	00050413          	addi	s0,a0,0
   19c94:	fe1ff06f          	jal	zero,19c74 <dwarf::dwarf::get_type_unit(unsigned long) const+0x534>
      { return _M_dataplus._M_p; }
   19c98:	00050413          	addi	s0,a0,0
   19c9c:	03813503          	ld	a0,56(sp)
	if (!_M_is_local())
   19ca0:	04810793          	addi	a5,sp,72
   19ca4:	00f50463          	beq	a0,a5,19cac <dwarf::dwarf::get_type_unit(unsigned long) const+0x56c>
   19ca8:	809fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   19cac:	01813503          	ld	a0,24(sp)
	if (!_M_is_local())
   19cb0:	02810793          	addi	a5,sp,40
   19cb4:	00f50463          	beq	a0,a5,19cbc <dwarf::dwarf::get_type_unit(unsigned long) const+0x57c>
   19cb8:	ff8fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   19cbc:	00048513          	addi	a0,s1,0
   19cc0:	fb0fc0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   19cc4:	00040513          	addi	a0,s0,0
   19cc8:	9c9fc0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   19ccc:	00050413          	addi	s0,a0,0
   19cd0:	fddff06f          	jal	zero,19cac <dwarf::dwarf::get_type_unit(unsigned long) const+0x56c>
   19cd4:	00050413          	addi	s0,a0,0
   19cd8:	fe5ff06f          	jal	zero,19cbc <dwarf::dwarf::get_type_unit(unsigned long) const+0x57c>

0000000000019cdc <dwarf::unit::impl::force_abbrevs()>:
  if (have_abbrevs)
   19cdc:	13854783          	lbu	a5,312(a0)
   19ce0:	00078463          	beq	a5,zero,19ce8 <dwarf::unit::impl::force_abbrevs()+0xc>
   19ce4:	00008067          	jalr	zero,0(ra)
void unit::impl::force_abbrevs() {
   19ce8:	f6010113          	addi	sp,sp,-160
   19cec:	08113c23          	sd	ra,152(sp)
   19cf0:	08813823          	sd	s0,144(sp)
   19cf4:	08913423          	sd	s1,136(sp)
   19cf8:	09213023          	sd	s2,128(sp)
   19cfc:	07313c23          	sd	s3,120(sp)
   19d00:	07413823          	sd	s4,112(sp)
   19d04:	07513423          	sd	s5,104(sp)
   19d08:	07613023          	sd	s6,96(sp)
   19d0c:	05713c23          	sd	s7,88(sp)
   19d10:	00050493          	addi	s1,a0,0
  cursor c(file.get_section(section_type::abbrev), debug_abbrev_offset);
   19d14:	00000613          	addi	a2,zero,0
   19d18:	00050593          	addi	a1,a0,0
   19d1c:	04010513          	addi	a0,sp,64
   19d20:	835fd0ef          	jal	ra,17554 <dwarf::dwarf::get_section(dwarf::section_type) const>
   19d24:	0284b403          	ld	s0,40(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   19d28:	04013783          	ld	a5,64(sp)
   19d2c:	02f13423          	sd	a5,40(sp)
      : _M_pi(__r._M_pi)
   19d30:	04813503          	ld	a0,72(sp)
   19d34:	02a13823          	sd	a0,48(sp)
	if (_M_pi != nullptr)
   19d38:	02050063          	beq	a0,zero,19d58 <dwarf::unit::impl::force_abbrevs()+0x7c>
    if (__is_single_threaded())
   19d3c:	00028797          	auipc	a5,0x28
   19d40:	73c7b783          	ld	a5,1852(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19d44:	0007c783          	lbu	a5,0(a5)
   19d48:	08078263          	beq	a5,zero,19dcc <dwarf::unit::impl::force_abbrevs()+0xf0>
  { *__mem += __val; }
   19d4c:	03052783          	lw	a5,48(a0)
   19d50:	0017879b          	addiw	a5,a5,1
   19d54:	02f52823          	sw	a5,48(a0)
      : sec(sec), pos(sec->begin + offset) {}
   19d58:	04013783          	ld	a5,64(sp)
   19d5c:	0087b783          	ld	a5,8(a5)
   19d60:	008787b3          	add	a5,a5,s0
   19d64:	02f13c23          	sd	a5,56(sp)
	if (_M_pi != nullptr)
   19d68:	04813403          	ld	s0,72(sp)
   19d6c:	02040463          	beq	s0,zero,19d94 <dwarf::unit::impl::force_abbrevs()+0xb8>
    if (__is_single_threaded())
   19d70:	00028797          	auipc	a5,0x28
   19d74:	7087b783          	ld	a5,1800(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19d78:	0007c783          	lbu	a5,0(a5)
   19d7c:	06078063          	beq	a5,zero,19ddc <dwarf::unit::impl::force_abbrevs()+0x100>
    _Atomic_word __result = *__mem;
   19d80:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   19d84:	fff5079b          	addiw	a5,a0,-1
   19d88:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19d8c:	00100793          	addi	a5,zero,1
   19d90:	04f50e63          	beq	a0,a5,19dec <dwarf::unit::impl::force_abbrevs()+0x110>
  abbrev_code code;
  DW_TAG tag;
  bool children;
  std::vector<attribute_spec> attributes;

  abbrev_entry() : code(0) {}
   19d94:	00013023          	sd	zero,0(sp)
   19d98:	00013823          	sd	zero,16(sp)
   19d9c:	00013c23          	sd	zero,24(sp)
   19da0:	02013023          	sd	zero,32(sp)
  abbrev_code highest = 0;
   19da4:	00000913          	addi	s2,zero,0
  while (entry.read(&c)) {
   19da8:	02810993          	addi	s3,sp,40
   19dac:	00010413          	addi	s0,sp,0
   19db0:	15848a13          	addi	s4,s1,344
   19db4:	00028a97          	auipc	s5,0x28
   19db8:	724aba83          	ld	s5,1828(s5) # 424d8 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)@@Base+0x25c5c>
struct abbrev_entry {
   19dbc:	01010b13          	addi	s6,sp,16
   19dc0:	00029b97          	auipc	s7,0x29
   19dc4:	820bbb83          	ld	s7,-2016(s7) # 425e0 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)@@Base+0x27578>
   19dc8:	0b00006f          	jal	zero,19e78 <dwarf::unit::impl::force_abbrevs()+0x19c>
      __atomic_add(__mem, __val);
   19dcc:	00100593          	addi	a1,zero,1
   19dd0:	03050513          	addi	a0,a0,48
   19dd4:	d2cfc0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   19dd8:	f81ff06f          	jal	zero,19d58 <dwarf::unit::impl::force_abbrevs()+0x7c>
      return __exchange_and_add(__mem, __val);
   19ddc:	fff00593          	addi	a1,zero,-1
   19de0:	03040513          	addi	a0,s0,48
   19de4:	d4cfc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19de8:	fa5ff06f          	jal	zero,19d8c <dwarf::unit::impl::force_abbrevs()+0xb0>
	_M_dispose();
   19dec:	00043783          	ld	a5,0(s0)
   19df0:	0107b783          	ld	a5,16(a5)
   19df4:	00040513          	addi	a0,s0,0
   19df8:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19dfc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19e00:	00028797          	auipc	a5,0x28
   19e04:	6787b783          	ld	a5,1656(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19e08:	0007c783          	lbu	a5,0(a5)
   19e0c:	02078663          	beq	a5,zero,19e38 <dwarf::unit::impl::force_abbrevs()+0x15c>
    _Atomic_word __result = *__mem;
   19e10:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   19e14:	fff5079b          	addiw	a5,a0,-1
   19e18:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19e1c:	00100793          	addi	a5,zero,1
   19e20:	f6f51ae3          	bne	a0,a5,19d94 <dwarf::unit::impl::force_abbrevs()+0xb8>
	    _M_destroy();
   19e24:	00043783          	ld	a5,0(s0)
   19e28:	0187b783          	ld	a5,24(a5)
   19e2c:	00040513          	addi	a0,s0,0
   19e30:	000780e7          	jalr	ra,0(a5)
   19e34:	f61ff06f          	jal	zero,19d94 <dwarf::unit::impl::force_abbrevs()+0xb8>
      return __exchange_and_add(__mem, __val);
   19e38:	fff00593          	addi	a1,zero,-1
   19e3c:	03440513          	addi	a0,s0,52
   19e40:	cf0fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19e44:	fd9ff06f          	jal	zero,19e1c <dwarf::unit::impl::force_abbrevs()+0x140>
   19e48:	00013783          	ld	a5,0(sp)
   19e4c:	00f53023          	sd	a5,0(a0)
   19e50:	00812783          	lw	a5,8(sp)
   19e54:	00f52423          	sw	a5,8(a0)
   19e58:	00c14783          	lbu	a5,12(sp)
   19e5c:	00f50623          	sb	a5,12(a0)
   19e60:	000b0593          	addi	a1,s6,0
   19e64:	01050513          	addi	a0,a0,16
   19e68:	000b80e7          	jalr	ra,0(s7)
    if (entry.code > highest)
   19e6c:	00013783          	ld	a5,0(sp)
   19e70:	00f97463          	bgeu	s2,a5,19e78 <dwarf::unit::impl::force_abbrevs()+0x19c>
   19e74:	00078913          	addi	s2,a5,0
  while (entry.read(&c)) {
   19e78:	00098593          	addi	a1,s3,0
   19e7c:	00040513          	addi	a0,s0,0
   19e80:	219090ef          	jal	ra,23898 <dwarf::abbrev_entry::read(dwarf::cursor*)>
   19e84:	00050a63          	beq	a0,zero,19e98 <dwarf::unit::impl::force_abbrevs()+0x1bc>
   19e88:	00040593          	addi	a1,s0,0
   19e8c:	000a0513          	addi	a0,s4,0
   19e90:	000a80e7          	jalr	ra,0(s5)
   19e94:	fb5ff06f          	jal	zero,19e48 <dwarf::unit::impl::force_abbrevs()+0x16c>
  if (highest * 10 < abbrevs_map.size() * 15) {
   19e98:	00291793          	slli	a5,s2,0x2
   19e9c:	012787b3          	add	a5,a5,s2
   19ea0:	00179793          	slli	a5,a5,0x1
   19ea4:	1704b683          	ld	a3,368(s1)
   19ea8:	00469713          	slli	a4,a3,0x4
   19eac:	40d70733          	sub	a4,a4,a3
   19eb0:	06e7e863          	bltu	a5,a4,19f20 <dwarf::unit::impl::force_abbrevs()+0x244>
  have_abbrevs = true;
   19eb4:	00100793          	addi	a5,zero,1
   19eb8:	12f48c23          	sb	a5,312(s1)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   19ebc:	01013503          	ld	a0,16(sp)
	if (__p)
   19ec0:	00050463          	beq	a0,zero,19ec8 <dwarf::unit::impl::force_abbrevs()+0x1ec>
   19ec4:	decfc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   19ec8:	03013403          	ld	s0,48(sp)
   19ecc:	02040463          	beq	s0,zero,19ef4 <dwarf::unit::impl::force_abbrevs()+0x218>
    if (__is_single_threaded())
   19ed0:	00028797          	auipc	a5,0x28
   19ed4:	5a87b783          	ld	a5,1448(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19ed8:	0007c783          	lbu	a5,0(a5)
   19edc:	14078263          	beq	a5,zero,1a020 <dwarf::unit::impl::force_abbrevs()+0x344>
    _Atomic_word __result = *__mem;
   19ee0:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   19ee4:	fff5079b          	addiw	a5,a0,-1
   19ee8:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19eec:	00100793          	addi	a5,zero,1
   19ef0:	14f50063          	beq	a0,a5,1a030 <dwarf::unit::impl::force_abbrevs()+0x354>
}
   19ef4:	09813083          	ld	ra,152(sp)
   19ef8:	09013403          	ld	s0,144(sp)
   19efc:	08813483          	ld	s1,136(sp)
   19f00:	08013903          	ld	s2,128(sp)
   19f04:	07813983          	ld	s3,120(sp)
   19f08:	07013a03          	ld	s4,112(sp)
   19f0c:	06813a83          	ld	s5,104(sp)
   19f10:	06013b03          	ld	s6,96(sp)
   19f14:	05813b83          	ld	s7,88(sp)
   19f18:	0a010113          	addi	sp,sp,160
   19f1c:	00008067          	jalr	zero,0(ra)
    abbrevs_vec.resize(highest + 1);
   19f20:	00190913          	addi	s2,s2,1
      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   19f24:	1484b983          	ld	s3,328(s1)
   19f28:	1404b783          	ld	a5,320(s1)
   19f2c:	40f985b3          	sub	a1,s3,a5
   19f30:	4035d593          	srai	a1,a1,0x3
   19f34:	0001d717          	auipc	a4,0x1d
   19f38:	d5c73703          	ld	a4,-676(a4) # 36c90 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd8>
   19f3c:	02e585b3          	mul	a1,a1,a4
       */
      _GLIBCXX20_CONSTEXPR
      void
      resize(size_type __new_size)
      {
	if (__new_size > size())
   19f40:	0325e263          	bltu	a1,s2,19f64 <dwarf::unit::impl::force_abbrevs()+0x288>
	  _M_default_append(__new_size - size());
	else if (__new_size < size())
   19f44:	04b97a63          	bgeu	s2,a1,19f98 <dwarf::unit::impl::force_abbrevs()+0x2bc>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   19f48:	00291713          	slli	a4,s2,0x2
   19f4c:	01270733          	add	a4,a4,s2
   19f50:	00371713          	slli	a4,a4,0x3
   19f54:	00e78933          	add	s2,a5,a4
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   19f58:	05298063          	beq	s3,s2,19f98 <dwarf::unit::impl::force_abbrevs()+0x2bc>
   19f5c:	00090413          	addi	s0,s2,0
   19f60:	0240006f          	jal	zero,19f84 <dwarf::unit::impl::force_abbrevs()+0x2a8>
	  _M_default_append(__new_size - size());
   19f64:	40b905b3          	sub	a1,s2,a1
   19f68:	14048513          	addi	a0,s1,320
   19f6c:	00028317          	auipc	t1,0x28
   19f70:	41c33303          	ld	t1,1052(t1) # 42388 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)@@Base+0x269fc>
   19f74:	000300e7          	jalr	ra,0(t1)
   19f78:	0200006f          	jal	zero,19f98 <dwarf::unit::impl::force_abbrevs()+0x2bc>
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   19f7c:	02840413          	addi	s0,s0,40
   19f80:	00898a63          	beq	s3,s0,19f94 <dwarf::unit::impl::force_abbrevs()+0x2b8>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   19f84:	01043503          	ld	a0,16(s0)
	if (__p)
   19f88:	fe050ae3          	beq	a0,zero,19f7c <dwarf::unit::impl::force_abbrevs()+0x2a0>
   19f8c:	d24fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
   19f90:	fedff06f          	jal	zero,19f7c <dwarf::unit::impl::force_abbrevs()+0x2a0>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   19f94:	1524b423          	sd	s2,328(s1)
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   19f98:	1684b403          	ld	s0,360(s1)
    for (auto &entry : abbrevs_map)
   19f9c:	02041263          	bne	s0,zero,19fc0 <dwarf::unit::impl::force_abbrevs()+0x2e4>
      { _M_h.clear(); }
   19fa0:	15848513          	addi	a0,s1,344
   19fa4:	00028317          	auipc	t1,0x28
   19fa8:	32c33303          	ld	t1,812(t1) # 422d0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()@@Base+0x26be0>
   19fac:	000300e7          	jalr	ra,0(t1)
   19fb0:	f05ff06f          	jal	zero,19eb4 <dwarf::unit::impl::force_abbrevs()+0x1d8>
   19fb4:	cfcfc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   19fb8:	00043403          	ld	s0,0(s0)
   19fbc:	fe0402e3          	beq	s0,zero,19fa0 <dwarf::unit::impl::force_abbrevs()+0x2c4>
	return *(this->_M_impl._M_start + __n);
   19fc0:	00843783          	ld	a5,8(s0)
   19fc4:	00279713          	slli	a4,a5,0x2
   19fc8:	00f70733          	add	a4,a4,a5
   19fcc:	00371713          	slli	a4,a4,0x3
   19fd0:	1404b783          	ld	a5,320(s1)
   19fd4:	00e787b3          	add	a5,a5,a4
   19fd8:	01043703          	ld	a4,16(s0)
   19fdc:	00e7b023          	sd	a4,0(a5)
   19fe0:	01842703          	lw	a4,24(s0)
   19fe4:	00e7a423          	sw	a4,8(a5)
   19fe8:	01c44703          	lbu	a4,28(s0)
   19fec:	00e78623          	sb	a4,12(a5)
	  _M_start = __x._M_start;
   19ff0:	0107b503          	ld	a0,16(a5)
   19ff4:	02043703          	ld	a4,32(s0)
   19ff8:	00e7b823          	sd	a4,16(a5)
	  _M_finish = __x._M_finish;
   19ffc:	02843703          	ld	a4,40(s0)
   1a000:	00e7bc23          	sd	a4,24(a5)
	  _M_end_of_storage = __x._M_end_of_storage;
   1a004:	03043703          	ld	a4,48(s0)
   1a008:	02e7b023          	sd	a4,32(a5)
	  _M_start = __x._M_start;
   1a00c:	02043023          	sd	zero,32(s0)
	  _M_finish = __x._M_finish;
   1a010:	02043423          	sd	zero,40(s0)
	  _M_end_of_storage = __x._M_end_of_storage;
   1a014:	02043823          	sd	zero,48(s0)
	if (__p)
   1a018:	f8051ee3          	bne	a0,zero,19fb4 <dwarf::unit::impl::force_abbrevs()+0x2d8>
   1a01c:	f9dff06f          	jal	zero,19fb8 <dwarf::unit::impl::force_abbrevs()+0x2dc>
      return __exchange_and_add(__mem, __val);
   1a020:	fff00593          	addi	a1,zero,-1
   1a024:	03040513          	addi	a0,s0,48
   1a028:	b08fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a02c:	ec1ff06f          	jal	zero,19eec <dwarf::unit::impl::force_abbrevs()+0x210>
	_M_dispose();
   1a030:	00043783          	ld	a5,0(s0)
   1a034:	0107b783          	ld	a5,16(a5)
   1a038:	00040513          	addi	a0,s0,0
   1a03c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a040:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a044:	00028797          	auipc	a5,0x28
   1a048:	4347b783          	ld	a5,1076(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a04c:	0007c783          	lbu	a5,0(a5)
   1a050:	02078663          	beq	a5,zero,1a07c <dwarf::unit::impl::force_abbrevs()+0x3a0>
    _Atomic_word __result = *__mem;
   1a054:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1a058:	fff5079b          	addiw	a5,a0,-1
   1a05c:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a060:	00100793          	addi	a5,zero,1
   1a064:	e8f518e3          	bne	a0,a5,19ef4 <dwarf::unit::impl::force_abbrevs()+0x218>
	    _M_destroy();
   1a068:	00043783          	ld	a5,0(s0)
   1a06c:	0187b783          	ld	a5,24(a5)
   1a070:	00040513          	addi	a0,s0,0
   1a074:	000780e7          	jalr	ra,0(a5)
   1a078:	e7dff06f          	jal	zero,19ef4 <dwarf::unit::impl::force_abbrevs()+0x218>
      return __exchange_and_add(__mem, __val);
   1a07c:	fff00593          	addi	a1,zero,-1
   1a080:	03440513          	addi	a0,s0,52
   1a084:	aacfc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a088:	fd9ff06f          	jal	zero,1a060 <dwarf::unit::impl::force_abbrevs()+0x384>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1a08c:	00050413          	addi	s0,a0,0
   1a090:	01013503          	ld	a0,16(sp)
	if (__p)
   1a094:	00050463          	beq	a0,zero,1a09c <dwarf::unit::impl::force_abbrevs()+0x3c0>
   1a098:	c18fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   1a09c:	03013503          	ld	a0,48(sp)
   1a0a0:	00050863          	beq	a0,zero,1a0b0 <dwarf::unit::impl::force_abbrevs()+0x3d4>
	  _M_pi->_M_release();
   1a0a4:	00028317          	auipc	t1,0x28
   1a0a8:	31c33303          	ld	t1,796(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   1a0ac:	000300e7          	jalr	ra,0(t1)
   1a0b0:	00040513          	addi	a0,s0,0
   1a0b4:	ddcfc0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001a0b8 <dwarf::unit::root() const>:
const die &unit::root() const {
   1a0b8:	f5010113          	addi	sp,sp,-176
   1a0bc:	0a113423          	sd	ra,168(sp)
   1a0c0:	0a813023          	sd	s0,160(sp)
   1a0c4:	08913c23          	sd	s1,152(sp)
   1a0c8:	09213823          	sd	s2,144(sp)
   1a0cc:	09313423          	sd	s3,136(sp)
   1a0d0:	09413023          	sd	s4,128(sp)
   1a0d4:	07513c23          	sd	s5,120(sp)
   1a0d8:	07613823          	sd	s6,112(sp)
   1a0dc:	00050493          	addi	s1,a0,0
      { return _M_ptr; }
   1a0e0:	00853503          	ld	a0,8(a0)
  if (!m->root.valid()) {
   1a0e4:	05853783          	ld	a5,88(a0)
   1a0e8:	02078a63          	beq	a5,zero,1a11c <dwarf::unit::root() const+0x64>
  return m->root;
   1a0ec:	0084b503          	ld	a0,8(s1)
   1a0f0:	04850513          	addi	a0,a0,72
}
   1a0f4:	0a813083          	ld	ra,168(sp)
   1a0f8:	0a013403          	ld	s0,160(sp)
   1a0fc:	09813483          	ld	s1,152(sp)
   1a100:	09013903          	ld	s2,144(sp)
   1a104:	08813983          	ld	s3,136(sp)
   1a108:	08013a03          	ld	s4,128(sp)
   1a10c:	07813a83          	ld	s5,120(sp)
   1a110:	07013b03          	ld	s6,112(sp)
   1a114:	0b010113          	addi	sp,sp,176
   1a118:	00008067          	jalr	zero,0(ra)
    m->force_abbrevs();
   1a11c:	bc1ff0ef          	jal	ra,19cdc <dwarf::unit::impl::force_abbrevs()>
   1a120:	0084b403          	ld	s0,8(s1)
    m->root = die(this);
   1a124:	00048593          	addi	a1,s1,0
   1a128:	00010513          	addi	a0,sp,0
   1a12c:	2e8030ef          	jal	ra,1d414 <dwarf::die::die(dwarf::unit const*)>
  die &operator=(die &&o) = default;
   1a130:	00012783          	lw	a5,0(sp)
   1a134:	04f42423          	sw	a5,72(s0)
   1a138:	00813783          	ld	a5,8(sp)
   1a13c:	04f43823          	sd	a5,80(s0)
   1a140:	01013783          	ld	a5,16(sp)
   1a144:	04f43c23          	sd	a5,88(s0)
   1a148:	01813783          	ld	a5,24(sp)
   1a14c:	06f43023          	sd	a5,96(s0)
  size_type size() const { return end - base; }
   1a150:	05813983          	ld	s3,88(sp)
   1a154:	05013783          	ld	a5,80(sp)
   1a158:	40f989b3          	sub	s3,s3,a5
   1a15c:	4039d913          	srai	s2,s3,0x3
    for (T *p = base; p < end; ++p)
   1a160:	09843683          	ld	a3,152(s0)
   1a164:	0a043783          	ld	a5,160(s0)
   1a168:	00f6fa63          	bgeu	a3,a5,1a17c <dwarf::unit::root() const+0xc4>
   1a16c:	00068793          	addi	a5,a3,0
   1a170:	00878793          	addi	a5,a5,8
   1a174:	0a043703          	ld	a4,160(s0)
   1a178:	fee7ece3          	bltu	a5,a4,1a170 <dwarf::unit::root() const+0xb8>
    end = base;
   1a17c:	0ad43023          	sd	a3,160(s0)
    if (n <= (size_type)(cap - base))
   1a180:	0a843503          	ld	a0,168(s0)
   1a184:	40d50533          	sub	a0,a0,a3
   1a188:	07357863          	bgeu	a0,s3,1a1f8 <dwarf::unit::root() const+0x140>
   1a18c:	40355513          	srai	a0,a0,0x3
   1a190:	00051463          	bne	a0,zero,1a198 <dwarf::unit::root() const+0xe0>
   1a194:	00100513          	addi	a0,zero,1
    while (target < n)
   1a198:	01257663          	bgeu	a0,s2,1a1a4 <dwarf::unit::root() const+0xec>
      target <<= 1;
   1a19c:	00151513          	slli	a0,a0,0x1
    while (target < n)
   1a1a0:	ff256ee3          	bltu	a0,s2,1a19c <dwarf::unit::root() const+0xe4>
    char *newbuf = new char[sizeof(T[target])];
   1a1a4:	00351a13          	slli	s4,a0,0x3
   1a1a8:	000a0513          	addi	a0,s4,0
   1a1ac:	934fc0ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   1a1b0:	00050b13          	addi	s6,a0,0
    T *src = base, *dest = (T *)newbuf;
   1a1b4:	09843503          	ld	a0,152(s0)
    for (; src < end; src++, dest++) {
   1a1b8:	0a043783          	ld	a5,160(s0)
   1a1bc:	0cf57063          	bgeu	a0,a5,1a27c <dwarf::unit::root() const+0x1c4>
    T *src = base, *dest = (T *)newbuf;
   1a1c0:	00050793          	addi	a5,a0,0
   1a1c4:	000b0a93          	addi	s5,s6,0
    for (; src < end; src++, dest++) {
   1a1c8:	00878793          	addi	a5,a5,8
   1a1cc:	008a8a93          	addi	s5,s5,8
   1a1d0:	0a043703          	ld	a4,160(s0)
   1a1d4:	fee7eae3          	bltu	a5,a4,1a1c8 <dwarf::unit::root() const+0x110>
   1a1d8:	06840793          	addi	a5,s0,104
    if ((char *)base != buf)
   1a1dc:	00f50663          	beq	a0,a5,1a1e8 <dwarf::unit::root() const+0x130>
      delete[] (char *)base;
   1a1e0:	00050463          	beq	a0,zero,1a1e8 <dwarf::unit::root() const+0x130>
   1a1e4:	b7cfc0ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1a1e8:	09643c23          	sd	s6,152(s0)
    end = dest;
   1a1ec:	0b543023          	sd	s5,160(s0)
    cap = base + target;
   1a1f0:	014b0b33          	add	s6,s6,s4
   1a1f4:	0b643423          	sd	s6,168(s0)
    for (size_type i = 0; i < osize; i++)
   1a1f8:	02090663          	beq	s2,zero,1a224 <dwarf::unit::root() const+0x16c>
   1a1fc:	00000793          	addi	a5,zero,0
   1a200:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1a204:	05013703          	ld	a4,80(sp)
   1a208:	00d70733          	add	a4,a4,a3
   1a20c:	00073603          	ld	a2,0(a4)
   1a210:	09843703          	ld	a4,152(s0)
   1a214:	00d70733          	add	a4,a4,a3
   1a218:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1a21c:	00178793          	addi	a5,a5,1
   1a220:	fef910e3          	bne	s2,a5,1a200 <dwarf::unit::root() const+0x148>
    end = base + osize;
   1a224:	09843783          	ld	a5,152(s0)
   1a228:	013787b3          	add	a5,a5,s3
   1a22c:	0af43023          	sd	a5,160(s0)
   1a230:	06813783          	ld	a5,104(sp)
   1a234:	0af43823          	sd	a5,176(s0)
    for (T *p = base; p < end; ++p)
   1a238:	05013503          	ld	a0,80(sp)
   1a23c:	05813783          	ld	a5,88(sp)
   1a240:	00f57a63          	bgeu	a0,a5,1a254 <dwarf::unit::root() const+0x19c>
   1a244:	00050793          	addi	a5,a0,0
   1a248:	00878793          	addi	a5,a5,8
   1a24c:	05813703          	ld	a4,88(sp)
   1a250:	fee7ece3          	bltu	a5,a4,1a248 <dwarf::unit::root() const+0x190>
    end = base;
   1a254:	04a13c23          	sd	a0,88(sp)
    if ((char *)base != buf)
   1a258:	02010793          	addi	a5,sp,32
   1a25c:	00f50663          	beq	a0,a5,1a268 <dwarf::unit::root() const+0x1b0>
      delete[] (char *)base;
   1a260:	00050463          	beq	a0,zero,1a268 <dwarf::unit::root() const+0x1b0>
   1a264:	afcfc0ef          	jal	ra,16560 <operator delete[](void*)@plt>
   1a268:	0084b503          	ld	a0,8(s1)
    m->root.read(m->root_offset);
   1a26c:	03053583          	ld	a1,48(a0)
   1a270:	04850513          	addi	a0,a0,72
   1a274:	1f8030ef          	jal	ra,1d46c <dwarf::die::read(unsigned long)>
   1a278:	e75ff06f          	jal	zero,1a0ec <dwarf::unit::root() const+0x34>
    T *src = base, *dest = (T *)newbuf;
   1a27c:	000b0a93          	addi	s5,s6,0
   1a280:	f59ff06f          	jal	zero,1a1d8 <dwarf::unit::root() const+0x120>
class die {
   1a284:	00050413          	addi	s0,a0,0
   1a288:	02010513          	addi	a0,sp,32
   1a28c:	00028317          	auipc	t1,0x28
   1a290:	15433303          	ld	t1,340(t1) # 423e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b110>
   1a294:	000300e7          	jalr	ra,0(t1)
   1a298:	00040513          	addi	a0,s0,0
   1a29c:	bf4fc0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001a2a0 <dwarf::compilation_unit::get_line_table() const>:
const line_table &compilation_unit::get_line_table() const {
   1a2a0:	f4010113          	addi	sp,sp,-192
   1a2a4:	0a113c23          	sd	ra,184(sp)
   1a2a8:	0a813823          	sd	s0,176(sp)
   1a2ac:	0a913423          	sd	s1,168(sp)
   1a2b0:	0b213023          	sd	s2,160(sp)
   1a2b4:	09313c23          	sd	s3,152(sp)
   1a2b8:	09413823          	sd	s4,144(sp)
   1a2bc:	00050413          	addi	s0,a0,0
      { return _M_ptr != nullptr; }
   1a2c0:	00853783          	ld	a5,8(a0)
  if (!m->lt.valid()) {
   1a2c4:	1287b783          	ld	a5,296(a5)
   1a2c8:	02078663          	beq	a5,zero,1a2f4 <dwarf::compilation_unit::get_line_table() const+0x54>
  return m->lt;
   1a2cc:	00843503          	ld	a0,8(s0)
   1a2d0:	12850513          	addi	a0,a0,296
}
   1a2d4:	0b813083          	ld	ra,184(sp)
   1a2d8:	0b013403          	ld	s0,176(sp)
   1a2dc:	0a813483          	ld	s1,168(sp)
   1a2e0:	0a013903          	ld	s2,160(sp)
   1a2e4:	09813983          	ld	s3,152(sp)
   1a2e8:	09013a03          	ld	s4,144(sp)
   1a2ec:	0c010113          	addi	sp,sp,192
   1a2f0:	00008067          	jalr	zero,0(ra)
    const die &d = root();
   1a2f4:	dc5ff0ef          	jal	ra,1a0b8 <dwarf::unit::root() const>
   1a2f8:	00050493          	addi	s1,a0,0
    if (!d.has(DW_AT::stmt_list) || !d.has(DW_AT::name))
   1a2fc:	01000593          	addi	a1,zero,16
   1a300:	6a4030ef          	jal	ra,1d9a4 <dwarf::die::has(dwarf::DW_AT) const>
   1a304:	fc0504e3          	beq	a0,zero,1a2cc <dwarf::compilation_unit::get_line_table() const+0x2c>
   1a308:	00300593          	addi	a1,zero,3
   1a30c:	00048513          	addi	a0,s1,0
   1a310:	694030ef          	jal	ra,1d9a4 <dwarf::die::has(dwarf::DW_AT) const>
   1a314:	fa050ce3          	beq	a0,zero,1a2cc <dwarf::compilation_unit::get_line_table() const+0x2c>
    shared_ptr<section> sec;
   1a318:	00013423          	sd	zero,8(sp)
   1a31c:	00013823          	sd	zero,16(sp)
      sec = m->file.get_section(section_type::line);
   1a320:	00400613          	addi	a2,zero,4
   1a324:	00843583          	ld	a1,8(s0)
   1a328:	05810513          	addi	a0,sp,88
   1a32c:	a28fd0ef          	jal	ra,17554 <dwarf::dwarf::get_section(dwarf::section_type) const>
      : _M_ptr(__r._M_ptr), _M_refcount()
   1a330:	05813703          	ld	a4,88(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1a334:	06013783          	ld	a5,96(sp)
	__r._M_pi = _M_pi;
   1a338:	06013023          	sd	zero,96(sp)
	__r._M_ptr = nullptr;
   1a33c:	04013c23          	sd	zero,88(sp)
   1a340:	00e13423          	sd	a4,8(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1a344:	01013903          	ld	s2,16(sp)
	__r._M_pi = _M_pi;
   1a348:	00f13823          	sd	a5,16(sp)
	if (_M_pi != nullptr)
   1a34c:	0a090a63          	beq	s2,zero,1a400 <dwarf::compilation_unit::get_line_table() const+0x160>
    if (__is_single_threaded())
   1a350:	00028797          	auipc	a5,0x28
   1a354:	1287b783          	ld	a5,296(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a358:	0007c783          	lbu	a5,0(a5)
   1a35c:	06078263          	beq	a5,zero,1a3c0 <dwarf::compilation_unit::get_line_table() const+0x120>
    _Atomic_word __result = *__mem;
   1a360:	03092783          	lw	a5,48(s2)
    *__mem += __val;
   1a364:	fff7871b          	addiw	a4,a5,-1
   1a368:	02e92823          	sw	a4,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a36c:	00100713          	addi	a4,zero,1
   1a370:	08e79863          	bne	a5,a4,1a400 <dwarf::compilation_unit::get_line_table() const+0x160>
	_M_dispose();
   1a374:	00093783          	ld	a5,0(s2)
   1a378:	0107b783          	ld	a5,16(a5)
   1a37c:	00090513          	addi	a0,s2,0
   1a380:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a384:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a388:	00028797          	auipc	a5,0x28
   1a38c:	0f07b783          	ld	a5,240(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a390:	0007c783          	lbu	a5,0(a5)
   1a394:	06078e63          	beq	a5,zero,1a410 <dwarf::compilation_unit::get_line_table() const+0x170>
    _Atomic_word __result = *__mem;
   1a398:	03492783          	lw	a5,52(s2)
    *__mem += __val;
   1a39c:	fff7871b          	addiw	a4,a5,-1
   1a3a0:	02e92a23          	sw	a4,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a3a4:	00100713          	addi	a4,zero,1
   1a3a8:	02e79663          	bne	a5,a4,1a3d4 <dwarf::compilation_unit::get_line_table() const+0x134>
	    _M_destroy();
   1a3ac:	00093783          	ld	a5,0(s2)
   1a3b0:	0187b783          	ld	a5,24(a5)
   1a3b4:	00090513          	addi	a0,s2,0
   1a3b8:	000780e7          	jalr	ra,0(a5)
   1a3bc:	0180006f          	jal	zero,1a3d4 <dwarf::compilation_unit::get_line_table() const+0x134>
      return __exchange_and_add(__mem, __val);
   1a3c0:	fff00593          	addi	a1,zero,-1
   1a3c4:	03090513          	addi	a0,s2,48
   1a3c8:	f69fb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a3cc:	00100793          	addi	a5,zero,1
   1a3d0:	faf502e3          	beq	a0,a5,1a374 <dwarf::compilation_unit::get_line_table() const+0xd4>
	if (_M_pi != nullptr)
   1a3d4:	06013903          	ld	s2,96(sp)
   1a3d8:	02090463          	beq	s2,zero,1a400 <dwarf::compilation_unit::get_line_table() const+0x160>
    if (__is_single_threaded())
   1a3dc:	00028797          	auipc	a5,0x28
   1a3e0:	09c7b783          	ld	a5,156(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a3e4:	0007c783          	lbu	a5,0(a5)
   1a3e8:	02078e63          	beq	a5,zero,1a424 <dwarf::compilation_unit::get_line_table() const+0x184>
    _Atomic_word __result = *__mem;
   1a3ec:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   1a3f0:	fff5079b          	addiw	a5,a0,-1
   1a3f4:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a3f8:	00100793          	addi	a5,zero,1
   1a3fc:	02f50c63          	beq	a0,a5,1a434 <dwarf::compilation_unit::get_line_table() const+0x194>
    auto comp_dir = d.has(DW_AT::comp_dir) ? at_comp_dir(d) : "";
   1a400:	01b00593          	addi	a1,zero,27
   1a404:	00048513          	addi	a0,s1,0
   1a408:	59c030ef          	jal	ra,1d9a4 <dwarf::die::has(dwarf::DW_AT) const>
   1a40c:	0880006f          	jal	zero,1a494 <dwarf::compilation_unit::get_line_table() const+0x1f4>
      return __exchange_and_add(__mem, __val);
   1a410:	fff00593          	addi	a1,zero,-1
   1a414:	03490513          	addi	a0,s2,52
   1a418:	f19fb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a41c:	00050793          	addi	a5,a0,0
   1a420:	f85ff06f          	jal	zero,1a3a4 <dwarf::compilation_unit::get_line_table() const+0x104>
   1a424:	fff00593          	addi	a1,zero,-1
   1a428:	03090513          	addi	a0,s2,48
   1a42c:	f05fb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a430:	fc9ff06f          	jal	zero,1a3f8 <dwarf::compilation_unit::get_line_table() const+0x158>
	_M_dispose();
   1a434:	00093783          	ld	a5,0(s2)
   1a438:	0107b783          	ld	a5,16(a5)
   1a43c:	00090513          	addi	a0,s2,0
   1a440:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a444:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a448:	00028797          	auipc	a5,0x28
   1a44c:	0307b783          	ld	a5,48(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a450:	0007c783          	lbu	a5,0(a5)
   1a454:	02078663          	beq	a5,zero,1a480 <dwarf::compilation_unit::get_line_table() const+0x1e0>
    _Atomic_word __result = *__mem;
   1a458:	03492783          	lw	a5,52(s2)
    *__mem += __val;
   1a45c:	fff7871b          	addiw	a4,a5,-1
   1a460:	02e92a23          	sw	a4,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a464:	00100713          	addi	a4,zero,1
   1a468:	f8e79ce3          	bne	a5,a4,1a400 <dwarf::compilation_unit::get_line_table() const+0x160>
	    _M_destroy();
   1a46c:	00093783          	ld	a5,0(s2)
   1a470:	0187b783          	ld	a5,24(a5)
   1a474:	00090513          	addi	a0,s2,0
   1a478:	000780e7          	jalr	ra,0(a5)
   1a47c:	f85ff06f          	jal	zero,1a400 <dwarf::compilation_unit::get_line_table() const+0x160>
      return __exchange_and_add(__mem, __val);
   1a480:	fff00593          	addi	a1,zero,-1
   1a484:	03490513          	addi	a0,s2,52
   1a488:	ea9fb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a48c:	00050793          	addi	a5,a0,0
   1a490:	fd5ff06f          	jal	zero,1a464 <dwarf::compilation_unit::get_line_table() const+0x1c4>
   1a494:	00050a63          	beq	a0,zero,1a4a8 <dwarf::compilation_unit::get_line_table() const+0x208>
   1a498:	00048593          	addi	a1,s1,0
   1a49c:	01810513          	addi	a0,sp,24
   1a4a0:	255110ef          	jal	ra,2bef4 <dwarf::at_comp_dir[abi:cxx11](dwarf::die const&)>
   1a4a4:	02c0006f          	jal	zero,1a4d0 <dwarf::compilation_unit::get_line_table() const+0x230>
	: allocator_type(__a), _M_p(__dat) { }
   1a4a8:	02810793          	addi	a5,sp,40
   1a4ac:	00f13c23          	sd	a5,24(sp)
	_M_construct(__s, __end, forward_iterator_tag());
   1a4b0:	00000693          	addi	a3,zero,0
   1a4b4:	0001c617          	auipc	a2,0x1c
   1a4b8:	1c460613          	addi	a2,a2,452 # 36678 <__libc_csu_fini+0x60>
   1a4bc:	00060593          	addi	a1,a2,0
   1a4c0:	01810513          	addi	a0,sp,24
   1a4c4:	00028317          	auipc	t1,0x28
   1a4c8:	e3c33303          	ld	t1,-452(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   1a4cc:	000300e7          	jalr	ra,0(t1)
      { return _M_ptr; }
   1a4d0:	00843903          	ld	s2,8(s0)
    m->lt = line_table(sec, d[DW_AT::stmt_list].as_sec_offset(),
   1a4d4:	01000613          	addi	a2,zero,16
   1a4d8:	00048593          	addi	a1,s1,0
   1a4dc:	07810513          	addi	a0,sp,120
   1a4e0:	508030ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   1a4e4:	07810513          	addi	a0,sp,120
   1a4e8:	1a4060ef          	jal	ra,2068c <dwarf::value::as_sec_offset() const>
   1a4ec:	00050993          	addi	s3,a0,0
   1a4f0:	00843783          	ld	a5,8(s0)
   1a4f4:	0187b783          	ld	a5,24(a5)
   1a4f8:	0207aa03          	lw	s4,32(a5)
                       m->subsec->addr_size, comp_dir, at_name(d));
   1a4fc:	00048593          	addi	a1,s1,0
   1a500:	03810513          	addi	a0,sp,56
   1a504:	7b8110ef          	jal	ra,2bcbc <dwarf::at_name[abi:cxx11](dwarf::die const&)>
    m->lt = line_table(sec, d[DW_AT::stmt_list].as_sec_offset(),
   1a508:	03810793          	addi	a5,sp,56
   1a50c:	01810713          	addi	a4,sp,24
   1a510:	000a0693          	addi	a3,s4,0
   1a514:	00098613          	addi	a2,s3,0
   1a518:	00810593          	addi	a1,sp,8
   1a51c:	06810513          	addi	a0,sp,104
   1a520:	0310d0ef          	jal	ra,27d50 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
      : _M_ptr(__r._M_ptr), _M_refcount()
   1a524:	06813703          	ld	a4,104(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1a528:	07013783          	ld	a5,112(sp)
	__r._M_pi = _M_pi;
   1a52c:	06013823          	sd	zero,112(sp)
	__r._M_ptr = nullptr;
   1a530:	06013423          	sd	zero,104(sp)
   1a534:	12e93423          	sd	a4,296(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1a538:	13093483          	ld	s1,304(s2)
	__r._M_pi = _M_pi;
   1a53c:	12f93823          	sd	a5,304(s2)
	if (_M_pi != nullptr)
   1a540:	0a048a63          	beq	s1,zero,1a5f4 <dwarf::compilation_unit::get_line_table() const+0x354>
    if (__is_single_threaded())
   1a544:	00028797          	auipc	a5,0x28
   1a548:	f347b783          	ld	a5,-204(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a54c:	0007c783          	lbu	a5,0(a5)
   1a550:	06078263          	beq	a5,zero,1a5b4 <dwarf::compilation_unit::get_line_table() const+0x314>
    _Atomic_word __result = *__mem;
   1a554:	0304a783          	lw	a5,48(s1)
    *__mem += __val;
   1a558:	fff7871b          	addiw	a4,a5,-1
   1a55c:	02e4a823          	sw	a4,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a560:	00100713          	addi	a4,zero,1
   1a564:	08e79863          	bne	a5,a4,1a5f4 <dwarf::compilation_unit::get_line_table() const+0x354>
	_M_dispose();
   1a568:	0004b783          	ld	a5,0(s1)
   1a56c:	0107b783          	ld	a5,16(a5)
   1a570:	00048513          	addi	a0,s1,0
   1a574:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a578:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a57c:	00028797          	auipc	a5,0x28
   1a580:	efc7b783          	ld	a5,-260(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a584:	0007c783          	lbu	a5,0(a5)
   1a588:	10078263          	beq	a5,zero,1a68c <dwarf::compilation_unit::get_line_table() const+0x3ec>
    _Atomic_word __result = *__mem;
   1a58c:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   1a590:	fff7871b          	addiw	a4,a5,-1
   1a594:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a598:	00100713          	addi	a4,zero,1
   1a59c:	02e79663          	bne	a5,a4,1a5c8 <dwarf::compilation_unit::get_line_table() const+0x328>
	    _M_destroy();
   1a5a0:	0004b783          	ld	a5,0(s1)
   1a5a4:	0187b783          	ld	a5,24(a5)
   1a5a8:	00048513          	addi	a0,s1,0
   1a5ac:	000780e7          	jalr	ra,0(a5)
   1a5b0:	0180006f          	jal	zero,1a5c8 <dwarf::compilation_unit::get_line_table() const+0x328>
      return __exchange_and_add(__mem, __val);
   1a5b4:	fff00593          	addi	a1,zero,-1
   1a5b8:	03048513          	addi	a0,s1,48
   1a5bc:	d75fb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a5c0:	00100793          	addi	a5,zero,1
   1a5c4:	faf502e3          	beq	a0,a5,1a568 <dwarf::compilation_unit::get_line_table() const+0x2c8>
	if (_M_pi != nullptr)
   1a5c8:	07013483          	ld	s1,112(sp)
   1a5cc:	02048463          	beq	s1,zero,1a5f4 <dwarf::compilation_unit::get_line_table() const+0x354>
    if (__is_single_threaded())
   1a5d0:	00028797          	auipc	a5,0x28
   1a5d4:	ea87b783          	ld	a5,-344(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a5d8:	0007c783          	lbu	a5,0(a5)
   1a5dc:	0c078263          	beq	a5,zero,1a6a0 <dwarf::compilation_unit::get_line_table() const+0x400>
    _Atomic_word __result = *__mem;
   1a5e0:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1a5e4:	fff5079b          	addiw	a5,a0,-1
   1a5e8:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a5ec:	00100793          	addi	a5,zero,1
   1a5f0:	0cf50063          	beq	a0,a5,1a6b0 <dwarf::compilation_unit::get_line_table() const+0x410>
      { return _M_dataplus._M_p; }
   1a5f4:	03813503          	ld	a0,56(sp)
	if (!_M_is_local())
   1a5f8:	04810793          	addi	a5,sp,72
   1a5fc:	00f50463          	beq	a0,a5,1a604 <dwarf::compilation_unit::get_line_table() const+0x364>
   1a600:	eb1fb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1a604:	01813503          	ld	a0,24(sp)
	if (!_M_is_local())
   1a608:	02810793          	addi	a5,sp,40
   1a60c:	00f50463          	beq	a0,a5,1a614 <dwarf::compilation_unit::get_line_table() const+0x374>
   1a610:	ea1fb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   1a614:	01013483          	ld	s1,16(sp)
   1a618:	ca048ae3          	beq	s1,zero,1a2cc <dwarf::compilation_unit::get_line_table() const+0x2c>
    if (__is_single_threaded())
   1a61c:	00028797          	auipc	a5,0x28
   1a620:	e5c7b783          	ld	a5,-420(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a624:	0007c783          	lbu	a5,0(a5)
   1a628:	0e078463          	beq	a5,zero,1a710 <dwarf::compilation_unit::get_line_table() const+0x470>
    _Atomic_word __result = *__mem;
   1a62c:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1a630:	fff5079b          	addiw	a5,a0,-1
   1a634:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a638:	00100793          	addi	a5,zero,1
   1a63c:	c8f518e3          	bne	a0,a5,1a2cc <dwarf::compilation_unit::get_line_table() const+0x2c>
	_M_dispose();
   1a640:	0004b783          	ld	a5,0(s1)
   1a644:	0107b783          	ld	a5,16(a5)
   1a648:	00048513          	addi	a0,s1,0
   1a64c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a650:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a654:	00028797          	auipc	a5,0x28
   1a658:	e247b783          	ld	a5,-476(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a65c:	0007c783          	lbu	a5,0(a5)
   1a660:	0c078063          	beq	a5,zero,1a720 <dwarf::compilation_unit::get_line_table() const+0x480>
    _Atomic_word __result = *__mem;
   1a664:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   1a668:	fff7871b          	addiw	a4,a5,-1
   1a66c:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a670:	00100713          	addi	a4,zero,1
   1a674:	c4e79ce3          	bne	a5,a4,1a2cc <dwarf::compilation_unit::get_line_table() const+0x2c>
	    _M_destroy();
   1a678:	0004b783          	ld	a5,0(s1)
   1a67c:	0187b783          	ld	a5,24(a5)
   1a680:	00048513          	addi	a0,s1,0
   1a684:	000780e7          	jalr	ra,0(a5)
   1a688:	c45ff06f          	jal	zero,1a2cc <dwarf::compilation_unit::get_line_table() const+0x2c>
      return __exchange_and_add(__mem, __val);
   1a68c:	fff00593          	addi	a1,zero,-1
   1a690:	03448513          	addi	a0,s1,52
   1a694:	c9dfb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a698:	00050793          	addi	a5,a0,0
   1a69c:	efdff06f          	jal	zero,1a598 <dwarf::compilation_unit::get_line_table() const+0x2f8>
   1a6a0:	fff00593          	addi	a1,zero,-1
   1a6a4:	03048513          	addi	a0,s1,48
   1a6a8:	c89fb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a6ac:	f41ff06f          	jal	zero,1a5ec <dwarf::compilation_unit::get_line_table() const+0x34c>
	_M_dispose();
   1a6b0:	0004b783          	ld	a5,0(s1)
   1a6b4:	0107b783          	ld	a5,16(a5)
   1a6b8:	00048513          	addi	a0,s1,0
   1a6bc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a6c0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a6c4:	00028797          	auipc	a5,0x28
   1a6c8:	db47b783          	ld	a5,-588(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a6cc:	0007c783          	lbu	a5,0(a5)
   1a6d0:	02078663          	beq	a5,zero,1a6fc <dwarf::compilation_unit::get_line_table() const+0x45c>
    _Atomic_word __result = *__mem;
   1a6d4:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   1a6d8:	fff7871b          	addiw	a4,a5,-1
   1a6dc:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a6e0:	00100713          	addi	a4,zero,1
   1a6e4:	f0e798e3          	bne	a5,a4,1a5f4 <dwarf::compilation_unit::get_line_table() const+0x354>
	    _M_destroy();
   1a6e8:	0004b783          	ld	a5,0(s1)
   1a6ec:	0187b783          	ld	a5,24(a5)
   1a6f0:	00048513          	addi	a0,s1,0
   1a6f4:	000780e7          	jalr	ra,0(a5)
   1a6f8:	efdff06f          	jal	zero,1a5f4 <dwarf::compilation_unit::get_line_table() const+0x354>
      return __exchange_and_add(__mem, __val);
   1a6fc:	fff00593          	addi	a1,zero,-1
   1a700:	03448513          	addi	a0,s1,52
   1a704:	c2dfb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a708:	00050793          	addi	a5,a0,0
   1a70c:	fd5ff06f          	jal	zero,1a6e0 <dwarf::compilation_unit::get_line_table() const+0x440>
   1a710:	fff00593          	addi	a1,zero,-1
   1a714:	03048513          	addi	a0,s1,48
   1a718:	c19fb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a71c:	f1dff06f          	jal	zero,1a638 <dwarf::compilation_unit::get_line_table() const+0x398>
   1a720:	fff00593          	addi	a1,zero,-1
   1a724:	03448513          	addi	a0,s1,52
   1a728:	c09fb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a72c:	00050793          	addi	a5,a0,0
   1a730:	f41ff06f          	jal	zero,1a670 <dwarf::compilation_unit::get_line_table() const+0x3d0>
	if (_M_pi != nullptr)
   1a734:	01013503          	ld	a0,16(sp)
   1a738:	b8050ae3          	beq	a0,zero,1a2cc <dwarf::compilation_unit::get_line_table() const+0x2c>
	  _M_pi->_M_release();
   1a73c:	00028317          	auipc	t1,0x28
   1a740:	c8433303          	ld	t1,-892(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   1a744:	000300e7          	jalr	ra,0(t1)
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   1a748:	b85ff06f          	jal	zero,1a2cc <dwarf::compilation_unit::get_line_table() const+0x2c>
    } catch (format_error &e) {
   1a74c:	00100793          	addi	a5,zero,1
   1a750:	02f58263          	beq	a1,a5,1a774 <dwarf::compilation_unit::get_line_table() const+0x4d4>
   1a754:	00050413          	addi	s0,a0,0
	if (_M_pi != nullptr)
   1a758:	01013503          	ld	a0,16(sp)
   1a75c:	00050863          	beq	a0,zero,1a76c <dwarf::compilation_unit::get_line_table() const+0x4cc>
	  _M_pi->_M_release();
   1a760:	00028317          	auipc	t1,0x28
   1a764:	c6033303          	ld	t1,-928(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   1a768:	000300e7          	jalr	ra,0(t1)
   1a76c:	00040513          	addi	a0,s0,0
   1a770:	f21fb0ef          	jal	ra,16690 <_Unwind_Resume@plt>
   1a774:	c3dfb0ef          	jal	ra,163b0 <__cxa_begin_catch@plt>
    }
   1a778:	eb9fb0ef          	jal	ra,16630 <__cxa_end_catch@plt>
   1a77c:	fb9ff06f          	jal	zero,1a734 <dwarf::compilation_unit::get_line_table() const+0x494>
      { return _M_dataplus._M_p; }
   1a780:	00050413          	addi	s0,a0,0
   1a784:	03813503          	ld	a0,56(sp)
	if (!_M_is_local())
   1a788:	04810793          	addi	a5,sp,72
   1a78c:	00f50463          	beq	a0,a5,1a794 <dwarf::compilation_unit::get_line_table() const+0x4f4>
   1a790:	d21fb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1a794:	01813503          	ld	a0,24(sp)
	if (!_M_is_local())
   1a798:	02810793          	addi	a5,sp,40
   1a79c:	faf50ee3          	beq	a0,a5,1a758 <dwarf::compilation_unit::get_line_table() const+0x4b8>
   1a7a0:	d11fb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1a7a4:	fb5ff06f          	jal	zero,1a758 <dwarf::compilation_unit::get_line_table() const+0x4b8>
      { return _M_dataplus._M_p; }
   1a7a8:	00050413          	addi	s0,a0,0
   1a7ac:	fe9ff06f          	jal	zero,1a794 <dwarf::compilation_unit::get_line_table() const+0x4f4>
	if (_M_pi != nullptr)
   1a7b0:	00050413          	addi	s0,a0,0
   1a7b4:	fa5ff06f          	jal	zero,1a758 <dwarf::compilation_unit::get_line_table() const+0x4b8>

000000000001a7b8 <dwarf::unit::get_abbrev(unsigned long) const>:
const abbrev_entry &unit::get_abbrev(abbrev_code acode) const {
   1a7b8:	f9010113          	addi	sp,sp,-112
   1a7bc:	06113423          	sd	ra,104(sp)
   1a7c0:	06813023          	sd	s0,96(sp)
   1a7c4:	04913c23          	sd	s1,88(sp)
   1a7c8:	00050413          	addi	s0,a0,0
   1a7cc:	00b13423          	sd	a1,8(sp)
      { return _M_ptr; }
   1a7d0:	00853503          	ld	a0,8(a0)
  if (!m->have_abbrevs)
   1a7d4:	13854783          	lbu	a5,312(a0)
   1a7d8:	04078e63          	beq	a5,zero,1a834 <dwarf::unit::get_abbrev(unsigned long) const+0x7c>
   1a7dc:	00843703          	ld	a4,8(s0)
      : _M_current(__i) { }
   1a7e0:	14073503          	ld	a0,320(a4)
   1a7e4:	14873783          	ld	a5,328(a4)
  if (!m->abbrevs_vec.empty()) {
   1a7e8:	04a78a63          	beq	a5,a0,1a83c <dwarf::unit::get_abbrev(unsigned long) const+0x84>
    if (acode >= m->abbrevs_vec.size())
   1a7ec:	00813703          	ld	a4,8(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1a7f0:	40a787b3          	sub	a5,a5,a0
   1a7f4:	4037d793          	srai	a5,a5,0x3
   1a7f8:	0001c697          	auipc	a3,0x1c
   1a7fc:	4986b683          	ld	a3,1176(a3) # 36c90 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd8>
   1a800:	02d787b3          	mul	a5,a5,a3
   1a804:	04f77e63          	bgeu	a4,a5,1a860 <dwarf::unit::get_abbrev(unsigned long) const+0xa8>
	return *(this->_M_impl._M_start + __n);
   1a808:	00271793          	slli	a5,a4,0x2
   1a80c:	00e787b3          	add	a5,a5,a4
   1a810:	00379793          	slli	a5,a5,0x3
   1a814:	00f50533          	add	a0,a0,a5
    if (entry.code == 0)
   1a818:	00053783          	ld	a5,0(a0)
   1a81c:	04078263          	beq	a5,zero,1a860 <dwarf::unit::get_abbrev(unsigned long) const+0xa8>
}
   1a820:	06813083          	ld	ra,104(sp)
   1a824:	06013403          	ld	s0,96(sp)
   1a828:	05813483          	ld	s1,88(sp)
   1a82c:	07010113          	addi	sp,sp,112
   1a830:	00008067          	jalr	zero,0(ra)
    m->force_abbrevs();
   1a834:	ca8ff0ef          	jal	ra,19cdc <dwarf::unit::impl::force_abbrevs()>
   1a838:	fa5ff06f          	jal	zero,1a7dc <dwarf::unit::get_abbrev(unsigned long) const+0x24>
      if (size() <= __small_size_threshold())
   1a83c:	17073783          	ld	a5,368(a4)
   1a840:	04079263          	bne	a5,zero,1a884 <dwarf::unit::get_abbrev(unsigned long) const+0xcc>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1a844:	16873503          	ld	a0,360(a4)
	  for (auto __it = begin(); __it != end(); ++__it)
   1a848:	00050c63          	beq	a0,zero,1a860 <dwarf::unit::get_abbrev(unsigned long) const+0xa8>
   1a84c:	00813703          	ld	a4,8(sp)
	    if (this->_M_key_equals(__k, *__it._M_cur))
   1a850:	00853783          	ld	a5,8(a0)
   1a854:	04f70e63          	beq	a4,a5,1a8b0 <dwarf::unit::get_abbrev(unsigned long) const+0xf8>
   1a858:	00053503          	ld	a0,0(a0)
	  for (auto __it = begin(); __it != end(); ++__it)
   1a85c:	fe051ae3          	bne	a0,zero,1a850 <dwarf::unit::get_abbrev(unsigned long) const+0x98>
  throw format_error("unknown abbrev code 0x" + to_hex(acode));
   1a860:	01000513          	addi	a0,zero,16
   1a864:	b6dfb0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1a868:	00050493          	addi	s1,a0,0
   1a86c:	00813583          	ld	a1,8(sp)
   1a870:	01010513          	addi	a0,sp,16
   1a874:	00028317          	auipc	t1,0x28
   1a878:	a7c33303          	ld	t1,-1412(t1) # 422f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26cc8>
   1a87c:	000300e7          	jalr	ra,0(t1)
   1a880:	0380006f          	jal	zero,1a8b8 <dwarf::unit::get_abbrev(unsigned long) const+0x100>
	return _M_hash()(__k);
   1a884:	00813683          	ld	a3,8(sp)
    { return __num % __den; }
   1a888:	16073583          	ld	a1,352(a4)
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1a88c:	00810613          	addi	a2,sp,8
   1a890:	02b6f5b3          	remu	a1,a3,a1
   1a894:	15870513          	addi	a0,a4,344
   1a898:	00028317          	auipc	t1,0x28
   1a89c:	ca833303          	ld	t1,-856(t1) # 42540 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x263a0>
   1a8a0:	000300e7          	jalr	ra,0(t1)
	if (__before_n)
   1a8a4:	fa050ee3          	beq	a0,zero,1a860 <dwarf::unit::get_abbrev(unsigned long) const+0xa8>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   1a8a8:	00053503          	ld	a0,0(a0)
    if (it == m->abbrevs_map.end())
   1a8ac:	fa050ae3          	beq	a0,zero,1a860 <dwarf::unit::get_abbrev(unsigned long) const+0xa8>
    return it->second;
   1a8b0:	01050513          	addi	a0,a0,16
   1a8b4:	f6dff06f          	jal	zero,1a820 <dwarf::unit::get_abbrev(unsigned long) const+0x68>
    { return std::move(__rhs.insert(0, __lhs)); }
   1a8b8:	0001c617          	auipc	a2,0x1c
   1a8bc:	19860613          	addi	a2,a2,408 # 36a50 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xe0>
   1a8c0:	00000593          	addi	a1,zero,0
   1a8c4:	01010513          	addi	a0,sp,16
   1a8c8:	a79fb0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1a8cc:	00050593          	addi	a1,a0,0
   1a8d0:	03010413          	addi	s0,sp,48
   1a8d4:	00040513          	addi	a0,s0,0
   1a8d8:	b39fb0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   1a8dc:	00040593          	addi	a1,s0,0
   1a8e0:	00048513          	addi	a0,s1,0
   1a8e4:	c5dfb0ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1a8e8:	00028797          	auipc	a5,0x28
   1a8ec:	c687b783          	ld	a5,-920(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   1a8f0:	01078793          	addi	a5,a5,16
   1a8f4:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1a8f8:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   1a8fc:	04010793          	addi	a5,sp,64
   1a900:	00f50463          	beq	a0,a5,1a908 <dwarf::unit::get_abbrev(unsigned long) const+0x150>
   1a904:	badfb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1a908:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   1a90c:	02010793          	addi	a5,sp,32
   1a910:	00f50463          	beq	a0,a5,1a918 <dwarf::unit::get_abbrev(unsigned long) const+0x160>
   1a914:	b9dfb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
  throw format_error("unknown abbrev code 0x" + to_hex(acode));
   1a918:	00028617          	auipc	a2,0x28
   1a91c:	a6063603          	ld	a2,-1440(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   1a920:	00028597          	auipc	a1,0x28
   1a924:	9885b583          	ld	a1,-1656(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   1a928:	00048513          	addi	a0,s1,0
   1a92c:	d35fb0ef          	jal	ra,16660 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   1a930:	00050413          	addi	s0,a0,0
   1a934:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   1a938:	04010793          	addi	a5,sp,64
   1a93c:	00f50463          	beq	a0,a5,1a944 <dwarf::unit::get_abbrev(unsigned long) const+0x18c>
   1a940:	b71fb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1a944:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   1a948:	02010793          	addi	a5,sp,32
   1a94c:	00f50463          	beq	a0,a5,1a954 <dwarf::unit::get_abbrev(unsigned long) const+0x19c>
   1a950:	b61fb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1a954:	00048513          	addi	a0,s1,0
   1a958:	b19fb0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1a95c:	00040513          	addi	a0,s0,0
   1a960:	d31fb0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1a964:	00050413          	addi	s0,a0,0
   1a968:	fddff06f          	jal	zero,1a944 <dwarf::unit::get_abbrev(unsigned long) const+0x18c>
   1a96c:	00050413          	addi	s0,a0,0
   1a970:	fe5ff06f          	jal	zero,1a954 <dwarf::unit::get_abbrev(unsigned long) const+0x19c>

000000000001a974 <dwarf::type_unit::type() const>:

const die &type_unit::type() const {
   1a974:	f5010113          	addi	sp,sp,-176
   1a978:	0a113423          	sd	ra,168(sp)
   1a97c:	0a813023          	sd	s0,160(sp)
   1a980:	08913c23          	sd	s1,152(sp)
   1a984:	09213823          	sd	s2,144(sp)
   1a988:	09313423          	sd	s3,136(sp)
   1a98c:	09413023          	sd	s4,128(sp)
   1a990:	07513c23          	sd	s5,120(sp)
   1a994:	07613823          	sd	s6,112(sp)
   1a998:	00050493          	addi	s1,a0,0
   1a99c:	00853503          	ld	a0,8(a0)
  if (!m->type.valid()) {
   1a9a0:	0c853783          	ld	a5,200(a0)
   1a9a4:	02078a63          	beq	a5,zero,1a9d8 <dwarf::type_unit::type() const+0x64>
    m->force_abbrevs();
    m->type = die(this);
    m->type.read(m->type_offset);
  }
  return m->type;
   1a9a8:	0084b503          	ld	a0,8(s1)
   1a9ac:	0b850513          	addi	a0,a0,184
}
   1a9b0:	0a813083          	ld	ra,168(sp)
   1a9b4:	0a013403          	ld	s0,160(sp)
   1a9b8:	09813483          	ld	s1,152(sp)
   1a9bc:	09013903          	ld	s2,144(sp)
   1a9c0:	08813983          	ld	s3,136(sp)
   1a9c4:	08013a03          	ld	s4,128(sp)
   1a9c8:	07813a83          	ld	s5,120(sp)
   1a9cc:	07013b03          	ld	s6,112(sp)
   1a9d0:	0b010113          	addi	sp,sp,176
   1a9d4:	00008067          	jalr	zero,0(ra)
    m->force_abbrevs();
   1a9d8:	b04ff0ef          	jal	ra,19cdc <dwarf::unit::impl::force_abbrevs()>
   1a9dc:	0084b403          	ld	s0,8(s1)
    m->type = die(this);
   1a9e0:	00048593          	addi	a1,s1,0
   1a9e4:	00010513          	addi	a0,sp,0
   1a9e8:	22d020ef          	jal	ra,1d414 <dwarf::die::die(dwarf::unit const*)>
  die &operator=(die &&o) = default;
   1a9ec:	00012783          	lw	a5,0(sp)
   1a9f0:	0af42c23          	sw	a5,184(s0)
   1a9f4:	00813783          	ld	a5,8(sp)
   1a9f8:	0cf43023          	sd	a5,192(s0)
   1a9fc:	01013783          	ld	a5,16(sp)
   1aa00:	0cf43423          	sd	a5,200(s0)
   1aa04:	01813783          	ld	a5,24(sp)
   1aa08:	0cf43823          	sd	a5,208(s0)
  size_type size() const { return end - base; }
   1aa0c:	05813983          	ld	s3,88(sp)
   1aa10:	05013783          	ld	a5,80(sp)
   1aa14:	40f989b3          	sub	s3,s3,a5
   1aa18:	4039d913          	srai	s2,s3,0x3
    for (T *p = base; p < end; ++p)
   1aa1c:	10843683          	ld	a3,264(s0)
   1aa20:	11043783          	ld	a5,272(s0)
   1aa24:	00f6fa63          	bgeu	a3,a5,1aa38 <dwarf::type_unit::type() const+0xc4>
   1aa28:	00068793          	addi	a5,a3,0
   1aa2c:	00878793          	addi	a5,a5,8
   1aa30:	11043703          	ld	a4,272(s0)
   1aa34:	fee7ece3          	bltu	a5,a4,1aa2c <dwarf::type_unit::type() const+0xb8>
    end = base;
   1aa38:	10d43823          	sd	a3,272(s0)
    if (n <= (size_type)(cap - base))
   1aa3c:	11843503          	ld	a0,280(s0)
   1aa40:	40d50533          	sub	a0,a0,a3
   1aa44:	07357863          	bgeu	a0,s3,1aab4 <dwarf::type_unit::type() const+0x140>
   1aa48:	40355513          	srai	a0,a0,0x3
   1aa4c:	00051463          	bne	a0,zero,1aa54 <dwarf::type_unit::type() const+0xe0>
   1aa50:	00100513          	addi	a0,zero,1
    while (target < n)
   1aa54:	01257663          	bgeu	a0,s2,1aa60 <dwarf::type_unit::type() const+0xec>
      target <<= 1;
   1aa58:	00151513          	slli	a0,a0,0x1
    while (target < n)
   1aa5c:	ff256ee3          	bltu	a0,s2,1aa58 <dwarf::type_unit::type() const+0xe4>
    char *newbuf = new char[sizeof(T[target])];
   1aa60:	00351a13          	slli	s4,a0,0x3
   1aa64:	000a0513          	addi	a0,s4,0
   1aa68:	879fb0ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   1aa6c:	00050b13          	addi	s6,a0,0
    T *src = base, *dest = (T *)newbuf;
   1aa70:	10843503          	ld	a0,264(s0)
    for (; src < end; src++, dest++) {
   1aa74:	11043783          	ld	a5,272(s0)
   1aa78:	0cf57063          	bgeu	a0,a5,1ab38 <dwarf::type_unit::type() const+0x1c4>
    T *src = base, *dest = (T *)newbuf;
   1aa7c:	00050793          	addi	a5,a0,0
   1aa80:	000b0a93          	addi	s5,s6,0
    for (; src < end; src++, dest++) {
   1aa84:	00878793          	addi	a5,a5,8
   1aa88:	008a8a93          	addi	s5,s5,8
   1aa8c:	11043703          	ld	a4,272(s0)
   1aa90:	fee7eae3          	bltu	a5,a4,1aa84 <dwarf::type_unit::type() const+0x110>
   1aa94:	0d840793          	addi	a5,s0,216
    if ((char *)base != buf)
   1aa98:	00f50663          	beq	a0,a5,1aaa4 <dwarf::type_unit::type() const+0x130>
      delete[] (char *)base;
   1aa9c:	00050463          	beq	a0,zero,1aaa4 <dwarf::type_unit::type() const+0x130>
   1aaa0:	ac1fb0ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1aaa4:	11643423          	sd	s6,264(s0)
    end = dest;
   1aaa8:	11543823          	sd	s5,272(s0)
    cap = base + target;
   1aaac:	014b0b33          	add	s6,s6,s4
   1aab0:	11643c23          	sd	s6,280(s0)
    for (size_type i = 0; i < osize; i++)
   1aab4:	02090663          	beq	s2,zero,1aae0 <dwarf::type_unit::type() const+0x16c>
   1aab8:	00000793          	addi	a5,zero,0
   1aabc:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1aac0:	05013703          	ld	a4,80(sp)
   1aac4:	00d70733          	add	a4,a4,a3
   1aac8:	00073603          	ld	a2,0(a4)
   1aacc:	10843703          	ld	a4,264(s0)
   1aad0:	00d70733          	add	a4,a4,a3
   1aad4:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1aad8:	00178793          	addi	a5,a5,1
   1aadc:	fef910e3          	bne	s2,a5,1aabc <dwarf::type_unit::type() const+0x148>
    end = base + osize;
   1aae0:	10843783          	ld	a5,264(s0)
   1aae4:	013787b3          	add	a5,a5,s3
   1aae8:	10f43823          	sd	a5,272(s0)
   1aaec:	06813783          	ld	a5,104(sp)
   1aaf0:	12f43023          	sd	a5,288(s0)
    for (T *p = base; p < end; ++p)
   1aaf4:	05013503          	ld	a0,80(sp)
   1aaf8:	05813783          	ld	a5,88(sp)
   1aafc:	00f57a63          	bgeu	a0,a5,1ab10 <dwarf::type_unit::type() const+0x19c>
   1ab00:	00050793          	addi	a5,a0,0
   1ab04:	00878793          	addi	a5,a5,8
   1ab08:	05813703          	ld	a4,88(sp)
   1ab0c:	fee7ece3          	bltu	a5,a4,1ab04 <dwarf::type_unit::type() const+0x190>
    end = base;
   1ab10:	04a13c23          	sd	a0,88(sp)
    if ((char *)base != buf)
   1ab14:	02010793          	addi	a5,sp,32
   1ab18:	00f50663          	beq	a0,a5,1ab24 <dwarf::type_unit::type() const+0x1b0>
      delete[] (char *)base;
   1ab1c:	00050463          	beq	a0,zero,1ab24 <dwarf::type_unit::type() const+0x1b0>
   1ab20:	a41fb0ef          	jal	ra,16560 <operator delete[](void*)@plt>
   1ab24:	0084b503          	ld	a0,8(s1)
    m->type.read(m->type_offset);
   1ab28:	04053583          	ld	a1,64(a0)
   1ab2c:	0b850513          	addi	a0,a0,184
   1ab30:	13d020ef          	jal	ra,1d46c <dwarf::die::read(unsigned long)>
   1ab34:	e75ff06f          	jal	zero,1a9a8 <dwarf::type_unit::type() const+0x34>
    T *src = base, *dest = (T *)newbuf;
   1ab38:	000b0a93          	addi	s5,s6,0
   1ab3c:	f59ff06f          	jal	zero,1aa94 <dwarf::type_unit::type() const+0x120>
class die {
   1ab40:	00050413          	addi	s0,a0,0
   1ab44:	02010513          	addi	a0,sp,32
   1ab48:	00028317          	auipc	t1,0x28
   1ab4c:	89833303          	ld	t1,-1896(t1) # 423e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b110>
   1ab50:	000300e7          	jalr	ra,0(t1)
   1ab54:	00040513          	addi	a0,s0,0
   1ab58:	b39fb0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001ab5c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   1ab5c:	00008067          	jalr	zero,0(ra)

000000000001ab60 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   1ab60:	00008067          	jalr	zero,0(ra)

000000000001ab64 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   1ab64:	00008067          	jalr	zero,0(ra)

000000000001ab68 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      }
   1ab68:	00008067          	jalr	zero,0(ra)

000000000001ab6c <dwarf::format_error::~format_error()>:
class format_error : public std::runtime_error {
   1ab6c:	ff010113          	addi	sp,sp,-16
   1ab70:	00113423          	sd	ra,8(sp)
   1ab74:	00028797          	auipc	a5,0x28
   1ab78:	9dc7b783          	ld	a5,-1572(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   1ab7c:	01078793          	addi	a5,a5,16
   1ab80:	00f53023          	sd	a5,0(a0)
   1ab84:	95dfb0ef          	jal	ra,164e0 <std::runtime_error::~runtime_error()@plt>
   1ab88:	00813083          	ld	ra,8(sp)
   1ab8c:	01010113          	addi	sp,sp,16
   1ab90:	00008067          	jalr	zero,0(ra)

000000000001ab94 <dwarf::format_error::~format_error()>:
   1ab94:	ff010113          	addi	sp,sp,-16
   1ab98:	00113423          	sd	ra,8(sp)
   1ab9c:	00813023          	sd	s0,0(sp)
   1aba0:	00050413          	addi	s0,a0,0
   1aba4:	00028797          	auipc	a5,0x28
   1aba8:	9ac7b783          	ld	a5,-1620(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   1abac:	01078793          	addi	a5,a5,16
   1abb0:	00f53023          	sd	a5,0(a0)
   1abb4:	92dfb0ef          	jal	ra,164e0 <std::runtime_error::~runtime_error()@plt>
   1abb8:	00040513          	addi	a0,s0,0
   1abbc:	8f5fb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1abc0:	00813083          	ld	ra,8(sp)
   1abc4:	00013403          	ld	s0,0(sp)
   1abc8:	01010113          	addi	sp,sp,16
   1abcc:	00008067          	jalr	zero,0(ra)

000000000001abd0 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   1abd0:	ff010113          	addi	sp,sp,-16
   1abd4:	00113423          	sd	ra,8(sp)
   1abd8:	8d9fb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1abdc:	00813083          	ld	ra,8(sp)
   1abe0:	01010113          	addi	sp,sp,16
   1abe4:	00008067          	jalr	zero,0(ra)

000000000001abe8 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   1abe8:	ff010113          	addi	sp,sp,-16
   1abec:	00113423          	sd	ra,8(sp)
   1abf0:	8c1fb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1abf4:	00813083          	ld	ra,8(sp)
   1abf8:	01010113          	addi	sp,sp,16
   1abfc:	00008067          	jalr	zero,0(ra)

000000000001ac00 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   1ac00:	ff010113          	addi	sp,sp,-16
   1ac04:	00113423          	sd	ra,8(sp)
   1ac08:	8a9fb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1ac0c:	00813083          	ld	ra,8(sp)
   1ac10:	01010113          	addi	sp,sp,16
   1ac14:	00008067          	jalr	zero,0(ra)

000000000001ac18 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()>:
      ~vector() _GLIBCXX_NOEXCEPT
   1ac18:	fe010113          	addi	sp,sp,-32
   1ac1c:	00113c23          	sd	ra,24(sp)
   1ac20:	00813823          	sd	s0,16(sp)
   1ac24:	00913423          	sd	s1,8(sp)
   1ac28:	01213023          	sd	s2,0(sp)
   1ac2c:	00050913          	addi	s2,a0,0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1ac30:	00053403          	ld	s0,0(a0)
   1ac34:	00853483          	ld	s1,8(a0)
   1ac38:	00940e63          	beq	s0,s1,1ac54 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()+0x3c>
      __pointer->~_Tp();
   1ac3c:	00043783          	ld	a5,0(s0)
   1ac40:	0007b783          	ld	a5,0(a5)
   1ac44:	00040513          	addi	a0,s0,0
   1ac48:	000780e7          	jalr	ra,0(a5)
	  for (; __first != __last; ++__first)
   1ac4c:	01840413          	addi	s0,s0,24
   1ac50:	fe8496e3          	bne	s1,s0,1ac3c <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()+0x24>
	_M_deallocate(_M_impl._M_start,
   1ac54:	00093503          	ld	a0,0(s2)
	if (__p)
   1ac58:	00050463          	beq	a0,zero,1ac60 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()+0x48>
   1ac5c:	855fb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   1ac60:	01813083          	ld	ra,24(sp)
   1ac64:	01013403          	ld	s0,16(sp)
   1ac68:	00813483          	ld	s1,8(sp)
   1ac6c:	00013903          	ld	s2,0(sp)
   1ac70:	02010113          	addi	sp,sp,32
   1ac74:	00008067          	jalr	zero,0(ra)

000000000001ac78 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   1ac78:	ff010113          	addi	sp,sp,-16
   1ac7c:	00113423          	sd	ra,8(sp)
   1ac80:	831fb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   1ac84:	00813083          	ld	ra,8(sp)
   1ac88:	01010113          	addi	sp,sp,16
   1ac8c:	00008067          	jalr	zero,0(ra)

000000000001ac90 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   1ac90:	ff010113          	addi	sp,sp,-16
   1ac94:	00113423          	sd	ra,8(sp)
   1ac98:	819fb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   1ac9c:	00813083          	ld	ra,8(sp)
   1aca0:	01010113          	addi	sp,sp,16
   1aca4:	00008067          	jalr	zero,0(ra)

000000000001aca8 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   1aca8:	ff010113          	addi	sp,sp,-16
   1acac:	00113423          	sd	ra,8(sp)
   1acb0:	801fb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   1acb4:	00813083          	ld	ra,8(sp)
   1acb8:	01010113          	addi	sp,sp,16
   1acbc:	00008067          	jalr	zero,0(ra)

000000000001acc0 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   1acc0:	ff010113          	addi	sp,sp,-16
   1acc4:	00113423          	sd	ra,8(sp)
   1acc8:	00813023          	sd	s0,0(sp)
   1accc:	03850413          	addi	s0,a0,56
	    ||
   1acd0:	00028797          	auipc	a5,0x28
   1acd4:	8607b783          	ld	a5,-1952(a5) # 42530 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbbc0>
   1acd8:	02f58c63          	beq	a1,a5,1ad10 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   1acdc:	0085b503          	ld	a0,8(a1)
   1ace0:	00027797          	auipc	a5,0x27
   1ace4:	7287b783          	ld	a5,1832(a5) # 42408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbce8>
   1ace8:	02f50463          	beq	a0,a5,1ad10 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   1acec:	00054703          	lbu	a4,0(a0)
   1acf0:	02a00793          	addi	a5,zero,42
   1acf4:	02f70863          	beq	a4,a5,1ad24 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   1acf8:	00027597          	auipc	a1,0x27
   1acfc:	7105b583          	ld	a1,1808(a1) # 42408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbce8>
   1ad00:	e10fb0ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   1ad04:	00153513          	sltiu	a0,a0,1
   1ad08:	40a00533          	sub	a0,zero,a0
   1ad0c:	00a47433          	and	s0,s0,a0
      }
   1ad10:	00040513          	addi	a0,s0,0
   1ad14:	00813083          	ld	ra,8(sp)
   1ad18:	00013403          	ld	s0,0(sp)
   1ad1c:	01010113          	addi	sp,sp,16
   1ad20:	00008067          	jalr	zero,0(ra)
	return nullptr;
   1ad24:	00000413          	addi	s0,zero,0
   1ad28:	fe9ff06f          	jal	zero,1ad10 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

000000000001ad2c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   1ad2c:	ff010113          	addi	sp,sp,-16
   1ad30:	00113423          	sd	ra,8(sp)
   1ad34:	00813023          	sd	s0,0(sp)
   1ad38:	03850413          	addi	s0,a0,56
	    ||
   1ad3c:	00027797          	auipc	a5,0x27
   1ad40:	7f47b783          	ld	a5,2036(a5) # 42530 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbbc0>
   1ad44:	02f58c63          	beq	a1,a5,1ad7c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   1ad48:	0085b503          	ld	a0,8(a1)
   1ad4c:	00027797          	auipc	a5,0x27
   1ad50:	6bc7b783          	ld	a5,1724(a5) # 42408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbce8>
   1ad54:	02f50463          	beq	a0,a5,1ad7c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   1ad58:	00054703          	lbu	a4,0(a0)
   1ad5c:	02a00793          	addi	a5,zero,42
   1ad60:	02f70863          	beq	a4,a5,1ad90 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   1ad64:	00027597          	auipc	a1,0x27
   1ad68:	6a45b583          	ld	a1,1700(a1) # 42408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbce8>
   1ad6c:	da4fb0ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   1ad70:	00153513          	sltiu	a0,a0,1
   1ad74:	40a00533          	sub	a0,zero,a0
   1ad78:	00a47433          	and	s0,s0,a0
      }
   1ad7c:	00040513          	addi	a0,s0,0
   1ad80:	00813083          	ld	ra,8(sp)
   1ad84:	00013403          	ld	s0,0(sp)
   1ad88:	01010113          	addi	sp,sp,16
   1ad8c:	00008067          	jalr	zero,0(ra)
	return nullptr;
   1ad90:	00000413          	addi	s0,zero,0
   1ad94:	fe9ff06f          	jal	zero,1ad7c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

000000000001ad98 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   1ad98:	ff010113          	addi	sp,sp,-16
   1ad9c:	00113423          	sd	ra,8(sp)
   1ada0:	00813023          	sd	s0,0(sp)
   1ada4:	03850413          	addi	s0,a0,56
	    ||
   1ada8:	00027797          	auipc	a5,0x27
   1adac:	7887b783          	ld	a5,1928(a5) # 42530 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbbc0>
   1adb0:	02f58c63          	beq	a1,a5,1ade8 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   1adb4:	0085b503          	ld	a0,8(a1)
   1adb8:	00027797          	auipc	a5,0x27
   1adbc:	6507b783          	ld	a5,1616(a5) # 42408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbce8>
   1adc0:	02f50463          	beq	a0,a5,1ade8 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   1adc4:	00054703          	lbu	a4,0(a0)
   1adc8:	02a00793          	addi	a5,zero,42
   1adcc:	02f70863          	beq	a4,a5,1adfc <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   1add0:	00027597          	auipc	a1,0x27
   1add4:	6385b583          	ld	a1,1592(a1) # 42408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbce8>
   1add8:	d38fb0ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   1addc:	00153513          	sltiu	a0,a0,1
   1ade0:	40a00533          	sub	a0,zero,a0
   1ade4:	00a47433          	and	s0,s0,a0
      }
   1ade8:	00040513          	addi	a0,s0,0
   1adec:	00813083          	ld	ra,8(sp)
   1adf0:	00013403          	ld	s0,0(sp)
   1adf4:	01010113          	addi	sp,sp,16
   1adf8:	00008067          	jalr	zero,0(ra)
	return nullptr;
   1adfc:	00000413          	addi	s0,zero,0
   1ae00:	fe9ff06f          	jal	zero,1ade8 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

000000000001ae04 <std::__cxx11::to_string(int)>:
  inline string
  to_string(int __val)
#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_INT__) <= 32
  noexcept // any 32-bit value fits in the SSO buffer
#endif
  {
   1ae04:	fd010113          	addi	sp,sp,-48
   1ae08:	02113423          	sd	ra,40(sp)
   1ae0c:	02813023          	sd	s0,32(sp)
   1ae10:	00913c23          	sd	s1,24(sp)
   1ae14:	01213823          	sd	s2,16(sp)
   1ae18:	01313423          	sd	s3,8(sp)
   1ae1c:	00050913          	addi	s2,a0,0
    const bool __neg = __val < 0;
   1ae20:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   1ae24:	0005849b          	addiw	s1,a1,0
   1ae28:	0605c863          	blt	a1,zero,1ae98 <std::__cxx11::to_string(int)+0x94>
      const unsigned __b2 = __base  * __base;
      const unsigned __b3 = __b2 * __base;
      const unsigned long __b4 = __b3 * __base;
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
   1ae2c:	00900793          	addi	a5,zero,9
   1ae30:	1c97f063          	bgeu	a5,s1,1aff0 <std::__cxx11::to_string(int)+0x1ec>
	  if (__value < __b2) return __n + 1;
   1ae34:	06300793          	addi	a5,zero,99
   1ae38:	0697f463          	bgeu	a5,s1,1aea0 <std::__cxx11::to_string(int)+0x9c>
	  if (__value < __b3) return __n + 2;
   1ae3c:	3e700793          	addi	a5,zero,999
   1ae40:	0a97f063          	bgeu	a5,s1,1aee0 <std::__cxx11::to_string(int)+0xdc>
	  if (__value < __b4) return __n + 3;
   1ae44:	02049713          	slli	a4,s1,0x20
   1ae48:	02075713          	srli	a4,a4,0x20
   1ae4c:	000027b7          	lui	a5,0x2
   1ae50:	70f78793          	addi	a5,a5,1807 # 270f <__abi_tag-0xdb85>
   1ae54:	1897fa63          	bgeu	a5,s1,1afe8 <std::__cxx11::to_string(int)+0x1e4>
      unsigned __n = 1;
   1ae58:	00100413          	addi	s0,zero,1
	  __value /= __b4;
   1ae5c:	000026b7          	lui	a3,0x2
   1ae60:	71068593          	addi	a1,a3,1808 # 2710 <__abi_tag-0xdb84>
	  if (__value < (unsigned)__base) return __n;
   1ae64:	00900613          	addi	a2,zero,9
	  if (__value < __b2) return __n + 1;
   1ae68:	06300513          	addi	a0,zero,99
	  if (__value < __b3) return __n + 2;
   1ae6c:	3e700813          	addi	a6,zero,999
	  if (__value < __b4) return __n + 3;
   1ae70:	00078693          	addi	a3,a5,0
	  __value /= __b4;
   1ae74:	02b75733          	divu	a4,a4,a1
   1ae78:	0007079b          	addiw	a5,a4,0
	  __n += 4;
   1ae7c:	0044041b          	addiw	s0,s0,4
	  if (__value < (unsigned)__base) return __n;
   1ae80:	06f67463          	bgeu	a2,a5,1aee8 <std::__cxx11::to_string(int)+0xe4>
	  if (__value < __b2) return __n + 1;
   1ae84:	02f57063          	bgeu	a0,a5,1aea4 <std::__cxx11::to_string(int)+0xa0>
	  if (__value < __b3) return __n + 2;
   1ae88:	04f87e63          	bgeu	a6,a5,1aee4 <std::__cxx11::to_string(int)+0xe0>
	  if (__value < __b4) return __n + 3;
   1ae8c:	fef6e4e3          	bltu	a3,a5,1ae74 <std::__cxx11::to_string(int)+0x70>
   1ae90:	0034041b          	addiw	s0,s0,3
   1ae94:	0540006f          	jal	zero,1aee8 <std::__cxx11::to_string(int)+0xe4>
   1ae98:	40b004bb          	subw	s1,zero,a1
   1ae9c:	f91ff06f          	jal	zero,1ae2c <std::__cxx11::to_string(int)+0x28>
      unsigned __n = 1;
   1aea0:	00100413          	addi	s0,zero,1
	  if (__value < __b2) return __n + 1;
   1aea4:	0014041b          	addiw	s0,s0,1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1aea8:	01090793          	addi	a5,s2,16
	: allocator_type(__a), _M_p(__dat) { }
   1aeac:	00f93023          	sd	a5,0(s2)
    const auto __len = __detail::__to_chars_len(__uval);
    string __str(__neg + __len, '-');
   1aeb0:	008985bb          	addw	a1,s3,s0
      { _M_construct(__n, __c); }
   1aeb4:	02d00613          	addi	a2,zero,45
   1aeb8:	02059593          	slli	a1,a1,0x20
   1aebc:	0205d593          	srli	a1,a1,0x20
   1aec0:	00090513          	addi	a0,s2,0
   1aec4:	e4cfb0ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
	return _M_data()[__pos];
   1aec8:	00093583          	ld	a1,0(s2)
   1aecc:	013585b3          	add	a1,a1,s3
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
      while (__val >= 100)
   1aed0:	06300793          	addi	a5,zero,99
   1aed4:	0a97fa63          	bgeu	a5,s1,1af88 <std::__cxx11::to_string(int)+0x184>
      unsigned __pos = __len - 1;
   1aed8:	fff4071b          	addiw	a4,s0,-1
   1aedc:	0380006f          	jal	zero,1af14 <std::__cxx11::to_string(int)+0x110>
      unsigned __n = 1;
   1aee0:	00100413          	addi	s0,zero,1
	  if (__value < __b3) return __n + 2;
   1aee4:	0024041b          	addiw	s0,s0,2
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1aee8:	01090793          	addi	a5,s2,16
	: allocator_type(__a), _M_p(__dat) { }
   1aeec:	00f93023          	sd	a5,0(s2)
    string __str(__neg + __len, '-');
   1aef0:	008985bb          	addw	a1,s3,s0
      { _M_construct(__n, __c); }
   1aef4:	02d00613          	addi	a2,zero,45
   1aef8:	02059593          	slli	a1,a1,0x20
   1aefc:	0205d593          	srli	a1,a1,0x20
   1af00:	00090513          	addi	a0,s2,0
   1af04:	e0cfb0ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
	return _M_data()[__pos];
   1af08:	00093583          	ld	a1,0(s2)
   1af0c:	013585b3          	add	a1,a1,s3
      unsigned __pos = __len - 1;
   1af10:	fff4071b          	addiw	a4,s0,-1
	{
	  auto const __num = (__val % 100) * 2;
   1af14:	06400813          	addi	a6,zero,100
	  __val /= 100;
	  __first[__pos] = __digits[__num + 1];
   1af18:	00027517          	auipc	a0,0x27
   1af1c:	44053503          	ld	a0,1088(a0) # 42358 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb7a0>
      while (__val >= 100)
   1af20:	00002337          	lui	t1,0x2
   1af24:	70f30313          	addi	t1,t1,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   1af28:	0304f7bb          	remuw	a5,s1,a6
   1af2c:	0017979b          	slliw	a5,a5,0x1
   1af30:	0004889b          	addiw	a7,s1,0
	  __val /= 100;
   1af34:	0304d4bb          	divuw	s1,s1,a6
	  __first[__pos] = __digits[__num + 1];
   1af38:	02071613          	slli	a2,a4,0x20
   1af3c:	02065613          	srli	a2,a2,0x20
   1af40:	00c58633          	add	a2,a1,a2
   1af44:	0017869b          	addiw	a3,a5,1
   1af48:	02069693          	slli	a3,a3,0x20
   1af4c:	0206d693          	srli	a3,a3,0x20
   1af50:	00d506b3          	add	a3,a0,a3
   1af54:	0006c683          	lbu	a3,0(a3)
   1af58:	00d60023          	sb	a3,0(a2)
	  __first[__pos - 1] = __digits[__num];
   1af5c:	fff7069b          	addiw	a3,a4,-1
   1af60:	02069693          	slli	a3,a3,0x20
   1af64:	0206d693          	srli	a3,a3,0x20
   1af68:	00d586b3          	add	a3,a1,a3
   1af6c:	02079793          	slli	a5,a5,0x20
   1af70:	0207d793          	srli	a5,a5,0x20
   1af74:	00f507b3          	add	a5,a0,a5
   1af78:	0007c783          	lbu	a5,0(a5)
   1af7c:	00f68023          	sb	a5,0(a3)
	  __pos -= 2;
   1af80:	ffe7071b          	addiw	a4,a4,-2
      while (__val >= 100)
   1af84:	fb1362e3          	bltu	t1,a7,1af28 <std::__cxx11::to_string(int)+0x124>
	}
      if (__val >= 10)
   1af88:	00900793          	addi	a5,zero,9
   1af8c:	0697f663          	bgeu	a5,s1,1aff8 <std::__cxx11::to_string(int)+0x1f4>
	{
	  auto const __num = __val * 2;
   1af90:	0014949b          	slliw	s1,s1,0x1
	  __first[1] = __digits[__num + 1];
   1af94:	00027717          	auipc	a4,0x27
   1af98:	3c473703          	ld	a4,964(a4) # 42358 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb7a0>
   1af9c:	0014879b          	addiw	a5,s1,1
   1afa0:	02079793          	slli	a5,a5,0x20
   1afa4:	0207d793          	srli	a5,a5,0x20
   1afa8:	00f707b3          	add	a5,a4,a5
   1afac:	0007c783          	lbu	a5,0(a5)
   1afb0:	00f580a3          	sb	a5,1(a1)
	  __first[0] = __digits[__num];
   1afb4:	02049493          	slli	s1,s1,0x20
   1afb8:	0204d493          	srli	s1,s1,0x20
   1afbc:	00970733          	add	a4,a4,s1
   1afc0:	00074483          	lbu	s1,0(a4)
   1afc4:	00958023          	sb	s1,0(a1)
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
    return __str;
  }
   1afc8:	00090513          	addi	a0,s2,0
   1afcc:	02813083          	ld	ra,40(sp)
   1afd0:	02013403          	ld	s0,32(sp)
   1afd4:	01813483          	ld	s1,24(sp)
   1afd8:	01013903          	ld	s2,16(sp)
   1afdc:	00813983          	ld	s3,8(sp)
   1afe0:	03010113          	addi	sp,sp,48
   1afe4:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   1afe8:	00100413          	addi	s0,zero,1
   1afec:	ea5ff06f          	jal	zero,1ae90 <std::__cxx11::to_string(int)+0x8c>
   1aff0:	00100413          	addi	s0,zero,1
   1aff4:	eb5ff06f          	jal	zero,1aea8 <std::__cxx11::to_string(int)+0xa4>
	}
      else
	__first[0] = '0' + __val;
   1aff8:	0304849b          	addiw	s1,s1,48
   1affc:	0ff4f493          	andi	s1,s1,255
   1b000:	fc5ff06f          	jal	zero,1afc4 <std::__cxx11::to_string(int)+0x1c0>

000000000001b004 <dwarf::type_unit::~type_unit()>:
class type_unit : public unit {
   1b004:	ff010113          	addi	sp,sp,-16
   1b008:	00113423          	sd	ra,8(sp)
   1b00c:	00027797          	auipc	a5,0x27
   1b010:	3447b783          	ld	a5,836(a5) # 42350 <vtable for dwarf::type_unit@@Base+0x9f8>
   1b014:	01078793          	addi	a5,a5,16
   1b018:	00f53023          	sd	a5,0(a0)
   1b01c:	c1cfc0ef          	jal	ra,17438 <dwarf::unit::~unit()>
   1b020:	00813083          	ld	ra,8(sp)
   1b024:	01010113          	addi	sp,sp,16
   1b028:	00008067          	jalr	zero,0(ra)

000000000001b02c <dwarf::type_unit::~type_unit()>:
   1b02c:	ff010113          	addi	sp,sp,-16
   1b030:	00113423          	sd	ra,8(sp)
   1b034:	00813023          	sd	s0,0(sp)
   1b038:	00050413          	addi	s0,a0,0
   1b03c:	00027797          	auipc	a5,0x27
   1b040:	3147b783          	ld	a5,788(a5) # 42350 <vtable for dwarf::type_unit@@Base+0x9f8>
   1b044:	01078793          	addi	a5,a5,16
   1b048:	00f53023          	sd	a5,0(a0)
   1b04c:	becfc0ef          	jal	ra,17438 <dwarf::unit::~unit()>
   1b050:	00040513          	addi	a0,s0,0
   1b054:	c5cfb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1b058:	00813083          	ld	ra,8(sp)
   1b05c:	00013403          	ld	s0,0(sp)
   1b060:	01010113          	addi	sp,sp,16
   1b064:	00008067          	jalr	zero,0(ra)

000000000001b068 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)>:
    }

  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
   1b068:	fd010113          	addi	sp,sp,-48
   1b06c:	02113423          	sd	ra,40(sp)
   1b070:	02813023          	sd	s0,32(sp)
   1b074:	00913c23          	sd	s1,24(sp)
   1b078:	01213823          	sd	s2,16(sp)
   1b07c:	01313423          	sd	s3,8(sp)
   1b080:	01413023          	sd	s4,0(sp)
   1b084:	00050493          	addi	s1,a0,0
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (std::__addressof(__x) != this)
   1b088:	0aa58a63          	beq	a1,a0,1b13c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xd4>
   1b08c:	00058913          	addi	s2,a1,0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1b090:	0085ba03          	ld	s4,8(a1)
   1b094:	0005b403          	ld	s0,0(a1)
   1b098:	408a09b3          	sub	s3,s4,s0
			 - this->_M_impl._M_start); }
   1b09c:	00053503          	ld	a0,0(a0)
   1b0a0:	0104b783          	ld	a5,16(s1)
   1b0a4:	40a787b3          	sub	a5,a5,a0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   1b0a8:	0337e263          	bltu	a5,s3,1b0cc <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x64>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1b0ac:	0084b603          	ld	a2,8(s1)
   1b0b0:	40a60633          	sub	a2,a2,a0
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __tmp;
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
	    }
	  else if (size() >= __xlen)
   1b0b4:	0d366063          	bltu	a2,s3,1b174 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x10c>
					       is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::value, "type must be assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   1b0b8:	068a0c63          	beq	s4,s0,1b130 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xc8>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   1b0bc:	00098613          	addi	a2,s3,0
   1b0c0:	00040593          	addi	a1,s0,0
   1b0c4:	e5cfb0ef          	jal	ra,16720 <memmove@plt>
   1b0c8:	0680006f          	jal	zero,1b130 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xc8>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1b0cc:	0a098063          	beq	s3,zero,1b16c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x104>
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1b0d0:	ff100793          	addi	a5,zero,-15
   1b0d4:	0017d793          	srli	a5,a5,0x1
   1b0d8:	0937e463          	bltu	a5,s3,1b160 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xf8>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1b0dc:	00098513          	addi	a0,s3,0
   1b0e0:	be0fb0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1b0e4:	00050913          	addi	s2,a0,0
		     _ForwardIterator __result)
    {
      _ForwardIterator __cur = __result;
      __try
	{
	  for (; __first != __last; ++__first, (void)++__cur)
   1b0e8:	028a0863          	beq	s4,s0,1b118 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xb0>
   1b0ec:	00040593          	addi	a1,s0,0
      _ForwardIterator __cur = __result;
   1b0f0:	00090793          	addi	a5,s2,0
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1b0f4:	0005a703          	lw	a4,0(a1)
   1b0f8:	00e7a023          	sw	a4,0(a5)
   1b0fc:	0045a703          	lw	a4,4(a1)
   1b100:	00e7a223          	sw	a4,4(a5)
   1b104:	0085a703          	lw	a4,8(a1)
   1b108:	00e7a423          	sw	a4,8(a5)
	  for (; __first != __last; ++__first, (void)++__cur)
   1b10c:	00c78793          	addi	a5,a5,12
   1b110:	00c58593          	addi	a1,a1,12
   1b114:	feba10e3          	bne	s4,a1,1b0f4 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x8c>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1b118:	0004b503          	ld	a0,0(s1)
	if (__p)
   1b11c:	00050463          	beq	a0,zero,1b124 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xbc>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1b120:	b90fb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	      this->_M_impl._M_start = __tmp;
   1b124:	0124b023          	sd	s2,0(s1)
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   1b128:	01390933          	add	s2,s2,s3
   1b12c:	0124b823          	sd	s2,16(s1)
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   1b130:	0004b783          	ld	a5,0(s1)
   1b134:	013787b3          	add	a5,a5,s3
   1b138:	00f4b423          	sd	a5,8(s1)
	}
      return *this;
    }
   1b13c:	00048513          	addi	a0,s1,0
   1b140:	02813083          	ld	ra,40(sp)
   1b144:	02013403          	ld	s0,32(sp)
   1b148:	01813483          	ld	s1,24(sp)
   1b14c:	01013903          	ld	s2,16(sp)
   1b150:	00813983          	ld	s3,8(sp)
   1b154:	00013a03          	ld	s4,0(sp)
   1b158:	03010113          	addi	sp,sp,48
   1b15c:	00008067          	jalr	zero,0(ra)
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1b160:	0009d463          	bge	s3,zero,1b168 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x100>
	      std::__throw_bad_array_new_length();
   1b164:	b2cfb0ef          	jal	ra,16490 <std::__throw_bad_array_new_length()@plt>
	    std::__throw_bad_alloc();
   1b168:	a28fb0ef          	jal	ra,16390 <std::__throw_bad_alloc()@plt>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1b16c:	00000913          	addi	s2,zero,0
   1b170:	f79ff06f          	jal	zero,1b0e8 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x80>
	  if (_Num)
   1b174:	00060663          	beq	a2,zero,1b180 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x118>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   1b178:	00040593          	addi	a1,s0,0
   1b17c:	da4fb0ef          	jal	ra,16720 <memmove@plt>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1b180:	0084b703          	ld	a4,8(s1)
   1b184:	0004b683          	ld	a3,0(s1)
   1b188:	40d706b3          	sub	a3,a4,a3
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   1b18c:	00093783          	ld	a5,0(s2)
   1b190:	00d787b3          	add	a5,a5,a3
					  __x._M_impl._M_finish,
   1b194:	00893603          	ld	a2,8(s2)
   1b198:	f8c78ce3          	beq	a5,a2,1b130 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xc8>
   1b19c:	0007a683          	lw	a3,0(a5)
   1b1a0:	00d72023          	sw	a3,0(a4)
   1b1a4:	0047a683          	lw	a3,4(a5)
   1b1a8:	00d72223          	sw	a3,4(a4)
   1b1ac:	0087a683          	lw	a3,8(a5)
   1b1b0:	00d72423          	sw	a3,8(a4)
   1b1b4:	00c78793          	addi	a5,a5,12
   1b1b8:	00c70713          	addi	a4,a4,12
   1b1bc:	fef610e3          	bne	a2,a5,1b19c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x134>
   1b1c0:	f71ff06f          	jal	zero,1b130 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xc8>

000000000001b1c4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)>:
      while (__x != 0)
   1b1c4:	12058063          	beq	a1,zero,1b2e4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x120>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1b1c8:	fc010113          	addi	sp,sp,-64
   1b1cc:	02113c23          	sd	ra,56(sp)
   1b1d0:	02813823          	sd	s0,48(sp)
   1b1d4:	02913423          	sd	s1,40(sp)
   1b1d8:	03213023          	sd	s2,32(sp)
   1b1dc:	01313c23          	sd	s3,24(sp)
   1b1e0:	01413823          	sd	s4,16(sp)
   1b1e4:	01513423          	sd	s5,8(sp)
   1b1e8:	01613023          	sd	s6,0(sp)
   1b1ec:	00050a93          	addi	s5,a0,0
   1b1f0:	00058413          	addi	s0,a1,0
	  _M_erase(_S_right(__x));
   1b1f4:	00027b17          	auipc	s6,0x27
   1b1f8:	1b4b3b03          	ld	s6,436(s6) # 423a8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)@@Base+0x271e4>
    return ::__libc_single_threaded;
   1b1fc:	00027917          	auipc	s2,0x27
   1b200:	27c93903          	ld	s2,636(s2) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b204:	00100493          	addi	s1,zero,1
   1b208:	0280006f          	jal	zero,1b230 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x6c>
    if (__is_single_threaded())
   1b20c:	00094783          	lbu	a5,0(s2)
   1b210:	04078063          	beq	a5,zero,1b250 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x8c>
    _Atomic_word __result = *__mem;
   1b214:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   1b218:	fff5079b          	addiw	a5,a0,-1
   1b21c:	02f9a823          	sw	a5,48(s3)
   1b220:	04950063          	beq	a0,s1,1b260 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x9c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1b224:	000a0513          	addi	a0,s4,0
   1b228:	a88fb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      while (__x != 0)
   1b22c:	08040863          	beq	s0,zero,1b2bc <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0xf8>
	  _M_erase(_S_right(__x));
   1b230:	01843583          	ld	a1,24(s0)
   1b234:	000a8513          	addi	a0,s5,0
   1b238:	000b00e7          	jalr	ra,0(s6)
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1b23c:	00040a13          	addi	s4,s0,0
      { return static_cast<_Link_type>(__x->_M_left); }
   1b240:	01043403          	ld	s0,16(s0)
	if (_M_pi != nullptr)
   1b244:	030a3983          	ld	s3,48(s4)
   1b248:	fc0992e3          	bne	s3,zero,1b20c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x48>
   1b24c:	fd9ff06f          	jal	zero,1b224 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x60>
      return __exchange_and_add(__mem, __val);
   1b250:	fff00593          	addi	a1,zero,-1
   1b254:	03098513          	addi	a0,s3,48
   1b258:	8d8fb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b25c:	fc5ff06f          	jal	zero,1b220 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x5c>
	_M_dispose();
   1b260:	0009b783          	ld	a5,0(s3)
   1b264:	0107b783          	ld	a5,16(a5)
   1b268:	00098513          	addi	a0,s3,0
   1b26c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b270:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b274:	00027797          	auipc	a5,0x27
   1b278:	2047b783          	ld	a5,516(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b27c:	0007c783          	lbu	a5,0(a5)
   1b280:	02078663          	beq	a5,zero,1b2ac <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0xe8>
    _Atomic_word __result = *__mem;
   1b284:	0349a503          	lw	a0,52(s3)
    *__mem += __val;
   1b288:	fff5079b          	addiw	a5,a0,-1
   1b28c:	02f9aa23          	sw	a5,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b290:	00100793          	addi	a5,zero,1
   1b294:	f8f518e3          	bne	a0,a5,1b224 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x60>
	    _M_destroy();
   1b298:	0009b783          	ld	a5,0(s3)
   1b29c:	0187b783          	ld	a5,24(a5)
   1b2a0:	00098513          	addi	a0,s3,0
   1b2a4:	000780e7          	jalr	ra,0(a5)
   1b2a8:	f7dff06f          	jal	zero,1b224 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x60>
      return __exchange_and_add(__mem, __val);
   1b2ac:	fff00593          	addi	a1,zero,-1
   1b2b0:	03498513          	addi	a0,s3,52
   1b2b4:	87cfb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b2b8:	fd9ff06f          	jal	zero,1b290 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0xcc>
    }
   1b2bc:	03813083          	ld	ra,56(sp)
   1b2c0:	03013403          	ld	s0,48(sp)
   1b2c4:	02813483          	ld	s1,40(sp)
   1b2c8:	02013903          	ld	s2,32(sp)
   1b2cc:	01813983          	ld	s3,24(sp)
   1b2d0:	01013a03          	ld	s4,16(sp)
   1b2d4:	00813a83          	ld	s5,8(sp)
   1b2d8:	00013b03          	ld	s6,0(sp)
   1b2dc:	04010113          	addi	sp,sp,64
   1b2e0:	00008067          	jalr	zero,0(ra)
   1b2e4:	00008067          	jalr	zero,0(ra)

000000000001b2e8 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   1b2e8:	fd010113          	addi	sp,sp,-48
   1b2ec:	02113423          	sd	ra,40(sp)
   1b2f0:	02813023          	sd	s0,32(sp)
   1b2f4:	00913c23          	sd	s1,24(sp)
   1b2f8:	01213823          	sd	s2,16(sp)
   1b2fc:	01313423          	sd	s3,8(sp)
   1b300:	00050913          	addi	s2,a0,0
      { _M_erase(_M_begin()); }
   1b304:	0d053583          	ld	a1,208(a0)
   1b308:	0c050513          	addi	a0,a0,192
   1b30c:	00027317          	auipc	t1,0x27
   1b310:	09c33303          	ld	t1,156(t1) # 423a8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)@@Base+0x271e4>
   1b314:	000300e7          	jalr	ra,0(t1)
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1b318:	09093403          	ld	s0,144(s2)

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
    {
      while (__n)
   1b31c:	02040863          	beq	s0,zero,1b34c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x64>
   1b320:	00027997          	auipc	s3,0x27
   1b324:	0309b983          	ld	s3,48(s3) # 42350 <vtable for dwarf::type_unit@@Base+0x9f8>
   1b328:	01098993          	addi	s3,s3,16
      _M_next() const noexcept
   1b32c:	00040493          	addi	s1,s0,0
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1b330:	00043403          	ld	s0,0(s0)
   1b334:	0134b823          	sd	s3,16(s1)
   1b338:	01048513          	addi	a0,s1,16
   1b33c:	8fcfc0ef          	jal	ra,17438 <dwarf::unit::~unit()>
   1b340:	00048513          	addi	a0,s1,0
   1b344:	96cfb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      while (__n)
   1b348:	fe0412e3          	bne	s0,zero,1b32c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x44>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
      __builtin_memset(_M_buckets, 0,
   1b34c:	08893603          	ld	a2,136(s2)
   1b350:	00361613          	slli	a2,a2,0x3
   1b354:	00000593          	addi	a1,zero,0
   1b358:	08093503          	ld	a0,128(s2)
   1b35c:	a24fb0ef          	jal	ra,16580 <memset@plt>
		       _M_bucket_count * sizeof(__node_base_ptr));
      _M_element_count = 0;
   1b360:	08093c23          	sd	zero,152(s2)
      _M_before_begin._M_nxt = nullptr;
   1b364:	08093823          	sd	zero,144(s2)
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   1b368:	08093503          	ld	a0,128(s2)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   1b36c:	0b090793          	addi	a5,s2,176
	if (_M_uses_single_bucket(__bkts))
   1b370:	00f50463          	beq	a0,a5,1b378 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x90>
   1b374:	93cfb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1b378:	06893403          	ld	s0,104(s2)
   1b37c:	07093483          	ld	s1,112(s2)
	  for (; __first != __last; ++__first)
   1b380:	00940e63          	beq	s0,s1,1b39c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
      __pointer->~_Tp();
   1b384:	00043783          	ld	a5,0(s0)
   1b388:	0007b783          	ld	a5,0(a5)
   1b38c:	00040513          	addi	a0,s0,0
   1b390:	000780e7          	jalr	ra,0(a5)
	  for (; __first != __last; ++__first)
   1b394:	01840413          	addi	s0,s0,24
   1b398:	fe8496e3          	bne	s1,s0,1b384 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x9c>
	_M_deallocate(_M_impl._M_start,
   1b39c:	06893503          	ld	a0,104(s2)
	if (__p)
   1b3a0:	00050463          	beq	a0,zero,1b3a8 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xc0>
   1b3a4:	90cfb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   1b3a8:	06093403          	ld	s0,96(s2)
   1b3ac:	02040463          	beq	s0,zero,1b3d4 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xec>
    if (__is_single_threaded())
   1b3b0:	00027797          	auipc	a5,0x27
   1b3b4:	0c87b783          	ld	a5,200(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b3b8:	0007c783          	lbu	a5,0(a5)
   1b3bc:	08078663          	beq	a5,zero,1b448 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x160>
    _Atomic_word __result = *__mem;
   1b3c0:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1b3c4:	fff5079b          	addiw	a5,a0,-1
   1b3c8:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b3cc:	00100793          	addi	a5,zero,1
   1b3d0:	08f50463          	beq	a0,a5,1b458 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x170>
	if (_M_pi != nullptr)
   1b3d4:	05093403          	ld	s0,80(s2)
   1b3d8:	02040463          	beq	s0,zero,1b400 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x118>
    if (__is_single_threaded())
   1b3dc:	00027797          	auipc	a5,0x27
   1b3e0:	09c7b783          	ld	a5,156(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b3e4:	0007c783          	lbu	a5,0(a5)
   1b3e8:	0c078663          	beq	a5,zero,1b4b4 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1cc>
    _Atomic_word __result = *__mem;
   1b3ec:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1b3f0:	fff5079b          	addiw	a5,a0,-1
   1b3f4:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b3f8:	00100793          	addi	a5,zero,1
   1b3fc:	0cf50463          	beq	a0,a5,1b4c4 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1dc>
	if (_M_pi != nullptr)
   1b400:	04093403          	ld	s0,64(s2)
   1b404:	02040463          	beq	s0,zero,1b42c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x144>
    if (__is_single_threaded())
   1b408:	00027797          	auipc	a5,0x27
   1b40c:	0707b783          	ld	a5,112(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b410:	0007c783          	lbu	a5,0(a5)
   1b414:	10078663          	beq	a5,zero,1b520 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x238>
    _Atomic_word __result = *__mem;
   1b418:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1b41c:	fff5079b          	addiw	a5,a0,-1
   1b420:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b424:	00100793          	addi	a5,zero,1
   1b428:	10f50463          	beq	a0,a5,1b530 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x248>
      }
   1b42c:	02813083          	ld	ra,40(sp)
   1b430:	02013403          	ld	s0,32(sp)
   1b434:	01813483          	ld	s1,24(sp)
   1b438:	01013903          	ld	s2,16(sp)
   1b43c:	00813983          	ld	s3,8(sp)
   1b440:	03010113          	addi	sp,sp,48
   1b444:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   1b448:	fff00593          	addi	a1,zero,-1
   1b44c:	03040513          	addi	a0,s0,48
   1b450:	ee1fa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b454:	f79ff06f          	jal	zero,1b3cc <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xe4>
	_M_dispose();
   1b458:	00043783          	ld	a5,0(s0)
   1b45c:	0107b783          	ld	a5,16(a5)
   1b460:	00040513          	addi	a0,s0,0
   1b464:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b468:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b46c:	00027797          	auipc	a5,0x27
   1b470:	00c7b783          	ld	a5,12(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b474:	0007c783          	lbu	a5,0(a5)
   1b478:	02078663          	beq	a5,zero,1b4a4 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1bc>
    _Atomic_word __result = *__mem;
   1b47c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1b480:	fff5079b          	addiw	a5,a0,-1
   1b484:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b488:	00100793          	addi	a5,zero,1
   1b48c:	f4f514e3          	bne	a0,a5,1b3d4 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xec>
	    _M_destroy();
   1b490:	00043783          	ld	a5,0(s0)
   1b494:	0187b783          	ld	a5,24(a5)
   1b498:	00040513          	addi	a0,s0,0
   1b49c:	000780e7          	jalr	ra,0(a5)
   1b4a0:	f35ff06f          	jal	zero,1b3d4 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xec>
      return __exchange_and_add(__mem, __val);
   1b4a4:	fff00593          	addi	a1,zero,-1
   1b4a8:	03440513          	addi	a0,s0,52
   1b4ac:	e85fa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b4b0:	fd9ff06f          	jal	zero,1b488 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1a0>
   1b4b4:	fff00593          	addi	a1,zero,-1
   1b4b8:	03040513          	addi	a0,s0,48
   1b4bc:	e75fa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b4c0:	f39ff06f          	jal	zero,1b3f8 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x110>
	_M_dispose();
   1b4c4:	00043783          	ld	a5,0(s0)
   1b4c8:	0107b783          	ld	a5,16(a5)
   1b4cc:	00040513          	addi	a0,s0,0
   1b4d0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b4d4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b4d8:	00027797          	auipc	a5,0x27
   1b4dc:	fa07b783          	ld	a5,-96(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b4e0:	0007c783          	lbu	a5,0(a5)
   1b4e4:	02078663          	beq	a5,zero,1b510 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x228>
    _Atomic_word __result = *__mem;
   1b4e8:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1b4ec:	fff5079b          	addiw	a5,a0,-1
   1b4f0:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b4f4:	00100793          	addi	a5,zero,1
   1b4f8:	f0f514e3          	bne	a0,a5,1b400 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x118>
	    _M_destroy();
   1b4fc:	00043783          	ld	a5,0(s0)
   1b500:	0187b783          	ld	a5,24(a5)
   1b504:	00040513          	addi	a0,s0,0
   1b508:	000780e7          	jalr	ra,0(a5)
   1b50c:	ef5ff06f          	jal	zero,1b400 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x118>
      return __exchange_and_add(__mem, __val);
   1b510:	fff00593          	addi	a1,zero,-1
   1b514:	03440513          	addi	a0,s0,52
   1b518:	e19fa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b51c:	fd9ff06f          	jal	zero,1b4f4 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x20c>
   1b520:	fff00593          	addi	a1,zero,-1
   1b524:	03040513          	addi	a0,s0,48
   1b528:	e09fa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b52c:	ef9ff06f          	jal	zero,1b424 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x13c>
	_M_dispose();
   1b530:	00043783          	ld	a5,0(s0)
   1b534:	0107b783          	ld	a5,16(a5)
   1b538:	00040513          	addi	a0,s0,0
   1b53c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b540:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b544:	00027797          	auipc	a5,0x27
   1b548:	f347b783          	ld	a5,-204(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b54c:	0007c783          	lbu	a5,0(a5)
   1b550:	02078663          	beq	a5,zero,1b57c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x294>
    _Atomic_word __result = *__mem;
   1b554:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1b558:	fff5079b          	addiw	a5,a0,-1
   1b55c:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b560:	00100793          	addi	a5,zero,1
   1b564:	ecf514e3          	bne	a0,a5,1b42c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x144>
	    _M_destroy();
   1b568:	00043783          	ld	a5,0(s0)
   1b56c:	0187b783          	ld	a5,24(a5)
   1b570:	00040513          	addi	a0,s0,0
   1b574:	000780e7          	jalr	ra,0(a5)
      }
   1b578:	eb5ff06f          	jal	zero,1b42c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x144>
      return __exchange_and_add(__mem, __val);
   1b57c:	fff00593          	addi	a1,zero,-1
   1b580:	03440513          	addi	a0,s0,52
   1b584:	dadfa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b588:	fd9ff06f          	jal	zero,1b560 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x278>

000000000001b58c <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>:
      basic_string<_CharT, _Traits, _Alloc>::
   1b58c:	fd010113          	addi	sp,sp,-48
   1b590:	02113423          	sd	ra,40(sp)
   1b594:	02813023          	sd	s0,32(sp)
   1b598:	00913c23          	sd	s1,24(sp)
   1b59c:	01213823          	sd	s2,16(sp)
   1b5a0:	00050413          	addi	s0,a0,0
   1b5a4:	00058913          	addi	s2,a1,0
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   1b5a8:	40b604b3          	sub	s1,a2,a1
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   1b5ac:	00913423          	sd	s1,8(sp)
	if (__dnew > size_type(_S_local_capacity))
   1b5b0:	00f00793          	addi	a5,zero,15
   1b5b4:	0497e263          	bltu	a5,s1,1b5f8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x6c>
      { return _M_dataplus._M_p; }
   1b5b8:	00053503          	ld	a0,0(a0)
	if (__n == 1)
   1b5bc:	00100793          	addi	a5,zero,1
   1b5c0:	06f49063          	bne	s1,a5,1b620 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x94>
	__c1 = __c2;
   1b5c4:	0005c783          	lbu	a5,0(a1)
   1b5c8:	00f50023          	sb	a5,0(a0)
	_M_set_length(__dnew);
   1b5cc:	00813703          	ld	a4,8(sp)
      { _M_string_length = __length; }
   1b5d0:	00e43423          	sd	a4,8(s0)
   1b5d4:	00043783          	ld	a5,0(s0)
   1b5d8:	00e787b3          	add	a5,a5,a4
   1b5dc:	00078023          	sb	zero,0(a5)
      }
   1b5e0:	02813083          	ld	ra,40(sp)
   1b5e4:	02013403          	ld	s0,32(sp)
   1b5e8:	01813483          	ld	s1,24(sp)
   1b5ec:	01013903          	ld	s2,16(sp)
   1b5f0:	03010113          	addi	sp,sp,48
   1b5f4:	00008067          	jalr	zero,0(ra)
	    _M_data(_M_create(__dnew, size_type(0)));
   1b5f8:	00000613          	addi	a2,zero,0
   1b5fc:	00810593          	addi	a1,sp,8
   1b600:	8b0fb0ef          	jal	ra,166b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
   1b604:	00a43023          	sd	a0,0(s0)
      { _M_allocated_capacity = __capacity; }
   1b608:	00813783          	ld	a5,8(sp)
   1b60c:	00f43823          	sd	a5,16(s0)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1b610:	00048613          	addi	a2,s1,0
   1b614:	00090593          	addi	a1,s2,0
   1b618:	f39fa0ef          	jal	ra,16550 <memcpy@plt>
   1b61c:	fb1ff06f          	jal	zero,1b5cc <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x40>
	if (__n == 0)
   1b620:	fa0486e3          	beq	s1,zero,1b5cc <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x40>
   1b624:	fedff06f          	jal	zero,1b610 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x84>

000000000001b628 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)>:
#define _ELFPP_TO_HEX_HH_

#include <string>
#include <type_traits>

template <typename T> std::string to_hex(T v) {
   1b628:	fc010113          	addi	sp,sp,-64
   1b62c:	02113c23          	sd	ra,56(sp)
   1b630:	02813823          	sd	s0,48(sp)
   1b634:	02913423          	sd	s1,40(sp)
   1b638:	00050493          	addi	s1,a0,0
  static_assert(std::is_integral<T>::value,
                "to_hex applied to non-integral type");
  if (v == 0)
   1b63c:	00058c63          	beq	a1,zero,1b654 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x2c>
    return std::string("0");
  char buf[sizeof(T) * 2 + 1];
  char *pos = &buf[sizeof(buf) - 1];
  *pos-- = '\0';
   1b640:	00010c23          	sb	zero,24(sp)
   1b644:	01710413          	addi	s0,sp,23
  while (v && pos >= buf) {
    int digit = v & 0xf;
    if (digit < 10)
   1b648:	00900693          	addi	a3,zero,9
  while (v && pos >= buf) {
   1b64c:	00710613          	addi	a2,sp,7
   1b650:	0480006f          	jal	zero,1b698 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x70>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1b654:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   1b658:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   1b65c:	00000693          	addi	a3,zero,0
   1b660:	0001d617          	auipc	a2,0x1d
   1b664:	26960613          	addi	a2,a2,617 # 388c9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   1b668:	0001d597          	auipc	a1,0x1d
   1b66c:	26058593          	addi	a1,a1,608 # 388c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe8>
   1b670:	00027317          	auipc	t1,0x27
   1b674:	c9033303          	ld	t1,-880(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   1b678:	000300e7          	jalr	ra,0(t1)
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1b67c:	05c0006f          	jal	zero,1b6d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0xb0>
   1b680:	00e40023          	sb	a4,0(s0)
      *pos = '0' + digit;
    else
      *pos = 'a' + (digit - 10);
    pos--;
   1b684:	fff40793          	addi	a5,s0,-1
    v >>= 4;
   1b688:	0045d593          	srli	a1,a1,0x4
  while (v && pos >= buf) {
   1b68c:	02058063          	beq	a1,zero,1b6ac <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x84>
   1b690:	00c78e63          	beq	a5,a2,1b6ac <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x84>
    pos--;
   1b694:	00078413          	addi	s0,a5,0
    int digit = v & 0xf;
   1b698:	00f5f793          	andi	a5,a1,15
      *pos = 'a' + (digit - 10);
   1b69c:	05778713          	addi	a4,a5,87
    if (digit < 10)
   1b6a0:	fef6c0e3          	blt	a3,a5,1b680 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x58>
      *pos = '0' + digit;
   1b6a4:	03078713          	addi	a4,a5,48
   1b6a8:	fd9ff06f          	jal	zero,1b680 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x58>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1b6ac:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   1b6b0:	00f4b023          	sd	a5,0(s1)
	return __builtin_strlen(__s);
   1b6b4:	00040513          	addi	a0,s0,0
   1b6b8:	d09fa0ef          	jal	ra,163c0 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   1b6bc:	00000693          	addi	a3,zero,0
   1b6c0:	00a40633          	add	a2,s0,a0
   1b6c4:	00040593          	addi	a1,s0,0
   1b6c8:	00048513          	addi	a0,s1,0
   1b6cc:	00027317          	auipc	t1,0x27
   1b6d0:	c3433303          	ld	t1,-972(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   1b6d4:	000300e7          	jalr	ra,0(t1)
  }
  return std::string(pos + 1);
}
   1b6d8:	00048513          	addi	a0,s1,0
   1b6dc:	03813083          	ld	ra,56(sp)
   1b6e0:	03013403          	ld	s0,48(sp)
   1b6e4:	02813483          	ld	s1,40(sp)
   1b6e8:	04010113          	addi	sp,sp,64
   1b6ec:	00008067          	jalr	zero,0(ra)

000000000001b6f0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1b6f0:	fe010113          	addi	sp,sp,-32
   1b6f4:	00113c23          	sd	ra,24(sp)
   1b6f8:	00813823          	sd	s0,16(sp)
   1b6fc:	00913423          	sd	s1,8(sp)
   1b700:	01213023          	sd	s2,0(sp)
   1b704:	00050913          	addi	s2,a0,0
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1b708:	01053403          	ld	s0,16(a0)
   1b70c:	04041263          	bne	s0,zero,1b750 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x60>
      __builtin_memset(_M_buckets, 0,
   1b710:	00893603          	ld	a2,8(s2)
   1b714:	00361613          	slli	a2,a2,0x3
   1b718:	00000593          	addi	a1,zero,0
   1b71c:	00093503          	ld	a0,0(s2)
   1b720:	e61fa0ef          	jal	ra,16580 <memset@plt>
      _M_element_count = 0;
   1b724:	00093c23          	sd	zero,24(s2)
      _M_before_begin._M_nxt = nullptr;
   1b728:	00093823          	sd	zero,16(s2)
    }
   1b72c:	01813083          	ld	ra,24(sp)
   1b730:	01013403          	ld	s0,16(sp)
   1b734:	00813483          	ld	s1,8(sp)
   1b738:	00013903          	ld	s2,0(sp)
   1b73c:	02010113          	addi	sp,sp,32
   1b740:	00008067          	jalr	zero,0(ra)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1b744:	00048513          	addi	a0,s1,0
   1b748:	d69fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1b74c:	fc0402e3          	beq	s0,zero,1b710 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x20>
      _M_next() const noexcept
   1b750:	00040493          	addi	s1,s0,0
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1b754:	00043403          	ld	s0,0(s0)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1b758:	0204b503          	ld	a0,32(s1)
	if (__p)
   1b75c:	fe0504e3          	beq	a0,zero,1b744 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x54>
   1b760:	d51fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1b764:	fe1ff06f          	jal	zero,1b744 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x54>

000000000001b768 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   1b768:	fd010113          	addi	sp,sp,-48
   1b76c:	02113423          	sd	ra,40(sp)
   1b770:	02813023          	sd	s0,32(sp)
   1b774:	00913c23          	sd	s1,24(sp)
   1b778:	01213823          	sd	s2,16(sp)
   1b77c:	01313423          	sd	s3,8(sp)
   1b780:	00050413          	addi	s0,a0,0
   1b784:	03850993          	addi	s3,a0,56
      clear();
   1b788:	19050513          	addi	a0,a0,400
   1b78c:	00027317          	auipc	t1,0x27
   1b790:	b4433303          	ld	t1,-1212(t1) # 422d0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()@@Base+0x26be0>
   1b794:	000300e7          	jalr	ra,0(t1)
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   1b798:	19043503          	ld	a0,400(s0)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   1b79c:	1c040793          	addi	a5,s0,448
	if (_M_uses_single_bucket(__bkts))
   1b7a0:	00f50463          	beq	a0,a5,1b7a8 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x40>
   1b7a4:	d0dfa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1b7a8:	17843483          	ld	s1,376(s0)
   1b7ac:	18043903          	ld	s2,384(s0)
   1b7b0:	0f249a63          	bne	s1,s2,1b8a4 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x13c>
	_M_deallocate(_M_impl._M_start,
   1b7b4:	17843503          	ld	a0,376(s0)
	if (__p)
   1b7b8:	00050463          	beq	a0,zero,1b7c0 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x58>
   1b7bc:	cf5fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   1b7c0:	16843483          	ld	s1,360(s0)
   1b7c4:	02048463          	beq	s1,zero,1b7ec <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x84>
    if (__is_single_threaded())
   1b7c8:	00027797          	auipc	a5,0x27
   1b7cc:	cb07b783          	ld	a5,-848(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b7d0:	0007c783          	lbu	a5,0(a5)
   1b7d4:	0e078063          	beq	a5,zero,1b8b4 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x14c>
    _Atomic_word __result = *__mem;
   1b7d8:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1b7dc:	fff5079b          	addiw	a5,a0,-1
   1b7e0:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b7e4:	00100793          	addi	a5,zero,1
   1b7e8:	0cf50e63          	beq	a0,a5,1b8c4 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x15c>
class die {
   1b7ec:	11040693          	addi	a3,s0,272
    for (T *p = base; p < end; ++p)
   1b7f0:	14043503          	ld	a0,320(s0)
   1b7f4:	14843783          	ld	a5,328(s0)
   1b7f8:	00f57a63          	bgeu	a0,a5,1b80c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa4>
   1b7fc:	00050793          	addi	a5,a0,0
   1b800:	00878793          	addi	a5,a5,8
   1b804:	14843703          	ld	a4,328(s0)
   1b808:	fee7ece3          	bltu	a5,a4,1b800 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x98>
    end = base;
   1b80c:	14a43423          	sd	a0,328(s0)
    if ((char *)base != buf)
   1b810:	00a68663          	beq	a3,a0,1b81c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
      delete[] (char *)base;
   1b814:	00050463          	beq	a0,zero,1b81c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
   1b818:	d49fa0ef          	jal	ra,16560 <operator delete[](void*)@plt>
   1b81c:	0a040693          	addi	a3,s0,160
    for (T *p = base; p < end; ++p)
   1b820:	0d043503          	ld	a0,208(s0)
   1b824:	0d843783          	ld	a5,216(s0)
   1b828:	00f57a63          	bgeu	a0,a5,1b83c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd4>
   1b82c:	00050793          	addi	a5,a0,0
   1b830:	00878793          	addi	a5,a5,8
   1b834:	0d843703          	ld	a4,216(s0)
   1b838:	fee7ece3          	bltu	a5,a4,1b830 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xc8>
    end = base;
   1b83c:	0ca43c23          	sd	a0,216(s0)
    if ((char *)base != buf)
   1b840:	00a68663          	beq	a3,a0,1b84c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xe4>
      delete[] (char *)base;
   1b844:	00050463          	beq	a0,zero,1b84c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xe4>
   1b848:	d19fa0ef          	jal	ra,16560 <operator delete[](void*)@plt>
	if (_M_pi != nullptr)
   1b84c:	05843403          	ld	s0,88(s0)
   1b850:	02040463          	beq	s0,zero,1b878 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x110>
    if (__is_single_threaded())
   1b854:	00027797          	auipc	a5,0x27
   1b858:	c247b783          	ld	a5,-988(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b85c:	0007c783          	lbu	a5,0(a5)
   1b860:	0c078063          	beq	a5,zero,1b920 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1b8>
    _Atomic_word __result = *__mem;
   1b864:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1b868:	fff5079b          	addiw	a5,a0,-1
   1b86c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b870:	00100793          	addi	a5,zero,1
   1b874:	0af50e63          	beq	a0,a5,1b930 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1c8>
struct unit::impl {
   1b878:	00098513          	addi	a0,s3,0
   1b87c:	a9dfb0ef          	jal	ra,17318 <dwarf::dwarf::~dwarf()>
      }
   1b880:	02813083          	ld	ra,40(sp)
   1b884:	02013403          	ld	s0,32(sp)
   1b888:	01813483          	ld	s1,24(sp)
   1b88c:	01013903          	ld	s2,16(sp)
   1b890:	00813983          	ld	s3,8(sp)
   1b894:	03010113          	addi	sp,sp,48
   1b898:	00008067          	jalr	zero,0(ra)
   1b89c:	02848493          	addi	s1,s1,40
   1b8a0:	f0990ae3          	beq	s2,s1,1b7b4 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x4c>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1b8a4:	0104b503          	ld	a0,16(s1)
	if (__p)
   1b8a8:	fe050ae3          	beq	a0,zero,1b89c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x134>
   1b8ac:	c05fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1b8b0:	fedff06f          	jal	zero,1b89c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x134>
      return __exchange_and_add(__mem, __val);
   1b8b4:	fff00593          	addi	a1,zero,-1
   1b8b8:	03048513          	addi	a0,s1,48
   1b8bc:	a75fa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b8c0:	f25ff06f          	jal	zero,1b7e4 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7c>
	_M_dispose();
   1b8c4:	0004b783          	ld	a5,0(s1)
   1b8c8:	0107b783          	ld	a5,16(a5)
   1b8cc:	00048513          	addi	a0,s1,0
   1b8d0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b8d4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b8d8:	00027797          	auipc	a5,0x27
   1b8dc:	ba07b783          	ld	a5,-1120(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b8e0:	0007c783          	lbu	a5,0(a5)
   1b8e4:	02078663          	beq	a5,zero,1b910 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1a8>
    _Atomic_word __result = *__mem;
   1b8e8:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   1b8ec:	fff5079b          	addiw	a5,a0,-1
   1b8f0:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b8f4:	00100793          	addi	a5,zero,1
   1b8f8:	eef51ae3          	bne	a0,a5,1b7ec <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x84>
	    _M_destroy();
   1b8fc:	0004b783          	ld	a5,0(s1)
   1b900:	0187b783          	ld	a5,24(a5)
   1b904:	00048513          	addi	a0,s1,0
   1b908:	000780e7          	jalr	ra,0(a5)
   1b90c:	ee1ff06f          	jal	zero,1b7ec <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x84>
      return __exchange_and_add(__mem, __val);
   1b910:	fff00593          	addi	a1,zero,-1
   1b914:	03448513          	addi	a0,s1,52
   1b918:	a19fa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b91c:	fd9ff06f          	jal	zero,1b8f4 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x18c>
   1b920:	fff00593          	addi	a1,zero,-1
   1b924:	03040513          	addi	a0,s0,48
   1b928:	a09fa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b92c:	f45ff06f          	jal	zero,1b870 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x108>
	_M_dispose();
   1b930:	00043783          	ld	a5,0(s0)
   1b934:	0107b783          	ld	a5,16(a5)
   1b938:	00040513          	addi	a0,s0,0
   1b93c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b940:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b944:	00027797          	auipc	a5,0x27
   1b948:	b347b783          	ld	a5,-1228(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b94c:	0007c783          	lbu	a5,0(a5)
   1b950:	02078663          	beq	a5,zero,1b97c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x214>
    _Atomic_word __result = *__mem;
   1b954:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1b958:	fff5079b          	addiw	a5,a0,-1
   1b95c:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b960:	00100793          	addi	a5,zero,1
   1b964:	f0f51ae3          	bne	a0,a5,1b878 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x110>
	    _M_destroy();
   1b968:	00043783          	ld	a5,0(s0)
   1b96c:	0187b783          	ld	a5,24(a5)
   1b970:	00040513          	addi	a0,s0,0
   1b974:	000780e7          	jalr	ra,0(a5)
   1b978:	f01ff06f          	jal	zero,1b878 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x110>
      return __exchange_and_add(__mem, __val);
   1b97c:	fff00593          	addi	a1,zero,-1
   1b980:	03440513          	addi	a0,s0,52
   1b984:	9adfa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b988:	fd9ff06f          	jal	zero,1b960 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1f8>

000000000001b98c <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)>:
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
   1b98c:	1c058a63          	beq	a1,zero,1bb60 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x1d4>
    vector<_Tp, _Alloc>::
   1b990:	fc010113          	addi	sp,sp,-64
   1b994:	02113c23          	sd	ra,56(sp)
   1b998:	02813823          	sd	s0,48(sp)
   1b99c:	02913423          	sd	s1,40(sp)
   1b9a0:	03213023          	sd	s2,32(sp)
   1b9a4:	01313c23          	sd	s3,24(sp)
   1b9a8:	01413823          	sd	s4,16(sp)
   1b9ac:	01513423          	sd	s5,8(sp)
   1b9b0:	00050913          	addi	s2,a0,0
   1b9b4:	00058493          	addi	s1,a1,0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1b9b8:	00853683          	ld	a3,8(a0)
   1b9bc:	00053783          	ld	a5,0(a0)
   1b9c0:	40f68433          	sub	s0,a3,a5
   1b9c4:	40345993          	srai	s3,s0,0x3
   1b9c8:	0001b617          	auipc	a2,0x1b
   1b9cc:	2c863603          	ld	a2,712(a2) # 36c90 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd8>
   1b9d0:	02c989b3          	mul	s3,s3,a2
	{
	  const size_type __size = size();
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
					 - this->_M_impl._M_finish);

	  if (__size > max_size() || __navail > max_size() - __size)
   1b9d4:	0001b797          	auipc	a5,0x1b
   1b9d8:	2b47b783          	ld	a5,692(a5) # 36c88 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd0>
   1b9dc:	41378733          	sub	a4,a5,s3
					 - this->_M_impl._M_finish);
   1b9e0:	01053783          	ld	a5,16(a0)
   1b9e4:	40d787b3          	sub	a5,a5,a3
   1b9e8:	4037d793          	srai	a5,a5,0x3
   1b9ec:	02c787b3          	mul	a5,a5,a2
	    __builtin_unreachable();

	  if (__navail >= __n)
   1b9f0:	06b7e063          	bltu	a5,a1,1ba50 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xc4>
   1b9f4:	00058713          	addi	a4,a1,0
      template<typename _ForwardIterator, typename _Size>
	_GLIBCXX20_CONSTEXPR
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
	  _ForwardIterator __cur = __first;
   1b9f8:	00068793          	addi	a5,a3,0
  abbrev_entry() : code(0) {}
   1b9fc:	0007b023          	sd	zero,0(a5)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1ba00:	0007b823          	sd	zero,16(a5)
   1ba04:	0007bc23          	sd	zero,24(a5)
   1ba08:	0207b023          	sd	zero,32(a5)
	  __try
	    {
	      for (; __n > 0; --__n, (void) ++__cur)
   1ba0c:	fff70713          	addi	a4,a4,-1
   1ba10:	02878793          	addi	a5,a5,40
   1ba14:	fe0714e3          	bne	a4,zero,1b9fc <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x70>
   1ba18:	00249793          	slli	a5,s1,0x2
   1ba1c:	009787b3          	add	a5,a5,s1
   1ba20:	00379793          	slli	a5,a5,0x3
   1ba24:	00f686b3          	add	a3,a3,a5
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
   1ba28:	00d93423          	sd	a3,8(s2)
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
   1ba2c:	03813083          	ld	ra,56(sp)
   1ba30:	03013403          	ld	s0,48(sp)
   1ba34:	02813483          	ld	s1,40(sp)
   1ba38:	02013903          	ld	s2,32(sp)
   1ba3c:	01813983          	ld	s3,24(sp)
   1ba40:	01013a03          	ld	s4,16(sp)
   1ba44:	00813a83          	ld	s5,8(sp)
   1ba48:	04010113          	addi	sp,sp,64
   1ba4c:	00008067          	jalr	zero,0(ra)
	if (max_size() - size() < __n)
   1ba50:	02b76c63          	bltu	a4,a1,1ba88 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xfc>
	const size_type __len = size() + (std::max)(size(), __n);
   1ba54:	00058793          	addi	a5,a1,0
   1ba58:	0135f463          	bgeu	a1,s3,1ba60 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xd4>
   1ba5c:	00098793          	addi	a5,s3,0
   1ba60:	013787b3          	add	a5,a5,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1ba64:	0337e863          	bltu	a5,s3,1ba94 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x108>
   1ba68:	00078a93          	addi	s5,a5,0
   1ba6c:	0001b717          	auipc	a4,0x1b
   1ba70:	21c73703          	ld	a4,540(a4) # 36c88 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd0>
   1ba74:	00f77463          	bgeu	a4,a5,1ba7c <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xf0>
   1ba78:	00070a93          	addi	s5,a4,0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1ba7c:	00000a13          	addi	s4,zero,0
   1ba80:	02078863          	beq	a5,zero,1bab0 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x124>
   1ba84:	0180006f          	jal	zero,1ba9c <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x110>
	  __throw_length_error(__N(__s));
   1ba88:	0001b517          	auipc	a0,0x1b
   1ba8c:	ef850513          	addi	a0,a0,-264 # 36980 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x10>
   1ba90:	951fa0ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1ba94:	0001ba97          	auipc	s5,0x1b
   1ba98:	1f4aba83          	ld	s5,500(s5) # 36c88 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd0>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1ba9c:	002a9513          	slli	a0,s5,0x2
   1baa0:	01550533          	add	a0,a0,s5
   1baa4:	00351513          	slli	a0,a0,0x3
   1baa8:	a19fa0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1baac:	00050a13          	addi	s4,a0,0
		      std::__uninitialized_default_n_a(__new_start + __size,
   1bab0:	008a07b3          	add	a5,s4,s0
   1bab4:	00048713          	addi	a4,s1,0
   1bab8:	0007b023          	sd	zero,0(a5)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1babc:	0007b823          	sd	zero,16(a5)
   1bac0:	0007bc23          	sd	zero,24(a5)
   1bac4:	0207b023          	sd	zero,32(a5)
   1bac8:	fff70713          	addi	a4,a4,-1
   1bacc:	02878793          	addi	a5,a5,40
   1bad0:	fe0714e3          	bne	a4,zero,1bab8 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x12c>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   1bad4:	00093503          	ld	a0,0(s2)
   1bad8:	00893603          	ld	a2,8(s2)
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
   1badc:	04c50463          	beq	a0,a2,1bb24 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x198>
   1bae0:	00050793          	addi	a5,a0,0
      _ForwardIterator __cur = __result;
   1bae4:	000a0713          	addi	a4,s4,0
struct abbrev_entry {
   1bae8:	0007b683          	ld	a3,0(a5)
   1baec:	00d73023          	sd	a3,0(a4)
   1baf0:	0087a683          	lw	a3,8(a5)
   1baf4:	00d72423          	sw	a3,8(a4)
   1baf8:	00c7c683          	lbu	a3,12(a5)
   1bafc:	00d70623          	sb	a3,12(a4)
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   1bb00:	0107b683          	ld	a3,16(a5)
   1bb04:	00d73823          	sd	a3,16(a4)
   1bb08:	0187b683          	ld	a3,24(a5)
   1bb0c:	00d73c23          	sd	a3,24(a4)
	  _M_end_of_storage(__x._M_end_of_storage)
   1bb10:	0207b683          	ld	a3,32(a5)
   1bb14:	02d73023          	sd	a3,32(a4)
      for (; __first != __last; ++__first, (void)++__cur)
   1bb18:	02878793          	addi	a5,a5,40
   1bb1c:	02870713          	addi	a4,a4,40
   1bb20:	fcf614e3          	bne	a2,a5,1bae8 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x15c>
	if (__p)
   1bb24:	00050463          	beq	a0,zero,1bb2c <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x1a0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1bb28:	989fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	      this->_M_impl._M_start = __new_start;
   1bb2c:	01493023          	sd	s4,0(s2)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   1bb30:	013484b3          	add	s1,s1,s3
   1bb34:	00249793          	slli	a5,s1,0x2
   1bb38:	009787b3          	add	a5,a5,s1
   1bb3c:	00379793          	slli	a5,a5,0x3
   1bb40:	00fa07b3          	add	a5,s4,a5
   1bb44:	00f93423          	sd	a5,8(s2)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1bb48:	002a9793          	slli	a5,s5,0x2
   1bb4c:	015787b3          	add	a5,a5,s5
   1bb50:	00379793          	slli	a5,a5,0x3
   1bb54:	00fa0a33          	add	s4,s4,a5
   1bb58:	01493823          	sd	s4,16(s2)
    }
   1bb5c:	ed1ff06f          	jal	zero,1ba2c <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xa0>
   1bb60:	00008067          	jalr	zero,0(ra)

000000000001bb64 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1bb64:	ff010113          	addi	sp,sp,-16
   1bb68:	00113423          	sd	ra,8(sp)
   1bb6c:	00813023          	sd	s0,0(sp)
   1bb70:	00853403          	ld	s0,8(a0)
   1bb74:	02040263          	beq	s0,zero,1bb98 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()+0x34>
class type_unit : public unit {
   1bb78:	00026797          	auipc	a5,0x26
   1bb7c:	7d87b783          	ld	a5,2008(a5) # 42350 <vtable for dwarf::type_unit@@Base+0x9f8>
   1bb80:	01078793          	addi	a5,a5,16
   1bb84:	00f43823          	sd	a5,16(s0)
   1bb88:	01040513          	addi	a0,s0,16
   1bb8c:	8adfb0ef          	jal	ra,17438 <dwarf::unit::~unit()>
   1bb90:	00040513          	addi	a0,s0,0
   1bb94:	91dfa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1bb98:	00813083          	ld	ra,8(sp)
   1bb9c:	00013403          	ld	s0,0(sp)
   1bba0:	01010113          	addi	sp,sp,16
   1bba4:	00008067          	jalr	zero,0(ra)

000000000001bba8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1bba8:	00050693          	addi	a3,a0,0
      __node_base_ptr __prev_p = _M_buckets[__bkt];
   1bbac:	00053783          	ld	a5,0(a0)
   1bbb0:	00359713          	slli	a4,a1,0x3
   1bbb4:	00e787b3          	add	a5,a5,a4
   1bbb8:	0007b503          	ld	a0,0(a5)
      if (!__prev_p)
   1bbbc:	04050263          	beq	a0,zero,1bc00 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x58>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
   1bbc0:	00053783          	ld	a5,0(a0)
   1bbc4:	00063603          	ld	a2,0(a2)
   1bbc8:	0080006f          	jal	zero,1bbd0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x28>
	   __p = __p->_M_next())
   1bbcc:	00070793          	addi	a5,a4,0
      { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
   1bbd0:	0087b703          	ld	a4,8(a5)
   1bbd4:	02c70663          	beq	a4,a2,1bc00 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x58>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1bbd8:	0007b703          	ld	a4,0(a5)
   1bbdc:	02070063          	beq	a4,zero,1bbfc <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x54>
	  __prev_p = __p;
   1bbe0:	00078513          	addi	a0,a5,0
    { return __num % __den; }
   1bbe4:	00873783          	ld	a5,8(a4)
   1bbe8:	0086b803          	ld	a6,8(a3)
   1bbec:	0307f7b3          	remu	a5,a5,a6
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1bbf0:	fcf58ee3          	beq	a1,a5,1bbcc <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x24>
      return nullptr;
   1bbf4:	00000513          	addi	a0,zero,0
   1bbf8:	00008067          	jalr	zero,0(ra)
   1bbfc:	00070513          	addi	a0,a4,0
    }
   1bc00:	00008067          	jalr	zero,0(ra)

000000000001bc04 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1bc04:	fd010113          	addi	sp,sp,-48
   1bc08:	02113423          	sd	ra,40(sp)
   1bc0c:	02813023          	sd	s0,32(sp)
   1bc10:	00913c23          	sd	s1,24(sp)
   1bc14:	00058493          	addi	s1,a1,0
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   1bc18:	01053403          	ld	s0,16(a0)
      while (__x != 0)
   1bc1c:	00040a63          	beq	s0,zero,1bc30 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x2c>
      { return __x < __y; }
   1bc20:	0005a683          	lw	a3,0(a1)
      { return static_cast<_Link_type>(__x->_M_right); }
   1bc24:	00000813          	addi	a6,zero,0
   1bc28:	00100613          	addi	a2,zero,1
   1bc2c:	0340006f          	jal	zero,1bc60 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x5c>
      { return &this->_M_impl._M_header; }
   1bc30:	00850413          	addi	s0,a0,8
	  if (__j == begin())
   1bc34:	01853783          	ld	a5,24(a0)
   1bc38:	06878663          	beq	a5,s0,1bca4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0xa0>
	_M_node = _Rb_tree_decrement(_M_node);
   1bc3c:	00040513          	addi	a0,s0,0
   1bc40:	891fa0ef          	jal	ra,164d0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>
	return *this;
   1bc44:	00040593          	addi	a1,s0,0
	_M_node = _Rb_tree_decrement(_M_node);
   1bc48:	00050413          	addi	s0,a0,0
	return *this;
   1bc4c:	0300006f          	jal	zero,1bc7c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x78>
      { return static_cast<_Link_type>(__x->_M_right); }
   1bc50:	01843783          	ld	a5,24(s0)
   1bc54:	00080713          	addi	a4,a6,0
      while (__x != 0)
   1bc58:	00078e63          	beq	a5,zero,1bc74 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x70>
   1bc5c:	00078413          	addi	s0,a5,0
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   1bc60:	02042783          	lw	a5,32(s0)
   1bc64:	fef6d6e3          	bge	a3,a5,1bc50 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x4c>
      { return static_cast<_Link_type>(__x->_M_left); }
   1bc68:	01043783          	ld	a5,16(s0)
   1bc6c:	00060713          	addi	a4,a2,0
   1bc70:	fe9ff06f          	jal	zero,1bc58 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x54>
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1bc74:	00040593          	addi	a1,s0,0
      if (__comp)
   1bc78:	fa071ee3          	bne	a4,zero,1bc34 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x30>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   1bc7c:	02042703          	lw	a4,32(s0)
   1bc80:	0004a783          	lw	a5,0(s1)
   1bc84:	02f74663          	blt	a4,a5,1bcb0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0xac>
   1bc88:	00000593          	addi	a1,zero,0
    }
   1bc8c:	00040513          	addi	a0,s0,0
   1bc90:	02813083          	ld	ra,40(sp)
   1bc94:	02013403          	ld	s0,32(sp)
   1bc98:	01813483          	ld	s1,24(sp)
   1bc9c:	03010113          	addi	sp,sp,48
   1bca0:	00008067          	jalr	zero,0(ra)
   1bca4:	00040593          	addi	a1,s0,0
   1bca8:	00000413          	addi	s0,zero,0
   1bcac:	fe1ff06f          	jal	zero,1bc8c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x88>
   1bcb0:	00000413          	addi	s0,zero,0
   1bcb4:	fd9ff06f          	jal	zero,1bc8c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x88>

000000000001bcb8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1bcb8:	fc010113          	addi	sp,sp,-64
   1bcbc:	02113c23          	sd	ra,56(sp)
   1bcc0:	02813823          	sd	s0,48(sp)
   1bcc4:	02913423          	sd	s1,40(sp)
   1bcc8:	03213023          	sd	s2,32(sp)
   1bccc:	01313c23          	sd	s3,24(sp)
   1bcd0:	00050993          	addi	s3,a0,0
   1bcd4:	00060493          	addi	s1,a2,0
      { return &this->_M_impl._M_header; }
   1bcd8:	00850713          	addi	a4,a0,8
      if (__pos._M_node == _M_end())
   1bcdc:	04e58063          	beq	a1,a4,1bd1c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x64>
   1bce0:	00058413          	addi	s0,a1,0
   1bce4:	00062903          	lw	s2,0(a2)
   1bce8:	0205a703          	lw	a4,32(a1)
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   1bcec:	0ce95663          	bge	s2,a4,1bdb8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x100>
	  if (__pos._M_node == _M_leftmost()) // begin()
   1bcf0:	01853703          	ld	a4,24(a0)
   1bcf4:	08b70663          	beq	a4,a1,1bd80 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xc8>
	_M_node = _Rb_tree_decrement(_M_node);
   1bcf8:	00058513          	addi	a0,a1,0
   1bcfc:	fd4fa0ef          	jal	ra,164d0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   1bd00:	02052783          	lw	a5,32(a0)
   1bd04:	0927da63          	bge	a5,s2,1bd98 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xe0>
	      if (_S_right(__before._M_node) == 0)
   1bd08:	01853783          	ld	a5,24(a0)
   1bd0c:	08078063          	beq	a5,zero,1bd8c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xd4>
		return _Res(__pos._M_node, __pos._M_node);
   1bd10:	00813023          	sd	s0,0(sp)
   1bd14:	00813423          	sd	s0,8(sp)
   1bd18:	0440006f          	jal	zero,1bd5c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   1bd1c:	02853783          	ld	a5,40(a0)
   1bd20:	02078063          	beq	a5,zero,1bd40 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x88>
   1bd24:	02053783          	ld	a5,32(a0)
   1bd28:	00062683          	lw	a3,0(a2)
   1bd2c:	0207a703          	lw	a4,32(a5)
   1bd30:	00d75863          	bge	a4,a3,1bd40 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x88>
	    return _Res(0, _M_rightmost());
   1bd34:	00013023          	sd	zero,0(sp)
   1bd38:	00f13423          	sd	a5,8(sp)
   1bd3c:	0200006f          	jal	zero,1bd5c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
	    return _M_get_insert_unique_pos(__k);
   1bd40:	00048593          	addi	a1,s1,0
   1bd44:	00098513          	addi	a0,s3,0
   1bd48:	00026317          	auipc	t1,0x26
   1bd4c:	70033303          	ld	t1,1792(t1) # 42448 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)@@Base+0x26844>
   1bd50:	000300e7          	jalr	ra,0(t1)
   1bd54:	00a13023          	sd	a0,0(sp)
   1bd58:	00b13423          	sd	a1,8(sp)
    }
   1bd5c:	00013503          	ld	a0,0(sp)
   1bd60:	00813583          	ld	a1,8(sp)
   1bd64:	03813083          	ld	ra,56(sp)
   1bd68:	03013403          	ld	s0,48(sp)
   1bd6c:	02813483          	ld	s1,40(sp)
   1bd70:	02013903          	ld	s2,32(sp)
   1bd74:	01813983          	ld	s3,24(sp)
   1bd78:	04010113          	addi	sp,sp,64
   1bd7c:	00008067          	jalr	zero,0(ra)
	    return _Res(_M_leftmost(), _M_leftmost());
   1bd80:	00e13023          	sd	a4,0(sp)
   1bd84:	00e13423          	sd	a4,8(sp)
   1bd88:	fd5ff06f          	jal	zero,1bd5c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
		return _Res(0, __before._M_node);
   1bd8c:	00013023          	sd	zero,0(sp)
   1bd90:	00a13423          	sd	a0,8(sp)
   1bd94:	fc9ff06f          	jal	zero,1bd5c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
	    return _M_get_insert_unique_pos(__k);
   1bd98:	00048593          	addi	a1,s1,0
   1bd9c:	00098513          	addi	a0,s3,0
   1bda0:	00026317          	auipc	t1,0x26
   1bda4:	6a833303          	ld	t1,1704(t1) # 42448 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)@@Base+0x26844>
   1bda8:	000300e7          	jalr	ra,0(t1)
   1bdac:	00a13023          	sd	a0,0(sp)
   1bdb0:	00b13423          	sd	a1,8(sp)
   1bdb4:	fa9ff06f          	jal	zero,1bd5c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   1bdb8:	07275463          	bge	a4,s2,1be20 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x168>
	  if (__pos._M_node == _M_rightmost())
   1bdbc:	02053703          	ld	a4,32(a0)
   1bdc0:	02b70463          	beq	a4,a1,1bde8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x130>
	_M_node = _Rb_tree_increment(_M_node);
   1bdc4:	00058513          	addi	a0,a1,0
   1bdc8:	e88fa0ef          	jal	ra,16450 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@plt>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   1bdcc:	02052783          	lw	a5,32(a0)
   1bdd0:	02f95863          	bge	s2,a5,1be00 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x148>
	      if (_S_right(__pos._M_node) == 0)
   1bdd4:	01843783          	ld	a5,24(s0)
   1bdd8:	00078e63          	beq	a5,zero,1bdf4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x13c>
		return _Res(__after._M_node, __after._M_node);
   1bddc:	00a13023          	sd	a0,0(sp)
   1bde0:	00a13423          	sd	a0,8(sp)
   1bde4:	f79ff06f          	jal	zero,1bd5c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
	    return _Res(0, _M_rightmost());
   1bde8:	00013023          	sd	zero,0(sp)
   1bdec:	00e13423          	sd	a4,8(sp)
   1bdf0:	f6dff06f          	jal	zero,1bd5c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
		return _Res(0, __pos._M_node);
   1bdf4:	00013023          	sd	zero,0(sp)
   1bdf8:	00813423          	sd	s0,8(sp)
   1bdfc:	f61ff06f          	jal	zero,1bd5c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
	    return _M_get_insert_unique_pos(__k);
   1be00:	00048593          	addi	a1,s1,0
   1be04:	00098513          	addi	a0,s3,0
   1be08:	00026317          	auipc	t1,0x26
   1be0c:	64033303          	ld	t1,1600(t1) # 42448 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)@@Base+0x26844>
   1be10:	000300e7          	jalr	ra,0(t1)
   1be14:	00a13023          	sd	a0,0(sp)
   1be18:	00b13423          	sd	a1,8(sp)
   1be1c:	f41ff06f          	jal	zero,1bd5c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
	return _Res(__pos._M_node, 0);
   1be20:	00b13023          	sd	a1,0(sp)
   1be24:	00013423          	sd	zero,8(sp)
   1be28:	f35ff06f          	jal	zero,1bd5c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>

000000000001be2c <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1be2c:	fc010113          	addi	sp,sp,-64
   1be30:	02113c23          	sd	ra,56(sp)
   1be34:	02813823          	sd	s0,48(sp)
   1be38:	02913423          	sd	s1,40(sp)
   1be3c:	03213023          	sd	s2,32(sp)
   1be40:	01313c23          	sd	s3,24(sp)
   1be44:	00050493          	addi	s1,a0,0
   1be48:	00058913          	addi	s2,a1,0
   1be4c:	00068993          	addi	s3,a3,0
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1be50:	03800513          	addi	a0,zero,56
   1be54:	e6cfa0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1be58:	00050413          	addi	s0,a0,0
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
   1be5c:	0009b783          	ld	a5,0(s3)
   1be60:	0007a983          	lw	s3,0(a5)
   1be64:	03352023          	sw	s3,32(a0)
      : _M_ptr(0), _M_refcount()
   1be68:	02053423          	sd	zero,40(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1be6c:	02053823          	sd	zero,48(a0)
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
   1be70:	02050613          	addi	a2,a0,32
   1be74:	00090593          	addi	a1,s2,0
   1be78:	00048513          	addi	a0,s1,0
   1be7c:	00026317          	auipc	t1,0x26
   1be80:	4e433303          	ld	t1,1252(t1) # 42360 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)@@Base+0x266a8>
   1be84:	000300e7          	jalr	ra,0(t1)
   1be88:	00a13023          	sd	a0,0(sp)
   1be8c:	00b13423          	sd	a1,8(sp)
	if (__res.second)
   1be90:	06058263          	beq	a1,zero,1bef4 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0xc8>
   1be94:	00050713          	addi	a4,a0,0
			    || _M_impl._M_key_compare(_S_key(__z),
   1be98:	00100513          	addi	a0,zero,1
   1be9c:	04070263          	beq	a4,zero,1bee0 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0xb4>
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   1bea0:	00848693          	addi	a3,s1,8
   1bea4:	00058613          	addi	a2,a1,0
   1bea8:	00040593          	addi	a1,s0,0
   1beac:	c44fa0ef          	jal	ra,162f0 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt>
      ++_M_impl._M_node_count;
   1beb0:	0284b783          	ld	a5,40(s1)
   1beb4:	00178793          	addi	a5,a5,1
   1beb8:	02f4b423          	sd	a5,40(s1)
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1bebc:	00040493          	addi	s1,s0,0
      }
   1bec0:	00048513          	addi	a0,s1,0
   1bec4:	03813083          	ld	ra,56(sp)
   1bec8:	03013403          	ld	s0,48(sp)
   1becc:	02813483          	ld	s1,40(sp)
   1bed0:	02013903          	ld	s2,32(sp)
   1bed4:	01813983          	ld	s3,24(sp)
   1bed8:	04010113          	addi	sp,sp,64
   1bedc:	00008067          	jalr	zero,0(ra)
      { return &this->_M_impl._M_header; }
   1bee0:	00848713          	addi	a4,s1,8
      bool __insert_left = (__x != 0 || __p == _M_end()
   1bee4:	fae58ee3          	beq	a1,a4,1bea0 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x74>
			    || _M_impl._M_key_compare(_S_key(__z),
   1bee8:	0205a503          	lw	a0,32(a1)
   1beec:	00a9a533          	slt	a0,s3,a0
   1bef0:	fb1ff06f          	jal	zero,1bea0 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x74>
	return iterator(__res.first);
   1bef4:	00050493          	addi	s1,a0,0
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1bef8:	00040513          	addi	a0,s0,0
   1befc:	db4fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   1bf00:	fc1ff06f          	jal	zero,1bec0 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x94>

000000000001bf04 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)>:
      vector<_Tp, _Alloc>::
   1bf04:	fa010113          	addi	sp,sp,-96
   1bf08:	04113c23          	sd	ra,88(sp)
   1bf0c:	04813823          	sd	s0,80(sp)
   1bf10:	04913423          	sd	s1,72(sp)
   1bf14:	05213023          	sd	s2,64(sp)
   1bf18:	03313c23          	sd	s3,56(sp)
   1bf1c:	03413823          	sd	s4,48(sp)
   1bf20:	03513423          	sd	s5,40(sp)
   1bf24:	03613023          	sd	s6,32(sp)
   1bf28:	01713c23          	sd	s7,24(sp)
   1bf2c:	01813823          	sd	s8,16(sp)
   1bf30:	01913423          	sd	s9,8(sp)
   1bf34:	01a13023          	sd	s10,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1bf38:	00853983          	ld	s3,8(a0)
   1bf3c:	00053a83          	ld	s5,0(a0)
   1bf40:	415987b3          	sub	a5,s3,s5
   1bf44:	4037d793          	srai	a5,a5,0x3
   1bf48:	0001b717          	auipc	a4,0x1b
   1bf4c:	d5873703          	ld	a4,-680(a4) # 36ca0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   1bf50:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   1bf54:	0001b717          	auipc	a4,0x1b
   1bf58:	d4473703          	ld	a4,-700(a4) # 36c98 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe0>
   1bf5c:	04e78463          	beq	a5,a4,1bfa4 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xa0>
   1bf60:	00050a13          	addi	s4,a0,0
   1bf64:	00060413          	addi	s0,a2,0
   1bf68:	00068493          	addi	s1,a3,0
   1bf6c:	00058913          	addi	s2,a1,0
      return __a;
   1bf70:	00078713          	addi	a4,a5,0
      if (__a < __b)
   1bf74:	03598e63          	beq	s3,s5,1bfb0 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xac>
	const size_type __len = size() + (std::max)(size(), __n);
   1bf78:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1bf7c:	1ef76663          	bltu	a4,a5,1c168 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x264>
   1bf80:	00070b93          	addi	s7,a4,0
   1bf84:	0001b797          	auipc	a5,0x1b
   1bf88:	d147b783          	ld	a5,-748(a5) # 36c98 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe0>
   1bf8c:	00e7f463          	bgeu	a5,a4,1bf94 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x90>
   1bf90:	00078b93          	addi	s7,a5,0
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   1bf94:	41558c33          	sub	s8,a1,s5
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1bf98:	00000b13          	addi	s6,zero,0
   1bf9c:	1e070663          	beq	a4,zero,1c188 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x284>
   1bfa0:	1d40006f          	jal	zero,1c174 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x270>
	  __throw_length_error(__N(__s));
   1bfa4:	0001b517          	auipc	a0,0x1b
   1bfa8:	ac450513          	addi	a0,a0,-1340 # 36a68 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   1bfac:	c34fa0ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   1bfb0:	00100713          	addi	a4,zero,1
   1bfb4:	fc5ff06f          	jal	zero,1bf78 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x74>
   1bfb8:	09590663          	beq	s2,s5,1c044 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x140>
   1bfbc:	000a8493          	addi	s1,s5,0
      _ForwardIterator __cur = __result;
   1bfc0:	000b0413          	addi	s0,s6,0
class unit {
   1bfc4:	00026c97          	auipc	s9,0x26
   1bfc8:	5e4cbc83          	ld	s9,1508(s9) # 425a8 <vtable for dwarf::unit@@Base+0xbcd8>
   1bfcc:	010c8c93          	addi	s9,s9,16
    return ::__libc_single_threaded;
   1bfd0:	00026d17          	auipc	s10,0x26
   1bfd4:	4a8d3d03          	ld	s10,1192(s10) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
  compilation_unit(compilation_unit &&o) = default;
   1bfd8:	00026c17          	auipc	s8,0x26
   1bfdc:	2d8c3c03          	ld	s8,728(s8) # 422b0 <vtable for dwarf::compilation_unit@@Base+0xb9c0>
   1bfe0:	010c0c13          	addi	s8,s8,16
   1bfe4:	0300006f          	jal	zero,1c014 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x110>
      __atomic_add(__mem, __val);
   1bfe8:	00100593          	addi	a1,zero,1
   1bfec:	03050513          	addi	a0,a0,48
   1bff0:	b10fa0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1bff4:	01843023          	sd	s8,0(s0)

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   1bff8:	0004b783          	ld	a5,0(s1)
   1bffc:	0007b783          	ld	a5,0(a5)
   1c000:	00048513          	addi	a0,s1,0
   1c004:	000780e7          	jalr	ra,0(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   1c008:	01848493          	addi	s1,s1,24
   1c00c:	01840413          	addi	s0,s0,24
   1c010:	02990c63          	beq	s2,s1,1c048 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x144>
class unit {
   1c014:	01943023          	sd	s9,0(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1c018:	0084b783          	ld	a5,8(s1)
   1c01c:	00f43423          	sd	a5,8(s0)
      : _M_pi(__r._M_pi)
   1c020:	0104b503          	ld	a0,16(s1)
   1c024:	00a43823          	sd	a0,16(s0)
	if (_M_pi != nullptr)
   1c028:	fc0506e3          	beq	a0,zero,1bff4 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xf0>
    if (__is_single_threaded())
   1c02c:	000d4703          	lbu	a4,0(s10)
   1c030:	fa070ce3          	beq	a4,zero,1bfe8 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xe4>
  { *__mem += __val; }
   1c034:	03052703          	lw	a4,48(a0)
   1c038:	0017071b          	addiw	a4,a4,1
   1c03c:	02e52823          	sw	a4,48(a0)
   1c040:	fb5ff06f          	jal	zero,1bff4 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xf0>
      _ForwardIterator __cur = __result;
   1c044:	000b0413          	addi	s0,s6,0
	      ++__new_finish;
   1c048:	01840413          	addi	s0,s0,24
      for (; __first != __last; ++__first, (void)++__cur)
   1c04c:	09390263          	beq	s2,s3,1c0d0 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x1cc>
   1c050:	00026c17          	auipc	s8,0x26
   1c054:	558c3c03          	ld	s8,1368(s8) # 425a8 <vtable for dwarf::unit@@Base+0xbcd8>
   1c058:	010c0c13          	addi	s8,s8,16
    return ::__libc_single_threaded;
   1c05c:	00026c97          	auipc	s9,0x26
   1c060:	41ccbc83          	ld	s9,1052(s9) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
  compilation_unit(compilation_unit &&o) = default;
   1c064:	00026497          	auipc	s1,0x26
   1c068:	24c4b483          	ld	s1,588(s1) # 422b0 <vtable for dwarf::compilation_unit@@Base+0xb9c0>
   1c06c:	01048493          	addi	s1,s1,16
   1c070:	0300006f          	jal	zero,1c0a0 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x19c>
      __atomic_add(__mem, __val);
   1c074:	00100593          	addi	a1,zero,1
   1c078:	03050513          	addi	a0,a0,48
   1c07c:	a84fa0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1c080:	00943023          	sd	s1,0(s0)
   1c084:	00093783          	ld	a5,0(s2)
   1c088:	0007b783          	ld	a5,0(a5)
   1c08c:	00090513          	addi	a0,s2,0
   1c090:	000780e7          	jalr	ra,0(a5)
   1c094:	01890913          	addi	s2,s2,24
   1c098:	01840413          	addi	s0,s0,24
   1c09c:	03390a63          	beq	s2,s3,1c0d0 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x1cc>
class unit {
   1c0a0:	01843023          	sd	s8,0(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1c0a4:	00893783          	ld	a5,8(s2)
   1c0a8:	00f43423          	sd	a5,8(s0)
      : _M_pi(__r._M_pi)
   1c0ac:	01093503          	ld	a0,16(s2)
   1c0b0:	00a43823          	sd	a0,16(s0)
	if (_M_pi != nullptr)
   1c0b4:	fc0506e3          	beq	a0,zero,1c080 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x17c>
    if (__is_single_threaded())
   1c0b8:	000cc703          	lbu	a4,0(s9)
   1c0bc:	fa070ce3          	beq	a4,zero,1c074 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x170>
  { *__mem += __val; }
   1c0c0:	03052703          	lw	a4,48(a0)
   1c0c4:	0017071b          	addiw	a4,a4,1
   1c0c8:	02e52823          	sw	a4,48(a0)
   1c0cc:	fb5ff06f          	jal	zero,1c080 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x17c>
	if (__p)
   1c0d0:	000a8663          	beq	s5,zero,1c0dc <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x1d8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1c0d4:	000a8513          	addi	a0,s5,0
   1c0d8:	bd8fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   1c0dc:	016a3023          	sd	s6,0(s4)
      this->_M_impl._M_finish = __new_finish;
   1c0e0:	008a3423          	sd	s0,8(s4)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1c0e4:	001b9793          	slli	a5,s7,0x1
   1c0e8:	017787b3          	add	a5,a5,s7
   1c0ec:	00379793          	slli	a5,a5,0x3
   1c0f0:	00fb07b3          	add	a5,s6,a5
   1c0f4:	00fa3823          	sd	a5,16(s4)
    }
   1c0f8:	05813083          	ld	ra,88(sp)
   1c0fc:	05013403          	ld	s0,80(sp)
   1c100:	04813483          	ld	s1,72(sp)
   1c104:	04013903          	ld	s2,64(sp)
   1c108:	03813983          	ld	s3,56(sp)
   1c10c:	03013a03          	ld	s4,48(sp)
   1c110:	02813a83          	ld	s5,40(sp)
   1c114:	02013b03          	ld	s6,32(sp)
   1c118:	01813b83          	ld	s7,24(sp)
   1c11c:	01013c03          	ld	s8,16(sp)
   1c120:	00813c83          	ld	s9,8(sp)
   1c124:	00013d03          	ld	s10,0(sp)
   1c128:	06010113          	addi	sp,sp,96
   1c12c:	00008067          	jalr	zero,0(ra)
      __catch(...)
   1c130:	a80fa0ef          	jal	ra,163b0 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   1c134:	020b1463          	bne	s6,zero,1c15c <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x258>
	{ __p->~_Up(); }
   1c138:	000c3783          	ld	a5,0(s8)
   1c13c:	0007b783          	ld	a5,0(a5)
   1c140:	000c0513          	addi	a0,s8,0
   1c144:	000780e7          	jalr	ra,0(a5)
	  __throw_exception_again;
   1c148:	c78fa0ef          	jal	ra,165c0 <__cxa_rethrow@plt>
      __catch(...)
   1c14c:	00050413          	addi	s0,a0,0
   1c150:	ce0fa0ef          	jal	ra,16630 <__cxa_end_catch@plt>
   1c154:	00040513          	addi	a0,s0,0
   1c158:	d38fa0ef          	jal	ra,16690 <_Unwind_Resume@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1c15c:	000b0513          	addi	a0,s6,0
   1c160:	b50fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1c164:	fe5ff06f          	jal	zero,1c148 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x244>
   1c168:	41558c33          	sub	s8,a1,s5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1c16c:	0001bb97          	auipc	s7,0x1b
   1c170:	b2cbbb83          	ld	s7,-1236(s7) # 36c98 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe0>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1c174:	001b9513          	slli	a0,s7,0x1
   1c178:	01750533          	add	a0,a0,s7
   1c17c:	00351513          	slli	a0,a0,0x3
   1c180:	b40fa0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1c184:	00050b13          	addi	s6,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   1c188:	018b0c33          	add	s8,s6,s8
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1c18c:	0004b603          	ld	a2,0(s1)
   1c190:	00040593          	addi	a1,s0,0
   1c194:	000c0513          	addi	a0,s8,0
   1c198:	889fb0ef          	jal	ra,17a20 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)>
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
   1c19c:	e1dff06f          	jal	zero,1bfb8 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xb4>

000000000001c1a0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1c1a0:	00050693          	addi	a3,a0,0
      __node_base_ptr __prev_p = _M_buckets[__bkt];
   1c1a4:	00053783          	ld	a5,0(a0)
   1c1a8:	00359713          	slli	a4,a1,0x3
   1c1ac:	00e787b3          	add	a5,a5,a4
   1c1b0:	0007b503          	ld	a0,0(a5)
      if (!__prev_p)
   1c1b4:	04050263          	beq	a0,zero,1c1f8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x58>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
   1c1b8:	00053783          	ld	a5,0(a0)
      { return __x == __y; }
   1c1bc:	00063603          	ld	a2,0(a2)
   1c1c0:	0080006f          	jal	zero,1c1c8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x28>
	   __p = __p->_M_next())
   1c1c4:	00070793          	addi	a5,a4,0
      { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
   1c1c8:	0087b703          	ld	a4,8(a5)
   1c1cc:	02c70663          	beq	a4,a2,1c1f8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x58>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1c1d0:	0007b703          	ld	a4,0(a5)
   1c1d4:	02070063          	beq	a4,zero,1c1f4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x54>
	  __prev_p = __p;
   1c1d8:	00078513          	addi	a0,a5,0
    { return __num % __den; }
   1c1dc:	00873783          	ld	a5,8(a4)
   1c1e0:	0086b803          	ld	a6,8(a3)
   1c1e4:	0307f7b3          	remu	a5,a5,a6
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1c1e8:	fcf58ee3          	beq	a1,a5,1c1c4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x24>
      return nullptr;
   1c1ec:	00000513          	addi	a0,zero,0
   1c1f0:	00008067          	jalr	zero,0(ra)
   1c1f4:	00070513          	addi	a0,a4,0
    }
   1c1f8:	00008067          	jalr	zero,0(ra)

000000000001c1fc <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1c1fc:	fd010113          	addi	sp,sp,-48
   1c200:	02113423          	sd	ra,40(sp)
   1c204:	02813023          	sd	s0,32(sp)
   1c208:	00913c23          	sd	s1,24(sp)
   1c20c:	01213823          	sd	s2,16(sp)
   1c210:	01313423          	sd	s3,8(sp)
   1c214:	00050493          	addi	s1,a0,0
   1c218:	00058413          	addi	s0,a1,0
	if (__builtin_expect(__bkt_count == 1, false))
   1c21c:	00100793          	addi	a5,zero,1
   1c220:	04f58263          	beq	a1,a5,1c264 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x68>
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1c224:	fff00793          	addi	a5,zero,-1
   1c228:	0047d793          	srli	a5,a5,0x4
   1c22c:	04b7e263          	bltu	a5,a1,1c270 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x74>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1c230:	00359993          	slli	s3,a1,0x3
   1c234:	00098513          	addi	a0,s3,0
   1c238:	a88fa0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1c23c:	00050913          	addi	s2,a0,0
    {
      __buckets_alloc_type __alloc(_M_node_allocator());

      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
      __buckets_ptr __p = std::__to_address(__ptr);
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
   1c240:	00098613          	addi	a2,s3,0
   1c244:	00000593          	addi	a1,zero,0
   1c248:	b38fa0ef          	jal	ra,16580 <memset@plt>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1c24c:	0104b603          	ld	a2,16(s1)
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
      __node_ptr __p = _M_begin();
      _M_before_begin._M_nxt = nullptr;
   1c250:	0004b823          	sd	zero,16(s1)
      std::size_t __bbegin_bkt = 0;
      while (__p)
   1c254:	08060c63          	beq	a2,zero,1c2ec <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xf0>
      std::size_t __bbegin_bkt = 0;
   1c258:	00000593          	addi	a1,zero,0
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
	  if (!__new_buckets[__bkt])
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
	      _M_before_begin._M_nxt = __p;
	      __new_buckets[__bkt] = &_M_before_begin;
   1c25c:	01048893          	addi	a7,s1,16
   1c260:	0380006f          	jal	zero,1c298 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x9c>
	    _M_single_bucket = nullptr;
   1c264:	02053823          	sd	zero,48(a0)
	    return &_M_single_bucket;
   1c268:	03050913          	addi	s2,a0,48
   1c26c:	fe1ff06f          	jal	zero,1c24c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x50>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1c270:	fff00793          	addi	a5,zero,-1
   1c274:	0037d793          	srli	a5,a5,0x3
   1c278:	00b7f463          	bgeu	a5,a1,1c280 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x84>
	      std::__throw_bad_array_new_length();
   1c27c:	a14fa0ef          	jal	ra,16490 <std::__throw_bad_array_new_length()@plt>
	    std::__throw_bad_alloc();
   1c280:	910fa0ef          	jal	ra,16390 <std::__throw_bad_alloc()@plt>
		__new_buckets[__bbegin_bkt] = __p;
	      __bbegin_bkt = __bkt;
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
   1c284:	00083683          	ld	a3,0(a6)
   1c288:	00d73023          	sd	a3,0(a4)
	      __new_buckets[__bkt]->_M_nxt = __p;
   1c28c:	0007b783          	ld	a5,0(a5)
   1c290:	00e7b023          	sd	a4,0(a5)
      while (__p)
   1c294:	04060c63          	beq	a2,zero,1c2ec <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xf0>
      _M_next() const noexcept
   1c298:	00060713          	addi	a4,a2,0
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1c29c:	00063603          	ld	a2,0(a2)
    { return __num % __den; }
   1c2a0:	00873683          	ld	a3,8(a4)
   1c2a4:	0286f6b3          	remu	a3,a3,s0
	  if (!__new_buckets[__bkt])
   1c2a8:	00369793          	slli	a5,a3,0x3
   1c2ac:	00f907b3          	add	a5,s2,a5
   1c2b0:	0007b803          	ld	a6,0(a5)
   1c2b4:	fc0818e3          	bne	a6,zero,1c284 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x88>
	      __p->_M_nxt = _M_before_begin._M_nxt;
   1c2b8:	0104b503          	ld	a0,16(s1)
   1c2bc:	00a73023          	sd	a0,0(a4)
	      _M_before_begin._M_nxt = __p;
   1c2c0:	00e4b823          	sd	a4,16(s1)
	      __new_buckets[__bkt] = &_M_before_begin;
   1c2c4:	0117b023          	sd	a7,0(a5)
	      if (__p->_M_nxt)
   1c2c8:	00073783          	ld	a5,0(a4)
   1c2cc:	00078c63          	beq	a5,zero,1c2e4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xe8>
		__new_buckets[__bbegin_bkt] = __p;
   1c2d0:	00359593          	slli	a1,a1,0x3
   1c2d4:	00b905b3          	add	a1,s2,a1
   1c2d8:	00e5b023          	sd	a4,0(a1)
	      __bbegin_bkt = __bkt;
   1c2dc:	00068593          	addi	a1,a3,0
   1c2e0:	fb5ff06f          	jal	zero,1c294 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x98>
   1c2e4:	00068593          	addi	a1,a3,0
   1c2e8:	fadff06f          	jal	zero,1c294 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x98>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   1c2ec:	0004b503          	ld	a0,0(s1)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   1c2f0:	03048793          	addi	a5,s1,48
	if (_M_uses_single_bucket(__bkts))
   1c2f4:	00f50463          	beq	a0,a5,1c2fc <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x100>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1c2f8:	9b8fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>

	  __p = __next;
	}

      _M_deallocate_buckets();
      _M_bucket_count = __bkt_count;
   1c2fc:	0084b423          	sd	s0,8(s1)
      _M_buckets = __new_buckets;
   1c300:	0124b023          	sd	s2,0(s1)
    }
   1c304:	02813083          	ld	ra,40(sp)
   1c308:	02013403          	ld	s0,32(sp)
   1c30c:	01813483          	ld	s1,24(sp)
   1c310:	01013903          	ld	s2,16(sp)
   1c314:	00813983          	ld	s3,8(sp)
   1c318:	03010113          	addi	sp,sp,48
   1c31c:	00008067          	jalr	zero,0(ra)

000000000001c320 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1c320:	fc010113          	addi	sp,sp,-64
   1c324:	02113c23          	sd	ra,56(sp)
   1c328:	02813823          	sd	s0,48(sp)
   1c32c:	02913423          	sd	s1,40(sp)
   1c330:	03213023          	sd	s2,32(sp)
   1c334:	01313c23          	sd	s3,24(sp)
   1c338:	01413823          	sd	s4,16(sp)
   1c33c:	00050413          	addi	s0,a0,0
   1c340:	00058493          	addi	s1,a1,0
   1c344:	00060993          	addi	s3,a2,0
   1c348:	00068913          	addi	s2,a3,0
    { return _M_next_resize; }
   1c34c:	02853a03          	ld	s4,40(a0)
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
   1c350:	00070693          	addi	a3,a4,0
   1c354:	01853603          	ld	a2,24(a0)
   1c358:	00853583          	ld	a1,8(a0)
   1c35c:	02050513          	addi	a0,a0,32
   1c360:	a10fa0ef          	jal	ra,16570 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>
   1c364:	00a13023          	sd	a0,0(sp)
   1c368:	00b13423          	sd	a1,8(sp)
      if (__do_rehash.first)
   1c36c:	0ff57513          	andi	a0,a0,255
   1c370:	06051063          	bne	a0,zero,1c3d0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0xb0>
      if (_M_buckets[__bkt])
   1c374:	00349593          	slli	a1,s1,0x3
   1c378:	00043783          	ld	a5,0(s0)
   1c37c:	00b787b3          	add	a5,a5,a1
   1c380:	0007b783          	ld	a5,0(a5)
   1c384:	08078663          	beq	a5,zero,1c410 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0xf0>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
   1c388:	0007b783          	ld	a5,0(a5)
   1c38c:	00f93023          	sd	a5,0(s2)
	  _M_buckets[__bkt]->_M_nxt = __node;
   1c390:	00043783          	ld	a5,0(s0)
   1c394:	00b787b3          	add	a5,a5,a1
   1c398:	0007b783          	ld	a5,0(a5)
   1c39c:	0127b023          	sd	s2,0(a5)
      ++_M_element_count;
   1c3a0:	01843783          	ld	a5,24(s0)
   1c3a4:	00178793          	addi	a5,a5,1
   1c3a8:	00f43c23          	sd	a5,24(s0)
    }
   1c3ac:	00090513          	addi	a0,s2,0
   1c3b0:	03813083          	ld	ra,56(sp)
   1c3b4:	03013403          	ld	s0,48(sp)
   1c3b8:	02813483          	ld	s1,40(sp)
   1c3bc:	02013903          	ld	s2,32(sp)
   1c3c0:	01813983          	ld	s3,24(sp)
   1c3c4:	01013a03          	ld	s4,16(sp)
   1c3c8:	04010113          	addi	sp,sp,64
   1c3cc:	00008067          	jalr	zero,0(ra)
	  _M_rehash_aux(__bkt_count, __unique_keys{});
   1c3d0:	00000613          	addi	a2,zero,0
   1c3d4:	00040513          	addi	a0,s0,0
   1c3d8:	00026317          	auipc	t1,0x26
   1c3dc:	ff833303          	ld	t1,-8(t1) # 423d0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)@@Base+0x261d4>
   1c3e0:	000300e7          	jalr	ra,0(t1)
   1c3e4:	0200006f          	jal	zero,1c404 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0xe4>
      __catch(...)
   1c3e8:	fc9f90ef          	jal	ra,163b0 <__cxa_begin_catch@plt>
    { _M_next_resize = __state; }
   1c3ec:	03443423          	sd	s4,40(s0)
	  __throw_exception_again;
   1c3f0:	9d0fa0ef          	jal	ra,165c0 <__cxa_rethrow@plt>
      __catch(...)
   1c3f4:	00050413          	addi	s0,a0,0
   1c3f8:	a38fa0ef          	jal	ra,16630 <__cxa_end_catch@plt>
   1c3fc:	00040513          	addi	a0,s0,0
   1c400:	a90fa0ef          	jal	ra,16690 <_Unwind_Resume@plt>
    { return __num % __den; }
   1c404:	00843583          	ld	a1,8(s0)
   1c408:	02b9f4b3          	remu	s1,s3,a1
   1c40c:	f69ff06f          	jal	zero,1c374 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x54>
	  __node->_M_nxt = _M_before_begin._M_nxt;
   1c410:	01043783          	ld	a5,16(s0)
   1c414:	00f93023          	sd	a5,0(s2)
	  _M_before_begin._M_nxt = __node;
   1c418:	01243823          	sd	s2,16(s0)
	  if (__node->_M_nxt)
   1c41c:	00093783          	ld	a5,0(s2)
   1c420:	02078063          	beq	a5,zero,1c440 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x120>
   1c424:	0087b783          	ld	a5,8(a5)
   1c428:	00843703          	ld	a4,8(s0)
   1c42c:	02e7f7b3          	remu	a5,a5,a4
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
   1c430:	00043703          	ld	a4,0(s0)
   1c434:	00379793          	slli	a5,a5,0x3
   1c438:	00f707b3          	add	a5,a4,a5
   1c43c:	0127b023          	sd	s2,0(a5)
	  _M_buckets[__bkt] = &_M_before_begin;
   1c440:	00043783          	ld	a5,0(s0)
   1c444:	00b787b3          	add	a5,a5,a1
   1c448:	01040713          	addi	a4,s0,16
   1c44c:	00e7b023          	sd	a4,0(a5)
   1c450:	f51ff06f          	jal	zero,1c3a0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x80>

000000000001c454 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)>:
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
   1c454:	fc010113          	addi	sp,sp,-64
   1c458:	02113c23          	sd	ra,56(sp)
   1c45c:	02813823          	sd	s0,48(sp)
   1c460:	02913423          	sd	s1,40(sp)
   1c464:	03213023          	sd	s2,32(sp)
   1c468:	01313c23          	sd	s3,24(sp)
   1c46c:	00050493          	addi	s1,a0,0
   1c470:	00058413          	addi	s0,a1,0
	return _M_hash()(__k);
   1c474:	0005b983          	ld	s3,0(a1)
    { return __num % __den; }
   1c478:	00853903          	ld	s2,8(a0)
   1c47c:	0329f933          	remu	s2,s3,s2
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1c480:	00098693          	addi	a3,s3,0
   1c484:	00058613          	addi	a2,a1,0
   1c488:	00090593          	addi	a1,s2,0
   1c48c:	00026317          	auipc	t1,0x26
   1c490:	e8433303          	ld	t1,-380(t1) # 42310 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x26768>
   1c494:	000300e7          	jalr	ra,0(t1)
	if (__before_n)
   1c498:	02050663          	beq	a0,zero,1c4c4 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)+0x70>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   1c49c:	00053503          	ld	a0,0(a0)
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
   1c4a0:	02050263          	beq	a0,zero,1c4c4 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)+0x70>
	return __node->_M_v().second;
   1c4a4:	01050513          	addi	a0,a0,16
    }
   1c4a8:	03813083          	ld	ra,56(sp)
   1c4ac:	03013403          	ld	s0,48(sp)
   1c4b0:	02813483          	ld	s1,40(sp)
   1c4b4:	02013903          	ld	s2,32(sp)
   1c4b8:	01813983          	ld	s3,24(sp)
   1c4bc:	04010113          	addi	sp,sp,64
   1c4c0:	00008067          	jalr	zero,0(ra)
	  : _M_h(__h),
   1c4c4:	00913023          	sd	s1,0(sp)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1c4c8:	02800513          	addi	a0,zero,40
   1c4cc:	ff5f90ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1c4d0:	00050693          	addi	a3,a0,0
    _Hash_node_base() noexcept : _M_nxt() { }
   1c4d4:	00053023          	sd	zero,0(a0)
   1c4d8:	00043783          	ld	a5,0(s0)
   1c4dc:	00f53423          	sd	a5,8(a0)
      : _M_ptr(0), _M_refcount()
   1c4e0:	00053c23          	sd	zero,24(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1c4e4:	02053023          	sd	zero,32(a0)
  type_unit() = default;
   1c4e8:	00026797          	auipc	a5,0x26
   1c4ec:	e687b783          	ld	a5,-408(a5) # 42350 <vtable for dwarf::type_unit@@Base+0x9f8>
   1c4f0:	01078793          	addi	a5,a5,16
   1c4f4:	00f53823          	sd	a5,16(a0)
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
   1c4f8:	00a13423          	sd	a0,8(sp)
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
   1c4fc:	00100713          	addi	a4,zero,1
   1c500:	00098613          	addi	a2,s3,0
   1c504:	00090593          	addi	a1,s2,0
   1c508:	00048513          	addi	a0,s1,0
   1c50c:	00026317          	auipc	t1,0x26
   1c510:	ebc33303          	ld	t1,-324(t1) # 423c8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)@@Base+0x260a8>
   1c514:	000300e7          	jalr	ra,0(t1)
      return __pos->second;
   1c518:	01050513          	addi	a0,a0,16
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1c51c:	f8dff06f          	jal	zero,1c4a8 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)+0x54>
    }
   1c520:	00050413          	addi	s0,a0,0
   1c524:	00010513          	addi	a0,sp,0
   1c528:	00026317          	auipc	t1,0x26
   1c52c:	e5833303          	ld	t1,-424(t1) # 42380 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()@@Base+0x2681c>
   1c530:	000300e7          	jalr	ra,0(t1)
   1c534:	00040513          	addi	a0,s0,0
   1c538:	958fa0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001c53c <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)>:
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
   1c53c:	fc010113          	addi	sp,sp,-64
   1c540:	02113c23          	sd	ra,56(sp)
   1c544:	02813823          	sd	s0,48(sp)
   1c548:	02913423          	sd	s1,40(sp)
   1c54c:	03213023          	sd	s2,32(sp)
   1c550:	01313c23          	sd	s3,24(sp)
   1c554:	00050493          	addi	s1,a0,0
   1c558:	00058413          	addi	s0,a1,0
	return _M_hash()(__k);
   1c55c:	0005b983          	ld	s3,0(a1)
    { return __num % __den; }
   1c560:	00853903          	ld	s2,8(a0)
   1c564:	0329f933          	remu	s2,s3,s2
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1c568:	00098693          	addi	a3,s3,0
   1c56c:	00058613          	addi	a2,a1,0
   1c570:	00090593          	addi	a1,s2,0
   1c574:	00026317          	auipc	t1,0x26
   1c578:	d9c33303          	ld	t1,-612(t1) # 42310 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x26768>
   1c57c:	000300e7          	jalr	ra,0(t1)
	if (__before_n)
   1c580:	02050663          	beq	a0,zero,1c5ac <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x70>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   1c584:	00053503          	ld	a0,0(a0)
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
   1c588:	02050263          	beq	a0,zero,1c5ac <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x70>
	return __node->_M_v().second;
   1c58c:	01050513          	addi	a0,a0,16
    }
   1c590:	03813083          	ld	ra,56(sp)
   1c594:	03013403          	ld	s0,48(sp)
   1c598:	02813483          	ld	s1,40(sp)
   1c59c:	02013903          	ld	s2,32(sp)
   1c5a0:	01813983          	ld	s3,24(sp)
   1c5a4:	04010113          	addi	sp,sp,64
   1c5a8:	00008067          	jalr	zero,0(ra)
	  : _M_h(__h),
   1c5ac:	00913023          	sd	s1,0(sp)
   1c5b0:	02800513          	addi	a0,zero,40
   1c5b4:	f0df90ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1c5b8:	00050693          	addi	a3,a0,0
    _Hash_node_base() noexcept : _M_nxt() { }
   1c5bc:	00053023          	sd	zero,0(a0)
   1c5c0:	00043783          	ld	a5,0(s0)
   1c5c4:	00f53423          	sd	a5,8(a0)
      : _M_ptr(0), _M_refcount()
   1c5c8:	00053c23          	sd	zero,24(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1c5cc:	02053023          	sd	zero,32(a0)
   1c5d0:	00026797          	auipc	a5,0x26
   1c5d4:	d807b783          	ld	a5,-640(a5) # 42350 <vtable for dwarf::type_unit@@Base+0x9f8>
   1c5d8:	01078793          	addi	a5,a5,16
   1c5dc:	00f53823          	sd	a5,16(a0)
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
   1c5e0:	00a13423          	sd	a0,8(sp)
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
   1c5e4:	00100713          	addi	a4,zero,1
   1c5e8:	00098613          	addi	a2,s3,0
   1c5ec:	00090593          	addi	a1,s2,0
   1c5f0:	00048513          	addi	a0,s1,0
   1c5f4:	00026317          	auipc	t1,0x26
   1c5f8:	dd433303          	ld	t1,-556(t1) # 423c8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)@@Base+0x260a8>
   1c5fc:	000300e7          	jalr	ra,0(t1)
      return __pos->second;
   1c600:	01050513          	addi	a0,a0,16
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1c604:	f8dff06f          	jal	zero,1c590 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x54>
    }
   1c608:	00050413          	addi	s0,a0,0
   1c60c:	00010513          	addi	a0,sp,0
   1c610:	00026317          	auipc	t1,0x26
   1c614:	d7033303          	ld	t1,-656(t1) # 42380 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()@@Base+0x2681c>
   1c618:	000300e7          	jalr	ra,0(t1)
   1c61c:	00040513          	addi	a0,s0,0
   1c620:	870fa0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001c624 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1c624:	fd010113          	addi	sp,sp,-48
   1c628:	02113423          	sd	ra,40(sp)
   1c62c:	02813023          	sd	s0,32(sp)
   1c630:	00913c23          	sd	s1,24(sp)
   1c634:	01213823          	sd	s2,16(sp)
   1c638:	01313423          	sd	s3,8(sp)
   1c63c:	00050493          	addi	s1,a0,0
   1c640:	00058413          	addi	s0,a1,0
	if (__builtin_expect(__bkt_count == 1, false))
   1c644:	00100793          	addi	a5,zero,1
   1c648:	04f58263          	beq	a1,a5,1c68c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x68>
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1c64c:	fff00793          	addi	a5,zero,-1
   1c650:	0047d793          	srli	a5,a5,0x4
   1c654:	04b7e263          	bltu	a5,a1,1c698 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x74>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1c658:	00359993          	slli	s3,a1,0x3
   1c65c:	00098513          	addi	a0,s3,0
   1c660:	e61f90ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1c664:	00050913          	addi	s2,a0,0
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
   1c668:	00098613          	addi	a2,s3,0
   1c66c:	00000593          	addi	a1,zero,0
   1c670:	f11f90ef          	jal	ra,16580 <memset@plt>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1c674:	0104b603          	ld	a2,16(s1)
      _M_before_begin._M_nxt = nullptr;
   1c678:	0004b823          	sd	zero,16(s1)
      while (__p)
   1c67c:	08060c63          	beq	a2,zero,1c714 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xf0>
      std::size_t __bbegin_bkt = 0;
   1c680:	00000593          	addi	a1,zero,0
	      __new_buckets[__bkt] = &_M_before_begin;
   1c684:	01048893          	addi	a7,s1,16
   1c688:	0380006f          	jal	zero,1c6c0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x9c>
	    _M_single_bucket = nullptr;
   1c68c:	02053823          	sd	zero,48(a0)
	    return &_M_single_bucket;
   1c690:	03050913          	addi	s2,a0,48
   1c694:	fe1ff06f          	jal	zero,1c674 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x50>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1c698:	fff00793          	addi	a5,zero,-1
   1c69c:	0037d793          	srli	a5,a5,0x3
   1c6a0:	00b7f463          	bgeu	a5,a1,1c6a8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x84>
	      std::__throw_bad_array_new_length();
   1c6a4:	dedf90ef          	jal	ra,16490 <std::__throw_bad_array_new_length()@plt>
	    std::__throw_bad_alloc();
   1c6a8:	ce9f90ef          	jal	ra,16390 <std::__throw_bad_alloc()@plt>
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
   1c6ac:	00083683          	ld	a3,0(a6)
   1c6b0:	00d73023          	sd	a3,0(a4)
	      __new_buckets[__bkt]->_M_nxt = __p;
   1c6b4:	0007b783          	ld	a5,0(a5)
   1c6b8:	00e7b023          	sd	a4,0(a5)
      while (__p)
   1c6bc:	04060c63          	beq	a2,zero,1c714 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xf0>
      _M_next() const noexcept
   1c6c0:	00060713          	addi	a4,a2,0
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1c6c4:	00063603          	ld	a2,0(a2)
    { return __num % __den; }
   1c6c8:	00873683          	ld	a3,8(a4)
   1c6cc:	0286f6b3          	remu	a3,a3,s0
	  if (!__new_buckets[__bkt])
   1c6d0:	00369793          	slli	a5,a3,0x3
   1c6d4:	00f907b3          	add	a5,s2,a5
   1c6d8:	0007b803          	ld	a6,0(a5)
   1c6dc:	fc0818e3          	bne	a6,zero,1c6ac <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x88>
	      __p->_M_nxt = _M_before_begin._M_nxt;
   1c6e0:	0104b503          	ld	a0,16(s1)
   1c6e4:	00a73023          	sd	a0,0(a4)
	      _M_before_begin._M_nxt = __p;
   1c6e8:	00e4b823          	sd	a4,16(s1)
	      __new_buckets[__bkt] = &_M_before_begin;
   1c6ec:	0117b023          	sd	a7,0(a5)
	      if (__p->_M_nxt)
   1c6f0:	00073783          	ld	a5,0(a4)
   1c6f4:	00078c63          	beq	a5,zero,1c70c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xe8>
		__new_buckets[__bbegin_bkt] = __p;
   1c6f8:	00359593          	slli	a1,a1,0x3
   1c6fc:	00b905b3          	add	a1,s2,a1
   1c700:	00e5b023          	sd	a4,0(a1)
	      __bbegin_bkt = __bkt;
   1c704:	00068593          	addi	a1,a3,0
   1c708:	fb5ff06f          	jal	zero,1c6bc <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x98>
   1c70c:	00068593          	addi	a1,a3,0
   1c710:	fadff06f          	jal	zero,1c6bc <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x98>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   1c714:	0004b503          	ld	a0,0(s1)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   1c718:	03048793          	addi	a5,s1,48
	if (_M_uses_single_bucket(__bkts))
   1c71c:	00f50463          	beq	a0,a5,1c724 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x100>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1c720:	d91f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      _M_bucket_count = __bkt_count;
   1c724:	0084b423          	sd	s0,8(s1)
      _M_buckets = __new_buckets;
   1c728:	0124b023          	sd	s2,0(s1)
    }
   1c72c:	02813083          	ld	ra,40(sp)
   1c730:	02013403          	ld	s0,32(sp)
   1c734:	01813483          	ld	s1,24(sp)
   1c738:	01013903          	ld	s2,16(sp)
   1c73c:	00813983          	ld	s3,8(sp)
   1c740:	03010113          	addi	sp,sp,48
   1c744:	00008067          	jalr	zero,0(ra)

000000000001c748 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1c748:	fc010113          	addi	sp,sp,-64
   1c74c:	02113c23          	sd	ra,56(sp)
   1c750:	02813823          	sd	s0,48(sp)
   1c754:	02913423          	sd	s1,40(sp)
   1c758:	03213023          	sd	s2,32(sp)
   1c75c:	01313c23          	sd	s3,24(sp)
   1c760:	01413823          	sd	s4,16(sp)
   1c764:	00050413          	addi	s0,a0,0
   1c768:	00058493          	addi	s1,a1,0
   1c76c:	00060993          	addi	s3,a2,0
   1c770:	00068913          	addi	s2,a3,0
    { return _M_next_resize; }
   1c774:	02853a03          	ld	s4,40(a0)
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
   1c778:	00070693          	addi	a3,a4,0
   1c77c:	01853603          	ld	a2,24(a0)
   1c780:	00853583          	ld	a1,8(a0)
   1c784:	02050513          	addi	a0,a0,32
   1c788:	de9f90ef          	jal	ra,16570 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>
   1c78c:	00a13023          	sd	a0,0(sp)
   1c790:	00b13423          	sd	a1,8(sp)
      if (__do_rehash.first)
   1c794:	0ff57513          	andi	a0,a0,255
   1c798:	06051063          	bne	a0,zero,1c7f8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0xb0>
      if (_M_buckets[__bkt])
   1c79c:	00349593          	slli	a1,s1,0x3
   1c7a0:	00043783          	ld	a5,0(s0)
   1c7a4:	00b787b3          	add	a5,a5,a1
   1c7a8:	0007b783          	ld	a5,0(a5)
   1c7ac:	08078663          	beq	a5,zero,1c838 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0xf0>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
   1c7b0:	0007b783          	ld	a5,0(a5)
   1c7b4:	00f93023          	sd	a5,0(s2)
	  _M_buckets[__bkt]->_M_nxt = __node;
   1c7b8:	00043783          	ld	a5,0(s0)
   1c7bc:	00b787b3          	add	a5,a5,a1
   1c7c0:	0007b783          	ld	a5,0(a5)
   1c7c4:	0127b023          	sd	s2,0(a5)
      ++_M_element_count;
   1c7c8:	01843783          	ld	a5,24(s0)
   1c7cc:	00178793          	addi	a5,a5,1
   1c7d0:	00f43c23          	sd	a5,24(s0)
    }
   1c7d4:	00090513          	addi	a0,s2,0
   1c7d8:	03813083          	ld	ra,56(sp)
   1c7dc:	03013403          	ld	s0,48(sp)
   1c7e0:	02813483          	ld	s1,40(sp)
   1c7e4:	02013903          	ld	s2,32(sp)
   1c7e8:	01813983          	ld	s3,24(sp)
   1c7ec:	01013a03          	ld	s4,16(sp)
   1c7f0:	04010113          	addi	sp,sp,64
   1c7f4:	00008067          	jalr	zero,0(ra)
	  _M_rehash_aux(__bkt_count, __unique_keys{});
   1c7f8:	00000613          	addi	a2,zero,0
   1c7fc:	00040513          	addi	a0,s0,0
   1c800:	00026317          	auipc	t1,0x26
   1c804:	a9033303          	ld	t1,-1392(t1) # 42290 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)@@Base+0x25c6c>
   1c808:	000300e7          	jalr	ra,0(t1)
   1c80c:	0200006f          	jal	zero,1c82c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0xe4>
      __catch(...)
   1c810:	ba1f90ef          	jal	ra,163b0 <__cxa_begin_catch@plt>
    { _M_next_resize = __state; }
   1c814:	03443423          	sd	s4,40(s0)
	  __throw_exception_again;
   1c818:	da9f90ef          	jal	ra,165c0 <__cxa_rethrow@plt>
      __catch(...)
   1c81c:	00050413          	addi	s0,a0,0
   1c820:	e11f90ef          	jal	ra,16630 <__cxa_end_catch@plt>
   1c824:	00040513          	addi	a0,s0,0
   1c828:	e69f90ef          	jal	ra,16690 <_Unwind_Resume@plt>
    { return __num % __den; }
   1c82c:	00843583          	ld	a1,8(s0)
   1c830:	02b9f4b3          	remu	s1,s3,a1
   1c834:	f69ff06f          	jal	zero,1c79c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x54>
	  __node->_M_nxt = _M_before_begin._M_nxt;
   1c838:	01043783          	ld	a5,16(s0)
   1c83c:	00f93023          	sd	a5,0(s2)
	  _M_before_begin._M_nxt = __node;
   1c840:	01243823          	sd	s2,16(s0)
	  if (__node->_M_nxt)
   1c844:	00093783          	ld	a5,0(s2)
   1c848:	02078063          	beq	a5,zero,1c868 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x120>
   1c84c:	0087b783          	ld	a5,8(a5)
   1c850:	00843703          	ld	a4,8(s0)
   1c854:	02e7f7b3          	remu	a5,a5,a4
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
   1c858:	00043703          	ld	a4,0(s0)
   1c85c:	00379793          	slli	a5,a5,0x3
   1c860:	00f707b3          	add	a5,a4,a5
   1c864:	0127b023          	sd	s2,0(a5)
	  _M_buckets[__bkt] = &_M_before_begin;
   1c868:	00043783          	ld	a5,0(s0)
   1c86c:	00b787b3          	add	a5,a5,a1
   1c870:	01040713          	addi	a4,s0,16
   1c874:	00e7b023          	sd	a4,0(a5)
   1c878:	f51ff06f          	jal	zero,1c7c8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x80>

000000000001c87c <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)>:
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
   1c87c:	fd010113          	addi	sp,sp,-48
   1c880:	02113423          	sd	ra,40(sp)
   1c884:	02813023          	sd	s0,32(sp)
   1c888:	00913c23          	sd	s1,24(sp)
   1c88c:	01213823          	sd	s2,16(sp)
   1c890:	01313423          	sd	s3,8(sp)
   1c894:	01413023          	sd	s4,0(sp)
   1c898:	00050913          	addi	s2,a0,0
   1c89c:	00058413          	addi	s0,a1,0
	return _M_hash()(__k);
   1c8a0:	0005ba03          	ld	s4,0(a1)
    { return __num % __den; }
   1c8a4:	00853983          	ld	s3,8(a0)
   1c8a8:	033a79b3          	remu	s3,s4,s3
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1c8ac:	000a0693          	addi	a3,s4,0
   1c8b0:	00058613          	addi	a2,a1,0
   1c8b4:	00098593          	addi	a1,s3,0
   1c8b8:	00026317          	auipc	t1,0x26
   1c8bc:	c8833303          	ld	t1,-888(t1) # 42540 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x263a0>
   1c8c0:	000300e7          	jalr	ra,0(t1)
	if (__before_n)
   1c8c4:	02050863          	beq	a0,zero,1c8f4 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x78>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   1c8c8:	00053783          	ld	a5,0(a0)
	return __node->_M_v().second;
   1c8cc:	01078513          	addi	a0,a5,16
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
   1c8d0:	02078263          	beq	a5,zero,1c8f4 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x78>
    }
   1c8d4:	02813083          	ld	ra,40(sp)
   1c8d8:	02013403          	ld	s0,32(sp)
   1c8dc:	01813483          	ld	s1,24(sp)
   1c8e0:	01013903          	ld	s2,16(sp)
   1c8e4:	00813983          	ld	s3,8(sp)
   1c8e8:	00013a03          	ld	s4,0(sp)
   1c8ec:	03010113          	addi	sp,sp,48
   1c8f0:	00008067          	jalr	zero,0(ra)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1c8f4:	03800513          	addi	a0,zero,56
   1c8f8:	bc9f90ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1c8fc:	00050493          	addi	s1,a0,0
    _Hash_node_base() noexcept : _M_nxt() { }
   1c900:	00053023          	sd	zero,0(a0)
   1c904:	00043783          	ld	a5,0(s0)
   1c908:	00f53423          	sd	a5,8(a0)
  abbrev_entry() : code(0) {}
   1c90c:	00053823          	sd	zero,16(a0)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1c910:	02053023          	sd	zero,32(a0)
   1c914:	02053423          	sd	zero,40(a0)
   1c918:	02053823          	sd	zero,48(a0)
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
   1c91c:	00100713          	addi	a4,zero,1
   1c920:	00050693          	addi	a3,a0,0
   1c924:	000a0613          	addi	a2,s4,0
   1c928:	00098593          	addi	a1,s3,0
   1c92c:	00090513          	addi	a0,s2,0
   1c930:	00026317          	auipc	t1,0x26
   1c934:	c2833303          	ld	t1,-984(t1) # 42558 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)@@Base+0x25e10>
   1c938:	000300e7          	jalr	ra,0(t1)
      return __pos->second;
   1c93c:	01050513          	addi	a0,a0,16
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1c940:	f95ff06f          	jal	zero,1c8d4 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x58>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1c944:	00050413          	addi	s0,a0,0
   1c948:	0204b503          	ld	a0,32(s1)
	if (__p)
   1c94c:	00050463          	beq	a0,zero,1c954 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0xd8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1c950:	b61f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1c954:	00048513          	addi	a0,s1,0
   1c958:	b59f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1c95c:	00040513          	addi	a0,s0,0
   1c960:	d31f90ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001c964 <dwarf::cursor::skip_initial_length()>:
  pos = begin + length;
  return make_shared<section>(sec->type, begin, length, sec->ord, fmt);
}

void cursor::skip_initial_length() {
  switch (sec->fmt) {
   1c964:	00053783          	ld	a5,0(a0)
   1c968:	0187a783          	lw	a5,24(a5)
   1c96c:	00100713          	addi	a4,zero,1
   1c970:	00e79a63          	bne	a5,a4,1c984 <dwarf::cursor::skip_initial_length()+0x20>
  case format::dwarf32:
    pos += sizeof(uword);
   1c974:	01053783          	ld	a5,16(a0)
   1c978:	00478793          	addi	a5,a5,4
   1c97c:	00f53823          	sd	a5,16(a0)
   1c980:	00008067          	jalr	zero,0(ra)
  switch (sec->fmt) {
   1c984:	00200713          	addi	a4,zero,2
   1c988:	00e79863          	bne	a5,a4,1c998 <dwarf::cursor::skip_initial_length()+0x34>
    break;
  case format::dwarf64:
    pos += sizeof(uword) + sizeof(uint64_t);
   1c98c:	01053783          	ld	a5,16(a0)
   1c990:	00c78793          	addi	a5,a5,12
    break;
   1c994:	fe9ff06f          	jal	zero,1c97c <dwarf::cursor::skip_initial_length()+0x18>
void cursor::skip_initial_length() {
   1c998:	fe010113          	addi	sp,sp,-32
   1c99c:	00113c23          	sd	ra,24(sp)
   1c9a0:	00813823          	sd	s0,16(sp)
   1c9a4:	00913423          	sd	s1,8(sp)
  default:
    throw logic_error("cannot skip initial length with unknown format");
   1c9a8:	01000513          	addi	a0,zero,16
   1c9ac:	a25f90ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1c9b0:	00050493          	addi	s1,a0,0
   1c9b4:	0001a597          	auipc	a1,0x1a
   1c9b8:	30458593          	addi	a1,a1,772 # 36cb8 <std::piecewise_construct+0x8>
   1c9bc:	bf5f90ef          	jal	ra,165b0 <std::logic_error::logic_error(char const*)@plt>
   1c9c0:	00026617          	auipc	a2,0x26
   1c9c4:	aa863603          	ld	a2,-1368(a2) # 42468 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   1c9c8:	00026597          	auipc	a1,0x26
   1c9cc:	ba85b583          	ld	a1,-1112(a1) # 42570 <typeinfo for std::logic_error@GLIBCXX_3.4>
   1c9d0:	00048513          	addi	a0,s1,0
   1c9d4:	c8df90ef          	jal	ra,16660 <__cxa_throw@plt>
   1c9d8:	00050413          	addi	s0,a0,0
   1c9dc:	00048513          	addi	a0,s1,0
   1c9e0:	a91f90ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1c9e4:	00040513          	addi	a0,s0,0
   1c9e8:	ca9f90ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001c9ec <dwarf::cursor::cstr(unsigned long*)>:
  const char *p = this->cstr(&size);
  out.resize(size);
  memmove(&out.front(), p, size);
}

const char *cursor::cstr(size_t *size_out) {
   1c9ec:	00050613          	addi	a2,a0,0
  // Scan string size
  const char *p = pos;
   1c9f0:	01053503          	ld	a0,16(a0)
      { return _M_ptr; }
   1c9f4:	00063803          	ld	a6,0(a2)
  while (pos < sec->end && *pos)
   1c9f8:	01083703          	ld	a4,16(a6)
   1c9fc:	04e57063          	bgeu	a0,a4,1ca3c <dwarf::cursor::cstr(unsigned long*)+0x50>
   1ca00:	00050793          	addi	a5,a0,0
   1ca04:	0007c683          	lbu	a3,0(a5)
   1ca08:	00068a63          	beq	a3,zero,1ca1c <dwarf::cursor::cstr(unsigned long*)+0x30>
    pos++;
   1ca0c:	00178793          	addi	a5,a5,1
   1ca10:	00f63823          	sd	a5,16(a2)
  while (pos < sec->end && *pos)
   1ca14:	01083703          	ld	a4,16(a6)
   1ca18:	fee7e6e3          	bltu	a5,a4,1ca04 <dwarf::cursor::cstr(unsigned long*)+0x18>
  if (pos == sec->end)
   1ca1c:	02e78463          	beq	a5,a4,1ca44 <dwarf::cursor::cstr(unsigned long*)+0x58>
    throw format_error("unterminated string");
  if (size_out)
   1ca20:	00058663          	beq	a1,zero,1ca2c <dwarf::cursor::cstr(unsigned long*)+0x40>
    *size_out = pos - p;
   1ca24:	40a787b3          	sub	a5,a5,a0
   1ca28:	00f5b023          	sd	a5,0(a1)
  pos++;
   1ca2c:	01063783          	ld	a5,16(a2)
   1ca30:	00178793          	addi	a5,a5,1
   1ca34:	00f63823          	sd	a5,16(a2)
  return p;
}
   1ca38:	00008067          	jalr	zero,0(ra)
  while (pos < sec->end && *pos)
   1ca3c:	00050793          	addi	a5,a0,0
   1ca40:	fddff06f          	jal	zero,1ca1c <dwarf::cursor::cstr(unsigned long*)+0x30>
const char *cursor::cstr(size_t *size_out) {
   1ca44:	fe010113          	addi	sp,sp,-32
   1ca48:	00113c23          	sd	ra,24(sp)
   1ca4c:	00813823          	sd	s0,16(sp)
   1ca50:	00913423          	sd	s1,8(sp)
    throw format_error("unterminated string");
   1ca54:	01000513          	addi	a0,zero,16
   1ca58:	979f90ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1ca5c:	00050413          	addi	s0,a0,0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   1ca60:	0001a597          	auipc	a1,0x1a
   1ca64:	28858593          	addi	a1,a1,648 # 36ce8 <std::piecewise_construct+0x38>
   1ca68:	ca9f90ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   1ca6c:	00026797          	auipc	a5,0x26
   1ca70:	ae47b783          	ld	a5,-1308(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   1ca74:	01078793          	addi	a5,a5,16
   1ca78:	00f43023          	sd	a5,0(s0)
   1ca7c:	00026617          	auipc	a2,0x26
   1ca80:	8fc63603          	ld	a2,-1796(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   1ca84:	00026597          	auipc	a1,0x26
   1ca88:	8245b583          	ld	a1,-2012(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   1ca8c:	00040513          	addi	a0,s0,0
   1ca90:	bd1f90ef          	jal	ra,16660 <__cxa_throw@plt>
   1ca94:	00050493          	addi	s1,a0,0
   1ca98:	00040513          	addi	a0,s0,0
   1ca9c:	9d5f90ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1caa0:	00048513          	addi	a0,s1,0
   1caa4:	bedf90ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001caa8 <dwarf::cursor::string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
void cursor::string(std::string &out) {
   1caa8:	fd010113          	addi	sp,sp,-48
   1caac:	02113423          	sd	ra,40(sp)
   1cab0:	02813023          	sd	s0,32(sp)
   1cab4:	00913c23          	sd	s1,24(sp)
   1cab8:	00058413          	addi	s0,a1,0
  const char *p = this->cstr(&size);
   1cabc:	00810593          	addi	a1,sp,8
   1cac0:	f2dff0ef          	jal	ra,1c9ec <dwarf::cursor::cstr(unsigned long*)>
   1cac4:	00050493          	addi	s1,a0,0
      { this->resize(__n, _CharT()); }
   1cac8:	00000613          	addi	a2,zero,0
   1cacc:	00813583          	ld	a1,8(sp)
   1cad0:	00040513          	addi	a0,s0,0
   1cad4:	88df90ef          	jal	ra,16360 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@plt>
  memmove(&out.front(), p, size);
   1cad8:	00813603          	ld	a2,8(sp)
   1cadc:	00048593          	addi	a1,s1,0
   1cae0:	00043503          	ld	a0,0(s0)
   1cae4:	c3df90ef          	jal	ra,16720 <memmove@plt>
}
   1cae8:	02813083          	ld	ra,40(sp)
   1caec:	02013403          	ld	s0,32(sp)
   1caf0:	01813483          	ld	s1,24(sp)
   1caf4:	03010113          	addi	sp,sp,48
   1caf8:	00008067          	jalr	zero,0(ra)

000000000001cafc <dwarf::cursor::underflow()>:
  default:
    throw format_error("unknown form " + to_string(form));
  }
}

void cursor::underflow() {
   1cafc:	fe010113          	addi	sp,sp,-32
   1cb00:	00113c23          	sd	ra,24(sp)
   1cb04:	00813823          	sd	s0,16(sp)
   1cb08:	00913423          	sd	s1,8(sp)
  throw underflow_error("cannot read past end of DWARF section");
   1cb0c:	01000513          	addi	a0,zero,16
   1cb10:	8c1f90ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1cb14:	00050413          	addi	s0,a0,0
   1cb18:	0001a597          	auipc	a1,0x1a
   1cb1c:	1e858593          	addi	a1,a1,488 # 36d00 <std::piecewise_construct+0x50>
   1cb20:	c61f90ef          	jal	ra,16780 <std::underflow_error::underflow_error(char const*)@plt>
   1cb24:	00026617          	auipc	a2,0x26
   1cb28:	ab463603          	ld	a2,-1356(a2) # 425d8 <std::underflow_error::~underflow_error()@GLIBCXX_3.4>
   1cb2c:	00026597          	auipc	a1,0x26
   1cb30:	8c45b583          	ld	a1,-1852(a1) # 423f0 <typeinfo for std::underflow_error@GLIBCXX_3.4>
   1cb34:	00040513          	addi	a0,s0,0
   1cb38:	b29f90ef          	jal	ra,16660 <__cxa_throw@plt>
   1cb3c:	00050493          	addi	s1,a0,0
   1cb40:	00040513          	addi	a0,s0,0
   1cb44:	92df90ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1cb48:	00048513          	addi	a0,s1,0
   1cb4c:	b45f90ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001cb50 <dwarf::cursor::sleb128()>:
   1cb50:	00053583          	ld	a1,0(a0)
  unsigned shift = 0;
   1cb54:	00000713          	addi	a4,zero,0
  uint64_t result = 0;
   1cb58:	00000613          	addi	a2,zero,0
  while (pos < sec->end) {
   1cb5c:	01053783          	ld	a5,16(a0)
   1cb60:	0105b683          	ld	a3,16(a1)
   1cb64:	04d7f863          	bgeu	a5,a3,1cbb4 <dwarf::cursor::sleb128()+0x64>
    uint8_t byte = *(uint8_t *)(pos++);
   1cb68:	00178693          	addi	a3,a5,1
   1cb6c:	00d53823          	sd	a3,16(a0)
   1cb70:	0007c683          	lbu	a3,0(a5)
    result |= (uint64_t)(byte & 0x7f) << shift;
   1cb74:	07f6f793          	andi	a5,a3,127
   1cb78:	00e797b3          	sll	a5,a5,a4
   1cb7c:	00f66633          	or	a2,a2,a5
    shift += 7;
   1cb80:	0077071b          	addiw	a4,a4,7
    if ((byte & 0x80) == 0) {
   1cb84:	0186979b          	slliw	a5,a3,0x18
   1cb88:	4187d79b          	sraiw	a5,a5,0x18
   1cb8c:	fc07c8e3          	blt	a5,zero,1cb5c <dwarf::cursor::sleb128()+0xc>
      if (shift < sizeof(result) * 8 && (byte & 0x40))
   1cb90:	03f00793          	addi	a5,zero,63
   1cb94:	00e7ec63          	bltu	a5,a4,1cbac <dwarf::cursor::sleb128()+0x5c>
   1cb98:	0406f693          	andi	a3,a3,64
   1cb9c:	00068863          	beq	a3,zero,1cbac <dwarf::cursor::sleb128()+0x5c>
        result |= -((uint64_t)1 << shift);
   1cba0:	fff00793          	addi	a5,zero,-1
   1cba4:	00e797b3          	sll	a5,a5,a4
   1cba8:	00f66633          	or	a2,a2,a5
      return result;
   1cbac:	00060513          	addi	a0,a2,0
}
   1cbb0:	00008067          	jalr	zero,0(ra)
int64_t cursor::sleb128() {
   1cbb4:	ff010113          	addi	sp,sp,-16
   1cbb8:	00113423          	sd	ra,8(sp)
  underflow();
   1cbbc:	f41ff0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
  return 0;
   1cbc0:	00000513          	addi	a0,zero,0
}
   1cbc4:	00813083          	ld	ra,8(sp)
   1cbc8:	01010113          	addi	sp,sp,16
   1cbcc:	00008067          	jalr	zero,0(ra)

000000000001cbd0 <dwarf::cursor::skip_form(dwarf::DW_FORM)>:
void cursor::skip_form(DW_FORM form) {
   1cbd0:	fa010113          	addi	sp,sp,-96
   1cbd4:	04113c23          	sd	ra,88(sp)
   1cbd8:	04813823          	sd	s0,80(sp)
   1cbdc:	04913423          	sd	s1,72(sp)
   1cbe0:	05213023          	sd	s2,64(sp)
   1cbe4:	00058493          	addi	s1,a1,0
  switch (form) {
   1cbe8:	02000793          	addi	a5,zero,32
   1cbec:	34b7ec63          	bltu	a5,a1,1cf44 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x374>
   1cbf0:	00050413          	addi	s0,a0,0
   1cbf4:	00259793          	slli	a5,a1,0x2
   1cbf8:	0001a717          	auipc	a4,0x1a
   1cbfc:	1b870713          	addi	a4,a4,440 # 36db0 <std::piecewise_construct+0x100>
   1cc00:	00e787b3          	add	a5,a5,a4
   1cc04:	0007a783          	lw	a5,0(a5)
   1cc08:	00e787b3          	add	a5,a5,a4
   1cc0c:	00078067          	jalr	zero,0(a5)
    while (pos < sec->end) {
   1cc10:	01053783          	ld	a5,16(a0)
   1cc14:	00053503          	ld	a0,0(a0)
   1cc18:	01053703          	ld	a4,16(a0)
    std::uint64_t result = 0;
   1cc1c:	00000593          	addi	a1,zero,0
    int shift = 0;
   1cc20:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   1cc24:	02e7fa63          	bgeu	a5,a4,1cc58 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x88>
      uint8_t byte = *(uint8_t *)(pos++);
   1cc28:	00178793          	addi	a5,a5,1
   1cc2c:	00f43823          	sd	a5,16(s0)
   1cc30:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1cc34:	07f77693          	andi	a3,a4,127
   1cc38:	00c696b3          	sll	a3,a3,a2
   1cc3c:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   1cc40:	0187171b          	slliw	a4,a4,0x18
   1cc44:	4187571b          	sraiw	a4,a4,0x18
   1cc48:	00075e63          	bge	a4,zero,1cc64 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x94>
      shift += 7;
   1cc4c:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   1cc50:	01053703          	ld	a4,16(a0)
   1cc54:	fce7eae3          	bltu	a5,a4,1cc28 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x58>
    underflow();
   1cc58:	00040513          	addi	a0,s0,0
   1cc5c:	ea1ff0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    return 0;
   1cc60:	00000593          	addi	a1,zero,0
    skip_form((DW_FORM)uleb128());
   1cc64:	0005859b          	addiw	a1,a1,0
   1cc68:	00040513          	addi	a0,s0,0
   1cc6c:	f65ff0ef          	jal	ra,1cbd0 <dwarf::cursor::skip_form(dwarf::DW_FORM)>
    break;
   1cc70:	0640006f          	jal	zero,1ccd4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    while (pos < sec->end) {
   1cc74:	01053783          	ld	a5,16(a0)
   1cc78:	00053503          	ld	a0,0(a0)
   1cc7c:	01053703          	ld	a4,16(a0)
    std::uint64_t result = 0;
   1cc80:	00000593          	addi	a1,zero,0
    int shift = 0;
   1cc84:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   1cc88:	02e7fa63          	bgeu	a5,a4,1ccbc <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xec>
      uint8_t byte = *(uint8_t *)(pos++);
   1cc8c:	00178793          	addi	a5,a5,1
   1cc90:	00f43823          	sd	a5,16(s0)
   1cc94:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1cc98:	07f77693          	andi	a3,a4,127
   1cc9c:	00c696b3          	sll	a3,a3,a2
   1cca0:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   1cca4:	0187171b          	slliw	a4,a4,0x18
   1cca8:	4187571b          	sraiw	a4,a4,0x18
   1ccac:	00075e63          	bge	a4,zero,1ccc8 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xf8>
      shift += 7;
   1ccb0:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   1ccb4:	01053703          	ld	a4,16(a0)
   1ccb8:	fce7eae3          	bltu	a5,a4,1cc8c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xbc>
    underflow();
   1ccbc:	00040513          	addi	a0,s0,0
   1ccc0:	e3dff0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    return 0;
   1ccc4:	00000593          	addi	a1,zero,0
    pos += tmp;
   1ccc8:	01043783          	ld	a5,16(s0)
   1cccc:	00b787b3          	add	a5,a5,a1
   1ccd0:	00f43823          	sd	a5,16(s0)
}
   1ccd4:	05813083          	ld	ra,88(sp)
   1ccd8:	05013403          	ld	s0,80(sp)
   1ccdc:	04813483          	ld	s1,72(sp)
   1cce0:	04013903          	ld	s2,64(sp)
   1cce4:	06010113          	addi	sp,sp,96
   1cce8:	00008067          	jalr	zero,0(ra)
    pos += sec->addr_size;
   1ccec:	00053783          	ld	a5,0(a0)
   1ccf0:	0207e703          	lwu	a4,32(a5)
   1ccf4:	01053783          	ld	a5,16(a0)
   1ccf8:	00e787b3          	add	a5,a5,a4
   1ccfc:	00f53823          	sd	a5,16(a0)
    break;
   1cd00:	fd5ff06f          	jal	zero,1ccd4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    switch (sec->fmt) {
   1cd04:	00053783          	ld	a5,0(a0)
   1cd08:	0187a783          	lw	a5,24(a5)
   1cd0c:	00200713          	addi	a4,zero,2
   1cd10:	02e78263          	beq	a5,a4,1cd34 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x164>
   1cd14:	fcf740e3          	blt	a4,a5,1ccd4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
   1cd18:	02078663          	beq	a5,zero,1cd44 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x174>
   1cd1c:	00100713          	addi	a4,zero,1
   1cd20:	fae79ae3          	bne	a5,a4,1ccd4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
      pos += 4;
   1cd24:	01053783          	ld	a5,16(a0)
   1cd28:	00478793          	addi	a5,a5,4
   1cd2c:	00f53823          	sd	a5,16(a0)
      break;
   1cd30:	fa5ff06f          	jal	zero,1ccd4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
      pos += 8;
   1cd34:	01053783          	ld	a5,16(a0)
   1cd38:	00878793          	addi	a5,a5,8
   1cd3c:	00f53823          	sd	a5,16(a0)
      break;
   1cd40:	f95ff06f          	jal	zero,1ccd4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
      throw logic_error("cannot read form with unknown format");
   1cd44:	01000513          	addi	a0,zero,16
   1cd48:	e88f90ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1cd4c:	00050413          	addi	s0,a0,0
   1cd50:	0001a597          	auipc	a1,0x1a
   1cd54:	fd858593          	addi	a1,a1,-40 # 36d28 <std::piecewise_construct+0x78>
   1cd58:	859f90ef          	jal	ra,165b0 <std::logic_error::logic_error(char const*)@plt>
   1cd5c:	00025617          	auipc	a2,0x25
   1cd60:	70c63603          	ld	a2,1804(a2) # 42468 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   1cd64:	00026597          	auipc	a1,0x26
   1cd68:	80c5b583          	ld	a1,-2036(a1) # 42570 <typeinfo for std::logic_error@GLIBCXX_3.4>
   1cd6c:	00040513          	addi	a0,s0,0
   1cd70:	8f1f90ef          	jal	ra,16660 <__cxa_throw@plt>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1cd74:	00053783          	ld	a5,0(a0)
   1cd78:	0107b703          	ld	a4,16(a5)
   1cd7c:	01053783          	ld	a5,16(a0)
   1cd80:	00e7e463          	bltu	a5,a4,1cd88 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x1b8>
      underflow();
   1cd84:	d79ff0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1cd88:	01043783          	ld	a5,16(s0)
    if (sec->ord == byte_order::lsb) {
   1cd8c:	00043703          	ld	a4,0(s0)
   1cd90:	01c72703          	lw	a4,28(a4)
   1cd94:	28070c63          	beq	a4,zero,1d02c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x45c>
        val = (val << 8) | (uint64_t)p[i];
   1cd98:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1cd9c:	2940006f          	jal	zero,1d030 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x460>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1cda0:	00053783          	ld	a5,0(a0)
   1cda4:	0107b703          	ld	a4,16(a5)
   1cda8:	01053783          	ld	a5,16(a0)
   1cdac:	40f70633          	sub	a2,a4,a5
   1cdb0:	00100693          	addi	a3,zero,1
   1cdb4:	00c6f463          	bgeu	a3,a2,1cdbc <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x1ec>
   1cdb8:	00e7e663          	bltu	a5,a4,1cdc4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x1f4>
      underflow();
   1cdbc:	00040513          	addi	a0,s0,0
   1cdc0:	d3dff0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1cdc4:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1cdc8:	00043783          	ld	a5,0(s0)
   1cdcc:	01c7a783          	lw	a5,28(a5)
   1cdd0:	02079263          	bne	a5,zero,1cdf4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x224>
        val |= ((uint64_t)p[i]) << (i * 8);
   1cdd4:	00174783          	lbu	a5,1(a4)
   1cdd8:	00879793          	slli	a5,a5,0x8
   1cddc:	00074683          	lbu	a3,0(a4)
   1cde0:	00d7e7b3          	or	a5,a5,a3
    pos += tmp;
   1cde4:	00278793          	addi	a5,a5,2
   1cde8:	00f70733          	add	a4,a4,a5
   1cdec:	00e43823          	sd	a4,16(s0)
    break;
   1cdf0:	ee5ff06f          	jal	zero,1ccd4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
        val = (val << 8) | (uint64_t)p[i];
   1cdf4:	00074783          	lbu	a5,0(a4)
   1cdf8:	00879793          	slli	a5,a5,0x8
   1cdfc:	00174683          	lbu	a3,1(a4)
   1ce00:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1ce04:	fe1ff06f          	jal	zero,1cde4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x214>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ce08:	00053783          	ld	a5,0(a0)
   1ce0c:	0107b703          	ld	a4,16(a5)
   1ce10:	01053783          	ld	a5,16(a0)
   1ce14:	40f70633          	sub	a2,a4,a5
   1ce18:	00300693          	addi	a3,zero,3
   1ce1c:	00c6f463          	bgeu	a3,a2,1ce24 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x254>
   1ce20:	00e7e663          	bltu	a5,a4,1ce2c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x25c>
      underflow();
   1ce24:	00040513          	addi	a0,s0,0
   1ce28:	cd5ff0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1ce2c:	01043583          	ld	a1,16(s0)
    if (sec->ord == byte_order::lsb) {
   1ce30:	00043783          	ld	a5,0(s0)
   1ce34:	01c7a783          	lw	a5,28(a5)
   1ce38:	04079063          	bne	a5,zero,1ce78 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2a8>
   1ce3c:	00058613          	addi	a2,a1,0
   1ce40:	00000713          	addi	a4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1ce44:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1ce48:	00064683          	lbu	a3,0(a2)
   1ce4c:	00e696b3          	sll	a3,a3,a4
   1ce50:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1ce54:	00160613          	addi	a2,a2,1
   1ce58:	0087071b          	addiw	a4,a4,8
   1ce5c:	fea716e3          	bne	a4,a0,1ce48 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x278>
    pos += tmp;
   1ce60:	02079793          	slli	a5,a5,0x20
   1ce64:	0207d793          	srli	a5,a5,0x20
   1ce68:	00478793          	addi	a5,a5,4
   1ce6c:	00f585b3          	add	a1,a1,a5
   1ce70:	00b43823          	sd	a1,16(s0)
    break;
   1ce74:	e61ff06f          	jal	zero,1ccd4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
   1ce78:	00058713          	addi	a4,a1,0
   1ce7c:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1ce80:	00000793          	addi	a5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1ce84:	00879793          	slli	a5,a5,0x8
   1ce88:	00074683          	lbu	a3,0(a4)
   1ce8c:	00f6e7b3          	or	a5,a3,a5
      for (unsigned i = 0; i < sizeof(T); i++)
   1ce90:	00170713          	addi	a4,a4,1
   1ce94:	fee618e3          	bne	a2,a4,1ce84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2b4>
   1ce98:	fc9ff06f          	jal	zero,1ce60 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x290>
    pos += 1;
   1ce9c:	01053783          	ld	a5,16(a0)
   1cea0:	00178793          	addi	a5,a5,1
   1cea4:	00f53823          	sd	a5,16(a0)
    break;
   1cea8:	e2dff06f          	jal	zero,1ccd4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    pos += 2;
   1ceac:	01053783          	ld	a5,16(a0)
   1ceb0:	00278793          	addi	a5,a5,2
   1ceb4:	00f53823          	sd	a5,16(a0)
    break;
   1ceb8:	e1dff06f          	jal	zero,1ccd4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    pos += 4;
   1cebc:	01053783          	ld	a5,16(a0)
   1cec0:	00478793          	addi	a5,a5,4
   1cec4:	00f53823          	sd	a5,16(a0)
    break;
   1cec8:	e0dff06f          	jal	zero,1ccd4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    pos += 8;
   1cecc:	01053783          	ld	a5,16(a0)
   1ced0:	00878793          	addi	a5,a5,8
   1ced4:	00f53823          	sd	a5,16(a0)
    break;
   1ced8:	dfdff06f          	jal	zero,1ccd4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    while (pos < sec->end && (*(uint8_t *)pos & 0x80))
   1cedc:	01053783          	ld	a5,16(a0)
   1cee0:	00053683          	ld	a3,0(a0)
   1cee4:	0106b703          	ld	a4,16(a3)
   1cee8:	00e7fe63          	bgeu	a5,a4,1cf04 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x334>
   1ceec:	00078703          	lb	a4,0(a5)
   1cef0:	00075a63          	bge	a4,zero,1cf04 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x334>
      pos++;
   1cef4:	00178793          	addi	a5,a5,1
   1cef8:	00f43823          	sd	a5,16(s0)
    while (pos < sec->end && (*(uint8_t *)pos & 0x80))
   1cefc:	0106b703          	ld	a4,16(a3)
   1cf00:	fee7e6e3          	bltu	a5,a4,1ceec <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x31c>
    pos++;
   1cf04:	00178793          	addi	a5,a5,1
   1cf08:	00f43823          	sd	a5,16(s0)
    break;
   1cf0c:	dc9ff06f          	jal	zero,1ccd4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    while (pos < sec->end && *pos)
   1cf10:	01053783          	ld	a5,16(a0)
   1cf14:	00053683          	ld	a3,0(a0)
   1cf18:	0106b703          	ld	a4,16(a3)
   1cf1c:	00e7fe63          	bgeu	a5,a4,1cf38 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x368>
   1cf20:	0007c703          	lbu	a4,0(a5)
   1cf24:	00070a63          	beq	a4,zero,1cf38 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x368>
      pos++;
   1cf28:	00178793          	addi	a5,a5,1
   1cf2c:	00f43823          	sd	a5,16(s0)
    while (pos < sec->end && *pos)
   1cf30:	0106b703          	ld	a4,16(a3)
   1cf34:	fee7e6e3          	bltu	a5,a4,1cf20 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x350>
    pos++;
   1cf38:	00178793          	addi	a5,a5,1
   1cf3c:	00f43823          	sd	a5,16(s0)
    break;
   1cf40:	d95ff06f          	jal	zero,1ccd4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    throw format_error("unknown form " + to_string(form));
   1cf44:	01000513          	addi	a0,zero,16
   1cf48:	c88f90ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1cf4c:	00050913          	addi	s2,a0,0
   1cf50:	00048593          	addi	a1,s1,0
   1cf54:	00010513          	addi	a0,sp,0
   1cf58:	2e1120ef          	jal	ra,2fa38 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1cf5c:	0001a617          	auipc	a2,0x1a
   1cf60:	df460613          	addi	a2,a2,-524 # 36d50 <std::piecewise_construct+0xa0>
   1cf64:	00000593          	addi	a1,zero,0
   1cf68:	00010513          	addi	a0,sp,0
   1cf6c:	bd4f90ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1cf70:	00050593          	addi	a1,a0,0
   1cf74:	02010413          	addi	s0,sp,32
   1cf78:	00040513          	addi	a0,s0,0
   1cf7c:	c94f90ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   1cf80:	00040593          	addi	a1,s0,0
   1cf84:	00090513          	addi	a0,s2,0
   1cf88:	db8f90ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1cf8c:	00025797          	auipc	a5,0x25
   1cf90:	5c47b783          	ld	a5,1476(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   1cf94:	01078793          	addi	a5,a5,16
   1cf98:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   1cf9c:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   1cfa0:	03010793          	addi	a5,sp,48
   1cfa4:	00f50463          	beq	a0,a5,1cfac <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x3dc>
   1cfa8:	d08f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1cfac:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   1cfb0:	01010793          	addi	a5,sp,16
   1cfb4:	00f50463          	beq	a0,a5,1cfbc <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x3ec>
   1cfb8:	cf8f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1cfbc:	00025617          	auipc	a2,0x25
   1cfc0:	3bc63603          	ld	a2,956(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   1cfc4:	00025597          	auipc	a1,0x25
   1cfc8:	2e45b583          	ld	a1,740(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   1cfcc:	00090513          	addi	a0,s2,0
   1cfd0:	e90f90ef          	jal	ra,16660 <__cxa_throw@plt>
      throw logic_error("cannot read form with unknown format");
   1cfd4:	00050493          	addi	s1,a0,0
   1cfd8:	00040513          	addi	a0,s0,0
   1cfdc:	c94f90ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1cfe0:	00048513          	addi	a0,s1,0
   1cfe4:	eacf90ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1cfe8:	00050413          	addi	s0,a0,0
   1cfec:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   1cff0:	03010793          	addi	a5,sp,48
   1cff4:	00f50463          	beq	a0,a5,1cffc <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x42c>
   1cff8:	cb8f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1cffc:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   1d000:	01010793          	addi	a5,sp,16
   1d004:	00f50463          	beq	a0,a5,1d00c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x43c>
   1d008:	ca8f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
    throw format_error("unknown form " + to_string(form));
   1d00c:	00090513          	addi	a0,s2,0
   1d010:	c60f90ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1d014:	00040513          	addi	a0,s0,0
   1d018:	e78f90ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1d01c:	00050413          	addi	s0,a0,0
   1d020:	fddff06f          	jal	zero,1cffc <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x42c>
   1d024:	00050413          	addi	s0,a0,0
   1d028:	fe5ff06f          	jal	zero,1d00c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x43c>
        val |= ((uint64_t)p[i]) << (i * 8);
   1d02c:	0007c703          	lbu	a4,0(a5)
    pos += tmp;
   1d030:	00170713          	addi	a4,a4,1
   1d034:	00e787b3          	add	a5,a5,a4
   1d038:	00f43823          	sd	a5,16(s0)
    break;
   1d03c:	c99ff06f          	jal	zero,1ccd4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>

000000000001d040 <dwarf::cursor::subsection()>:
shared_ptr<section> cursor::subsection() {
   1d040:	fd010113          	addi	sp,sp,-48
   1d044:	02113423          	sd	ra,40(sp)
   1d048:	02813023          	sd	s0,32(sp)
   1d04c:	00913c23          	sd	s1,24(sp)
   1d050:	01213823          	sd	s2,16(sp)
   1d054:	01313423          	sd	s3,8(sp)
   1d058:	01413023          	sd	s4,0(sp)
   1d05c:	00050913          	addi	s2,a0,0
   1d060:	00058493          	addi	s1,a1,0
  const char *begin = pos;
   1d064:	0105b983          	ld	s3,16(a1)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1d068:	0005b783          	ld	a5,0(a1)
   1d06c:	0107b783          	ld	a5,16(a5)
   1d070:	413786b3          	sub	a3,a5,s3
   1d074:	00300713          	addi	a4,zero,3
   1d078:	00d77463          	bgeu	a4,a3,1d080 <dwarf::cursor::subsection()+0x40>
   1d07c:	00f9e663          	bltu	s3,a5,1d088 <dwarf::cursor::subsection()+0x48>
      underflow();
   1d080:	00048513          	addi	a0,s1,0
   1d084:	a79ff0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1d088:	0104b583          	ld	a1,16(s1)
   1d08c:	0004b503          	ld	a0,0(s1)
    if (sec->ord == byte_order::lsb) {
   1d090:	01c52783          	lw	a5,28(a0)
   1d094:	0e079a63          	bne	a5,zero,1d188 <dwarf::cursor::subsection()+0x148>
   1d098:	00058613          	addi	a2,a1,0
   1d09c:	00000713          	addi	a4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1d0a0:	02000813          	addi	a6,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1d0a4:	00064683          	lbu	a3,0(a2)
   1d0a8:	00e696b3          	sll	a3,a3,a4
   1d0ac:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1d0b0:	00160613          	addi	a2,a2,1
   1d0b4:	0087071b          	addiw	a4,a4,8
   1d0b8:	ff0716e3          	bne	a4,a6,1d0a4 <dwarf::cursor::subsection()+0x64>
    pos += sizeof(T);
   1d0bc:	00458593          	addi	a1,a1,4
   1d0c0:	00b4b823          	sd	a1,16(s1)
   1d0c4:	02079793          	slli	a5,a5,0x20
   1d0c8:	0207d793          	srli	a5,a5,0x20
  if (length < 0xfffffff0) {
   1d0cc:	00100713          	addi	a4,zero,1
   1d0d0:	02071713          	slli	a4,a4,0x20
   1d0d4:	fef70713          	addi	a4,a4,-17
   1d0d8:	0cf76a63          	bltu	a4,a5,1d1ac <dwarf::cursor::subsection()+0x16c>
    length += sizeof(uword);
   1d0dc:	00478793          	addi	a5,a5,4
    fmt = format::dwarf32;
   1d0e0:	00100a13          	addi	s4,zero,1
  pos = begin + length;
   1d0e4:	00f98433          	add	s0,s3,a5
   1d0e8:	0084b823          	sd	s0,16(s1)
   1d0ec:	0004b483          	ld	s1,0(s1)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   1d0f0:	00093023          	sd	zero,0(s2)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1d0f4:	06000513          	addi	a0,zero,96
   1d0f8:	bc8f90ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1d0fc:	00052423          	sw	zero,8(a0)
   1d100:	00052623          	sw	zero,12(a0)
   1d104:	00052823          	sw	zero,16(a0)
   1d108:	00052a23          	sw	zero,20(a0)
   1d10c:	00052c23          	sw	zero,24(a0)
   1d110:	00052e23          	sw	zero,28(a0)
   1d114:	02053023          	sd	zero,32(a0)
   1d118:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   1d11c:	00100793          	addi	a5,zero,1
   1d120:	02f52823          	sw	a5,48(a0)
   1d124:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   1d128:	00025797          	auipc	a5,0x25
   1d12c:	4907b783          	ld	a5,1168(a5) # 425b8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc40>
   1d130:	01078793          	addi	a5,a5,16
   1d134:	00f53023          	sd	a5,0(a0)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1d138:	0004a703          	lw	a4,0(s1)
   1d13c:	01c4a783          	lw	a5,28(s1)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   1d140:	02e52c23          	sw	a4,56(a0)
   1d144:	05353023          	sd	s3,64(a0)
   1d148:	04853423          	sd	s0,72(a0)
   1d14c:	05452823          	sw	s4,80(a0)
        ord(ord), addr_size(addr_size) {}
   1d150:	04f52a23          	sw	a5,84(a0)
   1d154:	04052c23          	sw	zero,88(a0)
	  _M_pi = __pi;
   1d158:	00a93423          	sd	a0,8(s2)
   1d15c:	03850793          	addi	a5,a0,56
	  __p = __pi->_M_ptr();
   1d160:	00f93023          	sd	a5,0(s2)
}
   1d164:	00090513          	addi	a0,s2,0
   1d168:	02813083          	ld	ra,40(sp)
   1d16c:	02013403          	ld	s0,32(sp)
   1d170:	01813483          	ld	s1,24(sp)
   1d174:	01013903          	ld	s2,16(sp)
   1d178:	00813983          	ld	s3,8(sp)
   1d17c:	00013a03          	ld	s4,0(sp)
   1d180:	03010113          	addi	sp,sp,48
   1d184:	00008067          	jalr	zero,0(ra)
   1d188:	00058713          	addi	a4,a1,0
   1d18c:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1d190:	00000793          	addi	a5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1d194:	00879793          	slli	a5,a5,0x8
   1d198:	00074683          	lbu	a3,0(a4)
   1d19c:	00f6e7b3          	or	a5,a3,a5
      for (unsigned i = 0; i < sizeof(T); i++)
   1d1a0:	00170713          	addi	a4,a4,1
   1d1a4:	fec718e3          	bne	a4,a2,1d194 <dwarf::cursor::subsection()+0x154>
   1d1a8:	f15ff06f          	jal	zero,1d0bc <dwarf::cursor::subsection()+0x7c>
  } else if (length == 0xffffffff) {
   1d1ac:	fff00713          	addi	a4,zero,-1
   1d1b0:	02075713          	srli	a4,a4,0x20
   1d1b4:	08e79063          	bne	a5,a4,1d234 <dwarf::cursor::subsection()+0x1f4>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1d1b8:	01053783          	ld	a5,16(a0)
   1d1bc:	40b786b3          	sub	a3,a5,a1
   1d1c0:	00700713          	addi	a4,zero,7
   1d1c4:	00d77463          	bgeu	a4,a3,1d1cc <dwarf::cursor::subsection()+0x18c>
   1d1c8:	00f5e663          	bltu	a1,a5,1d1d4 <dwarf::cursor::subsection()+0x194>
      underflow();
   1d1cc:	00048513          	addi	a0,s1,0
   1d1d0:	92dff0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1d1d4:	0104b703          	ld	a4,16(s1)
    if (sec->ord == byte_order::lsb) {
   1d1d8:	0004b783          	ld	a5,0(s1)
   1d1dc:	01c7a783          	lw	a5,28(a5)
   1d1e0:	02079863          	bne	a5,zero,1d210 <dwarf::cursor::subsection()+0x1d0>
   1d1e4:	00000693          	addi	a3,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1d1e8:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1d1ec:	00074603          	lbu	a2,0(a4)
   1d1f0:	00d61633          	sll	a2,a2,a3
   1d1f4:	00c7e7b3          	or	a5,a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1d1f8:	00170713          	addi	a4,a4,1
   1d1fc:	0086869b          	addiw	a3,a3,8
   1d200:	feb696e3          	bne	a3,a1,1d1ec <dwarf::cursor::subsection()+0x1ac>
    length += sizeof(uword) + sizeof(uint64_t);
   1d204:	00c78793          	addi	a5,a5,12
    fmt = format::dwarf64;
   1d208:	00200a13          	addi	s4,zero,2
   1d20c:	ed9ff06f          	jal	zero,1d0e4 <dwarf::cursor::subsection()+0xa4>
   1d210:	00070693          	addi	a3,a4,0
   1d214:	00870713          	addi	a4,a4,8
    uint64_t val = 0;
   1d218:	00000793          	addi	a5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1d21c:	00879793          	slli	a5,a5,0x8
   1d220:	0006c603          	lbu	a2,0(a3)
   1d224:	00f667b3          	or	a5,a2,a5
      for (unsigned i = 0; i < sizeof(T); i++)
   1d228:	00168693          	addi	a3,a3,1
   1d22c:	fee698e3          	bne	a3,a4,1d21c <dwarf::cursor::subsection()+0x1dc>
   1d230:	fd5ff06f          	jal	zero,1d204 <dwarf::cursor::subsection()+0x1c4>
    throw format_error("initial length has reserved value");
   1d234:	01000513          	addi	a0,zero,16
   1d238:	998f90ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1d23c:	00050413          	addi	s0,a0,0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   1d240:	0001a597          	auipc	a1,0x1a
   1d244:	b2058593          	addi	a1,a1,-1248 # 36d60 <std::piecewise_construct+0xb0>
   1d248:	cc8f90ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   1d24c:	00025797          	auipc	a5,0x25
   1d250:	3047b783          	ld	a5,772(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   1d254:	01078793          	addi	a5,a5,16
   1d258:	00f43023          	sd	a5,0(s0)
   1d25c:	00025617          	auipc	a2,0x25
   1d260:	11c63603          	ld	a2,284(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   1d264:	00025597          	auipc	a1,0x25
   1d268:	0445b583          	ld	a1,68(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   1d26c:	00040513          	addi	a0,s0,0
   1d270:	bf0f90ef          	jal	ra,16660 <__cxa_throw@plt>
   1d274:	00050493          	addi	s1,a0,0
   1d278:	00040513          	addi	a0,s0,0
   1d27c:	9f4f90ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1d280:	00048513          	addi	a0,s1,0
   1d284:	c0cf90ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001d288 <dwarf::cursor::offset()>:
section_offset cursor::offset() {
   1d288:	fe010113          	addi	sp,sp,-32
   1d28c:	00113c23          	sd	ra,24(sp)
   1d290:	00813823          	sd	s0,16(sp)
   1d294:	00913423          	sd	s1,8(sp)
   1d298:	00050413          	addi	s0,a0,0
      { return _M_ptr; }
   1d29c:	00053783          	ld	a5,0(a0)
  switch (sec->fmt) {
   1d2a0:	0187a703          	lw	a4,24(a5)
   1d2a4:	00100693          	addi	a3,zero,1
   1d2a8:	06d70463          	beq	a4,a3,1d310 <dwarf::cursor::offset()+0x88>
   1d2ac:	00200693          	addi	a3,zero,2
   1d2b0:	12d71063          	bne	a4,a3,1d3d0 <dwarf::cursor::offset()+0x148>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1d2b4:	0107b703          	ld	a4,16(a5)
   1d2b8:	01053783          	ld	a5,16(a0)
   1d2bc:	40f70633          	sub	a2,a4,a5
   1d2c0:	00700693          	addi	a3,zero,7
   1d2c4:	00c6f463          	bgeu	a3,a2,1d2cc <dwarf::cursor::offset()+0x44>
   1d2c8:	00e7e663          	bltu	a5,a4,1d2d4 <dwarf::cursor::offset()+0x4c>
      underflow();
   1d2cc:	00040513          	addi	a0,s0,0
   1d2d0:	82dff0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1d2d4:	01043603          	ld	a2,16(s0)
    if (sec->ord == byte_order::lsb) {
   1d2d8:	00043783          	ld	a5,0(s0)
   1d2dc:	01c7a783          	lw	a5,28(a5)
   1d2e0:	0c079663          	bne	a5,zero,1d3ac <dwarf::cursor::offset()+0x124>
   1d2e4:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   1d2e8:	00000513          	addi	a0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1d2ec:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1d2f0:	0006c703          	lbu	a4,0(a3)
   1d2f4:	00f71733          	sll	a4,a4,a5
   1d2f8:	00e56533          	or	a0,a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1d2fc:	00168693          	addi	a3,a3,1
   1d300:	0087879b          	addiw	a5,a5,8
   1d304:	feb796e3          	bne	a5,a1,1d2f0 <dwarf::cursor::offset()+0x68>
    pos += sizeof(T);
   1d308:	00860713          	addi	a4,a2,8
    return fixed<uint64_t>();
   1d30c:	0640006f          	jal	zero,1d370 <dwarf::cursor::offset()+0xe8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1d310:	0107b703          	ld	a4,16(a5)
   1d314:	01053783          	ld	a5,16(a0)
   1d318:	40f70633          	sub	a2,a4,a5
   1d31c:	00300693          	addi	a3,zero,3
   1d320:	00c6f463          	bgeu	a3,a2,1d328 <dwarf::cursor::offset()+0xa0>
   1d324:	00e7e663          	bltu	a5,a4,1d330 <dwarf::cursor::offset()+0xa8>
      underflow();
   1d328:	00040513          	addi	a0,s0,0
   1d32c:	fd0ff0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1d330:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1d334:	00043783          	ld	a5,0(s0)
   1d338:	01c7a783          	lw	a5,28(a5)
   1d33c:	04079663          	bne	a5,zero,1d388 <dwarf::cursor::offset()+0x100>
   1d340:	00070593          	addi	a1,a4,0
   1d344:	00000693          	addi	a3,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1d348:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1d34c:	0005c603          	lbu	a2,0(a1)
   1d350:	00d61633          	sll	a2,a2,a3
   1d354:	00c7e7b3          	or	a5,a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1d358:	00158593          	addi	a1,a1,1
   1d35c:	0086869b          	addiw	a3,a3,8
   1d360:	fea696e3          	bne	a3,a0,1d34c <dwarf::cursor::offset()+0xc4>
    pos += sizeof(T);
   1d364:	00470713          	addi	a4,a4,4
   1d368:	02079513          	slli	a0,a5,0x20
   1d36c:	02055513          	srli	a0,a0,0x20
   1d370:	00e43823          	sd	a4,16(s0)
}
   1d374:	01813083          	ld	ra,24(sp)
   1d378:	01013403          	ld	s0,16(sp)
   1d37c:	00813483          	ld	s1,8(sp)
   1d380:	02010113          	addi	sp,sp,32
   1d384:	00008067          	jalr	zero,0(ra)
   1d388:	00070693          	addi	a3,a4,0
   1d38c:	00470593          	addi	a1,a4,4
    uint64_t val = 0;
   1d390:	00000793          	addi	a5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1d394:	00879793          	slli	a5,a5,0x8
   1d398:	0006c603          	lbu	a2,0(a3)
   1d39c:	00f667b3          	or	a5,a2,a5
      for (unsigned i = 0; i < sizeof(T); i++)
   1d3a0:	00168693          	addi	a3,a3,1
   1d3a4:	feb698e3          	bne	a3,a1,1d394 <dwarf::cursor::offset()+0x10c>
   1d3a8:	fbdff06f          	jal	zero,1d364 <dwarf::cursor::offset()+0xdc>
   1d3ac:	00060793          	addi	a5,a2,0
   1d3b0:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1d3b4:	00000513          	addi	a0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1d3b8:	00851513          	slli	a0,a0,0x8
   1d3bc:	0007c703          	lbu	a4,0(a5)
   1d3c0:	00a76533          	or	a0,a4,a0
      for (unsigned i = 0; i < sizeof(T); i++)
   1d3c4:	00178793          	addi	a5,a5,1
   1d3c8:	fed798e3          	bne	a5,a3,1d3b8 <dwarf::cursor::offset()+0x130>
   1d3cc:	f3dff06f          	jal	zero,1d308 <dwarf::cursor::offset()+0x80>
    throw logic_error("cannot read offset with unknown format");
   1d3d0:	01000513          	addi	a0,zero,16
   1d3d4:	ffdf80ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1d3d8:	00050413          	addi	s0,a0,0
   1d3dc:	0001a597          	auipc	a1,0x1a
   1d3e0:	9ac58593          	addi	a1,a1,-1620 # 36d88 <std::piecewise_construct+0xd8>
   1d3e4:	9ccf90ef          	jal	ra,165b0 <std::logic_error::logic_error(char const*)@plt>
   1d3e8:	00025617          	auipc	a2,0x25
   1d3ec:	08063603          	ld	a2,128(a2) # 42468 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   1d3f0:	00025597          	auipc	a1,0x25
   1d3f4:	1805b583          	ld	a1,384(a1) # 42570 <typeinfo for std::logic_error@GLIBCXX_3.4>
   1d3f8:	00040513          	addi	a0,s0,0
   1d3fc:	a64f90ef          	jal	ra,16660 <__cxa_throw@plt>
   1d400:	00050493          	addi	s1,a0,0
   1d404:	00040513          	addi	a0,s0,0
   1d408:	868f90ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1d40c:	00048513          	addi	a0,s1,0
   1d410:	a80f90ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001d414 <dwarf::die::die(dwarf::unit const*)>:

using namespace std;

DWARFPP_BEGIN_NAMESPACE

die::die(const unit *cu) : cu(cu), abbrev(nullptr) {}
   1d414:	00b53423          	sd	a1,8(a0)
   1d418:	00053823          	sd	zero,16(a0)
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   1d41c:	02050793          	addi	a5,a0,32
   1d420:	04f53823          	sd	a5,80(a0)
   1d424:	04f53c23          	sd	a5,88(a0)
   1d428:	05050793          	addi	a5,a0,80
   1d42c:	06f53023          	sd	a5,96(a0)
   1d430:	00008067          	jalr	zero,0(ra)

000000000001d434 <dwarf::die::get_unit() const>:

const unit &die::get_unit() const { return *cu; }
   1d434:	00853503          	ld	a0,8(a0)
   1d438:	00008067          	jalr	zero,0(ra)

000000000001d43c <dwarf::die::get_section_offset() const>:

section_offset die::get_section_offset() const {
   1d43c:	ff010113          	addi	sp,sp,-16
   1d440:	00113423          	sd	ra,8(sp)
   1d444:	00813023          	sd	s0,0(sp)
   1d448:	00050413          	addi	s0,a0,0
  return cu->get_section_offset() + offset;
   1d44c:	00853503          	ld	a0,8(a0)
   1d450:	8e0fa0ef          	jal	ra,17530 <dwarf::unit::get_section_offset() const>
   1d454:	01843783          	ld	a5,24(s0)
}
   1d458:	00f50533          	add	a0,a0,a5
   1d45c:	00813083          	ld	ra,8(sp)
   1d460:	00013403          	ld	s0,0(sp)
   1d464:	01010113          	addi	sp,sp,16
   1d468:	00008067          	jalr	zero,0(ra)

000000000001d46c <dwarf::die::read(unsigned long)>:

void die::read(section_offset off) {
   1d46c:	f9010113          	addi	sp,sp,-112
   1d470:	06113423          	sd	ra,104(sp)
   1d474:	06813023          	sd	s0,96(sp)
   1d478:	04913c23          	sd	s1,88(sp)
   1d47c:	05213823          	sd	s2,80(sp)
   1d480:	05313423          	sd	s3,72(sp)
   1d484:	05413023          	sd	s4,64(sp)
   1d488:	03513c23          	sd	s5,56(sp)
   1d48c:	03613823          	sd	s6,48(sp)
   1d490:	03713423          	sd	s7,40(sp)
   1d494:	03813023          	sd	s8,32(sp)
   1d498:	00050493          	addi	s1,a0,0
   1d49c:	00058913          	addi	s2,a1,0
  cursor cur(cu->data(), off);
   1d4a0:	00853503          	ld	a0,8(a0)
   1d4a4:	898fa0ef          	jal	ra,1753c <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d4a8:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1d4ac:	00853403          	ld	s0,8(a0)
	if (_M_pi != nullptr)
   1d4b0:	48040463          	beq	s0,zero,1d938 <dwarf::die::read(unsigned long)+0x4cc>
    if (__is_single_threaded())
   1d4b4:	00025797          	auipc	a5,0x25
   1d4b8:	fc47b783          	ld	a5,-60(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d4bc:	0007c783          	lbu	a5,0(a5)
   1d4c0:	0a078863          	beq	a5,zero,1d570 <dwarf::die::read(unsigned long)+0x104>
  { *__mem += __val; }
   1d4c4:	03042783          	lw	a5,48(s0)
   1d4c8:	0017879b          	addiw	a5,a5,1
   1d4cc:	02f42823          	sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d4d0:	01313423          	sd	s3,8(sp)
      : _M_pi(__r._M_pi)
   1d4d4:	00813823          	sd	s0,16(sp)
    if (__is_single_threaded())
   1d4d8:	00025797          	auipc	a5,0x25
   1d4dc:	fa07b783          	ld	a5,-96(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d4e0:	0007c783          	lbu	a5,0(a5)
   1d4e4:	08078e63          	beq	a5,zero,1d580 <dwarf::die::read(unsigned long)+0x114>
  { *__mem += __val; }
   1d4e8:	03042783          	lw	a5,48(s0)
   1d4ec:	0017879b          	addiw	a5,a5,1
   1d4f0:	02f42823          	sw	a5,48(s0)
      : sec(sec), pos(sec->begin + offset) {}
   1d4f4:	0089b783          	ld	a5,8(s3)
   1d4f8:	012787b3          	add	a5,a5,s2
   1d4fc:	00f13c23          	sd	a5,24(sp)
    if (__is_single_threaded())
   1d500:	00025797          	auipc	a5,0x25
   1d504:	f787b783          	ld	a5,-136(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d508:	0007c783          	lbu	a5,0(a5)
   1d50c:	08078263          	beq	a5,zero,1d590 <dwarf::die::read(unsigned long)+0x124>
    _Atomic_word __result = *__mem;
   1d510:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1d514:	fff5079b          	addiw	a5,a0,-1
   1d518:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d51c:	00100793          	addi	a5,zero,1
   1d520:	42f51663          	bne	a0,a5,1d94c <dwarf::die::read(unsigned long)+0x4e0>
	_M_dispose();
   1d524:	00043783          	ld	a5,0(s0)
   1d528:	0107b783          	ld	a5,16(a5)
   1d52c:	00040513          	addi	a0,s0,0
   1d530:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d534:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d538:	00025797          	auipc	a5,0x25
   1d53c:	f407b783          	ld	a5,-192(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d540:	0007c783          	lbu	a5,0(a5)
   1d544:	04078e63          	beq	a5,zero,1d5a0 <dwarf::die::read(unsigned long)+0x134>
    _Atomic_word __result = *__mem;
   1d548:	03442783          	lw	a5,52(s0)
    *__mem += __val;
   1d54c:	fff7871b          	addiw	a4,a5,-1
   1d550:	02e42a23          	sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d554:	00100713          	addi	a4,zero,1
   1d558:	3ee79a63          	bne	a5,a4,1d94c <dwarf::die::read(unsigned long)+0x4e0>
	    _M_destroy();
   1d55c:	00043783          	ld	a5,0(s0)
   1d560:	0187b783          	ld	a5,24(a5)
   1d564:	00040513          	addi	a0,s0,0
   1d568:	000780e7          	jalr	ra,0(a5)
   1d56c:	3e00006f          	jal	zero,1d94c <dwarf::die::read(unsigned long)+0x4e0>
      __atomic_add(__mem, __val);
   1d570:	00100593          	addi	a1,zero,1
   1d574:	03040513          	addi	a0,s0,48
   1d578:	d89f80ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d57c:	f55ff06f          	jal	zero,1d4d0 <dwarf::die::read(unsigned long)+0x64>
   1d580:	00100593          	addi	a1,zero,1
   1d584:	03040513          	addi	a0,s0,48
   1d588:	d79f80ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d58c:	f69ff06f          	jal	zero,1d4f4 <dwarf::die::read(unsigned long)+0x88>
      return __exchange_and_add(__mem, __val);
   1d590:	fff00593          	addi	a1,zero,-1
   1d594:	03040513          	addi	a0,s0,48
   1d598:	d99f80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d59c:	f81ff06f          	jal	zero,1d51c <dwarf::die::read(unsigned long)+0xb0>
   1d5a0:	fff00593          	addi	a1,zero,-1
   1d5a4:	03440513          	addi	a0,s0,52
   1d5a8:	d89f80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d5ac:	00050793          	addi	a5,a0,0
   1d5b0:	fa5ff06f          	jal	zero,1d554 <dwarf::die::read(unsigned long)+0xe8>
    return 0;
   1d5b4:	00000593          	addi	a1,zero,0

  offset = off;

  abbrev_code acode = cur.uleb128();
  if (acode == 0) {
   1d5b8:	0e059463          	bne	a1,zero,1d6a0 <dwarf::die::read(unsigned long)+0x234>
    abbrev = nullptr;
   1d5bc:	0004b823          	sd	zero,16(s1)
  section_offset get_section_offset() const { return pos - sec->begin; }
   1d5c0:	00813783          	ld	a5,8(sp)
   1d5c4:	0087b703          	ld	a4,8(a5)
   1d5c8:	01813783          	ld	a5,24(sp)
   1d5cc:	40e787b3          	sub	a5,a5,a4
    next = cur.get_section_offset();
   1d5d0:	06f4b423          	sd	a5,104(s1)
	if (_M_pi != nullptr)
   1d5d4:	01013403          	ld	s0,16(sp)
   1d5d8:	02040463          	beq	s0,zero,1d600 <dwarf::die::read(unsigned long)+0x194>
    if (__is_single_threaded())
   1d5dc:	00025797          	auipc	a5,0x25
   1d5e0:	e9c7b783          	ld	a5,-356(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d5e4:	0007c783          	lbu	a5,0(a5)
   1d5e8:	04078463          	beq	a5,zero,1d630 <dwarf::die::read(unsigned long)+0x1c4>
    _Atomic_word __result = *__mem;
   1d5ec:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1d5f0:	fff5079b          	addiw	a5,a0,-1
   1d5f4:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d5f8:	00100793          	addi	a5,zero,1
   1d5fc:	04f50263          	beq	a0,a5,1d640 <dwarf::die::read(unsigned long)+0x1d4>
  for (auto &attr : abbrev->attributes) {
    attrs.push_back(cur.get_section_offset());
    cur.skip_form(attr.form);
  }
  next = cur.get_section_offset();
}
   1d600:	06813083          	ld	ra,104(sp)
   1d604:	06013403          	ld	s0,96(sp)
   1d608:	05813483          	ld	s1,88(sp)
   1d60c:	05013903          	ld	s2,80(sp)
   1d610:	04813983          	ld	s3,72(sp)
   1d614:	04013a03          	ld	s4,64(sp)
   1d618:	03813a83          	ld	s5,56(sp)
   1d61c:	03013b03          	ld	s6,48(sp)
   1d620:	02813b83          	ld	s7,40(sp)
   1d624:	02013c03          	ld	s8,32(sp)
   1d628:	07010113          	addi	sp,sp,112
   1d62c:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   1d630:	fff00593          	addi	a1,zero,-1
   1d634:	03040513          	addi	a0,s0,48
   1d638:	cf9f80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d63c:	fbdff06f          	jal	zero,1d5f8 <dwarf::die::read(unsigned long)+0x18c>
	_M_dispose();
   1d640:	00043783          	ld	a5,0(s0)
   1d644:	0107b783          	ld	a5,16(a5)
   1d648:	00040513          	addi	a0,s0,0
   1d64c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d650:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d654:	00025797          	auipc	a5,0x25
   1d658:	e247b783          	ld	a5,-476(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d65c:	0007c783          	lbu	a5,0(a5)
   1d660:	02078663          	beq	a5,zero,1d68c <dwarf::die::read(unsigned long)+0x220>
    _Atomic_word __result = *__mem;
   1d664:	03442783          	lw	a5,52(s0)
    *__mem += __val;
   1d668:	fff7871b          	addiw	a4,a5,-1
   1d66c:	02e42a23          	sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d670:	00100713          	addi	a4,zero,1
   1d674:	f8e796e3          	bne	a5,a4,1d600 <dwarf::die::read(unsigned long)+0x194>
	    _M_destroy();
   1d678:	00043783          	ld	a5,0(s0)
   1d67c:	0187b783          	ld	a5,24(a5)
   1d680:	00040513          	addi	a0,s0,0
   1d684:	000780e7          	jalr	ra,0(a5)
   1d688:	f79ff06f          	jal	zero,1d600 <dwarf::die::read(unsigned long)+0x194>
      return __exchange_and_add(__mem, __val);
   1d68c:	fff00593          	addi	a1,zero,-1
   1d690:	03440513          	addi	a0,s0,52
   1d694:	c9df80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d698:	00050793          	addi	a5,a0,0
   1d69c:	fd5ff06f          	jal	zero,1d670 <dwarf::die::read(unsigned long)+0x204>
  abbrev = &cu->get_abbrev(acode);
   1d6a0:	0084b503          	ld	a0,8(s1)
   1d6a4:	914fd0ef          	jal	ra,1a7b8 <dwarf::unit::get_abbrev(unsigned long) const>
   1d6a8:	00a4b823          	sd	a0,16(s1)
  tag = abbrev->tag;
   1d6ac:	00852783          	lw	a5,8(a0)
   1d6b0:	00f4a023          	sw	a5,0(s1)
  attrs.clear();
   1d6b4:	02048b13          	addi	s6,s1,32
    for (T *p = base; p < end; ++p)
   1d6b8:	0504b683          	ld	a3,80(s1)
   1d6bc:	0584b783          	ld	a5,88(s1)
   1d6c0:	00f6fa63          	bgeu	a3,a5,1d6d4 <dwarf::die::read(unsigned long)+0x268>
   1d6c4:	00068793          	addi	a5,a3,0
   1d6c8:	00878793          	addi	a5,a5,8
   1d6cc:	0584b703          	ld	a4,88(s1)
   1d6d0:	fee7ece3          	bltu	a5,a4,1d6c8 <dwarf::die::read(unsigned long)+0x25c>
    end = base;
   1d6d4:	04d4bc23          	sd	a3,88(s1)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1d6d8:	01853703          	ld	a4,24(a0)
   1d6dc:	01053783          	ld	a5,16(a0)
   1d6e0:	40f70733          	sub	a4,a4,a5
   1d6e4:	40275713          	srai	a4,a4,0x2
   1d6e8:	00019797          	auipc	a5,0x19
   1d6ec:	5b87b783          	ld	a5,1464(a5) # 36ca0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   1d6f0:	02f70733          	mul	a4,a4,a5
    if (n <= (size_type)(cap - base))
   1d6f4:	0604b783          	ld	a5,96(s1)
   1d6f8:	40d787b3          	sub	a5,a5,a3
   1d6fc:	4037d793          	srai	a5,a5,0x3
   1d700:	06e7f863          	bgeu	a5,a4,1d770 <dwarf::die::read(unsigned long)+0x304>
   1d704:	00079463          	bne	a5,zero,1d70c <dwarf::die::read(unsigned long)+0x2a0>
   1d708:	00100793          	addi	a5,zero,1
    while (target < n)
   1d70c:	00e7f663          	bgeu	a5,a4,1d718 <dwarf::die::read(unsigned long)+0x2ac>
      target <<= 1;
   1d710:	00179793          	slli	a5,a5,0x1
    while (target < n)
   1d714:	fee7eee3          	bltu	a5,a4,1d710 <dwarf::die::read(unsigned long)+0x2a4>
    char *newbuf = new char[sizeof(T[target])];
   1d718:	00379413          	slli	s0,a5,0x3
   1d71c:	00040513          	addi	a0,s0,0
   1d720:	bc1f80ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   1d724:	00050993          	addi	s3,a0,0
    T *src = base, *dest = (T *)newbuf;
   1d728:	0504b503          	ld	a0,80(s1)
    for (; src < end; src++, dest++) {
   1d72c:	0584b703          	ld	a4,88(s1)
   1d730:	04e57c63          	bgeu	a0,a4,1d788 <dwarf::die::read(unsigned long)+0x31c>
    T *src = base, *dest = (T *)newbuf;
   1d734:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   1d738:	00878793          	addi	a5,a5,8
   1d73c:	fee7eee3          	bltu	a5,a4,1d738 <dwarf::die::read(unsigned long)+0x2cc>
   1d740:	fff70913          	addi	s2,a4,-1
   1d744:	40a90933          	sub	s2,s2,a0
   1d748:	ff897913          	andi	s2,s2,-8
   1d74c:	00890913          	addi	s2,s2,8
   1d750:	01298933          	add	s2,s3,s2
    if ((char *)base != buf)
   1d754:	00ab0663          	beq	s6,a0,1d760 <dwarf::die::read(unsigned long)+0x2f4>
      delete[] (char *)base;
   1d758:	00050463          	beq	a0,zero,1d760 <dwarf::die::read(unsigned long)+0x2f4>
   1d75c:	e05f80ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1d760:	0534b823          	sd	s3,80(s1)
    end = dest;
   1d764:	0524bc23          	sd	s2,88(s1)
    cap = base + target;
   1d768:	008989b3          	add	s3,s3,s0
   1d76c:	0734b023          	sd	s3,96(s1)
  for (auto &attr : abbrev->attributes) {
   1d770:	0104b783          	ld	a5,16(s1)
      : _M_current(__i) { }
   1d774:	0107b903          	ld	s2,16(a5)
   1d778:	0187ba03          	ld	s4,24(a5)
   1d77c:	0f2a0663          	beq	s4,s2,1d868 <dwarf::die::read(unsigned long)+0x3fc>
    cur.skip_form(attr.form);
   1d780:	00810a93          	addi	s5,sp,8
   1d784:	08c0006f          	jal	zero,1d810 <dwarf::die::read(unsigned long)+0x3a4>
    T *src = base, *dest = (T *)newbuf;
   1d788:	00098913          	addi	s2,s3,0
   1d78c:	fc9ff06f          	jal	zero,1d754 <dwarf::die::read(unsigned long)+0x2e8>
    char *newbuf = new char[sizeof(T[target])];
   1d790:	00050c13          	addi	s8,a0,0
    T *src = base, *dest = (T *)newbuf;
   1d794:	0504b503          	ld	a0,80(s1)
    for (; src < end; src++, dest++) {
   1d798:	0584b703          	ld	a4,88(s1)
   1d79c:	06e57263          	bgeu	a0,a4,1d800 <dwarf::die::read(unsigned long)+0x394>
    T *src = base, *dest = (T *)newbuf;
   1d7a0:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   1d7a4:	00878793          	addi	a5,a5,8
   1d7a8:	fee7eee3          	bltu	a5,a4,1d7a4 <dwarf::die::read(unsigned long)+0x338>
   1d7ac:	fff70b93          	addi	s7,a4,-1
   1d7b0:	40ab8bb3          	sub	s7,s7,a0
   1d7b4:	ff8bfb93          	andi	s7,s7,-8
   1d7b8:	008b8b93          	addi	s7,s7,8
   1d7bc:	017c0bb3          	add	s7,s8,s7
    if ((char *)base != buf)
   1d7c0:	00ab0663          	beq	s6,a0,1d7cc <dwarf::die::read(unsigned long)+0x360>
      delete[] (char *)base;
   1d7c4:	00050463          	beq	a0,zero,1d7cc <dwarf::die::read(unsigned long)+0x360>
   1d7c8:	d99f80ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1d7cc:	0584b823          	sd	s8,80(s1)
    end = dest;
   1d7d0:	0574bc23          	sd	s7,88(s1)
    cap = base + target;
   1d7d4:	008c0c33          	add	s8,s8,s0
   1d7d8:	0784b023          	sd	s8,96(s1)
    new (end) T(std::move(x));
   1d7dc:	0584b783          	ld	a5,88(s1)
   1d7e0:	0137b023          	sd	s3,0(a5)
    end++;
   1d7e4:	0584b783          	ld	a5,88(s1)
   1d7e8:	00878793          	addi	a5,a5,8
   1d7ec:	04f4bc23          	sd	a5,88(s1)
   1d7f0:	00492583          	lw	a1,4(s2)
   1d7f4:	000a8513          	addi	a0,s5,0
   1d7f8:	bd8ff0ef          	jal	ra,1cbd0 <dwarf::cursor::skip_form(dwarf::DW_FORM)>
   1d7fc:	00c0006f          	jal	zero,1d808 <dwarf::die::read(unsigned long)+0x39c>
    T *src = base, *dest = (T *)newbuf;
   1d800:	000c0b93          	addi	s7,s8,0
   1d804:	fbdff06f          	jal	zero,1d7c0 <dwarf::die::read(unsigned long)+0x354>
  for (auto &attr : abbrev->attributes) {
   1d808:	00c90913          	addi	s2,s2,12
   1d80c:	052a0e63          	beq	s4,s2,1d868 <dwarf::die::read(unsigned long)+0x3fc>
   1d810:	00813783          	ld	a5,8(sp)
   1d814:	0087b783          	ld	a5,8(a5)
   1d818:	01813983          	ld	s3,24(sp)
   1d81c:	40f989b3          	sub	s3,s3,a5
  size_type size() const { return end - base; }
   1d820:	0504b683          	ld	a3,80(s1)
   1d824:	0584b703          	ld	a4,88(s1)
   1d828:	40d70733          	sub	a4,a4,a3
   1d82c:	40375713          	srai	a4,a4,0x3
    reserve(size() + 1);
   1d830:	00170713          	addi	a4,a4,1
    if (n <= (size_type)(cap - base))
   1d834:	0604b783          	ld	a5,96(s1)
   1d838:	40d787b3          	sub	a5,a5,a3
   1d83c:	4037d793          	srai	a5,a5,0x3
   1d840:	f8e7fee3          	bgeu	a5,a4,1d7dc <dwarf::die::read(unsigned long)+0x370>
   1d844:	00079463          	bne	a5,zero,1d84c <dwarf::die::read(unsigned long)+0x3e0>
   1d848:	00100793          	addi	a5,zero,1
    while (target < n)
   1d84c:	00e7f663          	bgeu	a5,a4,1d858 <dwarf::die::read(unsigned long)+0x3ec>
      target <<= 1;
   1d850:	00179793          	slli	a5,a5,0x1
    while (target < n)
   1d854:	fee7eee3          	bltu	a5,a4,1d850 <dwarf::die::read(unsigned long)+0x3e4>
    char *newbuf = new char[sizeof(T[target])];
   1d858:	00379413          	slli	s0,a5,0x3
   1d85c:	00040513          	addi	a0,s0,0
   1d860:	a81f80ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   1d864:	f2dff06f          	jal	zero,1d790 <dwarf::die::read(unsigned long)+0x324>
   1d868:	00813783          	ld	a5,8(sp)
   1d86c:	0087b703          	ld	a4,8(a5)
   1d870:	01813783          	ld	a5,24(sp)
   1d874:	40e787b3          	sub	a5,a5,a4
  next = cur.get_section_offset();
   1d878:	06f4b423          	sd	a5,104(s1)
	if (_M_pi != nullptr)
   1d87c:	01013403          	ld	s0,16(sp)
   1d880:	d80400e3          	beq	s0,zero,1d600 <dwarf::die::read(unsigned long)+0x194>
    if (__is_single_threaded())
   1d884:	00025797          	auipc	a5,0x25
   1d888:	bf47b783          	ld	a5,-1036(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d88c:	0007c783          	lbu	a5,0(a5)
   1d890:	06078263          	beq	a5,zero,1d8f4 <dwarf::die::read(unsigned long)+0x488>
    _Atomic_word __result = *__mem;
   1d894:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1d898:	fff5079b          	addiw	a5,a0,-1
   1d89c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d8a0:	00100793          	addi	a5,zero,1
   1d8a4:	d4f51ee3          	bne	a0,a5,1d600 <dwarf::die::read(unsigned long)+0x194>
	_M_dispose();
   1d8a8:	00043783          	ld	a5,0(s0)
   1d8ac:	0107b783          	ld	a5,16(a5)
   1d8b0:	00040513          	addi	a0,s0,0
   1d8b4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d8b8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d8bc:	00025797          	auipc	a5,0x25
   1d8c0:	bbc7b783          	ld	a5,-1092(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d8c4:	0007c783          	lbu	a5,0(a5)
   1d8c8:	02078e63          	beq	a5,zero,1d904 <dwarf::die::read(unsigned long)+0x498>
    _Atomic_word __result = *__mem;
   1d8cc:	03442783          	lw	a5,52(s0)
    *__mem += __val;
   1d8d0:	fff7871b          	addiw	a4,a5,-1
   1d8d4:	02e42a23          	sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d8d8:	00100713          	addi	a4,zero,1
   1d8dc:	d2e792e3          	bne	a5,a4,1d600 <dwarf::die::read(unsigned long)+0x194>
	    _M_destroy();
   1d8e0:	00043783          	ld	a5,0(s0)
   1d8e4:	0187b783          	ld	a5,24(a5)
   1d8e8:	00040513          	addi	a0,s0,0
   1d8ec:	000780e7          	jalr	ra,0(a5)
   1d8f0:	d11ff06f          	jal	zero,1d600 <dwarf::die::read(unsigned long)+0x194>
      return __exchange_and_add(__mem, __val);
   1d8f4:	fff00593          	addi	a1,zero,-1
   1d8f8:	03040513          	addi	a0,s0,48
   1d8fc:	a35f80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d900:	fa1ff06f          	jal	zero,1d8a0 <dwarf::die::read(unsigned long)+0x434>
   1d904:	fff00593          	addi	a1,zero,-1
   1d908:	03440513          	addi	a0,s0,52
   1d90c:	a25f80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d910:	00050793          	addi	a5,a0,0
   1d914:	fc5ff06f          	jal	zero,1d8d8 <dwarf::die::read(unsigned long)+0x46c>
	if (_M_pi != nullptr)
   1d918:	00050413          	addi	s0,a0,0
   1d91c:	01013503          	ld	a0,16(sp)
   1d920:	00050863          	beq	a0,zero,1d930 <dwarf::die::read(unsigned long)+0x4c4>
	  _M_pi->_M_release();
   1d924:	00025317          	auipc	t1,0x25
   1d928:	a9c33303          	ld	t1,-1380(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   1d92c:	000300e7          	jalr	ra,0(t1)
   1d930:	00040513          	addi	a0,s0,0
   1d934:	d5df80ef          	jal	ra,16690 <_Unwind_Resume@plt>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d938:	01313423          	sd	s3,8(sp)
      : _M_pi(__r._M_pi)
   1d93c:	00013823          	sd	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1d940:	0089b783          	ld	a5,8(s3)
   1d944:	012787b3          	add	a5,a5,s2
   1d948:	00f13c23          	sd	a5,24(sp)
  offset = off;
   1d94c:	0124bc23          	sd	s2,24(s1)
    while (pos < sec->end) {
   1d950:	01813783          	ld	a5,24(sp)
      { return _M_ptr; }
   1d954:	00813503          	ld	a0,8(sp)
   1d958:	01053703          	ld	a4,16(a0)
   1d95c:	02e7fe63          	bgeu	a5,a4,1d998 <dwarf::die::read(unsigned long)+0x52c>
    std::uint64_t result = 0;
   1d960:	00000593          	addi	a1,zero,0
    int shift = 0;
   1d964:	00000613          	addi	a2,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   1d968:	00178793          	addi	a5,a5,1
   1d96c:	00f13c23          	sd	a5,24(sp)
   1d970:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1d974:	07f77693          	andi	a3,a4,127
   1d978:	00c696b3          	sll	a3,a3,a2
   1d97c:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   1d980:	0187171b          	slliw	a4,a4,0x18
   1d984:	4187571b          	sraiw	a4,a4,0x18
   1d988:	c20758e3          	bge	a4,zero,1d5b8 <dwarf::die::read(unsigned long)+0x14c>
      shift += 7;
   1d98c:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   1d990:	01053703          	ld	a4,16(a0)
   1d994:	fce7eae3          	bltu	a5,a4,1d968 <dwarf::die::read(unsigned long)+0x4fc>
    underflow();
   1d998:	00810513          	addi	a0,sp,8
   1d99c:	960ff0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    return 0;
   1d9a0:	c15ff06f          	jal	zero,1d5b4 <dwarf::die::read(unsigned long)+0x148>

000000000001d9a4 <dwarf::die::has(dwarf::DW_AT) const>:

bool die::has(DW_AT attr) const {
  if (!abbrev)
   1d9a4:	01053703          	ld	a4,16(a0)
   1d9a8:	02070463          	beq	a4,zero,1d9d0 <dwarf::die::has(dwarf::DW_AT) const+0x2c>
   1d9ac:	01073783          	ld	a5,16(a4)
   1d9b0:	01873683          	ld	a3,24(a4)
    return false;
  // XXX Totally lame
  for (auto &a : abbrev->attributes)
   1d9b4:	02f68263          	beq	a3,a5,1d9d8 <dwarf::die::has(dwarf::DW_AT) const+0x34>
    if (a.name == attr)
   1d9b8:	0007a703          	lw	a4,0(a5)
   1d9bc:	02b70263          	beq	a4,a1,1d9e0 <dwarf::die::has(dwarf::DW_AT) const+0x3c>
  for (auto &a : abbrev->attributes)
   1d9c0:	00c78793          	addi	a5,a5,12
   1d9c4:	fef69ae3          	bne	a3,a5,1d9b8 <dwarf::die::has(dwarf::DW_AT) const+0x14>
      return true;
  return false;
   1d9c8:	00000513          	addi	a0,zero,0
   1d9cc:	00008067          	jalr	zero,0(ra)
    return false;
   1d9d0:	00000513          	addi	a0,zero,0
   1d9d4:	00008067          	jalr	zero,0(ra)
  return false;
   1d9d8:	00000513          	addi	a0,zero,0
   1d9dc:	00008067          	jalr	zero,0(ra)
      return true;
   1d9e0:	00100513          	addi	a0,zero,1
}
   1d9e4:	00008067          	jalr	zero,0(ra)

000000000001d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>:

value die::operator[](DW_AT attr) const {
   1d9e8:	fa010113          	addi	sp,sp,-96
   1d9ec:	04113c23          	sd	ra,88(sp)
   1d9f0:	04813823          	sd	s0,80(sp)
   1d9f4:	04913423          	sd	s1,72(sp)
   1d9f8:	00060413          	addi	s0,a2,0
  // XXX We can pre-compute almost all of this work in the
  // abbrev_entry.
  if (abbrev) {
   1d9fc:	0105b783          	ld	a5,16(a1)
   1da00:	06078863          	beq	a5,zero,1da70 <dwarf::die::operator[](dwarf::DW_AT) const+0x88>
   1da04:	00050493          	addi	s1,a0,0
   1da08:	0107b683          	ld	a3,16(a5)
   1da0c:	0187b603          	ld	a2,24(a5)
    int i = 0;
    for (auto &a : abbrev->attributes) {
   1da10:	06d60063          	beq	a2,a3,1da70 <dwarf::die::operator[](dwarf::DW_AT) const+0x88>
    int i = 0;
   1da14:	00000793          	addi	a5,zero,0
   1da18:	0100006f          	jal	zero,1da28 <dwarf::die::operator[](dwarf::DW_AT) const+0x40>
      if (a.name == attr)
        return value(cu, a.name, a.form, a.type, attrs[i]);
      i++;
   1da1c:	0017879b          	addiw	a5,a5,1
    for (auto &a : abbrev->attributes) {
   1da20:	00c68693          	addi	a3,a3,12
   1da24:	04d60663          	beq	a2,a3,1da70 <dwarf::die::operator[](dwarf::DW_AT) const+0x88>
      if (a.name == attr)
   1da28:	0006a703          	lw	a4,0(a3)
   1da2c:	fe8718e3          	bne	a4,s0,1da1c <dwarf::die::operator[](dwarf::DW_AT) const+0x34>
        return value(cu, a.name, a.form, a.type, attrs[i]);
   1da30:	0505b703          	ld	a4,80(a1)
   1da34:	00379793          	slli	a5,a5,0x3
   1da38:	00f707b3          	add	a5,a4,a5
   1da3c:	0007b783          	ld	a5,0(a5)
   1da40:	0086a703          	lw	a4,8(a3)
   1da44:	0046a683          	lw	a3,4(a3)
   1da48:	00040613          	addi	a2,s0,0
   1da4c:	0085b583          	ld	a1,8(a1)
   1da50:	00048513          	addi	a0,s1,0
   1da54:	38c030ef          	jal	ra,20de0 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)>
    }
  }
  throw out_of_range("DIE does not have attribute " + to_string(attr));
}
   1da58:	00048513          	addi	a0,s1,0
   1da5c:	05813083          	ld	ra,88(sp)
   1da60:	05013403          	ld	s0,80(sp)
   1da64:	04813483          	ld	s1,72(sp)
   1da68:	06010113          	addi	sp,sp,96
   1da6c:	00008067          	jalr	zero,0(ra)
  throw out_of_range("DIE does not have attribute " + to_string(attr));
   1da70:	01000513          	addi	a0,zero,16
   1da74:	95df80ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1da78:	00050493          	addi	s1,a0,0
   1da7c:	00040593          	addi	a1,s0,0
   1da80:	00010513          	addi	a0,sp,0
   1da84:	465130ef          	jal	ra,316e8 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1da88:	00019617          	auipc	a2,0x19
   1da8c:	3b060613          	addi	a2,a2,944 # 36e38 <std::piecewise_construct+0x188>
   1da90:	00000593          	addi	a1,zero,0
   1da94:	00010513          	addi	a0,sp,0
   1da98:	8a9f80ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1da9c:	00050593          	addi	a1,a0,0
   1daa0:	02010413          	addi	s0,sp,32
   1daa4:	00040513          	addi	a0,s0,0
   1daa8:	969f80ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1daac:	00040593          	addi	a1,s0,0
   1dab0:	00048513          	addi	a0,s1,0
   1dab4:	b3df80ef          	jal	ra,165f0 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   1dab8:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   1dabc:	03010793          	addi	a5,sp,48
   1dac0:	00f50463          	beq	a0,a5,1dac8 <dwarf::die::operator[](dwarf::DW_AT) const+0xe0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1dac4:	9edf80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1dac8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   1dacc:	01010793          	addi	a5,sp,16
   1dad0:	00f50463          	beq	a0,a5,1dad8 <dwarf::die::operator[](dwarf::DW_AT) const+0xf0>
   1dad4:	9ddf80ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1dad8:	00025617          	auipc	a2,0x25
   1dadc:	9e063603          	ld	a2,-1568(a2) # 424b8 <std::out_of_range::~out_of_range()@GLIBCXX_3.4>
   1dae0:	00025597          	auipc	a1,0x25
   1dae4:	a885b583          	ld	a1,-1400(a1) # 42568 <typeinfo for std::out_of_range@GLIBCXX_3.4>
   1dae8:	00048513          	addi	a0,s1,0
   1daec:	b75f80ef          	jal	ra,16660 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   1daf0:	00050413          	addi	s0,a0,0
   1daf4:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   1daf8:	03010793          	addi	a5,sp,48
   1dafc:	00f50463          	beq	a0,a5,1db04 <dwarf::die::operator[](dwarf::DW_AT) const+0x11c>
   1db00:	9b1f80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1db04:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   1db08:	01010793          	addi	a5,sp,16
   1db0c:	00f50463          	beq	a0,a5,1db14 <dwarf::die::operator[](dwarf::DW_AT) const+0x12c>
   1db10:	9a1f80ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1db14:	00048513          	addi	a0,s1,0
   1db18:	959f80ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1db1c:	00040513          	addi	a0,s0,0
   1db20:	b71f80ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1db24:	00050413          	addi	s0,a0,0
   1db28:	fddff06f          	jal	zero,1db04 <dwarf::die::operator[](dwarf::DW_AT) const+0x11c>
   1db2c:	00050413          	addi	s0,a0,0
   1db30:	fe5ff06f          	jal	zero,1db14 <dwarf::die::operator[](dwarf::DW_AT) const+0x12c>

000000000001db34 <dwarf::die::operator==(dwarf::die const&) const>:
  }
  return res;
}

bool die::operator==(const die &o) const {
  return cu == o.cu && offset == o.offset;
   1db34:	00853703          	ld	a4,8(a0)
   1db38:	0085b783          	ld	a5,8(a1)
   1db3c:	00f70663          	beq	a4,a5,1db48 <dwarf::die::operator==(dwarf::die const&) const+0x14>
   1db40:	00000513          	addi	a0,zero,0
}
   1db44:	00008067          	jalr	zero,0(ra)
  return cu == o.cu && offset == o.offset;
   1db48:	01853503          	ld	a0,24(a0)
   1db4c:	0185b783          	ld	a5,24(a1)
   1db50:	40f50533          	sub	a0,a0,a5
   1db54:	00153513          	sltiu	a0,a0,1
   1db58:	00008067          	jalr	zero,0(ra)

000000000001db5c <dwarf::die::operator!=(dwarf::die const&) const>:

bool die::operator!=(const die &o) const { return !(*this == o); }
   1db5c:	ff010113          	addi	sp,sp,-16
   1db60:	00113423          	sd	ra,8(sp)
   1db64:	fd1ff0ef          	jal	ra,1db34 <dwarf::die::operator==(dwarf::die const&) const>
   1db68:	00154513          	xori	a0,a0,1
   1db6c:	0ff57513          	andi	a0,a0,255
   1db70:	00813083          	ld	ra,8(sp)
   1db74:	01010113          	addi	sp,sp,16
   1db78:	00008067          	jalr	zero,0(ra)

000000000001db7c <std::hash<dwarf::die>::operator()(dwarf::die const&) const>:

DWARFPP_END_NAMESPACE

size_t std::hash<dwarf::die>::operator()(const dwarf::die &a) const {
  return hash<decltype(a.cu)>()(a.cu) ^
         hash<decltype(a.get_unit_offset())>()(a.get_unit_offset());
   1db7c:	0085b503          	ld	a0,8(a1)
   1db80:	0185b783          	ld	a5,24(a1)
}
   1db84:	00f54533          	xor	a0,a0,a5
   1db88:	00008067          	jalr	zero,0(ra)

000000000001db8c <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)>:
die::iterator::iterator(const unit *cu, section_offset off) : d(cu) {
   1db8c:	fe010113          	addi	sp,sp,-32
   1db90:	00113c23          	sd	ra,24(sp)
   1db94:	00813823          	sd	s0,16(sp)
   1db98:	00913423          	sd	s1,8(sp)
   1db9c:	00050413          	addi	s0,a0,0
   1dba0:	00060493          	addi	s1,a2,0
   1dba4:	871ff0ef          	jal	ra,1d414 <dwarf::die::die(dwarf::unit const*)>
  d.read(off);
   1dba8:	00048593          	addi	a1,s1,0
   1dbac:	00040513          	addi	a0,s0,0
   1dbb0:	8bdff0ef          	jal	ra,1d46c <dwarf::die::read(unsigned long)>
   1dbb4:	0200006f          	jal	zero,1dbd4 <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)+0x48>
class die {
   1dbb8:	00050493          	addi	s1,a0,0
   1dbbc:	02040513          	addi	a0,s0,32
   1dbc0:	00025317          	auipc	t1,0x25
   1dbc4:	82033303          	ld	t1,-2016(t1) # 423e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b110>
   1dbc8:	000300e7          	jalr	ra,0(t1)
   1dbcc:	00048513          	addi	a0,s1,0
   1dbd0:	ac1f80ef          	jal	ra,16690 <_Unwind_Resume@plt>
}
   1dbd4:	01813083          	ld	ra,24(sp)
   1dbd8:	01013403          	ld	s0,16(sp)
   1dbdc:	00813483          	ld	s1,8(sp)
   1dbe0:	02010113          	addi	sp,sp,32
   1dbe4:	00008067          	jalr	zero,0(ra)

000000000001dbe8 <dwarf::die::begin() const>:
die::iterator die::begin() const {
   1dbe8:	ff010113          	addi	sp,sp,-16
   1dbec:	00113423          	sd	ra,8(sp)
   1dbf0:	00813023          	sd	s0,0(sp)
   1dbf4:	00050413          	addi	s0,a0,0
  if (!abbrev || !abbrev->children)
   1dbf8:	0105b783          	ld	a5,16(a1)
   1dbfc:	00078663          	beq	a5,zero,1dc08 <dwarf::die::begin() const+0x20>
   1dc00:	00c7c783          	lbu	a5,12(a5)
   1dc04:	04079c63          	bne	a5,zero,1dc5c <dwarf::die::begin() const+0x74>
inline die::iterator die::end() const { return iterator(); }
   1dc08:	00043023          	sd	zero,0(s0)
   1dc0c:	00043423          	sd	zero,8(s0)
   1dc10:	00043823          	sd	zero,16(s0)
   1dc14:	00043c23          	sd	zero,24(s0)
   1dc18:	02043023          	sd	zero,32(s0)
   1dc1c:	02043423          	sd	zero,40(s0)
   1dc20:	02043823          	sd	zero,48(s0)
   1dc24:	02043c23          	sd	zero,56(s0)
   1dc28:	04043023          	sd	zero,64(s0)
   1dc2c:	04043423          	sd	zero,72(s0)
   1dc30:	06043423          	sd	zero,104(s0)
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   1dc34:	02040793          	addi	a5,s0,32
   1dc38:	04f43823          	sd	a5,80(s0)
   1dc3c:	04f43c23          	sd	a5,88(s0)
   1dc40:	05040793          	addi	a5,s0,80
   1dc44:	06f43023          	sd	a5,96(s0)
}
   1dc48:	00040513          	addi	a0,s0,0
   1dc4c:	00813083          	ld	ra,8(sp)
   1dc50:	00013403          	ld	s0,0(sp)
   1dc54:	01010113          	addi	sp,sp,16
   1dc58:	00008067          	jalr	zero,0(ra)
  return iterator(cu, next);
   1dc5c:	0685b603          	ld	a2,104(a1)
   1dc60:	0085b583          	ld	a1,8(a1)
   1dc64:	f29ff0ef          	jal	ra,1db8c <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)>
   1dc68:	fe1ff06f          	jal	zero,1dc48 <dwarf::die::begin() const+0x60>

000000000001dc6c <dwarf::die::resolve(dwarf::DW_AT) const>:
value die::resolve(DW_AT attr) const {
   1dc6c:	eb010113          	addi	sp,sp,-336
   1dc70:	14113423          	sd	ra,328(sp)
   1dc74:	14813023          	sd	s0,320(sp)
   1dc78:	12913c23          	sd	s1,312(sp)
   1dc7c:	13213823          	sd	s2,304(sp)
   1dc80:	00050493          	addi	s1,a0,0
   1dc84:	00058413          	addi	s0,a1,0
   1dc88:	00060913          	addi	s2,a2,0
  if (has(attr))
   1dc8c:	00060593          	addi	a1,a2,0
   1dc90:	00040513          	addi	a0,s0,0
   1dc94:	d11ff0ef          	jal	ra,1d9a4 <dwarf::die::has(dwarf::DW_AT) const>
   1dc98:	02050863          	beq	a0,zero,1dcc8 <dwarf::die::resolve(dwarf::DW_AT) const+0x5c>
    return (*this)[attr];
   1dc9c:	00090613          	addi	a2,s2,0
   1dca0:	00040593          	addi	a1,s0,0
   1dca4:	00048513          	addi	a0,s1,0
   1dca8:	d41ff0ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
}
   1dcac:	00048513          	addi	a0,s1,0
   1dcb0:	14813083          	ld	ra,328(sp)
   1dcb4:	14013403          	ld	s0,320(sp)
   1dcb8:	13813483          	ld	s1,312(sp)
   1dcbc:	13013903          	ld	s2,304(sp)
   1dcc0:	15010113          	addi	sp,sp,336
   1dcc4:	00008067          	jalr	zero,0(ra)
  if (has(DW_AT::abstract_origin)) {
   1dcc8:	03100593          	addi	a1,zero,49
   1dccc:	00040513          	addi	a0,s0,0
   1dcd0:	cd5ff0ef          	jal	ra,1d9a4 <dwarf::die::has(dwarf::DW_AT) const>
   1dcd4:	16050263          	beq	a0,zero,1de38 <dwarf::die::resolve(dwarf::DW_AT) const+0x1cc>
    die ao = (*this)[DW_AT::abstract_origin].as_reference();
   1dcd8:	03100613          	addi	a2,zero,49
   1dcdc:	00040593          	addi	a1,s0,0
   1dce0:	0e810413          	addi	s0,sp,232
   1dce4:	00040513          	addi	a0,s0,0
   1dce8:	d01ff0ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   1dcec:	00040593          	addi	a1,s0,0
   1dcf0:	00810413          	addi	s0,sp,8
   1dcf4:	00040513          	addi	a0,s0,0
   1dcf8:	558030ef          	jal	ra,21250 <dwarf::value::as_reference() const>
    if (ao.has(attr))
   1dcfc:	00090593          	addi	a1,s2,0
   1dd00:	00040513          	addi	a0,s0,0
   1dd04:	ca1ff0ef          	jal	ra,1d9a4 <dwarf::die::has(dwarf::DW_AT) const>
   1dd08:	00050c63          	beq	a0,zero,1dd20 <dwarf::die::resolve(dwarf::DW_AT) const+0xb4>
      return ao[attr];
   1dd0c:	00090613          	addi	a2,s2,0
   1dd10:	00040593          	addi	a1,s0,0
   1dd14:	00048513          	addi	a0,s1,0
   1dd18:	cd1ff0ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   1dd1c:	0e80006f          	jal	zero,1de04 <dwarf::die::resolve(dwarf::DW_AT) const+0x198>
    if (ao.has(DW_AT::specification)) {
   1dd20:	04700593          	addi	a1,zero,71
   1dd24:	00810513          	addi	a0,sp,8
   1dd28:	c7dff0ef          	jal	ra,1d9a4 <dwarf::die::has(dwarf::DW_AT) const>
   1dd2c:	06050a63          	beq	a0,zero,1dda0 <dwarf::die::resolve(dwarf::DW_AT) const+0x134>
      die s = ao[DW_AT::specification].as_reference();
   1dd30:	04700613          	addi	a2,zero,71
   1dd34:	00810593          	addi	a1,sp,8
   1dd38:	10010513          	addi	a0,sp,256
   1dd3c:	cadff0ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   1dd40:	10010593          	addi	a1,sp,256
   1dd44:	07810513          	addi	a0,sp,120
   1dd48:	508030ef          	jal	ra,21250 <dwarf::value::as_reference() const>
      if (s.has(attr))
   1dd4c:	00090593          	addi	a1,s2,0
   1dd50:	07810513          	addi	a0,sp,120
   1dd54:	c51ff0ef          	jal	ra,1d9a4 <dwarf::die::has(dwarf::DW_AT) const>
   1dd58:	00050c63          	beq	a0,zero,1dd70 <dwarf::die::resolve(dwarf::DW_AT) const+0x104>
        return s[attr];
   1dd5c:	00090613          	addi	a2,s2,0
   1dd60:	07810593          	addi	a1,sp,120
   1dd64:	00048513          	addi	a0,s1,0
   1dd68:	c81ff0ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   1dd6c:	0680006f          	jal	zero,1ddd4 <dwarf::die::resolve(dwarf::DW_AT) const+0x168>
    for (T *p = base; p < end; ++p)
   1dd70:	0c813503          	ld	a0,200(sp)
   1dd74:	0d013783          	ld	a5,208(sp)
   1dd78:	00f57a63          	bgeu	a0,a5,1dd8c <dwarf::die::resolve(dwarf::DW_AT) const+0x120>
   1dd7c:	00050793          	addi	a5,a0,0
   1dd80:	00878793          	addi	a5,a5,8
   1dd84:	0d013703          	ld	a4,208(sp)
   1dd88:	fee7ece3          	bltu	a5,a4,1dd80 <dwarf::die::resolve(dwarf::DW_AT) const+0x114>
    end = base;
   1dd8c:	0ca13823          	sd	a0,208(sp)
    if ((char *)base != buf)
   1dd90:	09810793          	addi	a5,sp,152
   1dd94:	00f50663          	beq	a0,a5,1dda0 <dwarf::die::resolve(dwarf::DW_AT) const+0x134>
      delete[] (char *)base;
   1dd98:	00050463          	beq	a0,zero,1dda0 <dwarf::die::resolve(dwarf::DW_AT) const+0x134>
   1dd9c:	fc4f80ef          	jal	ra,16560 <operator delete[](void*)@plt>
    for (T *p = base; p < end; ++p)
   1dda0:	05813503          	ld	a0,88(sp)
   1dda4:	06013783          	ld	a5,96(sp)
   1dda8:	00f57a63          	bgeu	a0,a5,1ddbc <dwarf::die::resolve(dwarf::DW_AT) const+0x150>
   1ddac:	00050793          	addi	a5,a0,0
   1ddb0:	00878793          	addi	a5,a5,8
   1ddb4:	06013703          	ld	a4,96(sp)
   1ddb8:	fee7ece3          	bltu	a5,a4,1ddb0 <dwarf::die::resolve(dwarf::DW_AT) const+0x144>
    end = base;
   1ddbc:	06a13023          	sd	a0,96(sp)
    if ((char *)base != buf)
   1ddc0:	02810793          	addi	a5,sp,40
   1ddc4:	08f50263          	beq	a0,a5,1de48 <dwarf::die::resolve(dwarf::DW_AT) const+0x1dc>
      delete[] (char *)base;
   1ddc8:	08050063          	beq	a0,zero,1de48 <dwarf::die::resolve(dwarf::DW_AT) const+0x1dc>
   1ddcc:	f94f80ef          	jal	ra,16560 <operator delete[](void*)@plt>
   1ddd0:	0780006f          	jal	zero,1de48 <dwarf::die::resolve(dwarf::DW_AT) const+0x1dc>
    for (T *p = base; p < end; ++p)
   1ddd4:	0c813503          	ld	a0,200(sp)
   1ddd8:	0d013783          	ld	a5,208(sp)
   1dddc:	00f57a63          	bgeu	a0,a5,1ddf0 <dwarf::die::resolve(dwarf::DW_AT) const+0x184>
   1dde0:	00050793          	addi	a5,a0,0
   1dde4:	00878793          	addi	a5,a5,8
   1dde8:	0d013703          	ld	a4,208(sp)
   1ddec:	fee7ece3          	bltu	a5,a4,1dde4 <dwarf::die::resolve(dwarf::DW_AT) const+0x178>
    end = base;
   1ddf0:	0ca13823          	sd	a0,208(sp)
    if ((char *)base != buf)
   1ddf4:	09810793          	addi	a5,sp,152
   1ddf8:	00f50663          	beq	a0,a5,1de04 <dwarf::die::resolve(dwarf::DW_AT) const+0x198>
      delete[] (char *)base;
   1ddfc:	00050463          	beq	a0,zero,1de04 <dwarf::die::resolve(dwarf::DW_AT) const+0x198>
   1de00:	f60f80ef          	jal	ra,16560 <operator delete[](void*)@plt>
    for (T *p = base; p < end; ++p)
   1de04:	05813503          	ld	a0,88(sp)
   1de08:	06013783          	ld	a5,96(sp)
   1de0c:	00f57a63          	bgeu	a0,a5,1de20 <dwarf::die::resolve(dwarf::DW_AT) const+0x1b4>
   1de10:	00050793          	addi	a5,a0,0
   1de14:	00878793          	addi	a5,a5,8
   1de18:	06013703          	ld	a4,96(sp)
   1de1c:	fee7ece3          	bltu	a5,a4,1de14 <dwarf::die::resolve(dwarf::DW_AT) const+0x1a8>
    end = base;
   1de20:	06a13023          	sd	a0,96(sp)
    if ((char *)base != buf)
   1de24:	02810793          	addi	a5,sp,40
   1de28:	e8f502e3          	beq	a0,a5,1dcac <dwarf::die::resolve(dwarf::DW_AT) const+0x40>
      delete[] (char *)base;
   1de2c:	e80500e3          	beq	a0,zero,1dcac <dwarf::die::resolve(dwarf::DW_AT) const+0x40>
   1de30:	f30f80ef          	jal	ra,16560 <operator delete[](void*)@plt>
   1de34:	e79ff06f          	jal	zero,1dcac <dwarf::die::resolve(dwarf::DW_AT) const+0x40>
  } else if (has(DW_AT::specification)) {
   1de38:	04700593          	addi	a1,zero,71
   1de3c:	00040513          	addi	a0,s0,0
   1de40:	b65ff0ef          	jal	ra,1d9a4 <dwarf::die::has(dwarf::DW_AT) const>
   1de44:	00051863          	bne	a0,zero,1de54 <dwarf::die::resolve(dwarf::DW_AT) const+0x1e8>
  value() : cu(nullptr), typ(type::invalid) {}
   1de48:	0004b023          	sd	zero,0(s1)
   1de4c:	0004a623          	sw	zero,12(s1)
   1de50:	e5dff06f          	jal	zero,1dcac <dwarf::die::resolve(dwarf::DW_AT) const+0x40>
    die s = (*this)[DW_AT::specification].as_reference();
   1de54:	04700613          	addi	a2,zero,71
   1de58:	00040593          	addi	a1,s0,0
   1de5c:	11810413          	addi	s0,sp,280
   1de60:	00040513          	addi	a0,s0,0
   1de64:	b85ff0ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   1de68:	00040593          	addi	a1,s0,0
   1de6c:	07810413          	addi	s0,sp,120
   1de70:	00040513          	addi	a0,s0,0
   1de74:	3dc030ef          	jal	ra,21250 <dwarf::value::as_reference() const>
    if (s.has(attr))
   1de78:	00090593          	addi	a1,s2,0
   1de7c:	00040513          	addi	a0,s0,0
   1de80:	b25ff0ef          	jal	ra,1d9a4 <dwarf::die::has(dwarf::DW_AT) const>
   1de84:	00050c63          	beq	a0,zero,1de9c <dwarf::die::resolve(dwarf::DW_AT) const+0x230>
      return s[attr];
   1de88:	00090613          	addi	a2,s2,0
   1de8c:	00040593          	addi	a1,s0,0
   1de90:	00048513          	addi	a0,s1,0
   1de94:	b55ff0ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   1de98:	0380006f          	jal	zero,1ded0 <dwarf::die::resolve(dwarf::DW_AT) const+0x264>
    for (T *p = base; p < end; ++p)
   1de9c:	0c813503          	ld	a0,200(sp)
   1dea0:	0d013783          	ld	a5,208(sp)
   1dea4:	00f57a63          	bgeu	a0,a5,1deb8 <dwarf::die::resolve(dwarf::DW_AT) const+0x24c>
   1dea8:	00050793          	addi	a5,a0,0
   1deac:	00878793          	addi	a5,a5,8
   1deb0:	0d013703          	ld	a4,208(sp)
   1deb4:	fee7ece3          	bltu	a5,a4,1deac <dwarf::die::resolve(dwarf::DW_AT) const+0x240>
    end = base;
   1deb8:	0ca13823          	sd	a0,208(sp)
    if ((char *)base != buf)
   1debc:	09810793          	addi	a5,sp,152
   1dec0:	f8f504e3          	beq	a0,a5,1de48 <dwarf::die::resolve(dwarf::DW_AT) const+0x1dc>
      delete[] (char *)base;
   1dec4:	f80502e3          	beq	a0,zero,1de48 <dwarf::die::resolve(dwarf::DW_AT) const+0x1dc>
   1dec8:	e98f80ef          	jal	ra,16560 <operator delete[](void*)@plt>
   1decc:	f7dff06f          	jal	zero,1de48 <dwarf::die::resolve(dwarf::DW_AT) const+0x1dc>
    for (T *p = base; p < end; ++p)
   1ded0:	0c813503          	ld	a0,200(sp)
   1ded4:	0d013783          	ld	a5,208(sp)
   1ded8:	00f57a63          	bgeu	a0,a5,1deec <dwarf::die::resolve(dwarf::DW_AT) const+0x280>
   1dedc:	00050793          	addi	a5,a0,0
   1dee0:	00878793          	addi	a5,a5,8
   1dee4:	0d013703          	ld	a4,208(sp)
   1dee8:	fee7ece3          	bltu	a5,a4,1dee0 <dwarf::die::resolve(dwarf::DW_AT) const+0x274>
    end = base;
   1deec:	0ca13823          	sd	a0,208(sp)
    if ((char *)base != buf)
   1def0:	09810793          	addi	a5,sp,152
   1def4:	daf50ce3          	beq	a0,a5,1dcac <dwarf::die::resolve(dwarf::DW_AT) const+0x40>
      delete[] (char *)base;
   1def8:	da050ae3          	beq	a0,zero,1dcac <dwarf::die::resolve(dwarf::DW_AT) const+0x40>
   1defc:	e64f80ef          	jal	ra,16560 <operator delete[](void*)@plt>
   1df00:	dadff06f          	jal	zero,1dcac <dwarf::die::resolve(dwarf::DW_AT) const+0x40>
class die {
   1df04:	00050413          	addi	s0,a0,0
   1df08:	09810513          	addi	a0,sp,152
   1df0c:	00024317          	auipc	t1,0x24
   1df10:	4d433303          	ld	t1,1236(t1) # 423e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b110>
   1df14:	000300e7          	jalr	ra,0(t1)
   1df18:	02810513          	addi	a0,sp,40
   1df1c:	00024317          	auipc	t1,0x24
   1df20:	4c433303          	ld	t1,1220(t1) # 423e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b110>
   1df24:	000300e7          	jalr	ra,0(t1)
   1df28:	00040513          	addi	a0,s0,0
   1df2c:	f64f80ef          	jal	ra,16690 <_Unwind_Resume@plt>
   1df30:	00050413          	addi	s0,a0,0
   1df34:	fe5ff06f          	jal	zero,1df18 <dwarf::die::resolve(dwarf::DW_AT) const+0x2ac>
   1df38:	00050413          	addi	s0,a0,0
   1df3c:	09810513          	addi	a0,sp,152
   1df40:	00024317          	auipc	t1,0x24
   1df44:	4a033303          	ld	t1,1184(t1) # 423e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b110>
   1df48:	000300e7          	jalr	ra,0(t1)
   1df4c:	00040513          	addi	a0,s0,0
   1df50:	f40f80ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001df54 <dwarf::die::iterator::operator++()>:
die::iterator &die::iterator::operator++() {
   1df54:	f3010113          	addi	sp,sp,-208
   1df58:	0c113423          	sd	ra,200(sp)
   1df5c:	0c813023          	sd	s0,192(sp)
   1df60:	0a913c23          	sd	s1,184(sp)
   1df64:	0b213823          	sd	s2,176(sp)
   1df68:	0b313423          	sd	s3,168(sp)
   1df6c:	0b413023          	sd	s4,160(sp)
   1df70:	09513c23          	sd	s5,152(sp)
   1df74:	00050413          	addi	s0,a0,0
  if (!d.abbrev)
   1df78:	01053783          	ld	a5,16(a0)
   1df7c:	00078a63          	beq	a5,zero,1df90 <dwarf::die::iterator::operator++()+0x3c>
  if (!d.abbrev->children) {
   1df80:	00c7c783          	lbu	a5,12(a5)
   1df84:	02079a63          	bne	a5,zero,1dfb8 <dwarf::die::iterator::operator++()+0x64>
    d.read(d.next);
   1df88:	06853583          	ld	a1,104(a0)
   1df8c:	ce0ff0ef          	jal	ra,1d46c <dwarf::die::read(unsigned long)>
}
   1df90:	00040513          	addi	a0,s0,0
   1df94:	0c813083          	ld	ra,200(sp)
   1df98:	0c013403          	ld	s0,192(sp)
   1df9c:	0b813483          	ld	s1,184(sp)
   1dfa0:	0b013903          	ld	s2,176(sp)
   1dfa4:	0a813983          	ld	s3,168(sp)
   1dfa8:	0a013a03          	ld	s4,160(sp)
   1dfac:	09813a83          	ld	s5,152(sp)
   1dfb0:	0d010113          	addi	sp,sp,208
   1dfb4:	00008067          	jalr	zero,0(ra)
  } else if (d.has(DW_AT::sibling)) {
   1dfb8:	00100593          	addi	a1,zero,1
   1dfbc:	9e9ff0ef          	jal	ra,1d9a4 <dwarf::die::has(dwarf::DW_AT) const>
   1dfc0:	16050663          	beq	a0,zero,1e12c <dwarf::die::iterator::operator++()+0x1d8>
    d = d[DW_AT::sibling].as_reference();
   1dfc4:	00100613          	addi	a2,zero,1
   1dfc8:	00040593          	addi	a1,s0,0
   1dfcc:	07810493          	addi	s1,sp,120
   1dfd0:	00048513          	addi	a0,s1,0
   1dfd4:	a15ff0ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   1dfd8:	00048593          	addi	a1,s1,0
   1dfdc:	00810513          	addi	a0,sp,8
   1dfe0:	270030ef          	jal	ra,21250 <dwarf::value::as_reference() const>
  die &operator=(die &&o) = default;
   1dfe4:	00812783          	lw	a5,8(sp)
   1dfe8:	00f42023          	sw	a5,0(s0)
   1dfec:	01013783          	ld	a5,16(sp)
   1dff0:	00f43423          	sd	a5,8(s0)
   1dff4:	01813783          	ld	a5,24(sp)
   1dff8:	00f43823          	sd	a5,16(s0)
   1dffc:	02013783          	ld	a5,32(sp)
   1e000:	00f43c23          	sd	a5,24(s0)
  size_type size() const { return end - base; }
   1e004:	06013903          	ld	s2,96(sp)
   1e008:	05813783          	ld	a5,88(sp)
   1e00c:	40f90933          	sub	s2,s2,a5
   1e010:	40395493          	srai	s1,s2,0x3
    for (T *p = base; p < end; ++p)
   1e014:	05043683          	ld	a3,80(s0)
   1e018:	05843783          	ld	a5,88(s0)
   1e01c:	00f6fa63          	bgeu	a3,a5,1e030 <dwarf::die::iterator::operator++()+0xdc>
   1e020:	00068793          	addi	a5,a3,0
   1e024:	00878793          	addi	a5,a5,8
   1e028:	05843703          	ld	a4,88(s0)
   1e02c:	fee7ece3          	bltu	a5,a4,1e024 <dwarf::die::iterator::operator++()+0xd0>
    end = base;
   1e030:	04d43c23          	sd	a3,88(s0)
    if (n <= (size_type)(cap - base))
   1e034:	06043503          	ld	a0,96(s0)
   1e038:	40d50533          	sub	a0,a0,a3
   1e03c:	07257c63          	bgeu	a0,s2,1e0b4 <dwarf::die::iterator::operator++()+0x160>
   1e040:	40355513          	srai	a0,a0,0x3
   1e044:	00051463          	bne	a0,zero,1e04c <dwarf::die::iterator::operator++()+0xf8>
   1e048:	00100513          	addi	a0,zero,1
    while (target < n)
   1e04c:	00957663          	bgeu	a0,s1,1e058 <dwarf::die::iterator::operator++()+0x104>
      target <<= 1;
   1e050:	00151513          	slli	a0,a0,0x1
    while (target < n)
   1e054:	fe956ee3          	bltu	a0,s1,1e050 <dwarf::die::iterator::operator++()+0xfc>
    char *newbuf = new char[sizeof(T[target])];
   1e058:	00351993          	slli	s3,a0,0x3
   1e05c:	00098513          	addi	a0,s3,0
   1e060:	a80f80ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   1e064:	00050a93          	addi	s5,a0,0
    T *src = base, *dest = (T *)newbuf;
   1e068:	05043503          	ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   1e06c:	05843703          	ld	a4,88(s0)
   1e070:	0ae57a63          	bgeu	a0,a4,1e124 <dwarf::die::iterator::operator++()+0x1d0>
    T *src = base, *dest = (T *)newbuf;
   1e074:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   1e078:	00878793          	addi	a5,a5,8
   1e07c:	fee7eee3          	bltu	a5,a4,1e078 <dwarf::die::iterator::operator++()+0x124>
   1e080:	fff70a13          	addi	s4,a4,-1
   1e084:	40aa0a33          	sub	s4,s4,a0
   1e088:	ff8a7a13          	andi	s4,s4,-8
   1e08c:	008a0a13          	addi	s4,s4,8
   1e090:	014a8a33          	add	s4,s5,s4
   1e094:	02040793          	addi	a5,s0,32
    if ((char *)base != buf)
   1e098:	00f50663          	beq	a0,a5,1e0a4 <dwarf::die::iterator::operator++()+0x150>
      delete[] (char *)base;
   1e09c:	00050463          	beq	a0,zero,1e0a4 <dwarf::die::iterator::operator++()+0x150>
   1e0a0:	cc0f80ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1e0a4:	05543823          	sd	s5,80(s0)
    end = dest;
   1e0a8:	05443c23          	sd	s4,88(s0)
    cap = base + target;
   1e0ac:	013a8ab3          	add	s5,s5,s3
   1e0b0:	07543023          	sd	s5,96(s0)
    for (size_type i = 0; i < osize; i++)
   1e0b4:	02048663          	beq	s1,zero,1e0e0 <dwarf::die::iterator::operator++()+0x18c>
   1e0b8:	00000793          	addi	a5,zero,0
   1e0bc:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1e0c0:	05813703          	ld	a4,88(sp)
   1e0c4:	00d70733          	add	a4,a4,a3
   1e0c8:	00073603          	ld	a2,0(a4)
   1e0cc:	05043703          	ld	a4,80(s0)
   1e0d0:	00d70733          	add	a4,a4,a3
   1e0d4:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1e0d8:	00178793          	addi	a5,a5,1
   1e0dc:	fef490e3          	bne	s1,a5,1e0bc <dwarf::die::iterator::operator++()+0x168>
    end = base + osize;
   1e0e0:	05043783          	ld	a5,80(s0)
   1e0e4:	012787b3          	add	a5,a5,s2
   1e0e8:	04f43c23          	sd	a5,88(s0)
   1e0ec:	07013783          	ld	a5,112(sp)
   1e0f0:	06f43423          	sd	a5,104(s0)
    for (T *p = base; p < end; ++p)
   1e0f4:	05813503          	ld	a0,88(sp)
   1e0f8:	06013783          	ld	a5,96(sp)
   1e0fc:	00f57a63          	bgeu	a0,a5,1e110 <dwarf::die::iterator::operator++()+0x1bc>
   1e100:	00050793          	addi	a5,a0,0
   1e104:	00878793          	addi	a5,a5,8
   1e108:	06013703          	ld	a4,96(sp)
   1e10c:	fee7ece3          	bltu	a5,a4,1e104 <dwarf::die::iterator::operator++()+0x1b0>
    if ((char *)base != buf)
   1e110:	02810793          	addi	a5,sp,40
   1e114:	e6f50ee3          	beq	a0,a5,1df90 <dwarf::die::iterator::operator++()+0x3c>
      delete[] (char *)base;
   1e118:	e6050ce3          	beq	a0,zero,1df90 <dwarf::die::iterator::operator++()+0x3c>
   1e11c:	c44f80ef          	jal	ra,16560 <operator delete[](void*)@plt>
   1e120:	e71ff06f          	jal	zero,1df90 <dwarf::die::iterator::operator++()+0x3c>
    T *src = base, *dest = (T *)newbuf;
   1e124:	000a8a13          	addi	s4,s5,0
   1e128:	f6dff06f          	jal	zero,1e094 <dwarf::die::iterator::operator++()+0x140>
    iterator sub(d.cu, d.next);
   1e12c:	06843603          	ld	a2,104(s0)
   1e130:	00843583          	ld	a1,8(s0)
   1e134:	00810513          	addi	a0,sp,8
   1e138:	a55ff0ef          	jal	ra,1db8c <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)>
      ++sub;
   1e13c:	00810493          	addi	s1,sp,8
    while (sub->abbrev)
   1e140:	01813783          	ld	a5,24(sp)
   1e144:	00078863          	beq	a5,zero,1e154 <dwarf::die::iterator::operator++()+0x200>
      ++sub;
   1e148:	00048513          	addi	a0,s1,0
   1e14c:	e09ff0ef          	jal	ra,1df54 <dwarf::die::iterator::operator++()>
   1e150:	ff1ff06f          	jal	zero,1e140 <dwarf::die::iterator::operator++()+0x1ec>
    d.read(sub->next);
   1e154:	07013583          	ld	a1,112(sp)
   1e158:	00040513          	addi	a0,s0,0
   1e15c:	b10ff0ef          	jal	ra,1d46c <dwarf::die::read(unsigned long)>
    for (T *p = base; p < end; ++p)
   1e160:	05813503          	ld	a0,88(sp)
   1e164:	06013783          	ld	a5,96(sp)
   1e168:	00f57a63          	bgeu	a0,a5,1e17c <dwarf::die::iterator::operator++()+0x228>
   1e16c:	00050793          	addi	a5,a0,0
   1e170:	00878793          	addi	a5,a5,8
   1e174:	06013703          	ld	a4,96(sp)
   1e178:	fee7ece3          	bltu	a5,a4,1e170 <dwarf::die::iterator::operator++()+0x21c>
    if ((char *)base != buf)
   1e17c:	02810793          	addi	a5,sp,40
   1e180:	e0f508e3          	beq	a0,a5,1df90 <dwarf::die::iterator::operator++()+0x3c>
      delete[] (char *)base;
   1e184:	e00506e3          	beq	a0,zero,1df90 <dwarf::die::iterator::operator++()+0x3c>
   1e188:	bd8f80ef          	jal	ra,16560 <operator delete[](void*)@plt>
   1e18c:	e05ff06f          	jal	zero,1df90 <dwarf::die::iterator::operator++()+0x3c>
class die {
   1e190:	00050413          	addi	s0,a0,0
   1e194:	02810513          	addi	a0,sp,40
   1e198:	00024317          	auipc	t1,0x24
   1e19c:	24833303          	ld	t1,584(t1) # 423e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b110>
   1e1a0:	000300e7          	jalr	ra,0(t1)
   1e1a4:	00040513          	addi	a0,s0,0
   1e1a8:	ce8f80ef          	jal	ra,16690 <_Unwind_Resume@plt>
   1e1ac:	00050413          	addi	s0,a0,0
   1e1b0:	02810513          	addi	a0,sp,40
   1e1b4:	00024317          	auipc	t1,0x24
   1e1b8:	22c33303          	ld	t1,556(t1) # 423e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b110>
   1e1bc:	000300e7          	jalr	ra,0(t1)
   1e1c0:	00040513          	addi	a0,s0,0
   1e1c4:	cccf80ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001e1c8 <dwarf::die::attributes() const>:
const vector<pair<DW_AT, value>> die::attributes() const {
   1e1c8:	f7010113          	addi	sp,sp,-144
   1e1cc:	08113423          	sd	ra,136(sp)
   1e1d0:	08813023          	sd	s0,128(sp)
   1e1d4:	06913c23          	sd	s1,120(sp)
   1e1d8:	07213823          	sd	s2,112(sp)
   1e1dc:	07313423          	sd	s3,104(sp)
   1e1e0:	07413023          	sd	s4,96(sp)
   1e1e4:	05513c23          	sd	s5,88(sp)
   1e1e8:	05613823          	sd	s6,80(sp)
   1e1ec:	05713423          	sd	s7,72(sp)
   1e1f0:	00050493          	addi	s1,a0,0
	: _M_start(), _M_finish(), _M_end_of_storage()
   1e1f4:	00053023          	sd	zero,0(a0)
   1e1f8:	00053423          	sd	zero,8(a0)
   1e1fc:	00053823          	sd	zero,16(a0)
  if (!abbrev)
   1e200:	0105b783          	ld	a5,16(a1)
   1e204:	0e078063          	beq	a5,zero,1e2e4 <dwarf::die::attributes() const+0x11c>
   1e208:	00058993          	addi	s3,a1,0
   1e20c:	0107b403          	ld	s0,16(a5)
   1e210:	0187ba03          	ld	s4,24(a5)
  for (auto &a : abbrev->attributes) {
   1e214:	0c8a0863          	beq	s4,s0,1e2e4 <dwarf::die::attributes() const+0x11c>
   1e218:	00000913          	addi	s2,zero,0
        make_pair(a.name, value(cu, a.name, a.form, a.type, attrs[i])));
   1e21c:	02810a93          	addi	s5,sp,40
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   1e220:	00810b13          	addi	s6,sp,8
   1e224:	00024b97          	auipc	s7,0x24
   1e228:	2ccbbb83          	ld	s7,716(s7) # 424f0 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)@@Base+0x241dc>
   1e22c:	0680006f          	jal	zero,1e294 <dwarf::die::attributes() const+0xcc>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   1e230:	00042783          	lw	a5,0(s0)
   1e234:	00f12423          	sw	a5,8(sp)
   1e238:	02813783          	ld	a5,40(sp)
   1e23c:	00f13823          	sd	a5,16(sp)
   1e240:	03013783          	ld	a5,48(sp)
   1e244:	00f13c23          	sd	a5,24(sp)
   1e248:	03813783          	ld	a5,56(sp)
   1e24c:	02f13023          	sd	a5,32(sp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   1e250:	0084b583          	ld	a1,8(s1)
   1e254:	0104b783          	ld	a5,16(s1)
   1e258:	06f58263          	beq	a1,a5,1e2bc <dwarf::die::attributes() const+0xf4>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1e25c:	00813783          	ld	a5,8(sp)
   1e260:	00f5b023          	sd	a5,0(a1)
   1e264:	01013783          	ld	a5,16(sp)
   1e268:	00f5b423          	sd	a5,8(a1)
   1e26c:	01813783          	ld	a5,24(sp)
   1e270:	00f5b823          	sd	a5,16(a1)
   1e274:	02013783          	ld	a5,32(sp)
   1e278:	00f5bc23          	sd	a5,24(a1)
	    ++this->_M_impl._M_finish;
   1e27c:	0084b783          	ld	a5,8(s1)
   1e280:	02078793          	addi	a5,a5,32
   1e284:	00f4b423          	sd	a5,8(s1)
  for (auto &a : abbrev->attributes) {
   1e288:	00c40413          	addi	s0,s0,12
   1e28c:	00890913          	addi	s2,s2,8
   1e290:	048a0a63          	beq	s4,s0,1e2e4 <dwarf::die::attributes() const+0x11c>
        make_pair(a.name, value(cu, a.name, a.form, a.type, attrs[i])));
   1e294:	0509b783          	ld	a5,80(s3)
   1e298:	012787b3          	add	a5,a5,s2
   1e29c:	0007b783          	ld	a5,0(a5)
   1e2a0:	00842703          	lw	a4,8(s0)
   1e2a4:	00442683          	lw	a3,4(s0)
   1e2a8:	00042603          	lw	a2,0(s0)
   1e2ac:	0089b583          	ld	a1,8(s3)
   1e2b0:	000a8513          	addi	a0,s5,0
   1e2b4:	32d020ef          	jal	ra,20de0 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)>
   1e2b8:	f79ff06f          	jal	zero,1e230 <dwarf::die::attributes() const+0x68>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   1e2bc:	000b0613          	addi	a2,s6,0
   1e2c0:	00048513          	addi	a0,s1,0
   1e2c4:	000b80e7          	jalr	ra,0(s7)
   1e2c8:	fc1ff06f          	jal	zero,1e288 <dwarf::die::attributes() const+0xc0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1e2cc:	00050413          	addi	s0,a0,0
   1e2d0:	0004b503          	ld	a0,0(s1)
	if (__p)
   1e2d4:	00050463          	beq	a0,zero,1e2dc <dwarf::die::attributes() const+0x114>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e2d8:	9d8f80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1e2dc:	00040513          	addi	a0,s0,0
   1e2e0:	bb0f80ef          	jal	ra,16690 <_Unwind_Resume@plt>
}
   1e2e4:	00048513          	addi	a0,s1,0
   1e2e8:	08813083          	ld	ra,136(sp)
   1e2ec:	08013403          	ld	s0,128(sp)
   1e2f0:	07813483          	ld	s1,120(sp)
   1e2f4:	07013903          	ld	s2,112(sp)
   1e2f8:	06813983          	ld	s3,104(sp)
   1e2fc:	06013a03          	ld	s4,96(sp)
   1e300:	05813a83          	ld	s5,88(sp)
   1e304:	05013b03          	ld	s6,80(sp)
   1e308:	04813b83          	ld	s7,72(sp)
   1e30c:	09010113          	addi	sp,sp,144
   1e310:	00008067          	jalr	zero,0(ra)

000000000001e314 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)>:
      vector<_Tp, _Alloc>::
   1e314:	fb010113          	addi	sp,sp,-80
   1e318:	04113423          	sd	ra,72(sp)
   1e31c:	04813023          	sd	s0,64(sp)
   1e320:	02913c23          	sd	s1,56(sp)
   1e324:	03213823          	sd	s2,48(sp)
   1e328:	03313423          	sd	s3,40(sp)
   1e32c:	03413023          	sd	s4,32(sp)
   1e330:	01513c23          	sd	s5,24(sp)
   1e334:	01613823          	sd	s6,16(sp)
   1e338:	01713423          	sd	s7,8(sp)
   1e33c:	01813023          	sd	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1e340:	00853903          	ld	s2,8(a0)
   1e344:	00053a03          	ld	s4,0(a0)
   1e348:	414907b3          	sub	a5,s2,s4
   1e34c:	4057d793          	srai	a5,a5,0x5
	if (max_size() - size() < __n)
   1e350:	fff00713          	addi	a4,zero,-1
   1e354:	00675713          	srli	a4,a4,0x6
   1e358:	04e78463          	beq	a5,a4,1e3a0 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x8c>
   1e35c:	00050a93          	addi	s5,a0,0
   1e360:	00058b93          	addi	s7,a1,0
   1e364:	00060493          	addi	s1,a2,0
   1e368:	00058413          	addi	s0,a1,0
      return __a;
   1e36c:	00078713          	addi	a4,a5,0
      if (__a < __b)
   1e370:	03490e63          	beq	s2,s4,1e3ac <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x98>
	const size_type __len = size() + (std::max)(size(), __n);
   1e374:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1e378:	04f76263          	bltu	a4,a5,1e3bc <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xa8>
   1e37c:	00070b13          	addi	s6,a4,0
   1e380:	fff00793          	addi	a5,zero,-1
   1e384:	0067d793          	srli	a5,a5,0x6
   1e388:	00e7f463          	bgeu	a5,a4,1e390 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x7c>
   1e38c:	00078b13          	addi	s6,a5,0
    { return __lhs.base() - __rhs.base(); }
   1e390:	414b8c33          	sub	s8,s7,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1e394:	00000993          	addi	s3,zero,0
   1e398:	02070e63          	beq	a4,zero,1e3d4 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xc0>
   1e39c:	02c0006f          	jal	zero,1e3c8 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xb4>
	  __throw_length_error(__N(__s));
   1e3a0:	00018517          	auipc	a0,0x18
   1e3a4:	6c850513          	addi	a0,a0,1736 # 36a68 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   1e3a8:	838f80ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   1e3ac:	00100713          	addi	a4,zero,1
   1e3b0:	fc5ff06f          	jal	zero,1e374 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x60>
      _ForwardIterator __cur = __result;
   1e3b4:	00098493          	addi	s1,s3,0
   1e3b8:	0800006f          	jal	zero,1e438 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x124>
   1e3bc:	414b8c33          	sub	s8,s7,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1e3c0:	fff00b13          	addi	s6,zero,-1
   1e3c4:	006b5b13          	srli	s6,s6,0x6
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1e3c8:	005b1513          	slli	a0,s6,0x5
   1e3cc:	8f4f80ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1e3d0:	00050993          	addi	s3,a0,0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1e3d4:	018987b3          	add	a5,s3,s8
   1e3d8:	0004b583          	ld	a1,0(s1)
   1e3dc:	0084b603          	ld	a2,8(s1)
   1e3e0:	0104b683          	ld	a3,16(s1)
   1e3e4:	0184b703          	ld	a4,24(s1)
   1e3e8:	00b7b023          	sd	a1,0(a5)
   1e3ec:	00c7b423          	sd	a2,8(a5)
   1e3f0:	00d7b823          	sd	a3,16(a5)
   1e3f4:	00e7bc23          	sd	a4,24(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   1e3f8:	fb440ee3          	beq	s0,s4,1e3b4 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xa0>
   1e3fc:	414b84b3          	sub	s1,s7,s4
   1e400:	009984b3          	add	s1,s3,s1
      _ForwardIterator __cur = __result;
   1e404:	00098793          	addi	a5,s3,0
      for (; __first != __last; ++__first, (void)++__cur)
   1e408:	000a0713          	addi	a4,s4,0
   1e40c:	00073503          	ld	a0,0(a4)
   1e410:	00873583          	ld	a1,8(a4)
   1e414:	01073603          	ld	a2,16(a4)
   1e418:	01873683          	ld	a3,24(a4)
   1e41c:	00a7b023          	sd	a0,0(a5)
   1e420:	00b7b423          	sd	a1,8(a5)
   1e424:	00c7b823          	sd	a2,16(a5)
   1e428:	00d7bc23          	sd	a3,24(a5)
   1e42c:	02070713          	addi	a4,a4,32
   1e430:	02078793          	addi	a5,a5,32
   1e434:	fc979ce3          	bne	a5,s1,1e40c <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xf8>
	      ++__new_finish;
   1e438:	02048493          	addi	s1,s1,32
   1e43c:	03240e63          	beq	s0,s2,1e478 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x164>
   1e440:	41790bb3          	sub	s7,s2,s7
      _ForwardIterator __cur = __result;
   1e444:	00048793          	addi	a5,s1,0
   1e448:	00043503          	ld	a0,0(s0)
   1e44c:	00843603          	ld	a2,8(s0)
   1e450:	01043683          	ld	a3,16(s0)
   1e454:	01843703          	ld	a4,24(s0)
   1e458:	00a7b023          	sd	a0,0(a5)
   1e45c:	00c7b423          	sd	a2,8(a5)
   1e460:	00d7b823          	sd	a3,16(a5)
   1e464:	00e7bc23          	sd	a4,24(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   1e468:	02040413          	addi	s0,s0,32
   1e46c:	02078793          	addi	a5,a5,32
   1e470:	fd241ce3          	bne	s0,s2,1e448 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x134>
   1e474:	017484b3          	add	s1,s1,s7
	if (__p)
   1e478:	000a0663          	beq	s4,zero,1e484 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x170>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e47c:	000a0513          	addi	a0,s4,0
   1e480:	830f80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   1e484:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   1e488:	009ab423          	sd	s1,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1e48c:	005b1b13          	slli	s6,s6,0x5
   1e490:	016989b3          	add	s3,s3,s6
   1e494:	013ab823          	sd	s3,16(s5)
    }
   1e498:	04813083          	ld	ra,72(sp)
   1e49c:	04013403          	ld	s0,64(sp)
   1e4a0:	03813483          	ld	s1,56(sp)
   1e4a4:	03013903          	ld	s2,48(sp)
   1e4a8:	02813983          	ld	s3,40(sp)
   1e4ac:	02013a03          	ld	s4,32(sp)
   1e4b0:	01813a83          	ld	s5,24(sp)
   1e4b4:	01013b03          	ld	s6,16(sp)
   1e4b8:	00813b83          	ld	s7,8(sp)
   1e4bc:	00013c03          	ld	s8,0(sp)
   1e4c0:	05010113          	addi	sp,sp,80
   1e4c4:	00008067          	jalr	zero,0(ra)

000000000001e4c8 <dwarf::value::get_section_offset() const>:
    : cu(cu), form(form), typ(typ), offset(offset) {
  if (form == DW_FORM::indirect)
    resolve_indirect(name);
}

section_offset value::get_section_offset() const {
   1e4c8:	ff010113          	addi	sp,sp,-16
   1e4cc:	00113423          	sd	ra,8(sp)
   1e4d0:	00813023          	sd	s0,0(sp)
   1e4d4:	00050413          	addi	s0,a0,0
  return cu->get_section_offset() + offset;
   1e4d8:	00053503          	ld	a0,0(a0)
   1e4dc:	854f90ef          	jal	ra,17530 <dwarf::unit::get_section_offset() const>
   1e4e0:	01043783          	ld	a5,16(s0)
}
   1e4e4:	00f50533          	add	a0,a0,a5
   1e4e8:	00813083          	ld	ra,8(sp)
   1e4ec:	00013403          	ld	s0,0(sp)
   1e4f0:	01010113          	addi	sp,sp,16
   1e4f4:	00008067          	jalr	zero,0(ra)

000000000001e4f8 <dwarf::value::as_address() const>:

taddr value::as_address() const {
   1e4f8:	f6010113          	addi	sp,sp,-160
   1e4fc:	08113c23          	sd	ra,152(sp)
   1e500:	08813823          	sd	s0,144(sp)
   1e504:	08913423          	sd	s1,136(sp)
   1e508:	09213023          	sd	s2,128(sp)
   1e50c:	00050413          	addi	s0,a0,0
  if (form != DW_FORM::addr)
   1e510:	00852703          	lw	a4,8(a0)
   1e514:	00100793          	addi	a5,zero,1
   1e518:	0cf71c63          	bne	a4,a5,1e5f0 <dwarf::value::as_address() const+0xf8>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as address");

  cursor cur(cu->data(), offset);
   1e51c:	00053503          	ld	a0,0(a0)
   1e520:	81cf90ef          	jal	ra,1753c <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e524:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1e528:	00853483          	ld	s1,8(a0)
	if (_M_pi != nullptr)
   1e52c:	2e048c63          	beq	s1,zero,1e824 <dwarf::value::as_address() const+0x32c>
    if (__is_single_threaded())
   1e530:	00024797          	auipc	a5,0x24
   1e534:	f487b783          	ld	a5,-184(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e538:	0007c783          	lbu	a5,0(a5)
   1e53c:	16078a63          	beq	a5,zero,1e6b0 <dwarf::value::as_address() const+0x1b8>
  { *__mem += __val; }
   1e540:	0304a783          	lw	a5,48(s1)
   1e544:	0017879b          	addiw	a5,a5,1
   1e548:	02f4a823          	sw	a5,48(s1)
   1e54c:	01043403          	ld	s0,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e550:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   1e554:	06913823          	sd	s1,112(sp)
    if (__is_single_threaded())
   1e558:	00024797          	auipc	a5,0x24
   1e55c:	f207b783          	ld	a5,-224(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e560:	0007c783          	lbu	a5,0(a5)
   1e564:	14078e63          	beq	a5,zero,1e6c0 <dwarf::value::as_address() const+0x1c8>
  { *__mem += __val; }
   1e568:	0304a783          	lw	a5,48(s1)
   1e56c:	0017879b          	addiw	a5,a5,1
   1e570:	02f4a823          	sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   1e574:	00893783          	ld	a5,8(s2)
   1e578:	008787b3          	add	a5,a5,s0
   1e57c:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   1e580:	00024797          	auipc	a5,0x24
   1e584:	ef87b783          	ld	a5,-264(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e588:	0007c783          	lbu	a5,0(a5)
   1e58c:	14078263          	beq	a5,zero,1e6d0 <dwarf::value::as_address() const+0x1d8>
    _Atomic_word __result = *__mem;
   1e590:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1e594:	fff5079b          	addiw	a5,a0,-1
   1e598:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1e59c:	00100793          	addi	a5,zero,1
   1e5a0:	28f51e63          	bne	a0,a5,1e83c <dwarf::value::as_address() const+0x344>
	_M_dispose();
   1e5a4:	0004b783          	ld	a5,0(s1)
   1e5a8:	0107b783          	ld	a5,16(a5)
   1e5ac:	00048513          	addi	a0,s1,0
   1e5b0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1e5b4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1e5b8:	00024797          	auipc	a5,0x24
   1e5bc:	ec07b783          	ld	a5,-320(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e5c0:	0007c783          	lbu	a5,0(a5)
   1e5c4:	10078e63          	beq	a5,zero,1e6e0 <dwarf::value::as_address() const+0x1e8>
    _Atomic_word __result = *__mem;
   1e5c8:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   1e5cc:	fff5079b          	addiw	a5,a0,-1
   1e5d0:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1e5d4:	00100793          	addi	a5,zero,1
   1e5d8:	26f51263          	bne	a0,a5,1e83c <dwarf::value::as_address() const+0x344>
	    _M_destroy();
   1e5dc:	0004b783          	ld	a5,0(s1)
   1e5e0:	0187b783          	ld	a5,24(a5)
   1e5e4:	00048513          	addi	a0,s1,0
   1e5e8:	000780e7          	jalr	ra,0(a5)
   1e5ec:	2500006f          	jal	zero,1e83c <dwarf::value::as_address() const+0x344>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as address");
   1e5f0:	01000513          	addi	a0,zero,16
   1e5f4:	dddf70ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1e5f8:	00050493          	addi	s1,a0,0
   1e5fc:	00c42583          	lw	a1,12(s0)
   1e600:	00810513          	addi	a0,sp,8
   1e604:	025100ef          	jal	ra,2ee28 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1e608:	00019617          	auipc	a2,0x19
   1e60c:	87060613          	addi	a2,a2,-1936 # 36e78 <std::piecewise_construct+0x1c8>
   1e610:	00000593          	addi	a1,zero,0
   1e614:	00810513          	addi	a0,sp,8
   1e618:	d29f70ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1e61c:	00050593          	addi	a1,a0,0
   1e620:	02810413          	addi	s0,sp,40
   1e624:	00040513          	addi	a0,s0,0
   1e628:	de9f70ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1e62c:	00019597          	auipc	a1,0x19
   1e630:	85c58593          	addi	a1,a1,-1956 # 36e88 <std::piecewise_construct+0x1d8>
   1e634:	00040513          	addi	a0,s0,0
   1e638:	908f80ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1e63c:	00050593          	addi	a1,a0,0
   1e640:	04810413          	addi	s0,sp,72
   1e644:	00040513          	addi	a0,s0,0
   1e648:	dc9f70ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::logic_error(what_arg) {}
   1e64c:	00040593          	addi	a1,s0,0
   1e650:	00048513          	addi	a0,s1,0
   1e654:	93cf80ef          	jal	ra,16790 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1e658:	00024797          	auipc	a5,0x24
   1e65c:	de87b783          	ld	a5,-536(a5) # 42440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   1e660:	01078793          	addi	a5,a5,16
   1e664:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1e668:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1e66c:	05810793          	addi	a5,sp,88
   1e670:	00f50463          	beq	a0,a5,1e678 <dwarf::value::as_address() const+0x180>
   1e674:	e3df70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e678:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1e67c:	03810793          	addi	a5,sp,56
   1e680:	00f50463          	beq	a0,a5,1e688 <dwarf::value::as_address() const+0x190>
   1e684:	e2df70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e688:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1e68c:	01810793          	addi	a5,sp,24
   1e690:	00f50463          	beq	a0,a5,1e698 <dwarf::value::as_address() const+0x1a0>
   1e694:	e1df70ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1e698:	00024617          	auipc	a2,0x24
   1e69c:	f3863603          	ld	a2,-200(a2) # 425d0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f690>
   1e6a0:	00024597          	auipc	a1,0x24
   1e6a4:	ef05b583          	ld	a1,-272(a1) # 42590 <typeinfo for dwarf::value_type_mismatch@@Base+0xb70>
   1e6a8:	00048513          	addi	a0,s1,0
   1e6ac:	fb5f70ef          	jal	ra,16660 <__cxa_throw@plt>
      __atomic_add(__mem, __val);
   1e6b0:	00100593          	addi	a1,zero,1
   1e6b4:	03048513          	addi	a0,s1,48
   1e6b8:	c49f70ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1e6bc:	e91ff06f          	jal	zero,1e54c <dwarf::value::as_address() const+0x54>
   1e6c0:	00100593          	addi	a1,zero,1
   1e6c4:	03048513          	addi	a0,s1,48
   1e6c8:	c39f70ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1e6cc:	ea9ff06f          	jal	zero,1e574 <dwarf::value::as_address() const+0x7c>
      return __exchange_and_add(__mem, __val);
   1e6d0:	fff00593          	addi	a1,zero,-1
   1e6d4:	03048513          	addi	a0,s1,48
   1e6d8:	c59f70ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e6dc:	ec1ff06f          	jal	zero,1e59c <dwarf::value::as_address() const+0xa4>
   1e6e0:	fff00593          	addi	a1,zero,-1
   1e6e4:	03448513          	addi	a0,s1,52
   1e6e8:	c49f70ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e6ec:	ee9ff06f          	jal	zero,1e5d4 <dwarf::value::as_address() const+0xdc>
  return cur.address();
   1e6f0:	00050413          	addi	s0,a0,0
	if (_M_pi != nullptr)
   1e6f4:	07013483          	ld	s1,112(sp)
   1e6f8:	02048463          	beq	s1,zero,1e720 <dwarf::value::as_address() const+0x228>
    if (__is_single_threaded())
   1e6fc:	00024797          	auipc	a5,0x24
   1e700:	d7c7b783          	ld	a5,-644(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e704:	0007c783          	lbu	a5,0(a5)
   1e708:	02078a63          	beq	a5,zero,1e73c <dwarf::value::as_address() const+0x244>
    _Atomic_word __result = *__mem;
   1e70c:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1e710:	fff5079b          	addiw	a5,a0,-1
   1e714:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1e718:	00100793          	addi	a5,zero,1
   1e71c:	02f50863          	beq	a0,a5,1e74c <dwarf::value::as_address() const+0x254>
}
   1e720:	00040513          	addi	a0,s0,0
   1e724:	09813083          	ld	ra,152(sp)
   1e728:	09013403          	ld	s0,144(sp)
   1e72c:	08813483          	ld	s1,136(sp)
   1e730:	08013903          	ld	s2,128(sp)
   1e734:	0a010113          	addi	sp,sp,160
   1e738:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   1e73c:	fff00593          	addi	a1,zero,-1
   1e740:	03048513          	addi	a0,s1,48
   1e744:	bedf70ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e748:	fd1ff06f          	jal	zero,1e718 <dwarf::value::as_address() const+0x220>
	_M_dispose();
   1e74c:	0004b783          	ld	a5,0(s1)
   1e750:	0107b783          	ld	a5,16(a5)
   1e754:	00048513          	addi	a0,s1,0
   1e758:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1e75c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1e760:	00024797          	auipc	a5,0x24
   1e764:	d187b783          	ld	a5,-744(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e768:	0007c783          	lbu	a5,0(a5)
   1e76c:	02078663          	beq	a5,zero,1e798 <dwarf::value::as_address() const+0x2a0>
    _Atomic_word __result = *__mem;
   1e770:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   1e774:	fff5079b          	addiw	a5,a0,-1
   1e778:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1e77c:	00100793          	addi	a5,zero,1
   1e780:	faf510e3          	bne	a0,a5,1e720 <dwarf::value::as_address() const+0x228>
	    _M_destroy();
   1e784:	0004b783          	ld	a5,0(s1)
   1e788:	0187b783          	ld	a5,24(a5)
   1e78c:	00048513          	addi	a0,s1,0
   1e790:	000780e7          	jalr	ra,0(a5)
  return cur.address();
   1e794:	f8dff06f          	jal	zero,1e720 <dwarf::value::as_address() const+0x228>
      return __exchange_and_add(__mem, __val);
   1e798:	fff00593          	addi	a1,zero,-1
   1e79c:	03448513          	addi	a0,s1,52
   1e7a0:	b91f70ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e7a4:	fd9ff06f          	jal	zero,1e77c <dwarf::value::as_address() const+0x284>
      { return _M_dataplus._M_p; }
   1e7a8:	00050413          	addi	s0,a0,0
   1e7ac:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1e7b0:	05810793          	addi	a5,sp,88
   1e7b4:	00f50463          	beq	a0,a5,1e7bc <dwarf::value::as_address() const+0x2c4>
   1e7b8:	cf9f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e7bc:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1e7c0:	03810793          	addi	a5,sp,56
   1e7c4:	00f50463          	beq	a0,a5,1e7cc <dwarf::value::as_address() const+0x2d4>
   1e7c8:	ce9f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e7cc:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1e7d0:	01810793          	addi	a5,sp,24
   1e7d4:	00f50463          	beq	a0,a5,1e7dc <dwarf::value::as_address() const+0x2e4>
   1e7d8:	cd9f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as address");
   1e7dc:	00048513          	addi	a0,s1,0
   1e7e0:	c91f70ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1e7e4:	00040513          	addi	a0,s0,0
   1e7e8:	ea9f70ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1e7ec:	00050413          	addi	s0,a0,0
   1e7f0:	fcdff06f          	jal	zero,1e7bc <dwarf::value::as_address() const+0x2c4>
   1e7f4:	00050413          	addi	s0,a0,0
   1e7f8:	fd5ff06f          	jal	zero,1e7cc <dwarf::value::as_address() const+0x2d4>
   1e7fc:	00050413          	addi	s0,a0,0
   1e800:	fddff06f          	jal	zero,1e7dc <dwarf::value::as_address() const+0x2e4>
	if (_M_pi != nullptr)
   1e804:	00050413          	addi	s0,a0,0
   1e808:	07013503          	ld	a0,112(sp)
   1e80c:	00050863          	beq	a0,zero,1e81c <dwarf::value::as_address() const+0x324>
	  _M_pi->_M_release();
   1e810:	00024317          	auipc	t1,0x24
   1e814:	bb033303          	ld	t1,-1104(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   1e818:	000300e7          	jalr	ra,0(t1)
   1e81c:	00040513          	addi	a0,s0,0
   1e820:	e71f70ef          	jal	ra,16690 <_Unwind_Resume@plt>
  cursor cur(cu->data(), offset);
   1e824:	01043703          	ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e828:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   1e82c:	06013823          	sd	zero,112(sp)
   1e830:	00893783          	ld	a5,8(s2)
   1e834:	00e787b3          	add	a5,a5,a4
   1e838:	06f13c23          	sd	a5,120(sp)
  return cur.address();
   1e83c:	06810513          	addi	a0,sp,104
   1e840:	00024317          	auipc	t1,0x24
   1e844:	b3033303          	ld	t1,-1232(t1) # 42370 <dwarf::cursor::address()@@Base+0x1f3cc>
   1e848:	000300e7          	jalr	ra,0(t1)
   1e84c:	ea5ff06f          	jal	zero,1e6f0 <dwarf::value::as_address() const+0x1f8>

000000000001e850 <dwarf::value::as_block(unsigned long*) const>:

const void *value::as_block(size_t *size_out) const {
   1e850:	f5010113          	addi	sp,sp,-176
   1e854:	0a113423          	sd	ra,168(sp)
   1e858:	0a813023          	sd	s0,160(sp)
   1e85c:	08913c23          	sd	s1,152(sp)
   1e860:	09213823          	sd	s2,144(sp)
   1e864:	09313423          	sd	s3,136(sp)
   1e868:	09413023          	sd	s4,128(sp)
   1e86c:	00050493          	addi	s1,a0,0
   1e870:	00058413          	addi	s0,a1,0
  // XXX Blocks can contain all sorts of things, including
  // references, which couldn't be resolved by callers in the
  // current minimal API.
  cursor cur(cu->data(), offset);
   1e874:	00053503          	ld	a0,0(a0)
   1e878:	cc5f80ef          	jal	ra,1753c <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e87c:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1e880:	00853903          	ld	s2,8(a0)
	if (_M_pi != nullptr)
   1e884:	4a090863          	beq	s2,zero,1ed34 <dwarf::value::as_block(unsigned long*) const+0x4e4>
    if (__is_single_threaded())
   1e888:	00024797          	auipc	a5,0x24
   1e88c:	bf07b783          	ld	a5,-1040(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e890:	0007c783          	lbu	a5,0(a5)
   1e894:	0a078a63          	beq	a5,zero,1e948 <dwarf::value::as_block(unsigned long*) const+0xf8>
  { *__mem += __val; }
   1e898:	03092783          	lw	a5,48(s2)
   1e89c:	0017879b          	addiw	a5,a5,1
   1e8a0:	02f92823          	sw	a5,48(s2)
   1e8a4:	0104ba03          	ld	s4,16(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e8a8:	07313423          	sd	s3,104(sp)
      : _M_pi(__r._M_pi)
   1e8ac:	07213823          	sd	s2,112(sp)
    if (__is_single_threaded())
   1e8b0:	00024797          	auipc	a5,0x24
   1e8b4:	bc87b783          	ld	a5,-1080(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e8b8:	0007c783          	lbu	a5,0(a5)
   1e8bc:	08078e63          	beq	a5,zero,1e958 <dwarf::value::as_block(unsigned long*) const+0x108>
  { *__mem += __val; }
   1e8c0:	03092783          	lw	a5,48(s2)
   1e8c4:	0017879b          	addiw	a5,a5,1
   1e8c8:	02f92823          	sw	a5,48(s2)
   1e8cc:	0089b783          	ld	a5,8(s3)
   1e8d0:	014787b3          	add	a5,a5,s4
   1e8d4:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   1e8d8:	00024797          	auipc	a5,0x24
   1e8dc:	ba07b783          	ld	a5,-1120(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e8e0:	0007c783          	lbu	a5,0(a5)
   1e8e4:	08078263          	beq	a5,zero,1e968 <dwarf::value::as_block(unsigned long*) const+0x118>
    _Atomic_word __result = *__mem;
   1e8e8:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   1e8ec:	fff5079b          	addiw	a5,a0,-1
   1e8f0:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1e8f4:	00100793          	addi	a5,zero,1
   1e8f8:	44f51a63          	bne	a0,a5,1ed4c <dwarf::value::as_block(unsigned long*) const+0x4fc>
	_M_dispose();
   1e8fc:	00093783          	ld	a5,0(s2)
   1e900:	0107b783          	ld	a5,16(a5)
   1e904:	00090513          	addi	a0,s2,0
   1e908:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1e90c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1e910:	00024797          	auipc	a5,0x24
   1e914:	b687b783          	ld	a5,-1176(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e918:	0007c783          	lbu	a5,0(a5)
   1e91c:	04078e63          	beq	a5,zero,1e978 <dwarf::value::as_block(unsigned long*) const+0x128>
    _Atomic_word __result = *__mem;
   1e920:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   1e924:	fff5079b          	addiw	a5,a0,-1
   1e928:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1e92c:	00100793          	addi	a5,zero,1
   1e930:	40f51e63          	bne	a0,a5,1ed4c <dwarf::value::as_block(unsigned long*) const+0x4fc>
	    _M_destroy();
   1e934:	00093783          	ld	a5,0(s2)
   1e938:	0187b783          	ld	a5,24(a5)
   1e93c:	00090513          	addi	a0,s2,0
   1e940:	000780e7          	jalr	ra,0(a5)
   1e944:	4080006f          	jal	zero,1ed4c <dwarf::value::as_block(unsigned long*) const+0x4fc>
      __atomic_add(__mem, __val);
   1e948:	00100593          	addi	a1,zero,1
   1e94c:	03090513          	addi	a0,s2,48
   1e950:	9b1f70ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1e954:	f51ff06f          	jal	zero,1e8a4 <dwarf::value::as_block(unsigned long*) const+0x54>
   1e958:	00100593          	addi	a1,zero,1
   1e95c:	03090513          	addi	a0,s2,48
   1e960:	9a1f70ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1e964:	f69ff06f          	jal	zero,1e8cc <dwarf::value::as_block(unsigned long*) const+0x7c>
      return __exchange_and_add(__mem, __val);
   1e968:	fff00593          	addi	a1,zero,-1
   1e96c:	03090513          	addi	a0,s2,48
   1e970:	9c1f70ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e974:	f81ff06f          	jal	zero,1e8f4 <dwarf::value::as_block(unsigned long*) const+0xa4>
   1e978:	fff00593          	addi	a1,zero,-1
   1e97c:	03490513          	addi	a0,s2,52
   1e980:	9b1f70ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e984:	fa9ff06f          	jal	zero,1e92c <dwarf::value::as_block(unsigned long*) const+0xdc>
    while (pos < sec->end) {
   1e988:	07813703          	ld	a4,120(sp)
      { return _M_ptr; }
   1e98c:	06813503          	ld	a0,104(sp)
   1e990:	01053683          	ld	a3,16(a0)
    std::uint64_t result = 0;
   1e994:	00000793          	addi	a5,zero,0
    int shift = 0;
   1e998:	00000593          	addi	a1,zero,0
    while (pos < sec->end) {
   1e99c:	02d77a63          	bgeu	a4,a3,1e9d0 <dwarf::value::as_block(unsigned long*) const+0x180>
      uint8_t byte = *(uint8_t *)(pos++);
   1e9a0:	00170713          	addi	a4,a4,1
   1e9a4:	06e13c23          	sd	a4,120(sp)
   1e9a8:	fff74683          	lbu	a3,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1e9ac:	07f6f613          	andi	a2,a3,127
   1e9b0:	00b61633          	sll	a2,a2,a1
   1e9b4:	00c7e7b3          	or	a5,a5,a2
      if ((byte & 0x80) == 0)
   1e9b8:	0186969b          	slliw	a3,a3,0x18
   1e9bc:	4186d69b          	sraiw	a3,a3,0x18
   1e9c0:	3406d663          	bge	a3,zero,1ed0c <dwarf::value::as_block(unsigned long*) const+0x4bc>
      shift += 7;
   1e9c4:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   1e9c8:	01053683          	ld	a3,16(a0)
   1e9cc:	fcd76ae3          	bltu	a4,a3,1e9a0 <dwarf::value::as_block(unsigned long*) const+0x150>
    underflow();
   1e9d0:	06810513          	addi	a0,sp,104
   1e9d4:	928fe0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    return 0;
   1e9d8:	1280006f          	jal	zero,1eb00 <dwarf::value::as_block(unsigned long*) const+0x2b0>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1e9dc:	06813783          	ld	a5,104(sp)
   1e9e0:	0107b703          	ld	a4,16(a5)
   1e9e4:	07813783          	ld	a5,120(sp)
   1e9e8:	00e7e663          	bltu	a5,a4,1e9f4 <dwarf::value::as_block(unsigned long*) const+0x1a4>
      underflow();
   1e9ec:	06810513          	addi	a0,sp,104
   1e9f0:	90cfe0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1e9f4:	07813703          	ld	a4,120(sp)
    if (sec->ord == byte_order::lsb) {
   1e9f8:	06813783          	ld	a5,104(sp)
   1e9fc:	01c7a783          	lw	a5,28(a5)
   1ea00:	30078063          	beq	a5,zero,1ed00 <dwarf::value::as_block(unsigned long*) const+0x4b0>
        val = (val << 8) | (uint64_t)p[i];
   1ea04:	00074783          	lbu	a5,0(a4)
      for (unsigned i = 0; i < sizeof(T); i++)
   1ea08:	2fc0006f          	jal	zero,1ed04 <dwarf::value::as_block(unsigned long*) const+0x4b4>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ea0c:	06813783          	ld	a5,104(sp)
   1ea10:	0107b703          	ld	a4,16(a5)
   1ea14:	07813783          	ld	a5,120(sp)
   1ea18:	40f70633          	sub	a2,a4,a5
   1ea1c:	00100693          	addi	a3,zero,1
   1ea20:	00c6f463          	bgeu	a3,a2,1ea28 <dwarf::value::as_block(unsigned long*) const+0x1d8>
   1ea24:	00e7e663          	bltu	a5,a4,1ea30 <dwarf::value::as_block(unsigned long*) const+0x1e0>
      underflow();
   1ea28:	06810513          	addi	a0,sp,104
   1ea2c:	8d0fe0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1ea30:	07813703          	ld	a4,120(sp)
    if (sec->ord == byte_order::lsb) {
   1ea34:	06813783          	ld	a5,104(sp)
   1ea38:	01c7a783          	lw	a5,28(a5)
   1ea3c:	02079063          	bne	a5,zero,1ea5c <dwarf::value::as_block(unsigned long*) const+0x20c>
        val |= ((uint64_t)p[i]) << (i * 8);
   1ea40:	00174783          	lbu	a5,1(a4)
   1ea44:	00879793          	slli	a5,a5,0x8
   1ea48:	00074683          	lbu	a3,0(a4)
   1ea4c:	00d7e7b3          	or	a5,a5,a3
    pos += sizeof(T);
   1ea50:	00270713          	addi	a4,a4,2
   1ea54:	06e13c23          	sd	a4,120(sp)
  case DW_FORM::block1:
    *size_out = cur.fixed<uint8_t>();
    break;
  case DW_FORM::block2:
    *size_out = cur.fixed<uint16_t>();
    break;
   1ea58:	2b40006f          	jal	zero,1ed0c <dwarf::value::as_block(unsigned long*) const+0x4bc>
        val = (val << 8) | (uint64_t)p[i];
   1ea5c:	00074783          	lbu	a5,0(a4)
   1ea60:	00879793          	slli	a5,a5,0x8
   1ea64:	00174683          	lbu	a3,1(a4)
   1ea68:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1ea6c:	fe5ff06f          	jal	zero,1ea50 <dwarf::value::as_block(unsigned long*) const+0x200>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ea70:	06813783          	ld	a5,104(sp)
   1ea74:	0107b703          	ld	a4,16(a5)
   1ea78:	07813783          	ld	a5,120(sp)
   1ea7c:	40f70633          	sub	a2,a4,a5
   1ea80:	00300693          	addi	a3,zero,3
   1ea84:	00c6f463          	bgeu	a3,a2,1ea8c <dwarf::value::as_block(unsigned long*) const+0x23c>
   1ea88:	00e7e663          	bltu	a5,a4,1ea94 <dwarf::value::as_block(unsigned long*) const+0x244>
      underflow();
   1ea8c:	06810513          	addi	a0,sp,104
   1ea90:	86cfe0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1ea94:	07813583          	ld	a1,120(sp)
    if (sec->ord == byte_order::lsb) {
   1ea98:	06813783          	ld	a5,104(sp)
   1ea9c:	01c7a783          	lw	a5,28(a5)
   1eaa0:	02079e63          	bne	a5,zero,1eadc <dwarf::value::as_block(unsigned long*) const+0x28c>
   1eaa4:	00058613          	addi	a2,a1,0
   1eaa8:	00000713          	addi	a4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1eaac:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1eab0:	00064683          	lbu	a3,0(a2)
   1eab4:	00e696b3          	sll	a3,a3,a4
   1eab8:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1eabc:	00160613          	addi	a2,a2,1
   1eac0:	0087071b          	addiw	a4,a4,8
   1eac4:	fea716e3          	bne	a4,a0,1eab0 <dwarf::value::as_block(unsigned long*) const+0x260>
    pos += sizeof(T);
   1eac8:	00458593          	addi	a1,a1,4
   1eacc:	06b13c23          	sd	a1,120(sp)
   1ead0:	02079793          	slli	a5,a5,0x20
   1ead4:	0207d793          	srli	a5,a5,0x20
  case DW_FORM::block4:
    *size_out = cur.fixed<uint32_t>();
    break;
   1ead8:	2340006f          	jal	zero,1ed0c <dwarf::value::as_block(unsigned long*) const+0x4bc>
   1eadc:	00058713          	addi	a4,a1,0
   1eae0:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1eae4:	00000793          	addi	a5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1eae8:	00879793          	slli	a5,a5,0x8
   1eaec:	00074683          	lbu	a3,0(a4)
   1eaf0:	00f6e7b3          	or	a5,a3,a5
      for (unsigned i = 0; i < sizeof(T); i++)
   1eaf4:	00170713          	addi	a4,a4,1
   1eaf8:	fec718e3          	bne	a4,a2,1eae8 <dwarf::value::as_block(unsigned long*) const+0x298>
   1eafc:	fcdff06f          	jal	zero,1eac8 <dwarf::value::as_block(unsigned long*) const+0x278>
    return 0;
   1eb00:	00000793          	addi	a5,zero,0
  case DW_FORM::block:
  case DW_FORM::exprloc:
    *size_out = cur.uleb128();
    break;
   1eb04:	2080006f          	jal	zero,1ed0c <dwarf::value::as_block(unsigned long*) const+0x4bc>
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as block");
   1eb08:	01000513          	addi	a0,zero,16
   1eb0c:	8c5f70ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1eb10:	00050913          	addi	s2,a0,0
   1eb14:	00c4a583          	lw	a1,12(s1)
   1eb18:	00810513          	addi	a0,sp,8
   1eb1c:	30c100ef          	jal	ra,2ee28 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1eb20:	00018617          	auipc	a2,0x18
   1eb24:	35860613          	addi	a2,a2,856 # 36e78 <std::piecewise_construct+0x1c8>
   1eb28:	00000593          	addi	a1,zero,0
   1eb2c:	00810513          	addi	a0,sp,8
   1eb30:	811f70ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1eb34:	00050593          	addi	a1,a0,0
   1eb38:	02810413          	addi	s0,sp,40
   1eb3c:	00040513          	addi	a0,s0,0
   1eb40:	8d1f70ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1eb44:	00018597          	auipc	a1,0x18
   1eb48:	35458593          	addi	a1,a1,852 # 36e98 <std::piecewise_construct+0x1e8>
   1eb4c:	00040513          	addi	a0,s0,0
   1eb50:	bf1f70ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1eb54:	00050593          	addi	a1,a0,0
   1eb58:	04810413          	addi	s0,sp,72
   1eb5c:	00040513          	addi	a0,s0,0
   1eb60:	8b1f70ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1eb64:	00040593          	addi	a1,s0,0
   1eb68:	00090513          	addi	a0,s2,0
   1eb6c:	c25f70ef          	jal	ra,16790 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1eb70:	00024797          	auipc	a5,0x24
   1eb74:	8d07b783          	ld	a5,-1840(a5) # 42440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   1eb78:	01078793          	addi	a5,a5,16
   1eb7c:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   1eb80:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1eb84:	05810793          	addi	a5,sp,88
   1eb88:	00f50463          	beq	a0,a5,1eb90 <dwarf::value::as_block(unsigned long*) const+0x340>
   1eb8c:	925f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1eb90:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1eb94:	03810793          	addi	a5,sp,56
   1eb98:	00f50463          	beq	a0,a5,1eba0 <dwarf::value::as_block(unsigned long*) const+0x350>
   1eb9c:	915f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1eba0:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1eba4:	01810793          	addi	a5,sp,24
   1eba8:	00f50463          	beq	a0,a5,1ebb0 <dwarf::value::as_block(unsigned long*) const+0x360>
   1ebac:	905f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1ebb0:	00024617          	auipc	a2,0x24
   1ebb4:	a2063603          	ld	a2,-1504(a2) # 425d0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f690>
   1ebb8:	00024597          	auipc	a1,0x24
   1ebbc:	9d85b583          	ld	a1,-1576(a1) # 42590 <typeinfo for dwarf::value_type_mismatch@@Base+0xb70>
   1ebc0:	00090513          	addi	a0,s2,0
   1ebc4:	a9df70ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1ebc8:	00050413          	addi	s0,a0,0
   1ebcc:	1000006f          	jal	zero,1eccc <dwarf::value::as_block(unsigned long*) const+0x47c>
  }
  cur.ensure(*size_out);
  return cur.pos;
   1ebd0:	07813483          	ld	s1,120(sp)
   1ebd4:	07013403          	ld	s0,112(sp)
   1ebd8:	02040463          	beq	s0,zero,1ec00 <dwarf::value::as_block(unsigned long*) const+0x3b0>
    if (__is_single_threaded())
   1ebdc:	00024797          	auipc	a5,0x24
   1ebe0:	89c7b783          	ld	a5,-1892(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1ebe4:	0007c783          	lbu	a5,0(a5)
   1ebe8:	02078e63          	beq	a5,zero,1ec24 <dwarf::value::as_block(unsigned long*) const+0x3d4>
    _Atomic_word __result = *__mem;
   1ebec:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1ebf0:	fff5079b          	addiw	a5,a0,-1
   1ebf4:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1ebf8:	00100793          	addi	a5,zero,1
   1ebfc:	02f50c63          	beq	a0,a5,1ec34 <dwarf::value::as_block(unsigned long*) const+0x3e4>
}
   1ec00:	00048513          	addi	a0,s1,0
   1ec04:	0a813083          	ld	ra,168(sp)
   1ec08:	0a013403          	ld	s0,160(sp)
   1ec0c:	09813483          	ld	s1,152(sp)
   1ec10:	09013903          	ld	s2,144(sp)
   1ec14:	08813983          	ld	s3,136(sp)
   1ec18:	08013a03          	ld	s4,128(sp)
   1ec1c:	0b010113          	addi	sp,sp,176
   1ec20:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   1ec24:	fff00593          	addi	a1,zero,-1
   1ec28:	03040513          	addi	a0,s0,48
   1ec2c:	f04f70ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ec30:	fc9ff06f          	jal	zero,1ebf8 <dwarf::value::as_block(unsigned long*) const+0x3a8>
	_M_dispose();
   1ec34:	00043783          	ld	a5,0(s0)
   1ec38:	0107b783          	ld	a5,16(a5)
   1ec3c:	00040513          	addi	a0,s0,0
   1ec40:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1ec44:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1ec48:	00024797          	auipc	a5,0x24
   1ec4c:	8307b783          	ld	a5,-2000(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1ec50:	0007c783          	lbu	a5,0(a5)
   1ec54:	02078663          	beq	a5,zero,1ec80 <dwarf::value::as_block(unsigned long*) const+0x430>
    _Atomic_word __result = *__mem;
   1ec58:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1ec5c:	fff5079b          	addiw	a5,a0,-1
   1ec60:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1ec64:	00100793          	addi	a5,zero,1
   1ec68:	f8f51ce3          	bne	a0,a5,1ec00 <dwarf::value::as_block(unsigned long*) const+0x3b0>
	    _M_destroy();
   1ec6c:	00043783          	ld	a5,0(s0)
   1ec70:	0187b783          	ld	a5,24(a5)
   1ec74:	00040513          	addi	a0,s0,0
   1ec78:	000780e7          	jalr	ra,0(a5)
  return cur.pos;
   1ec7c:	f85ff06f          	jal	zero,1ec00 <dwarf::value::as_block(unsigned long*) const+0x3b0>
      return __exchange_and_add(__mem, __val);
   1ec80:	fff00593          	addi	a1,zero,-1
   1ec84:	03440513          	addi	a0,s0,52
   1ec88:	ea8f70ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ec8c:	fd9ff06f          	jal	zero,1ec64 <dwarf::value::as_block(unsigned long*) const+0x414>
      { return _M_dataplus._M_p; }
   1ec90:	00050413          	addi	s0,a0,0
   1ec94:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1ec98:	05810793          	addi	a5,sp,88
   1ec9c:	00f50463          	beq	a0,a5,1eca4 <dwarf::value::as_block(unsigned long*) const+0x454>
   1eca0:	811f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1eca4:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1eca8:	03810793          	addi	a5,sp,56
   1ecac:	00f50463          	beq	a0,a5,1ecb4 <dwarf::value::as_block(unsigned long*) const+0x464>
   1ecb0:	801f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ecb4:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1ecb8:	01810793          	addi	a5,sp,24
   1ecbc:	00f50463          	beq	a0,a5,1ecc4 <dwarf::value::as_block(unsigned long*) const+0x474>
   1ecc0:	ff0f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as block");
   1ecc4:	00090513          	addi	a0,s2,0
   1ecc8:	fa8f70ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1eccc:	07013503          	ld	a0,112(sp)
   1ecd0:	00050863          	beq	a0,zero,1ece0 <dwarf::value::as_block(unsigned long*) const+0x490>
	  _M_pi->_M_release();
   1ecd4:	00023317          	auipc	t1,0x23
   1ecd8:	6ec33303          	ld	t1,1772(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   1ecdc:	000300e7          	jalr	ra,0(t1)
   1ece0:	00040513          	addi	a0,s0,0
   1ece4:	9adf70ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1ece8:	00050413          	addi	s0,a0,0
   1ecec:	fb9ff06f          	jal	zero,1eca4 <dwarf::value::as_block(unsigned long*) const+0x454>
   1ecf0:	00050413          	addi	s0,a0,0
   1ecf4:	fc1ff06f          	jal	zero,1ecb4 <dwarf::value::as_block(unsigned long*) const+0x464>
   1ecf8:	00050413          	addi	s0,a0,0
   1ecfc:	fc9ff06f          	jal	zero,1ecc4 <dwarf::value::as_block(unsigned long*) const+0x474>
        val |= ((uint64_t)p[i]) << (i * 8);
   1ed00:	00074783          	lbu	a5,0(a4)
    pos += sizeof(T);
   1ed04:	00170713          	addi	a4,a4,1
   1ed08:	06e13c23          	sd	a4,120(sp)
    *size_out = cur.fixed<uint8_t>();
   1ed0c:	00f43023          	sd	a5,0(s0)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ed10:	06813703          	ld	a4,104(sp)
   1ed14:	01073683          	ld	a3,16(a4)
   1ed18:	07813703          	ld	a4,120(sp)
   1ed1c:	40e68633          	sub	a2,a3,a4
   1ed20:	00f66463          	bltu	a2,a5,1ed28 <dwarf::value::as_block(unsigned long*) const+0x4d8>
   1ed24:	ead766e3          	bltu	a4,a3,1ebd0 <dwarf::value::as_block(unsigned long*) const+0x380>
      underflow();
   1ed28:	06810513          	addi	a0,sp,104
   1ed2c:	dd1fd0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
   1ed30:	ea1ff06f          	jal	zero,1ebd0 <dwarf::value::as_block(unsigned long*) const+0x380>
  cursor cur(cu->data(), offset);
   1ed34:	0104b703          	ld	a4,16(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1ed38:	07313423          	sd	s3,104(sp)
      : _M_pi(__r._M_pi)
   1ed3c:	06013823          	sd	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1ed40:	0089b783          	ld	a5,8(s3)
   1ed44:	00e787b3          	add	a5,a5,a4
   1ed48:	06f13c23          	sd	a5,120(sp)
  switch (form) {
   1ed4c:	0084a783          	lw	a5,8(s1)
   1ed50:	ffd7879b          	addiw	a5,a5,-3
   1ed54:	0007869b          	addiw	a3,a5,0
   1ed58:	01500713          	addi	a4,zero,21
   1ed5c:	dad766e3          	bltu	a4,a3,1eb08 <dwarf::value::as_block(unsigned long*) const+0x2b8>
   1ed60:	02079713          	slli	a4,a5,0x20
   1ed64:	01e75793          	srli	a5,a4,0x1e
   1ed68:	00018717          	auipc	a4,0x18
   1ed6c:	2a070713          	addi	a4,a4,672 # 37008 <std::piecewise_construct+0x358>
   1ed70:	00e787b3          	add	a5,a5,a4
   1ed74:	0007a783          	lw	a5,0(a5)
   1ed78:	00e787b3          	add	a5,a5,a4
   1ed7c:	00078067          	jalr	zero,0(a5)

000000000001ed80 <dwarf::value::as_uconstant() const>:

uint64_t value::as_uconstant() const {
   1ed80:	f5010113          	addi	sp,sp,-176
   1ed84:	0a113423          	sd	ra,168(sp)
   1ed88:	0a813023          	sd	s0,160(sp)
   1ed8c:	08913c23          	sd	s1,152(sp)
   1ed90:	09213823          	sd	s2,144(sp)
   1ed94:	09313423          	sd	s3,136(sp)
   1ed98:	00050413          	addi	s0,a0,0
  cursor cur(cu->data(), offset);
   1ed9c:	00053503          	ld	a0,0(a0)
   1eda0:	f9cf80ef          	jal	ra,1753c <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1eda4:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1eda8:	00853483          	ld	s1,8(a0)
	if (_M_pi != nullptr)
   1edac:	50048463          	beq	s1,zero,1f2b4 <dwarf::value::as_uconstant() const+0x534>
    if (__is_single_threaded())
   1edb0:	00023797          	auipc	a5,0x23
   1edb4:	6c87b783          	ld	a5,1736(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1edb8:	0007c783          	lbu	a5,0(a5)
   1edbc:	0a078a63          	beq	a5,zero,1ee70 <dwarf::value::as_uconstant() const+0xf0>
  { *__mem += __val; }
   1edc0:	0304a783          	lw	a5,48(s1)
   1edc4:	0017879b          	addiw	a5,a5,1
   1edc8:	02f4a823          	sw	a5,48(s1)
   1edcc:	01043983          	ld	s3,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1edd0:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   1edd4:	06913823          	sd	s1,112(sp)
    if (__is_single_threaded())
   1edd8:	00023797          	auipc	a5,0x23
   1eddc:	6a07b783          	ld	a5,1696(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1ede0:	0007c783          	lbu	a5,0(a5)
   1ede4:	08078e63          	beq	a5,zero,1ee80 <dwarf::value::as_uconstant() const+0x100>
  { *__mem += __val; }
   1ede8:	0304a783          	lw	a5,48(s1)
   1edec:	0017879b          	addiw	a5,a5,1
   1edf0:	02f4a823          	sw	a5,48(s1)
   1edf4:	00893783          	ld	a5,8(s2)
   1edf8:	013787b3          	add	a5,a5,s3
   1edfc:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   1ee00:	00023797          	auipc	a5,0x23
   1ee04:	6787b783          	ld	a5,1656(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1ee08:	0007c783          	lbu	a5,0(a5)
   1ee0c:	08078263          	beq	a5,zero,1ee90 <dwarf::value::as_uconstant() const+0x110>
    _Atomic_word __result = *__mem;
   1ee10:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1ee14:	fff5079b          	addiw	a5,a0,-1
   1ee18:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1ee1c:	00100793          	addi	a5,zero,1
   1ee20:	4af51663          	bne	a0,a5,1f2cc <dwarf::value::as_uconstant() const+0x54c>
	_M_dispose();
   1ee24:	0004b783          	ld	a5,0(s1)
   1ee28:	0107b783          	ld	a5,16(a5)
   1ee2c:	00048513          	addi	a0,s1,0
   1ee30:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1ee34:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1ee38:	00023797          	auipc	a5,0x23
   1ee3c:	6407b783          	ld	a5,1600(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1ee40:	0007c783          	lbu	a5,0(a5)
   1ee44:	04078e63          	beq	a5,zero,1eea0 <dwarf::value::as_uconstant() const+0x120>
    _Atomic_word __result = *__mem;
   1ee48:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   1ee4c:	fff5079b          	addiw	a5,a0,-1
   1ee50:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1ee54:	00100793          	addi	a5,zero,1
   1ee58:	46f51a63          	bne	a0,a5,1f2cc <dwarf::value::as_uconstant() const+0x54c>
	    _M_destroy();
   1ee5c:	0004b783          	ld	a5,0(s1)
   1ee60:	0187b783          	ld	a5,24(a5)
   1ee64:	00048513          	addi	a0,s1,0
   1ee68:	000780e7          	jalr	ra,0(a5)
   1ee6c:	4600006f          	jal	zero,1f2cc <dwarf::value::as_uconstant() const+0x54c>
      __atomic_add(__mem, __val);
   1ee70:	00100593          	addi	a1,zero,1
   1ee74:	03048513          	addi	a0,s1,48
   1ee78:	c88f70ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1ee7c:	f51ff06f          	jal	zero,1edcc <dwarf::value::as_uconstant() const+0x4c>
   1ee80:	00100593          	addi	a1,zero,1
   1ee84:	03048513          	addi	a0,s1,48
   1ee88:	c78f70ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1ee8c:	f69ff06f          	jal	zero,1edf4 <dwarf::value::as_uconstant() const+0x74>
      return __exchange_and_add(__mem, __val);
   1ee90:	fff00593          	addi	a1,zero,-1
   1ee94:	03048513          	addi	a0,s1,48
   1ee98:	c98f70ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ee9c:	f81ff06f          	jal	zero,1ee1c <dwarf::value::as_uconstant() const+0x9c>
   1eea0:	fff00593          	addi	a1,zero,-1
   1eea4:	03448513          	addi	a0,s1,52
   1eea8:	c88f70ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1eeac:	fa9ff06f          	jal	zero,1ee54 <dwarf::value::as_uconstant() const+0xd4>
    while (pos < sec->end) {
   1eeb0:	07813783          	ld	a5,120(sp)
      { return _M_ptr; }
   1eeb4:	06813583          	ld	a1,104(sp)
   1eeb8:	0105b703          	ld	a4,16(a1)
    std::uint64_t result = 0;
   1eebc:	00000413          	addi	s0,zero,0
    int shift = 0;
   1eec0:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   1eec4:	02e7fa63          	bgeu	a5,a4,1eef8 <dwarf::value::as_uconstant() const+0x178>
      uint8_t byte = *(uint8_t *)(pos++);
   1eec8:	00178793          	addi	a5,a5,1
   1eecc:	06f13c23          	sd	a5,120(sp)
   1eed0:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1eed4:	07f77693          	andi	a3,a4,127
   1eed8:	00c696b3          	sll	a3,a3,a2
   1eedc:	00d46433          	or	s0,s0,a3
      if ((byte & 0x80) == 0)
   1eee0:	0187171b          	slliw	a4,a4,0x18
   1eee4:	4187571b          	sraiw	a4,a4,0x18
   1eee8:	38075063          	bge	a4,zero,1f268 <dwarf::value::as_uconstant() const+0x4e8>
      shift += 7;
   1eeec:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   1eef0:	0105b703          	ld	a4,16(a1)
   1eef4:	fce7eae3          	bltu	a5,a4,1eec8 <dwarf::value::as_uconstant() const+0x148>
    underflow();
   1eef8:	06810513          	addi	a0,sp,104
   1eefc:	c01fd0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
   1ef00:	2780006f          	jal	zero,1f178 <dwarf::value::as_uconstant() const+0x3f8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ef04:	06813783          	ld	a5,104(sp)
   1ef08:	0107b703          	ld	a4,16(a5)
   1ef0c:	07813783          	ld	a5,120(sp)
   1ef10:	00e7e663          	bltu	a5,a4,1ef1c <dwarf::value::as_uconstant() const+0x19c>
      underflow();
   1ef14:	06810513          	addi	a0,sp,104
   1ef18:	be5fd0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1ef1c:	07813783          	ld	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1ef20:	06813703          	ld	a4,104(sp)
   1ef24:	01c72703          	lw	a4,28(a4)
   1ef28:	32070a63          	beq	a4,zero,1f25c <dwarf::value::as_uconstant() const+0x4dc>
        val = (val << 8) | (uint64_t)p[i];
   1ef2c:	0007c403          	lbu	s0,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1ef30:	3300006f          	jal	zero,1f260 <dwarf::value::as_uconstant() const+0x4e0>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ef34:	06813783          	ld	a5,104(sp)
   1ef38:	0107b703          	ld	a4,16(a5)
   1ef3c:	07813783          	ld	a5,120(sp)
   1ef40:	40f70633          	sub	a2,a4,a5
   1ef44:	00100693          	addi	a3,zero,1
   1ef48:	00c6f463          	bgeu	a3,a2,1ef50 <dwarf::value::as_uconstant() const+0x1d0>
   1ef4c:	00e7e663          	bltu	a5,a4,1ef58 <dwarf::value::as_uconstant() const+0x1d8>
      underflow();
   1ef50:	06810513          	addi	a0,sp,104
   1ef54:	ba9fd0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1ef58:	07813783          	ld	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1ef5c:	06813703          	ld	a4,104(sp)
   1ef60:	01c72703          	lw	a4,28(a4)
   1ef64:	02071063          	bne	a4,zero,1ef84 <dwarf::value::as_uconstant() const+0x204>
        val |= ((uint64_t)p[i]) << (i * 8);
   1ef68:	0017c403          	lbu	s0,1(a5)
   1ef6c:	00841413          	slli	s0,s0,0x8
   1ef70:	0007c703          	lbu	a4,0(a5)
   1ef74:	00e46433          	or	s0,s0,a4
    pos += sizeof(T);
   1ef78:	00278793          	addi	a5,a5,2
   1ef7c:	06f13c23          	sd	a5,120(sp)
  switch (form) {
  case DW_FORM::data1:
    return cur.fixed<uint8_t>();
  case DW_FORM::data2:
    return cur.fixed<uint16_t>();
   1ef80:	2e80006f          	jal	zero,1f268 <dwarf::value::as_uconstant() const+0x4e8>
        val = (val << 8) | (uint64_t)p[i];
   1ef84:	0007c403          	lbu	s0,0(a5)
   1ef88:	00841413          	slli	s0,s0,0x8
   1ef8c:	0017c703          	lbu	a4,1(a5)
   1ef90:	00e46433          	or	s0,s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1ef94:	fe5ff06f          	jal	zero,1ef78 <dwarf::value::as_uconstant() const+0x1f8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ef98:	06813783          	ld	a5,104(sp)
   1ef9c:	0107b703          	ld	a4,16(a5)
   1efa0:	07813783          	ld	a5,120(sp)
   1efa4:	40f70633          	sub	a2,a4,a5
   1efa8:	00300693          	addi	a3,zero,3
   1efac:	00c6f463          	bgeu	a3,a2,1efb4 <dwarf::value::as_uconstant() const+0x234>
   1efb0:	00e7e663          	bltu	a5,a4,1efbc <dwarf::value::as_uconstant() const+0x23c>
      underflow();
   1efb4:	06810513          	addi	a0,sp,104
   1efb8:	b45fd0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1efbc:	07813603          	ld	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1efc0:	06813783          	ld	a5,104(sp)
   1efc4:	01c7a783          	lw	a5,28(a5)
   1efc8:	02079e63          	bne	a5,zero,1f004 <dwarf::value::as_uconstant() const+0x284>
   1efcc:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   1efd0:	00000413          	addi	s0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1efd4:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1efd8:	0006c703          	lbu	a4,0(a3)
   1efdc:	00f71733          	sll	a4,a4,a5
   1efe0:	00e46433          	or	s0,s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1efe4:	00168693          	addi	a3,a3,1
   1efe8:	0087879b          	addiw	a5,a5,8
   1efec:	feb796e3          	bne	a5,a1,1efd8 <dwarf::value::as_uconstant() const+0x258>
    pos += sizeof(T);
   1eff0:	00460613          	addi	a2,a2,4
   1eff4:	06c13c23          	sd	a2,120(sp)
   1eff8:	02041413          	slli	s0,s0,0x20
   1effc:	02045413          	srli	s0,s0,0x20
  case DW_FORM::data4:
    return cur.fixed<uint32_t>();
   1f000:	2680006f          	jal	zero,1f268 <dwarf::value::as_uconstant() const+0x4e8>
   1f004:	00060793          	addi	a5,a2,0
   1f008:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   1f00c:	00000413          	addi	s0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1f010:	00841413          	slli	s0,s0,0x8
   1f014:	0007c703          	lbu	a4,0(a5)
   1f018:	00876433          	or	s0,a4,s0
      for (unsigned i = 0; i < sizeof(T); i++)
   1f01c:	00178793          	addi	a5,a5,1
   1f020:	fef698e3          	bne	a3,a5,1f010 <dwarf::value::as_uconstant() const+0x290>
   1f024:	fcdff06f          	jal	zero,1eff0 <dwarf::value::as_uconstant() const+0x270>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f028:	06813783          	ld	a5,104(sp)
   1f02c:	0107b703          	ld	a4,16(a5)
   1f030:	07813783          	ld	a5,120(sp)
   1f034:	40f70633          	sub	a2,a4,a5
   1f038:	00700693          	addi	a3,zero,7
   1f03c:	00c6f463          	bgeu	a3,a2,1f044 <dwarf::value::as_uconstant() const+0x2c4>
   1f040:	00e7e663          	bltu	a5,a4,1f04c <dwarf::value::as_uconstant() const+0x2cc>
      underflow();
   1f044:	06810513          	addi	a0,sp,104
   1f048:	ab5fd0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f04c:	07813603          	ld	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1f050:	06813783          	ld	a5,104(sp)
   1f054:	01c7a783          	lw	a5,28(a5)
   1f058:	02079a63          	bne	a5,zero,1f08c <dwarf::value::as_uconstant() const+0x30c>
   1f05c:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   1f060:	00000413          	addi	s0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1f064:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1f068:	0006c703          	lbu	a4,0(a3)
   1f06c:	00f71733          	sll	a4,a4,a5
   1f070:	00e46433          	or	s0,s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1f074:	00168693          	addi	a3,a3,1
   1f078:	0087879b          	addiw	a5,a5,8
   1f07c:	feb796e3          	bne	a5,a1,1f068 <dwarf::value::as_uconstant() const+0x2e8>
    pos += sizeof(T);
   1f080:	00860613          	addi	a2,a2,8
   1f084:	06c13c23          	sd	a2,120(sp)
   1f088:	1e00006f          	jal	zero,1f268 <dwarf::value::as_uconstant() const+0x4e8>
   1f08c:	00060793          	addi	a5,a2,0
   1f090:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1f094:	00000413          	addi	s0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1f098:	00841413          	slli	s0,s0,0x8
   1f09c:	0007c703          	lbu	a4,0(a5)
   1f0a0:	00876433          	or	s0,a4,s0
      for (unsigned i = 0; i < sizeof(T); i++)
   1f0a4:	00178793          	addi	a5,a5,1
   1f0a8:	fed798e3          	bne	a5,a3,1f098 <dwarf::value::as_uconstant() const+0x318>
   1f0ac:	fd5ff06f          	jal	zero,1f080 <dwarf::value::as_uconstant() const+0x300>
    return cur.fixed<uint64_t>();
  case DW_FORM::udata:
    return cur.uleb128();
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) +
                              " as uconstant");
   1f0b0:	01000513          	addi	a0,zero,16
   1f0b4:	b1cf70ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1f0b8:	00050493          	addi	s1,a0,0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   1f0bc:	00c42583          	lw	a1,12(s0)
   1f0c0:	00810513          	addi	a0,sp,8
   1f0c4:	5650f0ef          	jal	ra,2ee28 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1f0c8:	00018617          	auipc	a2,0x18
   1f0cc:	db060613          	addi	a2,a2,-592 # 36e78 <std::piecewise_construct+0x1c8>
   1f0d0:	00000593          	addi	a1,zero,0
   1f0d4:	00810513          	addi	a0,sp,8
   1f0d8:	a68f70ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1f0dc:	00050593          	addi	a1,a0,0
   1f0e0:	02810413          	addi	s0,sp,40
   1f0e4:	00040513          	addi	a0,s0,0
   1f0e8:	b28f70ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1f0ec:	00018597          	auipc	a1,0x18
   1f0f0:	dbc58593          	addi	a1,a1,-580 # 36ea8 <std::piecewise_construct+0x1f8>
   1f0f4:	00040513          	addi	a0,s0,0
   1f0f8:	e48f70ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1f0fc:	00050593          	addi	a1,a0,0
   1f100:	04810413          	addi	s0,sp,72
   1f104:	00040513          	addi	a0,s0,0
   1f108:	b08f70ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1f10c:	00040593          	addi	a1,s0,0
   1f110:	00048513          	addi	a0,s1,0
   1f114:	e7cf70ef          	jal	ra,16790 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1f118:	00023797          	auipc	a5,0x23
   1f11c:	3287b783          	ld	a5,808(a5) # 42440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   1f120:	01078793          	addi	a5,a5,16
   1f124:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1f128:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1f12c:	05810793          	addi	a5,sp,88
   1f130:	00f50463          	beq	a0,a5,1f138 <dwarf::value::as_uconstant() const+0x3b8>
   1f134:	b7cf70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f138:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1f13c:	03810793          	addi	a5,sp,56
   1f140:	00f50463          	beq	a0,a5,1f148 <dwarf::value::as_uconstant() const+0x3c8>
   1f144:	b6cf70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f148:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1f14c:	01810793          	addi	a5,sp,24
   1f150:	00f50463          	beq	a0,a5,1f158 <dwarf::value::as_uconstant() const+0x3d8>
   1f154:	b5cf70ef          	jal	ra,164b0 <operator delete(void*)@plt>
                              " as uconstant");
   1f158:	00023617          	auipc	a2,0x23
   1f15c:	47863603          	ld	a2,1144(a2) # 425d0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f690>
   1f160:	00023597          	auipc	a1,0x23
   1f164:	4305b583          	ld	a1,1072(a1) # 42590 <typeinfo for dwarf::value_type_mismatch@@Base+0xb70>
   1f168:	00048513          	addi	a0,s1,0
   1f16c:	cf4f70ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1f170:	00050413          	addi	s0,a0,0
   1f174:	0b40006f          	jal	zero,1f228 <dwarf::value::as_uconstant() const+0x4a8>
    return 0;
   1f178:	00000413          	addi	s0,zero,0
   1f17c:	0ec0006f          	jal	zero,1f268 <dwarf::value::as_uconstant() const+0x4e8>
   1f180:	fff00593          	addi	a1,zero,-1
   1f184:	03048513          	addi	a0,s1,48
   1f188:	9a8f70ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1f18c:	1000006f          	jal	zero,1f28c <dwarf::value::as_uconstant() const+0x50c>
	_M_dispose();
   1f190:	0004b783          	ld	a5,0(s1)
   1f194:	0107b783          	ld	a5,16(a5)
   1f198:	00048513          	addi	a0,s1,0
   1f19c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1f1a0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1f1a4:	00023797          	auipc	a5,0x23
   1f1a8:	2d47b783          	ld	a5,724(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f1ac:	0007c783          	lbu	a5,0(a5)
   1f1b0:	02078663          	beq	a5,zero,1f1dc <dwarf::value::as_uconstant() const+0x45c>
    _Atomic_word __result = *__mem;
   1f1b4:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   1f1b8:	fff5079b          	addiw	a5,a0,-1
   1f1bc:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1f1c0:	00100793          	addi	a5,zero,1
   1f1c4:	0cf51863          	bne	a0,a5,1f294 <dwarf::value::as_uconstant() const+0x514>
	    _M_destroy();
   1f1c8:	0004b783          	ld	a5,0(s1)
   1f1cc:	0187b783          	ld	a5,24(a5)
   1f1d0:	00048513          	addi	a0,s1,0
   1f1d4:	000780e7          	jalr	ra,0(a5)
   1f1d8:	0bc0006f          	jal	zero,1f294 <dwarf::value::as_uconstant() const+0x514>
      return __exchange_and_add(__mem, __val);
   1f1dc:	fff00593          	addi	a1,zero,-1
   1f1e0:	03448513          	addi	a0,s1,52
   1f1e4:	94cf70ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1f1e8:	fd9ff06f          	jal	zero,1f1c0 <dwarf::value::as_uconstant() const+0x440>
      { return _M_dataplus._M_p; }
   1f1ec:	00050413          	addi	s0,a0,0
   1f1f0:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1f1f4:	05810793          	addi	a5,sp,88
   1f1f8:	00f50463          	beq	a0,a5,1f200 <dwarf::value::as_uconstant() const+0x480>
   1f1fc:	ab4f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f200:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1f204:	03810793          	addi	a5,sp,56
   1f208:	00f50463          	beq	a0,a5,1f210 <dwarf::value::as_uconstant() const+0x490>
   1f20c:	aa4f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f210:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1f214:	01810793          	addi	a5,sp,24
   1f218:	00f50463          	beq	a0,a5,1f220 <dwarf::value::as_uconstant() const+0x4a0>
   1f21c:	a94f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1f220:	00048513          	addi	a0,s1,0
   1f224:	a4cf70ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1f228:	07013503          	ld	a0,112(sp)
   1f22c:	00050863          	beq	a0,zero,1f23c <dwarf::value::as_uconstant() const+0x4bc>
	  _M_pi->_M_release();
   1f230:	00023317          	auipc	t1,0x23
   1f234:	19033303          	ld	t1,400(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   1f238:	000300e7          	jalr	ra,0(t1)
   1f23c:	00040513          	addi	a0,s0,0
   1f240:	c50f70ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1f244:	00050413          	addi	s0,a0,0
   1f248:	fb9ff06f          	jal	zero,1f200 <dwarf::value::as_uconstant() const+0x480>
   1f24c:	00050413          	addi	s0,a0,0
   1f250:	fc1ff06f          	jal	zero,1f210 <dwarf::value::as_uconstant() const+0x490>
   1f254:	00050413          	addi	s0,a0,0
   1f258:	fc9ff06f          	jal	zero,1f220 <dwarf::value::as_uconstant() const+0x4a0>
        val |= ((uint64_t)p[i]) << (i * 8);
   1f25c:	0007c403          	lbu	s0,0(a5)
    pos += sizeof(T);
   1f260:	00178793          	addi	a5,a5,1
   1f264:	06f13c23          	sd	a5,120(sp)
	if (_M_pi != nullptr)
   1f268:	07013483          	ld	s1,112(sp)
   1f26c:	02048463          	beq	s1,zero,1f294 <dwarf::value::as_uconstant() const+0x514>
    if (__is_single_threaded())
   1f270:	00023797          	auipc	a5,0x23
   1f274:	2087b783          	ld	a5,520(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f278:	0007c783          	lbu	a5,0(a5)
   1f27c:	f00782e3          	beq	a5,zero,1f180 <dwarf::value::as_uconstant() const+0x400>
    _Atomic_word __result = *__mem;
   1f280:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1f284:	fff5079b          	addiw	a5,a0,-1
   1f288:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1f28c:	00100793          	addi	a5,zero,1
   1f290:	f0f500e3          	beq	a0,a5,1f190 <dwarf::value::as_uconstant() const+0x410>
  }
}
   1f294:	00040513          	addi	a0,s0,0
   1f298:	0a813083          	ld	ra,168(sp)
   1f29c:	0a013403          	ld	s0,160(sp)
   1f2a0:	09813483          	ld	s1,152(sp)
   1f2a4:	09013903          	ld	s2,144(sp)
   1f2a8:	08813983          	ld	s3,136(sp)
   1f2ac:	0b010113          	addi	sp,sp,176
   1f2b0:	00008067          	jalr	zero,0(ra)
  cursor cur(cu->data(), offset);
   1f2b4:	01043703          	ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1f2b8:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   1f2bc:	06013823          	sd	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1f2c0:	00893783          	ld	a5,8(s2)
   1f2c4:	00e787b3          	add	a5,a5,a4
   1f2c8:	06f13c23          	sd	a5,120(sp)
  switch (form) {
   1f2cc:	00842783          	lw	a5,8(s0)
   1f2d0:	ffb7879b          	addiw	a5,a5,-5
   1f2d4:	0007869b          	addiw	a3,a5,0
   1f2d8:	00a00713          	addi	a4,zero,10
   1f2dc:	dcd76ae3          	bltu	a4,a3,1f0b0 <dwarf::value::as_uconstant() const+0x330>
   1f2e0:	02079713          	slli	a4,a5,0x20
   1f2e4:	01e75793          	srli	a5,a4,0x1e
   1f2e8:	00018717          	auipc	a4,0x18
   1f2ec:	d7870713          	addi	a4,a4,-648 # 37060 <std::piecewise_construct+0x3b0>
   1f2f0:	00e787b3          	add	a5,a5,a4
   1f2f4:	0007a783          	lw	a5,0(a5)
   1f2f8:	00e787b3          	add	a5,a5,a4
   1f2fc:	00078067          	jalr	zero,0(a5)

000000000001f300 <dwarf::value::as_sconstant() const>:

int64_t value::as_sconstant() const {
   1f300:	f5010113          	addi	sp,sp,-176
   1f304:	0a113423          	sd	ra,168(sp)
   1f308:	0a813023          	sd	s0,160(sp)
   1f30c:	08913c23          	sd	s1,152(sp)
   1f310:	09213823          	sd	s2,144(sp)
   1f314:	09313423          	sd	s3,136(sp)
   1f318:	00050413          	addi	s0,a0,0
  cursor cur(cu->data(), offset);
   1f31c:	00053503          	ld	a0,0(a0)
   1f320:	a1cf80ef          	jal	ra,1753c <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1f324:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1f328:	00853483          	ld	s1,8(a0)
	if (_M_pi != nullptr)
   1f32c:	4c048663          	beq	s1,zero,1f7f8 <dwarf::value::as_sconstant() const+0x4f8>
    if (__is_single_threaded())
   1f330:	00023797          	auipc	a5,0x23
   1f334:	1487b783          	ld	a5,328(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f338:	0007c783          	lbu	a5,0(a5)
   1f33c:	0a078a63          	beq	a5,zero,1f3f0 <dwarf::value::as_sconstant() const+0xf0>
  { *__mem += __val; }
   1f340:	0304a783          	lw	a5,48(s1)
   1f344:	0017879b          	addiw	a5,a5,1
   1f348:	02f4a823          	sw	a5,48(s1)
   1f34c:	01043983          	ld	s3,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1f350:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   1f354:	06913823          	sd	s1,112(sp)
    if (__is_single_threaded())
   1f358:	00023797          	auipc	a5,0x23
   1f35c:	1207b783          	ld	a5,288(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f360:	0007c783          	lbu	a5,0(a5)
   1f364:	08078e63          	beq	a5,zero,1f400 <dwarf::value::as_sconstant() const+0x100>
  { *__mem += __val; }
   1f368:	0304a783          	lw	a5,48(s1)
   1f36c:	0017879b          	addiw	a5,a5,1
   1f370:	02f4a823          	sw	a5,48(s1)
   1f374:	00893783          	ld	a5,8(s2)
   1f378:	013787b3          	add	a5,a5,s3
   1f37c:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   1f380:	00023797          	auipc	a5,0x23
   1f384:	0f87b783          	ld	a5,248(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f388:	0007c783          	lbu	a5,0(a5)
   1f38c:	08078263          	beq	a5,zero,1f410 <dwarf::value::as_sconstant() const+0x110>
    _Atomic_word __result = *__mem;
   1f390:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1f394:	fff5079b          	addiw	a5,a0,-1
   1f398:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1f39c:	00100793          	addi	a5,zero,1
   1f3a0:	46f51863          	bne	a0,a5,1f810 <dwarf::value::as_sconstant() const+0x510>
	_M_dispose();
   1f3a4:	0004b783          	ld	a5,0(s1)
   1f3a8:	0107b783          	ld	a5,16(a5)
   1f3ac:	00048513          	addi	a0,s1,0
   1f3b0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1f3b4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1f3b8:	00023797          	auipc	a5,0x23
   1f3bc:	0c07b783          	ld	a5,192(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f3c0:	0007c783          	lbu	a5,0(a5)
   1f3c4:	04078e63          	beq	a5,zero,1f420 <dwarf::value::as_sconstant() const+0x120>
    _Atomic_word __result = *__mem;
   1f3c8:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   1f3cc:	fff5079b          	addiw	a5,a0,-1
   1f3d0:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1f3d4:	00100793          	addi	a5,zero,1
   1f3d8:	42f51c63          	bne	a0,a5,1f810 <dwarf::value::as_sconstant() const+0x510>
	    _M_destroy();
   1f3dc:	0004b783          	ld	a5,0(s1)
   1f3e0:	0187b783          	ld	a5,24(a5)
   1f3e4:	00048513          	addi	a0,s1,0
   1f3e8:	000780e7          	jalr	ra,0(a5)
   1f3ec:	4240006f          	jal	zero,1f810 <dwarf::value::as_sconstant() const+0x510>
      __atomic_add(__mem, __val);
   1f3f0:	00100593          	addi	a1,zero,1
   1f3f4:	03048513          	addi	a0,s1,48
   1f3f8:	f09f60ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1f3fc:	f51ff06f          	jal	zero,1f34c <dwarf::value::as_sconstant() const+0x4c>
   1f400:	00100593          	addi	a1,zero,1
   1f404:	03048513          	addi	a0,s1,48
   1f408:	ef9f60ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1f40c:	f69ff06f          	jal	zero,1f374 <dwarf::value::as_sconstant() const+0x74>
      return __exchange_and_add(__mem, __val);
   1f410:	fff00593          	addi	a1,zero,-1
   1f414:	03048513          	addi	a0,s1,48
   1f418:	f19f60ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1f41c:	f81ff06f          	jal	zero,1f39c <dwarf::value::as_sconstant() const+0x9c>
   1f420:	fff00593          	addi	a1,zero,-1
   1f424:	03448513          	addi	a0,s1,52
   1f428:	f09f60ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1f42c:	fa9ff06f          	jal	zero,1f3d4 <dwarf::value::as_sconstant() const+0xd4>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f430:	06813783          	ld	a5,104(sp)
   1f434:	0107b703          	ld	a4,16(a5)
   1f438:	07813783          	ld	a5,120(sp)
   1f43c:	00e7e663          	bltu	a5,a4,1f448 <dwarf::value::as_sconstant() const+0x148>
      underflow();
   1f440:	06810513          	addi	a0,sp,104
   1f444:	eb8fd0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f448:	07813783          	ld	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1f44c:	06813703          	ld	a4,104(sp)
   1f450:	01c72703          	lw	a4,28(a4)
   1f454:	34070263          	beq	a4,zero,1f798 <dwarf::value::as_sconstant() const+0x498>
        val = (val << 8) | (uint64_t)p[i];
   1f458:	0007c503          	lbu	a0,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1f45c:	3400006f          	jal	zero,1f79c <dwarf::value::as_sconstant() const+0x49c>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f460:	06813783          	ld	a5,104(sp)
   1f464:	0107b703          	ld	a4,16(a5)
   1f468:	07813783          	ld	a5,120(sp)
   1f46c:	40f70633          	sub	a2,a4,a5
   1f470:	00100693          	addi	a3,zero,1
   1f474:	00c6f463          	bgeu	a3,a2,1f47c <dwarf::value::as_sconstant() const+0x17c>
   1f478:	00e7e663          	bltu	a5,a4,1f484 <dwarf::value::as_sconstant() const+0x184>
      underflow();
   1f47c:	06810513          	addi	a0,sp,104
   1f480:	e7cfd0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f484:	07813783          	ld	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1f488:	06813703          	ld	a4,104(sp)
   1f48c:	01c72703          	lw	a4,28(a4)
   1f490:	02071463          	bne	a4,zero,1f4b8 <dwarf::value::as_sconstant() const+0x1b8>
        val |= ((uint64_t)p[i]) << (i * 8);
   1f494:	0017c503          	lbu	a0,1(a5)
   1f498:	00851513          	slli	a0,a0,0x8
   1f49c:	0007c703          	lbu	a4,0(a5)
   1f4a0:	00e56533          	or	a0,a0,a4
    pos += sizeof(T);
   1f4a4:	00278793          	addi	a5,a5,2
   1f4a8:	06f13c23          	sd	a5,120(sp)
  switch (form) {
  case DW_FORM::data1:
    return cur.fixed<int8_t>();
  case DW_FORM::data2:
    return cur.fixed<int16_t>();
   1f4ac:	0105141b          	slliw	s0,a0,0x10
   1f4b0:	4104541b          	sraiw	s0,s0,0x10
   1f4b4:	2f80006f          	jal	zero,1f7ac <dwarf::value::as_sconstant() const+0x4ac>
        val = (val << 8) | (uint64_t)p[i];
   1f4b8:	0007c503          	lbu	a0,0(a5)
   1f4bc:	00851513          	slli	a0,a0,0x8
   1f4c0:	0017c703          	lbu	a4,1(a5)
   1f4c4:	00e56533          	or	a0,a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1f4c8:	fddff06f          	jal	zero,1f4a4 <dwarf::value::as_sconstant() const+0x1a4>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f4cc:	06813783          	ld	a5,104(sp)
   1f4d0:	0107b703          	ld	a4,16(a5)
   1f4d4:	07813783          	ld	a5,120(sp)
   1f4d8:	40f70633          	sub	a2,a4,a5
   1f4dc:	00300693          	addi	a3,zero,3
   1f4e0:	00c6f463          	bgeu	a3,a2,1f4e8 <dwarf::value::as_sconstant() const+0x1e8>
   1f4e4:	00e7e663          	bltu	a5,a4,1f4f0 <dwarf::value::as_sconstant() const+0x1f0>
      underflow();
   1f4e8:	06810513          	addi	a0,sp,104
   1f4ec:	e10fd0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f4f0:	07813603          	ld	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1f4f4:	06813783          	ld	a5,104(sp)
   1f4f8:	01c7a783          	lw	a5,28(a5)
   1f4fc:	02079c63          	bne	a5,zero,1f534 <dwarf::value::as_sconstant() const+0x234>
   1f500:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   1f504:	00000513          	addi	a0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1f508:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1f50c:	0006c703          	lbu	a4,0(a3)
   1f510:	00f71733          	sll	a4,a4,a5
   1f514:	00e56533          	or	a0,a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1f518:	00168693          	addi	a3,a3,1
   1f51c:	0087879b          	addiw	a5,a5,8
   1f520:	feb796e3          	bne	a5,a1,1f50c <dwarf::value::as_sconstant() const+0x20c>
    pos += sizeof(T);
   1f524:	00460613          	addi	a2,a2,4
   1f528:	06c13c23          	sd	a2,120(sp)
  case DW_FORM::data4:
    return cur.fixed<int32_t>();
   1f52c:	0005041b          	addiw	s0,a0,0
   1f530:	27c0006f          	jal	zero,1f7ac <dwarf::value::as_sconstant() const+0x4ac>
   1f534:	00060793          	addi	a5,a2,0
   1f538:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   1f53c:	00000513          	addi	a0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1f540:	00851513          	slli	a0,a0,0x8
   1f544:	0007c703          	lbu	a4,0(a5)
   1f548:	00a76533          	or	a0,a4,a0
      for (unsigned i = 0; i < sizeof(T); i++)
   1f54c:	00178793          	addi	a5,a5,1
   1f550:	fef698e3          	bne	a3,a5,1f540 <dwarf::value::as_sconstant() const+0x240>
   1f554:	fd1ff06f          	jal	zero,1f524 <dwarf::value::as_sconstant() const+0x224>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f558:	06813783          	ld	a5,104(sp)
   1f55c:	0107b703          	ld	a4,16(a5)
   1f560:	07813783          	ld	a5,120(sp)
   1f564:	40f70633          	sub	a2,a4,a5
   1f568:	00700693          	addi	a3,zero,7
   1f56c:	00c6f463          	bgeu	a3,a2,1f574 <dwarf::value::as_sconstant() const+0x274>
   1f570:	00e7e663          	bltu	a5,a4,1f57c <dwarf::value::as_sconstant() const+0x27c>
      underflow();
   1f574:	06810513          	addi	a0,sp,104
   1f578:	d84fd0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f57c:	07813603          	ld	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1f580:	06813783          	ld	a5,104(sp)
   1f584:	01c7a783          	lw	a5,28(a5)
   1f588:	02079c63          	bne	a5,zero,1f5c0 <dwarf::value::as_sconstant() const+0x2c0>
   1f58c:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   1f590:	00000513          	addi	a0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1f594:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1f598:	0006c703          	lbu	a4,0(a3)
   1f59c:	00f71733          	sll	a4,a4,a5
   1f5a0:	00e56533          	or	a0,a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1f5a4:	00168693          	addi	a3,a3,1
   1f5a8:	0087879b          	addiw	a5,a5,8
   1f5ac:	feb796e3          	bne	a5,a1,1f598 <dwarf::value::as_sconstant() const+0x298>
    pos += sizeof(T);
   1f5b0:	00860613          	addi	a2,a2,8
   1f5b4:	06c13c23          	sd	a2,120(sp)
    return (T)val;
   1f5b8:	00050413          	addi	s0,a0,0
   1f5bc:	1f00006f          	jal	zero,1f7ac <dwarf::value::as_sconstant() const+0x4ac>
   1f5c0:	00060793          	addi	a5,a2,0
   1f5c4:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1f5c8:	00000513          	addi	a0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1f5cc:	00851513          	slli	a0,a0,0x8
   1f5d0:	0007c703          	lbu	a4,0(a5)
   1f5d4:	00a76533          	or	a0,a4,a0
      for (unsigned i = 0; i < sizeof(T); i++)
   1f5d8:	00178793          	addi	a5,a5,1
   1f5dc:	fed798e3          	bne	a5,a3,1f5cc <dwarf::value::as_sconstant() const+0x2cc>
   1f5e0:	fd1ff06f          	jal	zero,1f5b0 <dwarf::value::as_sconstant() const+0x2b0>
  case DW_FORM::data8:
    return cur.fixed<int64_t>();
  case DW_FORM::sdata:
    return cur.sleb128();
   1f5e4:	06810513          	addi	a0,sp,104
   1f5e8:	d68fd0ef          	jal	ra,1cb50 <dwarf::cursor::sleb128()>
   1f5ec:	00050413          	addi	s0,a0,0
   1f5f0:	1bc0006f          	jal	zero,1f7ac <dwarf::value::as_sconstant() const+0x4ac>
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) +
                              " as sconstant");
   1f5f4:	01000513          	addi	a0,zero,16
   1f5f8:	dd9f60ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1f5fc:	00050493          	addi	s1,a0,0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   1f600:	00c42583          	lw	a1,12(s0)
   1f604:	00810513          	addi	a0,sp,8
   1f608:	0210f0ef          	jal	ra,2ee28 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1f60c:	00018617          	auipc	a2,0x18
   1f610:	86c60613          	addi	a2,a2,-1940 # 36e78 <std::piecewise_construct+0x1c8>
   1f614:	00000593          	addi	a1,zero,0
   1f618:	00810513          	addi	a0,sp,8
   1f61c:	d25f60ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1f620:	00050593          	addi	a1,a0,0
   1f624:	02810413          	addi	s0,sp,40
   1f628:	00040513          	addi	a0,s0,0
   1f62c:	de5f60ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1f630:	00018597          	auipc	a1,0x18
   1f634:	88858593          	addi	a1,a1,-1912 # 36eb8 <std::piecewise_construct+0x208>
   1f638:	00040513          	addi	a0,s0,0
   1f63c:	904f70ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1f640:	00050593          	addi	a1,a0,0
   1f644:	04810413          	addi	s0,sp,72
   1f648:	00040513          	addi	a0,s0,0
   1f64c:	dc5f60ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1f650:	00040593          	addi	a1,s0,0
   1f654:	00048513          	addi	a0,s1,0
   1f658:	938f70ef          	jal	ra,16790 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1f65c:	00023797          	auipc	a5,0x23
   1f660:	de47b783          	ld	a5,-540(a5) # 42440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   1f664:	01078793          	addi	a5,a5,16
   1f668:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1f66c:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1f670:	05810793          	addi	a5,sp,88
   1f674:	00f50463          	beq	a0,a5,1f67c <dwarf::value::as_sconstant() const+0x37c>
   1f678:	e39f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f67c:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1f680:	03810793          	addi	a5,sp,56
   1f684:	00f50463          	beq	a0,a5,1f68c <dwarf::value::as_sconstant() const+0x38c>
   1f688:	e29f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f68c:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1f690:	01810793          	addi	a5,sp,24
   1f694:	00f50463          	beq	a0,a5,1f69c <dwarf::value::as_sconstant() const+0x39c>
   1f698:	e19f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
                              " as sconstant");
   1f69c:	00023617          	auipc	a2,0x23
   1f6a0:	f3463603          	ld	a2,-204(a2) # 425d0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f690>
   1f6a4:	00023597          	auipc	a1,0x23
   1f6a8:	eec5b583          	ld	a1,-276(a1) # 42590 <typeinfo for dwarf::value_type_mismatch@@Base+0xb70>
   1f6ac:	00048513          	addi	a0,s1,0
   1f6b0:	fb1f60ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1f6b4:	00050413          	addi	s0,a0,0
   1f6b8:	0ac0006f          	jal	zero,1f764 <dwarf::value::as_sconstant() const+0x464>
   1f6bc:	fff00593          	addi	a1,zero,-1
   1f6c0:	03048513          	addi	a0,s1,48
   1f6c4:	c6df60ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1f6c8:	1080006f          	jal	zero,1f7d0 <dwarf::value::as_sconstant() const+0x4d0>
	_M_dispose();
   1f6cc:	0004b783          	ld	a5,0(s1)
   1f6d0:	0107b783          	ld	a5,16(a5)
   1f6d4:	00048513          	addi	a0,s1,0
   1f6d8:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1f6dc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1f6e0:	00023797          	auipc	a5,0x23
   1f6e4:	d987b783          	ld	a5,-616(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f6e8:	0007c783          	lbu	a5,0(a5)
   1f6ec:	02078663          	beq	a5,zero,1f718 <dwarf::value::as_sconstant() const+0x418>
    _Atomic_word __result = *__mem;
   1f6f0:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   1f6f4:	fff5079b          	addiw	a5,a0,-1
   1f6f8:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1f6fc:	00100793          	addi	a5,zero,1
   1f700:	0cf51c63          	bne	a0,a5,1f7d8 <dwarf::value::as_sconstant() const+0x4d8>
	    _M_destroy();
   1f704:	0004b783          	ld	a5,0(s1)
   1f708:	0187b783          	ld	a5,24(a5)
   1f70c:	00048513          	addi	a0,s1,0
   1f710:	000780e7          	jalr	ra,0(a5)
   1f714:	0c40006f          	jal	zero,1f7d8 <dwarf::value::as_sconstant() const+0x4d8>
      return __exchange_and_add(__mem, __val);
   1f718:	fff00593          	addi	a1,zero,-1
   1f71c:	03448513          	addi	a0,s1,52
   1f720:	c11f60ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1f724:	fd9ff06f          	jal	zero,1f6fc <dwarf::value::as_sconstant() const+0x3fc>
      { return _M_dataplus._M_p; }
   1f728:	00050413          	addi	s0,a0,0
   1f72c:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1f730:	05810793          	addi	a5,sp,88
   1f734:	00f50463          	beq	a0,a5,1f73c <dwarf::value::as_sconstant() const+0x43c>
   1f738:	d79f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f73c:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1f740:	03810793          	addi	a5,sp,56
   1f744:	00f50463          	beq	a0,a5,1f74c <dwarf::value::as_sconstant() const+0x44c>
   1f748:	d69f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f74c:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1f750:	01810793          	addi	a5,sp,24
   1f754:	00f50463          	beq	a0,a5,1f75c <dwarf::value::as_sconstant() const+0x45c>
   1f758:	d59f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1f75c:	00048513          	addi	a0,s1,0
   1f760:	d11f60ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1f764:	07013503          	ld	a0,112(sp)
   1f768:	00050863          	beq	a0,zero,1f778 <dwarf::value::as_sconstant() const+0x478>
	  _M_pi->_M_release();
   1f76c:	00023317          	auipc	t1,0x23
   1f770:	c5433303          	ld	t1,-940(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   1f774:	000300e7          	jalr	ra,0(t1)
   1f778:	00040513          	addi	a0,s0,0
   1f77c:	f15f60ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1f780:	00050413          	addi	s0,a0,0
   1f784:	fb9ff06f          	jal	zero,1f73c <dwarf::value::as_sconstant() const+0x43c>
   1f788:	00050413          	addi	s0,a0,0
   1f78c:	fc1ff06f          	jal	zero,1f74c <dwarf::value::as_sconstant() const+0x44c>
   1f790:	00050413          	addi	s0,a0,0
   1f794:	fc9ff06f          	jal	zero,1f75c <dwarf::value::as_sconstant() const+0x45c>
        val |= ((uint64_t)p[i]) << (i * 8);
   1f798:	0007c503          	lbu	a0,0(a5)
    pos += sizeof(T);
   1f79c:	00178793          	addi	a5,a5,1
   1f7a0:	06f13c23          	sd	a5,120(sp)
    return cur.fixed<int8_t>();
   1f7a4:	0185141b          	slliw	s0,a0,0x18
   1f7a8:	4184541b          	sraiw	s0,s0,0x18
	if (_M_pi != nullptr)
   1f7ac:	07013483          	ld	s1,112(sp)
   1f7b0:	02048463          	beq	s1,zero,1f7d8 <dwarf::value::as_sconstant() const+0x4d8>
    if (__is_single_threaded())
   1f7b4:	00023797          	auipc	a5,0x23
   1f7b8:	cc47b783          	ld	a5,-828(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f7bc:	0007c783          	lbu	a5,0(a5)
   1f7c0:	ee078ee3          	beq	a5,zero,1f6bc <dwarf::value::as_sconstant() const+0x3bc>
    _Atomic_word __result = *__mem;
   1f7c4:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1f7c8:	fff5079b          	addiw	a5,a0,-1
   1f7cc:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1f7d0:	00100793          	addi	a5,zero,1
   1f7d4:	eef50ce3          	beq	a0,a5,1f6cc <dwarf::value::as_sconstant() const+0x3cc>
  }
}
   1f7d8:	00040513          	addi	a0,s0,0
   1f7dc:	0a813083          	ld	ra,168(sp)
   1f7e0:	0a013403          	ld	s0,160(sp)
   1f7e4:	09813483          	ld	s1,152(sp)
   1f7e8:	09013903          	ld	s2,144(sp)
   1f7ec:	08813983          	ld	s3,136(sp)
   1f7f0:	0b010113          	addi	sp,sp,176
   1f7f4:	00008067          	jalr	zero,0(ra)
  cursor cur(cu->data(), offset);
   1f7f8:	01043703          	ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1f7fc:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   1f800:	06013823          	sd	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1f804:	00893783          	ld	a5,8(s2)
   1f808:	00e787b3          	add	a5,a5,a4
   1f80c:	06f13c23          	sd	a5,120(sp)
  switch (form) {
   1f810:	00842783          	lw	a5,8(s0)
   1f814:	ffb7879b          	addiw	a5,a5,-5
   1f818:	0007869b          	addiw	a3,a5,0
   1f81c:	00800713          	addi	a4,zero,8
   1f820:	dcd76ae3          	bltu	a4,a3,1f5f4 <dwarf::value::as_sconstant() const+0x2f4>
   1f824:	02079713          	slli	a4,a5,0x20
   1f828:	01e75793          	srli	a5,a4,0x1e
   1f82c:	00018717          	auipc	a4,0x18
   1f830:	86070713          	addi	a4,a4,-1952 # 3708c <std::piecewise_construct+0x3dc>
   1f834:	00e787b3          	add	a5,a5,a4
   1f838:	0007a783          	lw	a5,0(a5)
   1f83c:	00e787b3          	add	a5,a5,a4
   1f840:	00078067          	jalr	zero,0(a5)

000000000001f844 <dwarf::value::as_exprloc() const>:

expr value::as_exprloc() const {
   1f844:	f5010113          	addi	sp,sp,-176
   1f848:	0a113423          	sd	ra,168(sp)
   1f84c:	0a813023          	sd	s0,160(sp)
   1f850:	08913c23          	sd	s1,152(sp)
   1f854:	09213823          	sd	s2,144(sp)
   1f858:	09313423          	sd	s3,136(sp)
   1f85c:	09413023          	sd	s4,128(sp)
   1f860:	00050493          	addi	s1,a0,0
   1f864:	00058413          	addi	s0,a1,0
  cursor cur(cu->data(), offset);
   1f868:	0005b503          	ld	a0,0(a1)
   1f86c:	cd1f70ef          	jal	ra,1753c <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1f870:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1f874:	00853903          	ld	s2,8(a0)
	if (_M_pi != nullptr)
   1f878:	4a090263          	beq	s2,zero,1fd1c <dwarf::value::as_exprloc() const+0x4d8>
    if (__is_single_threaded())
   1f87c:	00023797          	auipc	a5,0x23
   1f880:	bfc7b783          	ld	a5,-1028(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f884:	0007c783          	lbu	a5,0(a5)
   1f888:	0a078a63          	beq	a5,zero,1f93c <dwarf::value::as_exprloc() const+0xf8>
  { *__mem += __val; }
   1f88c:	03092783          	lw	a5,48(s2)
   1f890:	0017879b          	addiw	a5,a5,1
   1f894:	02f92823          	sw	a5,48(s2)
   1f898:	01043a03          	ld	s4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1f89c:	07313423          	sd	s3,104(sp)
      : _M_pi(__r._M_pi)
   1f8a0:	07213823          	sd	s2,112(sp)
    if (__is_single_threaded())
   1f8a4:	00023797          	auipc	a5,0x23
   1f8a8:	bd47b783          	ld	a5,-1068(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f8ac:	0007c783          	lbu	a5,0(a5)
   1f8b0:	08078e63          	beq	a5,zero,1f94c <dwarf::value::as_exprloc() const+0x108>
  { *__mem += __val; }
   1f8b4:	03092783          	lw	a5,48(s2)
   1f8b8:	0017879b          	addiw	a5,a5,1
   1f8bc:	02f92823          	sw	a5,48(s2)
   1f8c0:	0089b783          	ld	a5,8(s3)
   1f8c4:	014787b3          	add	a5,a5,s4
   1f8c8:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   1f8cc:	00023797          	auipc	a5,0x23
   1f8d0:	bac7b783          	ld	a5,-1108(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f8d4:	0007c783          	lbu	a5,0(a5)
   1f8d8:	08078263          	beq	a5,zero,1f95c <dwarf::value::as_exprloc() const+0x118>
    _Atomic_word __result = *__mem;
   1f8dc:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   1f8e0:	fff5079b          	addiw	a5,a0,-1
   1f8e4:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1f8e8:	00100793          	addi	a5,zero,1
   1f8ec:	44f51463          	bne	a0,a5,1fd34 <dwarf::value::as_exprloc() const+0x4f0>
	_M_dispose();
   1f8f0:	00093783          	ld	a5,0(s2)
   1f8f4:	0107b783          	ld	a5,16(a5)
   1f8f8:	00090513          	addi	a0,s2,0
   1f8fc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1f900:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1f904:	00023797          	auipc	a5,0x23
   1f908:	b747b783          	ld	a5,-1164(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f90c:	0007c783          	lbu	a5,0(a5)
   1f910:	04078e63          	beq	a5,zero,1f96c <dwarf::value::as_exprloc() const+0x128>
    _Atomic_word __result = *__mem;
   1f914:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   1f918:	fff5079b          	addiw	a5,a0,-1
   1f91c:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1f920:	00100793          	addi	a5,zero,1
   1f924:	40f51863          	bne	a0,a5,1fd34 <dwarf::value::as_exprloc() const+0x4f0>
	    _M_destroy();
   1f928:	00093783          	ld	a5,0(s2)
   1f92c:	0187b783          	ld	a5,24(a5)
   1f930:	00090513          	addi	a0,s2,0
   1f934:	000780e7          	jalr	ra,0(a5)
   1f938:	3fc0006f          	jal	zero,1fd34 <dwarf::value::as_exprloc() const+0x4f0>
      __atomic_add(__mem, __val);
   1f93c:	00100593          	addi	a1,zero,1
   1f940:	03090513          	addi	a0,s2,48
   1f944:	9bdf60ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1f948:	f51ff06f          	jal	zero,1f898 <dwarf::value::as_exprloc() const+0x54>
   1f94c:	00100593          	addi	a1,zero,1
   1f950:	03090513          	addi	a0,s2,48
   1f954:	9adf60ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1f958:	f69ff06f          	jal	zero,1f8c0 <dwarf::value::as_exprloc() const+0x7c>
      return __exchange_and_add(__mem, __val);
   1f95c:	fff00593          	addi	a1,zero,-1
   1f960:	03090513          	addi	a0,s2,48
   1f964:	9cdf60ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1f968:	f81ff06f          	jal	zero,1f8e8 <dwarf::value::as_exprloc() const+0xa4>
   1f96c:	fff00593          	addi	a1,zero,-1
   1f970:	03490513          	addi	a0,s2,52
   1f974:	9bdf60ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1f978:	fa9ff06f          	jal	zero,1f920 <dwarf::value::as_exprloc() const+0xdc>
    while (pos < sec->end) {
   1f97c:	07813783          	ld	a5,120(sp)
      { return _M_ptr; }
   1f980:	06813503          	ld	a0,104(sp)
   1f984:	01053703          	ld	a4,16(a0)
   1f988:	02e7fe63          	bgeu	a5,a4,1f9c4 <dwarf::value::as_exprloc() const+0x180>
    std::uint64_t result = 0;
   1f98c:	00000693          	addi	a3,zero,0
    int shift = 0;
   1f990:	00000593          	addi	a1,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   1f994:	00178793          	addi	a5,a5,1
   1f998:	06f13c23          	sd	a5,120(sp)
   1f99c:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1f9a0:	07f77613          	andi	a2,a4,127
   1f9a4:	00b61633          	sll	a2,a2,a1
   1f9a8:	00c6e6b3          	or	a3,a3,a2
      if ((byte & 0x80) == 0)
   1f9ac:	0187171b          	slliw	a4,a4,0x18
   1f9b0:	4187571b          	sraiw	a4,a4,0x18
   1f9b4:	34075463          	bge	a4,zero,1fcfc <dwarf::value::as_exprloc() const+0x4b8>
      shift += 7;
   1f9b8:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   1f9bc:	01053703          	ld	a4,16(a0)
   1f9c0:	fce7eae3          	bltu	a5,a4,1f994 <dwarf::value::as_exprloc() const+0x150>
    underflow();
   1f9c4:	06810513          	addi	a0,sp,104
   1f9c8:	934fd0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
   1f9cc:	1f00006f          	jal	zero,1fbbc <dwarf::value::as_exprloc() const+0x378>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f9d0:	06813783          	ld	a5,104(sp)
   1f9d4:	0107b703          	ld	a4,16(a5)
   1f9d8:	07813783          	ld	a5,120(sp)
   1f9dc:	00e7e663          	bltu	a5,a4,1f9e8 <dwarf::value::as_exprloc() const+0x1a4>
      underflow();
   1f9e0:	06810513          	addi	a0,sp,104
   1f9e4:	918fd0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f9e8:	07813783          	ld	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1f9ec:	06813703          	ld	a4,104(sp)
   1f9f0:	01c72703          	lw	a4,28(a4)
   1f9f4:	2e070e63          	beq	a4,zero,1fcf0 <dwarf::value::as_exprloc() const+0x4ac>
        val = (val << 8) | (uint64_t)p[i];
   1f9f8:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1f9fc:	2f80006f          	jal	zero,1fcf4 <dwarf::value::as_exprloc() const+0x4b0>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1fa00:	06813783          	ld	a5,104(sp)
   1fa04:	0107b703          	ld	a4,16(a5)
   1fa08:	07813783          	ld	a5,120(sp)
   1fa0c:	40f70633          	sub	a2,a4,a5
   1fa10:	00100693          	addi	a3,zero,1
   1fa14:	00c6f463          	bgeu	a3,a2,1fa1c <dwarf::value::as_exprloc() const+0x1d8>
   1fa18:	00e7e663          	bltu	a5,a4,1fa24 <dwarf::value::as_exprloc() const+0x1e0>
      underflow();
   1fa1c:	06810513          	addi	a0,sp,104
   1fa20:	8dcfd0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1fa24:	07813783          	ld	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1fa28:	06813703          	ld	a4,104(sp)
   1fa2c:	01c72703          	lw	a4,28(a4)
   1fa30:	02071063          	bne	a4,zero,1fa50 <dwarf::value::as_exprloc() const+0x20c>
        val |= ((uint64_t)p[i]) << (i * 8);
   1fa34:	0017c683          	lbu	a3,1(a5)
   1fa38:	00869693          	slli	a3,a3,0x8
   1fa3c:	0007c703          	lbu	a4,0(a5)
   1fa40:	00e6e6b3          	or	a3,a3,a4
    pos += sizeof(T);
   1fa44:	00278793          	addi	a5,a5,2
   1fa48:	06f13c23          	sd	a5,120(sp)
  case DW_FORM::block1:
    size = cur.fixed<uint8_t>();
    break;
  case DW_FORM::block2:
    size = cur.fixed<uint16_t>();
    break;
   1fa4c:	2b00006f          	jal	zero,1fcfc <dwarf::value::as_exprloc() const+0x4b8>
        val = (val << 8) | (uint64_t)p[i];
   1fa50:	0007c683          	lbu	a3,0(a5)
   1fa54:	00869693          	slli	a3,a3,0x8
   1fa58:	0017c703          	lbu	a4,1(a5)
   1fa5c:	00e6e6b3          	or	a3,a3,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1fa60:	fe5ff06f          	jal	zero,1fa44 <dwarf::value::as_exprloc() const+0x200>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1fa64:	06813783          	ld	a5,104(sp)
   1fa68:	0107b703          	ld	a4,16(a5)
   1fa6c:	07813783          	ld	a5,120(sp)
   1fa70:	40f70633          	sub	a2,a4,a5
   1fa74:	00300693          	addi	a3,zero,3
   1fa78:	00c6f463          	bgeu	a3,a2,1fa80 <dwarf::value::as_exprloc() const+0x23c>
   1fa7c:	00e7e663          	bltu	a5,a4,1fa88 <dwarf::value::as_exprloc() const+0x244>
      underflow();
   1fa80:	06810513          	addi	a0,sp,104
   1fa84:	878fd0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1fa88:	07813583          	ld	a1,120(sp)
    if (sec->ord == byte_order::lsb) {
   1fa8c:	06813783          	ld	a5,104(sp)
   1fa90:	01c7a783          	lw	a5,28(a5)
   1fa94:	02079e63          	bne	a5,zero,1fad0 <dwarf::value::as_exprloc() const+0x28c>
   1fa98:	00058613          	addi	a2,a1,0
    uint64_t val = 0;
   1fa9c:	00000693          	addi	a3,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1faa0:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1faa4:	00064703          	lbu	a4,0(a2)
   1faa8:	00f71733          	sll	a4,a4,a5
   1faac:	00e6e6b3          	or	a3,a3,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1fab0:	00160613          	addi	a2,a2,1
   1fab4:	0087879b          	addiw	a5,a5,8
   1fab8:	fea796e3          	bne	a5,a0,1faa4 <dwarf::value::as_exprloc() const+0x260>
    pos += sizeof(T);
   1fabc:	00458593          	addi	a1,a1,4
   1fac0:	06b13c23          	sd	a1,120(sp)
   1fac4:	02069693          	slli	a3,a3,0x20
   1fac8:	0206d693          	srli	a3,a3,0x20
  case DW_FORM::block4:
    size = cur.fixed<uint32_t>();
    break;
   1facc:	2300006f          	jal	zero,1fcfc <dwarf::value::as_exprloc() const+0x4b8>
   1fad0:	00058793          	addi	a5,a1,0
   1fad4:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1fad8:	00000693          	addi	a3,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1fadc:	00869693          	slli	a3,a3,0x8
   1fae0:	0007c703          	lbu	a4,0(a5)
   1fae4:	00d766b3          	or	a3,a4,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1fae8:	00178793          	addi	a5,a5,1
   1faec:	fec798e3          	bne	a5,a2,1fadc <dwarf::value::as_exprloc() const+0x298>
   1faf0:	fcdff06f          	jal	zero,1fabc <dwarf::value::as_exprloc() const+0x278>
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as exprloc");
   1faf4:	01000513          	addi	a0,zero,16
   1faf8:	8d9f60ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1fafc:	00050493          	addi	s1,a0,0
   1fb00:	00c42583          	lw	a1,12(s0)
   1fb04:	00810513          	addi	a0,sp,8
   1fb08:	3200f0ef          	jal	ra,2ee28 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1fb0c:	00017617          	auipc	a2,0x17
   1fb10:	36c60613          	addi	a2,a2,876 # 36e78 <std::piecewise_construct+0x1c8>
   1fb14:	00000593          	addi	a1,zero,0
   1fb18:	00810513          	addi	a0,sp,8
   1fb1c:	825f60ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1fb20:	00050593          	addi	a1,a0,0
   1fb24:	02810413          	addi	s0,sp,40
   1fb28:	00040513          	addi	a0,s0,0
   1fb2c:	8e5f60ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1fb30:	00017597          	auipc	a1,0x17
   1fb34:	39858593          	addi	a1,a1,920 # 36ec8 <std::piecewise_construct+0x218>
   1fb38:	00040513          	addi	a0,s0,0
   1fb3c:	c05f60ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1fb40:	00050593          	addi	a1,a0,0
   1fb44:	04810413          	addi	s0,sp,72
   1fb48:	00040513          	addi	a0,s0,0
   1fb4c:	8c5f60ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1fb50:	00040593          	addi	a1,s0,0
   1fb54:	00048513          	addi	a0,s1,0
   1fb58:	c39f60ef          	jal	ra,16790 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1fb5c:	00023797          	auipc	a5,0x23
   1fb60:	8e47b783          	ld	a5,-1820(a5) # 42440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   1fb64:	01078793          	addi	a5,a5,16
   1fb68:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1fb6c:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1fb70:	05810793          	addi	a5,sp,88
   1fb74:	00f50463          	beq	a0,a5,1fb7c <dwarf::value::as_exprloc() const+0x338>
   1fb78:	939f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1fb7c:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1fb80:	03810793          	addi	a5,sp,56
   1fb84:	00f50463          	beq	a0,a5,1fb8c <dwarf::value::as_exprloc() const+0x348>
   1fb88:	929f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1fb8c:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1fb90:	01810793          	addi	a5,sp,24
   1fb94:	00f50463          	beq	a0,a5,1fb9c <dwarf::value::as_exprloc() const+0x358>
   1fb98:	919f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1fb9c:	00023617          	auipc	a2,0x23
   1fba0:	a3463603          	ld	a2,-1484(a2) # 425d0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f690>
   1fba4:	00023597          	auipc	a1,0x23
   1fba8:	9ec5b583          	ld	a1,-1556(a1) # 42590 <typeinfo for dwarf::value_type_mismatch@@Base+0xb70>
   1fbac:	00048513          	addi	a0,s1,0
   1fbb0:	ab1f60ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1fbb4:	00050413          	addi	s0,a0,0
   1fbb8:	1040006f          	jal	zero,1fcbc <dwarf::value::as_exprloc() const+0x478>
    return 0;
   1fbbc:	00000693          	addi	a3,zero,0
   1fbc0:	13c0006f          	jal	zero,1fcfc <dwarf::value::as_exprloc() const+0x4b8>
   1fbc4:	07013403          	ld	s0,112(sp)
   1fbc8:	02040463          	beq	s0,zero,1fbf0 <dwarf::value::as_exprloc() const+0x3ac>
    if (__is_single_threaded())
   1fbcc:	00023797          	auipc	a5,0x23
   1fbd0:	8ac7b783          	ld	a5,-1876(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fbd4:	0007c783          	lbu	a5,0(a5)
   1fbd8:	02078e63          	beq	a5,zero,1fc14 <dwarf::value::as_exprloc() const+0x3d0>
    _Atomic_word __result = *__mem;
   1fbdc:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1fbe0:	fff5079b          	addiw	a5,a0,-1
   1fbe4:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1fbe8:	00100793          	addi	a5,zero,1
   1fbec:	02f50c63          	beq	a0,a5,1fc24 <dwarf::value::as_exprloc() const+0x3e0>
  }
  return expr(cu, cur.get_section_offset(), size);
}
   1fbf0:	00048513          	addi	a0,s1,0
   1fbf4:	0a813083          	ld	ra,168(sp)
   1fbf8:	0a013403          	ld	s0,160(sp)
   1fbfc:	09813483          	ld	s1,152(sp)
   1fc00:	09013903          	ld	s2,144(sp)
   1fc04:	08813983          	ld	s3,136(sp)
   1fc08:	08013a03          	ld	s4,128(sp)
   1fc0c:	0b010113          	addi	sp,sp,176
   1fc10:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   1fc14:	fff00593          	addi	a1,zero,-1
   1fc18:	03040513          	addi	a0,s0,48
   1fc1c:	f14f60ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1fc20:	fc9ff06f          	jal	zero,1fbe8 <dwarf::value::as_exprloc() const+0x3a4>
	_M_dispose();
   1fc24:	00043783          	ld	a5,0(s0)
   1fc28:	0107b783          	ld	a5,16(a5)
   1fc2c:	00040513          	addi	a0,s0,0
   1fc30:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1fc34:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1fc38:	00023797          	auipc	a5,0x23
   1fc3c:	8407b783          	ld	a5,-1984(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fc40:	0007c783          	lbu	a5,0(a5)
   1fc44:	02078663          	beq	a5,zero,1fc70 <dwarf::value::as_exprloc() const+0x42c>
    _Atomic_word __result = *__mem;
   1fc48:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1fc4c:	fff5079b          	addiw	a5,a0,-1
   1fc50:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1fc54:	00100793          	addi	a5,zero,1
   1fc58:	f8f51ce3          	bne	a0,a5,1fbf0 <dwarf::value::as_exprloc() const+0x3ac>
	    _M_destroy();
   1fc5c:	00043783          	ld	a5,0(s0)
   1fc60:	0187b783          	ld	a5,24(a5)
   1fc64:	00040513          	addi	a0,s0,0
   1fc68:	000780e7          	jalr	ra,0(a5)
  return expr(cu, cur.get_section_offset(), size);
   1fc6c:	f85ff06f          	jal	zero,1fbf0 <dwarf::value::as_exprloc() const+0x3ac>
      return __exchange_and_add(__mem, __val);
   1fc70:	fff00593          	addi	a1,zero,-1
   1fc74:	03440513          	addi	a0,s0,52
   1fc78:	eb8f60ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1fc7c:	fd9ff06f          	jal	zero,1fc54 <dwarf::value::as_exprloc() const+0x410>
      { return _M_dataplus._M_p; }
   1fc80:	00050413          	addi	s0,a0,0
   1fc84:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1fc88:	05810793          	addi	a5,sp,88
   1fc8c:	00f50463          	beq	a0,a5,1fc94 <dwarf::value::as_exprloc() const+0x450>
   1fc90:	821f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1fc94:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1fc98:	03810793          	addi	a5,sp,56
   1fc9c:	00f50463          	beq	a0,a5,1fca4 <dwarf::value::as_exprloc() const+0x460>
   1fca0:	811f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1fca4:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1fca8:	01810793          	addi	a5,sp,24
   1fcac:	00f50463          	beq	a0,a5,1fcb4 <dwarf::value::as_exprloc() const+0x470>
   1fcb0:	801f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as exprloc");
   1fcb4:	00048513          	addi	a0,s1,0
   1fcb8:	fb8f60ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1fcbc:	07013503          	ld	a0,112(sp)
   1fcc0:	00050863          	beq	a0,zero,1fcd0 <dwarf::value::as_exprloc() const+0x48c>
	  _M_pi->_M_release();
   1fcc4:	00022317          	auipc	t1,0x22
   1fcc8:	6fc33303          	ld	t1,1788(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   1fccc:	000300e7          	jalr	ra,0(t1)
   1fcd0:	00040513          	addi	a0,s0,0
   1fcd4:	9bdf60ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1fcd8:	00050413          	addi	s0,a0,0
   1fcdc:	fb9ff06f          	jal	zero,1fc94 <dwarf::value::as_exprloc() const+0x450>
   1fce0:	00050413          	addi	s0,a0,0
   1fce4:	fc1ff06f          	jal	zero,1fca4 <dwarf::value::as_exprloc() const+0x460>
   1fce8:	00050413          	addi	s0,a0,0
   1fcec:	fc9ff06f          	jal	zero,1fcb4 <dwarf::value::as_exprloc() const+0x470>
        val |= ((uint64_t)p[i]) << (i * 8);
   1fcf0:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   1fcf4:	00178793          	addi	a5,a5,1
   1fcf8:	06f13c23          	sd	a5,120(sp)
  section_offset get_section_offset() const { return pos - sec->begin; }
   1fcfc:	06813783          	ld	a5,104(sp)
   1fd00:	0087b783          	ld	a5,8(a5)
  return expr(cu, cur.get_section_offset(), size);
   1fd04:	07813603          	ld	a2,120(sp)
   1fd08:	40f60633          	sub	a2,a2,a5
   1fd0c:	00043583          	ld	a1,0(s0)
   1fd10:	00048513          	addi	a0,s1,0
   1fd14:	16c040ef          	jal	ra,23e80 <dwarf::expr::expr(dwarf::unit const*, unsigned long, unsigned long)>
   1fd18:	eadff06f          	jal	zero,1fbc4 <dwarf::value::as_exprloc() const+0x380>
  cursor cur(cu->data(), offset);
   1fd1c:	01043703          	ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1fd20:	07313423          	sd	s3,104(sp)
      : _M_pi(__r._M_pi)
   1fd24:	06013823          	sd	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1fd28:	0089b783          	ld	a5,8(s3)
   1fd2c:	00e787b3          	add	a5,a5,a4
   1fd30:	06f13c23          	sd	a5,120(sp)
  switch (form) {
   1fd34:	00842783          	lw	a5,8(s0)
   1fd38:	ffd7879b          	addiw	a5,a5,-3
   1fd3c:	0007869b          	addiw	a3,a5,0
   1fd40:	01500713          	addi	a4,zero,21
   1fd44:	dad768e3          	bltu	a4,a3,1faf4 <dwarf::value::as_exprloc() const+0x2b0>
   1fd48:	02079713          	slli	a4,a5,0x20
   1fd4c:	01e75793          	srli	a5,a4,0x1e
   1fd50:	00017717          	auipc	a4,0x17
   1fd54:	36070713          	addi	a4,a4,864 # 370b0 <std::piecewise_construct+0x400>
   1fd58:	00e787b3          	add	a5,a5,a4
   1fd5c:	0007a783          	lw	a5,0(a5)
   1fd60:	00e787b3          	add	a5,a5,a4
   1fd64:	00078067          	jalr	zero,0(a5)

000000000001fd68 <dwarf::value::as_flag() const>:

bool value::as_flag() const {
   1fd68:	f8010113          	addi	sp,sp,-128
   1fd6c:	06113c23          	sd	ra,120(sp)
   1fd70:	06813823          	sd	s0,112(sp)
   1fd74:	06913423          	sd	s1,104(sp)
   1fd78:	07213023          	sd	s2,96(sp)
   1fd7c:	00050413          	addi	s0,a0,0
  switch (form) {
   1fd80:	00852783          	lw	a5,8(a0)
   1fd84:	00c00713          	addi	a4,zero,12
   1fd88:	02e78663          	beq	a5,a4,1fdb4 <dwarf::value::as_flag() const+0x4c>
   1fd8c:	01900713          	addi	a4,zero,25
   1fd90:	00100493          	addi	s1,zero,1
   1fd94:	16e79663          	bne	a5,a4,1ff00 <dwarf::value::as_flag() const+0x198>
  case DW_FORM::flag_present:
    return true;
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as flag");
  }
}
   1fd98:	00048513          	addi	a0,s1,0
   1fd9c:	07813083          	ld	ra,120(sp)
   1fda0:	07013403          	ld	s0,112(sp)
   1fda4:	06813483          	ld	s1,104(sp)
   1fda8:	06013903          	ld	s2,96(sp)
   1fdac:	08010113          	addi	sp,sp,128
   1fdb0:	00008067          	jalr	zero,0(ra)
    cursor cur(cu->data(), offset);
   1fdb4:	00053503          	ld	a0,0(a0)
   1fdb8:	f84f70ef          	jal	ra,1753c <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1fdbc:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1fdc0:	00853483          	ld	s1,8(a0)
	if (_M_pi != nullptr)
   1fdc4:	30048063          	beq	s1,zero,200c4 <dwarf::value::as_flag() const+0x35c>
    if (__is_single_threaded())
   1fdc8:	00022797          	auipc	a5,0x22
   1fdcc:	6b07b783          	ld	a5,1712(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fdd0:	0007c783          	lbu	a5,0(a5)
   1fdd4:	0a078a63          	beq	a5,zero,1fe88 <dwarf::value::as_flag() const+0x120>
  { *__mem += __val; }
   1fdd8:	0304a783          	lw	a5,48(s1)
   1fddc:	0017879b          	addiw	a5,a5,1
   1fde0:	02f4a823          	sw	a5,48(s1)
   1fde4:	01043403          	ld	s0,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1fde8:	05213023          	sd	s2,64(sp)
      : _M_pi(__r._M_pi)
   1fdec:	04913423          	sd	s1,72(sp)
    if (__is_single_threaded())
   1fdf0:	00022797          	auipc	a5,0x22
   1fdf4:	6887b783          	ld	a5,1672(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fdf8:	0007c783          	lbu	a5,0(a5)
   1fdfc:	08078e63          	beq	a5,zero,1fe98 <dwarf::value::as_flag() const+0x130>
  { *__mem += __val; }
   1fe00:	0304a783          	lw	a5,48(s1)
   1fe04:	0017879b          	addiw	a5,a5,1
   1fe08:	02f4a823          	sw	a5,48(s1)
   1fe0c:	00893783          	ld	a5,8(s2)
   1fe10:	008787b3          	add	a5,a5,s0
   1fe14:	04f13823          	sd	a5,80(sp)
    if (__is_single_threaded())
   1fe18:	00022797          	auipc	a5,0x22
   1fe1c:	6607b783          	ld	a5,1632(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fe20:	0007c783          	lbu	a5,0(a5)
   1fe24:	08078263          	beq	a5,zero,1fea8 <dwarf::value::as_flag() const+0x140>
    _Atomic_word __result = *__mem;
   1fe28:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1fe2c:	fff5079b          	addiw	a5,a0,-1
   1fe30:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1fe34:	00100793          	addi	a5,zero,1
   1fe38:	2af51263          	bne	a0,a5,200dc <dwarf::value::as_flag() const+0x374>
	_M_dispose();
   1fe3c:	0004b783          	ld	a5,0(s1)
   1fe40:	0107b783          	ld	a5,16(a5)
   1fe44:	00048513          	addi	a0,s1,0
   1fe48:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1fe4c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1fe50:	00022797          	auipc	a5,0x22
   1fe54:	6287b783          	ld	a5,1576(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fe58:	0007c783          	lbu	a5,0(a5)
   1fe5c:	04078e63          	beq	a5,zero,1feb8 <dwarf::value::as_flag() const+0x150>
    _Atomic_word __result = *__mem;
   1fe60:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   1fe64:	fff5079b          	addiw	a5,a0,-1
   1fe68:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1fe6c:	00100793          	addi	a5,zero,1
   1fe70:	26f51663          	bne	a0,a5,200dc <dwarf::value::as_flag() const+0x374>
	    _M_destroy();
   1fe74:	0004b783          	ld	a5,0(s1)
   1fe78:	0187b783          	ld	a5,24(a5)
   1fe7c:	00048513          	addi	a0,s1,0
   1fe80:	000780e7          	jalr	ra,0(a5)
   1fe84:	2580006f          	jal	zero,200dc <dwarf::value::as_flag() const+0x374>
      __atomic_add(__mem, __val);
   1fe88:	00100593          	addi	a1,zero,1
   1fe8c:	03048513          	addi	a0,s1,48
   1fe90:	c70f60ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1fe94:	f51ff06f          	jal	zero,1fde4 <dwarf::value::as_flag() const+0x7c>
   1fe98:	00100593          	addi	a1,zero,1
   1fe9c:	03048513          	addi	a0,s1,48
   1fea0:	c60f60ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1fea4:	f69ff06f          	jal	zero,1fe0c <dwarf::value::as_flag() const+0xa4>
      return __exchange_and_add(__mem, __val);
   1fea8:	fff00593          	addi	a1,zero,-1
   1feac:	03048513          	addi	a0,s1,48
   1feb0:	c80f60ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1feb4:	f81ff06f          	jal	zero,1fe34 <dwarf::value::as_flag() const+0xcc>
   1feb8:	fff00593          	addi	a1,zero,-1
   1febc:	03448513          	addi	a0,s1,52
   1fec0:	c70f60ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1fec4:	fa9ff06f          	jal	zero,1fe6c <dwarf::value::as_flag() const+0x104>
    const unsigned char *p = (const unsigned char *)pos;
   1fec8:	05013783          	ld	a5,80(sp)
    if (sec->ord == byte_order::lsb) {
   1fecc:	04013703          	ld	a4,64(sp)
   1fed0:	01c72703          	lw	a4,28(a4)
   1fed4:	16070463          	beq	a4,zero,2003c <dwarf::value::as_flag() const+0x2d4>
        val = (val << 8) | (uint64_t)p[i];
   1fed8:	0007c483          	lbu	s1,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1fedc:	1640006f          	jal	zero,20040 <dwarf::value::as_flag() const+0x2d8>
   1fee0:	fff00593          	addi	a1,zero,-1
   1fee4:	03040513          	addi	a0,s0,48
   1fee8:	c48f60ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1feec:	1840006f          	jal	zero,20070 <dwarf::value::as_flag() const+0x308>
   1fef0:	fff00593          	addi	a1,zero,-1
   1fef4:	03440513          	addi	a0,s0,52
   1fef8:	c38f60ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1fefc:	1ac0006f          	jal	zero,200a8 <dwarf::value::as_flag() const+0x340>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as flag");
   1ff00:	01000513          	addi	a0,zero,16
   1ff04:	cccf60ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1ff08:	00050493          	addi	s1,a0,0
   1ff0c:	00c42583          	lw	a1,12(s0)
   1ff10:	00010513          	addi	a0,sp,0
   1ff14:	7150e0ef          	jal	ra,2ee28 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1ff18:	00017617          	auipc	a2,0x17
   1ff1c:	f6060613          	addi	a2,a2,-160 # 36e78 <std::piecewise_construct+0x1c8>
   1ff20:	00000593          	addi	a1,zero,0
   1ff24:	00010513          	addi	a0,sp,0
   1ff28:	c18f60ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1ff2c:	00050593          	addi	a1,a0,0
   1ff30:	02010413          	addi	s0,sp,32
   1ff34:	00040513          	addi	a0,s0,0
   1ff38:	cd8f60ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1ff3c:	00017597          	auipc	a1,0x17
   1ff40:	f9c58593          	addi	a1,a1,-100 # 36ed8 <std::piecewise_construct+0x228>
   1ff44:	00040513          	addi	a0,s0,0
   1ff48:	ff8f60ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1ff4c:	00050593          	addi	a1,a0,0
   1ff50:	04010413          	addi	s0,sp,64
   1ff54:	00040513          	addi	a0,s0,0
   1ff58:	cb8f60ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1ff5c:	00040593          	addi	a1,s0,0
   1ff60:	00048513          	addi	a0,s1,0
   1ff64:	82df60ef          	jal	ra,16790 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1ff68:	00022797          	auipc	a5,0x22
   1ff6c:	4d87b783          	ld	a5,1240(a5) # 42440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   1ff70:	01078793          	addi	a5,a5,16
   1ff74:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1ff78:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   1ff7c:	05010793          	addi	a5,sp,80
   1ff80:	00f50463          	beq	a0,a5,1ff88 <dwarf::value::as_flag() const+0x220>
   1ff84:	d2cf60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ff88:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   1ff8c:	03010793          	addi	a5,sp,48
   1ff90:	00f50463          	beq	a0,a5,1ff98 <dwarf::value::as_flag() const+0x230>
   1ff94:	d1cf60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ff98:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   1ff9c:	01010793          	addi	a5,sp,16
   1ffa0:	00f50463          	beq	a0,a5,1ffa8 <dwarf::value::as_flag() const+0x240>
   1ffa4:	d0cf60ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1ffa8:	00022617          	auipc	a2,0x22
   1ffac:	62863603          	ld	a2,1576(a2) # 425d0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f690>
   1ffb0:	00022597          	auipc	a1,0x22
   1ffb4:	5e05b583          	ld	a1,1504(a1) # 42590 <typeinfo for dwarf::value_type_mismatch@@Base+0xb70>
   1ffb8:	00048513          	addi	a0,s1,0
   1ffbc:	ea4f60ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1ffc0:	00050413          	addi	s0,a0,0
   1ffc4:	04813503          	ld	a0,72(sp)
   1ffc8:	00050863          	beq	a0,zero,1ffd8 <dwarf::value::as_flag() const+0x270>
	  _M_pi->_M_release();
   1ffcc:	00022317          	auipc	t1,0x22
   1ffd0:	3f433303          	ld	t1,1012(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   1ffd4:	000300e7          	jalr	ra,0(t1)
   1ffd8:	00040513          	addi	a0,s0,0
   1ffdc:	eb4f60ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1ffe0:	00050413          	addi	s0,a0,0
   1ffe4:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   1ffe8:	05010793          	addi	a5,sp,80
   1ffec:	00f50463          	beq	a0,a5,1fff4 <dwarf::value::as_flag() const+0x28c>
   1fff0:	cc0f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1fff4:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   1fff8:	03010793          	addi	a5,sp,48
   1fffc:	00f50463          	beq	a0,a5,20004 <dwarf::value::as_flag() const+0x29c>
   20000:	cb0f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   20004:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   20008:	01010793          	addi	a5,sp,16
   2000c:	00f50463          	beq	a0,a5,20014 <dwarf::value::as_flag() const+0x2ac>
   20010:	ca0f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
   20014:	00048513          	addi	a0,s1,0
   20018:	c58f60ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2001c:	00040513          	addi	a0,s0,0
   20020:	e70f60ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   20024:	00050413          	addi	s0,a0,0
   20028:	fcdff06f          	jal	zero,1fff4 <dwarf::value::as_flag() const+0x28c>
   2002c:	00050413          	addi	s0,a0,0
   20030:	fd5ff06f          	jal	zero,20004 <dwarf::value::as_flag() const+0x29c>
   20034:	00050413          	addi	s0,a0,0
   20038:	fddff06f          	jal	zero,20014 <dwarf::value::as_flag() const+0x2ac>
        val |= ((uint64_t)p[i]) << (i * 8);
   2003c:	0007c483          	lbu	s1,0(a5)
    pos += sizeof(T);
   20040:	00178793          	addi	a5,a5,1
   20044:	04f13823          	sd	a5,80(sp)
    return cur.fixed<ubyte>() != 0;
   20048:	009034b3          	sltu	s1,zero,s1
	if (_M_pi != nullptr)
   2004c:	04813403          	ld	s0,72(sp)
   20050:	d40404e3          	beq	s0,zero,1fd98 <dwarf::value::as_flag() const+0x30>
    if (__is_single_threaded())
   20054:	00022797          	auipc	a5,0x22
   20058:	4247b783          	ld	a5,1060(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2005c:	0007c783          	lbu	a5,0(a5)
   20060:	e80780e3          	beq	a5,zero,1fee0 <dwarf::value::as_flag() const+0x178>
    _Atomic_word __result = *__mem;
   20064:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   20068:	fff5079b          	addiw	a5,a0,-1
   2006c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20070:	00100793          	addi	a5,zero,1
   20074:	d2f512e3          	bne	a0,a5,1fd98 <dwarf::value::as_flag() const+0x30>
	_M_dispose();
   20078:	00043783          	ld	a5,0(s0)
   2007c:	0107b783          	ld	a5,16(a5)
   20080:	00040513          	addi	a0,s0,0
   20084:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20088:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2008c:	00022797          	auipc	a5,0x22
   20090:	3ec7b783          	ld	a5,1004(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20094:	0007c783          	lbu	a5,0(a5)
   20098:	e4078ce3          	beq	a5,zero,1fef0 <dwarf::value::as_flag() const+0x188>
    _Atomic_word __result = *__mem;
   2009c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   200a0:	fff5079b          	addiw	a5,a0,-1
   200a4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   200a8:	00100793          	addi	a5,zero,1
   200ac:	cef516e3          	bne	a0,a5,1fd98 <dwarf::value::as_flag() const+0x30>
	    _M_destroy();
   200b0:	00043783          	ld	a5,0(s0)
   200b4:	0187b783          	ld	a5,24(a5)
   200b8:	00040513          	addi	a0,s0,0
   200bc:	000780e7          	jalr	ra,0(a5)
   200c0:	cd9ff06f          	jal	zero,1fd98 <dwarf::value::as_flag() const+0x30>
    cursor cur(cu->data(), offset);
   200c4:	01043703          	ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   200c8:	05213023          	sd	s2,64(sp)
      : _M_pi(__r._M_pi)
   200cc:	04013423          	sd	zero,72(sp)
      : sec(sec), pos(sec->begin + offset) {}
   200d0:	00893783          	ld	a5,8(s2)
   200d4:	00e787b3          	add	a5,a5,a4
   200d8:	04f13823          	sd	a5,80(sp)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   200dc:	04013783          	ld	a5,64(sp)
   200e0:	0107b703          	ld	a4,16(a5)
   200e4:	05013783          	ld	a5,80(sp)
   200e8:	dee7e0e3          	bltu	a5,a4,1fec8 <dwarf::value::as_flag() const+0x160>
      underflow();
   200ec:	04010513          	addi	a0,sp,64
   200f0:	a0dfc0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
   200f4:	dd5ff06f          	jal	zero,1fec8 <dwarf::value::as_flag() const+0x160>

00000000000200f8 <dwarf::value::as_cstr(unsigned long*) const>:
  size_t size;
  const char *s = as_cstr(&size);
  return string(s, size);
}

const char *value::as_cstr(size_t *size_out) const {
   200f8:	f4010113          	addi	sp,sp,-192
   200fc:	0a113c23          	sd	ra,184(sp)
   20100:	0a813823          	sd	s0,176(sp)
   20104:	0a913423          	sd	s1,168(sp)
   20108:	0b213023          	sd	s2,160(sp)
   2010c:	09313c23          	sd	s3,152(sp)
   20110:	09413823          	sd	s4,144(sp)
   20114:	00050413          	addi	s0,a0,0
   20118:	00058913          	addi	s2,a1,0
  cursor cur(cu->data(), offset);
   2011c:	00053503          	ld	a0,0(a0)
   20120:	c1cf70ef          	jal	ra,1753c <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20124:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   20128:	00853483          	ld	s1,8(a0)
	if (_M_pi != nullptr)
   2012c:	4c048a63          	beq	s1,zero,20600 <dwarf::value::as_cstr(unsigned long*) const+0x508>
    if (__is_single_threaded())
   20130:	00022797          	auipc	a5,0x22
   20134:	3487b783          	ld	a5,840(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20138:	0007c783          	lbu	a5,0(a5)
   2013c:	0a078a63          	beq	a5,zero,201f0 <dwarf::value::as_cstr(unsigned long*) const+0xf8>
  { *__mem += __val; }
   20140:	0304a783          	lw	a5,48(s1)
   20144:	0017879b          	addiw	a5,a5,1
   20148:	02f4a823          	sw	a5,48(s1)
   2014c:	01043a03          	ld	s4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20150:	07313423          	sd	s3,104(sp)
      : _M_pi(__r._M_pi)
   20154:	06913823          	sd	s1,112(sp)
    if (__is_single_threaded())
   20158:	00022797          	auipc	a5,0x22
   2015c:	3207b783          	ld	a5,800(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20160:	0007c783          	lbu	a5,0(a5)
   20164:	08078e63          	beq	a5,zero,20200 <dwarf::value::as_cstr(unsigned long*) const+0x108>
  { *__mem += __val; }
   20168:	0304a783          	lw	a5,48(s1)
   2016c:	0017879b          	addiw	a5,a5,1
   20170:	02f4a823          	sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   20174:	0089b783          	ld	a5,8(s3)
   20178:	014787b3          	add	a5,a5,s4
   2017c:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   20180:	00022797          	auipc	a5,0x22
   20184:	2f87b783          	ld	a5,760(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20188:	0007c783          	lbu	a5,0(a5)
   2018c:	08078263          	beq	a5,zero,20210 <dwarf::value::as_cstr(unsigned long*) const+0x118>
    _Atomic_word __result = *__mem;
   20190:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   20194:	fff5079b          	addiw	a5,a0,-1
   20198:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2019c:	00100793          	addi	a5,zero,1
   201a0:	46f51c63          	bne	a0,a5,20618 <dwarf::value::as_cstr(unsigned long*) const+0x520>
	_M_dispose();
   201a4:	0004b783          	ld	a5,0(s1)
   201a8:	0107b783          	ld	a5,16(a5)
   201ac:	00048513          	addi	a0,s1,0
   201b0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   201b4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   201b8:	00022797          	auipc	a5,0x22
   201bc:	2c07b783          	ld	a5,704(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   201c0:	0007c783          	lbu	a5,0(a5)
   201c4:	04078e63          	beq	a5,zero,20220 <dwarf::value::as_cstr(unsigned long*) const+0x128>
    _Atomic_word __result = *__mem;
   201c8:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   201cc:	fff5079b          	addiw	a5,a0,-1
   201d0:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   201d4:	00100793          	addi	a5,zero,1
   201d8:	44f51063          	bne	a0,a5,20618 <dwarf::value::as_cstr(unsigned long*) const+0x520>
	    _M_destroy();
   201dc:	0004b783          	ld	a5,0(s1)
   201e0:	0187b783          	ld	a5,24(a5)
   201e4:	00048513          	addi	a0,s1,0
   201e8:	000780e7          	jalr	ra,0(a5)
   201ec:	42c0006f          	jal	zero,20618 <dwarf::value::as_cstr(unsigned long*) const+0x520>
      __atomic_add(__mem, __val);
   201f0:	00100593          	addi	a1,zero,1
   201f4:	03048513          	addi	a0,s1,48
   201f8:	908f60ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   201fc:	f51ff06f          	jal	zero,2014c <dwarf::value::as_cstr(unsigned long*) const+0x54>
   20200:	00100593          	addi	a1,zero,1
   20204:	03048513          	addi	a0,s1,48
   20208:	8f8f60ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2020c:	f69ff06f          	jal	zero,20174 <dwarf::value::as_cstr(unsigned long*) const+0x7c>
      return __exchange_and_add(__mem, __val);
   20210:	fff00593          	addi	a1,zero,-1
   20214:	03048513          	addi	a0,s1,48
   20218:	918f60ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2021c:	f81ff06f          	jal	zero,2019c <dwarf::value::as_cstr(unsigned long*) const+0xa4>
   20220:	fff00593          	addi	a1,zero,-1
   20224:	03448513          	addi	a0,s1,52
   20228:	908f60ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2022c:	fa9ff06f          	jal	zero,201d4 <dwarf::value::as_cstr(unsigned long*) const+0xdc>
  switch (form) {
  case DW_FORM::string:
    return cur.cstr(size_out);
   20230:	00090593          	addi	a1,s2,0
   20234:	06810513          	addi	a0,sp,104
   20238:	fb4fc0ef          	jal	ra,1c9ec <dwarf::cursor::cstr(unsigned long*)>
   2023c:	00050413          	addi	s0,a0,0
	if (_M_pi != nullptr)
   20240:	07013483          	ld	s1,112(sp)
   20244:	02048463          	beq	s1,zero,2026c <dwarf::value::as_cstr(unsigned long*) const+0x174>
    if (__is_single_threaded())
   20248:	00022797          	auipc	a5,0x22
   2024c:	2307b783          	ld	a5,560(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20250:	0007c783          	lbu	a5,0(a5)
   20254:	2a078a63          	beq	a5,zero,20508 <dwarf::value::as_cstr(unsigned long*) const+0x410>
    _Atomic_word __result = *__mem;
   20258:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   2025c:	fff5079b          	addiw	a5,a0,-1
   20260:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20264:	00100793          	addi	a5,zero,1
   20268:	2af50863          	beq	a0,a5,20518 <dwarf::value::as_cstr(unsigned long*) const+0x420>
    return scur.cstr(size_out);
  }
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as string");
  }
}
   2026c:	00040513          	addi	a0,s0,0
   20270:	0b813083          	ld	ra,184(sp)
   20274:	0b013403          	ld	s0,176(sp)
   20278:	0a813483          	ld	s1,168(sp)
   2027c:	0a013903          	ld	s2,160(sp)
   20280:	09813983          	ld	s3,152(sp)
   20284:	09013a03          	ld	s4,144(sp)
   20288:	0c010113          	addi	sp,sp,192
   2028c:	00008067          	jalr	zero,0(ra)
    section_offset off = cur.offset();
   20290:	00050493          	addi	s1,a0,0
    cursor scur(cu->get_dwarf().get_section(section_type::str), off);
   20294:	00043503          	ld	a0,0(s0)
   20298:	a90f70ef          	jal	ra,17528 <dwarf::unit::get_dwarf() const>
   2029c:	00050593          	addi	a1,a0,0
   202a0:	00a00613          	addi	a2,zero,10
   202a4:	08010513          	addi	a0,sp,128
   202a8:	aacf70ef          	jal	ra,17554 <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   202ac:	08013783          	ld	a5,128(sp)
   202b0:	04f13423          	sd	a5,72(sp)
      : _M_pi(__r._M_pi)
   202b4:	08813503          	ld	a0,136(sp)
   202b8:	04a13823          	sd	a0,80(sp)
	if (_M_pi != nullptr)
   202bc:	02050063          	beq	a0,zero,202dc <dwarf::value::as_cstr(unsigned long*) const+0x1e4>
    if (__is_single_threaded())
   202c0:	00022797          	auipc	a5,0x22
   202c4:	1b87b783          	ld	a5,440(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   202c8:	0007c783          	lbu	a5,0(a5)
   202cc:	04078e63          	beq	a5,zero,20328 <dwarf::value::as_cstr(unsigned long*) const+0x230>
  { *__mem += __val; }
   202d0:	03052783          	lw	a5,48(a0)
   202d4:	0017879b          	addiw	a5,a5,1
   202d8:	02f52823          	sw	a5,48(a0)
   202dc:	08013783          	ld	a5,128(sp)
   202e0:	0087b783          	ld	a5,8(a5)
   202e4:	00978533          	add	a0,a5,s1
   202e8:	04a13c23          	sd	a0,88(sp)
	if (_M_pi != nullptr)
   202ec:	08813403          	ld	s0,136(sp)
   202f0:	02040463          	beq	s0,zero,20318 <dwarf::value::as_cstr(unsigned long*) const+0x220>
    if (__is_single_threaded())
   202f4:	00022797          	auipc	a5,0x22
   202f8:	1847b783          	ld	a5,388(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   202fc:	0007c783          	lbu	a5,0(a5)
   20300:	02078c63          	beq	a5,zero,20338 <dwarf::value::as_cstr(unsigned long*) const+0x240>
    _Atomic_word __result = *__mem;
   20304:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   20308:	fff5079b          	addiw	a5,a0,-1
   2030c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20310:	00100793          	addi	a5,zero,1
   20314:	02f50a63          	beq	a0,a5,20348 <dwarf::value::as_cstr(unsigned long*) const+0x250>
    return scur.cstr(size_out);
   20318:	00090593          	addi	a1,s2,0
   2031c:	04810513          	addi	a0,sp,72
   20320:	eccfc0ef          	jal	ra,1c9ec <dwarf::cursor::cstr(unsigned long*)>
   20324:	0800006f          	jal	zero,203a4 <dwarf::value::as_cstr(unsigned long*) const+0x2ac>
      __atomic_add(__mem, __val);
   20328:	00100593          	addi	a1,zero,1
   2032c:	03050513          	addi	a0,a0,48
   20330:	fd1f50ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   20334:	fa9ff06f          	jal	zero,202dc <dwarf::value::as_cstr(unsigned long*) const+0x1e4>
      return __exchange_and_add(__mem, __val);
   20338:	fff00593          	addi	a1,zero,-1
   2033c:	03040513          	addi	a0,s0,48
   20340:	ff1f50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20344:	fcdff06f          	jal	zero,20310 <dwarf::value::as_cstr(unsigned long*) const+0x218>
	_M_dispose();
   20348:	00043783          	ld	a5,0(s0)
   2034c:	0107b783          	ld	a5,16(a5)
   20350:	00040513          	addi	a0,s0,0
   20354:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20358:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2035c:	00022797          	auipc	a5,0x22
   20360:	11c7b783          	ld	a5,284(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20364:	0007c783          	lbu	a5,0(a5)
   20368:	02078663          	beq	a5,zero,20394 <dwarf::value::as_cstr(unsigned long*) const+0x29c>
    _Atomic_word __result = *__mem;
   2036c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   20370:	fff5079b          	addiw	a5,a0,-1
   20374:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20378:	00100793          	addi	a5,zero,1
   2037c:	f8f51ee3          	bne	a0,a5,20318 <dwarf::value::as_cstr(unsigned long*) const+0x220>
	    _M_destroy();
   20380:	00043783          	ld	a5,0(s0)
   20384:	0187b783          	ld	a5,24(a5)
   20388:	00040513          	addi	a0,s0,0
   2038c:	000780e7          	jalr	ra,0(a5)
   20390:	f89ff06f          	jal	zero,20318 <dwarf::value::as_cstr(unsigned long*) const+0x220>
      return __exchange_and_add(__mem, __val);
   20394:	fff00593          	addi	a1,zero,-1
   20398:	03440513          	addi	a0,s0,52
   2039c:	f95f50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   203a0:	fd9ff06f          	jal	zero,20378 <dwarf::value::as_cstr(unsigned long*) const+0x280>
   203a4:	00050413          	addi	s0,a0,0
	if (_M_pi != nullptr)
   203a8:	05013483          	ld	s1,80(sp)
   203ac:	e8048ae3          	beq	s1,zero,20240 <dwarf::value::as_cstr(unsigned long*) const+0x148>
    if (__is_single_threaded())
   203b0:	00022797          	auipc	a5,0x22
   203b4:	0c87b783          	ld	a5,200(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   203b8:	0007c783          	lbu	a5,0(a5)
   203bc:	06078263          	beq	a5,zero,20420 <dwarf::value::as_cstr(unsigned long*) const+0x328>
    _Atomic_word __result = *__mem;
   203c0:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   203c4:	fff5079b          	addiw	a5,a0,-1
   203c8:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   203cc:	00100793          	addi	a5,zero,1
   203d0:	e6f518e3          	bne	a0,a5,20240 <dwarf::value::as_cstr(unsigned long*) const+0x148>
	_M_dispose();
   203d4:	0004b783          	ld	a5,0(s1)
   203d8:	0107b783          	ld	a5,16(a5)
   203dc:	00048513          	addi	a0,s1,0
   203e0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   203e4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   203e8:	00022797          	auipc	a5,0x22
   203ec:	0907b783          	ld	a5,144(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   203f0:	0007c783          	lbu	a5,0(a5)
   203f4:	02078e63          	beq	a5,zero,20430 <dwarf::value::as_cstr(unsigned long*) const+0x338>
    _Atomic_word __result = *__mem;
   203f8:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   203fc:	fff5079b          	addiw	a5,a0,-1
   20400:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20404:	00100793          	addi	a5,zero,1
   20408:	e2f51ce3          	bne	a0,a5,20240 <dwarf::value::as_cstr(unsigned long*) const+0x148>
	    _M_destroy();
   2040c:	0004b783          	ld	a5,0(s1)
   20410:	0187b783          	ld	a5,24(a5)
   20414:	00048513          	addi	a0,s1,0
   20418:	000780e7          	jalr	ra,0(a5)
   2041c:	e25ff06f          	jal	zero,20240 <dwarf::value::as_cstr(unsigned long*) const+0x148>
      return __exchange_and_add(__mem, __val);
   20420:	fff00593          	addi	a1,zero,-1
   20424:	03048513          	addi	a0,s1,48
   20428:	f09f50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2042c:	fa1ff06f          	jal	zero,203cc <dwarf::value::as_cstr(unsigned long*) const+0x2d4>
   20430:	fff00593          	addi	a1,zero,-1
   20434:	03448513          	addi	a0,s1,52
   20438:	ef9f50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2043c:	fc9ff06f          	jal	zero,20404 <dwarf::value::as_cstr(unsigned long*) const+0x30c>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as string");
   20440:	01000513          	addi	a0,zero,16
   20444:	f8df50ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   20448:	00050493          	addi	s1,a0,0
   2044c:	00c42583          	lw	a1,12(s0)
   20450:	00810513          	addi	a0,sp,8
   20454:	1d50e0ef          	jal	ra,2ee28 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   20458:	00017617          	auipc	a2,0x17
   2045c:	a2060613          	addi	a2,a2,-1504 # 36e78 <std::piecewise_construct+0x1c8>
   20460:	00000593          	addi	a1,zero,0
   20464:	00810513          	addi	a0,sp,8
   20468:	ed9f50ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2046c:	00050593          	addi	a1,a0,0
   20470:	02810413          	addi	s0,sp,40
   20474:	00040513          	addi	a0,s0,0
   20478:	f99f50ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   2047c:	00017597          	auipc	a1,0x17
   20480:	a6c58593          	addi	a1,a1,-1428 # 36ee8 <std::piecewise_construct+0x238>
   20484:	00040513          	addi	a0,s0,0
   20488:	ab8f60ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   2048c:	00050593          	addi	a1,a0,0
   20490:	04810413          	addi	s0,sp,72
   20494:	00040513          	addi	a0,s0,0
   20498:	f79f50ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   2049c:	00040593          	addi	a1,s0,0
   204a0:	00048513          	addi	a0,s1,0
   204a4:	aecf60ef          	jal	ra,16790 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   204a8:	00022797          	auipc	a5,0x22
   204ac:	f987b783          	ld	a5,-104(a5) # 42440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   204b0:	01078793          	addi	a5,a5,16
   204b4:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   204b8:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   204bc:	05810793          	addi	a5,sp,88
   204c0:	00f50463          	beq	a0,a5,204c8 <dwarf::value::as_cstr(unsigned long*) const+0x3d0>
   204c4:	fedf50ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   204c8:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   204cc:	03810793          	addi	a5,sp,56
   204d0:	00f50463          	beq	a0,a5,204d8 <dwarf::value::as_cstr(unsigned long*) const+0x3e0>
   204d4:	fddf50ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   204d8:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   204dc:	01810793          	addi	a5,sp,24
   204e0:	00f50463          	beq	a0,a5,204e8 <dwarf::value::as_cstr(unsigned long*) const+0x3f0>
   204e4:	fcdf50ef          	jal	ra,164b0 <operator delete(void*)@plt>
   204e8:	00022617          	auipc	a2,0x22
   204ec:	0e863603          	ld	a2,232(a2) # 425d0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f690>
   204f0:	00022597          	auipc	a1,0x22
   204f4:	0a05b583          	ld	a1,160(a1) # 42590 <typeinfo for dwarf::value_type_mismatch@@Base+0xb70>
   204f8:	00048513          	addi	a0,s1,0
   204fc:	964f60ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   20500:	00050413          	addi	s0,a0,0
   20504:	0880006f          	jal	zero,2058c <dwarf::value::as_cstr(unsigned long*) const+0x494>
   20508:	fff00593          	addi	a1,zero,-1
   2050c:	03048513          	addi	a0,s1,48
   20510:	e21f50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20514:	d51ff06f          	jal	zero,20264 <dwarf::value::as_cstr(unsigned long*) const+0x16c>
	_M_dispose();
   20518:	0004b783          	ld	a5,0(s1)
   2051c:	0107b783          	ld	a5,16(a5)
   20520:	00048513          	addi	a0,s1,0
   20524:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20528:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2052c:	00022797          	auipc	a5,0x22
   20530:	f4c7b783          	ld	a5,-180(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20534:	0007c783          	lbu	a5,0(a5)
   20538:	02078663          	beq	a5,zero,20564 <dwarf::value::as_cstr(unsigned long*) const+0x46c>
    _Atomic_word __result = *__mem;
   2053c:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   20540:	fff5079b          	addiw	a5,a0,-1
   20544:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20548:	00100793          	addi	a5,zero,1
   2054c:	d2f510e3          	bne	a0,a5,2026c <dwarf::value::as_cstr(unsigned long*) const+0x174>
	    _M_destroy();
   20550:	0004b783          	ld	a5,0(s1)
   20554:	0187b783          	ld	a5,24(a5)
   20558:	00048513          	addi	a0,s1,0
   2055c:	000780e7          	jalr	ra,0(a5)
   20560:	d0dff06f          	jal	zero,2026c <dwarf::value::as_cstr(unsigned long*) const+0x174>
      return __exchange_and_add(__mem, __val);
   20564:	fff00593          	addi	a1,zero,-1
   20568:	03448513          	addi	a0,s1,52
   2056c:	dc5f50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20570:	fd9ff06f          	jal	zero,20548 <dwarf::value::as_cstr(unsigned long*) const+0x450>
	if (_M_pi != nullptr)
   20574:	00050413          	addi	s0,a0,0
   20578:	05013503          	ld	a0,80(sp)
   2057c:	00050863          	beq	a0,zero,2058c <dwarf::value::as_cstr(unsigned long*) const+0x494>
	  _M_pi->_M_release();
   20580:	00022317          	auipc	t1,0x22
   20584:	e4033303          	ld	t1,-448(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   20588:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   2058c:	07013503          	ld	a0,112(sp)
   20590:	00050863          	beq	a0,zero,205a0 <dwarf::value::as_cstr(unsigned long*) const+0x4a8>
	  _M_pi->_M_release();
   20594:	00022317          	auipc	t1,0x22
   20598:	e2c33303          	ld	t1,-468(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   2059c:	000300e7          	jalr	ra,0(t1)
   205a0:	00040513          	addi	a0,s0,0
   205a4:	8ecf60ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   205a8:	00050413          	addi	s0,a0,0
   205ac:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   205b0:	05810793          	addi	a5,sp,88
   205b4:	00f50463          	beq	a0,a5,205bc <dwarf::value::as_cstr(unsigned long*) const+0x4c4>
   205b8:	ef9f50ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   205bc:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   205c0:	03810793          	addi	a5,sp,56
   205c4:	00f50463          	beq	a0,a5,205cc <dwarf::value::as_cstr(unsigned long*) const+0x4d4>
   205c8:	ee9f50ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   205cc:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   205d0:	01810793          	addi	a5,sp,24
   205d4:	00f50463          	beq	a0,a5,205dc <dwarf::value::as_cstr(unsigned long*) const+0x4e4>
   205d8:	ed9f50ef          	jal	ra,164b0 <operator delete(void*)@plt>
   205dc:	00048513          	addi	a0,s1,0
   205e0:	e91f50ef          	jal	ra,16470 <__cxa_free_exception@plt>
   205e4:	fa9ff06f          	jal	zero,2058c <dwarf::value::as_cstr(unsigned long*) const+0x494>
      { return _M_dataplus._M_p; }
   205e8:	00050413          	addi	s0,a0,0
   205ec:	fd1ff06f          	jal	zero,205bc <dwarf::value::as_cstr(unsigned long*) const+0x4c4>
   205f0:	00050413          	addi	s0,a0,0
   205f4:	fd9ff06f          	jal	zero,205cc <dwarf::value::as_cstr(unsigned long*) const+0x4d4>
   205f8:	00050413          	addi	s0,a0,0
   205fc:	fe1ff06f          	jal	zero,205dc <dwarf::value::as_cstr(unsigned long*) const+0x4e4>
  cursor cur(cu->data(), offset);
   20600:	01043703          	ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20604:	07313423          	sd	s3,104(sp)
      : _M_pi(__r._M_pi)
   20608:	06013823          	sd	zero,112(sp)
   2060c:	0089b783          	ld	a5,8(s3)
   20610:	00e787b3          	add	a5,a5,a4
   20614:	06f13c23          	sd	a5,120(sp)
  switch (form) {
   20618:	00842783          	lw	a5,8(s0)
   2061c:	00800713          	addi	a4,zero,8
   20620:	c0e788e3          	beq	a5,a4,20230 <dwarf::value::as_cstr(unsigned long*) const+0x138>
   20624:	00e00713          	addi	a4,zero,14
   20628:	e0e79ce3          	bne	a5,a4,20440 <dwarf::value::as_cstr(unsigned long*) const+0x348>
    section_offset off = cur.offset();
   2062c:	06810513          	addi	a0,sp,104
   20630:	c59fc0ef          	jal	ra,1d288 <dwarf::cursor::offset()>
   20634:	c5dff06f          	jal	zero,20290 <dwarf::value::as_cstr(unsigned long*) const+0x198>

0000000000020638 <dwarf::value::as_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) const>:
void value::as_string(string &buf) const {
   20638:	fd010113          	addi	sp,sp,-48
   2063c:	02113423          	sd	ra,40(sp)
   20640:	02813023          	sd	s0,32(sp)
   20644:	00913c23          	sd	s1,24(sp)
   20648:	00058413          	addi	s0,a1,0
  const char *p = as_cstr(&size);
   2064c:	00810593          	addi	a1,sp,8
   20650:	aa9ff0ef          	jal	ra,200f8 <dwarf::value::as_cstr(unsigned long*) const>
   20654:	00050493          	addi	s1,a0,0
      { this->resize(__n, _CharT()); }
   20658:	00000613          	addi	a2,zero,0
   2065c:	00813583          	ld	a1,8(sp)
   20660:	00040513          	addi	a0,s0,0
   20664:	cfdf50ef          	jal	ra,16360 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@plt>
  memmove(&buf.front(), p, size);
   20668:	00813603          	ld	a2,8(sp)
   2066c:	00048593          	addi	a1,s1,0
   20670:	00043503          	ld	a0,0(s0)
   20674:	8acf60ef          	jal	ra,16720 <memmove@plt>
}
   20678:	02813083          	ld	ra,40(sp)
   2067c:	02013403          	ld	s0,32(sp)
   20680:	01813483          	ld	s1,24(sp)
   20684:	03010113          	addi	sp,sp,48
   20688:	00008067          	jalr	zero,0(ra)

000000000002068c <dwarf::value::as_sec_offset() const>:

section_offset value::as_sec_offset() const {
   2068c:	f5010113          	addi	sp,sp,-176
   20690:	0a113423          	sd	ra,168(sp)
   20694:	0a813023          	sd	s0,160(sp)
   20698:	08913c23          	sd	s1,152(sp)
   2069c:	09213823          	sd	s2,144(sp)
   206a0:	09313423          	sd	s3,136(sp)
   206a4:	00050913          	addi	s2,a0,0
  // Prior to DWARF 4, sec_offsets were encoded as data4 or
  // data8.
  cursor cur(cu->data(), offset);
   206a8:	00053503          	ld	a0,0(a0)
   206ac:	e91f60ef          	jal	ra,1753c <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   206b0:	00053483          	ld	s1,0(a0)
      : _M_pi(__r._M_pi)
   206b4:	00853403          	ld	s0,8(a0)
	if (_M_pi != nullptr)
   206b8:	40040c63          	beq	s0,zero,20ad0 <dwarf::value::as_sec_offset() const+0x444>
    if (__is_single_threaded())
   206bc:	00022797          	auipc	a5,0x22
   206c0:	dbc7b783          	ld	a5,-580(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   206c4:	0007c783          	lbu	a5,0(a5)
   206c8:	0a078a63          	beq	a5,zero,2077c <dwarf::value::as_sec_offset() const+0xf0>
  { *__mem += __val; }
   206cc:	03042783          	lw	a5,48(s0)
   206d0:	0017879b          	addiw	a5,a5,1
   206d4:	02f42823          	sw	a5,48(s0)
   206d8:	01093983          	ld	s3,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   206dc:	06913423          	sd	s1,104(sp)
      : _M_pi(__r._M_pi)
   206e0:	06813823          	sd	s0,112(sp)
    if (__is_single_threaded())
   206e4:	00022797          	auipc	a5,0x22
   206e8:	d947b783          	ld	a5,-620(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   206ec:	0007c783          	lbu	a5,0(a5)
   206f0:	08078e63          	beq	a5,zero,2078c <dwarf::value::as_sec_offset() const+0x100>
  { *__mem += __val; }
   206f4:	03042783          	lw	a5,48(s0)
   206f8:	0017879b          	addiw	a5,a5,1
   206fc:	02f42823          	sw	a5,48(s0)
   20700:	0084b783          	ld	a5,8(s1)
   20704:	013787b3          	add	a5,a5,s3
   20708:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   2070c:	00022797          	auipc	a5,0x22
   20710:	d6c7b783          	ld	a5,-660(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20714:	0007c783          	lbu	a5,0(a5)
   20718:	08078263          	beq	a5,zero,2079c <dwarf::value::as_sec_offset() const+0x110>
    _Atomic_word __result = *__mem;
   2071c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   20720:	fff5079b          	addiw	a5,a0,-1
   20724:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20728:	00100793          	addi	a5,zero,1
   2072c:	3af51e63          	bne	a0,a5,20ae8 <dwarf::value::as_sec_offset() const+0x45c>
	_M_dispose();
   20730:	00043783          	ld	a5,0(s0)
   20734:	0107b783          	ld	a5,16(a5)
   20738:	00040513          	addi	a0,s0,0
   2073c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20740:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   20744:	00022797          	auipc	a5,0x22
   20748:	d347b783          	ld	a5,-716(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2074c:	0007c783          	lbu	a5,0(a5)
   20750:	04078e63          	beq	a5,zero,207ac <dwarf::value::as_sec_offset() const+0x120>
    _Atomic_word __result = *__mem;
   20754:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   20758:	fff5079b          	addiw	a5,a0,-1
   2075c:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20760:	00100793          	addi	a5,zero,1
   20764:	38f51263          	bne	a0,a5,20ae8 <dwarf::value::as_sec_offset() const+0x45c>
	    _M_destroy();
   20768:	00043783          	ld	a5,0(s0)
   2076c:	0187b783          	ld	a5,24(a5)
   20770:	00040513          	addi	a0,s0,0
   20774:	000780e7          	jalr	ra,0(a5)
   20778:	3700006f          	jal	zero,20ae8 <dwarf::value::as_sec_offset() const+0x45c>
      __atomic_add(__mem, __val);
   2077c:	00100593          	addi	a1,zero,1
   20780:	03040513          	addi	a0,s0,48
   20784:	b7df50ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   20788:	f51ff06f          	jal	zero,206d8 <dwarf::value::as_sec_offset() const+0x4c>
   2078c:	00100593          	addi	a1,zero,1
   20790:	03040513          	addi	a0,s0,48
   20794:	b6df50ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   20798:	f69ff06f          	jal	zero,20700 <dwarf::value::as_sec_offset() const+0x74>
      return __exchange_and_add(__mem, __val);
   2079c:	fff00593          	addi	a1,zero,-1
   207a0:	03040513          	addi	a0,s0,48
   207a4:	b8df50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   207a8:	f81ff06f          	jal	zero,20728 <dwarf::value::as_sec_offset() const+0x9c>
   207ac:	fff00593          	addi	a1,zero,-1
   207b0:	03440513          	addi	a0,s0,52
   207b4:	b7df50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   207b8:	fa9ff06f          	jal	zero,20760 <dwarf::value::as_sec_offset() const+0xd4>
  switch (form) {
   207bc:	00600713          	addi	a4,zero,6
   207c0:	16e79663          	bne	a5,a4,2092c <dwarf::value::as_sec_offset() const+0x2a0>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   207c4:	06813783          	ld	a5,104(sp)
   207c8:	0107b703          	ld	a4,16(a5)
   207cc:	07813783          	ld	a5,120(sp)
   207d0:	40f70633          	sub	a2,a4,a5
   207d4:	00300693          	addi	a3,zero,3
   207d8:	00c6f463          	bgeu	a3,a2,207e0 <dwarf::value::as_sec_offset() const+0x154>
   207dc:	00e7e663          	bltu	a5,a4,207e8 <dwarf::value::as_sec_offset() const+0x15c>
      underflow();
   207e0:	06810513          	addi	a0,sp,104
   207e4:	b18fc0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   207e8:	07813603          	ld	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   207ec:	06813783          	ld	a5,104(sp)
   207f0:	01c7a783          	lw	a5,28(a5)
   207f4:	08079263          	bne	a5,zero,20878 <dwarf::value::as_sec_offset() const+0x1ec>
   207f8:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   207fc:	00000413          	addi	s0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   20800:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   20804:	0006c703          	lbu	a4,0(a3)
   20808:	00f71733          	sll	a4,a4,a5
   2080c:	00e46433          	or	s0,s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   20810:	00168693          	addi	a3,a3,1
   20814:	0087879b          	addiw	a5,a5,8
   20818:	feb796e3          	bne	a5,a1,20804 <dwarf::value::as_sec_offset() const+0x178>
    pos += sizeof(T);
   2081c:	00460613          	addi	a2,a2,4
   20820:	06c13c23          	sd	a2,120(sp)
   20824:	02041413          	slli	s0,s0,0x20
   20828:	02045413          	srli	s0,s0,0x20
	if (_M_pi != nullptr)
   2082c:	07013483          	ld	s1,112(sp)
   20830:	02048463          	beq	s1,zero,20858 <dwarf::value::as_sec_offset() const+0x1cc>
    if (__is_single_threaded())
   20834:	00022797          	auipc	a5,0x22
   20838:	c447b783          	ld	a5,-956(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2083c:	0007c783          	lbu	a5,0(a5)
   20840:	1a078a63          	beq	a5,zero,209f4 <dwarf::value::as_sec_offset() const+0x368>
    _Atomic_word __result = *__mem;
   20844:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   20848:	fff5079b          	addiw	a5,a0,-1
   2084c:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20850:	00100793          	addi	a5,zero,1
   20854:	1af50863          	beq	a0,a5,20a04 <dwarf::value::as_sec_offset() const+0x378>
    return cur.offset();
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) +
                              " as sec_offset");
  }
}
   20858:	00040513          	addi	a0,s0,0
   2085c:	0a813083          	ld	ra,168(sp)
   20860:	0a013403          	ld	s0,160(sp)
   20864:	09813483          	ld	s1,152(sp)
   20868:	09013903          	ld	s2,144(sp)
   2086c:	08813983          	ld	s3,136(sp)
   20870:	0b010113          	addi	sp,sp,176
   20874:	00008067          	jalr	zero,0(ra)
   20878:	00060793          	addi	a5,a2,0
   2087c:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   20880:	00000413          	addi	s0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   20884:	00841413          	slli	s0,s0,0x8
   20888:	0007c703          	lbu	a4,0(a5)
   2088c:	00876433          	or	s0,a4,s0
      for (unsigned i = 0; i < sizeof(T); i++)
   20890:	00178793          	addi	a5,a5,1
   20894:	fed798e3          	bne	a5,a3,20884 <dwarf::value::as_sec_offset() const+0x1f8>
   20898:	f85ff06f          	jal	zero,2081c <dwarf::value::as_sec_offset() const+0x190>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2089c:	06813783          	ld	a5,104(sp)
   208a0:	0107b703          	ld	a4,16(a5)
   208a4:	07813783          	ld	a5,120(sp)
   208a8:	40f70633          	sub	a2,a4,a5
   208ac:	00700693          	addi	a3,zero,7
   208b0:	00c6f463          	bgeu	a3,a2,208b8 <dwarf::value::as_sec_offset() const+0x22c>
   208b4:	00e7e663          	bltu	a5,a4,208c0 <dwarf::value::as_sec_offset() const+0x234>
      underflow();
   208b8:	06810513          	addi	a0,sp,104
   208bc:	a40fc0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   208c0:	07813603          	ld	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   208c4:	06813783          	ld	a5,104(sp)
   208c8:	01c7a783          	lw	a5,28(a5)
   208cc:	02079a63          	bne	a5,zero,20900 <dwarf::value::as_sec_offset() const+0x274>
   208d0:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   208d4:	00000413          	addi	s0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   208d8:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   208dc:	0006c703          	lbu	a4,0(a3)
   208e0:	00f71733          	sll	a4,a4,a5
   208e4:	00e46433          	or	s0,s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   208e8:	00168693          	addi	a3,a3,1
   208ec:	0087879b          	addiw	a5,a5,8
   208f0:	feb796e3          	bne	a5,a1,208dc <dwarf::value::as_sec_offset() const+0x250>
    pos += sizeof(T);
   208f4:	00860613          	addi	a2,a2,8
   208f8:	06c13c23          	sd	a2,120(sp)
   208fc:	f31ff06f          	jal	zero,2082c <dwarf::value::as_sec_offset() const+0x1a0>
   20900:	00060793          	addi	a5,a2,0
   20904:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   20908:	00000413          	addi	s0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   2090c:	00841413          	slli	s0,s0,0x8
   20910:	0007c703          	lbu	a4,0(a5)
   20914:	00876433          	or	s0,a4,s0
      for (unsigned i = 0; i < sizeof(T); i++)
   20918:	00178793          	addi	a5,a5,1
   2091c:	fed798e3          	bne	a5,a3,2090c <dwarf::value::as_sec_offset() const+0x280>
   20920:	fd5ff06f          	jal	zero,208f4 <dwarf::value::as_sec_offset() const+0x268>
    return cur.offset();
   20924:	00050413          	addi	s0,a0,0
   20928:	f05ff06f          	jal	zero,2082c <dwarf::value::as_sec_offset() const+0x1a0>
                              " as sec_offset");
   2092c:	01000513          	addi	a0,zero,16
   20930:	aa1f50ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   20934:	00050493          	addi	s1,a0,0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   20938:	00c92583          	lw	a1,12(s2)
   2093c:	00810513          	addi	a0,sp,8
   20940:	4e80e0ef          	jal	ra,2ee28 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   20944:	00016617          	auipc	a2,0x16
   20948:	53460613          	addi	a2,a2,1332 # 36e78 <std::piecewise_construct+0x1c8>
   2094c:	00000593          	addi	a1,zero,0
   20950:	00810513          	addi	a0,sp,8
   20954:	9edf50ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   20958:	00050593          	addi	a1,a0,0
   2095c:	02810413          	addi	s0,sp,40
   20960:	00040513          	addi	a0,s0,0
   20964:	aadf50ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   20968:	00016597          	auipc	a1,0x16
   2096c:	59058593          	addi	a1,a1,1424 # 36ef8 <std::piecewise_construct+0x248>
   20970:	00040513          	addi	a0,s0,0
   20974:	dcdf50ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   20978:	00050593          	addi	a1,a0,0
   2097c:	04810413          	addi	s0,sp,72
   20980:	00040513          	addi	a0,s0,0
   20984:	a8df50ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   20988:	00040593          	addi	a1,s0,0
   2098c:	00048513          	addi	a0,s1,0
   20990:	e01f50ef          	jal	ra,16790 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   20994:	00022797          	auipc	a5,0x22
   20998:	aac7b783          	ld	a5,-1364(a5) # 42440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   2099c:	01078793          	addi	a5,a5,16
   209a0:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   209a4:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   209a8:	05810793          	addi	a5,sp,88
   209ac:	00f50463          	beq	a0,a5,209b4 <dwarf::value::as_sec_offset() const+0x328>
   209b0:	b01f50ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   209b4:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   209b8:	03810793          	addi	a5,sp,56
   209bc:	00f50463          	beq	a0,a5,209c4 <dwarf::value::as_sec_offset() const+0x338>
   209c0:	af1f50ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   209c4:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   209c8:	01810793          	addi	a5,sp,24
   209cc:	00f50463          	beq	a0,a5,209d4 <dwarf::value::as_sec_offset() const+0x348>
   209d0:	ae1f50ef          	jal	ra,164b0 <operator delete(void*)@plt>
                              " as sec_offset");
   209d4:	00022617          	auipc	a2,0x22
   209d8:	bfc63603          	ld	a2,-1028(a2) # 425d0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f690>
   209dc:	00022597          	auipc	a1,0x22
   209e0:	bb45b583          	ld	a1,-1100(a1) # 42590 <typeinfo for dwarf::value_type_mismatch@@Base+0xb70>
   209e4:	00048513          	addi	a0,s1,0
   209e8:	c79f50ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   209ec:	00050413          	addi	s0,a0,0
   209f0:	0ac0006f          	jal	zero,20a9c <dwarf::value::as_sec_offset() const+0x410>
      return __exchange_and_add(__mem, __val);
   209f4:	fff00593          	addi	a1,zero,-1
   209f8:	03048513          	addi	a0,s1,48
   209fc:	935f50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20a00:	e51ff06f          	jal	zero,20850 <dwarf::value::as_sec_offset() const+0x1c4>
	_M_dispose();
   20a04:	0004b783          	ld	a5,0(s1)
   20a08:	0107b783          	ld	a5,16(a5)
   20a0c:	00048513          	addi	a0,s1,0
   20a10:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20a14:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   20a18:	00022797          	auipc	a5,0x22
   20a1c:	a607b783          	ld	a5,-1440(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20a20:	0007c783          	lbu	a5,0(a5)
   20a24:	02078663          	beq	a5,zero,20a50 <dwarf::value::as_sec_offset() const+0x3c4>
    _Atomic_word __result = *__mem;
   20a28:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   20a2c:	fff5079b          	addiw	a5,a0,-1
   20a30:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20a34:	00100793          	addi	a5,zero,1
   20a38:	e2f510e3          	bne	a0,a5,20858 <dwarf::value::as_sec_offset() const+0x1cc>
	    _M_destroy();
   20a3c:	0004b783          	ld	a5,0(s1)
   20a40:	0187b783          	ld	a5,24(a5)
   20a44:	00048513          	addi	a0,s1,0
   20a48:	000780e7          	jalr	ra,0(a5)
   20a4c:	e0dff06f          	jal	zero,20858 <dwarf::value::as_sec_offset() const+0x1cc>
      return __exchange_and_add(__mem, __val);
   20a50:	fff00593          	addi	a1,zero,-1
   20a54:	03448513          	addi	a0,s1,52
   20a58:	8d9f50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20a5c:	fd9ff06f          	jal	zero,20a34 <dwarf::value::as_sec_offset() const+0x3a8>
      { return _M_dataplus._M_p; }
   20a60:	00050413          	addi	s0,a0,0
   20a64:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   20a68:	05810793          	addi	a5,sp,88
   20a6c:	00f50463          	beq	a0,a5,20a74 <dwarf::value::as_sec_offset() const+0x3e8>
   20a70:	a41f50ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   20a74:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   20a78:	03810793          	addi	a5,sp,56
   20a7c:	00f50463          	beq	a0,a5,20a84 <dwarf::value::as_sec_offset() const+0x3f8>
   20a80:	a31f50ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   20a84:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   20a88:	01810793          	addi	a5,sp,24
   20a8c:	00f50463          	beq	a0,a5,20a94 <dwarf::value::as_sec_offset() const+0x408>
   20a90:	a21f50ef          	jal	ra,164b0 <operator delete(void*)@plt>
   20a94:	00048513          	addi	a0,s1,0
   20a98:	9d9f50ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   20a9c:	07013503          	ld	a0,112(sp)
   20aa0:	00050863          	beq	a0,zero,20ab0 <dwarf::value::as_sec_offset() const+0x424>
	  _M_pi->_M_release();
   20aa4:	00022317          	auipc	t1,0x22
   20aa8:	91c33303          	ld	t1,-1764(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   20aac:	000300e7          	jalr	ra,0(t1)
   20ab0:	00040513          	addi	a0,s0,0
   20ab4:	bddf50ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   20ab8:	00050413          	addi	s0,a0,0
   20abc:	fb9ff06f          	jal	zero,20a74 <dwarf::value::as_sec_offset() const+0x3e8>
   20ac0:	00050413          	addi	s0,a0,0
   20ac4:	fc1ff06f          	jal	zero,20a84 <dwarf::value::as_sec_offset() const+0x3f8>
   20ac8:	00050413          	addi	s0,a0,0
   20acc:	fc9ff06f          	jal	zero,20a94 <dwarf::value::as_sec_offset() const+0x408>
  cursor cur(cu->data(), offset);
   20ad0:	01093703          	ld	a4,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20ad4:	06913423          	sd	s1,104(sp)
      : _M_pi(__r._M_pi)
   20ad8:	06013823          	sd	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   20adc:	0084b783          	ld	a5,8(s1)
   20ae0:	00e787b3          	add	a5,a5,a4
   20ae4:	06f13c23          	sd	a5,120(sp)
  switch (form) {
   20ae8:	00892783          	lw	a5,8(s2)
   20aec:	00700713          	addi	a4,zero,7
   20af0:	dae786e3          	beq	a5,a4,2089c <dwarf::value::as_sec_offset() const+0x210>
   20af4:	01700713          	addi	a4,zero,23
   20af8:	cce792e3          	bne	a5,a4,207bc <dwarf::value::as_sec_offset() const+0x130>
    return cur.offset();
   20afc:	06810513          	addi	a0,sp,104
   20b00:	f88fc0ef          	jal	ra,1d288 <dwarf::cursor::offset()>
   20b04:	e21ff06f          	jal	zero,20924 <dwarf::value::as_sec_offset() const+0x298>

0000000000020b08 <dwarf::value::resolve_indirect(dwarf::DW_AT)>:

void value::resolve_indirect(DW_AT name) {
  if (form != DW_FORM::indirect)
   20b08:	00852703          	lw	a4,8(a0)
   20b0c:	01600793          	addi	a5,zero,22
   20b10:	00f70463          	beq	a4,a5,20b18 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x10>
   20b14:	00008067          	jalr	zero,0(ra)
void value::resolve_indirect(DW_AT name) {
   20b18:	fa010113          	addi	sp,sp,-96
   20b1c:	04113c23          	sd	ra,88(sp)
   20b20:	04813823          	sd	s0,80(sp)
   20b24:	04913423          	sd	s1,72(sp)
   20b28:	05213023          	sd	s2,64(sp)
   20b2c:	03313c23          	sd	s3,56(sp)
   20b30:	03413823          	sd	s4,48(sp)
   20b34:	00050413          	addi	s0,a0,0
   20b38:	00058913          	addi	s2,a1,0
    return;

  cursor c(cu->data(), offset);
   20b3c:	00053503          	ld	a0,0(a0)
   20b40:	9fdf60ef          	jal	ra,1753c <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20b44:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   20b48:	00853483          	ld	s1,8(a0)
	if (_M_pi != nullptr)
   20b4c:	26048663          	beq	s1,zero,20db8 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x2b0>
    if (__is_single_threaded())
   20b50:	00022797          	auipc	a5,0x22
   20b54:	9287b783          	ld	a5,-1752(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20b58:	0007c783          	lbu	a5,0(a5)
   20b5c:	0a078a63          	beq	a5,zero,20c10 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x108>
  { *__mem += __val; }
   20b60:	0304a783          	lw	a5,48(s1)
   20b64:	0017879b          	addiw	a5,a5,1
   20b68:	02f4a823          	sw	a5,48(s1)
   20b6c:	01043a03          	ld	s4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20b70:	01313423          	sd	s3,8(sp)
      : _M_pi(__r._M_pi)
   20b74:	00913823          	sd	s1,16(sp)
    if (__is_single_threaded())
   20b78:	00022797          	auipc	a5,0x22
   20b7c:	9007b783          	ld	a5,-1792(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20b80:	0007c783          	lbu	a5,0(a5)
   20b84:	08078e63          	beq	a5,zero,20c20 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x118>
  { *__mem += __val; }
   20b88:	0304a783          	lw	a5,48(s1)
   20b8c:	0017879b          	addiw	a5,a5,1
   20b90:	02f4a823          	sw	a5,48(s1)
   20b94:	0089b783          	ld	a5,8(s3)
   20b98:	014787b3          	add	a5,a5,s4
   20b9c:	00f13c23          	sd	a5,24(sp)
    if (__is_single_threaded())
   20ba0:	00022797          	auipc	a5,0x22
   20ba4:	8d87b783          	ld	a5,-1832(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20ba8:	0007c783          	lbu	a5,0(a5)
   20bac:	08078263          	beq	a5,zero,20c30 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x128>
    _Atomic_word __result = *__mem;
   20bb0:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   20bb4:	fff5079b          	addiw	a5,a0,-1
   20bb8:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20bbc:	00100793          	addi	a5,zero,1
   20bc0:	20f51863          	bne	a0,a5,20dd0 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x2c8>
	_M_dispose();
   20bc4:	0004b783          	ld	a5,0(s1)
   20bc8:	0107b783          	ld	a5,16(a5)
   20bcc:	00048513          	addi	a0,s1,0
   20bd0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20bd4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   20bd8:	00022797          	auipc	a5,0x22
   20bdc:	8a07b783          	ld	a5,-1888(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20be0:	0007c783          	lbu	a5,0(a5)
   20be4:	04078e63          	beq	a5,zero,20c40 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x138>
    _Atomic_word __result = *__mem;
   20be8:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   20bec:	fff7871b          	addiw	a4,a5,-1
   20bf0:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20bf4:	00100713          	addi	a4,zero,1
   20bf8:	1ce79c63          	bne	a5,a4,20dd0 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x2c8>
	    _M_destroy();
   20bfc:	0004b783          	ld	a5,0(s1)
   20c00:	0187b783          	ld	a5,24(a5)
   20c04:	00048513          	addi	a0,s1,0
   20c08:	000780e7          	jalr	ra,0(a5)
   20c0c:	1c40006f          	jal	zero,20dd0 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x2c8>
      __atomic_add(__mem, __val);
   20c10:	00100593          	addi	a1,zero,1
   20c14:	03048513          	addi	a0,s1,48
   20c18:	ee8f50ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   20c1c:	f51ff06f          	jal	zero,20b6c <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x64>
   20c20:	00100593          	addi	a1,zero,1
   20c24:	03048513          	addi	a0,s1,48
   20c28:	ed8f50ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   20c2c:	f69ff06f          	jal	zero,20b94 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x8c>
      return __exchange_and_add(__mem, __val);
   20c30:	fff00593          	addi	a1,zero,-1
   20c34:	03048513          	addi	a0,s1,48
   20c38:	ef8f50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20c3c:	f81ff06f          	jal	zero,20bbc <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xb4>
   20c40:	fff00593          	addi	a1,zero,-1
   20c44:	03448513          	addi	a0,s1,52
   20c48:	ee8f50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20c4c:	00050793          	addi	a5,a0,0
   20c50:	fa5ff06f          	jal	zero,20bf4 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xec>
    return 0;
   20c54:	00000613          	addi	a2,zero,0
  DW_FORM form;
  do {
    form = (DW_FORM)c.uleb128();
   20c58:	0006061b          	addiw	a2,a2,0
  } while (form == DW_FORM::indirect);
   20c5c:	04961c63          	bne	a2,s1,20cb4 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1ac>
    while (pos < sec->end) {
   20c60:	01813783          	ld	a5,24(sp)
      { return _M_ptr; }
   20c64:	00813583          	ld	a1,8(sp)
   20c68:	0105b703          	ld	a4,16(a1)
   20c6c:	02e7fe63          	bgeu	a5,a4,20ca8 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1a0>
    std::uint64_t result = 0;
   20c70:	00000613          	addi	a2,zero,0
    int shift = 0;
   20c74:	00098813          	addi	a6,s3,0
      uint8_t byte = *(uint8_t *)(pos++);
   20c78:	00178793          	addi	a5,a5,1
   20c7c:	00f13c23          	sd	a5,24(sp)
   20c80:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   20c84:	07f77693          	andi	a3,a4,127
   20c88:	010696b3          	sll	a3,a3,a6
   20c8c:	00d66633          	or	a2,a2,a3
      if ((byte & 0x80) == 0)
   20c90:	0187171b          	slliw	a4,a4,0x18
   20c94:	4187571b          	sraiw	a4,a4,0x18
   20c98:	fc0750e3          	bge	a4,zero,20c58 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x150>
      shift += 7;
   20c9c:	0078081b          	addiw	a6,a6,7
    while (pos < sec->end) {
   20ca0:	0105b703          	ld	a4,16(a1)
   20ca4:	fce7eae3          	bltu	a5,a4,20c78 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x170>
    underflow();
   20ca8:	000a0513          	addi	a0,s4,0
   20cac:	e51fb0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    return 0;
   20cb0:	fa5ff06f          	jal	zero,20c54 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x14c>
  typ = attribute_spec(name, form).type;
   20cb4:	00090593          	addi	a1,s2,0
   20cb8:	02010513          	addi	a0,sp,32
   20cbc:	049020ef          	jal	ra,23504 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)>
   20cc0:	02812783          	lw	a5,40(sp)
   20cc4:	00f42623          	sw	a5,12(s0)
  section_offset get_section_offset() const { return pos - sec->begin; }
   20cc8:	00813783          	ld	a5,8(sp)
   20ccc:	0087b703          	ld	a4,8(a5)
   20cd0:	01813783          	ld	a5,24(sp)
   20cd4:	40e787b3          	sub	a5,a5,a4
  offset = c.get_section_offset();
   20cd8:	00f43823          	sd	a5,16(s0)
	if (_M_pi != nullptr)
   20cdc:	01013403          	ld	s0,16(sp)
   20ce0:	02040463          	beq	s0,zero,20d08 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x200>
    if (__is_single_threaded())
   20ce4:	00021797          	auipc	a5,0x21
   20ce8:	7947b783          	ld	a5,1940(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20cec:	0007c783          	lbu	a5,0(a5)
   20cf0:	02078c63          	beq	a5,zero,20d28 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x220>
    _Atomic_word __result = *__mem;
   20cf4:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   20cf8:	fff5079b          	addiw	a5,a0,-1
   20cfc:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20d00:	00100793          	addi	a5,zero,1
   20d04:	02f50a63          	beq	a0,a5,20d38 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x230>
}
   20d08:	05813083          	ld	ra,88(sp)
   20d0c:	05013403          	ld	s0,80(sp)
   20d10:	04813483          	ld	s1,72(sp)
   20d14:	04013903          	ld	s2,64(sp)
   20d18:	03813983          	ld	s3,56(sp)
   20d1c:	03013a03          	ld	s4,48(sp)
   20d20:	06010113          	addi	sp,sp,96
   20d24:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   20d28:	fff00593          	addi	a1,zero,-1
   20d2c:	03040513          	addi	a0,s0,48
   20d30:	e00f50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20d34:	fcdff06f          	jal	zero,20d00 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1f8>
	_M_dispose();
   20d38:	00043783          	ld	a5,0(s0)
   20d3c:	0107b783          	ld	a5,16(a5)
   20d40:	00040513          	addi	a0,s0,0
   20d44:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20d48:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   20d4c:	00021797          	auipc	a5,0x21
   20d50:	72c7b783          	ld	a5,1836(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20d54:	0007c783          	lbu	a5,0(a5)
   20d58:	02078663          	beq	a5,zero,20d84 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x27c>
    _Atomic_word __result = *__mem;
   20d5c:	03442783          	lw	a5,52(s0)
    *__mem += __val;
   20d60:	fff7871b          	addiw	a4,a5,-1
   20d64:	02e42a23          	sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20d68:	00100713          	addi	a4,zero,1
   20d6c:	f8e79ee3          	bne	a5,a4,20d08 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x200>
	    _M_destroy();
   20d70:	00043783          	ld	a5,0(s0)
   20d74:	0187b783          	ld	a5,24(a5)
   20d78:	00040513          	addi	a0,s0,0
   20d7c:	000780e7          	jalr	ra,0(a5)
   20d80:	f89ff06f          	jal	zero,20d08 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x200>
      return __exchange_and_add(__mem, __val);
   20d84:	fff00593          	addi	a1,zero,-1
   20d88:	03440513          	addi	a0,s0,52
   20d8c:	da4f50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20d90:	00050793          	addi	a5,a0,0
   20d94:	fd5ff06f          	jal	zero,20d68 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x260>
	if (_M_pi != nullptr)
   20d98:	00050413          	addi	s0,a0,0
   20d9c:	01013503          	ld	a0,16(sp)
   20da0:	00050863          	beq	a0,zero,20db0 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x2a8>
	  _M_pi->_M_release();
   20da4:	00021317          	auipc	t1,0x21
   20da8:	61c33303          	ld	t1,1564(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   20dac:	000300e7          	jalr	ra,0(t1)
   20db0:	00040513          	addi	a0,s0,0
   20db4:	8ddf50ef          	jal	ra,16690 <_Unwind_Resume@plt>
  cursor c(cu->data(), offset);
   20db8:	01043703          	ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20dbc:	01313423          	sd	s3,8(sp)
      : _M_pi(__r._M_pi)
   20dc0:	00013823          	sd	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   20dc4:	0089b783          	ld	a5,8(s3)
   20dc8:	00e787b3          	add	a5,a5,a4
   20dcc:	00f13c23          	sd	a5,24(sp)
    underflow();
   20dd0:	00810a13          	addi	s4,sp,8
    int shift = 0;
   20dd4:	00000993          	addi	s3,zero,0
  } while (form == DW_FORM::indirect);
   20dd8:	01600493          	addi	s1,zero,22
   20ddc:	e85ff06f          	jal	zero,20c60 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x158>

0000000000020de0 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)>:
    : cu(cu), form(form), typ(typ), offset(offset) {
   20de0:	00b53023          	sd	a1,0(a0)
   20de4:	00d52423          	sw	a3,8(a0)
   20de8:	00e52623          	sw	a4,12(a0)
   20dec:	00f53823          	sd	a5,16(a0)
  if (form == DW_FORM::indirect)
   20df0:	01600793          	addi	a5,zero,22
   20df4:	00f68463          	beq	a3,a5,20dfc <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)+0x1c>
   20df8:	00008067          	jalr	zero,0(ra)
value::value(const unit *cu, DW_AT name, DW_FORM form, type typ,
   20dfc:	ff010113          	addi	sp,sp,-16
   20e00:	00113423          	sd	ra,8(sp)
    resolve_indirect(name);
   20e04:	00060593          	addi	a1,a2,0
   20e08:	d01ff0ef          	jal	ra,20b08 <dwarf::value::resolve_indirect(dwarf::DW_AT)>
}
   20e0c:	00813083          	ld	ra,8(sp)
   20e10:	01010113          	addi	sp,sp,16
   20e14:	00008067          	jalr	zero,0(ra)

0000000000020e18 <dwarf::value::as_rangelist() const>:
rangelist value::as_rangelist() const {
   20e18:	f3010113          	addi	sp,sp,-208
   20e1c:	0c113423          	sd	ra,200(sp)
   20e20:	0c813023          	sd	s0,192(sp)
   20e24:	0a913c23          	sd	s1,184(sp)
   20e28:	0b213823          	sd	s2,176(sp)
   20e2c:	0b313423          	sd	s3,168(sp)
   20e30:	0b413023          	sd	s4,160(sp)
   20e34:	09513c23          	sd	s5,152(sp)
   20e38:	09613823          	sd	s6,144(sp)
   20e3c:	09713423          	sd	s7,136(sp)
   20e40:	09813023          	sd	s8,128(sp)
   20e44:	00050a13          	addi	s4,a0,0
   20e48:	00058913          	addi	s2,a1,0
  section_offset off = as_sec_offset();
   20e4c:	00058513          	addi	a0,a1,0
   20e50:	83dff0ef          	jal	ra,2068c <dwarf::value::as_sec_offset() const>
   20e54:	00050a93          	addi	s5,a0,0
  die cudie = cu->root();
   20e58:	00093503          	ld	a0,0(s2)
   20e5c:	a5cf90ef          	jal	ra,1a0b8 <dwarf::unit::root() const>
   20e60:	00050413          	addi	s0,a0,0
  die(const die &o) = default;
   20e64:	00052783          	lw	a5,0(a0)
   20e68:	00f12823          	sw	a5,16(sp)
   20e6c:	00853783          	ld	a5,8(a0)
   20e70:	00f13c23          	sd	a5,24(sp)
   20e74:	01053783          	ld	a5,16(a0)
   20e78:	02f13023          	sd	a5,32(sp)
   20e7c:	01853783          	ld	a5,24(a0)
   20e80:	02f13423          	sd	a5,40(sp)
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   20e84:	03010793          	addi	a5,sp,48
   20e88:	06f13023          	sd	a5,96(sp)
   20e8c:	06f13423          	sd	a5,104(sp)
   20e90:	06010793          	addi	a5,sp,96
   20e94:	06f13823          	sd	a5,112(sp)
  size_type size() const { return end - base; }
   20e98:	05853983          	ld	s3,88(a0)
   20e9c:	05053783          	ld	a5,80(a0)
   20ea0:	40f989b3          	sub	s3,s3,a5
   20ea4:	4039d493          	srai	s1,s3,0x3
    if (n <= (size_type)(cap - base))
   20ea8:	03000793          	addi	a5,zero,48
   20eac:	0737f663          	bgeu	a5,s3,20f18 <dwarf::value::as_rangelist() const+0x100>
    size_type target = cap - base;
   20eb0:	00600513          	addi	a0,zero,6
      target <<= 1;
   20eb4:	00151513          	slli	a0,a0,0x1
    while (target < n)
   20eb8:	fe956ee3          	bltu	a0,s1,20eb4 <dwarf::value::as_rangelist() const+0x9c>
    char *newbuf = new char[sizeof(T[target])];
   20ebc:	00351b13          	slli	s6,a0,0x3
   20ec0:	000b0513          	addi	a0,s6,0
   20ec4:	c1cf50ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   20ec8:	00050c13          	addi	s8,a0,0
    T *src = base, *dest = (T *)newbuf;
   20ecc:	06013503          	ld	a0,96(sp)
    for (; src < end; src++, dest++) {
   20ed0:	06813703          	ld	a4,104(sp)
   20ed4:	08e57a63          	bgeu	a0,a4,20f68 <dwarf::value::as_rangelist() const+0x150>
    T *src = base, *dest = (T *)newbuf;
   20ed8:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   20edc:	00878793          	addi	a5,a5,8
   20ee0:	fee7eee3          	bltu	a5,a4,20edc <dwarf::value::as_rangelist() const+0xc4>
   20ee4:	fff70b93          	addi	s7,a4,-1
   20ee8:	40ab8bb3          	sub	s7,s7,a0
   20eec:	ff8bfb93          	andi	s7,s7,-8
   20ef0:	008b8b93          	addi	s7,s7,8
   20ef4:	017c0bb3          	add	s7,s8,s7
    if ((char *)base != buf)
   20ef8:	03010793          	addi	a5,sp,48
   20efc:	00f50663          	beq	a0,a5,20f08 <dwarf::value::as_rangelist() const+0xf0>
      delete[] (char *)base;
   20f00:	00050463          	beq	a0,zero,20f08 <dwarf::value::as_rangelist() const+0xf0>
   20f04:	e5cf50ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20f08:	07813023          	sd	s8,96(sp)
    end = dest;
   20f0c:	07713423          	sd	s7,104(sp)
    cap = base + target;
   20f10:	016c0c33          	add	s8,s8,s6
   20f14:	07813823          	sd	s8,112(sp)
    for (size_type i = 0; i < osize; i++)
   20f18:	02048663          	beq	s1,zero,20f44 <dwarf::value::as_rangelist() const+0x12c>
   20f1c:	00000793          	addi	a5,zero,0
   20f20:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   20f24:	05043703          	ld	a4,80(s0)
   20f28:	00d70733          	add	a4,a4,a3
   20f2c:	00073603          	ld	a2,0(a4)
   20f30:	06013703          	ld	a4,96(sp)
   20f34:	00d70733          	add	a4,a4,a3
   20f38:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   20f3c:	00178793          	addi	a5,a5,1
   20f40:	fef490e3          	bne	s1,a5,20f20 <dwarf::value::as_rangelist() const+0x108>
    end = base + osize;
   20f44:	06013783          	ld	a5,96(sp)
   20f48:	013787b3          	add	a5,a5,s3
   20f4c:	06f13423          	sd	a5,104(sp)
   20f50:	06843783          	ld	a5,104(s0)
   20f54:	06f13c23          	sd	a5,120(sp)
  taddr cu_low_pc = cudie.has(DW_AT::low_pc) ? at_low_pc(cudie) : 0;
   20f58:	01100593          	addi	a1,zero,17
   20f5c:	01010513          	addi	a0,sp,16
   20f60:	a45fc0ef          	jal	ra,1d9a4 <dwarf::die::has(dwarf::DW_AT) const>
   20f64:	00c0006f          	jal	zero,20f70 <dwarf::value::as_rangelist() const+0x158>
    T *src = base, *dest = (T *)newbuf;
   20f68:	000c0b93          	addi	s7,s8,0
   20f6c:	f8dff06f          	jal	zero,20ef8 <dwarf::value::as_rangelist() const+0xe0>
   20f70:	00050e63          	beq	a0,zero,20f8c <dwarf::value::as_rangelist() const+0x174>
   20f74:	01010513          	addi	a0,sp,16
   20f78:	5c90a0ef          	jal	ra,2bd40 <dwarf::at_low_pc(dwarf::die const&)>
   20f7c:	00050493          	addi	s1,a0,0
  auto sec = cu->get_dwarf().get_section(section_type::ranges);
   20f80:	00093503          	ld	a0,0(s2)
   20f84:	da4f60ef          	jal	ra,17528 <dwarf::unit::get_dwarf() const>
   20f88:	00c0006f          	jal	zero,20f94 <dwarf::value::as_rangelist() const+0x17c>
  taddr cu_low_pc = cudie.has(DW_AT::low_pc) ? at_low_pc(cudie) : 0;
   20f8c:	00000493          	addi	s1,zero,0
   20f90:	ff1ff06f          	jal	zero,20f80 <dwarf::value::as_rangelist() const+0x168>
  auto sec = cu->get_dwarf().get_section(section_type::ranges);
   20f94:	00050593          	addi	a1,a0,0
   20f98:	00900613          	addi	a2,zero,9
   20f9c:	00010513          	addi	a0,sp,0
   20fa0:	db4f60ef          	jal	ra,17554 <dwarf::dwarf::get_section(dwarf::section_type) const>
  auto cusec = cu->data();
   20fa4:	00093503          	ld	a0,0(s2)
   20fa8:	d94f60ef          	jal	ra,1753c <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20fac:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   20fb0:	00853403          	ld	s0,8(a0)
	if (_M_pi != nullptr)
   20fb4:	02040063          	beq	s0,zero,20fd4 <dwarf::value::as_rangelist() const+0x1bc>
    if (__is_single_threaded())
   20fb8:	00021797          	auipc	a5,0x21
   20fbc:	4c07b783          	ld	a5,1216(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20fc0:	0007c783          	lbu	a5,0(a5)
   20fc4:	02078663          	beq	a5,zero,20ff0 <dwarf::value::as_rangelist() const+0x1d8>
  { *__mem += __val; }
   20fc8:	03042783          	lw	a5,48(s0)
   20fcc:	0017879b          	addiw	a5,a5,1
   20fd0:	02f42823          	sw	a5,48(s0)
  return rangelist(sec, off, cusec->addr_size, cu_low_pc);
   20fd4:	00048713          	addi	a4,s1,0
   20fd8:	02092683          	lw	a3,32(s2)
   20fdc:	000a8613          	addi	a2,s5,0
   20fe0:	00010593          	addi	a1,sp,0
   20fe4:	000a0513          	addi	a0,s4,0
   20fe8:	095050ef          	jal	ra,2687c <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)>
   20fec:	0140006f          	jal	zero,21000 <dwarf::value::as_rangelist() const+0x1e8>
      __atomic_add(__mem, __val);
   20ff0:	00100593          	addi	a1,zero,1
   20ff4:	03040513          	addi	a0,s0,48
   20ff8:	b08f50ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   20ffc:	fd9ff06f          	jal	zero,20fd4 <dwarf::value::as_rangelist() const+0x1bc>
	if (_M_pi != nullptr)
   21000:	02040463          	beq	s0,zero,21028 <dwarf::value::as_rangelist() const+0x210>
    if (__is_single_threaded())
   21004:	00021797          	auipc	a5,0x21
   21008:	4747b783          	ld	a5,1140(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2100c:	0007c783          	lbu	a5,0(a5)
   21010:	0a078263          	beq	a5,zero,210b4 <dwarf::value::as_rangelist() const+0x29c>
    _Atomic_word __result = *__mem;
   21014:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   21018:	fff5079b          	addiw	a5,a0,-1
   2101c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21020:	00100793          	addi	a5,zero,1
   21024:	0af50063          	beq	a0,a5,210c4 <dwarf::value::as_rangelist() const+0x2ac>
	if (_M_pi != nullptr)
   21028:	00813403          	ld	s0,8(sp)
   2102c:	02040463          	beq	s0,zero,21054 <dwarf::value::as_rangelist() const+0x23c>
    if (__is_single_threaded())
   21030:	00021797          	auipc	a5,0x21
   21034:	4487b783          	ld	a5,1096(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21038:	0007c783          	lbu	a5,0(a5)
   2103c:	0e078263          	beq	a5,zero,21120 <dwarf::value::as_rangelist() const+0x308>
    _Atomic_word __result = *__mem;
   21040:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   21044:	fff5079b          	addiw	a5,a0,-1
   21048:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2104c:	00100793          	addi	a5,zero,1
   21050:	0ef50063          	beq	a0,a5,21130 <dwarf::value::as_rangelist() const+0x318>
    for (T *p = base; p < end; ++p)
   21054:	06013503          	ld	a0,96(sp)
   21058:	06813783          	ld	a5,104(sp)
   2105c:	00f57a63          	bgeu	a0,a5,21070 <dwarf::value::as_rangelist() const+0x258>
   21060:	00050793          	addi	a5,a0,0
   21064:	00878793          	addi	a5,a5,8
   21068:	06813703          	ld	a4,104(sp)
   2106c:	fee7ece3          	bltu	a5,a4,21064 <dwarf::value::as_rangelist() const+0x24c>
    if ((char *)base != buf)
   21070:	03010793          	addi	a5,sp,48
   21074:	00f50663          	beq	a0,a5,21080 <dwarf::value::as_rangelist() const+0x268>
      delete[] (char *)base;
   21078:	00050463          	beq	a0,zero,21080 <dwarf::value::as_rangelist() const+0x268>
   2107c:	ce4f50ef          	jal	ra,16560 <operator delete[](void*)@plt>
}
   21080:	000a0513          	addi	a0,s4,0
   21084:	0c813083          	ld	ra,200(sp)
   21088:	0c013403          	ld	s0,192(sp)
   2108c:	0b813483          	ld	s1,184(sp)
   21090:	0b013903          	ld	s2,176(sp)
   21094:	0a813983          	ld	s3,168(sp)
   21098:	0a013a03          	ld	s4,160(sp)
   2109c:	09813a83          	ld	s5,152(sp)
   210a0:	09013b03          	ld	s6,144(sp)
   210a4:	08813b83          	ld	s7,136(sp)
   210a8:	08013c03          	ld	s8,128(sp)
   210ac:	0d010113          	addi	sp,sp,208
   210b0:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   210b4:	fff00593          	addi	a1,zero,-1
   210b8:	03040513          	addi	a0,s0,48
   210bc:	a74f50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   210c0:	f61ff06f          	jal	zero,21020 <dwarf::value::as_rangelist() const+0x208>
	_M_dispose();
   210c4:	00043783          	ld	a5,0(s0)
   210c8:	0107b783          	ld	a5,16(a5)
   210cc:	00040513          	addi	a0,s0,0
   210d0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   210d4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   210d8:	00021797          	auipc	a5,0x21
   210dc:	3a07b783          	ld	a5,928(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   210e0:	0007c783          	lbu	a5,0(a5)
   210e4:	02078663          	beq	a5,zero,21110 <dwarf::value::as_rangelist() const+0x2f8>
    _Atomic_word __result = *__mem;
   210e8:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   210ec:	fff5079b          	addiw	a5,a0,-1
   210f0:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   210f4:	00100793          	addi	a5,zero,1
   210f8:	f2f518e3          	bne	a0,a5,21028 <dwarf::value::as_rangelist() const+0x210>
	    _M_destroy();
   210fc:	00043783          	ld	a5,0(s0)
   21100:	0187b783          	ld	a5,24(a5)
   21104:	00040513          	addi	a0,s0,0
   21108:	000780e7          	jalr	ra,0(a5)
   2110c:	f1dff06f          	jal	zero,21028 <dwarf::value::as_rangelist() const+0x210>
      return __exchange_and_add(__mem, __val);
   21110:	fff00593          	addi	a1,zero,-1
   21114:	03440513          	addi	a0,s0,52
   21118:	a18f50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2111c:	fd9ff06f          	jal	zero,210f4 <dwarf::value::as_rangelist() const+0x2dc>
   21120:	fff00593          	addi	a1,zero,-1
   21124:	03040513          	addi	a0,s0,48
   21128:	a08f50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2112c:	f21ff06f          	jal	zero,2104c <dwarf::value::as_rangelist() const+0x234>
	_M_dispose();
   21130:	00043783          	ld	a5,0(s0)
   21134:	0107b783          	ld	a5,16(a5)
   21138:	00040513          	addi	a0,s0,0
   2113c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21140:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21144:	00021797          	auipc	a5,0x21
   21148:	3347b783          	ld	a5,820(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2114c:	0007c783          	lbu	a5,0(a5)
   21150:	02078663          	beq	a5,zero,2117c <dwarf::value::as_rangelist() const+0x364>
    _Atomic_word __result = *__mem;
   21154:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   21158:	fff5079b          	addiw	a5,a0,-1
   2115c:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21160:	00100793          	addi	a5,zero,1
   21164:	eef518e3          	bne	a0,a5,21054 <dwarf::value::as_rangelist() const+0x23c>
	    _M_destroy();
   21168:	00043783          	ld	a5,0(s0)
   2116c:	0187b783          	ld	a5,24(a5)
   21170:	00040513          	addi	a0,s0,0
   21174:	000780e7          	jalr	ra,0(a5)
   21178:	eddff06f          	jal	zero,21054 <dwarf::value::as_rangelist() const+0x23c>
      return __exchange_and_add(__mem, __val);
   2117c:	fff00593          	addi	a1,zero,-1
   21180:	03440513          	addi	a0,s0,52
   21184:	9acf50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21188:	fd9ff06f          	jal	zero,21160 <dwarf::value::as_rangelist() const+0x348>
	if (_M_pi != nullptr)
   2118c:	00050493          	addi	s1,a0,0
   21190:	00040a63          	beq	s0,zero,211a4 <dwarf::value::as_rangelist() const+0x38c>
	  _M_pi->_M_release();
   21194:	00040513          	addi	a0,s0,0
   21198:	00021317          	auipc	t1,0x21
   2119c:	22833303          	ld	t1,552(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   211a0:	000300e7          	jalr	ra,0(t1)
   211a4:	00048413          	addi	s0,s1,0
	if (_M_pi != nullptr)
   211a8:	00813503          	ld	a0,8(sp)
   211ac:	00050863          	beq	a0,zero,211bc <dwarf::value::as_rangelist() const+0x3a4>
	  _M_pi->_M_release();
   211b0:	00021317          	auipc	t1,0x21
   211b4:	21033303          	ld	t1,528(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   211b8:	000300e7          	jalr	ra,0(t1)
class die {
   211bc:	03010513          	addi	a0,sp,48
   211c0:	00021317          	auipc	t1,0x21
   211c4:	22033303          	ld	t1,544(t1) # 423e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b110>
   211c8:	000300e7          	jalr	ra,0(t1)
   211cc:	00040513          	addi	a0,s0,0
   211d0:	cc0f50ef          	jal	ra,16690 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   211d4:	00050413          	addi	s0,a0,0
   211d8:	fd1ff06f          	jal	zero,211a8 <dwarf::value::as_rangelist() const+0x390>
   211dc:	00050413          	addi	s0,a0,0
   211e0:	fddff06f          	jal	zero,211bc <dwarf::value::as_rangelist() const+0x3a4>

00000000000211e4 <dwarf::value::as_string[abi:cxx11]() const>:
string value::as_string() const {
   211e4:	fe010113          	addi	sp,sp,-32
   211e8:	00113c23          	sd	ra,24(sp)
   211ec:	00813823          	sd	s0,16(sp)
   211f0:	00050413          	addi	s0,a0,0
   211f4:	00058513          	addi	a0,a1,0
  const char *s = as_cstr(&size);
   211f8:	00810593          	addi	a1,sp,8
   211fc:	efdfe0ef          	jal	ra,200f8 <dwarf::value::as_cstr(unsigned long*) const>
   21200:	00050593          	addi	a1,a0,0
  return string(s, size);
   21204:	00813603          	ld	a2,8(sp)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   21208:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   2120c:	00f43023          	sd	a5,0(s0)
	if (__s == 0 && __n > 0)
   21210:	02050863          	beq	a0,zero,21240 <dwarf::value::as_string[abi:cxx11]() const+0x5c>
	_M_construct(__s, __s + __n, std::forward_iterator_tag());
   21214:	00000693          	addi	a3,zero,0
   21218:	00c58633          	add	a2,a1,a2
   2121c:	00040513          	addi	a0,s0,0
   21220:	00021317          	auipc	t1,0x21
   21224:	0e033303          	ld	t1,224(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   21228:	000300e7          	jalr	ra,0(t1)
}
   2122c:	00040513          	addi	a0,s0,0
   21230:	01813083          	ld	ra,24(sp)
   21234:	01013403          	ld	s0,16(sp)
   21238:	02010113          	addi	sp,sp,32
   2123c:	00008067          	jalr	zero,0(ra)
	if (__s == 0 && __n > 0)
   21240:	fc060ae3          	beq	a2,zero,21214 <dwarf::value::as_string[abi:cxx11]() const+0x30>
	  std::__throw_logic_error(__N("basic_string: "
   21244:	00015517          	auipc	a0,0x15
   21248:	3dc50513          	addi	a0,a0,988 # 36620 <__libc_csu_fini+0x8>
   2124c:	a14f50ef          	jal	ra,16460 <std::__throw_logic_error(char const*)@plt>

0000000000021250 <dwarf::value::as_reference() const>:
die value::as_reference() const {
   21250:	e7010113          	addi	sp,sp,-400
   21254:	18113423          	sd	ra,392(sp)
   21258:	18813023          	sd	s0,384(sp)
   2125c:	16913c23          	sd	s1,376(sp)
   21260:	17213823          	sd	s2,368(sp)
   21264:	17313423          	sd	s3,360(sp)
   21268:	17413023          	sd	s4,352(sp)
   2126c:	15513c23          	sd	s5,344(sp)
   21270:	15613823          	sd	s6,336(sp)
   21274:	15713423          	sd	s7,328(sp)
   21278:	00050413          	addi	s0,a0,0
   2127c:	00058913          	addi	s2,a1,0
  cursor cur(cu->data(), offset);
   21280:	0005b503          	ld	a0,0(a1)
   21284:	ab8f60ef          	jal	ra,1753c <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   21288:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   2128c:	00853483          	ld	s1,8(a0)
	if (_M_pi != nullptr)
   21290:	380488e3          	beq	s1,zero,21e20 <dwarf::value::as_reference() const+0xbd0>
    if (__is_single_threaded())
   21294:	00021797          	auipc	a5,0x21
   21298:	1e47b783          	ld	a5,484(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2129c:	0007c783          	lbu	a5,0(a5)
   212a0:	0a078a63          	beq	a5,zero,21354 <dwarf::value::as_reference() const+0x104>
  { *__mem += __val; }
   212a4:	0304a783          	lw	a5,48(s1)
   212a8:	0017879b          	addiw	a5,a5,1
   212ac:	02f4a823          	sw	a5,48(s1)
   212b0:	01093a03          	ld	s4,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   212b4:	13313423          	sd	s3,296(sp)
      : _M_pi(__r._M_pi)
   212b8:	12913823          	sd	s1,304(sp)
    if (__is_single_threaded())
   212bc:	00021797          	auipc	a5,0x21
   212c0:	1bc7b783          	ld	a5,444(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   212c4:	0007c783          	lbu	a5,0(a5)
   212c8:	08078e63          	beq	a5,zero,21364 <dwarf::value::as_reference() const+0x114>
  { *__mem += __val; }
   212cc:	0304a783          	lw	a5,48(s1)
   212d0:	0017879b          	addiw	a5,a5,1
   212d4:	02f4a823          	sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   212d8:	0089b783          	ld	a5,8(s3)
   212dc:	014787b3          	add	a5,a5,s4
   212e0:	12f13c23          	sd	a5,312(sp)
    if (__is_single_threaded())
   212e4:	00021797          	auipc	a5,0x21
   212e8:	1947b783          	ld	a5,404(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   212ec:	0007c783          	lbu	a5,0(a5)
   212f0:	08078263          	beq	a5,zero,21374 <dwarf::value::as_reference() const+0x124>
    _Atomic_word __result = *__mem;
   212f4:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   212f8:	fff5079b          	addiw	a5,a0,-1
   212fc:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21300:	00100793          	addi	a5,zero,1
   21304:	32f51ae3          	bne	a0,a5,21e38 <dwarf::value::as_reference() const+0xbe8>
	_M_dispose();
   21308:	0004b783          	ld	a5,0(s1)
   2130c:	0107b783          	ld	a5,16(a5)
   21310:	00048513          	addi	a0,s1,0
   21314:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21318:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2131c:	00021797          	auipc	a5,0x21
   21320:	15c7b783          	ld	a5,348(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21324:	0007c783          	lbu	a5,0(a5)
   21328:	04078e63          	beq	a5,zero,21384 <dwarf::value::as_reference() const+0x134>
    _Atomic_word __result = *__mem;
   2132c:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   21330:	fff5079b          	addiw	a5,a0,-1
   21334:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21338:	00100793          	addi	a5,zero,1
   2133c:	2ef51ee3          	bne	a0,a5,21e38 <dwarf::value::as_reference() const+0xbe8>
	    _M_destroy();
   21340:	0004b783          	ld	a5,0(s1)
   21344:	0187b783          	ld	a5,24(a5)
   21348:	00048513          	addi	a0,s1,0
   2134c:	000780e7          	jalr	ra,0(a5)
   21350:	2e90006f          	jal	zero,21e38 <dwarf::value::as_reference() const+0xbe8>
      __atomic_add(__mem, __val);
   21354:	00100593          	addi	a1,zero,1
   21358:	03048513          	addi	a0,s1,48
   2135c:	fa5f40ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   21360:	f51ff06f          	jal	zero,212b0 <dwarf::value::as_reference() const+0x60>
   21364:	00100593          	addi	a1,zero,1
   21368:	03048513          	addi	a0,s1,48
   2136c:	f95f40ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   21370:	f69ff06f          	jal	zero,212d8 <dwarf::value::as_reference() const+0x88>
      return __exchange_and_add(__mem, __val);
   21374:	fff00593          	addi	a1,zero,-1
   21378:	03048513          	addi	a0,s1,48
   2137c:	fb5f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21380:	f81ff06f          	jal	zero,21300 <dwarf::value::as_reference() const+0xb0>
   21384:	fff00593          	addi	a1,zero,-1
   21388:	03448513          	addi	a0,s1,52
   2138c:	fa5f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21390:	fa9ff06f          	jal	zero,21338 <dwarf::value::as_reference() const+0xe8>
    while (pos < sec->end) {
   21394:	13813783          	ld	a5,312(sp)
      { return _M_ptr; }
   21398:	12813583          	ld	a1,296(sp)
   2139c:	0105b703          	ld	a4,16(a1)
    std::uint64_t result = 0;
   213a0:	00000493          	addi	s1,zero,0
    int shift = 0;
   213a4:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   213a8:	02e7fa63          	bgeu	a5,a4,213dc <dwarf::value::as_reference() const+0x18c>
      uint8_t byte = *(uint8_t *)(pos++);
   213ac:	00178793          	addi	a5,a5,1
   213b0:	12f13c23          	sd	a5,312(sp)
   213b4:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   213b8:	07f77693          	andi	a3,a4,127
   213bc:	00c696b3          	sll	a3,a3,a2
   213c0:	00d4e4b3          	or	s1,s1,a3
      if ((byte & 0x80) == 0)
   213c4:	0187171b          	slliw	a4,a4,0x18
   213c8:	4187571b          	sraiw	a4,a4,0x18
   213cc:	240752e3          	bge	a4,zero,21e10 <dwarf::value::as_reference() const+0xbc0>
      shift += 7;
   213d0:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   213d4:	0105b703          	ld	a4,16(a1)
   213d8:	fce7eae3          	bltu	a5,a4,213ac <dwarf::value::as_reference() const+0x15c>
    underflow();
   213dc:	12810513          	addi	a0,sp,296
   213e0:	f1cfb0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
   213e4:	6280006f          	jal	zero,21a0c <dwarf::value::as_reference() const+0x7bc>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   213e8:	12813783          	ld	a5,296(sp)
   213ec:	0107b703          	ld	a4,16(a5)
   213f0:	13813783          	ld	a5,312(sp)
   213f4:	00e7e663          	bltu	a5,a4,21400 <dwarf::value::as_reference() const+0x1b0>
      underflow();
   213f8:	12810513          	addi	a0,sp,296
   213fc:	f00fb0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   21400:	13813783          	ld	a5,312(sp)
    if (sec->ord == byte_order::lsb) {
   21404:	12813703          	ld	a4,296(sp)
   21408:	01c72703          	lw	a4,28(a4)
   2140c:	1e070ce3          	beq	a4,zero,21e04 <dwarf::value::as_reference() const+0xbb4>
        val = (val << 8) | (uint64_t)p[i];
   21410:	0007c483          	lbu	s1,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   21414:	1f50006f          	jal	zero,21e08 <dwarf::value::as_reference() const+0xbb8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   21418:	12813783          	ld	a5,296(sp)
   2141c:	0107b703          	ld	a4,16(a5)
   21420:	13813783          	ld	a5,312(sp)
   21424:	40f70633          	sub	a2,a4,a5
   21428:	00100693          	addi	a3,zero,1
   2142c:	00c6f463          	bgeu	a3,a2,21434 <dwarf::value::as_reference() const+0x1e4>
   21430:	00e7e663          	bltu	a5,a4,2143c <dwarf::value::as_reference() const+0x1ec>
      underflow();
   21434:	12810513          	addi	a0,sp,296
   21438:	ec4fb0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   2143c:	13813783          	ld	a5,312(sp)
    if (sec->ord == byte_order::lsb) {
   21440:	12813703          	ld	a4,296(sp)
   21444:	01c72703          	lw	a4,28(a4)
   21448:	02071063          	bne	a4,zero,21468 <dwarf::value::as_reference() const+0x218>
        val |= ((uint64_t)p[i]) << (i * 8);
   2144c:	0017c483          	lbu	s1,1(a5)
   21450:	00849493          	slli	s1,s1,0x8
   21454:	0007c703          	lbu	a4,0(a5)
   21458:	00e4e4b3          	or	s1,s1,a4
    pos += sizeof(T);
   2145c:	00278793          	addi	a5,a5,2
   21460:	12f13c23          	sd	a5,312(sp)
    break;
   21464:	1ad0006f          	jal	zero,21e10 <dwarf::value::as_reference() const+0xbc0>
        val = (val << 8) | (uint64_t)p[i];
   21468:	0007c483          	lbu	s1,0(a5)
   2146c:	00849493          	slli	s1,s1,0x8
   21470:	0017c703          	lbu	a4,1(a5)
   21474:	00e4e4b3          	or	s1,s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   21478:	fe5ff06f          	jal	zero,2145c <dwarf::value::as_reference() const+0x20c>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2147c:	12813783          	ld	a5,296(sp)
   21480:	0107b703          	ld	a4,16(a5)
   21484:	13813783          	ld	a5,312(sp)
   21488:	40f70633          	sub	a2,a4,a5
   2148c:	00300693          	addi	a3,zero,3
   21490:	00c6f463          	bgeu	a3,a2,21498 <dwarf::value::as_reference() const+0x248>
   21494:	00e7e663          	bltu	a5,a4,214a0 <dwarf::value::as_reference() const+0x250>
      underflow();
   21498:	12810513          	addi	a0,sp,296
   2149c:	e60fb0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   214a0:	13813603          	ld	a2,312(sp)
    if (sec->ord == byte_order::lsb) {
   214a4:	12813783          	ld	a5,296(sp)
   214a8:	01c7a783          	lw	a5,28(a5)
   214ac:	02079e63          	bne	a5,zero,214e8 <dwarf::value::as_reference() const+0x298>
   214b0:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   214b4:	00000493          	addi	s1,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   214b8:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   214bc:	0006c703          	lbu	a4,0(a3)
   214c0:	00f71733          	sll	a4,a4,a5
   214c4:	00e4e4b3          	or	s1,s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   214c8:	00168693          	addi	a3,a3,1
   214cc:	0087879b          	addiw	a5,a5,8
   214d0:	feb796e3          	bne	a5,a1,214bc <dwarf::value::as_reference() const+0x26c>
    pos += sizeof(T);
   214d4:	00460613          	addi	a2,a2,4
   214d8:	12c13c23          	sd	a2,312(sp)
   214dc:	02049493          	slli	s1,s1,0x20
   214e0:	0204d493          	srli	s1,s1,0x20
    break;
   214e4:	12d0006f          	jal	zero,21e10 <dwarf::value::as_reference() const+0xbc0>
   214e8:	00060793          	addi	a5,a2,0
   214ec:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   214f0:	00000493          	addi	s1,zero,0
        val = (val << 8) | (uint64_t)p[i];
   214f4:	00849493          	slli	s1,s1,0x8
   214f8:	0007c703          	lbu	a4,0(a5)
   214fc:	009764b3          	or	s1,a4,s1
      for (unsigned i = 0; i < sizeof(T); i++)
   21500:	00178793          	addi	a5,a5,1
   21504:	fef698e3          	bne	a3,a5,214f4 <dwarf::value::as_reference() const+0x2a4>
   21508:	fcdff06f          	jal	zero,214d4 <dwarf::value::as_reference() const+0x284>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2150c:	12813783          	ld	a5,296(sp)
   21510:	0107b703          	ld	a4,16(a5)
   21514:	13813783          	ld	a5,312(sp)
   21518:	40f70633          	sub	a2,a4,a5
   2151c:	00700693          	addi	a3,zero,7
   21520:	00c6f463          	bgeu	a3,a2,21528 <dwarf::value::as_reference() const+0x2d8>
   21524:	00e7e663          	bltu	a5,a4,21530 <dwarf::value::as_reference() const+0x2e0>
      underflow();
   21528:	12810513          	addi	a0,sp,296
   2152c:	dd0fb0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   21530:	13813603          	ld	a2,312(sp)
    if (sec->ord == byte_order::lsb) {
   21534:	12813783          	ld	a5,296(sp)
   21538:	01c7a783          	lw	a5,28(a5)
   2153c:	02079a63          	bne	a5,zero,21570 <dwarf::value::as_reference() const+0x320>
   21540:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   21544:	00000493          	addi	s1,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   21548:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   2154c:	0006c703          	lbu	a4,0(a3)
   21550:	00f71733          	sll	a4,a4,a5
   21554:	00e4e4b3          	or	s1,s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   21558:	00168693          	addi	a3,a3,1
   2155c:	0087879b          	addiw	a5,a5,8
   21560:	feb796e3          	bne	a5,a1,2154c <dwarf::value::as_reference() const+0x2fc>
    pos += sizeof(T);
   21564:	00860613          	addi	a2,a2,8
   21568:	12c13c23          	sd	a2,312(sp)
   2156c:	0a50006f          	jal	zero,21e10 <dwarf::value::as_reference() const+0xbc0>
   21570:	00060793          	addi	a5,a2,0
   21574:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   21578:	00000493          	addi	s1,zero,0
        val = (val << 8) | (uint64_t)p[i];
   2157c:	00849493          	slli	s1,s1,0x8
   21580:	0007c703          	lbu	a4,0(a5)
   21584:	009764b3          	or	s1,a4,s1
      for (unsigned i = 0; i < sizeof(T); i++)
   21588:	00178793          	addi	a5,a5,1
   2158c:	fef698e3          	bne	a3,a5,2157c <dwarf::value::as_reference() const+0x32c>
   21590:	fd5ff06f          	jal	zero,21564 <dwarf::value::as_reference() const+0x314>
    off = cur.offset();
   21594:	12810513          	addi	a0,sp,296
   21598:	cf1fb0ef          	jal	ra,1d288 <dwarf::cursor::offset()>
   2159c:	00050993          	addi	s3,a0,0
    for (auto &file_cu : cu->get_dwarf().compilation_units()) {
   215a0:	00093503          	ld	a0,0(s2)
   215a4:	f85f50ef          	jal	ra,17528 <dwarf::unit::get_dwarf() const>
   215a8:	e25f50ef          	jal	ra,173cc <dwarf::dwarf::compilation_units() const>
      : _M_current(__i) { }
   215ac:	00053483          	ld	s1,0(a0)
   215b0:	00853a83          	ld	s5,8(a0)
   215b4:	049a8063          	beq	s5,s1,215f4 <dwarf::value::as_reference() const+0x3a4>
    const compilation_unit *base_cu = nullptr;
   215b8:	00000913          	addi	s2,zero,0
   215bc:	0100006f          	jal	zero,215cc <dwarf::value::as_reference() const+0x37c>
      if (file_cu.get_section_offset() > off)
   215c0:	02a9e263          	bltu	s3,a0,215e4 <dwarf::value::as_reference() const+0x394>
    for (auto &file_cu : cu->get_dwarf().compilation_units()) {
   215c4:	01848493          	addi	s1,s1,24
   215c8:	009a8c63          	beq	s5,s1,215e0 <dwarf::value::as_reference() const+0x390>
   215cc:	00090a13          	addi	s4,s2,0
   215d0:	00048913          	addi	s2,s1,0
      if (file_cu.get_section_offset() > off)
   215d4:	00048513          	addi	a0,s1,0
   215d8:	f59f50ef          	jal	ra,17530 <dwarf::unit::get_section_offset() const>
   215dc:	fe5ff06f          	jal	zero,215c0 <dwarf::value::as_reference() const+0x370>
   215e0:	00090a13          	addi	s4,s2,0
    die d(base_cu);
   215e4:	000a0593          	addi	a1,s4,0
   215e8:	04810513          	addi	a0,sp,72
   215ec:	e29fb0ef          	jal	ra,1d414 <dwarf::die::die(dwarf::unit const*)>
   215f0:	00c0006f          	jal	zero,215fc <dwarf::value::as_reference() const+0x3ac>
    const compilation_unit *base_cu = nullptr;
   215f4:	00000a13          	addi	s4,zero,0
   215f8:	fedff06f          	jal	zero,215e4 <dwarf::value::as_reference() const+0x394>
    d.read(off - base_cu->get_section_offset());
   215fc:	000a0513          	addi	a0,s4,0
   21600:	f31f50ef          	jal	ra,17530 <dwarf::unit::get_section_offset() const>
   21604:	40a985b3          	sub	a1,s3,a0
   21608:	04810513          	addi	a0,sp,72
   2160c:	e61fb0ef          	jal	ra,1d46c <dwarf::die::read(unsigned long)>
  die(die &&o) = default;
   21610:	04812783          	lw	a5,72(sp)
   21614:	00f42023          	sw	a5,0(s0)
   21618:	05013783          	ld	a5,80(sp)
   2161c:	00f43423          	sd	a5,8(s0)
   21620:	05813783          	ld	a5,88(sp)
   21624:	00f43823          	sd	a5,16(s0)
   21628:	06013783          	ld	a5,96(sp)
   2162c:	00f43c23          	sd	a5,24(s0)
   21630:	02040a13          	addi	s4,s0,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   21634:	05443823          	sd	s4,80(s0)
   21638:	05443c23          	sd	s4,88(s0)
   2163c:	05040793          	addi	a5,s0,80
   21640:	06f43023          	sd	a5,96(s0)
    if ((char *)o.base == o.buf) {
   21644:	09813703          	ld	a4,152(sp)
   21648:	06810693          	addi	a3,sp,104
   2164c:	06d70463          	beq	a4,a3,216b4 <dwarf::value::as_reference() const+0x464>
      base = o.base;
   21650:	04e43823          	sd	a4,80(s0)
      end = o.end;
   21654:	0a013783          	ld	a5,160(sp)
   21658:	04f43c23          	sd	a5,88(s0)
      cap = o.cap;
   2165c:	0a813783          	ld	a5,168(sp)
   21660:	06f43023          	sd	a5,96(s0)
      o.base = (T *)o.buf;
   21664:	06810793          	addi	a5,sp,104
   21668:	08f13c23          	sd	a5,152(sp)
      o.end = o.base;
   2166c:	0af13023          	sd	a5,160(sp)
      o.cap = (T *)&o.buf[sizeof(T[Min])];
   21670:	09810793          	addi	a5,sp,152
   21674:	0af13423          	sd	a5,168(sp)
   21678:	0b013783          	ld	a5,176(sp)
   2167c:	06f43423          	sd	a5,104(s0)
    for (T *p = base; p < end; ++p)
   21680:	09813503          	ld	a0,152(sp)
   21684:	0a013783          	ld	a5,160(sp)
   21688:	00f57a63          	bgeu	a0,a5,2169c <dwarf::value::as_reference() const+0x44c>
   2168c:	00050793          	addi	a5,a0,0
   21690:	00878793          	addi	a5,a5,8
   21694:	0a013703          	ld	a4,160(sp)
   21698:	fee7ece3          	bltu	a5,a4,21690 <dwarf::value::as_reference() const+0x440>
    end = base;
   2169c:	0aa13023          	sd	a0,160(sp)
    if ((char *)base != buf)
   216a0:	06810793          	addi	a5,sp,104
   216a4:	40f50e63          	beq	a0,a5,21ac0 <dwarf::value::as_reference() const+0x870>
      delete[] (char *)base;
   216a8:	40050c63          	beq	a0,zero,21ac0 <dwarf::value::as_reference() const+0x870>
   216ac:	eb5f40ef          	jal	ra,16560 <operator delete[](void*)@plt>
   216b0:	4100006f          	jal	zero,21ac0 <dwarf::value::as_reference() const+0x870>
  size_type size() const { return end - base; }
   216b4:	0a013983          	ld	s3,160(sp)
   216b8:	40d989b3          	sub	s3,s3,a3
   216bc:	4039d913          	srai	s2,s3,0x3
    if (n <= (size_type)(cap - base))
   216c0:	414787b3          	sub	a5,a5,s4
   216c4:	0737fa63          	bgeu	a5,s3,21738 <dwarf::value::as_reference() const+0x4e8>
   216c8:	4037d793          	srai	a5,a5,0x3
   216cc:	00079463          	bne	a5,zero,216d4 <dwarf::value::as_reference() const+0x484>
   216d0:	00100793          	addi	a5,zero,1
    while (target < n)
   216d4:	0127f663          	bgeu	a5,s2,216e0 <dwarf::value::as_reference() const+0x490>
      target <<= 1;
   216d8:	00179793          	slli	a5,a5,0x1
    while (target < n)
   216dc:	ff27eee3          	bltu	a5,s2,216d8 <dwarf::value::as_reference() const+0x488>
    char *newbuf = new char[sizeof(T[target])];
   216e0:	00379493          	slli	s1,a5,0x3
   216e4:	00048513          	addi	a0,s1,0
   216e8:	bf9f40ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   216ec:	00050b13          	addi	s6,a0,0
    T *src = base, *dest = (T *)newbuf;
   216f0:	05043503          	ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   216f4:	05843703          	ld	a4,88(s0)
   216f8:	08e57e63          	bgeu	a0,a4,21794 <dwarf::value::as_reference() const+0x544>
    T *src = base, *dest = (T *)newbuf;
   216fc:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   21700:	00878793          	addi	a5,a5,8
   21704:	fee7eee3          	bltu	a5,a4,21700 <dwarf::value::as_reference() const+0x4b0>
   21708:	fff70a93          	addi	s5,a4,-1
   2170c:	40aa8ab3          	sub	s5,s5,a0
   21710:	ff8afa93          	andi	s5,s5,-8
   21714:	008a8a93          	addi	s5,s5,8
   21718:	015b0ab3          	add	s5,s6,s5
    if ((char *)base != buf)
   2171c:	00aa0663          	beq	s4,a0,21728 <dwarf::value::as_reference() const+0x4d8>
      delete[] (char *)base;
   21720:	00050463          	beq	a0,zero,21728 <dwarf::value::as_reference() const+0x4d8>
   21724:	e3df40ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   21728:	05643823          	sd	s6,80(s0)
    end = dest;
   2172c:	05543c23          	sd	s5,88(s0)
    cap = base + target;
   21730:	009b0b33          	add	s6,s6,s1
   21734:	07643023          	sd	s6,96(s0)
    for (size_type i = 0; i < osize; i++)
   21738:	02090663          	beq	s2,zero,21764 <dwarf::value::as_reference() const+0x514>
   2173c:	00000793          	addi	a5,zero,0
   21740:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   21744:	09813703          	ld	a4,152(sp)
   21748:	00d70733          	add	a4,a4,a3
   2174c:	00073603          	ld	a2,0(a4)
   21750:	05043703          	ld	a4,80(s0)
   21754:	00d70733          	add	a4,a4,a3
   21758:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   2175c:	00178793          	addi	a5,a5,1
   21760:	fef910e3          	bne	s2,a5,21740 <dwarf::value::as_reference() const+0x4f0>
    end = base + osize;
   21764:	05043783          	ld	a5,80(s0)
   21768:	013787b3          	add	a5,a5,s3
   2176c:	04f43c23          	sd	a5,88(s0)
    for (T *p = base; p < end; ++p)
   21770:	09813683          	ld	a3,152(sp)
   21774:	0a013783          	ld	a5,160(sp)
   21778:	00f6fa63          	bgeu	a3,a5,2178c <dwarf::value::as_reference() const+0x53c>
   2177c:	00068793          	addi	a5,a3,0
   21780:	00878793          	addi	a5,a5,8
   21784:	0a013703          	ld	a4,160(sp)
   21788:	fee7ece3          	bltu	a5,a4,21780 <dwarf::value::as_reference() const+0x530>
    end = base;
   2178c:	0ad13023          	sd	a3,160(sp)
  }
   21790:	ee9ff06f          	jal	zero,21678 <dwarf::value::as_reference() const+0x428>
    T *src = base, *dest = (T *)newbuf;
   21794:	000b0a93          	addi	s5,s6,0
   21798:	f85ff06f          	jal	zero,2171c <dwarf::value::as_reference() const+0x4cc>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2179c:	12813783          	ld	a5,296(sp)
   217a0:	0107b703          	ld	a4,16(a5)
   217a4:	13813783          	ld	a5,312(sp)
   217a8:	40f70633          	sub	a2,a4,a5
   217ac:	00700693          	addi	a3,zero,7
   217b0:	00c6f463          	bgeu	a3,a2,217b8 <dwarf::value::as_reference() const+0x568>
   217b4:	00e7e663          	bltu	a5,a4,217c0 <dwarf::value::as_reference() const+0x570>
      underflow();
   217b8:	12810513          	addi	a0,sp,296
   217bc:	b40fb0ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   217c0:	13813603          	ld	a2,312(sp)
    if (sec->ord == byte_order::lsb) {
   217c4:	12813783          	ld	a5,296(sp)
   217c8:	01c7a783          	lw	a5,28(a5)
   217cc:	02079e63          	bne	a5,zero,21808 <dwarf::value::as_reference() const+0x5b8>
   217d0:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   217d4:	00000a93          	addi	s5,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   217d8:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   217dc:	0006c703          	lbu	a4,0(a3)
   217e0:	00f71733          	sll	a4,a4,a5
   217e4:	00eaeab3          	or	s5,s5,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   217e8:	00168693          	addi	a3,a3,1
   217ec:	0087879b          	addiw	a5,a5,8
   217f0:	feb796e3          	bne	a5,a1,217dc <dwarf::value::as_reference() const+0x58c>
    pos += sizeof(T);
   217f4:	00860613          	addi	a2,a2,8
   217f8:	12c13c23          	sd	a2,312(sp)
      return cu->get_dwarf().get_type_unit(sig).type();
   217fc:	00093503          	ld	a0,0(s2)
   21800:	d29f50ef          	jal	ra,17528 <dwarf::unit::get_dwarf() const>
   21804:	0280006f          	jal	zero,2182c <dwarf::value::as_reference() const+0x5dc>
   21808:	00060793          	addi	a5,a2,0
   2180c:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   21810:	00000a93          	addi	s5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   21814:	008a9a93          	slli	s5,s5,0x8
   21818:	0007c703          	lbu	a4,0(a5)
   2181c:	01576ab3          	or	s5,a4,s5
      for (unsigned i = 0; i < sizeof(T); i++)
   21820:	00178793          	addi	a5,a5,1
   21824:	fef698e3          	bne	a3,a5,21814 <dwarf::value::as_reference() const+0x5c4>
   21828:	fcdff06f          	jal	zero,217f4 <dwarf::value::as_reference() const+0x5a4>
   2182c:	000a8593          	addi	a1,s5,0
   21830:	f11f70ef          	jal	ra,19740 <dwarf::dwarf::get_type_unit(unsigned long) const>
   21834:	940f90ef          	jal	ra,1a974 <dwarf::type_unit::type() const>
   21838:	00050493          	addi	s1,a0,0
  die(const die &o) = default;
   2183c:	00052783          	lw	a5,0(a0)
   21840:	00f42023          	sw	a5,0(s0)
   21844:	00853783          	ld	a5,8(a0)
   21848:	00f43423          	sd	a5,8(s0)
   2184c:	01053783          	ld	a5,16(a0)
   21850:	00f43823          	sd	a5,16(s0)
   21854:	01853783          	ld	a5,24(a0)
   21858:	00f43c23          	sd	a5,24(s0)
   2185c:	02040b13          	addi	s6,s0,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   21860:	05643823          	sd	s6,80(s0)
   21864:	05643c23          	sd	s6,88(s0)
   21868:	05040793          	addi	a5,s0,80
   2186c:	06f43023          	sd	a5,96(s0)
  size_type size() const { return end - base; }
   21870:	05853983          	ld	s3,88(a0)
   21874:	05053703          	ld	a4,80(a0)
   21878:	40e989b3          	sub	s3,s3,a4
   2187c:	4039d913          	srai	s2,s3,0x3
    if (n <= (size_type)(cap - base))
   21880:	416787b3          	sub	a5,a5,s6
   21884:	0737fa63          	bgeu	a5,s3,218f8 <dwarf::value::as_reference() const+0x6a8>
   21888:	4037d793          	srai	a5,a5,0x3
   2188c:	00079463          	bne	a5,zero,21894 <dwarf::value::as_reference() const+0x644>
   21890:	00100793          	addi	a5,zero,1
    while (target < n)
   21894:	0127f663          	bgeu	a5,s2,218a0 <dwarf::value::as_reference() const+0x650>
      target <<= 1;
   21898:	00179793          	slli	a5,a5,0x1
    while (target < n)
   2189c:	ff27eee3          	bltu	a5,s2,21898 <dwarf::value::as_reference() const+0x648>
    char *newbuf = new char[sizeof(T[target])];
   218a0:	00379a13          	slli	s4,a5,0x3
   218a4:	000a0513          	addi	a0,s4,0
   218a8:	a39f40ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   218ac:	00050b93          	addi	s7,a0,0
    T *src = base, *dest = (T *)newbuf;
   218b0:	05043503          	ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   218b4:	05843703          	ld	a4,88(s0)
   218b8:	08e57263          	bgeu	a0,a4,2193c <dwarf::value::as_reference() const+0x6ec>
    T *src = base, *dest = (T *)newbuf;
   218bc:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   218c0:	00878793          	addi	a5,a5,8
   218c4:	fee7eee3          	bltu	a5,a4,218c0 <dwarf::value::as_reference() const+0x670>
   218c8:	fff70a93          	addi	s5,a4,-1
   218cc:	40aa8ab3          	sub	s5,s5,a0
   218d0:	ff8afa93          	andi	s5,s5,-8
   218d4:	008a8a93          	addi	s5,s5,8
   218d8:	015b8ab3          	add	s5,s7,s5
    if ((char *)base != buf)
   218dc:	00ab0663          	beq	s6,a0,218e8 <dwarf::value::as_reference() const+0x698>
      delete[] (char *)base;
   218e0:	00050463          	beq	a0,zero,218e8 <dwarf::value::as_reference() const+0x698>
   218e4:	c7df40ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   218e8:	05743823          	sd	s7,80(s0)
    end = dest;
   218ec:	05543c23          	sd	s5,88(s0)
    cap = base + target;
   218f0:	014b8bb3          	add	s7,s7,s4
   218f4:	07743023          	sd	s7,96(s0)
    for (size_type i = 0; i < osize; i++)
   218f8:	02090663          	beq	s2,zero,21924 <dwarf::value::as_reference() const+0x6d4>
   218fc:	00000793          	addi	a5,zero,0
   21900:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   21904:	0504b703          	ld	a4,80(s1)
   21908:	00d70733          	add	a4,a4,a3
   2190c:	00073603          	ld	a2,0(a4)
   21910:	05043703          	ld	a4,80(s0)
   21914:	00d70733          	add	a4,a4,a3
   21918:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   2191c:	00178793          	addi	a5,a5,1
   21920:	fef910e3          	bne	s2,a5,21900 <dwarf::value::as_reference() const+0x6b0>
    end = base + osize;
   21924:	05043783          	ld	a5,80(s0)
   21928:	013787b3          	add	a5,a5,s3
   2192c:	04f43c23          	sd	a5,88(s0)
   21930:	0684b783          	ld	a5,104(s1)
   21934:	06f43423          	sd	a5,104(s0)
   21938:	1880006f          	jal	zero,21ac0 <dwarf::value::as_reference() const+0x870>
    T *src = base, *dest = (T *)newbuf;
   2193c:	000b8a93          	addi	s5,s7,0
   21940:	f9dff06f          	jal	zero,218dc <dwarf::value::as_reference() const+0x68c>
                              " as reference");
   21944:	01000513          	addi	a0,zero,16
   21948:	a89f40ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2194c:	00050493          	addi	s1,a0,0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   21950:	00c92583          	lw	a1,12(s2)
   21954:	00810513          	addi	a0,sp,8
   21958:	4d00d0ef          	jal	ra,2ee28 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   2195c:	00015617          	auipc	a2,0x15
   21960:	51c60613          	addi	a2,a2,1308 # 36e78 <std::piecewise_construct+0x1c8>
   21964:	00000593          	addi	a1,zero,0
   21968:	00810513          	addi	a0,sp,8
   2196c:	9d5f40ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   21970:	00050593          	addi	a1,a0,0
   21974:	02810413          	addi	s0,sp,40
   21978:	00040513          	addi	a0,s0,0
   2197c:	a95f40ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   21980:	00015597          	auipc	a1,0x15
   21984:	58858593          	addi	a1,a1,1416 # 36f08 <std::piecewise_construct+0x258>
   21988:	00040513          	addi	a0,s0,0
   2198c:	db5f40ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   21990:	00050593          	addi	a1,a0,0
   21994:	04810413          	addi	s0,sp,72
   21998:	00040513          	addi	a0,s0,0
   2199c:	a75f40ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::logic_error(what_arg) {}
   219a0:	00040593          	addi	a1,s0,0
   219a4:	00048513          	addi	a0,s1,0
   219a8:	de9f40ef          	jal	ra,16790 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   219ac:	00021797          	auipc	a5,0x21
   219b0:	a947b783          	ld	a5,-1388(a5) # 42440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   219b4:	01078793          	addi	a5,a5,16
   219b8:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   219bc:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   219c0:	05810793          	addi	a5,sp,88
   219c4:	00f50463          	beq	a0,a5,219cc <dwarf::value::as_reference() const+0x77c>
   219c8:	ae9f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   219cc:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   219d0:	03810793          	addi	a5,sp,56
   219d4:	00f50463          	beq	a0,a5,219dc <dwarf::value::as_reference() const+0x78c>
   219d8:	ad9f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   219dc:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   219e0:	01810793          	addi	a5,sp,24
   219e4:	00f50463          	beq	a0,a5,219ec <dwarf::value::as_reference() const+0x79c>
   219e8:	ac9f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
                              " as reference");
   219ec:	00021617          	auipc	a2,0x21
   219f0:	be463603          	ld	a2,-1052(a2) # 425d0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f690>
   219f4:	00021597          	auipc	a1,0x21
   219f8:	b9c5b583          	ld	a1,-1124(a1) # 42590 <typeinfo for dwarf::value_type_mismatch@@Base+0xb70>
   219fc:	00048513          	addi	a0,s1,0
   21a00:	c61f40ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   21a04:	00050413          	addi	s0,a0,0
   21a08:	27c0006f          	jal	zero,21c84 <dwarf::value::as_reference() const+0xa34>
    return 0;
   21a0c:	00000493          	addi	s1,zero,0
   21a10:	4000006f          	jal	zero,21e10 <dwarf::value::as_reference() const+0xbc0>
  d.read(off);
   21a14:	00048593          	addi	a1,s1,0
   21a18:	0b810513          	addi	a0,sp,184
   21a1c:	a51fb0ef          	jal	ra,1d46c <dwarf::die::read(unsigned long)>
  die(die &&o) = default;
   21a20:	0b812783          	lw	a5,184(sp)
   21a24:	00f42023          	sw	a5,0(s0)
   21a28:	0c013783          	ld	a5,192(sp)
   21a2c:	00f43423          	sd	a5,8(s0)
   21a30:	0c813783          	ld	a5,200(sp)
   21a34:	00f43823          	sd	a5,16(s0)
   21a38:	0d013783          	ld	a5,208(sp)
   21a3c:	00f43c23          	sd	a5,24(s0)
   21a40:	02040a13          	addi	s4,s0,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   21a44:	05443823          	sd	s4,80(s0)
   21a48:	05443c23          	sd	s4,88(s0)
   21a4c:	05040793          	addi	a5,s0,80
   21a50:	06f43023          	sd	a5,96(s0)
    if ((char *)o.base == o.buf) {
   21a54:	10813703          	ld	a4,264(sp)
   21a58:	0d810693          	addi	a3,sp,216
   21a5c:	0cd70063          	beq	a4,a3,21b1c <dwarf::value::as_reference() const+0x8cc>
      base = o.base;
   21a60:	04e43823          	sd	a4,80(s0)
      end = o.end;
   21a64:	11013783          	ld	a5,272(sp)
   21a68:	04f43c23          	sd	a5,88(s0)
      cap = o.cap;
   21a6c:	11813783          	ld	a5,280(sp)
   21a70:	06f43023          	sd	a5,96(s0)
      o.base = (T *)o.buf;
   21a74:	0d810793          	addi	a5,sp,216
   21a78:	10f13423          	sd	a5,264(sp)
      o.end = o.base;
   21a7c:	10f13823          	sd	a5,272(sp)
      o.cap = (T *)&o.buf[sizeof(T[Min])];
   21a80:	10810793          	addi	a5,sp,264
   21a84:	10f13c23          	sd	a5,280(sp)
   21a88:	12013783          	ld	a5,288(sp)
   21a8c:	06f43423          	sd	a5,104(s0)
    for (T *p = base; p < end; ++p)
   21a90:	10813503          	ld	a0,264(sp)
   21a94:	11013783          	ld	a5,272(sp)
   21a98:	00f57a63          	bgeu	a0,a5,21aac <dwarf::value::as_reference() const+0x85c>
   21a9c:	00050793          	addi	a5,a0,0
   21aa0:	00878793          	addi	a5,a5,8
   21aa4:	11013703          	ld	a4,272(sp)
   21aa8:	fee7ece3          	bltu	a5,a4,21aa0 <dwarf::value::as_reference() const+0x850>
    end = base;
   21aac:	10a13823          	sd	a0,272(sp)
    if ((char *)base != buf)
   21ab0:	0d810793          	addi	a5,sp,216
   21ab4:	00f50663          	beq	a0,a5,21ac0 <dwarf::value::as_reference() const+0x870>
      delete[] (char *)base;
   21ab8:	00050463          	beq	a0,zero,21ac0 <dwarf::value::as_reference() const+0x870>
   21abc:	aa5f40ef          	jal	ra,16560 <operator delete[](void*)@plt>
   21ac0:	13013483          	ld	s1,304(sp)
   21ac4:	02048463          	beq	s1,zero,21aec <dwarf::value::as_reference() const+0x89c>
    if (__is_single_threaded())
   21ac8:	00021797          	auipc	a5,0x21
   21acc:	9b07b783          	ld	a5,-1616(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21ad0:	0007c783          	lbu	a5,0(a5)
   21ad4:	12078863          	beq	a5,zero,21c04 <dwarf::value::as_reference() const+0x9b4>
    _Atomic_word __result = *__mem;
   21ad8:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   21adc:	fff5079b          	addiw	a5,a0,-1
   21ae0:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21ae4:	00100793          	addi	a5,zero,1
   21ae8:	12f50663          	beq	a0,a5,21c14 <dwarf::value::as_reference() const+0x9c4>
}
   21aec:	00040513          	addi	a0,s0,0
   21af0:	18813083          	ld	ra,392(sp)
   21af4:	18013403          	ld	s0,384(sp)
   21af8:	17813483          	ld	s1,376(sp)
   21afc:	17013903          	ld	s2,368(sp)
   21b00:	16813983          	ld	s3,360(sp)
   21b04:	16013a03          	ld	s4,352(sp)
   21b08:	15813a83          	ld	s5,344(sp)
   21b0c:	15013b03          	ld	s6,336(sp)
   21b10:	14813b83          	ld	s7,328(sp)
   21b14:	19010113          	addi	sp,sp,400
   21b18:	00008067          	jalr	zero,0(ra)
  size_type size() const { return end - base; }
   21b1c:	11013983          	ld	s3,272(sp)
   21b20:	40d989b3          	sub	s3,s3,a3
   21b24:	4039d913          	srai	s2,s3,0x3
    if (n <= (size_type)(cap - base))
   21b28:	414787b3          	sub	a5,a5,s4
   21b2c:	0737fa63          	bgeu	a5,s3,21ba0 <dwarf::value::as_reference() const+0x950>
   21b30:	4037d793          	srai	a5,a5,0x3
   21b34:	00079463          	bne	a5,zero,21b3c <dwarf::value::as_reference() const+0x8ec>
   21b38:	00100793          	addi	a5,zero,1
    while (target < n)
   21b3c:	0127f663          	bgeu	a5,s2,21b48 <dwarf::value::as_reference() const+0x8f8>
      target <<= 1;
   21b40:	00179793          	slli	a5,a5,0x1
    while (target < n)
   21b44:	ff27eee3          	bltu	a5,s2,21b40 <dwarf::value::as_reference() const+0x8f0>
    char *newbuf = new char[sizeof(T[target])];
   21b48:	00379493          	slli	s1,a5,0x3
   21b4c:	00048513          	addi	a0,s1,0
   21b50:	f90f40ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   21b54:	00050b13          	addi	s6,a0,0
    T *src = base, *dest = (T *)newbuf;
   21b58:	05043503          	ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   21b5c:	05843703          	ld	a4,88(s0)
   21b60:	08e57e63          	bgeu	a0,a4,21bfc <dwarf::value::as_reference() const+0x9ac>
    T *src = base, *dest = (T *)newbuf;
   21b64:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   21b68:	00878793          	addi	a5,a5,8
   21b6c:	fee7eee3          	bltu	a5,a4,21b68 <dwarf::value::as_reference() const+0x918>
   21b70:	fff70a93          	addi	s5,a4,-1
   21b74:	40aa8ab3          	sub	s5,s5,a0
   21b78:	ff8afa93          	andi	s5,s5,-8
   21b7c:	008a8a93          	addi	s5,s5,8
   21b80:	015b0ab3          	add	s5,s6,s5
    if ((char *)base != buf)
   21b84:	00aa0663          	beq	s4,a0,21b90 <dwarf::value::as_reference() const+0x940>
      delete[] (char *)base;
   21b88:	00050463          	beq	a0,zero,21b90 <dwarf::value::as_reference() const+0x940>
   21b8c:	9d5f40ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   21b90:	05643823          	sd	s6,80(s0)
    end = dest;
   21b94:	05543c23          	sd	s5,88(s0)
    cap = base + target;
   21b98:	009b0b33          	add	s6,s6,s1
   21b9c:	07643023          	sd	s6,96(s0)
    for (size_type i = 0; i < osize; i++)
   21ba0:	02090663          	beq	s2,zero,21bcc <dwarf::value::as_reference() const+0x97c>
   21ba4:	00000793          	addi	a5,zero,0
   21ba8:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   21bac:	10813703          	ld	a4,264(sp)
   21bb0:	00d70733          	add	a4,a4,a3
   21bb4:	00073603          	ld	a2,0(a4)
   21bb8:	05043703          	ld	a4,80(s0)
   21bbc:	00d70733          	add	a4,a4,a3
   21bc0:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   21bc4:	00178793          	addi	a5,a5,1
   21bc8:	fef910e3          	bne	s2,a5,21ba8 <dwarf::value::as_reference() const+0x958>
    end = base + osize;
   21bcc:	05043783          	ld	a5,80(s0)
   21bd0:	013787b3          	add	a5,a5,s3
   21bd4:	04f43c23          	sd	a5,88(s0)
    for (T *p = base; p < end; ++p)
   21bd8:	10813683          	ld	a3,264(sp)
   21bdc:	11013783          	ld	a5,272(sp)
   21be0:	00f6fa63          	bgeu	a3,a5,21bf4 <dwarf::value::as_reference() const+0x9a4>
   21be4:	00068793          	addi	a5,a3,0
   21be8:	00878793          	addi	a5,a5,8
   21bec:	11013703          	ld	a4,272(sp)
   21bf0:	fee7ece3          	bltu	a5,a4,21be8 <dwarf::value::as_reference() const+0x998>
    end = base;
   21bf4:	10d13823          	sd	a3,272(sp)
  }
   21bf8:	e91ff06f          	jal	zero,21a88 <dwarf::value::as_reference() const+0x838>
    T *src = base, *dest = (T *)newbuf;
   21bfc:	000b0a93          	addi	s5,s6,0
   21c00:	f85ff06f          	jal	zero,21b84 <dwarf::value::as_reference() const+0x934>
      return __exchange_and_add(__mem, __val);
   21c04:	fff00593          	addi	a1,zero,-1
   21c08:	03048513          	addi	a0,s1,48
   21c0c:	f24f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21c10:	ed5ff06f          	jal	zero,21ae4 <dwarf::value::as_reference() const+0x894>
	_M_dispose();
   21c14:	0004b783          	ld	a5,0(s1)
   21c18:	0107b783          	ld	a5,16(a5)
   21c1c:	00048513          	addi	a0,s1,0
   21c20:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21c24:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21c28:	00021797          	auipc	a5,0x21
   21c2c:	8507b783          	ld	a5,-1968(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21c30:	0007c783          	lbu	a5,0(a5)
   21c34:	02078663          	beq	a5,zero,21c60 <dwarf::value::as_reference() const+0xa10>
    _Atomic_word __result = *__mem;
   21c38:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   21c3c:	fff5079b          	addiw	a5,a0,-1
   21c40:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21c44:	00100793          	addi	a5,zero,1
   21c48:	eaf512e3          	bne	a0,a5,21aec <dwarf::value::as_reference() const+0x89c>
	    _M_destroy();
   21c4c:	0004b783          	ld	a5,0(s1)
   21c50:	0187b783          	ld	a5,24(a5)
   21c54:	00048513          	addi	a0,s1,0
   21c58:	000780e7          	jalr	ra,0(a5)
   21c5c:	e91ff06f          	jal	zero,21aec <dwarf::value::as_reference() const+0x89c>
      return __exchange_and_add(__mem, __val);
   21c60:	fff00593          	addi	a1,zero,-1
   21c64:	03448513          	addi	a0,s1,52
   21c68:	ec8f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21c6c:	fd9ff06f          	jal	zero,21c44 <dwarf::value::as_reference() const+0x9f4>
class die {
   21c70:	00050413          	addi	s0,a0,0
   21c74:	06810513          	addi	a0,sp,104
   21c78:	00020317          	auipc	t1,0x20
   21c7c:	76833303          	ld	t1,1896(t1) # 423e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b110>
   21c80:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   21c84:	13013503          	ld	a0,304(sp)
   21c88:	00050863          	beq	a0,zero,21c98 <dwarf::value::as_reference() const+0xa48>
	  _M_pi->_M_release();
   21c8c:	00020317          	auipc	t1,0x20
   21c90:	73433303          	ld	t1,1844(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   21c94:	000300e7          	jalr	ra,0(t1)
   21c98:	00040513          	addi	a0,s0,0
   21c9c:	9f5f40ef          	jal	ra,16690 <_Unwind_Resume@plt>
    } catch (std::out_of_range &e) {
   21ca0:	00100793          	addi	a5,zero,1
   21ca4:	00050413          	addi	s0,a0,0
   21ca8:	fcf59ee3          	bne	a1,a5,21c84 <dwarf::value::as_reference() const+0xa34>
   21cac:	f04f40ef          	jal	ra,163b0 <__cxa_begin_catch@plt>
      throw format_error("unknown type signature 0x" + to_hex(sig));
   21cb0:	01000513          	addi	a0,zero,16
   21cb4:	f1cf40ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   21cb8:	00050493          	addi	s1,a0,0
   21cbc:	000a8593          	addi	a1,s5,0
   21cc0:	02810513          	addi	a0,sp,40
   21cc4:	00020317          	auipc	t1,0x20
   21cc8:	62c33303          	ld	t1,1580(t1) # 422f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26cc8>
   21ccc:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   21cd0:	00015617          	auipc	a2,0x15
   21cd4:	24860613          	addi	a2,a2,584 # 36f18 <std::piecewise_construct+0x268>
   21cd8:	00000593          	addi	a1,zero,0
   21cdc:	02810513          	addi	a0,sp,40
   21ce0:	e60f40ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   21ce4:	00050593          	addi	a1,a0,0
   21ce8:	04810413          	addi	s0,sp,72
   21cec:	00040513          	addi	a0,s0,0
   21cf0:	f20f40ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   21cf4:	00040593          	addi	a1,s0,0
   21cf8:	00048513          	addi	a0,s1,0
   21cfc:	845f40ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   21d00:	00021797          	auipc	a5,0x21
   21d04:	8507b783          	ld	a5,-1968(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   21d08:	01078793          	addi	a5,a5,16
   21d0c:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   21d10:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   21d14:	05810793          	addi	a5,sp,88
   21d18:	00f50463          	beq	a0,a5,21d20 <dwarf::value::as_reference() const+0xad0>
   21d1c:	f94f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21d20:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   21d24:	03810793          	addi	a5,sp,56
   21d28:	00f50463          	beq	a0,a5,21d30 <dwarf::value::as_reference() const+0xae0>
   21d2c:	f84f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
   21d30:	00020617          	auipc	a2,0x20
   21d34:	64863603          	ld	a2,1608(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   21d38:	00020597          	auipc	a1,0x20
   21d3c:	5705b583          	ld	a1,1392(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   21d40:	00048513          	addi	a0,s1,0
   21d44:	91df40ef          	jal	ra,16660 <__cxa_throw@plt>
    }
   21d48:	00050413          	addi	s0,a0,0
   21d4c:	0300006f          	jal	zero,21d7c <dwarf::value::as_reference() const+0xb2c>
      { return _M_dataplus._M_p; }
   21d50:	00050413          	addi	s0,a0,0
   21d54:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   21d58:	05810793          	addi	a5,sp,88
   21d5c:	00f50463          	beq	a0,a5,21d64 <dwarf::value::as_reference() const+0xb14>
   21d60:	f50f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21d64:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   21d68:	03810793          	addi	a5,sp,56
   21d6c:	00f50463          	beq	a0,a5,21d74 <dwarf::value::as_reference() const+0xb24>
   21d70:	f40f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      throw format_error("unknown type signature 0x" + to_hex(sig));
   21d74:	00048513          	addi	a0,s1,0
   21d78:	ef8f40ef          	jal	ra,16470 <__cxa_free_exception@plt>
    }
   21d7c:	8b5f40ef          	jal	ra,16630 <__cxa_end_catch@plt>
   21d80:	f05ff06f          	jal	zero,21c84 <dwarf::value::as_reference() const+0xa34>
      { return _M_dataplus._M_p; }
   21d84:	00050413          	addi	s0,a0,0
   21d88:	fddff06f          	jal	zero,21d64 <dwarf::value::as_reference() const+0xb14>
      throw format_error("unknown type signature 0x" + to_hex(sig));
   21d8c:	00050413          	addi	s0,a0,0
   21d90:	fe5ff06f          	jal	zero,21d74 <dwarf::value::as_reference() const+0xb24>
   21d94:	00050413          	addi	s0,a0,0
   21d98:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   21d9c:	05810793          	addi	a5,sp,88
   21da0:	00f50463          	beq	a0,a5,21da8 <dwarf::value::as_reference() const+0xb58>
   21da4:	f0cf40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21da8:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   21dac:	03810793          	addi	a5,sp,56
   21db0:	00f50463          	beq	a0,a5,21db8 <dwarf::value::as_reference() const+0xb68>
   21db4:	efcf40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21db8:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   21dbc:	01810793          	addi	a5,sp,24
   21dc0:	00f50463          	beq	a0,a5,21dc8 <dwarf::value::as_reference() const+0xb78>
   21dc4:	eecf40ef          	jal	ra,164b0 <operator delete(void*)@plt>
                              " as reference");
   21dc8:	00048513          	addi	a0,s1,0
   21dcc:	ea4f40ef          	jal	ra,16470 <__cxa_free_exception@plt>
   21dd0:	eb5ff06f          	jal	zero,21c84 <dwarf::value::as_reference() const+0xa34>
      { return _M_dataplus._M_p; }
   21dd4:	00050413          	addi	s0,a0,0
   21dd8:	fd1ff06f          	jal	zero,21da8 <dwarf::value::as_reference() const+0xb58>
   21ddc:	00050413          	addi	s0,a0,0
   21de0:	fd9ff06f          	jal	zero,21db8 <dwarf::value::as_reference() const+0xb68>
   21de4:	00050413          	addi	s0,a0,0
   21de8:	fe1ff06f          	jal	zero,21dc8 <dwarf::value::as_reference() const+0xb78>
class die {
   21dec:	00050413          	addi	s0,a0,0
   21df0:	0d810513          	addi	a0,sp,216
   21df4:	00020317          	auipc	t1,0x20
   21df8:	5ec33303          	ld	t1,1516(t1) # 423e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b110>
   21dfc:	000300e7          	jalr	ra,0(t1)
   21e00:	e85ff06f          	jal	zero,21c84 <dwarf::value::as_reference() const+0xa34>
        val |= ((uint64_t)p[i]) << (i * 8);
   21e04:	0007c483          	lbu	s1,0(a5)
    pos += sizeof(T);
   21e08:	00178793          	addi	a5,a5,1
   21e0c:	12f13c23          	sd	a5,312(sp)
  die d(cu);
   21e10:	00093583          	ld	a1,0(s2)
   21e14:	0b810513          	addi	a0,sp,184
   21e18:	dfcfb0ef          	jal	ra,1d414 <dwarf::die::die(dwarf::unit const*)>
   21e1c:	bf9ff06f          	jal	zero,21a14 <dwarf::value::as_reference() const+0x7c4>
  cursor cur(cu->data(), offset);
   21e20:	01093703          	ld	a4,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   21e24:	13313423          	sd	s3,296(sp)
      : _M_pi(__r._M_pi)
   21e28:	12013823          	sd	zero,304(sp)
      : sec(sec), pos(sec->begin + offset) {}
   21e2c:	0089b783          	ld	a5,8(s3)
   21e30:	00e787b3          	add	a5,a5,a4
   21e34:	12f13c23          	sd	a5,312(sp)
  switch (form) {
   21e38:	00892783          	lw	a5,8(s2)
   21e3c:	ff07879b          	addiw	a5,a5,-16
   21e40:	0007869b          	addiw	a3,a5,0
   21e44:	01000713          	addi	a4,zero,16
   21e48:	aed76ee3          	bltu	a4,a3,21944 <dwarf::value::as_reference() const+0x6f4>
   21e4c:	02079713          	slli	a4,a5,0x20
   21e50:	01e75793          	srli	a5,a4,0x1e
   21e54:	00015717          	auipc	a4,0x15
   21e58:	2b470713          	addi	a4,a4,692 # 37108 <std::piecewise_construct+0x458>
   21e5c:	00e787b3          	add	a5,a5,a4
   21e60:	0007a783          	lw	a5,0(a5)
   21e64:	00e787b3          	add	a5,a5,a4
   21e68:	00078067          	jalr	zero,0(a5)

0000000000021e6c <dwarf::to_string[abi:cxx11](dwarf::value const&)>:

string to_string(const value &v) {
   21e6c:	ed010113          	addi	sp,sp,-304
   21e70:	12113423          	sd	ra,296(sp)
   21e74:	12813023          	sd	s0,288(sp)
   21e78:	10913c23          	sd	s1,280(sp)
   21e7c:	11213823          	sd	s2,272(sp)
   21e80:	11313423          	sd	s3,264(sp)
   21e84:	11413023          	sd	s4,256(sp)
   21e88:	0f513c23          	sd	s5,248(sp)
   21e8c:	0f613823          	sd	s6,240(sp)
   21e90:	0f713423          	sd	s7,232(sp)
   21e94:	0f813023          	sd	s8,224(sp)
   21e98:	0d913c23          	sd	s9,216(sp)
   21e9c:	0da13823          	sd	s10,208(sp)
   21ea0:	0db13423          	sd	s11,200(sp)
   21ea4:	00050413          	addi	s0,a0,0
   21ea8:	00058513          	addi	a0,a1,0
  type get_type() const { return typ; }
   21eac:	00c5a583          	lw	a1,12(a1)
  switch (v.get_type()) {
   21eb0:	00d00713          	addi	a4,zero,13
   21eb4:	00b77463          	bgeu	a4,a1,21ebc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x50>
   21eb8:	6b50006f          	jal	zero,22d6c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xf00>
   21ebc:	00259793          	slli	a5,a1,0x2
   21ec0:	00015717          	auipc	a4,0x15
   21ec4:	28c70713          	addi	a4,a4,652 # 3714c <std::piecewise_construct+0x49c>
   21ec8:	00e787b3          	add	a5,a5,a4
   21ecc:	0007a783          	lw	a5,0(a5)
   21ed0:	00e787b3          	add	a5,a5,a4
   21ed4:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   21ed8:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   21edc:	00f43023          	sd	a5,0(s0)
	_M_construct(__s, __end, forward_iterator_tag());
   21ee0:	00000693          	addi	a3,zero,0
   21ee4:	00015617          	auipc	a2,0x15
   21ee8:	07860613          	addi	a2,a2,120 # 36f5c <std::piecewise_construct+0x2ac>
   21eec:	00015597          	auipc	a1,0x15
   21ef0:	05c58593          	addi	a1,a1,92 # 36f48 <std::piecewise_construct+0x298>
   21ef4:	00040513          	addi	a0,s0,0
   21ef8:	00020317          	auipc	t1,0x20
   21efc:	40833303          	ld	t1,1032(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   21f00:	000300e7          	jalr	ra,0(t1)
  }
  case value::type::string:
    return v.as_string();
  }
  return "<unexpected value type " + to_string(v.get_type()) + ">";
}
   21f04:	00040513          	addi	a0,s0,0
   21f08:	12813083          	ld	ra,296(sp)
   21f0c:	12013403          	ld	s0,288(sp)
   21f10:	11813483          	ld	s1,280(sp)
   21f14:	11013903          	ld	s2,272(sp)
   21f18:	10813983          	ld	s3,264(sp)
   21f1c:	10013a03          	ld	s4,256(sp)
   21f20:	0f813a83          	ld	s5,248(sp)
   21f24:	0f013b03          	ld	s6,240(sp)
   21f28:	0e813b83          	ld	s7,232(sp)
   21f2c:	0e013c03          	ld	s8,224(sp)
   21f30:	0d813c83          	ld	s9,216(sp)
   21f34:	0d013d03          	ld	s10,208(sp)
   21f38:	0c813d83          	ld	s11,200(sp)
   21f3c:	13010113          	addi	sp,sp,304
   21f40:	00008067          	jalr	zero,0(ra)
    return "0x" + to_hex(v.as_address());
   21f44:	db4fc0ef          	jal	ra,1e4f8 <dwarf::value::as_address() const>
   21f48:	00050593          	addi	a1,a0,0
   21f4c:	05010493          	addi	s1,sp,80
   21f50:	00048513          	addi	a0,s1,0
   21f54:	00020317          	auipc	t1,0x20
   21f58:	39c33303          	ld	t1,924(t1) # 422f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26cc8>
   21f5c:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   21f60:	00200713          	addi	a4,zero,2
   21f64:	00016697          	auipc	a3,0x16
   21f68:	f4c68693          	addi	a3,a3,-180 # 37eb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d0>
   21f6c:	00000613          	addi	a2,zero,0
   21f70:	00000593          	addi	a1,zero,0
   21f74:	00048513          	addi	a0,s1,0
   21f78:	e88f40ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   21f7c:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   21f80:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   21f84:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   21f88:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   21f8c:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   21f90:	03278c63          	beq	a5,s2,21fc8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x15c>
      { _M_dataplus._M_p = __p; }
   21f94:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   21f98:	0104b783          	ld	a5,16(s1)
   21f9c:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   21fa0:	0084b783          	ld	a5,8(s1)
   21fa4:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   21fa8:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   21fac:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   21fb0:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   21fb4:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   21fb8:	06010793          	addi	a5,sp,96
   21fbc:	f4f504e3          	beq	a0,a5,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
   21fc0:	cf0f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   21fc4:	f41ff06f          	jal	zero,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   21fc8:	0084b603          	ld	a2,8(s1)
   21fcc:	00160613          	addi	a2,a2,1
	if (__n == 0)
   21fd0:	fc0608e3          	beq	a2,zero,21fa0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x134>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   21fd4:	00090593          	addi	a1,s2,0
   21fd8:	d78f40ef          	jal	ra,16550 <memcpy@plt>
   21fdc:	fc5ff06f          	jal	zero,21fa0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x134>
    const char *b = (const char *)v.as_block(&size);
   21fe0:	01010593          	addi	a1,sp,16
   21fe4:	86dfc0ef          	jal	ra,1e850 <dwarf::value::as_block(unsigned long*) const>
   21fe8:	00050a13          	addi	s4,a0,0
    string res = ::to_string(size) + " byte block:";
   21fec:	01013483          	ld	s1,16(sp)
  to_string(unsigned long __val)
#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_LONG__) <= 32
  noexcept // any 32-bit value fits in the SSO buffer
#endif
  {
    string __str(__detail::__to_chars_len(__val), '\0');
   21ff0:	00a00593          	addi	a1,zero,10
   21ff4:	00048513          	addi	a0,s1,0
   21ff8:	00020317          	auipc	t1,0x20
   21ffc:	52833303          	ld	t1,1320(t1) # 42520 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)@@Base+0x1f14c>
   22000:	000300e7          	jalr	ra,0(t1)
	: allocator_type(__a), _M_p(__dat) { }
   22004:	06010793          	addi	a5,sp,96
   22008:	04f13823          	sd	a5,80(sp)
      { _M_construct(__n, __c); }
   2200c:	00000613          	addi	a2,zero,0
   22010:	02051593          	slli	a1,a0,0x20
   22014:	0205d593          	srli	a1,a1,0x20
   22018:	05010513          	addi	a0,sp,80
   2201c:	cf4f40ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   22020:	00048613          	addi	a2,s1,0
   22024:	05812583          	lw	a1,88(sp)
   22028:	05013503          	ld	a0,80(sp)
   2202c:	00020317          	auipc	t1,0x20
   22030:	3bc33303          	ld	t1,956(t1) # 423e8 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)@@Base+0x1ef84>
   22034:	000300e7          	jalr	ra,0(t1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   22038:	fff00793          	addi	a5,zero,-1
   2203c:	0027d793          	srli	a5,a5,0x2
   22040:	05813703          	ld	a4,88(sp)
   22044:	40e787b3          	sub	a5,a5,a4
   22048:	00b00713          	addi	a4,zero,11
   2204c:	00f77e63          	bgeu	a4,a5,22068 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1fc>
	return _M_append(__s, __n);
   22050:	00c00613          	addi	a2,zero,12
   22054:	00015597          	auipc	a1,0x15
   22058:	f2458593          	addi	a1,a1,-220 # 36f78 <std::piecewise_construct+0x2c8>
   2205c:	05010513          	addi	a0,sp,80
   22060:	b10f40ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22064:	02c0006f          	jal	zero,22090 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x224>
	  __throw_length_error(__N(__s));
   22068:	00015517          	auipc	a0,0x15
   2206c:	ef850513          	addi	a0,a0,-264 # 36f60 <std::piecewise_construct+0x2b0>
   22070:	b70f40ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   22074:	00050413          	addi	s0,a0,0
   22078:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   2207c:	06010793          	addi	a5,sp,96
   22080:	00f50463          	beq	a0,a5,22088 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x21c>
   22084:	c2cf40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   22088:	00040513          	addi	a0,s0,0
   2208c:	e04f40ef          	jal	ra,16690 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   22090:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22094:	04010793          	addi	a5,sp,64
   22098:	02f13823          	sd	a5,48(sp)
      { return _M_dataplus._M_p; }
   2209c:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   220a0:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   220a4:	07278263          	beq	a5,s2,22108 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x29c>
      { _M_dataplus._M_p = __p; }
   220a8:	02f13823          	sd	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   220ac:	01053783          	ld	a5,16(a0)
   220b0:	04f13023          	sd	a5,64(sp)
      { _M_string_length = __length; }
   220b4:	0084b783          	ld	a5,8(s1)
   220b8:	02f13c23          	sd	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   220bc:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   220c0:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   220c4:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   220c8:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   220cc:	06010793          	addi	a5,sp,96
   220d0:	00f50463          	beq	a0,a5,220d8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x26c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   220d4:	bdcf40ef          	jal	ra,164b0 <operator delete(void*)@plt>
    for (size_t pos = 0; pos < size; ++pos) {
   220d8:	01013783          	ld	a5,16(sp)
   220dc:	1a078e63          	beq	a5,zero,22298 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x42c>
   220e0:	00000493          	addi	s1,zero,0
	return _M_is_local() ? size_type(_S_local_capacity)
   220e4:	04010b13          	addi	s6,sp,64
   220e8:	00f00c93          	addi	s9,zero,15
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
   220ec:	03010993          	addi	s3,sp,48
	: allocator_type(__a), _M_p(__dat) { }
   220f0:	05010b93          	addi	s7,sp,80
   220f4:	06010913          	addi	s2,sp,96
    pos--;
   220f8:	00810c13          	addi	s8,sp,8
	if (this->max_size() - (this->size() - __n1) < __n2)
   220fc:	fff00a93          	addi	s5,zero,-1
   22100:	002ada93          	srli	s5,s5,0x2
   22104:	0e80006f          	jal	zero,221ec <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x380>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22108:	00853603          	ld	a2,8(a0)
   2210c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   22110:	fa0602e3          	beq	a2,zero,220b4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x248>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22114:	00090593          	addi	a1,s2,0
   22118:	04010513          	addi	a0,sp,64
   2211c:	c34f40ef          	jal	ra,16550 <memcpy@plt>
   22120:	f95ff06f          	jal	zero,220b4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x248>
	return _M_is_local() ? size_type(_S_local_capacity)
   22124:	000c8793          	addi	a5,s9,0
   22128:	0d80006f          	jal	zero,22200 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x394>
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
   2212c:	00100713          	addi	a4,zero,1
   22130:	00000693          	addi	a3,zero,0
   22134:	00000613          	addi	a2,zero,0
   22138:	000d8593          	addi	a1,s11,0
   2213c:	00098513          	addi	a0,s3,0
   22140:	d90f40ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@plt>
   22144:	0c00006f          	jal	zero,22204 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x398>
	: allocator_type(__a), _M_p(__dat) { }
   22148:	05213823          	sd	s2,80(sp)
	_M_construct(__s, __end, forward_iterator_tag());
   2214c:	00000693          	addi	a3,zero,0
   22150:	00016617          	auipc	a2,0x16
   22154:	77960613          	addi	a2,a2,1913 # 388c9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   22158:	00016597          	auipc	a1,0x16
   2215c:	77058593          	addi	a1,a1,1904 # 388c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe8>
   22160:	000b8513          	addi	a0,s7,0
   22164:	00020317          	auipc	t1,0x20
   22168:	19c33303          	ld	t1,412(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2216c:	000300e7          	jalr	ra,0(t1)
   22170:	00c0006f          	jal	zero,2217c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x310>
  *pos-- = '\0';
   22174:	00910d13          	addi	s10,sp,9
   22178:	0f40006f          	jal	zero,2226c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x400>
      { return _M_dataplus._M_p; }
   2217c:	05013583          	ld	a1,80(sp)
      { return _M_string_length; }
   22180:	05813603          	ld	a2,88(sp)
	if (this->max_size() - (this->size() - __n1) < __n2)
   22184:	03813783          	ld	a5,56(sp)
   22188:	40fa87b3          	sub	a5,s5,a5
   2218c:	00c7e863          	bltu	a5,a2,2219c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x330>
	return _M_append(__s, __n);
   22190:	00098513          	addi	a0,s3,0
   22194:	9dcf40ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22198:	03c0006f          	jal	zero,221d4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x368>
	  __throw_length_error(__N(__s));
   2219c:	00015517          	auipc	a0,0x15
   221a0:	dc450513          	addi	a0,a0,-572 # 36f60 <std::piecewise_construct+0x2b0>
   221a4:	a3cf40ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   221a8:	00050413          	addi	s0,a0,0
   221ac:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   221b0:	06010793          	addi	a5,sp,96
   221b4:	00f50463          	beq	a0,a5,221bc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x350>
   221b8:	af8f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   221bc:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   221c0:	04010793          	addi	a5,sp,64
   221c4:	00f50463          	beq	a0,a5,221cc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x360>
   221c8:	ae8f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   221cc:	00040513          	addi	a0,s0,0
   221d0:	cc0f40ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   221d4:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   221d8:	01250463          	beq	a0,s2,221e0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x374>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   221dc:	ad4f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
   221e0:	00148493          	addi	s1,s1,1
   221e4:	01013783          	ld	a5,16(sp)
   221e8:	0af4f863          	bgeu	s1,a5,22298 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x42c>
      { return _M_string_length; }
   221ec:	03813d83          	ld	s11,56(sp)
	if (__size + 1 > this->capacity())
   221f0:	001d8d13          	addi	s10,s11,1
	return _M_is_local() ? size_type(_S_local_capacity)
   221f4:	03013783          	ld	a5,48(sp)
   221f8:	f36786e3          	beq	a5,s6,22124 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2b8>
   221fc:	04013783          	ld	a5,64(sp)
	if (__size + 1 > this->capacity())
   22200:	f3a7e6e3          	bltu	a5,s10,2212c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2c0>
	__c1 = __c2;
   22204:	03013583          	ld	a1,48(sp)
   22208:	01b585b3          	add	a1,a1,s11
   2220c:	02000793          	addi	a5,zero,32
   22210:	00f58023          	sb	a5,0(a1)
      { _M_string_length = __length; }
   22214:	03a13c23          	sd	s10,56(sp)
   22218:	03013783          	ld	a5,48(sp)
   2221c:	01a787b3          	add	a5,a5,s10
   22220:	00078023          	sb	zero,0(a5)
      res += to_hex(b[pos]);
   22224:	009a07b3          	add	a5,s4,s1
   22228:	0007c783          	lbu	a5,0(a5)
  if (v == 0)
   2222c:	f0078ee3          	beq	a5,zero,22148 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2dc>
  *pos-- = '\0';
   22230:	00010523          	sb	zero,10(sp)
  while (v && pos >= buf) {
   22234:	00f7f713          	andi	a4,a5,15
    if (digit < 10)
   22238:	00900613          	addi	a2,zero,9
      *pos = '0' + digit;
   2223c:	03070693          	addi	a3,a4,48
    if (digit < 10)
   22240:	00e67463          	bgeu	a2,a4,22248 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x3dc>
      *pos = 'a' + (digit - 10);
   22244:	05770693          	addi	a3,a4,87
   22248:	00d104a3          	sb	a3,9(sp)
    v >>= 4;
   2224c:	0047d793          	srli	a5,a5,0x4
  while (v && pos >= buf) {
   22250:	f20782e3          	beq	a5,zero,22174 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x308>
    if (digit < 10)
   22254:	00900693          	addi	a3,zero,9
      *pos = 'a' + (digit - 10);
   22258:	05778713          	addi	a4,a5,87
    if (digit < 10)
   2225c:	00f6e463          	bltu	a3,a5,22264 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x3f8>
      *pos = '0' + digit;
   22260:	03078713          	addi	a4,a5,48
   22264:	00e10423          	sb	a4,8(sp)
    pos--;
   22268:	000c0d13          	addi	s10,s8,0
	: allocator_type(__a), _M_p(__dat) { }
   2226c:	05213823          	sd	s2,80(sp)
	return __builtin_strlen(__s);
   22270:	000d0513          	addi	a0,s10,0
   22274:	94cf40ef          	jal	ra,163c0 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   22278:	00000693          	addi	a3,zero,0
   2227c:	00ad0633          	add	a2,s10,a0
   22280:	000d0593          	addi	a1,s10,0
   22284:	000b8513          	addi	a0,s7,0
   22288:	00020317          	auipc	t1,0x20
   2228c:	07833303          	ld	t1,120(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   22290:	000300e7          	jalr	ra,0(t1)
      }
   22294:	ee9ff06f          	jal	zero,2217c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x310>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   22298:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2229c:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   222a0:	03013783          	ld	a5,48(sp)
	if (__str._M_is_local())
   222a4:	04010713          	addi	a4,sp,64
   222a8:	00e78e63          	beq	a5,a4,222c4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x458>
      { _M_dataplus._M_p = __p; }
   222ac:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   222b0:	04013783          	ld	a5,64(sp)
   222b4:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   222b8:	03813783          	ld	a5,56(sp)
   222bc:	00f43423          	sd	a5,8(s0)
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   222c0:	c45ff06f          	jal	zero,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   222c4:	03813603          	ld	a2,56(sp)
   222c8:	00160613          	addi	a2,a2,1
	if (__n == 0)
   222cc:	fe0606e3          	beq	a2,zero,222b8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x44c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   222d0:	00070593          	addi	a1,a4,0
   222d4:	a7cf40ef          	jal	ra,16550 <memcpy@plt>
   222d8:	fe1ff06f          	jal	zero,222b8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x44c>
    return "0x" + to_hex(v.as_uconstant());
   222dc:	aa5fc0ef          	jal	ra,1ed80 <dwarf::value::as_uconstant() const>
   222e0:	00050593          	addi	a1,a0,0
   222e4:	05010493          	addi	s1,sp,80
   222e8:	00048513          	addi	a0,s1,0
   222ec:	00020317          	auipc	t1,0x20
   222f0:	00433303          	ld	t1,4(t1) # 422f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26cc8>
   222f4:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   222f8:	00200713          	addi	a4,zero,2
   222fc:	00016697          	auipc	a3,0x16
   22300:	bb468693          	addi	a3,a3,-1100 # 37eb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d0>
   22304:	00000613          	addi	a2,zero,0
   22308:	00000593          	addi	a1,zero,0
   2230c:	00048513          	addi	a0,s1,0
   22310:	af0f40ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   22314:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   22318:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2231c:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   22320:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22324:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   22328:	03278c63          	beq	a5,s2,22360 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4f4>
      { _M_dataplus._M_p = __p; }
   2232c:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   22330:	0104b783          	ld	a5,16(s1)
   22334:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   22338:	0084b783          	ld	a5,8(s1)
   2233c:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   22340:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22344:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   22348:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2234c:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22350:	06010793          	addi	a5,sp,96
   22354:	baf508e3          	beq	a0,a5,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   22358:	958f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2235c:	ba9ff06f          	jal	zero,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22360:	0084b603          	ld	a2,8(s1)
   22364:	00160613          	addi	a2,a2,1
	if (__n == 0)
   22368:	fc0608e3          	beq	a2,zero,22338 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4cc>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2236c:	00090593          	addi	a1,s2,0
   22370:	9e0f40ef          	jal	ra,16550 <memcpy@plt>
   22374:	fc5ff06f          	jal	zero,22338 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4cc>
    return ::to_string(v.as_uconstant());
   22378:	a09fc0ef          	jal	ra,1ed80 <dwarf::value::as_uconstant() const>
   2237c:	00050493          	addi	s1,a0,0
    string __str(__detail::__to_chars_len(__val), '\0');
   22380:	00a00593          	addi	a1,zero,10
   22384:	00020317          	auipc	t1,0x20
   22388:	19c33303          	ld	t1,412(t1) # 42520 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)@@Base+0x1f14c>
   2238c:	000300e7          	jalr	ra,0(t1)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   22390:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   22394:	00f43023          	sd	a5,0(s0)
      { _M_construct(__n, __c); }
   22398:	00000613          	addi	a2,zero,0
   2239c:	02051593          	slli	a1,a0,0x20
   223a0:	0205d593          	srli	a1,a1,0x20
   223a4:	00040513          	addi	a0,s0,0
   223a8:	968f40ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   223ac:	00048613          	addi	a2,s1,0
   223b0:	00842583          	lw	a1,8(s0)
   223b4:	00043503          	ld	a0,0(s0)
   223b8:	00020317          	auipc	t1,0x20
   223bc:	03033303          	ld	t1,48(t1) # 423e8 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)@@Base+0x1ef84>
   223c0:	000300e7          	jalr	ra,0(t1)
    return __str;
   223c4:	b41ff06f          	jal	zero,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
    return ::to_string(v.as_sconstant());
   223c8:	f39fc0ef          	jal	ra,1f300 <dwarf::value::as_sconstant() const>
    const bool __neg = __val < 0;
   223cc:	03f55913          	srli	s2,a0,0x3f
    const unsigned long __uval = __neg ? (unsigned long)~__val + 1ul : __val;
   223d0:	43f55793          	srai	a5,a0,0x3f
   223d4:	00a7c4b3          	xor	s1,a5,a0
   223d8:	40f484b3          	sub	s1,s1,a5
    const auto __len = __detail::__to_chars_len(__uval);
   223dc:	00a00593          	addi	a1,zero,10
   223e0:	00048513          	addi	a0,s1,0
   223e4:	00020317          	auipc	t1,0x20
   223e8:	13c33303          	ld	t1,316(t1) # 42520 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)@@Base+0x1f14c>
   223ec:	000300e7          	jalr	ra,0(t1)
   223f0:	0005099b          	addiw	s3,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   223f4:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   223f8:	00f43023          	sd	a5,0(s0)
    string __str(__neg + __len, '-');
   223fc:	00a905bb          	addw	a1,s2,a0
      { _M_construct(__n, __c); }
   22400:	02d00613          	addi	a2,zero,45
   22404:	02059593          	slli	a1,a1,0x20
   22408:	0205d593          	srli	a1,a1,0x20
   2240c:	00040513          	addi	a0,s0,0
   22410:	900f40ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
	return _M_data()[__pos];
   22414:	00043503          	ld	a0,0(s0)
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   22418:	00048613          	addi	a2,s1,0
   2241c:	00098593          	addi	a1,s3,0
   22420:	01250533          	add	a0,a0,s2
   22424:	00020317          	auipc	t1,0x20
   22428:	fc433303          	ld	t1,-60(t1) # 423e8 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)@@Base+0x1ef84>
   2242c:	000300e7          	jalr	ra,0(t1)
    return __str;
   22430:	ad5ff06f          	jal	zero,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   22434:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   22438:	00f43023          	sd	a5,0(s0)
	_M_construct(__s, __end, forward_iterator_tag());
   2243c:	00000693          	addi	a3,zero,0
   22440:	00015617          	auipc	a2,0x15
   22444:	b5160613          	addi	a2,a2,-1199 # 36f91 <std::piecewise_construct+0x2e1>
   22448:	00015597          	auipc	a1,0x15
   2244c:	b4058593          	addi	a1,a1,-1216 # 36f88 <std::piecewise_construct+0x2d8>
   22450:	00040513          	addi	a0,s0,0
   22454:	00020317          	auipc	t1,0x20
   22458:	eac33303          	ld	t1,-340(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2245c:	000300e7          	jalr	ra,0(t1)
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   22460:	aa5ff06f          	jal	zero,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
    return v.as_flag() ? "true" : "false";
   22464:	905fd0ef          	jal	ra,1fd68 <dwarf::value::as_flag() const>
   22468:	00015497          	auipc	s1,0x15
   2246c:	ad848493          	addi	s1,s1,-1320 # 36f40 <std::piecewise_construct+0x290>
   22470:	00050663          	beq	a0,zero,2247c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x610>
   22474:	00015497          	auipc	s1,0x15
   22478:	ac448493          	addi	s1,s1,-1340 # 36f38 <std::piecewise_construct+0x288>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2247c:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   22480:	00f43023          	sd	a5,0(s0)
	return __builtin_strlen(__s);
   22484:	00048513          	addi	a0,s1,0
   22488:	f39f30ef          	jal	ra,163c0 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   2248c:	00000693          	addi	a3,zero,0
   22490:	00a48633          	add	a2,s1,a0
   22494:	00048593          	addi	a1,s1,0
   22498:	00040513          	addi	a0,s0,0
   2249c:	00020317          	auipc	t1,0x20
   224a0:	e6433303          	ld	t1,-412(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   224a4:	000300e7          	jalr	ra,0(t1)
   224a8:	a5dff06f          	jal	zero,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
    return "<line 0x" + to_hex(v.as_sec_offset()) + ">";
   224ac:	9e0fe0ef          	jal	ra,2068c <dwarf::value::as_sec_offset() const>
   224b0:	00050593          	addi	a1,a0,0
   224b4:	03010493          	addi	s1,sp,48
   224b8:	00048513          	addi	a0,s1,0
   224bc:	00020317          	auipc	t1,0x20
   224c0:	e3433303          	ld	t1,-460(t1) # 422f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26cc8>
   224c4:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   224c8:	00800713          	addi	a4,zero,8
   224cc:	00015697          	auipc	a3,0x15
   224d0:	acc68693          	addi	a3,a3,-1332 # 36f98 <std::piecewise_construct+0x2e8>
   224d4:	00000613          	addi	a2,zero,0
   224d8:	00000593          	addi	a1,zero,0
   224dc:	00048513          	addi	a0,s1,0
   224e0:	920f40ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   224e4:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   224e8:	06010793          	addi	a5,sp,96
   224ec:	04f13823          	sd	a5,80(sp)
      { return _M_dataplus._M_p; }
   224f0:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   224f4:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   224f8:	05278663          	beq	a5,s2,22544 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6d8>
      { _M_dataplus._M_p = __p; }
   224fc:	04f13823          	sd	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   22500:	01053783          	ld	a5,16(a0)
   22504:	06f13023          	sd	a5,96(sp)
      { _M_string_length = __length; }
   22508:	0084b783          	ld	a5,8(s1)
   2250c:	04f13c23          	sd	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   22510:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22514:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   22518:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   2251c:	05813703          	ld	a4,88(sp)
   22520:	fff00793          	addi	a5,zero,-1
   22524:	0027d793          	srli	a5,a5,0x2
   22528:	02f70c63          	beq	a4,a5,22560 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6f4>
	return _M_append(__s, __n);
   2252c:	00100613          	addi	a2,zero,1
   22530:	00015597          	auipc	a1,0x15
   22534:	a6058593          	addi	a1,a1,-1440 # 36f90 <std::piecewise_construct+0x2e0>
   22538:	05010513          	addi	a0,sp,80
   2253c:	e35f30ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22540:	0580006f          	jal	zero,22598 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x72c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22544:	00853603          	ld	a2,8(a0)
   22548:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2254c:	fa060ee3          	beq	a2,zero,22508 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x69c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22550:	00090593          	addi	a1,s2,0
   22554:	06010513          	addi	a0,sp,96
   22558:	ff9f30ef          	jal	ra,16550 <memcpy@plt>
   2255c:	fadff06f          	jal	zero,22508 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x69c>
	  __throw_length_error(__N(__s));
   22560:	00015517          	auipc	a0,0x15
   22564:	a0050513          	addi	a0,a0,-1536 # 36f60 <std::piecewise_construct+0x2b0>
   22568:	e79f30ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   2256c:	00050413          	addi	s0,a0,0
   22570:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22574:	06010793          	addi	a5,sp,96
   22578:	00f50463          	beq	a0,a5,22580 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x714>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2257c:	f35f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22580:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   22584:	04010793          	addi	a5,sp,64
   22588:	00f50463          	beq	a0,a5,22590 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x724>
   2258c:	f25f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   22590:	00040513          	addi	a0,s0,0
   22594:	8fcf40ef          	jal	ra,16690 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   22598:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2259c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   225a0:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   225a4:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   225a8:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   225ac:	05278463          	beq	a5,s2,225f4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x788>
      { _M_dataplus._M_p = __p; }
   225b0:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   225b4:	0104b783          	ld	a5,16(s1)
   225b8:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   225bc:	0084b783          	ld	a5,8(s1)
   225c0:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   225c4:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   225c8:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   225cc:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   225d0:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   225d4:	06010793          	addi	a5,sp,96
   225d8:	00f50463          	beq	a0,a5,225e0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x774>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   225dc:	ed5f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   225e0:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   225e4:	04010793          	addi	a5,sp,64
   225e8:	90f50ee3          	beq	a0,a5,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
   225ec:	ec5f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   225f0:	915ff06f          	jal	zero,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   225f4:	0084b603          	ld	a2,8(s1)
   225f8:	00160613          	addi	a2,a2,1
	if (__n == 0)
   225fc:	fc0600e3          	beq	a2,zero,225bc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x750>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22600:	00090593          	addi	a1,s2,0
   22604:	f4df30ef          	jal	ra,16550 <memcpy@plt>
   22608:	fb5ff06f          	jal	zero,225bc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x750>
    return "<loclist 0x" + to_hex(v.as_sec_offset()) + ">";
   2260c:	880fe0ef          	jal	ra,2068c <dwarf::value::as_sec_offset() const>
   22610:	00050593          	addi	a1,a0,0
   22614:	03010493          	addi	s1,sp,48
   22618:	00048513          	addi	a0,s1,0
   2261c:	00020317          	auipc	t1,0x20
   22620:	cd433303          	ld	t1,-812(t1) # 422f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26cc8>
   22624:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   22628:	00b00713          	addi	a4,zero,11
   2262c:	00015697          	auipc	a3,0x15
   22630:	97c68693          	addi	a3,a3,-1668 # 36fa8 <std::piecewise_construct+0x2f8>
   22634:	00000613          	addi	a2,zero,0
   22638:	00000593          	addi	a1,zero,0
   2263c:	00048513          	addi	a0,s1,0
   22640:	fc1f30ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   22644:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22648:	06010793          	addi	a5,sp,96
   2264c:	04f13823          	sd	a5,80(sp)
      { return _M_dataplus._M_p; }
   22650:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22654:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   22658:	05278663          	beq	a5,s2,226a4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x838>
      { _M_dataplus._M_p = __p; }
   2265c:	04f13823          	sd	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   22660:	01053783          	ld	a5,16(a0)
   22664:	06f13023          	sd	a5,96(sp)
      { _M_string_length = __length; }
   22668:	0084b783          	ld	a5,8(s1)
   2266c:	04f13c23          	sd	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   22670:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22674:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   22678:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   2267c:	05813703          	ld	a4,88(sp)
   22680:	fff00793          	addi	a5,zero,-1
   22684:	0027d793          	srli	a5,a5,0x2
   22688:	02f70c63          	beq	a4,a5,226c0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x854>
	return _M_append(__s, __n);
   2268c:	00100613          	addi	a2,zero,1
   22690:	00015597          	auipc	a1,0x15
   22694:	90058593          	addi	a1,a1,-1792 # 36f90 <std::piecewise_construct+0x2e0>
   22698:	05010513          	addi	a0,sp,80
   2269c:	cd5f30ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   226a0:	0580006f          	jal	zero,226f8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x88c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   226a4:	00853603          	ld	a2,8(a0)
   226a8:	00160613          	addi	a2,a2,1
	if (__n == 0)
   226ac:	fa060ee3          	beq	a2,zero,22668 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7fc>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   226b0:	00090593          	addi	a1,s2,0
   226b4:	06010513          	addi	a0,sp,96
   226b8:	e99f30ef          	jal	ra,16550 <memcpy@plt>
   226bc:	fadff06f          	jal	zero,22668 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7fc>
	  __throw_length_error(__N(__s));
   226c0:	00015517          	auipc	a0,0x15
   226c4:	8a050513          	addi	a0,a0,-1888 # 36f60 <std::piecewise_construct+0x2b0>
   226c8:	d19f30ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   226cc:	00050413          	addi	s0,a0,0
   226d0:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   226d4:	06010793          	addi	a5,sp,96
   226d8:	00f50463          	beq	a0,a5,226e0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x874>
   226dc:	dd5f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   226e0:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   226e4:	04010793          	addi	a5,sp,64
   226e8:	00f50463          	beq	a0,a5,226f0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x884>
   226ec:	dc5f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   226f0:	00040513          	addi	a0,s0,0
   226f4:	f9df30ef          	jal	ra,16690 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   226f8:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   226fc:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22700:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   22704:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22708:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2270c:	05278463          	beq	a5,s2,22754 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8e8>
      { _M_dataplus._M_p = __p; }
   22710:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   22714:	0104b783          	ld	a5,16(s1)
   22718:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2271c:	0084b783          	ld	a5,8(s1)
   22720:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   22724:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22728:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2272c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   22730:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22734:	06010793          	addi	a5,sp,96
   22738:	00f50463          	beq	a0,a5,22740 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8d4>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2273c:	d75f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22740:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   22744:	04010793          	addi	a5,sp,64
   22748:	faf50e63          	beq	a0,a5,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
   2274c:	d65f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   22750:	fb4ff06f          	jal	zero,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22754:	0084b603          	ld	a2,8(s1)
   22758:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2275c:	fc0600e3          	beq	a2,zero,2271c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8b0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22760:	00090593          	addi	a1,s2,0
   22764:	dedf30ef          	jal	ra,16550 <memcpy@plt>
   22768:	fb5ff06f          	jal	zero,2271c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8b0>
    return "<mac 0x" + to_hex(v.as_sec_offset()) + ">";
   2276c:	f21fd0ef          	jal	ra,2068c <dwarf::value::as_sec_offset() const>
   22770:	00050593          	addi	a1,a0,0
   22774:	03010493          	addi	s1,sp,48
   22778:	00048513          	addi	a0,s1,0
   2277c:	00020317          	auipc	t1,0x20
   22780:	b7433303          	ld	t1,-1164(t1) # 422f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26cc8>
   22784:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   22788:	00700713          	addi	a4,zero,7
   2278c:	00015697          	auipc	a3,0x15
   22790:	82c68693          	addi	a3,a3,-2004 # 36fb8 <std::piecewise_construct+0x308>
   22794:	00000613          	addi	a2,zero,0
   22798:	00000593          	addi	a1,zero,0
   2279c:	00048513          	addi	a0,s1,0
   227a0:	e61f30ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   227a4:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   227a8:	06010793          	addi	a5,sp,96
   227ac:	04f13823          	sd	a5,80(sp)
      { return _M_dataplus._M_p; }
   227b0:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   227b4:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   227b8:	05278663          	beq	a5,s2,22804 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x998>
      { _M_dataplus._M_p = __p; }
   227bc:	04f13823          	sd	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   227c0:	01053783          	ld	a5,16(a0)
   227c4:	06f13023          	sd	a5,96(sp)
      { _M_string_length = __length; }
   227c8:	0084b783          	ld	a5,8(s1)
   227cc:	04f13c23          	sd	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   227d0:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   227d4:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   227d8:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   227dc:	05813703          	ld	a4,88(sp)
   227e0:	fff00793          	addi	a5,zero,-1
   227e4:	0027d793          	srli	a5,a5,0x2
   227e8:	02f70c63          	beq	a4,a5,22820 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9b4>
	return _M_append(__s, __n);
   227ec:	00100613          	addi	a2,zero,1
   227f0:	00014597          	auipc	a1,0x14
   227f4:	7a058593          	addi	a1,a1,1952 # 36f90 <std::piecewise_construct+0x2e0>
   227f8:	05010513          	addi	a0,sp,80
   227fc:	b75f30ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22800:	0580006f          	jal	zero,22858 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9ec>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22804:	00853603          	ld	a2,8(a0)
   22808:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2280c:	fa060ee3          	beq	a2,zero,227c8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x95c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22810:	00090593          	addi	a1,s2,0
   22814:	06010513          	addi	a0,sp,96
   22818:	d39f30ef          	jal	ra,16550 <memcpy@plt>
   2281c:	fadff06f          	jal	zero,227c8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x95c>
	  __throw_length_error(__N(__s));
   22820:	00014517          	auipc	a0,0x14
   22824:	74050513          	addi	a0,a0,1856 # 36f60 <std::piecewise_construct+0x2b0>
   22828:	bb9f30ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   2282c:	00050413          	addi	s0,a0,0
   22830:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22834:	06010793          	addi	a5,sp,96
   22838:	00f50463          	beq	a0,a5,22840 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9d4>
   2283c:	c75f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22840:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   22844:	04010793          	addi	a5,sp,64
   22848:	00f50463          	beq	a0,a5,22850 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9e4>
   2284c:	c65f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   22850:	00040513          	addi	a0,s0,0
   22854:	e3df30ef          	jal	ra,16690 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   22858:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2285c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22860:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   22864:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22868:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2286c:	05278463          	beq	a5,s2,228b4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa48>
      { _M_dataplus._M_p = __p; }
   22870:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   22874:	0104b783          	ld	a5,16(s1)
   22878:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2287c:	0084b783          	ld	a5,8(s1)
   22880:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   22884:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22888:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2288c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   22890:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22894:	06010793          	addi	a5,sp,96
   22898:	00f50463          	beq	a0,a5,228a0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa34>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2289c:	c15f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   228a0:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   228a4:	04010793          	addi	a5,sp,64
   228a8:	e4f50e63          	beq	a0,a5,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
   228ac:	c05f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   228b0:	e54ff06f          	jal	zero,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   228b4:	0084b603          	ld	a2,8(s1)
   228b8:	00160613          	addi	a2,a2,1
	if (__n == 0)
   228bc:	fc0600e3          	beq	a2,zero,2287c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa10>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   228c0:	00090593          	addi	a1,s2,0
   228c4:	c8df30ef          	jal	ra,16550 <memcpy@plt>
   228c8:	fb5ff06f          	jal	zero,2287c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa10>
    return "<rangelist 0x" + to_hex(v.as_sec_offset()) + ">";
   228cc:	dc1fd0ef          	jal	ra,2068c <dwarf::value::as_sec_offset() const>
   228d0:	00050593          	addi	a1,a0,0
   228d4:	03010493          	addi	s1,sp,48
   228d8:	00048513          	addi	a0,s1,0
   228dc:	00020317          	auipc	t1,0x20
   228e0:	a1433303          	ld	t1,-1516(t1) # 422f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26cc8>
   228e4:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   228e8:	00d00713          	addi	a4,zero,13
   228ec:	00014697          	auipc	a3,0x14
   228f0:	6d468693          	addi	a3,a3,1748 # 36fc0 <std::piecewise_construct+0x310>
   228f4:	00000613          	addi	a2,zero,0
   228f8:	00000593          	addi	a1,zero,0
   228fc:	00048513          	addi	a0,s1,0
   22900:	d01f30ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   22904:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22908:	06010793          	addi	a5,sp,96
   2290c:	04f13823          	sd	a5,80(sp)
      { return _M_dataplus._M_p; }
   22910:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22914:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   22918:	05278663          	beq	a5,s2,22964 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xaf8>
      { _M_dataplus._M_p = __p; }
   2291c:	04f13823          	sd	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   22920:	01053783          	ld	a5,16(a0)
   22924:	06f13023          	sd	a5,96(sp)
      { _M_string_length = __length; }
   22928:	0084b783          	ld	a5,8(s1)
   2292c:	04f13c23          	sd	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   22930:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22934:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   22938:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   2293c:	05813703          	ld	a4,88(sp)
   22940:	fff00793          	addi	a5,zero,-1
   22944:	0027d793          	srli	a5,a5,0x2
   22948:	02f70c63          	beq	a4,a5,22980 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb14>
	return _M_append(__s, __n);
   2294c:	00100613          	addi	a2,zero,1
   22950:	00014597          	auipc	a1,0x14
   22954:	64058593          	addi	a1,a1,1600 # 36f90 <std::piecewise_construct+0x2e0>
   22958:	05010513          	addi	a0,sp,80
   2295c:	a15f30ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22960:	0580006f          	jal	zero,229b8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb4c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22964:	00853603          	ld	a2,8(a0)
   22968:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2296c:	fa060ee3          	beq	a2,zero,22928 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xabc>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22970:	00090593          	addi	a1,s2,0
   22974:	06010513          	addi	a0,sp,96
   22978:	bd9f30ef          	jal	ra,16550 <memcpy@plt>
   2297c:	fadff06f          	jal	zero,22928 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xabc>
	  __throw_length_error(__N(__s));
   22980:	00014517          	auipc	a0,0x14
   22984:	5e050513          	addi	a0,a0,1504 # 36f60 <std::piecewise_construct+0x2b0>
   22988:	a59f30ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   2298c:	00050413          	addi	s0,a0,0
   22990:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22994:	06010793          	addi	a5,sp,96
   22998:	00f50463          	beq	a0,a5,229a0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb34>
   2299c:	b15f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   229a0:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   229a4:	04010793          	addi	a5,sp,64
   229a8:	00f50463          	beq	a0,a5,229b0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb44>
   229ac:	b05f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   229b0:	00040513          	addi	a0,s0,0
   229b4:	cddf30ef          	jal	ra,16690 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   229b8:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   229bc:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   229c0:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   229c4:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   229c8:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   229cc:	05278463          	beq	a5,s2,22a14 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xba8>
      { _M_dataplus._M_p = __p; }
   229d0:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   229d4:	0104b783          	ld	a5,16(s1)
   229d8:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   229dc:	0084b783          	ld	a5,8(s1)
   229e0:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   229e4:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   229e8:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   229ec:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   229f0:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   229f4:	06010793          	addi	a5,sp,96
   229f8:	00f50463          	beq	a0,a5,22a00 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb94>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   229fc:	ab5f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22a00:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   22a04:	04010793          	addi	a5,sp,64
   22a08:	cef50e63          	beq	a0,a5,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
   22a0c:	aa5f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   22a10:	cf4ff06f          	jal	zero,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22a14:	0084b603          	ld	a2,8(s1)
   22a18:	00160613          	addi	a2,a2,1
	if (__n == 0)
   22a1c:	fc0600e3          	beq	a2,zero,229dc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb70>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22a20:	00090593          	addi	a1,s2,0
   22a24:	b2df30ef          	jal	ra,16550 <memcpy@plt>
   22a28:	fb5ff06f          	jal	zero,229dc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb70>
    die d = v.as_reference();
   22a2c:	00050593          	addi	a1,a0,0
   22a30:	05010493          	addi	s1,sp,80
   22a34:	00048513          	addi	a0,s1,0
   22a38:	819fe0ef          	jal	ra,21250 <dwarf::value::as_reference() const>
    auto tu = dynamic_cast<const type_unit *>(&d.get_unit());
   22a3c:	00048513          	addi	a0,s1,0
   22a40:	9f5fa0ef          	jal	ra,1d434 <dwarf::die::get_unit() const>
   22a44:	18050863          	beq	a0,zero,22bd4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xd68>
   22a48:	00000693          	addi	a3,zero,0
   22a4c:	00020617          	auipc	a2,0x20
   22a50:	b5463603          	ld	a2,-1196(a2) # 425a0 <typeinfo for dwarf::type_unit@@Base+0xcd0>
   22a54:	00020597          	auipc	a1,0x20
   22a58:	8445b583          	ld	a1,-1980(a1) # 42298 <typeinfo for dwarf::unit@@Base+0xbad0>
   22a5c:	aa5f30ef          	jal	ra,16500 <__dynamic_cast@plt>
    if (tu)
   22a60:	16050a63          	beq	a0,zero,22bd4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xd68>
      return "<.debug_types+0x" + to_hex(d.get_section_offset()) + ">";
   22a64:	00048513          	addi	a0,s1,0
   22a68:	9d5fa0ef          	jal	ra,1d43c <dwarf::die::get_section_offset() const>
   22a6c:	00050593          	addi	a1,a0,0
   22a70:	01010513          	addi	a0,sp,16
   22a74:	00020317          	auipc	t1,0x20
   22a78:	87c33303          	ld	t1,-1924(t1) # 422f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26cc8>
   22a7c:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   22a80:	01000713          	addi	a4,zero,16
   22a84:	00014697          	auipc	a3,0x14
   22a88:	54c68693          	addi	a3,a3,1356 # 36fd0 <std::piecewise_construct+0x320>
   22a8c:	00000613          	addi	a2,zero,0
   22a90:	00000593          	addi	a1,zero,0
   22a94:	01010513          	addi	a0,sp,16
   22a98:	b69f30ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   22a9c:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22aa0:	04010793          	addi	a5,sp,64
   22aa4:	02f13823          	sd	a5,48(sp)
      { return _M_dataplus._M_p; }
   22aa8:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22aac:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   22ab0:	05278663          	beq	a5,s2,22afc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xc90>
      { _M_dataplus._M_p = __p; }
   22ab4:	02f13823          	sd	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   22ab8:	01053783          	ld	a5,16(a0)
   22abc:	04f13023          	sd	a5,64(sp)
      { _M_string_length = __length; }
   22ac0:	0084b783          	ld	a5,8(s1)
   22ac4:	02f13c23          	sd	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   22ac8:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22acc:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   22ad0:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   22ad4:	03813703          	ld	a4,56(sp)
   22ad8:	fff00793          	addi	a5,zero,-1
   22adc:	0027d793          	srli	a5,a5,0x2
   22ae0:	02f70c63          	beq	a4,a5,22b18 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xcac>
	return _M_append(__s, __n);
   22ae4:	00100613          	addi	a2,zero,1
   22ae8:	00014597          	auipc	a1,0x14
   22aec:	4a858593          	addi	a1,a1,1192 # 36f90 <std::piecewise_construct+0x2e0>
   22af0:	03010513          	addi	a0,sp,48
   22af4:	87df30ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22af8:	0680006f          	jal	zero,22b60 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xcf4>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22afc:	00853603          	ld	a2,8(a0)
   22b00:	00160613          	addi	a2,a2,1
	if (__n == 0)
   22b04:	fa060ee3          	beq	a2,zero,22ac0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xc54>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22b08:	00090593          	addi	a1,s2,0
   22b0c:	04010513          	addi	a0,sp,64
   22b10:	a41f30ef          	jal	ra,16550 <memcpy@plt>
   22b14:	fadff06f          	jal	zero,22ac0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xc54>
	  __throw_length_error(__N(__s));
   22b18:	00014517          	auipc	a0,0x14
   22b1c:	44850513          	addi	a0,a0,1096 # 36f60 <std::piecewise_construct+0x2b0>
   22b20:	8c1f30ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   22b24:	00050413          	addi	s0,a0,0
   22b28:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   22b2c:	04010793          	addi	a5,sp,64
   22b30:	00f50463          	beq	a0,a5,22b38 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xccc>
   22b34:	97df30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22b38:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   22b3c:	02010793          	addi	a5,sp,32
   22b40:	00f50463          	beq	a0,a5,22b48 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xcdc>
   22b44:	96df30ef          	jal	ra,164b0 <operator delete(void*)@plt>
class die {
   22b48:	07010513          	addi	a0,sp,112
   22b4c:	00020317          	auipc	t1,0x20
   22b50:	89433303          	ld	t1,-1900(t1) # 423e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x2b110>
   22b54:	000300e7          	jalr	ra,0(t1)
   22b58:	00040513          	addi	a0,s0,0
   22b5c:	b35f30ef          	jal	ra,16690 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   22b60:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   22b64:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22b68:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   22b6c:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22b70:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   22b74:	05278463          	beq	a5,s2,22bbc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xd50>
      { _M_dataplus._M_p = __p; }
   22b78:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   22b7c:	0104b783          	ld	a5,16(s1)
   22b80:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   22b84:	0084b783          	ld	a5,8(s1)
   22b88:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   22b8c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22b90:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   22b94:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   22b98:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   22b9c:	04010793          	addi	a5,sp,64
   22ba0:	00f50463          	beq	a0,a5,22ba8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xd3c>
   22ba4:	90df30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22ba8:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   22bac:	02010793          	addi	a5,sp,32
   22bb0:	16f50263          	beq	a0,a5,22d14 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xea8>
   22bb4:	8fdf30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   22bb8:	15c0006f          	jal	zero,22d14 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xea8>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22bbc:	0084b603          	ld	a2,8(s1)
   22bc0:	00160613          	addi	a2,a2,1
	if (__n == 0)
   22bc4:	fc0600e3          	beq	a2,zero,22b84 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xd18>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22bc8:	00090593          	addi	a1,s2,0
   22bcc:	985f30ef          	jal	ra,16550 <memcpy@plt>
   22bd0:	fb5ff06f          	jal	zero,22b84 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xd18>
    return "<0x" + to_hex(d.get_section_offset()) + ">";
   22bd4:	05010513          	addi	a0,sp,80
   22bd8:	865fa0ef          	jal	ra,1d43c <dwarf::die::get_section_offset() const>
   22bdc:	00050593          	addi	a1,a0,0
   22be0:	01010513          	addi	a0,sp,16
   22be4:	0001f317          	auipc	t1,0x1f
   22be8:	70c33303          	ld	t1,1804(t1) # 422f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26cc8>
   22bec:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   22bf0:	00300713          	addi	a4,zero,3
   22bf4:	00014697          	auipc	a3,0x14
   22bf8:	3f468693          	addi	a3,a3,1012 # 36fe8 <std::piecewise_construct+0x338>
   22bfc:	00000613          	addi	a2,zero,0
   22c00:	00000593          	addi	a1,zero,0
   22c04:	01010513          	addi	a0,sp,16
   22c08:	9f9f30ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   22c0c:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22c10:	04010793          	addi	a5,sp,64
   22c14:	02f13823          	sd	a5,48(sp)
      { return _M_dataplus._M_p; }
   22c18:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22c1c:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   22c20:	05278663          	beq	a5,s2,22c6c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe00>
      { _M_dataplus._M_p = __p; }
   22c24:	02f13823          	sd	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   22c28:	01053783          	ld	a5,16(a0)
   22c2c:	04f13023          	sd	a5,64(sp)
      { _M_string_length = __length; }
   22c30:	0084b783          	ld	a5,8(s1)
   22c34:	02f13c23          	sd	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   22c38:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22c3c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   22c40:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   22c44:	03813703          	ld	a4,56(sp)
   22c48:	fff00793          	addi	a5,zero,-1
   22c4c:	0027d793          	srli	a5,a5,0x2
   22c50:	02f70c63          	beq	a4,a5,22c88 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe1c>
	return _M_append(__s, __n);
   22c54:	00100613          	addi	a2,zero,1
   22c58:	00014597          	auipc	a1,0x14
   22c5c:	33858593          	addi	a1,a1,824 # 36f90 <std::piecewise_construct+0x2e0>
   22c60:	03010513          	addi	a0,sp,48
   22c64:	f0cf30ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22c68:	0540006f          	jal	zero,22cbc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe50>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22c6c:	00853603          	ld	a2,8(a0)
   22c70:	00160613          	addi	a2,a2,1
	if (__n == 0)
   22c74:	fa060ee3          	beq	a2,zero,22c30 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xdc4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22c78:	00090593          	addi	a1,s2,0
   22c7c:	04010513          	addi	a0,sp,64
   22c80:	8d1f30ef          	jal	ra,16550 <memcpy@plt>
   22c84:	fadff06f          	jal	zero,22c30 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xdc4>
	  __throw_length_error(__N(__s));
   22c88:	00014517          	auipc	a0,0x14
   22c8c:	2d850513          	addi	a0,a0,728 # 36f60 <std::piecewise_construct+0x2b0>
   22c90:	f50f30ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   22c94:	00050413          	addi	s0,a0,0
   22c98:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   22c9c:	04010793          	addi	a5,sp,64
   22ca0:	00f50463          	beq	a0,a5,22ca8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe3c>
   22ca4:	80df30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22ca8:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   22cac:	02010793          	addi	a5,sp,32
   22cb0:	e8f50ce3          	beq	a0,a5,22b48 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xcdc>
   22cb4:	ffcf30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   22cb8:	e91ff06f          	jal	zero,22b48 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xcdc>
	return _M_append(__s, __n);
   22cbc:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   22cc0:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22cc4:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   22cc8:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22ccc:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   22cd0:	07278a63          	beq	a5,s2,22d44 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xed8>
      { _M_dataplus._M_p = __p; }
   22cd4:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   22cd8:	0104b783          	ld	a5,16(s1)
   22cdc:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   22ce0:	0084b783          	ld	a5,8(s1)
   22ce4:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   22ce8:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22cec:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   22cf0:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   22cf4:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   22cf8:	04010793          	addi	a5,sp,64
   22cfc:	00f50463          	beq	a0,a5,22d04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe98>
   22d00:	fb0f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22d04:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   22d08:	02010793          	addi	a5,sp,32
   22d0c:	00f50463          	beq	a0,a5,22d14 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xea8>
   22d10:	fa0f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
    for (T *p = base; p < end; ++p)
   22d14:	0a013503          	ld	a0,160(sp)
   22d18:	0a813783          	ld	a5,168(sp)
   22d1c:	00f57a63          	bgeu	a0,a5,22d30 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xec4>
   22d20:	00050793          	addi	a5,a0,0
   22d24:	00878793          	addi	a5,a5,8
   22d28:	0a813703          	ld	a4,168(sp)
   22d2c:	fee7ece3          	bltu	a5,a4,22d24 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xeb8>
    if ((char *)base != buf)
   22d30:	07010793          	addi	a5,sp,112
   22d34:	9cf50863          	beq	a0,a5,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
      delete[] (char *)base;
   22d38:	9c050663          	beq	a0,zero,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
   22d3c:	825f30ef          	jal	ra,16560 <operator delete[](void*)@plt>
   22d40:	9c4ff06f          	jal	zero,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22d44:	0084b603          	ld	a2,8(s1)
   22d48:	00160613          	addi	a2,a2,1
	if (__n == 0)
   22d4c:	f8060ae3          	beq	a2,zero,22ce0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe74>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22d50:	00090593          	addi	a1,s2,0
   22d54:	ffcf30ef          	jal	ra,16550 <memcpy@plt>
   22d58:	f89ff06f          	jal	zero,22ce0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe74>
    return v.as_string();
   22d5c:	00050593          	addi	a1,a0,0
   22d60:	00040513          	addi	a0,s0,0
   22d64:	c80fe0ef          	jal	ra,211e4 <dwarf::value::as_string[abi:cxx11]() const>
   22d68:	99cff06f          	jal	zero,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
  return "<unexpected value type " + to_string(v.get_type()) + ">";
   22d6c:	03010493          	addi	s1,sp,48
   22d70:	00048513          	addi	a0,s1,0
   22d74:	0b40c0ef          	jal	ra,2ee28 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   22d78:	01700713          	addi	a4,zero,23
   22d7c:	00014697          	auipc	a3,0x14
   22d80:	27468693          	addi	a3,a3,628 # 36ff0 <std::piecewise_construct+0x340>
   22d84:	00000613          	addi	a2,zero,0
   22d88:	00000593          	addi	a1,zero,0
   22d8c:	00048513          	addi	a0,s1,0
   22d90:	871f30ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   22d94:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22d98:	06010793          	addi	a5,sp,96
   22d9c:	04f13823          	sd	a5,80(sp)
      { return _M_dataplus._M_p; }
   22da0:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22da4:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   22da8:	05278663          	beq	a5,s2,22df4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xf88>
      { _M_dataplus._M_p = __p; }
   22dac:	04f13823          	sd	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   22db0:	01053783          	ld	a5,16(a0)
   22db4:	06f13023          	sd	a5,96(sp)
      { _M_string_length = __length; }
   22db8:	0084b783          	ld	a5,8(s1)
   22dbc:	04f13c23          	sd	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   22dc0:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22dc4:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   22dc8:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   22dcc:	05813703          	ld	a4,88(sp)
   22dd0:	fff00793          	addi	a5,zero,-1
   22dd4:	0027d793          	srli	a5,a5,0x2
   22dd8:	02f70c63          	beq	a4,a5,22e10 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xfa4>
	return _M_append(__s, __n);
   22ddc:	00100613          	addi	a2,zero,1
   22de0:	00014597          	auipc	a1,0x14
   22de4:	1b058593          	addi	a1,a1,432 # 36f90 <std::piecewise_construct+0x2e0>
   22de8:	05010513          	addi	a0,sp,80
   22dec:	d84f30ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22df0:	0580006f          	jal	zero,22e48 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xfdc>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22df4:	00853603          	ld	a2,8(a0)
   22df8:	00160613          	addi	a2,a2,1
	if (__n == 0)
   22dfc:	fa060ee3          	beq	a2,zero,22db8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xf4c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22e00:	00090593          	addi	a1,s2,0
   22e04:	06010513          	addi	a0,sp,96
   22e08:	f48f30ef          	jal	ra,16550 <memcpy@plt>
   22e0c:	fadff06f          	jal	zero,22db8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xf4c>
	  __throw_length_error(__N(__s));
   22e10:	00014517          	auipc	a0,0x14
   22e14:	15050513          	addi	a0,a0,336 # 36f60 <std::piecewise_construct+0x2b0>
   22e18:	dc8f30ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   22e1c:	00050413          	addi	s0,a0,0
   22e20:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22e24:	06010793          	addi	a5,sp,96
   22e28:	00f50463          	beq	a0,a5,22e30 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xfc4>
   22e2c:	e84f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22e30:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   22e34:	04010793          	addi	a5,sp,64
   22e38:	00f50463          	beq	a0,a5,22e40 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xfd4>
   22e3c:	e74f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   22e40:	00040513          	addi	a0,s0,0
   22e44:	84df30ef          	jal	ra,16690 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   22e48:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   22e4c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22e50:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   22e54:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22e58:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   22e5c:	05278663          	beq	a5,s2,22ea8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x103c>
      { _M_dataplus._M_p = __p; }
   22e60:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   22e64:	0104b783          	ld	a5,16(s1)
   22e68:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   22e6c:	0084b783          	ld	a5,8(s1)
   22e70:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   22e74:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22e78:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   22e7c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   22e80:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22e84:	06010793          	addi	a5,sp,96
   22e88:	00f50463          	beq	a0,a5,22e90 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1024>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   22e8c:	e24f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22e90:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   22e94:	04010793          	addi	a5,sp,64
   22e98:	00f51463          	bne	a0,a5,22ea0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1034>
   22e9c:	868ff06f          	jal	zero,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
   22ea0:	e10f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   22ea4:	860ff06f          	jal	zero,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22ea8:	0084b603          	ld	a2,8(s1)
   22eac:	00160613          	addi	a2,a2,1
	if (__n == 0)
   22eb0:	fa060ee3          	beq	a2,zero,22e6c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1000>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22eb4:	00090593          	addi	a1,s2,0
   22eb8:	e98f30ef          	jal	ra,16550 <memcpy@plt>
   22ebc:	fb1ff06f          	jal	zero,22e6c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1000>
      { return _M_dataplus._M_p; }
   22ec0:	00050413          	addi	s0,a0,0
   22ec4:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22ec8:	06010793          	addi	a5,sp,96
   22ecc:	00f50463          	beq	a0,a5,22ed4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1068>
   22ed0:	de0f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   22ed4:	00040513          	addi	a0,s0,0
   22ed8:	fb8f30ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   22edc:	00050413          	addi	s0,a0,0
   22ee0:	adcff06f          	jal	zero,221bc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x350>
   22ee4:	00050413          	addi	s0,a0,0
   22ee8:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22eec:	06010793          	addi	a5,sp,96
   22ef0:	00f50463          	beq	a0,a5,22ef8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x108c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   22ef4:	dbcf30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   22ef8:	00040513          	addi	a0,s0,0
   22efc:	f94f30ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   22f00:	00050413          	addi	s0,a0,0
   22f04:	e7cff06f          	jal	zero,22580 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x714>
   22f08:	00050413          	addi	s0,a0,0
   22f0c:	fd4ff06f          	jal	zero,226e0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x874>
   22f10:	00050413          	addi	s0,a0,0
   22f14:	92dff06f          	jal	zero,22840 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9d4>
   22f18:	00050413          	addi	s0,a0,0
   22f1c:	a85ff06f          	jal	zero,229a0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb34>
   22f20:	00050413          	addi	s0,a0,0
   22f24:	c15ff06f          	jal	zero,22b38 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xccc>
   22f28:	00050413          	addi	s0,a0,0
   22f2c:	d7dff06f          	jal	zero,22ca8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe3c>
   22f30:	00050413          	addi	s0,a0,0
   22f34:	c15ff06f          	jal	zero,22b48 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xcdc>
   22f38:	00050413          	addi	s0,a0,0
   22f3c:	ef5ff06f          	jal	zero,22e30 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xfc4>

0000000000022f40 <dwarf::value_type_mismatch::~value_type_mismatch()>:
class value_type_mismatch : public std::logic_error {
   22f40:	ff010113          	addi	sp,sp,-16
   22f44:	00113423          	sd	ra,8(sp)
   22f48:	0001f797          	auipc	a5,0x1f
   22f4c:	4f87b783          	ld	a5,1272(a5) # 42440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   22f50:	01078793          	addi	a5,a5,16
   22f54:	00f53023          	sd	a5,0(a0)
   22f58:	f48f30ef          	jal	ra,166a0 <std::logic_error::~logic_error()@plt>
   22f5c:	00813083          	ld	ra,8(sp)
   22f60:	01010113          	addi	sp,sp,16
   22f64:	00008067          	jalr	zero,0(ra)

0000000000022f68 <dwarf::value_type_mismatch::~value_type_mismatch()>:
   22f68:	ff010113          	addi	sp,sp,-16
   22f6c:	00113423          	sd	ra,8(sp)
   22f70:	00813023          	sd	s0,0(sp)
   22f74:	00050413          	addi	s0,a0,0
   22f78:	0001f797          	auipc	a5,0x1f
   22f7c:	4c87b783          	ld	a5,1224(a5) # 42440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   22f80:	01078793          	addi	a5,a5,16
   22f84:	00f53023          	sd	a5,0(a0)
   22f88:	f18f30ef          	jal	ra,166a0 <std::logic_error::~logic_error()@plt>
   22f8c:	00040513          	addi	a0,s0,0
   22f90:	d20f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
   22f94:	00813083          	ld	ra,8(sp)
   22f98:	00013403          	ld	s0,0(sp)
   22f9c:	01010113          	addi	sp,sp,16
   22fa0:	00008067          	jalr	zero,0(ra)

0000000000022fa4 <dwarf::cursor::address()>:
  taddr address() {
   22fa4:	f8010113          	addi	sp,sp,-128
   22fa8:	06113c23          	sd	ra,120(sp)
   22fac:	06813823          	sd	s0,112(sp)
   22fb0:	06913423          	sd	s1,104(sp)
   22fb4:	00050413          	addi	s0,a0,0
      { return _M_ptr; }
   22fb8:	00053703          	ld	a4,0(a0)
    switch (sec->addr_size) {
   22fbc:	02072783          	lw	a5,32(a4)
   22fc0:	00400693          	addi	a3,zero,4
   22fc4:	10d78063          	beq	a5,a3,230c4 <dwarf::cursor::address()+0x120>
   22fc8:	04f6ee63          	bltu	a3,a5,23024 <dwarf::cursor::address()+0x80>
   22fcc:	00100693          	addi	a3,zero,1
   22fd0:	0ad78c63          	beq	a5,a3,23088 <dwarf::cursor::address()+0xe4>
   22fd4:	00200693          	addi	a3,zero,2
   22fd8:	18d79c63          	bne	a5,a3,23170 <dwarf::cursor::address()+0x1cc>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   22fdc:	01073703          	ld	a4,16(a4)
   22fe0:	01053783          	ld	a5,16(a0)
   22fe4:	40f70633          	sub	a2,a4,a5
   22fe8:	00100693          	addi	a3,zero,1
   22fec:	00c6f463          	bgeu	a3,a2,22ff4 <dwarf::cursor::address()+0x50>
   22ff0:	00e7e663          	bltu	a5,a4,22ffc <dwarf::cursor::address()+0x58>
      underflow();
   22ff4:	00040513          	addi	a0,s0,0
   22ff8:	b05f90ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   22ffc:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   23000:	00043783          	ld	a5,0(s0)
   23004:	01c7a783          	lw	a5,28(a5)
   23008:	0a079463          	bne	a5,zero,230b0 <dwarf::cursor::address()+0x10c>
        val |= ((uint64_t)p[i]) << (i * 8);
   2300c:	00174783          	lbu	a5,1(a4)
   23010:	00879793          	slli	a5,a5,0x8
   23014:	00074683          	lbu	a3,0(a4)
   23018:	00d7e533          	or	a0,a5,a3
    pos += sizeof(T);
   2301c:	00270713          	addi	a4,a4,2
      return fixed<uint16_t>();
   23020:	39c0006f          	jal	zero,233bc <dwarf::cursor::address()+0x418>
    switch (sec->addr_size) {
   23024:	00800693          	addi	a3,zero,8
   23028:	14d79463          	bne	a5,a3,23170 <dwarf::cursor::address()+0x1cc>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2302c:	01073703          	ld	a4,16(a4)
   23030:	01053783          	ld	a5,16(a0)
   23034:	40f70633          	sub	a2,a4,a5
   23038:	00700693          	addi	a3,zero,7
   2303c:	00c6f463          	bgeu	a3,a2,23044 <dwarf::cursor::address()+0xa0>
   23040:	00e7e663          	bltu	a5,a4,2304c <dwarf::cursor::address()+0xa8>
      underflow();
   23044:	00040513          	addi	a0,s0,0
   23048:	ab5f90ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   2304c:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   23050:	00043783          	ld	a5,0(s0)
   23054:	01c7a783          	lw	a5,28(a5)
   23058:	0e079a63          	bne	a5,zero,2314c <dwarf::cursor::address()+0x1a8>
   2305c:	00070613          	addi	a2,a4,0
    uint64_t val = 0;
   23060:	00000513          	addi	a0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   23064:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   23068:	00064683          	lbu	a3,0(a2)
   2306c:	00f696b3          	sll	a3,a3,a5
   23070:	00d56533          	or	a0,a0,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   23074:	00160613          	addi	a2,a2,1
   23078:	0087879b          	addiw	a5,a5,8
   2307c:	feb796e3          	bne	a5,a1,23068 <dwarf::cursor::address()+0xc4>
    pos += sizeof(T);
   23080:	00870713          	addi	a4,a4,8
      return fixed<uint64_t>();
   23084:	3380006f          	jal	zero,233bc <dwarf::cursor::address()+0x418>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23088:	01073703          	ld	a4,16(a4)
   2308c:	01053783          	ld	a5,16(a0)
   23090:	00e7e463          	bltu	a5,a4,23098 <dwarf::cursor::address()+0xf4>
      underflow();
   23094:	a69f90ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   23098:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   2309c:	00043783          	ld	a5,0(s0)
   230a0:	01c7a783          	lw	a5,28(a5)
   230a4:	30078863          	beq	a5,zero,233b4 <dwarf::cursor::address()+0x410>
        val = (val << 8) | (uint64_t)p[i];
   230a8:	00074503          	lbu	a0,0(a4)
      for (unsigned i = 0; i < sizeof(T); i++)
   230ac:	30c0006f          	jal	zero,233b8 <dwarf::cursor::address()+0x414>
        val = (val << 8) | (uint64_t)p[i];
   230b0:	00074783          	lbu	a5,0(a4)
   230b4:	00879793          	slli	a5,a5,0x8
   230b8:	00174683          	lbu	a3,1(a4)
   230bc:	00d7e533          	or	a0,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   230c0:	f5dff06f          	jal	zero,2301c <dwarf::cursor::address()+0x78>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   230c4:	01073703          	ld	a4,16(a4)
   230c8:	01053783          	ld	a5,16(a0)
   230cc:	40f70633          	sub	a2,a4,a5
   230d0:	00300693          	addi	a3,zero,3
   230d4:	00c6f463          	bgeu	a3,a2,230dc <dwarf::cursor::address()+0x138>
   230d8:	00e7e663          	bltu	a5,a4,230e4 <dwarf::cursor::address()+0x140>
      underflow();
   230dc:	00040513          	addi	a0,s0,0
   230e0:	a1df90ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   230e4:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   230e8:	00043783          	ld	a5,0(s0)
   230ec:	01c7a783          	lw	a5,28(a5)
   230f0:	02079c63          	bne	a5,zero,23128 <dwarf::cursor::address()+0x184>
   230f4:	00070593          	addi	a1,a4,0
   230f8:	00000693          	addi	a3,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   230fc:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   23100:	0005c603          	lbu	a2,0(a1)
   23104:	00d61633          	sll	a2,a2,a3
   23108:	00c7e7b3          	or	a5,a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   2310c:	00158593          	addi	a1,a1,1
   23110:	0086869b          	addiw	a3,a3,8
   23114:	fea696e3          	bne	a3,a0,23100 <dwarf::cursor::address()+0x15c>
    pos += sizeof(T);
   23118:	00470713          	addi	a4,a4,4
   2311c:	02079513          	slli	a0,a5,0x20
   23120:	02055513          	srli	a0,a0,0x20
      return fixed<uint32_t>();
   23124:	2980006f          	jal	zero,233bc <dwarf::cursor::address()+0x418>
   23128:	00070693          	addi	a3,a4,0
   2312c:	00470593          	addi	a1,a4,4
    uint64_t val = 0;
   23130:	00000793          	addi	a5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   23134:	00879793          	slli	a5,a5,0x8
   23138:	0006c603          	lbu	a2,0(a3)
   2313c:	00f667b3          	or	a5,a2,a5
      for (unsigned i = 0; i < sizeof(T); i++)
   23140:	00168693          	addi	a3,a3,1
   23144:	fed598e3          	bne	a1,a3,23134 <dwarf::cursor::address()+0x190>
   23148:	fd1ff06f          	jal	zero,23118 <dwarf::cursor::address()+0x174>
   2314c:	00070793          	addi	a5,a4,0
   23150:	00870613          	addi	a2,a4,8
    uint64_t val = 0;
   23154:	00000513          	addi	a0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   23158:	00851513          	slli	a0,a0,0x8
   2315c:	0007c683          	lbu	a3,0(a5)
   23160:	00a6e533          	or	a0,a3,a0
      for (unsigned i = 0; i < sizeof(T); i++)
   23164:	00178793          	addi	a5,a5,1
   23168:	fec798e3          	bne	a5,a2,23158 <dwarf::cursor::address()+0x1b4>
   2316c:	f15ff06f          	jal	zero,23080 <dwarf::cursor::address()+0xdc>
          "address size " + std::to_string(sec->addr_size) + " not supported");
   23170:	01000513          	addi	a0,zero,16
   23174:	a5cf30ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   23178:	00050493          	addi	s1,a0,0
   2317c:	00043783          	ld	a5,0(s0)
   23180:	0207a403          	lw	s0,32(a5)
   23184:	00040793          	addi	a5,s0,0
      unsigned __n = 1;
   23188:	00100593          	addi	a1,zero,1
	  if (__value < (unsigned)__base) return __n;
   2318c:	00900893          	addi	a7,zero,9
	  if (__value < __b2) return __n + 1;
   23190:	06300813          	addi	a6,zero,99
	  if (__value < __b3) return __n + 2;
   23194:	3e700513          	addi	a0,zero,999
	  if (__value < __b4) return __n + 3;
   23198:	00002737          	lui	a4,0x2
   2319c:	70f70613          	addi	a2,a4,1807 # 270f <__abi_tag-0xdb85>
	  __value /= __b4;
   231a0:	71070713          	addi	a4,a4,1808
	  if (__value < (unsigned)__base) return __n;
   231a4:	00f8f663          	bgeu	a7,a5,231b0 <dwarf::cursor::address()+0x20c>
	  if (__value < __b2) return __n + 1;
   231a8:	08f86e63          	bltu	a6,a5,23244 <dwarf::cursor::address()+0x2a0>
   231ac:	0015859b          	addiw	a1,a1,1
	: allocator_type(__a), _M_p(__dat) { }
   231b0:	01010793          	addi	a5,sp,16
   231b4:	00f13023          	sd	a5,0(sp)
      { _M_construct(__n, __c); }
   231b8:	00000613          	addi	a2,zero,0
   231bc:	02059593          	slli	a1,a1,0x20
   231c0:	0205d593          	srli	a1,a1,0x20
   231c4:	00010513          	addi	a0,sp,0
   231c8:	b48f30ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   231cc:	00013603          	ld	a2,0(sp)
      unsigned __pos = __len - 1;
   231d0:	00813703          	ld	a4,8(sp)
   231d4:	fff7071b          	addiw	a4,a4,-1
      while (__val >= 100)
   231d8:	06300893          	addi	a7,zero,99
	  auto const __num = (__val % 100) * 2;
   231dc:	06400813          	addi	a6,zero,100
	  __first[__pos] = __digits[__num + 1];
   231e0:	0001f517          	auipc	a0,0x1f
   231e4:	17853503          	ld	a0,376(a0) # 42358 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb7a0>
      while (__val >= 100)
   231e8:	0888e663          	bltu	a7,s0,23274 <dwarf::cursor::address()+0x2d0>
      if (__val >= 10)
   231ec:	00900793          	addi	a5,zero,9
   231f0:	0e87f063          	bgeu	a5,s0,232d0 <dwarf::cursor::address()+0x32c>
	  auto const __num = __val * 2;
   231f4:	0014141b          	slliw	s0,s0,0x1
	  __first[1] = __digits[__num + 1];
   231f8:	0001f717          	auipc	a4,0x1f
   231fc:	16073703          	ld	a4,352(a4) # 42358 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb7a0>
   23200:	0014079b          	addiw	a5,s0,1
   23204:	02079793          	slli	a5,a5,0x20
   23208:	0207d793          	srli	a5,a5,0x20
   2320c:	00f707b3          	add	a5,a4,a5
   23210:	0007c783          	lbu	a5,0(a5)
   23214:	00f600a3          	sb	a5,1(a2)
	  __first[0] = __digits[__num];
   23218:	02041413          	slli	s0,s0,0x20
   2321c:	02045413          	srli	s0,s0,0x20
   23220:	00870733          	add	a4,a4,s0
   23224:	00074783          	lbu	a5,0(a4)
   23228:	00f60023          	sb	a5,0(a2)
    { return std::move(__rhs.insert(0, __lhs)); }
   2322c:	00014617          	auipc	a2,0x14
   23230:	c2c60613          	addi	a2,a2,-980 # 36e58 <std::piecewise_construct+0x1a8>
   23234:	00000593          	addi	a1,zero,0
   23238:	00010513          	addi	a0,sp,0
   2323c:	904f30ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   23240:	09c0006f          	jal	zero,232dc <dwarf::cursor::address()+0x338>
	  if (__value < __b3) return __n + 2;
   23244:	00f56663          	bltu	a0,a5,23250 <dwarf::cursor::address()+0x2ac>
   23248:	0025859b          	addiw	a1,a1,2
   2324c:	f65ff06f          	jal	zero,231b0 <dwarf::cursor::address()+0x20c>
	  if (__value < __b4) return __n + 3;
   23250:	02079693          	slli	a3,a5,0x20
   23254:	0206d693          	srli	a3,a3,0x20
   23258:	00f66663          	bltu	a2,a5,23264 <dwarf::cursor::address()+0x2c0>
   2325c:	0035859b          	addiw	a1,a1,3
   23260:	f51ff06f          	jal	zero,231b0 <dwarf::cursor::address()+0x20c>
	  __value /= __b4;
   23264:	02e6d7b3          	divu	a5,a3,a4
   23268:	0007879b          	addiw	a5,a5,0
	  __n += 4;
   2326c:	0045859b          	addiw	a1,a1,4
	  if (__value < (unsigned)__base) return __n;
   23270:	f35ff06f          	jal	zero,231a4 <dwarf::cursor::address()+0x200>
	  auto const __num = (__val % 100) * 2;
   23274:	030477bb          	remuw	a5,s0,a6
   23278:	0017979b          	slliw	a5,a5,0x1
	  __val /= 100;
   2327c:	0304543b          	divuw	s0,s0,a6
	  __first[__pos] = __digits[__num + 1];
   23280:	02071593          	slli	a1,a4,0x20
   23284:	0205d593          	srli	a1,a1,0x20
   23288:	00b605b3          	add	a1,a2,a1
   2328c:	0017869b          	addiw	a3,a5,1
   23290:	02069693          	slli	a3,a3,0x20
   23294:	0206d693          	srli	a3,a3,0x20
   23298:	00d506b3          	add	a3,a0,a3
   2329c:	0006c683          	lbu	a3,0(a3)
   232a0:	00d58023          	sb	a3,0(a1)
	  __first[__pos - 1] = __digits[__num];
   232a4:	fff7069b          	addiw	a3,a4,-1
   232a8:	02069693          	slli	a3,a3,0x20
   232ac:	0206d693          	srli	a3,a3,0x20
   232b0:	00d606b3          	add	a3,a2,a3
   232b4:	02079793          	slli	a5,a5,0x20
   232b8:	0207d793          	srli	a5,a5,0x20
   232bc:	00f507b3          	add	a5,a0,a5
   232c0:	0007c783          	lbu	a5,0(a5)
   232c4:	00f68023          	sb	a5,0(a3)
	  __pos -= 2;
   232c8:	ffe7071b          	addiw	a4,a4,-2
   232cc:	f1dff06f          	jal	zero,231e8 <dwarf::cursor::address()+0x244>
	__first[0] = '0' + __val;
   232d0:	0304079b          	addiw	a5,s0,48
   232d4:	0ff7f793          	andi	a5,a5,255
   232d8:	f51ff06f          	jal	zero,23228 <dwarf::cursor::address()+0x284>
   232dc:	00050593          	addi	a1,a0,0
   232e0:	02010413          	addi	s0,sp,32
   232e4:	00040513          	addi	a0,s0,0
   232e8:	928f30ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   232ec:	00014597          	auipc	a1,0x14
   232f0:	b7c58593          	addi	a1,a1,-1156 # 36e68 <std::piecewise_construct+0x1b8>
   232f4:	00040513          	addi	a0,s0,0
   232f8:	c48f30ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   232fc:	00050593          	addi	a1,a0,0
   23300:	04010413          	addi	s0,sp,64
   23304:	00040513          	addi	a0,s0,0
   23308:	908f30ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      throw std::runtime_error(
   2330c:	00040593          	addi	a1,s0,0
   23310:	00048513          	addi	a0,s1,0
   23314:	b0cf30ef          	jal	ra,16620 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   23318:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2331c:	05010793          	addi	a5,sp,80
   23320:	00f50463          	beq	a0,a5,23328 <dwarf::cursor::address()+0x384>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   23324:	98cf30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23328:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2332c:	03010793          	addi	a5,sp,48
   23330:	00f50463          	beq	a0,a5,23338 <dwarf::cursor::address()+0x394>
   23334:	97cf30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23338:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2333c:	01010793          	addi	a5,sp,16
   23340:	00f50463          	beq	a0,a5,23348 <dwarf::cursor::address()+0x3a4>
   23344:	96cf30ef          	jal	ra,164b0 <operator delete(void*)@plt>
          "address size " + std::to_string(sec->addr_size) + " not supported");
   23348:	0001f617          	auipc	a2,0x1f
   2334c:	0b863603          	ld	a2,184(a2) # 42400 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   23350:	0001f597          	auipc	a1,0x1f
   23354:	2a05b583          	ld	a1,672(a1) # 425f0 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   23358:	00048513          	addi	a0,s1,0
   2335c:	b04f30ef          	jal	ra,16660 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   23360:	00050413          	addi	s0,a0,0
   23364:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   23368:	05010793          	addi	a5,sp,80
   2336c:	00f50463          	beq	a0,a5,23374 <dwarf::cursor::address()+0x3d0>
   23370:	940f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23374:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   23378:	03010793          	addi	a5,sp,48
   2337c:	00f50463          	beq	a0,a5,23384 <dwarf::cursor::address()+0x3e0>
   23380:	930f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23384:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   23388:	01010793          	addi	a5,sp,16
   2338c:	00f50463          	beq	a0,a5,23394 <dwarf::cursor::address()+0x3f0>
   23390:	920f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
   23394:	00048513          	addi	a0,s1,0
   23398:	8d8f30ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2339c:	00040513          	addi	a0,s0,0
   233a0:	af0f30ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   233a4:	00050413          	addi	s0,a0,0
   233a8:	fcdff06f          	jal	zero,23374 <dwarf::cursor::address()+0x3d0>
   233ac:	00050413          	addi	s0,a0,0
   233b0:	fd5ff06f          	jal	zero,23384 <dwarf::cursor::address()+0x3e0>
        val |= ((uint64_t)p[i]) << (i * 8);
   233b4:	00074503          	lbu	a0,0(a4)
    pos += sizeof(T);
   233b8:	00170713          	addi	a4,a4,1
   233bc:	00e43823          	sd	a4,16(s0)
  }
   233c0:	07813083          	ld	ra,120(sp)
   233c4:	07013403          	ld	s0,112(sp)
   233c8:	06813483          	ld	s1,104(sp)
   233cc:	08010113          	addi	sp,sp,128
   233d0:	00008067          	jalr	zero,0(ra)

00000000000233d4 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)>:
    __to_chars_len(_Tp __value, int __base = 10) noexcept
   233d4:	00050793          	addi	a5,a0,0
      const unsigned __b2 = __base  * __base;
   233d8:	02b586bb          	mulw	a3,a1,a1
      const unsigned __b3 = __b2 * __base;
   233dc:	02b6863b          	mulw	a2,a3,a1
      const unsigned long __b4 = __b3 * __base;
   233e0:	02b6073b          	mulw	a4,a2,a1
   233e4:	02071713          	slli	a4,a4,0x20
   233e8:	02075713          	srli	a4,a4,0x20
	  if (__value < (unsigned)__base) return __n;
   233ec:	02059593          	slli	a1,a1,0x20
   233f0:	0205d593          	srli	a1,a1,0x20
   233f4:	06b56463          	bltu	a0,a1,2345c <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x88>
	  if (__value < __b2) return __n + 1;
   233f8:	02069693          	slli	a3,a3,0x20
   233fc:	0206d693          	srli	a3,a3,0x20
   23400:	02d56c63          	bltu	a0,a3,23438 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x64>
	  if (__value < __b3) return __n + 2;
   23404:	02061613          	slli	a2,a2,0x20
   23408:	02065613          	srli	a2,a2,0x20
   2340c:	02c56c63          	bltu	a0,a2,23444 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x70>
	  if (__value < __b4) return __n + 3;
   23410:	04e56063          	bltu	a0,a4,23450 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x7c>
      unsigned __n = 1;
   23414:	00100513          	addi	a0,zero,1
	  __value /= __b4;
   23418:	02e7d7b3          	divu	a5,a5,a4
	  __n += 4;
   2341c:	0045051b          	addiw	a0,a0,4
	  if (__value < (unsigned)__base) return __n;
   23420:	02b7ec63          	bltu	a5,a1,23458 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x84>
	  if (__value < __b2) return __n + 1;
   23424:	00d7ec63          	bltu	a5,a3,2343c <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x68>
	  if (__value < __b3) return __n + 2;
   23428:	02c7e063          	bltu	a5,a2,23448 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x74>
	  if (__value < __b4) return __n + 3;
   2342c:	fee7f6e3          	bgeu	a5,a4,23418 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x44>
   23430:	0035051b          	addiw	a0,a0,3
   23434:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   23438:	00100513          	addi	a0,zero,1
	  if (__value < __b2) return __n + 1;
   2343c:	0015051b          	addiw	a0,a0,1
   23440:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   23444:	00100513          	addi	a0,zero,1
	  if (__value < __b3) return __n + 2;
   23448:	0025051b          	addiw	a0,a0,2
   2344c:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   23450:	00100513          	addi	a0,zero,1
   23454:	fddff06f          	jal	zero,23430 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x5c>
   23458:	00008067          	jalr	zero,0(ra)
   2345c:	00100513          	addi	a0,zero,1
    }
   23460:	00008067          	jalr	zero,0(ra)

0000000000023464 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)>:
      unsigned __pos = __len - 1;
   23464:	fff5859b          	addiw	a1,a1,-1
      while (__val >= 100)
   23468:	06300793          	addi	a5,zero,99
   2346c:	06c7f063          	bgeu	a5,a2,234cc <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x68>
	  auto const __num = (__val % 100) * 2;
   23470:	06400693          	addi	a3,zero,100
	  __first[__pos] = __digits[__num + 1];
   23474:	0001fe17          	auipc	t3,0x1f
   23478:	fece3e03          	ld	t3,-20(t3) # 42460 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb2b8>
      while (__val >= 100)
   2347c:	00002337          	lui	t1,0x2
   23480:	70f30313          	addi	t1,t1,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   23484:	02d677b3          	remu	a5,a2,a3
   23488:	00179793          	slli	a5,a5,0x1
   2348c:	00060813          	addi	a6,a2,0
	  __val /= 100;
   23490:	02d65633          	divu	a2,a2,a3
	  __first[__pos] = __digits[__num + 1];
   23494:	02059713          	slli	a4,a1,0x20
   23498:	02075713          	srli	a4,a4,0x20
   2349c:	00e50733          	add	a4,a0,a4
   234a0:	00fe07b3          	add	a5,t3,a5
   234a4:	0017c883          	lbu	a7,1(a5)
   234a8:	01170023          	sb	a7,0(a4)
	  __first[__pos - 1] = __digits[__num];
   234ac:	fff5871b          	addiw	a4,a1,-1
   234b0:	02071713          	slli	a4,a4,0x20
   234b4:	02075713          	srli	a4,a4,0x20
   234b8:	00e50733          	add	a4,a0,a4
   234bc:	0007c783          	lbu	a5,0(a5)
   234c0:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   234c4:	ffe5859b          	addiw	a1,a1,-2
      while (__val >= 100)
   234c8:	fb036ee3          	bltu	t1,a6,23484 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x20>
      if (__val >= 10)
   234cc:	00900793          	addi	a5,zero,9
   234d0:	02c7f463          	bgeu	a5,a2,234f8 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x94>
	  auto const __num = __val * 2;
   234d4:	00161613          	slli	a2,a2,0x1
	  __first[1] = __digits[__num + 1];
   234d8:	0001f797          	auipc	a5,0x1f
   234dc:	f887b783          	ld	a5,-120(a5) # 42460 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb2b8>
   234e0:	00c787b3          	add	a5,a5,a2
   234e4:	0017c703          	lbu	a4,1(a5)
   234e8:	00e500a3          	sb	a4,1(a0)
	  __first[0] = __digits[__num];
   234ec:	0007c603          	lbu	a2,0(a5)
   234f0:	00c50023          	sb	a2,0(a0)
    }
   234f4:	00008067          	jalr	zero,0(ra)
	__first[0] = '0' + __val;
   234f8:	0306061b          	addiw	a2,a2,48
   234fc:	0ff67613          	andi	a2,a2,255
   23500:	ff1ff06f          	jal	zero,234f0 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x8c>

0000000000023504 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)>:
    }
  }
  throw format_error("unknown attribute form " + to_string(form));
}

attribute_spec::attribute_spec(DW_AT name, DW_FORM form)
   23504:	fa010113          	addi	sp,sp,-96
   23508:	04113c23          	sd	ra,88(sp)
   2350c:	04813823          	sd	s0,80(sp)
   23510:	04913423          	sd	s1,72(sp)
   23514:	05213023          	sd	s2,64(sp)
   23518:	00060413          	addi	s0,a2,0
    : name(name), form(form), type(resolve_type(name, form)) {}
   2351c:	00b52023          	sw	a1,0(a0)
   23520:	00c52223          	sw	a2,4(a0)
  switch (form) {
   23524:	02000793          	addi	a5,zero,32
   23528:	20c7ec63          	bltu	a5,a2,23740 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x23c>
   2352c:	00058493          	addi	s1,a1,0
   23530:	00261793          	slli	a5,a2,0x2
   23534:	00014717          	auipc	a4,0x14
   23538:	d8c70713          	addi	a4,a4,-628 # 372c0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x118>
   2353c:	00e787b3          	add	a5,a5,a4
   23540:	0007a783          	lw	a5,0(a5)
   23544:	00e787b3          	add	a5,a5,a4
   23548:	00078067          	jalr	zero,0(a5)
    return value::type::constant;
   2354c:	00300413          	addi	s0,zero,3
   23550:	15c0006f          	jal	zero,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    switch (name) {
   23554:	05100793          	addi	a5,zero,81
   23558:	00200413          	addi	s0,zero,2
   2355c:	14b7c863          	blt	a5,a1,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   23560:	01800793          	addi	a5,zero,24
   23564:	02b7d463          	bge	a5,a1,2358c <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x88>
   23568:	fe75859b          	addiw	a1,a1,-25
   2356c:	00014797          	auipc	a5,0x14
   23570:	e147b783          	ld	a5,-492(a5) # 37380 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1d8>
   23574:	00b7d7b3          	srl	a5,a5,a1
   23578:	0017f793          	andi	a5,a5,1
      return value::type::exprloc;
   2357c:	00600413          	addi	s0,zero,6
    switch (name) {
   23580:	12079663          	bne	a5,zero,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   23584:	00200413          	addi	s0,zero,2
   23588:	1240006f          	jal	zero,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   2358c:	00200793          	addi	a5,zero,2
   23590:	24f58463          	beq	a1,a5,237d8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2d4>
   23594:	ff55859b          	addiw	a1,a1,-11
   23598:	10b7ea63          	bltu	a5,a1,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
      return value::type::exprloc;
   2359c:	00600413          	addi	s0,zero,6
   235a0:	10c0006f          	jal	zero,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    switch (name) {
   235a4:	05500793          	addi	a5,zero,85
   235a8:	22b7cc63          	blt	a5,a1,237e0 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2dc>
   235ac:	01800793          	addi	a5,zero,24
   235b0:	02b7d263          	bge	a5,a1,235d4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0xd0>
   235b4:	fe75871b          	addiw	a4,a1,-25
   235b8:	00014797          	auipc	a5,0x14
   235bc:	dd07b783          	ld	a5,-560(a5) # 37388 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1e0>
   235c0:	00e7d7b3          	srl	a5,a5,a4
   235c4:	0017f793          	andi	a5,a5,1
   235c8:	06079463          	bne	a5,zero,23630 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x12c>
   235cc:	00300413          	addi	s0,zero,3
   235d0:	0dc0006f          	jal	zero,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   235d4:	00200793          	addi	a5,zero,2
   235d8:	20f58863          	beq	a1,a5,237e8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2e4>
   235dc:	01000793          	addi	a5,zero,16
   235e0:	00300413          	addi	s0,zero,3
   235e4:	0cf59463          	bne	a1,a5,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
      return value::type::line;
   235e8:	00800413          	addi	s0,zero,8
   235ec:	0c00006f          	jal	zero,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    return value::type::sconstant;
   235f0:	00500413          	addi	s0,zero,5
   235f4:	0b80006f          	jal	zero,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    return value::type::exprloc;
   235f8:	00600413          	addi	s0,zero,6
   235fc:	0b00006f          	jal	zero,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    return value::type::flag;
   23600:	00700413          	addi	s0,zero,7
   23604:	0a80006f          	jal	zero,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    return value::type::reference;
   23608:	00c00413          	addi	s0,zero,12
   2360c:	0a00006f          	jal	zero,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    return value::type::string;
   23610:	00d00413          	addi	s0,zero,13
   23614:	0980006f          	jal	zero,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    return value::type::invalid;
   23618:	00000413          	addi	s0,zero,0
   2361c:	0900006f          	jal	zero,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    switch (name) {
   23620:	05500793          	addi	a5,zero,85
   23624:	06b7ca63          	blt	a5,a1,23698 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x194>
   23628:	01800793          	addi	a5,zero,24
   2362c:	04b7da63          	bge	a5,a1,23680 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x17c>
   23630:	fe74871b          	addiw	a4,s1,-25
   23634:	00100793          	addi	a5,zero,1
   23638:	00e797b3          	sll	a5,a5,a4
   2363c:	00014717          	auipc	a4,0x14
   23640:	d5473703          	ld	a4,-684(a4) # 37390 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1e8>
   23644:	00e7f733          	and	a4,a5,a4
   23648:	1a071863          	bne	a4,zero,237f8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2f4>
   2364c:	00014717          	auipc	a4,0x14
   23650:	d4c73703          	ld	a4,-692(a4) # 37398 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f0>
   23654:	00e7f7b3          	and	a5,a5,a4
   23658:	1a079463          	bne	a5,zero,23800 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2fc>
   2365c:	04300793          	addi	a5,zero,67
   23660:	1af48463          	beq	s1,a5,23808 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x304>
                         to_string(name));
   23664:	01000513          	addi	a0,zero,16
   23668:	d69f20ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2366c:	00050913          	addi	s2,a0,0
   23670:	00048593          	addi	a1,s1,0
   23674:	00010513          	addi	a0,sp,0
   23678:	0700e0ef          	jal	ra,316e8 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
   2367c:	04c0006f          	jal	zero,236c8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1c4>
    switch (name) {
   23680:	00200793          	addi	a5,zero,2
   23684:	16f58663          	beq	a1,a5,237f0 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2ec>
   23688:	01000793          	addi	a5,zero,16
      return value::type::line;
   2368c:	00800413          	addi	s0,zero,8
    switch (name) {
   23690:	00f58e63          	beq	a1,a5,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   23694:	fd1ff06f          	jal	zero,23664 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x160>
   23698:	ffffe7b7          	lui	a5,0xffffe
   2369c:	00b787bb          	addw	a5,a5,a1
   236a0:	00002737          	lui	a4,0x2
      return value::type::invalid;
   236a4:	00000413          	addi	s0,zero,0
    switch (name) {
   236a8:	fae7fee3          	bgeu	a5,a4,23664 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x160>
    : name(name), form(form), type(resolve_type(name, form)) {}
   236ac:	00852423          	sw	s0,8(a0)
   236b0:	05813083          	ld	ra,88(sp)
   236b4:	05013403          	ld	s0,80(sp)
   236b8:	04813483          	ld	s1,72(sp)
   236bc:	04013903          	ld	s2,64(sp)
   236c0:	06010113          	addi	sp,sp,96
   236c4:	00008067          	jalr	zero,0(ra)
    { return std::move(__rhs.insert(0, __lhs)); }
   236c8:	00014617          	auipc	a2,0x14
   236cc:	bb060613          	addi	a2,a2,-1104 # 37278 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0xd0>
   236d0:	00000593          	addi	a1,zero,0
   236d4:	00010513          	addi	a0,sp,0
   236d8:	c69f20ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   236dc:	00050593          	addi	a1,a0,0
   236e0:	02010413          	addi	s0,sp,32
   236e4:	00040513          	addi	a0,s0,0
   236e8:	d29f20ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   236ec:	00040593          	addi	a1,s0,0
   236f0:	00090513          	addi	a0,s2,0
   236f4:	e4df20ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   236f8:	0001f797          	auipc	a5,0x1f
   236fc:	e587b783          	ld	a5,-424(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   23700:	01078793          	addi	a5,a5,16
   23704:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   23708:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2370c:	03010793          	addi	a5,sp,48
   23710:	00f50463          	beq	a0,a5,23718 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x214>
   23714:	d9df20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23718:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2371c:	01010793          	addi	a5,sp,16
   23720:	00f50463          	beq	a0,a5,23728 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x224>
   23724:	d8df20ef          	jal	ra,164b0 <operator delete(void*)@plt>
                         to_string(name));
   23728:	0001f617          	auipc	a2,0x1f
   2372c:	c5063603          	ld	a2,-944(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   23730:	0001f597          	auipc	a1,0x1f
   23734:	b785b583          	ld	a1,-1160(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   23738:	00090513          	addi	a0,s2,0
   2373c:	f25f20ef          	jal	ra,16660 <__cxa_throw@plt>
  throw format_error("unknown attribute form " + to_string(form));
   23740:	01000513          	addi	a0,zero,16
   23744:	c8df20ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   23748:	00050493          	addi	s1,a0,0
   2374c:	00040593          	addi	a1,s0,0
   23750:	00010513          	addi	a0,sp,0
   23754:	2e40c0ef          	jal	ra,2fa38 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)>
    { return std::move(__rhs.insert(0, __lhs)); }
   23758:	00014617          	auipc	a2,0x14
   2375c:	b5060613          	addi	a2,a2,-1200 # 372a8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x100>
   23760:	00000593          	addi	a1,zero,0
   23764:	00010513          	addi	a0,sp,0
   23768:	bd9f20ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2376c:	00050593          	addi	a1,a0,0
   23770:	02010413          	addi	s0,sp,32
   23774:	00040513          	addi	a0,s0,0
   23778:	c99f20ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   2377c:	00040593          	addi	a1,s0,0
   23780:	00048513          	addi	a0,s1,0
   23784:	dbdf20ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   23788:	0001f797          	auipc	a5,0x1f
   2378c:	dc87b783          	ld	a5,-568(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   23790:	01078793          	addi	a5,a5,16
   23794:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   23798:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2379c:	03010793          	addi	a5,sp,48
   237a0:	00f50463          	beq	a0,a5,237a8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2a4>
   237a4:	d0df20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   237a8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   237ac:	01010793          	addi	a5,sp,16
   237b0:	00f50463          	beq	a0,a5,237b8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2b4>
   237b4:	cfdf20ef          	jal	ra,164b0 <operator delete(void*)@plt>
   237b8:	0001f617          	auipc	a2,0x1f
   237bc:	bc063603          	ld	a2,-1088(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   237c0:	0001f597          	auipc	a1,0x1f
   237c4:	ae85b583          	ld	a1,-1304(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   237c8:	00048513          	addi	a0,s1,0
   237cc:	e95f20ef          	jal	ra,16660 <__cxa_throw@plt>
  switch (form) {
   237d0:	00400413          	addi	s0,zero,4
   237d4:	ed9ff06f          	jal	zero,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
      return value::type::exprloc;
   237d8:	00600413          	addi	s0,zero,6
   237dc:	ed1ff06f          	jal	zero,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   237e0:	00300413          	addi	s0,zero,3
   237e4:	ec9ff06f          	jal	zero,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   237e8:	00900413          	addi	s0,zero,9
   237ec:	ec1ff06f          	jal	zero,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    switch (name) {
   237f0:	00900413          	addi	s0,zero,9
   237f4:	eb9ff06f          	jal	zero,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   237f8:	00900413          	addi	s0,zero,9
   237fc:	eb1ff06f          	jal	zero,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
      return value::type::rangelist;
   23800:	00b00413          	addi	s0,zero,11
   23804:	ea9ff06f          	jal	zero,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
      return value::type::mac;
   23808:	00a00413          	addi	s0,zero,10
   2380c:	ea1ff06f          	jal	zero,236ac <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
      { return _M_dataplus._M_p; }
   23810:	00050413          	addi	s0,a0,0
   23814:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   23818:	03010793          	addi	a5,sp,48
   2381c:	00f50463          	beq	a0,a5,23824 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x320>
   23820:	c91f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23824:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   23828:	01010793          	addi	a5,sp,16
   2382c:	00f50463          	beq	a0,a5,23834 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x330>
   23830:	c81f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
                         to_string(name));
   23834:	00090513          	addi	a0,s2,0
   23838:	c39f20ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2383c:	00040513          	addi	a0,s0,0
   23840:	e51f20ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   23844:	00050413          	addi	s0,a0,0
   23848:	fddff06f          	jal	zero,23824 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x320>
   2384c:	00050413          	addi	s0,a0,0
   23850:	fe5ff06f          	jal	zero,23834 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x330>
   23854:	00050413          	addi	s0,a0,0
   23858:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2385c:	03010793          	addi	a5,sp,48
   23860:	00f50463          	beq	a0,a5,23868 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x364>
   23864:	c4df20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23868:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2386c:	01010793          	addi	a5,sp,16
   23870:	00f50463          	beq	a0,a5,23878 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x374>
   23874:	c3df20ef          	jal	ra,164b0 <operator delete(void*)@plt>
  throw format_error("unknown attribute form " + to_string(form));
   23878:	00048513          	addi	a0,s1,0
   2387c:	bf5f20ef          	jal	ra,16470 <__cxa_free_exception@plt>
   23880:	00040513          	addi	a0,s0,0
   23884:	e0df20ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   23888:	00050413          	addi	s0,a0,0
   2388c:	fddff06f          	jal	zero,23868 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x364>
   23890:	00050413          	addi	s0,a0,0
   23894:	fe5ff06f          	jal	zero,23878 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x374>

0000000000023898 <dwarf::abbrev_entry::read(dwarf::cursor*)>:

bool abbrev_entry::read(cursor *cur) {
   23898:	fb010113          	addi	sp,sp,-80
   2389c:	04113423          	sd	ra,72(sp)
   238a0:	04813023          	sd	s0,64(sp)
   238a4:	02913c23          	sd	s1,56(sp)
   238a8:	03213823          	sd	s2,48(sp)
   238ac:	03313423          	sd	s3,40(sp)
   238b0:	03413023          	sd	s4,32(sp)
   238b4:	01513c23          	sd	s5,24(sp)
   238b8:	01613823          	sd	s6,16(sp)
   238bc:	00050493          	addi	s1,a0,0
   238c0:	00058413          	addi	s0,a1,0
      { _M_erase_at_end(this->_M_impl._M_start); }
   238c4:	01053783          	ld	a5,16(a0)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   238c8:	01853703          	ld	a4,24(a0)
   238cc:	00e78463          	beq	a5,a4,238d4 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x3c>
	    this->_M_impl._M_finish = __pos;
   238d0:	00f53c23          	sd	a5,24(a0)
    while (pos < sec->end) {
   238d4:	01043783          	ld	a5,16(s0)
   238d8:	00043503          	ld	a0,0(s0)
   238dc:	01053703          	ld	a4,16(a0)
   238e0:	02e7fe63          	bgeu	a5,a4,2391c <dwarf::abbrev_entry::read(dwarf::cursor*)+0x84>
   238e4:	00000593          	addi	a1,zero,0
   238e8:	00000613          	addi	a2,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   238ec:	00178793          	addi	a5,a5,1
   238f0:	00f43823          	sd	a5,16(s0)
   238f4:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   238f8:	07f77693          	andi	a3,a4,127
   238fc:	00c696b3          	sll	a3,a3,a2
   23900:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   23904:	0187171b          	slliw	a4,a4,0x18
   23908:	4187571b          	sraiw	a4,a4,0x18
   2390c:	04075463          	bge	a4,zero,23954 <dwarf::abbrev_entry::read(dwarf::cursor*)+0xbc>
      shift += 7;
   23910:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   23914:	01053703          	ld	a4,16(a0)
   23918:	fce7eae3          	bltu	a5,a4,238ec <dwarf::abbrev_entry::read(dwarf::cursor*)+0x54>
    underflow();
   2391c:	00040513          	addi	a0,s0,0
   23920:	9dcf90ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
  attributes.clear();

  // Section 7.5.3
  code = cur->uleb128();
   23924:	0004b023          	sd	zero,0(s1)
  if (!code)
    return false;
   23928:	00000513          	addi	a0,zero,0
      break;
    attributes.push_back(attribute_spec(name, form));
  }
  attributes.shrink_to_fit();
  return true;
}
   2392c:	04813083          	ld	ra,72(sp)
   23930:	04013403          	ld	s0,64(sp)
   23934:	03813483          	ld	s1,56(sp)
   23938:	03013903          	ld	s2,48(sp)
   2393c:	02813983          	ld	s3,40(sp)
   23940:	02013a03          	ld	s4,32(sp)
   23944:	01813a83          	ld	s5,24(sp)
   23948:	01013b03          	ld	s6,16(sp)
   2394c:	05010113          	addi	sp,sp,80
   23950:	00008067          	jalr	zero,0(ra)
  code = cur->uleb128();
   23954:	00b4b023          	sd	a1,0(s1)
  if (!code)
   23958:	1a058863          	beq	a1,zero,23b08 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x270>
    while (pos < sec->end) {
   2395c:	01043783          	ld	a5,16(s0)
   23960:	00043503          	ld	a0,0(s0)
   23964:	01053703          	ld	a4,16(a0)
   23968:	02e7fe63          	bgeu	a5,a4,239a4 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x10c>
    std::uint64_t result = 0;
   2396c:	00000593          	addi	a1,zero,0
    int shift = 0;
   23970:	00000613          	addi	a2,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   23974:	00178793          	addi	a5,a5,1
   23978:	00f43823          	sd	a5,16(s0)
   2397c:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   23980:	07f77693          	andi	a3,a4,127
   23984:	00c696b3          	sll	a3,a3,a2
   23988:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   2398c:	0187171b          	slliw	a4,a4,0x18
   23990:	4187571b          	sraiw	a4,a4,0x18
   23994:	00075e63          	bge	a4,zero,239b0 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x118>
      shift += 7;
   23998:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   2399c:	01053703          	ld	a4,16(a0)
   239a0:	fce7eae3          	bltu	a5,a4,23974 <dwarf::abbrev_entry::read(dwarf::cursor*)+0xdc>
    underflow();
   239a4:	00040513          	addi	a0,s0,0
   239a8:	954f90ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    return 0;
   239ac:	00000593          	addi	a1,zero,0
  tag = (DW_TAG)cur->uleb128();
   239b0:	00b4a423          	sw	a1,8(s1)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   239b4:	00043783          	ld	a5,0(s0)
   239b8:	0107b703          	ld	a4,16(a5)
   239bc:	01043783          	ld	a5,16(s0)
   239c0:	00e7e663          	bltu	a5,a4,239cc <dwarf::abbrev_entry::read(dwarf::cursor*)+0x134>
      underflow();
   239c4:	00040513          	addi	a0,s0,0
   239c8:	934f90ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   239cc:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   239d0:	00043783          	ld	a5,0(s0)
   239d4:	01c7a783          	lw	a5,28(a5)
   239d8:	12078c63          	beq	a5,zero,23b10 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x278>
        val = (val << 8) | (uint64_t)p[i];
   239dc:	00074783          	lbu	a5,0(a4) # 2000 <__abi_tag-0xe294>
      for (unsigned i = 0; i < sizeof(T); i++)
   239e0:	1340006f          	jal	zero,23b14 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x27c>
    DW_FORM form = (DW_FORM)cur->uleb128();
   239e4:	0006061b          	addiw	a2,a2,0
    if (name == (DW_AT)0 && form == (DW_FORM)0)
   239e8:	00cb67b3          	or	a5,s6,a2
   239ec:	10078263          	beq	a5,zero,23af0 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x258>
    attributes.push_back(attribute_spec(name, form));
   239f0:	000b0593          	addi	a1,s6,0
   239f4:	00098513          	addi	a0,s3,0
   239f8:	b0dff0ef          	jal	ra,23504 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   239fc:	0184b583          	ld	a1,24(s1)
   23a00:	0204b783          	ld	a5,32(s1)
   23a04:	0cf58e63          	beq	a1,a5,23ae0 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x248>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   23a08:	00012783          	lw	a5,0(sp)
   23a0c:	00f5a023          	sw	a5,0(a1)
   23a10:	00412783          	lw	a5,4(sp)
   23a14:	00f5a223          	sw	a5,4(a1)
   23a18:	00812783          	lw	a5,8(sp)
   23a1c:	00f5a423          	sw	a5,8(a1)
	    ++this->_M_impl._M_finish;
   23a20:	0184b783          	ld	a5,24(s1)
   23a24:	00c78793          	addi	a5,a5,12
   23a28:	00f4bc23          	sd	a5,24(s1)
    while (pos < sec->end) {
   23a2c:	01043783          	ld	a5,16(s0)
   23a30:	00043583          	ld	a1,0(s0)
   23a34:	0105b703          	ld	a4,16(a1)
   23a38:	02e7fe63          	bgeu	a5,a4,23a74 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x1dc>
    std::uint64_t result = 0;
   23a3c:	00000b13          	addi	s6,zero,0
    int shift = 0;
   23a40:	00090613          	addi	a2,s2,0
      uint8_t byte = *(uint8_t *)(pos++);
   23a44:	00178793          	addi	a5,a5,1
   23a48:	00f43823          	sd	a5,16(s0)
   23a4c:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   23a50:	07f77693          	andi	a3,a4,127
   23a54:	00c696b3          	sll	a3,a3,a2
   23a58:	00db6b33          	or	s6,s6,a3
      if ((byte & 0x80) == 0)
   23a5c:	0187171b          	slliw	a4,a4,0x18
   23a60:	4187571b          	sraiw	a4,a4,0x18
   23a64:	00075e63          	bge	a4,zero,23a80 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x1e8>
      shift += 7;
   23a68:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   23a6c:	0105b703          	ld	a4,16(a1)
   23a70:	fce7eae3          	bltu	a5,a4,23a44 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x1ac>
    underflow();
   23a74:	00040513          	addi	a0,s0,0
   23a78:	884f90ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    return 0;
   23a7c:	00000b13          	addi	s6,zero,0
    DW_AT name = (DW_AT)cur->uleb128();
   23a80:	000b0b1b          	addiw	s6,s6,0
    while (pos < sec->end) {
   23a84:	01043783          	ld	a5,16(s0)
   23a88:	00043503          	ld	a0,0(s0)
   23a8c:	01053703          	ld	a4,16(a0)
   23a90:	02e7fe63          	bgeu	a5,a4,23acc <dwarf::abbrev_entry::read(dwarf::cursor*)+0x234>
    std::uint64_t result = 0;
   23a94:	00000613          	addi	a2,zero,0
    int shift = 0;
   23a98:	00090593          	addi	a1,s2,0
      uint8_t byte = *(uint8_t *)(pos++);
   23a9c:	00178793          	addi	a5,a5,1
   23aa0:	00f43823          	sd	a5,16(s0)
   23aa4:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   23aa8:	07f77693          	andi	a3,a4,127
   23aac:	00b696b3          	sll	a3,a3,a1
   23ab0:	00d66633          	or	a2,a2,a3
      if ((byte & 0x80) == 0)
   23ab4:	0187171b          	slliw	a4,a4,0x18
   23ab8:	4187571b          	sraiw	a4,a4,0x18
   23abc:	f20754e3          	bge	a4,zero,239e4 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x14c>
      shift += 7;
   23ac0:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   23ac4:	01053703          	ld	a4,16(a0)
   23ac8:	fce7eae3          	bltu	a5,a4,23a9c <dwarf::abbrev_entry::read(dwarf::cursor*)+0x204>
    underflow();
   23acc:	00040513          	addi	a0,s0,0
   23ad0:	82cf90ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    if (name == (DW_AT)0 && form == (DW_FORM)0)
   23ad4:	000b0e63          	beq	s6,zero,23af0 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x258>
    DW_FORM form = (DW_FORM)cur->uleb128();
   23ad8:	00090613          	addi	a2,s2,0
   23adc:	f15ff06f          	jal	zero,239f0 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x158>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   23ae0:	00098613          	addi	a2,s3,0
   23ae4:	000a0513          	addi	a0,s4,0
   23ae8:	000a80e7          	jalr	ra,0(s5)
  }
   23aec:	f41ff06f          	jal	zero,23a2c <dwarf::abbrev_entry::read(dwarf::cursor*)+0x194>
      { _M_shrink_to_fit(); }
   23af0:	000a0513          	addi	a0,s4,0
   23af4:	0001f317          	auipc	t1,0x1f
   23af8:	aa433303          	ld	t1,-1372(t1) # 42598 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()@@Base+0x1ea58>
   23afc:	000300e7          	jalr	ra,0(t1)
  return true;
   23b00:	00100513          	addi	a0,zero,1
   23b04:	e29ff06f          	jal	zero,2392c <dwarf::abbrev_entry::read(dwarf::cursor*)+0x94>
    return false;
   23b08:	00000513          	addi	a0,zero,0
   23b0c:	e21ff06f          	jal	zero,2392c <dwarf::abbrev_entry::read(dwarf::cursor*)+0x94>
        val |= ((uint64_t)p[i]) << (i * 8);
   23b10:	00074783          	lbu	a5,0(a4)
  attributes.clear();
   23b14:	01048a13          	addi	s4,s1,16
    pos += sizeof(T);
   23b18:	00170713          	addi	a4,a4,1
   23b1c:	00e43823          	sd	a4,16(s0)
  children = cur->fixed<DW_CHILDREN>() == DW_CHILDREN::yes;
   23b20:	fff78793          	addi	a5,a5,-1
   23b24:	0017b793          	sltiu	a5,a5,1
   23b28:	00f48623          	sb	a5,12(s1)
    int shift = 0;
   23b2c:	00000913          	addi	s2,zero,0
    attributes.push_back(attribute_spec(name, form));
   23b30:	00010993          	addi	s3,sp,0
   23b34:	0001fa97          	auipc	s5,0x1f
   23b38:	964aba83          	ld	s5,-1692(s5) # 42498 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)@@Base+0x1e82c>
   23b3c:	ef1ff06f          	jal	zero,23a2c <dwarf::abbrev_entry::read(dwarf::cursor*)+0x194>

0000000000023b40 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()>:

  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    bool
    vector<_Tp, _Alloc>::
   23b40:	fd010113          	addi	sp,sp,-48
   23b44:	02113423          	sd	ra,40(sp)
   23b48:	02813023          	sd	s0,32(sp)
   23b4c:	00913c23          	sd	s1,24(sp)
   23b50:	01213823          	sd	s2,16(sp)
   23b54:	01313423          	sd	s3,8(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   23b58:	00853403          	ld	s0,8(a0)
    _M_shrink_to_fit()
    {
      if (capacity() == size())
   23b5c:	01053783          	ld	a5,16(a0)
   23b60:	0ef40663          	beq	s0,a5,23c4c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x10c>
   23b64:	00050493          	addi	s1,a0,0
			 - this->_M_impl._M_start); }
   23b68:	00053983          	ld	s3,0(a0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   23b6c:	41340933          	sub	s2,s0,s3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   23b70:	ff100793          	addi	a5,zero,-15
   23b74:	0017d793          	srli	a5,a5,0x1
   23b78:	0127ea63          	bltu	a5,s2,23b8c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x4c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   23b7c:	0a090c63          	beq	s2,zero,23c34 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xf4>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   23b80:	00090513          	addi	a0,s2,0
   23b84:	93df20ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   23b88:	0200006f          	jal	zero,23ba8 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x68>
	  __throw_length_error(
   23b8c:	00013517          	auipc	a0,0x13
   23b90:	7bc50513          	addi	a0,a0,1980 # 37348 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1a0>
   23b94:	84df20ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	    _Tp(__make_move_if_noexcept_iterator(__c.begin()),
		__make_move_if_noexcept_iterator(__c.end()),
		__c.get_allocator()).swap(__c);
	    return true;
	  }
	catch(...)
   23b98:	819f20ef          	jal	ra,163b0 <__cxa_begin_catch@plt>
   23b9c:	a95f20ef          	jal	ra,16630 <__cxa_end_catch@plt>
	  { return false; }
   23ba0:	00000513          	addi	a0,zero,0
   23ba4:	0ac0006f          	jal	zero,23c50 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x110>
   23ba8:	00050613          	addi	a2,a0,0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   23bac:	01260933          	add	s2,a2,s2
	  for (; __first != __last; ++__first, (void)++__cur)
   23bb0:	09340663          	beq	s0,s3,23c3c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xfc>
   23bb4:	00098793          	addi	a5,s3,0
      _ForwardIterator __cur = __result;
   23bb8:	00060713          	addi	a4,a2,0
   23bbc:	0007a683          	lw	a3,0(a5)
   23bc0:	00d72023          	sw	a3,0(a4)
   23bc4:	0047a683          	lw	a3,4(a5)
   23bc8:	00d72223          	sw	a3,4(a4)
   23bcc:	0087a683          	lw	a3,8(a5)
   23bd0:	00d72423          	sw	a3,8(a4)
	  for (; __first != __last; ++__first, (void)++__cur)
   23bd4:	00c70713          	addi	a4,a4,12
   23bd8:	00c78793          	addi	a5,a5,12
   23bdc:	fef410e3          	bne	s0,a5,23bbc <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x7c>
   23be0:	ff440793          	addi	a5,s0,-12
   23be4:	413787b3          	sub	a5,a5,s3
   23be8:	0027d793          	srli	a5,a5,0x2
   23bec:	00013717          	auipc	a4,0x13
   23bf0:	7b473703          	ld	a4,1972(a4) # 373a0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f8>
   23bf4:	02e787b3          	mul	a5,a5,a4
   23bf8:	00279793          	slli	a5,a5,0x2
   23bfc:	0027d793          	srli	a5,a5,0x2
   23c00:	00178793          	addi	a5,a5,1
   23c04:	00179713          	slli	a4,a5,0x1
   23c08:	00f707b3          	add	a5,a4,a5
   23c0c:	00279793          	slli	a5,a5,0x2
   23c10:	00f607b3          	add	a5,a2,a5
	  _M_start = __x._M_start;
   23c14:	0004b503          	ld	a0,0(s1)
   23c18:	00c4b023          	sd	a2,0(s1)
	  _M_finish = __x._M_finish;
   23c1c:	00f4b423          	sd	a5,8(s1)
	  _M_end_of_storage = __x._M_end_of_storage;
   23c20:	0124b823          	sd	s2,16(s1)
	if (__p)
   23c24:	02050063          	beq	a0,zero,23c44 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x104>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   23c28:	889f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
	    return true;
   23c2c:	00100513          	addi	a0,zero,1
      { __a.deallocate(__p, __n); }
   23c30:	0200006f          	jal	zero,23c50 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x110>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   23c34:	00000613          	addi	a2,zero,0
   23c38:	f75ff06f          	jal	zero,23bac <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x6c>
      _ForwardIterator __cur = __result;
   23c3c:	00060793          	addi	a5,a2,0
   23c40:	fd5ff06f          	jal	zero,23c14 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xd4>
   23c44:	00100513          	addi	a0,zero,1
   23c48:	0080006f          	jal	zero,23c50 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x110>
	return false;
   23c4c:	00000513          	addi	a0,zero,0
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);
    }
   23c50:	02813083          	ld	ra,40(sp)
   23c54:	02013403          	ld	s0,32(sp)
   23c58:	01813483          	ld	s1,24(sp)
   23c5c:	01013903          	ld	s2,16(sp)
   23c60:	00813983          	ld	s3,8(sp)
   23c64:	03010113          	addi	sp,sp,48
   23c68:	00008067          	jalr	zero,0(ra)

0000000000023c6c <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)>:
      vector<_Tp, _Alloc>::
   23c6c:	fb010113          	addi	sp,sp,-80
   23c70:	04113423          	sd	ra,72(sp)
   23c74:	04813023          	sd	s0,64(sp)
   23c78:	02913c23          	sd	s1,56(sp)
   23c7c:	03213823          	sd	s2,48(sp)
   23c80:	03313423          	sd	s3,40(sp)
   23c84:	03413023          	sd	s4,32(sp)
   23c88:	01513c23          	sd	s5,24(sp)
   23c8c:	01613823          	sd	s6,16(sp)
   23c90:	01713423          	sd	s7,8(sp)
   23c94:	01813023          	sd	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   23c98:	00853483          	ld	s1,8(a0)
   23c9c:	00053983          	ld	s3,0(a0)
   23ca0:	413487b3          	sub	a5,s1,s3
   23ca4:	4027d793          	srai	a5,a5,0x2
   23ca8:	00013717          	auipc	a4,0x13
   23cac:	ff873703          	ld	a4,-8(a4) # 36ca0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   23cb0:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   23cb4:	00013717          	auipc	a4,0x13
   23cb8:	6f473703          	ld	a4,1780(a4) # 373a8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x200>
   23cbc:	04e78463          	beq	a5,a4,23d04 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x98>
   23cc0:	00050a13          	addi	s4,a0,0
   23cc4:	00058413          	addi	s0,a1,0
   23cc8:	00060b13          	addi	s6,a2,0
   23ccc:	00058b93          	addi	s7,a1,0
      return __a;
   23cd0:	00078713          	addi	a4,a5,0
      if (__a < __b)
   23cd4:	03348e63          	beq	s1,s3,23d10 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xa4>
	const size_type __len = size() + (std::max)(size(), __n);
   23cd8:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   23cdc:	04f76263          	bltu	a4,a5,23d20 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xb4>
   23ce0:	00070a93          	addi	s5,a4,0
   23ce4:	00013797          	auipc	a5,0x13
   23ce8:	6c47b783          	ld	a5,1732(a5) # 373a8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x200>
   23cec:	00e7f463          	bgeu	a5,a4,23cf4 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x88>
   23cf0:	00078a93          	addi	s5,a5,0
    { return __lhs.base() - __rhs.base(); }
   23cf4:	41340c33          	sub	s8,s0,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   23cf8:	00000913          	addi	s2,zero,0
   23cfc:	04070263          	beq	a4,zero,23d40 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xd4>
   23d00:	02c0006f          	jal	zero,23d2c <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xc0>
	  __throw_length_error(__N(__s));
   23d04:	00013517          	auipc	a0,0x13
   23d08:	d6450513          	addi	a0,a0,-668 # 36a68 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   23d0c:	ed4f20ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   23d10:	00100713          	addi	a4,zero,1
   23d14:	fc5ff06f          	jal	zero,23cd8 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x6c>
      _ForwardIterator __cur = __result;
   23d18:	00090b13          	addi	s6,s2,0
   23d1c:	0a40006f          	jal	zero,23dc0 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x154>
   23d20:	41340c33          	sub	s8,s0,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   23d24:	00013a97          	auipc	s5,0x13
   23d28:	684aba83          	ld	s5,1668(s5) # 373a8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x200>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   23d2c:	001a9513          	slli	a0,s5,0x1
   23d30:	01550533          	add	a0,a0,s5
   23d34:	00251513          	slli	a0,a0,0x2
   23d38:	f88f20ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   23d3c:	00050913          	addi	s2,a0,0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   23d40:	018907b3          	add	a5,s2,s8
   23d44:	000b2703          	lw	a4,0(s6)
   23d48:	00e7a023          	sw	a4,0(a5)
   23d4c:	004b2703          	lw	a4,4(s6)
   23d50:	00e7a223          	sw	a4,4(a5)
   23d54:	008b2703          	lw	a4,8(s6)
   23d58:	00e7a423          	sw	a4,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   23d5c:	fb3b8ee3          	beq	s7,s3,23d18 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xac>
      _ForwardIterator __cur = __result;
   23d60:	00090713          	addi	a4,s2,0
      for (; __first != __last; ++__first, (void)++__cur)
   23d64:	00098793          	addi	a5,s3,0
   23d68:	0007a683          	lw	a3,0(a5)
   23d6c:	00d72023          	sw	a3,0(a4)
   23d70:	0047a683          	lw	a3,4(a5)
   23d74:	00d72223          	sw	a3,4(a4)
   23d78:	0087a683          	lw	a3,8(a5)
   23d7c:	00d72423          	sw	a3,8(a4)
   23d80:	00c78793          	addi	a5,a5,12
   23d84:	00c70713          	addi	a4,a4,12
   23d88:	ff7790e3          	bne	a5,s7,23d68 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xfc>
   23d8c:	ff440793          	addi	a5,s0,-12
   23d90:	413787b3          	sub	a5,a5,s3
   23d94:	0027d793          	srli	a5,a5,0x2
   23d98:	00013717          	auipc	a4,0x13
   23d9c:	60873703          	ld	a4,1544(a4) # 373a0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f8>
   23da0:	02e787b3          	mul	a5,a5,a4
   23da4:	00279793          	slli	a5,a5,0x2
   23da8:	0027d793          	srli	a5,a5,0x2
   23dac:	00178793          	addi	a5,a5,1
   23db0:	00179b13          	slli	s6,a5,0x1
   23db4:	00fb0b33          	add	s6,s6,a5
   23db8:	002b1b13          	slli	s6,s6,0x2
   23dbc:	01690b33          	add	s6,s2,s6
	      ++__new_finish;
   23dc0:	00cb0b13          	addi	s6,s6,12
   23dc4:	069b8263          	beq	s7,s1,23e28 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x1bc>
   23dc8:	00040793          	addi	a5,s0,0
      _ForwardIterator __cur = __result;
   23dcc:	000b0713          	addi	a4,s6,0
   23dd0:	0007a683          	lw	a3,0(a5)
   23dd4:	00d72023          	sw	a3,0(a4)
   23dd8:	0047a683          	lw	a3,4(a5)
   23ddc:	00d72223          	sw	a3,4(a4)
   23de0:	0087a683          	lw	a3,8(a5)
   23de4:	00d72423          	sw	a3,8(a4)
      for (; __first != __last; ++__first, (void)++__cur)
   23de8:	00c78793          	addi	a5,a5,12
   23dec:	00c70713          	addi	a4,a4,12
   23df0:	fe9790e3          	bne	a5,s1,23dd0 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x164>
   23df4:	408487b3          	sub	a5,s1,s0
   23df8:	ff478793          	addi	a5,a5,-12
   23dfc:	0027d793          	srli	a5,a5,0x2
   23e00:	00013717          	auipc	a4,0x13
   23e04:	5a073703          	ld	a4,1440(a4) # 373a0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f8>
   23e08:	02e787b3          	mul	a5,a5,a4
   23e0c:	00279793          	slli	a5,a5,0x2
   23e10:	0027d793          	srli	a5,a5,0x2
   23e14:	00178793          	addi	a5,a5,1
   23e18:	00179713          	slli	a4,a5,0x1
   23e1c:	00f707b3          	add	a5,a4,a5
   23e20:	00279793          	slli	a5,a5,0x2
   23e24:	00fb0b33          	add	s6,s6,a5
	if (__p)
   23e28:	00098663          	beq	s3,zero,23e34 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x1c8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   23e2c:	00098513          	addi	a0,s3,0
   23e30:	e80f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   23e34:	012a3023          	sd	s2,0(s4)
      this->_M_impl._M_finish = __new_finish;
   23e38:	016a3423          	sd	s6,8(s4)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   23e3c:	001a9793          	slli	a5,s5,0x1
   23e40:	015787b3          	add	a5,a5,s5
   23e44:	00279793          	slli	a5,a5,0x2
   23e48:	00f90933          	add	s2,s2,a5
   23e4c:	012a3823          	sd	s2,16(s4)
    }
   23e50:	04813083          	ld	ra,72(sp)
   23e54:	04013403          	ld	s0,64(sp)
   23e58:	03813483          	ld	s1,56(sp)
   23e5c:	03013903          	ld	s2,48(sp)
   23e60:	02813983          	ld	s3,40(sp)
   23e64:	02013a03          	ld	s4,32(sp)
   23e68:	01813a83          	ld	s5,24(sp)
   23e6c:	01013b03          	ld	s6,16(sp)
   23e70:	00813b83          	ld	s7,8(sp)
   23e74:	00013c03          	ld	s8,0(sp)
   23e78:	05010113          	addi	sp,sp,80
   23e7c:	00008067          	jalr	zero,0(ra)

0000000000023e80 <dwarf::expr::expr(dwarf::unit const*, unsigned long, unsigned long)>:
DWARFPP_BEGIN_NAMESPACE

expr_context no_expr_context;

expr::expr(const unit *cu, section_offset offset, section_length len)
    : cu(cu), offset(offset), len(len) {}
   23e80:	00b53023          	sd	a1,0(a0)
   23e84:	00c53423          	sd	a2,8(a0)
   23e88:	00d53823          	sd	a3,16(a0)
   23e8c:	00008067          	jalr	zero,0(ra)

0000000000023e90 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const>:
  return evaluate(ctx, {argument});
}

expr_result
expr::evaluate(expr_context *ctx,
               const std::initializer_list<taddr> &arguments) const {
   23e90:	ed010113          	addi	sp,sp,-304
   23e94:	12113423          	sd	ra,296(sp)
   23e98:	12813023          	sd	s0,288(sp)
   23e9c:	10913c23          	sd	s1,280(sp)
   23ea0:	11213823          	sd	s2,272(sp)
   23ea4:	11313423          	sd	s3,264(sp)
   23ea8:	11413023          	sd	s4,256(sp)
   23eac:	0f513c23          	sd	s5,248(sp)
   23eb0:	0f613823          	sd	s6,240(sp)
   23eb4:	0f713423          	sd	s7,232(sp)
   23eb8:	0f813023          	sd	s8,224(sp)
   23ebc:	0d913c23          	sd	s9,216(sp)
   23ec0:	0da13823          	sd	s10,208(sp)
   23ec4:	0db13423          	sd	s11,200(sp)
   23ec8:	00050a93          	addi	s5,a0,0
   23ecc:	00058913          	addi	s2,a1,0
   23ed0:	00060b13          	addi	s6,a2,0
   23ed4:	00068993          	addi	s3,a3,0
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   23ed8:	06810793          	addi	a5,sp,104
   23edc:	0af13423          	sd	a5,168(sp)
   23ee0:	0af13823          	sd	a5,176(sp)
   23ee4:	0a810793          	addi	a5,sp,168
   23ee8:	0af13c23          	sd	a5,184(sp)
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }

      // Number of elements.
      constexpr size_type
      size() const noexcept { return _M_len; }
   23eec:	0086b703          	ld	a4,8(a3)
    if (n <= (size_type)(cap - base))
   23ef0:	00800793          	addi	a5,zero,8
   23ef4:	06e7f463          	bgeu	a5,a4,23f5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcc>
      target <<= 1;
   23ef8:	00179793          	slli	a5,a5,0x1
    while (target < n)
   23efc:	fee7eee3          	bltu	a5,a4,23ef8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x68>
    char *newbuf = new char[sizeof(T[target])];
   23f00:	00379413          	slli	s0,a5,0x3
   23f04:	00040513          	addi	a0,s0,0
   23f08:	bd8f20ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   23f0c:	00050a13          	addi	s4,a0,0
    T *src = base, *dest = (T *)newbuf;
   23f10:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   23f14:	0b013703          	ld	a4,176(sp)
   23f18:	06e57263          	bgeu	a0,a4,23f7c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xec>
    T *src = base, *dest = (T *)newbuf;
   23f1c:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   23f20:	00878793          	addi	a5,a5,8
   23f24:	fee7eee3          	bltu	a5,a4,23f20 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x90>
   23f28:	fff70493          	addi	s1,a4,-1
   23f2c:	40a484b3          	sub	s1,s1,a0
   23f30:	ff84f493          	andi	s1,s1,-8
   23f34:	00848493          	addi	s1,s1,8
   23f38:	009a04b3          	add	s1,s4,s1
    if ((char *)base != buf)
   23f3c:	06810793          	addi	a5,sp,104
   23f40:	00f50663          	beq	a0,a5,23f4c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xbc>
      delete[] (char *)base;
   23f44:	00050463          	beq	a0,zero,23f4c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xbc>
   23f48:	e18f20ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   23f4c:	0b413423          	sd	s4,168(sp)
    end = dest;
   23f50:	0a913823          	sd	s1,176(sp)
    cap = base + target;
   23f54:	008a0a33          	add	s4,s4,s0
   23f58:	0b413c23          	sd	s4,184(sp)

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
   23f5c:	0009b783          	ld	a5,0(s3)

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   23f60:	0089b483          	ld	s1,8(s3)
   23f64:	00349493          	slli	s1,s1,0x3
  small_vector<taddr, 8> stack;

  // Create the initial stack.  arguments are in reverse order
  // (that is, element 0 is TOS), so reverse it.
  stack.reserve(arguments.size());
  for (const taddr *elt = arguments.end() - 1; elt >= arguments.begin(); elt--)
   23f68:	ff848493          	addi	s1,s1,-8
   23f6c:	009784b3          	add	s1,a5,s1
   23f70:	0cf4ea63          	bltu	s1,a5,24044 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b4>
    if ((char *)base != buf)
   23f74:	06810a13          	addi	s4,sp,104
   23f78:	07c0006f          	jal	zero,23ff4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x164>
    T *src = base, *dest = (T *)newbuf;
   23f7c:	000a0493          	addi	s1,s4,0
   23f80:	fbdff06f          	jal	zero,23f3c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xac>
    char *newbuf = new char[sizeof(T[target])];
   23f84:	00050c13          	addi	s8,a0,0
    T *src = base, *dest = (T *)newbuf;
   23f88:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   23f8c:	0b013703          	ld	a4,176(sp)
   23f90:	0ae57663          	bgeu	a0,a4,2403c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ac>
    T *src = base, *dest = (T *)newbuf;
   23f94:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   23f98:	00878793          	addi	a5,a5,8
   23f9c:	fee7eee3          	bltu	a5,a4,23f98 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x108>
   23fa0:	fff70b93          	addi	s7,a4,-1
   23fa4:	40ab8bb3          	sub	s7,s7,a0
   23fa8:	ff8bfb93          	andi	s7,s7,-8
   23fac:	008b8b93          	addi	s7,s7,8
   23fb0:	017c0bb3          	add	s7,s8,s7
    if ((char *)base != buf)
   23fb4:	01450663          	beq	a0,s4,23fc0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x130>
      delete[] (char *)base;
   23fb8:	00050463          	beq	a0,zero,23fc0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x130>
   23fbc:	da4f20ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   23fc0:	0b813423          	sd	s8,168(sp)
    end = dest;
   23fc4:	0b713823          	sd	s7,176(sp)
    cap = base + target;
   23fc8:	008c0c33          	add	s8,s8,s0
   23fcc:	0b813c23          	sd	s8,184(sp)
    new (end) T(x);
   23fd0:	0004b703          	ld	a4,0(s1)
   23fd4:	0b013783          	ld	a5,176(sp)
   23fd8:	00e7b023          	sd	a4,0(a5)
    end++;
   23fdc:	0b013783          	ld	a5,176(sp)
   23fe0:	00878793          	addi	a5,a5,8
   23fe4:	0af13823          	sd	a5,176(sp)
   23fe8:	ff848493          	addi	s1,s1,-8
   23fec:	0009b783          	ld	a5,0(s3)
   23ff0:	04f4ea63          	bltu	s1,a5,24044 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b4>
  size_type size() const { return end - base; }
   23ff4:	0a813703          	ld	a4,168(sp)
   23ff8:	0b013783          	ld	a5,176(sp)
   23ffc:	40e787b3          	sub	a5,a5,a4
   24000:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   24004:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   24008:	0b813503          	ld	a0,184(sp)
   2400c:	40e50533          	sub	a0,a0,a4
   24010:	40355513          	srai	a0,a0,0x3
   24014:	faf57ee3          	bgeu	a0,a5,23fd0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x140>
   24018:	00051463          	bne	a0,zero,24020 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x190>
   2401c:	00100513          	addi	a0,zero,1
    while (target < n)
   24020:	00f57663          	bgeu	a0,a5,2402c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19c>
      target <<= 1;
   24024:	00151513          	slli	a0,a0,0x1
    while (target < n)
   24028:	fef56ee3          	bltu	a0,a5,24024 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x194>
    char *newbuf = new char[sizeof(T[target])];
   2402c:	00351413          	slli	s0,a0,0x3
   24030:	00040513          	addi	a0,s0,0
   24034:	aacf20ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   24038:	f4dff06f          	jal	zero,23f84 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf4>
    T *src = base, *dest = (T *)newbuf;
   2403c:	000c0b93          	addi	s7,s8,0
   24040:	f75ff06f          	jal	zero,23fb4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x124>
    stack.push_back(*elt);

  // Create a subsection for just this expression so we can
  // easily detect the end (including premature end).
  auto cusec = cu->data();
   24044:	00093503          	ld	a0,0(s2)
   24048:	cf4f30ef          	jal	ra,1753c <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2404c:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   24050:	00853b83          	ld	s7,8(a0)
	if (_M_pi != nullptr)
   24054:	020b8063          	beq	s7,zero,24074 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1e4>
    if (__is_single_threaded())
   24058:	0001e797          	auipc	a5,0x1e
   2405c:	4207b783          	ld	a5,1056(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   24060:	0007c783          	lbu	a5,0(a5)
   24064:	02078463          	beq	a5,zero,2408c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1fc>
  { *__mem += __val; }
   24068:	030ba783          	lw	a5,48(s7)
   2406c:	0017879b          	addiw	a5,a5,1
   24070:	02fba823          	sw	a5,48(s7)
  shared_ptr<section> subsec(
      make_shared<section>(cusec->type, cusec->begin + offset, len, cusec->ord,
   24074:	0089b403          	ld	s0,8(s3)
   24078:	00893783          	ld	a5,8(s2)
   2407c:	00f40433          	add	s0,s0,a5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   24080:	06000513          	addi	a0,zero,96
   24084:	c3cf20ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   24088:	0140006f          	jal	zero,2409c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x20c>
      __atomic_add(__mem, __val);
   2408c:	00100593          	addi	a1,zero,1
   24090:	030b8513          	addi	a0,s7,48
   24094:	a6cf20ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   24098:	fddff06f          	jal	zero,24074 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1e4>
   2409c:	00050493          	addi	s1,a0,0
   240a0:	00052423          	sw	zero,8(a0)
   240a4:	00052623          	sw	zero,12(a0)
   240a8:	00052823          	sw	zero,16(a0)
   240ac:	00052a23          	sw	zero,20(a0)
   240b0:	00052c23          	sw	zero,24(a0)
   240b4:	00052e23          	sw	zero,28(a0)
   240b8:	02053023          	sd	zero,32(a0)
   240bc:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   240c0:	00100793          	addi	a5,zero,1
   240c4:	02f52823          	sw	a5,48(a0)
   240c8:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   240cc:	0001e797          	auipc	a5,0x1e
   240d0:	4ec7b783          	ld	a5,1260(a5) # 425b8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc40>
   240d4:	01078793          	addi	a5,a5,16
   240d8:	00f53023          	sd	a5,0(a0)
   240dc:	0009a583          	lw	a1,0(s3)
   240e0:	01093603          	ld	a2,16(s2)
   240e4:	01c9a703          	lw	a4,28(s3)
   240e8:	0189a683          	lw	a3,24(s3)
   240ec:	0209a783          	lw	a5,32(s3)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   240f0:	02b52c23          	sw	a1,56(a0)
   240f4:	04853023          	sd	s0,64(a0)
   240f8:	00c40433          	add	s0,s0,a2
   240fc:	04853423          	sd	s0,72(a0)
   24100:	04d52823          	sw	a3,80(a0)
        ord(ord), addr_size(addr_size) {}
   24104:	04e52a23          	sw	a4,84(a0)
   24108:	04f52c23          	sw	a5,88(a0)
   2410c:	03850c13          	addi	s8,a0,56
    if (__is_single_threaded())
   24110:	0001e797          	auipc	a5,0x1e
   24114:	3687b783          	ld	a5,872(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   24118:	0007c783          	lbu	a5,0(a5)
   2411c:	16078c63          	beq	a5,zero,24294 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x404>
  { *__mem += __val; }
   24120:	00200793          	addi	a5,zero,2
   24124:	02f52823          	sw	a5,48(a0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   24128:	05813823          	sd	s8,80(sp)
      : _M_pi(__r._M_pi)
   2412c:	04913c23          	sd	s1,88(sp)
    if (__is_single_threaded())
   24130:	0001e797          	auipc	a5,0x1e
   24134:	3487b783          	ld	a5,840(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   24138:	0007c783          	lbu	a5,0(a5)
   2413c:	16078463          	beq	a5,zero,242a4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x414>
  { *__mem += __val; }
   24140:	0304a783          	lw	a5,48(s1)
   24144:	0017879b          	addiw	a5,a5,1
   24148:	02f4a823          	sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   2414c:	0404b783          	ld	a5,64(s1)
   24150:	06f13023          	sd	a5,96(sp)
    if (__is_single_threaded())
   24154:	0001e797          	auipc	a5,0x1e
   24158:	3247b783          	ld	a5,804(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2415c:	0007c783          	lbu	a5,0(a5)
   24160:	14078a63          	beq	a5,zero,242b4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x424>
    _Atomic_word __result = *__mem;
   24164:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   24168:	fff5079b          	addiw	a5,a0,-1
   2416c:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   24170:	00100793          	addi	a5,zero,1
   24174:	14f50863          	beq	a0,a5,242c4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x434>
  bool end() const { return pos >= sec->end; }
   24178:	05013783          	ld	a5,80(sp)
  // create the result directly, rather than using the top of
  // stack.
  expr_result result;

  // 2.6.1.1.4 Empty location descriptions
  if (cur.end()) {
   2417c:	0107b703          	ld	a4,16(a5)
   24180:	06013783          	ld	a5,96(sp)
   24184:	1ae7e063          	bltu	a5,a4,24324 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x494>
    result.location_type = expr_result::type::empty;
   24188:	00400793          	addi	a5,zero,4
   2418c:	00faa023          	sw	a5,0(s5)
    result.value = 0;
   24190:	000ab423          	sd	zero,8(s5)
	if (_M_pi != nullptr)
   24194:	05813403          	ld	s0,88(sp)
   24198:	02040863          	beq	s0,zero,241c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x338>
    if (__is_single_threaded())
   2419c:	0001e797          	auipc	a5,0x1e
   241a0:	2dc7b783          	ld	a5,732(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   241a4:	0007c783          	lbu	a5,0(a5)
   241a8:	00079463          	bne	a5,zero,241b0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x320>
   241ac:	7290106f          	jal	zero,260d4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2244>
    _Atomic_word __result = *__mem;
   241b0:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   241b4:	fff5079b          	addiw	a5,a0,-1
   241b8:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   241bc:	00100793          	addi	a5,zero,1
   241c0:	00f51463          	bne	a0,a5,241c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x338>
   241c4:	7210106f          	jal	zero,260e4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2254>
    if (__is_single_threaded())
   241c8:	0001e797          	auipc	a5,0x1e
   241cc:	2b07b783          	ld	a5,688(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   241d0:	0007c783          	lbu	a5,0(a5)
   241d4:	00079463          	bne	a5,zero,241dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x34c>
   241d8:	7710106f          	jal	zero,26148 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x22b8>
    _Atomic_word __result = *__mem;
   241dc:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   241e0:	fff5079b          	addiw	a5,a0,-1
   241e4:	02f4a823          	sw	a5,48(s1)
   241e8:	00100793          	addi	a5,zero,1
   241ec:	00f51463          	bne	a0,a5,241f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x364>
   241f0:	7690106f          	jal	zero,26158 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x22c8>
	if (_M_pi != nullptr)
   241f4:	020b8863          	beq	s7,zero,24224 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x394>
    if (__is_single_threaded())
   241f8:	0001e797          	auipc	a5,0x1e
   241fc:	2807b783          	ld	a5,640(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   24200:	0007c783          	lbu	a5,0(a5)
   24204:	00079463          	bne	a5,zero,2420c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x37c>
   24208:	7b50106f          	jal	zero,261bc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x232c>
    _Atomic_word __result = *__mem;
   2420c:	030ba503          	lw	a0,48(s7)
    *__mem += __val;
   24210:	fff5079b          	addiw	a5,a0,-1
   24214:	02fba823          	sw	a5,48(s7)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   24218:	00100793          	addi	a5,zero,1
   2421c:	00f51463          	bne	a0,a5,24224 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x394>
   24220:	7ad0106f          	jal	zero,261cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x233c>
    for (T *p = base; p < end; ++p)
   24224:	0a813503          	ld	a0,168(sp)
   24228:	0b013783          	ld	a5,176(sp)
   2422c:	00f57a63          	bgeu	a0,a5,24240 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x3b0>
   24230:	00050793          	addi	a5,a0,0
   24234:	00878793          	addi	a5,a5,8
   24238:	0b013703          	ld	a4,176(sp)
   2423c:	fee7ece3          	bltu	a5,a4,24234 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x3a4>
    end = base;
   24240:	0aa13823          	sd	a0,176(sp)
    if ((char *)base != buf)
   24244:	06810793          	addi	a5,sp,104
   24248:	00f50663          	beq	a0,a5,24254 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x3c4>
      delete[] (char *)base;
   2424c:	00050463          	beq	a0,zero,24254 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x3c4>
   24250:	b10f20ef          	jal	ra,16560 <operator delete[](void*)@plt>

  return result;

underflow:
  throw expr_error("stack underflow evaluating DWARF expression");
}
   24254:	000a8513          	addi	a0,s5,0
   24258:	12813083          	ld	ra,296(sp)
   2425c:	12013403          	ld	s0,288(sp)
   24260:	11813483          	ld	s1,280(sp)
   24264:	11013903          	ld	s2,272(sp)
   24268:	10813983          	ld	s3,264(sp)
   2426c:	10013a03          	ld	s4,256(sp)
   24270:	0f813a83          	ld	s5,248(sp)
   24274:	0f013b03          	ld	s6,240(sp)
   24278:	0e813b83          	ld	s7,232(sp)
   2427c:	0e013c03          	ld	s8,224(sp)
   24280:	0d813c83          	ld	s9,216(sp)
   24284:	0d013d03          	ld	s10,208(sp)
   24288:	0c813d83          	ld	s11,200(sp)
   2428c:	13010113          	addi	sp,sp,304
   24290:	00008067          	jalr	zero,0(ra)
      __atomic_add(__mem, __val);
   24294:	00100593          	addi	a1,zero,1
   24298:	03050513          	addi	a0,a0,48
   2429c:	864f20ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   242a0:	e89ff06f          	jal	zero,24128 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x298>
   242a4:	00100593          	addi	a1,zero,1
   242a8:	03048513          	addi	a0,s1,48
   242ac:	854f20ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   242b0:	e9dff06f          	jal	zero,2414c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2bc>
      return __exchange_and_add(__mem, __val);
   242b4:	fff00593          	addi	a1,zero,-1
   242b8:	03048513          	addi	a0,s1,48
   242bc:	874f20ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   242c0:	eb1ff06f          	jal	zero,24170 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2e0>
	_M_dispose();
   242c4:	0004b783          	ld	a5,0(s1)
   242c8:	0107b783          	ld	a5,16(a5)
   242cc:	00048513          	addi	a0,s1,0
   242d0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   242d4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   242d8:	0001e797          	auipc	a5,0x1e
   242dc:	1a07b783          	ld	a5,416(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   242e0:	0007c783          	lbu	a5,0(a5)
   242e4:	02078663          	beq	a5,zero,24310 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x480>
    _Atomic_word __result = *__mem;
   242e8:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   242ec:	fff7871b          	addiw	a4,a5,-1
   242f0:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   242f4:	00100713          	addi	a4,zero,1
   242f8:	e8e790e3          	bne	a5,a4,24178 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2e8>
	    _M_destroy();
   242fc:	0004b783          	ld	a5,0(s1)
   24300:	0187b783          	ld	a5,24(a5)
   24304:	00048513          	addi	a0,s1,0
   24308:	000780e7          	jalr	ra,0(a5)
   2430c:	e6dff06f          	jal	zero,24178 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2e8>
      return __exchange_and_add(__mem, __val);
   24310:	fff00593          	addi	a1,zero,-1
   24314:	03448513          	addi	a0,s1,52
   24318:	818f20ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2431c:	00050793          	addi	a5,a0,0
   24320:	fd5ff06f          	jal	zero,242f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x464>
  result.location_type = expr_result::type::address;
   24324:	000aa023          	sw	zero,0(s5)
    switch (op) {
   24328:	0fc00993          	addi	s3,zero,252
   2432c:	00013417          	auipc	s0,0x13
   24330:	2ac40413          	addi	s0,s0,684 # 375d8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x430>
    return ::__libc_single_threaded;
   24334:	0001ed17          	auipc	s10,0x1e
   24338:	144d3d03          	ld	s10,324(s10) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      CHECKN(2);
   2433c:	00800d93          	addi	s11,zero,8
  while (!cur.end()) {
   24340:	1b40106f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    while (pos < sec->end) {
   24344:	0106b783          	ld	a5,16(a3)
    std::uint64_t result = 0;
   24348:	00000913          	addi	s2,zero,0
    int shift = 0;
   2434c:	00000593          	addi	a1,zero,0
    while (pos < sec->end) {
   24350:	02f77a63          	bgeu	a4,a5,24384 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4f4>
      uint8_t byte = *(uint8_t *)(pos++);
   24354:	00170713          	addi	a4,a4,1
   24358:	06e13023          	sd	a4,96(sp)
   2435c:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   24360:	07f7f613          	andi	a2,a5,127
   24364:	00b61633          	sll	a2,a2,a1
   24368:	00c96933          	or	s2,s2,a2
      if ((byte & 0x80) == 0)
   2436c:	0187979b          	slliw	a5,a5,0x18
   24370:	4187d79b          	sraiw	a5,a5,0x18
   24374:	5607d6e3          	bge	a5,zero,250e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1250>
      shift += 7;
   24378:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   2437c:	0106b783          	ld	a5,16(a3)
   24380:	fcf76ae3          	bltu	a4,a5,24354 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4c4>
    underflow();
   24384:	05010513          	addi	a0,sp,80
   24388:	f74f80ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    return 0;
   2438c:	5510006f          	jal	zero,250dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x124c>
    while (pos < sec->end) {
   24390:	0106b783          	ld	a5,16(a3)
    std::uint64_t result = 0;
   24394:	00000513          	addi	a0,zero,0
    int shift = 0;
   24398:	00000593          	addi	a1,zero,0
    while (pos < sec->end) {
   2439c:	02f77c63          	bgeu	a4,a5,243d4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x544>
      uint8_t byte = *(uint8_t *)(pos++);
   243a0:	00170713          	addi	a4,a4,1
   243a4:	06e13023          	sd	a4,96(sp)
   243a8:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   243ac:	07f7f613          	andi	a2,a5,127
   243b0:	00b61633          	sll	a2,a2,a1
   243b4:	00c56533          	or	a0,a0,a2
      if ((byte & 0x80) == 0)
   243b8:	0187979b          	slliw	a5,a5,0x18
   243bc:	4187d79b          	sraiw	a5,a5,0x18
   243c0:	0007c463          	blt	a5,zero,243c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x538>
   243c4:	4240106f          	jal	zero,257e8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1958>
      shift += 7;
   243c8:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   243cc:	0106b783          	ld	a5,16(a3)
   243d0:	fcf768e3          	bltu	a4,a5,243a0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x510>
    underflow();
   243d4:	05010513          	addi	a0,sp,80
   243d8:	f24f80ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    return 0;
   243dc:	4080106f          	jal	zero,257e4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1954>
    while (pos < sec->end) {
   243e0:	0106b783          	ld	a5,16(a3)
    std::uint64_t result = 0;
   243e4:	00000a13          	addi	s4,zero,0
    int shift = 0;
   243e8:	00000593          	addi	a1,zero,0
    while (pos < sec->end) {
   243ec:	02f77a63          	bgeu	a4,a5,24420 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x590>
      uint8_t byte = *(uint8_t *)(pos++);
   243f0:	00170713          	addi	a4,a4,1
   243f4:	06e13023          	sd	a4,96(sp)
   243f8:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   243fc:	07f7f613          	andi	a2,a5,127
   24400:	00b61633          	sll	a2,a2,a1
   24404:	00ca6a33          	or	s4,s4,a2
      if ((byte & 0x80) == 0)
   24408:	0187979b          	slliw	a5,a5,0x18
   2440c:	4187d79b          	sraiw	a5,a5,0x18
   24410:	2207d8e3          	bge	a5,zero,24e40 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfb0>
      shift += 7;
   24414:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   24418:	0106b783          	ld	a5,16(a3)
   2441c:	fcf76ae3          	bltu	a4,a5,243f0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x560>
    underflow();
   24420:	05010513          	addi	a0,sp,80
   24424:	ed8f80ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    return 0;
   24428:	2150006f          	jal	zero,24e3c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfac>
      stack.push_back((unsigned)op - (unsigned)DW_OP::lit0);
   2442c:	fd09091b          	addiw	s2,s2,-48
   24430:	02091913          	slli	s2,s2,0x20
   24434:	02095913          	srli	s2,s2,0x20
  size_type size() const { return end - base; }
   24438:	0a813703          	ld	a4,168(sp)
   2443c:	0b013783          	ld	a5,176(sp)
   24440:	40e787b3          	sub	a5,a5,a4
   24444:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   24448:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   2444c:	0b813a03          	ld	s4,184(sp)
   24450:	40ea0a33          	sub	s4,s4,a4
   24454:	403a5a13          	srai	s4,s4,0x3
   24458:	06fa7e63          	bgeu	s4,a5,244d4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x644>
   2445c:	000a1463          	bne	s4,zero,24464 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5d4>
   24460:	00100a13          	addi	s4,zero,1
    while (target < n)
   24464:	00fa7663          	bgeu	s4,a5,24470 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5e0>
      target <<= 1;
   24468:	001a1a13          	slli	s4,s4,0x1
    while (target < n)
   2446c:	fefa6ee3          	bltu	s4,a5,24468 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5d8>
    char *newbuf = new char[sizeof(T[target])];
   24470:	003a1a13          	slli	s4,s4,0x3
   24474:	000a0513          	addi	a0,s4,0
   24478:	e69f10ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   2447c:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   24480:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   24484:	0b013703          	ld	a4,176(sp)
   24488:	06e57263          	bgeu	a0,a4,244ec <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x65c>
    T *src = base, *dest = (T *)newbuf;
   2448c:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   24490:	00878793          	addi	a5,a5,8
   24494:	fee7eee3          	bltu	a5,a4,24490 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x600>
   24498:	fff70793          	addi	a5,a4,-1
   2449c:	40a787b3          	sub	a5,a5,a0
   244a0:	ff87f793          	andi	a5,a5,-8
   244a4:	00878793          	addi	a5,a5,8
   244a8:	00fc87b3          	add	a5,s9,a5
   244ac:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   244b0:	06810793          	addi	a5,sp,104
   244b4:	00f50663          	beq	a0,a5,244c0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x630>
      delete[] (char *)base;
   244b8:	00050463          	beq	a0,zero,244c0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x630>
   244bc:	8a4f20ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   244c0:	0b913423          	sd	s9,168(sp)
    end = dest;
   244c4:	00813783          	ld	a5,8(sp)
   244c8:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   244cc:	014c8cb3          	add	s9,s9,s4
   244d0:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   244d4:	0b013783          	ld	a5,176(sp)
   244d8:	0127b023          	sd	s2,0(a5)
    end++;
   244dc:	0b013783          	ld	a5,176(sp)
   244e0:	00878793          	addi	a5,a5,8
   244e4:	0af13823          	sd	a5,176(sp)
      break;
   244e8:	00c0106f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   244ec:	01913423          	sd	s9,8(sp)
   244f0:	fc1ff06f          	jal	zero,244b0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x620>
      stack.push_back(cur.address());
   244f4:	05010513          	addi	a0,sp,80
   244f8:	0001e317          	auipc	t1,0x1e
   244fc:	e7833303          	ld	t1,-392(t1) # 42370 <dwarf::cursor::address()@@Base+0x1f3cc>
   24500:	000300e7          	jalr	ra,0(t1)
   24504:	00a13423          	sd	a0,8(sp)
  size_type size() const { return end - base; }
   24508:	0a813703          	ld	a4,168(sp)
   2450c:	0b013783          	ld	a5,176(sp)
   24510:	40e787b3          	sub	a5,a5,a4
   24514:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   24518:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   2451c:	0b813903          	ld	s2,184(sp)
   24520:	40e90933          	sub	s2,s2,a4
   24524:	40395913          	srai	s2,s2,0x3
   24528:	06f97a63          	bgeu	s2,a5,2459c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x70c>
   2452c:	00091463          	bne	s2,zero,24534 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6a4>
   24530:	00100913          	addi	s2,zero,1
    while (target < n)
   24534:	00f97663          	bgeu	s2,a5,24540 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6b0>
      target <<= 1;
   24538:	00191913          	slli	s2,s2,0x1
    while (target < n)
   2453c:	fef96ee3          	bltu	s2,a5,24538 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6a8>
    char *newbuf = new char[sizeof(T[target])];
   24540:	00391913          	slli	s2,s2,0x3
   24544:	00090513          	addi	a0,s2,0
   24548:	d99f10ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   2454c:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   24550:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   24554:	0b013703          	ld	a4,176(sp)
   24558:	06e57063          	bgeu	a0,a4,245b8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x728>
    T *src = base, *dest = (T *)newbuf;
   2455c:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   24560:	00878793          	addi	a5,a5,8
   24564:	fee7eee3          	bltu	a5,a4,24560 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6d0>
   24568:	fff70a13          	addi	s4,a4,-1
   2456c:	40aa0a33          	sub	s4,s4,a0
   24570:	ff8a7a13          	andi	s4,s4,-8
   24574:	008a0a13          	addi	s4,s4,8
   24578:	014c8a33          	add	s4,s9,s4
    if ((char *)base != buf)
   2457c:	06810793          	addi	a5,sp,104
   24580:	00f50663          	beq	a0,a5,2458c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6fc>
      delete[] (char *)base;
   24584:	00050463          	beq	a0,zero,2458c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6fc>
   24588:	fd9f10ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   2458c:	0b913423          	sd	s9,168(sp)
    end = dest;
   24590:	0b413823          	sd	s4,176(sp)
    cap = base + target;
   24594:	012c8cb3          	add	s9,s9,s2
   24598:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   2459c:	0b013783          	ld	a5,176(sp)
   245a0:	00813703          	ld	a4,8(sp)
   245a4:	00e7b023          	sd	a4,0(a5)
    end++;
   245a8:	0b013783          	ld	a5,176(sp)
   245ac:	00878793          	addi	a5,a5,8
   245b0:	0af13823          	sd	a5,176(sp)
      break;
   245b4:	7410006f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   245b8:	000c8a13          	addi	s4,s9,0
   245bc:	fc1ff06f          	jal	zero,2457c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6ec>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   245c0:	0106b783          	ld	a5,16(a3)
   245c4:	00f76663          	bltu	a4,a5,245d0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x740>
      underflow();
   245c8:	05010513          	addi	a0,sp,80
   245cc:	d30f80ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   245d0:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   245d4:	05013703          	ld	a4,80(sp)
   245d8:	01c72703          	lw	a4,28(a4)
   245dc:	00071463          	bne	a4,zero,245e4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x754>
   245e0:	6350106f          	jal	zero,26414 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2584>
        val = (val << 8) | (uint64_t)p[i];
   245e4:	0007cc83          	lbu	s9,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   245e8:	6310106f          	jal	zero,26418 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2588>
    char *newbuf = new char[sizeof(T[target])];
   245ec:	00050a13          	addi	s4,a0,0
    T *src = base, *dest = (T *)newbuf;
   245f0:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   245f4:	0b013703          	ld	a4,176(sp)
   245f8:	06e57263          	bgeu	a0,a4,2465c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7cc>
    T *src = base, *dest = (T *)newbuf;
   245fc:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   24600:	00878793          	addi	a5,a5,8
   24604:	fee7eee3          	bltu	a5,a4,24600 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x770>
   24608:	fff70793          	addi	a5,a4,-1
   2460c:	40a787b3          	sub	a5,a5,a0
   24610:	ff87f793          	andi	a5,a5,-8
   24614:	00878793          	addi	a5,a5,8
   24618:	00fa07b3          	add	a5,s4,a5
   2461c:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   24620:	06810793          	addi	a5,sp,104
   24624:	00f50663          	beq	a0,a5,24630 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7a0>
      delete[] (char *)base;
   24628:	00050463          	beq	a0,zero,24630 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7a0>
   2462c:	f35f10ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   24630:	0b413423          	sd	s4,168(sp)
    end = dest;
   24634:	00813783          	ld	a5,8(sp)
   24638:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   2463c:	012a0a33          	add	s4,s4,s2
   24640:	0b413c23          	sd	s4,184(sp)
    new (end) T(std::move(x));
   24644:	0b013783          	ld	a5,176(sp)
   24648:	0197b023          	sd	s9,0(a5)
    end++;
   2464c:	0b013783          	ld	a5,176(sp)
   24650:	00878793          	addi	a5,a5,8
   24654:	0af13823          	sd	a5,176(sp)
      break;
   24658:	69d0006f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   2465c:	01413423          	sd	s4,8(sp)
   24660:	fc1ff06f          	jal	zero,24620 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x790>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   24664:	0106b783          	ld	a5,16(a3)
   24668:	40e78633          	sub	a2,a5,a4
   2466c:	00100693          	addi	a3,zero,1
   24670:	00c6f463          	bgeu	a3,a2,24678 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7e8>
   24674:	00f76663          	bltu	a4,a5,24680 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7f0>
      underflow();
   24678:	05010513          	addi	a0,sp,80
   2467c:	c80f80ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   24680:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   24684:	05013703          	ld	a4,80(sp)
   24688:	01c72703          	lw	a4,28(a4)
   2468c:	06071263          	bne	a4,zero,246f0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x860>
        val |= ((uint64_t)p[i]) << (i * 8);
   24690:	0017ca03          	lbu	s4,1(a5)
   24694:	008a1a13          	slli	s4,s4,0x8
   24698:	0007c703          	lbu	a4,0(a5)
   2469c:	00ea6a33          	or	s4,s4,a4
    pos += sizeof(T);
   246a0:	00278793          	addi	a5,a5,2
   246a4:	06f13023          	sd	a5,96(sp)
  size_type size() const { return end - base; }
   246a8:	0a813703          	ld	a4,168(sp)
   246ac:	0b013783          	ld	a5,176(sp)
   246b0:	40e787b3          	sub	a5,a5,a4
   246b4:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   246b8:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   246bc:	0b813903          	ld	s2,184(sp)
   246c0:	40e90933          	sub	s2,s2,a4
   246c4:	40395913          	srai	s2,s2,0x3
   246c8:	08f97a63          	bgeu	s2,a5,2475c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8cc>
   246cc:	00091463          	bne	s2,zero,246d4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x844>
   246d0:	00100913          	addi	s2,zero,1
    while (target < n)
   246d4:	00f97663          	bgeu	s2,a5,246e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x850>
      target <<= 1;
   246d8:	00191913          	slli	s2,s2,0x1
    while (target < n)
   246dc:	fef96ee3          	bltu	s2,a5,246d8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x848>
    char *newbuf = new char[sizeof(T[target])];
   246e0:	00391913          	slli	s2,s2,0x3
   246e4:	00090513          	addi	a0,s2,0
   246e8:	bf9f10ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   246ec:	0180006f          	jal	zero,24704 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x874>
        val = (val << 8) | (uint64_t)p[i];
   246f0:	0007ca03          	lbu	s4,0(a5)
   246f4:	008a1a13          	slli	s4,s4,0x8
   246f8:	0017c703          	lbu	a4,1(a5)
   246fc:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   24700:	fa1ff06f          	jal	zero,246a0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x810>
   24704:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   24708:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   2470c:	0b013703          	ld	a4,176(sp)
   24710:	06e57263          	bgeu	a0,a4,24774 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8e4>
    T *src = base, *dest = (T *)newbuf;
   24714:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   24718:	00878793          	addi	a5,a5,8
   2471c:	fee7eee3          	bltu	a5,a4,24718 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x888>
   24720:	fff70793          	addi	a5,a4,-1
   24724:	40a787b3          	sub	a5,a5,a0
   24728:	ff87f793          	andi	a5,a5,-8
   2472c:	00878793          	addi	a5,a5,8
   24730:	00fc87b3          	add	a5,s9,a5
   24734:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   24738:	06810793          	addi	a5,sp,104
   2473c:	00f50663          	beq	a0,a5,24748 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8b8>
      delete[] (char *)base;
   24740:	00050463          	beq	a0,zero,24748 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8b8>
   24744:	e1df10ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   24748:	0b913423          	sd	s9,168(sp)
    end = dest;
   2474c:	00813783          	ld	a5,8(sp)
   24750:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   24754:	012c8cb3          	add	s9,s9,s2
   24758:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   2475c:	0b013783          	ld	a5,176(sp)
   24760:	0147b023          	sd	s4,0(a5)
    end++;
   24764:	0b013783          	ld	a5,176(sp)
   24768:	00878793          	addi	a5,a5,8
   2476c:	0af13823          	sd	a5,176(sp)
      break;
   24770:	5850006f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   24774:	01913423          	sd	s9,8(sp)
   24778:	fc1ff06f          	jal	zero,24738 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8a8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2477c:	0106b783          	ld	a5,16(a3)
   24780:	40e78633          	sub	a2,a5,a4
   24784:	00300693          	addi	a3,zero,3
   24788:	00c6f463          	bgeu	a3,a2,24790 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x900>
   2478c:	00f76663          	bltu	a4,a5,24798 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x908>
      underflow();
   24790:	05010513          	addi	a0,sp,80
   24794:	b68f80ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   24798:	06013603          	ld	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   2479c:	05013783          	ld	a5,80(sp)
   247a0:	01c7a783          	lw	a5,28(a5)
   247a4:	08079063          	bne	a5,zero,24824 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x994>
   247a8:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   247ac:	00000a13          	addi	s4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   247b0:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   247b4:	0006c703          	lbu	a4,0(a3)
   247b8:	00f71733          	sll	a4,a4,a5
   247bc:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   247c0:	00168693          	addi	a3,a3,1
   247c4:	0087879b          	addiw	a5,a5,8
   247c8:	feb796e3          	bne	a5,a1,247b4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x924>
    pos += sizeof(T);
   247cc:	00460613          	addi	a2,a2,4
   247d0:	06c13023          	sd	a2,96(sp)
   247d4:	020a1a13          	slli	s4,s4,0x20
   247d8:	020a5a13          	srli	s4,s4,0x20
  size_type size() const { return end - base; }
   247dc:	0a813703          	ld	a4,168(sp)
   247e0:	0b013783          	ld	a5,176(sp)
   247e4:	40e787b3          	sub	a5,a5,a4
   247e8:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   247ec:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   247f0:	0b813903          	ld	s2,184(sp)
   247f4:	40e90933          	sub	s2,s2,a4
   247f8:	40395913          	srai	s2,s2,0x3
   247fc:	0af97263          	bgeu	s2,a5,248a0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa10>
   24800:	00091463          	bne	s2,zero,24808 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x978>
   24804:	00100913          	addi	s2,zero,1
    while (target < n)
   24808:	00f97663          	bgeu	s2,a5,24814 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x984>
      target <<= 1;
   2480c:	00191913          	slli	s2,s2,0x1
    while (target < n)
   24810:	fef96ee3          	bltu	s2,a5,2480c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x97c>
    char *newbuf = new char[sizeof(T[target])];
   24814:	00391913          	slli	s2,s2,0x3
   24818:	00090513          	addi	a0,s2,0
   2481c:	ac5f10ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   24820:	0280006f          	jal	zero,24848 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9b8>
   24824:	00060793          	addi	a5,a2,0
   24828:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   2482c:	00000a13          	addi	s4,zero,0
        val = (val << 8) | (uint64_t)p[i];
   24830:	008a1a13          	slli	s4,s4,0x8
   24834:	0007c703          	lbu	a4,0(a5)
   24838:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   2483c:	00178793          	addi	a5,a5,1
   24840:	fef698e3          	bne	a3,a5,24830 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9a0>
   24844:	f89ff06f          	jal	zero,247cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x93c>
   24848:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   2484c:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   24850:	0b013703          	ld	a4,176(sp)
   24854:	06e57263          	bgeu	a0,a4,248b8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa28>
    T *src = base, *dest = (T *)newbuf;
   24858:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   2485c:	00878793          	addi	a5,a5,8
   24860:	fee7eee3          	bltu	a5,a4,2485c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9cc>
   24864:	fff70793          	addi	a5,a4,-1
   24868:	40a787b3          	sub	a5,a5,a0
   2486c:	ff87f793          	andi	a5,a5,-8
   24870:	00878793          	addi	a5,a5,8
   24874:	00fc87b3          	add	a5,s9,a5
   24878:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   2487c:	06810793          	addi	a5,sp,104
   24880:	00f50663          	beq	a0,a5,2488c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9fc>
      delete[] (char *)base;
   24884:	00050463          	beq	a0,zero,2488c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9fc>
   24888:	cd9f10ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   2488c:	0b913423          	sd	s9,168(sp)
    end = dest;
   24890:	00813783          	ld	a5,8(sp)
   24894:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   24898:	012c8cb3          	add	s9,s9,s2
   2489c:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   248a0:	0b013783          	ld	a5,176(sp)
   248a4:	0147b023          	sd	s4,0(a5)
    end++;
   248a8:	0b013783          	ld	a5,176(sp)
   248ac:	00878793          	addi	a5,a5,8
   248b0:	0af13823          	sd	a5,176(sp)
      break;
   248b4:	4410006f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   248b8:	01913423          	sd	s9,8(sp)
   248bc:	fc1ff06f          	jal	zero,2487c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9ec>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   248c0:	0106b783          	ld	a5,16(a3)
   248c4:	40e78633          	sub	a2,a5,a4
   248c8:	00700693          	addi	a3,zero,7
   248cc:	00c6f463          	bgeu	a3,a2,248d4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa44>
   248d0:	00f76663          	bltu	a4,a5,248dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa4c>
      underflow();
   248d4:	05010513          	addi	a0,sp,80
   248d8:	a24f80ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   248dc:	06013603          	ld	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   248e0:	05013783          	ld	a5,80(sp)
   248e4:	01c7a783          	lw	a5,28(a5)
   248e8:	06079c63          	bne	a5,zero,24960 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xad0>
   248ec:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   248f0:	00000a13          	addi	s4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   248f4:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   248f8:	0006c703          	lbu	a4,0(a3)
   248fc:	00f71733          	sll	a4,a4,a5
   24900:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   24904:	00168693          	addi	a3,a3,1
   24908:	0087879b          	addiw	a5,a5,8
   2490c:	feb796e3          	bne	a5,a1,248f8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa68>
    pos += sizeof(T);
   24910:	00860613          	addi	a2,a2,8
   24914:	06c13023          	sd	a2,96(sp)
  size_type size() const { return end - base; }
   24918:	0a813703          	ld	a4,168(sp)
   2491c:	0b013783          	ld	a5,176(sp)
   24920:	40e787b3          	sub	a5,a5,a4
   24924:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   24928:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   2492c:	0b813903          	ld	s2,184(sp)
   24930:	40e90933          	sub	s2,s2,a4
   24934:	40395913          	srai	s2,s2,0x3
   24938:	0af97263          	bgeu	s2,a5,249dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb4c>
   2493c:	00091463          	bne	s2,zero,24944 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xab4>
   24940:	00100913          	addi	s2,zero,1
    while (target < n)
   24944:	00f97663          	bgeu	s2,a5,24950 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xac0>
      target <<= 1;
   24948:	00191913          	slli	s2,s2,0x1
    while (target < n)
   2494c:	fef96ee3          	bltu	s2,a5,24948 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xab8>
    char *newbuf = new char[sizeof(T[target])];
   24950:	00391913          	slli	s2,s2,0x3
   24954:	00090513          	addi	a0,s2,0
   24958:	989f10ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   2495c:	0280006f          	jal	zero,24984 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xaf4>
   24960:	00060793          	addi	a5,a2,0
   24964:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   24968:	00000a13          	addi	s4,zero,0
        val = (val << 8) | (uint64_t)p[i];
   2496c:	008a1a13          	slli	s4,s4,0x8
   24970:	0007c703          	lbu	a4,0(a5)
   24974:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   24978:	00178793          	addi	a5,a5,1
   2497c:	fed798e3          	bne	a5,a3,2496c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xadc>
   24980:	f91ff06f          	jal	zero,24910 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa80>
   24984:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   24988:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   2498c:	0b013703          	ld	a4,176(sp)
   24990:	06e57263          	bgeu	a0,a4,249f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb64>
    T *src = base, *dest = (T *)newbuf;
   24994:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   24998:	00878793          	addi	a5,a5,8
   2499c:	fee7eee3          	bltu	a5,a4,24998 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb08>
   249a0:	fff70793          	addi	a5,a4,-1
   249a4:	40a787b3          	sub	a5,a5,a0
   249a8:	ff87f793          	andi	a5,a5,-8
   249ac:	00878793          	addi	a5,a5,8
   249b0:	00fc87b3          	add	a5,s9,a5
   249b4:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   249b8:	06810793          	addi	a5,sp,104
   249bc:	00f50663          	beq	a0,a5,249c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb38>
      delete[] (char *)base;
   249c0:	00050463          	beq	a0,zero,249c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb38>
   249c4:	b9df10ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   249c8:	0b913423          	sd	s9,168(sp)
    end = dest;
   249cc:	00813783          	ld	a5,8(sp)
   249d0:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   249d4:	012c8cb3          	add	s9,s9,s2
   249d8:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   249dc:	0b013783          	ld	a5,176(sp)
   249e0:	0147b023          	sd	s4,0(a5)
    end++;
   249e4:	0b013783          	ld	a5,176(sp)
   249e8:	00878793          	addi	a5,a5,8
   249ec:	0af13823          	sd	a5,176(sp)
      break;
   249f0:	3050006f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   249f4:	01913423          	sd	s9,8(sp)
   249f8:	fc1ff06f          	jal	zero,249b8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb28>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   249fc:	0106b783          	ld	a5,16(a3)
   24a00:	00f76663          	bltu	a4,a5,24a0c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb7c>
      underflow();
   24a04:	05010513          	addi	a0,sp,80
   24a08:	8f4f80ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   24a0c:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   24a10:	05013703          	ld	a4,80(sp)
   24a14:	01c72703          	lw	a4,28(a4)
   24a18:	00071463          	bne	a4,zero,24a20 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb90>
   24a1c:	2510106f          	jal	zero,2646c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x25dc>
        val = (val << 8) | (uint64_t)p[i];
   24a20:	0007cc83          	lbu	s9,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   24a24:	24d0106f          	jal	zero,26470 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x25e0>
    char *newbuf = new char[sizeof(T[target])];
   24a28:	00050a13          	addi	s4,a0,0
    T *src = base, *dest = (T *)newbuf;
   24a2c:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   24a30:	0b013703          	ld	a4,176(sp)
   24a34:	06e57263          	bgeu	a0,a4,24a98 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc08>
    T *src = base, *dest = (T *)newbuf;
   24a38:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   24a3c:	00878793          	addi	a5,a5,8
   24a40:	fee7eee3          	bltu	a5,a4,24a3c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xbac>
   24a44:	fff70793          	addi	a5,a4,-1
   24a48:	40a787b3          	sub	a5,a5,a0
   24a4c:	ff87f793          	andi	a5,a5,-8
   24a50:	00878793          	addi	a5,a5,8
   24a54:	00fa07b3          	add	a5,s4,a5
   24a58:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   24a5c:	06810793          	addi	a5,sp,104
   24a60:	00f50663          	beq	a0,a5,24a6c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xbdc>
      delete[] (char *)base;
   24a64:	00050463          	beq	a0,zero,24a6c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xbdc>
   24a68:	af9f10ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   24a6c:	0b413423          	sd	s4,168(sp)
    end = dest;
   24a70:	00813783          	ld	a5,8(sp)
   24a74:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   24a78:	012a0a33          	add	s4,s4,s2
   24a7c:	0b413c23          	sd	s4,184(sp)
    new (end) T(std::move(x));
   24a80:	0b013783          	ld	a5,176(sp)
   24a84:	0197b023          	sd	s9,0(a5)
    end++;
   24a88:	0b013783          	ld	a5,176(sp)
   24a8c:	00878793          	addi	a5,a5,8
   24a90:	0af13823          	sd	a5,176(sp)
      break;
   24a94:	2610006f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   24a98:	01413423          	sd	s4,8(sp)
   24a9c:	fc1ff06f          	jal	zero,24a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xbcc>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   24aa0:	0106b783          	ld	a5,16(a3)
   24aa4:	40e78633          	sub	a2,a5,a4
   24aa8:	00100693          	addi	a3,zero,1
   24aac:	00c6f463          	bgeu	a3,a2,24ab4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc24>
   24ab0:	00f76663          	bltu	a4,a5,24abc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc2c>
      underflow();
   24ab4:	05010513          	addi	a0,sp,80
   24ab8:	844f80ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   24abc:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   24ac0:	05013703          	ld	a4,80(sp)
   24ac4:	01c72703          	lw	a4,28(a4)
   24ac8:	06071663          	bne	a4,zero,24b34 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xca4>
        val |= ((uint64_t)p[i]) << (i * 8);
   24acc:	0017ca03          	lbu	s4,1(a5)
   24ad0:	008a1a13          	slli	s4,s4,0x8
   24ad4:	0007c703          	lbu	a4,0(a5)
   24ad8:	00ea6a33          	or	s4,s4,a4
    pos += sizeof(T);
   24adc:	00278793          	addi	a5,a5,2
   24ae0:	06f13023          	sd	a5,96(sp)
      stack.push_back(cur.fixed<int16_t>());
   24ae4:	010a1a1b          	slliw	s4,s4,0x10
   24ae8:	410a5a1b          	sraiw	s4,s4,0x10
  size_type size() const { return end - base; }
   24aec:	0a813703          	ld	a4,168(sp)
   24af0:	0b013783          	ld	a5,176(sp)
   24af4:	40e787b3          	sub	a5,a5,a4
   24af8:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   24afc:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   24b00:	0b813903          	ld	s2,184(sp)
   24b04:	40e90933          	sub	s2,s2,a4
   24b08:	40395913          	srai	s2,s2,0x3
   24b0c:	08f97a63          	bgeu	s2,a5,24ba0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd10>
   24b10:	00091463          	bne	s2,zero,24b18 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc88>
   24b14:	00100913          	addi	s2,zero,1
    while (target < n)
   24b18:	00f97663          	bgeu	s2,a5,24b24 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc94>
      target <<= 1;
   24b1c:	00191913          	slli	s2,s2,0x1
    while (target < n)
   24b20:	fef96ee3          	bltu	s2,a5,24b1c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc8c>
    char *newbuf = new char[sizeof(T[target])];
   24b24:	00391913          	slli	s2,s2,0x3
   24b28:	00090513          	addi	a0,s2,0
   24b2c:	fb4f10ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   24b30:	0180006f          	jal	zero,24b48 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcb8>
        val = (val << 8) | (uint64_t)p[i];
   24b34:	0007ca03          	lbu	s4,0(a5)
   24b38:	008a1a13          	slli	s4,s4,0x8
   24b3c:	0017c703          	lbu	a4,1(a5)
   24b40:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   24b44:	f99ff06f          	jal	zero,24adc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc4c>
   24b48:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   24b4c:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   24b50:	0b013703          	ld	a4,176(sp)
   24b54:	06e57263          	bgeu	a0,a4,24bb8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd28>
    T *src = base, *dest = (T *)newbuf;
   24b58:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   24b5c:	00878793          	addi	a5,a5,8
   24b60:	fee7eee3          	bltu	a5,a4,24b5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xccc>
   24b64:	fff70793          	addi	a5,a4,-1
   24b68:	40a787b3          	sub	a5,a5,a0
   24b6c:	ff87f793          	andi	a5,a5,-8
   24b70:	00878793          	addi	a5,a5,8
   24b74:	00fc87b3          	add	a5,s9,a5
   24b78:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   24b7c:	06810793          	addi	a5,sp,104
   24b80:	00f50663          	beq	a0,a5,24b8c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcfc>
      delete[] (char *)base;
   24b84:	00050463          	beq	a0,zero,24b8c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcfc>
   24b88:	9d9f10ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   24b8c:	0b913423          	sd	s9,168(sp)
    end = dest;
   24b90:	00813783          	ld	a5,8(sp)
   24b94:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   24b98:	012c8cb3          	add	s9,s9,s2
   24b9c:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   24ba0:	0b013783          	ld	a5,176(sp)
   24ba4:	0147b023          	sd	s4,0(a5)
    end++;
   24ba8:	0b013783          	ld	a5,176(sp)
   24bac:	00878793          	addi	a5,a5,8
   24bb0:	0af13823          	sd	a5,176(sp)
      break;
   24bb4:	1410006f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   24bb8:	01913423          	sd	s9,8(sp)
   24bbc:	fc1ff06f          	jal	zero,24b7c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcec>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   24bc0:	0106b783          	ld	a5,16(a3)
   24bc4:	40e78633          	sub	a2,a5,a4
   24bc8:	00300693          	addi	a3,zero,3
   24bcc:	00c6f463          	bgeu	a3,a2,24bd4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd44>
   24bd0:	00f76663          	bltu	a4,a5,24bdc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd4c>
      underflow();
   24bd4:	05010513          	addi	a0,sp,80
   24bd8:	f25f70ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   24bdc:	06013603          	ld	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   24be0:	05013783          	ld	a5,80(sp)
   24be4:	01c7a783          	lw	a5,28(a5)
   24be8:	06079e63          	bne	a5,zero,24c64 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdd4>
   24bec:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   24bf0:	00000a13          	addi	s4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   24bf4:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   24bf8:	0006c703          	lbu	a4,0(a3)
   24bfc:	00f71733          	sll	a4,a4,a5
   24c00:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   24c04:	00168693          	addi	a3,a3,1
   24c08:	0087879b          	addiw	a5,a5,8
   24c0c:	feb796e3          	bne	a5,a1,24bf8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd68>
    pos += sizeof(T);
   24c10:	00460613          	addi	a2,a2,4
   24c14:	06c13023          	sd	a2,96(sp)
      stack.push_back(cur.fixed<int32_t>());
   24c18:	000a0a1b          	addiw	s4,s4,0
  size_type size() const { return end - base; }
   24c1c:	0a813703          	ld	a4,168(sp)
   24c20:	0b013783          	ld	a5,176(sp)
   24c24:	40e787b3          	sub	a5,a5,a4
   24c28:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   24c2c:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   24c30:	0b813903          	ld	s2,184(sp)
   24c34:	40e90933          	sub	s2,s2,a4
   24c38:	40395913          	srai	s2,s2,0x3
   24c3c:	0af97263          	bgeu	s2,a5,24ce0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe50>
   24c40:	00091463          	bne	s2,zero,24c48 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdb8>
   24c44:	00100913          	addi	s2,zero,1
    while (target < n)
   24c48:	00f97663          	bgeu	s2,a5,24c54 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdc4>
      target <<= 1;
   24c4c:	00191913          	slli	s2,s2,0x1
    while (target < n)
   24c50:	fef96ee3          	bltu	s2,a5,24c4c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdbc>
    char *newbuf = new char[sizeof(T[target])];
   24c54:	00391913          	slli	s2,s2,0x3
   24c58:	00090513          	addi	a0,s2,0
   24c5c:	e84f10ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   24c60:	0280006f          	jal	zero,24c88 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdf8>
   24c64:	00060793          	addi	a5,a2,0
   24c68:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   24c6c:	00000a13          	addi	s4,zero,0
        val = (val << 8) | (uint64_t)p[i];
   24c70:	008a1a13          	slli	s4,s4,0x8
   24c74:	0007c703          	lbu	a4,0(a5)
   24c78:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   24c7c:	00178793          	addi	a5,a5,1
   24c80:	fef698e3          	bne	a3,a5,24c70 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xde0>
   24c84:	f8dff06f          	jal	zero,24c10 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd80>
   24c88:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   24c8c:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   24c90:	0b013703          	ld	a4,176(sp)
   24c94:	06e57263          	bgeu	a0,a4,24cf8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe68>
    T *src = base, *dest = (T *)newbuf;
   24c98:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   24c9c:	00878793          	addi	a5,a5,8
   24ca0:	fee7eee3          	bltu	a5,a4,24c9c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe0c>
   24ca4:	fff70793          	addi	a5,a4,-1
   24ca8:	40a787b3          	sub	a5,a5,a0
   24cac:	ff87f793          	andi	a5,a5,-8
   24cb0:	00878793          	addi	a5,a5,8
   24cb4:	00fc87b3          	add	a5,s9,a5
   24cb8:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   24cbc:	06810793          	addi	a5,sp,104
   24cc0:	00f50663          	beq	a0,a5,24ccc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe3c>
      delete[] (char *)base;
   24cc4:	00050463          	beq	a0,zero,24ccc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe3c>
   24cc8:	899f10ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   24ccc:	0b913423          	sd	s9,168(sp)
    end = dest;
   24cd0:	00813783          	ld	a5,8(sp)
   24cd4:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   24cd8:	012c8cb3          	add	s9,s9,s2
   24cdc:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   24ce0:	0b013783          	ld	a5,176(sp)
   24ce4:	0147b023          	sd	s4,0(a5)
    end++;
   24ce8:	0b013783          	ld	a5,176(sp)
   24cec:	00878793          	addi	a5,a5,8
   24cf0:	0af13823          	sd	a5,176(sp)
      break;
   24cf4:	0010006f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   24cf8:	01913423          	sd	s9,8(sp)
   24cfc:	fc1ff06f          	jal	zero,24cbc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe2c>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   24d00:	0106b783          	ld	a5,16(a3)
   24d04:	40e78633          	sub	a2,a5,a4
   24d08:	00700693          	addi	a3,zero,7
   24d0c:	00c6f463          	bgeu	a3,a2,24d14 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe84>
   24d10:	00f76663          	bltu	a4,a5,24d1c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe8c>
      underflow();
   24d14:	05010513          	addi	a0,sp,80
   24d18:	de5f70ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   24d1c:	06013603          	ld	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   24d20:	05013783          	ld	a5,80(sp)
   24d24:	01c7a783          	lw	a5,28(a5)
   24d28:	06079c63          	bne	a5,zero,24da0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf10>
   24d2c:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   24d30:	00000a13          	addi	s4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   24d34:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   24d38:	0006c703          	lbu	a4,0(a3)
   24d3c:	00f71733          	sll	a4,a4,a5
   24d40:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   24d44:	00168693          	addi	a3,a3,1
   24d48:	0087879b          	addiw	a5,a5,8
   24d4c:	feb796e3          	bne	a5,a1,24d38 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xea8>
    pos += sizeof(T);
   24d50:	00860613          	addi	a2,a2,8
   24d54:	06c13023          	sd	a2,96(sp)
  size_type size() const { return end - base; }
   24d58:	0a813703          	ld	a4,168(sp)
   24d5c:	0b013783          	ld	a5,176(sp)
   24d60:	40e787b3          	sub	a5,a5,a4
   24d64:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   24d68:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   24d6c:	0b813903          	ld	s2,184(sp)
   24d70:	40e90933          	sub	s2,s2,a4
   24d74:	40395913          	srai	s2,s2,0x3
   24d78:	0af97263          	bgeu	s2,a5,24e1c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf8c>
   24d7c:	00091463          	bne	s2,zero,24d84 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xef4>
   24d80:	00100913          	addi	s2,zero,1
    while (target < n)
   24d84:	00f97663          	bgeu	s2,a5,24d90 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf00>
      target <<= 1;
   24d88:	00191913          	slli	s2,s2,0x1
    while (target < n)
   24d8c:	fef96ee3          	bltu	s2,a5,24d88 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xef8>
    char *newbuf = new char[sizeof(T[target])];
   24d90:	00391913          	slli	s2,s2,0x3
   24d94:	00090513          	addi	a0,s2,0
   24d98:	d48f10ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   24d9c:	0280006f          	jal	zero,24dc4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf34>
   24da0:	00060793          	addi	a5,a2,0
   24da4:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   24da8:	00000a13          	addi	s4,zero,0
        val = (val << 8) | (uint64_t)p[i];
   24dac:	008a1a13          	slli	s4,s4,0x8
   24db0:	0007c703          	lbu	a4,0(a5)
   24db4:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   24db8:	00178793          	addi	a5,a5,1
   24dbc:	fed798e3          	bne	a5,a3,24dac <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf1c>
   24dc0:	f91ff06f          	jal	zero,24d50 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xec0>
   24dc4:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   24dc8:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   24dcc:	0b013703          	ld	a4,176(sp)
   24dd0:	06e57263          	bgeu	a0,a4,24e34 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfa4>
    T *src = base, *dest = (T *)newbuf;
   24dd4:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   24dd8:	00878793          	addi	a5,a5,8
   24ddc:	fee7eee3          	bltu	a5,a4,24dd8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf48>
   24de0:	fff70793          	addi	a5,a4,-1
   24de4:	40a787b3          	sub	a5,a5,a0
   24de8:	ff87f793          	andi	a5,a5,-8
   24dec:	00878793          	addi	a5,a5,8
   24df0:	00fc87b3          	add	a5,s9,a5
   24df4:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   24df8:	06810793          	addi	a5,sp,104
   24dfc:	00f50663          	beq	a0,a5,24e08 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf78>
      delete[] (char *)base;
   24e00:	00050463          	beq	a0,zero,24e08 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf78>
   24e04:	f5cf10ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   24e08:	0b913423          	sd	s9,168(sp)
    end = dest;
   24e0c:	00813783          	ld	a5,8(sp)
   24e10:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   24e14:	012c8cb3          	add	s9,s9,s2
   24e18:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   24e1c:	0b013783          	ld	a5,176(sp)
   24e20:	0147b023          	sd	s4,0(a5)
    end++;
   24e24:	0b013783          	ld	a5,176(sp)
   24e28:	00878793          	addi	a5,a5,8
   24e2c:	0af13823          	sd	a5,176(sp)
      break;
   24e30:	6c40006f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   24e34:	01913423          	sd	s9,8(sp)
   24e38:	fc1ff06f          	jal	zero,24df8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf68>
    return 0;
   24e3c:	00000a13          	addi	s4,zero,0
  size_type size() const { return end - base; }
   24e40:	0a813703          	ld	a4,168(sp)
   24e44:	0b013783          	ld	a5,176(sp)
   24e48:	40e787b3          	sub	a5,a5,a4
   24e4c:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   24e50:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   24e54:	0b813903          	ld	s2,184(sp)
   24e58:	40e90933          	sub	s2,s2,a4
   24e5c:	40395913          	srai	s2,s2,0x3
   24e60:	06f97e63          	bgeu	s2,a5,24edc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x104c>
   24e64:	00091463          	bne	s2,zero,24e6c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfdc>
   24e68:	00100913          	addi	s2,zero,1
    while (target < n)
   24e6c:	00f97663          	bgeu	s2,a5,24e78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfe8>
      target <<= 1;
   24e70:	00191913          	slli	s2,s2,0x1
    while (target < n)
   24e74:	fef96ee3          	bltu	s2,a5,24e70 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfe0>
    char *newbuf = new char[sizeof(T[target])];
   24e78:	00391913          	slli	s2,s2,0x3
   24e7c:	00090513          	addi	a0,s2,0
   24e80:	c60f10ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   24e84:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   24e88:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   24e8c:	0b013703          	ld	a4,176(sp)
   24e90:	06e57263          	bgeu	a0,a4,24ef4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1064>
    T *src = base, *dest = (T *)newbuf;
   24e94:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   24e98:	00878793          	addi	a5,a5,8
   24e9c:	fee7eee3          	bltu	a5,a4,24e98 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1008>
   24ea0:	fff70793          	addi	a5,a4,-1
   24ea4:	40a787b3          	sub	a5,a5,a0
   24ea8:	ff87f793          	andi	a5,a5,-8
   24eac:	00878793          	addi	a5,a5,8
   24eb0:	00fc87b3          	add	a5,s9,a5
   24eb4:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   24eb8:	06810793          	addi	a5,sp,104
   24ebc:	00f50663          	beq	a0,a5,24ec8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1038>
      delete[] (char *)base;
   24ec0:	00050463          	beq	a0,zero,24ec8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1038>
   24ec4:	e9cf10ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   24ec8:	0b913423          	sd	s9,168(sp)
    end = dest;
   24ecc:	00813783          	ld	a5,8(sp)
   24ed0:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   24ed4:	012c8cb3          	add	s9,s9,s2
   24ed8:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   24edc:	0b013783          	ld	a5,176(sp)
   24ee0:	0147b023          	sd	s4,0(a5)
    end++;
   24ee4:	0b013783          	ld	a5,176(sp)
   24ee8:	00878793          	addi	a5,a5,8
   24eec:	0af13823          	sd	a5,176(sp)
      break;
   24ef0:	6040006f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   24ef4:	01913423          	sd	s9,8(sp)
   24ef8:	fc1ff06f          	jal	zero,24eb8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1028>
      stack.push_back(cur.sleb128());
   24efc:	05010513          	addi	a0,sp,80
   24f00:	c51f70ef          	jal	ra,1cb50 <dwarf::cursor::sleb128()>
   24f04:	00a13423          	sd	a0,8(sp)
  size_type size() const { return end - base; }
   24f08:	0a813703          	ld	a4,168(sp)
   24f0c:	0b013783          	ld	a5,176(sp)
   24f10:	40e787b3          	sub	a5,a5,a4
   24f14:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   24f18:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   24f1c:	0b813903          	ld	s2,184(sp)
   24f20:	40e90933          	sub	s2,s2,a4
   24f24:	40395913          	srai	s2,s2,0x3
   24f28:	06f97a63          	bgeu	s2,a5,24f9c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x110c>
   24f2c:	00091463          	bne	s2,zero,24f34 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10a4>
   24f30:	00100913          	addi	s2,zero,1
    while (target < n)
   24f34:	00f97663          	bgeu	s2,a5,24f40 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10b0>
      target <<= 1;
   24f38:	00191913          	slli	s2,s2,0x1
    while (target < n)
   24f3c:	fef96ee3          	bltu	s2,a5,24f38 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10a8>
    char *newbuf = new char[sizeof(T[target])];
   24f40:	00391913          	slli	s2,s2,0x3
   24f44:	00090513          	addi	a0,s2,0
   24f48:	b98f10ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   24f4c:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   24f50:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   24f54:	0b013703          	ld	a4,176(sp)
   24f58:	06e57063          	bgeu	a0,a4,24fb8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1128>
    T *src = base, *dest = (T *)newbuf;
   24f5c:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   24f60:	00878793          	addi	a5,a5,8
   24f64:	fee7eee3          	bltu	a5,a4,24f60 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10d0>
   24f68:	fff70a13          	addi	s4,a4,-1
   24f6c:	40aa0a33          	sub	s4,s4,a0
   24f70:	ff8a7a13          	andi	s4,s4,-8
   24f74:	008a0a13          	addi	s4,s4,8
   24f78:	014c8a33          	add	s4,s9,s4
    if ((char *)base != buf)
   24f7c:	06810793          	addi	a5,sp,104
   24f80:	00f50663          	beq	a0,a5,24f8c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10fc>
      delete[] (char *)base;
   24f84:	00050463          	beq	a0,zero,24f8c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10fc>
   24f88:	dd8f10ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   24f8c:	0b913423          	sd	s9,168(sp)
    end = dest;
   24f90:	0b413823          	sd	s4,176(sp)
    cap = base + target;
   24f94:	012c8cb3          	add	s9,s9,s2
   24f98:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   24f9c:	0b013783          	ld	a5,176(sp)
   24fa0:	00813703          	ld	a4,8(sp)
   24fa4:	00e7b023          	sd	a4,0(a5)
    end++;
   24fa8:	0b013783          	ld	a5,176(sp)
   24fac:	00878793          	addi	a5,a5,8
   24fb0:	0af13823          	sd	a5,176(sp)
      break;
   24fb4:	5400006f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   24fb8:	000c8a13          	addi	s4,s9,0
   24fbc:	fc1ff06f          	jal	zero,24f7c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10ec>
      throw runtime_error("DW_OP_fbreg not implemented");
   24fc0:	01000513          	addi	a0,zero,16
   24fc4:	c0cf10ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   24fc8:	00050913          	addi	s2,a0,0
   24fcc:	00012597          	auipc	a1,0x12
   24fd0:	49c58593          	addi	a1,a1,1180 # 37468 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x2c0>
   24fd4:	bccf10ef          	jal	ra,163a0 <std::runtime_error::runtime_error(char const*)@plt>
   24fd8:	0001d617          	auipc	a2,0x1d
   24fdc:	42863603          	ld	a2,1064(a2) # 42400 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   24fe0:	0001d597          	auipc	a1,0x1d
   24fe4:	6105b583          	ld	a1,1552(a1) # 425f0 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   24fe8:	00090513          	addi	a0,s2,0
   24fec:	e74f10ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   24ff0:	00050413          	addi	s0,a0,0
   24ff4:	2480106f          	jal	zero,2623c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      tmp1.u = (unsigned)op - (unsigned)DW_OP::breg0;
   24ff8:	f909091b          	addiw	s2,s2,-112
      tmp2.s = cur.sleb128();
   24ffc:	05010513          	addi	a0,sp,80
   25000:	b51f70ef          	jal	ra,1cb50 <dwarf::cursor::sleb128()>
   25004:	00050c93          	addi	s9,a0,0
      stack.push_back((int64_t)ctx->reg(tmp1.u) + tmp2.s);
   25008:	000b3783          	ld	a5,0(s6)
   2500c:	0107b783          	ld	a5,16(a5)
   25010:	00090593          	addi	a1,s2,0
   25014:	000b0513          	addi	a0,s6,0
   25018:	000780e7          	jalr	ra,0(a5)
   2501c:	01950cb3          	add	s9,a0,s9
  size_type size() const { return end - base; }
   25020:	0a813703          	ld	a4,168(sp)
   25024:	0b013783          	ld	a5,176(sp)
   25028:	40e787b3          	sub	a5,a5,a4
   2502c:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   25030:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   25034:	0b813903          	ld	s2,184(sp)
   25038:	40e90933          	sub	s2,s2,a4
   2503c:	40395913          	srai	s2,s2,0x3
   25040:	06f97e63          	bgeu	s2,a5,250bc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x122c>
   25044:	00091463          	bne	s2,zero,2504c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x11bc>
   25048:	00100913          	addi	s2,zero,1
    while (target < n)
   2504c:	00f97663          	bgeu	s2,a5,25058 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x11c8>
      target <<= 1;
   25050:	00191913          	slli	s2,s2,0x1
    while (target < n)
   25054:	fef96ee3          	bltu	s2,a5,25050 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x11c0>
    char *newbuf = new char[sizeof(T[target])];
   25058:	00391913          	slli	s2,s2,0x3
   2505c:	00090513          	addi	a0,s2,0
   25060:	a80f10ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   25064:	00050a13          	addi	s4,a0,0
    T *src = base, *dest = (T *)newbuf;
   25068:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   2506c:	0b013703          	ld	a4,176(sp)
   25070:	06e57263          	bgeu	a0,a4,250d4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1244>
    T *src = base, *dest = (T *)newbuf;
   25074:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   25078:	00878793          	addi	a5,a5,8
   2507c:	fee7eee3          	bltu	a5,a4,25078 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x11e8>
   25080:	fff70793          	addi	a5,a4,-1
   25084:	40a787b3          	sub	a5,a5,a0
   25088:	ff87f793          	andi	a5,a5,-8
   2508c:	00878793          	addi	a5,a5,8
   25090:	00fa07b3          	add	a5,s4,a5
   25094:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   25098:	06810793          	addi	a5,sp,104
   2509c:	00f50663          	beq	a0,a5,250a8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1218>
      delete[] (char *)base;
   250a0:	00050463          	beq	a0,zero,250a8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1218>
   250a4:	cbcf10ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   250a8:	0b413423          	sd	s4,168(sp)
    end = dest;
   250ac:	00813783          	ld	a5,8(sp)
   250b0:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   250b4:	012a0a33          	add	s4,s4,s2
   250b8:	0b413c23          	sd	s4,184(sp)
    new (end) T(std::move(x));
   250bc:	0b013783          	ld	a5,176(sp)
   250c0:	0197b023          	sd	s9,0(a5)
    end++;
   250c4:	0b013783          	ld	a5,176(sp)
   250c8:	00878793          	addi	a5,a5,8
   250cc:	0af13823          	sd	a5,176(sp)
      break;
   250d0:	4240006f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   250d4:	01413423          	sd	s4,8(sp)
   250d8:	fc1ff06f          	jal	zero,25098 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1208>
   250dc:	00000913          	addi	s2,zero,0
      tmp2.s = cur.sleb128();
   250e0:	05010513          	addi	a0,sp,80
   250e4:	a6df70ef          	jal	ra,1cb50 <dwarf::cursor::sleb128()>
   250e8:	00050c93          	addi	s9,a0,0
      stack.push_back((int64_t)ctx->reg(tmp1.u) + tmp2.s);
   250ec:	000b3783          	ld	a5,0(s6)
   250f0:	0107b783          	ld	a5,16(a5)
   250f4:	0009059b          	addiw	a1,s2,0
   250f8:	000b0513          	addi	a0,s6,0
   250fc:	000780e7          	jalr	ra,0(a5)
   25100:	01950cb3          	add	s9,a0,s9
  size_type size() const { return end - base; }
   25104:	0a813703          	ld	a4,168(sp)
   25108:	0b013783          	ld	a5,176(sp)
   2510c:	40e787b3          	sub	a5,a5,a4
   25110:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   25114:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   25118:	0b813903          	ld	s2,184(sp)
   2511c:	40e90933          	sub	s2,s2,a4
   25120:	40395913          	srai	s2,s2,0x3
   25124:	06f97e63          	bgeu	s2,a5,251a0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1310>
   25128:	00091463          	bne	s2,zero,25130 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x12a0>
   2512c:	00100913          	addi	s2,zero,1
    while (target < n)
   25130:	00f97663          	bgeu	s2,a5,2513c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x12ac>
      target <<= 1;
   25134:	00191913          	slli	s2,s2,0x1
    while (target < n)
   25138:	fef96ee3          	bltu	s2,a5,25134 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x12a4>
    char *newbuf = new char[sizeof(T[target])];
   2513c:	00391913          	slli	s2,s2,0x3
   25140:	00090513          	addi	a0,s2,0
   25144:	99cf10ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   25148:	00050a13          	addi	s4,a0,0
    T *src = base, *dest = (T *)newbuf;
   2514c:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   25150:	0b013703          	ld	a4,176(sp)
   25154:	06e57263          	bgeu	a0,a4,251b8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1328>
    T *src = base, *dest = (T *)newbuf;
   25158:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   2515c:	00878793          	addi	a5,a5,8
   25160:	fee7eee3          	bltu	a5,a4,2515c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x12cc>
   25164:	fff70793          	addi	a5,a4,-1
   25168:	40a787b3          	sub	a5,a5,a0
   2516c:	ff87f793          	andi	a5,a5,-8
   25170:	00878793          	addi	a5,a5,8
   25174:	00fa07b3          	add	a5,s4,a5
   25178:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   2517c:	06810793          	addi	a5,sp,104
   25180:	00f50663          	beq	a0,a5,2518c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x12fc>
      delete[] (char *)base;
   25184:	00050463          	beq	a0,zero,2518c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x12fc>
   25188:	bd8f10ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   2518c:	0b413423          	sd	s4,168(sp)
    end = dest;
   25190:	00813783          	ld	a5,8(sp)
   25194:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   25198:	012a0a33          	add	s4,s4,s2
   2519c:	0b413c23          	sd	s4,184(sp)
    new (end) T(std::move(x));
   251a0:	0b013783          	ld	a5,176(sp)
   251a4:	0197b023          	sd	s9,0(a5)
    end++;
   251a8:	0b013783          	ld	a5,176(sp)
   251ac:	00878793          	addi	a5,a5,8
   251b0:	0af13823          	sd	a5,176(sp)
      break;
   251b4:	3400006f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   251b8:	01413423          	sd	s4,8(sp)
   251bc:	fc1ff06f          	jal	zero,2517c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x12ec>
  bool empty() const { return base == end; }
   251c0:	0a813703          	ld	a4,168(sp)
   251c4:	0b013c83          	ld	s9,176(sp)
      CHECK();
   251c8:	66ec84e3          	beq	s9,a4,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
  size_type size() const { return end - base; }
   251cc:	40ec87b3          	sub	a5,s9,a4
   251d0:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   251d4:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   251d8:	0b813903          	ld	s2,184(sp)
   251dc:	40e90933          	sub	s2,s2,a4
   251e0:	40395913          	srai	s2,s2,0x3
   251e4:	06f97e63          	bgeu	s2,a5,25260 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13d0>
   251e8:	00091463          	bne	s2,zero,251f0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1360>
   251ec:	00100913          	addi	s2,zero,1
    while (target < n)
   251f0:	00f97663          	bgeu	s2,a5,251fc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x136c>
      target <<= 1;
   251f4:	00191913          	slli	s2,s2,0x1
    while (target < n)
   251f8:	fef96ee3          	bltu	s2,a5,251f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1364>
    char *newbuf = new char[sizeof(T[target])];
   251fc:	00391913          	slli	s2,s2,0x3
   25200:	00090513          	addi	a0,s2,0
   25204:	8dcf10ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   25208:	00050a13          	addi	s4,a0,0
    T *src = base, *dest = (T *)newbuf;
   2520c:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   25210:	0b013703          	ld	a4,176(sp)
   25214:	06e57463          	bgeu	a0,a4,2527c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13ec>
    T *src = base, *dest = (T *)newbuf;
   25218:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   2521c:	00878793          	addi	a5,a5,8
   25220:	fee7eee3          	bltu	a5,a4,2521c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x138c>
   25224:	fff70793          	addi	a5,a4,-1
   25228:	40a787b3          	sub	a5,a5,a0
   2522c:	ff87f793          	andi	a5,a5,-8
   25230:	00878793          	addi	a5,a5,8
   25234:	00fa07b3          	add	a5,s4,a5
   25238:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   2523c:	06810793          	addi	a5,sp,104
   25240:	00f50663          	beq	a0,a5,2524c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13bc>
      delete[] (char *)base;
   25244:	00050463          	beq	a0,zero,2524c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13bc>
   25248:	b18f10ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   2524c:	0b413423          	sd	s4,168(sp)
    end = dest;
   25250:	00813783          	ld	a5,8(sp)
   25254:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   25258:	012a0a33          	add	s4,s4,s2
   2525c:	0b413c23          	sd	s4,184(sp)
    new (end) T(x);
   25260:	ff8cb703          	ld	a4,-8(s9)
   25264:	0b013783          	ld	a5,176(sp)
   25268:	00e7b023          	sd	a4,0(a5)
    end++;
   2526c:	0b013783          	ld	a5,176(sp)
   25270:	00878793          	addi	a5,a5,8
   25274:	0af13823          	sd	a5,176(sp)
  }
   25278:	27c0006f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   2527c:	01413423          	sd	s4,8(sp)
   25280:	fbdff06f          	jal	zero,2523c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13ac>
  bool empty() const { return base == end; }
   25284:	0b013783          	ld	a5,176(sp)
      CHECK();
   25288:	0a813703          	ld	a4,168(sp)
   2528c:	5ae782e3          	beq	a5,a4,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
    end--;
   25290:	ff878793          	addi	a5,a5,-8
   25294:	0af13823          	sd	a5,176(sp)
  }
   25298:	25c0006f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2529c:	0106b783          	ld	a5,16(a3)
   252a0:	00f76663          	bltu	a4,a5,252ac <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x141c>
      underflow();
   252a4:	05010513          	addi	a0,sp,80
   252a8:	855f70ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   252ac:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   252b0:	05013703          	ld	a4,80(sp)
   252b4:	01c72703          	lw	a4,28(a4)
   252b8:	00071463          	bne	a4,zero,252c0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1430>
   252bc:	2100106f          	jal	zero,264cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x263c>
        val = (val << 8) | (uint64_t)p[i];
   252c0:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   252c4:	20c0106f          	jal	zero,264d0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2640>
    char *newbuf = new char[sizeof(T[target])];
   252c8:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   252cc:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   252d0:	0b013703          	ld	a4,176(sp)
   252d4:	06e57463          	bgeu	a0,a4,2533c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x14ac>
    T *src = base, *dest = (T *)newbuf;
   252d8:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   252dc:	00878793          	addi	a5,a5,8
   252e0:	fee7eee3          	bltu	a5,a4,252dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x144c>
   252e4:	fff70793          	addi	a5,a4,-1
   252e8:	40a787b3          	sub	a5,a5,a0
   252ec:	ff87f793          	andi	a5,a5,-8
   252f0:	00878793          	addi	a5,a5,8
   252f4:	00fc87b3          	add	a5,s9,a5
   252f8:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   252fc:	06810793          	addi	a5,sp,104
   25300:	00f50663          	beq	a0,a5,2530c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x147c>
      delete[] (char *)base;
   25304:	00050463          	beq	a0,zero,2530c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x147c>
   25308:	a58f10ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   2530c:	0b913423          	sd	s9,168(sp)
    end = dest;
   25310:	00813783          	ld	a5,8(sp)
   25314:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   25318:	012c8cb3          	add	s9,s9,s2
   2531c:	0b913c23          	sd	s9,184(sp)
    new (end) T(x);
   25320:	000a3703          	ld	a4,0(s4)
   25324:	0b013783          	ld	a5,176(sp)
   25328:	00e7b023          	sd	a4,0(a5)
    end++;
   2532c:	0b013783          	ld	a5,176(sp)
   25330:	00878793          	addi	a5,a5,8
   25334:	0af13823          	sd	a5,176(sp)
  }
   25338:	1bc0006f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   2533c:	01913423          	sd	s9,8(sp)
   25340:	fbdff06f          	jal	zero,252fc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x146c>
  size_type size() const { return end - base; }
   25344:	0b013c83          	ld	s9,176(sp)
   25348:	0a813703          	ld	a4,168(sp)
   2534c:	40ec87b3          	sub	a5,s9,a4
      CHECKN(2);
   25350:	00800693          	addi	a3,zero,8
   25354:	4cf6fee3          	bgeu	a3,a5,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   25358:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   2535c:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   25360:	0b813903          	ld	s2,184(sp)
   25364:	40e90933          	sub	s2,s2,a4
   25368:	40395913          	srai	s2,s2,0x3
   2536c:	06f97e63          	bgeu	s2,a5,253e8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1558>
   25370:	00091463          	bne	s2,zero,25378 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x14e8>
   25374:	00100913          	addi	s2,zero,1
    while (target < n)
   25378:	00f97663          	bgeu	s2,a5,25384 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x14f4>
      target <<= 1;
   2537c:	00191913          	slli	s2,s2,0x1
    while (target < n)
   25380:	fef96ee3          	bltu	s2,a5,2537c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x14ec>
    char *newbuf = new char[sizeof(T[target])];
   25384:	00391913          	slli	s2,s2,0x3
   25388:	00090513          	addi	a0,s2,0
   2538c:	f55f00ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   25390:	00050a13          	addi	s4,a0,0
    T *src = base, *dest = (T *)newbuf;
   25394:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   25398:	0b013703          	ld	a4,176(sp)
   2539c:	06e57463          	bgeu	a0,a4,25404 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1574>
    T *src = base, *dest = (T *)newbuf;
   253a0:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   253a4:	00878793          	addi	a5,a5,8
   253a8:	fee7eee3          	bltu	a5,a4,253a4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1514>
   253ac:	fff70793          	addi	a5,a4,-1
   253b0:	40a787b3          	sub	a5,a5,a0
   253b4:	ff87f793          	andi	a5,a5,-8
   253b8:	00878793          	addi	a5,a5,8
   253bc:	00fa07b3          	add	a5,s4,a5
   253c0:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   253c4:	06810793          	addi	a5,sp,104
   253c8:	00f50663          	beq	a0,a5,253d4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1544>
      delete[] (char *)base;
   253cc:	00050463          	beq	a0,zero,253d4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1544>
   253d0:	990f10ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   253d4:	0b413423          	sd	s4,168(sp)
    end = dest;
   253d8:	00813783          	ld	a5,8(sp)
   253dc:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   253e0:	012a0a33          	add	s4,s4,s2
   253e4:	0b413c23          	sd	s4,184(sp)
    new (end) T(x);
   253e8:	ff0cb703          	ld	a4,-16(s9)
   253ec:	0b013783          	ld	a5,176(sp)
   253f0:	00e7b023          	sd	a4,0(a5)
    end++;
   253f4:	0b013783          	ld	a5,176(sp)
   253f8:	00878793          	addi	a5,a5,8
   253fc:	0af13823          	sd	a5,176(sp)
  }
   25400:	0f40006f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   25404:	01413423          	sd	s4,8(sp)
   25408:	fbdff06f          	jal	zero,253c4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1534>
  size_type size() const { return end - base; }
   2540c:	0b013783          	ld	a5,176(sp)
   25410:	0a813703          	ld	a4,168(sp)
   25414:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   25418:	00800693          	addi	a3,zero,8
   2541c:	40e6fae3          	bgeu	a3,a4,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp1.u = stack.back();
   25420:	ff87b703          	ld	a4,-8(a5)
      stack.back() = stack.revat(1);
   25424:	ff07b683          	ld	a3,-16(a5)
   25428:	fed7bc23          	sd	a3,-8(a5)
  reference revat(size_type n) { return *(end - 1 - n); }
   2542c:	0b013783          	ld	a5,176(sp)
      stack.revat(1) = tmp1.u;
   25430:	fee7b823          	sd	a4,-16(a5)
      break;
   25434:	0c00006f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   25438:	0b013783          	ld	a5,176(sp)
   2543c:	0a813703          	ld	a4,168(sp)
   25440:	40e78733          	sub	a4,a5,a4
      CHECKN(3);
   25444:	01000693          	addi	a3,zero,16
   25448:	3ee6f4e3          	bgeu	a3,a4,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp1.u = stack.back();
   2544c:	ff87b703          	ld	a4,-8(a5)
      stack.back() = stack.revat(1);
   25450:	ff07b683          	ld	a3,-16(a5)
   25454:	fed7bc23          	sd	a3,-8(a5)
  reference revat(size_type n) { return *(end - 1 - n); }
   25458:	0b013783          	ld	a5,176(sp)
      stack.revat(1) = stack.revat(2);
   2545c:	fe87b683          	ld	a3,-24(a5)
   25460:	fed7b823          	sd	a3,-16(a5)
   25464:	0b013783          	ld	a5,176(sp)
      stack.revat(2) = tmp1.u;
   25468:	fee7b423          	sd	a4,-24(a5)
      break;
   2546c:	0880006f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
      tmp1.u = subsec->addr_size;
   25470:	0584e603          	lwu	a2,88(s1)
  bool empty() const { return base == end; }
   25474:	0b013903          	ld	s2,176(sp)
      CHECK();
   25478:	0a813783          	ld	a5,168(sp)
   2547c:	3b278ae3          	beq	a5,s2,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      stack.back() = ctx->deref_size(stack.back(), tmp1.u);
   25480:	000b3783          	ld	a5,0(s6)
   25484:	0187b783          	ld	a5,24(a5)
   25488:	0006061b          	addiw	a2,a2,0
   2548c:	ff893583          	ld	a1,-8(s2)
   25490:	000b0513          	addi	a0,s6,0
   25494:	000780e7          	jalr	ra,0(a5)
   25498:	0580006f          	jal	zero,254f0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1660>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2549c:	0106b783          	ld	a5,16(a3)
   254a0:	00f76663          	bltu	a4,a5,254ac <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x161c>
      underflow();
   254a4:	05010513          	addi	a0,sp,80
   254a8:	e54f70ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   254ac:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   254b0:	05013703          	ld	a4,80(sp)
   254b4:	01c72703          	lw	a4,28(a4)
   254b8:	00071463          	bne	a4,zero,254c0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1630>
   254bc:	0780106f          	jal	zero,26534 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x26a4>
        val = (val << 8) | (uint64_t)p[i];
   254c0:	0007c603          	lbu	a2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   254c4:	0740106f          	jal	zero,26538 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x26a8>
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   254c8:	0001d797          	auipc	a5,0x1d
   254cc:	e807b783          	ld	a5,-384(a5) # 42348 <vtable for dwarf::expr_error@@Base+0x8c0>
   254d0:	01078793          	addi	a5,a5,16
   254d4:	00f93023          	sd	a5,0(s2)
        throw expr_error("DW_OP_deref_size operand exceeds address size");
   254d8:	0001d617          	auipc	a2,0x1d
   254dc:	fc863603          	ld	a2,-56(a2) # 424a0 <dwarf::expr_error::~expr_error()@@Base+0x1be30>
   254e0:	0001d597          	auipc	a1,0x1d
   254e4:	0385b583          	ld	a1,56(a1) # 42518 <typeinfo for dwarf::expr_error@@Base+0xab8>
   254e8:	00090513          	addi	a0,s2,0
   254ec:	974f10ef          	jal	ra,16660 <__cxa_throw@plt>
      stack.back() = ctx->deref_size(stack.back(), tmp1.u);
   254f0:	fea93c23          	sd	a0,-8(s2)
      { return _M_ptr; }
   254f4:	05013683          	ld	a3,80(sp)
  bool end() const { return pos >= sec->end; }
   254f8:	06013703          	ld	a4,96(sp)
  while (!cur.end()) {
   254fc:	0106b783          	ld	a5,16(a3)
   25500:	36f778e3          	bgeu	a4,a5,26070 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21e0>
    if (sec->ord == byte_order::lsb) {
   25504:	01c6a783          	lw	a5,28(a3)
   25508:	00079463          	bne	a5,zero,25510 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1680>
   2550c:	0900106f          	jal	zero,2659c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x270c>
        val = (val << 8) | (uint64_t)p[i];
   25510:	00074783          	lbu	a5,0(a4)
      for (unsigned i = 0; i < sizeof(T); i++)
   25514:	08c0106f          	jal	zero,265a0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2710>
      tmp1.u = subsec->addr_size;
   25518:	0584e683          	lwu	a3,88(s1)
  size_type size() const { return end - base; }
   2551c:	0b013903          	ld	s2,176(sp)
   25520:	0a813783          	ld	a5,168(sp)
   25524:	40f907b3          	sub	a5,s2,a5
      CHECKN(2);
   25528:	30fdf4e3          	bgeu	s11,a5,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp2.u = stack.back();
   2552c:	ff893583          	ld	a1,-8(s2)
    end--;
   25530:	ff890793          	addi	a5,s2,-8
   25534:	0af13823          	sd	a5,176(sp)
      stack.back() = ctx->xderef_size(tmp2.u, stack.back(), tmp1.u);
   25538:	000b3783          	ld	a5,0(s6)
   2553c:	0207b783          	ld	a5,32(a5)
   25540:	0006869b          	addiw	a3,a3,0
   25544:	ff093603          	ld	a2,-16(s2)
   25548:	000b0513          	addi	a0,s6,0
   2554c:	000780e7          	jalr	ra,0(a5)
   25550:	0580006f          	jal	zero,255a8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1718>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   25554:	0106b783          	ld	a5,16(a3)
   25558:	00f76663          	bltu	a4,a5,25564 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x16d4>
      underflow();
   2555c:	05010513          	addi	a0,sp,80
   25560:	d9cf70ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   25564:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   25568:	05013703          	ld	a4,80(sp)
   2556c:	01c72703          	lw	a4,28(a4)
   25570:	00071463          	bne	a4,zero,25578 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x16e8>
   25574:	7f50006f          	jal	zero,26568 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x26d8>
        val = (val << 8) | (uint64_t)p[i];
   25578:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   2557c:	7f10006f          	jal	zero,2656c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x26dc>
   25580:	0001d797          	auipc	a5,0x1d
   25584:	dc87b783          	ld	a5,-568(a5) # 42348 <vtable for dwarf::expr_error@@Base+0x8c0>
   25588:	01078793          	addi	a5,a5,16
   2558c:	00f93023          	sd	a5,0(s2)
        throw expr_error("DW_OP_xderef_size operand exceeds address size");
   25590:	0001d617          	auipc	a2,0x1d
   25594:	f1063603          	ld	a2,-240(a2) # 424a0 <dwarf::expr_error::~expr_error()@@Base+0x1be30>
   25598:	0001d597          	auipc	a1,0x1d
   2559c:	f805b583          	ld	a1,-128(a1) # 42518 <typeinfo for dwarf::expr_error@@Base+0xab8>
   255a0:	00090513          	addi	a0,s2,0
   255a4:	8bcf10ef          	jal	ra,16660 <__cxa_throw@plt>
      stack.back() = ctx->xderef_size(tmp2.u, stack.back(), tmp1.u);
   255a8:	fea93823          	sd	a0,-16(s2)
      break;
   255ac:	f49ff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
      throw runtime_error("DW_OP_push_object_address not implemented");
   255b0:	01000513          	addi	a0,zero,16
   255b4:	e1df00ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   255b8:	00050913          	addi	s2,a0,0
   255bc:	00012597          	auipc	a1,0x12
   255c0:	f2c58593          	addi	a1,a1,-212 # 374e8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x340>
   255c4:	dddf00ef          	jal	ra,163a0 <std::runtime_error::runtime_error(char const*)@plt>
   255c8:	0001d617          	auipc	a2,0x1d
   255cc:	e3863603          	ld	a2,-456(a2) # 42400 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   255d0:	0001d597          	auipc	a1,0x1d
   255d4:	0205b583          	ld	a1,32(a1) # 425f0 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   255d8:	00090513          	addi	a0,s2,0
   255dc:	884f10ef          	jal	ra,16660 <__cxa_throw@plt>
  bool empty() const { return base == end; }
   255e0:	0b013903          	ld	s2,176(sp)
      CHECK();
   255e4:	0a813783          	ld	a5,168(sp)
   255e8:	252784e3          	beq	a5,s2,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      stack.back() = ctx->form_tls_address(stack.back());
   255ec:	000b3783          	ld	a5,0(s6)
   255f0:	0287b783          	ld	a5,40(a5)
   255f4:	ff893583          	ld	a1,-8(s2)
   255f8:	000b0513          	addi	a0,s6,0
   255fc:	000780e7          	jalr	ra,0(a5)
   25600:	fea93c23          	sd	a0,-8(s2)
      break;
   25604:	ef1ff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
      throw runtime_error("DW_OP_call_frame_cfa not implemented");
   25608:	01000513          	addi	a0,zero,16
   2560c:	dc5f00ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   25610:	00050913          	addi	s2,a0,0
   25614:	00012597          	auipc	a1,0x12
   25618:	f0458593          	addi	a1,a1,-252 # 37518 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x370>
   2561c:	d85f00ef          	jal	ra,163a0 <std::runtime_error::runtime_error(char const*)@plt>
   25620:	0001d617          	auipc	a2,0x1d
   25624:	de063603          	ld	a2,-544(a2) # 42400 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   25628:	0001d597          	auipc	a1,0x1d
   2562c:	fc85b583          	ld	a1,-56(a1) # 425f0 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   25630:	00090513          	addi	a0,s2,0
   25634:	82cf10ef          	jal	ra,16660 <__cxa_throw@plt>
   25638:	0b013703          	ld	a4,176(sp)
      CHECK();
   2563c:	0a813783          	ld	a5,168(sp)
   25640:	1ef708e3          	beq	a4,a5,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      if (tmp1.s < 0)
   25644:	ff873783          	ld	a5,-8(a4)
   25648:	43f7d693          	srai	a3,a5,0x3f
   2564c:	00d7c7b3          	xor	a5,a5,a3
   25650:	40d787b3          	sub	a5,a5,a3
      stack.back() = tmp1.u;
   25654:	fef73c23          	sd	a5,-8(a4)
      break;
   25658:	e9dff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   2565c:	0b013783          	ld	a5,176(sp)
   25660:	0a813703          	ld	a4,168(sp)
   25664:	40e78733          	sub	a4,a5,a4
      UBINOP(&);
   25668:	00800693          	addi	a3,zero,8
   2566c:	1ce6f2e3          	bgeu	a3,a4,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   25670:	ff87b683          	ld	a3,-8(a5)
    end--;
   25674:	ff878713          	addi	a4,a5,-8
   25678:	0ae13823          	sd	a4,176(sp)
   2567c:	ff07b703          	ld	a4,-16(a5)
   25680:	00d77733          	and	a4,a4,a3
   25684:	fee7b823          	sd	a4,-16(a5)
      break;
   25688:	e6dff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   2568c:	0b013783          	ld	a5,176(sp)
   25690:	0a813703          	ld	a4,168(sp)
   25694:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   25698:	00800693          	addi	a3,zero,8
   2569c:	18e6fae3          	bgeu	a3,a4,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp1.u = stack.back();
   256a0:	ff87b703          	ld	a4,-8(a5)
    end--;
   256a4:	ff878693          	addi	a3,a5,-8
   256a8:	0ad13823          	sd	a3,176(sp)
      tmp3.s = tmp1.s / tmp2.s;
   256ac:	ff07b683          	ld	a3,-16(a5)
   256b0:	02d74733          	div	a4,a4,a3
      stack.back() = tmp3.u;
   256b4:	fee7b823          	sd	a4,-16(a5)
      break;
   256b8:	e3dff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   256bc:	0b013783          	ld	a5,176(sp)
   256c0:	0a813703          	ld	a4,168(sp)
   256c4:	40e78733          	sub	a4,a5,a4
      UBINOP(-);
   256c8:	00800693          	addi	a3,zero,8
   256cc:	16e6f2e3          	bgeu	a3,a4,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   256d0:	ff87b683          	ld	a3,-8(a5)
    end--;
   256d4:	ff878713          	addi	a4,a5,-8
   256d8:	0ae13823          	sd	a4,176(sp)
   256dc:	ff07b703          	ld	a4,-16(a5)
   256e0:	40d70733          	sub	a4,a4,a3
   256e4:	fee7b823          	sd	a4,-16(a5)
      break;
   256e8:	e0dff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   256ec:	0b013783          	ld	a5,176(sp)
   256f0:	0a813703          	ld	a4,168(sp)
   256f4:	40e78733          	sub	a4,a5,a4
      UBINOP(%);
   256f8:	00800693          	addi	a3,zero,8
   256fc:	12e6fae3          	bgeu	a3,a4,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   25700:	ff87b683          	ld	a3,-8(a5)
    end--;
   25704:	ff878713          	addi	a4,a5,-8
   25708:	0ae13823          	sd	a4,176(sp)
   2570c:	ff07b703          	ld	a4,-16(a5)
   25710:	02d77733          	remu	a4,a4,a3
   25714:	fee7b823          	sd	a4,-16(a5)
      break;
   25718:	dddff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   2571c:	0b013783          	ld	a5,176(sp)
   25720:	0a813703          	ld	a4,168(sp)
   25724:	40e78733          	sub	a4,a5,a4
      UBINOP(*);
   25728:	00800693          	addi	a3,zero,8
   2572c:	10e6f2e3          	bgeu	a3,a4,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   25730:	ff87b683          	ld	a3,-8(a5)
    end--;
   25734:	ff878713          	addi	a4,a5,-8
   25738:	0ae13823          	sd	a4,176(sp)
   2573c:	ff07b703          	ld	a4,-16(a5)
   25740:	02d70733          	mul	a4,a4,a3
   25744:	fee7b823          	sd	a4,-16(a5)
      break;
   25748:	dadff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  bool empty() const { return base == end; }
   2574c:	0b013783          	ld	a5,176(sp)
      CHECK();
   25750:	0a813703          	ld	a4,168(sp)
   25754:	0cf70ee3          	beq	a4,a5,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp1.s = -tmp1.s;
   25758:	ff87b703          	ld	a4,-8(a5)
   2575c:	40e00733          	sub	a4,zero,a4
      stack.back() = tmp1.u;
   25760:	fee7bc23          	sd	a4,-8(a5)
      break;
   25764:	d91ff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
   25768:	0b013783          	ld	a5,176(sp)
      CHECK();
   2576c:	0a813703          	ld	a4,168(sp)
   25770:	0cf700e3          	beq	a4,a5,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      stack.back() = ~stack.back();
   25774:	ff87b703          	ld	a4,-8(a5)
   25778:	fff74713          	xori	a4,a4,-1
   2577c:	fee7bc23          	sd	a4,-8(a5)
      break;
   25780:	d75ff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   25784:	0b013783          	ld	a5,176(sp)
   25788:	0a813703          	ld	a4,168(sp)
   2578c:	40e78733          	sub	a4,a5,a4
      UBINOP(|);
   25790:	00800693          	addi	a3,zero,8
   25794:	08e6fee3          	bgeu	a3,a4,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   25798:	ff87b683          	ld	a3,-8(a5)
    end--;
   2579c:	ff878713          	addi	a4,a5,-8
   257a0:	0ae13823          	sd	a4,176(sp)
   257a4:	ff07b703          	ld	a4,-16(a5)
   257a8:	00d76733          	or	a4,a4,a3
   257ac:	fee7b823          	sd	a4,-16(a5)
      break;
   257b0:	d45ff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   257b4:	0b013783          	ld	a5,176(sp)
   257b8:	0a813703          	ld	a4,168(sp)
   257bc:	40e78733          	sub	a4,a5,a4
      UBINOP(+);
   257c0:	00800693          	addi	a3,zero,8
   257c4:	06e6f6e3          	bgeu	a3,a4,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   257c8:	ff87b683          	ld	a3,-8(a5)
    end--;
   257cc:	ff878713          	addi	a4,a5,-8
   257d0:	0ae13823          	sd	a4,176(sp)
   257d4:	ff07b703          	ld	a4,-16(a5)
   257d8:	00d70733          	add	a4,a4,a3
   257dc:	fee7b823          	sd	a4,-16(a5)
      break;
   257e0:	d15ff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    return 0;
   257e4:	00000513          	addi	a0,zero,0
  bool empty() const { return base == end; }
   257e8:	0b013783          	ld	a5,176(sp)
      CHECK();
   257ec:	0a813703          	ld	a4,168(sp)
   257f0:	04f700e3          	beq	a4,a5,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      stack.back() += tmp1.u;
   257f4:	ff87b703          	ld	a4,-8(a5)
   257f8:	00a70733          	add	a4,a4,a0
   257fc:	fee7bc23          	sd	a4,-8(a5)
      break;
   25800:	cf5ff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   25804:	0b013783          	ld	a5,176(sp)
   25808:	0a813703          	ld	a4,168(sp)
   2580c:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   25810:	00800693          	addi	a3,zero,8
   25814:	00e6fee3          	bgeu	a3,a4,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp1.u = stack.back();
   25818:	ff87b683          	ld	a3,-8(a5)
    end--;
   2581c:	ff878713          	addi	a4,a5,-8
   25820:	0ae13823          	sd	a4,176(sp)
      tmp2.u = stack.back();
   25824:	ff07b703          	ld	a4,-16(a5)
      if (tmp1.u < sizeof(tmp2.u) * 8)
   25828:	03f00613          	addi	a2,zero,63
   2582c:	00d66863          	bltu	a2,a3,2583c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19ac>
        stack.back() = tmp2.u << tmp1.u;
   25830:	00d71733          	sll	a4,a4,a3
   25834:	fee7b823          	sd	a4,-16(a5)
   25838:	cbdff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
        stack.back() = 0;
   2583c:	fe07b823          	sd	zero,-16(a5)
   25840:	cb5ff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   25844:	0b013783          	ld	a5,176(sp)
   25848:	0a813703          	ld	a4,168(sp)
   2584c:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   25850:	00800693          	addi	a3,zero,8
   25854:	7ce6fe63          	bgeu	a3,a4,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp1.u = stack.back();
   25858:	ff87b683          	ld	a3,-8(a5)
    end--;
   2585c:	ff878713          	addi	a4,a5,-8
   25860:	0ae13823          	sd	a4,176(sp)
      tmp2.u = stack.back();
   25864:	ff07b703          	ld	a4,-16(a5)
      if (tmp1.u < sizeof(tmp2.u) * 8)
   25868:	03f00613          	addi	a2,zero,63
   2586c:	00d66863          	bltu	a2,a3,2587c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19ec>
        stack.back() = tmp2.u >> tmp1.u;
   25870:	00d75733          	srl	a4,a4,a3
   25874:	fee7b823          	sd	a4,-16(a5)
   25878:	c7dff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
        stack.back() = 0;
   2587c:	fe07b823          	sd	zero,-16(a5)
   25880:	c75ff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   25884:	0b013783          	ld	a5,176(sp)
   25888:	0a813703          	ld	a4,168(sp)
   2588c:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   25890:	00800693          	addi	a3,zero,8
   25894:	78e6fe63          	bgeu	a3,a4,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp1.u = stack.back();
   25898:	ff87b603          	ld	a2,-8(a5)
    end--;
   2589c:	ff878713          	addi	a4,a5,-8
   258a0:	0ae13823          	sd	a4,176(sp)
      tmp2.u = stack.back();
   258a4:	ff07b683          	ld	a3,-16(a5)
      if (tmp1.u < sizeof(tmp2.u) * 8)
   258a8:	03f00593          	addi	a1,zero,63
        tmp2.u = 0;
   258ac:	00000713          	addi	a4,zero,0
      if (tmp1.u < sizeof(tmp2.u) * 8)
   258b0:	00c5ea63          	bltu	a1,a2,258c4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a34>
      if (tmp3.u)
   258b4:	43f6d593          	srai	a1,a3,0x3f
   258b8:	00d5c733          	xor	a4,a1,a3
   258bc:	40b70733          	sub	a4,a4,a1
        tmp2.u >>= tmp1.u;
   258c0:	00c75733          	srl	a4,a4,a2
      if (tmp3.u)
   258c4:	0006d463          	bge	a3,zero,258cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a3c>
        tmp2.s = -tmp2.s;
   258c8:	40e00733          	sub	a4,zero,a4
      stack.back() = tmp2.u;
   258cc:	fee7b823          	sd	a4,-16(a5)
      break;
   258d0:	c25ff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   258d4:	0b013783          	ld	a5,176(sp)
   258d8:	0a813703          	ld	a4,168(sp)
   258dc:	40e78733          	sub	a4,a5,a4
      UBINOP(^);
   258e0:	00800693          	addi	a3,zero,8
   258e4:	74e6f663          	bgeu	a3,a4,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   258e8:	ff87b683          	ld	a3,-8(a5)
    end--;
   258ec:	ff878713          	addi	a4,a5,-8
   258f0:	0ae13823          	sd	a4,176(sp)
   258f4:	ff07b703          	ld	a4,-16(a5)
   258f8:	00d74733          	xor	a4,a4,a3
   258fc:	fee7b823          	sd	a4,-16(a5)
      break;
   25900:	bf5ff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   25904:	0b013703          	ld	a4,176(sp)
   25908:	0a813783          	ld	a5,168(sp)
   2590c:	40f707b3          	sub	a5,a4,a5
      SRELOP(<=);
   25910:	00800693          	addi	a3,zero,8
   25914:	70f6fe63          	bgeu	a3,a5,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   25918:	ff873783          	ld	a5,-8(a4)
    end--;
   2591c:	ff870693          	addi	a3,a4,-8
   25920:	0ad13823          	sd	a3,176(sp)
   25924:	ff073683          	ld	a3,-16(a4)
   25928:	00d7a7b3          	slt	a5,a5,a3
   2592c:	0017c793          	xori	a5,a5,1
   25930:	02079793          	slli	a5,a5,0x20
   25934:	0207d793          	srli	a5,a5,0x20
   25938:	fef73823          	sd	a5,-16(a4)
      break;
   2593c:	bb9ff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   25940:	0b013703          	ld	a4,176(sp)
   25944:	0a813783          	ld	a5,168(sp)
   25948:	40f707b3          	sub	a5,a4,a5
      SRELOP(>=);
   2594c:	00800693          	addi	a3,zero,8
   25950:	6ef6f063          	bgeu	a3,a5,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   25954:	ff873783          	ld	a5,-8(a4)
    end--;
   25958:	ff870693          	addi	a3,a4,-8
   2595c:	0ad13823          	sd	a3,176(sp)
   25960:	ff073683          	ld	a3,-16(a4)
   25964:	00d7a7b3          	slt	a5,a5,a3
   25968:	0017c793          	xori	a5,a5,1
   2596c:	02079793          	slli	a5,a5,0x20
   25970:	0207d793          	srli	a5,a5,0x20
   25974:	fef73823          	sd	a5,-16(a4)
      break;
   25978:	b7dff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   2597c:	0b013703          	ld	a4,176(sp)
   25980:	0a813783          	ld	a5,168(sp)
   25984:	40f707b3          	sub	a5,a4,a5
      SRELOP(==);
   25988:	00800693          	addi	a3,zero,8
   2598c:	6af6f263          	bgeu	a3,a5,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   25990:	ff873783          	ld	a5,-8(a4)
    end--;
   25994:	ff870693          	addi	a3,a4,-8
   25998:	0ad13823          	sd	a3,176(sp)
   2599c:	ff073683          	ld	a3,-16(a4)
   259a0:	00d7a7b3          	slt	a5,a5,a3
   259a4:	0017c793          	xori	a5,a5,1
   259a8:	02079793          	slli	a5,a5,0x20
   259ac:	0207d793          	srli	a5,a5,0x20
   259b0:	fef73823          	sd	a5,-16(a4)
      break;
   259b4:	b41ff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   259b8:	0b013703          	ld	a4,176(sp)
   259bc:	0a813783          	ld	a5,168(sp)
   259c0:	40f707b3          	sub	a5,a4,a5
      SRELOP(<);
   259c4:	00800693          	addi	a3,zero,8
   259c8:	66f6f463          	bgeu	a3,a5,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   259cc:	ff873783          	ld	a5,-8(a4)
    end--;
   259d0:	ff870693          	addi	a3,a4,-8
   259d4:	0ad13823          	sd	a3,176(sp)
   259d8:	ff073683          	ld	a3,-16(a4)
   259dc:	00d7a7b3          	slt	a5,a5,a3
   259e0:	0017c793          	xori	a5,a5,1
   259e4:	02079793          	slli	a5,a5,0x20
   259e8:	0207d793          	srli	a5,a5,0x20
   259ec:	fef73823          	sd	a5,-16(a4)
      break;
   259f0:	b05ff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   259f4:	0b013703          	ld	a4,176(sp)
   259f8:	0a813783          	ld	a5,168(sp)
   259fc:	40f707b3          	sub	a5,a4,a5
      SRELOP(>);
   25a00:	00800693          	addi	a3,zero,8
   25a04:	62f6f663          	bgeu	a3,a5,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   25a08:	ff873783          	ld	a5,-8(a4)
    end--;
   25a0c:	ff870693          	addi	a3,a4,-8
   25a10:	0ad13823          	sd	a3,176(sp)
   25a14:	ff073683          	ld	a3,-16(a4)
   25a18:	00d7a7b3          	slt	a5,a5,a3
   25a1c:	0017c793          	xori	a5,a5,1
   25a20:	02079793          	slli	a5,a5,0x20
   25a24:	0207d793          	srli	a5,a5,0x20
   25a28:	fef73823          	sd	a5,-16(a4)
      break;
   25a2c:	ac9ff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   25a30:	0b013703          	ld	a4,176(sp)
   25a34:	0a813783          	ld	a5,168(sp)
   25a38:	40f707b3          	sub	a5,a4,a5
      SRELOP(!=);
   25a3c:	00800693          	addi	a3,zero,8
   25a40:	5ef6f863          	bgeu	a3,a5,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   25a44:	ff873783          	ld	a5,-8(a4)
    end--;
   25a48:	ff870693          	addi	a3,a4,-8
   25a4c:	0ad13823          	sd	a3,176(sp)
   25a50:	ff073683          	ld	a3,-16(a4)
   25a54:	00d7a7b3          	slt	a5,a5,a3
   25a58:	0017c793          	xori	a5,a5,1
   25a5c:	02079793          	slli	a5,a5,0x20
   25a60:	0207d793          	srli	a5,a5,0x20
   25a64:	fef73823          	sd	a5,-16(a4)
      break;
   25a68:	a8dff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   25a6c:	0106b783          	ld	a5,16(a3)
   25a70:	40e78633          	sub	a2,a5,a4
   25a74:	00100693          	addi	a3,zero,1
   25a78:	00c6f463          	bgeu	a3,a2,25a80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1bf0>
   25a7c:	00f76663          	bltu	a4,a5,25a88 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1bf8>
      underflow();
   25a80:	05010513          	addi	a0,sp,80
   25a84:	878f70ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   25a88:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   25a8c:	05013703          	ld	a4,80(sp)
   25a90:	01c72703          	lw	a4,28(a4)
   25a94:	10071063          	bne	a4,zero,25b94 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1d04>
        val |= ((uint64_t)p[i]) << (i * 8);
   25a98:	0017c903          	lbu	s2,1(a5)
   25a9c:	00891913          	slli	s2,s2,0x8
   25aa0:	0007c703          	lbu	a4,0(a5)
   25aa4:	00e96933          	or	s2,s2,a4
    pos += sizeof(T);
   25aa8:	00278793          	addi	a5,a5,2
   25aac:	06f13023          	sd	a5,96(sp)
      tmp1.s = cur.fixed<int16_t>();
   25ab0:	0109191b          	slliw	s2,s2,0x10
   25ab4:	4109591b          	sraiw	s2,s2,0x10
    if (__is_single_threaded())
   25ab8:	000d4783          	lbu	a5,0(s10)
   25abc:	16078663          	beq	a5,zero,25c28 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1d98>
  { *__mem += __val; }
   25ac0:	0304a783          	lw	a5,48(s1)
   25ac4:	0017879b          	addiw	a5,a5,1
   25ac8:	02f4a823          	sw	a5,48(s1)
  section_offset get_section_offset() const { return pos - sec->begin; }
   25acc:	05013783          	ld	a5,80(sp)
   25ad0:	0087b703          	ld	a4,8(a5)
   25ad4:	06013783          	ld	a5,96(sp)
   25ad8:	40e787b3          	sub	a5,a5,a4
      cur = cursor(subsec, (int64_t)cur.get_section_offset() + tmp1.s);
   25adc:	01278933          	add	s2,a5,s2
   25ae0:	0304a783          	lw	a5,48(s1)
   25ae4:	0017879b          	addiw	a5,a5,1
   25ae8:	02f4a823          	sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   25aec:	0404b783          	ld	a5,64(s1)
   25af0:	01278933          	add	s2,a5,s2
   25af4:	05813823          	sd	s8,80(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   25af8:	05813a03          	ld	s4,88(sp)
	__r._M_pi = _M_pi;
   25afc:	04913c23          	sd	s1,88(sp)
	if (_M_pi != nullptr)
   25b00:	020a0463          	beq	s4,zero,25b28 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c98>
    if (__is_single_threaded())
   25b04:	0001d797          	auipc	a5,0x1d
   25b08:	9747b783          	ld	a5,-1676(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   25b0c:	0007c783          	lbu	a5,0(a5)
   25b10:	14078c63          	beq	a5,zero,25c68 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1dd8>
    _Atomic_word __result = *__mem;
   25b14:	030a2503          	lw	a0,48(s4)
    *__mem += __val;
   25b18:	fff5079b          	addiw	a5,a0,-1
   25b1c:	02fa2823          	sw	a5,48(s4)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   25b20:	00100793          	addi	a5,zero,1
   25b24:	14f50a63          	beq	a0,a5,25c78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1de8>
struct cursor {
   25b28:	07213023          	sd	s2,96(sp)
    if (__is_single_threaded())
   25b2c:	000d4783          	lbu	a5,0(s10)
   25b30:	1a078463          	beq	a5,zero,25cd8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1e48>
    _Atomic_word __result = *__mem;
   25b34:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   25b38:	fff5079b          	addiw	a5,a0,-1
   25b3c:	02f4a823          	sw	a5,48(s1)
   25b40:	00100793          	addi	a5,zero,1
   25b44:	9af518e3          	bne	a0,a5,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
	_M_dispose();
   25b48:	0004b783          	ld	a5,0(s1)
   25b4c:	0107b783          	ld	a5,16(a5)
   25b50:	00048513          	addi	a0,s1,0
   25b54:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   25b58:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   25b5c:	0001d797          	auipc	a5,0x1d
   25b60:	91c7b783          	ld	a5,-1764(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   25b64:	0007c783          	lbu	a5,0(a5)
   25b68:	18078063          	beq	a5,zero,25ce8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1e58>
    _Atomic_word __result = *__mem;
   25b6c:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   25b70:	fff7871b          	addiw	a4,a5,-1
   25b74:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   25b78:	00100713          	addi	a4,zero,1
   25b7c:	96e79ce3          	bne	a5,a4,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
	    _M_destroy();
   25b80:	0004b783          	ld	a5,0(s1)
   25b84:	0187b783          	ld	a5,24(a5)
   25b88:	00048513          	addi	a0,s1,0
   25b8c:	000780e7          	jalr	ra,0(a5)
   25b90:	965ff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
        val = (val << 8) | (uint64_t)p[i];
   25b94:	0007c903          	lbu	s2,0(a5)
   25b98:	00891913          	slli	s2,s2,0x8
   25b9c:	0017c703          	lbu	a4,1(a5)
   25ba0:	00e96933          	or	s2,s2,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   25ba4:	f05ff06f          	jal	zero,25aa8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c18>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   25ba8:	0106b783          	ld	a5,16(a3)
   25bac:	40e78633          	sub	a2,a5,a4
   25bb0:	00100693          	addi	a3,zero,1
   25bb4:	00c6f463          	bgeu	a3,a2,25bbc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1d2c>
   25bb8:	00f76663          	bltu	a4,a5,25bc4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1d34>
      underflow();
   25bbc:	05010513          	addi	a0,sp,80
   25bc0:	f3df60ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   25bc4:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   25bc8:	05013703          	ld	a4,80(sp)
   25bcc:	01c72703          	lw	a4,28(a4)
   25bd0:	04071263          	bne	a4,zero,25c14 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1d84>
        val |= ((uint64_t)p[i]) << (i * 8);
   25bd4:	0017c903          	lbu	s2,1(a5)
   25bd8:	00891913          	slli	s2,s2,0x8
   25bdc:	0007c703          	lbu	a4,0(a5)
   25be0:	00e96933          	or	s2,s2,a4
    pos += sizeof(T);
   25be4:	00278793          	addi	a5,a5,2
   25be8:	06f13023          	sd	a5,96(sp)
  bool empty() const { return base == end; }
   25bec:	0b013783          	ld	a5,176(sp)
      CHECK();
   25bf0:	0a813703          	ld	a4,168(sp)
   25bf4:	42f70e63          	beq	a4,a5,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp2.u = stack.back();
   25bf8:	ff87b703          	ld	a4,-8(a5)
    end--;
   25bfc:	ff878793          	addi	a5,a5,-8
   25c00:	0af13823          	sd	a5,176(sp)
      if (tmp2.u == 0)
   25c04:	8e0708e3          	beq	a4,zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
      tmp1.s = cur.fixed<int16_t>();
   25c08:	0109191b          	slliw	s2,s2,0x10
   25c0c:	4109591b          	sraiw	s2,s2,0x10
   25c10:	ea9ff06f          	jal	zero,25ab8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c28>
        val = (val << 8) | (uint64_t)p[i];
   25c14:	0007c903          	lbu	s2,0(a5)
   25c18:	00891913          	slli	s2,s2,0x8
   25c1c:	0017c703          	lbu	a4,1(a5)
   25c20:	00e96933          	or	s2,s2,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   25c24:	fc1ff06f          	jal	zero,25be4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1d54>
      __atomic_add(__mem, __val);
   25c28:	00100593          	addi	a1,zero,1
   25c2c:	03048513          	addi	a0,s1,48
   25c30:	ed0f00ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
  section_offset get_section_offset() const { return pos - sec->begin; }
   25c34:	05013783          	ld	a5,80(sp)
   25c38:	0087b703          	ld	a4,8(a5)
   25c3c:	06013783          	ld	a5,96(sp)
   25c40:	40e787b3          	sub	a5,a5,a4
      cur = cursor(subsec, (int64_t)cur.get_section_offset() + tmp1.s);
   25c44:	01278933          	add	s2,a5,s2
    if (__is_single_threaded())
   25c48:	0001d797          	auipc	a5,0x1d
   25c4c:	8307b783          	ld	a5,-2000(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   25c50:	0007c783          	lbu	a5,0(a5)
   25c54:	e80796e3          	bne	a5,zero,25ae0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c50>
      __atomic_add(__mem, __val);
   25c58:	00100593          	addi	a1,zero,1
   25c5c:	03048513          	addi	a0,s1,48
   25c60:	ea0f00ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   25c64:	e89ff06f          	jal	zero,25aec <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c5c>
      return __exchange_and_add(__mem, __val);
   25c68:	fff00593          	addi	a1,zero,-1
   25c6c:	030a0513          	addi	a0,s4,48
   25c70:	ec0f00ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   25c74:	eadff06f          	jal	zero,25b20 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c90>
	_M_dispose();
   25c78:	000a3783          	ld	a5,0(s4)
   25c7c:	0107b783          	ld	a5,16(a5)
   25c80:	000a0513          	addi	a0,s4,0
   25c84:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   25c88:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   25c8c:	0001c797          	auipc	a5,0x1c
   25c90:	7ec7b783          	ld	a5,2028(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   25c94:	0007c783          	lbu	a5,0(a5)
   25c98:	02078663          	beq	a5,zero,25cc4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1e34>
    _Atomic_word __result = *__mem;
   25c9c:	034a2783          	lw	a5,52(s4)
    *__mem += __val;
   25ca0:	fff7871b          	addiw	a4,a5,-1
   25ca4:	02ea2a23          	sw	a4,52(s4)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   25ca8:	00100713          	addi	a4,zero,1
   25cac:	e6e79ee3          	bne	a5,a4,25b28 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c98>
	    _M_destroy();
   25cb0:	000a3783          	ld	a5,0(s4)
   25cb4:	0187b783          	ld	a5,24(a5)
   25cb8:	000a0513          	addi	a0,s4,0
   25cbc:	000780e7          	jalr	ra,0(a5)
   25cc0:	e69ff06f          	jal	zero,25b28 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c98>
      return __exchange_and_add(__mem, __val);
   25cc4:	fff00593          	addi	a1,zero,-1
   25cc8:	034a0513          	addi	a0,s4,52
   25ccc:	e64f00ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   25cd0:	00050793          	addi	a5,a0,0
   25cd4:	fd5ff06f          	jal	zero,25ca8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1e18>
   25cd8:	fff00593          	addi	a1,zero,-1
   25cdc:	03048513          	addi	a0,s1,48
   25ce0:	e50f00ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   25ce4:	e5dff06f          	jal	zero,25b40 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1cb0>
   25ce8:	fff00593          	addi	a1,zero,-1
   25cec:	03448513          	addi	a0,s1,52
   25cf0:	e40f00ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   25cf4:	00050793          	addi	a5,a0,0
   25cf8:	e81ff06f          	jal	zero,25b78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ce8>
      throw runtime_error(to_string(op) + " not implemented");
   25cfc:	01000513          	addi	a0,zero,16
   25d00:	ed0f00ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   25d04:	00050993          	addi	s3,a0,0
   25d08:	00090593          	addi	a1,s2,0
   25d0c:	01010513          	addi	a0,sp,16
   25d10:	5cd0a0ef          	jal	ra,30adc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__lhs.append(__rhs)); }
   25d14:	00012597          	auipc	a1,0x12
   25d18:	82c58593          	addi	a1,a1,-2004 # 37540 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x398>
   25d1c:	01010513          	addi	a0,sp,16
   25d20:	a21f00ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   25d24:	00050593          	addi	a1,a0,0
   25d28:	03010413          	addi	s0,sp,48
   25d2c:	00040513          	addi	a0,s0,0
   25d30:	ee0f00ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   25d34:	00040593          	addi	a1,s0,0
   25d38:	00098513          	addi	a0,s3,0
   25d3c:	8e5f00ef          	jal	ra,16620 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   25d40:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   25d44:	04010793          	addi	a5,sp,64
   25d48:	00f50463          	beq	a0,a5,25d50 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ec0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   25d4c:	f64f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25d50:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   25d54:	02010793          	addi	a5,sp,32
   25d58:	00f50463          	beq	a0,a5,25d60 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ed0>
   25d5c:	f54f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
   25d60:	0001c617          	auipc	a2,0x1c
   25d64:	6a063603          	ld	a2,1696(a2) # 42400 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   25d68:	0001d597          	auipc	a1,0x1d
   25d6c:	8885b583          	ld	a1,-1912(a1) # 425f0 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   25d70:	00098513          	addi	a0,s3,0
   25d74:	8edf00ef          	jal	ra,16660 <__cxa_throw@plt>
      result.location_type = expr_result::type::reg;
   25d78:	00100793          	addi	a5,zero,1
   25d7c:	00faa023          	sw	a5,0(s5)
      result.value = (unsigned)op - (unsigned)DW_OP::reg0;
   25d80:	fb09079b          	addiw	a5,s2,-80
   25d84:	02079793          	slli	a5,a5,0x20
   25d88:	0207d793          	srli	a5,a5,0x20
   25d8c:	00fab423          	sd	a5,8(s5)
      break;
   25d90:	f64ff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
      result.location_type = expr_result::type::reg;
   25d94:	00100793          	addi	a5,zero,1
   25d98:	00faa023          	sw	a5,0(s5)
    while (pos < sec->end) {
   25d9c:	0106b783          	ld	a5,16(a3)
   25da0:	02f77e63          	bgeu	a4,a5,25ddc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1f4c>
    std::uint64_t result = 0;
   25da4:	00000513          	addi	a0,zero,0
    int shift = 0;
   25da8:	00000593          	addi	a1,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   25dac:	00170713          	addi	a4,a4,1
   25db0:	06e13023          	sd	a4,96(sp)
   25db4:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   25db8:	07f7f613          	andi	a2,a5,127
   25dbc:	00b61633          	sll	a2,a2,a1
   25dc0:	00c56533          	or	a0,a0,a2
      if ((byte & 0x80) == 0)
   25dc4:	0187979b          	slliw	a5,a5,0x18
   25dc8:	4187d79b          	sraiw	a5,a5,0x18
   25dcc:	0007de63          	bge	a5,zero,25de8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1f58>
      shift += 7;
   25dd0:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   25dd4:	0106b783          	ld	a5,16(a3)
   25dd8:	fcf76ae3          	bltu	a4,a5,25dac <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1f1c>
    underflow();
   25ddc:	05010513          	addi	a0,sp,80
   25de0:	d1df60ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    return 0;
   25de4:	00000513          	addi	a0,zero,0
      result.value = cur.uleb128();
   25de8:	00aab423          	sd	a0,8(s5)
      break;
   25dec:	f08ff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
      result.location_type = expr_result::type::implicit;
   25df0:	00300793          	addi	a5,zero,3
   25df4:	00faa023          	sw	a5,0(s5)
    while (pos < sec->end) {
   25df8:	0106b783          	ld	a5,16(a3)
   25dfc:	02f77e63          	bgeu	a4,a5,25e38 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1fa8>
    std::uint64_t result = 0;
   25e00:	00000513          	addi	a0,zero,0
    int shift = 0;
   25e04:	00000593          	addi	a1,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   25e08:	00170713          	addi	a4,a4,1
   25e0c:	06e13023          	sd	a4,96(sp)
   25e10:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   25e14:	07f7f613          	andi	a2,a5,127
   25e18:	00b61633          	sll	a2,a2,a1
   25e1c:	00c56533          	or	a0,a0,a2
      if ((byte & 0x80) == 0)
   25e20:	0187979b          	slliw	a5,a5,0x18
   25e24:	4187d79b          	sraiw	a5,a5,0x18
   25e28:	0007de63          	bge	a5,zero,25e44 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1fb4>
      shift += 7;
   25e2c:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   25e30:	0106b783          	ld	a5,16(a3)
   25e34:	fcf76ae3          	bltu	a4,a5,25e08 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1f78>
    underflow();
   25e38:	05010513          	addi	a0,sp,80
   25e3c:	cc1f60ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    return 0;
   25e40:	00000513          	addi	a0,zero,0
      result.implicit_len = cur.uleb128();
   25e44:	00aabc23          	sd	a0,24(s5)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   25e48:	05013783          	ld	a5,80(sp)
   25e4c:	0107b703          	ld	a4,16(a5)
   25e50:	06013783          	ld	a5,96(sp)
   25e54:	40f706b3          	sub	a3,a4,a5
   25e58:	00a6e463          	bltu	a3,a0,25e60 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1fd0>
   25e5c:	00e7e663          	bltu	a5,a4,25e68 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1fd8>
      underflow();
   25e60:	05010513          	addi	a0,sp,80
   25e64:	c99f60ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
      result.implicit = cur.pos;
   25e68:	06013783          	ld	a5,96(sp)
   25e6c:	00fab823          	sd	a5,16(s5)
      break;
   25e70:	e84ff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  bool empty() const { return base == end; }
   25e74:	0b013783          	ld	a5,176(sp)
      CHECK();
   25e78:	0a813703          	ld	a4,168(sp)
   25e7c:	1af70a63          	beq	a4,a5,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      result.location_type = expr_result::type::literal;
   25e80:	00200713          	addi	a4,zero,2
   25e84:	00eaa023          	sw	a4,0(s5)
      result.value = stack.back();
   25e88:	ff87b783          	ld	a5,-8(a5)
   25e8c:	00fab423          	sd	a5,8(s5)
      break;
   25e90:	e64ff06f          	jal	zero,254f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
      throw runtime_error(to_string(op) + " not implemented");
   25e94:	01000513          	addi	a0,zero,16
   25e98:	d38f00ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   25e9c:	00050993          	addi	s3,a0,0
   25ea0:	00090593          	addi	a1,s2,0
   25ea4:	01010513          	addi	a0,sp,16
   25ea8:	4350a0ef          	jal	ra,30adc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__lhs.append(__rhs)); }
   25eac:	00011597          	auipc	a1,0x11
   25eb0:	69458593          	addi	a1,a1,1684 # 37540 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x398>
   25eb4:	01010513          	addi	a0,sp,16
   25eb8:	889f00ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   25ebc:	00050593          	addi	a1,a0,0
   25ec0:	03010413          	addi	s0,sp,48
   25ec4:	00040513          	addi	a0,s0,0
   25ec8:	d48f00ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   25ecc:	00040593          	addi	a1,s0,0
   25ed0:	00098513          	addi	a0,s3,0
   25ed4:	f4cf00ef          	jal	ra,16620 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   25ed8:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   25edc:	04010793          	addi	a5,sp,64
   25ee0:	00f50463          	beq	a0,a5,25ee8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2058>
   25ee4:	dccf00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25ee8:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   25eec:	02010793          	addi	a5,sp,32
   25ef0:	00f50463          	beq	a0,a5,25ef8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2068>
   25ef4:	dbcf00ef          	jal	ra,164b0 <operator delete(void*)@plt>
   25ef8:	0001c617          	auipc	a2,0x1c
   25efc:	50863603          	ld	a2,1288(a2) # 42400 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   25f00:	0001c597          	auipc	a1,0x1c
   25f04:	6f05b583          	ld	a1,1776(a1) # 425f0 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   25f08:	00098513          	addi	a0,s3,0
   25f0c:	f54f00ef          	jal	ra,16660 <__cxa_throw@plt>
      throw expr_error("unknown user op " + to_string(op));
   25f10:	01000513          	addi	a0,zero,16
   25f14:	cbcf00ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   25f18:	00050993          	addi	s3,a0,0
   25f1c:	00090593          	addi	a1,s2,0
   25f20:	01010513          	addi	a0,sp,16
   25f24:	3b90a0ef          	jal	ra,30adc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__rhs.insert(0, __lhs)); }
   25f28:	00011617          	auipc	a2,0x11
   25f2c:	63060613          	addi	a2,a2,1584 # 37558 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x3b0>
   25f30:	00000593          	addi	a1,zero,0
   25f34:	01010513          	addi	a0,sp,16
   25f38:	c08f00ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   25f3c:	00050593          	addi	a1,a0,0
   25f40:	03010413          	addi	s0,sp,48
   25f44:	00040513          	addi	a0,s0,0
   25f48:	cc8f00ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   25f4c:	00040593          	addi	a1,s0,0
   25f50:	00098513          	addi	a0,s3,0
   25f54:	decf00ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   25f58:	0001c797          	auipc	a5,0x1c
   25f5c:	3f07b783          	ld	a5,1008(a5) # 42348 <vtable for dwarf::expr_error@@Base+0x8c0>
   25f60:	01078793          	addi	a5,a5,16
   25f64:	00f9b023          	sd	a5,0(s3)
      { return _M_dataplus._M_p; }
   25f68:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   25f6c:	04010793          	addi	a5,sp,64
   25f70:	00f50463          	beq	a0,a5,25f78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x20e8>
   25f74:	d3cf00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25f78:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   25f7c:	02010793          	addi	a5,sp,32
   25f80:	00f50463          	beq	a0,a5,25f88 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x20f8>
   25f84:	d2cf00ef          	jal	ra,164b0 <operator delete(void*)@plt>
   25f88:	0001c617          	auipc	a2,0x1c
   25f8c:	51863603          	ld	a2,1304(a2) # 424a0 <dwarf::expr_error::~expr_error()@@Base+0x1be30>
   25f90:	0001c597          	auipc	a1,0x1c
   25f94:	5885b583          	ld	a1,1416(a1) # 42518 <typeinfo for dwarf::expr_error@@Base+0xab8>
   25f98:	00098513          	addi	a0,s3,0
   25f9c:	ec4f00ef          	jal	ra,16660 <__cxa_throw@plt>
      throw expr_error("bad operation " + to_string(op));
   25fa0:	01000513          	addi	a0,zero,16
   25fa4:	c2cf00ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   25fa8:	00050993          	addi	s3,a0,0
   25fac:	00090593          	addi	a1,s2,0
   25fb0:	01010513          	addi	a0,sp,16
   25fb4:	3290a0ef          	jal	ra,30adc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__rhs.insert(0, __lhs)); }
   25fb8:	00011617          	auipc	a2,0x11
   25fbc:	5b860613          	addi	a2,a2,1464 # 37570 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x3c8>
   25fc0:	00000593          	addi	a1,zero,0
   25fc4:	01010513          	addi	a0,sp,16
   25fc8:	b78f00ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   25fcc:	00050593          	addi	a1,a0,0
   25fd0:	03010413          	addi	s0,sp,48
   25fd4:	00040513          	addi	a0,s0,0
   25fd8:	c38f00ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   25fdc:	00040593          	addi	a1,s0,0
   25fe0:	00098513          	addi	a0,s3,0
   25fe4:	d5cf00ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   25fe8:	0001c797          	auipc	a5,0x1c
   25fec:	3607b783          	ld	a5,864(a5) # 42348 <vtable for dwarf::expr_error@@Base+0x8c0>
   25ff0:	01078793          	addi	a5,a5,16
   25ff4:	00f9b023          	sd	a5,0(s3)
      { return _M_dataplus._M_p; }
   25ff8:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   25ffc:	04010793          	addi	a5,sp,64
   26000:	00f50463          	beq	a0,a5,26008 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2178>
   26004:	cacf00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26008:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   2600c:	02010793          	addi	a5,sp,32
   26010:	00f50463          	beq	a0,a5,26018 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2188>
   26014:	c9cf00ef          	jal	ra,164b0 <operator delete(void*)@plt>
   26018:	0001c617          	auipc	a2,0x1c
   2601c:	48863603          	ld	a2,1160(a2) # 424a0 <dwarf::expr_error::~expr_error()@@Base+0x1be30>
   26020:	0001c597          	auipc	a1,0x1c
   26024:	4f85b583          	ld	a1,1272(a1) # 42518 <typeinfo for dwarf::expr_error@@Base+0xab8>
   26028:	00098513          	addi	a0,s3,0
   2602c:	e34f00ef          	jal	ra,16660 <__cxa_throw@plt>
  throw expr_error("stack underflow evaluating DWARF expression");
   26030:	01000513          	addi	a0,zero,16
   26034:	b9cf00ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   26038:	00050913          	addi	s2,a0,0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   2603c:	00011597          	auipc	a1,0x11
   26040:	54458593          	addi	a1,a1,1348 # 37580 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x3d8>
   26044:	eccf00ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   26048:	0001c797          	auipc	a5,0x1c
   2604c:	3007b783          	ld	a5,768(a5) # 42348 <vtable for dwarf::expr_error@@Base+0x8c0>
   26050:	01078793          	addi	a5,a5,16
   26054:	00f93023          	sd	a5,0(s2)
   26058:	0001c617          	auipc	a2,0x1c
   2605c:	44863603          	ld	a2,1096(a2) # 424a0 <dwarf::expr_error::~expr_error()@@Base+0x1be30>
   26060:	0001c597          	auipc	a1,0x1c
   26064:	4b85b583          	ld	a1,1208(a1) # 42518 <typeinfo for dwarf::expr_error@@Base+0xab8>
   26068:	00090513          	addi	a0,s2,0
   2606c:	df4f00ef          	jal	ra,16660 <__cxa_throw@plt>
  if (result.location_type == expr_result::type::address) {
   26070:	000aa783          	lw	a5,0(s5)
   26074:	00078463          	beq	a5,zero,2607c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21ec>
   26078:	91cfe06f          	jal	zero,24194 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x304>
   2607c:	0b013783          	ld	a5,176(sp)
    if (stack.empty())
   26080:	0a813703          	ld	a4,168(sp)
   26084:	00f70863          	beq	a4,a5,26094 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2204>
    result.value = stack.back();
   26088:	ff87b783          	ld	a5,-8(a5)
   2608c:	00fab423          	sd	a5,8(s5)
   26090:	904fe06f          	jal	zero,24194 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x304>
      throw expr_error("final stack is empty; no result given");
   26094:	01000513          	addi	a0,zero,16
   26098:	b38f00ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2609c:	00050913          	addi	s2,a0,0
   260a0:	00011597          	auipc	a1,0x11
   260a4:	51058593          	addi	a1,a1,1296 # 375b0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x408>
   260a8:	e68f00ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   260ac:	0001c797          	auipc	a5,0x1c
   260b0:	29c7b783          	ld	a5,668(a5) # 42348 <vtable for dwarf::expr_error@@Base+0x8c0>
   260b4:	01078793          	addi	a5,a5,16
   260b8:	00f93023          	sd	a5,0(s2)
   260bc:	0001c617          	auipc	a2,0x1c
   260c0:	3e463603          	ld	a2,996(a2) # 424a0 <dwarf::expr_error::~expr_error()@@Base+0x1be30>
   260c4:	0001c597          	auipc	a1,0x1c
   260c8:	4545b583          	ld	a1,1108(a1) # 42518 <typeinfo for dwarf::expr_error@@Base+0xab8>
   260cc:	00090513          	addi	a0,s2,0
   260d0:	d90f00ef          	jal	ra,16660 <__cxa_throw@plt>
   260d4:	fff00593          	addi	a1,zero,-1
   260d8:	03040513          	addi	a0,s0,48
   260dc:	a54f00ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   260e0:	8dcfe06f          	jal	zero,241bc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x32c>
	_M_dispose();
   260e4:	00043783          	ld	a5,0(s0)
   260e8:	0107b783          	ld	a5,16(a5)
   260ec:	00040513          	addi	a0,s0,0
   260f0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   260f4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   260f8:	0001c797          	auipc	a5,0x1c
   260fc:	3807b783          	ld	a5,896(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26100:	0007c783          	lbu	a5,0(a5)
   26104:	02078863          	beq	a5,zero,26134 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x22a4>
    _Atomic_word __result = *__mem;
   26108:	03442783          	lw	a5,52(s0)
    *__mem += __val;
   2610c:	fff7871b          	addiw	a4,a5,-1
   26110:	02e42a23          	sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   26114:	00100713          	addi	a4,zero,1
   26118:	00e78463          	beq	a5,a4,26120 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2290>
   2611c:	8acfe06f          	jal	zero,241c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x338>
	    _M_destroy();
   26120:	00043783          	ld	a5,0(s0)
   26124:	0187b783          	ld	a5,24(a5)
   26128:	00040513          	addi	a0,s0,0
   2612c:	000780e7          	jalr	ra,0(a5)
   26130:	898fe06f          	jal	zero,241c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x338>
      return __exchange_and_add(__mem, __val);
   26134:	fff00593          	addi	a1,zero,-1
   26138:	03440513          	addi	a0,s0,52
   2613c:	9f4f00ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26140:	00050793          	addi	a5,a0,0
   26144:	fd1ff06f          	jal	zero,26114 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2284>
   26148:	fff00593          	addi	a1,zero,-1
   2614c:	03048513          	addi	a0,s1,48
   26150:	9e0f00ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26154:	894fe06f          	jal	zero,241e8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x358>
	_M_dispose();
   26158:	0004b783          	ld	a5,0(s1)
   2615c:	0107b783          	ld	a5,16(a5)
   26160:	00048513          	addi	a0,s1,0
   26164:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   26168:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2616c:	0001c797          	auipc	a5,0x1c
   26170:	30c7b783          	ld	a5,780(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26174:	0007c783          	lbu	a5,0(a5)
   26178:	02078863          	beq	a5,zero,261a8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2318>
    _Atomic_word __result = *__mem;
   2617c:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   26180:	fff7871b          	addiw	a4,a5,-1
   26184:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   26188:	00100713          	addi	a4,zero,1
   2618c:	00e78463          	beq	a5,a4,26194 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2304>
   26190:	864fe06f          	jal	zero,241f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x364>
	    _M_destroy();
   26194:	0004b783          	ld	a5,0(s1)
   26198:	0187b783          	ld	a5,24(a5)
   2619c:	00048513          	addi	a0,s1,0
   261a0:	000780e7          	jalr	ra,0(a5)
   261a4:	850fe06f          	jal	zero,241f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x364>
      return __exchange_and_add(__mem, __val);
   261a8:	fff00593          	addi	a1,zero,-1
   261ac:	03448513          	addi	a0,s1,52
   261b0:	980f00ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   261b4:	00050793          	addi	a5,a0,0
   261b8:	fd1ff06f          	jal	zero,26188 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x22f8>
   261bc:	fff00593          	addi	a1,zero,-1
   261c0:	030b8513          	addi	a0,s7,48
   261c4:	96cf00ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   261c8:	850fe06f          	jal	zero,24218 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x388>
	_M_dispose();
   261cc:	000bb783          	ld	a5,0(s7)
   261d0:	0107b783          	ld	a5,16(a5)
   261d4:	000b8513          	addi	a0,s7,0
   261d8:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   261dc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   261e0:	0001c797          	auipc	a5,0x1c
   261e4:	2987b783          	ld	a5,664(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   261e8:	0007c783          	lbu	a5,0(a5)
   261ec:	02078863          	beq	a5,zero,2621c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x238c>
    _Atomic_word __result = *__mem;
   261f0:	034ba783          	lw	a5,52(s7)
    *__mem += __val;
   261f4:	fff7871b          	addiw	a4,a5,-1
   261f8:	02ebaa23          	sw	a4,52(s7)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   261fc:	00100713          	addi	a4,zero,1
   26200:	00e78463          	beq	a5,a4,26208 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2378>
   26204:	820fe06f          	jal	zero,24224 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x394>
	    _M_destroy();
   26208:	000bb783          	ld	a5,0(s7)
   2620c:	0187b783          	ld	a5,24(a5)
   26210:	000b8513          	addi	a0,s7,0
   26214:	000780e7          	jalr	ra,0(a5)
   26218:	80cfe06f          	jal	zero,24224 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x394>
      return __exchange_and_add(__mem, __val);
   2621c:	fff00593          	addi	a1,zero,-1
   26220:	034b8513          	addi	a0,s7,52
   26224:	90cf00ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26228:	00050793          	addi	a5,a0,0
   2622c:	fd1ff06f          	jal	zero,261fc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x236c>
      throw runtime_error("DW_OP_fbreg not implemented");
   26230:	00050413          	addi	s0,a0,0
   26234:	00090513          	addi	a0,s2,0
   26238:	a38f00ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   2623c:	05813503          	ld	a0,88(sp)
   26240:	00050863          	beq	a0,zero,26250 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23c0>
	  _M_pi->_M_release();
   26244:	0001c317          	auipc	t1,0x1c
   26248:	17c33303          	ld	t1,380(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   2624c:	000300e7          	jalr	ra,0(t1)
   26250:	00048513          	addi	a0,s1,0
   26254:	0001c317          	auipc	t1,0x1c
   26258:	16c33303          	ld	t1,364(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   2625c:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   26260:	000b8a63          	beq	s7,zero,26274 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23e4>
	  _M_pi->_M_release();
   26264:	000b8513          	addi	a0,s7,0
   26268:	0001c317          	auipc	t1,0x1c
   2626c:	15833303          	ld	t1,344(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   26270:	000300e7          	jalr	ra,0(t1)
    for (T *p = base; p < end; ++p)
   26274:	0a813503          	ld	a0,168(sp)
   26278:	00050793          	addi	a5,a0,0
   2627c:	0b013703          	ld	a4,176(sp)
   26280:	18e7e663          	bltu	a5,a4,2640c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x257c>
    if ((char *)base != buf)
   26284:	06810793          	addi	a5,sp,104
   26288:	00f50663          	beq	a0,a5,26294 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2404>
      delete[] (char *)base;
   2628c:	00050463          	beq	a0,zero,26294 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2404>
   26290:	ad0f00ef          	jal	ra,16560 <operator delete[](void*)@plt>
   26294:	00040513          	addi	a0,s0,0
   26298:	bf8f00ef          	jal	ra,16690 <_Unwind_Resume@plt>
        throw expr_error("DW_OP_deref_size operand exceeds address size");
   2629c:	00050413          	addi	s0,a0,0
   262a0:	00090513          	addi	a0,s2,0
   262a4:	9ccf00ef          	jal	ra,16470 <__cxa_free_exception@plt>
   262a8:	f95ff06f          	jal	zero,2623c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
        throw expr_error("DW_OP_xderef_size operand exceeds address size");
   262ac:	00050413          	addi	s0,a0,0
   262b0:	00090513          	addi	a0,s2,0
   262b4:	9bcf00ef          	jal	ra,16470 <__cxa_free_exception@plt>
   262b8:	f85ff06f          	jal	zero,2623c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      throw runtime_error("DW_OP_push_object_address not implemented");
   262bc:	00050413          	addi	s0,a0,0
   262c0:	00090513          	addi	a0,s2,0
   262c4:	9acf00ef          	jal	ra,16470 <__cxa_free_exception@plt>
   262c8:	f75ff06f          	jal	zero,2623c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      throw runtime_error("DW_OP_call_frame_cfa not implemented");
   262cc:	00050413          	addi	s0,a0,0
   262d0:	00090513          	addi	a0,s2,0
   262d4:	99cf00ef          	jal	ra,16470 <__cxa_free_exception@plt>
   262d8:	f65ff06f          	jal	zero,2623c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      { return _M_dataplus._M_p; }
   262dc:	00050413          	addi	s0,a0,0
   262e0:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   262e4:	04010793          	addi	a5,sp,64
   262e8:	00f50463          	beq	a0,a5,262f0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2460>
   262ec:	9c4f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   262f0:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   262f4:	02010793          	addi	a5,sp,32
   262f8:	00f50463          	beq	a0,a5,26300 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2470>
   262fc:	9b4f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      throw runtime_error(to_string(op) + " not implemented");
   26300:	00098513          	addi	a0,s3,0
   26304:	96cf00ef          	jal	ra,16470 <__cxa_free_exception@plt>
   26308:	f35ff06f          	jal	zero,2623c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      { return _M_dataplus._M_p; }
   2630c:	00050413          	addi	s0,a0,0
   26310:	fe1ff06f          	jal	zero,262f0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2460>
   26314:	00050413          	addi	s0,a0,0
   26318:	fe9ff06f          	jal	zero,26300 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2470>
   2631c:	00050413          	addi	s0,a0,0
   26320:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   26324:	04010793          	addi	a5,sp,64
   26328:	00f50463          	beq	a0,a5,26330 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24a0>
   2632c:	984f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26330:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   26334:	02010793          	addi	a5,sp,32
   26338:	00f50463          	beq	a0,a5,26340 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24b0>
   2633c:	974f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      throw runtime_error(to_string(op) + " not implemented");
   26340:	00098513          	addi	a0,s3,0
   26344:	92cf00ef          	jal	ra,16470 <__cxa_free_exception@plt>
   26348:	ef5ff06f          	jal	zero,2623c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      { return _M_dataplus._M_p; }
   2634c:	00050413          	addi	s0,a0,0
   26350:	fe1ff06f          	jal	zero,26330 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24a0>
   26354:	00050413          	addi	s0,a0,0
   26358:	fe9ff06f          	jal	zero,26340 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24b0>
   2635c:	00050413          	addi	s0,a0,0
   26360:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   26364:	04010793          	addi	a5,sp,64
   26368:	00f50463          	beq	a0,a5,26370 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24e0>
   2636c:	944f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26370:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   26374:	02010793          	addi	a5,sp,32
   26378:	00f50463          	beq	a0,a5,26380 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24f0>
   2637c:	934f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      throw expr_error("unknown user op " + to_string(op));
   26380:	00098513          	addi	a0,s3,0
   26384:	8ecf00ef          	jal	ra,16470 <__cxa_free_exception@plt>
   26388:	eb5ff06f          	jal	zero,2623c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      { return _M_dataplus._M_p; }
   2638c:	00050413          	addi	s0,a0,0
   26390:	fe1ff06f          	jal	zero,26370 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24e0>
   26394:	00050413          	addi	s0,a0,0
   26398:	fe9ff06f          	jal	zero,26380 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24f0>
   2639c:	00050413          	addi	s0,a0,0
   263a0:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   263a4:	04010793          	addi	a5,sp,64
   263a8:	00f50463          	beq	a0,a5,263b0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2520>
   263ac:	904f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   263b0:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   263b4:	02010793          	addi	a5,sp,32
   263b8:	00f50463          	beq	a0,a5,263c0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2530>
   263bc:	8f4f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      throw expr_error("bad operation " + to_string(op));
   263c0:	00098513          	addi	a0,s3,0
   263c4:	8acf00ef          	jal	ra,16470 <__cxa_free_exception@plt>
   263c8:	e75ff06f          	jal	zero,2623c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      { return _M_dataplus._M_p; }
   263cc:	00050413          	addi	s0,a0,0
   263d0:	fe1ff06f          	jal	zero,263b0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2520>
   263d4:	00050413          	addi	s0,a0,0
   263d8:	fe9ff06f          	jal	zero,263c0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2530>
      throw expr_error("final stack is empty; no result given");
   263dc:	00050413          	addi	s0,a0,0
   263e0:	00090513          	addi	a0,s2,0
   263e4:	88cf00ef          	jal	ra,16470 <__cxa_free_exception@plt>
   263e8:	e55ff06f          	jal	zero,2623c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
  throw expr_error("stack underflow evaluating DWARF expression");
   263ec:	00050413          	addi	s0,a0,0
   263f0:	00090513          	addi	a0,s2,0
   263f4:	87cf00ef          	jal	ra,16470 <__cxa_free_exception@plt>
   263f8:	e45ff06f          	jal	zero,2623c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
	if (_M_pi != nullptr)
   263fc:	00050413          	addi	s0,a0,0
   26400:	e61ff06f          	jal	zero,26260 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23d0>
    for (T *p = base; p < end; ++p)
   26404:	00050413          	addi	s0,a0,0
   26408:	e6dff06f          	jal	zero,26274 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23e4>
   2640c:	00878793          	addi	a5,a5,8
   26410:	e6dff06f          	jal	zero,2627c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ec>
        val |= ((uint64_t)p[i]) << (i * 8);
   26414:	0007cc83          	lbu	s9,0(a5)
    pos += sizeof(T);
   26418:	00178793          	addi	a5,a5,1
   2641c:	06f13023          	sd	a5,96(sp)
  size_type size() const { return end - base; }
   26420:	0a813703          	ld	a4,168(sp)
   26424:	0b013783          	ld	a5,176(sp)
   26428:	40e787b3          	sub	a5,a5,a4
   2642c:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   26430:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   26434:	0b813903          	ld	s2,184(sp)
   26438:	40e90933          	sub	s2,s2,a4
   2643c:	40395913          	srai	s2,s2,0x3
   26440:	00f96463          	bltu	s2,a5,26448 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x25b8>
   26444:	a00fe06f          	jal	zero,24644 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7b4>
   26448:	00091463          	bne	s2,zero,26450 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x25c0>
   2644c:	00100913          	addi	s2,zero,1
    while (target < n)
   26450:	00f97663          	bgeu	s2,a5,2645c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x25cc>
      target <<= 1;
   26454:	00191913          	slli	s2,s2,0x1
    while (target < n)
   26458:	fef96ee3          	bltu	s2,a5,26454 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x25c4>
    char *newbuf = new char[sizeof(T[target])];
   2645c:	00391913          	slli	s2,s2,0x3
   26460:	00090513          	addi	a0,s2,0
   26464:	e7def0ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   26468:	984fe06f          	jal	zero,245ec <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x75c>
        val |= ((uint64_t)p[i]) << (i * 8);
   2646c:	0007cc83          	lbu	s9,0(a5)
    pos += sizeof(T);
   26470:	00178793          	addi	a5,a5,1
   26474:	06f13023          	sd	a5,96(sp)
      stack.push_back(cur.fixed<int8_t>());
   26478:	018c9c9b          	slliw	s9,s9,0x18
   2647c:	418cdc9b          	sraiw	s9,s9,0x18
  size_type size() const { return end - base; }
   26480:	0a813703          	ld	a4,168(sp)
   26484:	0b013783          	ld	a5,176(sp)
   26488:	40e787b3          	sub	a5,a5,a4
   2648c:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   26490:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   26494:	0b813903          	ld	s2,184(sp)
   26498:	40e90933          	sub	s2,s2,a4
   2649c:	40395913          	srai	s2,s2,0x3
   264a0:	00f96463          	bltu	s2,a5,264a8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2618>
   264a4:	ddcfe06f          	jal	zero,24a80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xbf0>
   264a8:	00091463          	bne	s2,zero,264b0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2620>
   264ac:	00100913          	addi	s2,zero,1
    while (target < n)
   264b0:	00f97663          	bgeu	s2,a5,264bc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x262c>
      target <<= 1;
   264b4:	00191913          	slli	s2,s2,0x1
    while (target < n)
   264b8:	fef96ee3          	bltu	s2,a5,264b4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2624>
    char *newbuf = new char[sizeof(T[target])];
   264bc:	00391913          	slli	s2,s2,0x3
   264c0:	00090513          	addi	a0,s2,0
   264c4:	e1def0ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   264c8:	d60fe06f          	jal	zero,24a28 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb98>
        val |= ((uint64_t)p[i]) << (i * 8);
   264cc:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   264d0:	00178793          	addi	a5,a5,1
   264d4:	06f13023          	sd	a5,96(sp)
  size_type size() const { return end - base; }
   264d8:	0b013703          	ld	a4,176(sp)
   264dc:	0a813603          	ld	a2,168(sp)
   264e0:	40c707b3          	sub	a5,a4,a2
   264e4:	4037d793          	srai	a5,a5,0x3
      CHECKN(tmp1.u);
   264e8:	b4d7e4e3          	bltu	a5,a3,26030 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
  reference revat(size_type n) { return *(end - 1 - n); }
   264ec:	00369693          	slli	a3,a3,0x3
   264f0:	40d70733          	sub	a4,a4,a3
   264f4:	ff870a13          	addi	s4,a4,-8
    reserve(size() + 1);
   264f8:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   264fc:	0b813903          	ld	s2,184(sp)
   26500:	40c90933          	sub	s2,s2,a2
   26504:	40395913          	srai	s2,s2,0x3
   26508:	00f96463          	bltu	s2,a5,26510 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2680>
   2650c:	e15fe06f          	jal	zero,25320 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1490>
   26510:	00091463          	bne	s2,zero,26518 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2688>
   26514:	00100913          	addi	s2,zero,1
    while (target < n)
   26518:	00f97663          	bgeu	s2,a5,26524 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2694>
      target <<= 1;
   2651c:	00191913          	slli	s2,s2,0x1
    while (target < n)
   26520:	fef96ee3          	bltu	s2,a5,2651c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x268c>
    char *newbuf = new char[sizeof(T[target])];
   26524:	00391913          	slli	s2,s2,0x3
   26528:	00090513          	addi	a0,s2,0
   2652c:	db5ef0ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   26530:	d99fe06f          	jal	zero,252c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1438>
        val |= ((uint64_t)p[i]) << (i * 8);
   26534:	0007c603          	lbu	a2,0(a5)
    pos += sizeof(T);
   26538:	00178793          	addi	a5,a5,1
   2653c:	06f13023          	sd	a5,96(sp)
      if (tmp1.u > subsec->addr_size)
   26540:	0584e783          	lwu	a5,88(s1)
   26544:	00c7e463          	bltu	a5,a2,2654c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x26bc>
   26548:	f2dfe06f          	jal	zero,25474 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x15e4>
        throw expr_error("DW_OP_deref_size operand exceeds address size");
   2654c:	01000513          	addi	a0,zero,16
   26550:	e81ef0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   26554:	00050913          	addi	s2,a0,0
   26558:	00011597          	auipc	a1,0x11
   2655c:	f3058593          	addi	a1,a1,-208 # 37488 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x2e0>
   26560:	9b0f00ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   26564:	f65fe06f          	jal	zero,254c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1638>
        val |= ((uint64_t)p[i]) << (i * 8);
   26568:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   2656c:	00178793          	addi	a5,a5,1
   26570:	06f13023          	sd	a5,96(sp)
      if (tmp1.u > subsec->addr_size)
   26574:	0584e783          	lwu	a5,88(s1)
   26578:	00d7e463          	bltu	a5,a3,26580 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x26f0>
   2657c:	fa1fe06f          	jal	zero,2551c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x168c>
        throw expr_error("DW_OP_xderef_size operand exceeds address size");
   26580:	01000513          	addi	a0,zero,16
   26584:	e4def0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   26588:	00050913          	addi	s2,a0,0
   2658c:	00011597          	auipc	a1,0x11
   26590:	f2c58593          	addi	a1,a1,-212 # 374b8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x310>
   26594:	97cf00ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   26598:	fe9fe06f          	jal	zero,25580 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x16f0>
        val |= ((uint64_t)p[i]) << (i * 8);
   2659c:	00074783          	lbu	a5,0(a4)
    pos += sizeof(T);
   265a0:	00170713          	addi	a4,a4,1
   265a4:	06e13023          	sd	a4,96(sp)
    return (T)val;
   265a8:	0ff7f913          	andi	s2,a5,255
    switch (op) {
   265ac:	ffd7879b          	addiw	a5,a5,-3
   265b0:	0ff7f613          	andi	a2,a5,255
   265b4:	9ec9e6e3          	bltu	s3,a2,25fa0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2110>
   265b8:	00261793          	slli	a5,a2,0x2
   265bc:	008787b3          	add	a5,a5,s0
   265c0:	0007a783          	lw	a5,0(a5)
   265c4:	008787b3          	add	a5,a5,s0
   265c8:	00078067          	jalr	zero,0(a5)

00000000000265cc <dwarf::expr::evaluate(dwarf::expr_context*) const>:
expr_result expr::evaluate(expr_context *ctx) const {
   265cc:	fe010113          	addi	sp,sp,-32
   265d0:	00113c23          	sd	ra,24(sp)
   265d4:	00813823          	sd	s0,16(sp)
   265d8:	00050413          	addi	s0,a0,0
  return evaluate(ctx, {});
   265dc:	00013023          	sd	zero,0(sp)
   265e0:	00013423          	sd	zero,8(sp)
   265e4:	00010693          	addi	a3,sp,0
   265e8:	8a9fd0ef          	jal	ra,23e90 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const>
}
   265ec:	00040513          	addi	a0,s0,0
   265f0:	01813083          	ld	ra,24(sp)
   265f4:	01013403          	ld	s0,16(sp)
   265f8:	02010113          	addi	sp,sp,32
   265fc:	00008067          	jalr	zero,0(ra)

0000000000026600 <dwarf::expr::evaluate(dwarf::expr_context*, unsigned long) const>:
expr_result expr::evaluate(expr_context *ctx, taddr argument) const {
   26600:	fd010113          	addi	sp,sp,-48
   26604:	02113423          	sd	ra,40(sp)
   26608:	02813023          	sd	s0,32(sp)
   2660c:	00050413          	addi	s0,a0,0
  return evaluate(ctx, {argument});
   26610:	00d13c23          	sd	a3,24(sp)
   26614:	01810793          	addi	a5,sp,24
   26618:	00f13423          	sd	a5,8(sp)
   2661c:	00100793          	addi	a5,zero,1
   26620:	00f13823          	sd	a5,16(sp)
   26624:	00810693          	addi	a3,sp,8
   26628:	869fd0ef          	jal	ra,23e90 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const>
}
   2662c:	00040513          	addi	a0,s0,0
   26630:	02813083          	ld	ra,40(sp)
   26634:	02013403          	ld	s0,32(sp)
   26638:	03010113          	addi	sp,sp,48
   2663c:	00008067          	jalr	zero,0(ra)

0000000000026640 <_GLOBAL__sub_I_expr.cc>:

DWARFPP_END_NAMESPACE
   26640:	ff010113          	addi	sp,sp,-16
   26644:	00113423          	sd	ra,8(sp)
expr_context no_expr_context;
   26648:	e0018613          	addi	a2,gp,-512 # 42600 <__dso_handle>
   2664c:	0001c597          	auipc	a1,0x1c
   26650:	cd45b583          	ld	a1,-812(a1) # 42320 <dwarf::no_expr_context@@Base+0x310>
   26654:	0001c517          	auipc	a0,0x1c
   26658:	c7453503          	ld	a0,-908(a0) # 422c8 <dwarf::expr_context::~expr_context()@@Base+0x1bc5c>
   2665c:	864f00ef          	jal	ra,166c0 <__cxa_atexit@plt>
DWARFPP_END_NAMESPACE
   26660:	00813083          	ld	ra,8(sp)
   26664:	01010113          	addi	sp,sp,16
   26668:	00008067          	jalr	zero,0(ra)

000000000002666c <dwarf::expr_context::~expr_context()>:
  virtual ~expr_context() {}
   2666c:	00008067          	jalr	zero,0(ra)

0000000000026670 <dwarf::expr_error::~expr_error()>:
class expr_error : public std::runtime_error {
   26670:	ff010113          	addi	sp,sp,-16
   26674:	00113423          	sd	ra,8(sp)
   26678:	0001c797          	auipc	a5,0x1c
   2667c:	cd07b783          	ld	a5,-816(a5) # 42348 <vtable for dwarf::expr_error@@Base+0x8c0>
   26680:	01078793          	addi	a5,a5,16
   26684:	00f53023          	sd	a5,0(a0)
   26688:	e59ef0ef          	jal	ra,164e0 <std::runtime_error::~runtime_error()@plt>
   2668c:	00813083          	ld	ra,8(sp)
   26690:	01010113          	addi	sp,sp,16
   26694:	00008067          	jalr	zero,0(ra)

0000000000026698 <dwarf::expr_error::~expr_error()>:
   26698:	ff010113          	addi	sp,sp,-16
   2669c:	00113423          	sd	ra,8(sp)
   266a0:	00813023          	sd	s0,0(sp)
   266a4:	00050413          	addi	s0,a0,0
   266a8:	0001c797          	auipc	a5,0x1c
   266ac:	ca07b783          	ld	a5,-864(a5) # 42348 <vtable for dwarf::expr_error@@Base+0x8c0>
   266b0:	01078793          	addi	a5,a5,16
   266b4:	00f53023          	sd	a5,0(a0)
   266b8:	e29ef0ef          	jal	ra,164e0 <std::runtime_error::~runtime_error()@plt>
   266bc:	00040513          	addi	a0,s0,0
   266c0:	df1ef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   266c4:	00813083          	ld	ra,8(sp)
   266c8:	00013403          	ld	s0,0(sp)
   266cc:	01010113          	addi	sp,sp,16
   266d0:	00008067          	jalr	zero,0(ra)

00000000000266d4 <dwarf::expr_context::~expr_context()>:
  virtual ~expr_context() {}
   266d4:	ff010113          	addi	sp,sp,-16
   266d8:	00113423          	sd	ra,8(sp)
   266dc:	dd5ef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   266e0:	00813083          	ld	ra,8(sp)
   266e4:	01010113          	addi	sp,sp,16
   266e8:	00008067          	jalr	zero,0(ra)

00000000000266ec <dwarf::expr_context::form_tls_address(unsigned long)>:
  virtual taddr form_tls_address(taddr address) {
   266ec:	fe010113          	addi	sp,sp,-32
   266f0:	00113c23          	sd	ra,24(sp)
   266f4:	00813823          	sd	s0,16(sp)
   266f8:	00913423          	sd	s1,8(sp)
    throw expr_error("DW_OP_form_tls_address operations not supported");
   266fc:	01000513          	addi	a0,zero,16
   26700:	cd1ef0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   26704:	00050413          	addi	s0,a0,0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   26708:	00011597          	auipc	a1,0x11
   2670c:	ca858593          	addi	a1,a1,-856 # 373b0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x208>
   26710:	800f00ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   26714:	0001c797          	auipc	a5,0x1c
   26718:	c347b783          	ld	a5,-972(a5) # 42348 <vtable for dwarf::expr_error@@Base+0x8c0>
   2671c:	01078793          	addi	a5,a5,16
   26720:	00f43023          	sd	a5,0(s0)
    throw expr_error("DW_OP_form_tls_address operations not supported");
   26724:	0001c617          	auipc	a2,0x1c
   26728:	d7c63603          	ld	a2,-644(a2) # 424a0 <dwarf::expr_error::~expr_error()@@Base+0x1be30>
   2672c:	0001c597          	auipc	a1,0x1c
   26730:	dec5b583          	ld	a1,-532(a1) # 42518 <typeinfo for dwarf::expr_error@@Base+0xab8>
   26734:	00040513          	addi	a0,s0,0
   26738:	f29ef0ef          	jal	ra,16660 <__cxa_throw@plt>
   2673c:	00050493          	addi	s1,a0,0
   26740:	00040513          	addi	a0,s0,0
   26744:	d2def0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   26748:	00048513          	addi	a0,s1,0
   2674c:	f45ef0ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000026750 <dwarf::expr_context::xderef_size(unsigned long, unsigned long, unsigned int)>:
  virtual taddr xderef_size(taddr address, taddr asid, unsigned size) {
   26750:	fe010113          	addi	sp,sp,-32
   26754:	00113c23          	sd	ra,24(sp)
   26758:	00813823          	sd	s0,16(sp)
   2675c:	00913423          	sd	s1,8(sp)
    throw expr_error("DW_OP_xderef_size operations not supported");
   26760:	01000513          	addi	a0,zero,16
   26764:	c6def0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   26768:	00050413          	addi	s0,a0,0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   2676c:	00011597          	auipc	a1,0x11
   26770:	c7458593          	addi	a1,a1,-908 # 373e0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x238>
   26774:	f9def0ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   26778:	0001c797          	auipc	a5,0x1c
   2677c:	bd07b783          	ld	a5,-1072(a5) # 42348 <vtable for dwarf::expr_error@@Base+0x8c0>
   26780:	01078793          	addi	a5,a5,16
   26784:	00f43023          	sd	a5,0(s0)
    throw expr_error("DW_OP_xderef_size operations not supported");
   26788:	0001c617          	auipc	a2,0x1c
   2678c:	d1863603          	ld	a2,-744(a2) # 424a0 <dwarf::expr_error::~expr_error()@@Base+0x1be30>
   26790:	0001c597          	auipc	a1,0x1c
   26794:	d885b583          	ld	a1,-632(a1) # 42518 <typeinfo for dwarf::expr_error@@Base+0xab8>
   26798:	00040513          	addi	a0,s0,0
   2679c:	ec5ef0ef          	jal	ra,16660 <__cxa_throw@plt>
   267a0:	00050493          	addi	s1,a0,0
   267a4:	00040513          	addi	a0,s0,0
   267a8:	cc9ef0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   267ac:	00048513          	addi	a0,s1,0
   267b0:	ee1ef0ef          	jal	ra,16690 <_Unwind_Resume@plt>

00000000000267b4 <dwarf::expr_context::deref_size(unsigned long, unsigned int)>:
  virtual taddr deref_size(taddr address, unsigned size) {
   267b4:	fe010113          	addi	sp,sp,-32
   267b8:	00113c23          	sd	ra,24(sp)
   267bc:	00813823          	sd	s0,16(sp)
   267c0:	00913423          	sd	s1,8(sp)
    throw expr_error("DW_OP_deref_size operations not supported");
   267c4:	01000513          	addi	a0,zero,16
   267c8:	c09ef0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   267cc:	00050413          	addi	s0,a0,0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   267d0:	00011597          	auipc	a1,0x11
   267d4:	c4058593          	addi	a1,a1,-960 # 37410 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x268>
   267d8:	f39ef0ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   267dc:	0001c797          	auipc	a5,0x1c
   267e0:	b6c7b783          	ld	a5,-1172(a5) # 42348 <vtable for dwarf::expr_error@@Base+0x8c0>
   267e4:	01078793          	addi	a5,a5,16
   267e8:	00f43023          	sd	a5,0(s0)
    throw expr_error("DW_OP_deref_size operations not supported");
   267ec:	0001c617          	auipc	a2,0x1c
   267f0:	cb463603          	ld	a2,-844(a2) # 424a0 <dwarf::expr_error::~expr_error()@@Base+0x1be30>
   267f4:	0001c597          	auipc	a1,0x1c
   267f8:	d245b583          	ld	a1,-732(a1) # 42518 <typeinfo for dwarf::expr_error@@Base+0xab8>
   267fc:	00040513          	addi	a0,s0,0
   26800:	e61ef0ef          	jal	ra,16660 <__cxa_throw@plt>
   26804:	00050493          	addi	s1,a0,0
   26808:	00040513          	addi	a0,s0,0
   2680c:	c65ef0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   26810:	00048513          	addi	a0,s1,0
   26814:	e7def0ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000026818 <dwarf::expr_context::reg(unsigned int)>:
  virtual taddr reg(unsigned regnum) {
   26818:	fe010113          	addi	sp,sp,-32
   2681c:	00113c23          	sd	ra,24(sp)
   26820:	00813823          	sd	s0,16(sp)
   26824:	00913423          	sd	s1,8(sp)
    throw expr_error("DW_OP_breg* operations not supported");
   26828:	01000513          	addi	a0,zero,16
   2682c:	ba5ef0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   26830:	00050413          	addi	s0,a0,0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   26834:	00011597          	auipc	a1,0x11
   26838:	c0c58593          	addi	a1,a1,-1012 # 37440 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x298>
   2683c:	ed5ef0ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   26840:	0001c797          	auipc	a5,0x1c
   26844:	b087b783          	ld	a5,-1272(a5) # 42348 <vtable for dwarf::expr_error@@Base+0x8c0>
   26848:	01078793          	addi	a5,a5,16
   2684c:	00f43023          	sd	a5,0(s0)
    throw expr_error("DW_OP_breg* operations not supported");
   26850:	0001c617          	auipc	a2,0x1c
   26854:	c5063603          	ld	a2,-944(a2) # 424a0 <dwarf::expr_error::~expr_error()@@Base+0x1be30>
   26858:	0001c597          	auipc	a1,0x1c
   2685c:	cc05b583          	ld	a1,-832(a1) # 42518 <typeinfo for dwarf::expr_error@@Base+0xab8>
   26860:	00040513          	addi	a0,s0,0
   26864:	dfdef0ef          	jal	ra,16660 <__cxa_throw@plt>
   26868:	00050493          	addi	s1,a0,0
   2686c:	00040513          	addi	a0,s0,0
   26870:	c01ef0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   26874:	00048513          	addi	a0,s1,0
   26878:	e19ef0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002687c <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)>:

using namespace std;

DWARFPP_BEGIN_NAMESPACE

rangelist::rangelist(const std::shared_ptr<section> &sec, section_offset off,
   2687c:	fb010113          	addi	sp,sp,-80
   26880:	04113423          	sd	ra,72(sp)
   26884:	04813023          	sd	s0,64(sp)
   26888:	02913c23          	sd	s1,56(sp)
   2688c:	03213823          	sd	s2,48(sp)
   26890:	03313423          	sd	s3,40(sp)
   26894:	03413023          	sd	s4,32(sp)
   26898:	01513c23          	sd	s5,24(sp)
   2689c:	01613823          	sd	s6,16(sp)
   268a0:	00050413          	addi	s0,a0,0
   268a4:	00068993          	addi	s3,a3,0
   268a8:	00070a13          	addi	s4,a4,0
	: _M_start(), _M_finish(), _M_end_of_storage()
   268ac:	00053023          	sd	zero,0(a0)
   268b0:	00053423          	sd	zero,8(a0)
   268b4:	00053823          	sd	zero,16(a0)
      { return _M_ptr; }
   268b8:	0005b903          	ld	s2,0(a1)
   268bc:	fff00793          	addi	a5,zero,-1
   268c0:	00f13023          	sd	a5,0(sp)
      fmt = this->fmt;
   268c4:	01892a83          	lw	s5,24(s2)
    if (addr_size == 0)
   268c8:	00069463          	bne	a3,zero,268d0 <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)+0x54>
      addr_size = this->addr_size;
   268cc:	02092983          	lw	s3,32(s2)
        type, begin + start, std::min(len, (section_length)(end - begin)), ord,
   268d0:	00893703          	ld	a4,8(s2)
   268d4:	00c704b3          	add	s1,a4,a2
   268d8:	01093783          	ld	a5,16(s2)
   268dc:	40e787b3          	sub	a5,a5,a4
   268e0:	00f13423          	sd	a5,8(sp)
      if (__b < __a)
   268e4:	fff00713          	addi	a4,zero,-1
	return __b;
   268e8:	00810b13          	addi	s6,sp,8
      if (__b < __a)
   268ec:	00e79463          	bne	a5,a4,268f4 <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)+0x78>
      return __a;
   268f0:	00010b13          	addi	s6,sp,0
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   268f4:	00043c23          	sd	zero,24(s0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   268f8:	06000513          	addi	a0,zero,96
   268fc:	bc5ef0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   26900:	00052423          	sw	zero,8(a0)
   26904:	00052623          	sw	zero,12(a0)
   26908:	00052823          	sw	zero,16(a0)
   2690c:	00052a23          	sw	zero,20(a0)
   26910:	00052c23          	sw	zero,24(a0)
   26914:	00052e23          	sw	zero,28(a0)
   26918:	02053023          	sd	zero,32(a0)
   2691c:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   26920:	00100793          	addi	a5,zero,1
   26924:	02f52823          	sw	a5,48(a0)
   26928:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   2692c:	0001c797          	auipc	a5,0x1c
   26930:	c8c7b783          	ld	a5,-884(a5) # 425b8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc40>
   26934:	01078793          	addi	a5,a5,16
   26938:	00f53023          	sd	a5,0(a0)
   2693c:	00092683          	lw	a3,0(s2)
   26940:	000b3703          	ld	a4,0(s6)
   26944:	01c92783          	lw	a5,28(s2)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   26948:	02d52c23          	sw	a3,56(a0)
   2694c:	04953023          	sd	s1,64(a0)
   26950:	00e484b3          	add	s1,s1,a4
   26954:	04953423          	sd	s1,72(a0)
   26958:	05552823          	sw	s5,80(a0)
        ord(ord), addr_size(addr_size) {}
   2695c:	04f52a23          	sw	a5,84(a0)
   26960:	05352c23          	sw	s3,88(a0)
	  _M_pi = __pi;
   26964:	02a43023          	sd	a0,32(s0)
   26968:	03850793          	addi	a5,a0,56
	  __p = __pi->_M_ptr();
   2696c:	00f43c23          	sd	a5,24(s0)
                     unsigned cu_addr_size, taddr cu_low_pc)
    : sec(sec->slice(off, ~0, format::unknown, cu_addr_size)),
      base_addr(cu_low_pc) {}
   26970:	03443423          	sd	s4,40(s0)
   26974:	04813083          	ld	ra,72(sp)
   26978:	04013403          	ld	s0,64(sp)
   2697c:	03813483          	ld	s1,56(sp)
   26980:	03013903          	ld	s2,48(sp)
   26984:	02813983          	ld	s3,40(sp)
   26988:	02013a03          	ld	s4,32(sp)
   2698c:	01813a83          	ld	s5,24(sp)
   26990:	01013b03          	ld	s6,16(sp)
   26994:	05010113          	addi	sp,sp,80
   26998:	00008067          	jalr	zero,0(ra)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   2699c:	00050493          	addi	s1,a0,0
   269a0:	00043503          	ld	a0,0(s0)
	if (__p)
   269a4:	00050463          	beq	a0,zero,269ac <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)+0x130>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   269a8:	b09ef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   269ac:	00048513          	addi	a0,s1,0
   269b0:	ce1ef0ef          	jal	ra,16690 <_Unwind_Resume@plt>

00000000000269b4 <dwarf::rangelist::end() const>:
      : _M_ptr(0), _M_refcount()
   269b4:	00053023          	sd	zero,0(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   269b8:	00053423          	sd	zero,8(a0)
  iterator() : sec(nullptr), base_addr(0), pos(0) {}
   269bc:	00053823          	sd	zero,16(a0)
   269c0:	00053c23          	sd	zero,24(a0)
  if (sec)
    return iterator(sec, base_addr);
  return end();
}

rangelist::iterator rangelist::end() const { return iterator(); }
   269c4:	00008067          	jalr	zero,0(ra)

00000000000269c8 <dwarf::rangelist::iterator::operator++()>:
    : sec(sec), base_addr(base_addr), pos(0) {
  // Read in the first entry
  ++(*this);
}

rangelist::iterator &rangelist::iterator::operator++() {
   269c8:	fb010113          	addi	sp,sp,-80
   269cc:	04113423          	sd	ra,72(sp)
   269d0:	04813023          	sd	s0,64(sp)
   269d4:	02913c23          	sd	s1,56(sp)
   269d8:	03213823          	sd	s2,48(sp)
   269dc:	03313423          	sd	s3,40(sp)
   269e0:	03413023          	sd	s4,32(sp)
   269e4:	00050413          	addi	s0,a0,0
      { return _M_ptr; }
   269e8:	00053483          	ld	s1,0(a0)
  // DWARF4 section 2.17.3
  taddr largest_offset = ~(taddr)0;
  if (sec->addr_size < sizeof(taddr))
   269ec:	0204a783          	lw	a5,32(s1)
   269f0:	00700713          	addi	a4,zero,7
  taddr largest_offset = ~(taddr)0;
   269f4:	fff00a13          	addi	s4,zero,-1
  if (sec->addr_size < sizeof(taddr))
   269f8:	00f76a63          	bltu	a4,a5,26a0c <dwarf::rangelist::iterator::operator++()+0x44>
    largest_offset += 1 << (8 * sec->addr_size);
   269fc:	0037979b          	slliw	a5,a5,0x3
   26a00:	00100a13          	addi	s4,zero,1
   26a04:	00fa1a3b          	sllw	s4,s4,a5
   26a08:	fffa0a13          	addi	s4,s4,-1
      : _M_pi(__r._M_pi)
   26a0c:	00843903          	ld	s2,8(s0)
	if (_M_pi != nullptr)
   26a10:	2c090e63          	beq	s2,zero,26cec <dwarf::rangelist::iterator::operator++()+0x324>
    if (__is_single_threaded())
   26a14:	0001c797          	auipc	a5,0x1c
   26a18:	a647b783          	ld	a5,-1436(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26a1c:	0007c783          	lbu	a5,0(a5)
   26a20:	0a078a63          	beq	a5,zero,26ad4 <dwarf::rangelist::iterator::operator++()+0x10c>
  { *__mem += __val; }
   26a24:	03092783          	lw	a5,48(s2)
   26a28:	0017879b          	addiw	a5,a5,1
   26a2c:	02f92823          	sw	a5,48(s2)

  // Read in entries until we reach a regular entry of an
  // end-of-list.  Note that pos points to the beginning of the
  // entry *following* the current entry, so that's where we
  // start.
  cursor cur(sec, pos);
   26a30:	01843983          	ld	s3,24(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   26a34:	00913423          	sd	s1,8(sp)
      : _M_pi(__r._M_pi)
   26a38:	01213823          	sd	s2,16(sp)
    if (__is_single_threaded())
   26a3c:	0001c797          	auipc	a5,0x1c
   26a40:	a3c7b783          	ld	a5,-1476(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26a44:	0007c783          	lbu	a5,0(a5)
   26a48:	08078e63          	beq	a5,zero,26ae4 <dwarf::rangelist::iterator::operator++()+0x11c>
  { *__mem += __val; }
   26a4c:	03092783          	lw	a5,48(s2)
   26a50:	0017879b          	addiw	a5,a5,1
   26a54:	02f92823          	sw	a5,48(s2)
      : sec(sec), pos(sec->begin + offset) {}
   26a58:	0084b783          	ld	a5,8(s1)
   26a5c:	013787b3          	add	a5,a5,s3
   26a60:	00f13c23          	sd	a5,24(sp)
    if (__is_single_threaded())
   26a64:	0001c797          	auipc	a5,0x1c
   26a68:	a147b783          	ld	a5,-1516(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26a6c:	0007c783          	lbu	a5,0(a5)
   26a70:	08078263          	beq	a5,zero,26af4 <dwarf::rangelist::iterator::operator++()+0x12c>
    _Atomic_word __result = *__mem;
   26a74:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   26a78:	fff5079b          	addiw	a5,a0,-1
   26a7c:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   26a80:	00100793          	addi	a5,zero,1
   26a84:	28f51063          	bne	a0,a5,26d04 <dwarf::rangelist::iterator::operator++()+0x33c>
	_M_dispose();
   26a88:	00093783          	ld	a5,0(s2)
   26a8c:	0107b783          	ld	a5,16(a5)
   26a90:	00090513          	addi	a0,s2,0
   26a94:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   26a98:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   26a9c:	0001c797          	auipc	a5,0x1c
   26aa0:	9dc7b783          	ld	a5,-1572(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26aa4:	0007c783          	lbu	a5,0(a5)
   26aa8:	04078e63          	beq	a5,zero,26b04 <dwarf::rangelist::iterator::operator++()+0x13c>
    _Atomic_word __result = *__mem;
   26aac:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   26ab0:	fff5079b          	addiw	a5,a0,-1
   26ab4:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   26ab8:	00100793          	addi	a5,zero,1
   26abc:	24f51463          	bne	a0,a5,26d04 <dwarf::rangelist::iterator::operator++()+0x33c>
	    _M_destroy();
   26ac0:	00093783          	ld	a5,0(s2)
   26ac4:	0187b783          	ld	a5,24(a5)
   26ac8:	00090513          	addi	a0,s2,0
   26acc:	000780e7          	jalr	ra,0(a5)
   26ad0:	2340006f          	jal	zero,26d04 <dwarf::rangelist::iterator::operator++()+0x33c>
      __atomic_add(__mem, __val);
   26ad4:	00100593          	addi	a1,zero,1
   26ad8:	03090513          	addi	a0,s2,48
   26adc:	825ef0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   26ae0:	f51ff06f          	jal	zero,26a30 <dwarf::rangelist::iterator::operator++()+0x68>
   26ae4:	00100593          	addi	a1,zero,1
   26ae8:	03090513          	addi	a0,s2,48
   26aec:	815ef0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   26af0:	f69ff06f          	jal	zero,26a58 <dwarf::rangelist::iterator::operator++()+0x90>
      return __exchange_and_add(__mem, __val);
   26af4:	fff00593          	addi	a1,zero,-1
   26af8:	03090513          	addi	a0,s2,48
   26afc:	835ef0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26b00:	f81ff06f          	jal	zero,26a80 <dwarf::rangelist::iterator::operator++()+0xb8>
   26b04:	fff00593          	addi	a1,zero,-1
   26b08:	03490513          	addi	a0,s2,52
   26b0c:	825ef0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26b10:	fa9ff06f          	jal	zero,26ab8 <dwarf::rangelist::iterator::operator++()+0xf0>
  while (true) {
    entry.low = cur.address();
   26b14:	02a43023          	sd	a0,32(s0)
    entry.high = cur.address();
   26b18:	00090513          	addi	a0,s2,0
   26b1c:	000980e7          	jalr	ra,0(s3)
   26b20:	02a43423          	sd	a0,40(s0)

    if (entry.low == 0 && entry.high == 0) {
   26b24:	02043783          	ld	a5,32(s0)
   26b28:	00a7e4b3          	or	s1,a5,a0
   26b2c:	0a049463          	bne	s1,zero,26bd4 <dwarf::rangelist::iterator::operator++()+0x20c>
   26b30:	00043023          	sd	zero,0(s0)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   26b34:	00843903          	ld	s2,8(s0)
	__r._M_pi = _M_pi;
   26b38:	00043423          	sd	zero,8(s0)
	if (_M_pi != nullptr)
   26b3c:	0c090863          	beq	s2,zero,26c0c <dwarf::rangelist::iterator::operator++()+0x244>
    if (__is_single_threaded())
   26b40:	0001c797          	auipc	a5,0x1c
   26b44:	9387b783          	ld	a5,-1736(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26b48:	0007c783          	lbu	a5,0(a5)
   26b4c:	06078263          	beq	a5,zero,26bb0 <dwarf::rangelist::iterator::operator++()+0x1e8>
    _Atomic_word __result = *__mem;
   26b50:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   26b54:	fff5079b          	addiw	a5,a0,-1
   26b58:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   26b5c:	00100793          	addi	a5,zero,1
   26b60:	0af51663          	bne	a0,a5,26c0c <dwarf::rangelist::iterator::operator++()+0x244>
	_M_dispose();
   26b64:	00093783          	ld	a5,0(s2)
   26b68:	0107b783          	ld	a5,16(a5)
   26b6c:	00090513          	addi	a0,s2,0
   26b70:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   26b74:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   26b78:	0001c797          	auipc	a5,0x1c
   26b7c:	9007b783          	ld	a5,-1792(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26b80:	0007c783          	lbu	a5,0(a5)
   26b84:	02078e63          	beq	a5,zero,26bc0 <dwarf::rangelist::iterator::operator++()+0x1f8>
    _Atomic_word __result = *__mem;
   26b88:	03492783          	lw	a5,52(s2)
    *__mem += __val;
   26b8c:	fff7871b          	addiw	a4,a5,-1
   26b90:	02e92a23          	sw	a4,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   26b94:	00100713          	addi	a4,zero,1
   26b98:	06e79a63          	bne	a5,a4,26c0c <dwarf::rangelist::iterator::operator++()+0x244>
	    _M_destroy();
   26b9c:	00093783          	ld	a5,0(s2)
   26ba0:	0187b783          	ld	a5,24(a5)
   26ba4:	00090513          	addi	a0,s2,0
   26ba8:	000780e7          	jalr	ra,0(a5)
      // End of list
      sec.reset();
      pos = 0;
      break;
   26bac:	0600006f          	jal	zero,26c0c <dwarf::rangelist::iterator::operator++()+0x244>
      return __exchange_and_add(__mem, __val);
   26bb0:	fff00593          	addi	a1,zero,-1
   26bb4:	03090513          	addi	a0,s2,48
   26bb8:	f78ef0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26bbc:	fa1ff06f          	jal	zero,26b5c <dwarf::rangelist::iterator::operator++()+0x194>
   26bc0:	fff00593          	addi	a1,zero,-1
   26bc4:	03490513          	addi	a0,s2,52
   26bc8:	f68ef0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26bcc:	00050793          	addi	a5,a0,0
   26bd0:	fc5ff06f          	jal	zero,26b94 <dwarf::rangelist::iterator::operator++()+0x1cc>
    } else if (entry.low == largest_offset) {
   26bd4:	01479a63          	bne	a5,s4,26be8 <dwarf::rangelist::iterator::operator++()+0x220>
      // Base address change
      base_addr = entry.high;
   26bd8:	00a43823          	sd	a0,16(s0)
    entry.low = cur.address();
   26bdc:	00090513          	addi	a0,s2,0
   26be0:	000980e7          	jalr	ra,0(s3)
   26be4:	f31ff06f          	jal	zero,26b14 <dwarf::rangelist::iterator::operator++()+0x14c>
    } else {
      // Regular entry.  Adjust by base address.
      entry.low += base_addr;
   26be8:	01043703          	ld	a4,16(s0)
   26bec:	00e787b3          	add	a5,a5,a4
   26bf0:	02f43023          	sd	a5,32(s0)
      entry.high += base_addr;
   26bf4:	00a70733          	add	a4,a4,a0
   26bf8:	02e43423          	sd	a4,40(s0)
  section_offset get_section_offset() const { return pos - sec->begin; }
   26bfc:	00813783          	ld	a5,8(sp)
   26c00:	0087b783          	ld	a5,8(a5)
   26c04:	01813483          	ld	s1,24(sp)
   26c08:	40f484b3          	sub	s1,s1,a5
      pos = 0;
   26c0c:	00943c23          	sd	s1,24(s0)
	if (_M_pi != nullptr)
   26c10:	01013483          	ld	s1,16(sp)
   26c14:	02048463          	beq	s1,zero,26c3c <dwarf::rangelist::iterator::operator++()+0x274>
    if (__is_single_threaded())
   26c18:	0001c797          	auipc	a5,0x1c
   26c1c:	8607b783          	ld	a5,-1952(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26c20:	0007c783          	lbu	a5,0(a5)
   26c24:	02078e63          	beq	a5,zero,26c60 <dwarf::rangelist::iterator::operator++()+0x298>
    _Atomic_word __result = *__mem;
   26c28:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   26c2c:	fff5079b          	addiw	a5,a0,-1
   26c30:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   26c34:	00100793          	addi	a5,zero,1
   26c38:	02f50c63          	beq	a0,a5,26c70 <dwarf::rangelist::iterator::operator++()+0x2a8>
      break;
    }
  }

  return *this;
}
   26c3c:	00040513          	addi	a0,s0,0
   26c40:	04813083          	ld	ra,72(sp)
   26c44:	04013403          	ld	s0,64(sp)
   26c48:	03813483          	ld	s1,56(sp)
   26c4c:	03013903          	ld	s2,48(sp)
   26c50:	02813983          	ld	s3,40(sp)
   26c54:	02013a03          	ld	s4,32(sp)
   26c58:	05010113          	addi	sp,sp,80
   26c5c:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   26c60:	fff00593          	addi	a1,zero,-1
   26c64:	03048513          	addi	a0,s1,48
   26c68:	ec8ef0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26c6c:	fc9ff06f          	jal	zero,26c34 <dwarf::rangelist::iterator::operator++()+0x26c>
	_M_dispose();
   26c70:	0004b783          	ld	a5,0(s1)
   26c74:	0107b783          	ld	a5,16(a5)
   26c78:	00048513          	addi	a0,s1,0
   26c7c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   26c80:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   26c84:	0001b797          	auipc	a5,0x1b
   26c88:	7f47b783          	ld	a5,2036(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26c8c:	0007c783          	lbu	a5,0(a5)
   26c90:	02078663          	beq	a5,zero,26cbc <dwarf::rangelist::iterator::operator++()+0x2f4>
    _Atomic_word __result = *__mem;
   26c94:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   26c98:	fff5079b          	addiw	a5,a0,-1
   26c9c:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   26ca0:	00100793          	addi	a5,zero,1
   26ca4:	f8f51ce3          	bne	a0,a5,26c3c <dwarf::rangelist::iterator::operator++()+0x274>
	    _M_destroy();
   26ca8:	0004b783          	ld	a5,0(s1)
   26cac:	0187b783          	ld	a5,24(a5)
   26cb0:	00048513          	addi	a0,s1,0
   26cb4:	000780e7          	jalr	ra,0(a5)
  return *this;
   26cb8:	f85ff06f          	jal	zero,26c3c <dwarf::rangelist::iterator::operator++()+0x274>
      return __exchange_and_add(__mem, __val);
   26cbc:	fff00593          	addi	a1,zero,-1
   26cc0:	03448513          	addi	a0,s1,52
   26cc4:	e6cef0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26cc8:	fd9ff06f          	jal	zero,26ca0 <dwarf::rangelist::iterator::operator++()+0x2d8>
	if (_M_pi != nullptr)
   26ccc:	00050413          	addi	s0,a0,0
   26cd0:	01013503          	ld	a0,16(sp)
   26cd4:	00050863          	beq	a0,zero,26ce4 <dwarf::rangelist::iterator::operator++()+0x31c>
	  _M_pi->_M_release();
   26cd8:	0001b317          	auipc	t1,0x1b
   26cdc:	6e833303          	ld	t1,1768(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   26ce0:	000300e7          	jalr	ra,0(t1)
   26ce4:	00040513          	addi	a0,s0,0
   26ce8:	9a9ef0ef          	jal	ra,16690 <_Unwind_Resume@plt>
  cursor cur(sec, pos);
   26cec:	01843703          	ld	a4,24(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   26cf0:	00913423          	sd	s1,8(sp)
      : _M_pi(__r._M_pi)
   26cf4:	00013823          	sd	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   26cf8:	0084b783          	ld	a5,8(s1)
   26cfc:	00e787b3          	add	a5,a5,a4
   26d00:	00f13c23          	sd	a5,24(sp)
    entry.low = cur.address();
   26d04:	00810913          	addi	s2,sp,8
   26d08:	0001b997          	auipc	s3,0x1b
   26d0c:	6689b983          	ld	s3,1640(s3) # 42370 <dwarf::cursor::address()@@Base+0x1f3cc>
   26d10:	ecdff06f          	jal	zero,26bdc <dwarf::rangelist::iterator::operator++()+0x214>

0000000000026d14 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)>:
rangelist::iterator::iterator(const std::shared_ptr<section> &sec,
   26d14:	fe010113          	addi	sp,sp,-32
   26d18:	00113c23          	sd	ra,24(sp)
   26d1c:	00813823          	sd	s0,16(sp)
   26d20:	00913423          	sd	s1,8(sp)
   26d24:	00050413          	addi	s0,a0,0
   26d28:	00060493          	addi	s1,a2,0
      __shared_ptr(const __shared_ptr&) noexcept = default;
   26d2c:	0005b783          	ld	a5,0(a1)
   26d30:	00f53023          	sd	a5,0(a0)
      : _M_pi(__r._M_pi)
   26d34:	0085b503          	ld	a0,8(a1)
   26d38:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   26d3c:	02050063          	beq	a0,zero,26d5c <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x48>
    if (__is_single_threaded())
   26d40:	0001b797          	auipc	a5,0x1b
   26d44:	7387b783          	ld	a5,1848(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26d48:	0007c783          	lbu	a5,0(a5)
   26d4c:	02078263          	beq	a5,zero,26d70 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x5c>
  { *__mem += __val; }
   26d50:	03052783          	lw	a5,48(a0)
   26d54:	0017879b          	addiw	a5,a5,1
   26d58:	02f52823          	sw	a5,48(a0)
    : sec(sec), base_addr(base_addr), pos(0) {
   26d5c:	00943823          	sd	s1,16(s0)
   26d60:	00043c23          	sd	zero,24(s0)
  ++(*this);
   26d64:	00040513          	addi	a0,s0,0
   26d68:	c61ff0ef          	jal	ra,269c8 <dwarf::rangelist::iterator::operator++()>
   26d6c:	0340006f          	jal	zero,26da0 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x8c>
      __atomic_add(__mem, __val);
   26d70:	00100593          	addi	a1,zero,1
   26d74:	03050513          	addi	a0,a0,48
   26d78:	d88ef0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   26d7c:	fe1ff06f          	jal	zero,26d5c <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x48>
	if (_M_pi != nullptr)
   26d80:	00050493          	addi	s1,a0,0
   26d84:	00843503          	ld	a0,8(s0)
   26d88:	00050863          	beq	a0,zero,26d98 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x84>
	  _M_pi->_M_release();
   26d8c:	0001b317          	auipc	t1,0x1b
   26d90:	63433303          	ld	t1,1588(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   26d94:	000300e7          	jalr	ra,0(t1)
   26d98:	00048513          	addi	a0,s1,0
   26d9c:	8f5ef0ef          	jal	ra,16690 <_Unwind_Resume@plt>
}
   26da0:	01813083          	ld	ra,24(sp)
   26da4:	01013403          	ld	s0,16(sp)
   26da8:	00813483          	ld	s1,8(sp)
   26dac:	02010113          	addi	sp,sp,32
   26db0:	00008067          	jalr	zero,0(ra)

0000000000026db4 <dwarf::rangelist::begin() const>:
rangelist::iterator rangelist::begin() const {
   26db4:	ff010113          	addi	sp,sp,-16
   26db8:	00113423          	sd	ra,8(sp)
   26dbc:	00813023          	sd	s0,0(sp)
   26dc0:	00050413          	addi	s0,a0,0
  if (sec)
   26dc4:	0185b783          	ld	a5,24(a1)
   26dc8:	02078263          	beq	a5,zero,26dec <dwarf::rangelist::begin() const+0x38>
    return iterator(sec, base_addr);
   26dcc:	0285b603          	ld	a2,40(a1)
   26dd0:	01858593          	addi	a1,a1,24
   26dd4:	f41ff0ef          	jal	ra,26d14 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)>
}
   26dd8:	00040513          	addi	a0,s0,0
   26ddc:	00813083          	ld	ra,8(sp)
   26de0:	00013403          	ld	s0,0(sp)
   26de4:	01010113          	addi	sp,sp,16
   26de8:	00008067          	jalr	zero,0(ra)
  return end();
   26dec:	bc9ff0ef          	jal	ra,269b4 <dwarf::rangelist::end() const>
   26df0:	fe9ff06f          	jal	zero,26dd8 <dwarf::rangelist::begin() const+0x24>

0000000000026df4 <dwarf::rangelist::contains(unsigned long) const>:
bool rangelist::contains(taddr addr) const {
   26df4:	f8010113          	addi	sp,sp,-128
   26df8:	06113c23          	sd	ra,120(sp)
   26dfc:	06813823          	sd	s0,112(sp)
   26e00:	06913423          	sd	s1,104(sp)
   26e04:	00050493          	addi	s1,a0,0
   26e08:	00058413          	addi	s0,a1,0
  for (auto ent : *this)
   26e0c:	00050593          	addi	a1,a0,0
   26e10:	00010513          	addi	a0,sp,0
   26e14:	fa1ff0ef          	jal	ra,26db4 <dwarf::rangelist::begin() const>
   26e18:	00048593          	addi	a1,s1,0
   26e1c:	03010513          	addi	a0,sp,48
   26e20:	b95ff0ef          	jal	ra,269b4 <dwarf::rangelist::end() const>
   26e24:	00010493          	addi	s1,sp,0
    return sec == o.sec && pos == o.pos;
   26e28:	00013703          	ld	a4,0(sp)
   26e2c:	03013783          	ld	a5,48(sp)
   26e30:	16f70463          	beq	a4,a5,26f98 <dwarf::rangelist::contains(unsigned long) const+0x1a4>
   26e34:	02813703          	ld	a4,40(sp)
  bool contains(taddr addr) const { return low <= addr && addr < high; }
   26e38:	02013783          	ld	a5,32(sp)
   26e3c:	00f47863          	bgeu	s0,a5,26e4c <dwarf::rangelist::contains(unsigned long) const+0x58>
   26e40:	00048513          	addi	a0,s1,0
   26e44:	b85ff0ef          	jal	ra,269c8 <dwarf::rangelist::iterator::operator++()>
   26e48:	fe1ff06f          	jal	zero,26e28 <dwarf::rangelist::contains(unsigned long) const+0x34>
   26e4c:	fee47ae3          	bgeu	s0,a4,26e40 <dwarf::rangelist::contains(unsigned long) const+0x4c>
	if (_M_pi != nullptr)
   26e50:	03813403          	ld	s0,56(sp)
   26e54:	02040463          	beq	s0,zero,26e7c <dwarf::rangelist::contains(unsigned long) const+0x88>
    if (__is_single_threaded())
   26e58:	0001b797          	auipc	a5,0x1b
   26e5c:	6207b783          	ld	a5,1568(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26e60:	0007c783          	lbu	a5,0(a5)
   26e64:	04078e63          	beq	a5,zero,26ec0 <dwarf::rangelist::contains(unsigned long) const+0xcc>
    _Atomic_word __result = *__mem;
   26e68:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   26e6c:	fff5079b          	addiw	a5,a0,-1
   26e70:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   26e74:	00100793          	addi	a5,zero,1
   26e78:	04f50c63          	beq	a0,a5,26ed0 <dwarf::rangelist::contains(unsigned long) const+0xdc>
	if (_M_pi != nullptr)
   26e7c:	00813403          	ld	s0,8(sp)
   26e80:	02040463          	beq	s0,zero,26ea8 <dwarf::rangelist::contains(unsigned long) const+0xb4>
    if (__is_single_threaded())
   26e84:	0001b797          	auipc	a5,0x1b
   26e88:	5f47b783          	ld	a5,1524(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26e8c:	0007c783          	lbu	a5,0(a5)
   26e90:	08078e63          	beq	a5,zero,26f2c <dwarf::rangelist::contains(unsigned long) const+0x138>
    _Atomic_word __result = *__mem;
   26e94:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   26e98:	fff5079b          	addiw	a5,a0,-1
   26e9c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   26ea0:	00100793          	addi	a5,zero,1
   26ea4:	08f50c63          	beq	a0,a5,26f3c <dwarf::rangelist::contains(unsigned long) const+0x148>
      return true;
   26ea8:	00100513          	addi	a0,zero,1
}
   26eac:	07813083          	ld	ra,120(sp)
   26eb0:	07013403          	ld	s0,112(sp)
   26eb4:	06813483          	ld	s1,104(sp)
   26eb8:	08010113          	addi	sp,sp,128
   26ebc:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   26ec0:	fff00593          	addi	a1,zero,-1
   26ec4:	03040513          	addi	a0,s0,48
   26ec8:	c68ef0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26ecc:	fa9ff06f          	jal	zero,26e74 <dwarf::rangelist::contains(unsigned long) const+0x80>
	_M_dispose();
   26ed0:	00043783          	ld	a5,0(s0)
   26ed4:	0107b783          	ld	a5,16(a5)
   26ed8:	00040513          	addi	a0,s0,0
   26edc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   26ee0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   26ee4:	0001b797          	auipc	a5,0x1b
   26ee8:	5947b783          	ld	a5,1428(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26eec:	0007c783          	lbu	a5,0(a5)
   26ef0:	02078663          	beq	a5,zero,26f1c <dwarf::rangelist::contains(unsigned long) const+0x128>
    _Atomic_word __result = *__mem;
   26ef4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   26ef8:	fff5079b          	addiw	a5,a0,-1
   26efc:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   26f00:	00100793          	addi	a5,zero,1
   26f04:	f6f51ce3          	bne	a0,a5,26e7c <dwarf::rangelist::contains(unsigned long) const+0x88>
	    _M_destroy();
   26f08:	00043783          	ld	a5,0(s0)
   26f0c:	0187b783          	ld	a5,24(a5)
   26f10:	00040513          	addi	a0,s0,0
   26f14:	000780e7          	jalr	ra,0(a5)
   26f18:	f65ff06f          	jal	zero,26e7c <dwarf::rangelist::contains(unsigned long) const+0x88>
      return __exchange_and_add(__mem, __val);
   26f1c:	fff00593          	addi	a1,zero,-1
   26f20:	03440513          	addi	a0,s0,52
   26f24:	c0cef0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26f28:	fd9ff06f          	jal	zero,26f00 <dwarf::rangelist::contains(unsigned long) const+0x10c>
   26f2c:	fff00593          	addi	a1,zero,-1
   26f30:	03040513          	addi	a0,s0,48
   26f34:	bfcef0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26f38:	f69ff06f          	jal	zero,26ea0 <dwarf::rangelist::contains(unsigned long) const+0xac>
	_M_dispose();
   26f3c:	00043783          	ld	a5,0(s0)
   26f40:	0107b783          	ld	a5,16(a5)
   26f44:	00040513          	addi	a0,s0,0
   26f48:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   26f4c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   26f50:	0001b797          	auipc	a5,0x1b
   26f54:	5287b783          	ld	a5,1320(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26f58:	0007c783          	lbu	a5,0(a5)
   26f5c:	02078663          	beq	a5,zero,26f88 <dwarf::rangelist::contains(unsigned long) const+0x194>
    _Atomic_word __result = *__mem;
   26f60:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   26f64:	fff5079b          	addiw	a5,a0,-1
   26f68:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   26f6c:	00100793          	addi	a5,zero,1
   26f70:	f2f51ce3          	bne	a0,a5,26ea8 <dwarf::rangelist::contains(unsigned long) const+0xb4>
	    _M_destroy();
   26f74:	00043783          	ld	a5,0(s0)
   26f78:	0187b783          	ld	a5,24(a5)
   26f7c:	00040513          	addi	a0,s0,0
   26f80:	000780e7          	jalr	ra,0(a5)
   26f84:	f25ff06f          	jal	zero,26ea8 <dwarf::rangelist::contains(unsigned long) const+0xb4>
      return __exchange_and_add(__mem, __val);
   26f88:	fff00593          	addi	a1,zero,-1
   26f8c:	03440513          	addi	a0,s0,52
   26f90:	ba0ef0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26f94:	fd9ff06f          	jal	zero,26f6c <dwarf::rangelist::contains(unsigned long) const+0x178>
    return sec == o.sec && pos == o.pos;
   26f98:	01813703          	ld	a4,24(sp)
   26f9c:	04813783          	ld	a5,72(sp)
   26fa0:	e8f71ae3          	bne	a4,a5,26e34 <dwarf::rangelist::contains(unsigned long) const+0x40>
	if (_M_pi != nullptr)
   26fa4:	03813403          	ld	s0,56(sp)
   26fa8:	02040463          	beq	s0,zero,26fd0 <dwarf::rangelist::contains(unsigned long) const+0x1dc>
    if (__is_single_threaded())
   26fac:	0001b797          	auipc	a5,0x1b
   26fb0:	4cc7b783          	ld	a5,1228(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26fb4:	0007c783          	lbu	a5,0(a5)
   26fb8:	04078663          	beq	a5,zero,27004 <dwarf::rangelist::contains(unsigned long) const+0x210>
    _Atomic_word __result = *__mem;
   26fbc:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   26fc0:	fff5079b          	addiw	a5,a0,-1
   26fc4:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   26fc8:	00100793          	addi	a5,zero,1
   26fcc:	04f50463          	beq	a0,a5,27014 <dwarf::rangelist::contains(unsigned long) const+0x220>
	if (_M_pi != nullptr)
   26fd0:	00813403          	ld	s0,8(sp)
   26fd4:	02040463          	beq	s0,zero,26ffc <dwarf::rangelist::contains(unsigned long) const+0x208>
    if (__is_single_threaded())
   26fd8:	0001b797          	auipc	a5,0x1b
   26fdc:	4a07b783          	ld	a5,1184(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26fe0:	0007c783          	lbu	a5,0(a5)
   26fe4:	08078663          	beq	a5,zero,27070 <dwarf::rangelist::contains(unsigned long) const+0x27c>
    _Atomic_word __result = *__mem;
   26fe8:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   26fec:	fff5079b          	addiw	a5,a0,-1
   26ff0:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   26ff4:	00100793          	addi	a5,zero,1
   26ff8:	08f50463          	beq	a0,a5,27080 <dwarf::rangelist::contains(unsigned long) const+0x28c>
  return false;
   26ffc:	00000513          	addi	a0,zero,0
   27000:	eadff06f          	jal	zero,26eac <dwarf::rangelist::contains(unsigned long) const+0xb8>
      return __exchange_and_add(__mem, __val);
   27004:	fff00593          	addi	a1,zero,-1
   27008:	03040513          	addi	a0,s0,48
   2700c:	b24ef0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   27010:	fb9ff06f          	jal	zero,26fc8 <dwarf::rangelist::contains(unsigned long) const+0x1d4>
	_M_dispose();
   27014:	00043783          	ld	a5,0(s0)
   27018:	0107b783          	ld	a5,16(a5)
   2701c:	00040513          	addi	a0,s0,0
   27020:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   27024:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   27028:	0001b797          	auipc	a5,0x1b
   2702c:	4507b783          	ld	a5,1104(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   27030:	0007c783          	lbu	a5,0(a5)
   27034:	02078663          	beq	a5,zero,27060 <dwarf::rangelist::contains(unsigned long) const+0x26c>
    _Atomic_word __result = *__mem;
   27038:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   2703c:	fff5079b          	addiw	a5,a0,-1
   27040:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   27044:	00100793          	addi	a5,zero,1
   27048:	f8f514e3          	bne	a0,a5,26fd0 <dwarf::rangelist::contains(unsigned long) const+0x1dc>
	    _M_destroy();
   2704c:	00043783          	ld	a5,0(s0)
   27050:	0187b783          	ld	a5,24(a5)
   27054:	00040513          	addi	a0,s0,0
   27058:	000780e7          	jalr	ra,0(a5)
   2705c:	f75ff06f          	jal	zero,26fd0 <dwarf::rangelist::contains(unsigned long) const+0x1dc>
      return __exchange_and_add(__mem, __val);
   27060:	fff00593          	addi	a1,zero,-1
   27064:	03440513          	addi	a0,s0,52
   27068:	ac8ef0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2706c:	fd9ff06f          	jal	zero,27044 <dwarf::rangelist::contains(unsigned long) const+0x250>
   27070:	fff00593          	addi	a1,zero,-1
   27074:	03040513          	addi	a0,s0,48
   27078:	ab8ef0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2707c:	f79ff06f          	jal	zero,26ff4 <dwarf::rangelist::contains(unsigned long) const+0x200>
	_M_dispose();
   27080:	00043783          	ld	a5,0(s0)
   27084:	0107b783          	ld	a5,16(a5)
   27088:	00040513          	addi	a0,s0,0
   2708c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   27090:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   27094:	0001b797          	auipc	a5,0x1b
   27098:	3e47b783          	ld	a5,996(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2709c:	0007c783          	lbu	a5,0(a5)
   270a0:	02078663          	beq	a5,zero,270cc <dwarf::rangelist::contains(unsigned long) const+0x2d8>
    _Atomic_word __result = *__mem;
   270a4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   270a8:	fff5079b          	addiw	a5,a0,-1
   270ac:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   270b0:	00100793          	addi	a5,zero,1
   270b4:	f4f514e3          	bne	a0,a5,26ffc <dwarf::rangelist::contains(unsigned long) const+0x208>
	    _M_destroy();
   270b8:	00043783          	ld	a5,0(s0)
   270bc:	0187b783          	ld	a5,24(a5)
   270c0:	00040513          	addi	a0,s0,0
   270c4:	000780e7          	jalr	ra,0(a5)
   270c8:	f35ff06f          	jal	zero,26ffc <dwarf::rangelist::contains(unsigned long) const+0x208>
      return __exchange_and_add(__mem, __val);
   270cc:	fff00593          	addi	a1,zero,-1
   270d0:	03440513          	addi	a0,s0,52
   270d4:	a5cef0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   270d8:	fd9ff06f          	jal	zero,270b0 <dwarf::rangelist::contains(unsigned long) const+0x2bc>
	if (_M_pi != nullptr)
   270dc:	00050413          	addi	s0,a0,0
   270e0:	03813503          	ld	a0,56(sp)
   270e4:	00050863          	beq	a0,zero,270f4 <dwarf::rangelist::contains(unsigned long) const+0x300>
	  _M_pi->_M_release();
   270e8:	0001b317          	auipc	t1,0x1b
   270ec:	2d833303          	ld	t1,728(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   270f0:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   270f4:	00813503          	ld	a0,8(sp)
   270f8:	00050863          	beq	a0,zero,27108 <dwarf::rangelist::contains(unsigned long) const+0x314>
	  _M_pi->_M_release();
   270fc:	0001b317          	auipc	t1,0x1b
   27100:	2c433303          	ld	t1,708(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   27104:	000300e7          	jalr	ra,0(t1)
   27108:	00040513          	addi	a0,s0,0
   2710c:	d84ef0ef          	jal	ra,16690 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   27110:	00050413          	addi	s0,a0,0
   27114:	fe1ff06f          	jal	zero,270f4 <dwarf::rangelist::contains(unsigned long) const+0x300>

0000000000027118 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)>:
rangelist::rangelist(const initializer_list<pair<taddr, taddr>> &ranges) {
   27118:	fc010113          	addi	sp,sp,-64
   2711c:	02113c23          	sd	ra,56(sp)
   27120:	02813823          	sd	s0,48(sp)
   27124:	02913423          	sd	s1,40(sp)
   27128:	03213023          	sd	s2,32(sp)
   2712c:	01313c23          	sd	s3,24(sp)
   27130:	01413823          	sd	s4,16(sp)
   27134:	00050413          	addi	s0,a0,0
	: _M_start(), _M_finish(), _M_end_of_storage()
   27138:	00053023          	sd	zero,0(a0)
   2713c:	00053423          	sd	zero,8(a0)
   27140:	00053823          	sd	zero,16(a0)
      : _M_ptr(0), _M_refcount()
   27144:	00053c23          	sd	zero,24(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   27148:	02053023          	sd	zero,32(a0)
  synthetic.reserve(ranges.size() * 2 + 2);
   2714c:	0085b783          	ld	a5,8(a1)
   27150:	00178793          	addi	a5,a5,1
   27154:	00179693          	slli	a3,a5,0x1
      if (__n > this->max_size())
   27158:	fff00713          	addi	a4,zero,-1
   2715c:	00475713          	srli	a4,a4,0x4
   27160:	00d76e63          	bltu	a4,a3,2717c <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x64>
   27164:	00058913          	addi	s2,a1,0
      if (this->capacity() < __n)
   27168:	08068463          	beq	a3,zero,271f0 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xd8>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2716c:	00479493          	slli	s1,a5,0x4
   27170:	00048513          	addi	a0,s1,0
   27174:	b4cef0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   27178:	03c0006f          	jal	zero,271b4 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x9c>
	__throw_length_error(__N("vector::reserve"));
   2717c:	00011517          	auipc	a0,0x11
   27180:	88450513          	addi	a0,a0,-1916 # 37a00 <typeinfo name for dwarf::expr_context+0x18>
   27184:	a5cef0ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	if (_M_pi != nullptr)
   27188:	00050493          	addi	s1,a0,0
   2718c:	02043503          	ld	a0,32(s0)
   27190:	00050863          	beq	a0,zero,271a0 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x88>
	  _M_pi->_M_release();
   27194:	0001b317          	auipc	t1,0x1b
   27198:	22c33303          	ld	t1,556(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   2719c:	000300e7          	jalr	ra,0(t1)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   271a0:	00043503          	ld	a0,0(s0)
	if (__p)
   271a4:	00050463          	beq	a0,zero,271ac <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x94>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   271a8:	b08ef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   271ac:	00048513          	addi	a0,s1,0
   271b0:	ce0ef0ef          	jal	ra,16690 <_Unwind_Resume@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   271b4:	00050993          	addi	s3,a0,0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   271b8:	00043a03          	ld	s4,0(s0)
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result,
		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
   271bc:	00843603          	ld	a2,8(s0)
   271c0:	41460633          	sub	a2,a2,s4
      if (__count > 0)
   271c4:	00c04663          	blt	zero,a2,271d0 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xb8>
   271c8:	000a0c63          	beq	s4,zero,271e0 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xc8>
   271cc:	00c0006f          	jal	zero,271d8 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xc0>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   271d0:	000a0593          	addi	a1,s4,0
   271d4:	d4cef0ef          	jal	ra,16720 <memmove@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   271d8:	000a0513          	addi	a0,s4,0
   271dc:	ad4ef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	  this->_M_impl._M_start = __tmp;
   271e0:	01343023          	sd	s3,0(s0)
	  this->_M_impl._M_finish = __tmp + __old_size;
   271e4:	01343423          	sd	s3,8(s0)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   271e8:	009989b3          	add	s3,s3,s1
   271ec:	01343823          	sd	s3,16(s0)
      begin() const noexcept { return _M_array; }
   271f0:	00093483          	ld	s1,0(s2)
      end() const noexcept { return begin() + size(); }
   271f4:	00893903          	ld	s2,8(s2)
   271f8:	00491913          	slli	s2,s2,0x4
   271fc:	01248933          	add	s2,s1,s2
  for (auto &range : ranges) {
   27200:	07248863          	beq	s1,s2,27270 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x158>
	  _M_realloc_insert(end(), __x);
   27204:	0001b997          	auipc	s3,0x1b
   27208:	30c9b983          	ld	s3,780(s3) # 42510 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)@@Base+0x1b13c>
   2720c:	0280006f          	jal	zero,27234 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x11c>
   27210:	00048613          	addi	a2,s1,0
   27214:	00040513          	addi	a0,s0,0
   27218:	000980e7          	jalr	ra,0(s3)
   2721c:	0340006f          	jal	zero,27250 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x138>
   27220:	00848613          	addi	a2,s1,8
   27224:	00040513          	addi	a0,s0,0
   27228:	000980e7          	jalr	ra,0(s3)
   2722c:	01048493          	addi	s1,s1,16
   27230:	04990063          	beq	s2,s1,27270 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x158>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   27234:	00843583          	ld	a1,8(s0)
   27238:	01043783          	ld	a5,16(s0)
   2723c:	fcf58ae3          	beq	a1,a5,27210 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xf8>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   27240:	0004b783          	ld	a5,0(s1)
   27244:	00f5b023          	sd	a5,0(a1)
	    ++this->_M_impl._M_finish;
   27248:	00858593          	addi	a1,a1,8
   2724c:	00b43423          	sd	a1,8(s0)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   27250:	00843583          	ld	a1,8(s0)
   27254:	01043783          	ld	a5,16(s0)
   27258:	fcf584e3          	beq	a1,a5,27220 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x108>
   2725c:	0084b783          	ld	a5,8(s1)
   27260:	00f5b023          	sd	a5,0(a1)
	    ++this->_M_impl._M_finish;
   27264:	00858593          	addi	a1,a1,8
   27268:	00b43423          	sd	a1,8(s0)
   2726c:	fc1ff06f          	jal	zero,2722c <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x114>
  synthetic.push_back(0);
   27270:	00013023          	sd	zero,0(sp)
      { emplace_back(std::move(__x)); }
   27274:	00010593          	addi	a1,sp,0
   27278:	00040513          	addi	a0,s0,0
   2727c:	0001b317          	auipc	t1,0x1b
   27280:	17c33303          	ld	t1,380(t1) # 423f8 <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)@@Base+0x1ad74>
   27284:	000300e7          	jalr	ra,0(t1)
  synthetic.push_back(0);
   27288:	00013423          	sd	zero,8(sp)
   2728c:	00810593          	addi	a1,sp,8
   27290:	00040513          	addi	a0,s0,0
   27294:	0001b317          	auipc	t1,0x1b
   27298:	16433303          	ld	t1,356(t1) # 423f8 <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)@@Base+0x1ad74>
   2729c:	000300e7          	jalr	ra,0(t1)
      { return _M_data_ptr(this->_M_impl._M_start); }
   272a0:	00043903          	ld	s2,0(s0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   272a4:	00843483          	ld	s1,8(s0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   272a8:	06000513          	addi	a0,zero,96
   272ac:	a14ef0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   272b0:	00052423          	sw	zero,8(a0)
   272b4:	00052623          	sw	zero,12(a0)
   272b8:	00052823          	sw	zero,16(a0)
   272bc:	00052a23          	sw	zero,20(a0)
   272c0:	00052c23          	sw	zero,24(a0)
   272c4:	00052e23          	sw	zero,28(a0)
   272c8:	02053023          	sd	zero,32(a0)
   272cc:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   272d0:	00100793          	addi	a5,zero,1
   272d4:	02f52823          	sw	a5,48(a0)
   272d8:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   272dc:	0001b797          	auipc	a5,0x1b
   272e0:	2dc7b783          	ld	a5,732(a5) # 425b8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc40>
   272e4:	01078793          	addi	a5,a5,16
   272e8:	00f53023          	sd	a5,0(a0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   272ec:	00900793          	addi	a5,zero,9
   272f0:	02f52c23          	sw	a5,56(a0)
   272f4:	05253023          	sd	s2,64(a0)
   272f8:	04953423          	sd	s1,72(a0)
   272fc:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   27300:	04052a23          	sw	zero,84(a0)
   27304:	00800793          	addi	a5,zero,8
   27308:	04f52c23          	sw	a5,88(a0)
   2730c:	03850793          	addi	a5,a0,56
   27310:	00f43c23          	sd	a5,24(s0)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   27314:	02043483          	ld	s1,32(s0)
	__r._M_pi = _M_pi;
   27318:	02a43023          	sd	a0,32(s0)
	if (_M_pi != nullptr)
   2731c:	02048463          	beq	s1,zero,27344 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x22c>
    if (__is_single_threaded())
   27320:	0001b797          	auipc	a5,0x1b
   27324:	1587b783          	ld	a5,344(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   27328:	0007c783          	lbu	a5,0(a5)
   2732c:	02078e63          	beq	a5,zero,27368 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x250>
    _Atomic_word __result = *__mem;
   27330:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   27334:	fff5079b          	addiw	a5,a0,-1
   27338:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2733c:	00100793          	addi	a5,zero,1
   27340:	02f50c63          	beq	a0,a5,27378 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x260>
  base_addr = 0;
   27344:	02043423          	sd	zero,40(s0)
}
   27348:	03813083          	ld	ra,56(sp)
   2734c:	03013403          	ld	s0,48(sp)
   27350:	02813483          	ld	s1,40(sp)
   27354:	02013903          	ld	s2,32(sp)
   27358:	01813983          	ld	s3,24(sp)
   2735c:	01013a03          	ld	s4,16(sp)
   27360:	04010113          	addi	sp,sp,64
   27364:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   27368:	fff00593          	addi	a1,zero,-1
   2736c:	03048513          	addi	a0,s1,48
   27370:	fc1ee0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   27374:	fc9ff06f          	jal	zero,2733c <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x224>
	_M_dispose();
   27378:	0004b783          	ld	a5,0(s1)
   2737c:	0107b783          	ld	a5,16(a5)
   27380:	00048513          	addi	a0,s1,0
   27384:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   27388:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2738c:	0001b797          	auipc	a5,0x1b
   27390:	0ec7b783          	ld	a5,236(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   27394:	0007c783          	lbu	a5,0(a5)
   27398:	02078663          	beq	a5,zero,273c4 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x2ac>
    _Atomic_word __result = *__mem;
   2739c:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   273a0:	fff5079b          	addiw	a5,a0,-1
   273a4:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   273a8:	00100793          	addi	a5,zero,1
   273ac:	f8f51ce3          	bne	a0,a5,27344 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x22c>
	    _M_destroy();
   273b0:	0004b783          	ld	a5,0(s1)
   273b4:	0187b783          	ld	a5,24(a5)
   273b8:	00048513          	addi	a0,s1,0
   273bc:	000780e7          	jalr	ra,0(a5)
   273c0:	f85ff06f          	jal	zero,27344 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x22c>
      return __exchange_and_add(__mem, __val);
   273c4:	fff00593          	addi	a1,zero,-1
   273c8:	03448513          	addi	a0,s1,52
   273cc:	f65ee0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   273d0:	fd9ff06f          	jal	zero,273a8 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x290>

00000000000273d4 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)>:
      vector<_Tp, _Alloc>::
   273d4:	fb010113          	addi	sp,sp,-80
   273d8:	04113423          	sd	ra,72(sp)
   273dc:	04813023          	sd	s0,64(sp)
   273e0:	02913c23          	sd	s1,56(sp)
   273e4:	03213823          	sd	s2,48(sp)
   273e8:	03313423          	sd	s3,40(sp)
   273ec:	03413023          	sd	s4,32(sp)
   273f0:	01513c23          	sd	s5,24(sp)
   273f4:	01613823          	sd	s6,16(sp)
   273f8:	01713423          	sd	s7,8(sp)
   273fc:	00853903          	ld	s2,8(a0)
   27400:	00053983          	ld	s3,0(a0)
   27404:	413907b3          	sub	a5,s2,s3
   27408:	4037d793          	srai	a5,a5,0x3
	if (max_size() - size() < __n)
   2740c:	fff00713          	addi	a4,zero,-1
   27410:	00475713          	srli	a4,a4,0x4
   27414:	04e78263          	beq	a5,a4,27458 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x84>
   27418:	00050493          	addi	s1,a0,0
   2741c:	00058a13          	addi	s4,a1,0
   27420:	00060b93          	addi	s7,a2,0
      return __a;
   27424:	00078713          	addi	a4,a5,0
      if (__a < __b)
   27428:	03390e63          	beq	s2,s3,27464 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x90>
	const size_type __len = size() + (std::max)(size(), __n);
   2742c:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   27430:	06f76263          	bltu	a4,a5,27494 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xc0>
   27434:	00070a93          	addi	s5,a4,0
   27438:	fff00793          	addi	a5,zero,-1
   2743c:	0047d793          	srli	a5,a5,0x4
   27440:	00e7f463          	bgeu	a5,a4,27448 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x74>
   27444:	00078a93          	addi	s5,a5,0
   27448:	413a0433          	sub	s0,s4,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2744c:	00000b13          	addi	s6,zero,0
   27450:	04070e63          	beq	a4,zero,274ac <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xd8>
   27454:	04c0006f          	jal	zero,274a0 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xcc>
	  __throw_length_error(__N(__s));
   27458:	0000f517          	auipc	a0,0xf
   2745c:	61050513          	addi	a0,a0,1552 # 36a68 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   27460:	f81ee0ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   27464:	00100713          	addi	a4,zero,1
   27468:	fc5ff06f          	jal	zero,2742c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x58>
   2746c:	00040613          	addi	a2,s0,0
   27470:	00098593          	addi	a1,s3,0
   27474:	000b0513          	addi	a0,s6,0
   27478:	aa8ef0ef          	jal	ra,16720 <memmove@plt>
	      ++__new_finish;
   2747c:	00840413          	addi	s0,s0,8
   27480:	008b0433          	add	s0,s6,s0
      ptrdiff_t __count = __last - __first;
   27484:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   27488:	05204263          	blt	zero,s2,274cc <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xf8>
	}
      return __result + __count;
   2748c:	01240433          	add	s0,s0,s2
      _M_deallocate(pointer __p, size_t __n)
   27490:	0540006f          	jal	zero,274e4 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x110>
   27494:	413a0433          	sub	s0,s4,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   27498:	fff00a93          	addi	s5,zero,-1
   2749c:	004ada93          	srli	s5,s5,0x4
   274a0:	003a9513          	slli	a0,s5,0x3
   274a4:	81cef0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   274a8:	00050b13          	addi	s6,a0,0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   274ac:	008b07b3          	add	a5,s6,s0
   274b0:	000bb703          	ld	a4,0(s7)
   274b4:	00e7b023          	sd	a4,0(a5)
      if (__count > 0)
   274b8:	fa804ae3          	blt	zero,s0,2746c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x98>
   274bc:	00840413          	addi	s0,s0,8
   274c0:	008b0433          	add	s0,s6,s0
      ptrdiff_t __count = __last - __first;
   274c4:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   274c8:	01205a63          	bge	zero,s2,274dc <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x108>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   274cc:	00090613          	addi	a2,s2,0
   274d0:	000a0593          	addi	a1,s4,0
   274d4:	00040513          	addi	a0,s0,0
   274d8:	878ef0ef          	jal	ra,16550 <memcpy@plt>
      return __result + __count;
   274dc:	01240433          	add	s0,s0,s2
	if (__p)
   274e0:	00098663          	beq	s3,zero,274ec <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x118>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   274e4:	00098513          	addi	a0,s3,0
   274e8:	fc9ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   274ec:	0164b023          	sd	s6,0(s1)
      this->_M_impl._M_finish = __new_finish;
   274f0:	0084b423          	sd	s0,8(s1)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   274f4:	003a9a93          	slli	s5,s5,0x3
   274f8:	015b0ab3          	add	s5,s6,s5
   274fc:	0154b823          	sd	s5,16(s1)
    }
   27500:	04813083          	ld	ra,72(sp)
   27504:	04013403          	ld	s0,64(sp)
   27508:	03813483          	ld	s1,56(sp)
   2750c:	03013903          	ld	s2,48(sp)
   27510:	02813983          	ld	s3,40(sp)
   27514:	02013a03          	ld	s4,32(sp)
   27518:	01813a83          	ld	s5,24(sp)
   2751c:	01013b03          	ld	s6,16(sp)
   27520:	00813b83          	ld	s7,8(sp)
   27524:	05010113          	addi	sp,sp,80
   27528:	00008067          	jalr	zero,0(ra)

000000000002752c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)>:
      vector<_Tp, _Alloc>::
   2752c:	fb010113          	addi	sp,sp,-80
   27530:	04113423          	sd	ra,72(sp)
   27534:	04813023          	sd	s0,64(sp)
   27538:	02913c23          	sd	s1,56(sp)
   2753c:	03213823          	sd	s2,48(sp)
   27540:	03313423          	sd	s3,40(sp)
   27544:	03413023          	sd	s4,32(sp)
   27548:	01513c23          	sd	s5,24(sp)
   2754c:	01613823          	sd	s6,16(sp)
   27550:	01713423          	sd	s7,8(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   27554:	00853903          	ld	s2,8(a0)
   27558:	00053983          	ld	s3,0(a0)
   2755c:	413907b3          	sub	a5,s2,s3
   27560:	4037d793          	srai	a5,a5,0x3
	if (max_size() - size() < __n)
   27564:	fff00713          	addi	a4,zero,-1
   27568:	00475713          	srli	a4,a4,0x4
   2756c:	04e78263          	beq	a5,a4,275b0 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x84>
   27570:	00050493          	addi	s1,a0,0
   27574:	00058a13          	addi	s4,a1,0
   27578:	00060b93          	addi	s7,a2,0
      return __a;
   2757c:	00078713          	addi	a4,a5,0
      if (__a < __b)
   27580:	03390e63          	beq	s2,s3,275bc <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x90>
	const size_type __len = size() + (std::max)(size(), __n);
   27584:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   27588:	06f76263          	bltu	a4,a5,275ec <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xc0>
   2758c:	00070a93          	addi	s5,a4,0
   27590:	fff00793          	addi	a5,zero,-1
   27594:	0047d793          	srli	a5,a5,0x4
   27598:	00e7f463          	bgeu	a5,a4,275a0 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x74>
   2759c:	00078a93          	addi	s5,a5,0
   275a0:	413a0433          	sub	s0,s4,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   275a4:	00000b13          	addi	s6,zero,0
   275a8:	04070e63          	beq	a4,zero,27604 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xd8>
   275ac:	04c0006f          	jal	zero,275f8 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xcc>
	  __throw_length_error(__N(__s));
   275b0:	0000f517          	auipc	a0,0xf
   275b4:	4b850513          	addi	a0,a0,1208 # 36a68 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   275b8:	e29ee0ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   275bc:	00100713          	addi	a4,zero,1
   275c0:	fc5ff06f          	jal	zero,27584 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x58>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   275c4:	00040613          	addi	a2,s0,0
   275c8:	00098593          	addi	a1,s3,0
   275cc:	000b0513          	addi	a0,s6,0
   275d0:	950ef0ef          	jal	ra,16720 <memmove@plt>
	      ++__new_finish;
   275d4:	00840413          	addi	s0,s0,8
   275d8:	008b0433          	add	s0,s6,s0
      ptrdiff_t __count = __last - __first;
   275dc:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   275e0:	05204263          	blt	zero,s2,27624 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xf8>
      return __result + __count;
   275e4:	01240433          	add	s0,s0,s2
      _M_deallocate(pointer __p, size_t __n)
   275e8:	0540006f          	jal	zero,2763c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x110>
   275ec:	413a0433          	sub	s0,s4,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   275f0:	fff00a93          	addi	s5,zero,-1
   275f4:	004ada93          	srli	s5,s5,0x4
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   275f8:	003a9513          	slli	a0,s5,0x3
   275fc:	ec5ee0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   27600:	00050b13          	addi	s6,a0,0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   27604:	008b07b3          	add	a5,s6,s0
   27608:	000bb703          	ld	a4,0(s7)
   2760c:	00e7b023          	sd	a4,0(a5)
      if (__count > 0)
   27610:	fa804ae3          	blt	zero,s0,275c4 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x98>
   27614:	00840413          	addi	s0,s0,8
   27618:	008b0433          	add	s0,s6,s0
      ptrdiff_t __count = __last - __first;
   2761c:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   27620:	01205a63          	bge	zero,s2,27634 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x108>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   27624:	00090613          	addi	a2,s2,0
   27628:	000a0593          	addi	a1,s4,0
   2762c:	00040513          	addi	a0,s0,0
   27630:	f21ee0ef          	jal	ra,16550 <memcpy@plt>
      return __result + __count;
   27634:	01240433          	add	s0,s0,s2
	if (__p)
   27638:	00098663          	beq	s3,zero,27644 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x118>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2763c:	00098513          	addi	a0,s3,0
   27640:	e71ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   27644:	0164b023          	sd	s6,0(s1)
      this->_M_impl._M_finish = __new_finish;
   27648:	0084b423          	sd	s0,8(s1)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2764c:	003a9a93          	slli	s5,s5,0x3
   27650:	015b0ab3          	add	s5,s6,s5
   27654:	0154b823          	sd	s5,16(s1)
    }
   27658:	04813083          	ld	ra,72(sp)
   2765c:	04013403          	ld	s0,64(sp)
   27660:	03813483          	ld	s1,56(sp)
   27664:	03013903          	ld	s2,48(sp)
   27668:	02813983          	ld	s3,40(sp)
   2766c:	02013a03          	ld	s4,32(sp)
   27670:	01813a83          	ld	s5,24(sp)
   27674:	01013b03          	ld	s6,16(sp)
   27678:	00813b83          	ld	s7,8(sp)
   2767c:	05010113          	addi	sp,sp,80
   27680:	00008067          	jalr	zero,0(ra)

0000000000027684 <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)>:
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   27684:	00853783          	ld	a5,8(a0)
   27688:	01053703          	ld	a4,16(a0)
   2768c:	00e78e63          	beq	a5,a4,276a8 <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)+0x24>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   27690:	0005b703          	ld	a4,0(a1)
   27694:	00e7b023          	sd	a4,0(a5)
	    ++this->_M_impl._M_finish;
   27698:	00853783          	ld	a5,8(a0)
   2769c:	00878793          	addi	a5,a5,8
   276a0:	00f53423          	sd	a5,8(a0)
   276a4:	00008067          	jalr	zero,0(ra)
      vector<_Tp, _Alloc>::
   276a8:	ff010113          	addi	sp,sp,-16
   276ac:	00113423          	sd	ra,8(sp)
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   276b0:	00058613          	addi	a2,a1,0
   276b4:	00078593          	addi	a1,a5,0
   276b8:	0001b317          	auipc	t1,0x1b
   276bc:	c7033303          	ld	t1,-912(t1) # 42328 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)@@Base+0x1adfc>
   276c0:	000300e7          	jalr	ra,0(t1)
      }
   276c4:	00813083          	ld	ra,8(sp)
   276c8:	01010113          	addi	sp,sp,16
   276cc:	00008067          	jalr	zero,0(ra)

00000000000276d0 <dwarf::line_table::entry::reset(bool)>:

line_table::file::file(string path, uint64_t mtime, uint64_t length)
    : path(path), mtime(mtime), length(length) {}

void line_table::entry::reset(bool is_stmt) {
  address = op_index = 0;
   276d0:	00052423          	sw	zero,8(a0)
   276d4:	00053023          	sd	zero,0(a0)
  file = nullptr;
   276d8:	00053823          	sd	zero,16(a0)
  file_index = line = 1;
   276dc:	00100793          	addi	a5,zero,1
   276e0:	00f52e23          	sw	a5,28(a0)
   276e4:	00f52c23          	sw	a5,24(a0)
  column = 0;
   276e8:	02052023          	sw	zero,32(a0)
  this->is_stmt = is_stmt;
   276ec:	02b50223          	sb	a1,36(a0)
  basic_block = end_sequence = prologue_end = epilogue_begin = false;
   276f0:	02050423          	sb	zero,40(a0)
   276f4:	020503a3          	sb	zero,39(a0)
   276f8:	02050323          	sb	zero,38(a0)
   276fc:	020502a3          	sb	zero,37(a0)
  isa = discriminator = 0;
   27700:	02052823          	sw	zero,48(a0)
   27704:	02052623          	sw	zero,44(a0)
}
   27708:	00008067          	jalr	zero,0(ra)

000000000002770c <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>:
line_table::file::file(string path, uint64_t mtime, uint64_t length)
   2770c:	fe010113          	addi	sp,sp,-32
   27710:	00113c23          	sd	ra,24(sp)
   27714:	00813823          	sd	s0,16(sp)
   27718:	00913423          	sd	s1,8(sp)
   2771c:	01213023          	sd	s2,0(sp)
   27720:	00050413          	addi	s0,a0,0
   27724:	00058793          	addi	a5,a1,0
   27728:	00060913          	addi	s2,a2,0
   2772c:	00068493          	addi	s1,a3,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27730:	01050713          	addi	a4,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   27734:	00e53023          	sd	a4,0(a0)
      { return _M_dataplus._M_p; }
   27738:	0005b583          	ld	a1,0(a1)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   2773c:	0087b603          	ld	a2,8(a5)
   27740:	00000693          	addi	a3,zero,0
   27744:	00c58633          	add	a2,a1,a2
   27748:	0001b317          	auipc	t1,0x1b
   2774c:	bc033303          	ld	t1,-1088(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17964>
   27750:	000300e7          	jalr	ra,0(t1)
    : path(path), mtime(mtime), length(length) {}
   27754:	03243023          	sd	s2,32(s0)
   27758:	02943423          	sd	s1,40(s0)
   2775c:	01813083          	ld	ra,24(sp)
   27760:	01013403          	ld	s0,16(sp)
   27764:	00813483          	ld	s1,8(sp)
   27768:	00013903          	ld	s2,0(sp)
   2776c:	02010113          	addi	sp,sp,32
   27770:	00008067          	jalr	zero,0(ra)

0000000000027774 <dwarf::line_table::entry::get_description[abi:cxx11]() const>:

string line_table::entry::get_description() const {
   27774:	fb010113          	addi	sp,sp,-80
   27778:	04113423          	sd	ra,72(sp)
   2777c:	04813023          	sd	s0,64(sp)
   27780:	02913c23          	sd	s1,56(sp)
   27784:	03213823          	sd	s2,48(sp)
   27788:	03313423          	sd	s3,40(sp)
   2778c:	03413023          	sd	s4,32(sp)
   27790:	00050413          	addi	s0,a0,0
   27794:	00058493          	addi	s1,a1,0
  string res = file->path;
   27798:	0105b783          	ld	a5,16(a1)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2779c:	01050913          	addi	s2,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   277a0:	01253023          	sd	s2,0(a0)
      { return _M_dataplus._M_p; }
   277a4:	0007b583          	ld	a1,0(a5)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   277a8:	0087b603          	ld	a2,8(a5)
   277ac:	00000693          	addi	a3,zero,0
   277b0:	00c58633          	add	a2,a1,a2
   277b4:	0001b317          	auipc	t1,0x1b
   277b8:	b5433303          	ld	t1,-1196(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17964>
   277bc:	000300e7          	jalr	ra,0(t1)
  if (line) {
   277c0:	01c4a783          	lw	a5,28(s1)
   277c4:	02079463          	bne	a5,zero,277ec <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x78>
    res.append(":").append(std::to_string(line));
    if (column)
      res.append(":").append(std::to_string(column));
  }
  return res;
}
   277c8:	00040513          	addi	a0,s0,0
   277cc:	04813083          	ld	ra,72(sp)
   277d0:	04013403          	ld	s0,64(sp)
   277d4:	03813483          	ld	s1,56(sp)
   277d8:	03013903          	ld	s2,48(sp)
   277dc:	02813983          	ld	s3,40(sp)
   277e0:	02013a03          	ld	s4,32(sp)
   277e4:	05010113          	addi	sp,sp,80
   277e8:	00008067          	jalr	zero,0(ra)
	if (this->max_size() - (this->size() - __n1) < __n2)
   277ec:	00843703          	ld	a4,8(s0)
   277f0:	fff00793          	addi	a5,zero,-1
   277f4:	0027d793          	srli	a5,a5,0x2
   277f8:	00f70e63          	beq	a4,a5,27814 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xa0>
	return _M_append(__s, __n);
   277fc:	00100613          	addi	a2,zero,1
   27800:	00010597          	auipc	a1,0x10
   27804:	21058593          	addi	a1,a1,528 # 37a10 <typeinfo name for dwarf::expr_context+0x28>
   27808:	00040513          	addi	a0,s0,0
   2780c:	b65ee0ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   27810:	0180006f          	jal	zero,27828 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xb4>
	  __throw_length_error(__N(__s));
   27814:	0000f517          	auipc	a0,0xf
   27818:	74c50513          	addi	a0,a0,1868 # 36f60 <std::piecewise_construct+0x2b0>
   2781c:	bc5ee0ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   27820:	00050493          	addi	s1,a0,0
   27824:	09c0006f          	jal	zero,278c0 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x14c>
	return _M_append(__s, __n);
   27828:	00050993          	addi	s3,a0,0
    res.append(":").append(std::to_string(line));
   2782c:	01c4aa03          	lw	s4,28(s1)
    string __str(__detail::__to_chars_len(__val), '\0');
   27830:	00a00593          	addi	a1,zero,10
   27834:	000a0513          	addi	a0,s4,0
   27838:	0001b317          	auipc	t1,0x1b
   2783c:	c5833303          	ld	t1,-936(t1) # 42490 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x17f9c>
   27840:	000300e7          	jalr	ra,0(t1)
	: allocator_type(__a), _M_p(__dat) { }
   27844:	01010793          	addi	a5,sp,16
   27848:	00f13023          	sd	a5,0(sp)
      { _M_construct(__n, __c); }
   2784c:	00000613          	addi	a2,zero,0
   27850:	02051593          	slli	a1,a0,0x20
   27854:	0205d593          	srli	a1,a1,0x20
   27858:	00010513          	addi	a0,sp,0
   2785c:	cb5ee0ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   27860:	000a0613          	addi	a2,s4,0
   27864:	00812583          	lw	a1,8(sp)
   27868:	00013503          	ld	a0,0(sp)
   2786c:	0001b317          	auipc	t1,0x1b
   27870:	c4433303          	ld	t1,-956(t1) # 424b0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x17f20>
   27874:	000300e7          	jalr	ra,0(t1)
      { return _M_dataplus._M_p; }
   27878:	00013583          	ld	a1,0(sp)
      { return _M_string_length; }
   2787c:	00813603          	ld	a2,8(sp)
	if (this->max_size() - (this->size() - __n1) < __n2)
   27880:	0089b703          	ld	a4,8(s3)
   27884:	fff00793          	addi	a5,zero,-1
   27888:	0027d793          	srli	a5,a5,0x2
   2788c:	40e787b3          	sub	a5,a5,a4
   27890:	00c7e863          	bltu	a5,a2,278a0 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x12c>
	return _M_append(__s, __n);
   27894:	00098513          	addi	a0,s3,0
   27898:	ad9ee0ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   2789c:	0380006f          	jal	zero,278d4 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x160>
	  __throw_length_error(__N(__s));
   278a0:	0000f517          	auipc	a0,0xf
   278a4:	6c050513          	addi	a0,a0,1728 # 36f60 <std::piecewise_construct+0x2b0>
   278a8:	b39ee0ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   278ac:	00050493          	addi	s1,a0,0
   278b0:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   278b4:	01010793          	addi	a5,sp,16
   278b8:	00f50463          	beq	a0,a5,278c0 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x14c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   278bc:	bf5ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   278c0:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   278c4:	01250463          	beq	a0,s2,278cc <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x158>
   278c8:	be9ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   278cc:	00048513          	addi	a0,s1,0
   278d0:	dc1ee0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   278d4:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   278d8:	01010793          	addi	a5,sp,16
   278dc:	00f50463          	beq	a0,a5,278e4 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x170>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   278e0:	bd1ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
    if (column)
   278e4:	0204a783          	lw	a5,32(s1)
   278e8:	ee0780e3          	beq	a5,zero,277c8 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x54>
	if (this->max_size() - (this->size() - __n1) < __n2)
   278ec:	00843703          	ld	a4,8(s0)
   278f0:	fff00793          	addi	a5,zero,-1
   278f4:	0027d793          	srli	a5,a5,0x2
   278f8:	00f70e63          	beq	a4,a5,27914 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x1a0>
	return _M_append(__s, __n);
   278fc:	00100613          	addi	a2,zero,1
   27900:	00010597          	auipc	a1,0x10
   27904:	11058593          	addi	a1,a1,272 # 37a10 <typeinfo name for dwarf::expr_context+0x28>
   27908:	00040513          	addi	a0,s0,0
   2790c:	a65ee0ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   27910:	0100006f          	jal	zero,27920 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x1ac>
	  __throw_length_error(__N(__s));
   27914:	0000f517          	auipc	a0,0xf
   27918:	64c50513          	addi	a0,a0,1612 # 36f60 <std::piecewise_construct+0x2b0>
   2791c:	ac5ee0ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return _M_append(__s, __n);
   27920:	00050993          	addi	s3,a0,0
      res.append(":").append(std::to_string(column));
   27924:	0204a483          	lw	s1,32(s1)
    string __str(__detail::__to_chars_len(__val), '\0');
   27928:	00a00593          	addi	a1,zero,10
   2792c:	00048513          	addi	a0,s1,0
   27930:	0001b317          	auipc	t1,0x1b
   27934:	b6033303          	ld	t1,-1184(t1) # 42490 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x17f9c>
   27938:	000300e7          	jalr	ra,0(t1)
	: allocator_type(__a), _M_p(__dat) { }
   2793c:	01010793          	addi	a5,sp,16
   27940:	00f13023          	sd	a5,0(sp)
      { _M_construct(__n, __c); }
   27944:	00000613          	addi	a2,zero,0
   27948:	02051593          	slli	a1,a0,0x20
   2794c:	0205d593          	srli	a1,a1,0x20
   27950:	00010513          	addi	a0,sp,0
   27954:	bbdee0ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   27958:	00048613          	addi	a2,s1,0
   2795c:	00812583          	lw	a1,8(sp)
   27960:	00013503          	ld	a0,0(sp)
   27964:	0001b317          	auipc	t1,0x1b
   27968:	b4c33303          	ld	t1,-1204(t1) # 424b0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x17f20>
   2796c:	000300e7          	jalr	ra,0(t1)
      { return _M_dataplus._M_p; }
   27970:	00013583          	ld	a1,0(sp)
      { return _M_string_length; }
   27974:	00813603          	ld	a2,8(sp)
	if (this->max_size() - (this->size() - __n1) < __n2)
   27978:	0089b703          	ld	a4,8(s3)
   2797c:	fff00793          	addi	a5,zero,-1
   27980:	0027d793          	srli	a5,a5,0x2
   27984:	40e787b3          	sub	a5,a5,a4
   27988:	00c7e863          	bltu	a5,a2,27998 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x224>
	return _M_append(__s, __n);
   2798c:	00098513          	addi	a0,s3,0
   27990:	9e1ee0ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   27994:	0280006f          	jal	zero,279bc <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x248>
	  __throw_length_error(__N(__s));
   27998:	0000f517          	auipc	a0,0xf
   2799c:	5c850513          	addi	a0,a0,1480 # 36f60 <std::piecewise_construct+0x2b0>
   279a0:	a41ee0ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   279a4:	00050493          	addi	s1,a0,0
   279a8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   279ac:	01010793          	addi	a5,sp,16
   279b0:	f0f508e3          	beq	a0,a5,278c0 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x14c>
   279b4:	afdee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   279b8:	f09ff06f          	jal	zero,278c0 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x14c>
      { return _M_dataplus._M_p; }
   279bc:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   279c0:	01010793          	addi	a5,sp,16
   279c4:	e0f502e3          	beq	a0,a5,277c8 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x54>
   279c8:	ae9ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
  return res;
   279cc:	dfdff06f          	jal	zero,277c8 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x54>

00000000000279d0 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)>:
bool line_table::impl::read_file_entry(cursor *cur, bool in_header) {
   279d0:	f7010113          	addi	sp,sp,-144
   279d4:	08113423          	sd	ra,136(sp)
   279d8:	08813023          	sd	s0,128(sp)
   279dc:	06913c23          	sd	s1,120(sp)
   279e0:	07213823          	sd	s2,112(sp)
  assert(cur->sec == sec);
   279e4:	00053703          	ld	a4,0(a0)
   279e8:	0005b783          	ld	a5,0(a1)
   279ec:	02f71863          	bne	a4,a5,27a1c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x4c>
   279f0:	00050913          	addi	s2,a0,0
   279f4:	00058413          	addi	s0,a1,0
   279f8:	00060493          	addi	s1,a2,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   279fc:	06010793          	addi	a5,sp,96
   27a00:	04f13823          	sd	a5,80(sp)
      { _M_string_length = __length; }
   27a04:	04013c23          	sd	zero,88(sp)
	__c1 = __c2;
   27a08:	06010023          	sb	zero,96(sp)
  cur->string(file_name);
   27a0c:	05010593          	addi	a1,sp,80
   27a10:	00040513          	addi	a0,s0,0
   27a14:	894f50ef          	jal	ra,1caa8 <dwarf::cursor::string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   27a18:	0240006f          	jal	zero,27a3c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x6c>
  assert(cur->sec == sec);
   27a1c:	00010697          	auipc	a3,0x10
   27a20:	ffc68693          	addi	a3,a3,-4 # 37a18 <typeinfo name for dwarf::expr_context+0x30>
   27a24:	0bb00613          	addi	a2,zero,187
   27a28:	00010597          	auipc	a1,0x10
   27a2c:	03858593          	addi	a1,a1,56 # 37a60 <typeinfo name for dwarf::expr_context+0x78>
   27a30:	00010517          	auipc	a0,0x10
   27a34:	03850513          	addi	a0,a0,56 # 37a68 <typeinfo name for dwarf::expr_context+0x80>
   27a38:	a69ee0ef          	jal	ra,164a0 <__assert_fail@plt>
  if (in_header && file_name.empty())
   27a3c:	00048663          	beq	s1,zero,27a48 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x78>
   27a40:	05813783          	ld	a5,88(sp)
   27a44:	28078463          	beq	a5,zero,27ccc <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x2fc>
    while (pos < sec->end) {
   27a48:	01043783          	ld	a5,16(s0)
      { return _M_ptr; }
   27a4c:	00043583          	ld	a1,0(s0)
   27a50:	0105b703          	ld	a4,16(a1)
   27a54:	02e7fe63          	bgeu	a5,a4,27a90 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0xc0>
   27a58:	00000493          	addi	s1,zero,0
   27a5c:	00000613          	addi	a2,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   27a60:	00178793          	addi	a5,a5,1
   27a64:	00f43823          	sd	a5,16(s0)
   27a68:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   27a6c:	07f77693          	andi	a3,a4,127
   27a70:	00c696b3          	sll	a3,a3,a2
   27a74:	00d4e4b3          	or	s1,s1,a3
      if ((byte & 0x80) == 0)
   27a78:	0187171b          	slliw	a4,a4,0x18
   27a7c:	4187571b          	sraiw	a4,a4,0x18
   27a80:	00075e63          	bge	a4,zero,27a9c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0xcc>
      shift += 7;
   27a84:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   27a88:	0105b703          	ld	a4,16(a1)
   27a8c:	fce7eae3          	bltu	a5,a4,27a60 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x90>
    underflow();
   27a90:	00040513          	addi	a0,s0,0
   27a94:	868f50ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    return 0;
   27a98:	00000493          	addi	s1,zero,0
    while (pos < sec->end) {
   27a9c:	01043783          	ld	a5,16(s0)
   27aa0:	00043503          	ld	a0,0(s0)
   27aa4:	01053703          	ld	a4,16(a0)
   27aa8:	02e7fe63          	bgeu	a5,a4,27ae4 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x114>
    std::uint64_t result = 0;
   27aac:	00000593          	addi	a1,zero,0
    int shift = 0;
   27ab0:	00000613          	addi	a2,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   27ab4:	00178793          	addi	a5,a5,1
   27ab8:	00f43823          	sd	a5,16(s0)
   27abc:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   27ac0:	07f77693          	andi	a3,a4,127
   27ac4:	00c696b3          	sll	a3,a3,a2
   27ac8:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   27acc:	0187171b          	slliw	a4,a4,0x18
   27ad0:	4187571b          	sraiw	a4,a4,0x18
   27ad4:	00075e63          	bge	a4,zero,27af0 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x120>
      shift += 7;
   27ad8:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   27adc:	01053703          	ld	a4,16(a0)
   27ae0:	fce7eae3          	bltu	a5,a4,27ab4 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0xe4>
    underflow();
   27ae4:	00040513          	addi	a0,s0,0
   27ae8:	814f50ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    return 0;
   27aec:	00000593          	addi	a1,zero,0
  uint64_t mtime = cur->uleb128();
   27af0:	04b13423          	sd	a1,72(sp)
    while (pos < sec->end) {
   27af4:	01043783          	ld	a5,16(s0)
   27af8:	00043503          	ld	a0,0(s0)
   27afc:	01053703          	ld	a4,16(a0)
   27b00:	02e7fe63          	bgeu	a5,a4,27b3c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x16c>
    std::uint64_t result = 0;
   27b04:	00000593          	addi	a1,zero,0
    int shift = 0;
   27b08:	00000613          	addi	a2,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   27b0c:	00178793          	addi	a5,a5,1
   27b10:	00f43823          	sd	a5,16(s0)
   27b14:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   27b18:	07f77693          	andi	a3,a4,127
   27b1c:	00c696b3          	sll	a3,a3,a2
   27b20:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   27b24:	0187171b          	slliw	a4,a4,0x18
   27b28:	4187571b          	sraiw	a4,a4,0x18
   27b2c:	00075e63          	bge	a4,zero,27b48 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x178>
      shift += 7;
   27b30:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   27b34:	01053703          	ld	a4,16(a0)
   27b38:	fce7eae3          	bltu	a5,a4,27b0c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x13c>
    underflow();
   27b3c:	00040513          	addi	a0,s0,0
   27b40:	fbdf40ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    return 0;
   27b44:	00000593          	addi	a1,zero,0
  uint64_t length = cur->uleb128();
   27b48:	04b13023          	sd	a1,64(sp)
  section_offset get_section_offset() const { return pos - sec->begin; }
   27b4c:	00043703          	ld	a4,0(s0)
   27b50:	01043783          	ld	a5,16(s0)
   27b54:	00873703          	ld	a4,8(a4)
   27b58:	40e787b3          	sub	a5,a5,a4
  if (cur->get_section_offset() <= last_file_name_end)
   27b5c:	06893703          	ld	a4,104(s2)
   27b60:	16f77a63          	bgeu	a4,a5,27cd4 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x304>
  last_file_name_end = cur->get_section_offset();
   27b64:	06f93423          	sd	a5,104(s2)
  if (file_name[0] == '/')
   27b68:	05013783          	ld	a5,80(sp)
   27b6c:	0007c703          	lbu	a4,0(a5)
   27b70:	02f00793          	addi	a5,zero,47
   27b74:	02f70e63          	beq	a4,a5,27bb0 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x1e0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   27b78:	03893703          	ld	a4,56(s2)
   27b7c:	04093783          	ld	a5,64(s2)
   27b80:	40e787b3          	sub	a5,a5,a4
   27b84:	4057d793          	srai	a5,a5,0x5
  else if (dir_index < include_directories.size())
   27b88:	0af4f263          	bgeu	s1,a5,27c2c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x25c>
    file_names.emplace_back(include_directories[dir_index] + file_name, mtime,
   27b8c:	05090913          	addi	s2,s2,80
	return *(this->_M_impl._M_start + __n);
   27b90:	00549593          	slli	a1,s1,0x5
   27b94:	05010613          	addi	a2,sp,80
   27b98:	00b705b3          	add	a1,a4,a1
   27b9c:	02010513          	addi	a0,sp,32
   27ba0:	0001b317          	auipc	t1,0x1b
   27ba4:	a2033303          	ld	t1,-1504(t1) # 425c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x17b80>
   27ba8:	000300e7          	jalr	ra,0(t1)
   27bac:	0240006f          	jal	zero,27bd0 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x200>
    file_names.emplace_back(move(file_name), mtime, length);
   27bb0:	04010693          	addi	a3,sp,64
   27bb4:	04810613          	addi	a2,sp,72
   27bb8:	05010593          	addi	a1,sp,80
   27bbc:	05090513          	addi	a0,s2,80
   27bc0:	0001b317          	auipc	t1,0x1b
   27bc4:	92033303          	ld	t1,-1760(t1) # 424e0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)@@Base+0x1698c>
   27bc8:	000300e7          	jalr	ra,0(t1)
   27bcc:	1100006f          	jal	zero,27cdc <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x30c>
    file_names.emplace_back(include_directories[dir_index] + file_name, mtime,
   27bd0:	04010693          	addi	a3,sp,64
   27bd4:	04810613          	addi	a2,sp,72
   27bd8:	02010593          	addi	a1,sp,32
   27bdc:	00090513          	addi	a0,s2,0
   27be0:	0001b317          	auipc	t1,0x1b
   27be4:	90033303          	ld	t1,-1792(t1) # 424e0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)@@Base+0x1698c>
   27be8:	000300e7          	jalr	ra,0(t1)
      { return _M_dataplus._M_p; }
   27bec:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   27bf0:	03010793          	addi	a5,sp,48
   27bf4:	00f50463          	beq	a0,a5,27bfc <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x22c>
   27bf8:	8b9ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
  return true;
   27bfc:	00100413          	addi	s0,zero,1
      { return _M_dataplus._M_p; }
   27c00:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   27c04:	06010793          	addi	a5,sp,96
   27c08:	00f50463          	beq	a0,a5,27c10 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x240>
   27c0c:	8a5ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
}
   27c10:	00040513          	addi	a0,s0,0
   27c14:	08813083          	ld	ra,136(sp)
   27c18:	08013403          	ld	s0,128(sp)
   27c1c:	07813483          	ld	s1,120(sp)
   27c20:	07013903          	ld	s2,112(sp)
   27c24:	09010113          	addi	sp,sp,144
   27c28:	00008067          	jalr	zero,0(ra)
                       std::to_string(dir_index));
   27c2c:	01000513          	addi	a0,zero,16
   27c30:	fa0ee0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   27c34:	00050913          	addi	s2,a0,0
   27c38:	00048593          	addi	a1,s1,0
   27c3c:	00010513          	addi	a0,sp,0
   27c40:	0001a317          	auipc	t1,0x1a
   27c44:	6b833303          	ld	t1,1720(t1) # 422f8 <std::__cxx11::to_string(unsigned long)@@Base+0x17fb8>
   27c48:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   27c4c:	00010617          	auipc	a2,0x10
   27c50:	e2c60613          	addi	a2,a2,-468 # 37a78 <typeinfo name for dwarf::expr_context+0x90>
   27c54:	00000593          	addi	a1,zero,0
   27c58:	00010513          	addi	a0,sp,0
   27c5c:	ee4ee0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   27c60:	00050593          	addi	a1,a0,0
   27c64:	02010413          	addi	s0,sp,32
   27c68:	00040513          	addi	a0,s0,0
   27c6c:	fa4ee0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   27c70:	00040593          	addi	a1,s0,0
   27c74:	00090513          	addi	a0,s2,0
   27c78:	8c9ee0ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   27c7c:	0001b797          	auipc	a5,0x1b
   27c80:	8d47b783          	ld	a5,-1836(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   27c84:	01078793          	addi	a5,a5,16
   27c88:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   27c8c:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   27c90:	03010793          	addi	a5,sp,48
   27c94:	00f50463          	beq	a0,a5,27c9c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x2cc>
   27c98:	819ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   27c9c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   27ca0:	01010793          	addi	a5,sp,16
   27ca4:	00f50463          	beq	a0,a5,27cac <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x2dc>
   27ca8:	809ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   27cac:	0001a617          	auipc	a2,0x1a
   27cb0:	6cc63603          	ld	a2,1740(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   27cb4:	0001a597          	auipc	a1,0x1a
   27cb8:	5f45b583          	ld	a1,1524(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   27cbc:	00090513          	addi	a0,s2,0
   27cc0:	9a1ee0ef          	jal	ra,16660 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   27cc4:	00050413          	addi	s0,a0,0
   27cc8:	0300006f          	jal	zero,27cf8 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x328>
    return false;
   27ccc:	00000413          	addi	s0,zero,0
   27cd0:	f31ff06f          	jal	zero,27c00 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x230>
    return true;
   27cd4:	00100413          	addi	s0,zero,1
   27cd8:	f29ff06f          	jal	zero,27c00 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x230>
  return true;
   27cdc:	00100413          	addi	s0,zero,1
   27ce0:	f21ff06f          	jal	zero,27c00 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x230>
   27ce4:	00050413          	addi	s0,a0,0
   27ce8:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   27cec:	03010793          	addi	a5,sp,48
   27cf0:	00f50463          	beq	a0,a5,27cf8 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x328>
   27cf4:	fbcee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   27cf8:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   27cfc:	06010793          	addi	a5,sp,96
   27d00:	00f50463          	beq	a0,a5,27d08 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x338>
   27d04:	facee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   27d08:	00040513          	addi	a0,s0,0
   27d0c:	985ee0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   27d10:	00050413          	addi	s0,a0,0
   27d14:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   27d18:	03010793          	addi	a5,sp,48
   27d1c:	00f50463          	beq	a0,a5,27d24 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x354>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   27d20:	f90ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   27d24:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   27d28:	01010793          	addi	a5,sp,16
   27d2c:	00f50463          	beq	a0,a5,27d34 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x364>
   27d30:	f80ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
                       std::to_string(dir_index));
   27d34:	00090513          	addi	a0,s2,0
   27d38:	f38ee0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   27d3c:	fbdff06f          	jal	zero,27cf8 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x328>
      { return _M_dataplus._M_p; }
   27d40:	00050413          	addi	s0,a0,0
   27d44:	fe1ff06f          	jal	zero,27d24 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x354>
   27d48:	00050413          	addi	s0,a0,0
   27d4c:	fe9ff06f          	jal	zero,27d34 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x364>

0000000000027d50 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
line_table::line_table(const shared_ptr<section> &sec, section_offset offset,
   27d50:	e2010113          	addi	sp,sp,-480
   27d54:	1c113c23          	sd	ra,472(sp)
   27d58:	1c813823          	sd	s0,464(sp)
   27d5c:	1c913423          	sd	s1,456(sp)
   27d60:	1d213023          	sd	s2,448(sp)
   27d64:	1b313c23          	sd	s3,440(sp)
   27d68:	1b413823          	sd	s4,432(sp)
   27d6c:	1b513423          	sd	s5,424(sp)
   27d70:	1b613023          	sd	s6,416(sp)
   27d74:	19713c23          	sd	s7,408(sp)
   27d78:	19813823          	sd	s8,400(sp)
   27d7c:	19913423          	sd	s9,392(sp)
   27d80:	19a13023          	sd	s10,384(sp)
   27d84:	17b13c23          	sd	s11,376(sp)
   27d88:	00050413          	addi	s0,a0,0
   27d8c:	00058913          	addi	s2,a1,0
   27d90:	00060a93          	addi	s5,a2,0
   27d94:	00068a13          	addi	s4,a3,0
   27d98:	00070493          	addi	s1,a4,0
   27d9c:	00078993          	addi	s3,a5,0
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   27da0:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   27da4:	0b000513          	addi	a0,zero,176
   27da8:	f18ee0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   27dac:	00052423          	sw	zero,8(a0)
   27db0:	00052623          	sw	zero,12(a0)
   27db4:	00052823          	sw	zero,16(a0)
   27db8:	00052a23          	sw	zero,20(a0)
   27dbc:	00052c23          	sw	zero,24(a0)
   27dc0:	00052e23          	sw	zero,28(a0)
   27dc4:	02053023          	sd	zero,32(a0)
   27dc8:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   27dcc:	00100793          	addi	a5,zero,1
   27dd0:	02f52823          	sw	a5,48(a0)
   27dd4:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   27dd8:	0001a797          	auipc	a5,0x1a
   27ddc:	5b87b783          	ld	a5,1464(a5) # 42390 <vtable for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x888>
   27de0:	01078793          	addi	a5,a5,16
   27de4:	00f53023          	sd	a5,0(a0)
      : _M_ptr(0), _M_refcount()
   27de8:	02053c23          	sd	zero,56(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   27dec:	04053023          	sd	zero,64(a0)
	: _M_start(), _M_finish(), _M_end_of_storage()
   27df0:	04053c23          	sd	zero,88(a0)
   27df4:	06053023          	sd	zero,96(a0)
   27df8:	06053423          	sd	zero,104(a0)
   27dfc:	06053823          	sd	zero,112(a0)
   27e00:	06053c23          	sd	zero,120(a0)
   27e04:	08053023          	sd	zero,128(a0)
   27e08:	08053423          	sd	zero,136(a0)
   27e0c:	08053823          	sd	zero,144(a0)
   27e10:	08053c23          	sd	zero,152(a0)
  impl() : last_file_name_end(0), file_names_complete(false){};
   27e14:	0a053023          	sd	zero,160(a0)
   27e18:	0a050423          	sb	zero,168(a0)
	  _M_pi = __pi;
   27e1c:	00a43423          	sd	a0,8(s0)
   27e20:	03850513          	addi	a0,a0,56
	  __p = __pi->_M_ptr();
   27e24:	00a43023          	sd	a0,0(s0)
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   27e28:	03010793          	addi	a5,sp,48
   27e2c:	02f13023          	sd	a5,32(sp)
      { _M_string_length = __length; }
   27e30:	02013423          	sd	zero,40(sp)
   27e34:	02010823          	sb	zero,48(sp)
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   27e38:	05010793          	addi	a5,sp,80
   27e3c:	04f13023          	sd	a5,64(sp)
      { _M_string_length = __length; }
   27e40:	04013423          	sd	zero,72(sp)
   27e44:	04010823          	sb	zero,80(sp)
      { return _M_string_length; }
   27e48:	0084b603          	ld	a2,8(s1)
  if (cu_comp_dir.empty() || cu_comp_dir.back() == '/')
   27e4c:	00060c63          	beq	a2,zero,27e64 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x114>
      { return _M_dataplus._M_p; }
   27e50:	0004b583          	ld	a1,0(s1)
   27e54:	00c587b3          	add	a5,a1,a2
   27e58:	fff7c703          	lbu	a4,-1(a5)
   27e5c:	02f00793          	addi	a5,zero,47
   27e60:	00f71a63          	bne	a4,a5,27e74 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x124>
	this->_M_assign(__str);
   27e64:	00048593          	addi	a1,s1,0
   27e68:	02010513          	addi	a0,sp,32
   27e6c:	d84ee0ef          	jal	ra,163f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   27e70:	0f00006f          	jal	zero,27f60 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x210>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   27e74:	15010793          	addi	a5,sp,336
   27e78:	14f13023          	sd	a5,320(sp)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   27e7c:	00000693          	addi	a3,zero,0
   27e80:	00c58633          	add	a2,a1,a2
   27e84:	14010513          	addi	a0,sp,320
   27e88:	0001a317          	auipc	t1,0x1a
   27e8c:	48033303          	ld	t1,1152(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17964>
   27e90:	000300e7          	jalr	ra,0(t1)
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
   27e94:	02f00713          	addi	a4,zero,47
   27e98:	00100693          	addi	a3,zero,1
   27e9c:	00000613          	addi	a2,zero,0
   27ea0:	14813583          	ld	a1,328(sp)
   27ea4:	14010513          	addi	a0,sp,320
   27ea8:	849ee0ef          	jal	ra,166f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)@plt>
   27eac:	0540006f          	jal	zero,27f00 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1b0>
      { return _M_dataplus._M_p; }
   27eb0:	00050493          	addi	s1,a0,0
   27eb4:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   27eb8:	15010793          	addi	a5,sp,336
   27ebc:	00f50463          	beq	a0,a5,27ec4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x174>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   27ec0:	df0ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   27ec4:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   27ec8:	05010793          	addi	a5,sp,80
   27ecc:	00f50463          	beq	a0,a5,27ed4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x184>
   27ed0:	de0ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   27ed4:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   27ed8:	03010793          	addi	a5,sp,48
   27edc:	00f50463          	beq	a0,a5,27ee4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x194>
   27ee0:	dd0ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   27ee4:	00843503          	ld	a0,8(s0)
   27ee8:	00050863          	beq	a0,zero,27ef8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1a8>
	  _M_pi->_M_release();
   27eec:	0001a317          	auipc	t1,0x1a
   27ef0:	4d433303          	ld	t1,1236(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   27ef4:	000300e7          	jalr	ra,0(t1)
   27ef8:	00048513          	addi	a0,s1,0
   27efc:	f94ee0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   27f00:	02013503          	ld	a0,32(sp)
   27f04:	14013783          	ld	a5,320(sp)
	if (__str._M_is_local())
   27f08:	15010713          	addi	a4,sp,336
   27f0c:	12e78463          	beq	a5,a4,28034 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2e4>
	    if (!_M_is_local())
   27f10:	03010713          	addi	a4,sp,48
   27f14:	00e51463          	bne	a0,a4,27f1c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1cc>
   27f18:	0100106f          	jal	zero,28f28 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11d8>
		    __capacity = _M_allocated_capacity;
   27f1c:	03013703          	ld	a4,48(sp)
      { _M_dataplus._M_p = __p; }
   27f20:	02f13023          	sd	a5,32(sp)
      { _M_string_length = __length; }
   27f24:	14813783          	ld	a5,328(sp)
   27f28:	02f13423          	sd	a5,40(sp)
      { _M_allocated_capacity = __capacity; }
   27f2c:	15013783          	ld	a5,336(sp)
   27f30:	02f13823          	sd	a5,48(sp)
	    if (__data)
   27f34:	00051463          	bne	a0,zero,27f3c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1ec>
   27f38:	0040106f          	jal	zero,28f3c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11ec>
      { _M_dataplus._M_p = __p; }
   27f3c:	14a13023          	sd	a0,320(sp)
      { _M_allocated_capacity = __capacity; }
   27f40:	14e13823          	sd	a4,336(sp)
      { _M_string_length = __length; }
   27f44:	14013423          	sd	zero,328(sp)
      { return _M_dataplus._M_p; }
   27f48:	14013783          	ld	a5,320(sp)
   27f4c:	00078023          	sb	zero,0(a5)
   27f50:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   27f54:	15010793          	addi	a5,sp,336
   27f58:	00f50463          	beq	a0,a5,27f60 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x210>
   27f5c:	d54ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   27f60:	00093b03          	ld	s6,0(s2)
      : _M_pi(__r._M_pi)
   27f64:	00893483          	ld	s1,8(s2)
	if (_M_pi != nullptr)
   27f68:	00049463          	bne	s1,zero,27f70 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x220>
   27f6c:	7950006f          	jal	zero,28f00 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11b0>
    if (__is_single_threaded())
   27f70:	0001a797          	auipc	a5,0x1a
   27f74:	5087b783          	ld	a5,1288(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   27f78:	0007c783          	lbu	a5,0(a5)
   27f7c:	0e078c63          	beq	a5,zero,28074 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x324>
  { *__mem += __val; }
   27f80:	0304a783          	lw	a5,48(s1)
   27f84:	0017879b          	addiw	a5,a5,1
   27f88:	02f4a823          	sw	a5,48(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   27f8c:	01613423          	sd	s6,8(sp)
      : _M_pi(__r._M_pi)
   27f90:	00913823          	sd	s1,16(sp)
    if (__is_single_threaded())
   27f94:	0001a797          	auipc	a5,0x1a
   27f98:	4e47b783          	ld	a5,1252(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   27f9c:	0007c783          	lbu	a5,0(a5)
   27fa0:	0e078263          	beq	a5,zero,28084 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x334>
  { *__mem += __val; }
   27fa4:	0304a783          	lw	a5,48(s1)
   27fa8:	0017879b          	addiw	a5,a5,1
   27fac:	02f4a823          	sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   27fb0:	008b3783          	ld	a5,8(s6)
   27fb4:	015787b3          	add	a5,a5,s5
   27fb8:	00f13c23          	sd	a5,24(sp)
    if (__is_single_threaded())
   27fbc:	0001a797          	auipc	a5,0x1a
   27fc0:	4bc7b783          	ld	a5,1212(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   27fc4:	0007c783          	lbu	a5,0(a5)
   27fc8:	0c078663          	beq	a5,zero,28094 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x344>
    _Atomic_word __result = *__mem;
   27fcc:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   27fd0:	fff5079b          	addiw	a5,a0,-1
   27fd4:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   27fd8:	00100793          	addi	a5,zero,1
   27fdc:	00f50463          	beq	a0,a5,27fe4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x294>
   27fe0:	7350006f          	jal	zero,28f14 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11c4>
	_M_dispose();
   27fe4:	0004b783          	ld	a5,0(s1)
   27fe8:	0107b783          	ld	a5,16(a5)
   27fec:	00048513          	addi	a0,s1,0
   27ff0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   27ff4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   27ff8:	0001a797          	auipc	a5,0x1a
   27ffc:	4807b783          	ld	a5,1152(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   28000:	0007c783          	lbu	a5,0(a5)
   28004:	0a078063          	beq	a5,zero,280a4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x354>
    _Atomic_word __result = *__mem;
   28008:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   2800c:	fff5079b          	addiw	a5,a0,-1
   28010:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   28014:	00100793          	addi	a5,zero,1
   28018:	00f50463          	beq	a0,a5,28020 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2d0>
   2801c:	6f90006f          	jal	zero,28f14 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11c4>
	    _M_destroy();
   28020:	0004b783          	ld	a5,0(s1)
   28024:	0187b783          	ld	a5,24(a5)
   28028:	00048513          	addi	a0,s1,0
   2802c:	000780e7          	jalr	ra,0(a5)
   28030:	6e50006f          	jal	zero,28f14 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11c4>
      { return _M_string_length; }
   28034:	14813603          	ld	a2,328(sp)
		if (__str.size())
   28038:	00061e63          	bne	a2,zero,28054 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x304>
      { return _M_string_length; }
   2803c:	14813703          	ld	a4,328(sp)
      { _M_string_length = __length; }
   28040:	02e13423          	sd	a4,40(sp)
   28044:	02013783          	ld	a5,32(sp)
   28048:	00e787b3          	add	a5,a5,a4
   2804c:	00078023          	sb	zero,0(a5)
      }
   28050:	ef5ff06f          	jal	zero,27f44 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1f4>
	if (__n == 1)
   28054:	00100793          	addi	a5,zero,1
   28058:	00f60863          	beq	a2,a5,28068 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x318>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2805c:	15010593          	addi	a1,sp,336
   28060:	cf0ee0ef          	jal	ra,16550 <memcpy@plt>
   28064:	fd9ff06f          	jal	zero,2803c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2ec>
	__c1 = __c2;
   28068:	15014783          	lbu	a5,336(sp)
   2806c:	00f50023          	sb	a5,0(a0)
      }
   28070:	fcdff06f          	jal	zero,2803c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2ec>
      __atomic_add(__mem, __val);
   28074:	00100593          	addi	a1,zero,1
   28078:	03048513          	addi	a0,s1,48
   2807c:	a84ee0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   28080:	f0dff06f          	jal	zero,27f8c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x23c>
   28084:	00100593          	addi	a1,zero,1
   28088:	03048513          	addi	a0,s1,48
   2808c:	a74ee0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   28090:	f21ff06f          	jal	zero,27fb0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x260>
      return __exchange_and_add(__mem, __val);
   28094:	fff00593          	addi	a1,zero,-1
   28098:	03048513          	addi	a0,s1,48
   2809c:	a94ee0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   280a0:	f39ff06f          	jal	zero,27fd8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x288>
   280a4:	fff00593          	addi	a1,zero,-1
   280a8:	03448513          	addi	a0,s1,52
   280ac:	a84ee0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   280b0:	f65ff06f          	jal	zero,28014 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2c4>
      : _M_ptr(__r._M_ptr), _M_refcount()
   280b4:	16013703          	ld	a4,352(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   280b8:	16813783          	ld	a5,360(sp)
	__r._M_pi = _M_pi;
   280bc:	16013423          	sd	zero,360(sp)
	__r._M_ptr = nullptr;
   280c0:	16013023          	sd	zero,352(sp)
   280c4:	00e4b023          	sd	a4,0(s1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   280c8:	0084b903          	ld	s2,8(s1)
	__r._M_pi = _M_pi;
   280cc:	00f4b423          	sd	a5,8(s1)
	if (_M_pi != nullptr)
   280d0:	0a090a63          	beq	s2,zero,28184 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x434>
    if (__is_single_threaded())
   280d4:	0001a797          	auipc	a5,0x1a
   280d8:	3a47b783          	ld	a5,932(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   280dc:	0007c783          	lbu	a5,0(a5)
   280e0:	06078263          	beq	a5,zero,28144 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3f4>
    _Atomic_word __result = *__mem;
   280e4:	03092783          	lw	a5,48(s2)
    *__mem += __val;
   280e8:	fff7871b          	addiw	a4,a5,-1
   280ec:	02e92823          	sw	a4,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   280f0:	00100713          	addi	a4,zero,1
   280f4:	08e79863          	bne	a5,a4,28184 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x434>
	_M_dispose();
   280f8:	00093783          	ld	a5,0(s2)
   280fc:	0107b783          	ld	a5,16(a5)
   28100:	00090513          	addi	a0,s2,0
   28104:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   28108:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2810c:	0001a797          	auipc	a5,0x1a
   28110:	36c7b783          	ld	a5,876(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   28114:	0007c783          	lbu	a5,0(a5)
   28118:	10078a63          	beq	a5,zero,2822c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4dc>
    _Atomic_word __result = *__mem;
   2811c:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   28120:	fff5079b          	addiw	a5,a0,-1
   28124:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   28128:	00100793          	addi	a5,zero,1
   2812c:	02f51663          	bne	a0,a5,28158 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x408>
	    _M_destroy();
   28130:	00093783          	ld	a5,0(s2)
   28134:	0187b783          	ld	a5,24(a5)
   28138:	00090513          	addi	a0,s2,0
   2813c:	000780e7          	jalr	ra,0(a5)
   28140:	0180006f          	jal	zero,28158 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x408>
      return __exchange_and_add(__mem, __val);
   28144:	fff00593          	addi	a1,zero,-1
   28148:	03090513          	addi	a0,s2,48
   2814c:	9e4ee0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   28150:	00100793          	addi	a5,zero,1
   28154:	faf502e3          	beq	a0,a5,280f8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3a8>
	if (_M_pi != nullptr)
   28158:	16813483          	ld	s1,360(sp)
   2815c:	02048463          	beq	s1,zero,28184 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x434>
    if (__is_single_threaded())
   28160:	0001a797          	auipc	a5,0x1a
   28164:	3187b783          	ld	a5,792(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   28168:	0007c783          	lbu	a5,0(a5)
   2816c:	0c078863          	beq	a5,zero,2823c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4ec>
    _Atomic_word __result = *__mem;
   28170:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   28174:	fff5079b          	addiw	a5,a0,-1
   28178:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2817c:	00100793          	addi	a5,zero,1
   28180:	0cf50663          	beq	a0,a5,2824c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4fc>
      { return _M_ptr; }
   28184:	00043783          	ld	a5,0(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   28188:	0007b903          	ld	s2,0(a5)
      : _M_pi(__r._M_pi)
   2818c:	0087b483          	ld	s1,8(a5)
	if (_M_pi != nullptr)
   28190:	54048ae3          	beq	s1,zero,28ee4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1194>
    if (__is_single_threaded())
   28194:	0001a797          	auipc	a5,0x1a
   28198:	2e47b783          	ld	a5,740(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2819c:	0007c783          	lbu	a5,0(a5)
   281a0:	10078463          	beq	a5,zero,282a8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x558>
  { *__mem += __val; }
   281a4:	0304a783          	lw	a5,48(s1)
   281a8:	0017879b          	addiw	a5,a5,1
   281ac:	02f4a823          	sw	a5,48(s1)
   281b0:	0304a783          	lw	a5,48(s1)
   281b4:	0017879b          	addiw	a5,a5,1
   281b8:	02f4a823          	sw	a5,48(s1)
   281bc:	00893a83          	ld	s5,8(s2)
   281c0:	01213423          	sd	s2,8(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   281c4:	01013903          	ld	s2,16(sp)
	__r._M_pi = _M_pi;
   281c8:	00913823          	sd	s1,16(sp)
	if (_M_pi != nullptr)
   281cc:	500908e3          	beq	s2,zero,28edc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x118c>
    if (__is_single_threaded())
   281d0:	0001a797          	auipc	a5,0x1a
   281d4:	2a87b783          	ld	a5,680(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   281d8:	0007c783          	lbu	a5,0(a5)
   281dc:	0e078c63          	beq	a5,zero,282d4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x584>
    _Atomic_word __result = *__mem;
   281e0:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   281e4:	fff5079b          	addiw	a5,a0,-1
   281e8:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   281ec:	00100793          	addi	a5,zero,1
   281f0:	0ef50a63          	beq	a0,a5,282e4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x594>
struct cursor {
   281f4:	01513c23          	sd	s5,24(sp)
	if (_M_pi != nullptr)
   281f8:	02048463          	beq	s1,zero,28220 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4d0>
    if (__is_single_threaded())
   281fc:	0001a797          	auipc	a5,0x1a
   28200:	27c7b783          	ld	a5,636(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   28204:	0007c783          	lbu	a5,0(a5)
   28208:	12078c63          	beq	a5,zero,28340 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5f0>
    _Atomic_word __result = *__mem;
   2820c:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   28210:	fff5079b          	addiw	a5,a0,-1
   28214:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   28218:	00100793          	addi	a5,zero,1
   2821c:	12f50a63          	beq	a0,a5,28350 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x600>
  cur.skip_initial_length();
   28220:	00810513          	addi	a0,sp,8
   28224:	f40f40ef          	jal	ra,1c964 <dwarf::cursor::skip_initial_length()>
   28228:	1840006f          	jal	zero,283ac <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x65c>
      return __exchange_and_add(__mem, __val);
   2822c:	fff00593          	addi	a1,zero,-1
   28230:	03490513          	addi	a0,s2,52
   28234:	8fcee0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   28238:	ef1ff06f          	jal	zero,28128 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3d8>
   2823c:	fff00593          	addi	a1,zero,-1
   28240:	03048513          	addi	a0,s1,48
   28244:	8ecee0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   28248:	f35ff06f          	jal	zero,2817c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x42c>
	_M_dispose();
   2824c:	0004b783          	ld	a5,0(s1)
   28250:	0107b783          	ld	a5,16(a5)
   28254:	00048513          	addi	a0,s1,0
   28258:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2825c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   28260:	0001a797          	auipc	a5,0x1a
   28264:	2187b783          	ld	a5,536(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   28268:	0007c783          	lbu	a5,0(a5)
   2826c:	02078663          	beq	a5,zero,28298 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x548>
    _Atomic_word __result = *__mem;
   28270:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   28274:	fff5079b          	addiw	a5,a0,-1
   28278:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2827c:	00100793          	addi	a5,zero,1
   28280:	f0f512e3          	bne	a0,a5,28184 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x434>
	    _M_destroy();
   28284:	0004b783          	ld	a5,0(s1)
   28288:	0187b783          	ld	a5,24(a5)
   2828c:	00048513          	addi	a0,s1,0
   28290:	000780e7          	jalr	ra,0(a5)
   28294:	ef1ff06f          	jal	zero,28184 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x434>
      return __exchange_and_add(__mem, __val);
   28298:	fff00593          	addi	a1,zero,-1
   2829c:	03448513          	addi	a0,s1,52
   282a0:	890ee0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   282a4:	fd9ff06f          	jal	zero,2827c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x52c>
      __atomic_add(__mem, __val);
   282a8:	00100593          	addi	a1,zero,1
   282ac:	03048513          	addi	a0,s1,48
   282b0:	850ee0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
    if (__is_single_threaded())
   282b4:	0001a797          	auipc	a5,0x1a
   282b8:	1c47b783          	ld	a5,452(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   282bc:	0007c783          	lbu	a5,0(a5)
   282c0:	ee0798e3          	bne	a5,zero,281b0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x460>
      __atomic_add(__mem, __val);
   282c4:	00100593          	addi	a1,zero,1
   282c8:	03048513          	addi	a0,s1,48
   282cc:	834ee0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   282d0:	eedff06f          	jal	zero,281bc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x46c>
      return __exchange_and_add(__mem, __val);
   282d4:	fff00593          	addi	a1,zero,-1
   282d8:	03090513          	addi	a0,s2,48
   282dc:	854ee0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   282e0:	f0dff06f          	jal	zero,281ec <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x49c>
	_M_dispose();
   282e4:	00093783          	ld	a5,0(s2)
   282e8:	0107b783          	ld	a5,16(a5)
   282ec:	00090513          	addi	a0,s2,0
   282f0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   282f4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   282f8:	0001a797          	auipc	a5,0x1a
   282fc:	1807b783          	ld	a5,384(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   28300:	0007c783          	lbu	a5,0(a5)
   28304:	02078663          	beq	a5,zero,28330 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5e0>
    _Atomic_word __result = *__mem;
   28308:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   2830c:	fff5079b          	addiw	a5,a0,-1
   28310:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   28314:	00100793          	addi	a5,zero,1
   28318:	ecf51ee3          	bne	a0,a5,281f4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4a4>
	    _M_destroy();
   2831c:	00093783          	ld	a5,0(s2)
   28320:	0187b783          	ld	a5,24(a5)
   28324:	00090513          	addi	a0,s2,0
   28328:	000780e7          	jalr	ra,0(a5)
   2832c:	ec9ff06f          	jal	zero,281f4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4a4>
      return __exchange_and_add(__mem, __val);
   28330:	fff00593          	addi	a1,zero,-1
   28334:	03490513          	addi	a0,s2,52
   28338:	ff9ed0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2833c:	fd9ff06f          	jal	zero,28314 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5c4>
   28340:	fff00593          	addi	a1,zero,-1
   28344:	03048513          	addi	a0,s1,48
   28348:	fe9ed0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2834c:	ecdff06f          	jal	zero,28218 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4c8>
	_M_dispose();
   28350:	0004b783          	ld	a5,0(s1)
   28354:	0107b783          	ld	a5,16(a5)
   28358:	00048513          	addi	a0,s1,0
   2835c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   28360:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   28364:	0001a797          	auipc	a5,0x1a
   28368:	1147b783          	ld	a5,276(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2836c:	0007c783          	lbu	a5,0(a5)
   28370:	02078663          	beq	a5,zero,2839c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x64c>
    _Atomic_word __result = *__mem;
   28374:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   28378:	fff5079b          	addiw	a5,a0,-1
   2837c:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   28380:	00100793          	addi	a5,zero,1
   28384:	e8f51ee3          	bne	a0,a5,28220 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4d0>
	    _M_destroy();
   28388:	0004b783          	ld	a5,0(s1)
   2838c:	0187b783          	ld	a5,24(a5)
   28390:	00048513          	addi	a0,s1,0
   28394:	000780e7          	jalr	ra,0(a5)
   28398:	e89ff06f          	jal	zero,28220 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4d0>
      return __exchange_and_add(__mem, __val);
   2839c:	fff00593          	addi	a1,zero,-1
   283a0:	03448513          	addi	a0,s1,52
   283a4:	f8ded0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   283a8:	fd9ff06f          	jal	zero,28380 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x630>
      { return _M_ptr; }
   283ac:	00043783          	ld	a5,0(s0)
   283b0:	0007b783          	ld	a5,0(a5)
  m->sec->addr_size = cu_addr_size;
   283b4:	0347a023          	sw	s4,32(a5)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   283b8:	00813783          	ld	a5,8(sp)
   283bc:	0107b703          	ld	a4,16(a5)
   283c0:	01813783          	ld	a5,24(sp)
   283c4:	40f70633          	sub	a2,a4,a5
   283c8:	00100693          	addi	a3,zero,1
   283cc:	00c6f463          	bgeu	a3,a2,283d4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x684>
   283d0:	00e7e663          	bltu	a5,a4,283dc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x68c>
      underflow();
   283d4:	00810513          	addi	a0,sp,8
   283d8:	f24f40ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   283dc:	01813703          	ld	a4,24(sp)
    if (sec->ord == byte_order::lsb) {
   283e0:	00813783          	ld	a5,8(sp)
   283e4:	01c7a783          	lw	a5,28(a5)
   283e8:	04079263          	bne	a5,zero,2842c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6dc>
        val |= ((uint64_t)p[i]) << (i * 8);
   283ec:	00174783          	lbu	a5,1(a4)
   283f0:	00879793          	slli	a5,a5,0x8
   283f4:	00074683          	lbu	a3,0(a4)
   283f8:	00d7e7b3          	or	a5,a5,a3
    pos += sizeof(T);
   283fc:	00270713          	addi	a4,a4,2
   28400:	00e13c23          	sd	a4,24(sp)
    return (T)val;
   28404:	03079493          	slli	s1,a5,0x30
   28408:	0304d493          	srli	s1,s1,0x30
  if (version < 2 || version > 4)
   2840c:	ffe7879b          	addiw	a5,a5,-2
   28410:	03079793          	slli	a5,a5,0x30
   28414:	0307d793          	srli	a5,a5,0x30
   28418:	00200713          	addi	a4,zero,2
   2841c:	02f76263          	bltu	a4,a5,28440 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6f0>
  section_length header_length = cur.offset();
   28420:	00810513          	addi	a0,sp,8
   28424:	e65f40ef          	jal	ra,1d288 <dwarf::cursor::offset()>
   28428:	0bc0006f          	jal	zero,284e4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x794>
        val = (val << 8) | (uint64_t)p[i];
   2842c:	00074783          	lbu	a5,0(a4)
   28430:	00879793          	slli	a5,a5,0x8
   28434:	00174683          	lbu	a3,1(a4)
   28438:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   2843c:	fc1ff06f          	jal	zero,283fc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6ac>
                       std::to_string(version));
   28440:	01000513          	addi	a0,zero,16
   28444:	f8ded0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   28448:	00050913          	addi	s2,a0,0
   2844c:	00048593          	addi	a1,s1,0
   28450:	14010493          	addi	s1,sp,320
   28454:	00048513          	addi	a0,s1,0
   28458:	0001a317          	auipc	t1,0x1a
   2845c:	03033303          	ld	t1,48(t1) # 42488 <std::__cxx11::to_string(int)@@Base+0x27684>
   28460:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   28464:	0000f617          	auipc	a2,0xf
   28468:	64460613          	addi	a2,a2,1604 # 37aa8 <typeinfo name for dwarf::expr_context+0xc0>
   2846c:	00000593          	addi	a1,zero,0
   28470:	00048513          	addi	a0,s1,0
   28474:	ecded0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   28478:	00050593          	addi	a1,a0,0
   2847c:	12010493          	addi	s1,sp,288
   28480:	00048513          	addi	a0,s1,0
   28484:	f8ded0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   28488:	00048593          	addi	a1,s1,0
   2848c:	00090513          	addi	a0,s2,0
   28490:	8b0ee0ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   28494:	0001a797          	auipc	a5,0x1a
   28498:	0bc7b783          	ld	a5,188(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   2849c:	01078793          	addi	a5,a5,16
   284a0:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   284a4:	12013503          	ld	a0,288(sp)
	if (!_M_is_local())
   284a8:	13010793          	addi	a5,sp,304
   284ac:	00f50463          	beq	a0,a5,284b4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x764>
   284b0:	800ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   284b4:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   284b8:	15010793          	addi	a5,sp,336
   284bc:	00f50463          	beq	a0,a5,284c4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x774>
   284c0:	ff1ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   284c4:	0001a617          	auipc	a2,0x1a
   284c8:	eb463603          	ld	a2,-332(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   284cc:	0001a597          	auipc	a1,0x1a
   284d0:	ddc5b583          	ld	a1,-548(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   284d4:	00090513          	addi	a0,s2,0
   284d8:	988ee0ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   284dc:	00050493          	addi	s1,a0,0
   284e0:	6ec0006f          	jal	zero,28bcc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe7c>
  section_offset get_section_offset() const { return pos - sec->begin; }
   284e4:	01813703          	ld	a4,24(sp)
      { return _M_ptr; }
   284e8:	00813683          	ld	a3,8(sp)
   284ec:	00043903          	ld	s2,0(s0)
   284f0:	0086b783          	ld	a5,8(a3)
   284f4:	40f707b3          	sub	a5,a4,a5
  m->program_offset = cur.get_section_offset() + header_length;
   284f8:	00a787b3          	add	a5,a5,a0
   284fc:	00f93823          	sd	a5,16(s2)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   28500:	0106b783          	ld	a5,16(a3)
   28504:	00f76663          	bltu	a4,a5,28510 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7c0>
      underflow();
   28508:	00810513          	addi	a0,sp,8
   2850c:	df0f40ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   28510:	01813783          	ld	a5,24(sp)
   28514:	00813703          	ld	a4,8(sp)
    if (sec->ord == byte_order::lsb) {
   28518:	01c72683          	lw	a3,28(a4)
   2851c:	16068ee3          	beq	a3,zero,28e98 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1148>
        val = (val << 8) | (uint64_t)p[i];
   28520:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   28524:	1790006f          	jal	zero,28e9c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x114c>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   28528:	01073703          	ld	a4,16(a4)
   2852c:	00e7e663          	bltu	a5,a4,28538 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7e8>
      underflow();
   28530:	00810513          	addi	a0,sp,8
   28534:	dc8f40ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   28538:	01813783          	ld	a5,24(sp)
    if (sec->ord == byte_order::lsb) {
   2853c:	00813703          	ld	a4,8(sp)
   28540:	01c72703          	lw	a4,28(a4)
   28544:	10070ee3          	beq	a4,zero,28e60 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1110>
        val = (val << 8) | (uint64_t)p[i];
   28548:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   2854c:	1190006f          	jal	zero,28e64 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1114>
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   28550:	0001a797          	auipc	a5,0x1a
   28554:	0007b783          	ld	a5,0(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   28558:	01078793          	addi	a5,a5,16
   2855c:	00f93023          	sd	a5,0(s2)
                       " be 0 in line number table");
   28560:	0001a617          	auipc	a2,0x1a
   28564:	e1863603          	ld	a2,-488(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   28568:	0001a597          	auipc	a1,0x1a
   2856c:	d405b583          	ld	a1,-704(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   28570:	00090513          	addi	a0,s2,0
   28574:	8ecee0ef          	jal	ra,16660 <__cxa_throw@plt>
    const unsigned char *p = (const unsigned char *)pos;
   28578:	01813783          	ld	a5,24(sp)
   2857c:	00813683          	ld	a3,8(sp)
    if (sec->ord == byte_order::lsb) {
   28580:	01c6a703          	lw	a4,28(a3)
   28584:	0a0708e3          	beq	a4,zero,28e34 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10e4>
        val = (val << 8) | (uint64_t)p[i];
   28588:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   2858c:	0ad0006f          	jal	zero,28e38 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10e8>
    const unsigned char *p = (const unsigned char *)pos;
   28590:	01813783          	ld	a5,24(sp)
   28594:	00813703          	ld	a4,8(sp)
    if (sec->ord == byte_order::lsb) {
   28598:	01c72683          	lw	a3,28(a4)
   2859c:	060688e3          	beq	a3,zero,28e0c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10bc>
        val = (val << 8) | (uint64_t)p[i];
   285a0:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   285a4:	06d0006f          	jal	zero,28e10 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10c0>
    const unsigned char *p = (const unsigned char *)pos;
   285a8:	01813783          	ld	a5,24(sp)
   285ac:	00813703          	ld	a4,8(sp)
    if (sec->ord == byte_order::lsb) {
   285b0:	01c72683          	lw	a3,28(a4)
   285b4:	020684e3          	beq	a3,zero,28ddc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x108c>
        val = (val << 8) | (uint64_t)p[i];
   285b8:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   285bc:	0250006f          	jal	zero,28de0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1090>
    throw format_error("line_range cannot be 0 in line number table");
   285c0:	01000513          	addi	a0,zero,16
   285c4:	e0ded0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   285c8:	00050913          	addi	s2,a0,0
   285cc:	0000f597          	auipc	a1,0xf
   285d0:	54c58593          	addi	a1,a1,1356 # 37b18 <typeinfo name for dwarf::expr_context+0x130>
   285d4:	93cee0ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   285d8:	0001a797          	auipc	a5,0x1a
   285dc:	f787b783          	ld	a5,-136(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   285e0:	01078793          	addi	a5,a5,16
   285e4:	00f93023          	sd	a5,0(s2)
   285e8:	0001a617          	auipc	a2,0x1a
   285ec:	d9063603          	ld	a2,-624(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   285f0:	0001a597          	auipc	a1,0x1a
   285f4:	cb85b583          	ld	a1,-840(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   285f8:	00090513          	addi	a0,s2,0
   285fc:	864ee0ef          	jal	ra,16660 <__cxa_throw@plt>
    const unsigned char *p = (const unsigned char *)pos;
   28600:	01813783          	ld	a5,24(sp)
    if (sec->ord == byte_order::lsb) {
   28604:	00813703          	ld	a4,8(sp)
   28608:	01c72703          	lw	a4,28(a4)
   2860c:	76070663          	beq	a4,zero,28d78 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1028>
        val = (val << 8) | (uint64_t)p[i];
   28610:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   28614:	7680006f          	jal	zero,28d7c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x102c>
	  _M_default_append(__new_size - size());
   28618:	40b785b3          	sub	a1,a5,a1
   2861c:	02050513          	addi	a0,a0,32
   28620:	0001a317          	auipc	t1,0x1a
   28624:	ea833303          	ld	t1,-344(t1) # 424c8 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)@@Base+0x17c98>
   28628:	000300e7          	jalr	ra,0(t1)
   2862c:	7840006f          	jal	zero,28db0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1060>
    const unsigned char *p = (const unsigned char *)pos;
   28630:	01813683          	ld	a3,24(sp)
    if (sec->ord == byte_order::lsb) {
   28634:	00813783          	ld	a5,8(sp)
   28638:	01c7a783          	lw	a5,28(a5)
   2863c:	6e078063          	beq	a5,zero,28d1c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xfcc>
        val = (val << 8) | (uint64_t)p[i];
   28640:	0006c703          	lbu	a4,0(a3)
      for (unsigned i = 0; i < sizeof(T); i++)
   28644:	6dc0006f          	jal	zero,28d20 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xfd0>
                         std::to_string(i) + ", got " + std::to_string(length));
   28648:	01000513          	addi	a0,zero,16
   2864c:	d85ed0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   28650:	00050993          	addi	s3,a0,0
      throw format_error("expected " + std::to_string(opcode_lengths[i]) +
   28654:	000b0593          	addi	a1,s6,0
   28658:	10010a13          	addi	s4,sp,256
   2865c:	000a0513          	addi	a0,s4,0
   28660:	0001a317          	auipc	t1,0x1a
   28664:	e2833303          	ld	t1,-472(t1) # 42488 <std::__cxx11::to_string(int)@@Base+0x27684>
   28668:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   2866c:	0000f617          	auipc	a2,0xf
   28670:	4dc60613          	addi	a2,a2,1244 # 37b48 <typeinfo name for dwarf::expr_context+0x160>
   28674:	00000593          	addi	a1,zero,0
   28678:	000a0513          	addi	a0,s4,0
   2867c:	cc5ed0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   28680:	00050593          	addi	a1,a0,0
   28684:	0e010a13          	addi	s4,sp,224
   28688:	000a0513          	addi	a0,s4,0
   2868c:	d85ed0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   28690:	0000f597          	auipc	a1,0xf
   28694:	4c858593          	addi	a1,a1,1224 # 37b58 <typeinfo name for dwarf::expr_context+0x170>
   28698:	000a0513          	addi	a0,s4,0
   2869c:	8a4ee0ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   286a0:	00050593          	addi	a1,a0,0
   286a4:	0c010a13          	addi	s4,sp,192
   286a8:	000a0513          	addi	a0,s4,0
   286ac:	d65ed0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                         std::to_string(i) + ", got " + std::to_string(length));
   286b0:	0009059b          	addiw	a1,s2,0
   286b4:	12010913          	addi	s2,sp,288
   286b8:	00090513          	addi	a0,s2,0
   286bc:	0001a317          	auipc	t1,0x1a
   286c0:	e2c33303          	ld	t1,-468(t1) # 424e8 <std::__cxx11::to_string(unsigned int)@@Base+0x17e88>
   286c4:	000300e7          	jalr	ra,0(t1)
                         " arguments for line number opcode " +
   286c8:	00090613          	addi	a2,s2,0
   286cc:	000a0593          	addi	a1,s4,0
   286d0:	0a010513          	addi	a0,sp,160
   286d4:	0001a317          	auipc	t1,0x1a
   286d8:	ce433303          	ld	t1,-796(t1) # 423b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17ce0>
   286dc:	000300e7          	jalr	ra,0(t1)
   286e0:	0000f597          	auipc	a1,0xf
   286e4:	4a058593          	addi	a1,a1,1184 # 37b80 <typeinfo name for dwarf::expr_context+0x198>
   286e8:	0a010513          	addi	a0,sp,160
   286ec:	854ee0ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   286f0:	00050593          	addi	a1,a0,0
   286f4:	08010913          	addi	s2,sp,128
   286f8:	00090513          	addi	a0,s2,0
   286fc:	d15ed0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                         std::to_string(i) + ", got " + std::to_string(length));
   28700:	00048593          	addi	a1,s1,0
   28704:	14010493          	addi	s1,sp,320
   28708:	00048513          	addi	a0,s1,0
   2870c:	0001a317          	auipc	t1,0x1a
   28710:	d7c33303          	ld	t1,-644(t1) # 42488 <std::__cxx11::to_string(int)@@Base+0x27684>
   28714:	000300e7          	jalr	ra,0(t1)
   28718:	00048613          	addi	a2,s1,0
   2871c:	00090593          	addi	a1,s2,0
   28720:	06010513          	addi	a0,sp,96
   28724:	0001a317          	auipc	t1,0x1a
   28728:	c9433303          	ld	t1,-876(t1) # 423b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17ce0>
   2872c:	000300e7          	jalr	ra,0(t1)
      : std::runtime_error(what_arg) {}
   28730:	06010593          	addi	a1,sp,96
   28734:	00098513          	addi	a0,s3,0
   28738:	e09ed0ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2873c:	0001a797          	auipc	a5,0x1a
   28740:	e147b783          	ld	a5,-492(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   28744:	01078793          	addi	a5,a5,16
   28748:	00f9b023          	sd	a5,0(s3)
      { return _M_dataplus._M_p; }
   2874c:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   28750:	07010793          	addi	a5,sp,112
   28754:	00f50463          	beq	a0,a5,2875c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa0c>
   28758:	d59ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2875c:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   28760:	15010793          	addi	a5,sp,336
   28764:	00f50463          	beq	a0,a5,2876c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa1c>
   28768:	d49ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2876c:	08013503          	ld	a0,128(sp)
	if (!_M_is_local())
   28770:	09010793          	addi	a5,sp,144
   28774:	00f50463          	beq	a0,a5,2877c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa2c>
   28778:	d39ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2877c:	0a013503          	ld	a0,160(sp)
	if (!_M_is_local())
   28780:	0b010793          	addi	a5,sp,176
   28784:	00f50463          	beq	a0,a5,2878c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa3c>
   28788:	d29ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2878c:	12013503          	ld	a0,288(sp)
	if (!_M_is_local())
   28790:	13010793          	addi	a5,sp,304
   28794:	00f50463          	beq	a0,a5,2879c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa4c>
   28798:	d19ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2879c:	0c013503          	ld	a0,192(sp)
	if (!_M_is_local())
   287a0:	0d010793          	addi	a5,sp,208
   287a4:	00f50463          	beq	a0,a5,287ac <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa5c>
   287a8:	d09ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   287ac:	0e013503          	ld	a0,224(sp)
	if (!_M_is_local())
   287b0:	0f010793          	addi	a5,sp,240
   287b4:	00f50463          	beq	a0,a5,287bc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa6c>
   287b8:	cf9ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   287bc:	10013503          	ld	a0,256(sp)
	if (!_M_is_local())
   287c0:	11010793          	addi	a5,sp,272
   287c4:	00f50463          	beq	a0,a5,287cc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa7c>
   287c8:	ce9ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   287cc:	0001a617          	auipc	a2,0x1a
   287d0:	bac63603          	ld	a2,-1108(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   287d4:	0001a597          	auipc	a1,0x1a
   287d8:	ad45b583          	ld	a1,-1324(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   287dc:	00098513          	addi	a0,s3,0
   287e0:	e81ed0ef          	jal	ra,16660 <__cxa_throw@plt>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   287e4:	11010793          	addi	a5,sp,272
   287e8:	10f13023          	sd	a5,256(sp)
      { _M_string_length = __length; }
   287ec:	10013423          	sd	zero,264(sp)
	__c1 = __c2;
   287f0:	10010823          	sb	zero,272(sp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   287f4:	0404b503          	ld	a0,64(s1)
   287f8:	0484b783          	ld	a5,72(s1)
   287fc:	04f50e63          	beq	a0,a5,28858 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb08>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28800:	01050793          	addi	a5,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   28804:	00f53023          	sd	a5,0(a0)
      { return _M_dataplus._M_p; }
   28808:	02013583          	ld	a1,32(sp)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   2880c:	00000693          	addi	a3,zero,0
   28810:	02813603          	ld	a2,40(sp)
   28814:	00c58633          	add	a2,a1,a2
   28818:	0001a317          	auipc	t1,0x1a
   2881c:	af033303          	ld	t1,-1296(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17964>
   28820:	000300e7          	jalr	ra,0(t1)
	    ++this->_M_impl._M_finish;
   28824:	0404b783          	ld	a5,64(s1)
   28828:	02078793          	addi	a5,a5,32
   2882c:	04f4b023          	sd	a5,64(s1)
    cur.string(incdir);
   28830:	10010a13          	addi	s4,sp,256
   28834:	00810b13          	addi	s6,sp,8
    if (incdir.back() != '/')
   28838:	02f00913          	addi	s2,zero,47
	return _M_is_local() ? size_type(_S_local_capacity)
   2883c:	11010d13          	addi	s10,sp,272
      m->include_directories.push_back(comp_dir + incdir);
   28840:	14010a93          	addi	s5,sp,320
   28844:	02010b93          	addi	s7,sp,32
   28848:	0001ac17          	auipc	s8,0x1a
   2884c:	d78c3c03          	ld	s8,-648(s8) # 425c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x17b80>
	if (!_M_is_local())
   28850:	15010c93          	addi	s9,sp,336
   28854:	0f00006f          	jal	zero,28944 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbf4>
	  _M_realloc_insert(end(), __x);
   28858:	02010613          	addi	a2,sp,32
   2885c:	00050593          	addi	a1,a0,0
   28860:	03848513          	addi	a0,s1,56
   28864:	0001a317          	auipc	t1,0x1a
   28868:	bec33303          	ld	t1,-1044(t1) # 42450 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x17964>
   2886c:	000300e7          	jalr	ra,0(t1)
   28870:	fc1ff06f          	jal	zero,28830 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xae0>
      { return _M_string_length; }
   28874:	10813483          	ld	s1,264(sp)
    if (incdir.empty())
   28878:	0c048e63          	beq	s1,zero,28954 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc04>
      { return _M_dataplus._M_p; }
   2887c:	10013783          	ld	a5,256(sp)
    if (incdir.back() != '/')
   28880:	00978733          	add	a4,a5,s1
   28884:	fff74703          	lbu	a4,-1(a4)
   28888:	03271663          	bne	a4,s2,288b4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb64>
    if (incdir[0] == '/')
   2888c:	10013783          	ld	a5,256(sp)
   28890:	0007c783          	lbu	a5,0(a5)
   28894:	07278a63          	beq	a5,s2,28908 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbb8>
      m->include_directories.push_back(comp_dir + incdir);
   28898:	00043483          	ld	s1,0(s0)
   2889c:	03848493          	addi	s1,s1,56
   288a0:	000a0613          	addi	a2,s4,0
   288a4:	000b8593          	addi	a1,s7,0
   288a8:	000a8513          	addi	a0,s5,0
   288ac:	000c00e7          	jalr	ra,0(s8)
   288b0:	0740006f          	jal	zero,28924 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbd4>
	if (__size + 1 > this->capacity())
   288b4:	00148d93          	addi	s11,s1,1
	return _M_is_local() ? size_type(_S_local_capacity)
   288b8:	03a78663          	beq	a5,s10,288e4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb94>
   288bc:	11013783          	ld	a5,272(sp)
	if (__size + 1 > this->capacity())
   288c0:	03b7e663          	bltu	a5,s11,288ec <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb9c>
   288c4:	10013783          	ld	a5,256(sp)
   288c8:	009787b3          	add	a5,a5,s1
   288cc:	01278023          	sb	s2,0(a5)
      { _M_string_length = __length; }
   288d0:	11b13423          	sd	s11,264(sp)
   288d4:	10013783          	ld	a5,256(sp)
   288d8:	01b787b3          	add	a5,a5,s11
   288dc:	00078023          	sb	zero,0(a5)
      }
   288e0:	fadff06f          	jal	zero,2888c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb3c>
	return _M_is_local() ? size_type(_S_local_capacity)
   288e4:	00f00793          	addi	a5,zero,15
   288e8:	fd9ff06f          	jal	zero,288c0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb70>
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
   288ec:	00100713          	addi	a4,zero,1
   288f0:	00000693          	addi	a3,zero,0
   288f4:	00000613          	addi	a2,zero,0
   288f8:	00048593          	addi	a1,s1,0
   288fc:	000a0513          	addi	a0,s4,0
   28900:	dd1ed0ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@plt>
   28904:	fc1ff06f          	jal	zero,288c4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb74>
      m->include_directories.push_back(move(incdir));
   28908:	00043503          	ld	a0,0(s0)
      { emplace_back(std::move(__x)); }
   2890c:	000a0593          	addi	a1,s4,0
   28910:	03850513          	addi	a0,a0,56
   28914:	0001a317          	auipc	t1,0x1a
   28918:	c9c33303          	ld	t1,-868(t1) # 425b0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17630>
   2891c:	000300e7          	jalr	ra,0(t1)
   28920:	0240006f          	jal	zero,28944 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbf4>
   28924:	000a8593          	addi	a1,s5,0
   28928:	00048513          	addi	a0,s1,0
   2892c:	0001a317          	auipc	t1,0x1a
   28930:	c8433303          	ld	t1,-892(t1) # 425b0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17630>
   28934:	000300e7          	jalr	ra,0(t1)
      { return _M_dataplus._M_p; }
   28938:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   2893c:	01950463          	beq	a0,s9,28944 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbf4>
   28940:	b71ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
    cur.string(incdir);
   28944:	000a0593          	addi	a1,s4,0
   28948:	000b0513          	addi	a0,s6,0
   2894c:	95cf40ef          	jal	ra,1caa8 <dwarf::cursor::string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   28950:	f25ff06f          	jal	zero,28874 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb24>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   28954:	13010793          	addi	a5,sp,304
   28958:	12f13023          	sd	a5,288(sp)
      { _M_string_length = __length; }
   2895c:	12013423          	sd	zero,296(sp)
   28960:	12010823          	sb	zero,304(sp)
      { return _M_string_length; }
   28964:	0089b603          	ld	a2,8(s3)
  if (!cu_name.empty() && cu_name[0] == '/')
   28968:	00060a63          	beq	a2,zero,2897c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc2c>
      { return _M_dataplus._M_p; }
   2896c:	0009b583          	ld	a1,0(s3)
   28970:	0005c703          	lbu	a4,0(a1)
   28974:	02f00793          	addi	a5,zero,47
   28978:	02f70463          	beq	a4,a5,289a0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc50>
    m->file_names.emplace_back(comp_dir + cu_name);
   2897c:	00043483          	ld	s1,0(s0)
   28980:	05048493          	addi	s1,s1,80
   28984:	00098613          	addi	a2,s3,0
   28988:	02010593          	addi	a1,sp,32
   2898c:	14010513          	addi	a0,sp,320
   28990:	0001a317          	auipc	t1,0x1a
   28994:	c3033303          	ld	t1,-976(t1) # 425c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x17b80>
   28998:	000300e7          	jalr	ra,0(t1)
   2899c:	0ac0006f          	jal	zero,28a48 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcf8>
   289a0:	00043483          	ld	s1,0(s0)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   289a4:	0584b903          	ld	s2,88(s1)
   289a8:	0604b783          	ld	a5,96(s1)
   289ac:	08f90063          	beq	s2,a5,28a2c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcdc>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   289b0:	15010793          	addi	a5,sp,336
   289b4:	14f13023          	sd	a5,320(sp)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   289b8:	00000693          	addi	a3,zero,0
   289bc:	00c58633          	add	a2,a1,a2
   289c0:	14010513          	addi	a0,sp,320
   289c4:	0001a317          	auipc	t1,0x1a
   289c8:	94433303          	ld	t1,-1724(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17964>
   289cc:	000300e7          	jalr	ra,0(t1)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   289d0:	00000693          	addi	a3,zero,0
   289d4:	00000613          	addi	a2,zero,0
   289d8:	14010593          	addi	a1,sp,320
   289dc:	00090513          	addi	a0,s2,0
   289e0:	d2dfe0ef          	jal	ra,2770c <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
      { return _M_dataplus._M_p; }
   289e4:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   289e8:	15010793          	addi	a5,sp,336
   289ec:	00f50463          	beq	a0,a5,289f4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xca4>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   289f0:	ac1ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	    ++this->_M_impl._M_finish;
   289f4:	0584b783          	ld	a5,88(s1)
   289f8:	03078793          	addi	a5,a5,48
   289fc:	04f4bc23          	sd	a5,88(s1)
   28a00:	06c0006f          	jal	zero,28a6c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd1c>
      { return _M_dataplus._M_p; }
   28a04:	00050493          	addi	s1,a0,0
   28a08:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   28a0c:	15010793          	addi	a5,sp,336
   28a10:	00f50463          	beq	a0,a5,28a18 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc8>
   28a14:	a9ded0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28a18:	12013503          	ld	a0,288(sp)
	if (!_M_is_local())
   28a1c:	13010793          	addi	a5,sp,304
   28a20:	2af50c63          	beq	a0,a5,28cd8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf88>
   28a24:	a8ded0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   28a28:	2b00006f          	jal	zero,28cd8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf88>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   28a2c:	00098613          	addi	a2,s3,0
   28a30:	00090593          	addi	a1,s2,0
   28a34:	05048513          	addi	a0,s1,80
   28a38:	0001a317          	auipc	t1,0x1a
   28a3c:	a0033303          	ld	t1,-1536(t1) # 42438 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x173b4>
   28a40:	000300e7          	jalr	ra,0(t1)
   28a44:	0280006f          	jal	zero,28a6c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd1c>
   28a48:	14010593          	addi	a1,sp,320
   28a4c:	00048513          	addi	a0,s1,0
   28a50:	0001a317          	auipc	t1,0x1a
   28a54:	b3833303          	ld	t1,-1224(t1) # 42588 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x16e90>
   28a58:	000300e7          	jalr	ra,0(t1)
      { return _M_dataplus._M_p; }
   28a5c:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   28a60:	15010793          	addi	a5,sp,336
   28a64:	00f50463          	beq	a0,a5,28a6c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd1c>
   28a68:	a49ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
  while (m->read_file_entry(&cur, true))
   28a6c:	00810493          	addi	s1,sp,8
   28a70:	0080006f          	jal	zero,28a78 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd28>
   28a74:	00050c63          	beq	a0,zero,28a8c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd3c>
   28a78:	00100613          	addi	a2,zero,1
   28a7c:	00048593          	addi	a1,s1,0
   28a80:	00043503          	ld	a0,0(s0)
   28a84:	f4dfe0ef          	jal	ra,279d0 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)>
   28a88:	fedff06f          	jal	zero,28a74 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd24>
      { return _M_dataplus._M_p; }
   28a8c:	12013503          	ld	a0,288(sp)
	if (!_M_is_local())
   28a90:	13010793          	addi	a5,sp,304
   28a94:	00f50463          	beq	a0,a5,28a9c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd4c>
   28a98:	a19ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28a9c:	10013503          	ld	a0,256(sp)
	if (!_M_is_local())
   28aa0:	11010793          	addi	a5,sp,272
   28aa4:	00f50463          	beq	a0,a5,28aac <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd5c>
   28aa8:	a09ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   28aac:	01013403          	ld	s0,16(sp)
   28ab0:	02040463          	beq	s0,zero,28ad8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd88>
    if (__is_single_threaded())
   28ab4:	0001a797          	auipc	a5,0x1a
   28ab8:	9c47b783          	ld	a5,-1596(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   28abc:	0007c783          	lbu	a5,0(a5)
   28ac0:	06078a63          	beq	a5,zero,28b34 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xde4>
    _Atomic_word __result = *__mem;
   28ac4:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   28ac8:	fff5079b          	addiw	a5,a0,-1
   28acc:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   28ad0:	00100793          	addi	a5,zero,1
   28ad4:	06f50863          	beq	a0,a5,28b44 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xdf4>
      { return _M_dataplus._M_p; }
   28ad8:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   28adc:	05010793          	addi	a5,sp,80
   28ae0:	00f50463          	beq	a0,a5,28ae8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd98>
   28ae4:	9cded0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28ae8:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   28aec:	03010793          	addi	a5,sp,48
   28af0:	00f50463          	beq	a0,a5,28af8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xda8>
   28af4:	9bded0ef          	jal	ra,164b0 <operator delete(void*)@plt>
}
   28af8:	1d813083          	ld	ra,472(sp)
   28afc:	1d013403          	ld	s0,464(sp)
   28b00:	1c813483          	ld	s1,456(sp)
   28b04:	1c013903          	ld	s2,448(sp)
   28b08:	1b813983          	ld	s3,440(sp)
   28b0c:	1b013a03          	ld	s4,432(sp)
   28b10:	1a813a83          	ld	s5,424(sp)
   28b14:	1a013b03          	ld	s6,416(sp)
   28b18:	19813b83          	ld	s7,408(sp)
   28b1c:	19013c03          	ld	s8,400(sp)
   28b20:	18813c83          	ld	s9,392(sp)
   28b24:	18013d03          	ld	s10,384(sp)
   28b28:	17813d83          	ld	s11,376(sp)
   28b2c:	1e010113          	addi	sp,sp,480
   28b30:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   28b34:	fff00593          	addi	a1,zero,-1
   28b38:	03040513          	addi	a0,s0,48
   28b3c:	ff4ed0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   28b40:	f91ff06f          	jal	zero,28ad0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd80>
	_M_dispose();
   28b44:	00043783          	ld	a5,0(s0)
   28b48:	0107b783          	ld	a5,16(a5)
   28b4c:	00040513          	addi	a0,s0,0
   28b50:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   28b54:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   28b58:	0001a797          	auipc	a5,0x1a
   28b5c:	9207b783          	ld	a5,-1760(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   28b60:	0007c783          	lbu	a5,0(a5)
   28b64:	02078663          	beq	a5,zero,28b90 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe40>
    _Atomic_word __result = *__mem;
   28b68:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   28b6c:	fff5079b          	addiw	a5,a0,-1
   28b70:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   28b74:	00100793          	addi	a5,zero,1
   28b78:	f6f510e3          	bne	a0,a5,28ad8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd88>
	    _M_destroy();
   28b7c:	00043783          	ld	a5,0(s0)
   28b80:	0187b783          	ld	a5,24(a5)
   28b84:	00040513          	addi	a0,s0,0
   28b88:	000780e7          	jalr	ra,0(a5)
   28b8c:	f4dff06f          	jal	zero,28ad8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd88>
      return __exchange_and_add(__mem, __val);
   28b90:	fff00593          	addi	a1,zero,-1
   28b94:	03440513          	addi	a0,s0,52
   28b98:	f98ed0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   28b9c:	fd9ff06f          	jal	zero,28b74 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe24>
      { return _M_dataplus._M_p; }
   28ba0:	00050493          	addi	s1,a0,0
   28ba4:	12013503          	ld	a0,288(sp)
	if (!_M_is_local())
   28ba8:	13010793          	addi	a5,sp,304
   28bac:	00f50463          	beq	a0,a5,28bb4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe64>
   28bb0:	901ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28bb4:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   28bb8:	15010793          	addi	a5,sp,336
   28bbc:	00f50463          	beq	a0,a5,28bc4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe74>
   28bc0:	8f1ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
                       std::to_string(version));
   28bc4:	00090513          	addi	a0,s2,0
   28bc8:	8a9ed0ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   28bcc:	01013503          	ld	a0,16(sp)
   28bd0:	ae050a63          	beq	a0,zero,27ec4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x174>
	  _M_pi->_M_release();
   28bd4:	00019317          	auipc	t1,0x19
   28bd8:	7ec33303          	ld	t1,2028(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   28bdc:	000300e7          	jalr	ra,0(t1)
   28be0:	ae4ff06f          	jal	zero,27ec4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x174>
      { return _M_dataplus._M_p; }
   28be4:	00050493          	addi	s1,a0,0
   28be8:	fcdff06f          	jal	zero,28bb4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe64>
                       " be 0 in line number table");
   28bec:	00050493          	addi	s1,a0,0
   28bf0:	00090513          	addi	a0,s2,0
   28bf4:	87ded0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   28bf8:	fd5ff06f          	jal	zero,28bcc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe7c>
    throw format_error("line_range cannot be 0 in line number table");
   28bfc:	00050493          	addi	s1,a0,0
   28c00:	00090513          	addi	a0,s2,0
   28c04:	86ded0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   28c08:	fc5ff06f          	jal	zero,28bcc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe7c>
   28c0c:	00050493          	addi	s1,a0,0
   28c10:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   28c14:	07010793          	addi	a5,sp,112
   28c18:	00f50463          	beq	a0,a5,28c20 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xed0>
   28c1c:	895ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28c20:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   28c24:	15010793          	addi	a5,sp,336
   28c28:	00f50463          	beq	a0,a5,28c30 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xee0>
   28c2c:	885ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28c30:	08013503          	ld	a0,128(sp)
	if (!_M_is_local())
   28c34:	09010793          	addi	a5,sp,144
   28c38:	00f50463          	beq	a0,a5,28c40 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xef0>
   28c3c:	875ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28c40:	0a013503          	ld	a0,160(sp)
	if (!_M_is_local())
   28c44:	0b010793          	addi	a5,sp,176
   28c48:	00f50463          	beq	a0,a5,28c50 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf00>
   28c4c:	865ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28c50:	12013503          	ld	a0,288(sp)
	if (!_M_is_local())
   28c54:	13010793          	addi	a5,sp,304
   28c58:	00f50463          	beq	a0,a5,28c60 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf10>
   28c5c:	855ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28c60:	0c013503          	ld	a0,192(sp)
	if (!_M_is_local())
   28c64:	0d010793          	addi	a5,sp,208
   28c68:	00f50463          	beq	a0,a5,28c70 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf20>
   28c6c:	845ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28c70:	0e013503          	ld	a0,224(sp)
	if (!_M_is_local())
   28c74:	0f010793          	addi	a5,sp,240
   28c78:	00f50463          	beq	a0,a5,28c80 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf30>
   28c7c:	835ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28c80:	10013503          	ld	a0,256(sp)
	if (!_M_is_local())
   28c84:	11010793          	addi	a5,sp,272
   28c88:	00f50463          	beq	a0,a5,28c90 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf40>
   28c8c:	825ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
                         std::to_string(i) + ", got " + std::to_string(length));
   28c90:	00098513          	addi	a0,s3,0
   28c94:	fdced0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   28c98:	f35ff06f          	jal	zero,28bcc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe7c>
      { return _M_dataplus._M_p; }
   28c9c:	00050493          	addi	s1,a0,0
   28ca0:	f81ff06f          	jal	zero,28c20 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xed0>
   28ca4:	00050493          	addi	s1,a0,0
   28ca8:	f99ff06f          	jal	zero,28c40 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xef0>
   28cac:	00050493          	addi	s1,a0,0
   28cb0:	fa1ff06f          	jal	zero,28c50 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf00>
   28cb4:	00050493          	addi	s1,a0,0
   28cb8:	fb9ff06f          	jal	zero,28c70 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf20>
   28cbc:	00050493          	addi	s1,a0,0
   28cc0:	fc1ff06f          	jal	zero,28c80 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf30>
   28cc4:	00050493          	addi	s1,a0,0
   28cc8:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   28ccc:	15010793          	addi	a5,sp,336
   28cd0:	00f50463          	beq	a0,a5,28cd8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf88>
   28cd4:	fdced0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28cd8:	10013503          	ld	a0,256(sp)
	if (!_M_is_local())
   28cdc:	11010793          	addi	a5,sp,272
   28ce0:	eef506e3          	beq	a0,a5,28bcc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe7c>
   28ce4:	fcced0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   28ce8:	ee5ff06f          	jal	zero,28bcc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe7c>
      { return _M_dataplus._M_p; }
   28cec:	00050493          	addi	s1,a0,0
   28cf0:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   28cf4:	15010793          	addi	a5,sp,336
   28cf8:	d2f500e3          	beq	a0,a5,28a18 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc8>
   28cfc:	fb4ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   28d00:	d19ff06f          	jal	zero,28a18 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc8>
      { return _M_dataplus._M_p; }
   28d04:	00050493          	addi	s1,a0,0
   28d08:	d11ff06f          	jal	zero,28a18 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc8>
   28d0c:	00050493          	addi	s1,a0,0
   28d10:	fc9ff06f          	jal	zero,28cd8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf88>
   28d14:	00050493          	addi	s1,a0,0
   28d18:	9acff06f          	jal	zero,27ec4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x174>
        val |= ((uint64_t)p[i]) << (i * 8);
   28d1c:	0006c703          	lbu	a4,0(a3)
    pos += sizeof(T);
   28d20:	00168693          	addi	a3,a3,1
   28d24:	00d13c23          	sd	a3,24(sp)
    return (T)val;
   28d28:	0ff77793          	andi	a5,a4,255
    if (length != opcode_lengths[i])
   28d2c:	00070493          	addi	s1,a4,0
   28d30:	000a2b03          	lw	s6,0(s4)
   28d34:	91671ae3          	bne	a4,s6,28648 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8f8>
      { return _M_ptr; }
   28d38:	00043483          	ld	s1,0(s0)
    m->standard_opcode_lengths[i] = length;
   28d3c:	0204b703          	ld	a4,32(s1)
   28d40:	01270733          	add	a4,a4,s2
   28d44:	00f70023          	sb	a5,0(a4)
  for (unsigned i = 1; i < m->opcode_base; i++) {
   28d48:	00190913          	addi	s2,s2,1
   28d4c:	004a0a13          	addi	s4,s4,4
   28d50:	01d4c703          	lbu	a4,29(s1)
   28d54:	0009079b          	addiw	a5,s2,0
   28d58:	a8e7f6e3          	bgeu	a5,a4,287e4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa94>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   28d5c:	00813783          	ld	a5,8(sp)
   28d60:	0107b703          	ld	a4,16(a5)
   28d64:	01813783          	ld	a5,24(sp)
   28d68:	8ce7e4e3          	bltu	a5,a4,28630 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8e0>
      underflow();
   28d6c:	000a8513          	addi	a0,s5,0
   28d70:	d8df30ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
   28d74:	8bdff06f          	jal	zero,28630 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8e0>
        val |= ((uint64_t)p[i]) << (i * 8);
   28d78:	0007c703          	lbu	a4,0(a5)
    pos += sizeof(T);
   28d7c:	00178793          	addi	a5,a5,1
   28d80:	00f13c23          	sd	a5,24(sp)
    return (T)val;
   28d84:	00e48ea3          	sb	a4,29(s1)
   28d88:	00043503          	ld	a0,0(s0)
  m->standard_opcode_lengths.resize(m->opcode_base);
   28d8c:	01d54783          	lbu	a5,29(a0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   28d90:	02853683          	ld	a3,40(a0)
   28d94:	02053703          	ld	a4,32(a0)
   28d98:	40e685b3          	sub	a1,a3,a4
	if (__new_size > size())
   28d9c:	86f5eee3          	bltu	a1,a5,28618 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8c8>
	else if (__new_size < size())
   28da0:	00b7f863          	bgeu	a5,a1,28db0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1060>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   28da4:	00f70733          	add	a4,a4,a5
	if (size_type __n = this->_M_impl._M_finish - __pos)
   28da8:	00e68463          	beq	a3,a4,28db0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1060>
	    this->_M_impl._M_finish = __pos;
   28dac:	02e53423          	sd	a4,40(a0)
   28db0:	00043483          	ld	s1,0(s0)
	return *(this->_M_impl._M_start + __n);
   28db4:	0204b783          	ld	a5,32(s1)
  m->standard_opcode_lengths[0] = 0;
   28db8:	00078023          	sb	zero,0(a5)
  for (unsigned i = 1; i < m->opcode_base; i++) {
   28dbc:	01d4c703          	lbu	a4,29(s1)
   28dc0:	00100793          	addi	a5,zero,1
   28dc4:	a2e7f0e3          	bgeu	a5,a4,287e4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa94>
   28dc8:	0000fa17          	auipc	s4,0xf
   28dcc:	ee4a0a13          	addi	s4,s4,-284 # 37cac <dwarf::opcode_lengths+0x4>
   28dd0:	00100913          	addi	s2,zero,1
      underflow();
   28dd4:	00810a93          	addi	s5,sp,8
   28dd8:	f85ff06f          	jal	zero,28d5c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x100c>
        val |= ((uint64_t)p[i]) << (i * 8);
   28ddc:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   28de0:	00178793          	addi	a5,a5,1
   28de4:	00f13c23          	sd	a5,24(sp)
    return (T)val;
   28de8:	00d48e23          	sb	a3,28(s1)
   28dec:	00043483          	ld	s1,0(s0)
  if (m->line_range == 0)
   28df0:	01c4c683          	lbu	a3,28(s1)
   28df4:	fc068663          	beq	a3,zero,285c0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x870>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   28df8:	01073703          	ld	a4,16(a4)
   28dfc:	80e7e2e3          	bltu	a5,a4,28600 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8b0>
      underflow();
   28e00:	00810513          	addi	a0,sp,8
   28e04:	cf9f30ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
   28e08:	ff8ff06f          	jal	zero,28600 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8b0>
        val |= ((uint64_t)p[i]) << (i * 8);
   28e0c:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   28e10:	00178793          	addi	a5,a5,1
   28e14:	00f13c23          	sd	a5,24(sp)
    return (T)val;
   28e18:	00d48da3          	sb	a3,27(s1)
   28e1c:	00043483          	ld	s1,0(s0)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   28e20:	01073703          	ld	a4,16(a4)
   28e24:	f8e7e263          	bltu	a5,a4,285a8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x858>
      underflow();
   28e28:	00810513          	addi	a0,sp,8
   28e2c:	cd1f30ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
   28e30:	f78ff06f          	jal	zero,285a8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x858>
        val |= ((uint64_t)p[i]) << (i * 8);
   28e34:	0007c703          	lbu	a4,0(a5)
    pos += sizeof(T);
   28e38:	00178793          	addi	a5,a5,1
   28e3c:	00f13c23          	sd	a5,24(sp)
   28e40:	00043483          	ld	s1,0(s0)
  m->default_is_stmt = cur.fixed<ubyte>();
   28e44:	00e03733          	sltu	a4,zero,a4
   28e48:	00e48d23          	sb	a4,26(s1)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   28e4c:	0106b703          	ld	a4,16(a3)
   28e50:	f4e7e063          	bltu	a5,a4,28590 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x840>
      underflow();
   28e54:	00810513          	addi	a0,sp,8
   28e58:	ca5f30ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
   28e5c:	f34ff06f          	jal	zero,28590 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x840>
        val |= ((uint64_t)p[i]) << (i * 8);
   28e60:	0007c703          	lbu	a4,0(a5)
    pos += sizeof(T);
   28e64:	00178793          	addi	a5,a5,1
   28e68:	00f13c23          	sd	a5,24(sp)
    return (T)val;
   28e6c:	00e90ca3          	sb	a4,25(s2)
  if (m->maximum_operations_per_instruction == 0)
   28e70:	00043783          	ld	a5,0(s0)
   28e74:	0197c783          	lbu	a5,25(a5)
   28e78:	04079463          	bne	a5,zero,28ec0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1170>
                       " be 0 in line number table");
   28e7c:	01000513          	addi	a0,zero,16
   28e80:	d50ed0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   28e84:	00050913          	addi	s2,a0,0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   28e88:	0000f597          	auipc	a1,0xf
   28e8c:	c4858593          	addi	a1,a1,-952 # 37ad0 <typeinfo name for dwarf::expr_context+0xe8>
   28e90:	881ed0ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   28e94:	ebcff06f          	jal	zero,28550 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x800>
        val |= ((uint64_t)p[i]) << (i * 8);
   28e98:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   28e9c:	00178793          	addi	a5,a5,1
   28ea0:	00f13c23          	sd	a5,24(sp)
    return (T)val;
   28ea4:	00d90c23          	sb	a3,24(s2)
   28ea8:	00043903          	ld	s2,0(s0)
  m->maximum_operations_per_instruction = 1;
   28eac:	00100693          	addi	a3,zero,1
   28eb0:	00d90ca3          	sb	a3,25(s2)
  if (version == 4)
   28eb4:	0004849b          	addiw	s1,s1,0
   28eb8:	00400693          	addi	a3,zero,4
   28ebc:	e6d48663          	beq	s1,a3,28528 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7d8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   28ec0:	00813783          	ld	a5,8(sp)
   28ec4:	0107b703          	ld	a4,16(a5)
   28ec8:	01813783          	ld	a5,24(sp)
   28ecc:	eae7e663          	bltu	a5,a4,28578 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x828>
      underflow();
   28ed0:	00810513          	addi	a0,sp,8
   28ed4:	c29f30ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
   28ed8:	ea0ff06f          	jal	zero,28578 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x828>
struct cursor {
   28edc:	01513c23          	sd	s5,24(sp)
      ~__shared_count() noexcept
   28ee0:	b1cff06f          	jal	zero,281fc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4ac>
      : sec(sec), pos(sec->begin + offset) {}
   28ee4:	00893a83          	ld	s5,8(s2)
   28ee8:	01213423          	sd	s2,8(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   28eec:	01013903          	ld	s2,16(sp)
	__r._M_pi = _M_pi;
   28ef0:	00013823          	sd	zero,16(sp)
	if (_M_pi != nullptr)
   28ef4:	ac091e63          	bne	s2,zero,281d0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x480>
struct cursor {
   28ef8:	01513c23          	sd	s5,24(sp)
      ~__shared_count() noexcept
   28efc:	b24ff06f          	jal	zero,28220 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4d0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   28f00:	01613423          	sd	s6,8(sp)
      : _M_pi(__r._M_pi)
   28f04:	00013823          	sd	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   28f08:	008b3783          	ld	a5,8(s6)
   28f0c:	015787b3          	add	a5,a5,s5
   28f10:	00f13c23          	sd	a5,24(sp)
      { return _M_ptr; }
   28f14:	00043483          	ld	s1,0(s0)
  m->sec = cur.subsection();
   28f18:	00810593          	addi	a1,sp,8
   28f1c:	16010513          	addi	a0,sp,352
   28f20:	920f40ef          	jal	ra,1d040 <dwarf::cursor::subsection()>
   28f24:	990ff06f          	jal	zero,280b4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x364>
      { _M_dataplus._M_p = __p; }
   28f28:	02f13023          	sd	a5,32(sp)
      { _M_string_length = __length; }
   28f2c:	14813783          	ld	a5,328(sp)
   28f30:	02f13423          	sd	a5,40(sp)
      { _M_allocated_capacity = __capacity; }
   28f34:	15013783          	ld	a5,336(sp)
   28f38:	02f13823          	sd	a5,48(sp)
      { _M_dataplus._M_p = __p; }
   28f3c:	15010793          	addi	a5,sp,336
   28f40:	14f13023          	sd	a5,320(sp)
   28f44:	800ff06f          	jal	zero,27f44 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1f4>

0000000000028f48 <dwarf::line_table::iterator::step(dwarf::cursor*)>:

  pos = cur.get_section_offset();
  return *this;
}

bool line_table::iterator::step(cursor *cur) {
   28f48:	f6010113          	addi	sp,sp,-160
   28f4c:	08113c23          	sd	ra,152(sp)
   28f50:	08813823          	sd	s0,144(sp)
   28f54:	08913423          	sd	s1,136(sp)
   28f58:	09213023          	sd	s2,128(sp)
   28f5c:	07313c23          	sd	s3,120(sp)
   28f60:	07413823          	sd	s4,112(sp)
   28f64:	07513423          	sd	s5,104(sp)
   28f68:	00050493          	addi	s1,a0,0
   28f6c:	00058413          	addi	s0,a1,0
   28f70:	00053783          	ld	a5,0(a0)
   28f74:	0007b983          	ld	s3,0(a5)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   28f78:	0005b783          	ld	a5,0(a1)
   28f7c:	0107b703          	ld	a4,16(a5)
   28f80:	0105b783          	ld	a5,16(a1)
   28f84:	00e7e663          	bltu	a5,a4,28f90 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x48>
      underflow();
   28f88:	00058513          	addi	a0,a1,0
   28f8c:	b71f30ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   28f90:	01043783          	ld	a5,16(s0)
   28f94:	00043583          	ld	a1,0(s0)
    if (sec->ord == byte_order::lsb) {
   28f98:	01c5a703          	lw	a4,28(a1)
   28f9c:	040700e3          	beq	a4,zero,297dc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x894>
        val = (val << 8) | (uint64_t)p[i];
   28fa0:	0007c903          	lbu	s2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   28fa4:	03d0006f          	jal	zero,297e0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x898>

  // Read the opcode (DWARF4 section 6.2.3)
  ubyte opcode = cur->fixed<ubyte>();
  if (opcode >= m->opcode_base) {
    // Special opcode (DWARF4 section 6.2.5.1)
    ubyte adjusted_opcode = opcode - m->opcode_base;
   28fa8:	40e907bb          	subw	a5,s2,a4
   28fac:	0ff7f793          	andi	a5,a5,255
    unsigned op_advance = adjusted_opcode / m->line_range;
   28fb0:	01c9c683          	lbu	a3,28(s3)
    signed line_inc = m->line_base + (signed)adjusted_opcode % m->line_range;
   28fb4:	01b98703          	lb	a4,27(s3)
   28fb8:	02d7f63b          	remuw	a2,a5,a3
   28fbc:	00c7073b          	addw	a4,a4,a2

    regs.line += line_inc;
   28fc0:	05c4a603          	lw	a2,92(s1)
   28fc4:	00c7073b          	addw	a4,a4,a2
   28fc8:	04e4ae23          	sw	a4,92(s1)
    unsigned op_advance = adjusted_opcode / m->line_range;
   28fcc:	02d7d7bb          	divuw	a5,a5,a3
    regs.address +=
        m->minimum_instruction_length *
        ((regs.op_index + op_advance) / m->maximum_operations_per_instruction);
   28fd0:	0484a703          	lw	a4,72(s1)
   28fd4:	00e787bb          	addw	a5,a5,a4
   28fd8:	0199c703          	lbu	a4,25(s3)
   28fdc:	02e7d73b          	divuw	a4,a5,a4
        m->minimum_instruction_length *
   28fe0:	0189c683          	lbu	a3,24(s3)
   28fe4:	02d7073b          	mulw	a4,a4,a3
   28fe8:	02071713          	slli	a4,a4,0x20
   28fec:	02075713          	srli	a4,a4,0x20
    regs.address +=
   28ff0:	0404b683          	ld	a3,64(s1)
   28ff4:	00e68733          	add	a4,a3,a4
   28ff8:	04e4b023          	sd	a4,64(s1)
    regs.op_index =
        (regs.op_index + op_advance) % m->maximum_operations_per_instruction;
   28ffc:	0199c683          	lbu	a3,25(s3)
   29000:	02d7f7bb          	remuw	a5,a5,a3
    regs.op_index =
   29004:	04f4a423          	sw	a5,72(s1)
    entry = regs;
   29008:	0484b803          	ld	a6,72(s1)
   2900c:	0504b503          	ld	a0,80(s1)
   29010:	0584b583          	ld	a1,88(s1)
   29014:	0604b603          	ld	a2,96(s1)
   29018:	0684b683          	ld	a3,104(s1)
   2901c:	0704b783          	ld	a5,112(s1)
   29020:	00e4b423          	sd	a4,8(s1)
   29024:	0104b823          	sd	a6,16(s1)
   29028:	00a4bc23          	sd	a0,24(s1)
   2902c:	02b4b023          	sd	a1,32(s1)
   29030:	02c4b423          	sd	a2,40(s1)
   29034:	02d4b823          	sd	a3,48(s1)
   29038:	02f4bc23          	sd	a5,56(s1)

    regs.basic_block = regs.prologue_end = regs.epilogue_begin = false;
   2903c:	06048423          	sb	zero,104(s1)
   29040:	060483a3          	sb	zero,103(s1)
   29044:	060482a3          	sb	zero,101(s1)
    regs.discriminator = 0;
   29048:	0604a823          	sw	zero,112(s1)

    return true;
   2904c:	00100513          	addi	a0,zero,1
   29050:	2a00006f          	jal	zero,292f0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a8>
    while (pos < sec->end) {
   29054:	0105b703          	ld	a4,16(a1)
    std::uint64_t result = 0;
   29058:	00000513          	addi	a0,zero,0
    int shift = 0;
   2905c:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   29060:	02e7fa63          	bgeu	a5,a4,29094 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x14c>
      uint8_t byte = *(uint8_t *)(pos++);
   29064:	00178793          	addi	a5,a5,1
   29068:	00f43823          	sd	a5,16(s0)
   2906c:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   29070:	07f77693          	andi	a3,a4,127
   29074:	00c696b3          	sll	a3,a3,a2
   29078:	00d56533          	or	a0,a0,a3
      if ((byte & 0x80) == 0)
   2907c:	0187171b          	slliw	a4,a4,0x18
   29080:	4187571b          	sraiw	a4,a4,0x18
   29084:	00075e63          	bge	a4,zero,290a0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x158>
      shift += 7;
   29088:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   2908c:	0105b703          	ld	a4,16(a1)
   29090:	fce7eae3          	bltu	a5,a4,29064 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x11c>
    underflow();
   29094:	00040513          	addi	a0,s0,0
   29098:	a65f30ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    return 0;
   2909c:	00000513          	addi	a0,zero,0
  section_offset get_section_offset() const { return pos - sec->begin; }
   290a0:	01043783          	ld	a5,16(s0)
   290a4:	00043703          	ld	a4,0(s0)
   290a8:	00873a03          	ld	s4,8(a4)
   290ac:	41478a33          	sub	s4,a5,s4
    return ((DW_LNS)opcode == DW_LNS::copy);
  } else { // opcode == 0
    // Extended opcode (DWARF4 sections 6.2.3 and 6.2.5.3)
    assert(opcode == 0);
    uint64_t length = cur->uleb128();
    section_offset end = cur->get_section_offset() + length;
   290b0:	00aa0a33          	add	s4,s4,a0
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   290b4:	01073703          	ld	a4,16(a4)
   290b8:	00e7e663          	bltu	a5,a4,290c4 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x17c>
      underflow();
   290bc:	00040513          	addi	a0,s0,0
   290c0:	a3df30ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   290c4:	01043783          	ld	a5,16(s0)
   290c8:	00043503          	ld	a0,0(s0)
    if (sec->ord == byte_order::lsb) {
   290cc:	01c52703          	lw	a4,28(a0)
   290d0:	6c070063          	beq	a4,zero,29790 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x848>
        val = (val << 8) | (uint64_t)p[i];
   290d4:	0007c583          	lbu	a1,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   290d8:	6bc0006f          	jal	zero,29794 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x84c>
    while (pos < sec->end) {
   290dc:	0105b703          	ld	a4,16(a1)
    std::uint64_t result = 0;
   290e0:	00000513          	addi	a0,zero,0
    int shift = 0;
   290e4:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   290e8:	02e7fa63          	bgeu	a5,a4,2911c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1d4>
      uint8_t byte = *(uint8_t *)(pos++);
   290ec:	00178793          	addi	a5,a5,1
   290f0:	00f43823          	sd	a5,16(s0)
   290f4:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   290f8:	07f77693          	andi	a3,a4,127
   290fc:	00c696b3          	sll	a3,a3,a2
   29100:	00d56533          	or	a0,a0,a3
      if ((byte & 0x80) == 0)
   29104:	0187171b          	slliw	a4,a4,0x18
   29108:	4187571b          	sraiw	a4,a4,0x18
   2910c:	00075e63          	bge	a4,zero,29128 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1e0>
      shift += 7;
   29110:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   29114:	0105b703          	ld	a4,16(a1)
   29118:	fce7eae3          	bltu	a5,a4,290ec <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1a4>
    underflow();
   2911c:	00040513          	addi	a0,s0,0
   29120:	9ddf30ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    return 0;
   29124:	00000513          	addi	a0,zero,0
      regs.isa = cur->uleb128();
   29128:	06a4a623          	sw	a0,108(s1)
      break;
   2912c:	1bc0006f          	jal	zero,292e8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
    while (pos < sec->end) {
   29130:	0105b703          	ld	a4,16(a1)
    std::uint64_t result = 0;
   29134:	00000513          	addi	a0,zero,0
    int shift = 0;
   29138:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   2913c:	02e7fa63          	bgeu	a5,a4,29170 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x228>
      uint8_t byte = *(uint8_t *)(pos++);
   29140:	00178793          	addi	a5,a5,1
   29144:	00f43823          	sd	a5,16(s0)
   29148:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   2914c:	07f77693          	andi	a3,a4,127
   29150:	00c696b3          	sll	a3,a3,a2
   29154:	00d56533          	or	a0,a0,a3
      if ((byte & 0x80) == 0)
   29158:	0187171b          	slliw	a4,a4,0x18
   2915c:	4187571b          	sraiw	a4,a4,0x18
   29160:	00075e63          	bge	a4,zero,2917c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x234>
      shift += 7;
   29164:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   29168:	0105b703          	ld	a4,16(a1)
   2916c:	fce7eae3          	bltu	a5,a4,29140 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1f8>
    underflow();
   29170:	00040513          	addi	a0,s0,0
   29174:	989f30ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    return 0;
   29178:	00000513          	addi	a0,zero,0
      regs.column = cur->uleb128();
   2917c:	06a4a023          	sw	a0,96(s1)
      break;
   29180:	1680006f          	jal	zero,292e8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
    while (pos < sec->end) {
   29184:	0105b703          	ld	a4,16(a1)
    std::uint64_t result = 0;
   29188:	00000513          	addi	a0,zero,0
    int shift = 0;
   2918c:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   29190:	02e7fa63          	bgeu	a5,a4,291c4 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x27c>
      uint8_t byte = *(uint8_t *)(pos++);
   29194:	00178793          	addi	a5,a5,1
   29198:	00f43823          	sd	a5,16(s0)
   2919c:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   291a0:	07f77693          	andi	a3,a4,127
   291a4:	00c696b3          	sll	a3,a3,a2
   291a8:	00d56533          	or	a0,a0,a3
      if ((byte & 0x80) == 0)
   291ac:	0187171b          	slliw	a4,a4,0x18
   291b0:	4187571b          	sraiw	a4,a4,0x18
   291b4:	00075e63          	bge	a4,zero,291d0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x288>
      shift += 7;
   291b8:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   291bc:	0105b703          	ld	a4,16(a1)
   291c0:	fce7eae3          	bltu	a5,a4,29194 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x24c>
    underflow();
   291c4:	00040513          	addi	a0,s0,0
   291c8:	935f30ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    return 0;
   291cc:	00000513          	addi	a0,zero,0
      regs.file_index = cur->uleb128();
   291d0:	04a4ac23          	sw	a0,88(s1)
      break;
   291d4:	1140006f          	jal	zero,292e8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
    while (pos < sec->end) {
   291d8:	0105b703          	ld	a4,16(a1)
    std::uint64_t result = 0;
   291dc:	00000513          	addi	a0,zero,0
    int shift = 0;
   291e0:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   291e4:	02e7fa63          	bgeu	a5,a4,29218 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x2d0>
      uint8_t byte = *(uint8_t *)(pos++);
   291e8:	00178793          	addi	a5,a5,1
   291ec:	00f43823          	sd	a5,16(s0)
   291f0:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   291f4:	07f77693          	andi	a3,a4,127
   291f8:	00c696b3          	sll	a3,a3,a2
   291fc:	00d56533          	or	a0,a0,a3
      if ((byte & 0x80) == 0)
   29200:	0187171b          	slliw	a4,a4,0x18
   29204:	4187571b          	sraiw	a4,a4,0x18
   29208:	0a075863          	bge	a4,zero,292b8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x370>
      shift += 7;
   2920c:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   29210:	0105b703          	ld	a4,16(a1)
   29214:	fce7eae3          	bltu	a5,a4,291e8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x2a0>
    underflow();
   29218:	00040513          	addi	a0,s0,0
   2921c:	8e1f30ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    return 0;
   29220:	00000513          	addi	a0,zero,0
   29224:	0940006f          	jal	zero,292b8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x370>
      entry = regs;
   29228:	0404b803          	ld	a6,64(s1)
   2922c:	0484b503          	ld	a0,72(s1)
   29230:	0504b583          	ld	a1,80(s1)
   29234:	0584b603          	ld	a2,88(s1)
   29238:	0604b683          	ld	a3,96(s1)
   2923c:	0684b703          	ld	a4,104(s1)
   29240:	0704b783          	ld	a5,112(s1)
   29244:	0104b423          	sd	a6,8(s1)
   29248:	00a4b823          	sd	a0,16(s1)
   2924c:	00b4bc23          	sd	a1,24(s1)
   29250:	02c4b023          	sd	a2,32(s1)
   29254:	02d4b423          	sd	a3,40(s1)
   29258:	02e4b823          	sd	a4,48(s1)
   2925c:	02f4bc23          	sd	a5,56(s1)
      regs.basic_block = regs.prologue_end = regs.epilogue_begin = false;
   29260:	06048423          	sb	zero,104(s1)
   29264:	060483a3          	sb	zero,103(s1)
   29268:	060482a3          	sb	zero,101(s1)
      regs.discriminator = 0;
   2926c:	0604a823          	sw	zero,112(s1)
      break;
   29270:	0780006f          	jal	zero,292e8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
      regs.line = (signed)regs.line + cur->sleb128();
   29274:	05c4a983          	lw	s3,92(s1)
   29278:	00040513          	addi	a0,s0,0
   2927c:	8d5f30ef          	jal	ra,1cb50 <dwarf::cursor::sleb128()>
   29280:	0135053b          	addw	a0,a0,s3
   29284:	04a4ae23          	sw	a0,92(s1)
      break;
   29288:	0600006f          	jal	zero,292e8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
      regs.is_stmt = !regs.is_stmt;
   2928c:	0644c783          	lbu	a5,100(s1)
   29290:	0017c793          	xori	a5,a5,1
   29294:	06f48223          	sb	a5,100(s1)
      break;
   29298:	0500006f          	jal	zero,292e8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
      regs.basic_block = true;
   2929c:	00100793          	addi	a5,zero,1
   292a0:	06f482a3          	sb	a5,101(s1)
      break;
   292a4:	0440006f          	jal	zero,292e8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
      uarg = (255 - m->opcode_base) / m->line_range;
   292a8:	0ff00513          	addi	a0,zero,255
   292ac:	40e5053b          	subw	a0,a0,a4
   292b0:	01c9c783          	lbu	a5,28(s3)
   292b4:	02f5453b          	divw	a0,a0,a5
          ((regs.op_index + uarg) / m->maximum_operations_per_instruction);
   292b8:	0484e783          	lwu	a5,72(s1)
   292bc:	00a787b3          	add	a5,a5,a0
   292c0:	0199c703          	lbu	a4,25(s3)
   292c4:	02e7d733          	divu	a4,a5,a4
          m->minimum_instruction_length *
   292c8:	0189c683          	lbu	a3,24(s3)
   292cc:	02d70733          	mul	a4,a4,a3
      regs.address +=
   292d0:	0404b683          	ld	a3,64(s1)
   292d4:	00e68733          	add	a4,a3,a4
   292d8:	04e4b023          	sd	a4,64(s1)
          (regs.op_index + uarg) % m->maximum_operations_per_instruction;
   292dc:	0199c703          	lbu	a4,25(s3)
   292e0:	02e7f7b3          	remu	a5,a5,a4
      regs.op_index =
   292e4:	04f4a423          	sw	a5,72(s1)
    return ((DW_LNS)opcode == DW_LNS::copy);
   292e8:	fff90513          	addi	a0,s2,-1
   292ec:	00153513          	sltiu	a0,a0,1
    if (cur->get_section_offset() > end)
      throw format_error("extended line number opcode exceeded its size");
    cur += end - cur->get_section_offset();
    return ((DW_LNE)opcode == DW_LNE::end_sequence);
  }
}
   292f0:	09813083          	ld	ra,152(sp)
   292f4:	09013403          	ld	s0,144(sp)
   292f8:	08813483          	ld	s1,136(sp)
   292fc:	08013903          	ld	s2,128(sp)
   29300:	07813983          	ld	s3,120(sp)
   29304:	07013a03          	ld	s4,112(sp)
   29308:	06813a83          	ld	s5,104(sp)
   2930c:	0a010113          	addi	sp,sp,160
   29310:	00008067          	jalr	zero,0(ra)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   29314:	0105b703          	ld	a4,16(a1)
   29318:	40f70633          	sub	a2,a4,a5
   2931c:	00100693          	addi	a3,zero,1
   29320:	00c6f463          	bgeu	a3,a2,29328 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3e0>
   29324:	00e7e663          	bltu	a5,a4,29330 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3e8>
      underflow();
   29328:	00040513          	addi	a0,s0,0
   2932c:	fd0f30ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   29330:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   29334:	00043783          	ld	a5,0(s0)
   29338:	01c7a783          	lw	a5,28(a5)
   2933c:	02079863          	bne	a5,zero,2936c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x424>
        val |= ((uint64_t)p[i]) << (i * 8);
   29340:	00174783          	lbu	a5,1(a4)
   29344:	00879793          	slli	a5,a5,0x8
   29348:	00074683          	lbu	a3,0(a4)
   2934c:	00d7e7b3          	or	a5,a5,a3
    pos += sizeof(T);
   29350:	00270713          	addi	a4,a4,2
   29354:	00e43823          	sd	a4,16(s0)
      regs.address += cur->fixed<uhalf>();
   29358:	0404b703          	ld	a4,64(s1)
   2935c:	00f707b3          	add	a5,a4,a5
   29360:	04f4b023          	sd	a5,64(s1)
      regs.op_index = 0;
   29364:	0404a423          	sw	zero,72(s1)
      break;
   29368:	f81ff06f          	jal	zero,292e8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
        val = (val << 8) | (uint64_t)p[i];
   2936c:	00074783          	lbu	a5,0(a4)
   29370:	00879793          	slli	a5,a5,0x8
   29374:	00174683          	lbu	a3,1(a4)
   29378:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   2937c:	fd5ff06f          	jal	zero,29350 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x408>
      regs.prologue_end = true;
   29380:	00100793          	addi	a5,zero,1
   29384:	06f483a3          	sb	a5,103(s1)
      break;
   29388:	f61ff06f          	jal	zero,292e8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
      regs.epilogue_begin = true;
   2938c:	00100793          	addi	a5,zero,1
   29390:	06f48423          	sb	a5,104(s1)
      break;
   29394:	f55ff06f          	jal	zero,292e8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
                         to_string((DW_LNS)opcode));
   29398:	01000513          	addi	a0,zero,16
   2939c:	834ed0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   293a0:	00050493          	addi	s1,a0,0
   293a4:	00090593          	addi	a1,s2,0
   293a8:	02010513          	addi	a0,sp,32
   293ac:	3e8050ef          	jal	ra,2e794 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)>
    { return std::move(__rhs.insert(0, __lhs)); }
   293b0:	0000e617          	auipc	a2,0xe
   293b4:	7d860613          	addi	a2,a2,2008 # 37b88 <typeinfo name for dwarf::expr_context+0x1a0>
   293b8:	00000593          	addi	a1,zero,0
   293bc:	02010513          	addi	a0,sp,32
   293c0:	f81ec0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   293c4:	00050593          	addi	a1,a0,0
   293c8:	04010413          	addi	s0,sp,64
   293cc:	00040513          	addi	a0,s0,0
   293d0:	840ed0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   293d4:	00040593          	addi	a1,s0,0
   293d8:	00048513          	addi	a0,s1,0
   293dc:	964ed0ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   293e0:	00019797          	auipc	a5,0x19
   293e4:	1707b783          	ld	a5,368(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   293e8:	01078793          	addi	a5,a5,16
   293ec:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   293f0:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   293f4:	05010793          	addi	a5,sp,80
   293f8:	00f50463          	beq	a0,a5,29400 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x4b8>
   293fc:	8b4ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29400:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   29404:	03010793          	addi	a5,sp,48
   29408:	00f50463          	beq	a0,a5,29410 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x4c8>
   2940c:	8a4ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   29410:	00019617          	auipc	a2,0x19
   29414:	f6863603          	ld	a2,-152(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   29418:	00019597          	auipc	a1,0x19
   2941c:	e905b583          	ld	a1,-368(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   29420:	00048513          	addi	a0,s1,0
   29424:	a3ced0ef          	jal	ra,16660 <__cxa_throw@plt>
    switch ((DW_LNE)opcode) {
   29428:	00400713          	addi	a4,zero,4
   2942c:	04e91c63          	bne	s2,a4,29484 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x53c>
    while (pos < sec->end) {
   29430:	01053703          	ld	a4,16(a0)
    std::uint64_t result = 0;
   29434:	00000593          	addi	a1,zero,0
    int shift = 0;
   29438:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   2943c:	02e7fa63          	bgeu	a5,a4,29470 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x528>
      uint8_t byte = *(uint8_t *)(pos++);
   29440:	00178793          	addi	a5,a5,1
   29444:	00f43823          	sd	a5,16(s0)
   29448:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   2944c:	07f77693          	andi	a3,a4,127
   29450:	00c696b3          	sll	a3,a3,a2
   29454:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   29458:	0187171b          	slliw	a4,a4,0x18
   2945c:	4187571b          	sraiw	a4,a4,0x18
   29460:	00075e63          	bge	a4,zero,2947c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x534>
      shift += 7;
   29464:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   29468:	01053703          	ld	a4,16(a0)
   2946c:	fce7eae3          	bltu	a5,a4,29440 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x4f8>
    underflow();
   29470:	00040513          	addi	a0,s0,0
   29474:	e88f30ef          	jal	ra,1cafc <dwarf::cursor::underflow()>
    return 0;
   29478:	00000593          	addi	a1,zero,0
      regs.discriminator = cur->uleb128();
   2947c:	06b4a823          	sw	a1,112(s1)
      break;
   29480:	07c0006f          	jal	zero,294fc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5b4>
    switch ((DW_LNE)opcode) {
   29484:	f809091b          	addiw	s2,s2,-128
   29488:	0189191b          	slliw	s2,s2,0x18
   2948c:	4189591b          	sraiw	s2,s2,0x18
   29490:	14094863          	blt	s2,zero,295e0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x698>
                          to_string((DW_LNE)opcode) + " not implemented");
   29494:	01000513          	addi	a0,zero,16
   29498:	f39ec0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2949c:	00050493          	addi	s1,a0,0
   294a0:	000a8593          	addi	a1,s5,0
   294a4:	00010513          	addi	a0,sp,0
   294a8:	35d040ef          	jal	ra,2e004 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)>
   294ac:	09c0006f          	jal	zero,29548 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x600>
      regs.end_sequence = true;
   294b0:	00100793          	addi	a5,zero,1
   294b4:	06f48323          	sb	a5,102(s1)
      entry = regs;
   294b8:	0404b803          	ld	a6,64(s1)
   294bc:	0484b503          	ld	a0,72(s1)
   294c0:	0504b583          	ld	a1,80(s1)
   294c4:	0584b603          	ld	a2,88(s1)
   294c8:	0604b683          	ld	a3,96(s1)
   294cc:	0684b703          	ld	a4,104(s1)
   294d0:	0704b783          	ld	a5,112(s1)
   294d4:	0104b423          	sd	a6,8(s1)
   294d8:	00a4b823          	sd	a0,16(s1)
   294dc:	00b4bc23          	sd	a1,24(s1)
   294e0:	02c4b023          	sd	a2,32(s1)
   294e4:	02d4b423          	sd	a3,40(s1)
   294e8:	02e4b823          	sd	a4,48(s1)
   294ec:	02f4bc23          	sd	a5,56(s1)
      regs.reset(m->default_is_stmt);
   294f0:	01a9c583          	lbu	a1,26(s3)
   294f4:	04048513          	addi	a0,s1,64
   294f8:	9d8fe0ef          	jal	ra,276d0 <dwarf::line_table::entry::reset(bool)>
  section_offset get_section_offset() const { return pos - sec->begin; }
   294fc:	00043703          	ld	a4,0(s0)
   29500:	01043783          	ld	a5,16(s0)
   29504:	00873703          	ld	a4,8(a4)
   29508:	40e787b3          	sub	a5,a5,a4
    return ((DW_LNE)opcode == DW_LNE::end_sequence);
   2950c:	fff90513          	addi	a0,s2,-1
   29510:	00153513          	sltiu	a0,a0,1
    if (cur->get_section_offset() > end)
   29514:	dcfa7ee3          	bgeu	s4,a5,292f0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a8>
      throw format_error("extended line number opcode exceeded its size");
   29518:	01000513          	addi	a0,zero,16
   2951c:	eb5ec0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   29520:	00050413          	addi	s0,a0,0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   29524:	0000e597          	auipc	a1,0xe
   29528:	6a458593          	addi	a1,a1,1700 # 37bc8 <typeinfo name for dwarf::expr_context+0x1e0>
   2952c:	9e4ed0ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   29530:	1400006f          	jal	zero,29670 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x728>
      m->read_file_entry(cur, false);
   29534:	00000613          	addi	a2,zero,0
   29538:	00040593          	addi	a1,s0,0
   2953c:	00098513          	addi	a0,s3,0
   29540:	c90fe0ef          	jal	ra,279d0 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)>
      break;
   29544:	fb9ff06f          	jal	zero,294fc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5b4>
    { return std::move(__rhs.insert(0, __lhs)); }
   29548:	0000e617          	auipc	a2,0xe
   2954c:	66060613          	addi	a2,a2,1632 # 37ba8 <typeinfo name for dwarf::expr_context+0x1c0>
   29550:	00000593          	addi	a1,zero,0
   29554:	00010513          	addi	a0,sp,0
   29558:	de9ec0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2955c:	00050593          	addi	a1,a0,0
   29560:	02010413          	addi	s0,sp,32
   29564:	00040513          	addi	a0,s0,0
   29568:	ea9ec0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   2956c:	0000e597          	auipc	a1,0xe
   29570:	fd458593          	addi	a1,a1,-44 # 37540 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x398>
   29574:	00040513          	addi	a0,s0,0
   29578:	9c8ed0ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   2957c:	00050593          	addi	a1,a0,0
   29580:	04010413          	addi	s0,sp,64
   29584:	00040513          	addi	a0,s0,0
   29588:	e89ec0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      throw runtime_error("vendor line number opcode " +
   2958c:	00040593          	addi	a1,s0,0
   29590:	00048513          	addi	a0,s1,0
   29594:	88ced0ef          	jal	ra,16620 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   29598:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2959c:	05010793          	addi	a5,sp,80
   295a0:	00f50463          	beq	a0,a5,295a8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x660>
   295a4:	f0dec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   295a8:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   295ac:	03010793          	addi	a5,sp,48
   295b0:	00f50463          	beq	a0,a5,295b8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x670>
   295b4:	efdec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   295b8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   295bc:	01010793          	addi	a5,sp,16
   295c0:	00f50463          	beq	a0,a5,295c8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x680>
   295c4:	eedec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
                          to_string((DW_LNE)opcode) + " not implemented");
   295c8:	00019617          	auipc	a2,0x19
   295cc:	e3863603          	ld	a2,-456(a2) # 42400 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   295d0:	00019597          	auipc	a1,0x19
   295d4:	0205b583          	ld	a1,32(a1) # 425f0 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   295d8:	00048513          	addi	a0,s1,0
   295dc:	884ed0ef          	jal	ra,16660 <__cxa_throw@plt>
                         to_string((DW_LNE)opcode));
   295e0:	01000513          	addi	a0,zero,16
   295e4:	dedec0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   295e8:	00050493          	addi	s1,a0,0
   295ec:	000a8593          	addi	a1,s5,0
   295f0:	02010513          	addi	a0,sp,32
   295f4:	211040ef          	jal	ra,2e004 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)>
    { return std::move(__rhs.insert(0, __lhs)); }
   295f8:	0000e617          	auipc	a2,0xe
   295fc:	59060613          	addi	a2,a2,1424 # 37b88 <typeinfo name for dwarf::expr_context+0x1a0>
   29600:	00000593          	addi	a1,zero,0
   29604:	02010513          	addi	a0,sp,32
   29608:	d39ec0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2960c:	00050593          	addi	a1,a0,0
   29610:	04010413          	addi	s0,sp,64
   29614:	00040513          	addi	a0,s0,0
   29618:	df9ec0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   2961c:	00040593          	addi	a1,s0,0
   29620:	00048513          	addi	a0,s1,0
   29624:	f1dec0ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   29628:	00019797          	auipc	a5,0x19
   2962c:	f287b783          	ld	a5,-216(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   29630:	01078793          	addi	a5,a5,16
   29634:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   29638:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2963c:	05010793          	addi	a5,sp,80
   29640:	00f50463          	beq	a0,a5,29648 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x700>
   29644:	e6dec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29648:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2964c:	03010793          	addi	a5,sp,48
   29650:	00f50463          	beq	a0,a5,29658 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x710>
   29654:	e5dec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   29658:	00019617          	auipc	a2,0x19
   2965c:	d2063603          	ld	a2,-736(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   29660:	00019597          	auipc	a1,0x19
   29664:	c485b583          	ld	a1,-952(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   29668:	00048513          	addi	a0,s1,0
   2966c:	ff5ec0ef          	jal	ra,16660 <__cxa_throw@plt>
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   29670:	00019797          	auipc	a5,0x19
   29674:	ee07b783          	ld	a5,-288(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   29678:	01078793          	addi	a5,a5,16
   2967c:	00f43023          	sd	a5,0(s0)
      throw format_error("extended line number opcode exceeded its size");
   29680:	00019617          	auipc	a2,0x19
   29684:	cf863603          	ld	a2,-776(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   29688:	00019597          	auipc	a1,0x19
   2968c:	c205b583          	ld	a1,-992(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   29690:	00040513          	addi	a0,s0,0
   29694:	fcdec0ef          	jal	ra,16660 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   29698:	00050413          	addi	s0,a0,0
   2969c:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   296a0:	05010793          	addi	a5,sp,80
   296a4:	00f50463          	beq	a0,a5,296ac <dwarf::line_table::iterator::step(dwarf::cursor*)+0x764>
   296a8:	e09ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   296ac:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   296b0:	03010793          	addi	a5,sp,48
   296b4:	00f50463          	beq	a0,a5,296bc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x774>
   296b8:	df9ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
                         to_string((DW_LNS)opcode));
   296bc:	00048513          	addi	a0,s1,0
   296c0:	db1ec0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   296c4:	00040513          	addi	a0,s0,0
   296c8:	fc9ec0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   296cc:	00050413          	addi	s0,a0,0
   296d0:	fddff06f          	jal	zero,296ac <dwarf::line_table::iterator::step(dwarf::cursor*)+0x764>
   296d4:	00050413          	addi	s0,a0,0
   296d8:	fe5ff06f          	jal	zero,296bc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x774>
   296dc:	00050413          	addi	s0,a0,0
   296e0:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   296e4:	05010793          	addi	a5,sp,80
   296e8:	00f50463          	beq	a0,a5,296f0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x7a8>
   296ec:	dc5ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   296f0:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   296f4:	03010793          	addi	a5,sp,48
   296f8:	00f50463          	beq	a0,a5,29700 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x7b8>
   296fc:	db5ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29700:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   29704:	01010793          	addi	a5,sp,16
   29708:	00f50463          	beq	a0,a5,29710 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x7c8>
   2970c:	da5ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
                          to_string((DW_LNE)opcode) + " not implemented");
   29710:	00048513          	addi	a0,s1,0
   29714:	d5dec0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   29718:	00040513          	addi	a0,s0,0
   2971c:	f75ec0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   29720:	00050413          	addi	s0,a0,0
   29724:	fcdff06f          	jal	zero,296f0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x7a8>
   29728:	00050413          	addi	s0,a0,0
   2972c:	fd5ff06f          	jal	zero,29700 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x7b8>
   29730:	00050413          	addi	s0,a0,0
   29734:	fddff06f          	jal	zero,29710 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x7c8>
   29738:	00050413          	addi	s0,a0,0
   2973c:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   29740:	05010793          	addi	a5,sp,80
   29744:	00f50463          	beq	a0,a5,2974c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x804>
   29748:	d69ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2974c:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   29750:	03010793          	addi	a5,sp,48
   29754:	00f50463          	beq	a0,a5,2975c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x814>
   29758:	d59ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
                         to_string((DW_LNE)opcode));
   2975c:	00048513          	addi	a0,s1,0
   29760:	d11ec0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   29764:	00040513          	addi	a0,s0,0
   29768:	f29ec0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2976c:	00050413          	addi	s0,a0,0
   29770:	fddff06f          	jal	zero,2974c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x804>
   29774:	00050413          	addi	s0,a0,0
   29778:	fe5ff06f          	jal	zero,2975c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x814>
      throw format_error("extended line number opcode exceeded its size");
   2977c:	00050493          	addi	s1,a0,0
   29780:	00040513          	addi	a0,s0,0
   29784:	cedec0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   29788:	00048513          	addi	a0,s1,0
   2978c:	f05ec0ef          	jal	ra,16690 <_Unwind_Resume@plt>
        val |= ((uint64_t)p[i]) << (i * 8);
   29790:	0007c583          	lbu	a1,0(a5)
    pos += sizeof(T);
   29794:	00178793          	addi	a5,a5,1
   29798:	00f43823          	sd	a5,16(s0)
    return (T)val;
   2979c:	0ff5f913          	andi	s2,a1,255
    switch ((DW_LNE)opcode) {
   297a0:	00058a93          	addi	s5,a1,0
   297a4:	00300713          	addi	a4,zero,3
   297a8:	d8e906e3          	beq	s2,a4,29534 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5ec>
   297ac:	c7276ee3          	bltu	a4,s2,29428 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x4e0>
   297b0:	00100793          	addi	a5,zero,1
   297b4:	cef90ee3          	beq	s2,a5,294b0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x568>
   297b8:	00200793          	addi	a5,zero,2
   297bc:	e2f912e3          	bne	s2,a5,295e0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x698>
      regs.address = cur->address();
   297c0:	00040513          	addi	a0,s0,0
   297c4:	00019317          	auipc	t1,0x19
   297c8:	bac33303          	ld	t1,-1108(t1) # 42370 <dwarf::cursor::address()@@Base+0x1f3cc>
   297cc:	000300e7          	jalr	ra,0(t1)
   297d0:	04a4b023          	sd	a0,64(s1)
      regs.op_index = 0;
   297d4:	0404a423          	sw	zero,72(s1)
      break;
   297d8:	d25ff06f          	jal	zero,294fc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5b4>
        val |= ((uint64_t)p[i]) << (i * 8);
   297dc:	0007c903          	lbu	s2,0(a5)
    pos += sizeof(T);
   297e0:	00178793          	addi	a5,a5,1
   297e4:	00f43823          	sd	a5,16(s0)
    return (T)val;
   297e8:	0ff97913          	andi	s2,s2,255
  if (opcode >= m->opcode_base) {
   297ec:	01d9c703          	lbu	a4,29(s3)
   297f0:	fae97c63          	bgeu	s2,a4,28fa8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x60>
  } else if (opcode != 0) {
   297f4:	860900e3          	beq	s2,zero,29054 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x10c>
    switch ((DW_LNS)opcode) {
   297f8:	00c00693          	addi	a3,zero,12
   297fc:	b926eee3          	bltu	a3,s2,29398 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x450>
   29800:	00291693          	slli	a3,s2,0x2
   29804:	0000e617          	auipc	a2,0xe
   29808:	46c60613          	addi	a2,a2,1132 # 37c70 <typeinfo name for dwarf::expr_context+0x288>
   2980c:	00c686b3          	add	a3,a3,a2
   29810:	0006a683          	lw	a3,0(a3)
   29814:	00c686b3          	add	a3,a3,a2
   29818:	00068067          	jalr	zero,0(a3)

000000000002981c <dwarf::line_table::iterator::operator++()>:
line_table::iterator &line_table::iterator::operator++() {
   2981c:	f5010113          	addi	sp,sp,-176
   29820:	0a113423          	sd	ra,168(sp)
   29824:	0a813023          	sd	s0,160(sp)
   29828:	08913c23          	sd	s1,152(sp)
   2982c:	09213823          	sd	s2,144(sp)
   29830:	09313423          	sd	s3,136(sp)
   29834:	00050413          	addi	s0,a0,0
   29838:	00053783          	ld	a5,0(a0)
   2983c:	0007b783          	ld	a5,0(a5)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   29840:	0007b903          	ld	s2,0(a5)
      : _M_pi(__r._M_pi)
   29844:	0087b483          	ld	s1,8(a5)
	if (_M_pi != nullptr)
   29848:	3a048863          	beq	s1,zero,29bf8 <dwarf::line_table::iterator::operator++()+0x3dc>
    if (__is_single_threaded())
   2984c:	00019797          	auipc	a5,0x19
   29850:	c2c7b783          	ld	a5,-980(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   29854:	0007c783          	lbu	a5,0(a5)
   29858:	0a078a63          	beq	a5,zero,2990c <dwarf::line_table::iterator::operator++()+0xf0>
  { *__mem += __val; }
   2985c:	0304a783          	lw	a5,48(s1)
   29860:	0017879b          	addiw	a5,a5,1
   29864:	02f4a823          	sw	a5,48(s1)
  cursor cur(table->m->sec, pos);
   29868:	07843983          	ld	s3,120(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2986c:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   29870:	06913823          	sd	s1,112(sp)
    if (__is_single_threaded())
   29874:	00019797          	auipc	a5,0x19
   29878:	c047b783          	ld	a5,-1020(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2987c:	0007c783          	lbu	a5,0(a5)
   29880:	08078e63          	beq	a5,zero,2991c <dwarf::line_table::iterator::operator++()+0x100>
  { *__mem += __val; }
   29884:	0304a783          	lw	a5,48(s1)
   29888:	0017879b          	addiw	a5,a5,1
   2988c:	02f4a823          	sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   29890:	00893783          	ld	a5,8(s2)
   29894:	013787b3          	add	a5,a5,s3
   29898:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   2989c:	00019797          	auipc	a5,0x19
   298a0:	bdc7b783          	ld	a5,-1060(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   298a4:	0007c783          	lbu	a5,0(a5)
   298a8:	08078263          	beq	a5,zero,2992c <dwarf::line_table::iterator::operator++()+0x110>
    _Atomic_word __result = *__mem;
   298ac:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   298b0:	fff5079b          	addiw	a5,a0,-1
   298b4:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   298b8:	00100793          	addi	a5,zero,1
   298bc:	34f51a63          	bne	a0,a5,29c10 <dwarf::line_table::iterator::operator++()+0x3f4>
	_M_dispose();
   298c0:	0004b783          	ld	a5,0(s1)
   298c4:	0107b783          	ld	a5,16(a5)
   298c8:	00048513          	addi	a0,s1,0
   298cc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   298d0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   298d4:	00019797          	auipc	a5,0x19
   298d8:	ba47b783          	ld	a5,-1116(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   298dc:	0007c783          	lbu	a5,0(a5)
   298e0:	04078e63          	beq	a5,zero,2993c <dwarf::line_table::iterator::operator++()+0x120>
    _Atomic_word __result = *__mem;
   298e4:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   298e8:	fff5079b          	addiw	a5,a0,-1
   298ec:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   298f0:	00100793          	addi	a5,zero,1
   298f4:	30f51e63          	bne	a0,a5,29c10 <dwarf::line_table::iterator::operator++()+0x3f4>
	    _M_destroy();
   298f8:	0004b783          	ld	a5,0(s1)
   298fc:	0187b783          	ld	a5,24(a5)
   29900:	00048513          	addi	a0,s1,0
   29904:	000780e7          	jalr	ra,0(a5)
   29908:	3080006f          	jal	zero,29c10 <dwarf::line_table::iterator::operator++()+0x3f4>
      __atomic_add(__mem, __val);
   2990c:	00100593          	addi	a1,zero,1
   29910:	03048513          	addi	a0,s1,48
   29914:	9edec0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   29918:	f51ff06f          	jal	zero,29868 <dwarf::line_table::iterator::operator++()+0x4c>
   2991c:	00100593          	addi	a1,zero,1
   29920:	03048513          	addi	a0,s1,48
   29924:	9ddec0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   29928:	f69ff06f          	jal	zero,29890 <dwarf::line_table::iterator::operator++()+0x74>
      return __exchange_and_add(__mem, __val);
   2992c:	fff00593          	addi	a1,zero,-1
   29930:	03048513          	addi	a0,s1,48
   29934:	9fdec0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   29938:	f81ff06f          	jal	zero,298b8 <dwarf::line_table::iterator::operator++()+0x9c>
   2993c:	fff00593          	addi	a1,zero,-1
   29940:	03448513          	addi	a0,s1,52
   29944:	9edec0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   29948:	fa9ff06f          	jal	zero,298f0 <dwarf::line_table::iterator::operator++()+0xd4>
  if (stepped && !output)
   2994c:	30048063          	beq	s1,zero,29c4c <dwarf::line_table::iterator::operator++()+0x430>
   29950:	0a050863          	beq	a0,zero,29a00 <dwarf::line_table::iterator::operator++()+0x1e4>
  if (stepped && cur.end()) {
   29954:	00d7ea63          	bltu	a5,a3,29968 <dwarf::line_table::iterator::operator++()+0x14c>
      { return _M_ptr; }
   29958:	00043683          	ld	a3,0(s0)
   2995c:	0006b683          	ld	a3,0(a3)
    table->m->file_names_complete = true;
   29960:	00100613          	addi	a2,zero,1
   29964:	06c68823          	sb	a2,112(a3)
    if (entry.file_index < table->m->file_names.size())
   29968:	02046583          	lwu	a1,32(s0)
   2996c:	00043683          	ld	a3,0(s0)
   29970:	0006b683          	ld	a3,0(a3)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   29974:	0506b603          	ld	a2,80(a3)
   29978:	0586b683          	ld	a3,88(a3)
   2997c:	40c686b3          	sub	a3,a3,a2
   29980:	4046d693          	srai	a3,a3,0x4
   29984:	0000d517          	auipc	a0,0xd
   29988:	31c53503          	ld	a0,796(a0) # 36ca0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   2998c:	02a686b3          	mul	a3,a3,a0
   29990:	0ad5fc63          	bgeu	a1,a3,29a48 <dwarf::line_table::iterator::operator++()+0x22c>
	return *(this->_M_impl._M_start + __n);
   29994:	00159693          	slli	a3,a1,0x1
   29998:	00b686b3          	add	a3,a3,a1
   2999c:	00469693          	slli	a3,a3,0x4
   299a0:	00d60633          	add	a2,a2,a3
      entry.file = &table->m->file_names[entry.file_index];
   299a4:	00c43c23          	sd	a2,24(s0)
  section_offset get_section_offset() const { return pos - sec->begin; }
   299a8:	00873703          	ld	a4,8(a4)
   299ac:	40e787b3          	sub	a5,a5,a4
  pos = cur.get_section_offset();
   299b0:	06f43c23          	sd	a5,120(s0)
	if (_M_pi != nullptr)
   299b4:	07013483          	ld	s1,112(sp)
   299b8:	02048463          	beq	s1,zero,299e0 <dwarf::line_table::iterator::operator++()+0x1c4>
    if (__is_single_threaded())
   299bc:	00019797          	auipc	a5,0x19
   299c0:	abc7b783          	ld	a5,-1348(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   299c4:	0007c783          	lbu	a5,0(a5)
   299c8:	14078663          	beq	a5,zero,29b14 <dwarf::line_table::iterator::operator++()+0x2f8>
    _Atomic_word __result = *__mem;
   299cc:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   299d0:	fff5079b          	addiw	a5,a0,-1
   299d4:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   299d8:	00100793          	addi	a5,zero,1
   299dc:	14f50463          	beq	a0,a5,29b24 <dwarf::line_table::iterator::operator++()+0x308>
}
   299e0:	00040513          	addi	a0,s0,0
   299e4:	0a813083          	ld	ra,168(sp)
   299e8:	0a013403          	ld	s0,160(sp)
   299ec:	09813483          	ld	s1,152(sp)
   299f0:	09013903          	ld	s2,144(sp)
   299f4:	08813983          	ld	s3,136(sp)
   299f8:	0b010113          	addi	sp,sp,176
   299fc:	00008067          	jalr	zero,0(ra)
    throw format_error("unexpected end of line table");
   29a00:	01000513          	addi	a0,zero,16
   29a04:	9cdec0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   29a08:	00050493          	addi	s1,a0,0
   29a0c:	0000e597          	auipc	a1,0xe
   29a10:	1ec58593          	addi	a1,a1,492 # 37bf8 <typeinfo name for dwarf::expr_context+0x210>
   29a14:	cfdec0ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   29a18:	00019797          	auipc	a5,0x19
   29a1c:	b387b783          	ld	a5,-1224(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   29a20:	01078793          	addi	a5,a5,16
   29a24:	00f4b023          	sd	a5,0(s1)
   29a28:	00019617          	auipc	a2,0x19
   29a2c:	95063603          	ld	a2,-1712(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   29a30:	00019597          	auipc	a1,0x19
   29a34:	8785b583          	ld	a1,-1928(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   29a38:	00048513          	addi	a0,s1,0
   29a3c:	c25ec0ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   29a40:	00050413          	addi	s0,a0,0
   29a44:	1480006f          	jal	zero,29b8c <dwarf::line_table::iterator::operator++()+0x370>
                         " in line table");
   29a48:	01000513          	addi	a0,zero,16
   29a4c:	985ec0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   29a50:	00050493          	addi	s1,a0,0
      throw format_error("bad file index " + std::to_string(entry.file_index) +
   29a54:	02042583          	lw	a1,32(s0)
   29a58:	00810413          	addi	s0,sp,8
   29a5c:	00040513          	addi	a0,s0,0
   29a60:	00019317          	auipc	t1,0x19
   29a64:	a8833303          	ld	t1,-1400(t1) # 424e8 <std::__cxx11::to_string(unsigned int)@@Base+0x17e88>
   29a68:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   29a6c:	0000e617          	auipc	a2,0xe
   29a70:	1ac60613          	addi	a2,a2,428 # 37c18 <typeinfo name for dwarf::expr_context+0x230>
   29a74:	00000593          	addi	a1,zero,0
   29a78:	00040513          	addi	a0,s0,0
   29a7c:	8c5ec0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   29a80:	00050593          	addi	a1,a0,0
   29a84:	02810413          	addi	s0,sp,40
   29a88:	00040513          	addi	a0,s0,0
   29a8c:	985ec0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   29a90:	0000e597          	auipc	a1,0xe
   29a94:	19858593          	addi	a1,a1,408 # 37c28 <typeinfo name for dwarf::expr_context+0x240>
   29a98:	00040513          	addi	a0,s0,0
   29a9c:	ca5ec0ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   29aa0:	00050593          	addi	a1,a0,0
   29aa4:	04810413          	addi	s0,sp,72
   29aa8:	00040513          	addi	a0,s0,0
   29aac:	965ec0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   29ab0:	00040593          	addi	a1,s0,0
   29ab4:	00048513          	addi	a0,s1,0
   29ab8:	a89ec0ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   29abc:	00019797          	auipc	a5,0x19
   29ac0:	a947b783          	ld	a5,-1388(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   29ac4:	01078793          	addi	a5,a5,16
   29ac8:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   29acc:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   29ad0:	05810793          	addi	a5,sp,88
   29ad4:	00f50463          	beq	a0,a5,29adc <dwarf::line_table::iterator::operator++()+0x2c0>
   29ad8:	9d9ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29adc:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   29ae0:	03810793          	addi	a5,sp,56
   29ae4:	00f50463          	beq	a0,a5,29aec <dwarf::line_table::iterator::operator++()+0x2d0>
   29ae8:	9c9ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29aec:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   29af0:	01810793          	addi	a5,sp,24
   29af4:	00f50463          	beq	a0,a5,29afc <dwarf::line_table::iterator::operator++()+0x2e0>
   29af8:	9b9ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
                         " in line table");
   29afc:	00019617          	auipc	a2,0x19
   29b00:	87c63603          	ld	a2,-1924(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   29b04:	00018597          	auipc	a1,0x18
   29b08:	7a45b583          	ld	a1,1956(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   29b0c:	00048513          	addi	a0,s1,0
   29b10:	b51ec0ef          	jal	ra,16660 <__cxa_throw@plt>
      return __exchange_and_add(__mem, __val);
   29b14:	fff00593          	addi	a1,zero,-1
   29b18:	03048513          	addi	a0,s1,48
   29b1c:	815ec0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   29b20:	eb9ff06f          	jal	zero,299d8 <dwarf::line_table::iterator::operator++()+0x1bc>
	_M_dispose();
   29b24:	0004b783          	ld	a5,0(s1)
   29b28:	0107b783          	ld	a5,16(a5)
   29b2c:	00048513          	addi	a0,s1,0
   29b30:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   29b34:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   29b38:	00019797          	auipc	a5,0x19
   29b3c:	9407b783          	ld	a5,-1728(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   29b40:	0007c783          	lbu	a5,0(a5)
   29b44:	02078663          	beq	a5,zero,29b70 <dwarf::line_table::iterator::operator++()+0x354>
    _Atomic_word __result = *__mem;
   29b48:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   29b4c:	fff5079b          	addiw	a5,a0,-1
   29b50:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   29b54:	00100793          	addi	a5,zero,1
   29b58:	e8f514e3          	bne	a0,a5,299e0 <dwarf::line_table::iterator::operator++()+0x1c4>
	    _M_destroy();
   29b5c:	0004b783          	ld	a5,0(s1)
   29b60:	0187b783          	ld	a5,24(a5)
   29b64:	00048513          	addi	a0,s1,0
   29b68:	000780e7          	jalr	ra,0(a5)
  return *this;
   29b6c:	e75ff06f          	jal	zero,299e0 <dwarf::line_table::iterator::operator++()+0x1c4>
      return __exchange_and_add(__mem, __val);
   29b70:	fff00593          	addi	a1,zero,-1
   29b74:	03448513          	addi	a0,s1,52
   29b78:	fb8ec0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   29b7c:	fd9ff06f          	jal	zero,29b54 <dwarf::line_table::iterator::operator++()+0x338>
    throw format_error("unexpected end of line table");
   29b80:	00050413          	addi	s0,a0,0
   29b84:	00048513          	addi	a0,s1,0
   29b88:	8e9ec0ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   29b8c:	07013503          	ld	a0,112(sp)
   29b90:	00050863          	beq	a0,zero,29ba0 <dwarf::line_table::iterator::operator++()+0x384>
	  _M_pi->_M_release();
   29b94:	00019317          	auipc	t1,0x19
   29b98:	82c33303          	ld	t1,-2004(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   29b9c:	000300e7          	jalr	ra,0(t1)
   29ba0:	00040513          	addi	a0,s0,0
   29ba4:	aedec0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   29ba8:	00050413          	addi	s0,a0,0
   29bac:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   29bb0:	05810793          	addi	a5,sp,88
   29bb4:	00f50463          	beq	a0,a5,29bbc <dwarf::line_table::iterator::operator++()+0x3a0>
   29bb8:	8f9ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29bbc:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   29bc0:	03810793          	addi	a5,sp,56
   29bc4:	00f50463          	beq	a0,a5,29bcc <dwarf::line_table::iterator::operator++()+0x3b0>
   29bc8:	8e9ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29bcc:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   29bd0:	01810793          	addi	a5,sp,24
   29bd4:	00f50463          	beq	a0,a5,29bdc <dwarf::line_table::iterator::operator++()+0x3c0>
   29bd8:	8d9ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
                         " in line table");
   29bdc:	00048513          	addi	a0,s1,0
   29be0:	891ec0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   29be4:	fa9ff06f          	jal	zero,29b8c <dwarf::line_table::iterator::operator++()+0x370>
      { return _M_dataplus._M_p; }
   29be8:	00050413          	addi	s0,a0,0
   29bec:	fd1ff06f          	jal	zero,29bbc <dwarf::line_table::iterator::operator++()+0x3a0>
   29bf0:	00050413          	addi	s0,a0,0
   29bf4:	fd9ff06f          	jal	zero,29bcc <dwarf::line_table::iterator::operator++()+0x3b0>
  cursor cur(table->m->sec, pos);
   29bf8:	07853703          	ld	a4,120(a0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   29bfc:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   29c00:	06013823          	sd	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   29c04:	00893783          	ld	a5,8(s2)
   29c08:	00e787b3          	add	a5,a5,a4
   29c0c:	06f13c23          	sd	a5,120(sp)
line_table::iterator &line_table::iterator::operator++() {
   29c10:	00000513          	addi	a0,zero,0
   29c14:	00000493          	addi	s1,zero,0
    stepped = true;
   29c18:	00100913          	addi	s2,zero,1
    output = step(&cur);
   29c1c:	06810993          	addi	s3,sp,104
  bool end() const { return pos >= sec->end; }
   29c20:	07813783          	ld	a5,120(sp)
      { return _M_ptr; }
   29c24:	06813703          	ld	a4,104(sp)
   29c28:	01073683          	ld	a3,16(a4)
  while (!cur.end() && !output) {
   29c2c:	d2d7f0e3          	bgeu	a5,a3,2994c <dwarf::line_table::iterator::operator++()+0x130>
   29c30:	00051c63          	bne	a0,zero,29c48 <dwarf::line_table::iterator::operator++()+0x42c>
    stepped = true;
   29c34:	00090493          	addi	s1,s2,0
    output = step(&cur);
   29c38:	00098593          	addi	a1,s3,0
   29c3c:	00040513          	addi	a0,s0,0
   29c40:	b08ff0ef          	jal	ra,28f48 <dwarf::line_table::iterator::step(dwarf::cursor*)>
   29c44:	fddff06f          	jal	zero,29c20 <dwarf::line_table::iterator::operator++()+0x404>
  if (stepped && !output)
   29c48:	d20490e3          	bne	s1,zero,29968 <dwarf::line_table::iterator::operator++()+0x14c>
  if (output) {
   29c4c:	d4050ee3          	beq	a0,zero,299a8 <dwarf::line_table::iterator::operator++()+0x18c>
   29c50:	d19ff06f          	jal	zero,29968 <dwarf::line_table::iterator::operator++()+0x14c>

0000000000029c54 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>:
    : table(table), pos(pos) {
   29c54:	00b53023          	sd	a1,0(a0)
   29c58:	06c53c23          	sd	a2,120(a0)
  if (table) {
   29c5c:	02058e63          	beq	a1,zero,29c98 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)+0x44>
line_table::iterator::iterator(const line_table *table, section_offset pos)
   29c60:	ff010113          	addi	sp,sp,-16
   29c64:	00113423          	sd	ra,8(sp)
   29c68:	00813023          	sd	s0,0(sp)
   29c6c:	00050413          	addi	s0,a0,0
    regs.reset(table->m->default_is_stmt);
   29c70:	0005b783          	ld	a5,0(a1)
   29c74:	01a7c583          	lbu	a1,26(a5)
   29c78:	04050513          	addi	a0,a0,64
   29c7c:	a55fd0ef          	jal	ra,276d0 <dwarf::line_table::entry::reset(bool)>
    ++(*this);
   29c80:	00040513          	addi	a0,s0,0
   29c84:	b99ff0ef          	jal	ra,2981c <dwarf::line_table::iterator::operator++()>
}
   29c88:	00813083          	ld	ra,8(sp)
   29c8c:	00013403          	ld	s0,0(sp)
   29c90:	01010113          	addi	sp,sp,16
   29c94:	00008067          	jalr	zero,0(ra)
   29c98:	00008067          	jalr	zero,0(ra)

0000000000029c9c <dwarf::line_table::begin() const>:
line_table::iterator line_table::begin() const {
   29c9c:	ff010113          	addi	sp,sp,-16
   29ca0:	00113423          	sd	ra,8(sp)
   29ca4:	00813023          	sd	s0,0(sp)
   29ca8:	00050413          	addi	s0,a0,0
      { return _M_ptr != nullptr; }
   29cac:	0005b783          	ld	a5,0(a1)
  if (!valid())
   29cb0:	02078063          	beq	a5,zero,29cd0 <dwarf::line_table::begin() const+0x34>
  return iterator(this, m->program_offset);
   29cb4:	0107b603          	ld	a2,16(a5)
   29cb8:	f9dff0ef          	jal	ra,29c54 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
}
   29cbc:	00040513          	addi	a0,s0,0
   29cc0:	00813083          	ld	ra,8(sp)
   29cc4:	00013403          	ld	s0,0(sp)
   29cc8:	01010113          	addi	sp,sp,16
   29ccc:	00008067          	jalr	zero,0(ra)
    return iterator(nullptr, 0);
   29cd0:	00000613          	addi	a2,zero,0
   29cd4:	00000593          	addi	a1,zero,0
   29cd8:	f7dff0ef          	jal	ra,29c54 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
   29cdc:	fe1ff06f          	jal	zero,29cbc <dwarf::line_table::begin() const+0x20>

0000000000029ce0 <dwarf::line_table::end() const>:
line_table::iterator line_table::end() const {
   29ce0:	ff010113          	addi	sp,sp,-16
   29ce4:	00113423          	sd	ra,8(sp)
   29ce8:	00813023          	sd	s0,0(sp)
   29cec:	00050413          	addi	s0,a0,0
   29cf0:	0005b783          	ld	a5,0(a1)
  if (!valid())
   29cf4:	02078663          	beq	a5,zero,29d20 <dwarf::line_table::end() const+0x40>
      { return _M_ptr; }
   29cf8:	0007b783          	ld	a5,0(a5)
  size_t size() const { return end - begin; }
   29cfc:	0107b603          	ld	a2,16(a5)
   29d00:	0087b783          	ld	a5,8(a5)
  return iterator(this, m->sec->size());
   29d04:	40f60633          	sub	a2,a2,a5
   29d08:	f4dff0ef          	jal	ra,29c54 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
}
   29d0c:	00040513          	addi	a0,s0,0
   29d10:	00813083          	ld	ra,8(sp)
   29d14:	00013403          	ld	s0,0(sp)
   29d18:	01010113          	addi	sp,sp,16
   29d1c:	00008067          	jalr	zero,0(ra)
    return iterator(nullptr, 0);
   29d20:	00000613          	addi	a2,zero,0
   29d24:	00000593          	addi	a1,zero,0
   29d28:	f2dff0ef          	jal	ra,29c54 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
   29d2c:	fe1ff06f          	jal	zero,29d0c <dwarf::line_table::end() const+0x2c>

0000000000029d30 <dwarf::line_table::find_address(unsigned long) const>:
line_table::iterator line_table::find_address(taddr addr) const {
   29d30:	e4010113          	addi	sp,sp,-448
   29d34:	1a113c23          	sd	ra,440(sp)
   29d38:	1a813823          	sd	s0,432(sp)
   29d3c:	1a913423          	sd	s1,424(sp)
   29d40:	1b213023          	sd	s2,416(sp)
   29d44:	19313c23          	sd	s3,408(sp)
   29d48:	19413823          	sd	s4,400(sp)
   29d4c:	19513423          	sd	s5,392(sp)
   29d50:	00050413          	addi	s0,a0,0
   29d54:	00058493          	addi	s1,a1,0
   29d58:	00060913          	addi	s2,a2,0
  iterator prev = begin(), e = end();
   29d5c:	f41ff0ef          	jal	ra,29c9c <dwarf::line_table::begin() const>
   29d60:	00048593          	addi	a1,s1,0
   29d64:	10010513          	addi	a0,sp,256
   29d68:	f79ff0ef          	jal	ra,29ce0 <dwarf::line_table::end() const>
   29d6c:	10013a03          	ld	s4,256(sp)
   29d70:	17813983          	ld	s3,376(sp)
    return o.pos == pos && o.table == table;
   29d74:	07843783          	ld	a5,120(s0)
   29d78:	05378863          	beq	a5,s3,29dc8 <dwarf::line_table::find_address(unsigned long) const+0x98>
  iterator it = prev;
   29d7c:	00040793          	addi	a5,s0,0
   29d80:	08010713          	addi	a4,sp,128
   29d84:	08040813          	addi	a6,s0,128
   29d88:	0007b503          	ld	a0,0(a5)
   29d8c:	0087b583          	ld	a1,8(a5)
   29d90:	0107b603          	ld	a2,16(a5)
   29d94:	0187b683          	ld	a3,24(a5)
   29d98:	00a73023          	sd	a0,0(a4)
   29d9c:	00b73423          	sd	a1,8(a4)
   29da0:	00c73823          	sd	a2,16(a4)
   29da4:	00d73c23          	sd	a3,24(a4)
   29da8:	02078793          	addi	a5,a5,32
   29dac:	02070713          	addi	a4,a4,32
   29db0:	fd079ce3          	bne	a5,a6,29d88 <dwarf::line_table::find_address(unsigned long) const+0x58>
  for (++it; it != e; prev = it++) {
   29db4:	08010513          	addi	a0,sp,128
   29db8:	a65ff0ef          	jal	ra,2981c <dwarf::line_table::iterator::operator++()>
    iterator tmp(*this);
   29dbc:	10010a93          	addi	s5,sp,256
    ++(*this);
   29dc0:	08010493          	addi	s1,sp,128
   29dc4:	0800006f          	jal	zero,29e44 <dwarf::line_table::find_address(unsigned long) const+0x114>
    return o.pos == pos && o.table == table;
   29dc8:	00043783          	ld	a5,0(s0)
   29dcc:	fafa18e3          	bne	s4,a5,29d7c <dwarf::line_table::find_address(unsigned long) const+0x4c>
   29dd0:	0d80006f          	jal	zero,29ea8 <dwarf::line_table::find_address(unsigned long) const+0x178>
    iterator tmp(*this);
   29dd4:	08010793          	addi	a5,sp,128
   29dd8:	00010713          	addi	a4,sp,0
   29ddc:	0007b503          	ld	a0,0(a5)
   29de0:	0087b583          	ld	a1,8(a5)
   29de4:	0107b603          	ld	a2,16(a5)
   29de8:	0187b683          	ld	a3,24(a5)
   29dec:	00a73023          	sd	a0,0(a4)
   29df0:	00b73423          	sd	a1,8(a4)
   29df4:	00c73823          	sd	a2,16(a4)
   29df8:	00d73c23          	sd	a3,24(a4)
   29dfc:	02078793          	addi	a5,a5,32
   29e00:	02070713          	addi	a4,a4,32
   29e04:	fd579ce3          	bne	a5,s5,29ddc <dwarf::line_table::find_address(unsigned long) const+0xac>
    ++(*this);
   29e08:	00048513          	addi	a0,s1,0
   29e0c:	a11ff0ef          	jal	ra,2981c <dwarf::line_table::iterator::operator++()>
   29e10:	00010793          	addi	a5,sp,0
   29e14:	00040713          	addi	a4,s0,0
   29e18:	0007b503          	ld	a0,0(a5)
   29e1c:	0087b583          	ld	a1,8(a5)
   29e20:	0107b603          	ld	a2,16(a5)
   29e24:	0187b683          	ld	a3,24(a5)
   29e28:	00a73023          	sd	a0,0(a4)
   29e2c:	00b73423          	sd	a1,8(a4)
   29e30:	00c73823          	sd	a2,16(a4)
   29e34:	00d73c23          	sd	a3,24(a4)
   29e38:	02078793          	addi	a5,a5,32
   29e3c:	02070713          	addi	a4,a4,32
   29e40:	fc979ce3          	bne	a5,s1,29e18 <dwarf::line_table::find_address(unsigned long) const+0xe8>
    return o.pos == pos && o.table == table;
   29e44:	0f813783          	ld	a5,248(sp)
   29e48:	03378063          	beq	a5,s3,29e68 <dwarf::line_table::find_address(unsigned long) const+0x138>
    if (prev->address <= addr && it->address > addr && !prev->end_sequence)
   29e4c:	00843783          	ld	a5,8(s0)
   29e50:	f8f962e3          	bltu	s2,a5,29dd4 <dwarf::line_table::find_address(unsigned long) const+0xa4>
   29e54:	08813783          	ld	a5,136(sp)
   29e58:	f6f97ee3          	bgeu	s2,a5,29dd4 <dwarf::line_table::find_address(unsigned long) const+0xa4>
   29e5c:	02e44783          	lbu	a5,46(s0)
   29e60:	f6079ae3          	bne	a5,zero,29dd4 <dwarf::line_table::find_address(unsigned long) const+0xa4>
   29e64:	0440006f          	jal	zero,29ea8 <dwarf::line_table::find_address(unsigned long) const+0x178>
   29e68:	08013783          	ld	a5,128(sp)
   29e6c:	fefa10e3          	bne	s4,a5,29e4c <dwarf::line_table::find_address(unsigned long) const+0x11c>
  prev = e;
   29e70:	10010793          	addi	a5,sp,256
   29e74:	00040713          	addi	a4,s0,0
   29e78:	18010813          	addi	a6,sp,384
   29e7c:	0007b503          	ld	a0,0(a5)
   29e80:	0087b583          	ld	a1,8(a5)
   29e84:	0107b603          	ld	a2,16(a5)
   29e88:	0187b683          	ld	a3,24(a5)
   29e8c:	00a73023          	sd	a0,0(a4)
   29e90:	00b73423          	sd	a1,8(a4)
   29e94:	00c73823          	sd	a2,16(a4)
   29e98:	00d73c23          	sd	a3,24(a4)
   29e9c:	02078793          	addi	a5,a5,32
   29ea0:	02070713          	addi	a4,a4,32
   29ea4:	fd079ce3          	bne	a5,a6,29e7c <dwarf::line_table::find_address(unsigned long) const+0x14c>
}
   29ea8:	00040513          	addi	a0,s0,0
   29eac:	1b813083          	ld	ra,440(sp)
   29eb0:	1b013403          	ld	s0,432(sp)
   29eb4:	1a813483          	ld	s1,424(sp)
   29eb8:	1a013903          	ld	s2,416(sp)
   29ebc:	19813983          	ld	s3,408(sp)
   29ec0:	19013a03          	ld	s4,400(sp)
   29ec4:	18813a83          	ld	s5,392(sp)
   29ec8:	1c010113          	addi	sp,sp,448
   29ecc:	00008067          	jalr	zero,0(ra)

0000000000029ed0 <dwarf::line_table::get_file(unsigned int) const>:
const line_table::file *line_table::get_file(unsigned index) const {
   29ed0:	e7010113          	addi	sp,sp,-400
   29ed4:	18113423          	sd	ra,392(sp)
   29ed8:	18813023          	sd	s0,384(sp)
   29edc:	16913c23          	sd	s1,376(sp)
   29ee0:	17213823          	sd	s2,368(sp)
   29ee4:	17313423          	sd	s3,360(sp)
   29ee8:	00050413          	addi	s0,a0,0
  if (index >= m->file_names.size()) {
   29eec:	02059493          	slli	s1,a1,0x20
   29ef0:	0204d493          	srli	s1,s1,0x20
   29ef4:	00053703          	ld	a4,0(a0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   29ef8:	05873783          	ld	a5,88(a4)
   29efc:	05073683          	ld	a3,80(a4)
   29f00:	40d787b3          	sub	a5,a5,a3
   29f04:	4047d793          	srai	a5,a5,0x4
   29f08:	0000d697          	auipc	a3,0xd
   29f0c:	d986b683          	ld	a3,-616(a3) # 36ca0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   29f10:	02d787b3          	mul	a5,a5,a3
   29f14:	0af4e863          	bltu	s1,a5,29fc4 <dwarf::line_table::get_file(unsigned int) const+0xf4>
   29f18:	00058913          	addi	s2,a1,0
    if (!m->file_names_complete) {
   29f1c:	07074783          	lbu	a5,112(a4)
   29f20:	04078063          	beq	a5,zero,29f60 <dwarf::line_table::get_file(unsigned int) const+0x90>
                         std::to_string(m->file_names.size()));
   29f24:	01000513          	addi	a0,zero,16
   29f28:	ca8ec0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   29f2c:	00050493          	addi	s1,a0,0
      throw out_of_range("file name index " + std::to_string(index) +
   29f30:	00090593          	addi	a1,s2,0
   29f34:	00010913          	addi	s2,sp,0
   29f38:	00090513          	addi	a0,s2,0
   29f3c:	00018317          	auipc	t1,0x18
   29f40:	5ac33303          	ld	t1,1452(t1) # 424e8 <std::__cxx11::to_string(unsigned int)@@Base+0x17e88>
   29f44:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   29f48:	0000e617          	auipc	a2,0xe
   29f4c:	cf060613          	addi	a2,a2,-784 # 37c38 <typeinfo name for dwarf::expr_context+0x250>
   29f50:	00000593          	addi	a1,zero,0
   29f54:	00090513          	addi	a0,s2,0
   29f58:	be8ec0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   29f5c:	09c0006f          	jal	zero,29ff8 <dwarf::line_table::get_file(unsigned int) const+0x128>
      for (auto &ent : *this)
   29f60:	00050593          	addi	a1,a0,0
   29f64:	06010513          	addi	a0,sp,96
   29f68:	d35ff0ef          	jal	ra,29c9c <dwarf::line_table::begin() const>
   29f6c:	00040593          	addi	a1,s0,0
   29f70:	0e010513          	addi	a0,sp,224
   29f74:	d6dff0ef          	jal	ra,29ce0 <dwarf::line_table::end() const>
   29f78:	06010993          	addi	s3,sp,96
   29f7c:	00c0006f          	jal	zero,29f88 <dwarf::line_table::get_file(unsigned int) const+0xb8>
   29f80:	00098513          	addi	a0,s3,0
   29f84:	899ff0ef          	jal	ra,2981c <dwarf::line_table::iterator::operator++()>
   29f88:	0d813703          	ld	a4,216(sp)
   29f8c:	15813783          	ld	a5,344(sp)
   29f90:	fef718e3          	bne	a4,a5,29f80 <dwarf::line_table::get_file(unsigned int) const+0xb0>
   29f94:	0e013703          	ld	a4,224(sp)
   29f98:	06013783          	ld	a5,96(sp)
   29f9c:	fef712e3          	bne	a4,a5,29f80 <dwarf::line_table::get_file(unsigned int) const+0xb0>
   29fa0:	00043703          	ld	a4,0(s0)
   29fa4:	05873783          	ld	a5,88(a4)
   29fa8:	05073703          	ld	a4,80(a4)
   29fac:	40e787b3          	sub	a5,a5,a4
   29fb0:	4047d793          	srai	a5,a5,0x4
   29fb4:	0000d717          	auipc	a4,0xd
   29fb8:	cec73703          	ld	a4,-788(a4) # 36ca0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   29fbc:	02e787b3          	mul	a5,a5,a4
    if (index >= m->file_names.size())
   29fc0:	f6f4f2e3          	bgeu	s1,a5,29f24 <dwarf::line_table::get_file(unsigned int) const+0x54>
	return *(this->_M_impl._M_start + __n);
   29fc4:	00043703          	ld	a4,0(s0)
   29fc8:	00149793          	slli	a5,s1,0x1
   29fcc:	009787b3          	add	a5,a5,s1
   29fd0:	00479793          	slli	a5,a5,0x4
   29fd4:	05073503          	ld	a0,80(a4)
   29fd8:	00f50533          	add	a0,a0,a5
}
   29fdc:	18813083          	ld	ra,392(sp)
   29fe0:	18013403          	ld	s0,384(sp)
   29fe4:	17813483          	ld	s1,376(sp)
   29fe8:	17013903          	ld	s2,368(sp)
   29fec:	16813983          	ld	s3,360(sp)
   29ff0:	19010113          	addi	sp,sp,400
   29ff4:	00008067          	jalr	zero,0(ra)
   29ff8:	00050593          	addi	a1,a0,0
   29ffc:	02010913          	addi	s2,sp,32
   2a000:	00090513          	addi	a0,s2,0
   2a004:	c0cec0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   2a008:	0000e597          	auipc	a1,0xe
   2a00c:	c4858593          	addi	a1,a1,-952 # 37c50 <typeinfo name for dwarf::expr_context+0x268>
   2a010:	00090513          	addi	a0,s2,0
   2a014:	f2cec0ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   2a018:	00050593          	addi	a1,a0,0
   2a01c:	04010513          	addi	a0,sp,64
   2a020:	bf0ec0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   2a024:	00043703          	ld	a4,0(s0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2a028:	05873783          	ld	a5,88(a4)
   2a02c:	05073703          	ld	a4,80(a4)
   2a030:	40e787b3          	sub	a5,a5,a4
   2a034:	4047d793          	srai	a5,a5,0x4
                         std::to_string(m->file_names.size()));
   2a038:	0000d597          	auipc	a1,0xd
   2a03c:	c685b583          	ld	a1,-920(a1) # 36ca0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   2a040:	02b785b3          	mul	a1,a5,a1
   2a044:	06010513          	addi	a0,sp,96
   2a048:	00018317          	auipc	t1,0x18
   2a04c:	2b033303          	ld	t1,688(t1) # 422f8 <std::__cxx11::to_string(unsigned long)@@Base+0x17fb8>
   2a050:	000300e7          	jalr	ra,0(t1)
                         " exceeds file table size of " +
   2a054:	06010613          	addi	a2,sp,96
   2a058:	04010593          	addi	a1,sp,64
   2a05c:	0e010513          	addi	a0,sp,224
   2a060:	00018317          	auipc	t1,0x18
   2a064:	35833303          	ld	t1,856(t1) # 423b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17ce0>
   2a068:	000300e7          	jalr	ra,0(t1)
      throw out_of_range("file name index " + std::to_string(index) +
   2a06c:	0e010593          	addi	a1,sp,224
   2a070:	00048513          	addi	a0,s1,0
   2a074:	d7cec0ef          	jal	ra,165f0 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   2a078:	0e013503          	ld	a0,224(sp)
	if (!_M_is_local())
   2a07c:	0f010793          	addi	a5,sp,240
   2a080:	00f50463          	beq	a0,a5,2a088 <dwarf::line_table::get_file(unsigned int) const+0x1b8>
   2a084:	c2cec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a088:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   2a08c:	07010793          	addi	a5,sp,112
   2a090:	00f50463          	beq	a0,a5,2a098 <dwarf::line_table::get_file(unsigned int) const+0x1c8>
   2a094:	c1cec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a098:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2a09c:	05010793          	addi	a5,sp,80
   2a0a0:	00f50463          	beq	a0,a5,2a0a8 <dwarf::line_table::get_file(unsigned int) const+0x1d8>
   2a0a4:	c0cec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a0a8:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2a0ac:	03010793          	addi	a5,sp,48
   2a0b0:	00f50463          	beq	a0,a5,2a0b8 <dwarf::line_table::get_file(unsigned int) const+0x1e8>
   2a0b4:	bfcec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a0b8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2a0bc:	01010793          	addi	a5,sp,16
   2a0c0:	00f50463          	beq	a0,a5,2a0c8 <dwarf::line_table::get_file(unsigned int) const+0x1f8>
   2a0c4:	becec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
                         std::to_string(m->file_names.size()));
   2a0c8:	00018617          	auipc	a2,0x18
   2a0cc:	3f063603          	ld	a2,1008(a2) # 424b8 <std::out_of_range::~out_of_range()@GLIBCXX_3.4>
   2a0d0:	00018597          	auipc	a1,0x18
   2a0d4:	4985b583          	ld	a1,1176(a1) # 42568 <typeinfo for std::out_of_range@GLIBCXX_3.4>
   2a0d8:	00048513          	addi	a0,s1,0
   2a0dc:	d84ec0ef          	jal	ra,16660 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   2a0e0:	00050413          	addi	s0,a0,0
   2a0e4:	0e013503          	ld	a0,224(sp)
	if (!_M_is_local())
   2a0e8:	0f010793          	addi	a5,sp,240
   2a0ec:	00f50463          	beq	a0,a5,2a0f4 <dwarf::line_table::get_file(unsigned int) const+0x224>
   2a0f0:	bc0ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a0f4:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   2a0f8:	07010793          	addi	a5,sp,112
   2a0fc:	00f50463          	beq	a0,a5,2a104 <dwarf::line_table::get_file(unsigned int) const+0x234>
   2a100:	bb0ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a104:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2a108:	05010793          	addi	a5,sp,80
   2a10c:	00f50463          	beq	a0,a5,2a114 <dwarf::line_table::get_file(unsigned int) const+0x244>
   2a110:	ba0ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a114:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2a118:	03010793          	addi	a5,sp,48
   2a11c:	00f50463          	beq	a0,a5,2a124 <dwarf::line_table::get_file(unsigned int) const+0x254>
   2a120:	b90ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a124:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2a128:	01010793          	addi	a5,sp,16
   2a12c:	00f50463          	beq	a0,a5,2a134 <dwarf::line_table::get_file(unsigned int) const+0x264>
   2a130:	b80ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2a134:	00048513          	addi	a0,s1,0
   2a138:	b38ec0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2a13c:	00040513          	addi	a0,s0,0
   2a140:	d50ec0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2a144:	00050413          	addi	s0,a0,0
   2a148:	fadff06f          	jal	zero,2a0f4 <dwarf::line_table::get_file(unsigned int) const+0x224>
   2a14c:	00050413          	addi	s0,a0,0
   2a150:	fb5ff06f          	jal	zero,2a104 <dwarf::line_table::get_file(unsigned int) const+0x234>
   2a154:	00050413          	addi	s0,a0,0
   2a158:	fbdff06f          	jal	zero,2a114 <dwarf::line_table::get_file(unsigned int) const+0x244>
   2a15c:	00050413          	addi	s0,a0,0
   2a160:	fc5ff06f          	jal	zero,2a124 <dwarf::line_table::get_file(unsigned int) const+0x254>

000000000002a164 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   2a164:	00008067          	jalr	zero,0(ra)

000000000002a168 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2a168:	ff010113          	addi	sp,sp,-16
   2a16c:	00113423          	sd	ra,8(sp)
   2a170:	b40ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2a174:	00813083          	ld	ra,8(sp)
   2a178:	01010113          	addi	sp,sp,16
   2a17c:	00008067          	jalr	zero,0(ra)

000000000002a180 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   2a180:	ff010113          	addi	sp,sp,-16
   2a184:	00113423          	sd	ra,8(sp)
   2a188:	b28ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   2a18c:	00813083          	ld	ra,8(sp)
   2a190:	01010113          	addi	sp,sp,16
   2a194:	00008067          	jalr	zero,0(ra)

000000000002a198 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   2a198:	ff010113          	addi	sp,sp,-16
   2a19c:	00113423          	sd	ra,8(sp)
   2a1a0:	00813023          	sd	s0,0(sp)
   2a1a4:	03850413          	addi	s0,a0,56
	    ||
   2a1a8:	00018797          	auipc	a5,0x18
   2a1ac:	3887b783          	ld	a5,904(a5) # 42530 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbbc0>
   2a1b0:	02f58c63          	beq	a1,a5,2a1e8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   2a1b4:	0085b503          	ld	a0,8(a1)
   2a1b8:	00018797          	auipc	a5,0x18
   2a1bc:	2507b783          	ld	a5,592(a5) # 42408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbce8>
   2a1c0:	02f50463          	beq	a0,a5,2a1e8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   2a1c4:	00054703          	lbu	a4,0(a0)
   2a1c8:	02a00793          	addi	a5,zero,42
   2a1cc:	02f70863          	beq	a4,a5,2a1fc <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   2a1d0:	00018597          	auipc	a1,0x18
   2a1d4:	2385b583          	ld	a1,568(a1) # 42408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbce8>
   2a1d8:	938ec0ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   2a1dc:	00153513          	sltiu	a0,a0,1
   2a1e0:	40a00533          	sub	a0,zero,a0
   2a1e4:	00a47433          	and	s0,s0,a0
      }
   2a1e8:	00040513          	addi	a0,s0,0
   2a1ec:	00813083          	ld	ra,8(sp)
   2a1f0:	00013403          	ld	s0,0(sp)
   2a1f4:	01010113          	addi	sp,sp,16
   2a1f8:	00008067          	jalr	zero,0(ra)
	return nullptr;
   2a1fc:	00000413          	addi	s0,zero,0
   2a200:	fe9ff06f          	jal	zero,2a1e8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

000000000002a204 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   2a204:	fe010113          	addi	sp,sp,-32
   2a208:	00113c23          	sd	ra,24(sp)
   2a20c:	00813823          	sd	s0,16(sp)
   2a210:	00913423          	sd	s1,8(sp)
   2a214:	01213023          	sd	s2,0(sp)
   2a218:	00050493          	addi	s1,a0,0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   2a21c:	08853403          	ld	s0,136(a0)
   2a220:	09053903          	ld	s2,144(a0)
	  for (; __first != __last; ++__first)
   2a224:	09241063          	bne	s0,s2,2a2a4 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa0>
	_M_deallocate(_M_impl._M_start,
   2a228:	0884b503          	ld	a0,136(s1)
	if (__p)
   2a22c:	00050463          	beq	a0,zero,2a234 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x30>
   2a230:	a80ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   2a234:	0704b403          	ld	s0,112(s1)
   2a238:	0784b903          	ld	s2,120(s1)
   2a23c:	09241263          	bne	s0,s2,2a2c0 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xbc>
	_M_deallocate(_M_impl._M_start,
   2a240:	0704b503          	ld	a0,112(s1)
	if (__p)
   2a244:	00050463          	beq	a0,zero,2a24c <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x48>
   2a248:	a68ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   2a24c:	0584b503          	ld	a0,88(s1)
	if (__p)
   2a250:	00050463          	beq	a0,zero,2a258 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x54>
   2a254:	a5cec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   2a258:	0404b403          	ld	s0,64(s1)
   2a25c:	02040463          	beq	s0,zero,2a284 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x80>
    if (__is_single_threaded())
   2a260:	00018797          	auipc	a5,0x18
   2a264:	2187b783          	ld	a5,536(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a268:	0007c783          	lbu	a5,0(a5)
   2a26c:	06078463          	beq	a5,zero,2a2d4 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd0>
    _Atomic_word __result = *__mem;
   2a270:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   2a274:	fff5079b          	addiw	a5,a0,-1
   2a278:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2a27c:	00100793          	addi	a5,zero,1
   2a280:	06f50263          	beq	a0,a5,2a2e4 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xe0>
      }
   2a284:	01813083          	ld	ra,24(sp)
   2a288:	01013403          	ld	s0,16(sp)
   2a28c:	00813483          	ld	s1,8(sp)
   2a290:	00013903          	ld	s2,0(sp)
   2a294:	02010113          	addi	sp,sp,32
   2a298:	00008067          	jalr	zero,0(ra)
   2a29c:	03040413          	addi	s0,s0,48
   2a2a0:	f88904e3          	beq	s2,s0,2a228 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x24>
   2a2a4:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2a2a8:	01040793          	addi	a5,s0,16
   2a2ac:	fef508e3          	beq	a0,a5,2a29c <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x98>
   2a2b0:	a00ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2a2b4:	fe9ff06f          	jal	zero,2a29c <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x98>
   2a2b8:	02040413          	addi	s0,s0,32
   2a2bc:	f88902e3          	beq	s2,s0,2a240 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x3c>
      { return _M_dataplus._M_p; }
   2a2c0:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2a2c4:	01040793          	addi	a5,s0,16
   2a2c8:	fef508e3          	beq	a0,a5,2a2b8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
   2a2cc:	9e4ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2a2d0:	fe9ff06f          	jal	zero,2a2b8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
      return __exchange_and_add(__mem, __val);
   2a2d4:	fff00593          	addi	a1,zero,-1
   2a2d8:	03040513          	addi	a0,s0,48
   2a2dc:	854ec0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2a2e0:	f9dff06f          	jal	zero,2a27c <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x78>
	_M_dispose();
   2a2e4:	00043783          	ld	a5,0(s0)
   2a2e8:	0107b783          	ld	a5,16(a5)
   2a2ec:	00040513          	addi	a0,s0,0
   2a2f0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2a2f4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2a2f8:	00018797          	auipc	a5,0x18
   2a2fc:	1807b783          	ld	a5,384(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a300:	0007c783          	lbu	a5,0(a5)
   2a304:	02078663          	beq	a5,zero,2a330 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x12c>
    _Atomic_word __result = *__mem;
   2a308:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   2a30c:	fff5079b          	addiw	a5,a0,-1
   2a310:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2a314:	00100793          	addi	a5,zero,1
   2a318:	f6f516e3          	bne	a0,a5,2a284 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x80>
	    _M_destroy();
   2a31c:	00043783          	ld	a5,0(s0)
   2a320:	0187b783          	ld	a5,24(a5)
   2a324:	00040513          	addi	a0,s0,0
   2a328:	000780e7          	jalr	ra,0(a5)
      }
   2a32c:	f59ff06f          	jal	zero,2a284 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x80>
      return __exchange_and_add(__mem, __val);
   2a330:	fff00593          	addi	a1,zero,-1
   2a334:	03440513          	addi	a0,s0,52
   2a338:	ff9eb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2a33c:	fd9ff06f          	jal	zero,2a314 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x110>

000000000002a340 <std::__cxx11::to_string(unsigned long)>:
  {
   2a340:	fe010113          	addi	sp,sp,-32
   2a344:	00113c23          	sd	ra,24(sp)
   2a348:	00813823          	sd	s0,16(sp)
   2a34c:	00913423          	sd	s1,8(sp)
   2a350:	00050493          	addi	s1,a0,0
   2a354:	00058413          	addi	s0,a1,0
	  if (__value < (unsigned)__base) return __n;
   2a358:	00900793          	addi	a5,zero,9
   2a35c:	18b7f263          	bgeu	a5,a1,2a4e0 <std::__cxx11::to_string(unsigned long)+0x1a0>
	  if (__value < __b2) return __n + 1;
   2a360:	06300793          	addi	a5,zero,99
   2a364:	06b7f663          	bgeu	a5,a1,2a3d0 <std::__cxx11::to_string(unsigned long)+0x90>
	  if (__value < __b3) return __n + 2;
   2a368:	3e700793          	addi	a5,zero,999
   2a36c:	0ab7f063          	bgeu	a5,a1,2a40c <std::__cxx11::to_string(unsigned long)+0xcc>
	  if (__value < __b4) return __n + 3;
   2a370:	000027b7          	lui	a5,0x2
   2a374:	70f78793          	addi	a5,a5,1807 # 270f <__abi_tag-0xdb85>
   2a378:	16b7f063          	bgeu	a5,a1,2a4d8 <std::__cxx11::to_string(unsigned long)+0x198>
   2a37c:	00058713          	addi	a4,a1,0
      unsigned __n = 1;
   2a380:	00100593          	addi	a1,zero,1
	  __value /= __b4;
   2a384:	00002637          	lui	a2,0x2
   2a388:	71060613          	addi	a2,a2,1808 # 2710 <__abi_tag-0xdb84>
	  if (__value < (unsigned)__base) return __n;
   2a38c:	000186b7          	lui	a3,0x18
   2a390:	69f68693          	addi	a3,a3,1695 # 1869f <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x417>
	  if (__value < __b2) return __n + 1;
   2a394:	000f4537          	lui	a0,0xf4
   2a398:	23f50513          	addi	a0,a0,575 # f423f <__global_pointer$+0xb1a3f>
	  if (__value < __b3) return __n + 2;
   2a39c:	00989837          	lui	a6,0x989
   2a3a0:	67f80813          	addi	a6,a6,1663 # 98967f <__global_pointer$+0x946e7f>
	  if (__value < __b4) return __n + 3;
   2a3a4:	05f5e8b7          	lui	a7,0x5f5e
   2a3a8:	0ff88893          	addi	a7,a7,255 # 5f5e0ff <__global_pointer$+0x5f1b8ff>
   2a3ac:	00070793          	addi	a5,a4,0
	  __value /= __b4;
   2a3b0:	02c75733          	divu	a4,a4,a2
	  __n += 4;
   2a3b4:	0045859b          	addiw	a1,a1,4
	  if (__value < (unsigned)__base) return __n;
   2a3b8:	04f6fe63          	bgeu	a3,a5,2a414 <std::__cxx11::to_string(unsigned long)+0xd4>
	  if (__value < __b2) return __n + 1;
   2a3bc:	00f57c63          	bgeu	a0,a5,2a3d4 <std::__cxx11::to_string(unsigned long)+0x94>
	  if (__value < __b3) return __n + 2;
   2a3c0:	04f87863          	bgeu	a6,a5,2a410 <std::__cxx11::to_string(unsigned long)+0xd0>
	  if (__value < __b4) return __n + 3;
   2a3c4:	fef8e4e3          	bltu	a7,a5,2a3ac <std::__cxx11::to_string(unsigned long)+0x6c>
   2a3c8:	0035859b          	addiw	a1,a1,3
   2a3cc:	0480006f          	jal	zero,2a414 <std::__cxx11::to_string(unsigned long)+0xd4>
      unsigned __n = 1;
   2a3d0:	00100593          	addi	a1,zero,1
	  if (__value < __b2) return __n + 1;
   2a3d4:	0015859b          	addiw	a1,a1,1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a3d8:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   2a3dc:	00f4b023          	sd	a5,0(s1)
      { _M_construct(__n, __c); }
   2a3e0:	00000613          	addi	a2,zero,0
   2a3e4:	02059593          	slli	a1,a1,0x20
   2a3e8:	0205d593          	srli	a1,a1,0x20
   2a3ec:	00048513          	addi	a0,s1,0
   2a3f0:	920ec0ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   2a3f4:	0004b603          	ld	a2,0(s1)
      while (__val >= 100)
   2a3f8:	06300793          	addi	a5,zero,99
   2a3fc:	0887fe63          	bgeu	a5,s0,2a498 <std::__cxx11::to_string(unsigned long)+0x158>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   2a400:	0084b683          	ld	a3,8(s1)
      unsigned __pos = __len - 1;
   2a404:	fff6869b          	addiw	a3,a3,-1
   2a408:	0340006f          	jal	zero,2a43c <std::__cxx11::to_string(unsigned long)+0xfc>
      unsigned __n = 1;
   2a40c:	00100593          	addi	a1,zero,1
	  if (__value < __b3) return __n + 2;
   2a410:	0025859b          	addiw	a1,a1,2
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a414:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   2a418:	00f4b023          	sd	a5,0(s1)
      { _M_construct(__n, __c); }
   2a41c:	00000613          	addi	a2,zero,0
   2a420:	02059593          	slli	a1,a1,0x20
   2a424:	0205d593          	srli	a1,a1,0x20
   2a428:	00048513          	addi	a0,s1,0
   2a42c:	8e4ec0ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   2a430:	0004b603          	ld	a2,0(s1)
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   2a434:	0084b683          	ld	a3,8(s1)
      unsigned __pos = __len - 1;
   2a438:	fff6869b          	addiw	a3,a3,-1
	  auto const __num = (__val % 100) * 2;
   2a43c:	06400593          	addi	a1,zero,100
	  __first[__pos] = __digits[__num + 1];
   2a440:	00018317          	auipc	t1,0x18
   2a444:	02033303          	ld	t1,32(t1) # 42460 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb2b8>
      while (__val >= 100)
   2a448:	000028b7          	lui	a7,0x2
   2a44c:	70f88893          	addi	a7,a7,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   2a450:	02b477b3          	remu	a5,s0,a1
   2a454:	00179793          	slli	a5,a5,0x1
   2a458:	00040513          	addi	a0,s0,0
	  __val /= 100;
   2a45c:	02b45433          	divu	s0,s0,a1
	  __first[__pos] = __digits[__num + 1];
   2a460:	02069713          	slli	a4,a3,0x20
   2a464:	02075713          	srli	a4,a4,0x20
   2a468:	00e60733          	add	a4,a2,a4
   2a46c:	00f307b3          	add	a5,t1,a5
   2a470:	0017c803          	lbu	a6,1(a5)
   2a474:	01070023          	sb	a6,0(a4)
	  __first[__pos - 1] = __digits[__num];
   2a478:	fff6871b          	addiw	a4,a3,-1
   2a47c:	02071713          	slli	a4,a4,0x20
   2a480:	02075713          	srli	a4,a4,0x20
   2a484:	00e60733          	add	a4,a2,a4
   2a488:	0007c783          	lbu	a5,0(a5)
   2a48c:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   2a490:	ffe6869b          	addiw	a3,a3,-2
      while (__val >= 100)
   2a494:	faa8eee3          	bltu	a7,a0,2a450 <std::__cxx11::to_string(unsigned long)+0x110>
      if (__val >= 10)
   2a498:	00900793          	addi	a5,zero,9
   2a49c:	0487f663          	bgeu	a5,s0,2a4e8 <std::__cxx11::to_string(unsigned long)+0x1a8>
	  auto const __num = __val * 2;
   2a4a0:	00141413          	slli	s0,s0,0x1
	  __first[1] = __digits[__num + 1];
   2a4a4:	00018797          	auipc	a5,0x18
   2a4a8:	fbc7b783          	ld	a5,-68(a5) # 42460 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb2b8>
   2a4ac:	008787b3          	add	a5,a5,s0
   2a4b0:	0017c703          	lbu	a4,1(a5)
   2a4b4:	00e600a3          	sb	a4,1(a2)
	  __first[0] = __digits[__num];
   2a4b8:	0007c403          	lbu	s0,0(a5)
   2a4bc:	00860023          	sb	s0,0(a2)
  }
   2a4c0:	00048513          	addi	a0,s1,0
   2a4c4:	01813083          	ld	ra,24(sp)
   2a4c8:	01013403          	ld	s0,16(sp)
   2a4cc:	00813483          	ld	s1,8(sp)
   2a4d0:	02010113          	addi	sp,sp,32
   2a4d4:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   2a4d8:	00100593          	addi	a1,zero,1
   2a4dc:	eedff06f          	jal	zero,2a3c8 <std::__cxx11::to_string(unsigned long)+0x88>
   2a4e0:	00100593          	addi	a1,zero,1
   2a4e4:	ef5ff06f          	jal	zero,2a3d8 <std::__cxx11::to_string(unsigned long)+0x98>
	__first[0] = '0' + __val;
   2a4e8:	0304041b          	addiw	s0,s0,48
   2a4ec:	0ff47413          	andi	s0,s0,255
   2a4f0:	fcdff06f          	jal	zero,2a4bc <std::__cxx11::to_string(unsigned long)+0x17c>

000000000002a4f4 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)>:
      const unsigned __b2 = __base  * __base;
   2a4f4:	02b586bb          	mulw	a3,a1,a1
   2a4f8:	0006889b          	addiw	a7,a3,0
      const unsigned __b3 = __b2 * __base;
   2a4fc:	0005881b          	addiw	a6,a1,0
   2a500:	02b686bb          	mulw	a3,a3,a1
   2a504:	0006831b          	addiw	t1,a3,0
      const unsigned long __b4 = __b3 * __base;
   2a508:	02b686bb          	mulw	a3,a3,a1
   2a50c:	0006859b          	addiw	a1,a3,0
   2a510:	02069693          	slli	a3,a3,0x20
   2a514:	0206d693          	srli	a3,a3,0x20
	  if (__value < (unsigned)__base) return __n;
   2a518:	07056863          	bltu	a0,a6,2a588 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x94>
	  if (__value < __b2) return __n + 1;
   2a51c:	05156463          	bltu	a0,a7,2a564 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x70>
	  if (__value < __b3) return __n + 2;
   2a520:	04656863          	bltu	a0,t1,2a570 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x7c>
	  if (__value < __b4) return __n + 3;
   2a524:	02051793          	slli	a5,a0,0x20
   2a528:	0207d793          	srli	a5,a5,0x20
   2a52c:	04b56863          	bltu	a0,a1,2a57c <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x88>
      unsigned __n = 1;
   2a530:	00100513          	addi	a0,zero,1
   2a534:	fff00613          	addi	a2,zero,-1
   2a538:	02065613          	srli	a2,a2,0x20
	  __value /= __b4;
   2a53c:	02d7d7b3          	divu	a5,a5,a3
   2a540:	0007871b          	addiw	a4,a5,0
	  __n += 4;
   2a544:	0045051b          	addiw	a0,a0,4
	  if (__value < (unsigned)__base) return __n;
   2a548:	03076e63          	bltu	a4,a6,2a584 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x90>
	  if (__value < __b2) return __n + 1;
   2a54c:	01176e63          	bltu	a4,a7,2a568 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x74>
	  if (__value < __b3) return __n + 2;
   2a550:	02676263          	bltu	a4,t1,2a574 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x80>
   2a554:	00c7f7b3          	and	a5,a5,a2
	  if (__value < __b4) return __n + 3;
   2a558:	feb772e3          	bgeu	a4,a1,2a53c <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x48>
   2a55c:	0035051b          	addiw	a0,a0,3
   2a560:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   2a564:	00100513          	addi	a0,zero,1
	  if (__value < __b2) return __n + 1;
   2a568:	0015051b          	addiw	a0,a0,1
   2a56c:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   2a570:	00100513          	addi	a0,zero,1
	  if (__value < __b3) return __n + 2;
   2a574:	0025051b          	addiw	a0,a0,2
   2a578:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   2a57c:	00100513          	addi	a0,zero,1
   2a580:	fddff06f          	jal	zero,2a55c <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x68>
   2a584:	00008067          	jalr	zero,0(ra)
   2a588:	00100513          	addi	a0,zero,1
    }
   2a58c:	00008067          	jalr	zero,0(ra)

000000000002a590 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>:
      unsigned __pos = __len - 1;
   2a590:	fff5859b          	addiw	a1,a1,-1
      while (__val >= 100)
   2a594:	06300793          	addi	a5,zero,99
   2a598:	06c7fc63          	bgeu	a5,a2,2a610 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x80>
	  auto const __num = (__val % 100) * 2;
   2a59c:	06400893          	addi	a7,zero,100
	  __first[__pos] = __digits[__num + 1];
   2a5a0:	00018817          	auipc	a6,0x18
   2a5a4:	db883803          	ld	a6,-584(a6) # 42358 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb7a0>
      while (__val >= 100)
   2a5a8:	00002e37          	lui	t3,0x2
   2a5ac:	70fe0e13          	addi	t3,t3,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   2a5b0:	031677bb          	remuw	a5,a2,a7
   2a5b4:	0017979b          	slliw	a5,a5,0x1
   2a5b8:	0006031b          	addiw	t1,a2,0
	  __val /= 100;
   2a5bc:	0316563b          	divuw	a2,a2,a7
	  __first[__pos] = __digits[__num + 1];
   2a5c0:	02059693          	slli	a3,a1,0x20
   2a5c4:	0206d693          	srli	a3,a3,0x20
   2a5c8:	00d506b3          	add	a3,a0,a3
   2a5cc:	0017871b          	addiw	a4,a5,1
   2a5d0:	02071713          	slli	a4,a4,0x20
   2a5d4:	02075713          	srli	a4,a4,0x20
   2a5d8:	00e80733          	add	a4,a6,a4
   2a5dc:	00074703          	lbu	a4,0(a4)
   2a5e0:	00e68023          	sb	a4,0(a3)
	  __first[__pos - 1] = __digits[__num];
   2a5e4:	fff5871b          	addiw	a4,a1,-1
   2a5e8:	02071713          	slli	a4,a4,0x20
   2a5ec:	02075713          	srli	a4,a4,0x20
   2a5f0:	00e50733          	add	a4,a0,a4
   2a5f4:	02079793          	slli	a5,a5,0x20
   2a5f8:	0207d793          	srli	a5,a5,0x20
   2a5fc:	00f807b3          	add	a5,a6,a5
   2a600:	0007c783          	lbu	a5,0(a5)
   2a604:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   2a608:	ffe5859b          	addiw	a1,a1,-2
      while (__val >= 100)
   2a60c:	fa6e62e3          	bltu	t3,t1,2a5b0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x20>
      if (__val >= 10)
   2a610:	00900793          	addi	a5,zero,9
   2a614:	04c7f063          	bgeu	a5,a2,2a654 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0xc4>
	  auto const __num = __val * 2;
   2a618:	0016161b          	slliw	a2,a2,0x1
	  __first[1] = __digits[__num + 1];
   2a61c:	00018717          	auipc	a4,0x18
   2a620:	d3c73703          	ld	a4,-708(a4) # 42358 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb7a0>
   2a624:	0016079b          	addiw	a5,a2,1
   2a628:	02079793          	slli	a5,a5,0x20
   2a62c:	0207d793          	srli	a5,a5,0x20
   2a630:	00f707b3          	add	a5,a4,a5
   2a634:	0007c783          	lbu	a5,0(a5)
   2a638:	00f500a3          	sb	a5,1(a0)
	  __first[0] = __digits[__num];
   2a63c:	02061613          	slli	a2,a2,0x20
   2a640:	02065613          	srli	a2,a2,0x20
   2a644:	00c70733          	add	a4,a4,a2
   2a648:	00074603          	lbu	a2,0(a4)
   2a64c:	00c50023          	sb	a2,0(a0)
    }
   2a650:	00008067          	jalr	zero,0(ra)
	__first[0] = '0' + __val;
   2a654:	0306061b          	addiw	a2,a2,48
   2a658:	0ff67613          	andi	a2,a2,255
   2a65c:	ff1ff06f          	jal	zero,2a64c <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0xbc>

000000000002a660 <std::__cxx11::to_string(unsigned int)>:
  {
   2a660:	fe010113          	addi	sp,sp,-32
   2a664:	00113c23          	sd	ra,24(sp)
   2a668:	00813823          	sd	s0,16(sp)
   2a66c:	00913423          	sd	s1,8(sp)
   2a670:	00050413          	addi	s0,a0,0
   2a674:	00058493          	addi	s1,a1,0
    string __str(__detail::__to_chars_len(__val), '\0');
   2a678:	00a00593          	addi	a1,zero,10
   2a67c:	00048513          	addi	a0,s1,0
   2a680:	00018317          	auipc	t1,0x18
   2a684:	e1033303          	ld	t1,-496(t1) # 42490 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x17f9c>
   2a688:	000300e7          	jalr	ra,0(t1)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a68c:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a690:	00f43023          	sd	a5,0(s0)
      { _M_construct(__n, __c); }
   2a694:	00000613          	addi	a2,zero,0
   2a698:	02051593          	slli	a1,a0,0x20
   2a69c:	0205d593          	srli	a1,a1,0x20
   2a6a0:	00040513          	addi	a0,s0,0
   2a6a4:	e6deb0ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   2a6a8:	00048613          	addi	a2,s1,0
   2a6ac:	00842583          	lw	a1,8(s0)
   2a6b0:	00043503          	ld	a0,0(s0)
   2a6b4:	00018317          	auipc	t1,0x18
   2a6b8:	dfc33303          	ld	t1,-516(t1) # 424b0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x17f20>
   2a6bc:	000300e7          	jalr	ra,0(t1)
  }
   2a6c0:	00040513          	addi	a0,s0,0
   2a6c4:	01813083          	ld	ra,24(sp)
   2a6c8:	01013403          	ld	s0,16(sp)
   2a6cc:	00813483          	ld	s1,8(sp)
   2a6d0:	02010113          	addi	sp,sp,32
   2a6d4:	00008067          	jalr	zero,0(ra)

000000000002a6d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
   2a6d8:	fe010113          	addi	sp,sp,-32
   2a6dc:	00113c23          	sd	ra,24(sp)
   2a6e0:	00813823          	sd	s0,16(sp)
   2a6e4:	00913423          	sd	s1,8(sp)
   2a6e8:	01213023          	sd	s2,0(sp)
   2a6ec:	00050413          	addi	s0,a0,0
   2a6f0:	00058513          	addi	a0,a1,0
   2a6f4:	00060793          	addi	a5,a2,0
      { return _M_string_length; }
   2a6f8:	0085b703          	ld	a4,8(a1)
   2a6fc:	00863603          	ld	a2,8(a2)
	  const auto __size = __lhs.size() + __rhs.size();
   2a700:	00e60833          	add	a6,a2,a4
      { return _M_dataplus._M_p; }
   2a704:	0005b683          	ld	a3,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2a708:	01058593          	addi	a1,a1,16
	return _M_is_local() ? size_type(_S_local_capacity)
   2a70c:	08b68663          	beq	a3,a1,2a798 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xc0>
   2a710:	01053583          	ld	a1,16(a0)
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
   2a714:	0105fc63          	bgeu	a1,a6,2a72c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x54>
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2a718:	01078593          	addi	a1,a5,16
	return _M_is_local() ? size_type(_S_local_capacity)
   2a71c:	0007b883          	ld	a7,0(a5)
   2a720:	08b88063          	beq	a7,a1,2a7a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xc8>
   2a724:	0107b583          	ld	a1,16(a5)
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
   2a728:	0905f063          	bgeu	a1,a6,2a7a8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xd0>
      { return _M_dataplus._M_p; }
   2a72c:	0007b583          	ld	a1,0(a5)
	if (this->max_size() - (this->size() - __n1) < __n2)
   2a730:	fff00793          	addi	a5,zero,-1
   2a734:	0027d793          	srli	a5,a5,0x2
   2a738:	40e787b3          	sub	a5,a5,a4
   2a73c:	0cc7e863          	bltu	a5,a2,2a80c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x134>
	return _M_append(__s, __n);
   2a740:	c31eb0ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   2a744:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a748:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2a74c:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2a750:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2a754:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2a758:	0d278063          	beq	a5,s2,2a818 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x140>
      { _M_dataplus._M_p = __p; }
   2a75c:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2a760:	0104b783          	ld	a5,16(s1)
   2a764:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2a768:	0084b783          	ld	a5,8(s1)
   2a76c:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2a770:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2a774:	0004b423          	sd	zero,8(s1)
   2a778:	00048823          	sb	zero,16(s1)
    }
   2a77c:	00040513          	addi	a0,s0,0
   2a780:	01813083          	ld	ra,24(sp)
   2a784:	01013403          	ld	s0,16(sp)
   2a788:	00813483          	ld	s1,8(sp)
   2a78c:	00013903          	ld	s2,0(sp)
   2a790:	02010113          	addi	sp,sp,32
   2a794:	00008067          	jalr	zero,0(ra)
	return _M_is_local() ? size_type(_S_local_capacity)
   2a798:	00f00593          	addi	a1,zero,15
   2a79c:	f79ff06f          	jal	zero,2a714 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x3c>
   2a7a0:	00f00593          	addi	a1,zero,15
   2a7a4:	f85ff06f          	jal	zero,2a728 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x50>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2a7a8:	00000613          	addi	a2,zero,0
   2a7ac:	00000593          	addi	a1,zero,0
   2a7b0:	00078513          	addi	a0,a5,0
   2a7b4:	e4deb0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2a7b8:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a7bc:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2a7c0:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2a7c4:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2a7c8:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2a7cc:	03278463          	beq	a5,s2,2a7f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x11c>
      { _M_dataplus._M_p = __p; }
   2a7d0:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2a7d4:	0104b783          	ld	a5,16(s1)
   2a7d8:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2a7dc:	0084b783          	ld	a5,8(s1)
   2a7e0:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2a7e4:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2a7e8:	0004b423          	sd	zero,8(s1)
   2a7ec:	00048823          	sb	zero,16(s1)
      }
   2a7f0:	f8dff06f          	jal	zero,2a77c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa4>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2a7f4:	0084b603          	ld	a2,8(s1)
   2a7f8:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2a7fc:	fe0600e3          	beq	a2,zero,2a7dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x104>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2a800:	00090593          	addi	a1,s2,0
   2a804:	d4deb0ef          	jal	ra,16550 <memcpy@plt>
   2a808:	fd5ff06f          	jal	zero,2a7dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x104>
	  __throw_length_error(__N(__s));
   2a80c:	0000c517          	auipc	a0,0xc
   2a810:	75450513          	addi	a0,a0,1876 # 36f60 <std::piecewise_construct+0x2b0>
   2a814:	bcdeb0ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2a818:	0084b603          	ld	a2,8(s1)
   2a81c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2a820:	f40604e3          	beq	a2,zero,2a768 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x90>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2a824:	00090593          	addi	a1,s2,0
   2a828:	d29eb0ef          	jal	ra,16550 <memcpy@plt>
   2a82c:	f3dff06f          	jal	zero,2a768 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x90>

000000000002a830 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)>:
      if (__n != 0)
   2a830:	16058863          	beq	a1,zero,2a9a0 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x170>
    vector<_Tp, _Alloc>::
   2a834:	fc010113          	addi	sp,sp,-64
   2a838:	02113c23          	sd	ra,56(sp)
   2a83c:	02813823          	sd	s0,48(sp)
   2a840:	02913423          	sd	s1,40(sp)
   2a844:	03213023          	sd	s2,32(sp)
   2a848:	01313c23          	sd	s3,24(sp)
   2a84c:	01413823          	sd	s4,16(sp)
   2a850:	01513423          	sd	s5,8(sp)
   2a854:	00050993          	addi	s3,a0,0
   2a858:	00058413          	addi	s0,a1,0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2a85c:	00853683          	ld	a3,8(a0)
   2a860:	00053483          	ld	s1,0(a0)
   2a864:	409684b3          	sub	s1,a3,s1
	  if (__size > max_size() || __navail > max_size() - __size)
   2a868:	fff00793          	addi	a5,zero,-1
   2a86c:	0017d793          	srli	a5,a5,0x1
   2a870:	409787b3          	sub	a5,a5,s1
					 - this->_M_impl._M_finish);
   2a874:	01053703          	ld	a4,16(a0)
   2a878:	40d70733          	sub	a4,a4,a3
	  if (__navail >= __n)
   2a87c:	06b76063          	bltu	a4,a1,2a8dc <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xac>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   2a880:	00068023          	sb	zero,0(a3)
	      ++__first;
   2a884:	00168513          	addi	a0,a3,1
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   2a888:	00100793          	addi	a5,zero,1
   2a88c:	02f59663          	bne	a1,a5,2a8b8 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x88>
	      this->_M_impl._M_finish =
   2a890:	00a9b423          	sd	a0,8(s3)
    }
   2a894:	03813083          	ld	ra,56(sp)
   2a898:	03013403          	ld	s0,48(sp)
   2a89c:	02813483          	ld	s1,40(sp)
   2a8a0:	02013903          	ld	s2,32(sp)
   2a8a4:	01813983          	ld	s3,24(sp)
   2a8a8:	01013a03          	ld	s4,16(sp)
   2a8ac:	00813a83          	ld	s5,8(sp)
   2a8b0:	04010113          	addi	sp,sp,64
   2a8b4:	00008067          	jalr	zero,0(ra)
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   2a8b8:	00b684b3          	add	s1,a3,a1
      if (const size_t __len = __last - __first)
   2a8bc:	fff58613          	addi	a2,a1,-1
   2a8c0:	00061663          	bne	a2,zero,2a8cc <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x9c>
      return __first + __n;
   2a8c4:	00048513          	addi	a0,s1,0
   2a8c8:	fc9ff06f          	jal	zero,2a890 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x60>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
   2a8cc:	00000593          	addi	a1,zero,0
   2a8d0:	cb1eb0ef          	jal	ra,16580 <memset@plt>
      return __first + __n;
   2a8d4:	00048513          	addi	a0,s1,0
   2a8d8:	fb9ff06f          	jal	zero,2a890 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x60>
	if (max_size() - size() < __n)
   2a8dc:	06b7e263          	bltu	a5,a1,2a940 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x110>
	const size_type __len = size() + (std::max)(size(), __n);
   2a8e0:	00048793          	addi	a5,s1,0
   2a8e4:	00b4f463          	bgeu	s1,a1,2a8ec <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xbc>
   2a8e8:	00058793          	addi	a5,a1,0
   2a8ec:	009787b3          	add	a5,a5,s1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2a8f0:	0497ee63          	bltu	a5,s1,2a94c <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x11c>
   2a8f4:	00078a13          	addi	s4,a5,0
   2a8f8:	0007d663          	bge	a5,zero,2a904 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xd4>
   2a8fc:	fff00a13          	addi	s4,zero,-1
   2a900:	001a5a13          	srli	s4,s4,0x1
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2a904:	00000913          	addi	s2,zero,0
   2a908:	00078863          	beq	a5,zero,2a918 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xe8>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2a90c:	000a0513          	addi	a0,s4,0
   2a910:	bb1eb0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   2a914:	00050913          	addi	s2,a0,0
		      std::__uninitialized_default_n_a(__new_start + __size,
   2a918:	00990533          	add	a0,s2,s1
   2a91c:	00050023          	sb	zero,0(a0)
      if (__n <= 0)
   2a920:	00100793          	addi	a5,zero,1
   2a924:	02f41a63          	bne	s0,a5,2a958 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x128>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   2a928:	0009ba83          	ld	s5,0(s3)
      ptrdiff_t __count = __last - __first;
   2a92c:	0089b603          	ld	a2,8(s3)
   2a930:	41560633          	sub	a2,a2,s5
      if (__count > 0)
   2a934:	02c04e63          	blt	zero,a2,2a970 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x140>
	if (__p)
   2a938:	040a8663          	beq	s5,zero,2a984 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x154>
   2a93c:	0400006f          	jal	zero,2a97c <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x14c>
	  __throw_length_error(__N(__s));
   2a940:	0000c517          	auipc	a0,0xc
   2a944:	04050513          	addi	a0,a0,64 # 36980 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x10>
   2a948:	a99eb0ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2a94c:	fff00a13          	addi	s4,zero,-1
   2a950:	001a5a13          	srli	s4,s4,0x1
   2a954:	fb9ff06f          	jal	zero,2a90c <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xdc>
      if (const size_t __len = __last - __first)
   2a958:	fff40613          	addi	a2,s0,-1
   2a95c:	fc0606e3          	beq	a2,zero,2a928 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xf8>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
   2a960:	00000593          	addi	a1,zero,0
   2a964:	00150513          	addi	a0,a0,1
   2a968:	c19eb0ef          	jal	ra,16580 <memset@plt>
   2a96c:	fbdff06f          	jal	zero,2a928 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xf8>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   2a970:	000a8593          	addi	a1,s5,0
   2a974:	00090513          	addi	a0,s2,0
   2a978:	da9eb0ef          	jal	ra,16720 <memmove@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2a97c:	000a8513          	addi	a0,s5,0
   2a980:	b31eb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	      this->_M_impl._M_start = __new_start;
   2a984:	0129b023          	sd	s2,0(s3)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   2a988:	008484b3          	add	s1,s1,s0
   2a98c:	009904b3          	add	s1,s2,s1
   2a990:	0099b423          	sd	s1,8(s3)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   2a994:	01490933          	add	s2,s2,s4
   2a998:	0129b823          	sd	s2,16(s3)
    }
   2a99c:	ef9ff06f          	jal	zero,2a894 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x64>
   2a9a0:	00008067          	jalr	zero,0(ra)

000000000002a9a4 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>:
      basic_string<_CharT, _Traits, _Alloc>::
   2a9a4:	fd010113          	addi	sp,sp,-48
   2a9a8:	02113423          	sd	ra,40(sp)
   2a9ac:	02813023          	sd	s0,32(sp)
   2a9b0:	00913c23          	sd	s1,24(sp)
   2a9b4:	01213823          	sd	s2,16(sp)
   2a9b8:	00050413          	addi	s0,a0,0
   2a9bc:	00058913          	addi	s2,a1,0
   2a9c0:	40b604b3          	sub	s1,a2,a1
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   2a9c4:	00913423          	sd	s1,8(sp)
	if (__dnew > size_type(_S_local_capacity))
   2a9c8:	00f00793          	addi	a5,zero,15
   2a9cc:	0497e263          	bltu	a5,s1,2aa10 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x6c>
      { return _M_dataplus._M_p; }
   2a9d0:	00053503          	ld	a0,0(a0)
	if (__n == 1)
   2a9d4:	00100793          	addi	a5,zero,1
   2a9d8:	06f49063          	bne	s1,a5,2aa38 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x94>
	__c1 = __c2;
   2a9dc:	0005c783          	lbu	a5,0(a1)
   2a9e0:	00f50023          	sb	a5,0(a0)
	_M_set_length(__dnew);
   2a9e4:	00813703          	ld	a4,8(sp)
      { _M_string_length = __length; }
   2a9e8:	00e43423          	sd	a4,8(s0)
   2a9ec:	00043783          	ld	a5,0(s0)
   2a9f0:	00e787b3          	add	a5,a5,a4
   2a9f4:	00078023          	sb	zero,0(a5)
      }
   2a9f8:	02813083          	ld	ra,40(sp)
   2a9fc:	02013403          	ld	s0,32(sp)
   2aa00:	01813483          	ld	s1,24(sp)
   2aa04:	01013903          	ld	s2,16(sp)
   2aa08:	03010113          	addi	sp,sp,48
   2aa0c:	00008067          	jalr	zero,0(ra)
	    _M_data(_M_create(__dnew, size_type(0)));
   2aa10:	00000613          	addi	a2,zero,0
   2aa14:	00810593          	addi	a1,sp,8
   2aa18:	c99eb0ef          	jal	ra,166b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
   2aa1c:	00a43023          	sd	a0,0(s0)
      { _M_allocated_capacity = __capacity; }
   2aa20:	00813783          	ld	a5,8(sp)
   2aa24:	00f43823          	sd	a5,16(s0)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2aa28:	00048613          	addi	a2,s1,0
   2aa2c:	00090593          	addi	a1,s2,0
   2aa30:	b21eb0ef          	jal	ra,16550 <memcpy@plt>
   2aa34:	fb1ff06f          	jal	zero,2a9e4 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x40>
	if (__n == 0)
   2aa38:	fa0486e3          	beq	s1,zero,2a9e4 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x40>
   2aa3c:	fedff06f          	jal	zero,2aa28 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x84>

000000000002aa40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
   2aa40:	fe010113          	addi	sp,sp,-32
   2aa44:	00113c23          	sd	ra,24(sp)
   2aa48:	00813823          	sd	s0,16(sp)
   2aa4c:	00913423          	sd	s1,8(sp)
   2aa50:	01213023          	sd	s2,0(sp)
   2aa54:	00050413          	addi	s0,a0,0
   2aa58:	00058793          	addi	a5,a1,0
   2aa5c:	00060493          	addi	s1,a2,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2aa60:	01050913          	addi	s2,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2aa64:	01253023          	sd	s2,0(a0)
      { return _M_dataplus._M_p; }
   2aa68:	0005b583          	ld	a1,0(a1)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   2aa6c:	0087b603          	ld	a2,8(a5)
   2aa70:	00000693          	addi	a3,zero,0
   2aa74:	00c58633          	add	a2,a1,a2
   2aa78:	00018317          	auipc	t1,0x18
   2aa7c:	89033303          	ld	t1,-1904(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17964>
   2aa80:	000300e7          	jalr	ra,0(t1)
      { return _M_dataplus._M_p; }
   2aa84:	0004b583          	ld	a1,0(s1)
      { return _M_string_length; }
   2aa88:	0084b603          	ld	a2,8(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   2aa8c:	00843703          	ld	a4,8(s0)
   2aa90:	fff00793          	addi	a5,zero,-1
   2aa94:	0027d793          	srli	a5,a5,0x2
   2aa98:	40e787b3          	sub	a5,a5,a4
   2aa9c:	00c7e863          	bltu	a5,a2,2aaac <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6c>
	return _M_append(__s, __n);
   2aaa0:	00040513          	addi	a0,s0,0
   2aaa4:	8cdeb0ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   2aaa8:	0280006f          	jal	zero,2aad0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x90>
	  __throw_length_error(__N(__s));
   2aaac:	0000c517          	auipc	a0,0xc
   2aab0:	4b450513          	addi	a0,a0,1204 # 36f60 <std::piecewise_construct+0x2b0>
   2aab4:	92deb0ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   2aab8:	00050493          	addi	s1,a0,0
   2aabc:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2aac0:	01250463          	beq	a0,s2,2aac8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x88>
   2aac4:	9edeb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2aac8:	00048513          	addi	a0,s1,0
   2aacc:	bc5eb0ef          	jal	ra,16690 <_Unwind_Resume@plt>
    }
   2aad0:	00040513          	addi	a0,s0,0
   2aad4:	01813083          	ld	ra,24(sp)
   2aad8:	01013403          	ld	s0,16(sp)
   2aadc:	00813483          	ld	s1,8(sp)
   2aae0:	00013903          	ld	s2,0(sp)
   2aae4:	02010113          	addi	sp,sp,32
   2aae8:	00008067          	jalr	zero,0(ra)

000000000002aaec <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
      vector<_Tp, _Alloc>::
   2aaec:	fa010113          	addi	sp,sp,-96
   2aaf0:	04113c23          	sd	ra,88(sp)
   2aaf4:	04813823          	sd	s0,80(sp)
   2aaf8:	04913423          	sd	s1,72(sp)
   2aafc:	05213023          	sd	s2,64(sp)
   2ab00:	03313c23          	sd	s3,56(sp)
   2ab04:	03413823          	sd	s4,48(sp)
   2ab08:	03513423          	sd	s5,40(sp)
   2ab0c:	03613023          	sd	s6,32(sp)
   2ab10:	01713c23          	sd	s7,24(sp)
   2ab14:	01813823          	sd	s8,16(sp)
   2ab18:	01913423          	sd	s9,8(sp)
   2ab1c:	01a13023          	sd	s10,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2ab20:	00853b83          	ld	s7,8(a0)
   2ab24:	00053983          	ld	s3,0(a0)
   2ab28:	413b87b3          	sub	a5,s7,s3
   2ab2c:	4057d793          	srai	a5,a5,0x5
	if (max_size() - size() < __n)
   2ab30:	fff00713          	addi	a4,zero,-1
   2ab34:	00675713          	srli	a4,a4,0x6
   2ab38:	04e78463          	beq	a5,a4,2ab80 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x94>
   2ab3c:	00050a93          	addi	s5,a0,0
   2ab40:	00058913          	addi	s2,a1,0
   2ab44:	00060413          	addi	s0,a2,0
   2ab48:	00058d13          	addi	s10,a1,0
      return __a;
   2ab4c:	00078713          	addi	a4,a5,0
      if (__a < __b)
   2ab50:	033b8e63          	beq	s7,s3,2ab8c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa0>
	const size_type __len = size() + (std::max)(size(), __n);
   2ab54:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2ab58:	1af76063          	bltu	a4,a5,2acf8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x20c>
   2ab5c:	00070a13          	addi	s4,a4,0
   2ab60:	fff00793          	addi	a5,zero,-1
   2ab64:	0067d793          	srli	a5,a5,0x6
   2ab68:	00e7f463          	bgeu	a5,a4,2ab70 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x84>
   2ab6c:	00078a13          	addi	s4,a5,0
   2ab70:	413904b3          	sub	s1,s2,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2ab74:	00000b13          	addi	s6,zero,0
   2ab78:	18070c63          	beq	a4,zero,2ad10 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x224>
   2ab7c:	1880006f          	jal	zero,2ad04 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x218>
	  __throw_length_error(__N(__s));
   2ab80:	0000c517          	auipc	a0,0xc
   2ab84:	ee850513          	addi	a0,a0,-280 # 36a68 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   2ab88:	859eb0ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   2ab8c:	00100713          	addi	a4,zero,1
   2ab90:	fc5ff06f          	jal	zero,2ab54 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x68>
      for (; __first != __last; ++__first, (void)++__cur)
   2ab94:	073d0463          	beq	s10,s3,2abfc <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x110>
   2ab98:	01098493          	addi	s1,s3,16
   2ab9c:	41390c33          	sub	s8,s2,s3
   2aba0:	018b0c33          	add	s8,s6,s8
      _ForwardIterator __cur = __result;
   2aba4:	000b0413          	addi	s0,s6,0
   2aba8:	0240006f          	jal	zero,2abcc <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe0>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2abac:	ff84b603          	ld	a2,-8(s1)
   2abb0:	00160613          	addi	a2,a2,1
   2abb4:	02061e63          	bne	a2,zero,2abf0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x104>
      { _M_string_length = __length; }
   2abb8:	ff8cb783          	ld	a5,-8(s9)
   2abbc:	00f43423          	sd	a5,8(s0)
      for (; __first != __last; ++__first, (void)++__cur)
   2abc0:	02040413          	addi	s0,s0,32
   2abc4:	02048493          	addi	s1,s1,32
   2abc8:	03840c63          	beq	s0,s8,2ac00 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x114>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2abcc:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2abd0:	00a43023          	sd	a0,0(s0)
      _M_data() const
   2abd4:	00048c93          	addi	s9,s1,0
      { return _M_dataplus._M_p; }
   2abd8:	ff04b783          	ld	a5,-16(s1)
	if (__str._M_is_local())
   2abdc:	fc9788e3          	beq	a5,s1,2abac <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc0>
      { _M_dataplus._M_p = __p; }
   2abe0:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2abe4:	0004b783          	ld	a5,0(s1)
   2abe8:	00f43823          	sd	a5,16(s0)
   2abec:	fcdff06f          	jal	zero,2abb8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2abf0:	00048593          	addi	a1,s1,0
   2abf4:	95deb0ef          	jal	ra,16550 <memcpy@plt>
   2abf8:	fc1ff06f          	jal	zero,2abb8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc>
      _ForwardIterator __cur = __result;
   2abfc:	000b0c13          	addi	s8,s6,0
	      ++__new_finish;
   2ac00:	020c0c13          	addi	s8,s8,32
      for (; __first != __last; ++__first, (void)++__cur)
   2ac04:	077d0463          	beq	s10,s7,2ac6c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x180>
   2ac08:	01090413          	addi	s0,s2,16
   2ac0c:	010b8d13          	addi	s10,s7,16
      _ForwardIterator __cur = __result;
   2ac10:	000c0493          	addi	s1,s8,0
   2ac14:	0240006f          	jal	zero,2ac38 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x14c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2ac18:	ff85b603          	ld	a2,-8(a1)
   2ac1c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2ac20:	02061e63          	bne	a2,zero,2ac5c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x170>
      { _M_string_length = __length; }
   2ac24:	ff8cb783          	ld	a5,-8(s9)
   2ac28:	00f4b423          	sd	a5,8(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   2ac2c:	02048493          	addi	s1,s1,32
   2ac30:	02040413          	addi	s0,s0,32
   2ac34:	028d0863          	beq	s10,s0,2ac64 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x178>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ac38:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2ac3c:	00a4b023          	sd	a0,0(s1)
      _M_data() const
   2ac40:	00040c93          	addi	s9,s0,0
      { return _M_dataplus._M_p; }
   2ac44:	ff043583          	ld	a1,-16(s0)
	if (__str._M_is_local())
   2ac48:	fcb408e3          	beq	s0,a1,2ac18 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x12c>
      { _M_dataplus._M_p = __p; }
   2ac4c:	00b4b023          	sd	a1,0(s1)
      { _M_allocated_capacity = __capacity; }
   2ac50:	00043783          	ld	a5,0(s0)
   2ac54:	00f4b823          	sd	a5,16(s1)
   2ac58:	fcdff06f          	jal	zero,2ac24 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x138>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2ac5c:	8f5eb0ef          	jal	ra,16550 <memcpy@plt>
   2ac60:	fc5ff06f          	jal	zero,2ac24 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x138>
   2ac64:	412b8933          	sub	s2,s7,s2
   2ac68:	012c0c33          	add	s8,s8,s2
	if (__p)
   2ac6c:	00098663          	beq	s3,zero,2ac78 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x18c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2ac70:	00098513          	addi	a0,s3,0
   2ac74:	83deb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2ac78:	016ab023          	sd	s6,0(s5)
      this->_M_impl._M_finish = __new_finish;
   2ac7c:	018ab423          	sd	s8,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2ac80:	005a1a13          	slli	s4,s4,0x5
   2ac84:	014b0a33          	add	s4,s6,s4
   2ac88:	014ab823          	sd	s4,16(s5)
    }
   2ac8c:	05813083          	ld	ra,88(sp)
   2ac90:	05013403          	ld	s0,80(sp)
   2ac94:	04813483          	ld	s1,72(sp)
   2ac98:	04013903          	ld	s2,64(sp)
   2ac9c:	03813983          	ld	s3,56(sp)
   2aca0:	03013a03          	ld	s4,48(sp)
   2aca4:	02813a83          	ld	s5,40(sp)
   2aca8:	02013b03          	ld	s6,32(sp)
   2acac:	01813b83          	ld	s7,24(sp)
   2acb0:	01013c03          	ld	s8,16(sp)
   2acb4:	00813c83          	ld	s9,8(sp)
   2acb8:	00013d03          	ld	s10,0(sp)
   2acbc:	06010113          	addi	sp,sp,96
   2acc0:	00008067          	jalr	zero,0(ra)
      __catch(...)
   2acc4:	eeceb0ef          	jal	ra,163b0 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   2acc8:	020b1263          	bne	s6,zero,2acec <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x200>
      { return _M_dataplus._M_p; }
   2accc:	0004b503          	ld	a0,0(s1)
	if (!_M_is_local())
   2acd0:	01850463          	beq	a0,s8,2acd8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1ec>
   2acd4:	fdceb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	  __throw_exception_again;
   2acd8:	8e9eb0ef          	jal	ra,165c0 <__cxa_rethrow@plt>
      __catch(...)
   2acdc:	00050413          	addi	s0,a0,0
   2ace0:	951eb0ef          	jal	ra,16630 <__cxa_end_catch@plt>
   2ace4:	00040513          	addi	a0,s0,0
   2ace8:	9a9eb0ef          	jal	ra,16690 <_Unwind_Resume@plt>
   2acec:	000b0513          	addi	a0,s6,0
   2acf0:	fc0eb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2acf4:	fe5ff06f          	jal	zero,2acd8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1ec>
   2acf8:	413904b3          	sub	s1,s2,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2acfc:	fff00a13          	addi	s4,zero,-1
   2ad00:	006a5a13          	srli	s4,s4,0x6
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2ad04:	005a1513          	slli	a0,s4,0x5
   2ad08:	fb8eb0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   2ad0c:	00050b13          	addi	s6,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   2ad10:	009b04b3          	add	s1,s6,s1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ad14:	01048c13          	addi	s8,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2ad18:	0184b023          	sd	s8,0(s1)
      { return _M_dataplus._M_p; }
   2ad1c:	00043583          	ld	a1,0(s0)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   2ad20:	00843603          	ld	a2,8(s0)
   2ad24:	00000693          	addi	a3,zero,0
   2ad28:	00c58633          	add	a2,a1,a2
   2ad2c:	00048513          	addi	a0,s1,0
   2ad30:	00017317          	auipc	t1,0x17
   2ad34:	5d833303          	ld	t1,1496(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17964>
   2ad38:	000300e7          	jalr	ra,0(t1)
      }
   2ad3c:	e59ff06f          	jal	zero,2ab94 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa8>

000000000002ad40 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   2ad40:	fa010113          	addi	sp,sp,-96
   2ad44:	04113c23          	sd	ra,88(sp)
   2ad48:	04813823          	sd	s0,80(sp)
   2ad4c:	04913423          	sd	s1,72(sp)
   2ad50:	05213023          	sd	s2,64(sp)
   2ad54:	03313c23          	sd	s3,56(sp)
   2ad58:	03413823          	sd	s4,48(sp)
   2ad5c:	03513423          	sd	s5,40(sp)
   2ad60:	03613023          	sd	s6,32(sp)
   2ad64:	01713c23          	sd	s7,24(sp)
   2ad68:	01813823          	sd	s8,16(sp)
   2ad6c:	01913423          	sd	s9,8(sp)
   2ad70:	01a13023          	sd	s10,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2ad74:	00853b83          	ld	s7,8(a0)
   2ad78:	00053a03          	ld	s4,0(a0)
   2ad7c:	414b87b3          	sub	a5,s7,s4
   2ad80:	4057d793          	srai	a5,a5,0x5
	if (max_size() - size() < __n)
   2ad84:	fff00713          	addi	a4,zero,-1
   2ad88:	00675713          	srli	a4,a4,0x6
   2ad8c:	04e78463          	beq	a5,a4,2add4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x94>
   2ad90:	00050a93          	addi	s5,a0,0
   2ad94:	00058913          	addi	s2,a1,0
   2ad98:	00060413          	addi	s0,a2,0
   2ad9c:	00058d13          	addi	s10,a1,0
      return __a;
   2ada0:	00078713          	addi	a4,a5,0
      if (__a < __b)
   2ada4:	034b8e63          	beq	s7,s4,2ade0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa0>
	const size_type __len = size() + (std::max)(size(), __n);
   2ada8:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2adac:	16f76663          	bltu	a4,a5,2af18 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1d8>
   2adb0:	00070b13          	addi	s6,a4,0
   2adb4:	fff00793          	addi	a5,zero,-1
   2adb8:	0067d793          	srli	a5,a5,0x6
   2adbc:	00e7f463          	bgeu	a5,a4,2adc4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x84>
   2adc0:	00078b13          	addi	s6,a5,0
   2adc4:	414904b3          	sub	s1,s2,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2adc8:	00000993          	addi	s3,zero,0
   2adcc:	16070263          	beq	a4,zero,2af30 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1f0>
   2add0:	1540006f          	jal	zero,2af24 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1e4>
	  __throw_length_error(__N(__s));
   2add4:	0000c517          	auipc	a0,0xc
   2add8:	c9450513          	addi	a0,a0,-876 # 36a68 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   2addc:	e04eb0ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   2ade0:	00100713          	addi	a4,zero,1
   2ade4:	fc5ff06f          	jal	zero,2ada8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x68>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2ade8:	00843603          	ld	a2,8(s0)
   2adec:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2adf0:	16060263          	beq	a2,zero,2af54 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x214>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2adf4:	000c0593          	addi	a1,s8,0
   2adf8:	f58eb0ef          	jal	ra,16550 <memcpy@plt>
   2adfc:	1580006f          	jal	zero,2af54 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x214>
   2ae00:	ff85b603          	ld	a2,-8(a1)
   2ae04:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2ae08:	02061e63          	bne	a2,zero,2ae44 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x104>
      { _M_string_length = __length; }
   2ae0c:	ff8c3783          	ld	a5,-8(s8)
   2ae10:	00f43423          	sd	a5,8(s0)
   2ae14:	02040413          	addi	s0,s0,32
   2ae18:	02048493          	addi	s1,s1,32
   2ae1c:	03940a63          	beq	s0,s9,2ae50 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x110>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ae20:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2ae24:	00a43023          	sd	a0,0(s0)
      _M_data() const
   2ae28:	00048c13          	addi	s8,s1,0
      { return _M_dataplus._M_p; }
   2ae2c:	ff04b583          	ld	a1,-16(s1)
	if (__str._M_is_local())
   2ae30:	fcb488e3          	beq	s1,a1,2ae00 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xc0>
      { _M_dataplus._M_p = __p; }
   2ae34:	00b43023          	sd	a1,0(s0)
      { _M_allocated_capacity = __capacity; }
   2ae38:	0004b783          	ld	a5,0(s1)
   2ae3c:	00f43823          	sd	a5,16(s0)
   2ae40:	fcdff06f          	jal	zero,2ae0c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xcc>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2ae44:	f0ceb0ef          	jal	ra,16550 <memcpy@plt>
   2ae48:	fc5ff06f          	jal	zero,2ae0c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xcc>
      _ForwardIterator __cur = __result;
   2ae4c:	00098c93          	addi	s9,s3,0
	      ++__new_finish;
   2ae50:	020c8c93          	addi	s9,s9,32
      for (; __first != __last; ++__first, (void)++__cur)
   2ae54:	077d0663          	beq	s10,s7,2aec0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x180>
   2ae58:	01090413          	addi	s0,s2,16
   2ae5c:	010b8d13          	addi	s10,s7,16
      _ForwardIterator __cur = __result;
   2ae60:	000c8493          	addi	s1,s9,0
   2ae64:	0240006f          	jal	zero,2ae88 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x148>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2ae68:	ff843603          	ld	a2,-8(s0)
   2ae6c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2ae70:	02061e63          	bne	a2,zero,2aeac <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x16c>
      { _M_string_length = __length; }
   2ae74:	ff8c3783          	ld	a5,-8(s8)
   2ae78:	00f4b423          	sd	a5,8(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   2ae7c:	02048493          	addi	s1,s1,32
   2ae80:	02040413          	addi	s0,s0,32
   2ae84:	03a40a63          	beq	s0,s10,2aeb8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x178>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ae88:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2ae8c:	00a4b023          	sd	a0,0(s1)
      _M_data() const
   2ae90:	00040c13          	addi	s8,s0,0
      { return _M_dataplus._M_p; }
   2ae94:	ff043783          	ld	a5,-16(s0)
	if (__str._M_is_local())
   2ae98:	fc8788e3          	beq	a5,s0,2ae68 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x128>
      { _M_dataplus._M_p = __p; }
   2ae9c:	00f4b023          	sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   2aea0:	00043783          	ld	a5,0(s0)
   2aea4:	00f4b823          	sd	a5,16(s1)
   2aea8:	fcdff06f          	jal	zero,2ae74 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x134>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2aeac:	00040593          	addi	a1,s0,0
   2aeb0:	ea0eb0ef          	jal	ra,16550 <memcpy@plt>
   2aeb4:	fc1ff06f          	jal	zero,2ae74 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x134>
   2aeb8:	412b8933          	sub	s2,s7,s2
   2aebc:	012c8cb3          	add	s9,s9,s2
	if (__p)
   2aec0:	000a0663          	beq	s4,zero,2aecc <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x18c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2aec4:	000a0513          	addi	a0,s4,0
   2aec8:	de8eb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2aecc:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   2aed0:	019ab423          	sd	s9,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2aed4:	005b1b13          	slli	s6,s6,0x5
   2aed8:	016989b3          	add	s3,s3,s6
   2aedc:	013ab823          	sd	s3,16(s5)
    }
   2aee0:	05813083          	ld	ra,88(sp)
   2aee4:	05013403          	ld	s0,80(sp)
   2aee8:	04813483          	ld	s1,72(sp)
   2aeec:	04013903          	ld	s2,64(sp)
   2aef0:	03813983          	ld	s3,56(sp)
   2aef4:	03013a03          	ld	s4,48(sp)
   2aef8:	02813a83          	ld	s5,40(sp)
   2aefc:	02013b03          	ld	s6,32(sp)
   2af00:	01813b83          	ld	s7,24(sp)
   2af04:	01013c03          	ld	s8,16(sp)
   2af08:	00813c83          	ld	s9,8(sp)
   2af0c:	00013d03          	ld	s10,0(sp)
   2af10:	06010113          	addi	sp,sp,96
   2af14:	00008067          	jalr	zero,0(ra)
   2af18:	414904b3          	sub	s1,s2,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2af1c:	fff00b13          	addi	s6,zero,-1
   2af20:	006b5b13          	srli	s6,s6,0x6
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2af24:	005b1513          	slli	a0,s6,0x5
   2af28:	d98eb0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   2af2c:	00050993          	addi	s3,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   2af30:	009984b3          	add	s1,s3,s1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2af34:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2af38:	00a4b023          	sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   2af3c:	00043783          	ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2af40:	01040c13          	addi	s8,s0,16
	if (__str._M_is_local())
   2af44:	eb8782e3          	beq	a5,s8,2ade8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa8>
      { _M_dataplus._M_p = __p; }
   2af48:	00f4b023          	sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   2af4c:	01043783          	ld	a5,16(s0)
   2af50:	00f4b823          	sd	a5,16(s1)
      { _M_string_length = __length; }
   2af54:	00843783          	ld	a5,8(s0)
   2af58:	00f4b423          	sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   2af5c:	01843023          	sd	s8,0(s0)
      { _M_string_length = __length; }
   2af60:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2af64:	00040823          	sb	zero,16(s0)
   2af68:	ef4d02e3          	beq	s10,s4,2ae4c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x10c>
   2af6c:	010a0493          	addi	s1,s4,16
   2af70:	41490cb3          	sub	s9,s2,s4
   2af74:	01998cb3          	add	s9,s3,s9
      _ForwardIterator __cur = __result;
   2af78:	00098413          	addi	s0,s3,0
   2af7c:	ea5ff06f          	jal	zero,2ae20 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xe0>

000000000002af80 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   2af80:	fd010113          	addi	sp,sp,-48
   2af84:	02113423          	sd	ra,40(sp)
   2af88:	02813023          	sd	s0,32(sp)
   2af8c:	00913c23          	sd	s1,24(sp)
   2af90:	01213823          	sd	s2,16(sp)
   2af94:	01313423          	sd	s3,8(sp)
   2af98:	00050493          	addi	s1,a0,0
   2af9c:	00058413          	addi	s0,a1,0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   2afa0:	00853903          	ld	s2,8(a0)
   2afa4:	01053783          	ld	a5,16(a0)
   2afa8:	06f90c63          	beq	s2,a5,2b020 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa0>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2afac:	01090513          	addi	a0,s2,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2afb0:	00a93023          	sd	a0,0(s2)
      { return _M_dataplus._M_p; }
   2afb4:	0005b783          	ld	a5,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2afb8:	01058993          	addi	s3,a1,16
	if (__str._M_is_local())
   2afbc:	05378663          	beq	a5,s3,2b008 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x88>
      { _M_dataplus._M_p = __p; }
   2afc0:	00f93023          	sd	a5,0(s2)
      { _M_allocated_capacity = __capacity; }
   2afc4:	0105b783          	ld	a5,16(a1)
   2afc8:	00f93823          	sd	a5,16(s2)
      { _M_string_length = __length; }
   2afcc:	00843783          	ld	a5,8(s0)
   2afd0:	00f93423          	sd	a5,8(s2)
      { _M_dataplus._M_p = __p; }
   2afd4:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   2afd8:	00043423          	sd	zero,8(s0)
   2afdc:	00040823          	sb	zero,16(s0)
	    ++this->_M_impl._M_finish;
   2afe0:	0084b783          	ld	a5,8(s1)
   2afe4:	02078793          	addi	a5,a5,32
   2afe8:	00f4b423          	sd	a5,8(s1)
      }
   2afec:	02813083          	ld	ra,40(sp)
   2aff0:	02013403          	ld	s0,32(sp)
   2aff4:	01813483          	ld	s1,24(sp)
   2aff8:	01013903          	ld	s2,16(sp)
   2affc:	00813983          	ld	s3,8(sp)
   2b000:	03010113          	addi	sp,sp,48
   2b004:	00008067          	jalr	zero,0(ra)
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b008:	0085b603          	ld	a2,8(a1)
   2b00c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2b010:	fa060ee3          	beq	a2,zero,2afcc <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2b014:	00098593          	addi	a1,s3,0
   2b018:	d38eb0ef          	jal	ra,16550 <memcpy@plt>
   2b01c:	fb1ff06f          	jal	zero,2afcc <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4c>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2b020:	00058613          	addi	a2,a1,0
   2b024:	00090593          	addi	a1,s2,0
   2b028:	00017317          	auipc	t1,0x17
   2b02c:	4d033303          	ld	t1,1232(t1) # 424f8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x177b8>
   2b030:	000300e7          	jalr	ra,0(t1)
      }
   2b034:	fb9ff06f          	jal	zero,2afec <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6c>

000000000002b038 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   2b038:	fe010113          	addi	sp,sp,-32
   2b03c:	00113c23          	sd	ra,24(sp)
   2b040:	00813823          	sd	s0,16(sp)
   2b044:	00913423          	sd	s1,8(sp)
   2b048:	00050413          	addi	s0,a0,0
   2b04c:	00058493          	addi	s1,a1,0
	  for (; __first != __last; ++__first)
   2b050:	02b51063          	bne	a0,a1,2b070 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x38>
	    std::_Destroy(std::__addressof(*__first));
	}
   2b054:	01813083          	ld	ra,24(sp)
   2b058:	01013403          	ld	s0,16(sp)
   2b05c:	00813483          	ld	s1,8(sp)
   2b060:	02010113          	addi	sp,sp,32
   2b064:	00008067          	jalr	zero,0(ra)
	  for (; __first != __last; ++__first)
   2b068:	03040413          	addi	s0,s0,48
   2b06c:	fe8484e3          	beq	s1,s0,2b054 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x1c>
      { return _M_dataplus._M_p; }
   2b070:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2b074:	01040793          	addi	a5,s0,16
   2b078:	fef508e3          	beq	a0,a5,2b068 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x30>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2b07c:	c34eb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2b080:	fe9ff06f          	jal	zero,2b068 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x30>

000000000002b084 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
      vector<_Tp, _Alloc>::
   2b084:	f8010113          	addi	sp,sp,-128
   2b088:	06113c23          	sd	ra,120(sp)
   2b08c:	06813823          	sd	s0,112(sp)
   2b090:	06913423          	sd	s1,104(sp)
   2b094:	07213023          	sd	s2,96(sp)
   2b098:	05313c23          	sd	s3,88(sp)
   2b09c:	05413823          	sd	s4,80(sp)
   2b0a0:	05513423          	sd	s5,72(sp)
   2b0a4:	05613023          	sd	s6,64(sp)
   2b0a8:	03713c23          	sd	s7,56(sp)
   2b0ac:	03813823          	sd	s8,48(sp)
   2b0b0:	03913423          	sd	s9,40(sp)
   2b0b4:	03a13023          	sd	s10,32(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2b0b8:	00853a83          	ld	s5,8(a0)
   2b0bc:	00053b03          	ld	s6,0(a0)
   2b0c0:	416a87b3          	sub	a5,s5,s6
   2b0c4:	4047d793          	srai	a5,a5,0x4
   2b0c8:	0000c717          	auipc	a4,0xc
   2b0cc:	bd873703          	ld	a4,-1064(a4) # 36ca0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   2b0d0:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   2b0d4:	0000d717          	auipc	a4,0xd
   2b0d8:	c6c73703          	ld	a4,-916(a4) # 37d40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   2b0dc:	04e78463          	beq	a5,a4,2b124 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa0>
   2b0e0:	00050b93          	addi	s7,a0,0
   2b0e4:	00058a13          	addi	s4,a1,0
   2b0e8:	00060413          	addi	s0,a2,0
   2b0ec:	00058d13          	addi	s10,a1,0
      return __a;
   2b0f0:	00078713          	addi	a4,a5,0
      if (__a < __b)
   2b0f4:	036a8e63          	beq	s5,s6,2b130 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xac>
	const size_type __len = size() + (std::max)(size(), __n);
   2b0f8:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2b0fc:	26f76063          	bltu	a4,a5,2b35c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2d8>
   2b100:	00070c93          	addi	s9,a4,0
   2b104:	0000d797          	auipc	a5,0xd
   2b108:	c3c7b783          	ld	a5,-964(a5) # 37d40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   2b10c:	00e7f463          	bgeu	a5,a4,2b114 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x90>
   2b110:	00078c93          	addi	s9,a5,0
   2b114:	416a04b3          	sub	s1,s4,s6
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2b118:	00000c13          	addi	s8,zero,0
   2b11c:	26070063          	beq	a4,zero,2b37c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2f8>
   2b120:	2480006f          	jal	zero,2b368 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2e4>
	  __throw_length_error(__N(__s));
   2b124:	0000c517          	auipc	a0,0xc
   2b128:	94450513          	addi	a0,a0,-1724 # 36a68 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   2b12c:	ab4eb0ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   2b130:	00100713          	addi	a4,zero,1
   2b134:	fc5ff06f          	jal	zero,2b0f8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x74>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   2b138:	00000693          	addi	a3,zero,0
   2b13c:	00000613          	addi	a2,zero,0
   2b140:	00010593          	addi	a1,sp,0
   2b144:	00048513          	addi	a0,s1,0
   2b148:	dc4fc0ef          	jal	ra,2770c <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
      { return _M_dataplus._M_p; }
   2b14c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2b150:	01010793          	addi	a5,sp,16
   2b154:	00f50463          	beq	a0,a5,2b15c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2b158:	b58eb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   2b15c:	010b0913          	addi	s2,s6,16
   2b160:	000b0413          	addi	s0,s6,0
      _ForwardIterator __cur = __result;
   2b164:	000c0493          	addi	s1,s8,0
      for (; __first != __last; ++__first, (void)++__cur)
   2b168:	096d1663          	bne	s10,s6,2b1f4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x170>
	      ++__new_finish;
   2b16c:	03048493          	addi	s1,s1,48
   2b170:	175d0463          	beq	s10,s5,2b2d8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x254>
   2b174:	010a0993          	addi	s3,s4,16
   2b178:	000a0913          	addi	s2,s4,0
      _ForwardIterator __cur = __result;
   2b17c:	00048413          	addi	s0,s1,0
   2b180:	0f80006f          	jal	zero,2b278 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1f4>
      { return _M_dataplus._M_p; }
   2b184:	00050413          	addi	s0,a0,0
   2b188:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2b18c:	01010793          	addi	a5,sp,16
   2b190:	00f50463          	beq	a0,a5,2b198 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x114>
   2b194:	b1ceb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2b198:	00040513          	addi	a0,s0,0
      __catch(...)
   2b19c:	a14eb0ef          	jal	ra,163b0 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   2b1a0:	180c1e63          	bne	s8,zero,2b33c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2b8>
      { return _M_dataplus._M_p; }
   2b1a4:	0004b503          	ld	a0,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b1a8:	01048493          	addi	s1,s1,16
	if (!_M_is_local())
   2b1ac:	00950463          	beq	a0,s1,2b1b4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x130>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2b1b0:	b00eb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	  __throw_exception_again;
   2b1b4:	c0ceb0ef          	jal	ra,165c0 <__cxa_rethrow@plt>
      __catch(...)
   2b1b8:	00050413          	addi	s0,a0,0
   2b1bc:	c74eb0ef          	jal	ra,16630 <__cxa_end_catch@plt>
   2b1c0:	00040513          	addi	a0,s0,0
   2b1c4:	ccceb0ef          	jal	ra,16690 <_Unwind_Resume@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b1c8:	00843603          	ld	a2,8(s0)
   2b1cc:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2b1d0:	04060263          	beq	a2,zero,2b214 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x190>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2b1d4:	00090593          	addi	a1,s2,0
   2b1d8:	b78eb0ef          	jal	ra,16550 <memcpy@plt>
   2b1dc:	0380006f          	jal	zero,2b214 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x190>
   2b1e0:	ad0eb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   2b1e4:	03040413          	addi	s0,s0,48
   2b1e8:	03048493          	addi	s1,s1,48
   2b1ec:	03090913          	addi	s2,s2,48
   2b1f0:	f7a40ee3          	beq	s0,s10,2b16c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe8>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b1f4:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b1f8:	00a4b023          	sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   2b1fc:	00043783          	ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b200:	00090993          	addi	s3,s2,0
	if (__str._M_is_local())
   2b204:	fd2782e3          	beq	a5,s2,2b1c8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x144>
      { _M_dataplus._M_p = __p; }
   2b208:	00f4b023          	sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   2b20c:	01043783          	ld	a5,16(s0)
   2b210:	00f4b823          	sd	a5,16(s1)
      { _M_string_length = __length; }
   2b214:	00843783          	ld	a5,8(s0)
   2b218:	00f4b423          	sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   2b21c:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   2b220:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2b224:	00040823          	sb	zero,16(s0)
class line_table::file {
   2b228:	02043783          	ld	a5,32(s0)
   2b22c:	02f4b023          	sd	a5,32(s1)
   2b230:	02843783          	ld	a5,40(s0)
   2b234:	02f4b423          	sd	a5,40(s1)
      { return _M_dataplus._M_p; }
   2b238:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2b23c:	fb3512e3          	bne	a0,s3,2b1e0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x15c>
   2b240:	fa5ff06f          	jal	zero,2b1e4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x160>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b244:	00893603          	ld	a2,8(s2)
   2b248:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2b24c:	04061863          	bne	a2,zero,2b29c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x218>
      { _M_string_length = __length; }
   2b250:	00893783          	ld	a5,8(s2)
   2b254:	00f43423          	sd	a5,8(s0)
   2b258:	02093783          	ld	a5,32(s2)
   2b25c:	02f43023          	sd	a5,32(s0)
   2b260:	02893783          	ld	a5,40(s2)
   2b264:	02f43423          	sd	a5,40(s0)
   2b268:	03090913          	addi	s2,s2,48
   2b26c:	03040413          	addi	s0,s0,48
   2b270:	03098993          	addi	s3,s3,48
   2b274:	03590863          	beq	s2,s5,2b2a4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x220>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b278:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b27c:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2b280:	00093783          	ld	a5,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b284:	00098593          	addi	a1,s3,0
	if (__str._M_is_local())
   2b288:	fb378ee3          	beq	a5,s3,2b244 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1c0>
      { _M_dataplus._M_p = __p; }
   2b28c:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2b290:	01093783          	ld	a5,16(s2)
   2b294:	00f43823          	sd	a5,16(s0)
   2b298:	fb9ff06f          	jal	zero,2b250 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1cc>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2b29c:	ab4eb0ef          	jal	ra,16550 <memcpy@plt>
   2b2a0:	fb1ff06f          	jal	zero,2b250 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1cc>
   2b2a4:	414a87b3          	sub	a5,s5,s4
   2b2a8:	fd078793          	addi	a5,a5,-48
   2b2ac:	0047d793          	srli	a5,a5,0x4
   2b2b0:	0000d717          	auipc	a4,0xd
   2b2b4:	a9873703          	ld	a4,-1384(a4) # 37d48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68>
   2b2b8:	02e787b3          	mul	a5,a5,a4
   2b2bc:	00479793          	slli	a5,a5,0x4
   2b2c0:	0047d793          	srli	a5,a5,0x4
   2b2c4:	00178793          	addi	a5,a5,1
   2b2c8:	00179713          	slli	a4,a5,0x1
   2b2cc:	00f707b3          	add	a5,a4,a5
   2b2d0:	00479793          	slli	a5,a5,0x4
   2b2d4:	00f484b3          	add	s1,s1,a5
	if (__p)
   2b2d8:	000b0663          	beq	s6,zero,2b2e4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x260>
   2b2dc:	000b0513          	addi	a0,s6,0
   2b2e0:	9d0eb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2b2e4:	018bb023          	sd	s8,0(s7)
      this->_M_impl._M_finish = __new_finish;
   2b2e8:	009bb423          	sd	s1,8(s7)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2b2ec:	001c9793          	slli	a5,s9,0x1
   2b2f0:	019787b3          	add	a5,a5,s9
   2b2f4:	00479793          	slli	a5,a5,0x4
   2b2f8:	00fc07b3          	add	a5,s8,a5
   2b2fc:	00fbb823          	sd	a5,16(s7)
    }
   2b300:	07813083          	ld	ra,120(sp)
   2b304:	07013403          	ld	s0,112(sp)
   2b308:	06813483          	ld	s1,104(sp)
   2b30c:	06013903          	ld	s2,96(sp)
   2b310:	05813983          	ld	s3,88(sp)
   2b314:	05013a03          	ld	s4,80(sp)
   2b318:	04813a83          	ld	s5,72(sp)
   2b31c:	04013b03          	ld	s6,64(sp)
   2b320:	03813b83          	ld	s7,56(sp)
   2b324:	03013c03          	ld	s8,48(sp)
   2b328:	02813c83          	ld	s9,40(sp)
   2b32c:	02013d03          	ld	s10,32(sp)
   2b330:	08010113          	addi	sp,sp,128
   2b334:	00008067          	jalr	zero,0(ra)
   2b338:	e65ff06f          	jal	zero,2b19c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x118>
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   2b33c:	000c0593          	addi	a1,s8,0
   2b340:	000c0513          	addi	a0,s8,0
   2b344:	00017317          	auipc	t1,0x17
   2b348:	f7433303          	ld	t1,-140(t1) # 422b8 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)@@Base+0x17280>
   2b34c:	000300e7          	jalr	ra,0(t1)
   2b350:	000c0513          	addi	a0,s8,0
   2b354:	95ceb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2b358:	e5dff06f          	jal	zero,2b1b4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x130>
   2b35c:	416a04b3          	sub	s1,s4,s6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2b360:	0000dc97          	auipc	s9,0xd
   2b364:	9e0cbc83          	ld	s9,-1568(s9) # 37d40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2b368:	001c9513          	slli	a0,s9,0x1
   2b36c:	01950533          	add	a0,a0,s9
   2b370:	00451513          	slli	a0,a0,0x4
   2b374:	94ceb0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   2b378:	00050c13          	addi	s8,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   2b37c:	009c04b3          	add	s1,s8,s1
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b380:	01010793          	addi	a5,sp,16
   2b384:	00f13023          	sd	a5,0(sp)
      { return _M_dataplus._M_p; }
   2b388:	00043583          	ld	a1,0(s0)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   2b38c:	00843603          	ld	a2,8(s0)
   2b390:	00000693          	addi	a3,zero,0
   2b394:	00c58633          	add	a2,a1,a2
   2b398:	00010513          	addi	a0,sp,0
   2b39c:	00017317          	auipc	t1,0x17
   2b3a0:	f6c33303          	ld	t1,-148(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17964>
   2b3a4:	000300e7          	jalr	ra,0(t1)
      }
   2b3a8:	d91ff06f          	jal	zero,2b138 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb4>

000000000002b3ac <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   2b3ac:	f8010113          	addi	sp,sp,-128
   2b3b0:	06113c23          	sd	ra,120(sp)
   2b3b4:	06813823          	sd	s0,112(sp)
   2b3b8:	06913423          	sd	s1,104(sp)
   2b3bc:	07213023          	sd	s2,96(sp)
   2b3c0:	05313c23          	sd	s3,88(sp)
   2b3c4:	05413823          	sd	s4,80(sp)
   2b3c8:	05513423          	sd	s5,72(sp)
   2b3cc:	05613023          	sd	s6,64(sp)
   2b3d0:	03713c23          	sd	s7,56(sp)
   2b3d4:	03813823          	sd	s8,48(sp)
   2b3d8:	03913423          	sd	s9,40(sp)
   2b3dc:	03a13023          	sd	s10,32(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2b3e0:	00853a83          	ld	s5,8(a0)
   2b3e4:	00053b03          	ld	s6,0(a0)
   2b3e8:	416a87b3          	sub	a5,s5,s6
   2b3ec:	4047d793          	srai	a5,a5,0x4
   2b3f0:	0000c717          	auipc	a4,0xc
   2b3f4:	8b073703          	ld	a4,-1872(a4) # 36ca0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   2b3f8:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   2b3fc:	0000d717          	auipc	a4,0xd
   2b400:	94473703          	ld	a4,-1724(a4) # 37d40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   2b404:	04e78463          	beq	a5,a4,2b44c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa0>
   2b408:	00050b93          	addi	s7,a0,0
   2b40c:	00058a13          	addi	s4,a1,0
   2b410:	00060413          	addi	s0,a2,0
   2b414:	00058d13          	addi	s10,a1,0
      return __a;
   2b418:	00078713          	addi	a4,a5,0
      if (__a < __b)
   2b41c:	036a8e63          	beq	s5,s6,2b458 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xac>
	const size_type __len = size() + (std::max)(size(), __n);
   2b420:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2b424:	26f76263          	bltu	a4,a5,2b688 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2dc>
   2b428:	00070c93          	addi	s9,a4,0
   2b42c:	0000d797          	auipc	a5,0xd
   2b430:	9147b783          	ld	a5,-1772(a5) # 37d40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   2b434:	00e7f463          	bgeu	a5,a4,2b43c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x90>
   2b438:	00078c93          	addi	s9,a5,0
   2b43c:	416a0933          	sub	s2,s4,s6
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2b440:	00000c13          	addi	s8,zero,0
   2b444:	26070263          	beq	a4,zero,2b6a8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2fc>
   2b448:	24c0006f          	jal	zero,2b694 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2e8>
	  __throw_length_error(__N(__s));
   2b44c:	0000b517          	auipc	a0,0xb
   2b450:	61c50513          	addi	a0,a0,1564 # 36a68 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   2b454:	f8dea0ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   2b458:	00100713          	addi	a4,zero,1
   2b45c:	fc5ff06f          	jal	zero,2b420 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x74>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b460:	00843603          	ld	a2,8(s0)
   2b464:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2b468:	26060263          	beq	a2,zero,2b6cc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x320>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2b46c:	00048593          	addi	a1,s1,0
   2b470:	01010513          	addi	a0,sp,16
   2b474:	8dceb0ef          	jal	ra,16550 <memcpy@plt>
   2b478:	2540006f          	jal	zero,2b6cc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x320>
      { return _M_dataplus._M_p; }
   2b47c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2b480:	01010793          	addi	a5,sp,16
   2b484:	00f50463          	beq	a0,a5,2b48c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xe0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2b488:	828eb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2b48c:	010b0913          	addi	s2,s6,16
   2b490:	000b0413          	addi	s0,s6,0
      _ForwardIterator __cur = __result;
   2b494:	000c0493          	addi	s1,s8,0
      for (; __first != __last; ++__first, (void)++__cur)
   2b498:	096d1663          	bne	s10,s6,2b524 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x178>
	      ++__new_finish;
   2b49c:	03048493          	addi	s1,s1,48
   2b4a0:	175d0463          	beq	s10,s5,2b608 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x25c>
   2b4a4:	010a0993          	addi	s3,s4,16
   2b4a8:	000a0913          	addi	s2,s4,0
      _ForwardIterator __cur = __result;
   2b4ac:	00048413          	addi	s0,s1,0
   2b4b0:	0f80006f          	jal	zero,2b5a8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1fc>
      { return _M_dataplus._M_p; }
   2b4b4:	00050413          	addi	s0,a0,0
   2b4b8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2b4bc:	01010793          	addi	a5,sp,16
   2b4c0:	00f50463          	beq	a0,a5,2b4c8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x11c>
   2b4c4:	fedea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      __catch(...)
   2b4c8:	00040513          	addi	a0,s0,0
   2b4cc:	ee5ea0ef          	jal	ra,163b0 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   2b4d0:	180c1c63          	bne	s8,zero,2b668 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2bc>
      { return _M_dataplus._M_p; }
   2b4d4:	00093503          	ld	a0,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b4d8:	01090493          	addi	s1,s2,16
	if (!_M_is_local())
   2b4dc:	00950463          	beq	a0,s1,2b4e4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x138>
   2b4e0:	fd1ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	  __throw_exception_again;
   2b4e4:	8dceb0ef          	jal	ra,165c0 <__cxa_rethrow@plt>
      __catch(...)
   2b4e8:	00050413          	addi	s0,a0,0
   2b4ec:	944eb0ef          	jal	ra,16630 <__cxa_end_catch@plt>
   2b4f0:	00040513          	addi	a0,s0,0
   2b4f4:	99ceb0ef          	jal	ra,16690 <_Unwind_Resume@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b4f8:	00843603          	ld	a2,8(s0)
   2b4fc:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2b500:	04060263          	beq	a2,zero,2b544 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x198>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2b504:	00090593          	addi	a1,s2,0
   2b508:	848eb0ef          	jal	ra,16550 <memcpy@plt>
   2b50c:	0380006f          	jal	zero,2b544 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x198>
   2b510:	fa1ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   2b514:	03040413          	addi	s0,s0,48
   2b518:	03048493          	addi	s1,s1,48
   2b51c:	03090913          	addi	s2,s2,48
   2b520:	f7a40ee3          	beq	s0,s10,2b49c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xf0>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b524:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b528:	00a4b023          	sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   2b52c:	00043783          	ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b530:	00090993          	addi	s3,s2,0
	if (__str._M_is_local())
   2b534:	fd2782e3          	beq	a5,s2,2b4f8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x14c>
      { _M_dataplus._M_p = __p; }
   2b538:	00f4b023          	sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   2b53c:	01043783          	ld	a5,16(s0)
   2b540:	00f4b823          	sd	a5,16(s1)
      { _M_string_length = __length; }
   2b544:	00843783          	ld	a5,8(s0)
   2b548:	00f4b423          	sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   2b54c:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   2b550:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2b554:	00040823          	sb	zero,16(s0)
   2b558:	02043783          	ld	a5,32(s0)
   2b55c:	02f4b023          	sd	a5,32(s1)
   2b560:	02843783          	ld	a5,40(s0)
   2b564:	02f4b423          	sd	a5,40(s1)
      { return _M_dataplus._M_p; }
   2b568:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2b56c:	fb3512e3          	bne	a0,s3,2b510 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x164>
   2b570:	fa5ff06f          	jal	zero,2b514 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x168>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b574:	00893603          	ld	a2,8(s2)
   2b578:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2b57c:	04061863          	bne	a2,zero,2b5cc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x220>
      { _M_string_length = __length; }
   2b580:	00893783          	ld	a5,8(s2)
   2b584:	00f43423          	sd	a5,8(s0)
   2b588:	02093783          	ld	a5,32(s2)
   2b58c:	02f43023          	sd	a5,32(s0)
   2b590:	02893783          	ld	a5,40(s2)
   2b594:	02f43423          	sd	a5,40(s0)
   2b598:	03090913          	addi	s2,s2,48
   2b59c:	03040413          	addi	s0,s0,48
   2b5a0:	03098993          	addi	s3,s3,48
   2b5a4:	03590863          	beq	s2,s5,2b5d4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x228>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b5a8:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b5ac:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2b5b0:	00093783          	ld	a5,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b5b4:	00098593          	addi	a1,s3,0
	if (__str._M_is_local())
   2b5b8:	fb378ee3          	beq	a5,s3,2b574 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1c8>
      { _M_dataplus._M_p = __p; }
   2b5bc:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2b5c0:	01093783          	ld	a5,16(s2)
   2b5c4:	00f43823          	sd	a5,16(s0)
   2b5c8:	fb9ff06f          	jal	zero,2b580 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1d4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2b5cc:	f85ea0ef          	jal	ra,16550 <memcpy@plt>
   2b5d0:	fb1ff06f          	jal	zero,2b580 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1d4>
   2b5d4:	414a87b3          	sub	a5,s5,s4
   2b5d8:	fd078793          	addi	a5,a5,-48
   2b5dc:	0047d793          	srli	a5,a5,0x4
   2b5e0:	0000c717          	auipc	a4,0xc
   2b5e4:	76873703          	ld	a4,1896(a4) # 37d48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68>
   2b5e8:	02e787b3          	mul	a5,a5,a4
   2b5ec:	00479793          	slli	a5,a5,0x4
   2b5f0:	0047d793          	srli	a5,a5,0x4
   2b5f4:	00178793          	addi	a5,a5,1
   2b5f8:	00179713          	slli	a4,a5,0x1
   2b5fc:	00f707b3          	add	a5,a4,a5
   2b600:	00479793          	slli	a5,a5,0x4
   2b604:	00f484b3          	add	s1,s1,a5
	if (__p)
   2b608:	000b0663          	beq	s6,zero,2b614 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x268>
   2b60c:	000b0513          	addi	a0,s6,0
   2b610:	ea1ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2b614:	018bb023          	sd	s8,0(s7)
      this->_M_impl._M_finish = __new_finish;
   2b618:	009bb423          	sd	s1,8(s7)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2b61c:	001c9793          	slli	a5,s9,0x1
   2b620:	019787b3          	add	a5,a5,s9
   2b624:	00479793          	slli	a5,a5,0x4
   2b628:	00fc07b3          	add	a5,s8,a5
   2b62c:	00fbb823          	sd	a5,16(s7)
    }
   2b630:	07813083          	ld	ra,120(sp)
   2b634:	07013403          	ld	s0,112(sp)
   2b638:	06813483          	ld	s1,104(sp)
   2b63c:	06013903          	ld	s2,96(sp)
   2b640:	05813983          	ld	s3,88(sp)
   2b644:	05013a03          	ld	s4,80(sp)
   2b648:	04813a83          	ld	s5,72(sp)
   2b64c:	04013b03          	ld	s6,64(sp)
   2b650:	03813b83          	ld	s7,56(sp)
   2b654:	03013c03          	ld	s8,48(sp)
   2b658:	02813c83          	ld	s9,40(sp)
   2b65c:	02013d03          	ld	s10,32(sp)
   2b660:	08010113          	addi	sp,sp,128
   2b664:	00008067          	jalr	zero,0(ra)
   2b668:	000c0593          	addi	a1,s8,0
   2b66c:	000c0513          	addi	a0,s8,0
   2b670:	00017317          	auipc	t1,0x17
   2b674:	c4833303          	ld	t1,-952(t1) # 422b8 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)@@Base+0x17280>
   2b678:	000300e7          	jalr	ra,0(t1)
   2b67c:	000c0513          	addi	a0,s8,0
   2b680:	e31ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2b684:	e61ff06f          	jal	zero,2b4e4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x138>
   2b688:	416a0933          	sub	s2,s4,s6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2b68c:	0000cc97          	auipc	s9,0xc
   2b690:	6b4cbc83          	ld	s9,1716(s9) # 37d40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2b694:	001c9513          	slli	a0,s9,0x1
   2b698:	01950533          	add	a0,a0,s9
   2b69c:	00451513          	slli	a0,a0,0x4
   2b6a0:	e21ea0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   2b6a4:	00050c13          	addi	s8,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   2b6a8:	012c0933          	add	s2,s8,s2
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b6ac:	01010793          	addi	a5,sp,16
   2b6b0:	00f13023          	sd	a5,0(sp)
      { return _M_dataplus._M_p; }
   2b6b4:	00043783          	ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b6b8:	01040493          	addi	s1,s0,16
	if (__str._M_is_local())
   2b6bc:	da9782e3          	beq	a5,s1,2b460 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xb4>
      { _M_dataplus._M_p = __p; }
   2b6c0:	00f13023          	sd	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   2b6c4:	01043783          	ld	a5,16(s0)
   2b6c8:	00f13823          	sd	a5,16(sp)
      { _M_string_length = __length; }
   2b6cc:	00843783          	ld	a5,8(s0)
   2b6d0:	00f13423          	sd	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   2b6d4:	00943023          	sd	s1,0(s0)
      { _M_string_length = __length; }
   2b6d8:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2b6dc:	00040823          	sb	zero,16(s0)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   2b6e0:	00000693          	addi	a3,zero,0
   2b6e4:	00000613          	addi	a2,zero,0
   2b6e8:	00010593          	addi	a1,sp,0
   2b6ec:	00090513          	addi	a0,s2,0
   2b6f0:	81cfc0ef          	jal	ra,2770c <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   2b6f4:	d89ff06f          	jal	zero,2b47c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xd0>

000000000002b6f8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   2b6f8:	fb010113          	addi	sp,sp,-80
   2b6fc:	04113423          	sd	ra,72(sp)
   2b700:	04813023          	sd	s0,64(sp)
   2b704:	02913c23          	sd	s1,56(sp)
   2b708:	03213823          	sd	s2,48(sp)
   2b70c:	03313423          	sd	s3,40(sp)
   2b710:	00050493          	addi	s1,a0,0
   2b714:	00058413          	addi	s0,a1,0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   2b718:	00853903          	ld	s2,8(a0)
   2b71c:	01053783          	ld	a5,16(a0)
   2b720:	0cf90063          	beq	s2,a5,2b7e0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xe8>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b724:	01010793          	addi	a5,sp,16
   2b728:	00f13023          	sd	a5,0(sp)
      { return _M_dataplus._M_p; }
   2b72c:	0005b783          	ld	a5,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b730:	01058993          	addi	s3,a1,16
	if (__str._M_is_local())
   2b734:	03378e63          	beq	a5,s3,2b770 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x78>
      { _M_dataplus._M_p = __p; }
   2b738:	00f13023          	sd	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   2b73c:	0105b783          	ld	a5,16(a1)
   2b740:	00f13823          	sd	a5,16(sp)
      { _M_string_length = __length; }
   2b744:	00843783          	ld	a5,8(s0)
   2b748:	00f13423          	sd	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   2b74c:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   2b750:	00043423          	sd	zero,8(s0)
   2b754:	00040823          	sb	zero,16(s0)
   2b758:	00000693          	addi	a3,zero,0
   2b75c:	00000613          	addi	a2,zero,0
   2b760:	00010593          	addi	a1,sp,0
   2b764:	00090513          	addi	a0,s2,0
   2b768:	fa5fb0ef          	jal	ra,2770c <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   2b76c:	0200006f          	jal	zero,2b78c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x94>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b770:	0085b603          	ld	a2,8(a1)
   2b774:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2b778:	fc0606e3          	beq	a2,zero,2b744 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2b77c:	00098593          	addi	a1,s3,0
   2b780:	01010513          	addi	a0,sp,16
   2b784:	dcdea0ef          	jal	ra,16550 <memcpy@plt>
   2b788:	fbdff06f          	jal	zero,2b744 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4c>
      { return _M_dataplus._M_p; }
   2b78c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2b790:	01010793          	addi	a5,sp,16
   2b794:	00f50463          	beq	a0,a5,2b79c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa4>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2b798:	d19ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	    ++this->_M_impl._M_finish;
   2b79c:	0084b783          	ld	a5,8(s1)
   2b7a0:	03078793          	addi	a5,a5,48
   2b7a4:	00f4b423          	sd	a5,8(s1)
      }
   2b7a8:	04813083          	ld	ra,72(sp)
   2b7ac:	04013403          	ld	s0,64(sp)
   2b7b0:	03813483          	ld	s1,56(sp)
   2b7b4:	03013903          	ld	s2,48(sp)
   2b7b8:	02813983          	ld	s3,40(sp)
   2b7bc:	05010113          	addi	sp,sp,80
   2b7c0:	00008067          	jalr	zero,0(ra)
      { return _M_dataplus._M_p; }
   2b7c4:	00050413          	addi	s0,a0,0
   2b7c8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2b7cc:	01010793          	addi	a5,sp,16
   2b7d0:	00f50463          	beq	a0,a5,2b7d8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xe0>
   2b7d4:	cddea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2b7d8:	00040513          	addi	a0,s0,0
   2b7dc:	eb5ea0ef          	jal	ra,16690 <_Unwind_Resume@plt>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2b7e0:	00058613          	addi	a2,a1,0
   2b7e4:	00090593          	addi	a1,s2,0
   2b7e8:	00017317          	auipc	t1,0x17
   2b7ec:	cd833303          	ld	t1,-808(t1) # 424c0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17114>
   2b7f0:	000300e7          	jalr	ra,0(t1)
      }
   2b7f4:	fb5ff06f          	jal	zero,2b7a8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xb0>

000000000002b7f8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)>:
      vector<_Tp, _Alloc>::
   2b7f8:	f7010113          	addi	sp,sp,-144
   2b7fc:	08113423          	sd	ra,136(sp)
   2b800:	08813023          	sd	s0,128(sp)
   2b804:	06913c23          	sd	s1,120(sp)
   2b808:	07213823          	sd	s2,112(sp)
   2b80c:	07313423          	sd	s3,104(sp)
   2b810:	07413023          	sd	s4,96(sp)
   2b814:	05513c23          	sd	s5,88(sp)
   2b818:	05613823          	sd	s6,80(sp)
   2b81c:	05713423          	sd	s7,72(sp)
   2b820:	05813023          	sd	s8,64(sp)
   2b824:	03913c23          	sd	s9,56(sp)
   2b828:	03a13823          	sd	s10,48(sp)
   2b82c:	03b13423          	sd	s11,40(sp)
   2b830:	00070913          	addi	s2,a4,0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2b834:	00853a83          	ld	s5,8(a0)
   2b838:	00053b03          	ld	s6,0(a0)
   2b83c:	416a87b3          	sub	a5,s5,s6
   2b840:	4047d793          	srai	a5,a5,0x4
   2b844:	0000b717          	auipc	a4,0xb
   2b848:	45c73703          	ld	a4,1116(a4) # 36ca0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   2b84c:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   2b850:	0000c717          	auipc	a4,0xc
   2b854:	4f073703          	ld	a4,1264(a4) # 37d40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   2b858:	04e78663          	beq	a5,a4,2b8a4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xac>
   2b85c:	00050b93          	addi	s7,a0,0
   2b860:	00058a13          	addi	s4,a1,0
   2b864:	00060413          	addi	s0,a2,0
   2b868:	00068493          	addi	s1,a3,0
   2b86c:	00058d13          	addi	s10,a1,0
      return __a;
   2b870:	00078713          	addi	a4,a5,0
      if (__a < __b)
   2b874:	036a8e63          	beq	s5,s6,2b8b0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xb8>
	const size_type __len = size() + (std::max)(size(), __n);
   2b878:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2b87c:	26f76463          	bltu	a4,a5,2bae4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x2ec>
   2b880:	00070c93          	addi	s9,a4,0
   2b884:	0000c797          	auipc	a5,0xc
   2b888:	4bc7b783          	ld	a5,1212(a5) # 37d40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   2b88c:	00e7f463          	bgeu	a5,a4,2b894 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x9c>
   2b890:	00078c93          	addi	s9,a5,0
   2b894:	416a09b3          	sub	s3,s4,s6
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2b898:	00000c13          	addi	s8,zero,0
   2b89c:	26070463          	beq	a4,zero,2bb04 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x30c>
   2b8a0:	2500006f          	jal	zero,2baf0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x2f8>
	  __throw_length_error(__N(__s));
   2b8a4:	0000b517          	auipc	a0,0xb
   2b8a8:	1c450513          	addi	a0,a0,452 # 36a68 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   2b8ac:	b35ea0ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   2b8b0:	00100713          	addi	a4,zero,1
   2b8b4:	fc5ff06f          	jal	zero,2b878 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x80>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b8b8:	00843603          	ld	a2,8(s0)
   2b8bc:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2b8c0:	26060463          	beq	a2,zero,2bb28 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x330>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2b8c4:	000d8593          	addi	a1,s11,0
   2b8c8:	01010513          	addi	a0,sp,16
   2b8cc:	c85ea0ef          	jal	ra,16550 <memcpy@plt>
   2b8d0:	2580006f          	jal	zero,2bb28 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x330>
      { return _M_dataplus._M_p; }
   2b8d4:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2b8d8:	01010793          	addi	a5,sp,16
   2b8dc:	00f50463          	beq	a0,a5,2b8e4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xec>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2b8e0:	bd1ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2b8e4:	010b0913          	addi	s2,s6,16
   2b8e8:	000b0413          	addi	s0,s6,0
      _ForwardIterator __cur = __result;
   2b8ec:	000c0493          	addi	s1,s8,0
      for (; __first != __last; ++__first, (void)++__cur)
   2b8f0:	096d1663          	bne	s10,s6,2b97c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x184>
	      ++__new_finish;
   2b8f4:	03048493          	addi	s1,s1,48
   2b8f8:	175d0463          	beq	s10,s5,2ba60 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x268>
   2b8fc:	010a0993          	addi	s3,s4,16
   2b900:	000a0913          	addi	s2,s4,0
      _ForwardIterator __cur = __result;
   2b904:	00048413          	addi	s0,s1,0
   2b908:	0f80006f          	jal	zero,2ba00 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x208>
      { return _M_dataplus._M_p; }
   2b90c:	00050413          	addi	s0,a0,0
   2b910:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2b914:	01010793          	addi	a5,sp,16
   2b918:	00f50463          	beq	a0,a5,2b920 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x128>
   2b91c:	b95ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      __catch(...)
   2b920:	00040513          	addi	a0,s0,0
   2b924:	a8dea0ef          	jal	ra,163b0 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   2b928:	180c1e63          	bne	s8,zero,2bac4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x2cc>
      { return _M_dataplus._M_p; }
   2b92c:	0009b503          	ld	a0,0(s3)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b930:	01098993          	addi	s3,s3,16
	if (!_M_is_local())
   2b934:	01350463          	beq	a0,s3,2b93c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x144>
   2b938:	b79ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	  __throw_exception_again;
   2b93c:	c85ea0ef          	jal	ra,165c0 <__cxa_rethrow@plt>
      __catch(...)
   2b940:	00050413          	addi	s0,a0,0
   2b944:	cedea0ef          	jal	ra,16630 <__cxa_end_catch@plt>
   2b948:	00040513          	addi	a0,s0,0
   2b94c:	d45ea0ef          	jal	ra,16690 <_Unwind_Resume@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b950:	00843603          	ld	a2,8(s0)
   2b954:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2b958:	04060263          	beq	a2,zero,2b99c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1a4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2b95c:	00090593          	addi	a1,s2,0
   2b960:	bf1ea0ef          	jal	ra,16550 <memcpy@plt>
   2b964:	0380006f          	jal	zero,2b99c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1a4>
   2b968:	b49ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   2b96c:	03040413          	addi	s0,s0,48
   2b970:	03048493          	addi	s1,s1,48
   2b974:	03090913          	addi	s2,s2,48
   2b978:	f7a40ee3          	beq	s0,s10,2b8f4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xfc>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b97c:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b980:	00a4b023          	sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   2b984:	00043783          	ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b988:	00090993          	addi	s3,s2,0
	if (__str._M_is_local())
   2b98c:	fd2782e3          	beq	a5,s2,2b950 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x158>
      { _M_dataplus._M_p = __p; }
   2b990:	00f4b023          	sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   2b994:	01043783          	ld	a5,16(s0)
   2b998:	00f4b823          	sd	a5,16(s1)
      { _M_string_length = __length; }
   2b99c:	00843783          	ld	a5,8(s0)
   2b9a0:	00f4b423          	sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   2b9a4:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   2b9a8:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2b9ac:	00040823          	sb	zero,16(s0)
   2b9b0:	02043783          	ld	a5,32(s0)
   2b9b4:	02f4b023          	sd	a5,32(s1)
   2b9b8:	02843783          	ld	a5,40(s0)
   2b9bc:	02f4b423          	sd	a5,40(s1)
      { return _M_dataplus._M_p; }
   2b9c0:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2b9c4:	fb3512e3          	bne	a0,s3,2b968 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x170>
   2b9c8:	fa5ff06f          	jal	zero,2b96c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x174>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b9cc:	00893603          	ld	a2,8(s2)
   2b9d0:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2b9d4:	04061863          	bne	a2,zero,2ba24 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x22c>
      { _M_string_length = __length; }
   2b9d8:	00893783          	ld	a5,8(s2)
   2b9dc:	00f43423          	sd	a5,8(s0)
   2b9e0:	02093783          	ld	a5,32(s2)
   2b9e4:	02f43023          	sd	a5,32(s0)
   2b9e8:	02893783          	ld	a5,40(s2)
   2b9ec:	02f43423          	sd	a5,40(s0)
   2b9f0:	03090913          	addi	s2,s2,48
   2b9f4:	03040413          	addi	s0,s0,48
   2b9f8:	03098993          	addi	s3,s3,48
   2b9fc:	03590863          	beq	s2,s5,2ba2c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x234>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ba00:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2ba04:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2ba08:	00093783          	ld	a5,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2ba0c:	00098593          	addi	a1,s3,0
	if (__str._M_is_local())
   2ba10:	fb378ee3          	beq	a5,s3,2b9cc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1d4>
      { _M_dataplus._M_p = __p; }
   2ba14:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2ba18:	01093783          	ld	a5,16(s2)
   2ba1c:	00f43823          	sd	a5,16(s0)
   2ba20:	fb9ff06f          	jal	zero,2b9d8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1e0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2ba24:	b2dea0ef          	jal	ra,16550 <memcpy@plt>
   2ba28:	fb1ff06f          	jal	zero,2b9d8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1e0>
   2ba2c:	414a87b3          	sub	a5,s5,s4
   2ba30:	fd078793          	addi	a5,a5,-48
   2ba34:	0047d793          	srli	a5,a5,0x4
   2ba38:	0000c717          	auipc	a4,0xc
   2ba3c:	31073703          	ld	a4,784(a4) # 37d48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68>
   2ba40:	02e787b3          	mul	a5,a5,a4
   2ba44:	00479793          	slli	a5,a5,0x4
   2ba48:	0047d793          	srli	a5,a5,0x4
   2ba4c:	00178793          	addi	a5,a5,1
   2ba50:	00179713          	slli	a4,a5,0x1
   2ba54:	00f707b3          	add	a5,a4,a5
   2ba58:	00479793          	slli	a5,a5,0x4
   2ba5c:	00f484b3          	add	s1,s1,a5
	if (__p)
   2ba60:	000b0663          	beq	s6,zero,2ba6c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x274>
   2ba64:	000b0513          	addi	a0,s6,0
   2ba68:	a49ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2ba6c:	018bb023          	sd	s8,0(s7)
      this->_M_impl._M_finish = __new_finish;
   2ba70:	009bb423          	sd	s1,8(s7)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2ba74:	001c9793          	slli	a5,s9,0x1
   2ba78:	019787b3          	add	a5,a5,s9
   2ba7c:	00479793          	slli	a5,a5,0x4
   2ba80:	00fc07b3          	add	a5,s8,a5
   2ba84:	00fbb823          	sd	a5,16(s7)
    }
   2ba88:	08813083          	ld	ra,136(sp)
   2ba8c:	08013403          	ld	s0,128(sp)
   2ba90:	07813483          	ld	s1,120(sp)
   2ba94:	07013903          	ld	s2,112(sp)
   2ba98:	06813983          	ld	s3,104(sp)
   2ba9c:	06013a03          	ld	s4,96(sp)
   2baa0:	05813a83          	ld	s5,88(sp)
   2baa4:	05013b03          	ld	s6,80(sp)
   2baa8:	04813b83          	ld	s7,72(sp)
   2baac:	04013c03          	ld	s8,64(sp)
   2bab0:	03813c83          	ld	s9,56(sp)
   2bab4:	03013d03          	ld	s10,48(sp)
   2bab8:	02813d83          	ld	s11,40(sp)
   2babc:	09010113          	addi	sp,sp,144
   2bac0:	00008067          	jalr	zero,0(ra)
   2bac4:	000c0593          	addi	a1,s8,0
   2bac8:	000c0513          	addi	a0,s8,0
   2bacc:	00016317          	auipc	t1,0x16
   2bad0:	7ec33303          	ld	t1,2028(t1) # 422b8 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)@@Base+0x17280>
   2bad4:	000300e7          	jalr	ra,0(t1)
   2bad8:	000c0513          	addi	a0,s8,0
   2badc:	9d5ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2bae0:	e5dff06f          	jal	zero,2b93c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x144>
   2bae4:	416a09b3          	sub	s3,s4,s6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2bae8:	0000cc97          	auipc	s9,0xc
   2baec:	258cbc83          	ld	s9,600(s9) # 37d40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2baf0:	001c9513          	slli	a0,s9,0x1
   2baf4:	01950533          	add	a0,a0,s9
   2baf8:	00451513          	slli	a0,a0,0x4
   2bafc:	9c5ea0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   2bb00:	00050c13          	addi	s8,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   2bb04:	013c09b3          	add	s3,s8,s3
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2bb08:	01010793          	addi	a5,sp,16
   2bb0c:	00f13023          	sd	a5,0(sp)
      { return _M_dataplus._M_p; }
   2bb10:	00043783          	ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2bb14:	01040d93          	addi	s11,s0,16
	if (__str._M_is_local())
   2bb18:	dbb780e3          	beq	a5,s11,2b8b8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xc0>
      { _M_dataplus._M_p = __p; }
   2bb1c:	00f13023          	sd	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   2bb20:	01043783          	ld	a5,16(s0)
   2bb24:	00f13823          	sd	a5,16(sp)
      { _M_string_length = __length; }
   2bb28:	00843783          	ld	a5,8(s0)
   2bb2c:	00f13423          	sd	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   2bb30:	01b43023          	sd	s11,0(s0)
      { _M_string_length = __length; }
   2bb34:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2bb38:	00040823          	sb	zero,16(s0)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   2bb3c:	00093683          	ld	a3,0(s2)
   2bb40:	0004b603          	ld	a2,0(s1)
   2bb44:	00010593          	addi	a1,sp,0
   2bb48:	00098513          	addi	a0,s3,0
   2bb4c:	bc1fb0ef          	jal	ra,2770c <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   2bb50:	d85ff06f          	jal	zero,2b8d4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xdc>

000000000002bb54 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)>:
      vector<_Tp, _Alloc>::
   2bb54:	fa010113          	addi	sp,sp,-96
   2bb58:	04113c23          	sd	ra,88(sp)
   2bb5c:	04813823          	sd	s0,80(sp)
   2bb60:	04913423          	sd	s1,72(sp)
   2bb64:	05213023          	sd	s2,64(sp)
   2bb68:	03313c23          	sd	s3,56(sp)
   2bb6c:	03413823          	sd	s4,48(sp)
   2bb70:	03513423          	sd	s5,40(sp)
   2bb74:	00050a93          	addi	s5,a0,0
   2bb78:	00058413          	addi	s0,a1,0
   2bb7c:	00060493          	addi	s1,a2,0
   2bb80:	00068913          	addi	s2,a3,0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   2bb84:	00853983          	ld	s3,8(a0)
   2bb88:	01053783          	ld	a5,16(a0)
   2bb8c:	0cf98463          	beq	s3,a5,2bc54 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x100>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2bb90:	01010793          	addi	a5,sp,16
   2bb94:	00f13023          	sd	a5,0(sp)
      { return _M_dataplus._M_p; }
   2bb98:	0005b783          	ld	a5,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2bb9c:	01058a13          	addi	s4,a1,16
	if (__str._M_is_local())
   2bba0:	03478e63          	beq	a5,s4,2bbdc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x88>
      { _M_dataplus._M_p = __p; }
   2bba4:	00f13023          	sd	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   2bba8:	0105b783          	ld	a5,16(a1)
   2bbac:	00f13823          	sd	a5,16(sp)
      { _M_string_length = __length; }
   2bbb0:	00843783          	ld	a5,8(s0)
   2bbb4:	00f13423          	sd	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   2bbb8:	01443023          	sd	s4,0(s0)
      { _M_string_length = __length; }
   2bbbc:	00043423          	sd	zero,8(s0)
   2bbc0:	00040823          	sb	zero,16(s0)
   2bbc4:	00093683          	ld	a3,0(s2)
   2bbc8:	0004b603          	ld	a2,0(s1)
   2bbcc:	00010593          	addi	a1,sp,0
   2bbd0:	00098513          	addi	a0,s3,0
   2bbd4:	b39fb0ef          	jal	ra,2770c <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   2bbd8:	0200006f          	jal	zero,2bbf8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xa4>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2bbdc:	0085b603          	ld	a2,8(a1)
   2bbe0:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2bbe4:	fc0606e3          	beq	a2,zero,2bbb0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x5c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2bbe8:	000a0593          	addi	a1,s4,0
   2bbec:	01010513          	addi	a0,sp,16
   2bbf0:	961ea0ef          	jal	ra,16550 <memcpy@plt>
   2bbf4:	fbdff06f          	jal	zero,2bbb0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x5c>
      { return _M_dataplus._M_p; }
   2bbf8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2bbfc:	01010793          	addi	a5,sp,16
   2bc00:	00f50463          	beq	a0,a5,2bc08 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xb4>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2bc04:	8adea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	    ++this->_M_impl._M_finish;
   2bc08:	008ab783          	ld	a5,8(s5)
   2bc0c:	03078793          	addi	a5,a5,48
   2bc10:	00fab423          	sd	a5,8(s5)
      }
   2bc14:	05813083          	ld	ra,88(sp)
   2bc18:	05013403          	ld	s0,80(sp)
   2bc1c:	04813483          	ld	s1,72(sp)
   2bc20:	04013903          	ld	s2,64(sp)
   2bc24:	03813983          	ld	s3,56(sp)
   2bc28:	03013a03          	ld	s4,48(sp)
   2bc2c:	02813a83          	ld	s5,40(sp)
   2bc30:	06010113          	addi	sp,sp,96
   2bc34:	00008067          	jalr	zero,0(ra)
      { return _M_dataplus._M_p; }
   2bc38:	00050413          	addi	s0,a0,0
   2bc3c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2bc40:	01010793          	addi	a5,sp,16
   2bc44:	00f50463          	beq	a0,a5,2bc4c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xf8>
   2bc48:	869ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2bc4c:	00040513          	addi	a0,s0,0
   2bc50:	a41ea0ef          	jal	ra,16690 <_Unwind_Resume@plt>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2bc54:	00068713          	addi	a4,a3,0
   2bc58:	00060693          	addi	a3,a2,0
   2bc5c:	00058613          	addi	a2,a1,0
   2bc60:	00098593          	addi	a1,s3,0
   2bc64:	00017317          	auipc	t1,0x17
   2bc68:	86c33303          	ld	t1,-1940(t1) # 424d0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)@@Base+0x16cd8>
   2bc6c:	000300e7          	jalr	ra,0(t1)
      }
   2bc70:	fa5ff06f          	jal	zero,2bc14 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xc0>

000000000002bc74 <dwarf::at_sibling(dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x0X
//

AT_REFERENCE(sibling);
   2bc74:	fc010113          	addi	sp,sp,-64
   2bc78:	02113c23          	sd	ra,56(sp)
   2bc7c:	02813823          	sd	s0,48(sp)
   2bc80:	02913423          	sd	s1,40(sp)
   2bc84:	00050413          	addi	s0,a0,0
   2bc88:	00100613          	addi	a2,zero,1
   2bc8c:	00810493          	addi	s1,sp,8
   2bc90:	00048513          	addi	a0,s1,0
   2bc94:	d55f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bc98:	00048593          	addi	a1,s1,0
   2bc9c:	00040513          	addi	a0,s0,0
   2bca0:	db0f50ef          	jal	ra,21250 <dwarf::value::as_reference() const>
   2bca4:	00040513          	addi	a0,s0,0
   2bca8:	03813083          	ld	ra,56(sp)
   2bcac:	03013403          	ld	s0,48(sp)
   2bcb0:	02813483          	ld	s1,40(sp)
   2bcb4:	04010113          	addi	sp,sp,64
   2bcb8:	00008067          	jalr	zero,0(ra)

000000000002bcbc <dwarf::at_name[abi:cxx11](dwarf::die const&)>:
// XXX location
AT_STRING(name);
   2bcbc:	fc010113          	addi	sp,sp,-64
   2bcc0:	02113c23          	sd	ra,56(sp)
   2bcc4:	02813823          	sd	s0,48(sp)
   2bcc8:	02913423          	sd	s1,40(sp)
   2bccc:	00050413          	addi	s0,a0,0
   2bcd0:	00300613          	addi	a2,zero,3
   2bcd4:	00810493          	addi	s1,sp,8
   2bcd8:	00048513          	addi	a0,s1,0
   2bcdc:	d0df10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bce0:	00048593          	addi	a1,s1,0
   2bce4:	00040513          	addi	a0,s0,0
   2bce8:	cfcf50ef          	jal	ra,211e4 <dwarf::value::as_string[abi:cxx11]() const>
   2bcec:	00040513          	addi	a0,s0,0
   2bcf0:	03813083          	ld	ra,56(sp)
   2bcf4:	03013403          	ld	s0,48(sp)
   2bcf8:	02813483          	ld	s1,40(sp)
   2bcfc:	04010113          	addi	sp,sp,64
   2bd00:	00008067          	jalr	zero,0(ra)

000000000002bd04 <dwarf::at_ordering(dwarf::die const&)>:
AT_ENUM(ordering, DW_ORD);
   2bd04:	fd010113          	addi	sp,sp,-48
   2bd08:	02113423          	sd	ra,40(sp)
   2bd0c:	02813023          	sd	s0,32(sp)
   2bd10:	00050593          	addi	a1,a0,0
   2bd14:	00900613          	addi	a2,zero,9
   2bd18:	00810413          	addi	s0,sp,8
   2bd1c:	00040513          	addi	a0,s0,0
   2bd20:	cc9f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bd24:	00040513          	addi	a0,s0,0
   2bd28:	858f30ef          	jal	ra,1ed80 <dwarf::value::as_uconstant() const>
   2bd2c:	0005051b          	addiw	a0,a0,0
   2bd30:	02813083          	ld	ra,40(sp)
   2bd34:	02013403          	ld	s0,32(sp)
   2bd38:	03010113          	addi	sp,sp,48
   2bd3c:	00008067          	jalr	zero,0(ra)

000000000002bd40 <dwarf::at_low_pc(dwarf::die const&)>:
//////////////////////////////////////////////////////////////////
// 0x1X
//

// XXX stmt_list
AT_ADDRESS(low_pc);
   2bd40:	fd010113          	addi	sp,sp,-48
   2bd44:	02113423          	sd	ra,40(sp)
   2bd48:	02813023          	sd	s0,32(sp)
   2bd4c:	00050593          	addi	a1,a0,0
   2bd50:	01100613          	addi	a2,zero,17
   2bd54:	00810413          	addi	s0,sp,8
   2bd58:	00040513          	addi	a0,s0,0
   2bd5c:	c8df10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bd60:	00040513          	addi	a0,s0,0
   2bd64:	f94f20ef          	jal	ra,1e4f8 <dwarf::value::as_address() const>
   2bd68:	02813083          	ld	ra,40(sp)
   2bd6c:	02013403          	ld	s0,32(sp)
   2bd70:	03010113          	addi	sp,sp,48
   2bd74:	00008067          	jalr	zero,0(ra)

000000000002bd78 <dwarf::at_language(dwarf::die const&)>:
  default:
    throw format_error(to_string(DW_AT::high_pc) + " has unexpected type " +
                       to_string(v.get_type()));
  }
}
AT_ENUM(language, DW_LANG);
   2bd78:	fd010113          	addi	sp,sp,-48
   2bd7c:	02113423          	sd	ra,40(sp)
   2bd80:	02813023          	sd	s0,32(sp)
   2bd84:	00050593          	addi	a1,a0,0
   2bd88:	01300613          	addi	a2,zero,19
   2bd8c:	00810413          	addi	s0,sp,8
   2bd90:	00040513          	addi	a0,s0,0
   2bd94:	c55f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bd98:	00040513          	addi	a0,s0,0
   2bd9c:	fe5f20ef          	jal	ra,1ed80 <dwarf::value::as_uconstant() const>
   2bda0:	0005051b          	addiw	a0,a0,0
   2bda4:	02813083          	ld	ra,40(sp)
   2bda8:	02013403          	ld	s0,32(sp)
   2bdac:	03010113          	addi	sp,sp,48
   2bdb0:	00008067          	jalr	zero,0(ra)

000000000002bdb4 <dwarf::at_discr(dwarf::die const&)>:
AT_REFERENCE(discr);
   2bdb4:	fc010113          	addi	sp,sp,-64
   2bdb8:	02113c23          	sd	ra,56(sp)
   2bdbc:	02813823          	sd	s0,48(sp)
   2bdc0:	02913423          	sd	s1,40(sp)
   2bdc4:	00050413          	addi	s0,a0,0
   2bdc8:	01500613          	addi	a2,zero,21
   2bdcc:	00810493          	addi	s1,sp,8
   2bdd0:	00048513          	addi	a0,s1,0
   2bdd4:	c15f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bdd8:	00048593          	addi	a1,s1,0
   2bddc:	00040513          	addi	a0,s0,0
   2bde0:	c70f50ef          	jal	ra,21250 <dwarf::value::as_reference() const>
   2bde4:	00040513          	addi	a0,s0,0
   2bde8:	03813083          	ld	ra,56(sp)
   2bdec:	03013403          	ld	s0,48(sp)
   2bdf0:	02813483          	ld	s1,40(sp)
   2bdf4:	04010113          	addi	sp,sp,64
   2bdf8:	00008067          	jalr	zero,0(ra)

000000000002bdfc <dwarf::at_discr_value(dwarf::die const&)>:
AT_ANY(discr_value); // XXX Signed or unsigned
   2bdfc:	ff010113          	addi	sp,sp,-16
   2be00:	00113423          	sd	ra,8(sp)
   2be04:	00813023          	sd	s0,0(sp)
   2be08:	00050413          	addi	s0,a0,0
   2be0c:	01600613          	addi	a2,zero,22
   2be10:	bd9f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2be14:	00040513          	addi	a0,s0,0
   2be18:	00813083          	ld	ra,8(sp)
   2be1c:	00013403          	ld	s0,0(sp)
   2be20:	01010113          	addi	sp,sp,16
   2be24:	00008067          	jalr	zero,0(ra)

000000000002be28 <dwarf::at_visibility(dwarf::die const&)>:
AT_ENUM(visibility, DW_VIS);
   2be28:	fd010113          	addi	sp,sp,-48
   2be2c:	02113423          	sd	ra,40(sp)
   2be30:	02813023          	sd	s0,32(sp)
   2be34:	00050593          	addi	a1,a0,0
   2be38:	01700613          	addi	a2,zero,23
   2be3c:	00810413          	addi	s0,sp,8
   2be40:	00040513          	addi	a0,s0,0
   2be44:	ba5f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2be48:	00040513          	addi	a0,s0,0
   2be4c:	f35f20ef          	jal	ra,1ed80 <dwarf::value::as_uconstant() const>
   2be50:	0005051b          	addiw	a0,a0,0
   2be54:	02813083          	ld	ra,40(sp)
   2be58:	02013403          	ld	s0,32(sp)
   2be5c:	03010113          	addi	sp,sp,48
   2be60:	00008067          	jalr	zero,0(ra)

000000000002be64 <dwarf::at_import(dwarf::die const&)>:
AT_REFERENCE(import);
   2be64:	fc010113          	addi	sp,sp,-64
   2be68:	02113c23          	sd	ra,56(sp)
   2be6c:	02813823          	sd	s0,48(sp)
   2be70:	02913423          	sd	s1,40(sp)
   2be74:	00050413          	addi	s0,a0,0
   2be78:	01800613          	addi	a2,zero,24
   2be7c:	00810493          	addi	s1,sp,8
   2be80:	00048513          	addi	a0,s1,0
   2be84:	b65f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2be88:	00048593          	addi	a1,s1,0
   2be8c:	00040513          	addi	a0,s0,0
   2be90:	bc0f50ef          	jal	ra,21250 <dwarf::value::as_reference() const>
   2be94:	00040513          	addi	a0,s0,0
   2be98:	03813083          	ld	ra,56(sp)
   2be9c:	03013403          	ld	s0,48(sp)
   2bea0:	02813483          	ld	s1,40(sp)
   2bea4:	04010113          	addi	sp,sp,64
   2bea8:	00008067          	jalr	zero,0(ra)

000000000002beac <dwarf::at_common_reference(dwarf::die const&)>:
// XXX string_length
AT_REFERENCE(common_reference);
   2beac:	fc010113          	addi	sp,sp,-64
   2beb0:	02113c23          	sd	ra,56(sp)
   2beb4:	02813823          	sd	s0,48(sp)
   2beb8:	02913423          	sd	s1,40(sp)
   2bebc:	00050413          	addi	s0,a0,0
   2bec0:	01a00613          	addi	a2,zero,26
   2bec4:	00810493          	addi	s1,sp,8
   2bec8:	00048513          	addi	a0,s1,0
   2becc:	b1df10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bed0:	00048593          	addi	a1,s1,0
   2bed4:	00040513          	addi	a0,s0,0
   2bed8:	b78f50ef          	jal	ra,21250 <dwarf::value::as_reference() const>
   2bedc:	00040513          	addi	a0,s0,0
   2bee0:	03813083          	ld	ra,56(sp)
   2bee4:	03013403          	ld	s0,48(sp)
   2bee8:	02813483          	ld	s1,40(sp)
   2beec:	04010113          	addi	sp,sp,64
   2bef0:	00008067          	jalr	zero,0(ra)

000000000002bef4 <dwarf::at_comp_dir[abi:cxx11](dwarf::die const&)>:
AT_STRING(comp_dir);
   2bef4:	fc010113          	addi	sp,sp,-64
   2bef8:	02113c23          	sd	ra,56(sp)
   2befc:	02813823          	sd	s0,48(sp)
   2bf00:	02913423          	sd	s1,40(sp)
   2bf04:	00050413          	addi	s0,a0,0
   2bf08:	01b00613          	addi	a2,zero,27
   2bf0c:	00810493          	addi	s1,sp,8
   2bf10:	00048513          	addi	a0,s1,0
   2bf14:	ad5f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bf18:	00048593          	addi	a1,s1,0
   2bf1c:	00040513          	addi	a0,s0,0
   2bf20:	ac4f50ef          	jal	ra,211e4 <dwarf::value::as_string[abi:cxx11]() const>
   2bf24:	00040513          	addi	a0,s0,0
   2bf28:	03813083          	ld	ra,56(sp)
   2bf2c:	03013403          	ld	s0,48(sp)
   2bf30:	02813483          	ld	s1,40(sp)
   2bf34:	04010113          	addi	sp,sp,64
   2bf38:	00008067          	jalr	zero,0(ra)

000000000002bf3c <dwarf::at_const_value(dwarf::die const&)>:
AT_ANY(const_value);
   2bf3c:	ff010113          	addi	sp,sp,-16
   2bf40:	00113423          	sd	ra,8(sp)
   2bf44:	00813023          	sd	s0,0(sp)
   2bf48:	00050413          	addi	s0,a0,0
   2bf4c:	01c00613          	addi	a2,zero,28
   2bf50:	a99f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bf54:	00040513          	addi	a0,s0,0
   2bf58:	00813083          	ld	ra,8(sp)
   2bf5c:	00013403          	ld	s0,0(sp)
   2bf60:	01010113          	addi	sp,sp,16
   2bf64:	00008067          	jalr	zero,0(ra)

000000000002bf68 <dwarf::at_containing_type(dwarf::die const&)>:
AT_REFERENCE(containing_type);
   2bf68:	fc010113          	addi	sp,sp,-64
   2bf6c:	02113c23          	sd	ra,56(sp)
   2bf70:	02813823          	sd	s0,48(sp)
   2bf74:	02913423          	sd	s1,40(sp)
   2bf78:	00050413          	addi	s0,a0,0
   2bf7c:	01d00613          	addi	a2,zero,29
   2bf80:	00810493          	addi	s1,sp,8
   2bf84:	00048513          	addi	a0,s1,0
   2bf88:	a61f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bf8c:	00048593          	addi	a1,s1,0
   2bf90:	00040513          	addi	a0,s0,0
   2bf94:	abcf50ef          	jal	ra,21250 <dwarf::value::as_reference() const>
   2bf98:	00040513          	addi	a0,s0,0
   2bf9c:	03813083          	ld	ra,56(sp)
   2bfa0:	03013403          	ld	s0,48(sp)
   2bfa4:	02813483          	ld	s1,40(sp)
   2bfa8:	04010113          	addi	sp,sp,64
   2bfac:	00008067          	jalr	zero,0(ra)

000000000002bfb0 <dwarf::at_inline(dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x2X
//

DW_INL at_inline(const die &d) {
   2bfb0:	fd010113          	addi	sp,sp,-48
   2bfb4:	02113423          	sd	ra,40(sp)
   2bfb8:	02813023          	sd	s0,32(sp)
   2bfbc:	00050593          	addi	a1,a0,0
  // XXX Missing attribute is equivalent to DW_INL_not_inlined
  // (DWARF4 section 3.3.8)
  return (DW_INL)d[DW_AT::inline_].as_uconstant();
   2bfc0:	02000613          	addi	a2,zero,32
   2bfc4:	00810413          	addi	s0,sp,8
   2bfc8:	00040513          	addi	a0,s0,0
   2bfcc:	a1df10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bfd0:	00040513          	addi	a0,s0,0
   2bfd4:	dadf20ef          	jal	ra,1ed80 <dwarf::value::as_uconstant() const>
}
   2bfd8:	0005051b          	addiw	a0,a0,0
   2bfdc:	02813083          	ld	ra,40(sp)
   2bfe0:	02013403          	ld	s0,32(sp)
   2bfe4:	03010113          	addi	sp,sp,48
   2bfe8:	00008067          	jalr	zero,0(ra)

000000000002bfec <dwarf::at_is_optional(dwarf::die const&)>:
AT_FLAG(is_optional);
   2bfec:	fd010113          	addi	sp,sp,-48
   2bff0:	02113423          	sd	ra,40(sp)
   2bff4:	02813023          	sd	s0,32(sp)
   2bff8:	00050593          	addi	a1,a0,0
   2bffc:	02100613          	addi	a2,zero,33
   2c000:	00810413          	addi	s0,sp,8
   2c004:	00040513          	addi	a0,s0,0
   2c008:	9e1f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c00c:	00040513          	addi	a0,s0,0
   2c010:	d59f30ef          	jal	ra,1fd68 <dwarf::value::as_flag() const>
   2c014:	02813083          	ld	ra,40(sp)
   2c018:	02013403          	ld	s0,32(sp)
   2c01c:	03010113          	addi	sp,sp,48
   2c020:	00008067          	jalr	zero,0(ra)

000000000002c024 <dwarf::at_producer[abi:cxx11](dwarf::die const&)>:
AT_UDYNAMIC(lower_bound); // XXX Language-based default?
AT_STRING(producer);
   2c024:	fc010113          	addi	sp,sp,-64
   2c028:	02113c23          	sd	ra,56(sp)
   2c02c:	02813823          	sd	s0,48(sp)
   2c030:	02913423          	sd	s1,40(sp)
   2c034:	00050413          	addi	s0,a0,0
   2c038:	02500613          	addi	a2,zero,37
   2c03c:	00810493          	addi	s1,sp,8
   2c040:	00048513          	addi	a0,s1,0
   2c044:	9a5f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c048:	00048593          	addi	a1,s1,0
   2c04c:	00040513          	addi	a0,s0,0
   2c050:	994f50ef          	jal	ra,211e4 <dwarf::value::as_string[abi:cxx11]() const>
   2c054:	00040513          	addi	a0,s0,0
   2c058:	03813083          	ld	ra,56(sp)
   2c05c:	03013403          	ld	s0,48(sp)
   2c060:	02813483          	ld	s1,40(sp)
   2c064:	04010113          	addi	sp,sp,64
   2c068:	00008067          	jalr	zero,0(ra)

000000000002c06c <dwarf::at_prototyped(dwarf::die const&)>:
AT_FLAG(prototyped);
   2c06c:	fd010113          	addi	sp,sp,-48
   2c070:	02113423          	sd	ra,40(sp)
   2c074:	02813023          	sd	s0,32(sp)
   2c078:	00050593          	addi	a1,a0,0
   2c07c:	02700613          	addi	a2,zero,39
   2c080:	00810413          	addi	s0,sp,8
   2c084:	00040513          	addi	a0,s0,0
   2c088:	961f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c08c:	00040513          	addi	a0,s0,0
   2c090:	cd9f30ef          	jal	ra,1fd68 <dwarf::value::as_flag() const>
   2c094:	02813083          	ld	ra,40(sp)
   2c098:	02013403          	ld	s0,32(sp)
   2c09c:	03010113          	addi	sp,sp,48
   2c0a0:	00008067          	jalr	zero,0(ra)

000000000002c0a4 <dwarf::at_abstract_origin(dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x3X
//

AT_REFERENCE(abstract_origin);
   2c0a4:	fc010113          	addi	sp,sp,-64
   2c0a8:	02113c23          	sd	ra,56(sp)
   2c0ac:	02813823          	sd	s0,48(sp)
   2c0b0:	02913423          	sd	s1,40(sp)
   2c0b4:	00050413          	addi	s0,a0,0
   2c0b8:	03100613          	addi	a2,zero,49
   2c0bc:	00810493          	addi	s1,sp,8
   2c0c0:	00048513          	addi	a0,s1,0
   2c0c4:	925f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c0c8:	00048593          	addi	a1,s1,0
   2c0cc:	00040513          	addi	a0,s0,0
   2c0d0:	980f50ef          	jal	ra,21250 <dwarf::value::as_reference() const>
   2c0d4:	00040513          	addi	a0,s0,0
   2c0d8:	03813083          	ld	ra,56(sp)
   2c0dc:	03013403          	ld	s0,48(sp)
   2c0e0:	02813483          	ld	s1,40(sp)
   2c0e4:	04010113          	addi	sp,sp,64
   2c0e8:	00008067          	jalr	zero,0(ra)

000000000002c0ec <dwarf::at_accessibility(dwarf::die const&)>:
AT_ENUM(accessibility, DW_ACCESS);
   2c0ec:	fd010113          	addi	sp,sp,-48
   2c0f0:	02113423          	sd	ra,40(sp)
   2c0f4:	02813023          	sd	s0,32(sp)
   2c0f8:	00050593          	addi	a1,a0,0
   2c0fc:	03200613          	addi	a2,zero,50
   2c100:	00810413          	addi	s0,sp,8
   2c104:	00040513          	addi	a0,s0,0
   2c108:	8e1f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c10c:	00040513          	addi	a0,s0,0
   2c110:	c71f20ef          	jal	ra,1ed80 <dwarf::value::as_uconstant() const>
   2c114:	0005051b          	addiw	a0,a0,0
   2c118:	02813083          	ld	ra,40(sp)
   2c11c:	02013403          	ld	s0,32(sp)
   2c120:	03010113          	addi	sp,sp,48
   2c124:	00008067          	jalr	zero,0(ra)

000000000002c128 <dwarf::at_artificial(dwarf::die const&)>:
// XXX const address_class
AT_FLAG(artificial);
   2c128:	fd010113          	addi	sp,sp,-48
   2c12c:	02113423          	sd	ra,40(sp)
   2c130:	02813023          	sd	s0,32(sp)
   2c134:	00050593          	addi	a1,a0,0
   2c138:	03400613          	addi	a2,zero,52
   2c13c:	00810413          	addi	s0,sp,8
   2c140:	00040513          	addi	a0,s0,0
   2c144:	8a5f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c148:	00040513          	addi	a0,s0,0
   2c14c:	c1df30ef          	jal	ra,1fd68 <dwarf::value::as_flag() const>
   2c150:	02813083          	ld	ra,40(sp)
   2c154:	02013403          	ld	s0,32(sp)
   2c158:	03010113          	addi	sp,sp,48
   2c15c:	00008067          	jalr	zero,0(ra)

000000000002c160 <dwarf::at_calling_convention(dwarf::die const&)>:
// XXX base_types
AT_ENUM(calling_convention, DW_CC);
   2c160:	fd010113          	addi	sp,sp,-48
   2c164:	02113423          	sd	ra,40(sp)
   2c168:	02813023          	sd	s0,32(sp)
   2c16c:	00050593          	addi	a1,a0,0
   2c170:	03600613          	addi	a2,zero,54
   2c174:	00810413          	addi	s0,sp,8
   2c178:	00040513          	addi	a0,s0,0
   2c17c:	86df10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c180:	00040513          	addi	a0,s0,0
   2c184:	bfdf20ef          	jal	ra,1ed80 <dwarf::value::as_uconstant() const>
   2c188:	0005051b          	addiw	a0,a0,0
   2c18c:	02813083          	ld	ra,40(sp)
   2c190:	02013403          	ld	s0,32(sp)
   2c194:	03010113          	addi	sp,sp,48
   2c198:	00008067          	jalr	zero,0(ra)

000000000002c19c <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)>:
AT_UDYNAMIC(count);
expr_result at_data_member_location(const die &d, expr_context *ctx, taddr base,
                                    taddr pc) {
   2c19c:	f6010113          	addi	sp,sp,-160
   2c1a0:	08113c23          	sd	ra,152(sp)
   2c1a4:	08813823          	sd	s0,144(sp)
   2c1a8:	08913423          	sd	s1,136(sp)
   2c1ac:	09213023          	sd	s2,128(sp)
   2c1b0:	07313c23          	sd	s3,120(sp)
   2c1b4:	00050413          	addi	s0,a0,0
   2c1b8:	00060913          	addi	s2,a2,0
   2c1bc:	00068493          	addi	s1,a3,0
  value v(d[DW_AT::data_member_location]);
   2c1c0:	03800613          	addi	a2,zero,56
   2c1c4:	04010513          	addi	a0,sp,64
   2c1c8:	821f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
  type get_type() const { return typ; }
   2c1cc:	04c12783          	lw	a5,76(sp)
  switch (v.get_type()) {
   2c1d0:	00600713          	addi	a4,zero,6
   2c1d4:	06e78c63          	beq	a5,a4,2c24c <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xb0>
   2c1d8:	04f74863          	blt	a4,a5,2c228 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x8c>
   2c1dc:	ffd7879b          	addiw	a5,a5,-3
   2c1e0:	00100713          	addi	a4,zero,1
   2c1e4:	0af76463          	bltu	a4,a5,2c28c <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xf0>
  case value::type::constant:
  case value::type::uconstant:
    return {expr_result::type::address, base + v.as_uconstant()};
   2c1e8:	00043023          	sd	zero,0(s0)
   2c1ec:	00043423          	sd	zero,8(s0)
   2c1f0:	00043823          	sd	zero,16(s0)
   2c1f4:	00043c23          	sd	zero,24(s0)
   2c1f8:	04010513          	addi	a0,sp,64
   2c1fc:	b85f20ef          	jal	ra,1ed80 <dwarf::value::as_uconstant() const>
   2c200:	00a484b3          	add	s1,s1,a0
   2c204:	00943423          	sd	s1,8(s0)
    throw std::runtime_error("not implemented");
  default:
    throw format_error("DW_AT_data_member_location has unexpected type " +
                       to_string(v.get_type()));
  }
}
   2c208:	00040513          	addi	a0,s0,0
   2c20c:	09813083          	ld	ra,152(sp)
   2c210:	09013403          	ld	s0,144(sp)
   2c214:	08813483          	ld	s1,136(sp)
   2c218:	08013903          	ld	s2,128(sp)
   2c21c:	07813983          	ld	s3,120(sp)
   2c220:	0a010113          	addi	sp,sp,160
   2c224:	00008067          	jalr	zero,0(ra)
  switch (v.get_type()) {
   2c228:	00900713          	addi	a4,zero,9
   2c22c:	06e79063          	bne	a5,a4,2c28c <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xf0>
    throw std::runtime_error("not implemented");
   2c230:	01000513          	addi	a0,zero,16
   2c234:	99cea0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2c238:	00050413          	addi	s0,a0,0
   2c23c:	0000c597          	auipc	a1,0xc
   2c240:	b1458593          	addi	a1,a1,-1260 # 37d50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x70>
   2c244:	95cea0ef          	jal	ra,163a0 <std::runtime_error::runtime_error(char const*)@plt>
   2c248:	02c0006f          	jal	zero,2c274 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xd8>
    return v.as_exprloc().evaluate(ctx, base);
   2c24c:	04010593          	addi	a1,sp,64
   2c250:	05810993          	addi	s3,sp,88
   2c254:	00098513          	addi	a0,s3,0
   2c258:	decf30ef          	jal	ra,1f844 <dwarf::value::as_exprloc() const>
   2c25c:	00048693          	addi	a3,s1,0
   2c260:	00090613          	addi	a2,s2,0
   2c264:	00098593          	addi	a1,s3,0
   2c268:	00040513          	addi	a0,s0,0
   2c26c:	b94fa0ef          	jal	ra,26600 <dwarf::expr::evaluate(dwarf::expr_context*, unsigned long) const>
   2c270:	f99ff06f          	jal	zero,2c208 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x6c>
    throw std::runtime_error("not implemented");
   2c274:	00016617          	auipc	a2,0x16
   2c278:	18c63603          	ld	a2,396(a2) # 42400 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   2c27c:	00016597          	auipc	a1,0x16
   2c280:	3745b583          	ld	a1,884(a1) # 425f0 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   2c284:	00040513          	addi	a0,s0,0
   2c288:	bd8ea0ef          	jal	ra,16660 <__cxa_throw@plt>
                       to_string(v.get_type()));
   2c28c:	01000513          	addi	a0,zero,16
   2c290:	940ea0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2c294:	00050493          	addi	s1,a0,0
   2c298:	04c12583          	lw	a1,76(sp)
   2c29c:	00010513          	addi	a0,sp,0
   2c2a0:	389020ef          	jal	ra,2ee28 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   2c2a4:	0000c617          	auipc	a2,0xc
   2c2a8:	abc60613          	addi	a2,a2,-1348 # 37d60 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x80>
   2c2ac:	00000593          	addi	a1,zero,0
   2c2b0:	00010513          	addi	a0,sp,0
   2c2b4:	88cea0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2c2b8:	00050593          	addi	a1,a0,0
   2c2bc:	02010413          	addi	s0,sp,32
   2c2c0:	00040513          	addi	a0,s0,0
   2c2c4:	94cea0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   2c2c8:	00040593          	addi	a1,s0,0
   2c2cc:	00048513          	addi	a0,s1,0
   2c2d0:	a70ea0ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2c2d4:	00016797          	auipc	a5,0x16
   2c2d8:	27c7b783          	ld	a5,636(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   2c2dc:	01078793          	addi	a5,a5,16
   2c2e0:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   2c2e4:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2c2e8:	03010793          	addi	a5,sp,48
   2c2ec:	00f50463          	beq	a0,a5,2c2f4 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x158>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2c2f0:	9c0ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2c2f4:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2c2f8:	01010793          	addi	a5,sp,16
   2c2fc:	00f50463          	beq	a0,a5,2c304 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x168>
   2c300:	9b0ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2c304:	00016617          	auipc	a2,0x16
   2c308:	07463603          	ld	a2,116(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   2c30c:	00016597          	auipc	a1,0x16
   2c310:	f9c5b583          	ld	a1,-100(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   2c314:	00048513          	addi	a0,s1,0
   2c318:	b48ea0ef          	jal	ra,16660 <__cxa_throw@plt>
    throw std::runtime_error("not implemented");
   2c31c:	00050493          	addi	s1,a0,0
   2c320:	00040513          	addi	a0,s0,0
   2c324:	94cea0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2c328:	00048513          	addi	a0,s1,0
   2c32c:	b64ea0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2c330:	00050413          	addi	s0,a0,0
   2c334:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2c338:	03010793          	addi	a5,sp,48
   2c33c:	00f50463          	beq	a0,a5,2c344 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x1a8>
   2c340:	970ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2c344:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2c348:	01010793          	addi	a5,sp,16
   2c34c:	00f50463          	beq	a0,a5,2c354 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x1b8>
   2c350:	960ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   2c354:	00048513          	addi	a0,s1,0
   2c358:	918ea0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2c35c:	00040513          	addi	a0,s0,0
   2c360:	b30ea0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2c364:	00050413          	addi	s0,a0,0
   2c368:	fddff06f          	jal	zero,2c344 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x1a8>
   2c36c:	00050413          	addi	s0,a0,0
   2c370:	fe5ff06f          	jal	zero,2c354 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x1b8>

000000000002c374 <dwarf::at_declaration(dwarf::die const&)>:
// XXX decl_column decl_file decl_line
AT_FLAG(declaration);
   2c374:	fd010113          	addi	sp,sp,-48
   2c378:	02113423          	sd	ra,40(sp)
   2c37c:	02813023          	sd	s0,32(sp)
   2c380:	00050593          	addi	a1,a0,0
   2c384:	03c00613          	addi	a2,zero,60
   2c388:	00810413          	addi	s0,sp,8
   2c38c:	00040513          	addi	a0,s0,0
   2c390:	e58f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c394:	00040513          	addi	a0,s0,0
   2c398:	9d1f30ef          	jal	ra,1fd68 <dwarf::value::as_flag() const>
   2c39c:	02813083          	ld	ra,40(sp)
   2c3a0:	02013403          	ld	s0,32(sp)
   2c3a4:	03010113          	addi	sp,sp,48
   2c3a8:	00008067          	jalr	zero,0(ra)

000000000002c3ac <dwarf::at_encoding(dwarf::die const&)>:
// XXX discr_list
AT_ENUM(encoding, DW_ATE);
   2c3ac:	fd010113          	addi	sp,sp,-48
   2c3b0:	02113423          	sd	ra,40(sp)
   2c3b4:	02813023          	sd	s0,32(sp)
   2c3b8:	00050593          	addi	a1,a0,0
   2c3bc:	03e00613          	addi	a2,zero,62
   2c3c0:	00810413          	addi	s0,sp,8
   2c3c4:	00040513          	addi	a0,s0,0
   2c3c8:	e20f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c3cc:	00040513          	addi	a0,s0,0
   2c3d0:	9b1f20ef          	jal	ra,1ed80 <dwarf::value::as_uconstant() const>
   2c3d4:	0005051b          	addiw	a0,a0,0
   2c3d8:	02813083          	ld	ra,40(sp)
   2c3dc:	02013403          	ld	s0,32(sp)
   2c3e0:	03010113          	addi	sp,sp,48
   2c3e4:	00008067          	jalr	zero,0(ra)

000000000002c3e8 <dwarf::at_external(dwarf::die const&)>:
AT_FLAG(external);
   2c3e8:	fd010113          	addi	sp,sp,-48
   2c3ec:	02113423          	sd	ra,40(sp)
   2c3f0:	02813023          	sd	s0,32(sp)
   2c3f4:	00050593          	addi	a1,a0,0
   2c3f8:	03f00613          	addi	a2,zero,63
   2c3fc:	00810413          	addi	s0,sp,8
   2c400:	00040513          	addi	a0,s0,0
   2c404:	de4f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c408:	00040513          	addi	a0,s0,0
   2c40c:	95df30ef          	jal	ra,1fd68 <dwarf::value::as_flag() const>
   2c410:	02813083          	ld	ra,40(sp)
   2c414:	02013403          	ld	s0,32(sp)
   2c418:	03010113          	addi	sp,sp,48
   2c41c:	00008067          	jalr	zero,0(ra)

000000000002c420 <dwarf::at_friend(dwarf::die const&)>:
//////////////////////////////////////////////////////////////////
// 0x4X
//

// XXX frame_base
die at_friend(const die &d) { return d[DW_AT::friend_].as_reference(); }
   2c420:	fc010113          	addi	sp,sp,-64
   2c424:	02113c23          	sd	ra,56(sp)
   2c428:	02813823          	sd	s0,48(sp)
   2c42c:	02913423          	sd	s1,40(sp)
   2c430:	00050413          	addi	s0,a0,0
   2c434:	04100613          	addi	a2,zero,65
   2c438:	00810493          	addi	s1,sp,8
   2c43c:	00048513          	addi	a0,s1,0
   2c440:	da8f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c444:	00048593          	addi	a1,s1,0
   2c448:	00040513          	addi	a0,s0,0
   2c44c:	e05f40ef          	jal	ra,21250 <dwarf::value::as_reference() const>
   2c450:	00040513          	addi	a0,s0,0
   2c454:	03813083          	ld	ra,56(sp)
   2c458:	03013403          	ld	s0,48(sp)
   2c45c:	02813483          	ld	s1,40(sp)
   2c460:	04010113          	addi	sp,sp,64
   2c464:	00008067          	jalr	zero,0(ra)

000000000002c468 <dwarf::at_identifier_case(dwarf::die const&)>:
AT_ENUM(identifier_case, DW_ID);
   2c468:	fd010113          	addi	sp,sp,-48
   2c46c:	02113423          	sd	ra,40(sp)
   2c470:	02813023          	sd	s0,32(sp)
   2c474:	00050593          	addi	a1,a0,0
   2c478:	04200613          	addi	a2,zero,66
   2c47c:	00810413          	addi	s0,sp,8
   2c480:	00040513          	addi	a0,s0,0
   2c484:	d64f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c488:	00040513          	addi	a0,s0,0
   2c48c:	8f5f20ef          	jal	ra,1ed80 <dwarf::value::as_uconstant() const>
   2c490:	0005051b          	addiw	a0,a0,0
   2c494:	02813083          	ld	ra,40(sp)
   2c498:	02013403          	ld	s0,32(sp)
   2c49c:	03010113          	addi	sp,sp,48
   2c4a0:	00008067          	jalr	zero,0(ra)

000000000002c4a4 <dwarf::at_namelist_item(dwarf::die const&)>:
// XXX macro_info
AT_REFERENCE(namelist_item);
   2c4a4:	fc010113          	addi	sp,sp,-64
   2c4a8:	02113c23          	sd	ra,56(sp)
   2c4ac:	02813823          	sd	s0,48(sp)
   2c4b0:	02913423          	sd	s1,40(sp)
   2c4b4:	00050413          	addi	s0,a0,0
   2c4b8:	04400613          	addi	a2,zero,68
   2c4bc:	00810493          	addi	s1,sp,8
   2c4c0:	00048513          	addi	a0,s1,0
   2c4c4:	d24f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c4c8:	00048593          	addi	a1,s1,0
   2c4cc:	00040513          	addi	a0,s0,0
   2c4d0:	d81f40ef          	jal	ra,21250 <dwarf::value::as_reference() const>
   2c4d4:	00040513          	addi	a0,s0,0
   2c4d8:	03813083          	ld	ra,56(sp)
   2c4dc:	03013403          	ld	s0,48(sp)
   2c4e0:	02813483          	ld	s1,40(sp)
   2c4e4:	04010113          	addi	sp,sp,64
   2c4e8:	00008067          	jalr	zero,0(ra)

000000000002c4ec <dwarf::at_priority(dwarf::die const&)>:
AT_REFERENCE(priority); // XXX Computed might be useful
   2c4ec:	fc010113          	addi	sp,sp,-64
   2c4f0:	02113c23          	sd	ra,56(sp)
   2c4f4:	02813823          	sd	s0,48(sp)
   2c4f8:	02913423          	sd	s1,40(sp)
   2c4fc:	00050413          	addi	s0,a0,0
   2c500:	04500613          	addi	a2,zero,69
   2c504:	00810493          	addi	s1,sp,8
   2c508:	00048513          	addi	a0,s1,0
   2c50c:	cdcf10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c510:	00048593          	addi	a1,s1,0
   2c514:	00040513          	addi	a0,s0,0
   2c518:	d39f40ef          	jal	ra,21250 <dwarf::value::as_reference() const>
   2c51c:	00040513          	addi	a0,s0,0
   2c520:	03813083          	ld	ra,56(sp)
   2c524:	03013403          	ld	s0,48(sp)
   2c528:	02813483          	ld	s1,40(sp)
   2c52c:	04010113          	addi	sp,sp,64
   2c530:	00008067          	jalr	zero,0(ra)

000000000002c534 <dwarf::at_specification(dwarf::die const&)>:
// XXX segment
AT_REFERENCE(specification);
   2c534:	fc010113          	addi	sp,sp,-64
   2c538:	02113c23          	sd	ra,56(sp)
   2c53c:	02813823          	sd	s0,48(sp)
   2c540:	02913423          	sd	s1,40(sp)
   2c544:	00050413          	addi	s0,a0,0
   2c548:	04700613          	addi	a2,zero,71
   2c54c:	00810493          	addi	s1,sp,8
   2c550:	00048513          	addi	a0,s1,0
   2c554:	c94f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c558:	00048593          	addi	a1,s1,0
   2c55c:	00040513          	addi	a0,s0,0
   2c560:	cf1f40ef          	jal	ra,21250 <dwarf::value::as_reference() const>
   2c564:	00040513          	addi	a0,s0,0
   2c568:	03813083          	ld	ra,56(sp)
   2c56c:	03013403          	ld	s0,48(sp)
   2c570:	02813483          	ld	s1,40(sp)
   2c574:	04010113          	addi	sp,sp,64
   2c578:	00008067          	jalr	zero,0(ra)

000000000002c57c <dwarf::at_type(dwarf::die const&)>:
// XXX static_link
AT_REFERENCE(type);
   2c57c:	fc010113          	addi	sp,sp,-64
   2c580:	02113c23          	sd	ra,56(sp)
   2c584:	02813823          	sd	s0,48(sp)
   2c588:	02913423          	sd	s1,40(sp)
   2c58c:	00050413          	addi	s0,a0,0
   2c590:	04900613          	addi	a2,zero,73
   2c594:	00810493          	addi	s1,sp,8
   2c598:	00048513          	addi	a0,s1,0
   2c59c:	c4cf10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c5a0:	00048593          	addi	a1,s1,0
   2c5a4:	00040513          	addi	a0,s0,0
   2c5a8:	ca9f40ef          	jal	ra,21250 <dwarf::value::as_reference() const>
   2c5ac:	00040513          	addi	a0,s0,0
   2c5b0:	03813083          	ld	ra,56(sp)
   2c5b4:	03013403          	ld	s0,48(sp)
   2c5b8:	02813483          	ld	s1,40(sp)
   2c5bc:	04010113          	addi	sp,sp,64
   2c5c0:	00008067          	jalr	zero,0(ra)

000000000002c5c4 <dwarf::at_variable_parameter(dwarf::die const&)>:
// XXX use_location
AT_FLAG(variable_parameter);
   2c5c4:	fd010113          	addi	sp,sp,-48
   2c5c8:	02113423          	sd	ra,40(sp)
   2c5cc:	02813023          	sd	s0,32(sp)
   2c5d0:	00050593          	addi	a1,a0,0
   2c5d4:	04b00613          	addi	a2,zero,75
   2c5d8:	00810413          	addi	s0,sp,8
   2c5dc:	00040513          	addi	a0,s0,0
   2c5e0:	c08f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c5e4:	00040513          	addi	a0,s0,0
   2c5e8:	f80f30ef          	jal	ra,1fd68 <dwarf::value::as_flag() const>
   2c5ec:	02813083          	ld	ra,40(sp)
   2c5f0:	02013403          	ld	s0,32(sp)
   2c5f4:	03010113          	addi	sp,sp,48
   2c5f8:	00008067          	jalr	zero,0(ra)

000000000002c5fc <dwarf::at_virtuality(dwarf::die const&)>:
// XXX 7.11 The value DW_VIRTUALITY_none is equivalent to the absence
// of the DW_AT_virtuality attribute.
AT_ENUM(virtuality, DW_VIRTUALITY);
   2c5fc:	fd010113          	addi	sp,sp,-48
   2c600:	02113423          	sd	ra,40(sp)
   2c604:	02813023          	sd	s0,32(sp)
   2c608:	00050593          	addi	a1,a0,0
   2c60c:	04c00613          	addi	a2,zero,76
   2c610:	00810413          	addi	s0,sp,8
   2c614:	00040513          	addi	a0,s0,0
   2c618:	bd0f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c61c:	00040513          	addi	a0,s0,0
   2c620:	f60f20ef          	jal	ra,1ed80 <dwarf::value::as_uconstant() const>
   2c624:	0005051b          	addiw	a0,a0,0
   2c628:	02813083          	ld	ra,40(sp)
   2c62c:	02013403          	ld	s0,32(sp)
   2c630:	03010113          	addi	sp,sp,48
   2c634:	00008067          	jalr	zero,0(ra)

000000000002c638 <dwarf::at_entry_pc(dwarf::die const&)>:
// 0x5X
//

// XXX data_location
AT_UDYNAMIC(byte_stride);
AT_ADDRESS(entry_pc);
   2c638:	fd010113          	addi	sp,sp,-48
   2c63c:	02113423          	sd	ra,40(sp)
   2c640:	02813023          	sd	s0,32(sp)
   2c644:	00050593          	addi	a1,a0,0
   2c648:	05200613          	addi	a2,zero,82
   2c64c:	00810413          	addi	s0,sp,8
   2c650:	00040513          	addi	a0,s0,0
   2c654:	b94f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c658:	00040513          	addi	a0,s0,0
   2c65c:	e9df10ef          	jal	ra,1e4f8 <dwarf::value::as_address() const>
   2c660:	02813083          	ld	ra,40(sp)
   2c664:	02013403          	ld	s0,32(sp)
   2c668:	03010113          	addi	sp,sp,48
   2c66c:	00008067          	jalr	zero,0(ra)

000000000002c670 <dwarf::at_use_UTF8(dwarf::die const&)>:
AT_FLAG(use_UTF8);
   2c670:	fd010113          	addi	sp,sp,-48
   2c674:	02113423          	sd	ra,40(sp)
   2c678:	02813023          	sd	s0,32(sp)
   2c67c:	00050593          	addi	a1,a0,0
   2c680:	05300613          	addi	a2,zero,83
   2c684:	00810413          	addi	s0,sp,8
   2c688:	00040513          	addi	a0,s0,0
   2c68c:	b5cf10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c690:	00040513          	addi	a0,s0,0
   2c694:	ed4f30ef          	jal	ra,1fd68 <dwarf::value::as_flag() const>
   2c698:	02813083          	ld	ra,40(sp)
   2c69c:	02013403          	ld	s0,32(sp)
   2c6a0:	03010113          	addi	sp,sp,48
   2c6a4:	00008067          	jalr	zero,0(ra)

000000000002c6a8 <dwarf::at_extension(dwarf::die const&)>:
AT_REFERENCE(extension);
   2c6a8:	fc010113          	addi	sp,sp,-64
   2c6ac:	02113c23          	sd	ra,56(sp)
   2c6b0:	02813823          	sd	s0,48(sp)
   2c6b4:	02913423          	sd	s1,40(sp)
   2c6b8:	00050413          	addi	s0,a0,0
   2c6bc:	05400613          	addi	a2,zero,84
   2c6c0:	00810493          	addi	s1,sp,8
   2c6c4:	00048513          	addi	a0,s1,0
   2c6c8:	b20f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c6cc:	00048593          	addi	a1,s1,0
   2c6d0:	00040513          	addi	a0,s0,0
   2c6d4:	b7df40ef          	jal	ra,21250 <dwarf::value::as_reference() const>
   2c6d8:	00040513          	addi	a0,s0,0
   2c6dc:	03813083          	ld	ra,56(sp)
   2c6e0:	03013403          	ld	s0,48(sp)
   2c6e4:	02813483          	ld	s1,40(sp)
   2c6e8:	04010113          	addi	sp,sp,64
   2c6ec:	00008067          	jalr	zero,0(ra)

000000000002c6f0 <dwarf::at_ranges(dwarf::die const&)>:
rangelist at_ranges(const die &d) { return d[DW_AT::ranges].as_rangelist(); }
   2c6f0:	fc010113          	addi	sp,sp,-64
   2c6f4:	02113c23          	sd	ra,56(sp)
   2c6f8:	02813823          	sd	s0,48(sp)
   2c6fc:	02913423          	sd	s1,40(sp)
   2c700:	00050413          	addi	s0,a0,0
   2c704:	05500613          	addi	a2,zero,85
   2c708:	00810493          	addi	s1,sp,8
   2c70c:	00048513          	addi	a0,s1,0
   2c710:	ad8f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c714:	00048593          	addi	a1,s1,0
   2c718:	00040513          	addi	a0,s0,0
   2c71c:	efcf40ef          	jal	ra,20e18 <dwarf::value::as_rangelist() const>
   2c720:	00040513          	addi	a0,s0,0
   2c724:	03813083          	ld	ra,56(sp)
   2c728:	03013403          	ld	s0,48(sp)
   2c72c:	02813483          	ld	s1,40(sp)
   2c730:	04010113          	addi	sp,sp,64
   2c734:	00008067          	jalr	zero,0(ra)

000000000002c738 <dwarf::at_description[abi:cxx11](dwarf::die const&)>:
// XXX trampoline
// XXX const call_column, call_file, call_line
AT_STRING(description);
   2c738:	fc010113          	addi	sp,sp,-64
   2c73c:	02113c23          	sd	ra,56(sp)
   2c740:	02813823          	sd	s0,48(sp)
   2c744:	02913423          	sd	s1,40(sp)
   2c748:	00050413          	addi	s0,a0,0
   2c74c:	05a00613          	addi	a2,zero,90
   2c750:	00810493          	addi	s1,sp,8
   2c754:	00048513          	addi	a0,s1,0
   2c758:	a90f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c75c:	00048593          	addi	a1,s1,0
   2c760:	00040513          	addi	a0,s0,0
   2c764:	a81f40ef          	jal	ra,211e4 <dwarf::value::as_string[abi:cxx11]() const>
   2c768:	00040513          	addi	a0,s0,0
   2c76c:	03813083          	ld	ra,56(sp)
   2c770:	03013403          	ld	s0,48(sp)
   2c774:	02813483          	ld	s1,40(sp)
   2c778:	04010113          	addi	sp,sp,64
   2c77c:	00008067          	jalr	zero,0(ra)

000000000002c780 <dwarf::at_small(dwarf::die const&)>:
// XXX const binary_scale
// XXX const decimal_scale
AT_REFERENCE(small);
   2c780:	fc010113          	addi	sp,sp,-64
   2c784:	02113c23          	sd	ra,56(sp)
   2c788:	02813823          	sd	s0,48(sp)
   2c78c:	02913423          	sd	s1,40(sp)
   2c790:	00050413          	addi	s0,a0,0
   2c794:	05d00613          	addi	a2,zero,93
   2c798:	00810493          	addi	s1,sp,8
   2c79c:	00048513          	addi	a0,s1,0
   2c7a0:	a48f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c7a4:	00048593          	addi	a1,s1,0
   2c7a8:	00040513          	addi	a0,s0,0
   2c7ac:	aa5f40ef          	jal	ra,21250 <dwarf::value::as_reference() const>
   2c7b0:	00040513          	addi	a0,s0,0
   2c7b4:	03813083          	ld	ra,56(sp)
   2c7b8:	03013403          	ld	s0,48(sp)
   2c7bc:	02813483          	ld	s1,40(sp)
   2c7c0:	04010113          	addi	sp,sp,64
   2c7c4:	00008067          	jalr	zero,0(ra)

000000000002c7c8 <dwarf::at_picture_string[abi:cxx11](dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x6X
//

AT_STRING(picture_string);
   2c7c8:	fc010113          	addi	sp,sp,-64
   2c7cc:	02113c23          	sd	ra,56(sp)
   2c7d0:	02813823          	sd	s0,48(sp)
   2c7d4:	02913423          	sd	s1,40(sp)
   2c7d8:	00050413          	addi	s0,a0,0
   2c7dc:	06000613          	addi	a2,zero,96
   2c7e0:	00810493          	addi	s1,sp,8
   2c7e4:	00048513          	addi	a0,s1,0
   2c7e8:	a00f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c7ec:	00048593          	addi	a1,s1,0
   2c7f0:	00040513          	addi	a0,s0,0
   2c7f4:	9f1f40ef          	jal	ra,211e4 <dwarf::value::as_string[abi:cxx11]() const>
   2c7f8:	00040513          	addi	a0,s0,0
   2c7fc:	03813083          	ld	ra,56(sp)
   2c800:	03013403          	ld	s0,48(sp)
   2c804:	02813483          	ld	s1,40(sp)
   2c808:	04010113          	addi	sp,sp,64
   2c80c:	00008067          	jalr	zero,0(ra)

000000000002c810 <dwarf::at_mutable(dwarf::die const&)>:
AT_FLAG_(mutable);
   2c810:	fd010113          	addi	sp,sp,-48
   2c814:	02113423          	sd	ra,40(sp)
   2c818:	02813023          	sd	s0,32(sp)
   2c81c:	00050593          	addi	a1,a0,0
   2c820:	06100613          	addi	a2,zero,97
   2c824:	00810413          	addi	s0,sp,8
   2c828:	00040513          	addi	a0,s0,0
   2c82c:	9bcf10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c830:	00040513          	addi	a0,s0,0
   2c834:	d34f30ef          	jal	ra,1fd68 <dwarf::value::as_flag() const>
   2c838:	02813083          	ld	ra,40(sp)
   2c83c:	02013403          	ld	s0,32(sp)
   2c840:	03010113          	addi	sp,sp,48
   2c844:	00008067          	jalr	zero,0(ra)

000000000002c848 <dwarf::at_threads_scaled(dwarf::die const&)>:
AT_FLAG(threads_scaled);
   2c848:	fd010113          	addi	sp,sp,-48
   2c84c:	02113423          	sd	ra,40(sp)
   2c850:	02813023          	sd	s0,32(sp)
   2c854:	00050593          	addi	a1,a0,0
   2c858:	06200613          	addi	a2,zero,98
   2c85c:	00810413          	addi	s0,sp,8
   2c860:	00040513          	addi	a0,s0,0
   2c864:	984f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c868:	00040513          	addi	a0,s0,0
   2c86c:	cfcf30ef          	jal	ra,1fd68 <dwarf::value::as_flag() const>
   2c870:	02813083          	ld	ra,40(sp)
   2c874:	02013403          	ld	s0,32(sp)
   2c878:	03010113          	addi	sp,sp,48
   2c87c:	00008067          	jalr	zero,0(ra)

000000000002c880 <dwarf::at_explicit(dwarf::die const&)>:
AT_FLAG_(explicit);
   2c880:	fd010113          	addi	sp,sp,-48
   2c884:	02113423          	sd	ra,40(sp)
   2c888:	02813023          	sd	s0,32(sp)
   2c88c:	00050593          	addi	a1,a0,0
   2c890:	06300613          	addi	a2,zero,99
   2c894:	00810413          	addi	s0,sp,8
   2c898:	00040513          	addi	a0,s0,0
   2c89c:	94cf10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c8a0:	00040513          	addi	a0,s0,0
   2c8a4:	cc4f30ef          	jal	ra,1fd68 <dwarf::value::as_flag() const>
   2c8a8:	02813083          	ld	ra,40(sp)
   2c8ac:	02013403          	ld	s0,32(sp)
   2c8b0:	03010113          	addi	sp,sp,48
   2c8b4:	00008067          	jalr	zero,0(ra)

000000000002c8b8 <dwarf::at_object_pointer(dwarf::die const&)>:
AT_REFERENCE(object_pointer);
   2c8b8:	fc010113          	addi	sp,sp,-64
   2c8bc:	02113c23          	sd	ra,56(sp)
   2c8c0:	02813823          	sd	s0,48(sp)
   2c8c4:	02913423          	sd	s1,40(sp)
   2c8c8:	00050413          	addi	s0,a0,0
   2c8cc:	06400613          	addi	a2,zero,100
   2c8d0:	00810493          	addi	s1,sp,8
   2c8d4:	00048513          	addi	a0,s1,0
   2c8d8:	910f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c8dc:	00048593          	addi	a1,s1,0
   2c8e0:	00040513          	addi	a0,s0,0
   2c8e4:	96df40ef          	jal	ra,21250 <dwarf::value::as_reference() const>
   2c8e8:	00040513          	addi	a0,s0,0
   2c8ec:	03813083          	ld	ra,56(sp)
   2c8f0:	03013403          	ld	s0,48(sp)
   2c8f4:	02813483          	ld	s1,40(sp)
   2c8f8:	04010113          	addi	sp,sp,64
   2c8fc:	00008067          	jalr	zero,0(ra)

000000000002c900 <dwarf::at_endianity(dwarf::die const&)>:
AT_ENUM(endianity, DW_END);
   2c900:	fd010113          	addi	sp,sp,-48
   2c904:	02113423          	sd	ra,40(sp)
   2c908:	02813023          	sd	s0,32(sp)
   2c90c:	00050593          	addi	a1,a0,0
   2c910:	06500613          	addi	a2,zero,101
   2c914:	00810413          	addi	s0,sp,8
   2c918:	00040513          	addi	a0,s0,0
   2c91c:	8ccf10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c920:	00040513          	addi	a0,s0,0
   2c924:	c5cf20ef          	jal	ra,1ed80 <dwarf::value::as_uconstant() const>
   2c928:	0005051b          	addiw	a0,a0,0
   2c92c:	02813083          	ld	ra,40(sp)
   2c930:	02013403          	ld	s0,32(sp)
   2c934:	03010113          	addi	sp,sp,48
   2c938:	00008067          	jalr	zero,0(ra)

000000000002c93c <dwarf::at_elemental(dwarf::die const&)>:
AT_FLAG(elemental);
   2c93c:	fd010113          	addi	sp,sp,-48
   2c940:	02113423          	sd	ra,40(sp)
   2c944:	02813023          	sd	s0,32(sp)
   2c948:	00050593          	addi	a1,a0,0
   2c94c:	06600613          	addi	a2,zero,102
   2c950:	00810413          	addi	s0,sp,8
   2c954:	00040513          	addi	a0,s0,0
   2c958:	890f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c95c:	00040513          	addi	a0,s0,0
   2c960:	c08f30ef          	jal	ra,1fd68 <dwarf::value::as_flag() const>
   2c964:	02813083          	ld	ra,40(sp)
   2c968:	02013403          	ld	s0,32(sp)
   2c96c:	03010113          	addi	sp,sp,48
   2c970:	00008067          	jalr	zero,0(ra)

000000000002c974 <dwarf::at_pure(dwarf::die const&)>:
AT_FLAG(pure);
   2c974:	fd010113          	addi	sp,sp,-48
   2c978:	02113423          	sd	ra,40(sp)
   2c97c:	02813023          	sd	s0,32(sp)
   2c980:	00050593          	addi	a1,a0,0
   2c984:	06700613          	addi	a2,zero,103
   2c988:	00810413          	addi	s0,sp,8
   2c98c:	00040513          	addi	a0,s0,0
   2c990:	858f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c994:	00040513          	addi	a0,s0,0
   2c998:	bd0f30ef          	jal	ra,1fd68 <dwarf::value::as_flag() const>
   2c99c:	02813083          	ld	ra,40(sp)
   2c9a0:	02013403          	ld	s0,32(sp)
   2c9a4:	03010113          	addi	sp,sp,48
   2c9a8:	00008067          	jalr	zero,0(ra)

000000000002c9ac <dwarf::at_recursive(dwarf::die const&)>:
AT_FLAG(recursive);
   2c9ac:	fd010113          	addi	sp,sp,-48
   2c9b0:	02113423          	sd	ra,40(sp)
   2c9b4:	02813023          	sd	s0,32(sp)
   2c9b8:	00050593          	addi	a1,a0,0
   2c9bc:	06800613          	addi	a2,zero,104
   2c9c0:	00810413          	addi	s0,sp,8
   2c9c4:	00040513          	addi	a0,s0,0
   2c9c8:	820f10ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c9cc:	00040513          	addi	a0,s0,0
   2c9d0:	b98f30ef          	jal	ra,1fd68 <dwarf::value::as_flag() const>
   2c9d4:	02813083          	ld	ra,40(sp)
   2c9d8:	02013403          	ld	s0,32(sp)
   2c9dc:	03010113          	addi	sp,sp,48
   2c9e0:	00008067          	jalr	zero,0(ra)

000000000002c9e4 <dwarf::at_signature(dwarf::die const&)>:
AT_REFERENCE(signature); // XXX Computed might be useful
   2c9e4:	fc010113          	addi	sp,sp,-64
   2c9e8:	02113c23          	sd	ra,56(sp)
   2c9ec:	02813823          	sd	s0,48(sp)
   2c9f0:	02913423          	sd	s1,40(sp)
   2c9f4:	00050413          	addi	s0,a0,0
   2c9f8:	06900613          	addi	a2,zero,105
   2c9fc:	00810493          	addi	s1,sp,8
   2ca00:	00048513          	addi	a0,s1,0
   2ca04:	fe5f00ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2ca08:	00048593          	addi	a1,s1,0
   2ca0c:	00040513          	addi	a0,s0,0
   2ca10:	841f40ef          	jal	ra,21250 <dwarf::value::as_reference() const>
   2ca14:	00040513          	addi	a0,s0,0
   2ca18:	03813083          	ld	ra,56(sp)
   2ca1c:	03013403          	ld	s0,48(sp)
   2ca20:	02813483          	ld	s1,40(sp)
   2ca24:	04010113          	addi	sp,sp,64
   2ca28:	00008067          	jalr	zero,0(ra)

000000000002ca2c <dwarf::at_main_subprogram(dwarf::die const&)>:
AT_FLAG(main_subprogram);
   2ca2c:	fd010113          	addi	sp,sp,-48
   2ca30:	02113423          	sd	ra,40(sp)
   2ca34:	02813023          	sd	s0,32(sp)
   2ca38:	00050593          	addi	a1,a0,0
   2ca3c:	06a00613          	addi	a2,zero,106
   2ca40:	00810413          	addi	s0,sp,8
   2ca44:	00040513          	addi	a0,s0,0
   2ca48:	fa1f00ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2ca4c:	00040513          	addi	a0,s0,0
   2ca50:	b18f30ef          	jal	ra,1fd68 <dwarf::value::as_flag() const>
   2ca54:	02813083          	ld	ra,40(sp)
   2ca58:	02013403          	ld	s0,32(sp)
   2ca5c:	03010113          	addi	sp,sp,48
   2ca60:	00008067          	jalr	zero,0(ra)

000000000002ca64 <dwarf::at_const_expr(dwarf::die const&)>:
// XXX const data_bit_offset
AT_FLAG(const_expr);
   2ca64:	fd010113          	addi	sp,sp,-48
   2ca68:	02113423          	sd	ra,40(sp)
   2ca6c:	02813023          	sd	s0,32(sp)
   2ca70:	00050593          	addi	a1,a0,0
   2ca74:	06c00613          	addi	a2,zero,108
   2ca78:	00810413          	addi	s0,sp,8
   2ca7c:	00040513          	addi	a0,s0,0
   2ca80:	f69f00ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2ca84:	00040513          	addi	a0,s0,0
   2ca88:	ae0f30ef          	jal	ra,1fd68 <dwarf::value::as_flag() const>
   2ca8c:	02813083          	ld	ra,40(sp)
   2ca90:	02013403          	ld	s0,32(sp)
   2ca94:	03010113          	addi	sp,sp,48
   2ca98:	00008067          	jalr	zero,0(ra)

000000000002ca9c <dwarf::at_enum_class(dwarf::die const&)>:
AT_FLAG(enum_class);
   2ca9c:	fd010113          	addi	sp,sp,-48
   2caa0:	02113423          	sd	ra,40(sp)
   2caa4:	02813023          	sd	s0,32(sp)
   2caa8:	00050593          	addi	a1,a0,0
   2caac:	06d00613          	addi	a2,zero,109
   2cab0:	00810413          	addi	s0,sp,8
   2cab4:	00040513          	addi	a0,s0,0
   2cab8:	f31f00ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2cabc:	00040513          	addi	a0,s0,0
   2cac0:	aa8f30ef          	jal	ra,1fd68 <dwarf::value::as_flag() const>
   2cac4:	02813083          	ld	ra,40(sp)
   2cac8:	02013403          	ld	s0,32(sp)
   2cacc:	03010113          	addi	sp,sp,48
   2cad0:	00008067          	jalr	zero,0(ra)

000000000002cad4 <dwarf::at_linkage_name[abi:cxx11](dwarf::die const&)>:
AT_STRING(linkage_name);
   2cad4:	fc010113          	addi	sp,sp,-64
   2cad8:	02113c23          	sd	ra,56(sp)
   2cadc:	02813823          	sd	s0,48(sp)
   2cae0:	02913423          	sd	s1,40(sp)
   2cae4:	00050413          	addi	s0,a0,0
   2cae8:	06e00613          	addi	a2,zero,110
   2caec:	00810493          	addi	s1,sp,8
   2caf0:	00048513          	addi	a0,s1,0
   2caf4:	ef5f00ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
   2caf8:	00048593          	addi	a1,s1,0
   2cafc:	00040513          	addi	a0,s0,0
   2cb00:	ee4f40ef          	jal	ra,211e4 <dwarf::value::as_string[abi:cxx11]() const>
   2cb04:	00040513          	addi	a0,s0,0
   2cb08:	03813083          	ld	ra,56(sp)
   2cb0c:	03013403          	ld	s0,48(sp)
   2cb10:	02813483          	ld	s1,40(sp)
   2cb14:	04010113          	addi	sp,sp,64
   2cb18:	00008067          	jalr	zero,0(ra)

000000000002cb1c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>:
                             int depth = 0) {
   2cb1c:	ed010113          	addi	sp,sp,-304
   2cb20:	12113423          	sd	ra,296(sp)
   2cb24:	12813023          	sd	s0,288(sp)
   2cb28:	10913c23          	sd	s1,280(sp)
   2cb2c:	11213823          	sd	s2,272(sp)
   2cb30:	11313423          	sd	s3,264(sp)
   2cb34:	00050413          	addi	s0,a0,0
  if (depth > 16)
   2cb38:	01000793          	addi	a5,zero,16
   2cb3c:	04d7cc63          	blt	a5,a3,2cb94 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x78>
   2cb40:	00060913          	addi	s2,a2,0
   2cb44:	00068493          	addi	s1,a3,0
  value v(d[attr]);
   2cb48:	00050613          	addi	a2,a0,0
   2cb4c:	0d010513          	addi	a0,sp,208
   2cb50:	e99f00ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
  type get_type() const { return typ; }
   2cb54:	0dc12783          	lw	a5,220(sp)
  switch (v.get_type()) {
   2cb58:	00600713          	addi	a4,zero,6
   2cb5c:	12e78a63          	beq	a5,a4,2cc90 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x174>
   2cb60:	0cf75263          	bge	a4,a5,2cc24 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x108>
   2cb64:	00c00713          	addi	a4,zero,12
   2cb68:	14e79863          	bne	a5,a4,2ccb8 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x19c>
    return _at_udynamic(attr, v.as_reference(), ctx, depth + 1);
   2cb6c:	0d010593          	addi	a1,sp,208
   2cb70:	06010993          	addi	s3,sp,96
   2cb74:	00098513          	addi	a0,s3,0
   2cb78:	ed8f40ef          	jal	ra,21250 <dwarf::value::as_reference() const>
   2cb7c:	0014869b          	addiw	a3,s1,1
   2cb80:	00090613          	addi	a2,s2,0
   2cb84:	00098593          	addi	a1,s3,0
   2cb88:	00040513          	addi	a0,s0,0
   2cb8c:	f91ff0ef          	jal	ra,2cb1c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2cb90:	0cc0006f          	jal	zero,2cc5c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x140>
    throw format_error("reference depth exceeded for " + to_string(attr));
   2cb94:	01000513          	addi	a0,zero,16
   2cb98:	839e90ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2cb9c:	00050493          	addi	s1,a0,0
   2cba0:	00040593          	addi	a1,s0,0
   2cba4:	04010513          	addi	a0,sp,64
   2cba8:	341040ef          	jal	ra,316e8 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__rhs.insert(0, __lhs)); }
   2cbac:	0000b617          	auipc	a2,0xb
   2cbb0:	1e460613          	addi	a2,a2,484 # 37d90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb0>
   2cbb4:	00000593          	addi	a1,zero,0
   2cbb8:	04010513          	addi	a0,sp,64
   2cbbc:	f84e90ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2cbc0:	00050593          	addi	a1,a0,0
   2cbc4:	06010413          	addi	s0,sp,96
   2cbc8:	00040513          	addi	a0,s0,0
   2cbcc:	845e90ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   2cbd0:	00040593          	addi	a1,s0,0
   2cbd4:	00048513          	addi	a0,s1,0
   2cbd8:	969e90ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2cbdc:	00016797          	auipc	a5,0x16
   2cbe0:	9747b783          	ld	a5,-1676(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   2cbe4:	01078793          	addi	a5,a5,16
   2cbe8:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   2cbec:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   2cbf0:	07010793          	addi	a5,sp,112
   2cbf4:	00f50463          	beq	a0,a5,2cbfc <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xe0>
   2cbf8:	8b9e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cbfc:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2cc00:	05010793          	addi	a5,sp,80
   2cc04:	00f50463          	beq	a0,a5,2cc0c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xf0>
   2cc08:	8a9e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2cc0c:	00015617          	auipc	a2,0x15
   2cc10:	76c63603          	ld	a2,1900(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   2cc14:	00015597          	auipc	a1,0x15
   2cc18:	6945b583          	ld	a1,1684(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   2cc1c:	00048513          	addi	a0,s1,0
   2cc20:	a41e90ef          	jal	ra,16660 <__cxa_throw@plt>
  switch (v.get_type()) {
   2cc24:	ffd7879b          	addiw	a5,a5,-3
   2cc28:	00100713          	addi	a4,zero,1
   2cc2c:	08f76663          	bltu	a4,a5,2ccb8 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x19c>
    return v.as_uconstant();
   2cc30:	0d010513          	addi	a0,sp,208
   2cc34:	94cf20ef          	jal	ra,1ed80 <dwarf::value::as_uconstant() const>
   2cc38:	00050413          	addi	s0,a0,0
}
   2cc3c:	00040513          	addi	a0,s0,0
   2cc40:	12813083          	ld	ra,296(sp)
   2cc44:	12013403          	ld	s0,288(sp)
   2cc48:	11813483          	ld	s1,280(sp)
   2cc4c:	11013903          	ld	s2,272(sp)
   2cc50:	10813983          	ld	s3,264(sp)
   2cc54:	13010113          	addi	sp,sp,304
   2cc58:	00008067          	jalr	zero,0(ra)
    return _at_udynamic(attr, v.as_reference(), ctx, depth + 1);
   2cc5c:	00050413          	addi	s0,a0,0
    for (T *p = base; p < end; ++p)
   2cc60:	0b013503          	ld	a0,176(sp)
   2cc64:	0b813783          	ld	a5,184(sp)
   2cc68:	00f57a63          	bgeu	a0,a5,2cc7c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x160>
   2cc6c:	00050793          	addi	a5,a0,0
   2cc70:	00878793          	addi	a5,a5,8
   2cc74:	0b813703          	ld	a4,184(sp)
   2cc78:	fee7ece3          	bltu	a5,a4,2cc70 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x154>
    if ((char *)base != buf)
   2cc7c:	08010793          	addi	a5,sp,128
   2cc80:	faf50ee3          	beq	a0,a5,2cc3c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x120>
      delete[] (char *)base;
   2cc84:	fa050ce3          	beq	a0,zero,2cc3c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x120>
   2cc88:	8d9e90ef          	jal	ra,16560 <operator delete[](void*)@plt>
   2cc8c:	fb1ff06f          	jal	zero,2cc3c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x120>
    return v.as_exprloc().evaluate(ctx).value;
   2cc90:	0d010593          	addi	a1,sp,208
   2cc94:	0e810413          	addi	s0,sp,232
   2cc98:	00040513          	addi	a0,s0,0
   2cc9c:	ba9f20ef          	jal	ra,1f844 <dwarf::value::as_exprloc() const>
   2cca0:	00090613          	addi	a2,s2,0
   2cca4:	00040593          	addi	a1,s0,0
   2cca8:	06010513          	addi	a0,sp,96
   2ccac:	921f90ef          	jal	ra,265cc <dwarf::expr::evaluate(dwarf::expr_context*) const>
   2ccb0:	06813403          	ld	s0,104(sp)
   2ccb4:	f89ff06f          	jal	zero,2cc3c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x120>
                       to_string(v.get_type()));
   2ccb8:	01000513          	addi	a0,zero,16
   2ccbc:	f14e90ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2ccc0:	00050493          	addi	s1,a0,0
    throw format_error(to_string(attr) + " has unexpected type " +
   2ccc4:	00040593          	addi	a1,s0,0
   2ccc8:	00010513          	addi	a0,sp,0
   2cccc:	21d040ef          	jal	ra,316e8 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__lhs.append(__rhs)); }
   2ccd0:	0000b597          	auipc	a1,0xb
   2ccd4:	0e058593          	addi	a1,a1,224 # 37db0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd0>
   2ccd8:	00010513          	addi	a0,sp,0
   2ccdc:	a65e90ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   2cce0:	00050593          	addi	a1,a0,0
   2cce4:	02010513          	addi	a0,sp,32
   2cce8:	f28e90ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                       to_string(v.get_type()));
   2ccec:	0dc12583          	lw	a1,220(sp)
   2ccf0:	04010513          	addi	a0,sp,64
   2ccf4:	134020ef          	jal	ra,2ee28 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    throw format_error(to_string(attr) + " has unexpected type " +
   2ccf8:	04010613          	addi	a2,sp,64
   2ccfc:	02010593          	addi	a1,sp,32
   2cd00:	06010513          	addi	a0,sp,96
   2cd04:	00015317          	auipc	t1,0x15
   2cd08:	6b433303          	ld	t1,1716(t1) # 423b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17ce0>
   2cd0c:	000300e7          	jalr	ra,0(t1)
   2cd10:	06010593          	addi	a1,sp,96
   2cd14:	00048513          	addi	a0,s1,0
   2cd18:	829e90ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2cd1c:	00016797          	auipc	a5,0x16
   2cd20:	8347b783          	ld	a5,-1996(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   2cd24:	01078793          	addi	a5,a5,16
   2cd28:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   2cd2c:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   2cd30:	07010793          	addi	a5,sp,112
   2cd34:	00f50463          	beq	a0,a5,2cd3c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x220>
   2cd38:	f78e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cd3c:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2cd40:	05010793          	addi	a5,sp,80
   2cd44:	00f50463          	beq	a0,a5,2cd4c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x230>
   2cd48:	f68e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cd4c:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2cd50:	03010793          	addi	a5,sp,48
   2cd54:	00f50463          	beq	a0,a5,2cd5c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x240>
   2cd58:	f58e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cd5c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2cd60:	01010793          	addi	a5,sp,16
   2cd64:	00f50463          	beq	a0,a5,2cd6c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x250>
   2cd68:	f48e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   2cd6c:	00015617          	auipc	a2,0x15
   2cd70:	60c63603          	ld	a2,1548(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   2cd74:	00015597          	auipc	a1,0x15
   2cd78:	5345b583          	ld	a1,1332(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   2cd7c:	00048513          	addi	a0,s1,0
   2cd80:	8e1e90ef          	jal	ra,16660 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   2cd84:	00050413          	addi	s0,a0,0
   2cd88:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   2cd8c:	07010793          	addi	a5,sp,112
   2cd90:	00f50463          	beq	a0,a5,2cd98 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x27c>
   2cd94:	f1ce90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cd98:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2cd9c:	05010793          	addi	a5,sp,80
   2cda0:	00f50463          	beq	a0,a5,2cda8 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x28c>
   2cda4:	f0ce90ef          	jal	ra,164b0 <operator delete(void*)@plt>
    throw format_error("reference depth exceeded for " + to_string(attr));
   2cda8:	00048513          	addi	a0,s1,0
   2cdac:	ec4e90ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2cdb0:	00040513          	addi	a0,s0,0
   2cdb4:	8dde90ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2cdb8:	00050413          	addi	s0,a0,0
   2cdbc:	fddff06f          	jal	zero,2cd98 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x27c>
   2cdc0:	00050413          	addi	s0,a0,0
   2cdc4:	fe5ff06f          	jal	zero,2cda8 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x28c>
    for (T *p = base; p < end; ++p)
   2cdc8:	00050413          	addi	s0,a0,0
   2cdcc:	0b013503          	ld	a0,176(sp)
   2cdd0:	00050793          	addi	a5,a0,0
   2cdd4:	0b813703          	ld	a4,184(sp)
   2cdd8:	00e7ee63          	bltu	a5,a4,2cdf4 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x2d8>
    if ((char *)base != buf)
   2cddc:	08010793          	addi	a5,sp,128
   2cde0:	00f50663          	beq	a0,a5,2cdec <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x2d0>
      delete[] (char *)base;
   2cde4:	00050463          	beq	a0,zero,2cdec <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x2d0>
   2cde8:	f78e90ef          	jal	ra,16560 <operator delete[](void*)@plt>
   2cdec:	00040513          	addi	a0,s0,0
   2cdf0:	8a1e90ef          	jal	ra,16690 <_Unwind_Resume@plt>
    for (T *p = base; p < end; ++p)
   2cdf4:	00878793          	addi	a5,a5,8
   2cdf8:	fddff06f          	jal	zero,2cdd4 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x2b8>
   2cdfc:	00050413          	addi	s0,a0,0
   2ce00:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   2ce04:	07010793          	addi	a5,sp,112
   2ce08:	00f50463          	beq	a0,a5,2ce10 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x2f4>
   2ce0c:	ea4e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2ce10:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2ce14:	05010793          	addi	a5,sp,80
   2ce18:	00f50463          	beq	a0,a5,2ce20 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x304>
   2ce1c:	e94e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2ce20:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2ce24:	03010793          	addi	a5,sp,48
   2ce28:	00f50463          	beq	a0,a5,2ce30 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x314>
   2ce2c:	e84e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2ce30:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2ce34:	01010793          	addi	a5,sp,16
   2ce38:	00f50463          	beq	a0,a5,2ce40 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x324>
   2ce3c:	e74e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   2ce40:	00048513          	addi	a0,s1,0
   2ce44:	e2ce90ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2ce48:	00040513          	addi	a0,s0,0
   2ce4c:	845e90ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2ce50:	00050413          	addi	s0,a0,0
   2ce54:	fbdff06f          	jal	zero,2ce10 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x2f4>
   2ce58:	00050413          	addi	s0,a0,0
   2ce5c:	fc5ff06f          	jal	zero,2ce20 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x304>
   2ce60:	00050413          	addi	s0,a0,0
   2ce64:	fcdff06f          	jal	zero,2ce30 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x314>
   2ce68:	00050413          	addi	s0,a0,0
   2ce6c:	fd5ff06f          	jal	zero,2ce40 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x324>

000000000002ce70 <dwarf::at_byte_size(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(byte_size);
   2ce70:	ff010113          	addi	sp,sp,-16
   2ce74:	00113423          	sd	ra,8(sp)
   2ce78:	00058613          	addi	a2,a1,0
   2ce7c:	00000693          	addi	a3,zero,0
   2ce80:	00050593          	addi	a1,a0,0
   2ce84:	00b00513          	addi	a0,zero,11
   2ce88:	c95ff0ef          	jal	ra,2cb1c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2ce8c:	00813083          	ld	ra,8(sp)
   2ce90:	01010113          	addi	sp,sp,16
   2ce94:	00008067          	jalr	zero,0(ra)

000000000002ce98 <dwarf::at_bit_offset(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(bit_offset);
   2ce98:	ff010113          	addi	sp,sp,-16
   2ce9c:	00113423          	sd	ra,8(sp)
   2cea0:	00058613          	addi	a2,a1,0
   2cea4:	00000693          	addi	a3,zero,0
   2cea8:	00050593          	addi	a1,a0,0
   2ceac:	00c00513          	addi	a0,zero,12
   2ceb0:	c6dff0ef          	jal	ra,2cb1c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2ceb4:	00813083          	ld	ra,8(sp)
   2ceb8:	01010113          	addi	sp,sp,16
   2cebc:	00008067          	jalr	zero,0(ra)

000000000002cec0 <dwarf::at_bit_size(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(bit_size);
   2cec0:	ff010113          	addi	sp,sp,-16
   2cec4:	00113423          	sd	ra,8(sp)
   2cec8:	00058613          	addi	a2,a1,0
   2cecc:	00000693          	addi	a3,zero,0
   2ced0:	00050593          	addi	a1,a0,0
   2ced4:	00d00513          	addi	a0,zero,13
   2ced8:	c45ff0ef          	jal	ra,2cb1c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2cedc:	00813083          	ld	ra,8(sp)
   2cee0:	01010113          	addi	sp,sp,16
   2cee4:	00008067          	jalr	zero,0(ra)

000000000002cee8 <dwarf::at_lower_bound(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(lower_bound); // XXX Language-based default?
   2cee8:	ff010113          	addi	sp,sp,-16
   2ceec:	00113423          	sd	ra,8(sp)
   2cef0:	00058613          	addi	a2,a1,0
   2cef4:	00000693          	addi	a3,zero,0
   2cef8:	00050593          	addi	a1,a0,0
   2cefc:	02200513          	addi	a0,zero,34
   2cf00:	c1dff0ef          	jal	ra,2cb1c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2cf04:	00813083          	ld	ra,8(sp)
   2cf08:	01010113          	addi	sp,sp,16
   2cf0c:	00008067          	jalr	zero,0(ra)

000000000002cf10 <dwarf::at_bit_stride(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(bit_stride);
   2cf10:	ff010113          	addi	sp,sp,-16
   2cf14:	00113423          	sd	ra,8(sp)
   2cf18:	00058613          	addi	a2,a1,0
   2cf1c:	00000693          	addi	a3,zero,0
   2cf20:	00050593          	addi	a1,a0,0
   2cf24:	02e00513          	addi	a0,zero,46
   2cf28:	bf5ff0ef          	jal	ra,2cb1c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2cf2c:	00813083          	ld	ra,8(sp)
   2cf30:	01010113          	addi	sp,sp,16
   2cf34:	00008067          	jalr	zero,0(ra)

000000000002cf38 <dwarf::at_upper_bound(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(upper_bound);
   2cf38:	ff010113          	addi	sp,sp,-16
   2cf3c:	00113423          	sd	ra,8(sp)
   2cf40:	00058613          	addi	a2,a1,0
   2cf44:	00000693          	addi	a3,zero,0
   2cf48:	00050593          	addi	a1,a0,0
   2cf4c:	02f00513          	addi	a0,zero,47
   2cf50:	bcdff0ef          	jal	ra,2cb1c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2cf54:	00813083          	ld	ra,8(sp)
   2cf58:	01010113          	addi	sp,sp,16
   2cf5c:	00008067          	jalr	zero,0(ra)

000000000002cf60 <dwarf::at_count(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(count);
   2cf60:	ff010113          	addi	sp,sp,-16
   2cf64:	00113423          	sd	ra,8(sp)
   2cf68:	00058613          	addi	a2,a1,0
   2cf6c:	00000693          	addi	a3,zero,0
   2cf70:	00050593          	addi	a1,a0,0
   2cf74:	03700513          	addi	a0,zero,55
   2cf78:	ba5ff0ef          	jal	ra,2cb1c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2cf7c:	00813083          	ld	ra,8(sp)
   2cf80:	01010113          	addi	sp,sp,16
   2cf84:	00008067          	jalr	zero,0(ra)

000000000002cf88 <dwarf::at_allocated(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(allocated);
   2cf88:	ff010113          	addi	sp,sp,-16
   2cf8c:	00113423          	sd	ra,8(sp)
   2cf90:	00058613          	addi	a2,a1,0
   2cf94:	00000693          	addi	a3,zero,0
   2cf98:	00050593          	addi	a1,a0,0
   2cf9c:	04e00513          	addi	a0,zero,78
   2cfa0:	b7dff0ef          	jal	ra,2cb1c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2cfa4:	00813083          	ld	ra,8(sp)
   2cfa8:	01010113          	addi	sp,sp,16
   2cfac:	00008067          	jalr	zero,0(ra)

000000000002cfb0 <dwarf::at_associated(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(associated);
   2cfb0:	ff010113          	addi	sp,sp,-16
   2cfb4:	00113423          	sd	ra,8(sp)
   2cfb8:	00058613          	addi	a2,a1,0
   2cfbc:	00000693          	addi	a3,zero,0
   2cfc0:	00050593          	addi	a1,a0,0
   2cfc4:	04f00513          	addi	a0,zero,79
   2cfc8:	b55ff0ef          	jal	ra,2cb1c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2cfcc:	00813083          	ld	ra,8(sp)
   2cfd0:	01010113          	addi	sp,sp,16
   2cfd4:	00008067          	jalr	zero,0(ra)

000000000002cfd8 <dwarf::at_byte_stride(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(byte_stride);
   2cfd8:	ff010113          	addi	sp,sp,-16
   2cfdc:	00113423          	sd	ra,8(sp)
   2cfe0:	00058613          	addi	a2,a1,0
   2cfe4:	00000693          	addi	a3,zero,0
   2cfe8:	00050593          	addi	a1,a0,0
   2cfec:	05100513          	addi	a0,zero,81
   2cff0:	b2dff0ef          	jal	ra,2cb1c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2cff4:	00813083          	ld	ra,8(sp)
   2cff8:	01010113          	addi	sp,sp,16
   2cffc:	00008067          	jalr	zero,0(ra)

000000000002d000 <dwarf::at_high_pc(dwarf::die const&)>:
taddr at_high_pc(const die &d) {
   2d000:	f4010113          	addi	sp,sp,-192
   2d004:	0a113c23          	sd	ra,184(sp)
   2d008:	0a813823          	sd	s0,176(sp)
   2d00c:	0a913423          	sd	s1,168(sp)
   2d010:	00050413          	addi	s0,a0,0
  value v(d[DW_AT::high_pc]);
   2d014:	01200613          	addi	a2,zero,18
   2d018:	00050593          	addi	a1,a0,0
   2d01c:	08810513          	addi	a0,sp,136
   2d020:	9c9f00ef          	jal	ra,1d9e8 <dwarf::die::operator[](dwarf::DW_AT) const>
  type get_type() const { return typ; }
   2d024:	09412783          	lw	a5,148(sp)
  switch (v.get_type()) {
   2d028:	00100713          	addi	a4,zero,1
   2d02c:	02e78c63          	beq	a5,a4,2d064 <dwarf::at_high_pc(dwarf::die const&)+0x64>
   2d030:	ffd7879b          	addiw	a5,a5,-3
   2d034:	02f76e63          	bltu	a4,a5,2d070 <dwarf::at_high_pc(dwarf::die const&)+0x70>
    return at_low_pc(d) + v.as_uconstant();
   2d038:	00040513          	addi	a0,s0,0
   2d03c:	d05fe0ef          	jal	ra,2bd40 <dwarf::at_low_pc(dwarf::die const&)>
   2d040:	00050413          	addi	s0,a0,0
   2d044:	08810513          	addi	a0,sp,136
   2d048:	d39f10ef          	jal	ra,1ed80 <dwarf::value::as_uconstant() const>
   2d04c:	00a40533          	add	a0,s0,a0
}
   2d050:	0b813083          	ld	ra,184(sp)
   2d054:	0b013403          	ld	s0,176(sp)
   2d058:	0a813483          	ld	s1,168(sp)
   2d05c:	0c010113          	addi	sp,sp,192
   2d060:	00008067          	jalr	zero,0(ra)
    return v.as_address();
   2d064:	08810513          	addi	a0,sp,136
   2d068:	c90f10ef          	jal	ra,1e4f8 <dwarf::value::as_address() const>
   2d06c:	fe5ff06f          	jal	zero,2d050 <dwarf::at_high_pc(dwarf::die const&)+0x50>
                       to_string(v.get_type()));
   2d070:	01000513          	addi	a0,zero,16
   2d074:	b5ce90ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2d078:	00050493          	addi	s1,a0,0
    throw format_error(to_string(DW_AT::high_pc) + " has unexpected type " +
   2d07c:	01200593          	addi	a1,zero,18
   2d080:	00810513          	addi	a0,sp,8
   2d084:	664040ef          	jal	ra,316e8 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__lhs.append(__rhs)); }
   2d088:	0000b597          	auipc	a1,0xb
   2d08c:	d2858593          	addi	a1,a1,-728 # 37db0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd0>
   2d090:	00810513          	addi	a0,sp,8
   2d094:	eace90ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   2d098:	00050593          	addi	a1,a0,0
   2d09c:	02810513          	addi	a0,sp,40
   2d0a0:	b70e90ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                       to_string(v.get_type()));
   2d0a4:	09412583          	lw	a1,148(sp)
   2d0a8:	04810513          	addi	a0,sp,72
   2d0ac:	57d010ef          	jal	ra,2ee28 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    throw format_error(to_string(DW_AT::high_pc) + " has unexpected type " +
   2d0b0:	04810613          	addi	a2,sp,72
   2d0b4:	02810593          	addi	a1,sp,40
   2d0b8:	06810513          	addi	a0,sp,104
   2d0bc:	00015317          	auipc	t1,0x15
   2d0c0:	2fc33303          	ld	t1,764(t1) # 423b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17ce0>
   2d0c4:	000300e7          	jalr	ra,0(t1)
      : std::runtime_error(what_arg) {}
   2d0c8:	06810593          	addi	a1,sp,104
   2d0cc:	00048513          	addi	a0,s1,0
   2d0d0:	c70e90ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2d0d4:	00015797          	auipc	a5,0x15
   2d0d8:	47c7b783          	ld	a5,1148(a5) # 42550 <vtable for dwarf::format_error@@Base+0xc20>
   2d0dc:	01078793          	addi	a5,a5,16
   2d0e0:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   2d0e4:	06813503          	ld	a0,104(sp)
	if (!_M_is_local())
   2d0e8:	07810793          	addi	a5,sp,120
   2d0ec:	00f50463          	beq	a0,a5,2d0f4 <dwarf::at_high_pc(dwarf::die const&)+0xf4>
   2d0f0:	bc0e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2d0f4:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   2d0f8:	05810793          	addi	a5,sp,88
   2d0fc:	00f50463          	beq	a0,a5,2d104 <dwarf::at_high_pc(dwarf::die const&)+0x104>
   2d100:	bb0e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2d104:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   2d108:	03810793          	addi	a5,sp,56
   2d10c:	00f50463          	beq	a0,a5,2d114 <dwarf::at_high_pc(dwarf::die const&)+0x114>
   2d110:	ba0e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2d114:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   2d118:	01810793          	addi	a5,sp,24
   2d11c:	00f50463          	beq	a0,a5,2d124 <dwarf::at_high_pc(dwarf::die const&)+0x124>
   2d120:	b90e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   2d124:	00015617          	auipc	a2,0x15
   2d128:	25463603          	ld	a2,596(a2) # 42378 <dwarf::format_error::~format_error()@@Base+0x2780c>
   2d12c:	00015597          	auipc	a1,0x15
   2d130:	17c5b583          	ld	a1,380(a1) # 422a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   2d134:	00048513          	addi	a0,s1,0
   2d138:	d28e90ef          	jal	ra,16660 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   2d13c:	00050413          	addi	s0,a0,0
   2d140:	06813503          	ld	a0,104(sp)
	if (!_M_is_local())
   2d144:	07810793          	addi	a5,sp,120
   2d148:	00f50463          	beq	a0,a5,2d150 <dwarf::at_high_pc(dwarf::die const&)+0x150>
   2d14c:	b64e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2d150:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   2d154:	05810793          	addi	a5,sp,88
   2d158:	00f50463          	beq	a0,a5,2d160 <dwarf::at_high_pc(dwarf::die const&)+0x160>
   2d15c:	b54e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2d160:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   2d164:	03810793          	addi	a5,sp,56
   2d168:	00f50463          	beq	a0,a5,2d170 <dwarf::at_high_pc(dwarf::die const&)+0x170>
   2d16c:	b44e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2d170:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   2d174:	01810793          	addi	a5,sp,24
   2d178:	00f50463          	beq	a0,a5,2d180 <dwarf::at_high_pc(dwarf::die const&)+0x180>
   2d17c:	b34e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2d180:	00048513          	addi	a0,s1,0
   2d184:	aece90ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2d188:	00040513          	addi	a0,s0,0
   2d18c:	d04e90ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2d190:	00050413          	addi	s0,a0,0
   2d194:	fbdff06f          	jal	zero,2d150 <dwarf::at_high_pc(dwarf::die const&)+0x150>
   2d198:	00050413          	addi	s0,a0,0
   2d19c:	fc5ff06f          	jal	zero,2d160 <dwarf::at_high_pc(dwarf::die const&)+0x160>
   2d1a0:	00050413          	addi	s0,a0,0
   2d1a4:	fcdff06f          	jal	zero,2d170 <dwarf::at_high_pc(dwarf::die const&)+0x170>
   2d1a8:	00050413          	addi	s0,a0,0
   2d1ac:	fd5ff06f          	jal	zero,2d180 <dwarf::at_high_pc(dwarf::die const&)+0x180>

000000000002d1b0 <dwarf::die_pc_range(dwarf::die const&)>:

rangelist die_pc_range(const die &d) {
   2d1b0:	fc010113          	addi	sp,sp,-64
   2d1b4:	02113c23          	sd	ra,56(sp)
   2d1b8:	02813823          	sd	s0,48(sp)
   2d1bc:	02913423          	sd	s1,40(sp)
   2d1c0:	03213023          	sd	s2,32(sp)
   2d1c4:	00050493          	addi	s1,a0,0
   2d1c8:	00058413          	addi	s0,a1,0
  // DWARF4 section 2.17
  if (d.has(DW_AT::ranges))
   2d1cc:	05500593          	addi	a1,zero,85
   2d1d0:	00040513          	addi	a0,s0,0
   2d1d4:	fd0f00ef          	jal	ra,1d9a4 <dwarf::die::has(dwarf::DW_AT) const>
   2d1d8:	02050663          	beq	a0,zero,2d204 <dwarf::die_pc_range(dwarf::die const&)+0x54>
    return at_ranges(d);
   2d1dc:	00040593          	addi	a1,s0,0
   2d1e0:	00048513          	addi	a0,s1,0
   2d1e4:	d0cff0ef          	jal	ra,2c6f0 <dwarf::at_ranges(dwarf::die const&)>
  taddr low = at_low_pc(d);
  taddr high = d.has(DW_AT::high_pc) ? at_high_pc(d) : (low + 1);
  return rangelist({{low, high}});
}
   2d1e8:	00048513          	addi	a0,s1,0
   2d1ec:	03813083          	ld	ra,56(sp)
   2d1f0:	03013403          	ld	s0,48(sp)
   2d1f4:	02813483          	ld	s1,40(sp)
   2d1f8:	02013903          	ld	s2,32(sp)
   2d1fc:	04010113          	addi	sp,sp,64
   2d200:	00008067          	jalr	zero,0(ra)
  taddr low = at_low_pc(d);
   2d204:	00040513          	addi	a0,s0,0
   2d208:	b39fe0ef          	jal	ra,2bd40 <dwarf::at_low_pc(dwarf::die const&)>
   2d20c:	00050913          	addi	s2,a0,0
  taddr high = d.has(DW_AT::high_pc) ? at_high_pc(d) : (low + 1);
   2d210:	01200593          	addi	a1,zero,18
   2d214:	00040513          	addi	a0,s0,0
   2d218:	f8cf00ef          	jal	ra,1d9a4 <dwarf::die::has(dwarf::DW_AT) const>
   2d21c:	00190793          	addi	a5,s2,1
   2d220:	02051663          	bne	a0,zero,2d24c <dwarf::die_pc_range(dwarf::die const&)+0x9c>
   2d224:	01213823          	sd	s2,16(sp)
   2d228:	00f13c23          	sd	a5,24(sp)
  return rangelist({{low, high}});
   2d22c:	01010793          	addi	a5,sp,16
   2d230:	00f13023          	sd	a5,0(sp)
   2d234:	00100793          	addi	a5,zero,1
   2d238:	00f13423          	sd	a5,8(sp)
   2d23c:	00010593          	addi	a1,sp,0
   2d240:	00048513          	addi	a0,s1,0
   2d244:	ed5f90ef          	jal	ra,27118 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)>
   2d248:	fa1ff06f          	jal	zero,2d1e8 <dwarf::die_pc_range(dwarf::die const&)+0x38>
  taddr high = d.has(DW_AT::high_pc) ? at_high_pc(d) : (low + 1);
   2d24c:	00040513          	addi	a0,s0,0
   2d250:	db1ff0ef          	jal	ra,2d000 <dwarf::at_high_pc(dwarf::die const&)>
   2d254:	00050793          	addi	a5,a0,0
   2d258:	fcdff06f          	jal	zero,2d224 <dwarf::die_pc_range(dwarf::die const&)+0x74>

000000000002d25c <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)>:
    {".debug_ranges", section_type::ranges},
    {".debug_str", section_type::str},
    {".debug_types", section_type::types},
};

bool elf::section_name_to_type(const char *name, section_type *out) {
   2d25c:	fd010113          	addi	sp,sp,-48
   2d260:	02113423          	sd	ra,40(sp)
   2d264:	02813023          	sd	s0,32(sp)
   2d268:	00913c23          	sd	s1,24(sp)
   2d26c:	01213823          	sd	s2,16(sp)
   2d270:	01313423          	sd	s3,8(sp)
   2d274:	00050493          	addi	s1,a0,0
   2d278:	00058993          	addi	s3,a1,0
  for (auto &sec : sections) {
   2d27c:	00014417          	auipc	s0,0x14
   2d280:	47440413          	addi	s0,s0,1140 # 416f0 <dwarf::sections>
   2d284:	00014917          	auipc	s2,0x14
   2d288:	52c90913          	addi	s2,s2,1324 # 417b0 <vtable for __cxxabiv1::__class_type_info@CXXABI_1.3>
    if (strcmp(sec.name, name) == 0) {
   2d28c:	00048593          	addi	a1,s1,0
   2d290:	00043503          	ld	a0,0(s0)
   2d294:	87ce90ef          	jal	ra,16310 <strcmp@plt>
   2d298:	02050663          	beq	a0,zero,2d2c4 <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)+0x68>
  for (auto &sec : sections) {
   2d29c:	01040413          	addi	s0,s0,16
   2d2a0:	ff2416e3          	bne	s0,s2,2d28c <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)+0x30>
      *out = sec.type;
      return true;
    }
  }
  return false;
   2d2a4:	00000513          	addi	a0,zero,0
}
   2d2a8:	02813083          	ld	ra,40(sp)
   2d2ac:	02013403          	ld	s0,32(sp)
   2d2b0:	01813483          	ld	s1,24(sp)
   2d2b4:	01013903          	ld	s2,16(sp)
   2d2b8:	00813983          	ld	s3,8(sp)
   2d2bc:	03010113          	addi	sp,sp,48
   2d2c0:	00008067          	jalr	zero,0(ra)
      *out = sec.type;
   2d2c4:	00842783          	lw	a5,8(s0)
   2d2c8:	00f9a023          	sw	a5,0(s3)
      return true;
   2d2cc:	00100513          	addi	a0,zero,1
   2d2d0:	fd9ff06f          	jal	zero,2d2a8 <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)+0x4c>

000000000002d2d4 <dwarf::elf::section_type_to_name(dwarf::section_type)>:

const char *elf::section_type_to_name(section_type type) {
  for (auto &sec : sections) {
   2d2d4:	00014797          	auipc	a5,0x14
   2d2d8:	41c78793          	addi	a5,a5,1052 # 416f0 <dwarf::sections>
   2d2dc:	00014697          	auipc	a3,0x14
   2d2e0:	4d468693          	addi	a3,a3,1236 # 417b0 <vtable for __cxxabiv1::__class_type_info@CXXABI_1.3>
    if (sec.type == type)
   2d2e4:	0087a703          	lw	a4,8(a5)
   2d2e8:	00a70a63          	beq	a4,a0,2d2fc <dwarf::elf::section_type_to_name(dwarf::section_type)+0x28>
  for (auto &sec : sections) {
   2d2ec:	01078793          	addi	a5,a5,16
   2d2f0:	fed79ae3          	bne	a5,a3,2d2e4 <dwarf::elf::section_type_to_name(dwarf::section_type)+0x10>
      return sec.name;
  }
  return nullptr;
   2d2f4:	00000513          	addi	a0,zero,0
}
   2d2f8:	00008067          	jalr	zero,0(ra)
      return sec.name;
   2d2fc:	0007b503          	ld	a0,0(a5)
   2d300:	00008067          	jalr	zero,0(ra)

000000000002d304 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)>:
        return "(DW_ORD)0x" + to_hex((int)v);
}

std::string
to_string(DW_DSC v)
{
   2d304:	fc010113          	addi	sp,sp,-64
   2d308:	02113c23          	sd	ra,56(sp)
   2d30c:	02813823          	sd	s0,48(sp)
   2d310:	02913423          	sd	s1,40(sp)
   2d314:	03213023          	sd	s2,32(sp)
   2d318:	00050413          	addi	s0,a0,0
        switch (v) {
   2d31c:	04058063          	beq	a1,zero,2d35c <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x58>
   2d320:	00100793          	addi	a5,zero,1
   2d324:	06f58e63          	beq	a1,a5,2d3a0 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x9c>
        case DW_DSC::label: return "DW_DSC_label";
        case DW_DSC::range: return "DW_DSC_range";
        }
        return "(DW_DSC)0x" + to_hex((int)v);
   2d328:	00010493          	addi	s1,sp,0
   2d32c:	00048513          	addi	a0,s1,0
   2d330:	00015317          	auipc	t1,0x15
   2d334:	0e033303          	ld	t1,224(t1) # 42410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfc4c>
   2d338:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d33c:	00a00713          	addi	a4,zero,10
   2d340:	0000b697          	auipc	a3,0xb
   2d344:	b6868693          	addi	a3,a3,-1176 # 37ea8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c8>
   2d348:	00000613          	addi	a2,zero,0
   2d34c:	00000593          	addi	a1,zero,0
   2d350:	00048513          	addi	a0,s1,0
   2d354:	aace90ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2d358:	0740006f          	jal	zero,2d3cc <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0xc8>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d35c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d360:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d364:	00000693          	addi	a3,zero,0
   2d368:	0000b617          	auipc	a2,0xb
   2d36c:	b2c60613          	addi	a2,a2,-1236 # 37e94 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b4>
   2d370:	0000b597          	auipc	a1,0xb
   2d374:	b1858593          	addi	a1,a1,-1256 # 37e88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a8>
   2d378:	00015317          	auipc	t1,0x15
   2d37c:	f8833303          	ld	t1,-120(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2d380:	000300e7          	jalr	ra,0(t1)
}
   2d384:	00040513          	addi	a0,s0,0
   2d388:	03813083          	ld	ra,56(sp)
   2d38c:	03013403          	ld	s0,48(sp)
   2d390:	02813483          	ld	s1,40(sp)
   2d394:	02013903          	ld	s2,32(sp)
   2d398:	04010113          	addi	sp,sp,64
   2d39c:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d3a0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d3a4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d3a8:	00000693          	addi	a3,zero,0
   2d3ac:	0000b617          	auipc	a2,0xb
   2d3b0:	af860613          	addi	a2,a2,-1288 # 37ea4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c4>
   2d3b4:	0000b597          	auipc	a1,0xb
   2d3b8:	ae458593          	addi	a1,a1,-1308 # 37e98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b8>
   2d3bc:	00015317          	auipc	t1,0x15
   2d3c0:	f4433303          	ld	t1,-188(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2d3c4:	000300e7          	jalr	ra,0(t1)
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2d3c8:	fbdff06f          	jal	zero,2d384 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x80>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d3cc:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d3d0:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2d3d4:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2d3d8:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2d3dc:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2d3e0:	03278c63          	beq	a5,s2,2d418 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x114>
      { _M_dataplus._M_p = __p; }
   2d3e4:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2d3e8:	0104b783          	ld	a5,16(s1)
   2d3ec:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2d3f0:	0084b783          	ld	a5,8(s1)
   2d3f4:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2d3f8:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2d3fc:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2d400:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2d404:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d408:	01010793          	addi	a5,sp,16
   2d40c:	f6f50ce3          	beq	a0,a5,2d384 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x80>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2d410:	8a0e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2d414:	f71ff06f          	jal	zero,2d384 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x80>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2d418:	0084b603          	ld	a2,8(s1)
   2d41c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2d420:	fc0608e3          	beq	a2,zero,2d3f0 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0xec>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2d424:	00090593          	addi	a1,s2,0
   2d428:	928e90ef          	jal	ra,16550 <memcpy@plt>
   2d42c:	fc5ff06f          	jal	zero,2d3f0 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0xec>
      { return _M_dataplus._M_p; }
   2d430:	00050413          	addi	s0,a0,0
   2d434:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d438:	01010793          	addi	a5,sp,16
   2d43c:	00f50463          	beq	a0,a5,2d444 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x140>
   2d440:	870e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2d444:	00040513          	addi	a0,s0,0
   2d448:	a48e90ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002d44c <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)>:
{
   2d44c:	fc010113          	addi	sp,sp,-64
   2d450:	02113c23          	sd	ra,56(sp)
   2d454:	02813823          	sd	s0,48(sp)
   2d458:	02913423          	sd	s1,40(sp)
   2d45c:	03213023          	sd	s2,32(sp)
   2d460:	00050413          	addi	s0,a0,0
        switch (v) {
   2d464:	04058063          	beq	a1,zero,2d4a4 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x58>
   2d468:	00100793          	addi	a5,zero,1
   2d46c:	06f58e63          	beq	a1,a5,2d4e8 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x9c>
        return "(DW_ORD)0x" + to_hex((int)v);
   2d470:	00010493          	addi	s1,sp,0
   2d474:	00048513          	addi	a0,s1,0
   2d478:	00015317          	auipc	t1,0x15
   2d47c:	f9833303          	ld	t1,-104(t1) # 42410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfc4c>
   2d480:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d484:	00a00713          	addi	a4,zero,10
   2d488:	0000b697          	auipc	a3,0xb
   2d48c:	a6068693          	addi	a3,a3,-1440 # 37ee8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x208>
   2d490:	00000613          	addi	a2,zero,0
   2d494:	00000593          	addi	a1,zero,0
   2d498:	00048513          	addi	a0,s1,0
   2d49c:	964e90ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2d4a0:	0740006f          	jal	zero,2d514 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0xc8>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d4a4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d4a8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d4ac:	00000693          	addi	a3,zero,0
   2d4b0:	0000b617          	auipc	a2,0xb
   2d4b4:	a1860613          	addi	a2,a2,-1512 # 37ec8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e8>
   2d4b8:	0000b597          	auipc	a1,0xb
   2d4bc:	a0058593          	addi	a1,a1,-1536 # 37eb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d8>
   2d4c0:	00015317          	auipc	t1,0x15
   2d4c4:	e4033303          	ld	t1,-448(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2d4c8:	000300e7          	jalr	ra,0(t1)
}
   2d4cc:	00040513          	addi	a0,s0,0
   2d4d0:	03813083          	ld	ra,56(sp)
   2d4d4:	03013403          	ld	s0,48(sp)
   2d4d8:	02813483          	ld	s1,40(sp)
   2d4dc:	02013903          	ld	s2,32(sp)
   2d4e0:	04010113          	addi	sp,sp,64
   2d4e4:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d4e8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d4ec:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d4f0:	00000693          	addi	a3,zero,0
   2d4f4:	0000b617          	auipc	a2,0xb
   2d4f8:	9ec60613          	addi	a2,a2,-1556 # 37ee0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x200>
   2d4fc:	0000b597          	auipc	a1,0xb
   2d500:	9d458593          	addi	a1,a1,-1580 # 37ed0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f0>
   2d504:	00015317          	auipc	t1,0x15
   2d508:	dfc33303          	ld	t1,-516(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2d50c:	000300e7          	jalr	ra,0(t1)
   2d510:	fbdff06f          	jal	zero,2d4cc <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x80>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d514:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d518:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2d51c:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2d520:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2d524:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2d528:	03278c63          	beq	a5,s2,2d560 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x114>
      { _M_dataplus._M_p = __p; }
   2d52c:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2d530:	0104b783          	ld	a5,16(s1)
   2d534:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2d538:	0084b783          	ld	a5,8(s1)
   2d53c:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2d540:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2d544:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2d548:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2d54c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d550:	01010793          	addi	a5,sp,16
   2d554:	f6f50ce3          	beq	a0,a5,2d4cc <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x80>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2d558:	f59e80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2d55c:	f71ff06f          	jal	zero,2d4cc <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x80>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2d560:	0084b603          	ld	a2,8(s1)
   2d564:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2d568:	fc0608e3          	beq	a2,zero,2d538 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0xec>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2d56c:	00090593          	addi	a1,s2,0
   2d570:	fe1e80ef          	jal	ra,16550 <memcpy@plt>
   2d574:	fc5ff06f          	jal	zero,2d538 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0xec>
      { return _M_dataplus._M_p; }
   2d578:	00050413          	addi	s0,a0,0
   2d57c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d580:	01010793          	addi	a5,sp,16
   2d584:	00f50463          	beq	a0,a5,2d58c <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x140>
   2d588:	f29e80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2d58c:	00040513          	addi	a0,s0,0
   2d590:	900e90ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002d594 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)>:
{
   2d594:	fc010113          	addi	sp,sp,-64
   2d598:	02113c23          	sd	ra,56(sp)
   2d59c:	02813823          	sd	s0,48(sp)
   2d5a0:	02913423          	sd	s1,40(sp)
   2d5a4:	03213023          	sd	s2,32(sp)
   2d5a8:	00050413          	addi	s0,a0,0
        switch (v) {
   2d5ac:	04058063          	beq	a1,zero,2d5ec <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x58>
   2d5b0:	00100793          	addi	a5,zero,1
   2d5b4:	06f58e63          	beq	a1,a5,2d630 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x9c>
        return "(DW_CHILDREN)0x" + to_hex((int)v);
   2d5b8:	00010493          	addi	s1,sp,0
   2d5bc:	00048513          	addi	a0,s1,0
   2d5c0:	00015317          	auipc	t1,0x15
   2d5c4:	e5033303          	ld	t1,-432(t1) # 42410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfc4c>
   2d5c8:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d5cc:	00f00713          	addi	a4,zero,15
   2d5d0:	0000b697          	auipc	a3,0xb
   2d5d4:	94868693          	addi	a3,a3,-1720 # 37f18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x238>
   2d5d8:	00000613          	addi	a2,zero,0
   2d5dc:	00000593          	addi	a1,zero,0
   2d5e0:	00048513          	addi	a0,s1,0
   2d5e4:	81ce90ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2d5e8:	0740006f          	jal	zero,2d65c <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0xc8>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d5ec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d5f0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d5f4:	00000693          	addi	a3,zero,0
   2d5f8:	0000b617          	auipc	a2,0xb
   2d5fc:	90e60613          	addi	a2,a2,-1778 # 37f06 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x226>
   2d600:	0000b597          	auipc	a1,0xb
   2d604:	8f858593          	addi	a1,a1,-1800 # 37ef8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x218>
   2d608:	00015317          	auipc	t1,0x15
   2d60c:	cf833303          	ld	t1,-776(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2d610:	000300e7          	jalr	ra,0(t1)
}
   2d614:	00040513          	addi	a0,s0,0
   2d618:	03813083          	ld	ra,56(sp)
   2d61c:	03013403          	ld	s0,48(sp)
   2d620:	02813483          	ld	s1,40(sp)
   2d624:	02013903          	ld	s2,32(sp)
   2d628:	04010113          	addi	sp,sp,64
   2d62c:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d630:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d634:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d638:	00000693          	addi	a3,zero,0
   2d63c:	0000b617          	auipc	a2,0xb
   2d640:	8db60613          	addi	a2,a2,-1829 # 37f17 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x237>
   2d644:	0000b597          	auipc	a1,0xb
   2d648:	8c458593          	addi	a1,a1,-1852 # 37f08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x228>
   2d64c:	00015317          	auipc	t1,0x15
   2d650:	cb433303          	ld	t1,-844(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2d654:	000300e7          	jalr	ra,0(t1)
   2d658:	fbdff06f          	jal	zero,2d614 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x80>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d65c:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d660:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2d664:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2d668:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2d66c:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2d670:	03278c63          	beq	a5,s2,2d6a8 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x114>
      { _M_dataplus._M_p = __p; }
   2d674:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2d678:	0104b783          	ld	a5,16(s1)
   2d67c:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2d680:	0084b783          	ld	a5,8(s1)
   2d684:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2d688:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2d68c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2d690:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2d694:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d698:	01010793          	addi	a5,sp,16
   2d69c:	f6f50ce3          	beq	a0,a5,2d614 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x80>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2d6a0:	e11e80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2d6a4:	f71ff06f          	jal	zero,2d614 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x80>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2d6a8:	0084b603          	ld	a2,8(s1)
   2d6ac:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2d6b0:	fc0608e3          	beq	a2,zero,2d680 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0xec>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2d6b4:	00090593          	addi	a1,s2,0
   2d6b8:	e99e80ef          	jal	ra,16550 <memcpy@plt>
   2d6bc:	fc5ff06f          	jal	zero,2d680 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0xec>
      { return _M_dataplus._M_p; }
   2d6c0:	00050413          	addi	s0,a0,0
   2d6c4:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d6c8:	01010793          	addi	a5,sp,16
   2d6cc:	00f50463          	beq	a0,a5,2d6d4 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x140>
   2d6d0:	de1e80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2d6d4:	00040513          	addi	a0,s0,0
   2d6d8:	fb9e80ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002d6dc <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)>:
{
   2d6dc:	fc010113          	addi	sp,sp,-64
   2d6e0:	02113c23          	sd	ra,56(sp)
   2d6e4:	02813823          	sd	s0,48(sp)
   2d6e8:	02913423          	sd	s1,40(sp)
   2d6ec:	03213023          	sd	s2,32(sp)
   2d6f0:	00050413          	addi	s0,a0,0
        switch (v) {
   2d6f4:	00200793          	addi	a5,zero,2
   2d6f8:	08f58663          	beq	a1,a5,2d784 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0xa8>
   2d6fc:	00300793          	addi	a5,zero,3
   2d700:	0af58863          	beq	a1,a5,2d7b0 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0xd4>
   2d704:	00100793          	addi	a5,zero,1
   2d708:	02f58c63          	beq	a1,a5,2d740 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x64>
        return "(DW_ACCESS)0x" + to_hex((int)v);
   2d70c:	00010493          	addi	s1,sp,0
   2d710:	00048513          	addi	a0,s1,0
   2d714:	00015317          	auipc	t1,0x15
   2d718:	cfc33303          	ld	t1,-772(t1) # 42410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfc4c>
   2d71c:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d720:	00d00713          	addi	a4,zero,13
   2d724:	0000b697          	auipc	a3,0xb
   2d728:	84c68693          	addi	a3,a3,-1972 # 37f70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x290>
   2d72c:	00000613          	addi	a2,zero,0
   2d730:	00000593          	addi	a1,zero,0
   2d734:	00048513          	addi	a0,s1,0
   2d738:	ec9e80ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2d73c:	0a00006f          	jal	zero,2d7dc <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x100>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d740:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d744:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d748:	00000693          	addi	a3,zero,0
   2d74c:	0000a617          	auipc	a2,0xa
   2d750:	7ec60613          	addi	a2,a2,2028 # 37f38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x258>
   2d754:	0000a597          	auipc	a1,0xa
   2d758:	7d458593          	addi	a1,a1,2004 # 37f28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x248>
   2d75c:	00015317          	auipc	t1,0x15
   2d760:	ba433303          	ld	t1,-1116(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2d764:	000300e7          	jalr	ra,0(t1)
}
   2d768:	00040513          	addi	a0,s0,0
   2d76c:	03813083          	ld	ra,56(sp)
   2d770:	03013403          	ld	s0,48(sp)
   2d774:	02813483          	ld	s1,40(sp)
   2d778:	02013903          	ld	s2,32(sp)
   2d77c:	04010113          	addi	sp,sp,64
   2d780:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d784:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d788:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d78c:	00000693          	addi	a3,zero,0
   2d790:	0000a617          	auipc	a2,0xa
   2d794:	7c360613          	addi	a2,a2,1987 # 37f53 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x273>
   2d798:	0000a597          	auipc	a1,0xa
   2d79c:	7a858593          	addi	a1,a1,1960 # 37f40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x260>
   2d7a0:	00015317          	auipc	t1,0x15
   2d7a4:	b6033303          	ld	t1,-1184(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2d7a8:	000300e7          	jalr	ra,0(t1)
   2d7ac:	fbdff06f          	jal	zero,2d768 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x8c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d7b0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d7b4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d7b8:	00000693          	addi	a3,zero,0
   2d7bc:	0000a617          	auipc	a2,0xa
   2d7c0:	7ad60613          	addi	a2,a2,1965 # 37f69 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x289>
   2d7c4:	0000a597          	auipc	a1,0xa
   2d7c8:	79458593          	addi	a1,a1,1940 # 37f58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x278>
   2d7cc:	00015317          	auipc	t1,0x15
   2d7d0:	b3433303          	ld	t1,-1228(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2d7d4:	000300e7          	jalr	ra,0(t1)
   2d7d8:	f91ff06f          	jal	zero,2d768 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x8c>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d7dc:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d7e0:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2d7e4:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2d7e8:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2d7ec:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2d7f0:	03278c63          	beq	a5,s2,2d828 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x14c>
      { _M_dataplus._M_p = __p; }
   2d7f4:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2d7f8:	0104b783          	ld	a5,16(s1)
   2d7fc:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2d800:	0084b783          	ld	a5,8(s1)
   2d804:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2d808:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2d80c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2d810:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2d814:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d818:	01010793          	addi	a5,sp,16
   2d81c:	f4f506e3          	beq	a0,a5,2d768 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x8c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2d820:	c91e80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2d824:	f45ff06f          	jal	zero,2d768 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x8c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2d828:	0084b603          	ld	a2,8(s1)
   2d82c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2d830:	fc0608e3          	beq	a2,zero,2d800 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x124>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2d834:	00090593          	addi	a1,s2,0
   2d838:	d19e80ef          	jal	ra,16550 <memcpy@plt>
   2d83c:	fc5ff06f          	jal	zero,2d800 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x124>
      { return _M_dataplus._M_p; }
   2d840:	00050413          	addi	s0,a0,0
   2d844:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d848:	01010793          	addi	a5,sp,16
   2d84c:	00f50463          	beq	a0,a5,2d854 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x178>
   2d850:	c61e80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2d854:	00040513          	addi	a0,s0,0
   2d858:	e39e80ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002d85c <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)>:
{
   2d85c:	fc010113          	addi	sp,sp,-64
   2d860:	02113c23          	sd	ra,56(sp)
   2d864:	02813823          	sd	s0,48(sp)
   2d868:	02913423          	sd	s1,40(sp)
   2d86c:	03213023          	sd	s2,32(sp)
   2d870:	00050413          	addi	s0,a0,0
        switch (v) {
   2d874:	00100793          	addi	a5,zero,1
   2d878:	08f58463          	beq	a1,a5,2d900 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0xa4>
   2d87c:	00200793          	addi	a5,zero,2
   2d880:	0af58663          	beq	a1,a5,2d92c <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0xd0>
   2d884:	02058c63          	beq	a1,zero,2d8bc <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x60>
        return "(DW_VIRTUALITY)0x" + to_hex((int)v);
   2d888:	00010493          	addi	s1,sp,0
   2d88c:	00048513          	addi	a0,s1,0
   2d890:	00015317          	auipc	t1,0x15
   2d894:	b8033303          	ld	t1,-1152(t1) # 42410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfc4c>
   2d898:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d89c:	01100713          	addi	a4,zero,17
   2d8a0:	0000a697          	auipc	a3,0xa
   2d8a4:	73068693          	addi	a3,a3,1840 # 37fd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2f0>
   2d8a8:	00000613          	addi	a2,zero,0
   2d8ac:	00000593          	addi	a1,zero,0
   2d8b0:	00048513          	addi	a0,s1,0
   2d8b4:	d4de80ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2d8b8:	0a00006f          	jal	zero,2d958 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0xfc>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d8bc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d8c0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d8c4:	00000693          	addi	a3,zero,0
   2d8c8:	0000a617          	auipc	a2,0xa
   2d8cc:	6ca60613          	addi	a2,a2,1738 # 37f92 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2b2>
   2d8d0:	0000a597          	auipc	a1,0xa
   2d8d4:	6b058593          	addi	a1,a1,1712 # 37f80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2a0>
   2d8d8:	00015317          	auipc	t1,0x15
   2d8dc:	a2833303          	ld	t1,-1496(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2d8e0:	000300e7          	jalr	ra,0(t1)
}
   2d8e4:	00040513          	addi	a0,s0,0
   2d8e8:	03813083          	ld	ra,56(sp)
   2d8ec:	03013403          	ld	s0,48(sp)
   2d8f0:	02813483          	ld	s1,40(sp)
   2d8f4:	02013903          	ld	s2,32(sp)
   2d8f8:	04010113          	addi	sp,sp,64
   2d8fc:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d900:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d904:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d908:	00000693          	addi	a3,zero,0
   2d90c:	0000a617          	auipc	a2,0xa
   2d910:	6a160613          	addi	a2,a2,1697 # 37fad <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2cd>
   2d914:	0000a597          	auipc	a1,0xa
   2d918:	68458593          	addi	a1,a1,1668 # 37f98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2b8>
   2d91c:	00015317          	auipc	t1,0x15
   2d920:	9e433303          	ld	t1,-1564(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2d924:	000300e7          	jalr	ra,0(t1)
   2d928:	fbdff06f          	jal	zero,2d8e4 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x88>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d92c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d930:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d934:	00000693          	addi	a3,zero,0
   2d938:	0000a617          	auipc	a2,0xa
   2d93c:	69260613          	addi	a2,a2,1682 # 37fca <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2ea>
   2d940:	0000a597          	auipc	a1,0xa
   2d944:	67058593          	addi	a1,a1,1648 # 37fb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2d0>
   2d948:	00015317          	auipc	t1,0x15
   2d94c:	9b833303          	ld	t1,-1608(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2d950:	000300e7          	jalr	ra,0(t1)
   2d954:	f91ff06f          	jal	zero,2d8e4 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x88>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d958:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d95c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2d960:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2d964:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2d968:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2d96c:	03278c63          	beq	a5,s2,2d9a4 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x148>
      { _M_dataplus._M_p = __p; }
   2d970:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2d974:	0104b783          	ld	a5,16(s1)
   2d978:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2d97c:	0084b783          	ld	a5,8(s1)
   2d980:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2d984:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2d988:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2d98c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2d990:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d994:	01010793          	addi	a5,sp,16
   2d998:	f4f506e3          	beq	a0,a5,2d8e4 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x88>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2d99c:	b15e80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2d9a0:	f45ff06f          	jal	zero,2d8e4 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x88>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2d9a4:	0084b603          	ld	a2,8(s1)
   2d9a8:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2d9ac:	fc0608e3          	beq	a2,zero,2d97c <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x120>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2d9b0:	00090593          	addi	a1,s2,0
   2d9b4:	b9de80ef          	jal	ra,16550 <memcpy@plt>
   2d9b8:	fc5ff06f          	jal	zero,2d97c <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x120>
      { return _M_dataplus._M_p; }
   2d9bc:	00050413          	addi	s0,a0,0
   2d9c0:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d9c4:	01010793          	addi	a5,sp,16
   2d9c8:	00f50463          	beq	a0,a5,2d9d0 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x174>
   2d9cc:	ae5e80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2d9d0:	00040513          	addi	a0,s0,0
   2d9d4:	cbde80ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002d9d8 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)>:
{
   2d9d8:	fc010113          	addi	sp,sp,-64
   2d9dc:	02113c23          	sd	ra,56(sp)
   2d9e0:	02813823          	sd	s0,48(sp)
   2d9e4:	02913423          	sd	s1,40(sp)
   2d9e8:	03213023          	sd	s2,32(sp)
   2d9ec:	00050413          	addi	s0,a0,0
        switch (v) {
   2d9f0:	00200793          	addi	a5,zero,2
   2d9f4:	08f58663          	beq	a1,a5,2da80 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0xa8>
   2d9f8:	00300793          	addi	a5,zero,3
   2d9fc:	0af58863          	beq	a1,a5,2daac <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0xd4>
   2da00:	00100793          	addi	a5,zero,1
   2da04:	02f58c63          	beq	a1,a5,2da3c <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x64>
        return "(DW_CC)0x" + to_hex((int)v);
   2da08:	00010493          	addi	s1,sp,0
   2da0c:	00048513          	addi	a0,s1,0
   2da10:	00015317          	auipc	t1,0x15
   2da14:	a0033303          	ld	t1,-1536(t1) # 42410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfc4c>
   2da18:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2da1c:	00900713          	addi	a4,zero,9
   2da20:	0000a697          	auipc	a3,0xa
   2da24:	5f868693          	addi	a3,a3,1528 # 38018 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x338>
   2da28:	00000613          	addi	a2,zero,0
   2da2c:	00000593          	addi	a1,zero,0
   2da30:	00048513          	addi	a0,s1,0
   2da34:	bcde80ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2da38:	0a00006f          	jal	zero,2dad8 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x100>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2da3c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2da40:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2da44:	00000693          	addi	a3,zero,0
   2da48:	0000a617          	auipc	a2,0xa
   2da4c:	5ac60613          	addi	a2,a2,1452 # 37ff4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x314>
   2da50:	0000a597          	auipc	a1,0xa
   2da54:	59858593          	addi	a1,a1,1432 # 37fe8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x308>
   2da58:	00015317          	auipc	t1,0x15
   2da5c:	8a833303          	ld	t1,-1880(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2da60:	000300e7          	jalr	ra,0(t1)
}
   2da64:	00040513          	addi	a0,s0,0
   2da68:	03813083          	ld	ra,56(sp)
   2da6c:	03013403          	ld	s0,48(sp)
   2da70:	02813483          	ld	s1,40(sp)
   2da74:	02013903          	ld	s2,32(sp)
   2da78:	04010113          	addi	sp,sp,64
   2da7c:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2da80:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2da84:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2da88:	00000693          	addi	a3,zero,0
   2da8c:	0000a617          	auipc	a2,0xa
   2da90:	57960613          	addi	a2,a2,1401 # 38005 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x325>
   2da94:	0000a597          	auipc	a1,0xa
   2da98:	56458593          	addi	a1,a1,1380 # 37ff8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x318>
   2da9c:	00015317          	auipc	t1,0x15
   2daa0:	86433303          	ld	t1,-1948(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2daa4:	000300e7          	jalr	ra,0(t1)
   2daa8:	fbdff06f          	jal	zero,2da64 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x8c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2daac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2dab0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2dab4:	00000693          	addi	a3,zero,0
   2dab8:	0000a617          	auipc	a2,0xa
   2dabc:	55c60613          	addi	a2,a2,1372 # 38014 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x334>
   2dac0:	0000a597          	auipc	a1,0xa
   2dac4:	54858593          	addi	a1,a1,1352 # 38008 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x328>
   2dac8:	00015317          	auipc	t1,0x15
   2dacc:	83833303          	ld	t1,-1992(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2dad0:	000300e7          	jalr	ra,0(t1)
   2dad4:	f91ff06f          	jal	zero,2da64 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x8c>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2dad8:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2dadc:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2dae0:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2dae4:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2dae8:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2daec:	03278c63          	beq	a5,s2,2db24 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x14c>
      { _M_dataplus._M_p = __p; }
   2daf0:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2daf4:	0104b783          	ld	a5,16(s1)
   2daf8:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2dafc:	0084b783          	ld	a5,8(s1)
   2db00:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2db04:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2db08:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2db0c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2db10:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2db14:	01010793          	addi	a5,sp,16
   2db18:	f4f506e3          	beq	a0,a5,2da64 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x8c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2db1c:	995e80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2db20:	f45ff06f          	jal	zero,2da64 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x8c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2db24:	0084b603          	ld	a2,8(s1)
   2db28:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2db2c:	fc0608e3          	beq	a2,zero,2dafc <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x124>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2db30:	00090593          	addi	a1,s2,0
   2db34:	a1de80ef          	jal	ra,16550 <memcpy@plt>
   2db38:	fc5ff06f          	jal	zero,2dafc <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x124>
      { return _M_dataplus._M_p; }
   2db3c:	00050413          	addi	s0,a0,0
   2db40:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2db44:	01010793          	addi	a5,sp,16
   2db48:	00f50463          	beq	a0,a5,2db50 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x178>
   2db4c:	965e80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2db50:	00040513          	addi	a0,s0,0
   2db54:	b3de80ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002db58 <dwarf::to_string[abi:cxx11](dwarf::DW_END)>:
{
   2db58:	fc010113          	addi	sp,sp,-64
   2db5c:	02113c23          	sd	ra,56(sp)
   2db60:	02813823          	sd	s0,48(sp)
   2db64:	02913423          	sd	s1,40(sp)
   2db68:	03213023          	sd	s2,32(sp)
   2db6c:	00050413          	addi	s0,a0,0
        switch (v) {
   2db70:	00100793          	addi	a5,zero,1
   2db74:	08f58463          	beq	a1,a5,2dbfc <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0xa4>
   2db78:	00200793          	addi	a5,zero,2
   2db7c:	0af58663          	beq	a1,a5,2dc28 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0xd0>
   2db80:	02058c63          	beq	a1,zero,2dbb8 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x60>
        return "(DW_END)0x" + to_hex((int)v);
   2db84:	00010493          	addi	s1,sp,0
   2db88:	00048513          	addi	a0,s1,0
   2db8c:	00015317          	auipc	t1,0x15
   2db90:	88433303          	ld	t1,-1916(t1) # 42410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfc4c>
   2db94:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2db98:	00a00713          	addi	a4,zero,10
   2db9c:	0000a697          	auipc	a3,0xa
   2dba0:	4bc68693          	addi	a3,a3,1212 # 38058 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x378>
   2dba4:	00000613          	addi	a2,zero,0
   2dba8:	00000593          	addi	a1,zero,0
   2dbac:	00048513          	addi	a0,s1,0
   2dbb0:	a51e80ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2dbb4:	0a00006f          	jal	zero,2dc54 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0xfc>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2dbb8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2dbbc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2dbc0:	00000693          	addi	a3,zero,0
   2dbc4:	0000a617          	auipc	a2,0xa
   2dbc8:	47260613          	addi	a2,a2,1138 # 38036 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x356>
   2dbcc:	0000a597          	auipc	a1,0xa
   2dbd0:	45c58593          	addi	a1,a1,1116 # 38028 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x348>
   2dbd4:	00014317          	auipc	t1,0x14
   2dbd8:	72c33303          	ld	t1,1836(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2dbdc:	000300e7          	jalr	ra,0(t1)
}
   2dbe0:	00040513          	addi	a0,s0,0
   2dbe4:	03813083          	ld	ra,56(sp)
   2dbe8:	03013403          	ld	s0,48(sp)
   2dbec:	02813483          	ld	s1,40(sp)
   2dbf0:	02013903          	ld	s2,32(sp)
   2dbf4:	04010113          	addi	sp,sp,64
   2dbf8:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2dbfc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2dc00:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2dc04:	00000693          	addi	a3,zero,0
   2dc08:	0000a617          	auipc	a2,0xa
   2dc0c:	43a60613          	addi	a2,a2,1082 # 38042 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x362>
   2dc10:	0000a597          	auipc	a1,0xa
   2dc14:	42858593          	addi	a1,a1,1064 # 38038 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x358>
   2dc18:	00014317          	auipc	t1,0x14
   2dc1c:	6e833303          	ld	t1,1768(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2dc20:	000300e7          	jalr	ra,0(t1)
   2dc24:	fbdff06f          	jal	zero,2dbe0 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x88>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2dc28:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2dc2c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2dc30:	00000693          	addi	a3,zero,0
   2dc34:	0000a617          	auipc	a2,0xa
   2dc38:	42160613          	addi	a2,a2,1057 # 38055 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x375>
   2dc3c:	0000a597          	auipc	a1,0xa
   2dc40:	40c58593          	addi	a1,a1,1036 # 38048 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x368>
   2dc44:	00014317          	auipc	t1,0x14
   2dc48:	6bc33303          	ld	t1,1724(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2dc4c:	000300e7          	jalr	ra,0(t1)
   2dc50:	f91ff06f          	jal	zero,2dbe0 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x88>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2dc54:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2dc58:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2dc5c:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2dc60:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2dc64:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2dc68:	03278c63          	beq	a5,s2,2dca0 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x148>
      { _M_dataplus._M_p = __p; }
   2dc6c:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2dc70:	0104b783          	ld	a5,16(s1)
   2dc74:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2dc78:	0084b783          	ld	a5,8(s1)
   2dc7c:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2dc80:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2dc84:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2dc88:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2dc8c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2dc90:	01010793          	addi	a5,sp,16
   2dc94:	f4f506e3          	beq	a0,a5,2dbe0 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x88>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2dc98:	819e80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2dc9c:	f45ff06f          	jal	zero,2dbe0 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x88>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2dca0:	0084b603          	ld	a2,8(s1)
   2dca4:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2dca8:	fc0608e3          	beq	a2,zero,2dc78 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x120>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2dcac:	00090593          	addi	a1,s2,0
   2dcb0:	8a1e80ef          	jal	ra,16550 <memcpy@plt>
   2dcb4:	fc5ff06f          	jal	zero,2dc78 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x120>
      { return _M_dataplus._M_p; }
   2dcb8:	00050413          	addi	s0,a0,0
   2dcbc:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2dcc0:	01010793          	addi	a5,sp,16
   2dcc4:	00f50463          	beq	a0,a5,2dccc <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x174>
   2dcc8:	fe8e80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2dccc:	00040513          	addi	a0,s0,0
   2dcd0:	9c1e80ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002dcd4 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)>:
{
   2dcd4:	fc010113          	addi	sp,sp,-64
   2dcd8:	02113c23          	sd	ra,56(sp)
   2dcdc:	02813823          	sd	s0,48(sp)
   2dce0:	02913423          	sd	s1,40(sp)
   2dce4:	03213023          	sd	s2,32(sp)
   2dce8:	00050413          	addi	s0,a0,0
        switch (v) {
   2dcec:	00200793          	addi	a5,zero,2
   2dcf0:	08f58663          	beq	a1,a5,2dd7c <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0xa8>
   2dcf4:	00300793          	addi	a5,zero,3
   2dcf8:	0af58863          	beq	a1,a5,2dda8 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0xd4>
   2dcfc:	00100793          	addi	a5,zero,1
   2dd00:	02f58c63          	beq	a1,a5,2dd38 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x64>
        return "(DW_VIS)0x" + to_hex((int)v);
   2dd04:	00010493          	addi	s1,sp,0
   2dd08:	00048513          	addi	a0,s1,0
   2dd0c:	00014317          	auipc	t1,0x14
   2dd10:	70433303          	ld	t1,1796(t1) # 42410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfc4c>
   2dd14:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2dd18:	00a00713          	addi	a4,zero,10
   2dd1c:	0000a697          	auipc	a3,0xa
   2dd20:	38468693          	addi	a3,a3,900 # 380a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3c0>
   2dd24:	00000613          	addi	a2,zero,0
   2dd28:	00000593          	addi	a1,zero,0
   2dd2c:	00048513          	addi	a0,s1,0
   2dd30:	8d1e80ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2dd34:	0a00006f          	jal	zero,2ddd4 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x100>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2dd38:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2dd3c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2dd40:	00000693          	addi	a3,zero,0
   2dd44:	0000a617          	auipc	a2,0xa
   2dd48:	33060613          	addi	a2,a2,816 # 38074 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x394>
   2dd4c:	0000a597          	auipc	a1,0xa
   2dd50:	31c58593          	addi	a1,a1,796 # 38068 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x388>
   2dd54:	00014317          	auipc	t1,0x14
   2dd58:	5ac33303          	ld	t1,1452(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2dd5c:	000300e7          	jalr	ra,0(t1)
}
   2dd60:	00040513          	addi	a0,s0,0
   2dd64:	03813083          	ld	ra,56(sp)
   2dd68:	03013403          	ld	s0,48(sp)
   2dd6c:	02813483          	ld	s1,40(sp)
   2dd70:	02013903          	ld	s2,32(sp)
   2dd74:	04010113          	addi	sp,sp,64
   2dd78:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2dd7c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2dd80:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2dd84:	00000693          	addi	a3,zero,0
   2dd88:	0000a617          	auipc	a2,0xa
   2dd8c:	2ff60613          	addi	a2,a2,767 # 38087 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3a7>
   2dd90:	0000a597          	auipc	a1,0xa
   2dd94:	2e858593          	addi	a1,a1,744 # 38078 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x398>
   2dd98:	00014317          	auipc	t1,0x14
   2dd9c:	56833303          	ld	t1,1384(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2dda0:	000300e7          	jalr	ra,0(t1)
   2dda4:	fbdff06f          	jal	zero,2dd60 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x8c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2dda8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ddac:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ddb0:	00000693          	addi	a3,zero,0
   2ddb4:	0000a617          	auipc	a2,0xa
   2ddb8:	2e460613          	addi	a2,a2,740 # 38098 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3b8>
   2ddbc:	0000a597          	auipc	a1,0xa
   2ddc0:	2cc58593          	addi	a1,a1,716 # 38088 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3a8>
   2ddc4:	00014317          	auipc	t1,0x14
   2ddc8:	53c33303          	ld	t1,1340(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2ddcc:	000300e7          	jalr	ra,0(t1)
   2ddd0:	f91ff06f          	jal	zero,2dd60 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x8c>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2ddd4:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ddd8:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2dddc:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2dde0:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2dde4:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2dde8:	03278c63          	beq	a5,s2,2de20 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x14c>
      { _M_dataplus._M_p = __p; }
   2ddec:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2ddf0:	0104b783          	ld	a5,16(s1)
   2ddf4:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2ddf8:	0084b783          	ld	a5,8(s1)
   2ddfc:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2de00:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2de04:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2de08:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2de0c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2de10:	01010793          	addi	a5,sp,16
   2de14:	f4f506e3          	beq	a0,a5,2dd60 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x8c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2de18:	e98e80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2de1c:	f45ff06f          	jal	zero,2dd60 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x8c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2de20:	0084b603          	ld	a2,8(s1)
   2de24:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2de28:	fc0608e3          	beq	a2,zero,2ddf8 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x124>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2de2c:	00090593          	addi	a1,s2,0
   2de30:	f20e80ef          	jal	ra,16550 <memcpy@plt>
   2de34:	fc5ff06f          	jal	zero,2ddf8 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x124>
      { return _M_dataplus._M_p; }
   2de38:	00050413          	addi	s0,a0,0
   2de3c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2de40:	01010793          	addi	a5,sp,16
   2de44:	00f50463          	beq	a0,a5,2de4c <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x178>
   2de48:	e68e80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2de4c:	00040513          	addi	a0,s0,0
   2de50:	841e80ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002de54 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)>:
{
   2de54:	fc010113          	addi	sp,sp,-64
   2de58:	02113c23          	sd	ra,56(sp)
   2de5c:	02813823          	sd	s0,48(sp)
   2de60:	02913423          	sd	s1,40(sp)
   2de64:	03213023          	sd	s2,32(sp)
   2de68:	00050413          	addi	s0,a0,0
        switch (v) {
   2de6c:	00200793          	addi	a5,zero,2
   2de70:	0af58c63          	beq	a1,a5,2df28 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xd4>
   2de74:	02b7ce63          	blt	a5,a1,2deb0 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x5c>
   2de78:	06058663          	beq	a1,zero,2dee4 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x90>
   2de7c:	00100793          	addi	a5,zero,1
   2de80:	0cf59a63          	bne	a1,a5,2df54 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x100>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2de84:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2de88:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2de8c:	00000693          	addi	a3,zero,0
   2de90:	0000a617          	auipc	a2,0xa
   2de94:	24660613          	addi	a2,a2,582 # 380d6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3f6>
   2de98:	0000a597          	auipc	a1,0xa
   2de9c:	23058593          	addi	a1,a1,560 # 380c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3e8>
   2dea0:	00014317          	auipc	t1,0x14
   2dea4:	46033303          	ld	t1,1120(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2dea8:	000300e7          	jalr	ra,0(t1)
   2deac:	0600006f          	jal	zero,2df0c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xb8>
   2deb0:	00300793          	addi	a5,zero,3
   2deb4:	0af59063          	bne	a1,a5,2df54 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x100>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2deb8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2debc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2dec0:	00000693          	addi	a3,zero,0
   2dec4:	0000a617          	auipc	a2,0xa
   2dec8:	24b60613          	addi	a2,a2,587 # 3810f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x42f>
   2decc:	0000a597          	auipc	a1,0xa
   2ded0:	22c58593          	addi	a1,a1,556 # 380f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x418>
   2ded4:	00014317          	auipc	t1,0x14
   2ded8:	42c33303          	ld	t1,1068(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2dedc:	000300e7          	jalr	ra,0(t1)
   2dee0:	02c0006f          	jal	zero,2df0c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xb8>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2dee4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2dee8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2deec:	00000693          	addi	a3,zero,0
   2def0:	0000a617          	auipc	a2,0xa
   2def4:	1d260613          	addi	a2,a2,466 # 380c2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3e2>
   2def8:	0000a597          	auipc	a1,0xa
   2defc:	1b858593          	addi	a1,a1,440 # 380b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3d0>
   2df00:	00014317          	auipc	t1,0x14
   2df04:	40033303          	ld	t1,1024(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2df08:	000300e7          	jalr	ra,0(t1)
}
   2df0c:	00040513          	addi	a0,s0,0
   2df10:	03813083          	ld	ra,56(sp)
   2df14:	03013403          	ld	s0,48(sp)
   2df18:	02813483          	ld	s1,40(sp)
   2df1c:	02013903          	ld	s2,32(sp)
   2df20:	04010113          	addi	sp,sp,64
   2df24:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2df28:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2df2c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2df30:	00000693          	addi	a3,zero,0
   2df34:	0000a617          	auipc	a2,0xa
   2df38:	1bf60613          	addi	a2,a2,447 # 380f3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x413>
   2df3c:	0000a597          	auipc	a1,0xa
   2df40:	19c58593          	addi	a1,a1,412 # 380d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3f8>
   2df44:	00014317          	auipc	t1,0x14
   2df48:	3bc33303          	ld	t1,956(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2df4c:	000300e7          	jalr	ra,0(t1)
   2df50:	fbdff06f          	jal	zero,2df0c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xb8>
        return "(DW_INL)0x" + to_hex((int)v);
   2df54:	00010493          	addi	s1,sp,0
   2df58:	00048513          	addi	a0,s1,0
   2df5c:	00014317          	auipc	t1,0x14
   2df60:	4b433303          	ld	t1,1204(t1) # 42410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfc4c>
   2df64:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2df68:	00a00713          	addi	a4,zero,10
   2df6c:	0000a697          	auipc	a3,0xa
   2df70:	1a468693          	addi	a3,a3,420 # 38110 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x430>
   2df74:	00000613          	addi	a2,zero,0
   2df78:	00000593          	addi	a1,zero,0
   2df7c:	00048513          	addi	a0,s1,0
   2df80:	e80e80ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2df84:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2df88:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2df8c:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2df90:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2df94:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2df98:	03278c63          	beq	a5,s2,2dfd0 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x17c>
      { _M_dataplus._M_p = __p; }
   2df9c:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2dfa0:	0104b783          	ld	a5,16(s1)
   2dfa4:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2dfa8:	0084b783          	ld	a5,8(s1)
   2dfac:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2dfb0:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2dfb4:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2dfb8:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2dfbc:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2dfc0:	01010793          	addi	a5,sp,16
   2dfc4:	f4f504e3          	beq	a0,a5,2df0c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xb8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2dfc8:	ce8e80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2dfcc:	f41ff06f          	jal	zero,2df0c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xb8>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2dfd0:	0084b603          	ld	a2,8(s1)
   2dfd4:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2dfd8:	fc0608e3          	beq	a2,zero,2dfa8 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x154>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2dfdc:	00090593          	addi	a1,s2,0
   2dfe0:	d70e80ef          	jal	ra,16550 <memcpy@plt>
   2dfe4:	fc5ff06f          	jal	zero,2dfa8 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x154>
      { return _M_dataplus._M_p; }
   2dfe8:	00050413          	addi	s0,a0,0
   2dfec:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2dff0:	01010793          	addi	a5,sp,16
   2dff4:	00f50463          	beq	a0,a5,2dffc <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x1a8>
   2dff8:	cb8e80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2dffc:	00040513          	addi	a0,s0,0
   2e000:	e90e80ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002e004 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)>:
        return "(DW_LNS)0x" + to_hex((int)v);
}

std::string
to_string(DW_LNE v)
{
   2e004:	fc010113          	addi	sp,sp,-64
   2e008:	02113c23          	sd	ra,56(sp)
   2e00c:	02813823          	sd	s0,48(sp)
   2e010:	02913423          	sd	s1,40(sp)
   2e014:	03213023          	sd	s2,32(sp)
   2e018:	00050413          	addi	s0,a0,0
        switch (v) {
   2e01c:	00300793          	addi	a5,zero,3
   2e020:	0af58e63          	beq	a1,a5,2e0dc <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xd8>
   2e024:	04b7c063          	blt	a5,a1,2e064 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x60>
   2e028:	00100793          	addi	a5,zero,1
   2e02c:	06f58663          	beq	a1,a5,2e098 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x94>
   2e030:	00200793          	addi	a5,zero,2
   2e034:	0cf59a63          	bne	a1,a5,2e108 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x104>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e038:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e03c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e040:	00000693          	addi	a3,zero,0
   2e044:	0000a617          	auipc	a2,0xa
   2e048:	10660613          	addi	a2,a2,262 # 3814a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x46a>
   2e04c:	0000a597          	auipc	a1,0xa
   2e050:	0ec58593          	addi	a1,a1,236 # 38138 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x458>
   2e054:	00014317          	auipc	t1,0x14
   2e058:	2ac33303          	ld	t1,684(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e05c:	000300e7          	jalr	ra,0(t1)
   2e060:	0600006f          	jal	zero,2e0c0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xbc>
   2e064:	00400793          	addi	a5,zero,4
   2e068:	0af59063          	bne	a1,a5,2e108 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x104>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e06c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e070:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e074:	00000693          	addi	a3,zero,0
   2e078:	0000a617          	auipc	a2,0xa
   2e07c:	10860613          	addi	a2,a2,264 # 38180 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4a0>
   2e080:	0000a597          	auipc	a1,0xa
   2e084:	0e858593          	addi	a1,a1,232 # 38168 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x488>
   2e088:	00014317          	auipc	t1,0x14
   2e08c:	27833303          	ld	t1,632(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e090:	000300e7          	jalr	ra,0(t1)
   2e094:	02c0006f          	jal	zero,2e0c0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xbc>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e098:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e09c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e0a0:	00000693          	addi	a3,zero,0
   2e0a4:	0000a617          	auipc	a2,0xa
   2e0a8:	08f60613          	addi	a2,a2,143 # 38133 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x453>
   2e0ac:	0000a597          	auipc	a1,0xa
   2e0b0:	07458593          	addi	a1,a1,116 # 38120 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x440>
   2e0b4:	00014317          	auipc	t1,0x14
   2e0b8:	24c33303          	ld	t1,588(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e0bc:	000300e7          	jalr	ra,0(t1)
        case DW_LNE::set_discriminator: return "DW_LNE_set_discriminator";
        case DW_LNE::lo_user: break;
        case DW_LNE::hi_user: break;
        }
        return "(DW_LNE)0x" + to_hex((int)v);
}
   2e0c0:	00040513          	addi	a0,s0,0
   2e0c4:	03813083          	ld	ra,56(sp)
   2e0c8:	03013403          	ld	s0,48(sp)
   2e0cc:	02813483          	ld	s1,40(sp)
   2e0d0:	02013903          	ld	s2,32(sp)
   2e0d4:	04010113          	addi	sp,sp,64
   2e0d8:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e0dc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e0e0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e0e4:	00000693          	addi	a3,zero,0
   2e0e8:	0000a617          	auipc	a2,0xa
   2e0ec:	07a60613          	addi	a2,a2,122 # 38162 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x482>
   2e0f0:	0000a597          	auipc	a1,0xa
   2e0f4:	06058593          	addi	a1,a1,96 # 38150 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x470>
   2e0f8:	00014317          	auipc	t1,0x14
   2e0fc:	20833303          	ld	t1,520(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e100:	000300e7          	jalr	ra,0(t1)
   2e104:	fbdff06f          	jal	zero,2e0c0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xbc>
        return "(DW_LNE)0x" + to_hex((int)v);
   2e108:	00010493          	addi	s1,sp,0
   2e10c:	00048513          	addi	a0,s1,0
   2e110:	00014317          	auipc	t1,0x14
   2e114:	30033303          	ld	t1,768(t1) # 42410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfc4c>
   2e118:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e11c:	00a00713          	addi	a4,zero,10
   2e120:	0000a697          	auipc	a3,0xa
   2e124:	06868693          	addi	a3,a3,104 # 38188 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4a8>
   2e128:	00000613          	addi	a2,zero,0
   2e12c:	00000593          	addi	a1,zero,0
   2e130:	00048513          	addi	a0,s1,0
   2e134:	ccce80ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2e138:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e13c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2e140:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2e144:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2e148:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2e14c:	03278c63          	beq	a5,s2,2e184 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x180>
      { _M_dataplus._M_p = __p; }
   2e150:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2e154:	0104b783          	ld	a5,16(s1)
   2e158:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2e15c:	0084b783          	ld	a5,8(s1)
   2e160:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2e164:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2e168:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2e16c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2e170:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e174:	01010793          	addi	a5,sp,16
   2e178:	f4f504e3          	beq	a0,a5,2e0c0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xbc>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2e17c:	b34e80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2e180:	f41ff06f          	jal	zero,2e0c0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xbc>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2e184:	0084b603          	ld	a2,8(s1)
   2e188:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2e18c:	fc0608e3          	beq	a2,zero,2e15c <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x158>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2e190:	00090593          	addi	a1,s2,0
   2e194:	bbce80ef          	jal	ra,16550 <memcpy@plt>
   2e198:	fc5ff06f          	jal	zero,2e15c <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x158>
      { return _M_dataplus._M_p; }
   2e19c:	00050413          	addi	s0,a0,0
   2e1a0:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e1a4:	01010793          	addi	a5,sp,16
   2e1a8:	00f50463          	beq	a0,a5,2e1b0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x1ac>
   2e1ac:	b04e80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2e1b0:	00040513          	addi	a0,s0,0
   2e1b4:	cdce80ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002e1b8 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)>:
{
   2e1b8:	fc010113          	addi	sp,sp,-64
   2e1bc:	02113c23          	sd	ra,56(sp)
   2e1c0:	02813823          	sd	s0,48(sp)
   2e1c4:	02913423          	sd	s1,40(sp)
   2e1c8:	03213023          	sd	s2,32(sp)
   2e1cc:	00050413          	addi	s0,a0,0
        switch (v) {
   2e1d0:	00200793          	addi	a5,zero,2
   2e1d4:	0af58c63          	beq	a1,a5,2e28c <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xd4>
   2e1d8:	02b7ce63          	blt	a5,a1,2e214 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x5c>
   2e1dc:	06058663          	beq	a1,zero,2e248 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x90>
   2e1e0:	00100793          	addi	a5,zero,1
   2e1e4:	0cf59a63          	bne	a1,a5,2e2b8 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x100>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e1e8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e1ec:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e1f0:	00000693          	addi	a3,zero,0
   2e1f4:	0000a617          	auipc	a2,0xa
   2e1f8:	fc960613          	addi	a2,a2,-55 # 381bd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4dd>
   2e1fc:	0000a597          	auipc	a1,0xa
   2e200:	fb458593          	addi	a1,a1,-76 # 381b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4d0>
   2e204:	00014317          	auipc	t1,0x14
   2e208:	0fc33303          	ld	t1,252(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e20c:	000300e7          	jalr	ra,0(t1)
   2e210:	0600006f          	jal	zero,2e270 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xb8>
   2e214:	00300793          	addi	a5,zero,3
   2e218:	0af59063          	bne	a1,a5,2e2b8 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x100>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e21c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e220:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e224:	00000693          	addi	a3,zero,0
   2e228:	0000a617          	auipc	a2,0xa
   2e22c:	fbe60613          	addi	a2,a2,-66 # 381e6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x506>
   2e230:	0000a597          	auipc	a1,0xa
   2e234:	fa058593          	addi	a1,a1,-96 # 381d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4f0>
   2e238:	00014317          	auipc	t1,0x14
   2e23c:	0c833303          	ld	t1,200(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e240:	000300e7          	jalr	ra,0(t1)
   2e244:	02c0006f          	jal	zero,2e270 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xb8>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e248:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e24c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e250:	00000693          	addi	a3,zero,0
   2e254:	0000a617          	auipc	a2,0xa
   2e258:	f5860613          	addi	a2,a2,-168 # 381ac <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4cc>
   2e25c:	0000a597          	auipc	a1,0xa
   2e260:	f3c58593          	addi	a1,a1,-196 # 38198 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4b8>
   2e264:	00014317          	auipc	t1,0x14
   2e268:	09c33303          	ld	t1,156(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e26c:	000300e7          	jalr	ra,0(t1)
}
   2e270:	00040513          	addi	a0,s0,0
   2e274:	03813083          	ld	ra,56(sp)
   2e278:	03013403          	ld	s0,48(sp)
   2e27c:	02813483          	ld	s1,40(sp)
   2e280:	02013903          	ld	s2,32(sp)
   2e284:	04010113          	addi	sp,sp,64
   2e288:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e28c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e290:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e294:	00000693          	addi	a3,zero,0
   2e298:	0000a617          	auipc	a2,0xa
   2e29c:	f3760613          	addi	a2,a2,-201 # 381cf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4ef>
   2e2a0:	0000a597          	auipc	a1,0xa
   2e2a4:	f2058593          	addi	a1,a1,-224 # 381c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4e0>
   2e2a8:	00014317          	auipc	t1,0x14
   2e2ac:	05833303          	ld	t1,88(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e2b0:	000300e7          	jalr	ra,0(t1)
   2e2b4:	fbdff06f          	jal	zero,2e270 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xb8>
        return "(DW_ID)0x" + to_hex((int)v);
   2e2b8:	00010493          	addi	s1,sp,0
   2e2bc:	00048513          	addi	a0,s1,0
   2e2c0:	00014317          	auipc	t1,0x14
   2e2c4:	15033303          	ld	t1,336(t1) # 42410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfc4c>
   2e2c8:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e2cc:	00900713          	addi	a4,zero,9
   2e2d0:	0000a697          	auipc	a3,0xa
   2e2d4:	f1868693          	addi	a3,a3,-232 # 381e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x508>
   2e2d8:	00000613          	addi	a2,zero,0
   2e2dc:	00000593          	addi	a1,zero,0
   2e2e0:	00048513          	addi	a0,s1,0
   2e2e4:	b1ce80ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2e2e8:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e2ec:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2e2f0:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2e2f4:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2e2f8:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2e2fc:	03278c63          	beq	a5,s2,2e334 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x17c>
      { _M_dataplus._M_p = __p; }
   2e300:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2e304:	0104b783          	ld	a5,16(s1)
   2e308:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2e30c:	0084b783          	ld	a5,8(s1)
   2e310:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2e314:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2e318:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2e31c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2e320:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e324:	01010793          	addi	a5,sp,16
   2e328:	f4f504e3          	beq	a0,a5,2e270 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xb8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2e32c:	984e80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2e330:	f41ff06f          	jal	zero,2e270 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xb8>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2e334:	0084b603          	ld	a2,8(s1)
   2e338:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2e33c:	fc0608e3          	beq	a2,zero,2e30c <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x154>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2e340:	00090593          	addi	a1,s2,0
   2e344:	a0ce80ef          	jal	ra,16550 <memcpy@plt>
   2e348:	fc5ff06f          	jal	zero,2e30c <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x154>
      { return _M_dataplus._M_p; }
   2e34c:	00050413          	addi	s0,a0,0
   2e350:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e354:	01010793          	addi	a5,sp,16
   2e358:	00f50463          	beq	a0,a5,2e360 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x1a8>
   2e35c:	954e80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2e360:	00040513          	addi	a0,s0,0
   2e364:	b2ce80ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002e368 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)>:
{
   2e368:	fc010113          	addi	sp,sp,-64
   2e36c:	02113c23          	sd	ra,56(sp)
   2e370:	02813823          	sd	s0,48(sp)
   2e374:	02913423          	sd	s1,40(sp)
   2e378:	03213023          	sd	s2,32(sp)
   2e37c:	00050413          	addi	s0,a0,0
        switch (v) {
   2e380:	00500793          	addi	a5,zero,5
   2e384:	10b7ea63          	bltu	a5,a1,2e498 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x130>
   2e388:	00259793          	slli	a5,a1,0x2
   2e38c:	0000c717          	auipc	a4,0xc
   2e390:	98870713          	addi	a4,a4,-1656 # 39d14 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2034>
   2e394:	00e787b3          	add	a5,a5,a4
   2e398:	0007a783          	lw	a5,0(a5)
   2e39c:	00e787b3          	add	a5,a5,a4
   2e3a0:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e3a4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e3a8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e3ac:	00000693          	addi	a3,zero,0
   2e3b0:	0000a617          	auipc	a2,0xa
   2e3b4:	e5660613          	addi	a2,a2,-426 # 38206 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x526>
   2e3b8:	0000a597          	auipc	a1,0xa
   2e3bc:	e4058593          	addi	a1,a1,-448 # 381f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x518>
   2e3c0:	00014317          	auipc	t1,0x14
   2e3c4:	f4033303          	ld	t1,-192(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e3c8:	000300e7          	jalr	ra,0(t1)
}
   2e3cc:	00040513          	addi	a0,s0,0
   2e3d0:	03813083          	ld	ra,56(sp)
   2e3d4:	03013403          	ld	s0,48(sp)
   2e3d8:	02813483          	ld	s1,40(sp)
   2e3dc:	02013903          	ld	s2,32(sp)
   2e3e0:	04010113          	addi	sp,sp,64
   2e3e4:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e3e8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e3ec:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e3f0:	00000693          	addi	a3,zero,0
   2e3f4:	0000a617          	auipc	a2,0xa
   2e3f8:	e2b60613          	addi	a2,a2,-469 # 3821f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x53f>
   2e3fc:	0000a597          	auipc	a1,0xa
   2e400:	e0c58593          	addi	a1,a1,-500 # 38208 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x528>
   2e404:	00014317          	auipc	t1,0x14
   2e408:	efc33303          	ld	t1,-260(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e40c:	000300e7          	jalr	ra,0(t1)
   2e410:	fbdff06f          	jal	zero,2e3cc <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e414:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e418:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e41c:	00000693          	addi	a3,zero,0
   2e420:	0000a617          	auipc	a2,0xa
   2e424:	e1860613          	addi	a2,a2,-488 # 38238 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x558>
   2e428:	0000a597          	auipc	a1,0xa
   2e42c:	df858593          	addi	a1,a1,-520 # 38220 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x540>
   2e430:	00014317          	auipc	t1,0x14
   2e434:	ed033303          	ld	t1,-304(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e438:	000300e7          	jalr	ra,0(t1)
   2e43c:	f91ff06f          	jal	zero,2e3cc <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e440:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e444:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e448:	00000693          	addi	a3,zero,0
   2e44c:	0000a617          	auipc	a2,0xa
   2e450:	e0a60613          	addi	a2,a2,-502 # 38256 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x576>
   2e454:	0000a597          	auipc	a1,0xa
   2e458:	dec58593          	addi	a1,a1,-532 # 38240 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x560>
   2e45c:	00014317          	auipc	t1,0x14
   2e460:	ea433303          	ld	t1,-348(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e464:	000300e7          	jalr	ra,0(t1)
   2e468:	f65ff06f          	jal	zero,2e3cc <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e46c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e470:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e474:	00000693          	addi	a3,zero,0
   2e478:	0000a617          	auipc	a2,0xa
   2e47c:	df760613          	addi	a2,a2,-521 # 3826f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x58f>
   2e480:	0000a597          	auipc	a1,0xa
   2e484:	dd858593          	addi	a1,a1,-552 # 38258 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x578>
   2e488:	00014317          	auipc	t1,0x14
   2e48c:	e7833303          	ld	t1,-392(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e490:	000300e7          	jalr	ra,0(t1)
   2e494:	f39ff06f          	jal	zero,2e3cc <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x64>
        return "(DW_DS)0x" + to_hex((int)v);
   2e498:	00010493          	addi	s1,sp,0
   2e49c:	00048513          	addi	a0,s1,0
   2e4a0:	00014317          	auipc	t1,0x14
   2e4a4:	f7033303          	ld	t1,-144(t1) # 42410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfc4c>
   2e4a8:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e4ac:	00900713          	addi	a4,zero,9
   2e4b0:	0000a697          	auipc	a3,0xa
   2e4b4:	dc068693          	addi	a3,a3,-576 # 38270 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x590>
   2e4b8:	00000613          	addi	a2,zero,0
   2e4bc:	00000593          	addi	a1,zero,0
   2e4c0:	00048513          	addi	a0,s1,0
   2e4c4:	93ce80ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2e4c8:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e4cc:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2e4d0:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2e4d4:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2e4d8:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2e4dc:	03278c63          	beq	a5,s2,2e514 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x1ac>
      { _M_dataplus._M_p = __p; }
   2e4e0:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2e4e4:	0104b783          	ld	a5,16(s1)
   2e4e8:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2e4ec:	0084b783          	ld	a5,8(s1)
   2e4f0:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2e4f4:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2e4f8:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2e4fc:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2e500:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e504:	01010793          	addi	a5,sp,16
   2e508:	ecf502e3          	beq	a0,a5,2e3cc <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2e50c:	fa5e70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2e510:	ebdff06f          	jal	zero,2e3cc <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2e514:	0084b603          	ld	a2,8(s1)
   2e518:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2e51c:	fc0608e3          	beq	a2,zero,2e4ec <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x184>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2e520:	00090593          	addi	a1,s2,0
   2e524:	82ce80ef          	jal	ra,16550 <memcpy@plt>
   2e528:	fc5ff06f          	jal	zero,2e4ec <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x184>
      { return _M_dataplus._M_p; }
   2e52c:	00050413          	addi	s0,a0,0
   2e530:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e534:	01010793          	addi	a5,sp,16
   2e538:	00f50463          	beq	a0,a5,2e540 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x1d8>
   2e53c:	f75e70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2e540:	00040513          	addi	a0,s0,0
   2e544:	94ce80ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002e548 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)>:
{
   2e548:	fb010113          	addi	sp,sp,-80
   2e54c:	04113423          	sd	ra,72(sp)
   2e550:	04813023          	sd	s0,64(sp)
   2e554:	02913c23          	sd	s1,56(sp)
   2e558:	03213823          	sd	s2,48(sp)
   2e55c:	03313423          	sd	s3,40(sp)
   2e560:	03413023          	sd	s4,32(sp)
   2e564:	00050413          	addi	s0,a0,0
        switch (v) {
   2e568:	00400793          	addi	a5,zero,4
   2e56c:	10b7ee63          	bltu	a5,a1,2e688 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x140>
   2e570:	00259593          	slli	a1,a1,0x2
   2e574:	0000b717          	auipc	a4,0xb
   2e578:	7b870713          	addi	a4,a4,1976 # 39d2c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x204c>
   2e57c:	00e585b3          	add	a1,a1,a4
   2e580:	0005a783          	lw	a5,0(a1)
   2e584:	00e787b3          	add	a5,a5,a4
   2e588:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e58c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e590:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e594:	00000693          	addi	a3,zero,0
   2e598:	0000a617          	auipc	a2,0xa
   2e59c:	d0260613          	addi	a2,a2,-766 # 3829a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5ba>
   2e5a0:	0000a597          	auipc	a1,0xa
   2e5a4:	ce058593          	addi	a1,a1,-800 # 38280 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5a0>
   2e5a8:	00014317          	auipc	t1,0x14
   2e5ac:	d5833303          	ld	t1,-680(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e5b0:	000300e7          	jalr	ra,0(t1)
}
   2e5b4:	00040513          	addi	a0,s0,0
   2e5b8:	04813083          	ld	ra,72(sp)
   2e5bc:	04013403          	ld	s0,64(sp)
   2e5c0:	03813483          	ld	s1,56(sp)
   2e5c4:	03013903          	ld	s2,48(sp)
   2e5c8:	02813983          	ld	s3,40(sp)
   2e5cc:	02013a03          	ld	s4,32(sp)
   2e5d0:	05010113          	addi	sp,sp,80
   2e5d4:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e5d8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e5dc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e5e0:	00000693          	addi	a3,zero,0
   2e5e4:	0000a617          	auipc	a2,0xa
   2e5e8:	cd260613          	addi	a2,a2,-814 # 382b6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5d6>
   2e5ec:	0000a597          	auipc	a1,0xa
   2e5f0:	cb458593          	addi	a1,a1,-844 # 382a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5c0>
   2e5f4:	00014317          	auipc	t1,0x14
   2e5f8:	d0c33303          	ld	t1,-756(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e5fc:	000300e7          	jalr	ra,0(t1)
   2e600:	fb5ff06f          	jal	zero,2e5b4 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e604:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e608:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e60c:	00000693          	addi	a3,zero,0
   2e610:	0000a617          	auipc	a2,0xa
   2e614:	cc260613          	addi	a2,a2,-830 # 382d2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5f2>
   2e618:	0000a597          	auipc	a1,0xa
   2e61c:	ca058593          	addi	a1,a1,-864 # 382b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5d8>
   2e620:	00014317          	auipc	t1,0x14
   2e624:	ce033303          	ld	t1,-800(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e628:	000300e7          	jalr	ra,0(t1)
   2e62c:	f89ff06f          	jal	zero,2e5b4 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e630:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e634:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e638:	00000693          	addi	a3,zero,0
   2e63c:	0000a617          	auipc	a2,0xa
   2e640:	cb760613          	addi	a2,a2,-841 # 382f3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x613>
   2e644:	0000a597          	auipc	a1,0xa
   2e648:	c9458593          	addi	a1,a1,-876 # 382d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5f8>
   2e64c:	00014317          	auipc	t1,0x14
   2e650:	cb433303          	ld	t1,-844(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e654:	000300e7          	jalr	ra,0(t1)
   2e658:	f5dff06f          	jal	zero,2e5b4 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e65c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e660:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e664:	00000693          	addi	a3,zero,0
   2e668:	0000a617          	auipc	a2,0xa
   2e66c:	ca860613          	addi	a2,a2,-856 # 38310 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x630>
   2e670:	0000a597          	auipc	a1,0xa
   2e674:	c8858593          	addi	a1,a1,-888 # 382f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x618>
   2e678:	00014317          	auipc	t1,0x14
   2e67c:	c8833303          	ld	t1,-888(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e680:	000300e7          	jalr	ra,0(t1)
   2e684:	f31ff06f          	jal	zero,2e5b4 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x6c>
    const bool __neg = __val < 0;
   2e688:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2e68c:	0005891b          	addiw	s2,a1,0
   2e690:	0605ce63          	blt	a1,zero,2e70c <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x1c4>
    const auto __len = __detail::__to_chars_len(__uval);
   2e694:	00a00593          	addi	a1,zero,10
   2e698:	00090513          	addi	a0,s2,0
   2e69c:	00014317          	auipc	t1,0x14
   2e6a0:	df433303          	ld	t1,-524(t1) # 42490 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x17f9c>
   2e6a4:	000300e7          	jalr	ra,0(t1)
   2e6a8:	00050a1b          	addiw	s4,a0,0
	: allocator_type(__a), _M_p(__dat) { }
   2e6ac:	01010793          	addi	a5,sp,16
   2e6b0:	00f13023          	sd	a5,0(sp)
    string __str(__neg + __len, '-');
   2e6b4:	00a985bb          	addw	a1,s3,a0
      { _M_construct(__n, __c); }
   2e6b8:	02d00613          	addi	a2,zero,45
   2e6bc:	02059593          	slli	a1,a1,0x20
   2e6c0:	0205d593          	srli	a1,a1,0x20
   2e6c4:	00010493          	addi	s1,sp,0
   2e6c8:	00048513          	addi	a0,s1,0
   2e6cc:	e45e70ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   2e6d0:	00090613          	addi	a2,s2,0
   2e6d4:	000a0593          	addi	a1,s4,0
   2e6d8:	00013503          	ld	a0,0(sp)
   2e6dc:	01350533          	add	a0,a0,s3
   2e6e0:	00014317          	auipc	t1,0x14
   2e6e4:	dd033303          	ld	t1,-560(t1) # 424b0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x17f20>
   2e6e8:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e6ec:	01300713          	addi	a4,zero,19
   2e6f0:	0000a697          	auipc	a3,0xa
   2e6f4:	c2868693          	addi	a3,a3,-984 # 38318 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x638>
   2e6f8:	00000613          	addi	a2,zero,0
   2e6fc:	00000593          	addi	a1,zero,0
   2e700:	00048513          	addi	a0,s1,0
   2e704:	efde70ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2e708:	00c0006f          	jal	zero,2e714 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x1cc>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2e70c:	40b0093b          	subw	s2,zero,a1
   2e710:	f85ff06f          	jal	zero,2e694 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x14c>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e714:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e718:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2e71c:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2e720:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2e724:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2e728:	03278c63          	beq	a5,s2,2e760 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x218>
      { _M_dataplus._M_p = __p; }
   2e72c:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2e730:	0104b783          	ld	a5,16(s1)
   2e734:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2e738:	0084b783          	ld	a5,8(s1)
   2e73c:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2e740:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2e744:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2e748:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2e74c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e750:	01010793          	addi	a5,sp,16
   2e754:	e6f500e3          	beq	a0,a5,2e5b4 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x6c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2e758:	d59e70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2e75c:	e59ff06f          	jal	zero,2e5b4 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x6c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2e760:	0084b603          	ld	a2,8(s1)
   2e764:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2e768:	fc0608e3          	beq	a2,zero,2e738 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x1f0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2e76c:	00090593          	addi	a1,s2,0
   2e770:	de1e70ef          	jal	ra,16550 <memcpy@plt>
   2e774:	fc5ff06f          	jal	zero,2e738 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x1f0>
      { return _M_dataplus._M_p; }
   2e778:	00050413          	addi	s0,a0,0
   2e77c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e780:	01010793          	addi	a5,sp,16
   2e784:	00f50463          	beq	a0,a5,2e78c <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x244>
   2e788:	d29e70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2e78c:	00040513          	addi	a0,s0,0
   2e790:	f01e70ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002e794 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)>:
{
   2e794:	fc010113          	addi	sp,sp,-64
   2e798:	02113c23          	sd	ra,56(sp)
   2e79c:	02813823          	sd	s0,48(sp)
   2e7a0:	02913423          	sd	s1,40(sp)
   2e7a4:	03213023          	sd	s2,32(sp)
   2e7a8:	00050413          	addi	s0,a0,0
        switch (v) {
   2e7ac:	00c00793          	addi	a5,zero,12
   2e7b0:	24b7e463          	bltu	a5,a1,2e9f8 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x264>
   2e7b4:	00259793          	slli	a5,a1,0x2
   2e7b8:	0000b717          	auipc	a4,0xb
   2e7bc:	58870713          	addi	a4,a4,1416 # 39d40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2060>
   2e7c0:	00e787b3          	add	a5,a5,a4
   2e7c4:	0007a783          	lw	a5,0(a5)
   2e7c8:	00e787b3          	add	a5,a5,a4
   2e7cc:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e7d0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e7d4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e7d8:	00000693          	addi	a3,zero,0
   2e7dc:	0000a617          	auipc	a2,0xa
   2e7e0:	b5f60613          	addi	a2,a2,-1185 # 3833b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x65b>
   2e7e4:	0000a597          	auipc	a1,0xa
   2e7e8:	b4c58593          	addi	a1,a1,-1204 # 38330 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x650>
   2e7ec:	00014317          	auipc	t1,0x14
   2e7f0:	b1433303          	ld	t1,-1260(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e7f4:	000300e7          	jalr	ra,0(t1)
}
   2e7f8:	00040513          	addi	a0,s0,0
   2e7fc:	03813083          	ld	ra,56(sp)
   2e800:	03013403          	ld	s0,48(sp)
   2e804:	02813483          	ld	s1,40(sp)
   2e808:	02013903          	ld	s2,32(sp)
   2e80c:	04010113          	addi	sp,sp,64
   2e810:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e814:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e818:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e81c:	00000693          	addi	a3,zero,0
   2e820:	0000a617          	auipc	a2,0xa
   2e824:	b3160613          	addi	a2,a2,-1231 # 38351 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x671>
   2e828:	0000a597          	auipc	a1,0xa
   2e82c:	b1858593          	addi	a1,a1,-1256 # 38340 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x660>
   2e830:	00014317          	auipc	t1,0x14
   2e834:	ad033303          	ld	t1,-1328(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e838:	000300e7          	jalr	ra,0(t1)
   2e83c:	fbdff06f          	jal	zero,2e7f8 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e840:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e844:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e848:	00000693          	addi	a3,zero,0
   2e84c:	0000a617          	auipc	a2,0xa
   2e850:	b1f60613          	addi	a2,a2,-1249 # 3836b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68b>
   2e854:	0000a597          	auipc	a1,0xa
   2e858:	b0458593          	addi	a1,a1,-1276 # 38358 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x678>
   2e85c:	00014317          	auipc	t1,0x14
   2e860:	aa433303          	ld	t1,-1372(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e864:	000300e7          	jalr	ra,0(t1)
   2e868:	f91ff06f          	jal	zero,2e7f8 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e86c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e870:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e874:	00000693          	addi	a3,zero,0
   2e878:	0000a617          	auipc	a2,0xa
   2e87c:	b0760613          	addi	a2,a2,-1273 # 3837f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x69f>
   2e880:	0000a597          	auipc	a1,0xa
   2e884:	af058593          	addi	a1,a1,-1296 # 38370 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x690>
   2e888:	00014317          	auipc	t1,0x14
   2e88c:	a7833303          	ld	t1,-1416(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e890:	000300e7          	jalr	ra,0(t1)
   2e894:	f65ff06f          	jal	zero,2e7f8 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e898:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e89c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e8a0:	00000693          	addi	a3,zero,0
   2e8a4:	0000a617          	auipc	a2,0xa
   2e8a8:	aed60613          	addi	a2,a2,-1299 # 38391 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6b1>
   2e8ac:	0000a597          	auipc	a1,0xa
   2e8b0:	ad458593          	addi	a1,a1,-1324 # 38380 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6a0>
   2e8b4:	00014317          	auipc	t1,0x14
   2e8b8:	a4c33303          	ld	t1,-1460(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e8bc:	000300e7          	jalr	ra,0(t1)
   2e8c0:	f39ff06f          	jal	zero,2e7f8 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e8c4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e8c8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e8cc:	00000693          	addi	a3,zero,0
   2e8d0:	0000a617          	auipc	a2,0xa
   2e8d4:	ada60613          	addi	a2,a2,-1318 # 383aa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6ca>
   2e8d8:	0000a597          	auipc	a1,0xa
   2e8dc:	ac058593          	addi	a1,a1,-1344 # 38398 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6b8>
   2e8e0:	00014317          	auipc	t1,0x14
   2e8e4:	a2033303          	ld	t1,-1504(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e8e8:	000300e7          	jalr	ra,0(t1)
   2e8ec:	f0dff06f          	jal	zero,2e7f8 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e8f0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e8f4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e8f8:	00000693          	addi	a3,zero,0
   2e8fc:	0000a617          	auipc	a2,0xa
   2e900:	aca60613          	addi	a2,a2,-1334 # 383c6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6e6>
   2e904:	0000a597          	auipc	a1,0xa
   2e908:	aac58593          	addi	a1,a1,-1364 # 383b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6d0>
   2e90c:	00014317          	auipc	t1,0x14
   2e910:	9f433303          	ld	t1,-1548(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e914:	000300e7          	jalr	ra,0(t1)
   2e918:	ee1ff06f          	jal	zero,2e7f8 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e91c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e920:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e924:	00000693          	addi	a3,zero,0
   2e928:	0000a617          	auipc	a2,0xa
   2e92c:	ab360613          	addi	a2,a2,-1357 # 383db <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6fb>
   2e930:	0000a597          	auipc	a1,0xa
   2e934:	a9858593          	addi	a1,a1,-1384 # 383c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6e8>
   2e938:	00014317          	auipc	t1,0x14
   2e93c:	9c833303          	ld	t1,-1592(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e940:	000300e7          	jalr	ra,0(t1)
   2e944:	eb5ff06f          	jal	zero,2e7f8 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e948:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e94c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e950:	00000693          	addi	a3,zero,0
   2e954:	0000a617          	auipc	a2,0xa
   2e958:	aa360613          	addi	a2,a2,-1373 # 383f7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x717>
   2e95c:	0000a597          	auipc	a1,0xa
   2e960:	a8458593          	addi	a1,a1,-1404 # 383e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x700>
   2e964:	00014317          	auipc	t1,0x14
   2e968:	99c33303          	ld	t1,-1636(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e96c:	000300e7          	jalr	ra,0(t1)
   2e970:	e89ff06f          	jal	zero,2e7f8 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e974:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e978:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e97c:	00000693          	addi	a3,zero,0
   2e980:	0000a617          	auipc	a2,0xa
   2e984:	a8f60613          	addi	a2,a2,-1393 # 3840f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x72f>
   2e988:	0000a597          	auipc	a1,0xa
   2e98c:	a7058593          	addi	a1,a1,-1424 # 383f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x718>
   2e990:	00014317          	auipc	t1,0x14
   2e994:	97033303          	ld	t1,-1680(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e998:	000300e7          	jalr	ra,0(t1)
   2e99c:	e5dff06f          	jal	zero,2e7f8 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e9a0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e9a4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e9a8:	00000693          	addi	a3,zero,0
   2e9ac:	0000a617          	auipc	a2,0xa
   2e9b0:	a7d60613          	addi	a2,a2,-1411 # 38429 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x749>
   2e9b4:	0000a597          	auipc	a1,0xa
   2e9b8:	a5c58593          	addi	a1,a1,-1444 # 38410 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x730>
   2e9bc:	00014317          	auipc	t1,0x14
   2e9c0:	94433303          	ld	t1,-1724(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e9c4:	000300e7          	jalr	ra,0(t1)
   2e9c8:	e31ff06f          	jal	zero,2e7f8 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e9cc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e9d0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e9d4:	00000693          	addi	a3,zero,0
   2e9d8:	0000a617          	auipc	a2,0xa
   2e9dc:	a6660613          	addi	a2,a2,-1434 # 3843e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x75e>
   2e9e0:	0000a597          	auipc	a1,0xa
   2e9e4:	a5058593          	addi	a1,a1,-1456 # 38430 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x750>
   2e9e8:	00014317          	auipc	t1,0x14
   2e9ec:	91833303          	ld	t1,-1768(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2e9f0:	000300e7          	jalr	ra,0(t1)
   2e9f4:	e05ff06f          	jal	zero,2e7f8 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
        return "(DW_LNS)0x" + to_hex((int)v);
   2e9f8:	00010493          	addi	s1,sp,0
   2e9fc:	00048513          	addi	a0,s1,0
   2ea00:	00014317          	auipc	t1,0x14
   2ea04:	a1033303          	ld	t1,-1520(t1) # 42410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfc4c>
   2ea08:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2ea0c:	00a00713          	addi	a4,zero,10
   2ea10:	0000a697          	auipc	a3,0xa
   2ea14:	a3068693          	addi	a3,a3,-1488 # 38440 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x760>
   2ea18:	00000613          	addi	a2,zero,0
   2ea1c:	00000593          	addi	a1,zero,0
   2ea20:	00048513          	addi	a0,s1,0
   2ea24:	bdde70ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2ea28:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ea2c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2ea30:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2ea34:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2ea38:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2ea3c:	03278c63          	beq	a5,s2,2ea74 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x2e0>
      { _M_dataplus._M_p = __p; }
   2ea40:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2ea44:	0104b783          	ld	a5,16(s1)
   2ea48:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2ea4c:	0084b783          	ld	a5,8(s1)
   2ea50:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2ea54:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2ea58:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2ea5c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2ea60:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2ea64:	01010793          	addi	a5,sp,16
   2ea68:	d8f508e3          	beq	a0,a5,2e7f8 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2ea6c:	a45e70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2ea70:	d89ff06f          	jal	zero,2e7f8 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2ea74:	0084b603          	ld	a2,8(s1)
   2ea78:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2ea7c:	fc0608e3          	beq	a2,zero,2ea4c <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x2b8>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2ea80:	00090593          	addi	a1,s2,0
   2ea84:	acde70ef          	jal	ra,16550 <memcpy@plt>
   2ea88:	fc5ff06f          	jal	zero,2ea4c <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x2b8>
      { return _M_dataplus._M_p; }
   2ea8c:	00050413          	addi	s0,a0,0
   2ea90:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2ea94:	01010793          	addi	a5,sp,16
   2ea98:	00f50463          	beq	a0,a5,2eaa0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x30c>
   2ea9c:	a15e70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2eaa0:	00040513          	addi	a0,s0,0
   2eaa4:	bede70ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002eaa8 <dwarf::to_string[abi:cxx11](dwarf::section_type)>:
{
   2eaa8:	fb010113          	addi	sp,sp,-80
   2eaac:	04113423          	sd	ra,72(sp)
   2eab0:	04813023          	sd	s0,64(sp)
   2eab4:	02913c23          	sd	s1,56(sp)
   2eab8:	03213823          	sd	s2,48(sp)
   2eabc:	03313423          	sd	s3,40(sp)
   2eac0:	03413023          	sd	s4,32(sp)
   2eac4:	00050413          	addi	s0,a0,0
        switch (v) {
   2eac8:	00b00793          	addi	a5,zero,11
   2eacc:	24b7e863          	bltu	a5,a1,2ed1c <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x274>
   2ead0:	00259593          	slli	a1,a1,0x2
   2ead4:	0000b717          	auipc	a4,0xb
   2ead8:	2a070713          	addi	a4,a4,672 # 39d74 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2094>
   2eadc:	00e585b3          	add	a1,a1,a4
   2eae0:	0005a783          	lw	a5,0(a1)
   2eae4:	00e787b3          	add	a5,a5,a4
   2eae8:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2eaec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2eaf0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2eaf4:	00000693          	addi	a3,zero,0
   2eaf8:	0000a617          	auipc	a2,0xa
   2eafc:	96c60613          	addi	a2,a2,-1684 # 38464 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x784>
   2eb00:	0000a597          	auipc	a1,0xa
   2eb04:	95058593          	addi	a1,a1,-1712 # 38450 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x770>
   2eb08:	00013317          	auipc	t1,0x13
   2eb0c:	7f833303          	ld	t1,2040(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2eb10:	000300e7          	jalr	ra,0(t1)
}
   2eb14:	00040513          	addi	a0,s0,0
   2eb18:	04813083          	ld	ra,72(sp)
   2eb1c:	04013403          	ld	s0,64(sp)
   2eb20:	03813483          	ld	s1,56(sp)
   2eb24:	03013903          	ld	s2,48(sp)
   2eb28:	02813983          	ld	s3,40(sp)
   2eb2c:	02013a03          	ld	s4,32(sp)
   2eb30:	05010113          	addi	sp,sp,80
   2eb34:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2eb38:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2eb3c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2eb40:	00000693          	addi	a3,zero,0
   2eb44:	0000a617          	auipc	a2,0xa
   2eb48:	93960613          	addi	a2,a2,-1735 # 3847d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x79d>
   2eb4c:	0000a597          	auipc	a1,0xa
   2eb50:	91c58593          	addi	a1,a1,-1764 # 38468 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x788>
   2eb54:	00013317          	auipc	t1,0x13
   2eb58:	7ac33303          	ld	t1,1964(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2eb5c:	000300e7          	jalr	ra,0(t1)
   2eb60:	fb5ff06f          	jal	zero,2eb14 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2eb64:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2eb68:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2eb6c:	00000693          	addi	a3,zero,0
   2eb70:	0000a617          	auipc	a2,0xa
   2eb74:	92360613          	addi	a2,a2,-1757 # 38493 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7b3>
   2eb78:	0000a597          	auipc	a1,0xa
   2eb7c:	90858593          	addi	a1,a1,-1784 # 38480 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7a0>
   2eb80:	00013317          	auipc	t1,0x13
   2eb84:	78033303          	ld	t1,1920(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2eb88:	000300e7          	jalr	ra,0(t1)
   2eb8c:	f89ff06f          	jal	zero,2eb14 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2eb90:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2eb94:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2eb98:	00000693          	addi	a3,zero,0
   2eb9c:	0000a617          	auipc	a2,0xa
   2eba0:	90e60613          	addi	a2,a2,-1778 # 384aa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7ca>
   2eba4:	0000a597          	auipc	a1,0xa
   2eba8:	8f458593          	addi	a1,a1,-1804 # 38498 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7b8>
   2ebac:	00013317          	auipc	t1,0x13
   2ebb0:	75433303          	ld	t1,1876(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2ebb4:	000300e7          	jalr	ra,0(t1)
   2ebb8:	f5dff06f          	jal	zero,2eb14 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ebbc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ebc0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ebc4:	00000693          	addi	a3,zero,0
   2ebc8:	0000a617          	auipc	a2,0xa
   2ebcc:	8fa60613          	addi	a2,a2,-1798 # 384c2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7e2>
   2ebd0:	0000a597          	auipc	a1,0xa
   2ebd4:	8e058593          	addi	a1,a1,-1824 # 384b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7d0>
   2ebd8:	00013317          	auipc	t1,0x13
   2ebdc:	72833303          	ld	t1,1832(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2ebe0:	000300e7          	jalr	ra,0(t1)
   2ebe4:	f31ff06f          	jal	zero,2eb14 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ebe8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ebec:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ebf0:	00000693          	addi	a3,zero,0
   2ebf4:	0000a617          	auipc	a2,0xa
   2ebf8:	8e560613          	addi	a2,a2,-1819 # 384d9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7f9>
   2ebfc:	0000a597          	auipc	a1,0xa
   2ec00:	8cc58593          	addi	a1,a1,-1844 # 384c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7e8>
   2ec04:	00013317          	auipc	t1,0x13
   2ec08:	6fc33303          	ld	t1,1788(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2ec0c:	000300e7          	jalr	ra,0(t1)
   2ec10:	f05ff06f          	jal	zero,2eb14 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ec14:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ec18:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ec1c:	00000693          	addi	a3,zero,0
   2ec20:	0000a617          	auipc	a2,0xa
   2ec24:	8d560613          	addi	a2,a2,-1835 # 384f5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x815>
   2ec28:	0000a597          	auipc	a1,0xa
   2ec2c:	8b858593          	addi	a1,a1,-1864 # 384e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x800>
   2ec30:	00013317          	auipc	t1,0x13
   2ec34:	6d033303          	ld	t1,1744(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2ec38:	000300e7          	jalr	ra,0(t1)
   2ec3c:	ed9ff06f          	jal	zero,2eb14 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ec40:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ec44:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ec48:	00000693          	addi	a3,zero,0
   2ec4c:	0000a617          	auipc	a2,0xa
   2ec50:	8c260613          	addi	a2,a2,-1854 # 3850e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x82e>
   2ec54:	0000a597          	auipc	a1,0xa
   2ec58:	8a458593          	addi	a1,a1,-1884 # 384f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x818>
   2ec5c:	00013317          	auipc	t1,0x13
   2ec60:	6a433303          	ld	t1,1700(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2ec64:	000300e7          	jalr	ra,0(t1)
   2ec68:	eadff06f          	jal	zero,2eb14 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ec6c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ec70:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ec74:	00000693          	addi	a3,zero,0
   2ec78:	0000a617          	auipc	a2,0xa
   2ec7c:	8ae60613          	addi	a2,a2,-1874 # 38526 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x846>
   2ec80:	0000a597          	auipc	a1,0xa
   2ec84:	89058593          	addi	a1,a1,-1904 # 38510 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x830>
   2ec88:	00013317          	auipc	t1,0x13
   2ec8c:	67833303          	ld	t1,1656(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2ec90:	000300e7          	jalr	ra,0(t1)
   2ec94:	e81ff06f          	jal	zero,2eb14 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ec98:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ec9c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2eca0:	00000693          	addi	a3,zero,0
   2eca4:	0000a617          	auipc	a2,0xa
   2eca8:	89860613          	addi	a2,a2,-1896 # 3853c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x85c>
   2ecac:	0000a597          	auipc	a1,0xa
   2ecb0:	87c58593          	addi	a1,a1,-1924 # 38528 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x848>
   2ecb4:	00013317          	auipc	t1,0x13
   2ecb8:	64c33303          	ld	t1,1612(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2ecbc:	000300e7          	jalr	ra,0(t1)
   2ecc0:	e55ff06f          	jal	zero,2eb14 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ecc4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ecc8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2eccc:	00000693          	addi	a3,zero,0
   2ecd0:	0000a617          	auipc	a2,0xa
   2ecd4:	88160613          	addi	a2,a2,-1919 # 38551 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x871>
   2ecd8:	0000a597          	auipc	a1,0xa
   2ecdc:	86858593          	addi	a1,a1,-1944 # 38540 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x860>
   2ece0:	00013317          	auipc	t1,0x13
   2ece4:	62033303          	ld	t1,1568(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2ece8:	000300e7          	jalr	ra,0(t1)
   2ecec:	e29ff06f          	jal	zero,2eb14 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ecf0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ecf4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ecf8:	00000693          	addi	a3,zero,0
   2ecfc:	0000a617          	auipc	a2,0xa
   2ed00:	86f60613          	addi	a2,a2,-1937 # 3856b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x88b>
   2ed04:	0000a597          	auipc	a1,0xa
   2ed08:	85458593          	addi	a1,a1,-1964 # 38558 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x878>
   2ed0c:	00013317          	auipc	t1,0x13
   2ed10:	5f433303          	ld	t1,1524(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2ed14:	000300e7          	jalr	ra,0(t1)
   2ed18:	dfdff06f          	jal	zero,2eb14 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
    const bool __neg = __val < 0;
   2ed1c:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2ed20:	0005891b          	addiw	s2,a1,0
   2ed24:	0605ce63          	blt	a1,zero,2eda0 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x2f8>
    const auto __len = __detail::__to_chars_len(__uval);
   2ed28:	00a00593          	addi	a1,zero,10
   2ed2c:	00090513          	addi	a0,s2,0
   2ed30:	00013317          	auipc	t1,0x13
   2ed34:	76033303          	ld	t1,1888(t1) # 42490 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x17f9c>
   2ed38:	000300e7          	jalr	ra,0(t1)
   2ed3c:	00050a1b          	addiw	s4,a0,0
	: allocator_type(__a), _M_p(__dat) { }
   2ed40:	01010793          	addi	a5,sp,16
   2ed44:	00f13023          	sd	a5,0(sp)
    string __str(__neg + __len, '-');
   2ed48:	00a985bb          	addw	a1,s3,a0
      { _M_construct(__n, __c); }
   2ed4c:	02d00613          	addi	a2,zero,45
   2ed50:	02059593          	slli	a1,a1,0x20
   2ed54:	0205d593          	srli	a1,a1,0x20
   2ed58:	00010493          	addi	s1,sp,0
   2ed5c:	00048513          	addi	a0,s1,0
   2ed60:	fb0e70ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   2ed64:	00090613          	addi	a2,s2,0
   2ed68:	000a0593          	addi	a1,s4,0
   2ed6c:	00013503          	ld	a0,0(sp)
   2ed70:	01350533          	add	a0,a0,s3
   2ed74:	00013317          	auipc	t1,0x13
   2ed78:	73c33303          	ld	t1,1852(t1) # 424b0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x17f20>
   2ed7c:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2ed80:	00e00713          	addi	a4,zero,14
   2ed84:	00009697          	auipc	a3,0x9
   2ed88:	7ec68693          	addi	a3,a3,2028 # 38570 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x890>
   2ed8c:	00000613          	addi	a2,zero,0
   2ed90:	00000593          	addi	a1,zero,0
   2ed94:	00048513          	addi	a0,s1,0
   2ed98:	869e70ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2ed9c:	00c0006f          	jal	zero,2eda8 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x300>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2eda0:	40b0093b          	subw	s2,zero,a1
   2eda4:	f85ff06f          	jal	zero,2ed28 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x280>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2eda8:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2edac:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2edb0:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2edb4:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2edb8:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2edbc:	03278c63          	beq	a5,s2,2edf4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x34c>
      { _M_dataplus._M_p = __p; }
   2edc0:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2edc4:	0104b783          	ld	a5,16(s1)
   2edc8:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2edcc:	0084b783          	ld	a5,8(s1)
   2edd0:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2edd4:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2edd8:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2eddc:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2ede0:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2ede4:	01010793          	addi	a5,sp,16
   2ede8:	d2f506e3          	beq	a0,a5,2eb14 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2edec:	ec4e70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2edf0:	d25ff06f          	jal	zero,2eb14 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2edf4:	0084b603          	ld	a2,8(s1)
   2edf8:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2edfc:	fc0608e3          	beq	a2,zero,2edcc <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x324>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2ee00:	00090593          	addi	a1,s2,0
   2ee04:	f4ce70ef          	jal	ra,16550 <memcpy@plt>
   2ee08:	fc5ff06f          	jal	zero,2edcc <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x324>
      { return _M_dataplus._M_p; }
   2ee0c:	00050413          	addi	s0,a0,0
   2ee10:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2ee14:	01010793          	addi	a5,sp,16
   2ee18:	00f50463          	beq	a0,a5,2ee20 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x378>
   2ee1c:	e94e70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2ee20:	00040513          	addi	a0,s0,0
   2ee24:	86de70ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002ee28 <dwarf::to_string[abi:cxx11](dwarf::value::type)>:
{
   2ee28:	fb010113          	addi	sp,sp,-80
   2ee2c:	04113423          	sd	ra,72(sp)
   2ee30:	04813023          	sd	s0,64(sp)
   2ee34:	02913c23          	sd	s1,56(sp)
   2ee38:	03213823          	sd	s2,48(sp)
   2ee3c:	03313423          	sd	s3,40(sp)
   2ee40:	03413023          	sd	s4,32(sp)
   2ee44:	00050413          	addi	s0,a0,0
        switch (v) {
   2ee48:	00d00793          	addi	a5,zero,13
   2ee4c:	2ab7e463          	bltu	a5,a1,2f0f4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x2cc>
   2ee50:	00259593          	slli	a1,a1,0x2
   2ee54:	0000b717          	auipc	a4,0xb
   2ee58:	f5070713          	addi	a4,a4,-176 # 39da4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x20c4>
   2ee5c:	00e585b3          	add	a1,a1,a4
   2ee60:	0005a783          	lw	a5,0(a1)
   2ee64:	00e787b3          	add	a5,a5,a4
   2ee68:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ee6c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ee70:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ee74:	00000693          	addi	a3,zero,0
   2ee78:	00009617          	auipc	a2,0x9
   2ee7c:	71c60613          	addi	a2,a2,1820 # 38594 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8b4>
   2ee80:	00009597          	auipc	a1,0x9
   2ee84:	70058593          	addi	a1,a1,1792 # 38580 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8a0>
   2ee88:	00013317          	auipc	t1,0x13
   2ee8c:	47833303          	ld	t1,1144(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2ee90:	000300e7          	jalr	ra,0(t1)
}
   2ee94:	00040513          	addi	a0,s0,0
   2ee98:	04813083          	ld	ra,72(sp)
   2ee9c:	04013403          	ld	s0,64(sp)
   2eea0:	03813483          	ld	s1,56(sp)
   2eea4:	03013903          	ld	s2,48(sp)
   2eea8:	02813983          	ld	s3,40(sp)
   2eeac:	02013a03          	ld	s4,32(sp)
   2eeb0:	05010113          	addi	sp,sp,80
   2eeb4:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2eeb8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2eebc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2eec0:	00000693          	addi	a3,zero,0
   2eec4:	00009617          	auipc	a2,0x9
   2eec8:	6e860613          	addi	a2,a2,1768 # 385ac <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8cc>
   2eecc:	00009597          	auipc	a1,0x9
   2eed0:	6cc58593          	addi	a1,a1,1740 # 38598 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8b8>
   2eed4:	00013317          	auipc	t1,0x13
   2eed8:	42c33303          	ld	t1,1068(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2eedc:	000300e7          	jalr	ra,0(t1)
   2eee0:	fb5ff06f          	jal	zero,2ee94 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2eee4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2eee8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2eeec:	00000693          	addi	a3,zero,0
   2eef0:	00009617          	auipc	a2,0x9
   2eef4:	6d260613          	addi	a2,a2,1746 # 385c2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8e2>
   2eef8:	00009597          	auipc	a1,0x9
   2eefc:	6b858593          	addi	a1,a1,1720 # 385b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8d0>
   2ef00:	00013317          	auipc	t1,0x13
   2ef04:	40033303          	ld	t1,1024(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2ef08:	000300e7          	jalr	ra,0(t1)
   2ef0c:	f89ff06f          	jal	zero,2ee94 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ef10:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ef14:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ef18:	00000693          	addi	a3,zero,0
   2ef1c:	00009617          	auipc	a2,0x9
   2ef20:	6c160613          	addi	a2,a2,1729 # 385dd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8fd>
   2ef24:	00009597          	auipc	a1,0x9
   2ef28:	6a458593          	addi	a1,a1,1700 # 385c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8e8>
   2ef2c:	00013317          	auipc	t1,0x13
   2ef30:	3d433303          	ld	t1,980(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2ef34:	000300e7          	jalr	ra,0(t1)
   2ef38:	f5dff06f          	jal	zero,2ee94 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ef3c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ef40:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ef44:	00000693          	addi	a3,zero,0
   2ef48:	00009617          	auipc	a2,0x9
   2ef4c:	6ae60613          	addi	a2,a2,1710 # 385f6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x916>
   2ef50:	00009597          	auipc	a1,0x9
   2ef54:	69058593          	addi	a1,a1,1680 # 385e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x900>
   2ef58:	00013317          	auipc	t1,0x13
   2ef5c:	3a833303          	ld	t1,936(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2ef60:	000300e7          	jalr	ra,0(t1)
   2ef64:	f31ff06f          	jal	zero,2ee94 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ef68:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ef6c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ef70:	00000693          	addi	a3,zero,0
   2ef74:	00009617          	auipc	a2,0x9
   2ef78:	69a60613          	addi	a2,a2,1690 # 3860e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x92e>
   2ef7c:	00009597          	auipc	a1,0x9
   2ef80:	67c58593          	addi	a1,a1,1660 # 385f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x918>
   2ef84:	00013317          	auipc	t1,0x13
   2ef88:	37c33303          	ld	t1,892(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2ef8c:	000300e7          	jalr	ra,0(t1)
   2ef90:	f05ff06f          	jal	zero,2ee94 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ef94:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ef98:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ef9c:	00000693          	addi	a3,zero,0
   2efa0:	00009617          	auipc	a2,0x9
   2efa4:	68460613          	addi	a2,a2,1668 # 38624 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x944>
   2efa8:	00009597          	auipc	a1,0x9
   2efac:	66858593          	addi	a1,a1,1640 # 38610 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x930>
   2efb0:	00013317          	auipc	t1,0x13
   2efb4:	35033303          	ld	t1,848(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2efb8:	000300e7          	jalr	ra,0(t1)
   2efbc:	ed9ff06f          	jal	zero,2ee94 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2efc0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2efc4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2efc8:	00000693          	addi	a3,zero,0
   2efcc:	00009617          	auipc	a2,0x9
   2efd0:	66d60613          	addi	a2,a2,1645 # 38639 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x959>
   2efd4:	00009597          	auipc	a1,0x9
   2efd8:	65458593          	addi	a1,a1,1620 # 38628 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x948>
   2efdc:	00013317          	auipc	t1,0x13
   2efe0:	32433303          	ld	t1,804(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2efe4:	000300e7          	jalr	ra,0(t1)
   2efe8:	eadff06f          	jal	zero,2ee94 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2efec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2eff0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2eff4:	00000693          	addi	a3,zero,0
   2eff8:	00009617          	auipc	a2,0x9
   2effc:	65960613          	addi	a2,a2,1625 # 38651 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x971>
   2f000:	00009597          	auipc	a1,0x9
   2f004:	64058593          	addi	a1,a1,1600 # 38640 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x960>
   2f008:	00013317          	auipc	t1,0x13
   2f00c:	2f833303          	ld	t1,760(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f010:	000300e7          	jalr	ra,0(t1)
   2f014:	e81ff06f          	jal	zero,2ee94 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f018:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f01c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f020:	00000693          	addi	a3,zero,0
   2f024:	00009617          	auipc	a2,0x9
   2f028:	64860613          	addi	a2,a2,1608 # 3866c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x98c>
   2f02c:	00009597          	auipc	a1,0x9
   2f030:	62c58593          	addi	a1,a1,1580 # 38658 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x978>
   2f034:	00013317          	auipc	t1,0x13
   2f038:	2cc33303          	ld	t1,716(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f03c:	000300e7          	jalr	ra,0(t1)
   2f040:	e55ff06f          	jal	zero,2ee94 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f044:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f048:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f04c:	00000693          	addi	a3,zero,0
   2f050:	00009617          	auipc	a2,0x9
   2f054:	63060613          	addi	a2,a2,1584 # 38680 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9a0>
   2f058:	00009597          	auipc	a1,0x9
   2f05c:	61858593          	addi	a1,a1,1560 # 38670 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x990>
   2f060:	00013317          	auipc	t1,0x13
   2f064:	2a033303          	ld	t1,672(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f068:	000300e7          	jalr	ra,0(t1)
   2f06c:	e29ff06f          	jal	zero,2ee94 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f070:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f074:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f078:	00000693          	addi	a3,zero,0
   2f07c:	00009617          	auipc	a2,0x9
   2f080:	62260613          	addi	a2,a2,1570 # 3869e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9be>
   2f084:	00009597          	auipc	a1,0x9
   2f088:	60458593          	addi	a1,a1,1540 # 38688 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9a8>
   2f08c:	00013317          	auipc	t1,0x13
   2f090:	27433303          	ld	t1,628(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f094:	000300e7          	jalr	ra,0(t1)
   2f098:	dfdff06f          	jal	zero,2ee94 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f09c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f0a0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f0a4:	00000693          	addi	a3,zero,0
   2f0a8:	00009617          	auipc	a2,0x9
   2f0ac:	60e60613          	addi	a2,a2,1550 # 386b6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9d6>
   2f0b0:	00009597          	auipc	a1,0x9
   2f0b4:	5f058593          	addi	a1,a1,1520 # 386a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9c0>
   2f0b8:	00013317          	auipc	t1,0x13
   2f0bc:	24833303          	ld	t1,584(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f0c0:	000300e7          	jalr	ra,0(t1)
   2f0c4:	dd1ff06f          	jal	zero,2ee94 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f0c8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f0cc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f0d0:	00000693          	addi	a3,zero,0
   2f0d4:	00009617          	auipc	a2,0x9
   2f0d8:	5f760613          	addi	a2,a2,1527 # 386cb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9eb>
   2f0dc:	00009597          	auipc	a1,0x9
   2f0e0:	5dc58593          	addi	a1,a1,1500 # 386b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9d8>
   2f0e4:	00013317          	auipc	t1,0x13
   2f0e8:	21c33303          	ld	t1,540(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f0ec:	000300e7          	jalr	ra,0(t1)
   2f0f0:	da5ff06f          	jal	zero,2ee94 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
    const bool __neg = __val < 0;
   2f0f4:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2f0f8:	0005891b          	addiw	s2,a1,0
   2f0fc:	0605ce63          	blt	a1,zero,2f178 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x350>
    const auto __len = __detail::__to_chars_len(__uval);
   2f100:	00a00593          	addi	a1,zero,10
   2f104:	00090513          	addi	a0,s2,0
   2f108:	00013317          	auipc	t1,0x13
   2f10c:	38833303          	ld	t1,904(t1) # 42490 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x17f9c>
   2f110:	000300e7          	jalr	ra,0(t1)
   2f114:	00050a1b          	addiw	s4,a0,0
	: allocator_type(__a), _M_p(__dat) { }
   2f118:	01010793          	addi	a5,sp,16
   2f11c:	00f13023          	sd	a5,0(sp)
    string __str(__neg + __len, '-');
   2f120:	00a985bb          	addw	a1,s3,a0
      { _M_construct(__n, __c); }
   2f124:	02d00613          	addi	a2,zero,45
   2f128:	02059593          	slli	a1,a1,0x20
   2f12c:	0205d593          	srli	a1,a1,0x20
   2f130:	00010493          	addi	s1,sp,0
   2f134:	00048513          	addi	a0,s1,0
   2f138:	bd8e70ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   2f13c:	00090613          	addi	a2,s2,0
   2f140:	000a0593          	addi	a1,s4,0
   2f144:	00013503          	ld	a0,0(sp)
   2f148:	01350533          	add	a0,a0,s3
   2f14c:	00013317          	auipc	t1,0x13
   2f150:	36433303          	ld	t1,868(t1) # 424b0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x17f20>
   2f154:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2f158:	00d00713          	addi	a4,zero,13
   2f15c:	00009697          	auipc	a3,0x9
   2f160:	57468693          	addi	a3,a3,1396 # 386d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9f0>
   2f164:	00000613          	addi	a2,zero,0
   2f168:	00000593          	addi	a1,zero,0
   2f16c:	00048513          	addi	a0,s1,0
   2f170:	c90e70ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2f174:	00c0006f          	jal	zero,2f180 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x358>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2f178:	40b0093b          	subw	s2,zero,a1
   2f17c:	f85ff06f          	jal	zero,2f100 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x2d8>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2f180:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f184:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2f188:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2f18c:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2f190:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2f194:	03278c63          	beq	a5,s2,2f1cc <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x3a4>
      { _M_dataplus._M_p = __p; }
   2f198:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2f19c:	0104b783          	ld	a5,16(s1)
   2f1a0:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2f1a4:	0084b783          	ld	a5,8(s1)
   2f1a8:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2f1ac:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2f1b0:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2f1b4:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2f1b8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2f1bc:	01010793          	addi	a5,sp,16
   2f1c0:	ccf50ae3          	beq	a0,a5,2ee94 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2f1c4:	aece70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2f1c8:	ccdff06f          	jal	zero,2ee94 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2f1cc:	0084b603          	ld	a2,8(s1)
   2f1d0:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2f1d4:	fc0608e3          	beq	a2,zero,2f1a4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x37c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2f1d8:	00090593          	addi	a1,s2,0
   2f1dc:	b74e70ef          	jal	ra,16550 <memcpy@plt>
   2f1e0:	fc5ff06f          	jal	zero,2f1a4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x37c>
      { return _M_dataplus._M_p; }
   2f1e4:	00050413          	addi	s0,a0,0
   2f1e8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2f1ec:	01010793          	addi	a5,sp,16
   2f1f0:	00f50463          	beq	a0,a5,2f1f8 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x3d0>
   2f1f4:	abce70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2f1f8:	00040513          	addi	a0,s0,0
   2f1fc:	c94e70ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002f200 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)>:
{
   2f200:	fc010113          	addi	sp,sp,-64
   2f204:	02113c23          	sd	ra,56(sp)
   2f208:	02813823          	sd	s0,48(sp)
   2f20c:	02913423          	sd	s1,40(sp)
   2f210:	03213023          	sd	s2,32(sp)
   2f214:	00050413          	addi	s0,a0,0
        switch (v) {
   2f218:	01000793          	addi	a5,zero,16
   2f21c:	2eb7ec63          	bltu	a5,a1,2f514 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x314>
   2f220:	00259793          	slli	a5,a1,0x2
   2f224:	0000b717          	auipc	a4,0xb
   2f228:	bb870713          	addi	a4,a4,-1096 # 39ddc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x20fc>
   2f22c:	00e787b3          	add	a5,a5,a4
   2f230:	0007a783          	lw	a5,0(a5)
   2f234:	00e787b3          	add	a5,a5,a4
   2f238:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f23c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f240:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f244:	00000693          	addi	a3,zero,0
   2f248:	00009617          	auipc	a2,0x9
   2f24c:	4a660613          	addi	a2,a2,1190 # 386ee <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa0e>
   2f250:	00009597          	auipc	a1,0x9
   2f254:	49058593          	addi	a1,a1,1168 # 386e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa00>
   2f258:	00013317          	auipc	t1,0x13
   2f25c:	0a833303          	ld	t1,168(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f260:	000300e7          	jalr	ra,0(t1)
}
   2f264:	00040513          	addi	a0,s0,0
   2f268:	03813083          	ld	ra,56(sp)
   2f26c:	03013403          	ld	s0,48(sp)
   2f270:	02813483          	ld	s1,40(sp)
   2f274:	02013903          	ld	s2,32(sp)
   2f278:	04010113          	addi	sp,sp,64
   2f27c:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f280:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f284:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f288:	00000693          	addi	a3,zero,0
   2f28c:	00009617          	auipc	a2,0x9
   2f290:	47260613          	addi	a2,a2,1138 # 386fe <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa1e>
   2f294:	00009597          	auipc	a1,0x9
   2f298:	45c58593          	addi	a1,a1,1116 # 386f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa10>
   2f29c:	00013317          	auipc	t1,0x13
   2f2a0:	06433303          	ld	t1,100(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f2a4:	000300e7          	jalr	ra,0(t1)
   2f2a8:	fbdff06f          	jal	zero,2f264 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f2ac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f2b0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f2b4:	00000693          	addi	a3,zero,0
   2f2b8:	00009617          	auipc	a2,0x9
   2f2bc:	45c60613          	addi	a2,a2,1116 # 38714 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa34>
   2f2c0:	00009597          	auipc	a1,0x9
   2f2c4:	44058593          	addi	a1,a1,1088 # 38700 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa20>
   2f2c8:	00013317          	auipc	t1,0x13
   2f2cc:	03833303          	ld	t1,56(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f2d0:	000300e7          	jalr	ra,0(t1)
   2f2d4:	f91ff06f          	jal	zero,2f264 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f2d8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f2dc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f2e0:	00000693          	addi	a3,zero,0
   2f2e4:	00009617          	auipc	a2,0x9
   2f2e8:	44060613          	addi	a2,a2,1088 # 38724 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa44>
   2f2ec:	00009597          	auipc	a1,0x9
   2f2f0:	42c58593          	addi	a1,a1,1068 # 38718 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa38>
   2f2f4:	00013317          	auipc	t1,0x13
   2f2f8:	00c33303          	ld	t1,12(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f2fc:	000300e7          	jalr	ra,0(t1)
   2f300:	f65ff06f          	jal	zero,2f264 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f304:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f308:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f30c:	00000693          	addi	a3,zero,0
   2f310:	00009617          	auipc	a2,0x9
   2f314:	42560613          	addi	a2,a2,1061 # 38735 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa55>
   2f318:	00009597          	auipc	a1,0x9
   2f31c:	41058593          	addi	a1,a1,1040 # 38728 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa48>
   2f320:	00013317          	auipc	t1,0x13
   2f324:	fe033303          	ld	t1,-32(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f328:	000300e7          	jalr	ra,0(t1)
   2f32c:	f39ff06f          	jal	zero,2f264 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f330:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f334:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f338:	00000693          	addi	a3,zero,0
   2f33c:	00009617          	auipc	a2,0x9
   2f340:	40e60613          	addi	a2,a2,1038 # 3874a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa6a>
   2f344:	00009597          	auipc	a1,0x9
   2f348:	3f458593          	addi	a1,a1,1012 # 38738 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa58>
   2f34c:	00013317          	auipc	t1,0x13
   2f350:	fb433303          	ld	t1,-76(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f354:	000300e7          	jalr	ra,0(t1)
   2f358:	f0dff06f          	jal	zero,2f264 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f35c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f360:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f364:	00000693          	addi	a3,zero,0
   2f368:	00009617          	auipc	a2,0x9
   2f36c:	3f760613          	addi	a2,a2,1015 # 3875f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa7f>
   2f370:	00009597          	auipc	a1,0x9
   2f374:	3e058593          	addi	a1,a1,992 # 38750 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa70>
   2f378:	00013317          	auipc	t1,0x13
   2f37c:	f8833303          	ld	t1,-120(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f380:	000300e7          	jalr	ra,0(t1)
   2f384:	ee1ff06f          	jal	zero,2f264 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f388:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f38c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f390:	00000693          	addi	a3,zero,0
   2f394:	00009617          	auipc	a2,0x9
   2f398:	3e060613          	addi	a2,a2,992 # 38774 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa94>
   2f39c:	00009597          	auipc	a1,0x9
   2f3a0:	3c458593          	addi	a1,a1,964 # 38760 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa80>
   2f3a4:	00013317          	auipc	t1,0x13
   2f3a8:	f5c33303          	ld	t1,-164(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f3ac:	000300e7          	jalr	ra,0(t1)
   2f3b0:	eb5ff06f          	jal	zero,2f264 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f3b4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f3b8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f3bc:	00000693          	addi	a3,zero,0
   2f3c0:	00009617          	auipc	a2,0x9
   2f3c4:	3ce60613          	addi	a2,a2,974 # 3878e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xaae>
   2f3c8:	00009597          	auipc	a1,0x9
   2f3cc:	3b058593          	addi	a1,a1,944 # 38778 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa98>
   2f3d0:	00013317          	auipc	t1,0x13
   2f3d4:	f3033303          	ld	t1,-208(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f3d8:	000300e7          	jalr	ra,0(t1)
   2f3dc:	e89ff06f          	jal	zero,2f264 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f3e0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f3e4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f3e8:	00000693          	addi	a3,zero,0
   2f3ec:	00009617          	auipc	a2,0x9
   2f3f0:	3b960613          	addi	a2,a2,953 # 387a5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xac5>
   2f3f4:	00009597          	auipc	a1,0x9
   2f3f8:	39c58593          	addi	a1,a1,924 # 38790 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xab0>
   2f3fc:	00013317          	auipc	t1,0x13
   2f400:	f0433303          	ld	t1,-252(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f404:	000300e7          	jalr	ra,0(t1)
   2f408:	e5dff06f          	jal	zero,2f264 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f40c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f410:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f414:	00000693          	addi	a3,zero,0
   2f418:	00009617          	auipc	a2,0x9
   2f41c:	3a560613          	addi	a2,a2,933 # 387bd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xadd>
   2f420:	00009597          	auipc	a1,0x9
   2f424:	38858593          	addi	a1,a1,904 # 387a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xac8>
   2f428:	00013317          	auipc	t1,0x13
   2f42c:	ed833303          	ld	t1,-296(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f430:	000300e7          	jalr	ra,0(t1)
   2f434:	e31ff06f          	jal	zero,2f264 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f438:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f43c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f440:	00000693          	addi	a3,zero,0
   2f444:	00009617          	auipc	a2,0x9
   2f448:	38960613          	addi	a2,a2,905 # 387cd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xaed>
   2f44c:	00009597          	auipc	a1,0x9
   2f450:	37458593          	addi	a1,a1,884 # 387c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xae0>
   2f454:	00013317          	auipc	t1,0x13
   2f458:	eac33303          	ld	t1,-340(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f45c:	000300e7          	jalr	ra,0(t1)
   2f460:	e05ff06f          	jal	zero,2f264 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f464:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f468:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f46c:	00000693          	addi	a3,zero,0
   2f470:	00009617          	auipc	a2,0x9
   2f474:	37360613          	addi	a2,a2,883 # 387e3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb03>
   2f478:	00009597          	auipc	a1,0x9
   2f47c:	35858593          	addi	a1,a1,856 # 387d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xaf0>
   2f480:	00013317          	auipc	t1,0x13
   2f484:	e8033303          	ld	t1,-384(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f488:	000300e7          	jalr	ra,0(t1)
   2f48c:	dd9ff06f          	jal	zero,2f264 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f490:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f494:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f498:	00000693          	addi	a3,zero,0
   2f49c:	00009617          	auipc	a2,0x9
   2f4a0:	36160613          	addi	a2,a2,865 # 387fd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb1d>
   2f4a4:	00009597          	auipc	a1,0x9
   2f4a8:	34458593          	addi	a1,a1,836 # 387e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb08>
   2f4ac:	00013317          	auipc	t1,0x13
   2f4b0:	e5433303          	ld	t1,-428(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f4b4:	000300e7          	jalr	ra,0(t1)
   2f4b8:	dadff06f          	jal	zero,2f264 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f4bc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f4c0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f4c4:	00000693          	addi	a3,zero,0
   2f4c8:	00009617          	auipc	a2,0x9
   2f4cc:	34c60613          	addi	a2,a2,844 # 38814 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb34>
   2f4d0:	00009597          	auipc	a1,0x9
   2f4d4:	33058593          	addi	a1,a1,816 # 38800 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb20>
   2f4d8:	00013317          	auipc	t1,0x13
   2f4dc:	e2833303          	ld	t1,-472(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f4e0:	000300e7          	jalr	ra,0(t1)
   2f4e4:	d81ff06f          	jal	zero,2f264 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f4e8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f4ec:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f4f0:	00000693          	addi	a3,zero,0
   2f4f4:	00009617          	auipc	a2,0x9
   2f4f8:	32e60613          	addi	a2,a2,814 # 38822 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb42>
   2f4fc:	00009597          	auipc	a1,0x9
   2f500:	31c58593          	addi	a1,a1,796 # 38818 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb38>
   2f504:	00013317          	auipc	t1,0x13
   2f508:	dfc33303          	ld	t1,-516(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f50c:	000300e7          	jalr	ra,0(t1)
   2f510:	d55ff06f          	jal	zero,2f264 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
        return "(DW_ATE)0x" + to_hex((int)v);
   2f514:	00010493          	addi	s1,sp,0
   2f518:	00048513          	addi	a0,s1,0
   2f51c:	00013317          	auipc	t1,0x13
   2f520:	ef433303          	ld	t1,-268(t1) # 42410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfc4c>
   2f524:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2f528:	00a00713          	addi	a4,zero,10
   2f52c:	00009697          	auipc	a3,0x9
   2f530:	2fc68693          	addi	a3,a3,764 # 38828 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb48>
   2f534:	00000613          	addi	a2,zero,0
   2f538:	00000593          	addi	a1,zero,0
   2f53c:	00048513          	addi	a0,s1,0
   2f540:	8c0e70ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2f544:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f548:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2f54c:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2f550:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2f554:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2f558:	03278c63          	beq	a5,s2,2f590 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x390>
      { _M_dataplus._M_p = __p; }
   2f55c:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2f560:	0104b783          	ld	a5,16(s1)
   2f564:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2f568:	0084b783          	ld	a5,8(s1)
   2f56c:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2f570:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2f574:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2f578:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2f57c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2f580:	01010793          	addi	a5,sp,16
   2f584:	cef500e3          	beq	a0,a5,2f264 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2f588:	f29e60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2f58c:	cd9ff06f          	jal	zero,2f264 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2f590:	0084b603          	ld	a2,8(s1)
   2f594:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2f598:	fc0608e3          	beq	a2,zero,2f568 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x368>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2f59c:	00090593          	addi	a1,s2,0
   2f5a0:	fb1e60ef          	jal	ra,16550 <memcpy@plt>
   2f5a4:	fc5ff06f          	jal	zero,2f568 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x368>
      { return _M_dataplus._M_p; }
   2f5a8:	00050413          	addi	s0,a0,0
   2f5ac:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2f5b0:	01010793          	addi	a5,sp,16
   2f5b4:	00f50463          	beq	a0,a5,2f5bc <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x3bc>
   2f5b8:	ef9e60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2f5bc:	00040513          	addi	a0,s0,0
   2f5c0:	8d0e70ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002f5c4 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)>:
{
   2f5c4:	fc010113          	addi	sp,sp,-64
   2f5c8:	02113c23          	sd	ra,56(sp)
   2f5cc:	02813823          	sd	s0,48(sp)
   2f5d0:	02913423          	sd	s1,40(sp)
   2f5d4:	03213023          	sd	s2,32(sp)
   2f5d8:	00050413          	addi	s0,a0,0
        switch (v) {
   2f5dc:	01400793          	addi	a5,zero,20
   2f5e0:	3ab7e463          	bltu	a5,a1,2f988 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x3c4>
   2f5e4:	00259793          	slli	a5,a1,0x2
   2f5e8:	0000b717          	auipc	a4,0xb
   2f5ec:	83870713          	addi	a4,a4,-1992 # 39e20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2140>
   2f5f0:	00e787b3          	add	a5,a5,a4
   2f5f4:	0007a783          	lw	a5,0(a5)
   2f5f8:	00e787b3          	add	a5,a5,a4
   2f5fc:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f600:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f604:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f608:	00000693          	addi	a3,zero,0
   2f60c:	00009617          	auipc	a2,0x9
   2f610:	23760613          	addi	a2,a2,567 # 38843 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb63>
   2f614:	00009597          	auipc	a1,0x9
   2f618:	22458593          	addi	a1,a1,548 # 38838 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb58>
   2f61c:	00013317          	auipc	t1,0x13
   2f620:	ce433303          	ld	t1,-796(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f624:	000300e7          	jalr	ra,0(t1)
}
   2f628:	00040513          	addi	a0,s0,0
   2f62c:	03813083          	ld	ra,56(sp)
   2f630:	03013403          	ld	s0,48(sp)
   2f634:	02813483          	ld	s1,40(sp)
   2f638:	02013903          	ld	s2,32(sp)
   2f63c:	04010113          	addi	sp,sp,64
   2f640:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f644:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f648:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f64c:	00000693          	addi	a3,zero,0
   2f650:	00009617          	auipc	a2,0x9
   2f654:	20160613          	addi	a2,a2,513 # 38851 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb71>
   2f658:	00009597          	auipc	a1,0x9
   2f65c:	1f058593          	addi	a1,a1,496 # 38848 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb68>
   2f660:	00013317          	auipc	t1,0x13
   2f664:	ca033303          	ld	t1,-864(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f668:	000300e7          	jalr	ra,0(t1)
   2f66c:	fbdff06f          	jal	zero,2f628 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f670:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f674:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f678:	00000693          	addi	a3,zero,0
   2f67c:	00009617          	auipc	a2,0x9
   2f680:	1e960613          	addi	a2,a2,489 # 38865 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb85>
   2f684:	00009597          	auipc	a1,0x9
   2f688:	1d458593          	addi	a1,a1,468 # 38858 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb78>
   2f68c:	00013317          	auipc	t1,0x13
   2f690:	c7433303          	ld	t1,-908(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f694:	000300e7          	jalr	ra,0(t1)
   2f698:	f91ff06f          	jal	zero,2f628 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f69c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f6a0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f6a4:	00000693          	addi	a3,zero,0
   2f6a8:	00009617          	auipc	a2,0x9
   2f6ac:	1d360613          	addi	a2,a2,467 # 3887b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb9b>
   2f6b0:	00009597          	auipc	a1,0x9
   2f6b4:	1b858593          	addi	a1,a1,440 # 38868 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb88>
   2f6b8:	00013317          	auipc	t1,0x13
   2f6bc:	c4833303          	ld	t1,-952(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f6c0:	000300e7          	jalr	ra,0(t1)
   2f6c4:	f65ff06f          	jal	zero,2f628 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f6c8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f6cc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f6d0:	00000693          	addi	a3,zero,0
   2f6d4:	00009617          	auipc	a2,0x9
   2f6d8:	1bb60613          	addi	a2,a2,443 # 3888f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbaf>
   2f6dc:	00009597          	auipc	a1,0x9
   2f6e0:	1a458593          	addi	a1,a1,420 # 38880 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xba0>
   2f6e4:	00013317          	auipc	t1,0x13
   2f6e8:	c1c33303          	ld	t1,-996(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f6ec:	000300e7          	jalr	ra,0(t1)
   2f6f0:	f39ff06f          	jal	zero,2f628 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f6f4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f6f8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f6fc:	00000693          	addi	a3,zero,0
   2f700:	00009617          	auipc	a2,0x9
   2f704:	19f60613          	addi	a2,a2,415 # 3889f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbbf>
   2f708:	00009597          	auipc	a1,0x9
   2f70c:	18858593          	addi	a1,a1,392 # 38890 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbb0>
   2f710:	00013317          	auipc	t1,0x13
   2f714:	bf033303          	ld	t1,-1040(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f718:	000300e7          	jalr	ra,0(t1)
   2f71c:	f0dff06f          	jal	zero,2f628 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f720:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f724:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f728:	00000693          	addi	a3,zero,0
   2f72c:	00009617          	auipc	a2,0x9
   2f730:	18560613          	addi	a2,a2,389 # 388b1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbd1>
   2f734:	00009597          	auipc	a1,0x9
   2f738:	16c58593          	addi	a1,a1,364 # 388a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbc0>
   2f73c:	00013317          	auipc	t1,0x13
   2f740:	bc433303          	ld	t1,-1084(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f744:	000300e7          	jalr	ra,0(t1)
   2f748:	ee1ff06f          	jal	zero,2f628 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f74c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f750:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f754:	00000693          	addi	a3,zero,0
   2f758:	00009617          	auipc	a2,0x9
   2f75c:	17160613          	addi	a2,a2,369 # 388c9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   2f760:	00009597          	auipc	a1,0x9
   2f764:	15858593          	addi	a1,a1,344 # 388b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbd8>
   2f768:	00013317          	auipc	t1,0x13
   2f76c:	b9833303          	ld	t1,-1128(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f770:	000300e7          	jalr	ra,0(t1)
   2f774:	eb5ff06f          	jal	zero,2f628 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f778:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f77c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f780:	00000693          	addi	a3,zero,0
   2f784:	00009617          	auipc	a2,0x9
   2f788:	15c60613          	addi	a2,a2,348 # 388e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc00>
   2f78c:	00009597          	auipc	a1,0x9
   2f790:	14458593          	addi	a1,a1,324 # 388d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbf0>
   2f794:	00013317          	auipc	t1,0x13
   2f798:	b6c33303          	ld	t1,-1172(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f79c:	000300e7          	jalr	ra,0(t1)
   2f7a0:	e89ff06f          	jal	zero,2f628 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f7a4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f7a8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f7ac:	00000693          	addi	a3,zero,0
   2f7b0:	00009617          	auipc	a2,0x9
   2f7b4:	14760613          	addi	a2,a2,327 # 388f7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc17>
   2f7b8:	00009597          	auipc	a1,0x9
   2f7bc:	13058593          	addi	a1,a1,304 # 388e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc08>
   2f7c0:	00013317          	auipc	t1,0x13
   2f7c4:	b4033303          	ld	t1,-1216(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f7c8:	000300e7          	jalr	ra,0(t1)
   2f7cc:	e5dff06f          	jal	zero,2f628 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f7d0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f7d4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f7d8:	00000693          	addi	a3,zero,0
   2f7dc:	00009617          	auipc	a2,0x9
   2f7e0:	12860613          	addi	a2,a2,296 # 38904 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc24>
   2f7e4:	00009597          	auipc	a1,0x9
   2f7e8:	11458593          	addi	a1,a1,276 # 388f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc18>
   2f7ec:	00013317          	auipc	t1,0x13
   2f7f0:	b1433303          	ld	t1,-1260(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f7f4:	000300e7          	jalr	ra,0(t1)
   2f7f8:	e31ff06f          	jal	zero,2f628 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f7fc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f800:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f804:	00000693          	addi	a3,zero,0
   2f808:	00009617          	auipc	a2,0x9
   2f80c:	10b60613          	addi	a2,a2,267 # 38913 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc33>
   2f810:	00009597          	auipc	a1,0x9
   2f814:	0f858593          	addi	a1,a1,248 # 38908 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc28>
   2f818:	00013317          	auipc	t1,0x13
   2f81c:	ae833303          	ld	t1,-1304(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f820:	000300e7          	jalr	ra,0(t1)
   2f824:	e05ff06f          	jal	zero,2f628 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f828:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f82c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f830:	00000693          	addi	a3,zero,0
   2f834:	00009617          	auipc	a2,0x9
   2f838:	0f160613          	addi	a2,a2,241 # 38925 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc45>
   2f83c:	00009597          	auipc	a1,0x9
   2f840:	0dc58593          	addi	a1,a1,220 # 38918 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc38>
   2f844:	00013317          	auipc	t1,0x13
   2f848:	abc33303          	ld	t1,-1348(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f84c:	000300e7          	jalr	ra,0(t1)
   2f850:	dd9ff06f          	jal	zero,2f628 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f854:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f858:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f85c:	00000693          	addi	a3,zero,0
   2f860:	00009617          	auipc	a2,0x9
   2f864:	0d960613          	addi	a2,a2,217 # 38939 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc59>
   2f868:	00009597          	auipc	a1,0x9
   2f86c:	0c058593          	addi	a1,a1,192 # 38928 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc48>
   2f870:	00013317          	auipc	t1,0x13
   2f874:	a9033303          	ld	t1,-1392(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f878:	000300e7          	jalr	ra,0(t1)
   2f87c:	dadff06f          	jal	zero,2f628 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f880:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f884:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f888:	00000693          	addi	a3,zero,0
   2f88c:	00009617          	auipc	a2,0x9
   2f890:	0bf60613          	addi	a2,a2,191 # 3894b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc6b>
   2f894:	00009597          	auipc	a1,0x9
   2f898:	0ac58593          	addi	a1,a1,172 # 38940 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc60>
   2f89c:	00013317          	auipc	t1,0x13
   2f8a0:	a6433303          	ld	t1,-1436(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f8a4:	000300e7          	jalr	ra,0(t1)
   2f8a8:	d81ff06f          	jal	zero,2f628 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f8ac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f8b0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f8b4:	00000693          	addi	a3,zero,0
   2f8b8:	00009617          	auipc	a2,0x9
   2f8bc:	0a460613          	addi	a2,a2,164 # 3895c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc7c>
   2f8c0:	00009597          	auipc	a1,0x9
   2f8c4:	09058593          	addi	a1,a1,144 # 38950 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc70>
   2f8c8:	00013317          	auipc	t1,0x13
   2f8cc:	a3833303          	ld	t1,-1480(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f8d0:	000300e7          	jalr	ra,0(t1)
   2f8d4:	d55ff06f          	jal	zero,2f628 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f8d8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f8dc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f8e0:	00000693          	addi	a3,zero,0
   2f8e4:	00009617          	auipc	a2,0x9
   2f8e8:	09260613          	addi	a2,a2,146 # 38976 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc96>
   2f8ec:	00009597          	auipc	a1,0x9
   2f8f0:	07458593          	addi	a1,a1,116 # 38960 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc80>
   2f8f4:	00013317          	auipc	t1,0x13
   2f8f8:	a0c33303          	ld	t1,-1524(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f8fc:	000300e7          	jalr	ra,0(t1)
   2f900:	d29ff06f          	jal	zero,2f628 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f904:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f908:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f90c:	00000693          	addi	a3,zero,0
   2f910:	00009617          	auipc	a2,0x9
   2f914:	07360613          	addi	a2,a2,115 # 38983 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xca3>
   2f918:	00009597          	auipc	a1,0x9
   2f91c:	06058593          	addi	a1,a1,96 # 38978 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc98>
   2f920:	00013317          	auipc	t1,0x13
   2f924:	9e033303          	ld	t1,-1568(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f928:	000300e7          	jalr	ra,0(t1)
   2f92c:	cfdff06f          	jal	zero,2f628 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f930:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f934:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f938:	00000693          	addi	a3,zero,0
   2f93c:	00009617          	auipc	a2,0x9
   2f940:	05560613          	addi	a2,a2,85 # 38991 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcb1>
   2f944:	00009597          	auipc	a1,0x9
   2f948:	04458593          	addi	a1,a1,68 # 38988 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xca8>
   2f94c:	00013317          	auipc	t1,0x13
   2f950:	9b433303          	ld	t1,-1612(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f954:	000300e7          	jalr	ra,0(t1)
   2f958:	cd1ff06f          	jal	zero,2f628 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f95c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f960:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f964:	00000693          	addi	a3,zero,0
   2f968:	00009617          	auipc	a2,0x9
   2f96c:	03e60613          	addi	a2,a2,62 # 389a6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcc6>
   2f970:	00009597          	auipc	a1,0x9
   2f974:	02858593          	addi	a1,a1,40 # 38998 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcb8>
   2f978:	00013317          	auipc	t1,0x13
   2f97c:	98833303          	ld	t1,-1656(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2f980:	000300e7          	jalr	ra,0(t1)
   2f984:	ca5ff06f          	jal	zero,2f628 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
        return "(DW_LANG)0x" + to_hex((int)v);
   2f988:	00010493          	addi	s1,sp,0
   2f98c:	00048513          	addi	a0,s1,0
   2f990:	00013317          	auipc	t1,0x13
   2f994:	a8033303          	ld	t1,-1408(t1) # 42410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfc4c>
   2f998:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2f99c:	00b00713          	addi	a4,zero,11
   2f9a0:	00009697          	auipc	a3,0x9
   2f9a4:	00868693          	addi	a3,a3,8 # 389a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcc8>
   2f9a8:	00000613          	addi	a2,zero,0
   2f9ac:	00000593          	addi	a1,zero,0
   2f9b0:	00048513          	addi	a0,s1,0
   2f9b4:	c4de60ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2f9b8:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f9bc:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2f9c0:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2f9c4:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2f9c8:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2f9cc:	03278c63          	beq	a5,s2,2fa04 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x440>
      { _M_dataplus._M_p = __p; }
   2f9d0:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2f9d4:	0104b783          	ld	a5,16(s1)
   2f9d8:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2f9dc:	0084b783          	ld	a5,8(s1)
   2f9e0:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2f9e4:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2f9e8:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2f9ec:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2f9f0:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2f9f4:	01010793          	addi	a5,sp,16
   2f9f8:	c2f508e3          	beq	a0,a5,2f628 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2f9fc:	ab5e60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2fa00:	c29ff06f          	jal	zero,2f628 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2fa04:	0084b603          	ld	a2,8(s1)
   2fa08:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2fa0c:	fc0608e3          	beq	a2,zero,2f9dc <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x418>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2fa10:	00090593          	addi	a1,s2,0
   2fa14:	b3de60ef          	jal	ra,16550 <memcpy@plt>
   2fa18:	fc5ff06f          	jal	zero,2f9dc <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x418>
      { return _M_dataplus._M_p; }
   2fa1c:	00050413          	addi	s0,a0,0
   2fa20:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2fa24:	01010793          	addi	a5,sp,16
   2fa28:	00f50463          	beq	a0,a5,2fa30 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x46c>
   2fa2c:	a85e60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2fa30:	00040513          	addi	a0,s0,0
   2fa34:	c5de60ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002fa38 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)>:
{
   2fa38:	fc010113          	addi	sp,sp,-64
   2fa3c:	02113c23          	sd	ra,56(sp)
   2fa40:	02813823          	sd	s0,48(sp)
   2fa44:	02913423          	sd	s1,40(sp)
   2fa48:	03213023          	sd	s2,32(sp)
   2fa4c:	00050413          	addi	s0,a0,0
        switch (v) {
   2fa50:	02000793          	addi	a5,zero,32
   2fa54:	48b7e263          	bltu	a5,a1,2fed8 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a0>
   2fa58:	00259793          	slli	a5,a1,0x2
   2fa5c:	0000a717          	auipc	a4,0xa
   2fa60:	41870713          	addi	a4,a4,1048 # 39e74 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2194>
   2fa64:	00e787b3          	add	a5,a5,a4
   2fa68:	0007a783          	lw	a5,0(a5)
   2fa6c:	00e787b3          	add	a5,a5,a4
   2fa70:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fa74:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fa78:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fa7c:	00000693          	addi	a3,zero,0
   2fa80:	00009617          	auipc	a2,0x9
   2fa84:	f4460613          	addi	a2,a2,-188 # 389c4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xce4>
   2fa88:	00009597          	auipc	a1,0x9
   2fa8c:	f3058593          	addi	a1,a1,-208 # 389b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcd8>
   2fa90:	00013317          	auipc	t1,0x13
   2fa94:	87033303          	ld	t1,-1936(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fa98:	000300e7          	jalr	ra,0(t1)
}
   2fa9c:	00040513          	addi	a0,s0,0
   2faa0:	03813083          	ld	ra,56(sp)
   2faa4:	03013403          	ld	s0,48(sp)
   2faa8:	02813483          	ld	s1,40(sp)
   2faac:	02013903          	ld	s2,32(sp)
   2fab0:	04010113          	addi	sp,sp,64
   2fab4:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fab8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fabc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fac0:	00000693          	addi	a3,zero,0
   2fac4:	00009617          	auipc	a2,0x9
   2fac8:	f1260613          	addi	a2,a2,-238 # 389d6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcf6>
   2facc:	00009597          	auipc	a1,0x9
   2fad0:	efc58593          	addi	a1,a1,-260 # 389c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xce8>
   2fad4:	00013317          	auipc	t1,0x13
   2fad8:	82c33303          	ld	t1,-2004(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fadc:	000300e7          	jalr	ra,0(t1)
   2fae0:	fbdff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fae4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fae8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2faec:	00000693          	addi	a3,zero,0
   2faf0:	00009617          	auipc	a2,0x9
   2faf4:	ef660613          	addi	a2,a2,-266 # 389e6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd06>
   2faf8:	00009597          	auipc	a1,0x9
   2fafc:	ee058593          	addi	a1,a1,-288 # 389d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcf8>
   2fb00:	00013317          	auipc	t1,0x13
   2fb04:	80033303          	ld	t1,-2048(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fb08:	000300e7          	jalr	ra,0(t1)
   2fb0c:	f91ff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fb10:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fb14:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fb18:	00000693          	addi	a3,zero,0
   2fb1c:	00009617          	auipc	a2,0x9
   2fb20:	ed960613          	addi	a2,a2,-295 # 389f5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd15>
   2fb24:	00009597          	auipc	a1,0x9
   2fb28:	ec458593          	addi	a1,a1,-316 # 389e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd08>
   2fb2c:	00012317          	auipc	t1,0x12
   2fb30:	7d433303          	ld	t1,2004(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fb34:	000300e7          	jalr	ra,0(t1)
   2fb38:	f65ff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fb3c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fb40:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fb44:	00000693          	addi	a3,zero,0
   2fb48:	00009617          	auipc	a2,0x9
   2fb4c:	ebd60613          	addi	a2,a2,-323 # 38a05 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd25>
   2fb50:	00009597          	auipc	a1,0x9
   2fb54:	ea858593          	addi	a1,a1,-344 # 389f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd18>
   2fb58:	00012317          	auipc	t1,0x12
   2fb5c:	7a833303          	ld	t1,1960(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fb60:	000300e7          	jalr	ra,0(t1)
   2fb64:	f39ff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fb68:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fb6c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fb70:	00000693          	addi	a3,zero,0
   2fb74:	00009617          	auipc	a2,0x9
   2fb78:	ea160613          	addi	a2,a2,-351 # 38a15 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd35>
   2fb7c:	00009597          	auipc	a1,0x9
   2fb80:	e8c58593          	addi	a1,a1,-372 # 38a08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd28>
   2fb84:	00012317          	auipc	t1,0x12
   2fb88:	77c33303          	ld	t1,1916(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fb8c:	000300e7          	jalr	ra,0(t1)
   2fb90:	f0dff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fb94:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fb98:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fb9c:	00000693          	addi	a3,zero,0
   2fba0:	00009617          	auipc	a2,0x9
   2fba4:	e8660613          	addi	a2,a2,-378 # 38a26 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd46>
   2fba8:	00009597          	auipc	a1,0x9
   2fbac:	e7058593          	addi	a1,a1,-400 # 38a18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd38>
   2fbb0:	00012317          	auipc	t1,0x12
   2fbb4:	75033303          	ld	t1,1872(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fbb8:	000300e7          	jalr	ra,0(t1)
   2fbbc:	ee1ff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fbc0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fbc4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fbc8:	00000693          	addi	a3,zero,0
   2fbcc:	00009617          	auipc	a2,0x9
   2fbd0:	e6960613          	addi	a2,a2,-407 # 38a35 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd55>
   2fbd4:	00009597          	auipc	a1,0x9
   2fbd8:	e5458593          	addi	a1,a1,-428 # 38a28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd48>
   2fbdc:	00012317          	auipc	t1,0x12
   2fbe0:	72433303          	ld	t1,1828(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fbe4:	000300e7          	jalr	ra,0(t1)
   2fbe8:	eb5ff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fbec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fbf0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fbf4:	00000693          	addi	a3,zero,0
   2fbf8:	00009617          	auipc	a2,0x9
   2fbfc:	e4e60613          	addi	a2,a2,-434 # 38a46 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd66>
   2fc00:	00009597          	auipc	a1,0x9
   2fc04:	e3858593          	addi	a1,a1,-456 # 38a38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd58>
   2fc08:	00012317          	auipc	t1,0x12
   2fc0c:	6f833303          	ld	t1,1784(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fc10:	000300e7          	jalr	ra,0(t1)
   2fc14:	e89ff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fc18:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fc1c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fc20:	00000693          	addi	a3,zero,0
   2fc24:	00009617          	auipc	a2,0x9
   2fc28:	e3160613          	addi	a2,a2,-463 # 38a55 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd75>
   2fc2c:	00009597          	auipc	a1,0x9
   2fc30:	e1c58593          	addi	a1,a1,-484 # 38a48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd68>
   2fc34:	00012317          	auipc	t1,0x12
   2fc38:	6cc33303          	ld	t1,1740(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fc3c:	000300e7          	jalr	ra,0(t1)
   2fc40:	e5dff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fc44:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fc48:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fc4c:	00000693          	addi	a3,zero,0
   2fc50:	00009617          	auipc	a2,0x9
   2fc54:	e1460613          	addi	a2,a2,-492 # 38a64 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd84>
   2fc58:	00009597          	auipc	a1,0x9
   2fc5c:	e0058593          	addi	a1,a1,-512 # 38a58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd78>
   2fc60:	00012317          	auipc	t1,0x12
   2fc64:	6a033303          	ld	t1,1696(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fc68:	000300e7          	jalr	ra,0(t1)
   2fc6c:	e31ff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fc70:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fc74:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fc78:	00000693          	addi	a3,zero,0
   2fc7c:	00009617          	auipc	a2,0x9
   2fc80:	df960613          	addi	a2,a2,-519 # 38a75 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd95>
   2fc84:	00009597          	auipc	a1,0x9
   2fc88:	de458593          	addi	a1,a1,-540 # 38a68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd88>
   2fc8c:	00012317          	auipc	t1,0x12
   2fc90:	67433303          	ld	t1,1652(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fc94:	000300e7          	jalr	ra,0(t1)
   2fc98:	e05ff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fc9c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fca0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fca4:	00000693          	addi	a3,zero,0
   2fca8:	00009617          	auipc	a2,0x9
   2fcac:	ddc60613          	addi	a2,a2,-548 # 38a84 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xda4>
   2fcb0:	00009597          	auipc	a1,0x9
   2fcb4:	dc858593          	addi	a1,a1,-568 # 38a78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd98>
   2fcb8:	00012317          	auipc	t1,0x12
   2fcbc:	64833303          	ld	t1,1608(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fcc0:	000300e7          	jalr	ra,0(t1)
   2fcc4:	dd9ff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fcc8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fccc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fcd0:	00000693          	addi	a3,zero,0
   2fcd4:	00009617          	auipc	a2,0x9
   2fcd8:	dc160613          	addi	a2,a2,-575 # 38a95 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdb5>
   2fcdc:	00009597          	auipc	a1,0x9
   2fce0:	dac58593          	addi	a1,a1,-596 # 38a88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xda8>
   2fce4:	00012317          	auipc	t1,0x12
   2fce8:	61c33303          	ld	t1,1564(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fcec:	000300e7          	jalr	ra,0(t1)
   2fcf0:	dadff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fcf4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fcf8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fcfc:	00000693          	addi	a3,zero,0
   2fd00:	00009617          	auipc	a2,0x9
   2fd04:	da860613          	addi	a2,a2,-600 # 38aa8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdc8>
   2fd08:	00009597          	auipc	a1,0x9
   2fd0c:	d9058593          	addi	a1,a1,-624 # 38a98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdb8>
   2fd10:	00012317          	auipc	t1,0x12
   2fd14:	5f033303          	ld	t1,1520(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fd18:	000300e7          	jalr	ra,0(t1)
   2fd1c:	d81ff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fd20:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fd24:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fd28:	00000693          	addi	a3,zero,0
   2fd2c:	00009617          	auipc	a2,0x9
   2fd30:	d9060613          	addi	a2,a2,-624 # 38abc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xddc>
   2fd34:	00009597          	auipc	a1,0x9
   2fd38:	d7c58593          	addi	a1,a1,-644 # 38ab0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdd0>
   2fd3c:	00012317          	auipc	t1,0x12
   2fd40:	5c433303          	ld	t1,1476(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fd44:	000300e7          	jalr	ra,0(t1)
   2fd48:	d55ff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fd4c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fd50:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fd54:	00000693          	addi	a3,zero,0
   2fd58:	00009617          	auipc	a2,0x9
   2fd5c:	d7460613          	addi	a2,a2,-652 # 38acc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdec>
   2fd60:	00009597          	auipc	a1,0x9
   2fd64:	d6058593          	addi	a1,a1,-672 # 38ac0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xde0>
   2fd68:	00012317          	auipc	t1,0x12
   2fd6c:	59833303          	ld	t1,1432(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fd70:	000300e7          	jalr	ra,0(t1)
   2fd74:	d29ff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fd78:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fd7c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fd80:	00000693          	addi	a3,zero,0
   2fd84:	00009617          	auipc	a2,0x9
   2fd88:	d5860613          	addi	a2,a2,-680 # 38adc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdfc>
   2fd8c:	00009597          	auipc	a1,0x9
   2fd90:	d4458593          	addi	a1,a1,-700 # 38ad0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdf0>
   2fd94:	00012317          	auipc	t1,0x12
   2fd98:	56c33303          	ld	t1,1388(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fd9c:	000300e7          	jalr	ra,0(t1)
   2fda0:	cfdff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fda4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fda8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fdac:	00000693          	addi	a3,zero,0
   2fdb0:	00009617          	auipc	a2,0x9
   2fdb4:	d3c60613          	addi	a2,a2,-708 # 38aec <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe0c>
   2fdb8:	00009597          	auipc	a1,0x9
   2fdbc:	d2858593          	addi	a1,a1,-728 # 38ae0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe00>
   2fdc0:	00012317          	auipc	t1,0x12
   2fdc4:	54033303          	ld	t1,1344(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fdc8:	000300e7          	jalr	ra,0(t1)
   2fdcc:	cd1ff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fdd0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fdd4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fdd8:	00000693          	addi	a3,zero,0
   2fddc:	00009617          	auipc	a2,0x9
   2fde0:	d2560613          	addi	a2,a2,-731 # 38b01 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe21>
   2fde4:	00009597          	auipc	a1,0x9
   2fde8:	d0c58593          	addi	a1,a1,-756 # 38af0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe10>
   2fdec:	00012317          	auipc	t1,0x12
   2fdf0:	51433303          	ld	t1,1300(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fdf4:	000300e7          	jalr	ra,0(t1)
   2fdf8:	ca5ff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fdfc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fe00:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fe04:	00000693          	addi	a3,zero,0
   2fe08:	00009617          	auipc	a2,0x9
   2fe0c:	d1060613          	addi	a2,a2,-752 # 38b18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe38>
   2fe10:	00009597          	auipc	a1,0x9
   2fe14:	cf858593          	addi	a1,a1,-776 # 38b08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe28>
   2fe18:	00012317          	auipc	t1,0x12
   2fe1c:	4e833303          	ld	t1,1256(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fe20:	000300e7          	jalr	ra,0(t1)
   2fe24:	c79ff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fe28:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fe2c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fe30:	00000693          	addi	a3,zero,0
   2fe34:	00009617          	auipc	a2,0x9
   2fe38:	cfe60613          	addi	a2,a2,-770 # 38b32 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe52>
   2fe3c:	00009597          	auipc	a1,0x9
   2fe40:	ce458593          	addi	a1,a1,-796 # 38b20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe40>
   2fe44:	00012317          	auipc	t1,0x12
   2fe48:	4bc33303          	ld	t1,1212(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fe4c:	000300e7          	jalr	ra,0(t1)
   2fe50:	c4dff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fe54:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fe58:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fe5c:	00000693          	addi	a3,zero,0
   2fe60:	00009617          	auipc	a2,0x9
   2fe64:	ce760613          	addi	a2,a2,-793 # 38b47 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe67>
   2fe68:	00009597          	auipc	a1,0x9
   2fe6c:	cd058593          	addi	a1,a1,-816 # 38b38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe58>
   2fe70:	00012317          	auipc	t1,0x12
   2fe74:	49033303          	ld	t1,1168(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fe78:	000300e7          	jalr	ra,0(t1)
   2fe7c:	c21ff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fe80:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fe84:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fe88:	00000693          	addi	a3,zero,0
   2fe8c:	00009617          	auipc	a2,0x9
   2fe90:	cd060613          	addi	a2,a2,-816 # 38b5c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe7c>
   2fe94:	00009597          	auipc	a1,0x9
   2fe98:	cb458593          	addi	a1,a1,-844 # 38b48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe68>
   2fe9c:	00012317          	auipc	t1,0x12
   2fea0:	46433303          	ld	t1,1124(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fea4:	000300e7          	jalr	ra,0(t1)
   2fea8:	bf5ff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2feac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2feb0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2feb4:	00000693          	addi	a3,zero,0
   2feb8:	00009617          	auipc	a2,0x9
   2febc:	cb860613          	addi	a2,a2,-840 # 38b70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe90>
   2fec0:	00009597          	auipc	a1,0x9
   2fec4:	ca058593          	addi	a1,a1,-864 # 38b60 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe80>
   2fec8:	00012317          	auipc	t1,0x12
   2fecc:	43833303          	ld	t1,1080(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2fed0:	000300e7          	jalr	ra,0(t1)
   2fed4:	bc9ff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
        return "(DW_FORM)0x" + to_hex((int)v);
   2fed8:	00010493          	addi	s1,sp,0
   2fedc:	00048513          	addi	a0,s1,0
   2fee0:	00012317          	auipc	t1,0x12
   2fee4:	53033303          	ld	t1,1328(t1) # 42410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfc4c>
   2fee8:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2feec:	00b00713          	addi	a4,zero,11
   2fef0:	00009697          	auipc	a3,0x9
   2fef4:	c8868693          	addi	a3,a3,-888 # 38b78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe98>
   2fef8:	00000613          	addi	a2,zero,0
   2fefc:	00000593          	addi	a1,zero,0
   2ff00:	00048513          	addi	a0,s1,0
   2ff04:	efce60ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2ff08:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ff0c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2ff10:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2ff14:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2ff18:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2ff1c:	03278c63          	beq	a5,s2,2ff54 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x51c>
      { _M_dataplus._M_p = __p; }
   2ff20:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2ff24:	0104b783          	ld	a5,16(s1)
   2ff28:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2ff2c:	0084b783          	ld	a5,8(s1)
   2ff30:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2ff34:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2ff38:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2ff3c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2ff40:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2ff44:	01010793          	addi	a5,sp,16
   2ff48:	b4f50ae3          	beq	a0,a5,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2ff4c:	d64e60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2ff50:	b4dff06f          	jal	zero,2fa9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2ff54:	0084b603          	ld	a2,8(s1)
   2ff58:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2ff5c:	fc0608e3          	beq	a2,zero,2ff2c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4f4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2ff60:	00090593          	addi	a1,s2,0
   2ff64:	dece60ef          	jal	ra,16550 <memcpy@plt>
   2ff68:	fc5ff06f          	jal	zero,2ff2c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4f4>
      { return _M_dataplus._M_p; }
   2ff6c:	00050413          	addi	s0,a0,0
   2ff70:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2ff74:	01010793          	addi	a5,sp,16
   2ff78:	00f50463          	beq	a0,a5,2ff80 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x548>
   2ff7c:	d34e60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2ff80:	00040513          	addi	a0,s0,0
   2ff84:	f0ce60ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002ff88 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)>:
{
   2ff88:	fc010113          	addi	sp,sp,-64
   2ff8c:	02113c23          	sd	ra,56(sp)
   2ff90:	02813823          	sd	s0,48(sp)
   2ff94:	02913423          	sd	s1,40(sp)
   2ff98:	03213023          	sd	s2,32(sp)
   2ff9c:	00050413          	addi	s0,a0,0
        switch (v) {
   2ffa0:	04300793          	addi	a5,zero,67
   2ffa4:	28b7e4e3          	bltu	a5,a1,30a2c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0xaa4>
   2ffa8:	00259793          	slli	a5,a1,0x2
   2ffac:	0000a717          	auipc	a4,0xa
   2ffb0:	f4c70713          	addi	a4,a4,-180 # 39ef8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2218>
   2ffb4:	00e787b3          	add	a5,a5,a4
   2ffb8:	0007a783          	lw	a5,0(a5)
   2ffbc:	00e787b3          	add	a5,a5,a4
   2ffc0:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ffc4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ffc8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ffcc:	00000693          	addi	a3,zero,0
   2ffd0:	00009617          	auipc	a2,0x9
   2ffd4:	bc960613          	addi	a2,a2,-1079 # 38b99 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xeb9>
   2ffd8:	00009597          	auipc	a1,0x9
   2ffdc:	bb058593          	addi	a1,a1,-1104 # 38b88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xea8>
   2ffe0:	00012317          	auipc	t1,0x12
   2ffe4:	32033303          	ld	t1,800(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   2ffe8:	000300e7          	jalr	ra,0(t1)
}
   2ffec:	00040513          	addi	a0,s0,0
   2fff0:	03813083          	ld	ra,56(sp)
   2fff4:	03013403          	ld	s0,48(sp)
   2fff8:	02813483          	ld	s1,40(sp)
   2fffc:	02013903          	ld	s2,32(sp)
   30000:	04010113          	addi	sp,sp,64
   30004:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30008:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3000c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30010:	00000693          	addi	a3,zero,0
   30014:	00009617          	auipc	a2,0x9
   30018:	b9d60613          	addi	a2,a2,-1123 # 38bb1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xed1>
   3001c:	00009597          	auipc	a1,0x9
   30020:	b8458593          	addi	a1,a1,-1148 # 38ba0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xec0>
   30024:	00012317          	auipc	t1,0x12
   30028:	2dc33303          	ld	t1,732(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3002c:	000300e7          	jalr	ra,0(t1)
   30030:	fbdff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30034:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30038:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3003c:	00000693          	addi	a3,zero,0
   30040:	00009617          	auipc	a2,0x9
   30044:	b8a60613          	addi	a2,a2,-1142 # 38bca <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xeea>
   30048:	00009597          	auipc	a1,0x9
   3004c:	b7058593          	addi	a1,a1,-1168 # 38bb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xed8>
   30050:	00012317          	auipc	t1,0x12
   30054:	2b033303          	ld	t1,688(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30058:	000300e7          	jalr	ra,0(t1)
   3005c:	f91ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30060:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30064:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30068:	00000693          	addi	a3,zero,0
   3006c:	00009617          	auipc	a2,0x9
   30070:	b7b60613          	addi	a2,a2,-1157 # 38be7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf07>
   30074:	00009597          	auipc	a1,0x9
   30078:	b5c58593          	addi	a1,a1,-1188 # 38bd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xef0>
   3007c:	00012317          	auipc	t1,0x12
   30080:	28433303          	ld	t1,644(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30084:	000300e7          	jalr	ra,0(t1)
   30088:	f65ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3008c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30090:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30094:	00000693          	addi	a3,zero,0
   30098:	00009617          	auipc	a2,0x9
   3009c:	b6760613          	addi	a2,a2,-1177 # 38bff <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf1f>
   300a0:	00009597          	auipc	a1,0x9
   300a4:	b4858593          	addi	a1,a1,-1208 # 38be8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf08>
   300a8:	00012317          	auipc	t1,0x12
   300ac:	25833303          	ld	t1,600(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   300b0:	000300e7          	jalr	ra,0(t1)
   300b4:	f39ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   300b8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   300bc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   300c0:	00000693          	addi	a3,zero,0
   300c4:	00009617          	auipc	a2,0x9
   300c8:	b5760613          	addi	a2,a2,-1193 # 38c1b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf3b>
   300cc:	00009597          	auipc	a1,0x9
   300d0:	b3458593          	addi	a1,a1,-1228 # 38c00 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf20>
   300d4:	00012317          	auipc	t1,0x12
   300d8:	22c33303          	ld	t1,556(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   300dc:	000300e7          	jalr	ra,0(t1)
   300e0:	f0dff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   300e4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   300e8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   300ec:	00000693          	addi	a3,zero,0
   300f0:	00009617          	auipc	a2,0x9
   300f4:	b3c60613          	addi	a2,a2,-1220 # 38c2c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf4c>
   300f8:	00009597          	auipc	a1,0x9
   300fc:	b2858593          	addi	a1,a1,-1240 # 38c20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf40>
   30100:	00012317          	auipc	t1,0x12
   30104:	20033303          	ld	t1,512(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30108:	000300e7          	jalr	ra,0(t1)
   3010c:	ee1ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30110:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30114:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30118:	00000693          	addi	a3,zero,0
   3011c:	00009617          	auipc	a2,0x9
   30120:	b2860613          	addi	a2,a2,-1240 # 38c44 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf64>
   30124:	00009597          	auipc	a1,0x9
   30128:	b0c58593          	addi	a1,a1,-1268 # 38c30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf50>
   3012c:	00012317          	auipc	t1,0x12
   30130:	1d433303          	ld	t1,468(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30134:	000300e7          	jalr	ra,0(t1)
   30138:	eb5ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3013c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30140:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30144:	00000693          	addi	a3,zero,0
   30148:	00009617          	auipc	a2,0x9
   3014c:	b0d60613          	addi	a2,a2,-1267 # 38c55 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf75>
   30150:	00009597          	auipc	a1,0x9
   30154:	af858593          	addi	a1,a1,-1288 # 38c48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf68>
   30158:	00012317          	auipc	t1,0x12
   3015c:	1a833303          	ld	t1,424(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30160:	000300e7          	jalr	ra,0(t1)
   30164:	e89ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30168:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3016c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30170:	00000693          	addi	a3,zero,0
   30174:	00009617          	auipc	a2,0x9
   30178:	af760613          	addi	a2,a2,-1289 # 38c6b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf8b>
   3017c:	00009597          	auipc	a1,0x9
   30180:	adc58593          	addi	a1,a1,-1316 # 38c58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf78>
   30184:	00012317          	auipc	t1,0x12
   30188:	17c33303          	ld	t1,380(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3018c:	000300e7          	jalr	ra,0(t1)
   30190:	e5dff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30194:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30198:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3019c:	00000693          	addi	a3,zero,0
   301a0:	00009617          	auipc	a2,0x9
   301a4:	ae560613          	addi	a2,a2,-1307 # 38c85 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfa5>
   301a8:	00009597          	auipc	a1,0x9
   301ac:	ac858593          	addi	a1,a1,-1336 # 38c70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf90>
   301b0:	00012317          	auipc	t1,0x12
   301b4:	15033303          	ld	t1,336(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   301b8:	000300e7          	jalr	ra,0(t1)
   301bc:	e31ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   301c0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   301c4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   301c8:	00000693          	addi	a3,zero,0
   301cc:	00009617          	auipc	a2,0x9
   301d0:	acf60613          	addi	a2,a2,-1329 # 38c9b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfbb>
   301d4:	00009597          	auipc	a1,0x9
   301d8:	ab458593          	addi	a1,a1,-1356 # 38c88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfa8>
   301dc:	00012317          	auipc	t1,0x12
   301e0:	12433303          	ld	t1,292(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   301e4:	000300e7          	jalr	ra,0(t1)
   301e8:	e05ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   301ec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   301f0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   301f4:	00000693          	addi	a3,zero,0
   301f8:	00009617          	auipc	a2,0x9
   301fc:	aba60613          	addi	a2,a2,-1350 # 38cb2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfd2>
   30200:	00009597          	auipc	a1,0x9
   30204:	aa058593          	addi	a1,a1,-1376 # 38ca0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfc0>
   30208:	00012317          	auipc	t1,0x12
   3020c:	0f833303          	ld	t1,248(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30210:	000300e7          	jalr	ra,0(t1)
   30214:	dd9ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30218:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3021c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30220:	00000693          	addi	a3,zero,0
   30224:	00009617          	auipc	a2,0x9
   30228:	aa960613          	addi	a2,a2,-1367 # 38ccd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfed>
   3022c:	00009597          	auipc	a1,0x9
   30230:	a8c58593          	addi	a1,a1,-1396 # 38cb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfd8>
   30234:	00012317          	auipc	t1,0x12
   30238:	0cc33303          	ld	t1,204(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3023c:	000300e7          	jalr	ra,0(t1)
   30240:	dadff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30244:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30248:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3024c:	00000693          	addi	a3,zero,0
   30250:	00009617          	auipc	a2,0x9
   30254:	a9660613          	addi	a2,a2,-1386 # 38ce6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1006>
   30258:	00009597          	auipc	a1,0x9
   3025c:	a7858593          	addi	a1,a1,-1416 # 38cd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xff0>
   30260:	00012317          	auipc	t1,0x12
   30264:	0a033303          	ld	t1,160(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30268:	000300e7          	jalr	ra,0(t1)
   3026c:	d81ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30270:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30274:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30278:	00000693          	addi	a3,zero,0
   3027c:	00009617          	auipc	a2,0x9
   30280:	a7a60613          	addi	a2,a2,-1414 # 38cf6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1016>
   30284:	00009597          	auipc	a1,0x9
   30288:	a6458593          	addi	a1,a1,-1436 # 38ce8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1008>
   3028c:	00012317          	auipc	t1,0x12
   30290:	07433303          	ld	t1,116(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30294:	000300e7          	jalr	ra,0(t1)
   30298:	d55ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3029c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   302a0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   302a4:	00000693          	addi	a3,zero,0
   302a8:	00009617          	auipc	a2,0x9
   302ac:	a6160613          	addi	a2,a2,-1439 # 38d09 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1029>
   302b0:	00009597          	auipc	a1,0x9
   302b4:	a4858593          	addi	a1,a1,-1464 # 38cf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1018>
   302b8:	00012317          	auipc	t1,0x12
   302bc:	04833303          	ld	t1,72(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   302c0:	000300e7          	jalr	ra,0(t1)
   302c4:	d29ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   302c8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   302cc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   302d0:	00000693          	addi	a3,zero,0
   302d4:	00009617          	auipc	a2,0x9
   302d8:	a5960613          	addi	a2,a2,-1447 # 38d2d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x104d>
   302dc:	00009597          	auipc	a1,0x9
   302e0:	a3458593          	addi	a1,a1,-1484 # 38d10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1030>
   302e4:	00012317          	auipc	t1,0x12
   302e8:	01c33303          	ld	t1,28(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   302ec:	000300e7          	jalr	ra,0(t1)
   302f0:	cfdff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   302f4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   302f8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   302fc:	00000693          	addi	a3,zero,0
   30300:	00009617          	auipc	a2,0x9
   30304:	a3e60613          	addi	a2,a2,-1474 # 38d3e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x105e>
   30308:	00009597          	auipc	a1,0x9
   3030c:	a2858593          	addi	a1,a1,-1496 # 38d30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1050>
   30310:	00012317          	auipc	t1,0x12
   30314:	ff033303          	ld	t1,-16(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30318:	000300e7          	jalr	ra,0(t1)
   3031c:	cd1ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30320:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30324:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30328:	00000693          	addi	a3,zero,0
   3032c:	00009617          	auipc	a2,0x9
   30330:	a2760613          	addi	a2,a2,-1497 # 38d53 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1073>
   30334:	00009597          	auipc	a1,0x9
   30338:	a0c58593          	addi	a1,a1,-1524 # 38d40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1060>
   3033c:	00012317          	auipc	t1,0x12
   30340:	fc433303          	ld	t1,-60(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30344:	000300e7          	jalr	ra,0(t1)
   30348:	ca5ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3034c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30350:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30354:	00000693          	addi	a3,zero,0
   30358:	00009617          	auipc	a2,0x9
   3035c:	a1760613          	addi	a2,a2,-1513 # 38d6f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x108f>
   30360:	00009597          	auipc	a1,0x9
   30364:	9f858593          	addi	a1,a1,-1544 # 38d58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1078>
   30368:	00012317          	auipc	t1,0x12
   3036c:	f9833303          	ld	t1,-104(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30370:	000300e7          	jalr	ra,0(t1)
   30374:	c79ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30378:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3037c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30380:	00000693          	addi	a3,zero,0
   30384:	00009617          	auipc	a2,0x9
   30388:	9fe60613          	addi	a2,a2,-1538 # 38d82 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10a2>
   3038c:	00009597          	auipc	a1,0x9
   30390:	9e458593          	addi	a1,a1,-1564 # 38d70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1090>
   30394:	00012317          	auipc	t1,0x12
   30398:	f6c33303          	ld	t1,-148(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3039c:	000300e7          	jalr	ra,0(t1)
   303a0:	c4dff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   303a4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   303a8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   303ac:	00000693          	addi	a3,zero,0
   303b0:	00009617          	auipc	a2,0x9
   303b4:	9f160613          	addi	a2,a2,-1551 # 38da1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10c1>
   303b8:	00009597          	auipc	a1,0x9
   303bc:	9d058593          	addi	a1,a1,-1584 # 38d88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10a8>
   303c0:	00012317          	auipc	t1,0x12
   303c4:	f4033303          	ld	t1,-192(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   303c8:	000300e7          	jalr	ra,0(t1)
   303cc:	c21ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   303d0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   303d4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   303d8:	00000693          	addi	a3,zero,0
   303dc:	00009617          	auipc	a2,0x9
   303e0:	9d960613          	addi	a2,a2,-1575 # 38db5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10d5>
   303e4:	00009597          	auipc	a1,0x9
   303e8:	9c458593          	addi	a1,a1,-1596 # 38da8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10c8>
   303ec:	00012317          	auipc	t1,0x12
   303f0:	f1433303          	ld	t1,-236(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   303f4:	000300e7          	jalr	ra,0(t1)
   303f8:	bf5ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   303fc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30400:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30404:	00000693          	addi	a3,zero,0
   30408:	00009617          	auipc	a2,0x9
   3040c:	9c960613          	addi	a2,a2,-1591 # 38dd1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10f1>
   30410:	00009597          	auipc	a1,0x9
   30414:	9a858593          	addi	a1,a1,-1624 # 38db8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10d8>
   30418:	00012317          	auipc	t1,0x12
   3041c:	ee833303          	ld	t1,-280(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30420:	000300e7          	jalr	ra,0(t1)
   30424:	bc9ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30428:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3042c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30430:	00000693          	addi	a3,zero,0
   30434:	00009617          	auipc	a2,0x9
   30438:	9b360613          	addi	a2,a2,-1613 # 38de7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1107>
   3043c:	00009597          	auipc	a1,0x9
   30440:	99c58593          	addi	a1,a1,-1636 # 38dd8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10f8>
   30444:	00012317          	auipc	t1,0x12
   30448:	ebc33303          	ld	t1,-324(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3044c:	000300e7          	jalr	ra,0(t1)
   30450:	b9dff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30454:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30458:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3045c:	00000693          	addi	a3,zero,0
   30460:	00009617          	auipc	a2,0x9
   30464:	99c60613          	addi	a2,a2,-1636 # 38dfc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x111c>
   30468:	00009597          	auipc	a1,0x9
   3046c:	98058593          	addi	a1,a1,-1664 # 38de8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1108>
   30470:	00012317          	auipc	t1,0x12
   30474:	e9033303          	ld	t1,-368(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30478:	000300e7          	jalr	ra,0(t1)
   3047c:	b71ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30480:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30484:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30488:	00000693          	addi	a3,zero,0
   3048c:	00009617          	auipc	a2,0x9
   30490:	98460613          	addi	a2,a2,-1660 # 38e10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1130>
   30494:	00009597          	auipc	a1,0x9
   30498:	96c58593          	addi	a1,a1,-1684 # 38e00 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1120>
   3049c:	00012317          	auipc	t1,0x12
   304a0:	e6433303          	ld	t1,-412(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   304a4:	000300e7          	jalr	ra,0(t1)
   304a8:	b45ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   304ac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   304b0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   304b4:	00000693          	addi	a3,zero,0
   304b8:	00009617          	auipc	a2,0x9
   304bc:	97960613          	addi	a2,a2,-1671 # 38e31 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1151>
   304c0:	00009597          	auipc	a1,0x9
   304c4:	95858593          	addi	a1,a1,-1704 # 38e18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1138>
   304c8:	00012317          	auipc	t1,0x12
   304cc:	e3833303          	ld	t1,-456(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   304d0:	000300e7          	jalr	ra,0(t1)
   304d4:	b19ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   304d8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   304dc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   304e0:	00000693          	addi	a3,zero,0
   304e4:	00009617          	auipc	a2,0x9
   304e8:	96460613          	addi	a2,a2,-1692 # 38e48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1168>
   304ec:	00009597          	auipc	a1,0x9
   304f0:	94c58593          	addi	a1,a1,-1716 # 38e38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1158>
   304f4:	00012317          	auipc	t1,0x12
   304f8:	e0c33303          	ld	t1,-500(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   304fc:	000300e7          	jalr	ra,0(t1)
   30500:	aedff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30504:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30508:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3050c:	00000693          	addi	a3,zero,0
   30510:	00009617          	auipc	a2,0x9
   30514:	95260613          	addi	a2,a2,-1710 # 38e62 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1182>
   30518:	00009597          	auipc	a1,0x9
   3051c:	93858593          	addi	a1,a1,-1736 # 38e50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1170>
   30520:	00012317          	auipc	t1,0x12
   30524:	de033303          	ld	t1,-544(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30528:	000300e7          	jalr	ra,0(t1)
   3052c:	ac1ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30530:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30534:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30538:	00000693          	addi	a3,zero,0
   3053c:	00009617          	auipc	a2,0x9
   30540:	93d60613          	addi	a2,a2,-1731 # 38e79 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1199>
   30544:	00009597          	auipc	a1,0x9
   30548:	92458593          	addi	a1,a1,-1756 # 38e68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1188>
   3054c:	00012317          	auipc	t1,0x12
   30550:	db433303          	ld	t1,-588(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30554:	000300e7          	jalr	ra,0(t1)
   30558:	a95ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3055c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30560:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30564:	00000693          	addi	a3,zero,0
   30568:	00009617          	auipc	a2,0x9
   3056c:	92760613          	addi	a2,a2,-1753 # 38e8f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11af>
   30570:	00009597          	auipc	a1,0x9
   30574:	91058593          	addi	a1,a1,-1776 # 38e80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11a0>
   30578:	00012317          	auipc	t1,0x12
   3057c:	d8833303          	ld	t1,-632(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30580:	000300e7          	jalr	ra,0(t1)
   30584:	a69ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30588:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3058c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30590:	00000693          	addi	a3,zero,0
   30594:	00009617          	auipc	a2,0x9
   30598:	90d60613          	addi	a2,a2,-1779 # 38ea1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11c1>
   3059c:	00009597          	auipc	a1,0x9
   305a0:	8f458593          	addi	a1,a1,-1804 # 38e90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11b0>
   305a4:	00012317          	auipc	t1,0x12
   305a8:	d5c33303          	ld	t1,-676(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   305ac:	000300e7          	jalr	ra,0(t1)
   305b0:	a3dff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   305b4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   305b8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   305bc:	00000693          	addi	a3,zero,0
   305c0:	00009617          	auipc	a2,0x9
   305c4:	8f860613          	addi	a2,a2,-1800 # 38eb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11d8>
   305c8:	00009597          	auipc	a1,0x9
   305cc:	8e058593          	addi	a1,a1,-1824 # 38ea8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11c8>
   305d0:	00012317          	auipc	t1,0x12
   305d4:	d3033303          	ld	t1,-720(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   305d8:	000300e7          	jalr	ra,0(t1)
   305dc:	a11ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   305e0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   305e4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   305e8:	00000693          	addi	a3,zero,0
   305ec:	00009617          	auipc	a2,0x9
   305f0:	8e160613          	addi	a2,a2,-1823 # 38ecd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11ed>
   305f4:	00009597          	auipc	a1,0x9
   305f8:	8cc58593          	addi	a1,a1,-1844 # 38ec0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11e0>
   305fc:	00012317          	auipc	t1,0x12
   30600:	d0433303          	ld	t1,-764(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30604:	000300e7          	jalr	ra,0(t1)
   30608:	9e5ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3060c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30610:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30614:	00000693          	addi	a3,zero,0
   30618:	00009617          	auipc	a2,0x9
   3061c:	8c760613          	addi	a2,a2,-1849 # 38edf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11ff>
   30620:	00009597          	auipc	a1,0x9
   30624:	8b058593          	addi	a1,a1,-1872 # 38ed0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11f0>
   30628:	00012317          	auipc	t1,0x12
   3062c:	cd833303          	ld	t1,-808(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30630:	000300e7          	jalr	ra,0(t1)
   30634:	9b9ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30638:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3063c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30640:	00000693          	addi	a3,zero,0
   30644:	00009617          	auipc	a2,0x9
   30648:	8b060613          	addi	a2,a2,-1872 # 38ef4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1214>
   3064c:	00009597          	auipc	a1,0x9
   30650:	89458593          	addi	a1,a1,-1900 # 38ee0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1200>
   30654:	00012317          	auipc	t1,0x12
   30658:	cac33303          	ld	t1,-852(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3065c:	000300e7          	jalr	ra,0(t1)
   30660:	98dff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30664:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30668:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3066c:	00000693          	addi	a3,zero,0
   30670:	00009617          	auipc	a2,0x9
   30674:	89a60613          	addi	a2,a2,-1894 # 38f0a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x122a>
   30678:	00009597          	auipc	a1,0x9
   3067c:	88058593          	addi	a1,a1,-1920 # 38ef8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1218>
   30680:	00012317          	auipc	t1,0x12
   30684:	c8033303          	ld	t1,-896(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30688:	000300e7          	jalr	ra,0(t1)
   3068c:	961ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30690:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30694:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30698:	00000693          	addi	a3,zero,0
   3069c:	00009617          	auipc	a2,0x9
   306a0:	88560613          	addi	a2,a2,-1915 # 38f21 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1241>
   306a4:	00009597          	auipc	a1,0x9
   306a8:	86c58593          	addi	a1,a1,-1940 # 38f10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1230>
   306ac:	00012317          	auipc	t1,0x12
   306b0:	c5433303          	ld	t1,-940(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   306b4:	000300e7          	jalr	ra,0(t1)
   306b8:	935ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   306bc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   306c0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   306c4:	00000693          	addi	a3,zero,0
   306c8:	00009617          	auipc	a2,0x9
   306cc:	87e60613          	addi	a2,a2,-1922 # 38f46 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1266>
   306d0:	00009597          	auipc	a1,0x9
   306d4:	85858593          	addi	a1,a1,-1960 # 38f28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1248>
   306d8:	00012317          	auipc	t1,0x12
   306dc:	c2833303          	ld	t1,-984(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   306e0:	000300e7          	jalr	ra,0(t1)
   306e4:	909ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   306e8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   306ec:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   306f0:	00000693          	addi	a3,zero,0
   306f4:	00009617          	auipc	a2,0x9
   306f8:	87360613          	addi	a2,a2,-1933 # 38f67 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1287>
   306fc:	00009597          	auipc	a1,0x9
   30700:	84c58593          	addi	a1,a1,-1972 # 38f48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1268>
   30704:	00012317          	auipc	t1,0x12
   30708:	bfc33303          	ld	t1,-1028(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3070c:	000300e7          	jalr	ra,0(t1)
   30710:	8ddff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30714:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30718:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3071c:	00000693          	addi	a3,zero,0
   30720:	00009617          	auipc	a2,0x9
   30724:	85a60613          	addi	a2,a2,-1958 # 38f7a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x129a>
   30728:	00009597          	auipc	a1,0x9
   3072c:	84058593          	addi	a1,a1,-1984 # 38f68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1288>
   30730:	00012317          	auipc	t1,0x12
   30734:	bd033303          	ld	t1,-1072(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30738:	000300e7          	jalr	ra,0(t1)
   3073c:	8b1ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30740:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30744:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30748:	00000693          	addi	a3,zero,0
   3074c:	00009617          	auipc	a2,0x9
   30750:	84460613          	addi	a2,a2,-1980 # 38f90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12b0>
   30754:	00009597          	auipc	a1,0x9
   30758:	82c58593          	addi	a1,a1,-2004 # 38f80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12a0>
   3075c:	00012317          	auipc	t1,0x12
   30760:	ba433303          	ld	t1,-1116(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30764:	000300e7          	jalr	ra,0(t1)
   30768:	885ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3076c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30770:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30774:	00000693          	addi	a3,zero,0
   30778:	00009617          	auipc	a2,0x9
   3077c:	83360613          	addi	a2,a2,-1997 # 38fab <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12cb>
   30780:	00009597          	auipc	a1,0x9
   30784:	81858593          	addi	a1,a1,-2024 # 38f98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12b8>
   30788:	00012317          	auipc	t1,0x12
   3078c:	b7833303          	ld	t1,-1160(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30790:	000300e7          	jalr	ra,0(t1)
   30794:	859ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30798:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3079c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   307a0:	00000693          	addi	a3,zero,0
   307a4:	00009617          	auipc	a2,0x9
   307a8:	81b60613          	addi	a2,a2,-2021 # 38fbf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12df>
   307ac:	00009597          	auipc	a1,0x9
   307b0:	80458593          	addi	a1,a1,-2044 # 38fb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12d0>
   307b4:	00012317          	auipc	t1,0x12
   307b8:	b4c33303          	ld	t1,-1204(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   307bc:	000300e7          	jalr	ra,0(t1)
   307c0:	82dff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   307c4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   307c8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   307cc:	00000693          	addi	a3,zero,0
   307d0:	00009617          	auipc	a2,0x9
   307d4:	80460613          	addi	a2,a2,-2044 # 38fd4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12f4>
   307d8:	00008597          	auipc	a1,0x8
   307dc:	7e858593          	addi	a1,a1,2024 # 38fc0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12e0>
   307e0:	00012317          	auipc	t1,0x12
   307e4:	b2033303          	ld	t1,-1248(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   307e8:	000300e7          	jalr	ra,0(t1)
   307ec:	801ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   307f0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   307f4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   307f8:	00000693          	addi	a3,zero,0
   307fc:	00008617          	auipc	a2,0x8
   30800:	7f260613          	addi	a2,a2,2034 # 38fee <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x130e>
   30804:	00008597          	auipc	a1,0x8
   30808:	7d458593          	addi	a1,a1,2004 # 38fd8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12f8>
   3080c:	00012317          	auipc	t1,0x12
   30810:	af433303          	ld	t1,-1292(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30814:	000300e7          	jalr	ra,0(t1)
   30818:	fd4ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3081c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30820:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30824:	00000693          	addi	a3,zero,0
   30828:	00008617          	auipc	a2,0x8
   3082c:	7dc60613          	addi	a2,a2,2012 # 39004 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1324>
   30830:	00008597          	auipc	a1,0x8
   30834:	7c058593          	addi	a1,a1,1984 # 38ff0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1310>
   30838:	00012317          	auipc	t1,0x12
   3083c:	ac833303          	ld	t1,-1336(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30840:	000300e7          	jalr	ra,0(t1)
   30844:	fa8ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30848:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3084c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30850:	00000693          	addi	a3,zero,0
   30854:	00008617          	auipc	a2,0x8
   30858:	7c960613          	addi	a2,a2,1993 # 3901d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x133d>
   3085c:	00008597          	auipc	a1,0x8
   30860:	7ac58593          	addi	a1,a1,1964 # 39008 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1328>
   30864:	00012317          	auipc	t1,0x12
   30868:	a9c33303          	ld	t1,-1380(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3086c:	000300e7          	jalr	ra,0(t1)
   30870:	f7cff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30874:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30878:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3087c:	00000693          	addi	a3,zero,0
   30880:	00008617          	auipc	a2,0x8
   30884:	7b060613          	addi	a2,a2,1968 # 39030 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1350>
   30888:	00008597          	auipc	a1,0x8
   3088c:	79858593          	addi	a1,a1,1944 # 39020 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1340>
   30890:	00012317          	auipc	t1,0x12
   30894:	a7033303          	ld	t1,-1424(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30898:	000300e7          	jalr	ra,0(t1)
   3089c:	f50ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   308a0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   308a4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   308a8:	00000693          	addi	a3,zero,0
   308ac:	00008617          	auipc	a2,0x8
   308b0:	7a260613          	addi	a2,a2,1954 # 3904e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x136e>
   308b4:	00008597          	auipc	a1,0x8
   308b8:	78458593          	addi	a1,a1,1924 # 39038 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1358>
   308bc:	00012317          	auipc	t1,0x12
   308c0:	a4433303          	ld	t1,-1468(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   308c4:	000300e7          	jalr	ra,0(t1)
   308c8:	f24ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   308cc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   308d0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   308d4:	00000693          	addi	a3,zero,0
   308d8:	00008617          	auipc	a2,0x8
   308dc:	78f60613          	addi	a2,a2,1935 # 39067 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1387>
   308e0:	00008597          	auipc	a1,0x8
   308e4:	77058593          	addi	a1,a1,1904 # 39050 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1370>
   308e8:	00012317          	auipc	t1,0x12
   308ec:	a1833303          	ld	t1,-1512(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   308f0:	000300e7          	jalr	ra,0(t1)
   308f4:	ef8ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   308f8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   308fc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30900:	00000693          	addi	a3,zero,0
   30904:	00008617          	auipc	a2,0x8
   30908:	77760613          	addi	a2,a2,1911 # 3907b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x139b>
   3090c:	00008597          	auipc	a1,0x8
   30910:	75c58593          	addi	a1,a1,1884 # 39068 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1388>
   30914:	00012317          	auipc	t1,0x12
   30918:	9ec33303          	ld	t1,-1556(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3091c:	000300e7          	jalr	ra,0(t1)
   30920:	eccff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30924:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30928:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3092c:	00000693          	addi	a3,zero,0
   30930:	00008617          	auipc	a2,0x8
   30934:	76460613          	addi	a2,a2,1892 # 39094 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13b4>
   30938:	00008597          	auipc	a1,0x8
   3093c:	74858593          	addi	a1,a1,1864 # 39080 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13a0>
   30940:	00012317          	auipc	t1,0x12
   30944:	9c033303          	ld	t1,-1600(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30948:	000300e7          	jalr	ra,0(t1)
   3094c:	ea0ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30950:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30954:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30958:	00000693          	addi	a3,zero,0
   3095c:	00008617          	auipc	a2,0x8
   30960:	74c60613          	addi	a2,a2,1868 # 390a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13c8>
   30964:	00008597          	auipc	a1,0x8
   30968:	73458593          	addi	a1,a1,1844 # 39098 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13b8>
   3096c:	00012317          	auipc	t1,0x12
   30970:	99433303          	ld	t1,-1644(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30974:	000300e7          	jalr	ra,0(t1)
   30978:	e74ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3097c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30980:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30984:	00000693          	addi	a3,zero,0
   30988:	00008617          	auipc	a2,0x8
   3098c:	73a60613          	addi	a2,a2,1850 # 390c2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13e2>
   30990:	00008597          	auipc	a1,0x8
   30994:	72058593          	addi	a1,a1,1824 # 390b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13d0>
   30998:	00012317          	auipc	t1,0x12
   3099c:	96833303          	ld	t1,-1688(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   309a0:	000300e7          	jalr	ra,0(t1)
   309a4:	e48ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   309a8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   309ac:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   309b0:	00000693          	addi	a3,zero,0
   309b4:	00008617          	auipc	a2,0x8
   309b8:	72460613          	addi	a2,a2,1828 # 390d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13f8>
   309bc:	00008597          	auipc	a1,0x8
   309c0:	70c58593          	addi	a1,a1,1804 # 390c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13e8>
   309c4:	00012317          	auipc	t1,0x12
   309c8:	93c33303          	ld	t1,-1732(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   309cc:	000300e7          	jalr	ra,0(t1)
   309d0:	e1cff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   309d4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   309d8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   309dc:	00000693          	addi	a3,zero,0
   309e0:	00008617          	auipc	a2,0x8
   309e4:	71c60613          	addi	a2,a2,1820 # 390fc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x141c>
   309e8:	00008597          	auipc	a1,0x8
   309ec:	6f858593          	addi	a1,a1,1784 # 390e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1400>
   309f0:	00012317          	auipc	t1,0x12
   309f4:	91033303          	ld	t1,-1776(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   309f8:	000300e7          	jalr	ra,0(t1)
   309fc:	df0ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30a00:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30a04:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30a08:	00000693          	addi	a3,zero,0
   30a0c:	00008617          	auipc	a2,0x8
   30a10:	70960613          	addi	a2,a2,1801 # 39115 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1435>
   30a14:	00008597          	auipc	a1,0x8
   30a18:	6ec58593          	addi	a1,a1,1772 # 39100 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1420>
   30a1c:	00012317          	auipc	t1,0x12
   30a20:	8e433303          	ld	t1,-1820(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30a24:	000300e7          	jalr	ra,0(t1)
   30a28:	dc4ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
        return "(DW_TAG)0x" + to_hex((int)v);
   30a2c:	00010493          	addi	s1,sp,0
   30a30:	00048513          	addi	a0,s1,0
   30a34:	00012317          	auipc	t1,0x12
   30a38:	9dc33303          	ld	t1,-1572(t1) # 42410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfc4c>
   30a3c:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   30a40:	00a00713          	addi	a4,zero,10
   30a44:	00008697          	auipc	a3,0x8
   30a48:	6d468693          	addi	a3,a3,1748 # 39118 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1438>
   30a4c:	00000613          	addi	a2,zero,0
   30a50:	00000593          	addi	a1,zero,0
   30a54:	00048513          	addi	a0,s1,0
   30a58:	ba9e50ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   30a5c:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30a60:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   30a64:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   30a68:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   30a6c:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   30a70:	03278c63          	beq	a5,s2,30aa8 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0xb20>
      { _M_dataplus._M_p = __p; }
   30a74:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   30a78:	0104b783          	ld	a5,16(s1)
   30a7c:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   30a80:	0084b783          	ld	a5,8(s1)
   30a84:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   30a88:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   30a8c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   30a90:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   30a94:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   30a98:	01010793          	addi	a5,sp,16
   30a9c:	d4f50863          	beq	a0,a5,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   30aa0:	a11e50ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   30aa4:	d48ff06f          	jal	zero,2ffec <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   30aa8:	0084b603          	ld	a2,8(s1)
   30aac:	00160613          	addi	a2,a2,1
	if (__n == 0)
   30ab0:	fc0608e3          	beq	a2,zero,30a80 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0xaf8>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   30ab4:	00090593          	addi	a1,s2,0
   30ab8:	a99e50ef          	jal	ra,16550 <memcpy@plt>
   30abc:	fc5ff06f          	jal	zero,30a80 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0xaf8>
      { return _M_dataplus._M_p; }
   30ac0:	00050413          	addi	s0,a0,0
   30ac4:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   30ac8:	01010793          	addi	a5,sp,16
   30acc:	00f50463          	beq	a0,a5,30ad4 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0xb4c>
   30ad0:	9e1e50ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   30ad4:	00040513          	addi	a0,s0,0
   30ad8:	bb9e50ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000030adc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>:
{
   30adc:	fc010113          	addi	sp,sp,-64
   30ae0:	02113c23          	sd	ra,56(sp)
   30ae4:	02813823          	sd	s0,48(sp)
   30ae8:	02913423          	sd	s1,40(sp)
   30aec:	03213023          	sd	s2,32(sp)
   30af0:	00050413          	addi	s0,a0,0
        switch (v) {
   30af4:	ffd5879b          	addiw	a5,a1,-3
   30af8:	0ff7f693          	andi	a3,a5,255
   30afc:	09c00713          	addi	a4,zero,156
   30b00:	32d76ce3          	bltu	a4,a3,31638 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0xb5c>
   30b04:	00269793          	slli	a5,a3,0x2
   30b08:	00009717          	auipc	a4,0x9
   30b0c:	50070713          	addi	a4,a4,1280 # 3a008 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2328>
   30b10:	00e787b3          	add	a5,a5,a4
   30b14:	0007a783          	lw	a5,0(a5)
   30b18:	00e787b3          	add	a5,a5,a4
   30b1c:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30b20:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30b24:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30b28:	00000693          	addi	a3,zero,0
   30b2c:	00008617          	auipc	a2,0x8
   30b30:	60660613          	addi	a2,a2,1542 # 39132 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1452>
   30b34:	00008597          	auipc	a1,0x8
   30b38:	5f458593          	addi	a1,a1,1524 # 39128 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1448>
   30b3c:	00011317          	auipc	t1,0x11
   30b40:	7c433303          	ld	t1,1988(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30b44:	000300e7          	jalr	ra,0(t1)
}
   30b48:	00040513          	addi	a0,s0,0
   30b4c:	03813083          	ld	ra,56(sp)
   30b50:	03013403          	ld	s0,48(sp)
   30b54:	02813483          	ld	s1,40(sp)
   30b58:	02013903          	ld	s2,32(sp)
   30b5c:	04010113          	addi	sp,sp,64
   30b60:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30b64:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30b68:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30b6c:	00000693          	addi	a3,zero,0
   30b70:	00008617          	auipc	a2,0x8
   30b74:	5d360613          	addi	a2,a2,1491 # 39143 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1463>
   30b78:	00008597          	auipc	a1,0x8
   30b7c:	5c058593          	addi	a1,a1,1472 # 39138 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1458>
   30b80:	00011317          	auipc	t1,0x11
   30b84:	78033303          	ld	t1,1920(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30b88:	000300e7          	jalr	ra,0(t1)
   30b8c:	fbdff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30b90:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30b94:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30b98:	00000693          	addi	a3,zero,0
   30b9c:	00008617          	auipc	a2,0x8
   30ba0:	5b960613          	addi	a2,a2,1465 # 39155 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1475>
   30ba4:	00008597          	auipc	a1,0x8
   30ba8:	5a458593          	addi	a1,a1,1444 # 39148 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1468>
   30bac:	00011317          	auipc	t1,0x11
   30bb0:	75433303          	ld	t1,1876(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30bb4:	000300e7          	jalr	ra,0(t1)
   30bb8:	f91ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30bbc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30bc0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30bc4:	00000693          	addi	a3,zero,0
   30bc8:	00008617          	auipc	a2,0x8
   30bcc:	59d60613          	addi	a2,a2,1437 # 39165 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1485>
   30bd0:	00008597          	auipc	a1,0x8
   30bd4:	58858593          	addi	a1,a1,1416 # 39158 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1478>
   30bd8:	00011317          	auipc	t1,0x11
   30bdc:	72833303          	ld	t1,1832(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30be0:	000300e7          	jalr	ra,0(t1)
   30be4:	f65ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30be8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30bec:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30bf0:	00000693          	addi	a3,zero,0
   30bf4:	00008617          	auipc	a2,0x8
   30bf8:	58160613          	addi	a2,a2,1409 # 39175 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1495>
   30bfc:	00008597          	auipc	a1,0x8
   30c00:	56c58593          	addi	a1,a1,1388 # 39168 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1488>
   30c04:	00011317          	auipc	t1,0x11
   30c08:	6fc33303          	ld	t1,1788(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30c0c:	000300e7          	jalr	ra,0(t1)
   30c10:	f39ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30c14:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30c18:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30c1c:	00000693          	addi	a3,zero,0
   30c20:	00008617          	auipc	a2,0x8
   30c24:	56560613          	addi	a2,a2,1381 # 39185 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14a5>
   30c28:	00008597          	auipc	a1,0x8
   30c2c:	55058593          	addi	a1,a1,1360 # 39178 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1498>
   30c30:	00011317          	auipc	t1,0x11
   30c34:	6d033303          	ld	t1,1744(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30c38:	000300e7          	jalr	ra,0(t1)
   30c3c:	f0dff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30c40:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30c44:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30c48:	00000693          	addi	a3,zero,0
   30c4c:	00008617          	auipc	a2,0x8
   30c50:	54960613          	addi	a2,a2,1353 # 39195 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14b5>
   30c54:	00008597          	auipc	a1,0x8
   30c58:	53458593          	addi	a1,a1,1332 # 39188 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14a8>
   30c5c:	00011317          	auipc	t1,0x11
   30c60:	6a433303          	ld	t1,1700(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30c64:	000300e7          	jalr	ra,0(t1)
   30c68:	ee1ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30c6c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30c70:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30c74:	00000693          	addi	a3,zero,0
   30c78:	00008617          	auipc	a2,0x8
   30c7c:	52d60613          	addi	a2,a2,1325 # 391a5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14c5>
   30c80:	00008597          	auipc	a1,0x8
   30c84:	51858593          	addi	a1,a1,1304 # 39198 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14b8>
   30c88:	00011317          	auipc	t1,0x11
   30c8c:	67833303          	ld	t1,1656(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30c90:	000300e7          	jalr	ra,0(t1)
   30c94:	eb5ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30c98:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30c9c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30ca0:	00000693          	addi	a3,zero,0
   30ca4:	00008617          	auipc	a2,0x8
   30ca8:	51160613          	addi	a2,a2,1297 # 391b5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14d5>
   30cac:	00008597          	auipc	a1,0x8
   30cb0:	4fc58593          	addi	a1,a1,1276 # 391a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14c8>
   30cb4:	00011317          	auipc	t1,0x11
   30cb8:	64c33303          	ld	t1,1612(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30cbc:	000300e7          	jalr	ra,0(t1)
   30cc0:	e89ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30cc4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30cc8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30ccc:	00000693          	addi	a3,zero,0
   30cd0:	00008617          	auipc	a2,0x8
   30cd4:	4f560613          	addi	a2,a2,1269 # 391c5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14e5>
   30cd8:	00008597          	auipc	a1,0x8
   30cdc:	4e058593          	addi	a1,a1,1248 # 391b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14d8>
   30ce0:	00011317          	auipc	t1,0x11
   30ce4:	62033303          	ld	t1,1568(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30ce8:	000300e7          	jalr	ra,0(t1)
   30cec:	e5dff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30cf0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30cf4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30cf8:	00000693          	addi	a3,zero,0
   30cfc:	00008617          	auipc	a2,0x8
   30d00:	4d860613          	addi	a2,a2,1240 # 391d4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14f4>
   30d04:	00008597          	auipc	a1,0x8
   30d08:	4c458593          	addi	a1,a1,1220 # 391c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14e8>
   30d0c:	00011317          	auipc	t1,0x11
   30d10:	5f433303          	ld	t1,1524(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30d14:	000300e7          	jalr	ra,0(t1)
   30d18:	e31ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30d1c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30d20:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30d24:	00000693          	addi	a3,zero,0
   30d28:	00008617          	auipc	a2,0x8
   30d2c:	4bc60613          	addi	a2,a2,1212 # 391e4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1504>
   30d30:	00008597          	auipc	a1,0x8
   30d34:	4a858593          	addi	a1,a1,1192 # 391d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14f8>
   30d38:	00011317          	auipc	t1,0x11
   30d3c:	5c833303          	ld	t1,1480(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30d40:	000300e7          	jalr	ra,0(t1)
   30d44:	e05ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30d48:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30d4c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30d50:	00000693          	addi	a3,zero,0
   30d54:	00008617          	auipc	a2,0x8
   30d58:	49d60613          	addi	a2,a2,1181 # 391f1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1511>
   30d5c:	00008597          	auipc	a1,0x8
   30d60:	48c58593          	addi	a1,a1,1164 # 391e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1508>
   30d64:	00011317          	auipc	t1,0x11
   30d68:	59c33303          	ld	t1,1436(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30d6c:	000300e7          	jalr	ra,0(t1)
   30d70:	dd9ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30d74:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30d78:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30d7c:	00000693          	addi	a3,zero,0
   30d80:	00008617          	auipc	a2,0x8
   30d84:	48260613          	addi	a2,a2,1154 # 39202 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1522>
   30d88:	00008597          	auipc	a1,0x8
   30d8c:	47058593          	addi	a1,a1,1136 # 391f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1518>
   30d90:	00011317          	auipc	t1,0x11
   30d94:	57033303          	ld	t1,1392(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30d98:	000300e7          	jalr	ra,0(t1)
   30d9c:	dadff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30da0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30da4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30da8:	00000693          	addi	a3,zero,0
   30dac:	00008617          	auipc	a2,0x8
   30db0:	46660613          	addi	a2,a2,1126 # 39212 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1532>
   30db4:	00008597          	auipc	a1,0x8
   30db8:	45458593          	addi	a1,a1,1108 # 39208 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1528>
   30dbc:	00011317          	auipc	t1,0x11
   30dc0:	54433303          	ld	t1,1348(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30dc4:	000300e7          	jalr	ra,0(t1)
   30dc8:	d81ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30dcc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30dd0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30dd4:	00000693          	addi	a3,zero,0
   30dd8:	00008617          	auipc	a2,0x8
   30ddc:	44a60613          	addi	a2,a2,1098 # 39222 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1542>
   30de0:	00008597          	auipc	a1,0x8
   30de4:	43858593          	addi	a1,a1,1080 # 39218 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1538>
   30de8:	00011317          	auipc	t1,0x11
   30dec:	51833303          	ld	t1,1304(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30df0:	000300e7          	jalr	ra,0(t1)
   30df4:	d55ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30df8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30dfc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30e00:	00000693          	addi	a3,zero,0
   30e04:	00008617          	auipc	a2,0x8
   30e08:	42e60613          	addi	a2,a2,1070 # 39232 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1552>
   30e0c:	00008597          	auipc	a1,0x8
   30e10:	41c58593          	addi	a1,a1,1052 # 39228 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1548>
   30e14:	00011317          	auipc	t1,0x11
   30e18:	4ec33303          	ld	t1,1260(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30e1c:	000300e7          	jalr	ra,0(t1)
   30e20:	d29ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30e24:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30e28:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30e2c:	00000693          	addi	a3,zero,0
   30e30:	00008617          	auipc	a2,0x8
   30e34:	41160613          	addi	a2,a2,1041 # 39241 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1561>
   30e38:	00008597          	auipc	a1,0x8
   30e3c:	40058593          	addi	a1,a1,1024 # 39238 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1558>
   30e40:	00011317          	auipc	t1,0x11
   30e44:	4c033303          	ld	t1,1216(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30e48:	000300e7          	jalr	ra,0(t1)
   30e4c:	cfdff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30e50:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30e54:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30e58:	00000693          	addi	a3,zero,0
   30e5c:	00008617          	auipc	a2,0x8
   30e60:	3f860613          	addi	a2,a2,1016 # 39254 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1574>
   30e64:	00008597          	auipc	a1,0x8
   30e68:	3e458593          	addi	a1,a1,996 # 39248 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1568>
   30e6c:	00011317          	auipc	t1,0x11
   30e70:	49433303          	ld	t1,1172(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30e74:	000300e7          	jalr	ra,0(t1)
   30e78:	cd1ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30e7c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30e80:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30e84:	00000693          	addi	a3,zero,0
   30e88:	00008617          	auipc	a2,0x8
   30e8c:	3d960613          	addi	a2,a2,985 # 39261 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1581>
   30e90:	00008597          	auipc	a1,0x8
   30e94:	3c858593          	addi	a1,a1,968 # 39258 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1578>
   30e98:	00011317          	auipc	t1,0x11
   30e9c:	46833303          	ld	t1,1128(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30ea0:	000300e7          	jalr	ra,0(t1)
   30ea4:	ca5ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30ea8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30eac:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30eb0:	00000693          	addi	a3,zero,0
   30eb4:	00008617          	auipc	a2,0x8
   30eb8:	3bd60613          	addi	a2,a2,957 # 39271 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1591>
   30ebc:	00008597          	auipc	a1,0x8
   30ec0:	3ac58593          	addi	a1,a1,940 # 39268 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1588>
   30ec4:	00011317          	auipc	t1,0x11
   30ec8:	43c33303          	ld	t1,1084(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30ecc:	000300e7          	jalr	ra,0(t1)
   30ed0:	c79ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30ed4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30ed8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30edc:	00000693          	addi	a3,zero,0
   30ee0:	00008617          	auipc	a2,0x8
   30ee4:	3a160613          	addi	a2,a2,929 # 39281 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15a1>
   30ee8:	00008597          	auipc	a1,0x8
   30eec:	39058593          	addi	a1,a1,912 # 39278 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1598>
   30ef0:	00011317          	auipc	t1,0x11
   30ef4:	41033303          	ld	t1,1040(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30ef8:	000300e7          	jalr	ra,0(t1)
   30efc:	c4dff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30f00:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30f04:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30f08:	00000693          	addi	a3,zero,0
   30f0c:	00008617          	auipc	a2,0x8
   30f10:	38760613          	addi	a2,a2,903 # 39293 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15b3>
   30f14:	00008597          	auipc	a1,0x8
   30f18:	37458593          	addi	a1,a1,884 # 39288 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15a8>
   30f1c:	00011317          	auipc	t1,0x11
   30f20:	3e433303          	ld	t1,996(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30f24:	000300e7          	jalr	ra,0(t1)
   30f28:	c21ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30f2c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30f30:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30f34:	00000693          	addi	a3,zero,0
   30f38:	00008617          	auipc	a2,0x8
   30f3c:	36960613          	addi	a2,a2,873 # 392a1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15c1>
   30f40:	00008597          	auipc	a1,0x8
   30f44:	35858593          	addi	a1,a1,856 # 39298 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15b8>
   30f48:	00011317          	auipc	t1,0x11
   30f4c:	3b833303          	ld	t1,952(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30f50:	000300e7          	jalr	ra,0(t1)
   30f54:	bf5ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30f58:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30f5c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30f60:	00000693          	addi	a3,zero,0
   30f64:	00008617          	auipc	a2,0x8
   30f68:	34d60613          	addi	a2,a2,845 # 392b1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15d1>
   30f6c:	00008597          	auipc	a1,0x8
   30f70:	33c58593          	addi	a1,a1,828 # 392a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15c8>
   30f74:	00011317          	auipc	t1,0x11
   30f78:	38c33303          	ld	t1,908(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30f7c:	000300e7          	jalr	ra,0(t1)
   30f80:	bc9ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30f84:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30f88:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30f8c:	00000693          	addi	a3,zero,0
   30f90:	00008617          	auipc	a2,0x8
   30f94:	33160613          	addi	a2,a2,817 # 392c1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15e1>
   30f98:	00008597          	auipc	a1,0x8
   30f9c:	32058593          	addi	a1,a1,800 # 392b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15d8>
   30fa0:	00011317          	auipc	t1,0x11
   30fa4:	36033303          	ld	t1,864(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30fa8:	000300e7          	jalr	ra,0(t1)
   30fac:	b9dff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30fb0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30fb4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30fb8:	00000693          	addi	a3,zero,0
   30fbc:	00008617          	auipc	a2,0x8
   30fc0:	31560613          	addi	a2,a2,789 # 392d1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15f1>
   30fc4:	00008597          	auipc	a1,0x8
   30fc8:	30458593          	addi	a1,a1,772 # 392c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15e8>
   30fcc:	00011317          	auipc	t1,0x11
   30fd0:	33433303          	ld	t1,820(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   30fd4:	000300e7          	jalr	ra,0(t1)
   30fd8:	b71ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30fdc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30fe0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30fe4:	00000693          	addi	a3,zero,0
   30fe8:	00008617          	auipc	a2,0x8
   30fec:	2f860613          	addi	a2,a2,760 # 392e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1600>
   30ff0:	00008597          	auipc	a1,0x8
   30ff4:	2e858593          	addi	a1,a1,744 # 392d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15f8>
   30ff8:	00011317          	auipc	t1,0x11
   30ffc:	30833303          	ld	t1,776(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31000:	000300e7          	jalr	ra,0(t1)
   31004:	b45ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31008:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3100c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31010:	00000693          	addi	a3,zero,0
   31014:	00008617          	auipc	a2,0x8
   31018:	2de60613          	addi	a2,a2,734 # 392f2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1612>
   3101c:	00008597          	auipc	a1,0x8
   31020:	2cc58593          	addi	a1,a1,716 # 392e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1608>
   31024:	00011317          	auipc	t1,0x11
   31028:	2dc33303          	ld	t1,732(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3102c:	000300e7          	jalr	ra,0(t1)
   31030:	b19ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31034:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31038:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3103c:	00000693          	addi	a3,zero,0
   31040:	00008617          	auipc	a2,0x8
   31044:	2c960613          	addi	a2,a2,713 # 39309 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1629>
   31048:	00008597          	auipc	a1,0x8
   3104c:	2b058593          	addi	a1,a1,688 # 392f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1618>
   31050:	00011317          	auipc	t1,0x11
   31054:	2b033303          	ld	t1,688(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31058:	000300e7          	jalr	ra,0(t1)
   3105c:	aedff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31060:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31064:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31068:	00000693          	addi	a3,zero,0
   3106c:	00008617          	auipc	a2,0x8
   31070:	2ad60613          	addi	a2,a2,685 # 39319 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1639>
   31074:	00008597          	auipc	a1,0x8
   31078:	29c58593          	addi	a1,a1,668 # 39310 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1630>
   3107c:	00011317          	auipc	t1,0x11
   31080:	28433303          	ld	t1,644(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31084:	000300e7          	jalr	ra,0(t1)
   31088:	ac1ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3108c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31090:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31094:	00000693          	addi	a3,zero,0
   31098:	00008617          	auipc	a2,0x8
   3109c:	29160613          	addi	a2,a2,657 # 39329 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1649>
   310a0:	00008597          	auipc	a1,0x8
   310a4:	28058593          	addi	a1,a1,640 # 39320 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1640>
   310a8:	00011317          	auipc	t1,0x11
   310ac:	25833303          	ld	t1,600(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   310b0:	000300e7          	jalr	ra,0(t1)
   310b4:	a95ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   310b8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   310bc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   310c0:	00000693          	addi	a3,zero,0
   310c4:	00008617          	auipc	a2,0x8
   310c8:	27660613          	addi	a2,a2,630 # 3933a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x165a>
   310cc:	00008597          	auipc	a1,0x8
   310d0:	26458593          	addi	a1,a1,612 # 39330 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1650>
   310d4:	00011317          	auipc	t1,0x11
   310d8:	22c33303          	ld	t1,556(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   310dc:	000300e7          	jalr	ra,0(t1)
   310e0:	a69ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   310e4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   310e8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   310ec:	00000693          	addi	a3,zero,0
   310f0:	00008617          	auipc	a2,0x8
   310f4:	25960613          	addi	a2,a2,601 # 39349 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1669>
   310f8:	00008597          	auipc	a1,0x8
   310fc:	24858593          	addi	a1,a1,584 # 39340 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1660>
   31100:	00011317          	auipc	t1,0x11
   31104:	20033303          	ld	t1,512(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31108:	000300e7          	jalr	ra,0(t1)
   3110c:	a3dff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31110:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31114:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31118:	00000693          	addi	a3,zero,0
   3111c:	00008617          	auipc	a2,0x8
   31120:	23e60613          	addi	a2,a2,574 # 3935a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x167a>
   31124:	00008597          	auipc	a1,0x8
   31128:	22c58593          	addi	a1,a1,556 # 39350 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1670>
   3112c:	00011317          	auipc	t1,0x11
   31130:	1d433303          	ld	t1,468(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31134:	000300e7          	jalr	ra,0(t1)
   31138:	a11ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3113c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31140:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31144:	00000693          	addi	a3,zero,0
   31148:	00008617          	auipc	a2,0x8
   3114c:	22160613          	addi	a2,a2,545 # 39369 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1689>
   31150:	00008597          	auipc	a1,0x8
   31154:	21058593          	addi	a1,a1,528 # 39360 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1680>
   31158:	00011317          	auipc	t1,0x11
   3115c:	1a833303          	ld	t1,424(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31160:	000300e7          	jalr	ra,0(t1)
   31164:	9e5ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31168:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3116c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31170:	00000693          	addi	a3,zero,0
   31174:	00008617          	auipc	a2,0x8
   31178:	20460613          	addi	a2,a2,516 # 39378 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1698>
   3117c:	00008597          	auipc	a1,0x8
   31180:	1f458593          	addi	a1,a1,500 # 39370 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1690>
   31184:	00011317          	auipc	t1,0x11
   31188:	17c33303          	ld	t1,380(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3118c:	000300e7          	jalr	ra,0(t1)
   31190:	9b9ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31194:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31198:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3119c:	00000693          	addi	a3,zero,0
   311a0:	00008617          	auipc	a2,0x8
   311a4:	1e860613          	addi	a2,a2,488 # 39388 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16a8>
   311a8:	00008597          	auipc	a1,0x8
   311ac:	1d858593          	addi	a1,a1,472 # 39380 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16a0>
   311b0:	00011317          	auipc	t1,0x11
   311b4:	15033303          	ld	t1,336(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   311b8:	000300e7          	jalr	ra,0(t1)
   311bc:	98dff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   311c0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   311c4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   311c8:	00000693          	addi	a3,zero,0
   311cc:	00008617          	auipc	a2,0x8
   311d0:	1cc60613          	addi	a2,a2,460 # 39398 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16b8>
   311d4:	00008597          	auipc	a1,0x8
   311d8:	1bc58593          	addi	a1,a1,444 # 39390 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16b0>
   311dc:	00011317          	auipc	t1,0x11
   311e0:	12433303          	ld	t1,292(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   311e4:	000300e7          	jalr	ra,0(t1)
   311e8:	961ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   311ec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   311f0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   311f4:	00000693          	addi	a3,zero,0
   311f8:	00008617          	auipc	a2,0x8
   311fc:	1b060613          	addi	a2,a2,432 # 393a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16c8>
   31200:	00008597          	auipc	a1,0x8
   31204:	1a058593          	addi	a1,a1,416 # 393a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16c0>
   31208:	00011317          	auipc	t1,0x11
   3120c:	0f833303          	ld	t1,248(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31210:	000300e7          	jalr	ra,0(t1)
   31214:	935ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31218:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3121c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31220:	00000693          	addi	a3,zero,0
   31224:	00008617          	auipc	a2,0x8
   31228:	19460613          	addi	a2,a2,404 # 393b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16d8>
   3122c:	00008597          	auipc	a1,0x8
   31230:	18458593          	addi	a1,a1,388 # 393b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16d0>
   31234:	00011317          	auipc	t1,0x11
   31238:	0cc33303          	ld	t1,204(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3123c:	000300e7          	jalr	ra,0(t1)
   31240:	909ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31244:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31248:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3124c:	00000693          	addi	a3,zero,0
   31250:	00008617          	auipc	a2,0x8
   31254:	17860613          	addi	a2,a2,376 # 393c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16e8>
   31258:	00008597          	auipc	a1,0x8
   3125c:	16858593          	addi	a1,a1,360 # 393c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16e0>
   31260:	00011317          	auipc	t1,0x11
   31264:	0a033303          	ld	t1,160(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31268:	000300e7          	jalr	ra,0(t1)
   3126c:	8ddff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31270:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31274:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31278:	00000693          	addi	a3,zero,0
   3127c:	00008617          	auipc	a2,0x8
   31280:	15e60613          	addi	a2,a2,350 # 393da <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16fa>
   31284:	00008597          	auipc	a1,0x8
   31288:	14c58593          	addi	a1,a1,332 # 393d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16f0>
   3128c:	00011317          	auipc	t1,0x11
   31290:	07433303          	ld	t1,116(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31294:	000300e7          	jalr	ra,0(t1)
   31298:	8b1ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3129c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   312a0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   312a4:	00000693          	addi	a3,zero,0
   312a8:	00008617          	auipc	a2,0x8
   312ac:	14360613          	addi	a2,a2,323 # 393eb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x170b>
   312b0:	00008597          	auipc	a1,0x8
   312b4:	13058593          	addi	a1,a1,304 # 393e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1700>
   312b8:	00011317          	auipc	t1,0x11
   312bc:	04833303          	ld	t1,72(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   312c0:	000300e7          	jalr	ra,0(t1)
   312c4:	885ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   312c8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   312cc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   312d0:	00000693          	addi	a3,zero,0
   312d4:	00008617          	auipc	a2,0x8
   312d8:	12660613          	addi	a2,a2,294 # 393fa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x171a>
   312dc:	00008597          	auipc	a1,0x8
   312e0:	11458593          	addi	a1,a1,276 # 393f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1710>
   312e4:	00011317          	auipc	t1,0x11
   312e8:	01c33303          	ld	t1,28(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   312ec:	000300e7          	jalr	ra,0(t1)
   312f0:	859ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   312f4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   312f8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   312fc:	00000693          	addi	a3,zero,0
   31300:	00008617          	auipc	a2,0x8
   31304:	10b60613          	addi	a2,a2,267 # 3940b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x172b>
   31308:	00008597          	auipc	a1,0x8
   3130c:	0f858593          	addi	a1,a1,248 # 39400 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1720>
   31310:	00011317          	auipc	t1,0x11
   31314:	ff033303          	ld	t1,-16(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31318:	000300e7          	jalr	ra,0(t1)
   3131c:	82dff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31320:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31324:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31328:	00000693          	addi	a3,zero,0
   3132c:	00008617          	auipc	a2,0x8
   31330:	0ef60613          	addi	a2,a2,239 # 3941b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x173b>
   31334:	00008597          	auipc	a1,0x8
   31338:	0dc58593          	addi	a1,a1,220 # 39410 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1730>
   3133c:	00011317          	auipc	t1,0x11
   31340:	fc433303          	ld	t1,-60(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31344:	000300e7          	jalr	ra,0(t1)
   31348:	801ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3134c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31350:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31354:	00000693          	addi	a3,zero,0
   31358:	00008617          	auipc	a2,0x8
   3135c:	0d460613          	addi	a2,a2,212 # 3942c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x174c>
   31360:	00008597          	auipc	a1,0x8
   31364:	0c058593          	addi	a1,a1,192 # 39420 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1740>
   31368:	00011317          	auipc	t1,0x11
   3136c:	f9833303          	ld	t1,-104(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31370:	000300e7          	jalr	ra,0(t1)
   31374:	fd4ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31378:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3137c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31380:	00000693          	addi	a3,zero,0
   31384:	00008617          	auipc	a2,0x8
   31388:	0b660613          	addi	a2,a2,182 # 3943a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x175a>
   3138c:	00008597          	auipc	a1,0x8
   31390:	0a458593          	addi	a1,a1,164 # 39430 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1750>
   31394:	00011317          	auipc	t1,0x11
   31398:	f6c33303          	ld	t1,-148(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3139c:	000300e7          	jalr	ra,0(t1)
   313a0:	fa8ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   313a4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   313a8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   313ac:	00000693          	addi	a3,zero,0
   313b0:	00008617          	auipc	a2,0x8
   313b4:	09b60613          	addi	a2,a2,155 # 3944b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x176b>
   313b8:	00008597          	auipc	a1,0x8
   313bc:	08858593          	addi	a1,a1,136 # 39440 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1760>
   313c0:	00011317          	auipc	t1,0x11
   313c4:	f4033303          	ld	t1,-192(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   313c8:	000300e7          	jalr	ra,0(t1)
   313cc:	f7cff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   313d0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   313d4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   313d8:	00000693          	addi	a3,zero,0
   313dc:	00008617          	auipc	a2,0x8
   313e0:	07f60613          	addi	a2,a2,127 # 3945b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x177b>
   313e4:	00008597          	auipc	a1,0x8
   313e8:	06c58593          	addi	a1,a1,108 # 39450 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1770>
   313ec:	00011317          	auipc	t1,0x11
   313f0:	f1433303          	ld	t1,-236(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   313f4:	000300e7          	jalr	ra,0(t1)
   313f8:	f50ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   313fc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31400:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31404:	00000693          	addi	a3,zero,0
   31408:	00008617          	auipc	a2,0x8
   3140c:	06360613          	addi	a2,a2,99 # 3946b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x178b>
   31410:	00008597          	auipc	a1,0x8
   31414:	05058593          	addi	a1,a1,80 # 39460 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1780>
   31418:	00011317          	auipc	t1,0x11
   3141c:	ee833303          	ld	t1,-280(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31420:	000300e7          	jalr	ra,0(t1)
   31424:	f24ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31428:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3142c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31430:	00000693          	addi	a3,zero,0
   31434:	00008617          	auipc	a2,0x8
   31438:	04c60613          	addi	a2,a2,76 # 39480 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17a0>
   3143c:	00008597          	auipc	a1,0x8
   31440:	03458593          	addi	a1,a1,52 # 39470 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1790>
   31444:	00011317          	auipc	t1,0x11
   31448:	ebc33303          	ld	t1,-324(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3144c:	000300e7          	jalr	ra,0(t1)
   31450:	ef8ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31454:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31458:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3145c:	00000693          	addi	a3,zero,0
   31460:	00008617          	auipc	a2,0x8
   31464:	03960613          	addi	a2,a2,57 # 39499 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17b9>
   31468:	00008597          	auipc	a1,0x8
   3146c:	02058593          	addi	a1,a1,32 # 39488 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17a8>
   31470:	00011317          	auipc	t1,0x11
   31474:	e9033303          	ld	t1,-368(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31478:	000300e7          	jalr	ra,0(t1)
   3147c:	eccff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31480:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31484:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31488:	00000693          	addi	a3,zero,0
   3148c:	00008617          	auipc	a2,0x8
   31490:	01d60613          	addi	a2,a2,29 # 394a9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17c9>
   31494:	00008597          	auipc	a1,0x8
   31498:	00c58593          	addi	a1,a1,12 # 394a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17c0>
   3149c:	00011317          	auipc	t1,0x11
   314a0:	e6433303          	ld	t1,-412(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   314a4:	000300e7          	jalr	ra,0(t1)
   314a8:	ea0ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   314ac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   314b0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   314b4:	00000693          	addi	a3,zero,0
   314b8:	00008617          	auipc	a2,0x8
   314bc:	01160613          	addi	a2,a2,17 # 394c9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17e9>
   314c0:	00008597          	auipc	a1,0x8
   314c4:	ff058593          	addi	a1,a1,-16 # 394b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17d0>
   314c8:	00011317          	auipc	t1,0x11
   314cc:	e3833303          	ld	t1,-456(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   314d0:	000300e7          	jalr	ra,0(t1)
   314d4:	e74ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   314d8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   314dc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   314e0:	00000693          	addi	a3,zero,0
   314e4:	00008617          	auipc	a2,0x8
   314e8:	ff760613          	addi	a2,a2,-9 # 394db <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17fb>
   314ec:	00008597          	auipc	a1,0x8
   314f0:	fe458593          	addi	a1,a1,-28 # 394d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17f0>
   314f4:	00011317          	auipc	t1,0x11
   314f8:	e0c33303          	ld	t1,-500(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   314fc:	000300e7          	jalr	ra,0(t1)
   31500:	e48ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31504:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31508:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3150c:	00000693          	addi	a3,zero,0
   31510:	00008617          	auipc	a2,0x8
   31514:	fdb60613          	addi	a2,a2,-37 # 394eb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x180b>
   31518:	00008597          	auipc	a1,0x8
   3151c:	fc858593          	addi	a1,a1,-56 # 394e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1800>
   31520:	00011317          	auipc	t1,0x11
   31524:	de033303          	ld	t1,-544(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31528:	000300e7          	jalr	ra,0(t1)
   3152c:	e1cff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31530:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31534:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31538:	00000693          	addi	a3,zero,0
   3153c:	00008617          	auipc	a2,0x8
   31540:	fc260613          	addi	a2,a2,-62 # 394fe <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x181e>
   31544:	00008597          	auipc	a1,0x8
   31548:	fac58593          	addi	a1,a1,-84 # 394f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1810>
   3154c:	00011317          	auipc	t1,0x11
   31550:	db433303          	ld	t1,-588(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31554:	000300e7          	jalr	ra,0(t1)
   31558:	df0ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3155c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31560:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31564:	00000693          	addi	a3,zero,0
   31568:	00008617          	auipc	a2,0x8
   3156c:	fae60613          	addi	a2,a2,-82 # 39516 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1836>
   31570:	00008597          	auipc	a1,0x8
   31574:	f9058593          	addi	a1,a1,-112 # 39500 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1820>
   31578:	00011317          	auipc	t1,0x11
   3157c:	d8833303          	ld	t1,-632(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31580:	000300e7          	jalr	ra,0(t1)
   31584:	dc4ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31588:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3158c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31590:	00000693          	addi	a3,zero,0
   31594:	00008617          	auipc	a2,0x8
   31598:	f9860613          	addi	a2,a2,-104 # 3952c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x184c>
   3159c:	00008597          	auipc	a1,0x8
   315a0:	f7c58593          	addi	a1,a1,-132 # 39518 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1838>
   315a4:	00011317          	auipc	t1,0x11
   315a8:	d5c33303          	ld	t1,-676(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   315ac:	000300e7          	jalr	ra,0(t1)
   315b0:	d98ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   315b4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   315b8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   315bc:	00000693          	addi	a3,zero,0
   315c0:	00008617          	auipc	a2,0x8
   315c4:	f7f60613          	addi	a2,a2,-129 # 3953f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x185f>
   315c8:	00008597          	auipc	a1,0x8
   315cc:	f6858593          	addi	a1,a1,-152 # 39530 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1850>
   315d0:	00011317          	auipc	t1,0x11
   315d4:	d3033303          	ld	t1,-720(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   315d8:	000300e7          	jalr	ra,0(t1)
   315dc:	d6cff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   315e0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   315e4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   315e8:	00000693          	addi	a3,zero,0
   315ec:	00008617          	auipc	a2,0x8
   315f0:	f6860613          	addi	a2,a2,-152 # 39554 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1874>
   315f4:	00008597          	auipc	a1,0x8
   315f8:	f4c58593          	addi	a1,a1,-180 # 39540 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1860>
   315fc:	00011317          	auipc	t1,0x11
   31600:	d0433303          	ld	t1,-764(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31604:	000300e7          	jalr	ra,0(t1)
   31608:	d40ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3160c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31610:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31614:	00000693          	addi	a3,zero,0
   31618:	00008617          	auipc	a2,0x8
   3161c:	f5160613          	addi	a2,a2,-175 # 39569 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1889>
   31620:	00008597          	auipc	a1,0x8
   31624:	f3858593          	addi	a1,a1,-200 # 39558 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1878>
   31628:	00011317          	auipc	t1,0x11
   3162c:	cd833303          	ld	t1,-808(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31630:	000300e7          	jalr	ra,0(t1)
   31634:	d14ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
        return "(DW_OP)0x" + to_hex((int)v);
   31638:	00010493          	addi	s1,sp,0
   3163c:	00048513          	addi	a0,s1,0
   31640:	00011317          	auipc	t1,0x11
   31644:	dd033303          	ld	t1,-560(t1) # 42410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfc4c>
   31648:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   3164c:	00900713          	addi	a4,zero,9
   31650:	00008697          	auipc	a3,0x8
   31654:	f2068693          	addi	a3,a3,-224 # 39570 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1890>
   31658:	00000613          	addi	a2,zero,0
   3165c:	00000593          	addi	a1,zero,0
   31660:	00048513          	addi	a0,s1,0
   31664:	f9de40ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   31668:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3166c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   31670:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   31674:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   31678:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   3167c:	03278c63          	beq	a5,s2,316b4 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0xbd8>
      { _M_dataplus._M_p = __p; }
   31680:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   31684:	0104b783          	ld	a5,16(s1)
   31688:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   3168c:	0084b783          	ld	a5,8(s1)
   31690:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   31694:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   31698:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   3169c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   316a0:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   316a4:	01010793          	addi	a5,sp,16
   316a8:	caf50063          	beq	a0,a5,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   316ac:	e05e40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   316b0:	c98ff06f          	jal	zero,30b48 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   316b4:	0084b603          	ld	a2,8(s1)
   316b8:	00160613          	addi	a2,a2,1
	if (__n == 0)
   316bc:	fc0608e3          	beq	a2,zero,3168c <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0xbb0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   316c0:	00090593          	addi	a1,s2,0
   316c4:	e8de40ef          	jal	ra,16550 <memcpy@plt>
   316c8:	fc5ff06f          	jal	zero,3168c <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0xbb0>
      { return _M_dataplus._M_p; }
   316cc:	00050413          	addi	s0,a0,0
   316d0:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   316d4:	01010793          	addi	a5,sp,16
   316d8:	00f50463          	beq	a0,a5,316e0 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0xc04>
   316dc:	dd5e40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   316e0:	00040513          	addi	a0,s0,0
   316e4:	fade40ef          	jal	ra,16690 <_Unwind_Resume@plt>

00000000000316e8 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>:
{
   316e8:	fc010113          	addi	sp,sp,-64
   316ec:	02113c23          	sd	ra,56(sp)
   316f0:	02813823          	sd	s0,48(sp)
   316f4:	02913423          	sd	s1,40(sp)
   316f8:	03213023          	sd	s2,32(sp)
   316fc:	00050413          	addi	s0,a0,0
        switch (v) {
   31700:	06e00793          	addi	a5,zero,110
   31704:	00b7f463          	bgeu	a5,a1,3170c <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x24>
   31708:	0080106f          	jal	zero,32710 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x1028>
   3170c:	00259793          	slli	a5,a1,0x2
   31710:	00009717          	auipc	a4,0x9
   31714:	b6c70713          	addi	a4,a4,-1172 # 3a27c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x259c>
   31718:	00e787b3          	add	a5,a5,a4
   3171c:	0007a783          	lw	a5,0(a5)
   31720:	00e787b3          	add	a5,a5,a4
   31724:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31728:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3172c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31730:	00000693          	addi	a3,zero,0
   31734:	00008617          	auipc	a2,0x8
   31738:	e5960613          	addi	a2,a2,-423 # 3958d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18ad>
   3173c:	00008597          	auipc	a1,0x8
   31740:	e4458593          	addi	a1,a1,-444 # 39580 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18a0>
   31744:	00011317          	auipc	t1,0x11
   31748:	bbc33303          	ld	t1,-1092(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3174c:	000300e7          	jalr	ra,0(t1)
}
   31750:	00040513          	addi	a0,s0,0
   31754:	03813083          	ld	ra,56(sp)
   31758:	03013403          	ld	s0,48(sp)
   3175c:	02813483          	ld	s1,40(sp)
   31760:	02013903          	ld	s2,32(sp)
   31764:	04010113          	addi	sp,sp,64
   31768:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3176c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31770:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31774:	00000693          	addi	a3,zero,0
   31778:	00008617          	auipc	a2,0x8
   3177c:	e2660613          	addi	a2,a2,-474 # 3959e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18be>
   31780:	00008597          	auipc	a1,0x8
   31784:	e1058593          	addi	a1,a1,-496 # 39590 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18b0>
   31788:	00011317          	auipc	t1,0x11
   3178c:	b7833303          	ld	t1,-1160(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31790:	000300e7          	jalr	ra,0(t1)
   31794:	fbdff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31798:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3179c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   317a0:	00000693          	addi	a3,zero,0
   317a4:	00008617          	auipc	a2,0x8
   317a8:	e0660613          	addi	a2,a2,-506 # 395aa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18ca>
   317ac:	00008597          	auipc	a1,0x8
   317b0:	df458593          	addi	a1,a1,-524 # 395a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18c0>
   317b4:	00011317          	auipc	t1,0x11
   317b8:	b4c33303          	ld	t1,-1204(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   317bc:	000300e7          	jalr	ra,0(t1)
   317c0:	f91ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   317c4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   317c8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   317cc:	00000693          	addi	a3,zero,0
   317d0:	00008617          	auipc	a2,0x8
   317d4:	dee60613          	addi	a2,a2,-530 # 395be <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18de>
   317d8:	00008597          	auipc	a1,0x8
   317dc:	dd858593          	addi	a1,a1,-552 # 395b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18d0>
   317e0:	00011317          	auipc	t1,0x11
   317e4:	b2033303          	ld	t1,-1248(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   317e8:	000300e7          	jalr	ra,0(t1)
   317ec:	f65ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   317f0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   317f4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   317f8:	00000693          	addi	a3,zero,0
   317fc:	00008617          	auipc	a2,0x8
   31800:	dd360613          	addi	a2,a2,-557 # 395cf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18ef>
   31804:	00008597          	auipc	a1,0x8
   31808:	dbc58593          	addi	a1,a1,-580 # 395c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18e0>
   3180c:	00011317          	auipc	t1,0x11
   31810:	af433303          	ld	t1,-1292(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31814:	000300e7          	jalr	ra,0(t1)
   31818:	f39ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3181c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31820:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31824:	00000693          	addi	a3,zero,0
   31828:	00008617          	auipc	a2,0x8
   3182c:	db860613          	addi	a2,a2,-584 # 395e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1900>
   31830:	00008597          	auipc	a1,0x8
   31834:	da058593          	addi	a1,a1,-608 # 395d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18f0>
   31838:	00011317          	auipc	t1,0x11
   3183c:	ac833303          	ld	t1,-1336(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31840:	000300e7          	jalr	ra,0(t1)
   31844:	f0dff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31848:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3184c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31850:	00000693          	addi	a3,zero,0
   31854:	00008617          	auipc	a2,0x8
   31858:	da260613          	addi	a2,a2,-606 # 395f6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1916>
   3185c:	00008597          	auipc	a1,0x8
   31860:	d8c58593          	addi	a1,a1,-628 # 395e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1908>
   31864:	00011317          	auipc	t1,0x11
   31868:	a9c33303          	ld	t1,-1380(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3186c:	000300e7          	jalr	ra,0(t1)
   31870:	ee1ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31874:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31878:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3187c:	00000693          	addi	a3,zero,0
   31880:	00008617          	auipc	a2,0x8
   31884:	d8760613          	addi	a2,a2,-633 # 39607 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1927>
   31888:	00008597          	auipc	a1,0x8
   3188c:	d7058593          	addi	a1,a1,-656 # 395f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1918>
   31890:	00011317          	auipc	t1,0x11
   31894:	a7033303          	ld	t1,-1424(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31898:	000300e7          	jalr	ra,0(t1)
   3189c:	eb5ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   318a0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   318a4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   318a8:	00000693          	addi	a3,zero,0
   318ac:	00008617          	auipc	a2,0x8
   318b0:	d6860613          	addi	a2,a2,-664 # 39614 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1934>
   318b4:	00008597          	auipc	a1,0x8
   318b8:	d5458593          	addi	a1,a1,-684 # 39608 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1928>
   318bc:	00011317          	auipc	t1,0x11
   318c0:	a4433303          	ld	t1,-1468(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   318c4:	000300e7          	jalr	ra,0(t1)
   318c8:	e89ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   318cc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   318d0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   318d4:	00000693          	addi	a3,zero,0
   318d8:	00008617          	auipc	a2,0x8
   318dc:	d4d60613          	addi	a2,a2,-691 # 39625 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1945>
   318e0:	00008597          	auipc	a1,0x8
   318e4:	d3858593          	addi	a1,a1,-712 # 39618 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1938>
   318e8:	00011317          	auipc	t1,0x11
   318ec:	a1833303          	ld	t1,-1512(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   318f0:	000300e7          	jalr	ra,0(t1)
   318f4:	e5dff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   318f8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   318fc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31900:	00000693          	addi	a3,zero,0
   31904:	00008617          	auipc	a2,0x8
   31908:	d3260613          	addi	a2,a2,-718 # 39636 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1956>
   3190c:	00008597          	auipc	a1,0x8
   31910:	d1c58593          	addi	a1,a1,-740 # 39628 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1948>
   31914:	00011317          	auipc	t1,0x11
   31918:	9ec33303          	ld	t1,-1556(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3191c:	000300e7          	jalr	ra,0(t1)
   31920:	e31ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31924:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31928:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3192c:	00000693          	addi	a3,zero,0
   31930:	00008617          	auipc	a2,0x8
   31934:	d1360613          	addi	a2,a2,-749 # 39643 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1963>
   31938:	00008597          	auipc	a1,0x8
   3193c:	d0058593          	addi	a1,a1,-768 # 39638 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1958>
   31940:	00011317          	auipc	t1,0x11
   31944:	9c033303          	ld	t1,-1600(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31948:	000300e7          	jalr	ra,0(t1)
   3194c:	e05ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31950:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31954:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31958:	00000693          	addi	a3,zero,0
   3195c:	00008617          	auipc	a2,0x8
   31960:	cfd60613          	addi	a2,a2,-771 # 39659 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1979>
   31964:	00008597          	auipc	a1,0x8
   31968:	ce458593          	addi	a1,a1,-796 # 39648 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1968>
   3196c:	00011317          	auipc	t1,0x11
   31970:	99433303          	ld	t1,-1644(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31974:	000300e7          	jalr	ra,0(t1)
   31978:	dd9ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3197c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31980:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31984:	00000693          	addi	a3,zero,0
   31988:	00008617          	auipc	a2,0x8
   3198c:	ce860613          	addi	a2,a2,-792 # 39670 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1990>
   31990:	00008597          	auipc	a1,0x8
   31994:	cd058593          	addi	a1,a1,-816 # 39660 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1980>
   31998:	00011317          	auipc	t1,0x11
   3199c:	96833303          	ld	t1,-1688(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   319a0:	000300e7          	jalr	ra,0(t1)
   319a4:	dadff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   319a8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   319ac:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   319b0:	00000693          	addi	a3,zero,0
   319b4:	00008617          	auipc	a2,0x8
   319b8:	cd060613          	addi	a2,a2,-816 # 39684 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19a4>
   319bc:	00008597          	auipc	a1,0x8
   319c0:	cbc58593          	addi	a1,a1,-836 # 39678 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1998>
   319c4:	00011317          	auipc	t1,0x11
   319c8:	93c33303          	ld	t1,-1732(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   319cc:	000300e7          	jalr	ra,0(t1)
   319d0:	d81ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   319d4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   319d8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   319dc:	00000693          	addi	a3,zero,0
   319e0:	00008617          	auipc	a2,0x8
   319e4:	cbb60613          	addi	a2,a2,-837 # 3969b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19bb>
   319e8:	00008597          	auipc	a1,0x8
   319ec:	ca058593          	addi	a1,a1,-864 # 39688 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19a8>
   319f0:	00011317          	auipc	t1,0x11
   319f4:	91033303          	ld	t1,-1776(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   319f8:	000300e7          	jalr	ra,0(t1)
   319fc:	d55ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31a00:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31a04:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31a08:	00000693          	addi	a3,zero,0
   31a0c:	00008617          	auipc	a2,0x8
   31a10:	caa60613          	addi	a2,a2,-854 # 396b6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19d6>
   31a14:	00008597          	auipc	a1,0x8
   31a18:	c8c58593          	addi	a1,a1,-884 # 396a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19c0>
   31a1c:	00011317          	auipc	t1,0x11
   31a20:	8e433303          	ld	t1,-1820(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31a24:	000300e7          	jalr	ra,0(t1)
   31a28:	d29ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31a2c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31a30:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31a34:	00000693          	addi	a3,zero,0
   31a38:	00008617          	auipc	a2,0x8
   31a3c:	c8e60613          	addi	a2,a2,-882 # 396c6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19e6>
   31a40:	00008597          	auipc	a1,0x8
   31a44:	c7858593          	addi	a1,a1,-904 # 396b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19d8>
   31a48:	00011317          	auipc	t1,0x11
   31a4c:	8b833303          	ld	t1,-1864(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31a50:	000300e7          	jalr	ra,0(t1)
   31a54:	cfdff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31a58:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31a5c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31a60:	00000693          	addi	a3,zero,0
   31a64:	00008617          	auipc	a2,0x8
   31a68:	c7560613          	addi	a2,a2,-907 # 396d9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19f9>
   31a6c:	00008597          	auipc	a1,0x8
   31a70:	c5c58593          	addi	a1,a1,-932 # 396c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19e8>
   31a74:	00011317          	auipc	t1,0x11
   31a78:	88c33303          	ld	t1,-1908(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31a7c:	000300e7          	jalr	ra,0(t1)
   31a80:	cd1ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31a84:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31a88:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31a8c:	00000693          	addi	a3,zero,0
   31a90:	00008617          	auipc	a2,0x8
   31a94:	c6560613          	addi	a2,a2,-923 # 396f5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a15>
   31a98:	00008597          	auipc	a1,0x8
   31a9c:	c4858593          	addi	a1,a1,-952 # 396e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a00>
   31aa0:	00011317          	auipc	t1,0x11
   31aa4:	86033303          	ld	t1,-1952(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31aa8:	000300e7          	jalr	ra,0(t1)
   31aac:	ca5ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31ab0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31ab4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31ab8:	00000693          	addi	a3,zero,0
   31abc:	00008617          	auipc	a2,0x8
   31ac0:	c4f60613          	addi	a2,a2,-945 # 3970b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a2b>
   31ac4:	00008597          	auipc	a1,0x8
   31ac8:	c3458593          	addi	a1,a1,-972 # 396f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a18>
   31acc:	00011317          	auipc	t1,0x11
   31ad0:	83433303          	ld	t1,-1996(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31ad4:	000300e7          	jalr	ra,0(t1)
   31ad8:	c79ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31adc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31ae0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31ae4:	00000693          	addi	a3,zero,0
   31ae8:	00008617          	auipc	a2,0x8
   31aec:	c3460613          	addi	a2,a2,-972 # 3971c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a3c>
   31af0:	00008597          	auipc	a1,0x8
   31af4:	c2058593          	addi	a1,a1,-992 # 39710 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a30>
   31af8:	00011317          	auipc	t1,0x11
   31afc:	80833303          	ld	t1,-2040(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31b00:	000300e7          	jalr	ra,0(t1)
   31b04:	c4dff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31b08:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31b0c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31b10:	00000693          	addi	a3,zero,0
   31b14:	00008617          	auipc	a2,0x8
   31b18:	c1d60613          	addi	a2,a2,-995 # 39731 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a51>
   31b1c:	00008597          	auipc	a1,0x8
   31b20:	c0458593          	addi	a1,a1,-1020 # 39720 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a40>
   31b24:	00010317          	auipc	t1,0x10
   31b28:	7dc33303          	ld	t1,2012(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31b2c:	000300e7          	jalr	ra,0(t1)
   31b30:	c21ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31b34:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31b38:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31b3c:	00000693          	addi	a3,zero,0
   31b40:	00008617          	auipc	a2,0x8
   31b44:	c0960613          	addi	a2,a2,-1015 # 39749 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a69>
   31b48:	00008597          	auipc	a1,0x8
   31b4c:	bf058593          	addi	a1,a1,-1040 # 39738 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a58>
   31b50:	00010317          	auipc	t1,0x10
   31b54:	7b033303          	ld	t1,1968(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31b58:	000300e7          	jalr	ra,0(t1)
   31b5c:	bf5ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31b60:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31b64:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31b68:	00000693          	addi	a3,zero,0
   31b6c:	00008617          	auipc	a2,0x8
   31b70:	bf260613          	addi	a2,a2,-1038 # 3975e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a7e>
   31b74:	00008597          	auipc	a1,0x8
   31b78:	bdc58593          	addi	a1,a1,-1060 # 39750 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a70>
   31b7c:	00010317          	auipc	t1,0x10
   31b80:	78433303          	ld	t1,1924(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31b84:	000300e7          	jalr	ra,0(t1)
   31b88:	bc9ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31b8c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31b90:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31b94:	00000693          	addi	a3,zero,0
   31b98:	00008617          	auipc	a2,0x8
   31b9c:	bd860613          	addi	a2,a2,-1064 # 39770 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a90>
   31ba0:	00008597          	auipc	a1,0x8
   31ba4:	bc058593          	addi	a1,a1,-1088 # 39760 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a80>
   31ba8:	00010317          	auipc	t1,0x10
   31bac:	75833303          	ld	t1,1880(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31bb0:	000300e7          	jalr	ra,0(t1)
   31bb4:	b9dff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31bb8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31bbc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31bc0:	00000693          	addi	a3,zero,0
   31bc4:	00008617          	auipc	a2,0x8
   31bc8:	bc560613          	addi	a2,a2,-1083 # 39789 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1aa9>
   31bcc:	00008597          	auipc	a1,0x8
   31bd0:	bac58593          	addi	a1,a1,-1108 # 39778 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a98>
   31bd4:	00010317          	auipc	t1,0x10
   31bd8:	72c33303          	ld	t1,1836(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31bdc:	000300e7          	jalr	ra,0(t1)
   31be0:	b71ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31be4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31be8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31bec:	00000693          	addi	a3,zero,0
   31bf0:	00008617          	auipc	a2,0x8
   31bf4:	bb160613          	addi	a2,a2,-1103 # 397a1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ac1>
   31bf8:	00008597          	auipc	a1,0x8
   31bfc:	b9858593          	addi	a1,a1,-1128 # 39790 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ab0>
   31c00:	00010317          	auipc	t1,0x10
   31c04:	70033303          	ld	t1,1792(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31c08:	000300e7          	jalr	ra,0(t1)
   31c0c:	b45ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31c10:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31c14:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31c18:	00000693          	addi	a3,zero,0
   31c1c:	00008617          	auipc	a2,0x8
   31c20:	b9c60613          	addi	a2,a2,-1124 # 397b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ad8>
   31c24:	00008597          	auipc	a1,0x8
   31c28:	b8458593          	addi	a1,a1,-1148 # 397a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ac8>
   31c2c:	00010317          	auipc	t1,0x10
   31c30:	6d433303          	ld	t1,1748(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31c34:	000300e7          	jalr	ra,0(t1)
   31c38:	b19ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31c3c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31c40:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31c44:	00000693          	addi	a3,zero,0
   31c48:	00008617          	auipc	a2,0x8
   31c4c:	b8960613          	addi	a2,a2,-1143 # 397d1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1af1>
   31c50:	00008597          	auipc	a1,0x8
   31c54:	b7058593          	addi	a1,a1,-1168 # 397c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ae0>
   31c58:	00010317          	auipc	t1,0x10
   31c5c:	6a833303          	ld	t1,1704(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31c60:	000300e7          	jalr	ra,0(t1)
   31c64:	aedff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31c68:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31c6c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31c70:	00000693          	addi	a3,zero,0
   31c74:	00008617          	auipc	a2,0x8
   31c78:	b7960613          	addi	a2,a2,-1159 # 397ed <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b0d>
   31c7c:	00008597          	auipc	a1,0x8
   31c80:	b5c58593          	addi	a1,a1,-1188 # 397d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1af8>
   31c84:	00010317          	auipc	t1,0x10
   31c88:	67c33303          	ld	t1,1660(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31c8c:	000300e7          	jalr	ra,0(t1)
   31c90:	ac1ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31c94:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31c98:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31c9c:	00000693          	addi	a3,zero,0
   31ca0:	00008617          	auipc	a2,0x8
   31ca4:	b6360613          	addi	a2,a2,-1181 # 39803 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b23>
   31ca8:	00008597          	auipc	a1,0x8
   31cac:	b4858593          	addi	a1,a1,-1208 # 397f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b10>
   31cb0:	00010317          	auipc	t1,0x10
   31cb4:	65033303          	ld	t1,1616(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31cb8:	000300e7          	jalr	ra,0(t1)
   31cbc:	a95ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31cc0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31cc4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31cc8:	00000693          	addi	a3,zero,0
   31ccc:	00008617          	auipc	a2,0x8
   31cd0:	b4f60613          	addi	a2,a2,-1201 # 3981b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b3b>
   31cd4:	00008597          	auipc	a1,0x8
   31cd8:	b3458593          	addi	a1,a1,-1228 # 39808 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b28>
   31cdc:	00010317          	auipc	t1,0x10
   31ce0:	62433303          	ld	t1,1572(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31ce4:	000300e7          	jalr	ra,0(t1)
   31ce8:	a69ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31cec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31cf0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31cf4:	00000693          	addi	a3,zero,0
   31cf8:	00008617          	auipc	a2,0x8
   31cfc:	b3860613          	addi	a2,a2,-1224 # 39830 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b50>
   31d00:	00008597          	auipc	a1,0x8
   31d04:	b2058593          	addi	a1,a1,-1248 # 39820 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b40>
   31d08:	00010317          	auipc	t1,0x10
   31d0c:	5f833303          	ld	t1,1528(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31d10:	000300e7          	jalr	ra,0(t1)
   31d14:	a3dff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31d18:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31d1c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31d20:	00000693          	addi	a3,zero,0
   31d24:	00008617          	auipc	a2,0x8
   31d28:	b2460613          	addi	a2,a2,-1244 # 39848 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b68>
   31d2c:	00008597          	auipc	a1,0x8
   31d30:	b0c58593          	addi	a1,a1,-1268 # 39838 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b58>
   31d34:	00010317          	auipc	t1,0x10
   31d38:	5cc33303          	ld	t1,1484(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31d3c:	000300e7          	jalr	ra,0(t1)
   31d40:	a11ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31d44:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31d48:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31d4c:	00000693          	addi	a3,zero,0
   31d50:	00008617          	auipc	a2,0x8
   31d54:	b1860613          	addi	a2,a2,-1256 # 39868 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b88>
   31d58:	00008597          	auipc	a1,0x8
   31d5c:	af858593          	addi	a1,a1,-1288 # 39850 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b70>
   31d60:	00010317          	auipc	t1,0x10
   31d64:	5a033303          	ld	t1,1440(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31d68:	000300e7          	jalr	ra,0(t1)
   31d6c:	9e5ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31d70:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31d74:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31d78:	00000693          	addi	a3,zero,0
   31d7c:	00008617          	auipc	a2,0x8
   31d80:	aff60613          	addi	a2,a2,-1281 # 3987b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b9b>
   31d84:	00008597          	auipc	a1,0x8
   31d88:	aec58593          	addi	a1,a1,-1300 # 39870 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b90>
   31d8c:	00010317          	auipc	t1,0x10
   31d90:	57433303          	ld	t1,1396(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31d94:	000300e7          	jalr	ra,0(t1)
   31d98:	9b9ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31d9c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31da0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31da4:	00000693          	addi	a3,zero,0
   31da8:	00008617          	auipc	a2,0x8
   31dac:	af260613          	addi	a2,a2,-1294 # 3989a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bba>
   31db0:	00008597          	auipc	a1,0x8
   31db4:	ad058593          	addi	a1,a1,-1328 # 39880 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ba0>
   31db8:	00010317          	auipc	t1,0x10
   31dbc:	54833303          	ld	t1,1352(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31dc0:	000300e7          	jalr	ra,0(t1)
   31dc4:	98dff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31dc8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31dcc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31dd0:	00000693          	addi	a3,zero,0
   31dd4:	00008617          	auipc	a2,0x8
   31dd8:	add60613          	addi	a2,a2,-1315 # 398b1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bd1>
   31ddc:	00008597          	auipc	a1,0x8
   31de0:	ac458593          	addi	a1,a1,-1340 # 398a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bc0>
   31de4:	00010317          	auipc	t1,0x10
   31de8:	51c33303          	ld	t1,1308(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31dec:	000300e7          	jalr	ra,0(t1)
   31df0:	961ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31df4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31df8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31dfc:	00000693          	addi	a3,zero,0
   31e00:	00008617          	auipc	a2,0x8
   31e04:	ac760613          	addi	a2,a2,-1337 # 398c7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1be7>
   31e08:	00008597          	auipc	a1,0x8
   31e0c:	ab058593          	addi	a1,a1,-1360 # 398b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bd8>
   31e10:	00010317          	auipc	t1,0x10
   31e14:	4f033303          	ld	t1,1264(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31e18:	000300e7          	jalr	ra,0(t1)
   31e1c:	935ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31e20:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31e24:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31e28:	00000693          	addi	a3,zero,0
   31e2c:	00008617          	auipc	a2,0x8
   31e30:	aab60613          	addi	a2,a2,-1365 # 398d7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bf7>
   31e34:	00008597          	auipc	a1,0x8
   31e38:	a9458593          	addi	a1,a1,-1388 # 398c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1be8>
   31e3c:	00010317          	auipc	t1,0x10
   31e40:	4c433303          	ld	t1,1220(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31e44:	000300e7          	jalr	ra,0(t1)
   31e48:	909ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31e4c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31e50:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31e54:	00000693          	addi	a3,zero,0
   31e58:	00008617          	auipc	a2,0x8
   31e5c:	a9160613          	addi	a2,a2,-1391 # 398e9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c09>
   31e60:	00008597          	auipc	a1,0x8
   31e64:	a7858593          	addi	a1,a1,-1416 # 398d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bf8>
   31e68:	00010317          	auipc	t1,0x10
   31e6c:	49833303          	ld	t1,1176(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31e70:	000300e7          	jalr	ra,0(t1)
   31e74:	8ddff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31e78:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31e7c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31e80:	00000693          	addi	a3,zero,0
   31e84:	00008617          	auipc	a2,0x8
   31e88:	a7c60613          	addi	a2,a2,-1412 # 39900 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c20>
   31e8c:	00008597          	auipc	a1,0x8
   31e90:	a6458593          	addi	a1,a1,-1436 # 398f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c10>
   31e94:	00010317          	auipc	t1,0x10
   31e98:	46c33303          	ld	t1,1132(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31e9c:	000300e7          	jalr	ra,0(t1)
   31ea0:	8b1ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31ea4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31ea8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31eac:	00000693          	addi	a3,zero,0
   31eb0:	00008617          	auipc	a2,0x8
   31eb4:	a6660613          	addi	a2,a2,-1434 # 39916 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c36>
   31eb8:	00008597          	auipc	a1,0x8
   31ebc:	a5058593          	addi	a1,a1,-1456 # 39908 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c28>
   31ec0:	00010317          	auipc	t1,0x10
   31ec4:	44033303          	ld	t1,1088(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31ec8:	000300e7          	jalr	ra,0(t1)
   31ecc:	885ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31ed0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31ed4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31ed8:	00000693          	addi	a3,zero,0
   31edc:	00008617          	auipc	a2,0x8
   31ee0:	a4a60613          	addi	a2,a2,-1462 # 39926 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c46>
   31ee4:	00008597          	auipc	a1,0x8
   31ee8:	a3458593          	addi	a1,a1,-1484 # 39918 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c38>
   31eec:	00010317          	auipc	t1,0x10
   31ef0:	41433303          	ld	t1,1044(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31ef4:	000300e7          	jalr	ra,0(t1)
   31ef8:	859ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31efc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31f00:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31f04:	00000693          	addi	a3,zero,0
   31f08:	00008617          	auipc	a2,0x8
   31f0c:	a3060613          	addi	a2,a2,-1488 # 39938 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c58>
   31f10:	00008597          	auipc	a1,0x8
   31f14:	a1858593          	addi	a1,a1,-1512 # 39928 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c48>
   31f18:	00010317          	auipc	t1,0x10
   31f1c:	3e833303          	ld	t1,1000(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31f20:	000300e7          	jalr	ra,0(t1)
   31f24:	82dff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31f28:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31f2c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31f30:	00000693          	addi	a3,zero,0
   31f34:	00008617          	auipc	a2,0x8
   31f38:	a1860613          	addi	a2,a2,-1512 # 3994c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c6c>
   31f3c:	00008597          	auipc	a1,0x8
   31f40:	a0458593          	addi	a1,a1,-1532 # 39940 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c60>
   31f44:	00010317          	auipc	t1,0x10
   31f48:	3bc33303          	ld	t1,956(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31f4c:	000300e7          	jalr	ra,0(t1)
   31f50:	801ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31f54:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31f58:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31f5c:	00000693          	addi	a3,zero,0
   31f60:	00008617          	auipc	a2,0x8
   31f64:	a0560613          	addi	a2,a2,-1531 # 39965 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c85>
   31f68:	00008597          	auipc	a1,0x8
   31f6c:	9e858593          	addi	a1,a1,-1560 # 39950 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c70>
   31f70:	00010317          	auipc	t1,0x10
   31f74:	39033303          	ld	t1,912(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31f78:	000300e7          	jalr	ra,0(t1)
   31f7c:	fd4ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31f80:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31f84:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31f88:	00000693          	addi	a3,zero,0
   31f8c:	00008617          	auipc	a2,0x8
   31f90:	9ec60613          	addi	a2,a2,-1556 # 39978 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c98>
   31f94:	00008597          	auipc	a1,0x8
   31f98:	9d458593          	addi	a1,a1,-1580 # 39968 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c88>
   31f9c:	00010317          	auipc	t1,0x10
   31fa0:	36433303          	ld	t1,868(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31fa4:	000300e7          	jalr	ra,0(t1)
   31fa8:	fa8ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31fac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31fb0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31fb4:	00000693          	addi	a3,zero,0
   31fb8:	00008617          	auipc	a2,0x8
   31fbc:	9db60613          	addi	a2,a2,-1573 # 39993 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cb3>
   31fc0:	00008597          	auipc	a1,0x8
   31fc4:	9c058593          	addi	a1,a1,-1600 # 39980 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ca0>
   31fc8:	00010317          	auipc	t1,0x10
   31fcc:	33833303          	ld	t1,824(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31fd0:	000300e7          	jalr	ra,0(t1)
   31fd4:	f7cff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31fd8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31fdc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31fe0:	00000693          	addi	a3,zero,0
   31fe4:	00008617          	auipc	a2,0x8
   31fe8:	9c260613          	addi	a2,a2,-1598 # 399a6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cc6>
   31fec:	00008597          	auipc	a1,0x8
   31ff0:	9ac58593          	addi	a1,a1,-1620 # 39998 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cb8>
   31ff4:	00010317          	auipc	t1,0x10
   31ff8:	30c33303          	ld	t1,780(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   31ffc:	000300e7          	jalr	ra,0(t1)
   32000:	f50ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32004:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32008:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3200c:	00000693          	addi	a3,zero,0
   32010:	00008617          	auipc	a2,0x8
   32014:	9a560613          	addi	a2,a2,-1627 # 399b5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cd5>
   32018:	00008597          	auipc	a1,0x8
   3201c:	99058593          	addi	a1,a1,-1648 # 399a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cc8>
   32020:	00010317          	auipc	t1,0x10
   32024:	2e033303          	ld	t1,736(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32028:	000300e7          	jalr	ra,0(t1)
   3202c:	f24ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32030:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32034:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32038:	00000693          	addi	a3,zero,0
   3203c:	00008617          	auipc	a2,0x8
   32040:	98f60613          	addi	a2,a2,-1649 # 399cb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ceb>
   32044:	00008597          	auipc	a1,0x8
   32048:	97458593          	addi	a1,a1,-1676 # 399b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cd8>
   3204c:	00010317          	auipc	t1,0x10
   32050:	2b433303          	ld	t1,692(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32054:	000300e7          	jalr	ra,0(t1)
   32058:	ef8ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3205c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32060:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32064:	00000693          	addi	a3,zero,0
   32068:	00008617          	auipc	a2,0x8
   3206c:	97960613          	addi	a2,a2,-1671 # 399e1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d01>
   32070:	00008597          	auipc	a1,0x8
   32074:	96058593          	addi	a1,a1,-1696 # 399d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cf0>
   32078:	00010317          	auipc	t1,0x10
   3207c:	28833303          	ld	t1,648(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32080:	000300e7          	jalr	ra,0(t1)
   32084:	eccff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32088:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3208c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32090:	00000693          	addi	a3,zero,0
   32094:	00008617          	auipc	a2,0x8
   32098:	95e60613          	addi	a2,a2,-1698 # 399f2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d12>
   3209c:	00008597          	auipc	a1,0x8
   320a0:	94c58593          	addi	a1,a1,-1716 # 399e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d08>
   320a4:	00010317          	auipc	t1,0x10
   320a8:	25c33303          	ld	t1,604(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   320ac:	000300e7          	jalr	ra,0(t1)
   320b0:	ea0ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   320b4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   320b8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   320bc:	00000693          	addi	a3,zero,0
   320c0:	00008617          	auipc	a2,0x8
   320c4:	94a60613          	addi	a2,a2,-1718 # 39a0a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d2a>
   320c8:	00008597          	auipc	a1,0x8
   320cc:	93058593          	addi	a1,a1,-1744 # 399f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d18>
   320d0:	00010317          	auipc	t1,0x10
   320d4:	23033303          	ld	t1,560(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   320d8:	000300e7          	jalr	ra,0(t1)
   320dc:	e74ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   320e0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   320e4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   320e8:	00000693          	addi	a3,zero,0
   320ec:	00008617          	auipc	a2,0x8
   320f0:	93c60613          	addi	a2,a2,-1732 # 39a28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d48>
   320f4:	00008597          	auipc	a1,0x8
   320f8:	91c58593          	addi	a1,a1,-1764 # 39a10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d30>
   320fc:	00010317          	auipc	t1,0x10
   32100:	20433303          	ld	t1,516(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32104:	000300e7          	jalr	ra,0(t1)
   32108:	e48ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3210c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32110:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32114:	00000693          	addi	a3,zero,0
   32118:	00008617          	auipc	a2,0x8
   3211c:	92860613          	addi	a2,a2,-1752 # 39a40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d60>
   32120:	00008597          	auipc	a1,0x8
   32124:	91058593          	addi	a1,a1,-1776 # 39a30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d50>
   32128:	00010317          	auipc	t1,0x10
   3212c:	1d833303          	ld	t1,472(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32130:	000300e7          	jalr	ra,0(t1)
   32134:	e1cff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32138:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3213c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32140:	00000693          	addi	a3,zero,0
   32144:	00008617          	auipc	a2,0x8
   32148:	91e60613          	addi	a2,a2,-1762 # 39a62 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d82>
   3214c:	00008597          	auipc	a1,0x8
   32150:	8fc58593          	addi	a1,a1,-1796 # 39a48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d68>
   32154:	00010317          	auipc	t1,0x10
   32158:	1ac33303          	ld	t1,428(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3215c:	000300e7          	jalr	ra,0(t1)
   32160:	df0ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32164:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32168:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3216c:	00000693          	addi	a3,zero,0
   32170:	00008617          	auipc	a2,0x8
   32174:	90760613          	addi	a2,a2,-1785 # 39a77 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d97>
   32178:	00008597          	auipc	a1,0x8
   3217c:	8f058593          	addi	a1,a1,-1808 # 39a68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d88>
   32180:	00010317          	auipc	t1,0x10
   32184:	18033303          	ld	t1,384(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32188:	000300e7          	jalr	ra,0(t1)
   3218c:	dc4ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32190:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32194:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32198:	00000693          	addi	a3,zero,0
   3219c:	00008617          	auipc	a2,0x8
   321a0:	8ec60613          	addi	a2,a2,-1812 # 39a88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1da8>
   321a4:	00008597          	auipc	a1,0x8
   321a8:	8d458593          	addi	a1,a1,-1836 # 39a78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d98>
   321ac:	00010317          	auipc	t1,0x10
   321b0:	15433303          	ld	t1,340(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   321b4:	000300e7          	jalr	ra,0(t1)
   321b8:	d98ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   321bc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   321c0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   321c4:	00000693          	addi	a3,zero,0
   321c8:	00008617          	auipc	a2,0x8
   321cc:	8db60613          	addi	a2,a2,-1829 # 39aa3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dc3>
   321d0:	00008597          	auipc	a1,0x8
   321d4:	8c058593          	addi	a1,a1,-1856 # 39a90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1db0>
   321d8:	00010317          	auipc	t1,0x10
   321dc:	12833303          	ld	t1,296(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   321e0:	000300e7          	jalr	ra,0(t1)
   321e4:	d6cff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   321e8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   321ec:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   321f0:	00000693          	addi	a3,zero,0
   321f4:	00008617          	auipc	a2,0x8
   321f8:	8c560613          	addi	a2,a2,-1851 # 39ab9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dd9>
   321fc:	00008597          	auipc	a1,0x8
   32200:	8ac58593          	addi	a1,a1,-1876 # 39aa8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dc8>
   32204:	00010317          	auipc	t1,0x10
   32208:	0fc33303          	ld	t1,252(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3220c:	000300e7          	jalr	ra,0(t1)
   32210:	d40ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32214:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32218:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3221c:	00000693          	addi	a3,zero,0
   32220:	00008617          	auipc	a2,0x8
   32224:	8ae60613          	addi	a2,a2,-1874 # 39ace <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dee>
   32228:	00008597          	auipc	a1,0x8
   3222c:	89858593          	addi	a1,a1,-1896 # 39ac0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1de0>
   32230:	00010317          	auipc	t1,0x10
   32234:	0d033303          	ld	t1,208(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32238:	000300e7          	jalr	ra,0(t1)
   3223c:	d14ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32240:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32244:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32248:	00000693          	addi	a3,zero,0
   3224c:	00008617          	auipc	a2,0x8
   32250:	89260613          	addi	a2,a2,-1902 # 39ade <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dfe>
   32254:	00008597          	auipc	a1,0x8
   32258:	87c58593          	addi	a1,a1,-1924 # 39ad0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1df0>
   3225c:	00010317          	auipc	t1,0x10
   32260:	0a433303          	ld	t1,164(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32264:	000300e7          	jalr	ra,0(t1)
   32268:	ce8ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3226c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32270:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32274:	00000693          	addi	a3,zero,0
   32278:	00008617          	auipc	a2,0x8
   3227c:	87760613          	addi	a2,a2,-1929 # 39aef <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e0f>
   32280:	00008597          	auipc	a1,0x8
   32284:	86058593          	addi	a1,a1,-1952 # 39ae0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e00>
   32288:	00010317          	auipc	t1,0x10
   3228c:	07833303          	ld	t1,120(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32290:	000300e7          	jalr	ra,0(t1)
   32294:	cbcff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32298:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3229c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   322a0:	00000693          	addi	a3,zero,0
   322a4:	00008617          	auipc	a2,0x8
   322a8:	85860613          	addi	a2,a2,-1960 # 39afc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e1c>
   322ac:	00008597          	auipc	a1,0x8
   322b0:	84458593          	addi	a1,a1,-1980 # 39af0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e10>
   322b4:	00010317          	auipc	t1,0x10
   322b8:	04c33303          	ld	t1,76(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   322bc:	000300e7          	jalr	ra,0(t1)
   322c0:	c90ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   322c4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   322c8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   322cc:	00000693          	addi	a3,zero,0
   322d0:	00008617          	auipc	a2,0x8
   322d4:	84060613          	addi	a2,a2,-1984 # 39b10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e30>
   322d8:	00008597          	auipc	a1,0x8
   322dc:	82858593          	addi	a1,a1,-2008 # 39b00 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e20>
   322e0:	00010317          	auipc	t1,0x10
   322e4:	02033303          	ld	t1,32(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   322e8:	000300e7          	jalr	ra,0(t1)
   322ec:	c64ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   322f0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   322f4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   322f8:	00000693          	addi	a3,zero,0
   322fc:	00008617          	auipc	a2,0x8
   32300:	82d60613          	addi	a2,a2,-2003 # 39b29 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e49>
   32304:	00008597          	auipc	a1,0x8
   32308:	81458593          	addi	a1,a1,-2028 # 39b18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e38>
   3230c:	00010317          	auipc	t1,0x10
   32310:	ff433303          	ld	t1,-12(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32314:	000300e7          	jalr	ra,0(t1)
   32318:	c38ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3231c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32320:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32324:	00000693          	addi	a3,zero,0
   32328:	00008617          	auipc	a2,0x8
   3232c:	81760613          	addi	a2,a2,-2025 # 39b3f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e5f>
   32330:	00008597          	auipc	a1,0x8
   32334:	80058593          	addi	a1,a1,-2048 # 39b30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e50>
   32338:	00010317          	auipc	t1,0x10
   3233c:	fc833303          	ld	t1,-56(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32340:	000300e7          	jalr	ra,0(t1)
   32344:	c0cff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32348:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3234c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32350:	00000693          	addi	a3,zero,0
   32354:	00007617          	auipc	a2,0x7
   32358:	7fb60613          	addi	a2,a2,2043 # 39b4f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e6f>
   3235c:	00007597          	auipc	a1,0x7
   32360:	7e458593          	addi	a1,a1,2020 # 39b40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e60>
   32364:	00010317          	auipc	t1,0x10
   32368:	f9c33303          	ld	t1,-100(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3236c:	000300e7          	jalr	ra,0(t1)
   32370:	be0ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32374:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32378:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3237c:	00000693          	addi	a3,zero,0
   32380:	00007617          	auipc	a2,0x7
   32384:	7e160613          	addi	a2,a2,2017 # 39b61 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e81>
   32388:	00007597          	auipc	a1,0x7
   3238c:	7c858593          	addi	a1,a1,1992 # 39b50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e70>
   32390:	00010317          	auipc	t1,0x10
   32394:	f7033303          	ld	t1,-144(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32398:	000300e7          	jalr	ra,0(t1)
   3239c:	bb4ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   323a0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   323a4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   323a8:	00000693          	addi	a3,zero,0
   323ac:	00007617          	auipc	a2,0x7
   323b0:	7ce60613          	addi	a2,a2,1998 # 39b7a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e9a>
   323b4:	00007597          	auipc	a1,0x7
   323b8:	7b458593          	addi	a1,a1,1972 # 39b68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e88>
   323bc:	00010317          	auipc	t1,0x10
   323c0:	f4433303          	ld	t1,-188(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   323c4:	000300e7          	jalr	ra,0(t1)
   323c8:	b88ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   323cc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   323d0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   323d4:	00000693          	addi	a3,zero,0
   323d8:	00007617          	auipc	a2,0x7
   323dc:	7bb60613          	addi	a2,a2,1979 # 39b93 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1eb3>
   323e0:	00007597          	auipc	a1,0x7
   323e4:	7a058593          	addi	a1,a1,1952 # 39b80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ea0>
   323e8:	00010317          	auipc	t1,0x10
   323ec:	f1833303          	ld	t1,-232(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   323f0:	000300e7          	jalr	ra,0(t1)
   323f4:	b5cff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   323f8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   323fc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32400:	00000693          	addi	a3,zero,0
   32404:	00007617          	auipc	a2,0x7
   32408:	79f60613          	addi	a2,a2,1951 # 39ba3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ec3>
   3240c:	00007597          	auipc	a1,0x7
   32410:	78c58593          	addi	a1,a1,1932 # 39b98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1eb8>
   32414:	00010317          	auipc	t1,0x10
   32418:	eec33303          	ld	t1,-276(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3241c:	000300e7          	jalr	ra,0(t1)
   32420:	b30ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32424:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32428:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3242c:	00000693          	addi	a3,zero,0
   32430:	00007617          	auipc	a2,0x7
   32434:	78a60613          	addi	a2,a2,1930 # 39bba <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1eda>
   32438:	00007597          	auipc	a1,0x7
   3243c:	77058593          	addi	a1,a1,1904 # 39ba8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ec8>
   32440:	00010317          	auipc	t1,0x10
   32444:	ec033303          	ld	t1,-320(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32448:	000300e7          	jalr	ra,0(t1)
   3244c:	b04ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32450:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32454:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32458:	00000693          	addi	a3,zero,0
   3245c:	00007617          	auipc	a2,0x7
   32460:	77560613          	addi	a2,a2,1909 # 39bd1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ef1>
   32464:	00007597          	auipc	a1,0x7
   32468:	75c58593          	addi	a1,a1,1884 # 39bc0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ee0>
   3246c:	00010317          	auipc	t1,0x10
   32470:	e9433303          	ld	t1,-364(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32474:	000300e7          	jalr	ra,0(t1)
   32478:	ad8ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3247c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32480:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32484:	00000693          	addi	a3,zero,0
   32488:	00007617          	auipc	a2,0x7
   3248c:	76460613          	addi	a2,a2,1892 # 39bec <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f0c>
   32490:	00007597          	auipc	a1,0x7
   32494:	74858593          	addi	a1,a1,1864 # 39bd8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ef8>
   32498:	00010317          	auipc	t1,0x10
   3249c:	e6833303          	ld	t1,-408(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   324a0:	000300e7          	jalr	ra,0(t1)
   324a4:	aacff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   324a8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   324ac:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   324b0:	00000693          	addi	a3,zero,0
   324b4:	00007617          	auipc	a2,0x7
   324b8:	74960613          	addi	a2,a2,1865 # 39bfd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f1d>
   324bc:	00007597          	auipc	a1,0x7
   324c0:	73458593          	addi	a1,a1,1844 # 39bf0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f10>
   324c4:	00010317          	auipc	t1,0x10
   324c8:	e3c33303          	ld	t1,-452(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   324cc:	000300e7          	jalr	ra,0(t1)
   324d0:	a80ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   324d4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   324d8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   324dc:	00000693          	addi	a3,zero,0
   324e0:	00007617          	auipc	a2,0x7
   324e4:	73460613          	addi	a2,a2,1844 # 39c14 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f34>
   324e8:	00007597          	auipc	a1,0x7
   324ec:	71858593          	addi	a1,a1,1816 # 39c00 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f20>
   324f0:	00010317          	auipc	t1,0x10
   324f4:	e1033303          	ld	t1,-496(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   324f8:	000300e7          	jalr	ra,0(t1)
   324fc:	a54ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32500:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32504:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32508:	00000693          	addi	a3,zero,0
   3250c:	00007617          	auipc	a2,0x7
   32510:	71a60613          	addi	a2,a2,1818 # 39c26 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f46>
   32514:	00007597          	auipc	a1,0x7
   32518:	70458593          	addi	a1,a1,1796 # 39c18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f38>
   3251c:	00010317          	auipc	t1,0x10
   32520:	de433303          	ld	t1,-540(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32524:	000300e7          	jalr	ra,0(t1)
   32528:	a28ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3252c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32530:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32534:	00000693          	addi	a3,zero,0
   32538:	00007617          	auipc	a2,0x7
   3253c:	70460613          	addi	a2,a2,1796 # 39c3c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f5c>
   32540:	00007597          	auipc	a1,0x7
   32544:	6e858593          	addi	a1,a1,1768 # 39c28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f48>
   32548:	00010317          	auipc	t1,0x10
   3254c:	db833303          	ld	t1,-584(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32550:	000300e7          	jalr	ra,0(t1)
   32554:	9fcff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32558:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3255c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32560:	00000693          	addi	a3,zero,0
   32564:	00007617          	auipc	a2,0x7
   32568:	6eb60613          	addi	a2,a2,1771 # 39c4f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f6f>
   3256c:	00007597          	auipc	a1,0x7
   32570:	6d458593          	addi	a1,a1,1748 # 39c40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f60>
   32574:	00010317          	auipc	t1,0x10
   32578:	d8c33303          	ld	t1,-628(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3257c:	000300e7          	jalr	ra,0(t1)
   32580:	9d0ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32584:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32588:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3258c:	00000693          	addi	a3,zero,0
   32590:	00007617          	auipc	a2,0x7
   32594:	6cf60613          	addi	a2,a2,1743 # 39c5f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f7f>
   32598:	00007597          	auipc	a1,0x7
   3259c:	6b858593          	addi	a1,a1,1720 # 39c50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f70>
   325a0:	00010317          	auipc	t1,0x10
   325a4:	d6033303          	ld	t1,-672(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   325a8:	000300e7          	jalr	ra,0(t1)
   325ac:	9a4ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   325b0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   325b4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   325b8:	00000693          	addi	a3,zero,0
   325bc:	00007617          	auipc	a2,0x7
   325c0:	6ae60613          	addi	a2,a2,1710 # 39c6a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f8a>
   325c4:	00007597          	auipc	a1,0x7
   325c8:	69c58593          	addi	a1,a1,1692 # 39c60 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f80>
   325cc:	00010317          	auipc	t1,0x10
   325d0:	d3433303          	ld	t1,-716(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   325d4:	000300e7          	jalr	ra,0(t1)
   325d8:	978ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   325dc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   325e0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   325e4:	00000693          	addi	a3,zero,0
   325e8:	00007617          	auipc	a2,0x7
   325ec:	69760613          	addi	a2,a2,1687 # 39c7f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f9f>
   325f0:	00007597          	auipc	a1,0x7
   325f4:	68058593          	addi	a1,a1,1664 # 39c70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f90>
   325f8:	00010317          	auipc	t1,0x10
   325fc:	d0833303          	ld	t1,-760(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32600:	000300e7          	jalr	ra,0(t1)
   32604:	94cff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32608:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3260c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32610:	00000693          	addi	a3,zero,0
   32614:	00007617          	auipc	a2,0x7
   32618:	67b60613          	addi	a2,a2,1659 # 39c8f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1faf>
   3261c:	00007597          	auipc	a1,0x7
   32620:	66458593          	addi	a1,a1,1636 # 39c80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fa0>
   32624:	00010317          	auipc	t1,0x10
   32628:	cdc33303          	ld	t1,-804(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   3262c:	000300e7          	jalr	ra,0(t1)
   32630:	920ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32634:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32638:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3263c:	00000693          	addi	a3,zero,0
   32640:	00007617          	auipc	a2,0x7
   32644:	66560613          	addi	a2,a2,1637 # 39ca5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fc5>
   32648:	00007597          	auipc	a1,0x7
   3264c:	64858593          	addi	a1,a1,1608 # 39c90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fb0>
   32650:	00010317          	auipc	t1,0x10
   32654:	cb033303          	ld	t1,-848(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32658:	000300e7          	jalr	ra,0(t1)
   3265c:	8f4ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32660:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32664:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32668:	00000693          	addi	a3,zero,0
   3266c:	00007617          	auipc	a2,0x7
   32670:	65160613          	addi	a2,a2,1617 # 39cbd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fdd>
   32674:	00007597          	auipc	a1,0x7
   32678:	63458593          	addi	a1,a1,1588 # 39ca8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fc8>
   3267c:	00010317          	auipc	t1,0x10
   32680:	c8433303          	ld	t1,-892(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32684:	000300e7          	jalr	ra,0(t1)
   32688:	8c8ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3268c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32690:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32694:	00000693          	addi	a3,zero,0
   32698:	00007617          	auipc	a2,0x7
   3269c:	63860613          	addi	a2,a2,1592 # 39cd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ff0>
   326a0:	00007597          	auipc	a1,0x7
   326a4:	62058593          	addi	a1,a1,1568 # 39cc0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fe0>
   326a8:	00010317          	auipc	t1,0x10
   326ac:	c5833303          	ld	t1,-936(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   326b0:	000300e7          	jalr	ra,0(t1)
   326b4:	89cff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   326b8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   326bc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   326c0:	00000693          	addi	a3,zero,0
   326c4:	00007617          	auipc	a2,0x7
   326c8:	62460613          	addi	a2,a2,1572 # 39ce8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2008>
   326cc:	00007597          	auipc	a1,0x7
   326d0:	60c58593          	addi	a1,a1,1548 # 39cd8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ff8>
   326d4:	00010317          	auipc	t1,0x10
   326d8:	c2c33303          	ld	t1,-980(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   326dc:	000300e7          	jalr	ra,0(t1)
   326e0:	870ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   326e4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   326e8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   326ec:	00000693          	addi	a3,zero,0
   326f0:	00007617          	auipc	a2,0x7
   326f4:	61260613          	addi	a2,a2,1554 # 39d02 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2022>
   326f8:	00007597          	auipc	a1,0x7
   326fc:	5f858593          	addi	a1,a1,1528 # 39cf0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2010>
   32700:	00010317          	auipc	t1,0x10
   32704:	c0033303          	ld	t1,-1024(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32708:	000300e7          	jalr	ra,0(t1)
   3270c:	844ff06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
        return "(DW_AT)0x" + to_hex((int)v);
   32710:	00010493          	addi	s1,sp,0
   32714:	00048513          	addi	a0,s1,0
   32718:	00010317          	auipc	t1,0x10
   3271c:	cf833303          	ld	t1,-776(t1) # 42410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfc4c>
   32720:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   32724:	00900713          	addi	a4,zero,9
   32728:	00007697          	auipc	a3,0x7
   3272c:	5e068693          	addi	a3,a3,1504 # 39d08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2028>
   32730:	00000613          	addi	a2,zero,0
   32734:	00000593          	addi	a1,zero,0
   32738:	00048513          	addi	a0,s1,0
   3273c:	ec5e30ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   32740:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32744:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   32748:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   3274c:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   32750:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   32754:	03278e63          	beq	a5,s2,32790 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x10a8>
      { _M_dataplus._M_p = __p; }
   32758:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   3275c:	0104b783          	ld	a5,16(s1)
   32760:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   32764:	0084b783          	ld	a5,8(s1)
   32768:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   3276c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   32770:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   32774:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   32778:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   3277c:	01010793          	addi	a5,sp,16
   32780:	00f51463          	bne	a0,a5,32788 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x10a0>
   32784:	fcdfe06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   32788:	d29e30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   3278c:	fc5fe06f          	jal	zero,31750 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   32790:	0084b603          	ld	a2,8(s1)
   32794:	00160613          	addi	a2,a2,1
	if (__n == 0)
   32798:	fc0606e3          	beq	a2,zero,32764 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x107c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   3279c:	00090593          	addi	a1,s2,0
   327a0:	db1e30ef          	jal	ra,16550 <memcpy@plt>
   327a4:	fc1ff06f          	jal	zero,32764 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x107c>
      { return _M_dataplus._M_p; }
   327a8:	00050413          	addi	s0,a0,0
   327ac:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   327b0:	01010793          	addi	a5,sp,16
   327b4:	00f50463          	beq	a0,a5,327bc <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x10d4>
   327b8:	cf9e30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   327bc:	00040513          	addi	a0,s0,0
   327c0:	ed1e30ef          	jal	ra,16690 <_Unwind_Resume@plt>

00000000000327c4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)>:
template <typename T> std::string to_hex(T v) {
   327c4:	fd010113          	addi	sp,sp,-48
   327c8:	02113423          	sd	ra,40(sp)
   327cc:	02813023          	sd	s0,32(sp)
   327d0:	00913c23          	sd	s1,24(sp)
   327d4:	00050493          	addi	s1,a0,0
  if (v == 0)
   327d8:	00058c63          	beq	a1,zero,327f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x2c>
  *pos-- = '\0';
   327dc:	00010423          	sb	zero,8(sp)
   327e0:	00710413          	addi	s0,sp,7
    if (digit < 10)
   327e4:	00900693          	addi	a3,zero,9
  while (v && pos >= buf) {
   327e8:	fff10613          	addi	a2,sp,-1
   327ec:	0480006f          	jal	zero,32834 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x70>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   327f0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   327f4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   327f8:	00000693          	addi	a3,zero,0
   327fc:	00006617          	auipc	a2,0x6
   32800:	0cd60613          	addi	a2,a2,205 # 388c9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   32804:	00006597          	auipc	a1,0x6
   32808:	0c458593          	addi	a1,a1,196 # 388c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe8>
   3280c:	00010317          	auipc	t1,0x10
   32810:	af433303          	ld	t1,-1292(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32814:	000300e7          	jalr	ra,0(t1)
   32818:	05c0006f          	jal	zero,32874 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0xb0>
   3281c:	00e40023          	sb	a4,0(s0)
    pos--;
   32820:	fff40793          	addi	a5,s0,-1
    v >>= 4;
   32824:	4045d59b          	sraiw	a1,a1,0x4
  while (v && pos >= buf) {
   32828:	02058063          	beq	a1,zero,32848 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x84>
   3282c:	00c78e63          	beq	a5,a2,32848 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x84>
    pos--;
   32830:	00078413          	addi	s0,a5,0
    int digit = v & 0xf;
   32834:	00f5f793          	andi	a5,a1,15
      *pos = 'a' + (digit - 10);
   32838:	05778713          	addi	a4,a5,87
    if (digit < 10)
   3283c:	fef6c0e3          	blt	a3,a5,3281c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x58>
      *pos = '0' + digit;
   32840:	03078713          	addi	a4,a5,48
   32844:	fd9ff06f          	jal	zero,3281c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x58>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32848:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   3284c:	00f4b023          	sd	a5,0(s1)
	return __builtin_strlen(__s);
   32850:	00040513          	addi	a0,s0,0
   32854:	b6de30ef          	jal	ra,163c0 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   32858:	00000693          	addi	a3,zero,0
   3285c:	00a40633          	add	a2,s0,a0
   32860:	00040593          	addi	a1,s0,0
   32864:	00048513          	addi	a0,s1,0
   32868:	00010317          	auipc	t1,0x10
   3286c:	a9833303          	ld	t1,-1384(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   32870:	000300e7          	jalr	ra,0(t1)
}
   32874:	00048513          	addi	a0,s1,0
   32878:	02813083          	ld	ra,40(sp)
   3287c:	02013403          	ld	s0,32(sp)
   32880:	01813483          	ld	s1,24(sp)
   32884:	03010113          	addi	sp,sp,48
   32888:	00008067          	jalr	zero,0(ra)

000000000003288c <elf::elf::get_hdr() const>:
    // isn't super-cheap.
    m->sections.push_back(section(*this, sec));
  }
}

const Ehdr<> &elf::get_hdr() const { return m->hdr; }
   3288c:	00053503          	ld	a0,0(a0)
   32890:	01050513          	addi	a0,a0,16
   32894:	00008067          	jalr	zero,0(ra)

0000000000032898 <elf::elf::get_loader() const>:

shared_ptr<loader> elf::get_loader() const { return m->l; }
   32898:	ff010113          	addi	sp,sp,-16
   3289c:	00113423          	sd	ra,8(sp)
   328a0:	00813023          	sd	s0,0(sp)
   328a4:	00050413          	addi	s0,a0,0
      { return _M_ptr; }
   328a8:	0005b783          	ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   328ac:	0007b703          	ld	a4,0(a5)
   328b0:	00e53023          	sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   328b4:	0087b503          	ld	a0,8(a5)
   328b8:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   328bc:	02050063          	beq	a0,zero,328dc <elf::elf::get_loader() const+0x44>
    if (__is_single_threaded())
   328c0:	00010797          	auipc	a5,0x10
   328c4:	bb87b783          	ld	a5,-1096(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   328c8:	0007c783          	lbu	a5,0(a5)
   328cc:	02078263          	beq	a5,zero,328f0 <elf::elf::get_loader() const+0x58>
  { *__mem += __val; }
   328d0:	03052783          	lw	a5,48(a0)
   328d4:	0017879b          	addiw	a5,a5,1
   328d8:	02f52823          	sw	a5,48(a0)
   328dc:	00040513          	addi	a0,s0,0
   328e0:	00813083          	ld	ra,8(sp)
   328e4:	00013403          	ld	s0,0(sp)
   328e8:	01010113          	addi	sp,sp,16
   328ec:	00008067          	jalr	zero,0(ra)
      __atomic_add(__mem, __val);
   328f0:	00100593          	addi	a1,zero,1
   328f4:	03050513          	addi	a0,a0,48
   328f8:	a09e30ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   328fc:	fe1ff06f          	jal	zero,328dc <elf::elf::get_loader() const+0x44>

0000000000032900 <elf::elf::sections() const>:

const std::vector<section> &elf::sections() const { return m->sections; }
   32900:	00053503          	ld	a0,0(a0)
   32904:	05050513          	addi	a0,a0,80
   32908:	00008067          	jalr	zero,0(ra)

000000000003290c <elf::elf::segments() const>:

const std::vector<segment> &elf::segments() const { return m->segments; }
   3290c:	00053503          	ld	a0,0(a0)
   32910:	06850513          	addi	a0,a0,104
   32914:	00008067          	jalr	zero,0(ra)

0000000000032918 <elf::elf::get_section(unsigned int) const>:
    if (name == sec.get_name(nullptr))
      return sec;
  return m->invalid_section;
}

const section &elf::get_section(unsigned index) const {
   32918:	fe010113          	addi	sp,sp,-32
   3291c:	00113c23          	sd	ra,24(sp)
   32920:	00813823          	sd	s0,16(sp)
   32924:	00913423          	sd	s1,8(sp)
   32928:	00050493          	addi	s1,a0,0
  if (index >= sections().size())
   3292c:	02059413          	slli	s0,a1,0x20
   32930:	02045413          	srli	s0,s0,0x20
   32934:	fcdff0ef          	jal	ra,32900 <elf::elf::sections() const>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   32938:	00853783          	ld	a5,8(a0)
   3293c:	00053703          	ld	a4,0(a0)
   32940:	40e787b3          	sub	a5,a5,a4
   32944:	4047d793          	srai	a5,a5,0x4
   32948:	02f46063          	bltu	s0,a5,32968 <elf::elf::get_section(unsigned int) const+0x50>
    return m->invalid_section;
   3294c:	0004b503          	ld	a0,0(s1)
   32950:	08050513          	addi	a0,a0,128
  return sections().at(index);
}
   32954:	01813083          	ld	ra,24(sp)
   32958:	01013403          	ld	s0,16(sp)
   3295c:	00813483          	ld	s1,8(sp)
   32960:	02010113          	addi	sp,sp,32
   32964:	00008067          	jalr	zero,0(ra)
  return sections().at(index);
   32968:	00048513          	addi	a0,s1,0
   3296c:	f95ff0ef          	jal	ra,32900 <elf::elf::sections() const>
   32970:	00053783          	ld	a5,0(a0)
   32974:	00853603          	ld	a2,8(a0)
   32978:	40f60633          	sub	a2,a2,a5
   3297c:	40465613          	srai	a2,a2,0x4
	return *(this->_M_impl._M_start + __n);
   32980:	00441713          	slli	a4,s0,0x4
   32984:	00e78533          	add	a0,a5,a4
	if (__n >= this->size())
   32988:	fcc466e3          	bltu	s0,a2,32954 <elf::elf::get_section(unsigned int) const+0x3c>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   3298c:	00040593          	addi	a1,s0,0
   32990:	00008517          	auipc	a0,0x8
   32994:	aa850513          	addi	a0,a0,-1368 # 3a438 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2758>
   32998:	c49e30ef          	jal	ra,165e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>

000000000003299c <elf::elf::get_segment(unsigned int) const>:

const segment &elf::get_segment(unsigned index) const {
   3299c:	fe010113          	addi	sp,sp,-32
   329a0:	00113c23          	sd	ra,24(sp)
   329a4:	00813823          	sd	s0,16(sp)
   329a8:	00913423          	sd	s1,8(sp)
   329ac:	00050493          	addi	s1,a0,0
  if (index >= segments().size())
   329b0:	02059413          	slli	s0,a1,0x20
   329b4:	02045413          	srli	s0,s0,0x20
   329b8:	f55ff0ef          	jal	ra,3290c <elf::elf::segments() const>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   329bc:	00853783          	ld	a5,8(a0)
   329c0:	00053703          	ld	a4,0(a0)
   329c4:	40e787b3          	sub	a5,a5,a4
   329c8:	4047d793          	srai	a5,a5,0x4
   329cc:	02f46063          	bltu	s0,a5,329ec <elf::elf::get_segment(unsigned int) const+0x50>
    return m->invalid_segment;
   329d0:	0004b503          	ld	a0,0(s1)
   329d4:	09050513          	addi	a0,a0,144
  return segments().at(index);
}
   329d8:	01813083          	ld	ra,24(sp)
   329dc:	01013403          	ld	s0,16(sp)
   329e0:	00813483          	ld	s1,8(sp)
   329e4:	02010113          	addi	sp,sp,32
   329e8:	00008067          	jalr	zero,0(ra)
  return segments().at(index);
   329ec:	00048513          	addi	a0,s1,0
   329f0:	f1dff0ef          	jal	ra,3290c <elf::elf::segments() const>
   329f4:	00053783          	ld	a5,0(a0)
   329f8:	00853603          	ld	a2,8(a0)
   329fc:	40f60633          	sub	a2,a2,a5
   32a00:	40465613          	srai	a2,a2,0x4
	return *(this->_M_impl._M_start + __n);
   32a04:	00441713          	slli	a4,s0,0x4
   32a08:	00e78533          	add	a0,a5,a4
	if (__n >= this->size())
   32a0c:	fcc466e3          	bltu	s0,a2,329d8 <elf::elf::get_segment(unsigned int) const+0x3c>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   32a10:	00040593          	addi	a1,s0,0
   32a14:	00008517          	auipc	a0,0x8
   32a18:	a2450513          	addi	a0,a0,-1500 # 3a438 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2758>
   32a1c:	bc5e30ef          	jal	ra,165e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>

0000000000032a20 <elf::segment::get_hdr() const>:

segment::segment(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
}

const Phdr<> &segment::get_hdr() const { return m->hdr; }
   32a20:	00053503          	ld	a0,0(a0)
   32a24:	01050513          	addi	a0,a0,16
   32a28:	00008067          	jalr	zero,0(ra)

0000000000032a2c <elf::segment::data() const>:

const void *segment::data() const {
   32a2c:	fd010113          	addi	sp,sp,-48
   32a30:	02113423          	sd	ra,40(sp)
   32a34:	02813023          	sd	s0,32(sp)
   32a38:	00913c23          	sd	s1,24(sp)
   32a3c:	00050413          	addi	s0,a0,0
      { return _M_ptr; }
   32a40:	00053583          	ld	a1,0(a0)
  if (!m->data)
   32a44:	0485b783          	ld	a5,72(a1)
   32a48:	02078063          	beq	a5,zero,32a68 <elf::segment::data() const+0x3c>
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.filesz);
  return m->data;
   32a4c:	00043783          	ld	a5,0(s0)
   32a50:	0487b503          	ld	a0,72(a5)
}
   32a54:	02813083          	ld	ra,40(sp)
   32a58:	02013403          	ld	s0,32(sp)
   32a5c:	01813483          	ld	s1,24(sp)
   32a60:	03010113          	addi	sp,sp,48
   32a64:	00008067          	jalr	zero,0(ra)
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.filesz);
   32a68:	00010513          	addi	a0,sp,0
   32a6c:	e2dff0ef          	jal	ra,32898 <elf::elf::get_loader() const>
   32a70:	00013503          	ld	a0,0(sp)
   32a74:	00043483          	ld	s1,0(s0)
   32a78:	00053783          	ld	a5,0(a0)
   32a7c:	0107b783          	ld	a5,16(a5)
   32a80:	0304b603          	ld	a2,48(s1)
   32a84:	0184b583          	ld	a1,24(s1)
   32a88:	000780e7          	jalr	ra,0(a5)
   32a8c:	04a4b423          	sd	a0,72(s1)
	if (_M_pi != nullptr)
   32a90:	00813483          	ld	s1,8(sp)
   32a94:	fa048ce3          	beq	s1,zero,32a4c <elf::segment::data() const+0x20>
    if (__is_single_threaded())
   32a98:	00010797          	auipc	a5,0x10
   32a9c:	9e07b783          	ld	a5,-1568(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   32aa0:	0007c783          	lbu	a5,0(a5)
   32aa4:	06078263          	beq	a5,zero,32b08 <elf::segment::data() const+0xdc>
    _Atomic_word __result = *__mem;
   32aa8:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   32aac:	fff5079b          	addiw	a5,a0,-1
   32ab0:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   32ab4:	00100793          	addi	a5,zero,1
   32ab8:	f8f51ae3          	bne	a0,a5,32a4c <elf::segment::data() const+0x20>
	_M_dispose();
   32abc:	0004b783          	ld	a5,0(s1)
   32ac0:	0107b783          	ld	a5,16(a5)
   32ac4:	00048513          	addi	a0,s1,0
   32ac8:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   32acc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   32ad0:	00010797          	auipc	a5,0x10
   32ad4:	9a87b783          	ld	a5,-1624(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   32ad8:	0007c783          	lbu	a5,0(a5)
   32adc:	02078e63          	beq	a5,zero,32b18 <elf::segment::data() const+0xec>
    _Atomic_word __result = *__mem;
   32ae0:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   32ae4:	fff5079b          	addiw	a5,a0,-1
   32ae8:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   32aec:	00100793          	addi	a5,zero,1
   32af0:	f4f51ee3          	bne	a0,a5,32a4c <elf::segment::data() const+0x20>
	    _M_destroy();
   32af4:	0004b783          	ld	a5,0(s1)
   32af8:	0187b783          	ld	a5,24(a5)
   32afc:	00048513          	addi	a0,s1,0
   32b00:	000780e7          	jalr	ra,0(a5)
   32b04:	f49ff06f          	jal	zero,32a4c <elf::segment::data() const+0x20>
      return __exchange_and_add(__mem, __val);
   32b08:	fff00593          	addi	a1,zero,-1
   32b0c:	03048513          	addi	a0,s1,48
   32b10:	821e30ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   32b14:	fa1ff06f          	jal	zero,32ab4 <elf::segment::data() const+0x88>
   32b18:	fff00593          	addi	a1,zero,-1
   32b1c:	03448513          	addi	a0,s1,52
   32b20:	811e30ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   32b24:	fc9ff06f          	jal	zero,32aec <elf::segment::data() const+0xc0>
	if (_M_pi != nullptr)
   32b28:	00050413          	addi	s0,a0,0
   32b2c:	00813503          	ld	a0,8(sp)
   32b30:	00050863          	beq	a0,zero,32b40 <elf::segment::data() const+0x114>
	  _M_pi->_M_release();
   32b34:	00010317          	auipc	t1,0x10
   32b38:	88c33303          	ld	t1,-1908(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   32b3c:	000300e7          	jalr	ra,0(t1)
   32b40:	00040513          	addi	a0,s0,0
   32b44:	b4de30ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000032b48 <elf::segment::file_size() const>:

size_t segment::file_size() const { return m->hdr.filesz; }
   32b48:	00053783          	ld	a5,0(a0)
   32b4c:	0307b503          	ld	a0,48(a5)
   32b50:	00008067          	jalr	zero,0(ra)

0000000000032b54 <elf::segment::mem_size() const>:

size_t segment::mem_size() const { return m->hdr.memsz; }
   32b54:	00053783          	ld	a5,0(a0)
   32b58:	0387b503          	ld	a0,56(a5)
   32b5c:	00008067          	jalr	zero,0(ra)

0000000000032b60 <elf::section::get_hdr() const>:

section::section(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
}

const Shdr<> &section::get_hdr() const { return m->hdr; }
   32b60:	00053503          	ld	a0,0(a0)
   32b64:	01050513          	addi	a0,a0,16
   32b68:	00008067          	jalr	zero,0(ra)

0000000000032b6c <elf::section::data() const>:
      { return _M_ptr; }
   32b6c:	00053583          	ld	a1,0(a0)
}

string section::get_name() const { return get_name(nullptr); }

const void *section::data() const {
  if (m->hdr.type == sht::nobits)
   32b70:	0145a703          	lw	a4,20(a1)
   32b74:	00800793          	addi	a5,zero,8
   32b78:	0ef70e63          	beq	a4,a5,32c74 <elf::section::data() const+0x108>
const void *section::data() const {
   32b7c:	fd010113          	addi	sp,sp,-48
   32b80:	02113423          	sd	ra,40(sp)
   32b84:	02813023          	sd	s0,32(sp)
   32b88:	00913c23          	sd	s1,24(sp)
   32b8c:	00050413          	addi	s0,a0,0
    return nullptr;
  if (!m->data)
   32b90:	0605b783          	ld	a5,96(a1)
   32b94:	02078063          	beq	a5,zero,32bb4 <elf::section::data() const+0x48>
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.size);
  return m->data;
   32b98:	00043783          	ld	a5,0(s0)
   32b9c:	0607b503          	ld	a0,96(a5)
}
   32ba0:	02813083          	ld	ra,40(sp)
   32ba4:	02013403          	ld	s0,32(sp)
   32ba8:	01813483          	ld	s1,24(sp)
   32bac:	03010113          	addi	sp,sp,48
   32bb0:	00008067          	jalr	zero,0(ra)
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.size);
   32bb4:	00010513          	addi	a0,sp,0
   32bb8:	ce1ff0ef          	jal	ra,32898 <elf::elf::get_loader() const>
   32bbc:	00013503          	ld	a0,0(sp)
   32bc0:	00043483          	ld	s1,0(s0)
   32bc4:	00053783          	ld	a5,0(a0)
   32bc8:	0107b783          	ld	a5,16(a5)
   32bcc:	0304b603          	ld	a2,48(s1)
   32bd0:	0284b583          	ld	a1,40(s1)
   32bd4:	000780e7          	jalr	ra,0(a5)
   32bd8:	06a4b023          	sd	a0,96(s1)
	if (_M_pi != nullptr)
   32bdc:	00813483          	ld	s1,8(sp)
   32be0:	fa048ce3          	beq	s1,zero,32b98 <elf::section::data() const+0x2c>
    if (__is_single_threaded())
   32be4:	00010797          	auipc	a5,0x10
   32be8:	8947b783          	ld	a5,-1900(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   32bec:	0007c783          	lbu	a5,0(a5)
   32bf0:	06078263          	beq	a5,zero,32c54 <elf::section::data() const+0xe8>
    _Atomic_word __result = *__mem;
   32bf4:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   32bf8:	fff5079b          	addiw	a5,a0,-1
   32bfc:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   32c00:	00100793          	addi	a5,zero,1
   32c04:	f8f51ae3          	bne	a0,a5,32b98 <elf::section::data() const+0x2c>
	_M_dispose();
   32c08:	0004b783          	ld	a5,0(s1)
   32c0c:	0107b783          	ld	a5,16(a5)
   32c10:	00048513          	addi	a0,s1,0
   32c14:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   32c18:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   32c1c:	00010797          	auipc	a5,0x10
   32c20:	85c7b783          	ld	a5,-1956(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   32c24:	0007c783          	lbu	a5,0(a5)
   32c28:	02078e63          	beq	a5,zero,32c64 <elf::section::data() const+0xf8>
    _Atomic_word __result = *__mem;
   32c2c:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   32c30:	fff5079b          	addiw	a5,a0,-1
   32c34:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   32c38:	00100793          	addi	a5,zero,1
   32c3c:	f4f51ee3          	bne	a0,a5,32b98 <elf::section::data() const+0x2c>
	    _M_destroy();
   32c40:	0004b783          	ld	a5,0(s1)
   32c44:	0187b783          	ld	a5,24(a5)
   32c48:	00048513          	addi	a0,s1,0
   32c4c:	000780e7          	jalr	ra,0(a5)
   32c50:	f49ff06f          	jal	zero,32b98 <elf::section::data() const+0x2c>
      return __exchange_and_add(__mem, __val);
   32c54:	fff00593          	addi	a1,zero,-1
   32c58:	03048513          	addi	a0,s1,48
   32c5c:	ed4e30ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   32c60:	fa1ff06f          	jal	zero,32c00 <elf::section::data() const+0x94>
   32c64:	fff00593          	addi	a1,zero,-1
   32c68:	03448513          	addi	a0,s1,52
   32c6c:	ec4e30ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   32c70:	fc9ff06f          	jal	zero,32c38 <elf::section::data() const+0xcc>
    return nullptr;
   32c74:	00000513          	addi	a0,zero,0
}
   32c78:	00008067          	jalr	zero,0(ra)
	if (_M_pi != nullptr)
   32c7c:	00050413          	addi	s0,a0,0
   32c80:	00813503          	ld	a0,8(sp)
   32c84:	00050863          	beq	a0,zero,32c94 <elf::section::data() const+0x128>
	  _M_pi->_M_release();
   32c88:	0000f317          	auipc	t1,0xf
   32c8c:	73833303          	ld	t1,1848(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   32c90:	000300e7          	jalr	ra,0(t1)
   32c94:	00040513          	addi	a0,s0,0
   32c98:	9f9e30ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000032c9c <elf::section::size() const>:

size_t section::size() const { return m->hdr.size; }
   32c9c:	00053783          	ld	a5,0(a0)
   32ca0:	0307b503          	ld	a0,48(a5)
   32ca4:	00008067          	jalr	zero,0(ra)

0000000000032ca8 <elf::strtab::strtab(elf::elf, void const*, unsigned long)>:

  const elf f;
  const char *data, *end;
};

strtab::strtab(elf f, const void *data, size_t size)
   32ca8:	fd010113          	addi	sp,sp,-48
   32cac:	02113423          	sd	ra,40(sp)
   32cb0:	02813023          	sd	s0,32(sp)
   32cb4:	00913c23          	sd	s1,24(sp)
   32cb8:	01213823          	sd	s2,16(sp)
   32cbc:	01313423          	sd	s3,8(sp)
   32cc0:	01413023          	sd	s4,0(sp)
   32cc4:	00050913          	addi	s2,a0,0
   32cc8:	00058493          	addi	s1,a1,0
   32ccc:	00060993          	addi	s3,a2,0
    : m(make_shared<impl>(f, (const char *)data, (const char *)data + size)) {}
   32cd0:	00d60a33          	add	s4,a2,a3
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   32cd4:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   32cd8:	05800513          	addi	a0,zero,88
   32cdc:	fe4e30ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   32ce0:	00050413          	addi	s0,a0,0
   32ce4:	00052423          	sw	zero,8(a0)
   32ce8:	00052623          	sw	zero,12(a0)
   32cec:	00052823          	sw	zero,16(a0)
   32cf0:	00052a23          	sw	zero,20(a0)
   32cf4:	00052c23          	sw	zero,24(a0)
   32cf8:	00052e23          	sw	zero,28(a0)
   32cfc:	02053023          	sd	zero,32(a0)
   32d00:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   32d04:	00100793          	addi	a5,zero,1
   32d08:	02f52823          	sw	a5,48(a0)
   32d0c:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   32d10:	00010797          	auipc	a5,0x10
   32d14:	8d87b783          	ld	a5,-1832(a5) # 425e8 <vtable for std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x908>
   32d18:	01078793          	addi	a5,a5,16
   32d1c:	00f53023          	sd	a5,0(a0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   32d20:	0004b783          	ld	a5,0(s1)
   32d24:	02f53c23          	sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   32d28:	0084b503          	ld	a0,8(s1)
   32d2c:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   32d30:	02050063          	beq	a0,zero,32d50 <elf::strtab::strtab(elf::elf, void const*, unsigned long)+0xa8>
    if (__is_single_threaded())
   32d34:	0000f717          	auipc	a4,0xf
   32d38:	74473703          	ld	a4,1860(a4) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   32d3c:	00074703          	lbu	a4,0(a4)
   32d40:	04070263          	beq	a4,zero,32d84 <elf::strtab::strtab(elf::elf, void const*, unsigned long)+0xdc>
  { *__mem += __val; }
   32d44:	03052703          	lw	a4,48(a0)
   32d48:	0017071b          	addiw	a4,a4,1
   32d4c:	02e52823          	sw	a4,48(a0)
      : f(f), data(data), end(end) {}
   32d50:	05343423          	sd	s3,72(s0)
   32d54:	05443823          	sd	s4,80(s0)
	  _M_pi = __pi;
   32d58:	00893423          	sd	s0,8(s2)
   32d5c:	03840413          	addi	s0,s0,56
	  __p = __pi->_M_ptr();
   32d60:	00893023          	sd	s0,0(s2)
    : m(make_shared<impl>(f, (const char *)data, (const char *)data + size)) {}
   32d64:	02813083          	ld	ra,40(sp)
   32d68:	02013403          	ld	s0,32(sp)
   32d6c:	01813483          	ld	s1,24(sp)
   32d70:	01013903          	ld	s2,16(sp)
   32d74:	00813983          	ld	s3,8(sp)
   32d78:	00013a03          	ld	s4,0(sp)
   32d7c:	03010113          	addi	sp,sp,48
   32d80:	00008067          	jalr	zero,0(ra)
      __atomic_add(__mem, __val);
   32d84:	00100593          	addi	a1,zero,1
   32d88:	03050513          	addi	a0,a0,48
   32d8c:	d74e30ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   32d90:	fc1ff06f          	jal	zero,32d50 <elf::strtab::strtab(elf::elf, void const*, unsigned long)+0xa8>

0000000000032d94 <elf::section::as_strtab() const>:
strtab section::as_strtab() const {
   32d94:	fd010113          	addi	sp,sp,-48
   32d98:	02113423          	sd	ra,40(sp)
   32d9c:	02813023          	sd	s0,32(sp)
   32da0:	00913c23          	sd	s1,24(sp)
   32da4:	01213823          	sd	s2,16(sp)
      { return _M_ptr; }
   32da8:	0005b783          	ld	a5,0(a1)
  if (m->hdr.type != sht::strtab)
   32dac:	0147a683          	lw	a3,20(a5)
   32db0:	00300713          	addi	a4,zero,3
   32db4:	04e69463          	bne	a3,a4,32dfc <elf::section::as_strtab() const+0x68>
   32db8:	00050913          	addi	s2,a0,0
   32dbc:	00058413          	addi	s0,a1,0
      __shared_ptr(const __shared_ptr&) noexcept = default;
   32dc0:	0007b703          	ld	a4,0(a5)
   32dc4:	00e13023          	sd	a4,0(sp)
      : _M_pi(__r._M_pi)
   32dc8:	0087b503          	ld	a0,8(a5)
   32dcc:	00a13423          	sd	a0,8(sp)
	if (_M_pi != nullptr)
   32dd0:	02050063          	beq	a0,zero,32df0 <elf::section::as_strtab() const+0x5c>
    if (__is_single_threaded())
   32dd4:	0000f717          	auipc	a4,0xf
   32dd8:	6a473703          	ld	a4,1700(a4) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   32ddc:	00074703          	lbu	a4,0(a4)
   32de0:	04070e63          	beq	a4,zero,32e3c <elf::section::as_strtab() const+0xa8>
  { *__mem += __val; }
   32de4:	03052703          	lw	a4,48(a0)
   32de8:	0017071b          	addiw	a4,a4,1
   32dec:	02e52823          	sw	a4,48(a0)
  return strtab(m->f, data(), size());
   32df0:	00040513          	addi	a0,s0,0
   32df4:	d79ff0ef          	jal	ra,32b6c <elf::section::data() const>
   32df8:	0540006f          	jal	zero,32e4c <elf::section::as_strtab() const+0xb8>
    throw section_type_mismatch("cannot use section as strtab");
   32dfc:	01000513          	addi	a0,zero,16
   32e00:	dd0e30ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   32e04:	00050413          	addi	s0,a0,0
class section_type_mismatch : public std::logic_error {
public:
  explicit section_type_mismatch(const std::string &what_arg)
      : std::logic_error(what_arg) {}
  explicit section_type_mismatch(const char *what_arg)
      : std::logic_error(what_arg) {}
   32e08:	00007597          	auipc	a1,0x7
   32e0c:	68058593          	addi	a1,a1,1664 # 3a488 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27a8>
   32e10:	f10e30ef          	jal	ra,16520 <std::logic_error::logic_error(char const*)@plt>
   32e14:	0000f797          	auipc	a5,0xf
   32e18:	59c7b783          	ld	a5,1436(a5) # 423b0 <vtable for elf::section_type_mismatch@@Base+0x7a0>
   32e1c:	01078793          	addi	a5,a5,16
   32e20:	00f43023          	sd	a5,0(s0)
   32e24:	0000f617          	auipc	a2,0xf
   32e28:	47c63603          	ld	a2,1148(a2) # 422a0 <elf::section_type_mismatch::~section_type_mismatch()@@Base+0xd8f4>
   32e2c:	0000f597          	auipc	a1,0xf
   32e30:	4ac5b583          	ld	a1,1196(a1) # 422d8 <typeinfo for elf::section_type_mismatch@@Base+0x780>
   32e34:	00040513          	addi	a0,s0,0
   32e38:	829e30ef          	jal	ra,16660 <__cxa_throw@plt>
      __atomic_add(__mem, __val);
   32e3c:	00100593          	addi	a1,zero,1
   32e40:	03050513          	addi	a0,a0,48
   32e44:	cbce30ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   32e48:	fa9ff06f          	jal	zero,32df0 <elf::section::as_strtab() const+0x5c>
  return strtab(m->f, data(), size());
   32e4c:	00050493          	addi	s1,a0,0
   32e50:	00040513          	addi	a0,s0,0
   32e54:	e49ff0ef          	jal	ra,32c9c <elf::section::size() const>
   32e58:	00050693          	addi	a3,a0,0
   32e5c:	00048613          	addi	a2,s1,0
   32e60:	00010593          	addi	a1,sp,0
   32e64:	00090513          	addi	a0,s2,0
   32e68:	e41ff0ef          	jal	ra,32ca8 <elf::strtab::strtab(elf::elf, void const*, unsigned long)>
	if (_M_pi != nullptr)
   32e6c:	00813403          	ld	s0,8(sp)
   32e70:	02040463          	beq	s0,zero,32e98 <elf::section::as_strtab() const+0x104>
    if (__is_single_threaded())
   32e74:	0000f797          	auipc	a5,0xf
   32e78:	6047b783          	ld	a5,1540(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   32e7c:	0007c783          	lbu	a5,0(a5)
   32e80:	02078a63          	beq	a5,zero,32eb4 <elf::section::as_strtab() const+0x120>
    _Atomic_word __result = *__mem;
   32e84:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   32e88:	fff5079b          	addiw	a5,a0,-1
   32e8c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   32e90:	00100793          	addi	a5,zero,1
   32e94:	02f50863          	beq	a0,a5,32ec4 <elf::section::as_strtab() const+0x130>
}
   32e98:	00090513          	addi	a0,s2,0
   32e9c:	02813083          	ld	ra,40(sp)
   32ea0:	02013403          	ld	s0,32(sp)
   32ea4:	01813483          	ld	s1,24(sp)
   32ea8:	01013903          	ld	s2,16(sp)
   32eac:	03010113          	addi	sp,sp,48
   32eb0:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   32eb4:	fff00593          	addi	a1,zero,-1
   32eb8:	03040513          	addi	a0,s0,48
   32ebc:	c74e30ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   32ec0:	fd1ff06f          	jal	zero,32e90 <elf::section::as_strtab() const+0xfc>
	_M_dispose();
   32ec4:	00043783          	ld	a5,0(s0)
   32ec8:	0107b783          	ld	a5,16(a5)
   32ecc:	00040513          	addi	a0,s0,0
   32ed0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   32ed4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   32ed8:	0000f797          	auipc	a5,0xf
   32edc:	5a07b783          	ld	a5,1440(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   32ee0:	0007c783          	lbu	a5,0(a5)
   32ee4:	02078663          	beq	a5,zero,32f10 <elf::section::as_strtab() const+0x17c>
    _Atomic_word __result = *__mem;
   32ee8:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   32eec:	fff5079b          	addiw	a5,a0,-1
   32ef0:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   32ef4:	00100793          	addi	a5,zero,1
   32ef8:	faf510e3          	bne	a0,a5,32e98 <elf::section::as_strtab() const+0x104>
	    _M_destroy();
   32efc:	00043783          	ld	a5,0(s0)
   32f00:	0187b783          	ld	a5,24(a5)
   32f04:	00040513          	addi	a0,s0,0
   32f08:	000780e7          	jalr	ra,0(a5)
  return strtab(m->f, data(), size());
   32f0c:	f8dff06f          	jal	zero,32e98 <elf::section::as_strtab() const+0x104>
      return __exchange_and_add(__mem, __val);
   32f10:	fff00593          	addi	a1,zero,-1
   32f14:	03440513          	addi	a0,s0,52
   32f18:	c18e30ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   32f1c:	fd9ff06f          	jal	zero,32ef4 <elf::section::as_strtab() const+0x160>
    throw section_type_mismatch("cannot use section as strtab");
   32f20:	00050493          	addi	s1,a0,0
   32f24:	00040513          	addi	a0,s0,0
   32f28:	d48e30ef          	jal	ra,16470 <__cxa_free_exception@plt>
   32f2c:	00048513          	addi	a0,s1,0
   32f30:	f60e30ef          	jal	ra,16690 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   32f34:	00050413          	addi	s0,a0,0
   32f38:	00813503          	ld	a0,8(sp)
   32f3c:	00050863          	beq	a0,zero,32f4c <elf::section::as_strtab() const+0x1b8>
	  _M_pi->_M_release();
   32f40:	0000f317          	auipc	t1,0xf
   32f44:	48033303          	ld	t1,1152(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   32f48:	000300e7          	jalr	ra,0(t1)
   32f4c:	00040513          	addi	a0,s0,0
   32f50:	f40e30ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000032f54 <elf::strtab::get(unsigned long, unsigned long*) const>:

const char *strtab::get(Elf64::Off offset, size_t *len_out) const {
   32f54:	f8010113          	addi	sp,sp,-128
   32f58:	06113c23          	sd	ra,120(sp)
   32f5c:	06813823          	sd	s0,112(sp)
   32f60:	06913423          	sd	s1,104(sp)
      { return _M_ptr; }
   32f64:	00053783          	ld	a5,0(a0)
  const char *start = m->data + offset;
   32f68:	0107b503          	ld	a0,16(a5)
   32f6c:	00b50533          	add	a0,a0,a1

  if (start >= m->end)
   32f70:	0187b683          	ld	a3,24(a5)
    throw range_error("string offset " + std::to_string(offset) +
                      " exceeds section size");

  // Find the null terminator
  const char *p = start;
   32f74:	00050793          	addi	a5,a0,0
  if (start >= m->end)
   32f78:	02d57863          	bgeu	a0,a3,32fa8 <elf::strtab::get(unsigned long, unsigned long*) const+0x54>
  while (p < m->end && *p)
   32f7c:	0007c703          	lbu	a4,0(a5)
   32f80:	1c070e63          	beq	a4,zero,3315c <elf::strtab::get(unsigned long, unsigned long*) const+0x208>
    p++;
   32f84:	00178793          	addi	a5,a5,1
  while (p < m->end && *p)
   32f88:	fef69ae3          	bne	a3,a5,32f7c <elf::strtab::get(unsigned long, unsigned long*) const+0x28>
  if (p == m->end)
    throw format_error("unterminated string");
   32f8c:	01000513          	addi	a0,zero,16
   32f90:	c40e30ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   32f94:	00050413          	addi	s0,a0,0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   32f98:	00004597          	auipc	a1,0x4
   32f9c:	d5058593          	addi	a1,a1,-688 # 36ce8 <std::piecewise_construct+0x38>
   32fa0:	f70e30ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   32fa4:	1dc0006f          	jal	zero,33180 <elf::strtab::get(unsigned long, unsigned long*) const+0x22c>
   32fa8:	00058413          	addi	s0,a1,0
                      " exceeds section size");
   32fac:	01000513          	addi	a0,zero,16
   32fb0:	c20e30ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   32fb4:	00050493          	addi	s1,a0,0
   32fb8:	00040793          	addi	a5,s0,0
      unsigned __n = 1;
   32fbc:	00100593          	addi	a1,zero,1
	  if (__value < (unsigned)__base) return __n;
   32fc0:	00900813          	addi	a6,zero,9
	  if (__value < __b2) return __n + 1;
   32fc4:	06300513          	addi	a0,zero,99
	  if (__value < __b3) return __n + 2;
   32fc8:	3e700613          	addi	a2,zero,999
	  if (__value < __b4) return __n + 3;
   32fcc:	00002737          	lui	a4,0x2
   32fd0:	70f70693          	addi	a3,a4,1807 # 270f <__abi_tag-0xdb85>
	  __value /= __b4;
   32fd4:	71070713          	addi	a4,a4,1808
	  if (__value < (unsigned)__base) return __n;
   32fd8:	00f87663          	bgeu	a6,a5,32fe4 <elf::strtab::get(unsigned long, unsigned long*) const+0x90>
	  if (__value < __b2) return __n + 1;
   32fdc:	02f56463          	bltu	a0,a5,33004 <elf::strtab::get(unsigned long, unsigned long*) const+0xb0>
   32fe0:	0015859b          	addiw	a1,a1,1
	: allocator_type(__a), _M_p(__dat) { }
   32fe4:	01010793          	addi	a5,sp,16
   32fe8:	00f13023          	sd	a5,0(sp)
      { _M_construct(__n, __c); }
   32fec:	00000613          	addi	a2,zero,0
   32ff0:	02059593          	slli	a1,a1,0x20
   32ff4:	0205d593          	srli	a1,a1,0x20
   32ff8:	00010513          	addi	a0,sp,0
   32ffc:	d14e30ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
   33000:	0280006f          	jal	zero,33028 <elf::strtab::get(unsigned long, unsigned long*) const+0xd4>
	  if (__value < __b3) return __n + 2;
   33004:	00f66663          	bltu	a2,a5,33010 <elf::strtab::get(unsigned long, unsigned long*) const+0xbc>
   33008:	0025859b          	addiw	a1,a1,2
   3300c:	fd9ff06f          	jal	zero,32fe4 <elf::strtab::get(unsigned long, unsigned long*) const+0x90>
	  if (__value < __b4) return __n + 3;
   33010:	00f6e663          	bltu	a3,a5,3301c <elf::strtab::get(unsigned long, unsigned long*) const+0xc8>
   33014:	0035859b          	addiw	a1,a1,3
   33018:	fcdff06f          	jal	zero,32fe4 <elf::strtab::get(unsigned long, unsigned long*) const+0x90>
	  __value /= __b4;
   3301c:	02e7d7b3          	divu	a5,a5,a4
	  __n += 4;
   33020:	0045859b          	addiw	a1,a1,4
	  if (__value < (unsigned)__base) return __n;
   33024:	fb5ff06f          	jal	zero,32fd8 <elf::strtab::get(unsigned long, unsigned long*) const+0x84>
      { return _M_dataplus._M_p; }
   33028:	00013603          	ld	a2,0(sp)
      unsigned __pos = __len - 1;
   3302c:	00813783          	ld	a5,8(sp)
   33030:	fff7879b          	addiw	a5,a5,-1
      while (__val >= 100)
   33034:	06300813          	addi	a6,zero,99
	  auto const __num = (__val % 100) * 2;
   33038:	06400593          	addi	a1,zero,100
	  __first[__pos] = __digits[__num + 1];
   3303c:	0000f517          	auipc	a0,0xf
   33040:	42453503          	ld	a0,1060(a0) # 42460 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb2b8>
      while (__val >= 100)
   33044:	04886263          	bltu	a6,s0,33088 <elf::strtab::get(unsigned long, unsigned long*) const+0x134>
      if (__val >= 10)
   33048:	00900793          	addi	a5,zero,9
   3304c:	0887f063          	bgeu	a5,s0,330cc <elf::strtab::get(unsigned long, unsigned long*) const+0x178>
	  auto const __num = __val * 2;
   33050:	00141413          	slli	s0,s0,0x1
	  __first[1] = __digits[__num + 1];
   33054:	0000f797          	auipc	a5,0xf
   33058:	40c7b783          	ld	a5,1036(a5) # 42460 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb2b8>
   3305c:	008787b3          	add	a5,a5,s0
   33060:	0017c703          	lbu	a4,1(a5)
   33064:	00e600a3          	sb	a4,1(a2)
	  __first[0] = __digits[__num];
   33068:	0007c783          	lbu	a5,0(a5)
   3306c:	00f60023          	sb	a5,0(a2)
    { return std::move(__rhs.insert(0, __lhs)); }
   33070:	00007617          	auipc	a2,0x7
   33074:	43860613          	addi	a2,a2,1080 # 3a4a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27c8>
   33078:	00000593          	addi	a1,zero,0
   3307c:	00010513          	addi	a0,sp,0
   33080:	ac0e30ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   33084:	0540006f          	jal	zero,330d8 <elf::strtab::get(unsigned long, unsigned long*) const+0x184>
	  auto const __num = (__val % 100) * 2;
   33088:	02b47733          	remu	a4,s0,a1
   3308c:	00171713          	slli	a4,a4,0x1
	  __val /= 100;
   33090:	02b45433          	divu	s0,s0,a1
	  __first[__pos] = __digits[__num + 1];
   33094:	02079693          	slli	a3,a5,0x20
   33098:	0206d693          	srli	a3,a3,0x20
   3309c:	00d606b3          	add	a3,a2,a3
   330a0:	00e50733          	add	a4,a0,a4
   330a4:	00174883          	lbu	a7,1(a4)
   330a8:	01168023          	sb	a7,0(a3)
	  __first[__pos - 1] = __digits[__num];
   330ac:	fff7869b          	addiw	a3,a5,-1
   330b0:	02069693          	slli	a3,a3,0x20
   330b4:	0206d693          	srli	a3,a3,0x20
   330b8:	00d606b3          	add	a3,a2,a3
   330bc:	00074703          	lbu	a4,0(a4)
   330c0:	00e68023          	sb	a4,0(a3)
	  __pos -= 2;
   330c4:	ffe7879b          	addiw	a5,a5,-2
   330c8:	f7dff06f          	jal	zero,33044 <elf::strtab::get(unsigned long, unsigned long*) const+0xf0>
	__first[0] = '0' + __val;
   330cc:	0304079b          	addiw	a5,s0,48
   330d0:	0ff7f793          	andi	a5,a5,255
   330d4:	f99ff06f          	jal	zero,3306c <elf::strtab::get(unsigned long, unsigned long*) const+0x118>
   330d8:	00050593          	addi	a1,a0,0
   330dc:	02010413          	addi	s0,sp,32
   330e0:	00040513          	addi	a0,s0,0
   330e4:	b2ce30ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   330e8:	00007597          	auipc	a1,0x7
   330ec:	3d058593          	addi	a1,a1,976 # 3a4b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27d8>
   330f0:	00040513          	addi	a0,s0,0
   330f4:	e4ce30ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   330f8:	00050593          	addi	a1,a0,0
   330fc:	04010413          	addi	s0,sp,64
   33100:	00040513          	addi	a0,s0,0
   33104:	b0ce30ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    throw range_error("string offset " + std::to_string(offset) +
   33108:	00040593          	addi	a1,s0,0
   3310c:	00048513          	addi	a0,s1,0
   33110:	e40e30ef          	jal	ra,16750 <std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   33114:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   33118:	05010793          	addi	a5,sp,80
   3311c:	00f50463          	beq	a0,a5,33124 <elf::strtab::get(unsigned long, unsigned long*) const+0x1d0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   33120:	b90e30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   33124:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   33128:	03010793          	addi	a5,sp,48
   3312c:	00f50463          	beq	a0,a5,33134 <elf::strtab::get(unsigned long, unsigned long*) const+0x1e0>
   33130:	b80e30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   33134:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   33138:	01010793          	addi	a5,sp,16
   3313c:	00f50463          	beq	a0,a5,33144 <elf::strtab::get(unsigned long, unsigned long*) const+0x1f0>
   33140:	b70e30ef          	jal	ra,164b0 <operator delete(void*)@plt>
                      " exceeds section size");
   33144:	0000f617          	auipc	a2,0xf
   33148:	29463603          	ld	a2,660(a2) # 423d8 <std::range_error::~range_error()@GLIBCXX_3.4>
   3314c:	0000f597          	auipc	a1,0xf
   33150:	3fc5b583          	ld	a1,1020(a1) # 42548 <typeinfo for std::range_error@GLIBCXX_3.4>
   33154:	00048513          	addi	a0,s1,0
   33158:	d08e30ef          	jal	ra,16660 <__cxa_throw@plt>
  if (p == m->end)
   3315c:	e2f688e3          	beq	a3,a5,32f8c <elf::strtab::get(unsigned long, unsigned long*) const+0x38>

  if (len_out)
   33160:	00060663          	beq	a2,zero,3316c <elf::strtab::get(unsigned long, unsigned long*) const+0x218>
    *len_out = p - start;
   33164:	40a787b3          	sub	a5,a5,a0
   33168:	00f63023          	sd	a5,0(a2)
  return start;
}
   3316c:	07813083          	ld	ra,120(sp)
   33170:	07013403          	ld	s0,112(sp)
   33174:	06813483          	ld	s1,104(sp)
   33178:	08010113          	addi	sp,sp,128
   3317c:	00008067          	jalr	zero,0(ra)
   33180:	0000f797          	auipc	a5,0xf
   33184:	1b87b783          	ld	a5,440(a5) # 42338 <vtable for elf::format_error@@Base+0x750>
   33188:	01078793          	addi	a5,a5,16
   3318c:	00f43023          	sd	a5,0(s0)
    throw format_error("unterminated string");
   33190:	0000f617          	auipc	a2,0xf
   33194:	3d063603          	ld	a2,976(a2) # 42560 <elf::format_error::~format_error()@@Base+0xdd74>
   33198:	0000f597          	auipc	a1,0xf
   3319c:	1805b583          	ld	a1,384(a1) # 42318 <typeinfo for elf::format_error@@Base+0x7d8>
   331a0:	00040513          	addi	a0,s0,0
   331a4:	cbce30ef          	jal	ra,16660 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   331a8:	00050413          	addi	s0,a0,0
   331ac:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   331b0:	05010793          	addi	a5,sp,80
   331b4:	00f50463          	beq	a0,a5,331bc <elf::strtab::get(unsigned long, unsigned long*) const+0x268>
   331b8:	af8e30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   331bc:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   331c0:	03010793          	addi	a5,sp,48
   331c4:	00f50463          	beq	a0,a5,331cc <elf::strtab::get(unsigned long, unsigned long*) const+0x278>
   331c8:	ae8e30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   331cc:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   331d0:	01010793          	addi	a5,sp,16
   331d4:	00f50463          	beq	a0,a5,331dc <elf::strtab::get(unsigned long, unsigned long*) const+0x288>
   331d8:	ad8e30ef          	jal	ra,164b0 <operator delete(void*)@plt>
                      " exceeds section size");
   331dc:	00048513          	addi	a0,s1,0
   331e0:	a90e30ef          	jal	ra,16470 <__cxa_free_exception@plt>
   331e4:	00040513          	addi	a0,s0,0
   331e8:	ca8e30ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   331ec:	00050413          	addi	s0,a0,0
   331f0:	fcdff06f          	jal	zero,331bc <elf::strtab::get(unsigned long, unsigned long*) const+0x268>
   331f4:	00050413          	addi	s0,a0,0
   331f8:	fd5ff06f          	jal	zero,331cc <elf::strtab::get(unsigned long, unsigned long*) const+0x278>
   331fc:	00050413          	addi	s0,a0,0
   33200:	fddff06f          	jal	zero,331dc <elf::strtab::get(unsigned long, unsigned long*) const+0x288>
    throw format_error("unterminated string");
   33204:	00050493          	addi	s1,a0,0
   33208:	00040513          	addi	a0,s0,0
   3320c:	a64e30ef          	jal	ra,16470 <__cxa_free_exception@plt>
   33210:	00048513          	addi	a0,s1,0
   33214:	c7ce30ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000033218 <elf::section::get_name(unsigned long*) const>:
const char *section::get_name(size_t *len_out) const {
   33218:	fc010113          	addi	sp,sp,-64
   3321c:	02113c23          	sd	ra,56(sp)
   33220:	02813823          	sd	s0,48(sp)
   33224:	02913423          	sd	s1,40(sp)
   33228:	03213023          	sd	s2,32(sp)
   3322c:	01313c23          	sd	s3,24(sp)
   33230:	00050413          	addi	s0,a0,0
   33234:	00058493          	addi	s1,a1,0
   33238:	00053903          	ld	s2,0(a0)
  if (!m->name)
   3323c:	05093783          	ld	a5,80(s2)
   33240:	02078c63          	beq	a5,zero,33278 <elf::section::get_name(unsigned long*) const+0x60>
  if (len_out)
   33244:	00048863          	beq	s1,zero,33254 <elf::section::get_name(unsigned long*) const+0x3c>
    *len_out = m->name_len;
   33248:	00043783          	ld	a5,0(s0)
   3324c:	0587b783          	ld	a5,88(a5)
   33250:	00f4b023          	sd	a5,0(s1)
  return m->name;
   33254:	00043783          	ld	a5,0(s0)
   33258:	0507b503          	ld	a0,80(a5)
}
   3325c:	03813083          	ld	ra,56(sp)
   33260:	03013403          	ld	s0,48(sp)
   33264:	02813483          	ld	s1,40(sp)
   33268:	02013903          	ld	s2,32(sp)
   3326c:	01813983          	ld	s3,24(sp)
   33270:	04010113          	addi	sp,sp,64
   33274:	00008067          	jalr	zero,0(ra)
    m->name = m->f.get_section(m->f.get_hdr().shstrndx)
   33278:	00090513          	addi	a0,s2,0
   3327c:	e10ff0ef          	jal	ra,3288c <elf::elf::get_hdr() const>
   33280:	03e55583          	lhu	a1,62(a0)
   33284:	00090513          	addi	a0,s2,0
   33288:	e90ff0ef          	jal	ra,32918 <elf::elf::get_section(unsigned int) const>
   3328c:	00050593          	addi	a1,a0,0
                  .as_strtab()
   33290:	00010913          	addi	s2,sp,0
   33294:	00090513          	addi	a0,s2,0
   33298:	afdff0ef          	jal	ra,32d94 <elf::section::as_strtab() const>
   3329c:	00043983          	ld	s3,0(s0)
                  .get(m->hdr.name, &m->name_len);
   332a0:	05898613          	addi	a2,s3,88
   332a4:	0109e583          	lwu	a1,16(s3)
   332a8:	00090513          	addi	a0,s2,0
   332ac:	ca9ff0ef          	jal	ra,32f54 <elf::strtab::get(unsigned long, unsigned long*) const>
    m->name = m->f.get_section(m->f.get_hdr().shstrndx)
   332b0:	04a9b823          	sd	a0,80(s3)
	if (_M_pi != nullptr)
   332b4:	00813903          	ld	s2,8(sp)
   332b8:	f80906e3          	beq	s2,zero,33244 <elf::section::get_name(unsigned long*) const+0x2c>
    if (__is_single_threaded())
   332bc:	0000f797          	auipc	a5,0xf
   332c0:	1bc7b783          	ld	a5,444(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   332c4:	0007c783          	lbu	a5,0(a5)
   332c8:	06078263          	beq	a5,zero,3332c <elf::section::get_name(unsigned long*) const+0x114>
    _Atomic_word __result = *__mem;
   332cc:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   332d0:	fff5079b          	addiw	a5,a0,-1
   332d4:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   332d8:	00100793          	addi	a5,zero,1
   332dc:	f6f514e3          	bne	a0,a5,33244 <elf::section::get_name(unsigned long*) const+0x2c>
	_M_dispose();
   332e0:	00093783          	ld	a5,0(s2)
   332e4:	0107b783          	ld	a5,16(a5)
   332e8:	00090513          	addi	a0,s2,0
   332ec:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   332f0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   332f4:	0000f797          	auipc	a5,0xf
   332f8:	1847b783          	ld	a5,388(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   332fc:	0007c783          	lbu	a5,0(a5)
   33300:	02078e63          	beq	a5,zero,3333c <elf::section::get_name(unsigned long*) const+0x124>
    _Atomic_word __result = *__mem;
   33304:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   33308:	fff5079b          	addiw	a5,a0,-1
   3330c:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   33310:	00100793          	addi	a5,zero,1
   33314:	f2f518e3          	bne	a0,a5,33244 <elf::section::get_name(unsigned long*) const+0x2c>
	    _M_destroy();
   33318:	00093783          	ld	a5,0(s2)
   3331c:	0187b783          	ld	a5,24(a5)
   33320:	00090513          	addi	a0,s2,0
   33324:	000780e7          	jalr	ra,0(a5)
   33328:	f1dff06f          	jal	zero,33244 <elf::section::get_name(unsigned long*) const+0x2c>
      return __exchange_and_add(__mem, __val);
   3332c:	fff00593          	addi	a1,zero,-1
   33330:	03090513          	addi	a0,s2,48
   33334:	ffde20ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   33338:	fa1ff06f          	jal	zero,332d8 <elf::section::get_name(unsigned long*) const+0xc0>
   3333c:	fff00593          	addi	a1,zero,-1
   33340:	03490513          	addi	a0,s2,52
   33344:	fede20ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   33348:	fc9ff06f          	jal	zero,33310 <elf::section::get_name(unsigned long*) const+0xf8>
	if (_M_pi != nullptr)
   3334c:	00050413          	addi	s0,a0,0
   33350:	00813503          	ld	a0,8(sp)
   33354:	00050863          	beq	a0,zero,33364 <elf::section::get_name(unsigned long*) const+0x14c>
	  _M_pi->_M_release();
   33358:	0000f317          	auipc	t1,0xf
   3335c:	06833303          	ld	t1,104(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   33360:	000300e7          	jalr	ra,0(t1)
   33364:	00040513          	addi	a0,s0,0
   33368:	b28e30ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000003336c <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>:
const section &elf::get_section(const std::string &name) const {
   3336c:	fd010113          	addi	sp,sp,-48
   33370:	02113423          	sd	ra,40(sp)
   33374:	02813023          	sd	s0,32(sp)
   33378:	00913c23          	sd	s1,24(sp)
   3337c:	01213823          	sd	s2,16(sp)
   33380:	01313423          	sd	s3,8(sp)
   33384:	01413023          	sd	s4,0(sp)
   33388:	00050a13          	addi	s4,a0,0
   3338c:	00058493          	addi	s1,a1,0
  for (auto &sec : sections())
   33390:	d70ff0ef          	jal	ra,32900 <elf::elf::sections() const>
      : _M_current(__i) { }
   33394:	00053403          	ld	s0,0(a0)
   33398:	00853983          	ld	s3,8(a0)
   3339c:	03340663          	beq	s0,s3,333c8 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x5c>
   333a0:	00040913          	addi	s2,s0,0
    if (name == sec.get_name(nullptr))
   333a4:	00000593          	addi	a1,zero,0
   333a8:	00040513          	addi	a0,s0,0
   333ac:	e6dff0ef          	jal	ra,33218 <elf::section::get_name(unsigned long*) const>
    { return __lhs.compare(__rhs) == 0; }
   333b0:	00050593          	addi	a1,a0,0
   333b4:	00048513          	addi	a0,s1,0
   333b8:	f99e20ef          	jal	ra,16350 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
   333bc:	00050a63          	beq	a0,zero,333d0 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x64>
  for (auto &sec : sections())
   333c0:	01040413          	addi	s0,s0,16
   333c4:	fc899ee3          	bne	s3,s0,333a0 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x34>
  return m->invalid_section;
   333c8:	000a3903          	ld	s2,0(s4)
   333cc:	08090913          	addi	s2,s2,128
}
   333d0:	00090513          	addi	a0,s2,0
   333d4:	02813083          	ld	ra,40(sp)
   333d8:	02013403          	ld	s0,32(sp)
   333dc:	01813483          	ld	s1,24(sp)
   333e0:	01013903          	ld	s2,16(sp)
   333e4:	00813983          	ld	s3,8(sp)
   333e8:	00013a03          	ld	s4,0(sp)
   333ec:	03010113          	addi	sp,sp,48
   333f0:	00008067          	jalr	zero,0(ra)

00000000000333f4 <elf::sym::get_name(unsigned long*) const>:

sym::sym(elf f, const void *data, strtab strs) : strs(strs) {
  canon_hdr(&this->data, data, f.get_hdr().ei_class, f.get_hdr().ei_data);
}

const char *sym::get_name(size_t *len_out) const {
   333f4:	ff010113          	addi	sp,sp,-16
   333f8:	00113423          	sd	ra,8(sp)
   333fc:	00058613          	addi	a2,a1,0
  return strs.get(get_data().name, len_out);
   33400:	01056583          	lwu	a1,16(a0)
   33404:	b51ff0ef          	jal	ra,32f54 <elf::strtab::get(unsigned long, unsigned long*) const>
}
   33408:	00813083          	ld	ra,8(sp)
   3340c:	01010113          	addi	sp,sp,16
   33410:	00008067          	jalr	zero,0(ra)

0000000000033414 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)>:
  const elf f;
  const char *data, *end;
  const strtab strs;
};

symtab::symtab(elf f, const void *data, size_t size, strtab strs)
   33414:	fb010113          	addi	sp,sp,-80
   33418:	04113423          	sd	ra,72(sp)
   3341c:	04813023          	sd	s0,64(sp)
   33420:	02913c23          	sd	s1,56(sp)
   33424:	03213823          	sd	s2,48(sp)
   33428:	03313423          	sd	s3,40(sp)
   3342c:	03413023          	sd	s4,32(sp)
   33430:	01513c23          	sd	s5,24(sp)
   33434:	01613823          	sd	s6,16(sp)
   33438:	01713423          	sd	s7,8(sp)
   3343c:	00050913          	addi	s2,a0,0
   33440:	00058a13          	addi	s4,a1,0
   33444:	00060993          	addi	s3,a2,0
   33448:	00070493          	addi	s1,a4,0
    : m(make_shared<impl>(f, (const char *)data, (const char *)data + size,
   3344c:	00d60ab3          	add	s5,a2,a3
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   33450:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   33454:	06800513          	addi	a0,zero,104
   33458:	868e30ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   3345c:	00050413          	addi	s0,a0,0
   33460:	00052423          	sw	zero,8(a0)
   33464:	00052623          	sw	zero,12(a0)
   33468:	00052823          	sw	zero,16(a0)
   3346c:	00052a23          	sw	zero,20(a0)
   33470:	00052c23          	sw	zero,24(a0)
   33474:	00052e23          	sw	zero,28(a0)
   33478:	02053023          	sd	zero,32(a0)
   3347c:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   33480:	00100793          	addi	a5,zero,1
   33484:	02f52823          	sw	a5,48(a0)
   33488:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   3348c:	0000f797          	auipc	a5,0xf
   33490:	eb47b783          	ld	a5,-332(a5) # 42340 <vtable for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x628>
   33494:	01078793          	addi	a5,a5,16
   33498:	00f53023          	sd	a5,0(a0)
   3349c:	03850b13          	addi	s6,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   334a0:	0004bb83          	ld	s7,0(s1)
      : _M_pi(__r._M_pi)
   334a4:	0084b483          	ld	s1,8(s1)
	if (_M_pi != nullptr)
   334a8:	02048063          	beq	s1,zero,334c8 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xb4>
    if (__is_single_threaded())
   334ac:	0000f797          	auipc	a5,0xf
   334b0:	fcc7b783          	ld	a5,-52(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   334b4:	0007c783          	lbu	a5,0(a5)
   334b8:	0a078c63          	beq	a5,zero,33570 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x15c>
  { *__mem += __val; }
   334bc:	0304a783          	lw	a5,48(s1)
   334c0:	0017879b          	addiw	a5,a5,1
   334c4:	02f4a823          	sw	a5,48(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   334c8:	000a3783          	ld	a5,0(s4)
   334cc:	02f43c23          	sd	a5,56(s0)
      : _M_pi(__r._M_pi)
   334d0:	008a3503          	ld	a0,8(s4)
   334d4:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   334d8:	02050063          	beq	a0,zero,334f8 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xe4>
    if (__is_single_threaded())
   334dc:	0000f717          	auipc	a4,0xf
   334e0:	f9c73703          	ld	a4,-100(a4) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   334e4:	00074703          	lbu	a4,0(a4)
   334e8:	08070c63          	beq	a4,zero,33580 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x16c>
  { *__mem += __val; }
   334ec:	03052703          	lw	a4,48(a0)
   334f0:	0017071b          	addiw	a4,a4,1
   334f4:	02e52823          	sw	a4,48(a0)
      : f(f), data(data), end(end), strs(strs) {}
   334f8:	05343423          	sd	s3,72(s0)
   334fc:	05543823          	sd	s5,80(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   33500:	05743c23          	sd	s7,88(s0)
      : _M_pi(__r._M_pi)
   33504:	06943023          	sd	s1,96(s0)
	if (_M_pi != nullptr)
   33508:	02048a63          	beq	s1,zero,3353c <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x128>
    if (__is_single_threaded())
   3350c:	0000f797          	auipc	a5,0xf
   33510:	f6c7b783          	ld	a5,-148(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33514:	0007c783          	lbu	a5,0(a5)
   33518:	06078c63          	beq	a5,zero,33590 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x17c>
  { *__mem += __val; }
   3351c:	0304a783          	lw	a5,48(s1)
   33520:	0017879b          	addiw	a5,a5,1
   33524:	02f4a823          	sw	a5,48(s1)
    _Atomic_word __result = *__mem;
   33528:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   3352c:	fff5079b          	addiw	a5,a0,-1
   33530:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   33534:	00100793          	addi	a5,zero,1
   33538:	08f50263          	beq	a0,a5,335bc <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x1a8>
	  _M_pi = __pi;
   3353c:	00893423          	sd	s0,8(s2)
	  __p = __pi->_M_ptr();
   33540:	01693023          	sd	s6,0(s2)
                          strs)) {}
   33544:	04813083          	ld	ra,72(sp)
   33548:	04013403          	ld	s0,64(sp)
   3354c:	03813483          	ld	s1,56(sp)
   33550:	03013903          	ld	s2,48(sp)
   33554:	02813983          	ld	s3,40(sp)
   33558:	02013a03          	ld	s4,32(sp)
   3355c:	01813a83          	ld	s5,24(sp)
   33560:	01013b03          	ld	s6,16(sp)
   33564:	00813b83          	ld	s7,8(sp)
   33568:	05010113          	addi	sp,sp,80
   3356c:	00008067          	jalr	zero,0(ra)
      __atomic_add(__mem, __val);
   33570:	00100593          	addi	a1,zero,1
   33574:	03048513          	addi	a0,s1,48
   33578:	d89e20ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   3357c:	f4dff06f          	jal	zero,334c8 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xb4>
   33580:	00100593          	addi	a1,zero,1
   33584:	03050513          	addi	a0,a0,48
   33588:	d79e20ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   3358c:	f6dff06f          	jal	zero,334f8 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xe4>
   33590:	00100593          	addi	a1,zero,1
   33594:	03048513          	addi	a0,s1,48
   33598:	d69e20ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
    if (__is_single_threaded())
   3359c:	0000f797          	auipc	a5,0xf
   335a0:	edc7b783          	ld	a5,-292(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   335a4:	0007c783          	lbu	a5,0(a5)
   335a8:	f80790e3          	bne	a5,zero,33528 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x114>
      return __exchange_and_add(__mem, __val);
   335ac:	fff00593          	addi	a1,zero,-1
   335b0:	03048513          	addi	a0,s1,48
   335b4:	d7de20ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   335b8:	f7dff06f          	jal	zero,33534 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x120>
	_M_dispose();
   335bc:	0004b783          	ld	a5,0(s1)
   335c0:	0107b783          	ld	a5,16(a5)
   335c4:	00048513          	addi	a0,s1,0
   335c8:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   335cc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   335d0:	0000f797          	auipc	a5,0xf
   335d4:	ea87b783          	ld	a5,-344(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   335d8:	0007c783          	lbu	a5,0(a5)
   335dc:	02078663          	beq	a5,zero,33608 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x1f4>
    _Atomic_word __result = *__mem;
   335e0:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   335e4:	fff5079b          	addiw	a5,a0,-1
   335e8:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   335ec:	00100793          	addi	a5,zero,1
   335f0:	f4f516e3          	bne	a0,a5,3353c <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x128>
	    _M_destroy();
   335f4:	0004b783          	ld	a5,0(s1)
   335f8:	0187b783          	ld	a5,24(a5)
   335fc:	00048513          	addi	a0,s1,0
   33600:	000780e7          	jalr	ra,0(a5)
   33604:	f39ff06f          	jal	zero,3353c <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x128>
      return __exchange_and_add(__mem, __val);
   33608:	fff00593          	addi	a1,zero,-1
   3360c:	03448513          	addi	a0,s1,52
   33610:	d21e20ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   33614:	fd9ff06f          	jal	zero,335ec <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x1d8>

0000000000033618 <elf::section::as_symtab() const>:
symtab section::as_symtab() const {
   33618:	fb010113          	addi	sp,sp,-80
   3361c:	04113423          	sd	ra,72(sp)
   33620:	04813023          	sd	s0,64(sp)
   33624:	02913c23          	sd	s1,56(sp)
   33628:	03213823          	sd	s2,48(sp)
   3362c:	03313423          	sd	s3,40(sp)
   33630:	03413023          	sd	s4,32(sp)
   33634:	00050493          	addi	s1,a0,0
   33638:	00058413          	addi	s0,a1,0
      { return _M_ptr; }
   3363c:	0005b783          	ld	a5,0(a1)
  if (m->hdr.type != sht::symtab && m->hdr.type != sht::dynsym)
   33640:	0147a703          	lw	a4,20(a5)
   33644:	00200693          	addi	a3,zero,2
   33648:	00d70663          	beq	a4,a3,33654 <elf::section::as_symtab() const+0x3c>
   3364c:	00b00693          	addi	a3,zero,11
   33650:	04d71063          	bne	a4,a3,33690 <elf::section::as_symtab() const+0x78>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   33654:	0007b703          	ld	a4,0(a5)
   33658:	00e13023          	sd	a4,0(sp)
      : _M_pi(__r._M_pi)
   3365c:	0087b503          	ld	a0,8(a5)
   33660:	00a13423          	sd	a0,8(sp)
	if (_M_pi != nullptr)
   33664:	02050063          	beq	a0,zero,33684 <elf::section::as_symtab() const+0x6c>
    if (__is_single_threaded())
   33668:	0000f797          	auipc	a5,0xf
   3366c:	e107b783          	ld	a5,-496(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33670:	0007c783          	lbu	a5,0(a5)
   33674:	04078e63          	beq	a5,zero,336d0 <elf::section::as_symtab() const+0xb8>
  { *__mem += __val; }
   33678:	03052783          	lw	a5,48(a0)
   3367c:	0017879b          	addiw	a5,a5,1
   33680:	02f52823          	sw	a5,48(a0)
                m->f.get_section(get_hdr().link).as_strtab());
   33684:	00040513          	addi	a0,s0,0
   33688:	ce4ff0ef          	jal	ra,32b6c <elf::section::data() const>
   3368c:	0540006f          	jal	zero,336e0 <elf::section::as_symtab() const+0xc8>
    throw section_type_mismatch("cannot use section as symtab");
   33690:	01000513          	addi	a0,zero,16
   33694:	d3de20ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   33698:	00050413          	addi	s0,a0,0
      : std::logic_error(what_arg) {}
   3369c:	00007597          	auipc	a1,0x7
   336a0:	e3458593          	addi	a1,a1,-460 # 3a4d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27f0>
   336a4:	e7de20ef          	jal	ra,16520 <std::logic_error::logic_error(char const*)@plt>
   336a8:	0000f797          	auipc	a5,0xf
   336ac:	d087b783          	ld	a5,-760(a5) # 423b0 <vtable for elf::section_type_mismatch@@Base+0x7a0>
   336b0:	01078793          	addi	a5,a5,16
   336b4:	00f43023          	sd	a5,0(s0)
   336b8:	0000f617          	auipc	a2,0xf
   336bc:	be863603          	ld	a2,-1048(a2) # 422a0 <elf::section_type_mismatch::~section_type_mismatch()@@Base+0xd8f4>
   336c0:	0000f597          	auipc	a1,0xf
   336c4:	c185b583          	ld	a1,-1000(a1) # 422d8 <typeinfo for elf::section_type_mismatch@@Base+0x780>
   336c8:	00040513          	addi	a0,s0,0
   336cc:	f95e20ef          	jal	ra,16660 <__cxa_throw@plt>
      __atomic_add(__mem, __val);
   336d0:	00100593          	addi	a1,zero,1
   336d4:	03050513          	addi	a0,a0,48
   336d8:	c29e20ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   336dc:	fa9ff06f          	jal	zero,33684 <elf::section::as_symtab() const+0x6c>
                m->f.get_section(get_hdr().link).as_strtab());
   336e0:	00050913          	addi	s2,a0,0
   336e4:	00040513          	addi	a0,s0,0
   336e8:	db4ff0ef          	jal	ra,32c9c <elf::section::size() const>
   336ec:	00050993          	addi	s3,a0,0
   336f0:	00043a03          	ld	s4,0(s0)
   336f4:	00040513          	addi	a0,s0,0
   336f8:	c68ff0ef          	jal	ra,32b60 <elf::section::get_hdr() const>
   336fc:	02855583          	lhu	a1,40(a0)
   33700:	000a0513          	addi	a0,s4,0
   33704:	a14ff0ef          	jal	ra,32918 <elf::elf::get_section(unsigned int) const>
   33708:	00050593          	addi	a1,a0,0
   3370c:	01010513          	addi	a0,sp,16
   33710:	e84ff0ef          	jal	ra,32d94 <elf::section::as_strtab() const>
   33714:	01010713          	addi	a4,sp,16
   33718:	00098693          	addi	a3,s3,0
   3371c:	00090613          	addi	a2,s2,0
   33720:	00010593          	addi	a1,sp,0
   33724:	00048513          	addi	a0,s1,0
   33728:	cedff0ef          	jal	ra,33414 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)>
	if (_M_pi != nullptr)
   3372c:	01813403          	ld	s0,24(sp)
   33730:	02040463          	beq	s0,zero,33758 <elf::section::as_symtab() const+0x140>
    if (__is_single_threaded())
   33734:	0000f797          	auipc	a5,0xf
   33738:	d447b783          	ld	a5,-700(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   3373c:	0007c783          	lbu	a5,0(a5)
   33740:	06078463          	beq	a5,zero,337a8 <elf::section::as_symtab() const+0x190>
    _Atomic_word __result = *__mem;
   33744:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   33748:	fff5079b          	addiw	a5,a0,-1
   3374c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   33750:	00100793          	addi	a5,zero,1
   33754:	06f50263          	beq	a0,a5,337b8 <elf::section::as_symtab() const+0x1a0>
	if (_M_pi != nullptr)
   33758:	00813403          	ld	s0,8(sp)
   3375c:	02040463          	beq	s0,zero,33784 <elf::section::as_symtab() const+0x16c>
    if (__is_single_threaded())
   33760:	0000f797          	auipc	a5,0xf
   33764:	d187b783          	ld	a5,-744(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33768:	0007c783          	lbu	a5,0(a5)
   3376c:	0a078463          	beq	a5,zero,33814 <elf::section::as_symtab() const+0x1fc>
    _Atomic_word __result = *__mem;
   33770:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   33774:	fff5079b          	addiw	a5,a0,-1
   33778:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   3377c:	00100793          	addi	a5,zero,1
   33780:	0af50263          	beq	a0,a5,33824 <elf::section::as_symtab() const+0x20c>
}
   33784:	00048513          	addi	a0,s1,0
   33788:	04813083          	ld	ra,72(sp)
   3378c:	04013403          	ld	s0,64(sp)
   33790:	03813483          	ld	s1,56(sp)
   33794:	03013903          	ld	s2,48(sp)
   33798:	02813983          	ld	s3,40(sp)
   3379c:	02013a03          	ld	s4,32(sp)
   337a0:	05010113          	addi	sp,sp,80
   337a4:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   337a8:	fff00593          	addi	a1,zero,-1
   337ac:	03040513          	addi	a0,s0,48
   337b0:	b81e20ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   337b4:	f9dff06f          	jal	zero,33750 <elf::section::as_symtab() const+0x138>
	_M_dispose();
   337b8:	00043783          	ld	a5,0(s0)
   337bc:	0107b783          	ld	a5,16(a5)
   337c0:	00040513          	addi	a0,s0,0
   337c4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   337c8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   337cc:	0000f797          	auipc	a5,0xf
   337d0:	cac7b783          	ld	a5,-852(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   337d4:	0007c783          	lbu	a5,0(a5)
   337d8:	02078663          	beq	a5,zero,33804 <elf::section::as_symtab() const+0x1ec>
    _Atomic_word __result = *__mem;
   337dc:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   337e0:	fff5079b          	addiw	a5,a0,-1
   337e4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   337e8:	00100793          	addi	a5,zero,1
   337ec:	f6f516e3          	bne	a0,a5,33758 <elf::section::as_symtab() const+0x140>
	    _M_destroy();
   337f0:	00043783          	ld	a5,0(s0)
   337f4:	0187b783          	ld	a5,24(a5)
   337f8:	00040513          	addi	a0,s0,0
   337fc:	000780e7          	jalr	ra,0(a5)
   33800:	f59ff06f          	jal	zero,33758 <elf::section::as_symtab() const+0x140>
      return __exchange_and_add(__mem, __val);
   33804:	fff00593          	addi	a1,zero,-1
   33808:	03440513          	addi	a0,s0,52
   3380c:	b25e20ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   33810:	fd9ff06f          	jal	zero,337e8 <elf::section::as_symtab() const+0x1d0>
   33814:	fff00593          	addi	a1,zero,-1
   33818:	03040513          	addi	a0,s0,48
   3381c:	b15e20ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   33820:	f5dff06f          	jal	zero,3377c <elf::section::as_symtab() const+0x164>
	_M_dispose();
   33824:	00043783          	ld	a5,0(s0)
   33828:	0107b783          	ld	a5,16(a5)
   3382c:	00040513          	addi	a0,s0,0
   33830:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   33834:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   33838:	0000f797          	auipc	a5,0xf
   3383c:	c407b783          	ld	a5,-960(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33840:	0007c783          	lbu	a5,0(a5)
   33844:	02078663          	beq	a5,zero,33870 <elf::section::as_symtab() const+0x258>
    _Atomic_word __result = *__mem;
   33848:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   3384c:	fff5079b          	addiw	a5,a0,-1
   33850:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   33854:	00100793          	addi	a5,zero,1
   33858:	f2f516e3          	bne	a0,a5,33784 <elf::section::as_symtab() const+0x16c>
	    _M_destroy();
   3385c:	00043783          	ld	a5,0(s0)
   33860:	0187b783          	ld	a5,24(a5)
   33864:	00040513          	addi	a0,s0,0
   33868:	000780e7          	jalr	ra,0(a5)
                m->f.get_section(get_hdr().link).as_strtab());
   3386c:	f19ff06f          	jal	zero,33784 <elf::section::as_symtab() const+0x16c>
      return __exchange_and_add(__mem, __val);
   33870:	fff00593          	addi	a1,zero,-1
   33874:	03440513          	addi	a0,s0,52
   33878:	ab9e20ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   3387c:	fd9ff06f          	jal	zero,33854 <elf::section::as_symtab() const+0x23c>
    throw section_type_mismatch("cannot use section as symtab");
   33880:	00050493          	addi	s1,a0,0
   33884:	00040513          	addi	a0,s0,0
   33888:	be9e20ef          	jal	ra,16470 <__cxa_free_exception@plt>
   3388c:	00048513          	addi	a0,s1,0
   33890:	e01e20ef          	jal	ra,16690 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   33894:	00050413          	addi	s0,a0,0
   33898:	01813503          	ld	a0,24(sp)
   3389c:	00050863          	beq	a0,zero,338ac <elf::section::as_symtab() const+0x294>
	  _M_pi->_M_release();
   338a0:	0000f317          	auipc	t1,0xf
   338a4:	b2033303          	ld	t1,-1248(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   338a8:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   338ac:	00813503          	ld	a0,8(sp)
   338b0:	00050863          	beq	a0,zero,338c0 <elf::section::as_symtab() const+0x2a8>
	  _M_pi->_M_release();
   338b4:	0000f317          	auipc	t1,0xf
   338b8:	b0c33303          	ld	t1,-1268(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   338bc:	000300e7          	jalr	ra,0(t1)
   338c0:	00040513          	addi	a0,s0,0
   338c4:	dcde20ef          	jal	ra,16690 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   338c8:	00050413          	addi	s0,a0,0
   338cc:	fe1ff06f          	jal	zero,338ac <elf::section::as_symtab() const+0x294>

00000000000338d0 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)>:

symtab::iterator::iterator(const symtab &tab, const char *pos)
   338d0:	fe010113          	addi	sp,sp,-32
   338d4:	00113c23          	sd	ra,24(sp)
   338d8:	00813823          	sd	s0,16(sp)
   338dc:	00913423          	sd	s1,8(sp)
   338e0:	01213023          	sd	s2,0(sp)
   338e4:	00050413          	addi	s0,a0,0
   338e8:	00058493          	addi	s1,a1,0
   338ec:	00060913          	addi	s2,a2,0
      { return _M_ptr; }
   338f0:	0005b783          	ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   338f4:	0007b703          	ld	a4,0(a5)
   338f8:	00e53023          	sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   338fc:	0087b503          	ld	a0,8(a5)
   33900:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   33904:	02050063          	beq	a0,zero,33924 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x54>
    if (__is_single_threaded())
   33908:	0000f797          	auipc	a5,0xf
   3390c:	b707b783          	ld	a5,-1168(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33910:	0007c783          	lbu	a5,0(a5)
   33914:	04078a63          	beq	a5,zero,33968 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x98>
  { *__mem += __val; }
   33918:	03052783          	lw	a5,48(a0)
   3391c:	0017879b          	addiw	a5,a5,1
   33920:	02f52823          	sw	a5,48(a0)
      { return _M_ptr; }
   33924:	0004b783          	ld	a5,0(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   33928:	0207b703          	ld	a4,32(a5)
   3392c:	00e43823          	sd	a4,16(s0)
      : _M_pi(__r._M_pi)
   33930:	0287b503          	ld	a0,40(a5)
   33934:	00a43c23          	sd	a0,24(s0)
	if (_M_pi != nullptr)
   33938:	02050063          	beq	a0,zero,33958 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x88>
    if (__is_single_threaded())
   3393c:	0000f797          	auipc	a5,0xf
   33940:	b3c7b783          	ld	a5,-1220(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33944:	0007c783          	lbu	a5,0(a5)
   33948:	02078863          	beq	a5,zero,33978 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0xa8>
  { *__mem += __val; }
   3394c:	03052783          	lw	a5,48(a0)
   33950:	0017879b          	addiw	a5,a5,1
   33954:	02f52823          	sw	a5,48(a0)
    : f(tab.m->f), strs(tab.m->strs), pos(pos) {
   33958:	03243023          	sd	s2,32(s0)
  if (f.get_hdr().ei_class == elfclass::_32)
   3395c:	00040513          	addi	a0,s0,0
   33960:	f2dfe0ef          	jal	ra,3288c <elf::elf::get_hdr() const>
   33964:	0240006f          	jal	zero,33988 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0xb8>
      __atomic_add(__mem, __val);
   33968:	00100593          	addi	a1,zero,1
   3396c:	03050513          	addi	a0,a0,48
   33970:	991e20ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   33974:	fb1ff06f          	jal	zero,33924 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x54>
   33978:	00100593          	addi	a1,zero,1
   3397c:	03050513          	addi	a0,a0,48
   33980:	981e20ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   33984:	fd5ff06f          	jal	zero,33958 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x88>
   33988:	00454683          	lbu	a3,4(a0)
   3398c:	00100713          	addi	a4,zero,1
    stride = sizeof(Sym<Elf32>);
  else
    stride = sizeof(Sym<Elf64>);
   33990:	01800793          	addi	a5,zero,24
  if (f.get_hdr().ei_class == elfclass::_32)
   33994:	02e68063          	beq	a3,a4,339b4 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0xe4>
   33998:	02f43423          	sd	a5,40(s0)
}
   3399c:	01813083          	ld	ra,24(sp)
   339a0:	01013403          	ld	s0,16(sp)
   339a4:	00813483          	ld	s1,8(sp)
   339a8:	00013903          	ld	s2,0(sp)
   339ac:	02010113          	addi	sp,sp,32
   339b0:	00008067          	jalr	zero,0(ra)
    stride = sizeof(Sym<Elf32>);
   339b4:	01000793          	addi	a5,zero,16
   339b8:	fe1ff06f          	jal	zero,33998 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0xc8>
	if (_M_pi != nullptr)
   339bc:	00050493          	addi	s1,a0,0
   339c0:	01843503          	ld	a0,24(s0)
   339c4:	00050863          	beq	a0,zero,339d4 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x104>
	  _M_pi->_M_release();
   339c8:	0000f317          	auipc	t1,0xf
   339cc:	9f833303          	ld	t1,-1544(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   339d0:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   339d4:	00843503          	ld	a0,8(s0)
   339d8:	00050863          	beq	a0,zero,339e8 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x118>
	  _M_pi->_M_release();
   339dc:	0000f317          	auipc	t1,0xf
   339e0:	9e433303          	ld	t1,-1564(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   339e4:	000300e7          	jalr	ra,0(t1)
   339e8:	00048513          	addi	a0,s1,0
   339ec:	ca5e20ef          	jal	ra,16690 <_Unwind_Resume@plt>

00000000000339f0 <elf::symtab::begin() const>:

symtab::iterator symtab::begin() const { return iterator(*this, m->data); }
   339f0:	ff010113          	addi	sp,sp,-16
   339f4:	00113423          	sd	ra,8(sp)
   339f8:	00813023          	sd	s0,0(sp)
   339fc:	00050413          	addi	s0,a0,0
   33a00:	0005b783          	ld	a5,0(a1)
   33a04:	0107b603          	ld	a2,16(a5)
   33a08:	ec9ff0ef          	jal	ra,338d0 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)>
   33a0c:	00040513          	addi	a0,s0,0
   33a10:	00813083          	ld	ra,8(sp)
   33a14:	00013403          	ld	s0,0(sp)
   33a18:	01010113          	addi	sp,sp,16
   33a1c:	00008067          	jalr	zero,0(ra)

0000000000033a20 <elf::symtab::end() const>:

symtab::iterator symtab::end() const { return iterator(*this, m->end); }
   33a20:	ff010113          	addi	sp,sp,-16
   33a24:	00113423          	sd	ra,8(sp)
   33a28:	00813023          	sd	s0,0(sp)
   33a2c:	00050413          	addi	s0,a0,0
   33a30:	0005b783          	ld	a5,0(a1)
   33a34:	0187b603          	ld	a2,24(a5)
   33a38:	e99ff0ef          	jal	ra,338d0 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)>
   33a3c:	00040513          	addi	a0,s0,0
   33a40:	00813083          	ld	ra,8(sp)
   33a44:	00013403          	ld	s0,0(sp)
   33a48:	01010113          	addi	sp,sp,16
   33a4c:	00008067          	jalr	zero,0(ra)

0000000000033a50 <elf::segment::segment(elf::elf const&, void const*)>:
segment::segment(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
   33a50:	fd010113          	addi	sp,sp,-48
   33a54:	02113423          	sd	ra,40(sp)
   33a58:	02813023          	sd	s0,32(sp)
   33a5c:	00913c23          	sd	s1,24(sp)
   33a60:	01213823          	sd	s2,16(sp)
   33a64:	01313423          	sd	s3,8(sp)
   33a68:	01413023          	sd	s4,0(sp)
   33a6c:	00050913          	addi	s2,a0,0
   33a70:	00058493          	addi	s1,a1,0
   33a74:	00060993          	addi	s3,a2,0
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   33a78:	00053023          	sd	zero,0(a0)
   33a7c:	08800513          	addi	a0,zero,136
   33a80:	a41e20ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   33a84:	00050413          	addi	s0,a0,0
   33a88:	00052423          	sw	zero,8(a0)
   33a8c:	00052623          	sw	zero,12(a0)
   33a90:	00052823          	sw	zero,16(a0)
   33a94:	00052a23          	sw	zero,20(a0)
   33a98:	00052c23          	sw	zero,24(a0)
   33a9c:	00052e23          	sw	zero,28(a0)
   33aa0:	02053023          	sd	zero,32(a0)
   33aa4:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   33aa8:	00100793          	addi	a5,zero,1
   33aac:	02f52823          	sw	a5,48(a0)
   33ab0:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   33ab4:	0000f797          	auipc	a5,0xf
   33ab8:	9bc7b783          	ld	a5,-1604(a5) # 42470 <vtable for std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x800>
   33abc:	01078793          	addi	a5,a5,16
   33ac0:	00f53023          	sd	a5,0(a0)
   33ac4:	03850a13          	addi	s4,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   33ac8:	0004b783          	ld	a5,0(s1)
   33acc:	02f53c23          	sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   33ad0:	0084b503          	ld	a0,8(s1)
   33ad4:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   33ad8:	02050063          	beq	a0,zero,33af8 <elf::segment::segment(elf::elf const&, void const*)+0xa8>
    if (__is_single_threaded())
   33adc:	0000f717          	auipc	a4,0xf
   33ae0:	99c73703          	ld	a4,-1636(a4) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33ae4:	00074703          	lbu	a4,0(a4)
   33ae8:	02070663          	beq	a4,zero,33b14 <elf::segment::segment(elf::elf const&, void const*)+0xc4>
  { *__mem += __val; }
   33aec:	03052703          	lw	a4,48(a0)
   33af0:	0017071b          	addiw	a4,a4,1
   33af4:	02e52823          	sw	a4,48(a0)
  impl(const elf &f) : f(f), data(nullptr) {}
   33af8:	08043023          	sd	zero,128(s0)
	  _M_pi = __pi;
   33afc:	00893423          	sd	s0,8(s2)
	  __p = __pi->_M_ptr();
   33b00:	01493023          	sd	s4,0(s2)
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
   33b04:	04840413          	addi	s0,s0,72
   33b08:	00048513          	addi	a0,s1,0
   33b0c:	d81fe0ef          	jal	ra,3288c <elf::elf::get_hdr() const>
   33b10:	0140006f          	jal	zero,33b24 <elf::segment::segment(elf::elf const&, void const*)+0xd4>
      __atomic_add(__mem, __val);
   33b14:	00100593          	addi	a1,zero,1
   33b18:	03050513          	addi	a0,a0,48
   33b1c:	fe4e20ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   33b20:	fd9ff06f          	jal	zero,33af8 <elf::segment::segment(elf::elf const&, void const*)+0xa8>
   33b24:	00454a03          	lbu	s4,4(a0)
   33b28:	00048513          	addi	a0,s1,0
   33b2c:	d61fe0ef          	jal	ra,3288c <elf::elf::get_hdr() const>
   33b30:	00554683          	lbu	a3,5(a0)
   33b34:	000a0613          	addi	a2,s4,0
   33b38:	00098593          	addi	a1,s3,0
   33b3c:	00040513          	addi	a0,s0,0
   33b40:	0000f317          	auipc	t1,0xf
   33b44:	a8833303          	ld	t1,-1400(t1) # 425c8 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xce00>
   33b48:	000300e7          	jalr	ra,0(t1)
}
   33b4c:	02813083          	ld	ra,40(sp)
   33b50:	02013403          	ld	s0,32(sp)
   33b54:	01813483          	ld	s1,24(sp)
   33b58:	01013903          	ld	s2,16(sp)
   33b5c:	00813983          	ld	s3,8(sp)
   33b60:	00013a03          	ld	s4,0(sp)
   33b64:	03010113          	addi	sp,sp,48
   33b68:	00008067          	jalr	zero,0(ra)
	if (_M_pi != nullptr)
   33b6c:	00050413          	addi	s0,a0,0
   33b70:	00893503          	ld	a0,8(s2)
   33b74:	00050863          	beq	a0,zero,33b84 <elf::segment::segment(elf::elf const&, void const*)+0x134>
	  _M_pi->_M_release();
   33b78:	0000f317          	auipc	t1,0xf
   33b7c:	84833303          	ld	t1,-1976(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   33b80:	000300e7          	jalr	ra,0(t1)
   33b84:	00040513          	addi	a0,s0,0
   33b88:	b09e20ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000033b8c <elf::section::section(elf::elf const&, void const*)>:
section::section(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
   33b8c:	fd010113          	addi	sp,sp,-48
   33b90:	02113423          	sd	ra,40(sp)
   33b94:	02813023          	sd	s0,32(sp)
   33b98:	00913c23          	sd	s1,24(sp)
   33b9c:	01213823          	sd	s2,16(sp)
   33ba0:	01313423          	sd	s3,8(sp)
   33ba4:	01413023          	sd	s4,0(sp)
   33ba8:	00050913          	addi	s2,a0,0
   33bac:	00058493          	addi	s1,a1,0
   33bb0:	00060993          	addi	s3,a2,0
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   33bb4:	00053023          	sd	zero,0(a0)
   33bb8:	0a000513          	addi	a0,zero,160
   33bbc:	905e20ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   33bc0:	00050413          	addi	s0,a0,0
   33bc4:	00052423          	sw	zero,8(a0)
   33bc8:	00052623          	sw	zero,12(a0)
   33bcc:	00052823          	sw	zero,16(a0)
   33bd0:	00052a23          	sw	zero,20(a0)
   33bd4:	00052c23          	sw	zero,24(a0)
   33bd8:	00052e23          	sw	zero,28(a0)
   33bdc:	02053023          	sd	zero,32(a0)
   33be0:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   33be4:	00100793          	addi	a5,zero,1
   33be8:	02f52823          	sw	a5,48(a0)
   33bec:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   33bf0:	0000f797          	auipc	a5,0xf
   33bf4:	8307b783          	ld	a5,-2000(a5) # 42420 <vtable for std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x778>
   33bf8:	01078793          	addi	a5,a5,16
   33bfc:	00f53023          	sd	a5,0(a0)
   33c00:	03850a13          	addi	s4,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   33c04:	0004b783          	ld	a5,0(s1)
   33c08:	02f53c23          	sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   33c0c:	0084b503          	ld	a0,8(s1)
   33c10:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   33c14:	02050063          	beq	a0,zero,33c34 <elf::section::section(elf::elf const&, void const*)+0xa8>
    if (__is_single_threaded())
   33c18:	0000f717          	auipc	a4,0xf
   33c1c:	86073703          	ld	a4,-1952(a4) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33c20:	00074703          	lbu	a4,0(a4)
   33c24:	02070863          	beq	a4,zero,33c54 <elf::section::section(elf::elf const&, void const*)+0xc8>
  { *__mem += __val; }
   33c28:	03052703          	lw	a4,48(a0)
   33c2c:	0017071b          	addiw	a4,a4,1
   33c30:	02e52823          	sw	a4,48(a0)
  impl(const elf &f) : f(f), name(nullptr), data(nullptr) {}
   33c34:	08043423          	sd	zero,136(s0)
   33c38:	08043c23          	sd	zero,152(s0)
	  _M_pi = __pi;
   33c3c:	00893423          	sd	s0,8(s2)
	  __p = __pi->_M_ptr();
   33c40:	01493023          	sd	s4,0(s2)
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
   33c44:	04840413          	addi	s0,s0,72
   33c48:	00048513          	addi	a0,s1,0
   33c4c:	c41fe0ef          	jal	ra,3288c <elf::elf::get_hdr() const>
   33c50:	0140006f          	jal	zero,33c64 <elf::section::section(elf::elf const&, void const*)+0xd8>
      __atomic_add(__mem, __val);
   33c54:	00100593          	addi	a1,zero,1
   33c58:	03050513          	addi	a0,a0,48
   33c5c:	ea4e20ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   33c60:	fd5ff06f          	jal	zero,33c34 <elf::section::section(elf::elf const&, void const*)+0xa8>
   33c64:	00454a03          	lbu	s4,4(a0)
   33c68:	00048513          	addi	a0,s1,0
   33c6c:	c21fe0ef          	jal	ra,3288c <elf::elf::get_hdr() const>
   33c70:	00554683          	lbu	a3,5(a0)
   33c74:	000a0613          	addi	a2,s4,0
   33c78:	00098593          	addi	a1,s3,0
   33c7c:	00040513          	addi	a0,s0,0
   33c80:	0000f317          	auipc	t1,0xf
   33c84:	8f833303          	ld	t1,-1800(t1) # 42578 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xcbd4>
   33c88:	000300e7          	jalr	ra,0(t1)
}
   33c8c:	02813083          	ld	ra,40(sp)
   33c90:	02013403          	ld	s0,32(sp)
   33c94:	01813483          	ld	s1,24(sp)
   33c98:	01013903          	ld	s2,16(sp)
   33c9c:	00813983          	ld	s3,8(sp)
   33ca0:	00013a03          	ld	s4,0(sp)
   33ca4:	03010113          	addi	sp,sp,48
   33ca8:	00008067          	jalr	zero,0(ra)
	if (_M_pi != nullptr)
   33cac:	00050413          	addi	s0,a0,0
   33cb0:	00893503          	ld	a0,8(s2)
   33cb4:	00050863          	beq	a0,zero,33cc4 <elf::section::section(elf::elf const&, void const*)+0x138>
	  _M_pi->_M_release();
   33cb8:	0000e317          	auipc	t1,0xe
   33cbc:	70833303          	ld	t1,1800(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   33cc0:	000300e7          	jalr	ra,0(t1)
   33cc4:	00040513          	addi	a0,s0,0
   33cc8:	9c9e20ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000033ccc <elf::sym::sym(elf::elf, void const*, elf::strtab)>:
sym::sym(elf f, const void *data, strtab strs) : strs(strs) {
   33ccc:	fd010113          	addi	sp,sp,-48
   33cd0:	02113423          	sd	ra,40(sp)
   33cd4:	02813023          	sd	s0,32(sp)
   33cd8:	00913c23          	sd	s1,24(sp)
   33cdc:	01213823          	sd	s2,16(sp)
   33ce0:	01313423          	sd	s3,8(sp)
   33ce4:	01413023          	sd	s4,0(sp)
   33ce8:	00050413          	addi	s0,a0,0
   33cec:	00058493          	addi	s1,a1,0
   33cf0:	00060913          	addi	s2,a2,0
      __shared_ptr(const __shared_ptr&) noexcept = default;
   33cf4:	0006b783          	ld	a5,0(a3)
   33cf8:	00f53023          	sd	a5,0(a0)
      : _M_pi(__r._M_pi)
   33cfc:	0086b503          	ld	a0,8(a3)
   33d00:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   33d04:	02050063          	beq	a0,zero,33d24 <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x58>
    if (__is_single_threaded())
   33d08:	0000e797          	auipc	a5,0xe
   33d0c:	7707b783          	ld	a5,1904(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33d10:	0007c783          	lbu	a5,0(a5)
   33d14:	02078063          	beq	a5,zero,33d34 <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x68>
  { *__mem += __val; }
   33d18:	03052783          	lw	a5,48(a0)
   33d1c:	0017879b          	addiw	a5,a5,1
   33d20:	02f52823          	sw	a5,48(a0)
  canon_hdr(&this->data, data, f.get_hdr().ei_class, f.get_hdr().ei_data);
   33d24:	01040993          	addi	s3,s0,16
   33d28:	00048513          	addi	a0,s1,0
   33d2c:	b61fe0ef          	jal	ra,3288c <elf::elf::get_hdr() const>
   33d30:	0140006f          	jal	zero,33d44 <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x78>
      __atomic_add(__mem, __val);
   33d34:	00100593          	addi	a1,zero,1
   33d38:	03050513          	addi	a0,a0,48
   33d3c:	dc4e20ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   33d40:	fe5ff06f          	jal	zero,33d24 <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x58>
   33d44:	00454a03          	lbu	s4,4(a0)
   33d48:	00048513          	addi	a0,s1,0
   33d4c:	b41fe0ef          	jal	ra,3288c <elf::elf::get_hdr() const>
   33d50:	00554683          	lbu	a3,5(a0)
   33d54:	000a0613          	addi	a2,s4,0
   33d58:	00090593          	addi	a1,s2,0
   33d5c:	00098513          	addi	a0,s3,0
   33d60:	0000e317          	auipc	t1,0xe
   33d64:	7d833303          	ld	t1,2008(t1) # 42538 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xc968>
   33d68:	000300e7          	jalr	ra,0(t1)
}
   33d6c:	02813083          	ld	ra,40(sp)
   33d70:	02013403          	ld	s0,32(sp)
   33d74:	01813483          	ld	s1,24(sp)
   33d78:	01013903          	ld	s2,16(sp)
   33d7c:	00813983          	ld	s3,8(sp)
   33d80:	00013a03          	ld	s4,0(sp)
   33d84:	03010113          	addi	sp,sp,48
   33d88:	00008067          	jalr	zero,0(ra)
	if (_M_pi != nullptr)
   33d8c:	00050493          	addi	s1,a0,0
   33d90:	00843503          	ld	a0,8(s0)
   33d94:	00050863          	beq	a0,zero,33da4 <elf::sym::sym(elf::elf, void const*, elf::strtab)+0xd8>
	  _M_pi->_M_release();
   33d98:	0000e317          	auipc	t1,0xe
   33d9c:	62833303          	ld	t1,1576(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   33da0:	000300e7          	jalr	ra,0(t1)
   33da4:	00048513          	addi	a0,s1,0
   33da8:	8e9e20ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000033dac <elf::section::get_name[abi:cxx11]() const>:
string section::get_name() const { return get_name(nullptr); }
   33dac:	fe010113          	addi	sp,sp,-32
   33db0:	00113c23          	sd	ra,24(sp)
   33db4:	00813823          	sd	s0,16(sp)
   33db8:	00913423          	sd	s1,8(sp)
   33dbc:	00050413          	addi	s0,a0,0
   33dc0:	00058513          	addi	a0,a1,0
   33dc4:	00000593          	addi	a1,zero,0
   33dc8:	c50ff0ef          	jal	ra,33218 <elf::section::get_name(unsigned long*) const>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33dcc:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   33dd0:	00f43023          	sd	a5,0(s0)
	if (__s == 0)
   33dd4:	04050063          	beq	a0,zero,33e14 <elf::section::get_name[abi:cxx11]() const+0x68>
   33dd8:	00050493          	addi	s1,a0,0
   33ddc:	de4e20ef          	jal	ra,163c0 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   33de0:	00000693          	addi	a3,zero,0
   33de4:	00a48633          	add	a2,s1,a0
   33de8:	00048593          	addi	a1,s1,0
   33dec:	00040513          	addi	a0,s0,0
   33df0:	0000e317          	auipc	t1,0xe
   33df4:	51033303          	ld	t1,1296(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   33df8:	000300e7          	jalr	ra,0(t1)
   33dfc:	00040513          	addi	a0,s0,0
   33e00:	01813083          	ld	ra,24(sp)
   33e04:	01013403          	ld	s0,16(sp)
   33e08:	00813483          	ld	s1,8(sp)
   33e0c:	02010113          	addi	sp,sp,32
   33e10:	00008067          	jalr	zero,0(ra)
	  std::__throw_logic_error(__N("basic_string: "
   33e14:	00003517          	auipc	a0,0x3
   33e18:	80c50513          	addi	a0,a0,-2036 # 36620 <__libc_csu_fini+0x8>
   33e1c:	e44e20ef          	jal	ra,16460 <std::__throw_logic_error(char const*)@plt>

0000000000033e20 <elf::strtab::get[abi:cxx11](unsigned long) const>:
std::string strtab::get(Elf64::Off offset) const {
   33e20:	fe010113          	addi	sp,sp,-32
   33e24:	00113c23          	sd	ra,24(sp)
   33e28:	00813823          	sd	s0,16(sp)
   33e2c:	00913423          	sd	s1,8(sp)
   33e30:	00050413          	addi	s0,a0,0
   33e34:	00058513          	addi	a0,a1,0
   33e38:	00060593          	addi	a1,a2,0
  return get(offset, nullptr);
   33e3c:	00000613          	addi	a2,zero,0
   33e40:	914ff0ef          	jal	ra,32f54 <elf::strtab::get(unsigned long, unsigned long*) const>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33e44:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   33e48:	00f43023          	sd	a5,0(s0)
	if (__s == 0)
   33e4c:	04050063          	beq	a0,zero,33e8c <elf::strtab::get[abi:cxx11](unsigned long) const+0x6c>
   33e50:	00050493          	addi	s1,a0,0
   33e54:	d6ce20ef          	jal	ra,163c0 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   33e58:	00000693          	addi	a3,zero,0
   33e5c:	00a48633          	add	a2,s1,a0
   33e60:	00048593          	addi	a1,s1,0
   33e64:	00040513          	addi	a0,s0,0
   33e68:	0000e317          	auipc	t1,0xe
   33e6c:	49833303          	ld	t1,1176(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   33e70:	000300e7          	jalr	ra,0(t1)
}
   33e74:	00040513          	addi	a0,s0,0
   33e78:	01813083          	ld	ra,24(sp)
   33e7c:	01013403          	ld	s0,16(sp)
   33e80:	00813483          	ld	s1,8(sp)
   33e84:	02010113          	addi	sp,sp,32
   33e88:	00008067          	jalr	zero,0(ra)
	  std::__throw_logic_error(__N("basic_string: "
   33e8c:	00002517          	auipc	a0,0x2
   33e90:	79450513          	addi	a0,a0,1940 # 36620 <__libc_csu_fini+0x8>
   33e94:	dcce20ef          	jal	ra,16460 <std::__throw_logic_error(char const*)@plt>

0000000000033e98 <elf::sym::get_name[abi:cxx11]() const>:
std::string sym::get_name() const { return strs.get(get_data().name); }
   33e98:	ff010113          	addi	sp,sp,-16
   33e9c:	00113423          	sd	ra,8(sp)
   33ea0:	00813023          	sd	s0,0(sp)
   33ea4:	00050413          	addi	s0,a0,0
   33ea8:	0105e603          	lwu	a2,16(a1)
   33eac:	f75ff0ef          	jal	ra,33e20 <elf::strtab::get[abi:cxx11](unsigned long) const>
   33eb0:	00040513          	addi	a0,s0,0
   33eb4:	00813083          	ld	ra,8(sp)
   33eb8:	00013403          	ld	s0,0(sp)
   33ebc:	01010113          	addi	sp,sp,16
   33ec0:	00008067          	jalr	zero,0(ra)

0000000000033ec4 <elf::enums::to_string[abi:cxx11](elf::enums::shn)>:
std::string enums::to_string(shn v) {
   33ec4:	fe010113          	addi	sp,sp,-32
   33ec8:	00113c23          	sd	ra,24(sp)
   33ecc:	00813823          	sd	s0,16(sp)
   33ed0:	00913423          	sd	s1,8(sp)
   33ed4:	01213023          	sd	s2,0(sp)
   33ed8:	00050493          	addi	s1,a0,0
  if (v == shn::undef)
   33edc:	06058a63          	beq	a1,zero,33f50 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x8c>
  if (v == shn::abs)
   33ee0:	0005871b          	addiw	a4,a1,0
   33ee4:	000107b7          	lui	a5,0x10
   33ee8:	ff178793          	addi	a5,a5,-15 # fff1 <__abi_tag-0x2a3>
   33eec:	0af70463          	beq	a4,a5,33f94 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xd0>
  if (v == shn::common)
   33ef0:	0005871b          	addiw	a4,a1,0
   33ef4:	000107b7          	lui	a5,0x10
   33ef8:	ff278793          	addi	a5,a5,-14 # fff2 <__abi_tag-0x2a2>
   33efc:	0cf70263          	beq	a4,a5,33fc0 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xfc>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   33f00:	0005841b          	addiw	s0,a1,0
	  if (__value < (unsigned)__base) return __n;
   33f04:	00900793          	addi	a5,zero,9
   33f08:	0e87f263          	bgeu	a5,s0,33fec <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x128>
	  if (__value < __b2) return __n + 1;
   33f0c:	06300793          	addi	a5,zero,99
   33f10:	1c87f263          	bgeu	a5,s0,340d4 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x210>
	  if (__value < __b3) return __n + 2;
   33f14:	3e700793          	addi	a5,zero,999
   33f18:	1c87fc63          	bgeu	a5,s0,340f0 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x22c>
	  if (__value < __b4) return __n + 3;
   33f1c:	000026b7          	lui	a3,0x2
   33f20:	70f68693          	addi	a3,a3,1807 # 270f <__abi_tag-0xdb85>
	  __n += 4;
   33f24:	0086b933          	sltu	s2,a3,s0
   33f28:	00490913          	addi	s2,s2,4
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33f2c:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   33f30:	00f4b023          	sd	a5,0(s1)
      { _M_construct(__n, __c); }
   33f34:	02d00613          	addi	a2,zero,45
   33f38:	00090593          	addi	a1,s2,0
   33f3c:	00048513          	addi	a0,s1,0
   33f40:	dd0e20ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   33f44:	0004b583          	ld	a1,0(s1)
      unsigned __pos = __len - 1;
   33f48:	fff9069b          	addiw	a3,s2,-1
      while (__val >= 100)
   33f4c:	0c40006f          	jal	zero,34010 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x14c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33f50:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33f54:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33f58:	00000693          	addi	a3,zero,0
   33f5c:	00006617          	auipc	a2,0x6
   33f60:	59960613          	addi	a2,a2,1433 # 3a4f5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2815>
   33f64:	00006597          	auipc	a1,0x6
   33f68:	58c58593          	addi	a1,a1,1420 # 3a4f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2810>
   33f6c:	0000e317          	auipc	t1,0xe
   33f70:	39433303          	ld	t1,916(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   33f74:	000300e7          	jalr	ra,0(t1)
}
   33f78:	00048513          	addi	a0,s1,0
   33f7c:	01813083          	ld	ra,24(sp)
   33f80:	01013403          	ld	s0,16(sp)
   33f84:	00813483          	ld	s1,8(sp)
   33f88:	00013903          	ld	s2,0(sp)
   33f8c:	02010113          	addi	sp,sp,32
   33f90:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33f94:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33f98:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33f9c:	00000693          	addi	a3,zero,0
   33fa0:	00006617          	auipc	a2,0x6
   33fa4:	55b60613          	addi	a2,a2,1371 # 3a4fb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x281b>
   33fa8:	00006597          	auipc	a1,0x6
   33fac:	55058593          	addi	a1,a1,1360 # 3a4f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2818>
   33fb0:	0000e317          	auipc	t1,0xe
   33fb4:	35033303          	ld	t1,848(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   33fb8:	000300e7          	jalr	ra,0(t1)
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   33fbc:	fbdff06f          	jal	zero,33f78 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xb4>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33fc0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33fc4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33fc8:	00000693          	addi	a3,zero,0
   33fcc:	00006617          	auipc	a2,0x6
   33fd0:	53a60613          	addi	a2,a2,1338 # 3a506 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2826>
   33fd4:	00006597          	auipc	a1,0x6
   33fd8:	52c58593          	addi	a1,a1,1324 # 3a500 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2820>
   33fdc:	0000e317          	auipc	t1,0xe
   33fe0:	32433303          	ld	t1,804(t1) # 42300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26d74>
   33fe4:	000300e7          	jalr	ra,0(t1)
   33fe8:	f91ff06f          	jal	zero,33f78 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xb4>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33fec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33ff0:	00f53023          	sd	a5,0(a0)
      { _M_construct(__n, __c); }
   33ff4:	02d00613          	addi	a2,zero,45
   33ff8:	00100593          	addi	a1,zero,1
   33ffc:	d14e20ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   34000:	0004b583          	ld	a1,0(s1)
   34004:	06300793          	addi	a5,zero,99
   34008:	0687fe63          	bgeu	a5,s0,34084 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x1c0>
      unsigned __pos = __len - 1;
   3400c:	00000693          	addi	a3,zero,0
	  auto const __num = (__val % 100) * 2;
   34010:	06400813          	addi	a6,zero,100
	  __first[__pos] = __digits[__num + 1];
   34014:	0000e517          	auipc	a0,0xe
   34018:	34453503          	ld	a0,836(a0) # 42358 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb7a0>
      while (__val >= 100)
   3401c:	00002337          	lui	t1,0x2
   34020:	70f30313          	addi	t1,t1,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   34024:	030477bb          	remuw	a5,s0,a6
   34028:	0017979b          	slliw	a5,a5,0x1
   3402c:	0004089b          	addiw	a7,s0,0
	  __val /= 100;
   34030:	0304543b          	divuw	s0,s0,a6
	  __first[__pos] = __digits[__num + 1];
   34034:	02069613          	slli	a2,a3,0x20
   34038:	02065613          	srli	a2,a2,0x20
   3403c:	00c58633          	add	a2,a1,a2
   34040:	0017871b          	addiw	a4,a5,1
   34044:	02071713          	slli	a4,a4,0x20
   34048:	02075713          	srli	a4,a4,0x20
   3404c:	00e50733          	add	a4,a0,a4
   34050:	00074703          	lbu	a4,0(a4)
   34054:	00e60023          	sb	a4,0(a2)
	  __first[__pos - 1] = __digits[__num];
   34058:	fff6871b          	addiw	a4,a3,-1
   3405c:	02071713          	slli	a4,a4,0x20
   34060:	02075713          	srli	a4,a4,0x20
   34064:	00e58733          	add	a4,a1,a4
   34068:	02079793          	slli	a5,a5,0x20
   3406c:	0207d793          	srli	a5,a5,0x20
   34070:	00f507b3          	add	a5,a0,a5
   34074:	0007c783          	lbu	a5,0(a5)
   34078:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   3407c:	ffe6869b          	addiw	a3,a3,-2
      while (__val >= 100)
   34080:	fb1362e3          	bltu	t1,a7,34024 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x160>
      if (__val >= 10)
   34084:	00900793          	addi	a5,zero,9
   34088:	0487f063          	bgeu	a5,s0,340c8 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x204>
	  auto const __num = __val * 2;
   3408c:	0014141b          	slliw	s0,s0,0x1
	  __first[1] = __digits[__num + 1];
   34090:	0000e717          	auipc	a4,0xe
   34094:	2c873703          	ld	a4,712(a4) # 42358 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb7a0>
   34098:	0014079b          	addiw	a5,s0,1
   3409c:	02079793          	slli	a5,a5,0x20
   340a0:	0207d793          	srli	a5,a5,0x20
   340a4:	00f707b3          	add	a5,a4,a5
   340a8:	0007c783          	lbu	a5,0(a5)
   340ac:	00f580a3          	sb	a5,1(a1)
	  __first[0] = __digits[__num];
   340b0:	02041413          	slli	s0,s0,0x20
   340b4:	02045413          	srli	s0,s0,0x20
   340b8:	00870733          	add	a4,a4,s0
   340bc:	00074783          	lbu	a5,0(a4)
   340c0:	00f58023          	sb	a5,0(a1)
   340c4:	eb5ff06f          	jal	zero,33f78 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xb4>
	__first[0] = '0' + __val;
   340c8:	0304041b          	addiw	s0,s0,48
   340cc:	00858023          	sb	s0,0(a1)
   340d0:	ea9ff06f          	jal	zero,33f78 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xb4>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   340d4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   340d8:	00f53023          	sd	a5,0(a0)
      { _M_construct(__n, __c); }
   340dc:	02d00613          	addi	a2,zero,45
   340e0:	00200593          	addi	a1,zero,2
   340e4:	c2ce20ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   340e8:	0004b583          	ld	a1,0(s1)
      while (__val >= 100)
   340ec:	f99ff06f          	jal	zero,34084 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x1c0>
	  if (__value < __b3) return __n + 2;
   340f0:	00300913          	addi	s2,zero,3
   340f4:	e39ff06f          	jal	zero,33f2c <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x68>

00000000000340f8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)>:
elf::elf(const std::shared_ptr<loader> &l) : m(make_shared<impl>(l)) {
   340f8:	f9010113          	addi	sp,sp,-112
   340fc:	06113423          	sd	ra,104(sp)
   34100:	06813023          	sd	s0,96(sp)
   34104:	04913c23          	sd	s1,88(sp)
   34108:	05213823          	sd	s2,80(sp)
   3410c:	05313423          	sd	s3,72(sp)
   34110:	05413023          	sd	s4,64(sp)
   34114:	03513c23          	sd	s5,56(sp)
   34118:	03613823          	sd	s6,48(sp)
   3411c:	03713423          	sd	s7,40(sp)
   34120:	03813023          	sd	s8,32(sp)
   34124:	00050493          	addi	s1,a0,0
   34128:	00058a93          	addi	s5,a1,0
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   3412c:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   34130:	0d800513          	addi	a0,zero,216
   34134:	b8ce20ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   34138:	00050413          	addi	s0,a0,0
   3413c:	00052423          	sw	zero,8(a0)
   34140:	00052623          	sw	zero,12(a0)
   34144:	00052823          	sw	zero,16(a0)
   34148:	00052a23          	sw	zero,20(a0)
   3414c:	00052c23          	sw	zero,24(a0)
   34150:	00052e23          	sw	zero,28(a0)
   34154:	02053023          	sd	zero,32(a0)
   34158:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   3415c:	00100793          	addi	a5,zero,1
   34160:	02f52823          	sw	a5,48(a0)
   34164:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   34168:	0000e797          	auipc	a5,0xe
   3416c:	2387b783          	ld	a5,568(a5) # 423a0 <vtable for std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x768>
   34170:	01078793          	addi	a5,a5,16
   34174:	00f53023          	sd	a5,0(a0)
   34178:	03850913          	addi	s2,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   3417c:	000ab783          	ld	a5,0(s5)
   34180:	02f53c23          	sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   34184:	008ab503          	ld	a0,8(s5)
   34188:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   3418c:	02050063          	beq	a0,zero,341ac <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0xb4>
    if (__is_single_threaded())
   34190:	0000e797          	auipc	a5,0xe
   34194:	2e87b783          	ld	a5,744(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34198:	0007c783          	lbu	a5,0(a5)
   3419c:	04078e63          	beq	a5,zero,341f8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x100>
  { *__mem += __val; }
   341a0:	03052783          	lw	a5,48(a0)
   341a4:	0017879b          	addiw	a5,a5,1
   341a8:	02f52823          	sw	a5,48(a0)
	: _M_start(), _M_finish(), _M_end_of_storage()
   341ac:	08043423          	sd	zero,136(s0)
   341b0:	08043823          	sd	zero,144(s0)
   341b4:	08043c23          	sd	zero,152(s0)
   341b8:	0a043023          	sd	zero,160(s0)
   341bc:	0a043423          	sd	zero,168(s0)
   341c0:	0a043823          	sd	zero,176(s0)
      : _M_ptr(0), _M_refcount()
   341c4:	0a043c23          	sd	zero,184(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   341c8:	0c043023          	sd	zero,192(s0)
      : _M_ptr(0), _M_refcount()
   341cc:	0c043423          	sd	zero,200(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   341d0:	0c043823          	sd	zero,208(s0)
	  _M_pi = __pi;
   341d4:	0084b423          	sd	s0,8(s1)
	  __p = __pi->_M_ptr();
   341d8:	0124b023          	sd	s2,0(s1)
      { return _M_ptr; }
   341dc:	000ab503          	ld	a0,0(s5)
  } *core_hdr = (struct core_hdr *)l->load(0, sizeof *core_hdr);
   341e0:	00053783          	ld	a5,0(a0)
   341e4:	0107b783          	ld	a5,16(a5)
   341e8:	00700613          	addi	a2,zero,7
   341ec:	00000593          	addi	a1,zero,0
   341f0:	000780e7          	jalr	ra,0(a5)
   341f4:	0140006f          	jal	zero,34208 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x110>
      __atomic_add(__mem, __val);
   341f8:	00100593          	addi	a1,zero,1
   341fc:	03050513          	addi	a0,a0,48
   34200:	900e20ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   34204:	fa9ff06f          	jal	zero,341ac <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0xb4>
   34208:	00050413          	addi	s0,a0,0
  if (strncmp(core_hdr->ei_magic,
   3420c:	00400613          	addi	a2,zero,4
   34210:	00006597          	auipc	a1,0x6
   34214:	2f858593          	addi	a1,a1,760 # 3a508 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2828>
   34218:	c38e20ef          	jal	ra,16650 <strncmp@plt>
   3421c:	04051e63          	bne	a0,zero,34278 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x180>
  if (core_hdr->ei_version != 1)
   34220:	00644703          	lbu	a4,6(s0)
   34224:	00100793          	addi	a5,zero,1
   34228:	08f71c63          	bne	a4,a5,342c0 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x1c8>
  if (core_hdr->ei_class != elfclass::_32 &&
   3422c:	00444703          	lbu	a4,4(s0)
   34230:	fff7079b          	addiw	a5,a4,-1
   34234:	0ff7f793          	andi	a5,a5,255
   34238:	00100693          	addi	a3,zero,1
   3423c:	0cf6e263          	bltu	a3,a5,34300 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x208>
  if (core_hdr->ei_data != elfdata::lsb && core_hdr->ei_data != elfdata::msb)
   34240:	00544783          	lbu	a5,5(s0)
   34244:	fff7879b          	addiw	a5,a5,-1
   34248:	0ff7f793          	andi	a5,a5,255
   3424c:	00100693          	addi	a3,zero,1
   34250:	0ef6e863          	bltu	a3,a5,34340 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x248>
  size_t hdr_size = (core_hdr->ei_class == elfclass::_32 ? sizeof(Ehdr<Elf32>)
   34254:	00100793          	addi	a5,zero,1
   34258:	04000613          	addi	a2,zero,64
   3425c:	12f70263          	beq	a4,a5,34380 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x288>
   34260:	000ab503          	ld	a0,0(s5)
  const void *hdr = l->load(0, hdr_size);
   34264:	00053783          	ld	a5,0(a0)
   34268:	0107b783          	ld	a5,16(a5)
   3426c:	00000593          	addi	a1,zero,0
   34270:	000780e7          	jalr	ra,0(a5)
   34274:	1140006f          	jal	zero,34388 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x290>
    throw format_error("bad ELF magic number");
   34278:	01000513          	addi	a0,zero,16
   3427c:	954e20ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   34280:	00050913          	addi	s2,a0,0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   34284:	00006597          	auipc	a1,0x6
   34288:	28c58593          	addi	a1,a1,652 # 3a510 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2830>
   3428c:	c84e20ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   34290:	0000e797          	auipc	a5,0xe
   34294:	0a87b783          	ld	a5,168(a5) # 42338 <vtable for elf::format_error@@Base+0x750>
   34298:	01078793          	addi	a5,a5,16
   3429c:	00f93023          	sd	a5,0(s2)
   342a0:	0000e617          	auipc	a2,0xe
   342a4:	2c063603          	ld	a2,704(a2) # 42560 <elf::format_error::~format_error()@@Base+0xdd74>
   342a8:	0000e597          	auipc	a1,0xe
   342ac:	0705b583          	ld	a1,112(a1) # 42318 <typeinfo for elf::format_error@@Base+0x7d8>
   342b0:	00090513          	addi	a0,s2,0
   342b4:	bace20ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   342b8:	00050413          	addi	s0,a0,0
   342bc:	4480006f          	jal	zero,34704 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
    throw format_error("unknown ELF version");
   342c0:	01000513          	addi	a0,zero,16
   342c4:	90ce20ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   342c8:	00050913          	addi	s2,a0,0
   342cc:	00006597          	auipc	a1,0x6
   342d0:	25c58593          	addi	a1,a1,604 # 3a528 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2848>
   342d4:	c3ce20ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   342d8:	0000e797          	auipc	a5,0xe
   342dc:	0607b783          	ld	a5,96(a5) # 42338 <vtable for elf::format_error@@Base+0x750>
   342e0:	01078793          	addi	a5,a5,16
   342e4:	00f93023          	sd	a5,0(s2)
   342e8:	0000e617          	auipc	a2,0xe
   342ec:	27863603          	ld	a2,632(a2) # 42560 <elf::format_error::~format_error()@@Base+0xdd74>
   342f0:	0000e597          	auipc	a1,0xe
   342f4:	0285b583          	ld	a1,40(a1) # 42318 <typeinfo for elf::format_error@@Base+0x7d8>
   342f8:	00090513          	addi	a0,s2,0
   342fc:	b64e20ef          	jal	ra,16660 <__cxa_throw@plt>
    throw format_error("bad ELF class");
   34300:	01000513          	addi	a0,zero,16
   34304:	8cce20ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   34308:	00050913          	addi	s2,a0,0
   3430c:	00006597          	auipc	a1,0x6
   34310:	23458593          	addi	a1,a1,564 # 3a540 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2860>
   34314:	bfce20ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   34318:	0000e797          	auipc	a5,0xe
   3431c:	0207b783          	ld	a5,32(a5) # 42338 <vtable for elf::format_error@@Base+0x750>
   34320:	01078793          	addi	a5,a5,16
   34324:	00f93023          	sd	a5,0(s2)
   34328:	0000e617          	auipc	a2,0xe
   3432c:	23863603          	ld	a2,568(a2) # 42560 <elf::format_error::~format_error()@@Base+0xdd74>
   34330:	0000e597          	auipc	a1,0xe
   34334:	fe85b583          	ld	a1,-24(a1) # 42318 <typeinfo for elf::format_error@@Base+0x7d8>
   34338:	00090513          	addi	a0,s2,0
   3433c:	b24e20ef          	jal	ra,16660 <__cxa_throw@plt>
    throw format_error("bad ELF data order");
   34340:	01000513          	addi	a0,zero,16
   34344:	88ce20ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   34348:	00050913          	addi	s2,a0,0
   3434c:	00006597          	auipc	a1,0x6
   34350:	20458593          	addi	a1,a1,516 # 3a550 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2870>
   34354:	bbce20ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   34358:	0000e797          	auipc	a5,0xe
   3435c:	fe07b783          	ld	a5,-32(a5) # 42338 <vtable for elf::format_error@@Base+0x750>
   34360:	01078793          	addi	a5,a5,16
   34364:	00f93023          	sd	a5,0(s2)
   34368:	0000e617          	auipc	a2,0xe
   3436c:	1f863603          	ld	a2,504(a2) # 42560 <elf::format_error::~format_error()@@Base+0xdd74>
   34370:	0000e597          	auipc	a1,0xe
   34374:	fa85b583          	ld	a1,-88(a1) # 42318 <typeinfo for elf::format_error@@Base+0x7d8>
   34378:	00090513          	addi	a0,s2,0
   3437c:	ae4e20ef          	jal	ra,16660 <__cxa_throw@plt>
  size_t hdr_size = (core_hdr->ei_class == elfclass::_32 ? sizeof(Ehdr<Elf32>)
   34380:	03400613          	addi	a2,zero,52
   34384:	eddff06f          	jal	zero,34260 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x168>
  const void *hdr = l->load(0, hdr_size);
   34388:	00050593          	addi	a1,a0,0
  canon_hdr(&m->hdr, hdr, core_hdr->ei_class, core_hdr->ei_data);
   3438c:	0004b503          	ld	a0,0(s1)
   34390:	00544683          	lbu	a3,5(s0)
   34394:	00444603          	lbu	a2,4(s0)
   34398:	01050513          	addi	a0,a0,16
   3439c:	0000e317          	auipc	t1,0xe
   343a0:	f9433303          	ld	t1,-108(t1) # 42330 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xd074>
   343a4:	000300e7          	jalr	ra,0(t1)
      { return _M_ptr; }
   343a8:	0004b783          	ld	a5,0(s1)
  if (m->hdr.version != 1)
   343ac:	0247a683          	lw	a3,36(a5)
   343b0:	00100713          	addi	a4,zero,1
   343b4:	02e69c63          	bne	a3,a4,343ec <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x2f4>
  if (m->hdr.shnum && m->hdr.shstrndx >= m->hdr.shnum)
   343b8:	04c7d703          	lhu	a4,76(a5)
   343bc:	00070663          	beq	a4,zero,343c8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x2d0>
   343c0:	04e7d683          	lhu	a3,78(a5)
   343c4:	06e6f463          	bgeu	a3,a4,3442c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x334>
   343c8:	000ab503          	ld	a0,0(s5)
  const void *seg_data = l->load(m->hdr.phoff, m->hdr.phentsize * m->hdr.phnum);
   343cc:	0467d603          	lhu	a2,70(a5)
   343d0:	0487d683          	lhu	a3,72(a5)
   343d4:	00053703          	ld	a4,0(a0)
   343d8:	01073703          	ld	a4,16(a4)
   343dc:	02d6063b          	mulw	a2,a2,a3
   343e0:	0307b583          	ld	a1,48(a5)
   343e4:	000700e7          	jalr	ra,0(a4)
   343e8:	0600006f          	jal	zero,34448 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x350>
    throw format_error("bad section ELF version");
   343ec:	01000513          	addi	a0,zero,16
   343f0:	fe1e10ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   343f4:	00050913          	addi	s2,a0,0
   343f8:	00006597          	auipc	a1,0x6
   343fc:	17058593          	addi	a1,a1,368 # 3a568 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2888>
   34400:	b10e20ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   34404:	0000e797          	auipc	a5,0xe
   34408:	f347b783          	ld	a5,-204(a5) # 42338 <vtable for elf::format_error@@Base+0x750>
   3440c:	01078793          	addi	a5,a5,16
   34410:	00f93023          	sd	a5,0(s2)
   34414:	0000e617          	auipc	a2,0xe
   34418:	14c63603          	ld	a2,332(a2) # 42560 <elf::format_error::~format_error()@@Base+0xdd74>
   3441c:	0000e597          	auipc	a1,0xe
   34420:	efc5b583          	ld	a1,-260(a1) # 42318 <typeinfo for elf::format_error@@Base+0x7d8>
   34424:	00090513          	addi	a0,s2,0
   34428:	a38e20ef          	jal	ra,16660 <__cxa_throw@plt>
    throw format_error("bad section name string table index");
   3442c:	01000513          	addi	a0,zero,16
   34430:	fa1e10ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   34434:	00050913          	addi	s2,a0,0
   34438:	00006597          	auipc	a1,0x6
   3443c:	14858593          	addi	a1,a1,328 # 3a580 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x28a0>
   34440:	ad0e20ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   34444:	0340006f          	jal	zero,34478 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x380>
  const void *seg_data = l->load(m->hdr.phoff, m->hdr.phentsize * m->hdr.phnum);
   34448:	00050993          	addi	s3,a0,0
   3444c:	0004b403          	ld	s0,0(s1)
  for (unsigned i = 0; i < m->hdr.phnum; i++) {
   34450:	04845783          	lhu	a5,72(s0)
   34454:	00000913          	addi	s2,zero,0
   34458:	14078663          	beq	a5,zero,345a4 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x4ac>
    m->segments.push_back(segment(*this, seg));
   3445c:	00010a13          	addi	s4,sp,0
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   34460:	0000ec17          	auipc	s8,0xe
   34464:	0a0c3c03          	ld	s8,160(s8) # 42500 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)@@Base+0xc7c4>
    return ::__libc_single_threaded;
   34468:	0000eb17          	auipc	s6,0xe
   3446c:	010b3b03          	ld	s6,16(s6) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34470:	00100b93          	addi	s7,zero,1
   34474:	0900006f          	jal	zero,34504 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x40c>
   34478:	0000e797          	auipc	a5,0xe
   3447c:	ec07b783          	ld	a5,-320(a5) # 42338 <vtable for elf::format_error@@Base+0x750>
   34480:	01078793          	addi	a5,a5,16
   34484:	00f93023          	sd	a5,0(s2)
    throw format_error("bad section name string table index");
   34488:	0000e617          	auipc	a2,0xe
   3448c:	0d863603          	ld	a2,216(a2) # 42560 <elf::format_error::~format_error()@@Base+0xdd74>
   34490:	0000e597          	auipc	a1,0xe
   34494:	e885b583          	ld	a1,-376(a1) # 42318 <typeinfo for elf::format_error@@Base+0x7d8>
   34498:	00090513          	addi	a0,s2,0
   3449c:	9c4e20ef          	jal	ra,16660 <__cxa_throw@plt>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   344a0:	07043583          	ld	a1,112(s0)
   344a4:	07843783          	ld	a5,120(s0)
   344a8:	08f58063          	beq	a1,a5,34528 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x430>
      : _M_ptr(__r._M_ptr), _M_refcount()
   344ac:	00013783          	ld	a5,0(sp)
   344b0:	00f5b023          	sd	a5,0(a1)
      constexpr __shared_count() noexcept : _M_pi(0)
   344b4:	0005b423          	sd	zero,8(a1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   344b8:	00813783          	ld	a5,8(sp)
	__r._M_pi = _M_pi;
   344bc:	00013423          	sd	zero,8(sp)
	_M_pi = __tmp;
   344c0:	00f5b423          	sd	a5,8(a1)
	__r._M_ptr = nullptr;
   344c4:	00013023          	sd	zero,0(sp)
	    ++this->_M_impl._M_finish;
   344c8:	07043783          	ld	a5,112(s0)
   344cc:	01078793          	addi	a5,a5,16
   344d0:	06f43823          	sd	a5,112(s0)
	if (_M_pi != nullptr)
   344d4:	00813403          	ld	s0,8(sp)
   344d8:	00040e63          	beq	s0,zero,344f4 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3fc>
    if (__is_single_threaded())
   344dc:	000b4783          	lbu	a5,0(s6)
   344e0:	04078c63          	beq	a5,zero,34538 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x440>
    _Atomic_word __result = *__mem;
   344e4:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   344e8:	fff5079b          	addiw	a5,a0,-1
   344ec:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   344f0:	05750c63          	beq	a0,s7,34548 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x450>
  for (unsigned i = 0; i < m->hdr.phnum; i++) {
   344f4:	0019091b          	addiw	s2,s2,1
      { return _M_ptr; }
   344f8:	0004b403          	ld	s0,0(s1)
   344fc:	04845783          	lhu	a5,72(s0)
   34500:	0af97263          	bgeu	s2,a5,345a4 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x4ac>
    const void *seg = ((const char *)seg_data) + i * m->hdr.phentsize;
   34504:	04645603          	lhu	a2,70(s0)
   34508:	0326063b          	mulw	a2,a2,s2
   3450c:	02061613          	slli	a2,a2,0x20
   34510:	02065613          	srli	a2,a2,0x20
    m->segments.push_back(segment(*this, seg));
   34514:	00c98633          	add	a2,s3,a2
   34518:	00048593          	addi	a1,s1,0
   3451c:	000a0513          	addi	a0,s4,0
   34520:	d30ff0ef          	jal	ra,33a50 <elf::segment::segment(elf::elf const&, void const*)>
   34524:	f7dff06f          	jal	zero,344a0 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3a8>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   34528:	000a0613          	addi	a2,s4,0
   3452c:	06840513          	addi	a0,s0,104
   34530:	000c00e7          	jalr	ra,0(s8)
   34534:	fa1ff06f          	jal	zero,344d4 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3dc>
      return __exchange_and_add(__mem, __val);
   34538:	fff00593          	addi	a1,zero,-1
   3453c:	03040513          	addi	a0,s0,48
   34540:	df1e10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34544:	fadff06f          	jal	zero,344f0 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3f8>
	_M_dispose();
   34548:	00043783          	ld	a5,0(s0)
   3454c:	0107b783          	ld	a5,16(a5)
   34550:	00040513          	addi	a0,s0,0
   34554:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   34558:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   3455c:	0000e797          	auipc	a5,0xe
   34560:	f1c7b783          	ld	a5,-228(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34564:	0007c783          	lbu	a5,0(a5)
   34568:	02078663          	beq	a5,zero,34594 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x49c>
    _Atomic_word __result = *__mem;
   3456c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   34570:	fff5079b          	addiw	a5,a0,-1
   34574:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   34578:	00100793          	addi	a5,zero,1
   3457c:	f6f51ce3          	bne	a0,a5,344f4 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3fc>
	    _M_destroy();
   34580:	00043783          	ld	a5,0(s0)
   34584:	0187b783          	ld	a5,24(a5)
   34588:	00040513          	addi	a0,s0,0
   3458c:	000780e7          	jalr	ra,0(a5)
   34590:	f65ff06f          	jal	zero,344f4 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3fc>
      return __exchange_and_add(__mem, __val);
   34594:	fff00593          	addi	a1,zero,-1
   34598:	03440513          	addi	a0,s0,52
   3459c:	d95e10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   345a0:	fd9ff06f          	jal	zero,34578 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x480>
      { return _M_ptr; }
   345a4:	000ab503          	ld	a0,0(s5)
  const void *sec_data = l->load(m->hdr.shoff, m->hdr.shentsize * m->hdr.shnum);
   345a8:	04a45603          	lhu	a2,74(s0)
   345ac:	04c45703          	lhu	a4,76(s0)
   345b0:	00053783          	ld	a5,0(a0)
   345b4:	0107b783          	ld	a5,16(a5)
   345b8:	02e6063b          	mulw	a2,a2,a4
   345bc:	03843583          	ld	a1,56(s0)
   345c0:	000780e7          	jalr	ra,0(a5)
   345c4:	00050993          	addi	s3,a0,0
   345c8:	0004b403          	ld	s0,0(s1)
  for (unsigned i = 0; i < m->hdr.shnum; i++) {
   345cc:	04c45783          	lhu	a5,76(s0)
   345d0:	1c078c63          	beq	a5,zero,347a8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x6b0>
   345d4:	00000913          	addi	s2,zero,0
    m->sections.push_back(section(*this, sec));
   345d8:	01010a13          	addi	s4,sp,16
   345dc:	0000eb97          	auipc	s7,0xe
   345e0:	ce4bbb83          	ld	s7,-796(s7) # 422c0 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)@@Base+0xc3f8>
    return ::__libc_single_threaded;
   345e4:	0000ea97          	auipc	s5,0xe
   345e8:	e94aba83          	ld	s5,-364(s5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   345ec:	00100b13          	addi	s6,zero,1
   345f0:	0680006f          	jal	zero,34658 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x560>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   345f4:	05843583          	ld	a1,88(s0)
   345f8:	06043783          	ld	a5,96(s0)
   345fc:	08f58063          	beq	a1,a5,3467c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x584>
      : _M_ptr(__r._M_ptr), _M_refcount()
   34600:	01013783          	ld	a5,16(sp)
   34604:	00f5b023          	sd	a5,0(a1)
      constexpr __shared_count() noexcept : _M_pi(0)
   34608:	0005b423          	sd	zero,8(a1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   3460c:	01813783          	ld	a5,24(sp)
	__r._M_pi = _M_pi;
   34610:	00013c23          	sd	zero,24(sp)
	_M_pi = __tmp;
   34614:	00f5b423          	sd	a5,8(a1)
	__r._M_ptr = nullptr;
   34618:	00013823          	sd	zero,16(sp)
	    ++this->_M_impl._M_finish;
   3461c:	05843783          	ld	a5,88(s0)
   34620:	01078793          	addi	a5,a5,16
   34624:	04f43c23          	sd	a5,88(s0)
	if (_M_pi != nullptr)
   34628:	01813403          	ld	s0,24(sp)
   3462c:	00040e63          	beq	s0,zero,34648 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x550>
    if (__is_single_threaded())
   34630:	000ac783          	lbu	a5,0(s5)
   34634:	04078c63          	beq	a5,zero,3468c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x594>
    _Atomic_word __result = *__mem;
   34638:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   3463c:	fff5079b          	addiw	a5,a0,-1
   34640:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34644:	05650c63          	beq	a0,s6,3469c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x5a4>
  for (unsigned i = 0; i < m->hdr.shnum; i++) {
   34648:	0019091b          	addiw	s2,s2,1
      { return _M_ptr; }
   3464c:	0004b403          	ld	s0,0(s1)
   34650:	04c45783          	lhu	a5,76(s0)
   34654:	14f97a63          	bgeu	s2,a5,347a8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x6b0>
    const void *sec = ((const char *)sec_data) + i * m->hdr.shentsize;
   34658:	04a45603          	lhu	a2,74(s0)
   3465c:	0326063b          	mulw	a2,a2,s2
   34660:	02061613          	slli	a2,a2,0x20
   34664:	02065613          	srli	a2,a2,0x20
    m->sections.push_back(section(*this, sec));
   34668:	00c98633          	add	a2,s3,a2
   3466c:	00048593          	addi	a1,s1,0
   34670:	000a0513          	addi	a0,s4,0
   34674:	d18ff0ef          	jal	ra,33b8c <elf::section::section(elf::elf const&, void const*)>
   34678:	f7dff06f          	jal	zero,345f4 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x4fc>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   3467c:	000a0613          	addi	a2,s4,0
   34680:	05040513          	addi	a0,s0,80
   34684:	000b80e7          	jalr	ra,0(s7)
   34688:	fa1ff06f          	jal	zero,34628 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x530>
      return __exchange_and_add(__mem, __val);
   3468c:	fff00593          	addi	a1,zero,-1
   34690:	03040513          	addi	a0,s0,48
   34694:	c9de10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34698:	fadff06f          	jal	zero,34644 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x54c>
	_M_dispose();
   3469c:	00043783          	ld	a5,0(s0)
   346a0:	0107b783          	ld	a5,16(a5)
   346a4:	00040513          	addi	a0,s0,0
   346a8:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   346ac:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   346b0:	0000e797          	auipc	a5,0xe
   346b4:	dc87b783          	ld	a5,-568(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   346b8:	0007c783          	lbu	a5,0(a5)
   346bc:	02078663          	beq	a5,zero,346e8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x5f0>
    _Atomic_word __result = *__mem;
   346c0:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   346c4:	fff5079b          	addiw	a5,a0,-1
   346c8:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   346cc:	00100793          	addi	a5,zero,1
   346d0:	f6f51ce3          	bne	a0,a5,34648 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x550>
	    _M_destroy();
   346d4:	00043783          	ld	a5,0(s0)
   346d8:	0187b783          	ld	a5,24(a5)
   346dc:	00040513          	addi	a0,s0,0
   346e0:	000780e7          	jalr	ra,0(a5)
   346e4:	f65ff06f          	jal	zero,34648 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x550>
      return __exchange_and_add(__mem, __val);
   346e8:	fff00593          	addi	a1,zero,-1
   346ec:	03440513          	addi	a0,s0,52
   346f0:	c41e10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   346f4:	fd9ff06f          	jal	zero,346cc <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x5d4>
    throw format_error("bad ELF magic number");
   346f8:	00050413          	addi	s0,a0,0
   346fc:	00090513          	addi	a0,s2,0
   34700:	d71e10ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   34704:	0084b503          	ld	a0,8(s1)
   34708:	00050863          	beq	a0,zero,34718 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x620>
	  _M_pi->_M_release();
   3470c:	0000e317          	auipc	t1,0xe
   34710:	cb433303          	ld	t1,-844(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   34714:	000300e7          	jalr	ra,0(t1)
   34718:	00040513          	addi	a0,s0,0
   3471c:	f75e10ef          	jal	ra,16690 <_Unwind_Resume@plt>
    throw format_error("unknown ELF version");
   34720:	00050413          	addi	s0,a0,0
   34724:	00090513          	addi	a0,s2,0
   34728:	d49e10ef          	jal	ra,16470 <__cxa_free_exception@plt>
   3472c:	fd9ff06f          	jal	zero,34704 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
    throw format_error("bad ELF class");
   34730:	00050413          	addi	s0,a0,0
   34734:	00090513          	addi	a0,s2,0
   34738:	d39e10ef          	jal	ra,16470 <__cxa_free_exception@plt>
   3473c:	fc9ff06f          	jal	zero,34704 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
    throw format_error("bad ELF data order");
   34740:	00050413          	addi	s0,a0,0
   34744:	00090513          	addi	a0,s2,0
   34748:	d29e10ef          	jal	ra,16470 <__cxa_free_exception@plt>
   3474c:	fb9ff06f          	jal	zero,34704 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
    throw format_error("bad section ELF version");
   34750:	00050413          	addi	s0,a0,0
   34754:	00090513          	addi	a0,s2,0
   34758:	d19e10ef          	jal	ra,16470 <__cxa_free_exception@plt>
   3475c:	fa9ff06f          	jal	zero,34704 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
    throw format_error("bad section name string table index");
   34760:	00050413          	addi	s0,a0,0
   34764:	00090513          	addi	a0,s2,0
   34768:	d09e10ef          	jal	ra,16470 <__cxa_free_exception@plt>
   3476c:	f99ff06f          	jal	zero,34704 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
	if (_M_pi != nullptr)
   34770:	00050413          	addi	s0,a0,0
   34774:	00813503          	ld	a0,8(sp)
   34778:	f80506e3          	beq	a0,zero,34704 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
	  _M_pi->_M_release();
   3477c:	0000e317          	auipc	t1,0xe
   34780:	c4433303          	ld	t1,-956(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   34784:	000300e7          	jalr	ra,0(t1)
   34788:	f7dff06f          	jal	zero,34704 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
	if (_M_pi != nullptr)
   3478c:	00050413          	addi	s0,a0,0
   34790:	01813503          	ld	a0,24(sp)
   34794:	f60508e3          	beq	a0,zero,34704 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
	  _M_pi->_M_release();
   34798:	0000e317          	auipc	t1,0xe
   3479c:	c2833303          	ld	t1,-984(t1) # 423c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b39c>
   347a0:	000300e7          	jalr	ra,0(t1)
   347a4:	f61ff06f          	jal	zero,34704 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
}
   347a8:	06813083          	ld	ra,104(sp)
   347ac:	06013403          	ld	s0,96(sp)
   347b0:	05813483          	ld	s1,88(sp)
   347b4:	05013903          	ld	s2,80(sp)
   347b8:	04813983          	ld	s3,72(sp)
   347bc:	04013a03          	ld	s4,64(sp)
   347c0:	03813a83          	ld	s5,56(sp)
   347c4:	03013b03          	ld	s6,48(sp)
   347c8:	02813b83          	ld	s7,40(sp)
   347cc:	02013c03          	ld	s8,32(sp)
   347d0:	07010113          	addi	sp,sp,112
   347d4:	00008067          	jalr	zero,0(ra)

00000000000347d8 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   347d8:	00008067          	jalr	zero,0(ra)

00000000000347dc <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   347dc:	00008067          	jalr	zero,0(ra)

00000000000347e0 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   347e0:	00008067          	jalr	zero,0(ra)

00000000000347e4 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   347e4:	00008067          	jalr	zero,0(ra)

00000000000347e8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   347e8:	00008067          	jalr	zero,0(ra)

00000000000347ec <elf::format_error::~format_error()>:
class format_error : public std::runtime_error {
   347ec:	ff010113          	addi	sp,sp,-16
   347f0:	00113423          	sd	ra,8(sp)
   347f4:	0000e797          	auipc	a5,0xe
   347f8:	b447b783          	ld	a5,-1212(a5) # 42338 <vtable for elf::format_error@@Base+0x750>
   347fc:	01078793          	addi	a5,a5,16
   34800:	00f53023          	sd	a5,0(a0)
   34804:	cdde10ef          	jal	ra,164e0 <std::runtime_error::~runtime_error()@plt>
   34808:	00813083          	ld	ra,8(sp)
   3480c:	01010113          	addi	sp,sp,16
   34810:	00008067          	jalr	zero,0(ra)

0000000000034814 <elf::format_error::~format_error()>:
   34814:	ff010113          	addi	sp,sp,-16
   34818:	00113423          	sd	ra,8(sp)
   3481c:	00813023          	sd	s0,0(sp)
   34820:	00050413          	addi	s0,a0,0
   34824:	0000e797          	auipc	a5,0xe
   34828:	b147b783          	ld	a5,-1260(a5) # 42338 <vtable for elf::format_error@@Base+0x750>
   3482c:	01078793          	addi	a5,a5,16
   34830:	00f53023          	sd	a5,0(a0)
   34834:	cade10ef          	jal	ra,164e0 <std::runtime_error::~runtime_error()@plt>
   34838:	00040513          	addi	a0,s0,0
   3483c:	c75e10ef          	jal	ra,164b0 <operator delete(void*)@plt>
   34840:	00813083          	ld	ra,8(sp)
   34844:	00013403          	ld	s0,0(sp)
   34848:	01010113          	addi	sp,sp,16
   3484c:	00008067          	jalr	zero,0(ra)

0000000000034850 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   34850:	ff010113          	addi	sp,sp,-16
   34854:	00113423          	sd	ra,8(sp)
   34858:	c59e10ef          	jal	ra,164b0 <operator delete(void*)@plt>
   3485c:	00813083          	ld	ra,8(sp)
   34860:	01010113          	addi	sp,sp,16
   34864:	00008067          	jalr	zero,0(ra)

0000000000034868 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   34868:	ff010113          	addi	sp,sp,-16
   3486c:	00113423          	sd	ra,8(sp)
   34870:	c41e10ef          	jal	ra,164b0 <operator delete(void*)@plt>
   34874:	00813083          	ld	ra,8(sp)
   34878:	01010113          	addi	sp,sp,16
   3487c:	00008067          	jalr	zero,0(ra)

0000000000034880 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   34880:	ff010113          	addi	sp,sp,-16
   34884:	00113423          	sd	ra,8(sp)
   34888:	c29e10ef          	jal	ra,164b0 <operator delete(void*)@plt>
   3488c:	00813083          	ld	ra,8(sp)
   34890:	01010113          	addi	sp,sp,16
   34894:	00008067          	jalr	zero,0(ra)

0000000000034898 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   34898:	ff010113          	addi	sp,sp,-16
   3489c:	00113423          	sd	ra,8(sp)
   348a0:	c11e10ef          	jal	ra,164b0 <operator delete(void*)@plt>
   348a4:	00813083          	ld	ra,8(sp)
   348a8:	01010113          	addi	sp,sp,16
   348ac:	00008067          	jalr	zero,0(ra)

00000000000348b0 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   348b0:	ff010113          	addi	sp,sp,-16
   348b4:	00113423          	sd	ra,8(sp)
   348b8:	bf9e10ef          	jal	ra,164b0 <operator delete(void*)@plt>
   348bc:	00813083          	ld	ra,8(sp)
   348c0:	01010113          	addi	sp,sp,16
   348c4:	00008067          	jalr	zero,0(ra)

00000000000348c8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   348c8:	ff010113          	addi	sp,sp,-16
   348cc:	00113423          	sd	ra,8(sp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   348d0:	be1e10ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   348d4:	00813083          	ld	ra,8(sp)
   348d8:	01010113          	addi	sp,sp,16
   348dc:	00008067          	jalr	zero,0(ra)

00000000000348e0 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   348e0:	ff010113          	addi	sp,sp,-16
   348e4:	00113423          	sd	ra,8(sp)
   348e8:	bc9e10ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   348ec:	00813083          	ld	ra,8(sp)
   348f0:	01010113          	addi	sp,sp,16
   348f4:	00008067          	jalr	zero,0(ra)

00000000000348f8 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   348f8:	ff010113          	addi	sp,sp,-16
   348fc:	00113423          	sd	ra,8(sp)
   34900:	bb1e10ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   34904:	00813083          	ld	ra,8(sp)
   34908:	01010113          	addi	sp,sp,16
   3490c:	00008067          	jalr	zero,0(ra)

0000000000034910 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   34910:	ff010113          	addi	sp,sp,-16
   34914:	00113423          	sd	ra,8(sp)
   34918:	b99e10ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   3491c:	00813083          	ld	ra,8(sp)
   34920:	01010113          	addi	sp,sp,16
   34924:	00008067          	jalr	zero,0(ra)

0000000000034928 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   34928:	ff010113          	addi	sp,sp,-16
   3492c:	00113423          	sd	ra,8(sp)
   34930:	b81e10ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   34934:	00813083          	ld	ra,8(sp)
   34938:	01010113          	addi	sp,sp,16
   3493c:	00008067          	jalr	zero,0(ra)

0000000000034940 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   34940:	ff010113          	addi	sp,sp,-16
   34944:	00113423          	sd	ra,8(sp)
   34948:	00813023          	sd	s0,0(sp)
   3494c:	03850413          	addi	s0,a0,56
	    ||
   34950:	0000e797          	auipc	a5,0xe
   34954:	be07b783          	ld	a5,-1056(a5) # 42530 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbbc0>
   34958:	02f58c63          	beq	a1,a5,34990 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   3495c:	0085b503          	ld	a0,8(a1)
   34960:	0000e797          	auipc	a5,0xe
   34964:	aa87b783          	ld	a5,-1368(a5) # 42408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbce8>
   34968:	02f50463          	beq	a0,a5,34990 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   3496c:	00054703          	lbu	a4,0(a0)
   34970:	02a00793          	addi	a5,zero,42
   34974:	02f70863          	beq	a4,a5,349a4 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   34978:	0000e597          	auipc	a1,0xe
   3497c:	a905b583          	ld	a1,-1392(a1) # 42408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbce8>
   34980:	991e10ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   34984:	00153513          	sltiu	a0,a0,1
   34988:	40a00533          	sub	a0,zero,a0
   3498c:	00a47433          	and	s0,s0,a0
      }
   34990:	00040513          	addi	a0,s0,0
   34994:	00813083          	ld	ra,8(sp)
   34998:	00013403          	ld	s0,0(sp)
   3499c:	01010113          	addi	sp,sp,16
   349a0:	00008067          	jalr	zero,0(ra)
	return nullptr;
   349a4:	00000413          	addi	s0,zero,0
   349a8:	fe9ff06f          	jal	zero,34990 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

00000000000349ac <elf::section_type_mismatch::~section_type_mismatch()>:
class section_type_mismatch : public std::logic_error {
   349ac:	ff010113          	addi	sp,sp,-16
   349b0:	00113423          	sd	ra,8(sp)
   349b4:	0000e797          	auipc	a5,0xe
   349b8:	9fc7b783          	ld	a5,-1540(a5) # 423b0 <vtable for elf::section_type_mismatch@@Base+0x7a0>
   349bc:	01078793          	addi	a5,a5,16
   349c0:	00f53023          	sd	a5,0(a0)
   349c4:	cdde10ef          	jal	ra,166a0 <std::logic_error::~logic_error()@plt>
   349c8:	00813083          	ld	ra,8(sp)
   349cc:	01010113          	addi	sp,sp,16
   349d0:	00008067          	jalr	zero,0(ra)

00000000000349d4 <elf::section_type_mismatch::~section_type_mismatch()>:
   349d4:	ff010113          	addi	sp,sp,-16
   349d8:	00113423          	sd	ra,8(sp)
   349dc:	00813023          	sd	s0,0(sp)
   349e0:	00050413          	addi	s0,a0,0
   349e4:	0000e797          	auipc	a5,0xe
   349e8:	9cc7b783          	ld	a5,-1588(a5) # 423b0 <vtable for elf::section_type_mismatch@@Base+0x7a0>
   349ec:	01078793          	addi	a5,a5,16
   349f0:	00f53023          	sd	a5,0(a0)
   349f4:	cade10ef          	jal	ra,166a0 <std::logic_error::~logic_error()@plt>
   349f8:	00040513          	addi	a0,s0,0
   349fc:	ab5e10ef          	jal	ra,164b0 <operator delete(void*)@plt>
   34a00:	00813083          	ld	ra,8(sp)
   34a04:	00013403          	ld	s0,0(sp)
   34a08:	01010113          	addi	sp,sp,16
   34a0c:	00008067          	jalr	zero,0(ra)

0000000000034a10 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   34a10:	ff010113          	addi	sp,sp,-16
   34a14:	00113423          	sd	ra,8(sp)
   34a18:	00813023          	sd	s0,0(sp)
   34a1c:	03850413          	addi	s0,a0,56
	    ||
   34a20:	0000e797          	auipc	a5,0xe
   34a24:	b107b783          	ld	a5,-1264(a5) # 42530 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbbc0>
   34a28:	02f58c63          	beq	a1,a5,34a60 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   34a2c:	0085b503          	ld	a0,8(a1)
   34a30:	0000e797          	auipc	a5,0xe
   34a34:	9d87b783          	ld	a5,-1576(a5) # 42408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbce8>
   34a38:	02f50463          	beq	a0,a5,34a60 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   34a3c:	00054703          	lbu	a4,0(a0)
   34a40:	02a00793          	addi	a5,zero,42
   34a44:	02f70863          	beq	a4,a5,34a74 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   34a48:	0000e597          	auipc	a1,0xe
   34a4c:	9c05b583          	ld	a1,-1600(a1) # 42408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbce8>
   34a50:	8c1e10ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   34a54:	00153513          	sltiu	a0,a0,1
   34a58:	40a00533          	sub	a0,zero,a0
   34a5c:	00a47433          	and	s0,s0,a0
      }
   34a60:	00040513          	addi	a0,s0,0
   34a64:	00813083          	ld	ra,8(sp)
   34a68:	00013403          	ld	s0,0(sp)
   34a6c:	01010113          	addi	sp,sp,16
   34a70:	00008067          	jalr	zero,0(ra)
	return nullptr;
   34a74:	00000413          	addi	s0,zero,0
   34a78:	fe9ff06f          	jal	zero,34a60 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

0000000000034a7c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   34a7c:	ff010113          	addi	sp,sp,-16
   34a80:	00113423          	sd	ra,8(sp)
   34a84:	00813023          	sd	s0,0(sp)
   34a88:	03850413          	addi	s0,a0,56
	    ||
   34a8c:	0000e797          	auipc	a5,0xe
   34a90:	aa47b783          	ld	a5,-1372(a5) # 42530 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbbc0>
   34a94:	02f58c63          	beq	a1,a5,34acc <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   34a98:	0085b503          	ld	a0,8(a1)
   34a9c:	0000e797          	auipc	a5,0xe
   34aa0:	96c7b783          	ld	a5,-1684(a5) # 42408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbce8>
   34aa4:	02f50463          	beq	a0,a5,34acc <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   34aa8:	00054703          	lbu	a4,0(a0)
   34aac:	02a00793          	addi	a5,zero,42
   34ab0:	02f70863          	beq	a4,a5,34ae0 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   34ab4:	0000e597          	auipc	a1,0xe
   34ab8:	9545b583          	ld	a1,-1708(a1) # 42408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbce8>
   34abc:	855e10ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   34ac0:	00153513          	sltiu	a0,a0,1
   34ac4:	40a00533          	sub	a0,zero,a0
   34ac8:	00a47433          	and	s0,s0,a0
      }
   34acc:	00040513          	addi	a0,s0,0
   34ad0:	00813083          	ld	ra,8(sp)
   34ad4:	00013403          	ld	s0,0(sp)
   34ad8:	01010113          	addi	sp,sp,16
   34adc:	00008067          	jalr	zero,0(ra)
	return nullptr;
   34ae0:	00000413          	addi	s0,zero,0
   34ae4:	fe9ff06f          	jal	zero,34acc <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

0000000000034ae8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   34ae8:	ff010113          	addi	sp,sp,-16
   34aec:	00113423          	sd	ra,8(sp)
   34af0:	00813023          	sd	s0,0(sp)
   34af4:	03850413          	addi	s0,a0,56
	    ||
   34af8:	0000e797          	auipc	a5,0xe
   34afc:	a387b783          	ld	a5,-1480(a5) # 42530 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbbc0>
   34b00:	02f58c63          	beq	a1,a5,34b38 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   34b04:	0085b503          	ld	a0,8(a1)
   34b08:	0000e797          	auipc	a5,0xe
   34b0c:	9007b783          	ld	a5,-1792(a5) # 42408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbce8>
   34b10:	02f50463          	beq	a0,a5,34b38 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   34b14:	00054703          	lbu	a4,0(a0)
   34b18:	02a00793          	addi	a5,zero,42
   34b1c:	02f70863          	beq	a4,a5,34b4c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   34b20:	0000e597          	auipc	a1,0xe
   34b24:	8e85b583          	ld	a1,-1816(a1) # 42408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbce8>
   34b28:	fe8e10ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   34b2c:	00153513          	sltiu	a0,a0,1
   34b30:	40a00533          	sub	a0,zero,a0
   34b34:	00a47433          	and	s0,s0,a0
      }
   34b38:	00040513          	addi	a0,s0,0
   34b3c:	00813083          	ld	ra,8(sp)
   34b40:	00013403          	ld	s0,0(sp)
   34b44:	01010113          	addi	sp,sp,16
   34b48:	00008067          	jalr	zero,0(ra)
	return nullptr;
   34b4c:	00000413          	addi	s0,zero,0
   34b50:	fe9ff06f          	jal	zero,34b38 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

0000000000034b54 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   34b54:	ff010113          	addi	sp,sp,-16
   34b58:	00113423          	sd	ra,8(sp)
   34b5c:	00813023          	sd	s0,0(sp)
   34b60:	03850413          	addi	s0,a0,56
	    ||
   34b64:	0000e797          	auipc	a5,0xe
   34b68:	9cc7b783          	ld	a5,-1588(a5) # 42530 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbbc0>
   34b6c:	02f58c63          	beq	a1,a5,34ba4 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   34b70:	0085b503          	ld	a0,8(a1)
   34b74:	0000e797          	auipc	a5,0xe
   34b78:	8947b783          	ld	a5,-1900(a5) # 42408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbce8>
   34b7c:	02f50463          	beq	a0,a5,34ba4 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   34b80:	00054703          	lbu	a4,0(a0)
   34b84:	02a00793          	addi	a5,zero,42
   34b88:	02f70863          	beq	a4,a5,34bb8 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   34b8c:	0000e597          	auipc	a1,0xe
   34b90:	87c5b583          	ld	a1,-1924(a1) # 42408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbce8>
   34b94:	f7ce10ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   34b98:	00153513          	sltiu	a0,a0,1
   34b9c:	40a00533          	sub	a0,zero,a0
   34ba0:	00a47433          	and	s0,s0,a0
      }
   34ba4:	00040513          	addi	a0,s0,0
   34ba8:	00813083          	ld	ra,8(sp)
   34bac:	00013403          	ld	s0,0(sp)
   34bb0:	01010113          	addi	sp,sp,16
   34bb4:	00008067          	jalr	zero,0(ra)
	return nullptr;
   34bb8:	00000413          	addi	s0,zero,0
   34bbc:	fe9ff06f          	jal	zero,34ba4 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

0000000000034bc0 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   34bc0:	ff010113          	addi	sp,sp,-16
   34bc4:	00113423          	sd	ra,8(sp)
   34bc8:	00813023          	sd	s0,0(sp)
	if (_M_pi != nullptr)
   34bcc:	04053403          	ld	s0,64(a0)
   34bd0:	02040463          	beq	s0,zero,34bf8 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
    if (__is_single_threaded())
   34bd4:	0000e797          	auipc	a5,0xe
   34bd8:	8a47b783          	ld	a5,-1884(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34bdc:	0007c783          	lbu	a5,0(a5)
   34be0:	02078463          	beq	a5,zero,34c08 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x48>
    _Atomic_word __result = *__mem;
   34be4:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   34be8:	fff5079b          	addiw	a5,a0,-1
   34bec:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34bf0:	00100793          	addi	a5,zero,1
   34bf4:	02f50263          	beq	a0,a5,34c18 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x58>
      }
   34bf8:	00813083          	ld	ra,8(sp)
   34bfc:	00013403          	ld	s0,0(sp)
   34c00:	01010113          	addi	sp,sp,16
   34c04:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   34c08:	fff00593          	addi	a1,zero,-1
   34c0c:	03040513          	addi	a0,s0,48
   34c10:	f20e10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34c14:	fddff06f          	jal	zero,34bf0 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x30>
	_M_dispose();
   34c18:	00043783          	ld	a5,0(s0)
   34c1c:	0107b783          	ld	a5,16(a5)
   34c20:	00040513          	addi	a0,s0,0
   34c24:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   34c28:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   34c2c:	0000e797          	auipc	a5,0xe
   34c30:	84c7b783          	ld	a5,-1972(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34c34:	0007c783          	lbu	a5,0(a5)
   34c38:	02078663          	beq	a5,zero,34c64 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa4>
    _Atomic_word __result = *__mem;
   34c3c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   34c40:	fff5079b          	addiw	a5,a0,-1
   34c44:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   34c48:	00100793          	addi	a5,zero,1
   34c4c:	faf516e3          	bne	a0,a5,34bf8 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
	    _M_destroy();
   34c50:	00043783          	ld	a5,0(s0)
   34c54:	0187b783          	ld	a5,24(a5)
   34c58:	00040513          	addi	a0,s0,0
   34c5c:	000780e7          	jalr	ra,0(a5)
      }
   34c60:	f99ff06f          	jal	zero,34bf8 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
      return __exchange_and_add(__mem, __val);
   34c64:	fff00593          	addi	a1,zero,-1
   34c68:	03440513          	addi	a0,s0,52
   34c6c:	ec4e10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34c70:	fd9ff06f          	jal	zero,34c48 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x88>

0000000000034c74 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   34c74:	ff010113          	addi	sp,sp,-16
   34c78:	00113423          	sd	ra,8(sp)
   34c7c:	00813023          	sd	s0,0(sp)
	if (_M_pi != nullptr)
   34c80:	04053403          	ld	s0,64(a0)
   34c84:	02040463          	beq	s0,zero,34cac <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
    if (__is_single_threaded())
   34c88:	0000d797          	auipc	a5,0xd
   34c8c:	7f07b783          	ld	a5,2032(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34c90:	0007c783          	lbu	a5,0(a5)
   34c94:	02078463          	beq	a5,zero,34cbc <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x48>
    _Atomic_word __result = *__mem;
   34c98:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   34c9c:	fff5079b          	addiw	a5,a0,-1
   34ca0:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34ca4:	00100793          	addi	a5,zero,1
   34ca8:	02f50263          	beq	a0,a5,34ccc <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x58>
      }
   34cac:	00813083          	ld	ra,8(sp)
   34cb0:	00013403          	ld	s0,0(sp)
   34cb4:	01010113          	addi	sp,sp,16
   34cb8:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   34cbc:	fff00593          	addi	a1,zero,-1
   34cc0:	03040513          	addi	a0,s0,48
   34cc4:	e6ce10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34cc8:	fddff06f          	jal	zero,34ca4 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x30>
	_M_dispose();
   34ccc:	00043783          	ld	a5,0(s0)
   34cd0:	0107b783          	ld	a5,16(a5)
   34cd4:	00040513          	addi	a0,s0,0
   34cd8:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   34cdc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   34ce0:	0000d797          	auipc	a5,0xd
   34ce4:	7987b783          	ld	a5,1944(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34ce8:	0007c783          	lbu	a5,0(a5)
   34cec:	02078663          	beq	a5,zero,34d18 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa4>
    _Atomic_word __result = *__mem;
   34cf0:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   34cf4:	fff5079b          	addiw	a5,a0,-1
   34cf8:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   34cfc:	00100793          	addi	a5,zero,1
   34d00:	faf516e3          	bne	a0,a5,34cac <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
	    _M_destroy();
   34d04:	00043783          	ld	a5,0(s0)
   34d08:	0187b783          	ld	a5,24(a5)
   34d0c:	00040513          	addi	a0,s0,0
   34d10:	000780e7          	jalr	ra,0(a5)
      }
   34d14:	f99ff06f          	jal	zero,34cac <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
      return __exchange_and_add(__mem, __val);
   34d18:	fff00593          	addi	a1,zero,-1
   34d1c:	03440513          	addi	a0,s0,52
   34d20:	e10e10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34d24:	fd9ff06f          	jal	zero,34cfc <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x88>

0000000000034d28 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   34d28:	ff010113          	addi	sp,sp,-16
   34d2c:	00113423          	sd	ra,8(sp)
   34d30:	00813023          	sd	s0,0(sp)
	if (_M_pi != nullptr)
   34d34:	04053403          	ld	s0,64(a0)
   34d38:	02040463          	beq	s0,zero,34d60 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
    if (__is_single_threaded())
   34d3c:	0000d797          	auipc	a5,0xd
   34d40:	73c7b783          	ld	a5,1852(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34d44:	0007c783          	lbu	a5,0(a5)
   34d48:	02078463          	beq	a5,zero,34d70 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x48>
    _Atomic_word __result = *__mem;
   34d4c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   34d50:	fff5079b          	addiw	a5,a0,-1
   34d54:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34d58:	00100793          	addi	a5,zero,1
   34d5c:	02f50263          	beq	a0,a5,34d80 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x58>
      }
   34d60:	00813083          	ld	ra,8(sp)
   34d64:	00013403          	ld	s0,0(sp)
   34d68:	01010113          	addi	sp,sp,16
   34d6c:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   34d70:	fff00593          	addi	a1,zero,-1
   34d74:	03040513          	addi	a0,s0,48
   34d78:	db8e10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34d7c:	fddff06f          	jal	zero,34d58 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x30>
	_M_dispose();
   34d80:	00043783          	ld	a5,0(s0)
   34d84:	0107b783          	ld	a5,16(a5)
   34d88:	00040513          	addi	a0,s0,0
   34d8c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   34d90:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   34d94:	0000d797          	auipc	a5,0xd
   34d98:	6e47b783          	ld	a5,1764(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34d9c:	0007c783          	lbu	a5,0(a5)
   34da0:	02078663          	beq	a5,zero,34dcc <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa4>
    _Atomic_word __result = *__mem;
   34da4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   34da8:	fff5079b          	addiw	a5,a0,-1
   34dac:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   34db0:	00100793          	addi	a5,zero,1
   34db4:	faf516e3          	bne	a0,a5,34d60 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
	    _M_destroy();
   34db8:	00043783          	ld	a5,0(s0)
   34dbc:	0187b783          	ld	a5,24(a5)
   34dc0:	00040513          	addi	a0,s0,0
   34dc4:	000780e7          	jalr	ra,0(a5)
      }
   34dc8:	f99ff06f          	jal	zero,34d60 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
      return __exchange_and_add(__mem, __val);
   34dcc:	fff00593          	addi	a1,zero,-1
   34dd0:	03440513          	addi	a0,s0,52
   34dd4:	d5ce10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34dd8:	fd9ff06f          	jal	zero,34db0 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x88>

0000000000034ddc <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   34ddc:	fe010113          	addi	sp,sp,-32
   34de0:	00113c23          	sd	ra,24(sp)
   34de4:	00813823          	sd	s0,16(sp)
   34de8:	00913423          	sd	s1,8(sp)
   34dec:	00050413          	addi	s0,a0,0
	if (_M_pi != nullptr)
   34df0:	06053483          	ld	s1,96(a0)
   34df4:	02048463          	beq	s1,zero,34e1c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x40>
    if (__is_single_threaded())
   34df8:	0000d797          	auipc	a5,0xd
   34dfc:	6807b783          	ld	a5,1664(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34e00:	0007c783          	lbu	a5,0(a5)
   34e04:	04078c63          	beq	a5,zero,34e5c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x80>
    _Atomic_word __result = *__mem;
   34e08:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   34e0c:	fff5079b          	addiw	a5,a0,-1
   34e10:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34e14:	00100793          	addi	a5,zero,1
   34e18:	04f50a63          	beq	a0,a5,34e6c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x90>
	if (_M_pi != nullptr)
   34e1c:	04043403          	ld	s0,64(s0)
   34e20:	02040463          	beq	s0,zero,34e48 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
    if (__is_single_threaded())
   34e24:	0000d797          	auipc	a5,0xd
   34e28:	6547b783          	ld	a5,1620(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34e2c:	0007c783          	lbu	a5,0(a5)
   34e30:	08078c63          	beq	a5,zero,34ec8 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xec>
    _Atomic_word __result = *__mem;
   34e34:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   34e38:	fff5079b          	addiw	a5,a0,-1
   34e3c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34e40:	00100793          	addi	a5,zero,1
   34e44:	08f50a63          	beq	a0,a5,34ed8 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xfc>
      }
   34e48:	01813083          	ld	ra,24(sp)
   34e4c:	01013403          	ld	s0,16(sp)
   34e50:	00813483          	ld	s1,8(sp)
   34e54:	02010113          	addi	sp,sp,32
   34e58:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   34e5c:	fff00593          	addi	a1,zero,-1
   34e60:	03048513          	addi	a0,s1,48
   34e64:	ccce10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34e68:	fadff06f          	jal	zero,34e14 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
	_M_dispose();
   34e6c:	0004b783          	ld	a5,0(s1)
   34e70:	0107b783          	ld	a5,16(a5)
   34e74:	00048513          	addi	a0,s1,0
   34e78:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   34e7c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   34e80:	0000d797          	auipc	a5,0xd
   34e84:	5f87b783          	ld	a5,1528(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34e88:	0007c783          	lbu	a5,0(a5)
   34e8c:	02078663          	beq	a5,zero,34eb8 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xdc>
    _Atomic_word __result = *__mem;
   34e90:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   34e94:	fff5079b          	addiw	a5,a0,-1
   34e98:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   34e9c:	00100793          	addi	a5,zero,1
   34ea0:	f6f51ee3          	bne	a0,a5,34e1c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x40>
	    _M_destroy();
   34ea4:	0004b783          	ld	a5,0(s1)
   34ea8:	0187b783          	ld	a5,24(a5)
   34eac:	00048513          	addi	a0,s1,0
   34eb0:	000780e7          	jalr	ra,0(a5)
   34eb4:	f69ff06f          	jal	zero,34e1c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x40>
      return __exchange_and_add(__mem, __val);
   34eb8:	fff00593          	addi	a1,zero,-1
   34ebc:	03448513          	addi	a0,s1,52
   34ec0:	c70e10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34ec4:	fd9ff06f          	jal	zero,34e9c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xc0>
   34ec8:	fff00593          	addi	a1,zero,-1
   34ecc:	03040513          	addi	a0,s0,48
   34ed0:	c60e10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34ed4:	f6dff06f          	jal	zero,34e40 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x64>
	_M_dispose();
   34ed8:	00043783          	ld	a5,0(s0)
   34edc:	0107b783          	ld	a5,16(a5)
   34ee0:	00040513          	addi	a0,s0,0
   34ee4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   34ee8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   34eec:	0000d797          	auipc	a5,0xd
   34ef0:	58c7b783          	ld	a5,1420(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34ef4:	0007c783          	lbu	a5,0(a5)
   34ef8:	02078663          	beq	a5,zero,34f24 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x148>
    _Atomic_word __result = *__mem;
   34efc:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   34f00:	fff5079b          	addiw	a5,a0,-1
   34f04:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   34f08:	00100793          	addi	a5,zero,1
   34f0c:	f2f51ee3          	bne	a0,a5,34e48 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
	    _M_destroy();
   34f10:	00043783          	ld	a5,0(s0)
   34f14:	0187b783          	ld	a5,24(a5)
   34f18:	00040513          	addi	a0,s0,0
   34f1c:	000780e7          	jalr	ra,0(a5)
      }
   34f20:	f29ff06f          	jal	zero,34e48 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
      return __exchange_and_add(__mem, __val);
   34f24:	fff00593          	addi	a1,zero,-1
   34f28:	03440513          	addi	a0,s0,52
   34f2c:	c04e10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34f30:	fd9ff06f          	jal	zero,34f08 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x12c>

0000000000034f34 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   34f34:	fc010113          	addi	sp,sp,-64
   34f38:	02113c23          	sd	ra,56(sp)
   34f3c:	02813823          	sd	s0,48(sp)
   34f40:	02913423          	sd	s1,40(sp)
   34f44:	03213023          	sd	s2,32(sp)
   34f48:	01313c23          	sd	s3,24(sp)
   34f4c:	01413823          	sd	s4,16(sp)
   34f50:	01513423          	sd	s5,8(sp)
   34f54:	00050913          	addi	s2,a0,0
	if (_M_pi != nullptr)
   34f58:	0d053403          	ld	s0,208(a0)
   34f5c:	02040463          	beq	s0,zero,34f84 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x50>
    if (__is_single_threaded())
   34f60:	0000d797          	auipc	a5,0xd
   34f64:	5187b783          	ld	a5,1304(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34f68:	0007c783          	lbu	a5,0(a5)
   34f6c:	06078063          	beq	a5,zero,34fcc <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x98>
    _Atomic_word __result = *__mem;
   34f70:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   34f74:	fff5079b          	addiw	a5,a0,-1
   34f78:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34f7c:	00100793          	addi	a5,zero,1
   34f80:	04f50e63          	beq	a0,a5,34fdc <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa8>
	if (_M_pi != nullptr)
   34f84:	0c093403          	ld	s0,192(s2)
   34f88:	02040463          	beq	s0,zero,34fb0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7c>
    if (__is_single_threaded())
   34f8c:	0000d797          	auipc	a5,0xd
   34f90:	4ec7b783          	ld	a5,1260(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34f94:	0007c783          	lbu	a5,0(a5)
   34f98:	0a078063          	beq	a5,zero,35038 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x104>
    _Atomic_word __result = *__mem;
   34f9c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   34fa0:	fff5079b          	addiw	a5,a0,-1
   34fa4:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34fa8:	00100793          	addi	a5,zero,1
   34fac:	08f50e63          	beq	a0,a5,35048 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x114>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   34fb0:	0a093403          	ld	s0,160(s2)
   34fb4:	0a893983          	ld	s3,168(s2)
	  for (; __first != __last; ++__first)
   34fb8:	19340063          	beq	s0,s3,35138 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x204>
    return ::__libc_single_threaded;
   34fbc:	0000da97          	auipc	s5,0xd
   34fc0:	4bcaba83          	ld	s5,1212(s5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34fc4:	00100a13          	addi	s4,zero,1
   34fc8:	0f40006f          	jal	zero,350bc <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x188>
      return __exchange_and_add(__mem, __val);
   34fcc:	fff00593          	addi	a1,zero,-1
   34fd0:	03040513          	addi	a0,s0,48
   34fd4:	b5ce10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34fd8:	fa5ff06f          	jal	zero,34f7c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x48>
	_M_dispose();
   34fdc:	00043783          	ld	a5,0(s0)
   34fe0:	0107b783          	ld	a5,16(a5)
   34fe4:	00040513          	addi	a0,s0,0
   34fe8:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   34fec:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   34ff0:	0000d797          	auipc	a5,0xd
   34ff4:	4887b783          	ld	a5,1160(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34ff8:	0007c783          	lbu	a5,0(a5)
   34ffc:	02078663          	beq	a5,zero,35028 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xf4>
    _Atomic_word __result = *__mem;
   35000:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   35004:	fff5079b          	addiw	a5,a0,-1
   35008:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   3500c:	00100793          	addi	a5,zero,1
   35010:	f6f51ae3          	bne	a0,a5,34f84 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x50>
	    _M_destroy();
   35014:	00043783          	ld	a5,0(s0)
   35018:	0187b783          	ld	a5,24(a5)
   3501c:	00040513          	addi	a0,s0,0
   35020:	000780e7          	jalr	ra,0(a5)
   35024:	f61ff06f          	jal	zero,34f84 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x50>
      return __exchange_and_add(__mem, __val);
   35028:	fff00593          	addi	a1,zero,-1
   3502c:	03440513          	addi	a0,s0,52
   35030:	b00e10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35034:	fd9ff06f          	jal	zero,3500c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd8>
   35038:	fff00593          	addi	a1,zero,-1
   3503c:	03040513          	addi	a0,s0,48
   35040:	af0e10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35044:	f65ff06f          	jal	zero,34fa8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x74>
	_M_dispose();
   35048:	00043783          	ld	a5,0(s0)
   3504c:	0107b783          	ld	a5,16(a5)
   35050:	00040513          	addi	a0,s0,0
   35054:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   35058:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   3505c:	0000d797          	auipc	a5,0xd
   35060:	41c7b783          	ld	a5,1052(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   35064:	0007c783          	lbu	a5,0(a5)
   35068:	02078663          	beq	a5,zero,35094 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x160>
    _Atomic_word __result = *__mem;
   3506c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   35070:	fff5079b          	addiw	a5,a0,-1
   35074:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   35078:	00100793          	addi	a5,zero,1
   3507c:	f2f51ae3          	bne	a0,a5,34fb0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7c>
	    _M_destroy();
   35080:	00043783          	ld	a5,0(s0)
   35084:	0187b783          	ld	a5,24(a5)
   35088:	00040513          	addi	a0,s0,0
   3508c:	000780e7          	jalr	ra,0(a5)
   35090:	f21ff06f          	jal	zero,34fb0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7c>
      return __exchange_and_add(__mem, __val);
   35094:	fff00593          	addi	a1,zero,-1
   35098:	03440513          	addi	a0,s0,52
   3509c:	a94e10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   350a0:	fd9ff06f          	jal	zero,35078 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x144>
    _Atomic_word __result = *__mem;
   350a4:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   350a8:	fff5079b          	addiw	a5,a0,-1
   350ac:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   350b0:	03450663          	beq	a0,s4,350dc <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1a8>
   350b4:	01040413          	addi	s0,s0,16
   350b8:	08898063          	beq	s3,s0,35138 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x204>
	if (_M_pi != nullptr)
   350bc:	00843483          	ld	s1,8(s0)
   350c0:	fe048ae3          	beq	s1,zero,350b4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x180>
    if (__is_single_threaded())
   350c4:	000ac783          	lbu	a5,0(s5)
   350c8:	fc079ee3          	bne	a5,zero,350a4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x170>
      return __exchange_and_add(__mem, __val);
   350cc:	fff00593          	addi	a1,zero,-1
   350d0:	03048513          	addi	a0,s1,48
   350d4:	a5ce10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   350d8:	fd9ff06f          	jal	zero,350b0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x17c>
	_M_dispose();
   350dc:	0004b783          	ld	a5,0(s1)
   350e0:	0107b783          	ld	a5,16(a5)
   350e4:	00048513          	addi	a0,s1,0
   350e8:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   350ec:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   350f0:	0000d797          	auipc	a5,0xd
   350f4:	3887b783          	ld	a5,904(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   350f8:	0007c783          	lbu	a5,0(a5)
   350fc:	02078663          	beq	a5,zero,35128 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1f4>
    _Atomic_word __result = *__mem;
   35100:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   35104:	fff5079b          	addiw	a5,a0,-1
   35108:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   3510c:	00100793          	addi	a5,zero,1
   35110:	faf512e3          	bne	a0,a5,350b4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x180>
	    _M_destroy();
   35114:	0004b783          	ld	a5,0(s1)
   35118:	0187b783          	ld	a5,24(a5)
   3511c:	00048513          	addi	a0,s1,0
   35120:	000780e7          	jalr	ra,0(a5)
   35124:	f91ff06f          	jal	zero,350b4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x180>
      return __exchange_and_add(__mem, __val);
   35128:	fff00593          	addi	a1,zero,-1
   3512c:	03448513          	addi	a0,s1,52
   35130:	a00e10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35134:	fd9ff06f          	jal	zero,3510c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1d8>
	_M_deallocate(_M_impl._M_start,
   35138:	0a093503          	ld	a0,160(s2)
	if (__p)
   3513c:	00050463          	beq	a0,zero,35144 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x210>
   35140:	b70e10ef          	jal	ra,164b0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   35144:	08893403          	ld	s0,136(s2)
   35148:	09093983          	ld	s3,144(s2)
   3514c:	0b340463          	beq	s0,s3,351f4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2c0>
    return ::__libc_single_threaded;
   35150:	0000da97          	auipc	s5,0xd
   35154:	328aba83          	ld	s5,808(s5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   35158:	00100a13          	addi	s4,zero,1
   3515c:	01c0006f          	jal	zero,35178 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x244>
    _Atomic_word __result = *__mem;
   35160:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   35164:	fff5079b          	addiw	a5,a0,-1
   35168:	02f4a823          	sw	a5,48(s1)
   3516c:	03450663          	beq	a0,s4,35198 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x264>
   35170:	01040413          	addi	s0,s0,16
   35174:	08898063          	beq	s3,s0,351f4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2c0>
	if (_M_pi != nullptr)
   35178:	00843483          	ld	s1,8(s0)
   3517c:	fe048ae3          	beq	s1,zero,35170 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x23c>
    if (__is_single_threaded())
   35180:	000ac783          	lbu	a5,0(s5)
   35184:	fc079ee3          	bne	a5,zero,35160 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x22c>
      return __exchange_and_add(__mem, __val);
   35188:	fff00593          	addi	a1,zero,-1
   3518c:	03048513          	addi	a0,s1,48
   35190:	9a0e10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35194:	fd9ff06f          	jal	zero,3516c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x238>
	_M_dispose();
   35198:	0004b783          	ld	a5,0(s1)
   3519c:	0107b783          	ld	a5,16(a5)
   351a0:	00048513          	addi	a0,s1,0
   351a4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   351a8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   351ac:	0000d797          	auipc	a5,0xd
   351b0:	2cc7b783          	ld	a5,716(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   351b4:	0007c783          	lbu	a5,0(a5)
   351b8:	02078663          	beq	a5,zero,351e4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2b0>
    _Atomic_word __result = *__mem;
   351bc:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   351c0:	fff5079b          	addiw	a5,a0,-1
   351c4:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   351c8:	00100793          	addi	a5,zero,1
   351cc:	faf512e3          	bne	a0,a5,35170 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x23c>
	    _M_destroy();
   351d0:	0004b783          	ld	a5,0(s1)
   351d4:	0187b783          	ld	a5,24(a5)
   351d8:	00048513          	addi	a0,s1,0
   351dc:	000780e7          	jalr	ra,0(a5)
   351e0:	f91ff06f          	jal	zero,35170 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x23c>
      return __exchange_and_add(__mem, __val);
   351e4:	fff00593          	addi	a1,zero,-1
   351e8:	03448513          	addi	a0,s1,52
   351ec:	944e10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   351f0:	fd9ff06f          	jal	zero,351c8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x294>
	_M_deallocate(_M_impl._M_start,
   351f4:	08893503          	ld	a0,136(s2)
	if (__p)
   351f8:	00050463          	beq	a0,zero,35200 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2cc>
   351fc:	ab4e10ef          	jal	ra,164b0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   35200:	04093403          	ld	s0,64(s2)
   35204:	02040463          	beq	s0,zero,3522c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2f8>
    if (__is_single_threaded())
   35208:	0000d797          	auipc	a5,0xd
   3520c:	2707b783          	ld	a5,624(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   35210:	0007c783          	lbu	a5,0(a5)
   35214:	02078e63          	beq	a5,zero,35250 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x31c>
    _Atomic_word __result = *__mem;
   35218:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   3521c:	fff5079b          	addiw	a5,a0,-1
   35220:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   35224:	00100793          	addi	a5,zero,1
   35228:	02f50c63          	beq	a0,a5,35260 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x32c>
      }
   3522c:	03813083          	ld	ra,56(sp)
   35230:	03013403          	ld	s0,48(sp)
   35234:	02813483          	ld	s1,40(sp)
   35238:	02013903          	ld	s2,32(sp)
   3523c:	01813983          	ld	s3,24(sp)
   35240:	01013a03          	ld	s4,16(sp)
   35244:	00813a83          	ld	s5,8(sp)
   35248:	04010113          	addi	sp,sp,64
   3524c:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   35250:	fff00593          	addi	a1,zero,-1
   35254:	03040513          	addi	a0,s0,48
   35258:	8d8e10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   3525c:	fc9ff06f          	jal	zero,35224 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2f0>
	_M_dispose();
   35260:	00043783          	ld	a5,0(s0)
   35264:	0107b783          	ld	a5,16(a5)
   35268:	00040513          	addi	a0,s0,0
   3526c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   35270:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   35274:	0000d797          	auipc	a5,0xd
   35278:	2047b783          	ld	a5,516(a5) # 42478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   3527c:	0007c783          	lbu	a5,0(a5)
   35280:	02078663          	beq	a5,zero,352ac <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x378>
    _Atomic_word __result = *__mem;
   35284:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   35288:	fff5079b          	addiw	a5,a0,-1
   3528c:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   35290:	00100793          	addi	a5,zero,1
   35294:	f8f51ce3          	bne	a0,a5,3522c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2f8>
	    _M_destroy();
   35298:	00043783          	ld	a5,0(s0)
   3529c:	0187b783          	ld	a5,24(a5)
   352a0:	00040513          	addi	a0,s0,0
   352a4:	000780e7          	jalr	ra,0(a5)
      }
   352a8:	f85ff06f          	jal	zero,3522c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2f8>
      return __exchange_and_add(__mem, __val);
   352ac:	fff00593          	addi	a1,zero,-1
   352b0:	03440513          	addi	a0,s0,52
   352b4:	87ce10ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   352b8:	fd9ff06f          	jal	zero,35290 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x35c>

00000000000352bc <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   352bc:	fe010113          	addi	sp,sp,-32
   352c0:	00113c23          	sd	ra,24(sp)
   352c4:	00813823          	sd	s0,16(sp)
   352c8:	00913423          	sd	s1,8(sp)
   352cc:	00050493          	addi	s1,a0,0
   352d0:	00058413          	addi	s0,a1,0
  switch (ei_class) {
   352d4:	00100793          	addi	a5,zero,1
   352d8:	02f60063          	beq	a2,a5,352f8 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x3c>
   352dc:	00200793          	addi	a5,zero,2
   352e0:	28f60663          	beq	a2,a5,3556c <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x2b0>
}
   352e4:	01813083          	ld	ra,24(sp)
   352e8:	01013403          	ld	s0,16(sp)
   352ec:	00813483          	ld	s1,8(sp)
   352f0:	02010113          	addi	sp,sp,32
   352f4:	00008067          	jalr	zero,0(ra)
   352f8:	00100793          	addi	a5,zero,1
   352fc:	18f68263          	beq	a3,a5,35480 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x1c4>
   35300:	00200793          	addi	a5,zero,2
   35304:	fef690e3          	bne	a3,a5,352e4 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
  typename E::Half shentsize; // Size of section header entry
  typename E::Half shnum;     // Number of section header entries
  typename E::Half shstrndx;  // Section name string table index

  template <typename E2> void from(const E2 &o) {
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   35308:	0005c603          	lbu	a2,0(a1)
   3530c:	0015c683          	lbu	a3,1(a1)
   35310:	0025c703          	lbu	a4,2(a1)
   35314:	0035c783          	lbu	a5,3(a1)
   35318:	00c50023          	sb	a2,0(a0)
   3531c:	00d500a3          	sb	a3,1(a0)
   35320:	00e50123          	sb	a4,2(a0)
   35324:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   35328:	0045c783          	lbu	a5,4(a1)
   3532c:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   35330:	0055c783          	lbu	a5,5(a1)
   35334:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   35338:	0065c783          	lbu	a5,6(a1)
   3533c:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   35340:	0075c783          	lbu	a5,7(a1)
   35344:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   35348:	0085c783          	lbu	a5,8(a1)
   3534c:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   35350:	0095c883          	lbu	a7,9(a1)
   35354:	00a5c803          	lbu	a6,10(a1)
   35358:	00b5c503          	lbu	a0,11(a1)
   3535c:	00c5c583          	lbu	a1,12(a1)
   35360:	00d44603          	lbu	a2,13(s0)
   35364:	00e44683          	lbu	a3,14(s0)
   35368:	00f44703          	lbu	a4,15(s0)
   3536c:	011484a3          	sb	a7,9(s1)
   35370:	01048523          	sb	a6,10(s1)
   35374:	00a485a3          	sb	a0,11(s1)
   35378:	00b48623          	sb	a1,12(s1)
   3537c:	00c486a3          	sb	a2,13(s1)
   35380:	00d48723          	sb	a3,14(s1)
   35384:	00e487a3          	sb	a4,15(s1)

    type = swizzle(o.type, o.order, order);
   35388:	01045783          	lhu	a5,16(s0)
  switch (sizeof(T)) {
  case 1:
    return v;
  case 2: {
    std::uint16_t x = (std::uint16_t)v;
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   3538c:	0087d71b          	srliw	a4,a5,0x8
   35390:	0087979b          	slliw	a5,a5,0x8
   35394:	00f767b3          	or	a5,a4,a5
   35398:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   3539c:	01245783          	lhu	a5,18(s0)
   353a0:	0087d71b          	srliw	a4,a5,0x8
   353a4:	0087979b          	slliw	a5,a5,0x8
   353a8:	00f767b3          	or	a5,a4,a5
   353ac:	00f49923          	sh	a5,18(s1)
  }
  case 4:
    return (T)__builtin_bswap32((std::uint32_t)v);
   353b0:	01442503          	lw	a0,20(s0)
   353b4:	f6de00ef          	jal	ra,16320 <__bswapsi2@plt>
    version = swizzle(o.version, o.order, order);
   353b8:	00a4aa23          	sw	a0,20(s1)
   353bc:	01842503          	lw	a0,24(s0)
   353c0:	f61e00ef          	jal	ra,16320 <__bswapsi2@plt>
    entry = swizzle(o.entry, o.order, order);
   353c4:	02051513          	slli	a0,a0,0x20
   353c8:	02055513          	srli	a0,a0,0x20
   353cc:	00a4bc23          	sd	a0,24(s1)
   353d0:	01c42503          	lw	a0,28(s0)
   353d4:	f4de00ef          	jal	ra,16320 <__bswapsi2@plt>
    phoff = swizzle(o.phoff, o.order, order);
   353d8:	02051513          	slli	a0,a0,0x20
   353dc:	02055513          	srli	a0,a0,0x20
   353e0:	02a4b023          	sd	a0,32(s1)
   353e4:	02042503          	lw	a0,32(s0)
   353e8:	f39e00ef          	jal	ra,16320 <__bswapsi2@plt>
    shoff = swizzle(o.shoff, o.order, order);
   353ec:	02051513          	slli	a0,a0,0x20
   353f0:	02055513          	srli	a0,a0,0x20
   353f4:	02a4b423          	sd	a0,40(s1)
   353f8:	02442503          	lw	a0,36(s0)
   353fc:	f25e00ef          	jal	ra,16320 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   35400:	02a4a823          	sw	a0,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   35404:	02845783          	lhu	a5,40(s0)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   35408:	0087d71b          	srliw	a4,a5,0x8
   3540c:	0087979b          	slliw	a5,a5,0x8
   35410:	00f767b3          	or	a5,a4,a5
   35414:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   35418:	02a45783          	lhu	a5,42(s0)
   3541c:	0087d71b          	srliw	a4,a5,0x8
   35420:	0087979b          	slliw	a5,a5,0x8
   35424:	00f767b3          	or	a5,a4,a5
   35428:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   3542c:	02c45783          	lhu	a5,44(s0)
   35430:	0087d71b          	srliw	a4,a5,0x8
   35434:	0087979b          	slliw	a5,a5,0x8
   35438:	00f767b3          	or	a5,a4,a5
   3543c:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   35440:	02e45783          	lhu	a5,46(s0)
   35444:	0087d71b          	srliw	a4,a5,0x8
   35448:	0087979b          	slliw	a5,a5,0x8
   3544c:	00f767b3          	or	a5,a4,a5
   35450:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   35454:	03045783          	lhu	a5,48(s0)
   35458:	0087d71b          	srliw	a4,a5,0x8
   3545c:	0087979b          	slliw	a5,a5,0x8
   35460:	00f767b3          	or	a5,a4,a5
   35464:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   35468:	03245783          	lhu	a5,50(s0)
   3546c:	0087d71b          	srliw	a4,a5,0x8
   35470:	0087979b          	slliw	a5,a5,0x8
   35474:	00f767b3          	or	a5,a4,a5
   35478:	02f49f23          	sh	a5,62(s1)
  }
   3547c:	e69ff06f          	jal	zero,352e4 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   35480:	0005c603          	lbu	a2,0(a1)
   35484:	0015c683          	lbu	a3,1(a1)
   35488:	0025c703          	lbu	a4,2(a1)
   3548c:	0035c783          	lbu	a5,3(a1)
   35490:	00c50023          	sb	a2,0(a0)
   35494:	00d500a3          	sb	a3,1(a0)
   35498:	00e50123          	sb	a4,2(a0)
   3549c:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   354a0:	0045c783          	lbu	a5,4(a1)
   354a4:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   354a8:	0055c783          	lbu	a5,5(a1)
   354ac:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   354b0:	0065c783          	lbu	a5,6(a1)
   354b4:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   354b8:	0075c783          	lbu	a5,7(a1)
   354bc:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   354c0:	0085c783          	lbu	a5,8(a1)
   354c4:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   354c8:	0095c883          	lbu	a7,9(a1)
   354cc:	00a5c803          	lbu	a6,10(a1)
   354d0:	00b5c503          	lbu	a0,11(a1)
   354d4:	00c5c583          	lbu	a1,12(a1)
   354d8:	00d44603          	lbu	a2,13(s0)
   354dc:	00e44683          	lbu	a3,14(s0)
   354e0:	00f44703          	lbu	a4,15(s0)
   354e4:	011484a3          	sb	a7,9(s1)
   354e8:	01048523          	sb	a6,10(s1)
   354ec:	00a485a3          	sb	a0,11(s1)
   354f0:	00b48623          	sb	a1,12(s1)
   354f4:	00c486a3          	sb	a2,13(s1)
   354f8:	00d48723          	sb	a3,14(s1)
   354fc:	00e487a3          	sb	a4,15(s1)
    type = swizzle(o.type, o.order, order);
   35500:	01045783          	lhu	a5,16(s0)
   35504:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   35508:	01245783          	lhu	a5,18(s0)
   3550c:	00f49923          	sh	a5,18(s1)
    version = swizzle(o.version, o.order, order);
   35510:	01442783          	lw	a5,20(s0)
   35514:	00f4aa23          	sw	a5,20(s1)
    entry = swizzle(o.entry, o.order, order);
   35518:	01846783          	lwu	a5,24(s0)
   3551c:	00f4bc23          	sd	a5,24(s1)
    phoff = swizzle(o.phoff, o.order, order);
   35520:	01c46783          	lwu	a5,28(s0)
   35524:	02f4b023          	sd	a5,32(s1)
    shoff = swizzle(o.shoff, o.order, order);
   35528:	02046783          	lwu	a5,32(s0)
   3552c:	02f4b423          	sd	a5,40(s1)
    flags = swizzle(o.flags, o.order, order);
   35530:	02442783          	lw	a5,36(s0)
   35534:	02f4a823          	sw	a5,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   35538:	02845783          	lhu	a5,40(s0)
   3553c:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   35540:	02a45783          	lhu	a5,42(s0)
   35544:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   35548:	02c45783          	lhu	a5,44(s0)
   3554c:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   35550:	02e45783          	lhu	a5,46(s0)
   35554:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   35558:	03045783          	lhu	a5,48(s0)
   3555c:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   35560:	03245783          	lhu	a5,50(s0)
   35564:	02f49f23          	sh	a5,62(s1)
  }
   35568:	d7dff06f          	jal	zero,352e4 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
   3556c:	00100793          	addi	a5,zero,1
   35570:	16f68663          	beq	a3,a5,356dc <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x420>
   35574:	00200793          	addi	a5,zero,2
   35578:	d6f696e3          	bne	a3,a5,352e4 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   3557c:	0005c603          	lbu	a2,0(a1)
   35580:	0015c683          	lbu	a3,1(a1)
   35584:	0025c703          	lbu	a4,2(a1)
   35588:	0035c783          	lbu	a5,3(a1)
   3558c:	00c50023          	sb	a2,0(a0)
   35590:	00d500a3          	sb	a3,1(a0)
   35594:	00e50123          	sb	a4,2(a0)
   35598:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   3559c:	0045c783          	lbu	a5,4(a1)
   355a0:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   355a4:	0055c783          	lbu	a5,5(a1)
   355a8:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   355ac:	0065c783          	lbu	a5,6(a1)
   355b0:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   355b4:	0075c783          	lbu	a5,7(a1)
   355b8:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   355bc:	0085c783          	lbu	a5,8(a1)
   355c0:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   355c4:	0095c883          	lbu	a7,9(a1)
   355c8:	00a5c803          	lbu	a6,10(a1)
   355cc:	00b5c503          	lbu	a0,11(a1)
   355d0:	00c5c583          	lbu	a1,12(a1)
   355d4:	00d44603          	lbu	a2,13(s0)
   355d8:	00e44683          	lbu	a3,14(s0)
   355dc:	00f44703          	lbu	a4,15(s0)
   355e0:	011484a3          	sb	a7,9(s1)
   355e4:	01048523          	sb	a6,10(s1)
   355e8:	00a485a3          	sb	a0,11(s1)
   355ec:	00b48623          	sb	a1,12(s1)
   355f0:	00c486a3          	sb	a2,13(s1)
   355f4:	00d48723          	sb	a3,14(s1)
   355f8:	00e487a3          	sb	a4,15(s1)
    type = swizzle(o.type, o.order, order);
   355fc:	01045783          	lhu	a5,16(s0)
   35600:	0087d71b          	srliw	a4,a5,0x8
   35604:	0087979b          	slliw	a5,a5,0x8
   35608:	00f767b3          	or	a5,a4,a5
   3560c:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   35610:	01245783          	lhu	a5,18(s0)
   35614:	0087d71b          	srliw	a4,a5,0x8
   35618:	0087979b          	slliw	a5,a5,0x8
   3561c:	00f767b3          	or	a5,a4,a5
   35620:	00f49923          	sh	a5,18(s1)
    return (T)__builtin_bswap32((std::uint32_t)v);
   35624:	01442503          	lw	a0,20(s0)
   35628:	cf9e00ef          	jal	ra,16320 <__bswapsi2@plt>
    version = swizzle(o.version, o.order, order);
   3562c:	00a4aa23          	sw	a0,20(s1)
  case 8:
    return (T)__builtin_bswap64((std::uint64_t)v);
   35630:	01843503          	ld	a0,24(s0)
   35634:	ebde00ef          	jal	ra,164f0 <__bswapdi2@plt>
    entry = swizzle(o.entry, o.order, order);
   35638:	00a4bc23          	sd	a0,24(s1)
   3563c:	02043503          	ld	a0,32(s0)
   35640:	eb1e00ef          	jal	ra,164f0 <__bswapdi2@plt>
    phoff = swizzle(o.phoff, o.order, order);
   35644:	02a4b023          	sd	a0,32(s1)
   35648:	02843503          	ld	a0,40(s0)
   3564c:	ea5e00ef          	jal	ra,164f0 <__bswapdi2@plt>
    shoff = swizzle(o.shoff, o.order, order);
   35650:	02a4b423          	sd	a0,40(s1)
    return (T)__builtin_bswap32((std::uint32_t)v);
   35654:	03042503          	lw	a0,48(s0)
   35658:	cc9e00ef          	jal	ra,16320 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   3565c:	02a4a823          	sw	a0,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   35660:	03445783          	lhu	a5,52(s0)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   35664:	0087d71b          	srliw	a4,a5,0x8
   35668:	0087979b          	slliw	a5,a5,0x8
   3566c:	00f767b3          	or	a5,a4,a5
   35670:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   35674:	03645783          	lhu	a5,54(s0)
   35678:	0087d71b          	srliw	a4,a5,0x8
   3567c:	0087979b          	slliw	a5,a5,0x8
   35680:	00f767b3          	or	a5,a4,a5
   35684:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   35688:	03845783          	lhu	a5,56(s0)
   3568c:	0087d71b          	srliw	a4,a5,0x8
   35690:	0087979b          	slliw	a5,a5,0x8
   35694:	00f767b3          	or	a5,a4,a5
   35698:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   3569c:	03a45783          	lhu	a5,58(s0)
   356a0:	0087d71b          	srliw	a4,a5,0x8
   356a4:	0087979b          	slliw	a5,a5,0x8
   356a8:	00f767b3          	or	a5,a4,a5
   356ac:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   356b0:	03c45783          	lhu	a5,60(s0)
   356b4:	0087d71b          	srliw	a4,a5,0x8
   356b8:	0087979b          	slliw	a5,a5,0x8
   356bc:	00f767b3          	or	a5,a4,a5
   356c0:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   356c4:	03e45783          	lhu	a5,62(s0)
   356c8:	0087d71b          	srliw	a4,a5,0x8
   356cc:	0087979b          	slliw	a5,a5,0x8
   356d0:	00f767b3          	or	a5,a4,a5
   356d4:	02f49f23          	sh	a5,62(s1)
  }
   356d8:	c0dff06f          	jal	zero,352e4 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   356dc:	0005c603          	lbu	a2,0(a1)
   356e0:	0015c683          	lbu	a3,1(a1)
   356e4:	0025c703          	lbu	a4,2(a1)
   356e8:	0035c783          	lbu	a5,3(a1)
   356ec:	00c50023          	sb	a2,0(a0)
   356f0:	00d500a3          	sb	a3,1(a0)
   356f4:	00e50123          	sb	a4,2(a0)
   356f8:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   356fc:	0045c783          	lbu	a5,4(a1)
   35700:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   35704:	0055c783          	lbu	a5,5(a1)
   35708:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   3570c:	0065c783          	lbu	a5,6(a1)
   35710:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   35714:	0075c783          	lbu	a5,7(a1)
   35718:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   3571c:	0085c783          	lbu	a5,8(a1)
   35720:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   35724:	0095c883          	lbu	a7,9(a1)
   35728:	00a5c803          	lbu	a6,10(a1)
   3572c:	00b5c503          	lbu	a0,11(a1)
   35730:	00c5c583          	lbu	a1,12(a1)
   35734:	00d44603          	lbu	a2,13(s0)
   35738:	00e44683          	lbu	a3,14(s0)
   3573c:	00f44703          	lbu	a4,15(s0)
   35740:	011484a3          	sb	a7,9(s1)
   35744:	01048523          	sb	a6,10(s1)
   35748:	00a485a3          	sb	a0,11(s1)
   3574c:	00b48623          	sb	a1,12(s1)
   35750:	00c486a3          	sb	a2,13(s1)
   35754:	00d48723          	sb	a3,14(s1)
   35758:	00e487a3          	sb	a4,15(s1)
    type = swizzle(o.type, o.order, order);
   3575c:	01045783          	lhu	a5,16(s0)
   35760:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   35764:	01245783          	lhu	a5,18(s0)
   35768:	00f49923          	sh	a5,18(s1)
    version = swizzle(o.version, o.order, order);
   3576c:	01442783          	lw	a5,20(s0)
   35770:	00f4aa23          	sw	a5,20(s1)
    entry = swizzle(o.entry, o.order, order);
   35774:	01843783          	ld	a5,24(s0)
   35778:	00f4bc23          	sd	a5,24(s1)
    phoff = swizzle(o.phoff, o.order, order);
   3577c:	02043783          	ld	a5,32(s0)
   35780:	02f4b023          	sd	a5,32(s1)
    shoff = swizzle(o.shoff, o.order, order);
   35784:	02843783          	ld	a5,40(s0)
   35788:	02f4b423          	sd	a5,40(s1)
    flags = swizzle(o.flags, o.order, order);
   3578c:	03042783          	lw	a5,48(s0)
   35790:	02f4a823          	sw	a5,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   35794:	03445783          	lhu	a5,52(s0)
   35798:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   3579c:	03645783          	lhu	a5,54(s0)
   357a0:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   357a4:	03845783          	lhu	a5,56(s0)
   357a8:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   357ac:	03a45783          	lhu	a5,58(s0)
   357b0:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   357b4:	03c45783          	lhu	a5,60(s0)
   357b8:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   357bc:	03e45783          	lhu	a5,62(s0)
   357c0:	02f49f23          	sh	a5,62(s1)
  }
   357c4:	b21ff06f          	jal	zero,352e4 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>

00000000000357c8 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   357c8:	fe010113          	addi	sp,sp,-32
   357cc:	00113c23          	sd	ra,24(sp)
   357d0:	00813823          	sd	s0,16(sp)
   357d4:	00913423          	sd	s1,8(sp)
   357d8:	00050413          	addi	s0,a0,0
   357dc:	00058493          	addi	s1,a1,0
  switch (ei_class) {
   357e0:	00100793          	addi	a5,zero,1
   357e4:	02f60063          	beq	a2,a5,35804 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x3c>
   357e8:	00200793          	addi	a5,zero,2
   357ec:	10f60063          	beq	a2,a5,358ec <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x124>
}
   357f0:	01813083          	ld	ra,24(sp)
   357f4:	01013403          	ld	s0,16(sp)
   357f8:	00813483          	ld	s1,8(sp)
   357fc:	02010113          	addi	sp,sp,32
   35800:	00008067          	jalr	zero,0(ra)
   35804:	00100793          	addi	a5,zero,1
   35808:	0af68063          	beq	a3,a5,358a8 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0xe0>
   3580c:	00200793          	addi	a5,zero,2
   35810:	fef690e3          	bne	a3,a5,357f0 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    return (T)__builtin_bswap32((std::uint32_t)v);
   35814:	0005a503          	lw	a0,0(a1)
   35818:	b09e00ef          	jal	ra,16320 <__bswapsi2@plt>
  Elf64::Xword filesz; // Size of segment in file
  Elf64::Xword memsz;  // Size of segment in memory
  Elf64::Xword align;  // Alignment of segment

  template <typename E2> void from(const E2 &o) {
    type = swizzle(o.type, o.order, order);
   3581c:	00a42023          	sw	a0,0(s0)
   35820:	0044a503          	lw	a0,4(s1)
   35824:	afde00ef          	jal	ra,16320 <__bswapsi2@plt>
    offset = swizzle(o.offset, o.order, order);
   35828:	02051513          	slli	a0,a0,0x20
   3582c:	02055513          	srli	a0,a0,0x20
   35830:	00a43423          	sd	a0,8(s0)
   35834:	0084a503          	lw	a0,8(s1)
   35838:	ae9e00ef          	jal	ra,16320 <__bswapsi2@plt>
    vaddr = swizzle(o.vaddr, o.order, order);
   3583c:	02051513          	slli	a0,a0,0x20
   35840:	02055513          	srli	a0,a0,0x20
   35844:	00a43823          	sd	a0,16(s0)
   35848:	00c4a503          	lw	a0,12(s1)
   3584c:	ad5e00ef          	jal	ra,16320 <__bswapsi2@plt>
    paddr = swizzle(o.paddr, o.order, order);
   35850:	02051513          	slli	a0,a0,0x20
   35854:	02055513          	srli	a0,a0,0x20
   35858:	00a43c23          	sd	a0,24(s0)
   3585c:	0104a503          	lw	a0,16(s1)
   35860:	ac1e00ef          	jal	ra,16320 <__bswapsi2@plt>
    filesz = swizzle(o.filesz, o.order, order);
   35864:	02051513          	slli	a0,a0,0x20
   35868:	02055513          	srli	a0,a0,0x20
   3586c:	02a43023          	sd	a0,32(s0)
   35870:	0144a503          	lw	a0,20(s1)
   35874:	aade00ef          	jal	ra,16320 <__bswapsi2@plt>
    memsz = swizzle(o.memsz, o.order, order);
   35878:	02051513          	slli	a0,a0,0x20
   3587c:	02055513          	srli	a0,a0,0x20
   35880:	02a43423          	sd	a0,40(s0)
   35884:	0184a503          	lw	a0,24(s1)
   35888:	a99e00ef          	jal	ra,16320 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   3588c:	00a42223          	sw	a0,4(s0)
   35890:	01c4a503          	lw	a0,28(s1)
   35894:	a8de00ef          	jal	ra,16320 <__bswapsi2@plt>
    align = swizzle(o.align, o.order, order);
   35898:	02051513          	slli	a0,a0,0x20
   3589c:	02055513          	srli	a0,a0,0x20
   358a0:	02a43823          	sd	a0,48(s0)
  }
   358a4:	f4dff06f          	jal	zero,357f0 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    type = swizzle(o.type, o.order, order);
   358a8:	0005a783          	lw	a5,0(a1)
   358ac:	00f52023          	sw	a5,0(a0)
    offset = swizzle(o.offset, o.order, order);
   358b0:	0045e783          	lwu	a5,4(a1)
   358b4:	00f53423          	sd	a5,8(a0)
    vaddr = swizzle(o.vaddr, o.order, order);
   358b8:	0085e783          	lwu	a5,8(a1)
   358bc:	00f53823          	sd	a5,16(a0)
    paddr = swizzle(o.paddr, o.order, order);
   358c0:	00c5e783          	lwu	a5,12(a1)
   358c4:	00f53c23          	sd	a5,24(a0)
    filesz = swizzle(o.filesz, o.order, order);
   358c8:	0105e783          	lwu	a5,16(a1)
   358cc:	02f53023          	sd	a5,32(a0)
    memsz = swizzle(o.memsz, o.order, order);
   358d0:	0145e783          	lwu	a5,20(a1)
   358d4:	02f53423          	sd	a5,40(a0)
    flags = swizzle(o.flags, o.order, order);
   358d8:	0185a783          	lw	a5,24(a1)
   358dc:	00f52223          	sw	a5,4(a0)
    align = swizzle(o.align, o.order, order);
   358e0:	01c5e783          	lwu	a5,28(a1)
   358e4:	02f53823          	sd	a5,48(a0)
  }
   358e8:	f09ff06f          	jal	zero,357f0 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
   358ec:	00100793          	addi	a5,zero,1
   358f0:	06f68863          	beq	a3,a5,35960 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x198>
   358f4:	00200793          	addi	a5,zero,2
   358f8:	eef69ce3          	bne	a3,a5,357f0 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
   358fc:	0005a503          	lw	a0,0(a1)
   35900:	a21e00ef          	jal	ra,16320 <__bswapsi2@plt>
    type = swizzle(o.type, o.order, order);
   35904:	00a42023          	sw	a0,0(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   35908:	0084b503          	ld	a0,8(s1)
   3590c:	be5e00ef          	jal	ra,164f0 <__bswapdi2@plt>
    offset = swizzle(o.offset, o.order, order);
   35910:	00a43423          	sd	a0,8(s0)
   35914:	0104b503          	ld	a0,16(s1)
   35918:	bd9e00ef          	jal	ra,164f0 <__bswapdi2@plt>
    vaddr = swizzle(o.vaddr, o.order, order);
   3591c:	00a43823          	sd	a0,16(s0)
   35920:	0184b503          	ld	a0,24(s1)
   35924:	bcde00ef          	jal	ra,164f0 <__bswapdi2@plt>
    paddr = swizzle(o.paddr, o.order, order);
   35928:	00a43c23          	sd	a0,24(s0)
   3592c:	0204b503          	ld	a0,32(s1)
   35930:	bc1e00ef          	jal	ra,164f0 <__bswapdi2@plt>
    filesz = swizzle(o.filesz, o.order, order);
   35934:	02a43023          	sd	a0,32(s0)
   35938:	0284b503          	ld	a0,40(s1)
   3593c:	bb5e00ef          	jal	ra,164f0 <__bswapdi2@plt>
    memsz = swizzle(o.memsz, o.order, order);
   35940:	02a43423          	sd	a0,40(s0)
    return (T)__builtin_bswap32((std::uint32_t)v);
   35944:	0044a503          	lw	a0,4(s1)
   35948:	9d9e00ef          	jal	ra,16320 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   3594c:	00a42223          	sw	a0,4(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   35950:	0304b503          	ld	a0,48(s1)
   35954:	b9de00ef          	jal	ra,164f0 <__bswapdi2@plt>
    align = swizzle(o.align, o.order, order);
   35958:	02a43823          	sd	a0,48(s0)
  }
   3595c:	e95ff06f          	jal	zero,357f0 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    type = swizzle(o.type, o.order, order);
   35960:	0005a783          	lw	a5,0(a1)
   35964:	00f52023          	sw	a5,0(a0)
    offset = swizzle(o.offset, o.order, order);
   35968:	0085b783          	ld	a5,8(a1)
   3596c:	00f53423          	sd	a5,8(a0)
    vaddr = swizzle(o.vaddr, o.order, order);
   35970:	0105b783          	ld	a5,16(a1)
   35974:	00f53823          	sd	a5,16(a0)
    paddr = swizzle(o.paddr, o.order, order);
   35978:	0185b783          	ld	a5,24(a1)
   3597c:	00f53c23          	sd	a5,24(a0)
    filesz = swizzle(o.filesz, o.order, order);
   35980:	0205b783          	ld	a5,32(a1)
   35984:	02f53023          	sd	a5,32(a0)
    memsz = swizzle(o.memsz, o.order, order);
   35988:	0285b783          	ld	a5,40(a1)
   3598c:	02f53423          	sd	a5,40(a0)
    flags = swizzle(o.flags, o.order, order);
   35990:	0045a783          	lw	a5,4(a1)
   35994:	00f52223          	sw	a5,4(a0)
    align = swizzle(o.align, o.order, order);
   35998:	0305b783          	ld	a5,48(a1)
   3599c:	02f53823          	sd	a5,48(a0)
  }
   359a0:	e51ff06f          	jal	zero,357f0 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>

00000000000359a4 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   359a4:	fe010113          	addi	sp,sp,-32
   359a8:	00113c23          	sd	ra,24(sp)
   359ac:	00813823          	sd	s0,16(sp)
   359b0:	00913423          	sd	s1,8(sp)
   359b4:	00050413          	addi	s0,a0,0
   359b8:	00058493          	addi	s1,a1,0
  switch (ei_class) {
   359bc:	00100793          	addi	a5,zero,1
   359c0:	02f60063          	beq	a2,a5,359e0 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x3c>
   359c4:	00200793          	addi	a5,zero,2
   359c8:	12f60463          	beq	a2,a5,35af0 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x14c>
}
   359cc:	01813083          	ld	ra,24(sp)
   359d0:	01013403          	ld	s0,16(sp)
   359d4:	00813483          	ld	s1,8(sp)
   359d8:	02010113          	addi	sp,sp,32
   359dc:	00008067          	jalr	zero,0(ra)
   359e0:	00100793          	addi	a5,zero,1
   359e4:	0af68c63          	beq	a3,a5,35a9c <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0xf8>
   359e8:	00200793          	addi	a5,zero,2
   359ec:	fef690e3          	bne	a3,a5,359cc <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    return (T)__builtin_bswap32((std::uint32_t)v);
   359f0:	0005a503          	lw	a0,0(a1)
   359f4:	92de00ef          	jal	ra,16320 <__bswapsi2@plt>
    name = swizzle(o.name, o.order, order);
   359f8:	00a42023          	sw	a0,0(s0)
   359fc:	0044a503          	lw	a0,4(s1)
   35a00:	921e00ef          	jal	ra,16320 <__bswapsi2@plt>
    type = swizzle(o.type, o.order, order);
   35a04:	00a42223          	sw	a0,4(s0)
   35a08:	0084a503          	lw	a0,8(s1)
   35a0c:	915e00ef          	jal	ra,16320 <__bswapsi2@plt>
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   35a10:	02051513          	slli	a0,a0,0x20
   35a14:	02055513          	srli	a0,a0,0x20
   35a18:	00a43423          	sd	a0,8(s0)
   35a1c:	00c4a503          	lw	a0,12(s1)
   35a20:	901e00ef          	jal	ra,16320 <__bswapsi2@plt>
    addr = swizzle(o.addr, o.order, order);
   35a24:	02051513          	slli	a0,a0,0x20
   35a28:	02055513          	srli	a0,a0,0x20
   35a2c:	00a43823          	sd	a0,16(s0)
   35a30:	0104a503          	lw	a0,16(s1)
   35a34:	8ede00ef          	jal	ra,16320 <__bswapsi2@plt>
    offset = swizzle(o.offset, o.order, order);
   35a38:	02051513          	slli	a0,a0,0x20
   35a3c:	02055513          	srli	a0,a0,0x20
   35a40:	00a43c23          	sd	a0,24(s0)
   35a44:	0144a503          	lw	a0,20(s1)
   35a48:	8d9e00ef          	jal	ra,16320 <__bswapsi2@plt>
    size = swizzle(o.size, o.order, order);
   35a4c:	02051513          	slli	a0,a0,0x20
   35a50:	02055513          	srli	a0,a0,0x20
   35a54:	02a43023          	sd	a0,32(s0)
   35a58:	0184a503          	lw	a0,24(s1)
   35a5c:	8c5e00ef          	jal	ra,16320 <__bswapsi2@plt>
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   35a60:	02a41423          	sh	a0,40(s0)
   35a64:	01c4a503          	lw	a0,28(s1)
   35a68:	8b9e00ef          	jal	ra,16320 <__bswapsi2@plt>
    info = swizzle(o.info, o.order, order);
   35a6c:	02a42623          	sw	a0,44(s0)
   35a70:	0204a503          	lw	a0,32(s1)
   35a74:	8ade00ef          	jal	ra,16320 <__bswapsi2@plt>
    addralign = swizzle(o.addralign, o.order, order);
   35a78:	02051513          	slli	a0,a0,0x20
   35a7c:	02055513          	srli	a0,a0,0x20
   35a80:	02a43823          	sd	a0,48(s0)
   35a84:	0244a503          	lw	a0,36(s1)
   35a88:	899e00ef          	jal	ra,16320 <__bswapsi2@plt>
    entsize = swizzle(o.entsize, o.order, order);
   35a8c:	02051513          	slli	a0,a0,0x20
   35a90:	02055513          	srli	a0,a0,0x20
   35a94:	02a43c23          	sd	a0,56(s0)
  }
   35a98:	f35ff06f          	jal	zero,359cc <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    name = swizzle(o.name, o.order, order);
   35a9c:	0005a783          	lw	a5,0(a1)
   35aa0:	00f52023          	sw	a5,0(a0)
    type = swizzle(o.type, o.order, order);
   35aa4:	0045a783          	lw	a5,4(a1)
   35aa8:	00f52223          	sw	a5,4(a0)
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   35aac:	0085e783          	lwu	a5,8(a1)
   35ab0:	00f53423          	sd	a5,8(a0)
    addr = swizzle(o.addr, o.order, order);
   35ab4:	00c5e783          	lwu	a5,12(a1)
   35ab8:	00f53823          	sd	a5,16(a0)
    offset = swizzle(o.offset, o.order, order);
   35abc:	0105e783          	lwu	a5,16(a1)
   35ac0:	00f53c23          	sd	a5,24(a0)
    size = swizzle(o.size, o.order, order);
   35ac4:	0145e783          	lwu	a5,20(a1)
   35ac8:	02f53023          	sd	a5,32(a0)
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   35acc:	0185a783          	lw	a5,24(a1)
   35ad0:	02f51423          	sh	a5,40(a0)
    info = swizzle(o.info, o.order, order);
   35ad4:	01c5a783          	lw	a5,28(a1)
   35ad8:	02f52623          	sw	a5,44(a0)
    addralign = swizzle(o.addralign, o.order, order);
   35adc:	0205e783          	lwu	a5,32(a1)
   35ae0:	02f53823          	sd	a5,48(a0)
    entsize = swizzle(o.entsize, o.order, order);
   35ae4:	0245e783          	lwu	a5,36(a1)
   35ae8:	02f53c23          	sd	a5,56(a0)
  }
   35aec:	ee1ff06f          	jal	zero,359cc <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
   35af0:	00100793          	addi	a5,zero,1
   35af4:	08f68463          	beq	a3,a5,35b7c <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x1d8>
   35af8:	00200793          	addi	a5,zero,2
   35afc:	ecf698e3          	bne	a3,a5,359cc <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
   35b00:	0005a503          	lw	a0,0(a1)
   35b04:	81de00ef          	jal	ra,16320 <__bswapsi2@plt>
    name = swizzle(o.name, o.order, order);
   35b08:	00a42023          	sw	a0,0(s0)
   35b0c:	0044a503          	lw	a0,4(s1)
   35b10:	811e00ef          	jal	ra,16320 <__bswapsi2@plt>
    type = swizzle(o.type, o.order, order);
   35b14:	00a42223          	sw	a0,4(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   35b18:	0084b503          	ld	a0,8(s1)
   35b1c:	9d5e00ef          	jal	ra,164f0 <__bswapdi2@plt>
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   35b20:	00a43423          	sd	a0,8(s0)
   35b24:	0104b503          	ld	a0,16(s1)
   35b28:	9c9e00ef          	jal	ra,164f0 <__bswapdi2@plt>
    addr = swizzle(o.addr, o.order, order);
   35b2c:	00a43823          	sd	a0,16(s0)
   35b30:	0184b503          	ld	a0,24(s1)
   35b34:	9bde00ef          	jal	ra,164f0 <__bswapdi2@plt>
    offset = swizzle(o.offset, o.order, order);
   35b38:	00a43c23          	sd	a0,24(s0)
   35b3c:	0204b503          	ld	a0,32(s1)
   35b40:	9b1e00ef          	jal	ra,164f0 <__bswapdi2@plt>
    size = swizzle(o.size, o.order, order);
   35b44:	02a43023          	sd	a0,32(s0)
    return (T)__builtin_bswap32((std::uint32_t)v);
   35b48:	0284a503          	lw	a0,40(s1)
   35b4c:	fd4e00ef          	jal	ra,16320 <__bswapsi2@plt>
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   35b50:	02a41423          	sh	a0,40(s0)
   35b54:	02c4a503          	lw	a0,44(s1)
   35b58:	fc8e00ef          	jal	ra,16320 <__bswapsi2@plt>
    info = swizzle(o.info, o.order, order);
   35b5c:	02a42623          	sw	a0,44(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   35b60:	0304b503          	ld	a0,48(s1)
   35b64:	98de00ef          	jal	ra,164f0 <__bswapdi2@plt>
    addralign = swizzle(o.addralign, o.order, order);
   35b68:	02a43823          	sd	a0,48(s0)
   35b6c:	0384b503          	ld	a0,56(s1)
   35b70:	981e00ef          	jal	ra,164f0 <__bswapdi2@plt>
    entsize = swizzle(o.entsize, o.order, order);
   35b74:	02a43c23          	sd	a0,56(s0)
  }
   35b78:	e55ff06f          	jal	zero,359cc <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    name = swizzle(o.name, o.order, order);
   35b7c:	0005a783          	lw	a5,0(a1)
   35b80:	00f52023          	sw	a5,0(a0)
    type = swizzle(o.type, o.order, order);
   35b84:	0045a783          	lw	a5,4(a1)
   35b88:	00f52223          	sw	a5,4(a0)
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   35b8c:	0085b783          	ld	a5,8(a1)
   35b90:	00f53423          	sd	a5,8(a0)
    addr = swizzle(o.addr, o.order, order);
   35b94:	0105b783          	ld	a5,16(a1)
   35b98:	00f53823          	sd	a5,16(a0)
    offset = swizzle(o.offset, o.order, order);
   35b9c:	0185b783          	ld	a5,24(a1)
   35ba0:	00f53c23          	sd	a5,24(a0)
    size = swizzle(o.size, o.order, order);
   35ba4:	0205b783          	ld	a5,32(a1)
   35ba8:	02f53023          	sd	a5,32(a0)
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   35bac:	0285a783          	lw	a5,40(a1)
   35bb0:	02f51423          	sh	a5,40(a0)
    info = swizzle(o.info, o.order, order);
   35bb4:	02c5a783          	lw	a5,44(a1)
   35bb8:	02f52623          	sw	a5,44(a0)
    addralign = swizzle(o.addralign, o.order, order);
   35bbc:	0305b783          	ld	a5,48(a1)
   35bc0:	02f53823          	sd	a5,48(a0)
    entsize = swizzle(o.entsize, o.order, order);
   35bc4:	0385b783          	ld	a5,56(a1)
   35bc8:	02f53c23          	sd	a5,56(a0)
  }
   35bcc:	e01ff06f          	jal	zero,359cc <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>

0000000000035bd0 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   35bd0:	fe010113          	addi	sp,sp,-32
   35bd4:	00113c23          	sd	ra,24(sp)
   35bd8:	00813823          	sd	s0,16(sp)
   35bdc:	00913423          	sd	s1,8(sp)
   35be0:	00050413          	addi	s0,a0,0
   35be4:	00058493          	addi	s1,a1,0
  switch (ei_class) {
   35be8:	00100793          	addi	a5,zero,1
   35bec:	02f60063          	beq	a2,a5,35c0c <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x3c>
   35bf0:	00200793          	addi	a5,zero,2
   35bf4:	0af60c63          	beq	a2,a5,35cac <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0xdc>
}
   35bf8:	01813083          	ld	ra,24(sp)
   35bfc:	01013403          	ld	s0,16(sp)
   35c00:	00813483          	ld	s1,8(sp)
   35c04:	02010113          	addi	sp,sp,32
   35c08:	00008067          	jalr	zero,0(ra)
   35c0c:	00100793          	addi	a5,zero,1
   35c10:	06f68463          	beq	a3,a5,35c78 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0xa8>
   35c14:	00200793          	addi	a5,zero,2
   35c18:	fef690e3          	bne	a3,a5,35bf8 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    return (T)__builtin_bswap32((std::uint32_t)v);
   35c1c:	0005a503          	lw	a0,0(a1)
   35c20:	f00e00ef          	jal	ra,16320 <__bswapsi2@plt>
  shn shnxd;           // Section table index
  Elf64::Addr value;   // Symbol value (address)
  Elf64::Xword size;   // Size of object

  template <typename E2> void from(const E2 &o) {
    name = swizzle(o.name, o.order, order);
   35c24:	00a42023          	sw	a0,0(s0)
   35c28:	0044a503          	lw	a0,4(s1)
   35c2c:	ef4e00ef          	jal	ra,16320 <__bswapsi2@plt>
    value = swizzle(o.value, o.order, order);
   35c30:	02051513          	slli	a0,a0,0x20
   35c34:	02055513          	srli	a0,a0,0x20
   35c38:	00a43423          	sd	a0,8(s0)
   35c3c:	0084a503          	lw	a0,8(s1)
   35c40:	ee0e00ef          	jal	ra,16320 <__bswapsi2@plt>
    size = swizzle(o.size, o.order, order);
   35c44:	02051513          	slli	a0,a0,0x20
   35c48:	02055513          	srli	a0,a0,0x20
   35c4c:	00a43823          	sd	a0,16(s0)
    info = o.info;
   35c50:	00c4c783          	lbu	a5,12(s1)
   35c54:	00f40223          	sb	a5,4(s0)
    other = o.other;
   35c58:	00d4c783          	lbu	a5,13(s1)
   35c5c:	00f402a3          	sb	a5,5(s0)
    shnxd = swizzle(o.shnxd, o.order, order);
   35c60:	00e4d783          	lhu	a5,14(s1)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   35c64:	0087d71b          	srliw	a4,a5,0x8
   35c68:	0087979b          	slliw	a5,a5,0x8
   35c6c:	00f767b3          	or	a5,a4,a5
   35c70:	00f41323          	sh	a5,6(s0)
  }
   35c74:	f85ff06f          	jal	zero,35bf8 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    name = swizzle(o.name, o.order, order);
   35c78:	0005a783          	lw	a5,0(a1)
   35c7c:	00f52023          	sw	a5,0(a0)
    value = swizzle(o.value, o.order, order);
   35c80:	0045e783          	lwu	a5,4(a1)
   35c84:	00f53423          	sd	a5,8(a0)
    size = swizzle(o.size, o.order, order);
   35c88:	0085e783          	lwu	a5,8(a1)
   35c8c:	00f53823          	sd	a5,16(a0)
    info = o.info;
   35c90:	00c5c783          	lbu	a5,12(a1)
   35c94:	00f50223          	sb	a5,4(a0)
    other = o.other;
   35c98:	00d5c783          	lbu	a5,13(a1)
   35c9c:	00f502a3          	sb	a5,5(a0)
    shnxd = swizzle(o.shnxd, o.order, order);
   35ca0:	00e5d783          	lhu	a5,14(a1)
   35ca4:	00f51323          	sh	a5,6(a0)
  }
   35ca8:	f51ff06f          	jal	zero,35bf8 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
   35cac:	00100793          	addi	a5,zero,1
   35cb0:	04f68c63          	beq	a3,a5,35d08 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x138>
   35cb4:	00200793          	addi	a5,zero,2
   35cb8:	f4f690e3          	bne	a3,a5,35bf8 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    return (T)__builtin_bswap32((std::uint32_t)v);
   35cbc:	0005a503          	lw	a0,0(a1)
   35cc0:	e60e00ef          	jal	ra,16320 <__bswapsi2@plt>
    name = swizzle(o.name, o.order, order);
   35cc4:	00a42023          	sw	a0,0(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   35cc8:	0084b503          	ld	a0,8(s1)
   35ccc:	825e00ef          	jal	ra,164f0 <__bswapdi2@plt>
    value = swizzle(o.value, o.order, order);
   35cd0:	00a43423          	sd	a0,8(s0)
   35cd4:	0104b503          	ld	a0,16(s1)
   35cd8:	819e00ef          	jal	ra,164f0 <__bswapdi2@plt>
    size = swizzle(o.size, o.order, order);
   35cdc:	00a43823          	sd	a0,16(s0)
    info = o.info;
   35ce0:	0044c783          	lbu	a5,4(s1)
   35ce4:	00f40223          	sb	a5,4(s0)
    other = o.other;
   35ce8:	0054c783          	lbu	a5,5(s1)
   35cec:	00f402a3          	sb	a5,5(s0)
    shnxd = swizzle(o.shnxd, o.order, order);
   35cf0:	0064d783          	lhu	a5,6(s1)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   35cf4:	0087d71b          	srliw	a4,a5,0x8
   35cf8:	0087979b          	slliw	a5,a5,0x8
   35cfc:	00f767b3          	or	a5,a4,a5
   35d00:	00f41323          	sh	a5,6(s0)
  }
   35d04:	ef5ff06f          	jal	zero,35bf8 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    name = swizzle(o.name, o.order, order);
   35d08:	0005a783          	lw	a5,0(a1)
   35d0c:	00f52023          	sw	a5,0(a0)
    value = swizzle(o.value, o.order, order);
   35d10:	0085b783          	ld	a5,8(a1)
   35d14:	00f53423          	sd	a5,8(a0)
    size = swizzle(o.size, o.order, order);
   35d18:	0105b783          	ld	a5,16(a1)
   35d1c:	00f53823          	sd	a5,16(a0)
    info = o.info;
   35d20:	0045c783          	lbu	a5,4(a1)
   35d24:	00f50223          	sb	a5,4(a0)
    other = o.other;
   35d28:	0055c783          	lbu	a5,5(a1)
   35d2c:	00f502a3          	sb	a5,5(a0)
    shnxd = swizzle(o.shnxd, o.order, order);
   35d30:	0065d783          	lhu	a5,6(a1)
   35d34:	00f51323          	sh	a5,6(a0)
  }
   35d38:	ec1ff06f          	jal	zero,35bf8 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>

0000000000035d3c <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)>:
      vector<_Tp, _Alloc>::
   35d3c:	fb010113          	addi	sp,sp,-80
   35d40:	04113423          	sd	ra,72(sp)
   35d44:	04813023          	sd	s0,64(sp)
   35d48:	02913c23          	sd	s1,56(sp)
   35d4c:	03213823          	sd	s2,48(sp)
   35d50:	03313423          	sd	s3,40(sp)
   35d54:	03413023          	sd	s4,32(sp)
   35d58:	01513c23          	sd	s5,24(sp)
   35d5c:	01613823          	sd	s6,16(sp)
   35d60:	01713423          	sd	s7,8(sp)
   35d64:	01813023          	sd	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   35d68:	00853903          	ld	s2,8(a0)
   35d6c:	00053a03          	ld	s4,0(a0)
   35d70:	414907b3          	sub	a5,s2,s4
   35d74:	4047d793          	srai	a5,a5,0x4
	if (max_size() - size() < __n)
   35d78:	fff00713          	addi	a4,zero,-1
   35d7c:	00575713          	srli	a4,a4,0x5
   35d80:	04e78463          	beq	a5,a4,35dc8 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x8c>
   35d84:	00050a93          	addi	s5,a0,0
   35d88:	00058b93          	addi	s7,a1,0
   35d8c:	00060493          	addi	s1,a2,0
   35d90:	00058413          	addi	s0,a1,0
      return __a;
   35d94:	00078713          	addi	a4,a5,0
      if (__a < __b)
   35d98:	03490e63          	beq	s2,s4,35dd4 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x98>
	const size_type __len = size() + (std::max)(size(), __n);
   35d9c:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   35da0:	04f76263          	bltu	a4,a5,35de4 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xa8>
   35da4:	00070b13          	addi	s6,a4,0
   35da8:	fff00793          	addi	a5,zero,-1
   35dac:	0057d793          	srli	a5,a5,0x5
   35db0:	00e7f463          	bgeu	a5,a4,35db8 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x7c>
   35db4:	00078b13          	addi	s6,a5,0
    { return __lhs.base() - __rhs.base(); }
   35db8:	414b8c33          	sub	s8,s7,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   35dbc:	00000993          	addi	s3,zero,0
   35dc0:	02070e63          	beq	a4,zero,35dfc <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xc0>
   35dc4:	02c0006f          	jal	zero,35df0 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xb4>
	  __throw_length_error(__N(__s));
   35dc8:	00001517          	auipc	a0,0x1
   35dcc:	ca050513          	addi	a0,a0,-864 # 36a68 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   35dd0:	e10e00ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   35dd4:	00100713          	addi	a4,zero,1
   35dd8:	fc5ff06f          	jal	zero,35d9c <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x60>
      _ForwardIterator __cur = __result;
   35ddc:	00098693          	addi	a3,s3,0
   35de0:	0680006f          	jal	zero,35e48 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x10c>
   35de4:	414b8c33          	sub	s8,s7,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   35de8:	fff00b13          	addi	s6,zero,-1
   35dec:	005b5b13          	srli	s6,s6,0x5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   35df0:	004b1513          	slli	a0,s6,0x4
   35df4:	ecce00ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   35df8:	00050993          	addi	s3,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   35dfc:	018987b3          	add	a5,s3,s8
      : _M_ptr(__r._M_ptr), _M_refcount()
   35e00:	0004b703          	ld	a4,0(s1)
   35e04:	00e7b023          	sd	a4,0(a5)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   35e08:	0084b703          	ld	a4,8(s1)
	__r._M_pi = _M_pi;
   35e0c:	0004b423          	sd	zero,8(s1)
	_M_pi = __tmp;
   35e10:	00e7b423          	sd	a4,8(a5)
	__r._M_ptr = nullptr;
   35e14:	0004b023          	sd	zero,0(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   35e18:	fd4402e3          	beq	s0,s4,35ddc <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xa0>
   35e1c:	414b86b3          	sub	a3,s7,s4
   35e20:	00d986b3          	add	a3,s3,a3
   35e24:	000a0713          	addi	a4,s4,0
      _ForwardIterator __cur = __result;
   35e28:	00098793          	addi	a5,s3,0
      : _M_ptr(__r._M_ptr), _M_refcount()
   35e2c:	00073603          	ld	a2,0(a4)
   35e30:	00c7b023          	sd	a2,0(a5)
	_M_pi = __tmp;
   35e34:	00873603          	ld	a2,8(a4)
   35e38:	00c7b423          	sd	a2,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   35e3c:	01070713          	addi	a4,a4,16
   35e40:	01078793          	addi	a5,a5,16
   35e44:	fed794e3          	bne	a5,a3,35e2c <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xf0>
	      ++__new_finish;
   35e48:	01068493          	addi	s1,a3,16
   35e4c:	03240663          	beq	s0,s2,35e78 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x13c>
   35e50:	41790bb3          	sub	s7,s2,s7
      _ForwardIterator __cur = __result;
   35e54:	00048793          	addi	a5,s1,0
      : _M_ptr(__r._M_ptr), _M_refcount()
   35e58:	00043703          	ld	a4,0(s0)
   35e5c:	00e7b023          	sd	a4,0(a5)
	_M_pi = __tmp;
   35e60:	00843703          	ld	a4,8(s0)
   35e64:	00e7b423          	sd	a4,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   35e68:	01040413          	addi	s0,s0,16
   35e6c:	01078793          	addi	a5,a5,16
   35e70:	ff2414e3          	bne	s0,s2,35e58 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x11c>
   35e74:	017484b3          	add	s1,s1,s7
	if (__p)
   35e78:	000a0663          	beq	s4,zero,35e84 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x148>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   35e7c:	000a0513          	addi	a0,s4,0
   35e80:	e30e00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   35e84:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   35e88:	009ab423          	sd	s1,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   35e8c:	004b1b13          	slli	s6,s6,0x4
   35e90:	016989b3          	add	s3,s3,s6
   35e94:	013ab823          	sd	s3,16(s5)
    }
   35e98:	04813083          	ld	ra,72(sp)
   35e9c:	04013403          	ld	s0,64(sp)
   35ea0:	03813483          	ld	s1,56(sp)
   35ea4:	03013903          	ld	s2,48(sp)
   35ea8:	02813983          	ld	s3,40(sp)
   35eac:	02013a03          	ld	s4,32(sp)
   35eb0:	01813a83          	ld	s5,24(sp)
   35eb4:	01013b03          	ld	s6,16(sp)
   35eb8:	00813b83          	ld	s7,8(sp)
   35ebc:	00013c03          	ld	s8,0(sp)
   35ec0:	05010113          	addi	sp,sp,80
   35ec4:	00008067          	jalr	zero,0(ra)

0000000000035ec8 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)>:
      vector<_Tp, _Alloc>::
   35ec8:	fb010113          	addi	sp,sp,-80
   35ecc:	04113423          	sd	ra,72(sp)
   35ed0:	04813023          	sd	s0,64(sp)
   35ed4:	02913c23          	sd	s1,56(sp)
   35ed8:	03213823          	sd	s2,48(sp)
   35edc:	03313423          	sd	s3,40(sp)
   35ee0:	03413023          	sd	s4,32(sp)
   35ee4:	01513c23          	sd	s5,24(sp)
   35ee8:	01613823          	sd	s6,16(sp)
   35eec:	01713423          	sd	s7,8(sp)
   35ef0:	01813023          	sd	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   35ef4:	00853903          	ld	s2,8(a0)
   35ef8:	00053a03          	ld	s4,0(a0)
   35efc:	414907b3          	sub	a5,s2,s4
   35f00:	4047d793          	srai	a5,a5,0x4
	if (max_size() - size() < __n)
   35f04:	fff00713          	addi	a4,zero,-1
   35f08:	00575713          	srli	a4,a4,0x5
   35f0c:	04e78463          	beq	a5,a4,35f54 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x8c>
   35f10:	00050a93          	addi	s5,a0,0
   35f14:	00058b93          	addi	s7,a1,0
   35f18:	00060493          	addi	s1,a2,0
   35f1c:	00058413          	addi	s0,a1,0
      return __a;
   35f20:	00078713          	addi	a4,a5,0
      if (__a < __b)
   35f24:	03490e63          	beq	s2,s4,35f60 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x98>
	const size_type __len = size() + (std::max)(size(), __n);
   35f28:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   35f2c:	04f76263          	bltu	a4,a5,35f70 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xa8>
   35f30:	00070b13          	addi	s6,a4,0
   35f34:	fff00793          	addi	a5,zero,-1
   35f38:	0057d793          	srli	a5,a5,0x5
   35f3c:	00e7f463          	bgeu	a5,a4,35f44 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x7c>
   35f40:	00078b13          	addi	s6,a5,0
   35f44:	414b8c33          	sub	s8,s7,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   35f48:	00000993          	addi	s3,zero,0
   35f4c:	02070e63          	beq	a4,zero,35f88 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xc0>
   35f50:	02c0006f          	jal	zero,35f7c <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xb4>
	  __throw_length_error(__N(__s));
   35f54:	00001517          	auipc	a0,0x1
   35f58:	b1450513          	addi	a0,a0,-1260 # 36a68 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   35f5c:	c84e00ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   35f60:	00100713          	addi	a4,zero,1
   35f64:	fc5ff06f          	jal	zero,35f28 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x60>
      _ForwardIterator __cur = __result;
   35f68:	00098693          	addi	a3,s3,0
   35f6c:	0680006f          	jal	zero,35fd4 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x10c>
   35f70:	414b8c33          	sub	s8,s7,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   35f74:	fff00b13          	addi	s6,zero,-1
   35f78:	005b5b13          	srli	s6,s6,0x5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   35f7c:	004b1513          	slli	a0,s6,0x4
   35f80:	d40e00ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   35f84:	00050993          	addi	s3,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   35f88:	018987b3          	add	a5,s3,s8
      : _M_ptr(__r._M_ptr), _M_refcount()
   35f8c:	0004b703          	ld	a4,0(s1)
   35f90:	00e7b023          	sd	a4,0(a5)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   35f94:	0084b703          	ld	a4,8(s1)
	__r._M_pi = _M_pi;
   35f98:	0004b423          	sd	zero,8(s1)
	_M_pi = __tmp;
   35f9c:	00e7b423          	sd	a4,8(a5)
	__r._M_ptr = nullptr;
   35fa0:	0004b023          	sd	zero,0(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   35fa4:	fd4402e3          	beq	s0,s4,35f68 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xa0>
   35fa8:	414b86b3          	sub	a3,s7,s4
   35fac:	00d986b3          	add	a3,s3,a3
   35fb0:	000a0713          	addi	a4,s4,0
      _ForwardIterator __cur = __result;
   35fb4:	00098793          	addi	a5,s3,0
      : _M_ptr(__r._M_ptr), _M_refcount()
   35fb8:	00073603          	ld	a2,0(a4)
   35fbc:	00c7b023          	sd	a2,0(a5)
	_M_pi = __tmp;
   35fc0:	00873603          	ld	a2,8(a4)
   35fc4:	00c7b423          	sd	a2,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   35fc8:	01070713          	addi	a4,a4,16
   35fcc:	01078793          	addi	a5,a5,16
   35fd0:	fed794e3          	bne	a5,a3,35fb8 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xf0>
	      ++__new_finish;
   35fd4:	01068493          	addi	s1,a3,16
   35fd8:	03240663          	beq	s0,s2,36004 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x13c>
   35fdc:	41790bb3          	sub	s7,s2,s7
      _ForwardIterator __cur = __result;
   35fe0:	00048793          	addi	a5,s1,0
      : _M_ptr(__r._M_ptr), _M_refcount()
   35fe4:	00043703          	ld	a4,0(s0)
   35fe8:	00e7b023          	sd	a4,0(a5)
	_M_pi = __tmp;
   35fec:	00843703          	ld	a4,8(s0)
   35ff0:	00e7b423          	sd	a4,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   35ff4:	01040413          	addi	s0,s0,16
   35ff8:	01078793          	addi	a5,a5,16
   35ffc:	ff2414e3          	bne	s0,s2,35fe4 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x11c>
   36000:	017484b3          	add	s1,s1,s7
	if (__p)
   36004:	000a0663          	beq	s4,zero,36010 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x148>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   36008:	000a0513          	addi	a0,s4,0
   3600c:	ca4e00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   36010:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   36014:	009ab423          	sd	s1,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   36018:	004b1b13          	slli	s6,s6,0x4
   3601c:	016989b3          	add	s3,s3,s6
   36020:	013ab823          	sd	s3,16(s5)
    }
   36024:	04813083          	ld	ra,72(sp)
   36028:	04013403          	ld	s0,64(sp)
   3602c:	03813483          	ld	s1,56(sp)
   36030:	03013903          	ld	s2,48(sp)
   36034:	02813983          	ld	s3,40(sp)
   36038:	02013a03          	ld	s4,32(sp)
   3603c:	01813a83          	ld	s5,24(sp)
   36040:	01013b03          	ld	s6,16(sp)
   36044:	00813b83          	ld	s7,8(sp)
   36048:	00013c03          	ld	s8,0(sp)
   3604c:	05010113          	addi	sp,sp,80
   36050:	00008067          	jalr	zero,0(ra)

0000000000036054 <elf::create_mmap_loader(int)>:
      throw range_error("offset exceeds file size");
    return (const char *)base + offset;
  }
};

std::shared_ptr<loader> create_mmap_loader(int fd) {
   36054:	fb010113          	addi	sp,sp,-80
   36058:	04113423          	sd	ra,72(sp)
   3605c:	04813023          	sd	s0,64(sp)
   36060:	02913c23          	sd	s1,56(sp)
   36064:	03213823          	sd	s2,48(sp)
   36068:	03313423          	sd	s3,40(sp)
   3606c:	00050913          	addi	s2,a0,0
   36070:	00058493          	addi	s1,a1,0
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   36074:	05000513          	addi	a0,zero,80
   36078:	c48e00ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   3607c:	00050413          	addi	s0,a0,0
   36080:	00052423          	sw	zero,8(a0)
   36084:	00052623          	sw	zero,12(a0)
   36088:	00052823          	sw	zero,16(a0)
   3608c:	00052a23          	sw	zero,20(a0)
   36090:	00052c23          	sw	zero,24(a0)
   36094:	00052e23          	sw	zero,28(a0)
   36098:	02053023          	sd	zero,32(a0)
   3609c:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   360a0:	00100793          	addi	a5,zero,1
   360a4:	02f52823          	sw	a5,48(a0)
   360a8:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   360ac:	0000c797          	auipc	a5,0xc
   360b0:	3fc7b783          	ld	a5,1020(a5) # 424a8 <vtable for std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x6f0>
   360b4:	01078793          	addi	a5,a5,16
   360b8:	00f53023          	sd	a5,0(a0)
   360bc:	03850993          	addi	s3,a0,56
  mmap_loader(int fd) {
   360c0:	0000c797          	auipc	a5,0xc
   360c4:	3987b783          	ld	a5,920(a5) # 42458 <vtable for elf::mmap_loader@@Base+0x6c8>
   360c8:	01078793          	addi	a5,a5,16
   360cc:	02f53c23          	sd	a5,56(a0)
    off_t end = lseek(fd, 0, SEEK_END);
   360d0:	00200613          	addi	a2,zero,2
   360d4:	00000593          	addi	a1,zero,0
   360d8:	00048513          	addi	a0,s1,0
   360dc:	d34e00ef          	jal	ra,16610 <lseek@plt>
    if (end == (off_t)-1)
   360e0:	fff00793          	addi	a5,zero,-1
   360e4:	02f50e63          	beq	a0,a5,36120 <elf::create_mmap_loader(int)+0xcc>
   360e8:	00050593          	addi	a1,a0,0
    lim = end;
   360ec:	04a43423          	sd	a0,72(s0)
    base = mmap(nullptr, lim, PROT_READ, MAP_SHARED, fd, 0);
   360f0:	00000793          	addi	a5,zero,0
   360f4:	00048713          	addi	a4,s1,0
   360f8:	00100693          	addi	a3,zero,1
   360fc:	00100613          	addi	a2,zero,1
   36100:	00000513          	addi	a0,zero,0
   36104:	b3ce00ef          	jal	ra,16440 <mmap@plt>
   36108:	04a43023          	sd	a0,64(s0)
    if (base == MAP_FAILED)
   3610c:	fff00793          	addi	a5,zero,-1
   36110:	06f50663          	beq	a0,a5,3617c <elf::create_mmap_loader(int)+0x128>
    close(fd);
   36114:	00048513          	addi	a0,s1,0
   36118:	e58e00ef          	jal	ra,16770 <close@plt>
   3611c:	0e00006f          	jal	zero,361fc <elf::create_mmap_loader(int)+0x1a8>
      throw system_error(errno, system_category(), "finding file length");
   36120:	02000513          	addi	a0,zero,32
   36124:	aace00ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   36128:	00050913          	addi	s2,a0,0
   3612c:	e34e00ef          	jal	ra,16760 <__errno_location@plt>
   36130:	00052483          	lw	s1,0(a0)
   36134:	acce00ef          	jal	ra,16400 <std::_V2::system_category()@plt>
   36138:	00050613          	addi	a2,a0,0
  public:
    error_code() noexcept
    : _M_value(0), _M_cat(&system_category()) { }

    error_code(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }
   3613c:	00912823          	sw	s1,16(sp)

    system_error(error_code __ec, const char* __what)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }

    system_error(int __v, const error_category& __ecat, const char* __what)
    : system_error(error_code(__v, __ecat), __what) { }
   36140:	00004697          	auipc	a3,0x4
   36144:	67868693          	addi	a3,a3,1656 # 3a7b8 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x80>
   36148:	01013583          	ld	a1,16(sp)
   3614c:	00090513          	addi	a0,s2,0
   36150:	0000c317          	auipc	t1,0xc
   36154:	2d833303          	ld	t1,728(t1) # 42428 <std::system_error::system_error(std::error_code, char const*)@@Base+0xc060>
   36158:	000300e7          	jalr	ra,0(t1)
   3615c:	0000c617          	auipc	a2,0xc
   36160:	2bc63603          	ld	a2,700(a2) # 42418 <std::system_error::~system_error()@GLIBCXX_3.4.11>
   36164:	0000c597          	auipc	a1,0xc
   36168:	1845b583          	ld	a1,388(a1) # 422e8 <typeinfo for std::system_error@GLIBCXX_3.4.11>
   3616c:	00090513          	addi	a0,s2,0
   36170:	cf0e00ef          	jal	ra,16660 <__cxa_throw@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   36174:	00050493          	addi	s1,a0,0
   36178:	0640006f          	jal	zero,361dc <elf::create_mmap_loader(int)+0x188>
      throw system_error(errno, system_category(), "mmap'ing file");
   3617c:	02000513          	addi	a0,zero,32
   36180:	a50e00ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   36184:	00050913          	addi	s2,a0,0
   36188:	dd8e00ef          	jal	ra,16760 <__errno_location@plt>
   3618c:	00052483          	lw	s1,0(a0)
   36190:	a70e00ef          	jal	ra,16400 <std::_V2::system_category()@plt>
   36194:	00050613          	addi	a2,a0,0
    : _M_value(__v), _M_cat(&__cat) { }
   36198:	00912023          	sw	s1,0(sp)
    : system_error(error_code(__v, __ecat), __what) { }
   3619c:	00004697          	auipc	a3,0x4
   361a0:	63468693          	addi	a3,a3,1588 # 3a7d0 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x98>
   361a4:	00013583          	ld	a1,0(sp)
   361a8:	00090513          	addi	a0,s2,0
   361ac:	0000c317          	auipc	t1,0xc
   361b0:	27c33303          	ld	t1,636(t1) # 42428 <std::system_error::system_error(std::error_code, char const*)@@Base+0xc060>
   361b4:	000300e7          	jalr	ra,0(t1)
   361b8:	0000c617          	auipc	a2,0xc
   361bc:	26063603          	ld	a2,608(a2) # 42418 <std::system_error::~system_error()@GLIBCXX_3.4.11>
   361c0:	0000c597          	auipc	a1,0xc
   361c4:	1285b583          	ld	a1,296(a1) # 422e8 <typeinfo for std::system_error@GLIBCXX_3.4.11>
   361c8:	00090513          	addi	a0,s2,0
   361cc:	c94e00ef          	jal	ra,16660 <__cxa_throw@plt>
      throw system_error(errno, system_category(), "finding file length");
   361d0:	00050493          	addi	s1,a0,0
   361d4:	00090513          	addi	a0,s2,0
   361d8:	a98e00ef          	jal	ra,16470 <__cxa_free_exception@plt>
   361dc:	00040513          	addi	a0,s0,0
   361e0:	ad0e00ef          	jal	ra,164b0 <operator delete(void*)@plt>
   361e4:	00048513          	addi	a0,s1,0
   361e8:	ca8e00ef          	jal	ra,16690 <_Unwind_Resume@plt>
      throw system_error(errno, system_category(), "mmap'ing file");
   361ec:	00050493          	addi	s1,a0,0
   361f0:	00090513          	addi	a0,s2,0
   361f4:	a7ce00ef          	jal	ra,16470 <__cxa_free_exception@plt>
   361f8:	fe5ff06f          	jal	zero,361dc <elf::create_mmap_loader(int)+0x188>
	: _M_ptr(__r._M_ptr), _M_refcount()
   361fc:	01393023          	sd	s3,0(s2)
	_M_pi = __tmp;
   36200:	00893423          	sd	s0,8(s2)
  return make_shared<mmap_loader>(fd);
}
   36204:	00090513          	addi	a0,s2,0
   36208:	04813083          	ld	ra,72(sp)
   3620c:	04013403          	ld	s0,64(sp)
   36210:	03813483          	ld	s1,56(sp)
   36214:	03013903          	ld	s2,48(sp)
   36218:	02813983          	ld	s3,40(sp)
   3621c:	05010113          	addi	sp,sp,80
   36220:	00008067          	jalr	zero,0(ra)

0000000000036224 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   36224:	00008067          	jalr	zero,0(ra)

0000000000036228 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   36228:	ff010113          	addi	sp,sp,-16
   3622c:	00113423          	sd	ra,8(sp)
      __pointer->~_Tp();
   36230:	03853783          	ld	a5,56(a0)
   36234:	0007b783          	ld	a5,0(a5)
   36238:	03850513          	addi	a0,a0,56
   3623c:	000780e7          	jalr	ra,0(a5)
      }
   36240:	00813083          	ld	ra,8(sp)
   36244:	01010113          	addi	sp,sp,16
   36248:	00008067          	jalr	zero,0(ra)

000000000003624c <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   3624c:	ff010113          	addi	sp,sp,-16
   36250:	00113423          	sd	ra,8(sp)
   36254:	00813023          	sd	s0,0(sp)
   36258:	03850413          	addi	s0,a0,56
	    ||
   3625c:	0000c797          	auipc	a5,0xc
   36260:	2d47b783          	ld	a5,724(a5) # 42530 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbbc0>
   36264:	02f58c63          	beq	a1,a5,3629c <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   36268:	0085b503          	ld	a0,8(a1)
   3626c:	0000c797          	auipc	a5,0xc
   36270:	19c7b783          	ld	a5,412(a5) # 42408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbce8>
   36274:	02f50463          	beq	a0,a5,3629c <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   36278:	00054703          	lbu	a4,0(a0)
   3627c:	02a00793          	addi	a5,zero,42
   36280:	02f70863          	beq	a4,a5,362b0 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   36284:	0000c597          	auipc	a1,0xc
   36288:	1845b583          	ld	a1,388(a1) # 42408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbce8>
   3628c:	884e00ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   36290:	00153513          	sltiu	a0,a0,1
   36294:	40a00533          	sub	a0,zero,a0
   36298:	00a47433          	and	s0,s0,a0
      }
   3629c:	00040513          	addi	a0,s0,0
   362a0:	00813083          	ld	ra,8(sp)
   362a4:	00013403          	ld	s0,0(sp)
   362a8:	01010113          	addi	sp,sp,16
   362ac:	00008067          	jalr	zero,0(ra)
	return nullptr;
   362b0:	00000413          	addi	s0,zero,0
   362b4:	fe9ff06f          	jal	zero,3629c <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

00000000000362b8 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   362b8:	ff010113          	addi	sp,sp,-16
   362bc:	00113423          	sd	ra,8(sp)
   362c0:	9f0e00ef          	jal	ra,164b0 <operator delete(void*)@plt>
   362c4:	00813083          	ld	ra,8(sp)
   362c8:	01010113          	addi	sp,sp,16
   362cc:	00008067          	jalr	zero,0(ra)

00000000000362d0 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   362d0:	ff010113          	addi	sp,sp,-16
   362d4:	00113423          	sd	ra,8(sp)
   362d8:	9d8e00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   362dc:	00813083          	ld	ra,8(sp)
   362e0:	01010113          	addi	sp,sp,16
   362e4:	00008067          	jalr	zero,0(ra)

00000000000362e8 <elf::mmap_loader::load(long, unsigned long)>:
    if (offset + size > lim)
   362e8:	00c58633          	add	a2,a1,a2
   362ec:	01053783          	ld	a5,16(a0)
   362f0:	00c7e863          	bltu	a5,a2,36300 <elf::mmap_loader::load(long, unsigned long)+0x18>
    return (const char *)base + offset;
   362f4:	00853503          	ld	a0,8(a0)
   362f8:	00b50533          	add	a0,a0,a1
  }
   362fc:	00008067          	jalr	zero,0(ra)
  const void *load(off_t offset, size_t size) {
   36300:	fe010113          	addi	sp,sp,-32
   36304:	00113c23          	sd	ra,24(sp)
   36308:	00813823          	sd	s0,16(sp)
   3630c:	00913423          	sd	s1,8(sp)
      throw range_error("offset exceeds file size");
   36310:	01000513          	addi	a0,zero,16
   36314:	8bce00ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   36318:	00050493          	addi	s1,a0,0
   3631c:	00004597          	auipc	a1,0x4
   36320:	47458593          	addi	a1,a1,1140 # 3a790 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x58>
   36324:	b4ce00ef          	jal	ra,16670 <std::range_error::range_error(char const*)@plt>
   36328:	0000c617          	auipc	a2,0xc
   3632c:	0b063603          	ld	a2,176(a2) # 423d8 <std::range_error::~range_error()@GLIBCXX_3.4>
   36330:	0000c597          	auipc	a1,0xc
   36334:	2185b583          	ld	a1,536(a1) # 42548 <typeinfo for std::range_error@GLIBCXX_3.4>
   36338:	00048513          	addi	a0,s1,0
   3633c:	b24e00ef          	jal	ra,16660 <__cxa_throw@plt>
   36340:	00050413          	addi	s0,a0,0
   36344:	00048513          	addi	a0,s1,0
   36348:	928e00ef          	jal	ra,16470 <__cxa_free_exception@plt>
   3634c:	00040513          	addi	a0,s0,0
   36350:	b40e00ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000036354 <elf::mmap_loader::~mmap_loader()>:
  ~mmap_loader() { munmap(base, lim); }
   36354:	ff010113          	addi	sp,sp,-16
   36358:	00113423          	sd	ra,8(sp)
   3635c:	0000c797          	auipc	a5,0xc
   36360:	0fc7b783          	ld	a5,252(a5) # 42458 <vtable for elf::mmap_loader@@Base+0x6c8>
   36364:	01078793          	addi	a5,a5,16
   36368:	00f53023          	sd	a5,0(a0)
   3636c:	01053583          	ld	a1,16(a0)
   36370:	00853503          	ld	a0,8(a0)
   36374:	90ce00ef          	jal	ra,16480 <munmap@plt>
   36378:	00813083          	ld	ra,8(sp)
   3637c:	01010113          	addi	sp,sp,16
   36380:	00008067          	jalr	zero,0(ra)

0000000000036384 <elf::mmap_loader::~mmap_loader()>:
   36384:	ff010113          	addi	sp,sp,-16
   36388:	00113423          	sd	ra,8(sp)
   3638c:	00813023          	sd	s0,0(sp)
   36390:	00050413          	addi	s0,a0,0
   36394:	0000c797          	auipc	a5,0xc
   36398:	0c47b783          	ld	a5,196(a5) # 42458 <vtable for elf::mmap_loader@@Base+0x6c8>
   3639c:	01078793          	addi	a5,a5,16
   363a0:	00f53023          	sd	a5,0(a0)
   363a4:	01053583          	ld	a1,16(a0)
   363a8:	00853503          	ld	a0,8(a0)
   363ac:	8d4e00ef          	jal	ra,16480 <munmap@plt>
   363b0:	00040513          	addi	a0,s0,0
   363b4:	8fce00ef          	jal	ra,164b0 <operator delete(void*)@plt>
   363b8:	00813083          	ld	ra,8(sp)
   363bc:	00013403          	ld	s0,0(sp)
   363c0:	01010113          	addi	sp,sp,16
   363c4:	00008067          	jalr	zero,0(ra)

00000000000363c8 <std::system_error::system_error(std::error_code, char const*)>:
    system_error(error_code __ec, const char* __what)
   363c8:	f6010113          	addi	sp,sp,-160
   363cc:	08113c23          	sd	ra,152(sp)
   363d0:	08813823          	sd	s0,144(sp)
   363d4:	08913423          	sd	s1,136(sp)
   363d8:	09213023          	sd	s2,128(sp)
   363dc:	07313c23          	sd	s3,120(sp)
   363e0:	00050493          	addi	s1,a0,0
   363e4:	00058713          	addi	a4,a1,0
   363e8:	00b13023          	sd	a1,0(sp)
   363ec:	00c13423          	sd	a2,8(sp)
   363f0:	00068913          	addi	s2,a3,0
    category() const noexcept { return *_M_cat; }
   363f4:	00060593          	addi	a1,a2,0
    { return category().message(value()); }
   363f8:	00063783          	ld	a5,0(a2)
   363fc:	0207b783          	ld	a5,32(a5)
   36400:	0007061b          	addiw	a2,a4,0
   36404:	05010413          	addi	s0,sp,80
   36408:	00040513          	addi	a0,s0,0
   3640c:	000780e7          	jalr	ra,0(a5)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   36410:	00200713          	addi	a4,zero,2
   36414:	00004697          	auipc	a3,0x4
   36418:	39c68693          	addi	a3,a3,924 # 3a7b0 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x78>
   3641c:	00000613          	addi	a2,zero,0
   36420:	00000593          	addi	a1,zero,0
   36424:	00040513          	addi	a0,s0,0
   36428:	9d8e00ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   3642c:	00050413          	addi	s0,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   36430:	04010793          	addi	a5,sp,64
   36434:	02f13823          	sd	a5,48(sp)
      { return _M_dataplus._M_p; }
   36438:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   3643c:	01050993          	addi	s3,a0,16
	if (__str._M_is_local())
   36440:	05378463          	beq	a5,s3,36488 <std::system_error::system_error(std::error_code, char const*)+0xc0>
      { _M_dataplus._M_p = __p; }
   36444:	02f13823          	sd	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   36448:	01053783          	ld	a5,16(a0)
   3644c:	04f13023          	sd	a5,64(sp)
      { _M_string_length = __length; }
   36450:	00843783          	ld	a5,8(s0)
   36454:	02f13c23          	sd	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   36458:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   3645c:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   36460:	00040823          	sb	zero,16(s0)
	return __builtin_strlen(__s);
   36464:	00090513          	addi	a0,s2,0
   36468:	f59df0ef          	jal	ra,163c0 <strlen@plt>
   3646c:	00050713          	addi	a4,a0,0
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   36470:	00090693          	addi	a3,s2,0
   36474:	00000613          	addi	a2,zero,0
   36478:	00000593          	addi	a1,zero,0
   3647c:	03010513          	addi	a0,sp,48
   36480:	980e00ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   36484:	0200006f          	jal	zero,364a4 <std::system_error::system_error(std::error_code, char const*)+0xdc>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   36488:	00853603          	ld	a2,8(a0)
   3648c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   36490:	fc0600e3          	beq	a2,zero,36450 <std::system_error::system_error(std::error_code, char const*)+0x88>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   36494:	00098593          	addi	a1,s3,0
   36498:	04010513          	addi	a0,sp,64
   3649c:	8b4e00ef          	jal	ra,16550 <memcpy@plt>
   364a0:	fb1ff06f          	jal	zero,36450 <std::system_error::system_error(std::error_code, char const*)+0x88>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   364a4:	00050413          	addi	s0,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   364a8:	02010793          	addi	a5,sp,32
   364ac:	00f13823          	sd	a5,16(sp)
      { return _M_dataplus._M_p; }
   364b0:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   364b4:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   364b8:	03278a63          	beq	a5,s2,364ec <std::system_error::system_error(std::error_code, char const*)+0x124>
      { _M_dataplus._M_p = __p; }
   364bc:	00f13823          	sd	a5,16(sp)
      { _M_allocated_capacity = __capacity; }
   364c0:	01053783          	ld	a5,16(a0)
   364c4:	02f13023          	sd	a5,32(sp)
      { _M_string_length = __length; }
   364c8:	00843783          	ld	a5,8(s0)
   364cc:	00f13c23          	sd	a5,24(sp)
      { _M_dataplus._M_p = __p; }
   364d0:	01243023          	sd	s2,0(s0)
      { _M_string_length = __length; }
   364d4:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   364d8:	00040823          	sb	zero,16(s0)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }
   364dc:	01010593          	addi	a1,sp,16
   364e0:	00048513          	addi	a0,s1,0
   364e4:	85ce00ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   364e8:	0200006f          	jal	zero,36508 <std::system_error::system_error(std::error_code, char const*)+0x140>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   364ec:	00853603          	ld	a2,8(a0)
   364f0:	00160613          	addi	a2,a2,1
	if (__n == 0)
   364f4:	fc060ae3          	beq	a2,zero,364c8 <std::system_error::system_error(std::error_code, char const*)+0x100>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   364f8:	00090593          	addi	a1,s2,0
   364fc:	02010513          	addi	a0,sp,32
   36500:	850e00ef          	jal	ra,16550 <memcpy@plt>
   36504:	fc5ff06f          	jal	zero,364c8 <std::system_error::system_error(std::error_code, char const*)+0x100>
      { return _M_dataplus._M_p; }
   36508:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   3650c:	02010793          	addi	a5,sp,32
   36510:	00f50463          	beq	a0,a5,36518 <std::system_error::system_error(std::error_code, char const*)+0x150>
   36514:	f9ddf0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   36518:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   3651c:	04010793          	addi	a5,sp,64
   36520:	00f50463          	beq	a0,a5,36528 <std::system_error::system_error(std::error_code, char const*)+0x160>
   36524:	f8ddf0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   36528:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   3652c:	06010793          	addi	a5,sp,96
   36530:	00f50463          	beq	a0,a5,36538 <std::system_error::system_error(std::error_code, char const*)+0x170>
   36534:	f7ddf0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   36538:	0000c797          	auipc	a5,0xc
   3653c:	0487b783          	ld	a5,72(a5) # 42580 <vtable for std::system_error@GLIBCXX_3.4.11>
   36540:	01078793          	addi	a5,a5,16
   36544:	00f4b023          	sd	a5,0(s1)
   36548:	00013783          	ld	a5,0(sp)
   3654c:	00f4b823          	sd	a5,16(s1)
   36550:	00813783          	ld	a5,8(sp)
   36554:	00f4bc23          	sd	a5,24(s1)
   36558:	09813083          	ld	ra,152(sp)
   3655c:	09013403          	ld	s0,144(sp)
   36560:	08813483          	ld	s1,136(sp)
   36564:	08013903          	ld	s2,128(sp)
   36568:	07813983          	ld	s3,120(sp)
   3656c:	0a010113          	addi	sp,sp,160
   36570:	00008067          	jalr	zero,0(ra)
      { return _M_dataplus._M_p; }
   36574:	00050413          	addi	s0,a0,0
   36578:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   3657c:	02010793          	addi	a5,sp,32
   36580:	00f50463          	beq	a0,a5,36588 <std::system_error::system_error(std::error_code, char const*)+0x1c0>
   36584:	f2ddf0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   36588:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   3658c:	04010793          	addi	a5,sp,64
   36590:	00f50463          	beq	a0,a5,36598 <std::system_error::system_error(std::error_code, char const*)+0x1d0>
   36594:	f1ddf0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   36598:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   3659c:	06010793          	addi	a5,sp,96
   365a0:	00f50463          	beq	a0,a5,365a8 <std::system_error::system_error(std::error_code, char const*)+0x1e0>
   365a4:	f0ddf0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   365a8:	00040513          	addi	a0,s0,0
   365ac:	8e4e00ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   365b0:	00050413          	addi	s0,a0,0
   365b4:	fd5ff06f          	jal	zero,36588 <std::system_error::system_error(std::error_code, char const*)+0x1c0>
   365b8:	00050413          	addi	s0,a0,0
   365bc:	fddff06f          	jal	zero,36598 <std::system_error::system_error(std::error_code, char const*)+0x1d0>

00000000000365c0 <__libc_csu_init>:
   the libc.a module in that it doesn't call the preinit array.  */


void
__libc_csu_init (int argc, char **argv, char **envp)
{
   365c0:	7139                	c.addi16sp	sp,-64
   365c2:	f822                	c.sdsp	s0,48(sp)
   365c4:	f04a                	c.sdsp	s2,32(sp)

#if ELF_INITFINI
  _init ();
#endif

  const size_t size = __init_array_end - __init_array_start;
   365c6:	0000b797          	auipc	a5,0xb
   365ca:	12278793          	addi	a5,a5,290 # 416e8 <__do_global_dtors_aux_fini_array_entry>
   365ce:	0000b417          	auipc	s0,0xb
   365d2:	10a40413          	addi	s0,s0,266 # 416d8 <__frame_dummy_init_array_entry>
{
   365d6:	fc06                	c.sdsp	ra,56(sp)
   365d8:	f426                	c.sdsp	s1,40(sp)
   365da:	ec4e                	c.sdsp	s3,24(sp)
   365dc:	e852                	c.sdsp	s4,16(sp)
   365de:	e456                	c.sdsp	s5,8(sp)
  const size_t size = __init_array_end - __init_array_start;
   365e0:	40878933          	sub	s2,a5,s0
  for (size_t i = 0; i < size; i++)
   365e4:	02878163          	beq	a5,s0,36606 <__libc_csu_init+0x46>
   365e8:	89aa                	c.mv	s3,a0
   365ea:	8a2e                	c.mv	s4,a1
   365ec:	8ab2                	c.mv	s5,a2
   365ee:	40395913          	srai	s2,s2,0x3
   365f2:	4481                	c.li	s1,0
      (*__init_array_start [i]) (argc, argv, envp);
   365f4:	601c                	c.ld	a5,0(s0)
   365f6:	8656                	c.mv	a2,s5
   365f8:	85d2                	c.mv	a1,s4
   365fa:	854e                	c.mv	a0,s3
  for (size_t i = 0; i < size; i++)
   365fc:	0485                	c.addi	s1,1
      (*__init_array_start [i]) (argc, argv, envp);
   365fe:	9782                	c.jalr	a5
  for (size_t i = 0; i < size; i++)
   36600:	0421                	c.addi	s0,8
   36602:	ff24e9e3          	bltu	s1,s2,365f4 <__libc_csu_init+0x34>
}
   36606:	70e2                	c.ldsp	ra,56(sp)
   36608:	7442                	c.ldsp	s0,48(sp)
   3660a:	74a2                	c.ldsp	s1,40(sp)
   3660c:	7902                	c.ldsp	s2,32(sp)
   3660e:	69e2                	c.ldsp	s3,24(sp)
   36610:	6a42                	c.ldsp	s4,16(sp)
   36612:	6aa2                	c.ldsp	s5,8(sp)
   36614:	6121                	c.addi16sp	sp,64
   36616:	8082                	c.jr	ra

0000000000036618 <__libc_csu_fini>:

# if ELF_INITFINI
  _fini ();
# endif
#endif
}
   36618:	8082                	c.jr	ra
